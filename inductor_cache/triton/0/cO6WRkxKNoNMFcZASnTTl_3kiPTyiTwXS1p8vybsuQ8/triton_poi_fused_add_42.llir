; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = or disjoint i32 %12, 128, !dbg !12
  %15 = or disjoint i32 %12, 192, !dbg !12
  %16 = shl i32 %10, 2, !dbg !12
  %17 = and i32 %16, 12, !dbg !12
  %18 = and i32 %16, 252, !dbg !12
  %19 = and i32 %10, 255, !dbg !12
  %20 = or disjoint i32 %9, %12, !dbg !13
  %21 = or disjoint i32 %9, %13, !dbg !13
  %22 = or disjoint i32 %9, %14, !dbg !13
  %23 = or disjoint i32 %9, %15, !dbg !13
  %24 = or disjoint i32 %9, %18, !dbg !13
  %25 = or disjoint i32 %9, %19, !dbg !13
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %27 = shl i32 %26, 4, !dbg !15
  %28 = lshr i32 %10, 6, !dbg !16
  %29 = and i32 %28, 3, !dbg !16
  %30 = or disjoint i32 %27, %17, !dbg !17
  %31 = or disjoint i32 %27, %29, !dbg !17
  %32 = or disjoint i32 %31, 4, !dbg !17
  %33 = or disjoint i32 %31, 8, !dbg !17
  %34 = or disjoint i32 %31, 12, !dbg !17
  %35 = icmp slt i32 %30, 16, !dbg !18
  %36 = icmp slt i32 %31, 16, !dbg !18
  %37 = icmp slt i32 %32, 16, !dbg !18
  %38 = icmp slt i32 %33, 16, !dbg !18
  %39 = icmp slt i32 %34, 16, !dbg !18
  %40 = srem i32 %25, 512, !dbg !19
  %41 = shl i32 %20, 4, !dbg !20
  %42 = shl i32 %21, 4, !dbg !20
  %43 = shl i32 %22, 4, !dbg !20
  %44 = shl i32 %23, 4, !dbg !20
  %45 = add i32 %30, %41, !dbg !21
  %46 = add i32 %30, %42, !dbg !21
  %47 = add i32 %30, %43, !dbg !21
  %48 = add i32 %30, %44, !dbg !21
  %49 = sext i32 %45 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = sext i32 %46 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %47 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %48 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %35) #2, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !23
  %62 = bitcast i32 %58 to float, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = bitcast i32 %60 to float, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %35) #2, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !23
  %71 = bitcast i32 %67 to float, !dbg !23
  %72 = bitcast i32 %68 to float, !dbg !23
  %73 = bitcast i32 %69 to float, !dbg !23
  %74 = bitcast i32 %70 to float, !dbg !23
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %35) #2, !dbg !23
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !23
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !23
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !23
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !23
  %80 = bitcast i32 %76 to float, !dbg !23
  %81 = bitcast i32 %77 to float, !dbg !23
  %82 = bitcast i32 %78 to float, !dbg !23
  %83 = bitcast i32 %79 to float, !dbg !23
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %35) #2, !dbg !23
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !23
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !23
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !23
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !23
  %89 = bitcast i32 %85 to float, !dbg !23
  %90 = bitcast i32 %86 to float, !dbg !23
  %91 = bitcast i32 %87 to float, !dbg !23
  %92 = bitcast i32 %88 to float, !dbg !23
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !24
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !24
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !24
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !24
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 %35) #2, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !25
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !25
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !25
  %102 = bitcast i32 %98 to float, !dbg !25
  %103 = bitcast i32 %99 to float, !dbg !25
  %104 = bitcast i32 %100 to float, !dbg !25
  %105 = bitcast i32 %101 to float, !dbg !25
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %35) #2, !dbg !25
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !25
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !25
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !25
  %111 = bitcast i32 %107 to float, !dbg !25
  %112 = bitcast i32 %108 to float, !dbg !25
  %113 = bitcast i32 %109 to float, !dbg !25
  %114 = bitcast i32 %110 to float, !dbg !25
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %35) #2, !dbg !25
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !25
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !25
  %120 = bitcast i32 %116 to float, !dbg !25
  %121 = bitcast i32 %117 to float, !dbg !25
  %122 = bitcast i32 %118 to float, !dbg !25
  %123 = bitcast i32 %119 to float, !dbg !25
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %35) #2, !dbg !25
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !25
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !25
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !25
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !25
  %129 = bitcast i32 %125 to float, !dbg !25
  %130 = bitcast i32 %126 to float, !dbg !25
  %131 = bitcast i32 %127 to float, !dbg !25
  %132 = bitcast i32 %128 to float, !dbg !25
  %133 = shl i32 %31, 11, !dbg !26
  %134 = shl i32 %32, 11, !dbg !26
  %135 = shl i32 %33, 11, !dbg !26
  %136 = shl i32 %34, 11, !dbg !26
  %137 = add i32 %133, %24, !dbg !27
  %138 = add i32 %24, %134, !dbg !27
  %139 = add i32 %24, %135, !dbg !27
  %140 = add i32 %24, %136, !dbg !27
  %141 = sext i32 %137 to i64, !dbg !28
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !28
  %143 = sext i32 %138 to i64, !dbg !28
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !28
  %145 = sext i32 %139 to i64, !dbg !28
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !28
  %147 = sext i32 %140 to i64, !dbg !28
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !28
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %142, i1 %36) #2, !dbg !29
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !29
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !29
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !29
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %144, i1 %37) #2, !dbg !29
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !29
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !29
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !29
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !29
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %146, i1 %38) #2, !dbg !29
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !29
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !29
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !29
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !29
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %148, i1 %39) #2, !dbg !29
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !29
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !29
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !29
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !29
  %169 = shl i32 %10, 6, !dbg !29
  %170 = and i32 %169, 4032, !dbg !29
  %171 = or disjoint i32 %170, %29, !dbg !29
  %172 = and i32 %16, 1020, !dbg !29
  %173 = lshr exact i32 %170, 2, !dbg !29
  %174 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %173, !dbg !29
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %171, !dbg !29
  %176 = insertelement <1 x i32> poison, i32 %150, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !29
  %177 = or disjoint i32 %171, 16, !dbg !29
  %178 = lshr i32 %177, 4, !dbg !29
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !29
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %177, !dbg !29
  %181 = insertelement <1 x i32> poison, i32 %151, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !29
  %182 = or disjoint i32 %171, 32, !dbg !29
  %183 = lshr i32 %182, 4, !dbg !29
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !29
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !29
  %186 = insertelement <1 x i32> poison, i32 %152, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !29
  %187 = or disjoint i32 %171, 48, !dbg !29
  %188 = lshr i32 %187, 4, !dbg !29
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !29
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %187, !dbg !29
  %191 = insertelement <1 x i32> poison, i32 %153, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !29
  %192 = or disjoint i32 %171, 4, !dbg !29
  %193 = getelementptr float, ptr addrspace(3) %174, i32 %192, !dbg !29
  %194 = insertelement <1 x i32> poison, i32 %155, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !29
  %195 = or disjoint i32 %171, 20, !dbg !29
  %196 = lshr i32 %195, 4, !dbg !29
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !29
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %195, !dbg !29
  %199 = insertelement <1 x i32> poison, i32 %156, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !29
  %200 = or disjoint i32 %171, 36, !dbg !29
  %201 = lshr i32 %200, 4, !dbg !29
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !29
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %200, !dbg !29
  %204 = insertelement <1 x i32> poison, i32 %157, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !29
  %205 = or disjoint i32 %171, 52, !dbg !29
  %206 = lshr i32 %205, 4, !dbg !29
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %206, !dbg !29
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %205, !dbg !29
  %209 = insertelement <1 x i32> poison, i32 %158, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !29
  %210 = or disjoint i32 %171, 8, !dbg !29
  %211 = getelementptr float, ptr addrspace(3) %174, i32 %210, !dbg !29
  %212 = insertelement <1 x i32> poison, i32 %160, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #2, !dbg !29
  %213 = or disjoint i32 %171, 24, !dbg !29
  %214 = lshr i32 %213, 4, !dbg !29
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !29
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %213, !dbg !29
  %217 = insertelement <1 x i32> poison, i32 %161, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !29
  %218 = or disjoint i32 %171, 40, !dbg !29
  %219 = lshr i32 %218, 4, !dbg !29
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !29
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %218, !dbg !29
  %222 = insertelement <1 x i32> poison, i32 %162, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #2, !dbg !29
  %223 = or disjoint i32 %171, 56, !dbg !29
  %224 = lshr i32 %223, 4, !dbg !29
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !29
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %223, !dbg !29
  %227 = insertelement <1 x i32> poison, i32 %163, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #2, !dbg !29
  %228 = or disjoint i32 %171, 12, !dbg !29
  %229 = getelementptr float, ptr addrspace(3) %174, i32 %228, !dbg !29
  %230 = insertelement <1 x i32> poison, i32 %165, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #2, !dbg !29
  %231 = or disjoint i32 %171, 28, !dbg !29
  %232 = lshr i32 %231, 4, !dbg !29
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !29
  %234 = getelementptr float, ptr addrspace(3) %233, i32 %231, !dbg !29
  %235 = insertelement <1 x i32> poison, i32 %166, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #2, !dbg !29
  %236 = or disjoint i32 %171, 44, !dbg !29
  %237 = lshr i32 %236, 4, !dbg !29
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !29
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %236, !dbg !29
  %240 = insertelement <1 x i32> poison, i32 %167, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !29
  %241 = or disjoint i32 %171, 60, !dbg !29
  %242 = lshr i32 %241, 4, !dbg !29
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !29
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !29
  %245 = insertelement <1 x i32> poison, i32 %168, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %246 = lshr i32 %172, 4, !dbg !29
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !29
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %172, !dbg !29
  %249 = load float, ptr addrspace(3) %248, align 4, !dbg !29
  %250 = or disjoint i32 %172, 1, !dbg !29
  %251 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %250, !dbg !29
  %252 = load float, ptr addrspace(3) %251, align 4, !dbg !29
  %253 = or disjoint i32 %172, 2, !dbg !29
  %254 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %253, !dbg !29
  %255 = load float, ptr addrspace(3) %254, align 4, !dbg !29
  %256 = or disjoint i32 %172, 3, !dbg !29
  %257 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %256, !dbg !29
  %258 = load float, ptr addrspace(3) %257, align 4, !dbg !29
  %259 = or disjoint i32 %172, 1024, !dbg !29
  %260 = lshr i32 %259, 4, !dbg !29
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %260, !dbg !29
  %262 = getelementptr inbounds float, ptr addrspace(3) %261, i32 %259, !dbg !29
  %263 = load float, ptr addrspace(3) %262, align 4, !dbg !29
  %264 = or disjoint i32 %172, 1025, !dbg !29
  %265 = lshr i32 %264, 4, !dbg !29
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !29
  %267 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %264, !dbg !29
  %268 = load float, ptr addrspace(3) %267, align 4, !dbg !29
  %269 = or disjoint i32 %172, 1026, !dbg !29
  %270 = lshr i32 %269, 4, !dbg !29
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %270, !dbg !29
  %272 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %269, !dbg !29
  %273 = load float, ptr addrspace(3) %272, align 4, !dbg !29
  %274 = or disjoint i32 %172, 1027, !dbg !29
  %275 = lshr i32 %274, 4, !dbg !29
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !29
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %274, !dbg !29
  %278 = load float, ptr addrspace(3) %277, align 4, !dbg !29
  %279 = or disjoint i32 %172, 2048, !dbg !29
  %280 = lshr i32 %279, 4, !dbg !29
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !29
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %279, !dbg !29
  %283 = load float, ptr addrspace(3) %282, align 4, !dbg !29
  %284 = or disjoint i32 %172, 2049, !dbg !29
  %285 = lshr i32 %284, 4, !dbg !29
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !29
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %284, !dbg !29
  %288 = load float, ptr addrspace(3) %287, align 4, !dbg !29
  %289 = or disjoint i32 %172, 2050, !dbg !29
  %290 = lshr i32 %289, 4, !dbg !29
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !29
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %289, !dbg !29
  %293 = load float, ptr addrspace(3) %292, align 4, !dbg !29
  %294 = or disjoint i32 %172, 2051, !dbg !29
  %295 = lshr i32 %294, 4, !dbg !29
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !29
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %294, !dbg !29
  %298 = load float, ptr addrspace(3) %297, align 4, !dbg !29
  %299 = or disjoint i32 %172, 3072, !dbg !29
  %300 = lshr i32 %299, 4, !dbg !29
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !29
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %299, !dbg !29
  %303 = load float, ptr addrspace(3) %302, align 4, !dbg !29
  %304 = or disjoint i32 %172, 3073, !dbg !29
  %305 = lshr i32 %304, 4, !dbg !29
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !29
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %304, !dbg !29
  %308 = load float, ptr addrspace(3) %307, align 4, !dbg !29
  %309 = or disjoint i32 %172, 3074, !dbg !29
  %310 = lshr i32 %309, 4, !dbg !29
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %310, !dbg !29
  %312 = getelementptr inbounds float, ptr addrspace(3) %311, i32 %309, !dbg !29
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !29
  %314 = or disjoint i32 %172, 3075, !dbg !29
  %315 = lshr i32 %314, 4, !dbg !29
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %315, !dbg !29
  %317 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %314, !dbg !29
  %318 = load float, ptr addrspace(3) %317, align 4, !dbg !29
  %319 = sext i32 %40 to i64, !dbg !30
  %320 = getelementptr float, ptr addrspace(1) %3, i64 %319, !dbg !30
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %320, i1 true) #2, !dbg !31
  %322 = fadd float %62, %102, !dbg !32
  %323 = fadd float %63, %103, !dbg !32
  %324 = fadd float %64, %104, !dbg !32
  %325 = fadd float %65, %105, !dbg !32
  %326 = fadd float %71, %111, !dbg !32
  %327 = fadd float %72, %112, !dbg !32
  %328 = fadd float %73, %113, !dbg !32
  %329 = fadd float %74, %114, !dbg !32
  %330 = fadd float %80, %120, !dbg !32
  %331 = fadd float %81, %121, !dbg !32
  %332 = fadd float %82, %122, !dbg !32
  %333 = fadd float %83, %123, !dbg !32
  %334 = fadd float %89, %129, !dbg !32
  %335 = fadd float %90, %130, !dbg !32
  %336 = fadd float %91, %131, !dbg !32
  %337 = fadd float %92, %132, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %.idx = shl nuw nsw i32 %19, 3, !dbg !33
  %338 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !33
  %339 = insertelement <1 x i32> poison, i32 %321, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %.idx4 = shl nuw nsw i32 %12, 3, !dbg !33
  %340 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !33
  %341 = load float, ptr addrspace(3) %340, align 8, !dbg !33
  %.idx5 = shl nuw nsw i32 %13, 3, !dbg !33
  %342 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !33
  %343 = load float, ptr addrspace(3) %342, align 8, !dbg !33
  %.idx6 = shl nuw nsw i32 %14, 3, !dbg !33
  %344 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !33
  %345 = load float, ptr addrspace(3) %344, align 8, !dbg !33
  %.idx7 = shl nuw nsw i32 %15, 3, !dbg !33
  %346 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !33
  %347 = load float, ptr addrspace(3) %346, align 8, !dbg !33
  %348 = fadd float %249, %341, !dbg !34
  %349 = fadd float %252, %341, !dbg !34
  %350 = fadd float %255, %341, !dbg !34
  %351 = fadd float %258, %341, !dbg !34
  %352 = fadd float %263, %343, !dbg !34
  %353 = fadd float %268, %343, !dbg !34
  %354 = fadd float %273, %343, !dbg !34
  %355 = fadd float %278, %343, !dbg !34
  %356 = fadd float %283, %345, !dbg !34
  %357 = fadd float %288, %345, !dbg !34
  %358 = fadd float %293, %345, !dbg !34
  %359 = fadd float %298, %345, !dbg !34
  %360 = fadd float %303, %347, !dbg !34
  %361 = fadd float %308, %347, !dbg !34
  %362 = fadd float %313, %347, !dbg !34
  %363 = fadd float %318, %347, !dbg !34
  %364 = fadd float %322, %348, !dbg !33
  %365 = fadd float %323, %349, !dbg !33
  %366 = fadd float %324, %350, !dbg !33
  %367 = fadd float %325, %351, !dbg !33
  %368 = fadd float %326, %352, !dbg !33
  %369 = fadd float %327, %353, !dbg !33
  %370 = fadd float %328, %354, !dbg !33
  %371 = fadd float %329, %355, !dbg !33
  %372 = fadd float %330, %356, !dbg !33
  %373 = fadd float %331, %357, !dbg !33
  %374 = fadd float %332, %358, !dbg !33
  %375 = fadd float %333, %359, !dbg !33
  %376 = fadd float %334, %360, !dbg !33
  %377 = fadd float %335, %361, !dbg !33
  %378 = fadd float %336, %362, !dbg !33
  %379 = fadd float %337, %363, !dbg !33
  %380 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !35
  %381 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !35
  %382 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !35
  %383 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !35
  %384 = bitcast float %364 to i32, !dbg !36
  %385 = bitcast float %365 to i32, !dbg !36
  %386 = bitcast float %366 to i32, !dbg !36
  %387 = bitcast float %367 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %385, i32 %386, i32 %387, ptr addrspace(1) %380, i1 %35) #2, !dbg !36
  %388 = bitcast float %368 to i32, !dbg !36
  %389 = bitcast float %369 to i32, !dbg !36
  %390 = bitcast float %370 to i32, !dbg !36
  %391 = bitcast float %371 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %388, i32 %389, i32 %390, i32 %391, ptr addrspace(1) %381, i1 %35) #2, !dbg !36
  %392 = bitcast float %372 to i32, !dbg !36
  %393 = bitcast float %373 to i32, !dbg !36
  %394 = bitcast float %374 to i32, !dbg !36
  %395 = bitcast float %375 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %392, i32 %393, i32 %394, i32 %395, ptr addrspace(1) %382, i1 %35) #2, !dbg !36
  %396 = bitcast float %376 to i32, !dbg !36
  %397 = bitcast float %377 to i32, !dbg !36
  %398 = bitcast float %378 to i32, !dbg !36
  %399 = bitcast float %379 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %396, i32 %397, i32 %398, i32 %399, ptr addrspace(1) %383, i1 %35) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqu6pfeqhesuehadha3fbvu5ike2tefs5qdw24uibtx4gnv7njy7.py", directory: "inductor_cache/qu")
!4 = !{ptr @triton_poi_fused_add_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_42, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_42", linkageName: "triton_poi_fused_add_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 40, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 44, scope: !7)
!37 = !DILocation(line: 38, column: 4, scope: !7)
