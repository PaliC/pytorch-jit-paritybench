; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = lshr i32 %9, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = or disjoint i32 %19, %13, !dbg !16
  %21 = or disjoint i32 %19, %14, !dbg !16
  %22 = or disjoint i32 %19, %11, !dbg !16
  %23 = icmp slt i32 %20, 256, !dbg !17
  %24 = icmp slt i32 %21, 256, !dbg !17
  %25 = icmp slt i32 %22, 256, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %26 = sdiv i32 %.frozen, 256, !dbg !18
  %27 = mul i32 %26, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = shl i32 %20, 8, !dbg !20
  %29 = shl i32 %21, 8, !dbg !20
  %30 = shl i32 %26, 16, !dbg !21
  %31 = add i32 %30, %.decomposed, !dbg !22
  %32 = add i32 %31, %28, !dbg !23
  %33 = add i32 %31, %29, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %24) #2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = sext i32 %.decomposed to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %55 = insertelement <8 x i32> poison, i32 %47, i64 0, !dbg !25
  %56 = insertelement <8 x i32> %55, i32 %46, i64 1, !dbg !25
  %57 = insertelement <8 x i32> %56, i32 %45, i64 2, !dbg !25
  %58 = insertelement <8 x i32> %57, i32 %44, i64 3, !dbg !25
  %59 = insertelement <8 x i32> %58, i32 %42, i64 4, !dbg !25
  %60 = insertelement <8 x i32> %59, i32 %41, i64 5, !dbg !25
  %61 = insertelement <8 x i32> %60, i32 %40, i64 6, !dbg !25
  %62 = insertelement <8 x i32> %61, i32 %39, i64 7, !dbg !25
  %63 = bitcast <8 x i32> %62 to <8 x float>, !dbg !25
  %64 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !27
  %65 = insertelement <4 x i32> %64, i32 %53, i64 1, !dbg !27
  %66 = insertelement <4 x i32> %65, i32 %52, i64 2, !dbg !27
  %67 = insertelement <4 x i32> %66, i32 %51, i64 3, !dbg !27
  %68 = bitcast <4 x i32> %67 to <4 x float>, !dbg !27
  %69 = shufflevector <4 x float> %68, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %70 = fadd <8 x float> %69, %63, !dbg !28
  %71 = fcmp olt <8 x float> %70, zeroinitializer, !dbg !29
  %72 = extractelement <8 x i1> %71, i64 7, !dbg !33
  %73 = extractelement <8 x float> %70, i64 7, !dbg !33
  %74 = select i1 %72, float 0.000000e+00, float %73, !dbg !33
  %75 = extractelement <8 x i1> %71, i64 6, !dbg !33
  %76 = extractelement <8 x float> %70, i64 6, !dbg !33
  %77 = select i1 %75, float 0.000000e+00, float %76, !dbg !33
  %78 = extractelement <8 x i1> %71, i64 5, !dbg !33
  %79 = extractelement <8 x float> %70, i64 5, !dbg !33
  %80 = select i1 %78, float 0.000000e+00, float %79, !dbg !33
  %81 = extractelement <8 x i1> %71, i64 4, !dbg !33
  %82 = extractelement <8 x float> %70, i64 4, !dbg !33
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !33
  %84 = extractelement <8 x i1> %71, i64 3, !dbg !33
  %85 = extractelement <8 x float> %70, i64 3, !dbg !33
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !33
  %87 = extractelement <8 x i1> %71, i64 2, !dbg !33
  %88 = extractelement <8 x float> %70, i64 2, !dbg !33
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !33
  %90 = extractelement <8 x i1> %71, i64 1, !dbg !33
  %91 = extractelement <8 x float> %70, i64 1, !dbg !33
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !33
  %93 = extractelement <8 x i1> %71, i64 0, !dbg !33
  %94 = extractelement <8 x float> %70, i64 0, !dbg !33
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !33
  %96 = shl i32 %16, 8, !dbg !34
  %97 = shl i32 %17, 8, !dbg !34
  %98 = add i32 %22, %96, !dbg !35
  %99 = add i32 %22, %97, !dbg !35
  %100 = sext i32 %98 to i64, !dbg !36
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !36
  %102 = sext i32 %99 to i64, !dbg !36
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !36
  %104 = shl i32 %9, 7, !dbg !37
  %105 = and i32 %104, 896, !dbg !37
  %106 = or disjoint i32 %105, %13, !dbg !37
  %107 = and i32 %10, 508, !dbg !37
  %108 = lshr exact i32 %105, 3, !dbg !37
  %109 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %108, !dbg !37
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %106, !dbg !37
  %111 = bitcast float %74 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !37
  %112 = or disjoint i32 %106, 32, !dbg !37
  %113 = lshr i32 %112, 5, !dbg !37
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !37
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !37
  %116 = bitcast float %77 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !37
  %117 = or disjoint i32 %106, 64, !dbg !37
  %118 = lshr i32 %117, 5, !dbg !37
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !37
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !37
  %121 = bitcast float %80 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !37
  %122 = or disjoint i32 %106, 96, !dbg !37
  %123 = lshr i32 %122, 5, !dbg !37
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !37
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !37
  %126 = bitcast float %83 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !37
  %127 = or disjoint i32 %106, 16, !dbg !37
  %128 = getelementptr float, ptr addrspace(3) %109, i32 %127, !dbg !37
  %129 = bitcast float %86 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !37
  %130 = or disjoint i32 %106, 48, !dbg !37
  %131 = lshr i32 %130, 5, !dbg !37
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !37
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !37
  %134 = bitcast float %89 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !37
  %135 = or disjoint i32 %106, 80, !dbg !37
  %136 = lshr i32 %135, 5, !dbg !37
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !37
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %135, !dbg !37
  %139 = bitcast float %92 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !37
  %140 = or disjoint i32 %106, 112, !dbg !37
  %141 = lshr i32 %140, 5, !dbg !37
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !37
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !37
  %144 = bitcast float %95 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %145 = lshr i32 %107, 5, !dbg !37
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !37
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %107, !dbg !37
  %148 = load i32, ptr addrspace(3) %147, align 4, !dbg !37
  %149 = or disjoint i32 %107, 1, !dbg !37
  %150 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %149, !dbg !37
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !37
  %152 = or disjoint i32 %107, 2, !dbg !37
  %153 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %152, !dbg !37
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !37
  %155 = or disjoint i32 %107, 3, !dbg !37
  %156 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %155, !dbg !37
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !37
  %158 = or disjoint i32 %107, 512, !dbg !37
  %159 = lshr i32 %158, 5, !dbg !37
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %159, !dbg !37
  %161 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %158, !dbg !37
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !37
  %163 = or disjoint i32 %107, 513, !dbg !37
  %164 = lshr i32 %163, 5, !dbg !37
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !37
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %163, !dbg !37
  %167 = load i32, ptr addrspace(3) %166, align 4, !dbg !37
  %168 = or disjoint i32 %107, 514, !dbg !37
  %169 = lshr i32 %168, 5, !dbg !37
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !37
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %168, !dbg !37
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !37
  %173 = or disjoint i32 %107, 515, !dbg !37
  %174 = lshr i32 %173, 5, !dbg !37
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !37
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %173, !dbg !37
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %148, i32 %151, i32 %154, i32 %157, ptr addrspace(1) %101, i1 %25) #2, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %162, i32 %167, i32 %172, i32 %177, ptr addrspace(1) %103, i1 %25) #2, !dbg !37
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !38
  %179 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !38
  %180 = bitcast float %74 to i32, !dbg !39
  %181 = bitcast float %77 to i32, !dbg !39
  %182 = bitcast float %80 to i32, !dbg !39
  %183 = bitcast float %83 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %180, i32 %181, i32 %182, i32 %183, ptr addrspace(1) %178, i1 %23) #2, !dbg !39
  %184 = bitcast float %86 to i32, !dbg !39
  %185 = bitcast float %89 to i32, !dbg !39
  %186 = bitcast float %92 to i32, !dbg !39
  %187 = bitcast float %95 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %184, i32 %185, i32 %186, i32 %187, ptr addrspace(1) %179, i1 %24) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coumltecyrfthqk4zsdyjin7wno7h3xpzhqyqe5467yel6joxocd.py", directory: "inductor_cache/ou")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_12", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 34, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 45, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 56, scope: !7)
!40 = !DILocation(line: 38, column: 4, scope: !7)
