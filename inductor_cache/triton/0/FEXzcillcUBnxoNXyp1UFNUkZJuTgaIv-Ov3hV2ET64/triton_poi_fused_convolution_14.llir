; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %13, !dbg !17
  %23 = or disjoint i32 %21, %10, !dbg !17
  %24 = or disjoint i32 %21, %11, !dbg !17
  %25 = icmp slt i32 %22, 256, !dbg !18
  %26 = icmp slt i32 %23, 256, !dbg !18
  %27 = icmp slt i32 %24, 256, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %28 = sdiv i32 %.frozen, 64, !dbg !19
  %29 = mul i32 %28, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = shl i32 %14, 8, !dbg !21
  %31 = shl i32 %15, 8, !dbg !21
  %32 = add i32 %22, %30, !dbg !22
  %33 = add i32 %22, %31, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = and i1 %17, %25, !dbg !24
  %39 = and i1 %18, %25, !dbg !24
  %40 = and i1 %19, %26, !dbg !24
  %41 = and i1 %19, %27, !dbg !24
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #2, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #2, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %52 = shl i32 %23, 6, !dbg !26
  %53 = shl i32 %24, 6, !dbg !26
  %54 = shl i32 %28, 14, !dbg !27
  %55 = add i32 %54, %.decomposed, !dbg !28
  %56 = add i32 %55, %52, !dbg !29
  %57 = add i32 %55, %53, !dbg !29
  %58 = sext i32 %56 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !30
  %60 = sext i32 %57 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !30
  %62 = shl i32 %8, 7, !dbg !31
  %63 = and i32 %62, 896, !dbg !31
  %64 = or disjoint i32 %63, %10, !dbg !31
  %65 = and i32 %12, 508, !dbg !31
  %66 = lshr exact i32 %63, 3, !dbg !31
  %67 = or disjoint i32 %66, %64, !dbg !31
  %68 = zext nneg i32 %67 to i64, !dbg !31
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %68, !dbg !31
  %70 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !31
  %71 = or disjoint i32 %64, 32, !dbg !31
  %72 = lshr i32 %71, 3, !dbg !31
  %73 = and i32 %72, 116, !dbg !31
  %74 = add nuw nsw i32 %73, %71, !dbg !31
  %75 = zext nneg i32 %74 to i64, !dbg !31
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %75, !dbg !31
  %77 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !31
  %78 = or disjoint i32 %64, 64, !dbg !31
  %79 = lshr i32 %78, 3, !dbg !31
  %80 = and i32 %79, 120, !dbg !31
  %81 = add nuw nsw i32 %80, %78, !dbg !31
  %82 = zext nneg i32 %81 to i64, !dbg !31
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %82, !dbg !31
  %84 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !31
  %85 = or disjoint i32 %64, 96, !dbg !31
  %86 = lshr i32 %85, 3, !dbg !31
  %87 = and i32 %86, 124, !dbg !31
  %88 = add nuw nsw i32 %87, %85, !dbg !31
  %89 = zext nneg i32 %88 to i64, !dbg !31
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %89, !dbg !31
  %91 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !31
  %92 = or disjoint i32 %64, 16, !dbg !31
  %93 = add nuw nsw i32 %92, %66, !dbg !31
  %94 = zext nneg i32 %93 to i64, !dbg !31
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !31
  %96 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !31
  %97 = or disjoint i32 %64, 48, !dbg !31
  %98 = lshr i32 %97, 3, !dbg !31
  %99 = and i32 %98, 116, !dbg !31
  %100 = add nuw nsw i32 %99, %97, !dbg !31
  %101 = zext nneg i32 %100 to i64, !dbg !31
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %101, !dbg !31
  %103 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !31
  %104 = or disjoint i32 %64, 80, !dbg !31
  %105 = lshr i32 %104, 3, !dbg !31
  %106 = and i32 %105, 120, !dbg !31
  %107 = add nuw nsw i32 %106, %104, !dbg !31
  %108 = zext nneg i32 %107 to i64, !dbg !31
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %108, !dbg !31
  %110 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !31
  %111 = or disjoint i32 %64, 112, !dbg !31
  %112 = lshr i32 %111, 3, !dbg !31
  %113 = and i32 %112, 124, !dbg !31
  %114 = add nuw nsw i32 %113, %111, !dbg !31
  %115 = zext nneg i32 %114 to i64, !dbg !31
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !31
  %117 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %118 = lshr i32 %12, 3, !dbg !31
  %119 = and i32 %118, 60, !dbg !31
  %120 = add nuw nsw i32 %119, %65, !dbg !31
  %121 = zext nneg i32 %120 to i64, !dbg !31
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !31
  %123 = or disjoint i32 %65, 512, !dbg !31
  %124 = lshr i32 %123, 3, !dbg !31
  %125 = and i32 %124, 124, !dbg !31
  %126 = add nuw nsw i32 %125, %123, !dbg !31
  %127 = zext nneg i32 %126 to i64, !dbg !31
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %127, !dbg !31
  %129 = load <4 x i32>, ptr addrspace(3) %128, align 16, !dbg !31
  %.extract = load i32, ptr addrspace(3) %122, align 16, !dbg !31
  %130 = getelementptr inbounds i8, ptr addrspace(3) %122, i64 4, !dbg !31
  %.extract8 = load i32, ptr addrspace(3) %130, align 4, !dbg !31
  %131 = getelementptr inbounds i8, ptr addrspace(3) %122, i64 8, !dbg !31
  %.extract9 = load i32, ptr addrspace(3) %131, align 8, !dbg !31
  %132 = getelementptr inbounds i8, ptr addrspace(3) %122, i64 12, !dbg !31
  %.extract10 = load i32, ptr addrspace(3) %132, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %59, i1 %40) #2, !dbg !31
  %.extract11 = extractelement <4 x i32> %129, i64 0, !dbg !31
  %.extract12 = extractelement <4 x i32> %129, i64 1, !dbg !31
  %.extract13 = extractelement <4 x i32> %129, i64 2, !dbg !31
  %.extract14 = extractelement <4 x i32> %129, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %61, i1 %41) #2, !dbg !31
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !32
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %133, i1 %40) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %134, i1 %41) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctnmpkhb2we2udapmdtlmnwwsrm4pb4gdrad7yc5fumhsh5pq5ws.py", directory: "inductor_cache/tn")
!4 = !{ptr @triton_poi_fused_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_14", linkageName: "triton_poi_fused_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 33, scope: !7)
!27 = !DILocation(line: 33, column: 44, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 38, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 55, scope: !7)
!32 = !DILocation(line: 34, column: 25, scope: !7)
!33 = !DILocation(line: 34, column: 55, scope: !7)
!34 = !DILocation(line: 34, column: 4, scope: !7)
