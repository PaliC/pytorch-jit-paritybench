; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_div_mul_sub_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %13, 64, !dbg !12
  %15 = or disjoint i32 %13, 128, !dbg !12
  %16 = or disjoint i32 %13, 192, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 12, !dbg !12
  %19 = and i32 %17, 252, !dbg !12
  %20 = and i32 %11, 255, !dbg !12
  %21 = or disjoint i32 %10, %13, !dbg !13
  %22 = or disjoint i32 %10, %14, !dbg !13
  %23 = or disjoint i32 %10, %15, !dbg !13
  %24 = or disjoint i32 %10, %16, !dbg !13
  %25 = or disjoint i32 %10, %19, !dbg !13
  %26 = or disjoint i32 %10, %20, !dbg !13
  %27 = icmp slt i32 %21, 1536, !dbg !14
  %28 = icmp slt i32 %22, 1536, !dbg !14
  %29 = icmp slt i32 %23, 1536, !dbg !14
  %30 = icmp slt i32 %24, 1536, !dbg !14
  %31 = icmp slt i32 %25, 1536, !dbg !14
  %32 = icmp slt i32 %26, 1536, !dbg !14
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %34 = shl i32 %33, 4, !dbg !16
  %.lobit23 = lshr i32 %11, 6, !dbg !17
  %35 = and i32 %.lobit23, 3, !dbg !17
  %36 = or disjoint i32 %34, %18, !dbg !18
  %37 = or disjoint i32 %34, %35, !dbg !18
  %38 = or disjoint i32 %37, 4, !dbg !18
  %39 = or disjoint i32 %37, 8, !dbg !18
  %40 = or disjoint i32 %37, 12, !dbg !18
  %41 = icmp slt i32 %36, 16, !dbg !19
  %42 = icmp slt i32 %37, 16, !dbg !19
  %43 = icmp slt i32 %38, 16, !dbg !19
  %44 = icmp slt i32 %39, 16, !dbg !19
  %45 = icmp slt i32 %40, 16, !dbg !19
  %.frozen = freeze i32 %25, !dbg !20
  %46 = sdiv i32 %.frozen, 384, !dbg !20
  %47 = mul i32 %46, 384, !dbg !21
  %.decomposed = sub i32 %.frozen, %47, !dbg !21
  %48 = srem i32 %26, 384, !dbg !21
  %49 = sdiv i32 %21, 384, !dbg !20
  %50 = sdiv i32 %22, 384, !dbg !20
  %51 = sdiv i32 %23, 384, !dbg !20
  %52 = sdiv i32 %24, 384, !dbg !20
  %53 = sext i32 %48 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %32) #2, !dbg !23
  %56 = shl i32 %21, 4, !dbg !24
  %57 = shl i32 %22, 4, !dbg !24
  %58 = shl i32 %23, 4, !dbg !24
  %59 = shl i32 %24, 4, !dbg !24
  %60 = add i32 %36, %56, !dbg !25
  %61 = add i32 %36, %57, !dbg !25
  %62 = add i32 %36, %58, !dbg !25
  %63 = add i32 %36, %59, !dbg !25
  %64 = sext i32 %60 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !26
  %66 = sext i32 %61 to i64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !26
  %68 = sext i32 %62 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !26
  %70 = sext i32 %63 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !26
  %72 = and i1 %27, %41, !dbg !27
  %73 = and i1 %28, %41, !dbg !27
  %74 = and i1 %29, %41, !dbg !27
  %75 = and i1 %30, %41, !dbg !27
  %76 = and i1 %31, %42, !dbg !27
  %77 = and i1 %43, %31, !dbg !27
  %78 = and i1 %44, %31, !dbg !27
  %79 = and i1 %45, %31, !dbg !27
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %72) #2, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !28
  %85 = bitcast i32 %81 to float, !dbg !28
  %86 = bitcast i32 %82 to float, !dbg !28
  %87 = bitcast i32 %83 to float, !dbg !28
  %88 = bitcast i32 %84 to float, !dbg !28
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %73) #2, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !28
  %94 = bitcast i32 %90 to float, !dbg !28
  %95 = bitcast i32 %91 to float, !dbg !28
  %96 = bitcast i32 %92 to float, !dbg !28
  %97 = bitcast i32 %93 to float, !dbg !28
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %74) #2, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !28
  %103 = bitcast i32 %99 to float, !dbg !28
  %104 = bitcast i32 %100 to float, !dbg !28
  %105 = bitcast i32 %101 to float, !dbg !28
  %106 = bitcast i32 %102 to float, !dbg !28
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %75) #2, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !28
  %112 = bitcast i32 %108 to float, !dbg !28
  %113 = bitcast i32 %109 to float, !dbg !28
  %114 = bitcast i32 %110 to float, !dbg !28
  %115 = bitcast i32 %111 to float, !dbg !28
  %116 = shl nsw i32 %49, 4, !dbg !29
  %117 = shl nsw i32 %50, 4, !dbg !29
  %118 = shl nsw i32 %51, 4, !dbg !29
  %119 = shl nsw i32 %52, 4, !dbg !29
  %120 = add i32 %116, %36, !dbg !30
  %121 = add i32 %117, %36, !dbg !30
  %122 = add i32 %118, %36, !dbg !30
  %123 = add i32 %119, %36, !dbg !30
  %124 = sext i32 %120 to i64, !dbg !31
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !31
  %126 = sext i32 %121 to i64, !dbg !31
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !31
  %128 = sext i32 %122 to i64, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !31
  %130 = sext i32 %123 to i64, !dbg !31
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !31
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %72) #2, !dbg !32
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !32
  %137 = bitcast i32 %133 to float, !dbg !32
  %138 = bitcast i32 %134 to float, !dbg !32
  %139 = bitcast i32 %135 to float, !dbg !32
  %140 = bitcast i32 %136 to float, !dbg !32
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %73) #2, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !32
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !32
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !32
  %146 = bitcast i32 %142 to float, !dbg !32
  %147 = bitcast i32 %143 to float, !dbg !32
  %148 = bitcast i32 %144 to float, !dbg !32
  %149 = bitcast i32 %145 to float, !dbg !32
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %74) #2, !dbg !32
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !32
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !32
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !32
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !32
  %155 = bitcast i32 %151 to float, !dbg !32
  %156 = bitcast i32 %152 to float, !dbg !32
  %157 = bitcast i32 %153 to float, !dbg !32
  %158 = bitcast i32 %154 to float, !dbg !32
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %75) #2, !dbg !32
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !32
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !32
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !32
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !32
  %164 = bitcast i32 %160 to float, !dbg !32
  %165 = bitcast i32 %161 to float, !dbg !32
  %166 = bitcast i32 %162 to float, !dbg !32
  %167 = bitcast i32 %163 to float, !dbg !32
  %168 = getelementptr float, ptr addrspace(1) %3, i64 %124, !dbg !33
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %126, !dbg !33
  %170 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !33
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !33
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 %72) #2, !dbg !34
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !34
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !34
  %177 = bitcast i32 %173 to float, !dbg !34
  %178 = bitcast i32 %174 to float, !dbg !34
  %179 = bitcast i32 %175 to float, !dbg !34
  %180 = bitcast i32 %176 to float, !dbg !34
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 %73) #2, !dbg !34
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !34
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !34
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !34
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !34
  %186 = bitcast i32 %182 to float, !dbg !34
  %187 = bitcast i32 %183 to float, !dbg !34
  %188 = bitcast i32 %184 to float, !dbg !34
  %189 = bitcast i32 %185 to float, !dbg !34
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %74) #2, !dbg !34
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !34
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !34
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !34
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !34
  %195 = bitcast i32 %191 to float, !dbg !34
  %196 = bitcast i32 %192 to float, !dbg !34
  %197 = bitcast i32 %193 to float, !dbg !34
  %198 = bitcast i32 %194 to float, !dbg !34
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %75) #2, !dbg !34
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !34
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !34
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !34
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !34
  %204 = bitcast i32 %200 to float, !dbg !34
  %205 = bitcast i32 %201 to float, !dbg !34
  %206 = bitcast i32 %202 to float, !dbg !34
  %207 = bitcast i32 %203 to float, !dbg !34
  %208 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !35
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %32) #2, !dbg !36
  %210 = fsub float %85, %137, !dbg !37
  %211 = fsub float %86, %138, !dbg !37
  %212 = fsub float %87, %139, !dbg !37
  %213 = fsub float %88, %140, !dbg !37
  %214 = fsub float %94, %146, !dbg !37
  %215 = fsub float %95, %147, !dbg !37
  %216 = fsub float %96, %148, !dbg !37
  %217 = fsub float %97, %149, !dbg !37
  %218 = fsub float %103, %155, !dbg !37
  %219 = fsub float %104, %156, !dbg !37
  %220 = fsub float %105, %157, !dbg !37
  %221 = fsub float %106, %158, !dbg !37
  %222 = fsub float %112, %164, !dbg !37
  %223 = fsub float %113, %165, !dbg !37
  %224 = fsub float %114, %166, !dbg !37
  %225 = fsub float %115, %167, !dbg !37
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %177) #2, !dbg !38
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %178) #2, !dbg !38
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %179) #2, !dbg !38
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %180) #2, !dbg !38
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %186) #2, !dbg !38
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float %187) #2, !dbg !38
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float %188) #2, !dbg !38
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %189) #2, !dbg !38
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %195) #2, !dbg !38
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %196) #2, !dbg !38
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %197) #2, !dbg !38
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %198) #2, !dbg !38
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %204) #2, !dbg !38
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %205) #2, !dbg !38
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %206) #2, !dbg !38
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %207) #2, !dbg !38
  %.idx = shl nuw nsw i32 %20, 3, !dbg !39
  %242 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !39
  %243 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.idx4 = shl nuw nsw i32 %13, 3, !dbg !39
  %244 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !39
  %245 = load float, ptr addrspace(3) %244, align 8, !dbg !39
  %.idx5 = shl nuw nsw i32 %14, 3, !dbg !39
  %246 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !39
  %247 = load float, ptr addrspace(3) %246, align 8, !dbg !39
  %.idx6 = shl nuw nsw i32 %15, 3, !dbg !39
  %248 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !39
  %249 = load float, ptr addrspace(3) %248, align 8, !dbg !39
  %.idx7 = shl nuw nsw i32 %16, 3, !dbg !39
  %250 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !39
  %251 = load float, ptr addrspace(3) %250, align 8, !dbg !39
  %252 = fmul float %226, %245, !dbg !39
  %253 = fmul float %227, %245, !dbg !39
  %254 = fmul float %228, %245, !dbg !39
  %255 = fmul float %229, %245, !dbg !39
  %256 = fmul float %230, %247, !dbg !39
  %257 = fmul float %231, %247, !dbg !39
  %258 = fmul float %232, %247, !dbg !39
  %259 = fmul float %233, %247, !dbg !39
  %260 = fmul float %234, %249, !dbg !39
  %261 = fmul float %235, %249, !dbg !39
  %262 = fmul float %236, %249, !dbg !39
  %263 = fmul float %237, %249, !dbg !39
  %264 = fmul float %238, %251, !dbg !39
  %265 = fmul float %239, %251, !dbg !39
  %266 = fmul float %240, %251, !dbg !39
  %267 = fmul float %241, %251, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %268 = shl i32 %11, 10, !dbg !39
  %269 = and i32 %268, 3072, !dbg !39
  %270 = or disjoint i32 %269, %13, !dbg !39
  %271 = and i32 %17, 1020, !dbg !39
  %272 = lshr exact i32 %269, 4, !dbg !39
  %273 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %272, !dbg !39
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %270, !dbg !39
  %275 = bitcast float %252 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #2, !dbg !39
  %276 = or disjoint i32 %270, 256, !dbg !39
  %277 = lshr i32 %276, 6, !dbg !39
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !39
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %276, !dbg !39
  %280 = bitcast float %253 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #2, !dbg !39
  %281 = or disjoint i32 %270, 512, !dbg !39
  %282 = lshr i32 %281, 6, !dbg !39
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !39
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %281, !dbg !39
  %285 = bitcast float %254 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #2, !dbg !39
  %286 = or disjoint i32 %270, 768, !dbg !39
  %287 = lshr i32 %286, 6, !dbg !39
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !39
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %286, !dbg !39
  %290 = bitcast float %255 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #2, !dbg !39
  %291 = or disjoint i32 %270, 64, !dbg !39
  %292 = getelementptr float, ptr addrspace(3) %273, i32 %291, !dbg !39
  %293 = bitcast float %256 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #2, !dbg !39
  %294 = or disjoint i32 %270, 320, !dbg !39
  %295 = lshr i32 %294, 6, !dbg !39
  %296 = and i32 %295, 52, !dbg !39
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !39
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %294, !dbg !39
  %299 = bitcast float %257 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #2, !dbg !39
  %300 = or disjoint i32 %270, 576, !dbg !39
  %301 = lshr i32 %300, 6, !dbg !39
  %302 = and i32 %301, 56, !dbg !39
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !39
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %300, !dbg !39
  %305 = bitcast float %258 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #2, !dbg !39
  %306 = or disjoint i32 %270, 832, !dbg !39
  %307 = lshr i32 %306, 6, !dbg !39
  %308 = and i32 %307, 60, !dbg !39
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %308, !dbg !39
  %310 = getelementptr float, ptr addrspace(3) %309, i32 %306, !dbg !39
  %311 = bitcast float %259 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #2, !dbg !39
  %312 = or disjoint i32 %270, 128, !dbg !39
  %313 = getelementptr float, ptr addrspace(3) %273, i32 %312, !dbg !39
  %314 = bitcast float %260 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #2, !dbg !39
  %315 = or disjoint i32 %270, 384, !dbg !39
  %316 = lshr i32 %315, 6, !dbg !39
  %317 = and i32 %316, 52, !dbg !39
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !39
  %319 = getelementptr float, ptr addrspace(3) %318, i32 %315, !dbg !39
  %320 = bitcast float %261 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #2, !dbg !39
  %321 = or disjoint i32 %270, 640, !dbg !39
  %322 = lshr i32 %321, 6, !dbg !39
  %323 = and i32 %322, 56, !dbg !39
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i32 %323, !dbg !39
  %325 = getelementptr float, ptr addrspace(3) %324, i32 %321, !dbg !39
  %326 = bitcast float %262 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 true) #2, !dbg !39
  %327 = or disjoint i32 %270, 896, !dbg !39
  %328 = lshr i32 %327, 6, !dbg !39
  %329 = and i32 %328, 60, !dbg !39
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %329, !dbg !39
  %331 = getelementptr float, ptr addrspace(3) %330, i32 %327, !dbg !39
  %332 = bitcast float %263 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #2, !dbg !39
  %333 = or disjoint i32 %270, 192, !dbg !39
  %334 = getelementptr float, ptr addrspace(3) %273, i32 %333, !dbg !39
  %335 = bitcast float %264 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #2, !dbg !39
  %336 = or disjoint i32 %270, 448, !dbg !39
  %337 = lshr i32 %336, 6, !dbg !39
  %338 = and i32 %337, 52, !dbg !39
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !39
  %340 = getelementptr float, ptr addrspace(3) %339, i32 %336, !dbg !39
  %341 = bitcast float %265 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #2, !dbg !39
  %342 = or disjoint i32 %270, 704, !dbg !39
  %343 = lshr i32 %342, 6, !dbg !39
  %344 = and i32 %343, 56, !dbg !39
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i32 %344, !dbg !39
  %346 = getelementptr float, ptr addrspace(3) %345, i32 %342, !dbg !39
  %347 = bitcast float %266 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #2, !dbg !39
  %348 = or disjoint i32 %270, 960, !dbg !39
  %349 = lshr i32 %348, 6, !dbg !39
  %350 = and i32 %349, 60, !dbg !39
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i32 %350, !dbg !39
  %352 = getelementptr float, ptr addrspace(3) %351, i32 %348, !dbg !39
  %353 = bitcast float %267 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %354 = lshr i32 %17, 6, !dbg !39
  %355 = and i32 %354, 12, !dbg !39
  %356 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %355, !dbg !39
  %357 = getelementptr inbounds float, ptr addrspace(3) %356, i32 %271, !dbg !39
  %358 = load float, ptr addrspace(3) %357, align 16, !dbg !39
  %359 = getelementptr inbounds i8, ptr addrspace(3) %357, i32 4, !dbg !39
  %360 = load float, ptr addrspace(3) %359, align 4, !dbg !39
  %361 = getelementptr inbounds i8, ptr addrspace(3) %357, i32 8, !dbg !39
  %362 = load float, ptr addrspace(3) %361, align 8, !dbg !39
  %363 = getelementptr inbounds i8, ptr addrspace(3) %357, i32 12, !dbg !39
  %364 = load float, ptr addrspace(3) %363, align 4, !dbg !39
  %365 = or disjoint i32 %271, 1024, !dbg !39
  %366 = lshr i32 %365, 6, !dbg !39
  %367 = and i32 %366, 28, !dbg !39
  %368 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %367, !dbg !39
  %369 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %365, !dbg !39
  %370 = load float, ptr addrspace(3) %369, align 16, !dbg !39
  %371 = getelementptr inbounds i8, ptr addrspace(3) %369, i32 4, !dbg !39
  %372 = load float, ptr addrspace(3) %371, align 4, !dbg !39
  %373 = getelementptr inbounds i8, ptr addrspace(3) %369, i32 8, !dbg !39
  %374 = load float, ptr addrspace(3) %373, align 8, !dbg !39
  %375 = getelementptr inbounds i8, ptr addrspace(3) %369, i32 12, !dbg !39
  %376 = load float, ptr addrspace(3) %375, align 4, !dbg !39
  %377 = or disjoint i32 %271, 2048, !dbg !39
  %378 = lshr i32 %377, 6, !dbg !39
  %379 = and i32 %378, 44, !dbg !39
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %379, !dbg !39
  %381 = getelementptr inbounds float, ptr addrspace(3) %380, i32 %377, !dbg !39
  %382 = load float, ptr addrspace(3) %381, align 16, !dbg !39
  %383 = getelementptr inbounds i8, ptr addrspace(3) %381, i32 4, !dbg !39
  %384 = load float, ptr addrspace(3) %383, align 4, !dbg !39
  %385 = getelementptr inbounds i8, ptr addrspace(3) %381, i32 8, !dbg !39
  %386 = load float, ptr addrspace(3) %385, align 8, !dbg !39
  %387 = getelementptr inbounds i8, ptr addrspace(3) %381, i32 12, !dbg !39
  %388 = load float, ptr addrspace(3) %387, align 4, !dbg !39
  %389 = or disjoint i32 %271, 3072, !dbg !39
  %390 = lshr i32 %389, 6, !dbg !39
  %391 = and i32 %390, 60, !dbg !39
  %392 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %391, !dbg !39
  %393 = getelementptr inbounds float, ptr addrspace(3) %392, i32 %389, !dbg !39
  %394 = load float, ptr addrspace(3) %393, align 16, !dbg !39
  %395 = getelementptr inbounds i8, ptr addrspace(3) %393, i32 4, !dbg !39
  %396 = load float, ptr addrspace(3) %395, align 4, !dbg !39
  %397 = getelementptr inbounds i8, ptr addrspace(3) %393, i32 8, !dbg !39
  %398 = load float, ptr addrspace(3) %397, align 8, !dbg !39
  %399 = getelementptr inbounds i8, ptr addrspace(3) %393, i32 12, !dbg !39
  %400 = load float, ptr addrspace(3) %399, align 4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !40
  %402 = insertelement <1 x i32> poison, i32 %209, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !40
  %404 = load float, ptr addrspace(3) %403, align 16, !dbg !40
  %405 = getelementptr inbounds i8, ptr addrspace(3) %403, i32 4, !dbg !40
  %406 = load float, ptr addrspace(3) %405, align 4, !dbg !40
  %407 = getelementptr inbounds i8, ptr addrspace(3) %403, i32 8, !dbg !40
  %408 = load float, ptr addrspace(3) %407, align 8, !dbg !40
  %409 = getelementptr inbounds i8, ptr addrspace(3) %403, i32 12, !dbg !40
  %410 = load float, ptr addrspace(3) %409, align 4, !dbg !40
  %411 = fadd float %358, %404, !dbg !40
  %412 = fadd float %360, %406, !dbg !40
  %413 = fadd float %362, %408, !dbg !40
  %414 = fadd float %364, %410, !dbg !40
  %415 = fadd float %370, %404, !dbg !40
  %416 = fadd float %372, %406, !dbg !40
  %417 = fadd float %374, %408, !dbg !40
  %418 = fadd float %376, %410, !dbg !40
  %419 = fadd float %382, %404, !dbg !40
  %420 = fadd float %384, %406, !dbg !40
  %421 = fadd float %386, %408, !dbg !40
  %422 = fadd float %388, %410, !dbg !40
  %423 = fadd float %394, %404, !dbg !40
  %424 = fadd float %396, %406, !dbg !40
  %425 = fadd float %398, %408, !dbg !40
  %426 = fadd float %400, %410, !dbg !40
  %427 = mul i32 %37, 384, !dbg !41
  %428 = mul i32 %38, 384, !dbg !41
  %429 = mul i32 %39, 384, !dbg !41
  %430 = mul i32 %40, 384, !dbg !41
  %431 = mul i32 %46, 6144, !dbg !42
  %432 = add i32 %431, %.decomposed, !dbg !43
  %433 = add i32 %432, %427, !dbg !44
  %434 = add i32 %432, %428, !dbg !44
  %435 = add i32 %432, %429, !dbg !44
  %436 = add i32 %432, %430, !dbg !44
  %437 = sext i32 %433 to i64, !dbg !45
  %438 = getelementptr float, ptr addrspace(1) %5, i64 %437, !dbg !45
  %439 = sext i32 %434 to i64, !dbg !45
  %440 = getelementptr float, ptr addrspace(1) %5, i64 %439, !dbg !45
  %441 = sext i32 %435 to i64, !dbg !45
  %442 = getelementptr float, ptr addrspace(1) %5, i64 %441, !dbg !45
  %443 = sext i32 %436 to i64, !dbg !45
  %444 = getelementptr float, ptr addrspace(1) %5, i64 %443, !dbg !45
  %445 = bitcast float %411 to i32, !dbg !46
  %446 = bitcast float %412 to i32, !dbg !46
  %447 = bitcast float %413 to i32, !dbg !46
  %448 = bitcast float %414 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %445, i32 %446, i32 %447, i32 %448, ptr addrspace(1) %438, i1 %76) #2, !dbg !46
  %449 = bitcast float %415 to i32, !dbg !46
  %450 = bitcast float %416 to i32, !dbg !46
  %451 = bitcast float %417 to i32, !dbg !46
  %452 = bitcast float %418 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %449, i32 %450, i32 %451, i32 %452, ptr addrspace(1) %440, i1 %77) #2, !dbg !46
  %453 = bitcast float %419 to i32, !dbg !46
  %454 = bitcast float %420 to i32, !dbg !46
  %455 = bitcast float %421 to i32, !dbg !46
  %456 = bitcast float %422 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %453, i32 %454, i32 %455, i32 %456, ptr addrspace(1) %442, i1 %78) #2, !dbg !46
  %457 = bitcast float %423 to i32, !dbg !46
  %458 = bitcast float %424 to i32, !dbg !46
  %459 = bitcast float %425 to i32, !dbg !46
  %460 = bitcast float %426 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %457, i32 %458, i32 %459, i32 %460, ptr addrspace(1) %444, i1 %79) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvyithxfccjcivacam5aovzjfak26scmtvqt7lqmxqylruxdyrzk.py", directory: "inductor_cache/vy")
!4 = !{ptr @triton_poi_fused_add_div_mul_sub_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_sub_30, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_sub_30", linkageName: "triton_poi_fused_add_div_mul_sub_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 38, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 51, scope: !7)
!28 = !DILocation(line: 33, column: 43, scope: !7)
!29 = !DILocation(line: 34, column: 38, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 43, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 34, scope: !7)
!42 = !DILocation(line: 41, column: 44, scope: !7)
!43 = !DILocation(line: 41, column: 30, scope: !7)
!44 = !DILocation(line: 41, column: 39, scope: !7)
!45 = !DILocation(line: 41, column: 25, scope: !7)
!46 = !DILocation(line: 41, column: 55, scope: !7)
!47 = !DILocation(line: 41, column: 4, scope: !7)
