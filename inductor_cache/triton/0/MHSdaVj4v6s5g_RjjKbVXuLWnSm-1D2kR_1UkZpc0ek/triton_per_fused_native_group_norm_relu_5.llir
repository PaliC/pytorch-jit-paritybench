; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = lshr i32 %10, 5, !dbg !11
  %13 = shl i32 %10, 2, !dbg !11
  %14 = and i32 %13, 1020, !dbg !11
  %15 = srem i32 %9, 32, !dbg !12
  %16 = shl i32 %9, 10, !dbg !13
  %17 = or disjoint i32 %16, %14, !dbg !14
  %18 = sext i32 %17 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = bitcast i32 %24 to float, !dbg !16
  %29 = sext i32 %15 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !17
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !20
  %40 = fadd float %25, %26, !dbg !21
  %41 = fadd float %40, %27, !dbg !21
  %42 = fadd float %41, %28, !dbg !21
  %43 = bitcast float %42 to i32, !dbg !26
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = fadd float %42, %45, !dbg !21
  %47 = bitcast float %46 to i32, !dbg !26
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !26
  %49 = bitcast i32 %48 to float, !dbg !26
  %50 = fadd float %46, %49, !dbg !21
  %51 = bitcast float %50 to i32, !dbg !26
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !26
  %53 = bitcast i32 %52 to float, !dbg !26
  %54 = fadd float %50, %53, !dbg !21
  %55 = bitcast float %54 to i32, !dbg !26
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !26
  %57 = bitcast i32 %56 to float, !dbg !26
  %58 = fadd float %54, %57, !dbg !21
  %59 = bitcast float %58 to i32, !dbg !26
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = fadd float %58, %61, !dbg !21
  %63 = icmp eq i32 %11, 0, !dbg !26
  %64 = and i32 %12, 7, !dbg !26
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !26
  %66 = bitcast float %62 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 %63) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %67 = icmp slt i32 %10, 8, !dbg !26
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %69 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %67) #5, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = fadd float %70, %72, !dbg !21
  %74 = bitcast float %73 to i32, !dbg !26
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !26
  %76 = bitcast i32 %75 to float, !dbg !26
  %77 = fadd float %73, %76, !dbg !21
  %78 = bitcast float %77 to i32, !dbg !26
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !26
  %80 = bitcast i32 %79 to float, !dbg !26
  %81 = fadd float %77, %80, !dbg !21
  %82 = and i32 %10, 7, !dbg !26
  %83 = icmp eq i32 %82, 0, !dbg !26
  %84 = and i1 %67, %83, !dbg !26
  %85 = bitcast float %81 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %85, i1 %84) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %86 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %87 = fadd float %86, 0.000000e+00, !dbg !27
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 1.024000e+03) #5, !dbg !31
  %89 = fsub float %25, %88, !dbg !32
  %90 = fsub float %26, %88, !dbg !32
  %91 = fsub float %27, %88, !dbg !32
  %92 = fsub float %28, %88, !dbg !32
  %93 = fmul float %89, %89, !dbg !33
  %94 = fmul float %90, %90, !dbg !33
  %95 = fmul float %91, %91, !dbg !33
  %96 = fmul float %92, %92, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %97 = fadd float %93, %94, !dbg !36
  %98 = fadd float %95, %97, !dbg !36
  %99 = fadd float %96, %98, !dbg !36
  %100 = bitcast float %99 to i32, !dbg !34
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = fadd float %99, %102, !dbg !36
  %104 = bitcast float %103 to i32, !dbg !34
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !34
  %106 = bitcast i32 %105 to float, !dbg !34
  %107 = fadd float %103, %106, !dbg !36
  %108 = bitcast float %107 to i32, !dbg !34
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !34
  %110 = bitcast i32 %109 to float, !dbg !34
  %111 = fadd float %107, %110, !dbg !36
  %112 = bitcast float %111 to i32, !dbg !34
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = fadd float %111, %114, !dbg !36
  %116 = bitcast float %115 to i32, !dbg !34
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !34
  %118 = bitcast i32 %117 to float, !dbg !34
  %119 = fadd float %115, %118, !dbg !36
  %120 = bitcast float %119 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %120, i1 %63) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %121 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %67) #5, !dbg !34
  %122 = bitcast i32 %121 to float, !dbg !34
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !34
  %124 = bitcast i32 %123 to float, !dbg !34
  %125 = fadd float %122, %124, !dbg !36
  %126 = bitcast float %125 to i32, !dbg !34
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !34
  %128 = bitcast i32 %127 to float, !dbg !34
  %129 = fadd float %125, %128, !dbg !36
  %130 = bitcast float %129 to i32, !dbg !34
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !34
  %132 = bitcast i32 %131 to float, !dbg !34
  %133 = fadd float %129, %132, !dbg !36
  %134 = bitcast float %133 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %134, i1 %84) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %135 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %136 = fadd float %135, 0.000000e+00, !dbg !37
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 1.024000e+03) #5, !dbg !39
  %138 = fadd float %137, 0x3EE4F8B580000000, !dbg !40
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %139, 0, !dbg !41
  br i1 %.not.i, label %142, label %140, !dbg !41

140:                                              ; preds = %8
  %141 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %138), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

142:                                              ; preds = %8
  %143 = tail call float @llvm.nvvm.rsqrt.approx.f(float %138), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %140, %142
  %.0.i = phi float [ %141, %140 ], [ %143, %142 ], !dbg !41
  %144 = bitcast i32 %39 to float, !dbg !20
  %145 = bitcast i32 %34 to float, !dbg !18
  %146 = fmul float %89, %.0.i, !dbg !42
  %147 = fmul float %90, %.0.i, !dbg !42
  %148 = fmul float %91, %.0.i, !dbg !42
  %149 = fmul float %92, %.0.i, !dbg !42
  %150 = fmul float %146, %145, !dbg !43
  %151 = fmul float %147, %145, !dbg !43
  %152 = fmul float %148, %145, !dbg !43
  %153 = fmul float %149, %145, !dbg !43
  %154 = fadd float %150, %144, !dbg !44
  %155 = fadd float %151, %144, !dbg !44
  %156 = fadd float %152, %144, !dbg !44
  %157 = fadd float %153, %144, !dbg !44
  %158 = fcmp olt float %154, 0.000000e+00, !dbg !45
  %159 = fcmp olt float %155, 0.000000e+00, !dbg !45
  %160 = fcmp olt float %156, 0.000000e+00, !dbg !45
  %161 = fcmp olt float %157, 0.000000e+00, !dbg !45
  %162 = select i1 %158, float 0.000000e+00, float %154, !dbg !47
  %163 = select i1 %159, float 0.000000e+00, float %155, !dbg !47
  %164 = select i1 %160, float 0.000000e+00, float %156, !dbg !47
  %165 = select i1 %161, float 0.000000e+00, float %157, !dbg !47
  %166 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !48
  %167 = bitcast float %162 to i32, !dbg !49
  %168 = bitcast float %163 to i32, !dbg !49
  %169 = bitcast float %164 to i32, !dbg !49
  %170 = bitcast float %165 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %166, i1 true) #5, !dbg !49
  %171 = sext i32 %9 to i64, !dbg !50
  %172 = getelementptr float, ptr addrspace(1) %5, i64 %171, !dbg !50
  %urem = and i32 %10, 255, !dbg !51
  %173 = icmp eq i32 %urem, 0, !dbg !51
  %174 = bitcast float %.0.i to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %172, i1 %173) #5, !dbg !51
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !52
  %176 = bitcast float %88 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %175, i1 %173) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu7vqwnwej45aapzvgdjtxmzg2brfdqvp5u5pl5fiwwxevwaipes.py", directory: "inductor_cache/u7")
!4 = !{ptr @triton_per_fused_native_group_norm_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_relu_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_relu_5", linkageName: "triton_per_fused_native_group_norm_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 40, scope: !7)
!14 = !DILocation(line: 33, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 45, scope: !7)
!17 = !DILocation(line: 34, column: 31, scope: !7)
!18 = !DILocation(line: 34, column: 36, scope: !7)
!19 = !DILocation(line: 35, column: 31, scope: !7)
!20 = !DILocation(line: 35, column: 36, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 38, column: 57, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 38, column: 44, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !35)
!35 = !DILocation(line: 45, column: 59, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !35)
!37 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 45, column: 45, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 28, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !46)
!46 = !DILocation(line: 56, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !46)
!48 = !DILocation(line: 57, column: 25, scope: !7)
!49 = !DILocation(line: 57, column: 47, scope: !7)
!50 = !DILocation(line: 58, column: 25, scope: !7)
!51 = !DILocation(line: 58, column: 37, scope: !7)
!52 = !DILocation(line: 59, column: 25, scope: !7)
!53 = !DILocation(line: 59, column: 36, scope: !7)
!54 = !DILocation(line: 59, column: 4, scope: !7)
