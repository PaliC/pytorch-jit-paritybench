#loc = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":19:0)
#loc1 = loc(unknown)
#loc21 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":42:26)
#loc28 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":50:26)
#loc40 = loc(callsite(#loc1 at #loc21))
#loc43 = loc(callsite(#loc1 at #loc28))
module {
  tt.func public @triton_per_fused_add_addmm_native_layer_norm_native_layer_norm_backward_9(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":19:0), %arg5: i32 loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":19:0)) attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst = arith.constant dense<6.250000e-02> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<1.600000e+01> : tensor<1x1xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x16xf32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc5)
    %5 = arith.muli %0, %c16_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x16xi32> loc(#loc7)
    %7 = arith.addi %4, %6 : tensor<1x16xi32> loc(#loc7)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc8)
    %9 = tt.addptr %8, %7 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x16xi1> loc(#loc9)
    %11 = tt.load %9, %10, %cst_2 : tensor<1x16x!tt.ptr<f32>> loc(#loc9)
    %12 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc10)
    %13 = tt.addptr %12, %4 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc10)
    %14 = tt.load %13 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>> loc(#loc11)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc12)
    %16 = tt.addptr %15, %7 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc12)
    %17 = tt.load %16, %10, %cst_2 : tensor<1x16x!tt.ptr<f32>> loc(#loc13)
    %18 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc14)
    %19 = tt.addptr %18, %4 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc14)
    %20 = tt.load %19 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>> loc(#loc15)
    %21 = arith.addf %11, %14 : tensor<1x16xf32> loc(#loc16)
    %22 = arith.addf %17, %20 : tensor<1x16xf32> loc(#loc17)
    %23 = arith.addf %21, %22 : tensor<1x16xf32> loc(#loc18)
    %24 = arith.select %10, %23, %cst_2 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc19)
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc21)), %arg8: f32 loc(callsite(#loc1 at #loc21))):
      %42 = arith.addf %arg7, %arg8 : f32 loc(#loc44)
      tt.reduce.return %42 : f32 loc(#loc39)
    }) : (tensor<1x16xf32>) -> tensor<1xf32> loc(#loc39)
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc23)
    %27 = arith.divf %26, %cst_1 : tensor<1x1xf32> loc(#loc24)
    %28 = tt.broadcast %27 : tensor<1x1xf32> -> tensor<1x16xf32> loc(#loc25)
    %29 = arith.subf %23, %28 : tensor<1x16xf32> loc(#loc25)
    %30 = arith.mulf %29, %29 : tensor<1x16xf32> loc(#loc26)
    %31 = arith.select %10, %30, %cst_2 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc27)
    %32 = "tt.reduce"(%31) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc28)), %arg8: f32 loc(callsite(#loc1 at #loc28))):
      %42 = arith.addf %arg7, %arg8 : f32 loc(#loc45)
      tt.reduce.return %42 : f32 loc(#loc42)
    }) : (tensor<1x16xf32>) -> tensor<1xf32> loc(#loc42)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc29)
    %34 = arith.divf %33, %cst_1 : tensor<1x1xf32> loc(#loc30)
    %35 = arith.addf %34, %cst_0 : tensor<1x1xf32> loc(#loc31)
    %36 = tt.extern_elementwise %35 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc32)
    %37 = tt.broadcast %36 : tensor<1x1xf32> -> tensor<1x16xf32> loc(#loc33)
    %38 = arith.mulf %29, %37 : tensor<1x16xf32> loc(#loc33)
    %39 = arith.mulf %36, %cst : tensor<1x1xf32> loc(#loc34)
    tt.store %9, %38, %10 : tensor<1x16x!tt.ptr<f32>> loc(#loc35)
    %40 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc36)
    %41 = tt.splat %40 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc36)
    tt.store %41, %39, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc37)
    tt.return loc(#loc38)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":23:28)
#loc3 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":25:21)
#loc4 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":26:26)
#loc5 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":26:34)
#loc6 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":31:42)
#loc7 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":31:39)
#loc8 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":31:34)
#loc9 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":31:47)
#loc10 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":32:30)
#loc11 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":32:35)
#loc12 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":33:30)
#loc13 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":33:43)
#loc14 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":34:30)
#loc15 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":34:35)
#loc16 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":35:18)
#loc17 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":36:18)
#loc18 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":37:18)
#loc19 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":41:35)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc23 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":42:29)
#loc24 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":45:20)
#loc25 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":46:19)
#loc26 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":47:20)
#loc27 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":49:35)
#loc29 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":50:29)
#loc30 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":53:20)
#loc31 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":55:20)
#loc32 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":56:28)
#loc33 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":57:20)
#loc34 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":59:20)
#loc35 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":60:48)
#loc36 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":61:25)
#loc37 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":61:37)
#loc38 = loc("inductor_cache/p4/cp4l6zybfswirzop2vphwfhw3sczptbf56smjvafqpsou3pgimon.py":61:4)
#loc39 = loc(callsite(#loc20 at #loc21))
#loc41 = loc(callsite(#loc22 at #loc20))
#loc42 = loc(callsite(#loc20 at #loc28))
#loc44 = loc(callsite(#loc41 at #loc21))
#loc45 = loc(callsite(#loc41 at #loc28))
