; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2(ptr addrspace(1) %0, ptr addrspace(1) %1, float %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr = freeze i32 %5, !dbg !11
  %6 = shl i32 %.fr, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 784, !dbg !14
  %13 = srem i32 %10, 49, !dbg !15
  %14 = srem i32 %11, 49, !dbg !15
  %15 = sext i32 %10 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !16
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %12) #3, !dbg !17
  %18 = srem i32 %10, 196, !dbg !18
  %19 = sub nsw i32 %10, %18, !dbg !18
  %20 = add i32 %19, %13, !dbg !19
  %21 = add i32 %19, %14, !dbg !19
  %22 = sext i32 %20 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = sext i32 %21 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #3, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #3, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = add i32 %20, 49, !dbg !22
  %31 = add i32 %21, 49, !dbg !22
  %32 = sext i32 %30 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = sext i32 %31 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #3, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #3, !dbg !24
  %39 = bitcast i32 %38 to float, !dbg !24
  %40 = add i32 %20, 98, !dbg !25
  %41 = add i32 %21, 98, !dbg !25
  %42 = sext i32 %40 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !26
  %44 = sext i32 %41 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %12) #3, !dbg !27
  %47 = bitcast i32 %46 to float, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %12) #3, !dbg !27
  %49 = bitcast i32 %48 to float, !dbg !27
  %50 = add i32 %20, 147, !dbg !28
  %51 = add i32 %21, 147, !dbg !28
  %52 = sext i32 %50 to i64, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !29
  %54 = sext i32 %51 to i64, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %12) #3, !dbg !30
  %57 = bitcast i32 %56 to float, !dbg !30
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #3, !dbg !30
  %59 = bitcast i32 %58 to float, !dbg !30
  %60 = fcmp ogt float %27, 0.000000e+00, !dbg !31
  %61 = fcmp ogt float %29, 0.000000e+00, !dbg !31
  %62 = fmul float %27, 0x3FC99999A0000000, !dbg !32
  %63 = fmul float %29, 0x3FC99999A0000000, !dbg !32
  %64 = select i1 %60, float %27, float %62, !dbg !33
  %65 = select i1 %61, float %29, float %63, !dbg !33
  %66 = fmul float %64, %64, !dbg !34
  %67 = fmul float %65, %65, !dbg !34
  %68 = fcmp ogt float %37, 0.000000e+00, !dbg !35
  %69 = fcmp ogt float %39, 0.000000e+00, !dbg !35
  %70 = fmul float %37, 0x3FC99999A0000000, !dbg !36
  %71 = fmul float %39, 0x3FC99999A0000000, !dbg !36
  %72 = select i1 %68, float %37, float %70, !dbg !37
  %73 = select i1 %69, float %39, float %71, !dbg !37
  %74 = fmul float %72, %72, !dbg !38
  %75 = fmul float %73, %73, !dbg !38
  %76 = fadd float %66, %74, !dbg !39
  %77 = fadd float %67, %75, !dbg !39
  %78 = fcmp ogt float %47, 0.000000e+00, !dbg !40
  %79 = fcmp ogt float %49, 0.000000e+00, !dbg !40
  %80 = fmul float %47, 0x3FC99999A0000000, !dbg !41
  %81 = fmul float %49, 0x3FC99999A0000000, !dbg !41
  %82 = select i1 %78, float %47, float %80, !dbg !42
  %83 = select i1 %79, float %49, float %81, !dbg !42
  %84 = fmul float %82, %82, !dbg !43
  %85 = fmul float %83, %83, !dbg !43
  %86 = fadd float %76, %84, !dbg !44
  %87 = fadd float %77, %85, !dbg !44
  %88 = fcmp ogt float %57, 0.000000e+00, !dbg !45
  %89 = fcmp ogt float %59, 0.000000e+00, !dbg !45
  %90 = fmul float %57, 0x3FC99999A0000000, !dbg !46
  %91 = fmul float %59, 0x3FC99999A0000000, !dbg !46
  %92 = select i1 %88, float %57, float %90, !dbg !47
  %93 = select i1 %89, float %59, float %91, !dbg !47
  %94 = fmul float %92, %92, !dbg !48
  %95 = fmul float %93, %93, !dbg !48
  %96 = fadd float %86, %94, !dbg !49
  %97 = fadd float %87, %95, !dbg !49
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 4.000000e+00) #3, !dbg !50
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 4.000000e+00) #3, !dbg !50
  %100 = fadd float %98, 0x3E45798EE0000000, !dbg !51
  %101 = fadd float %99, 0x3E45798EE0000000, !dbg !51
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i = icmp eq i32 %102, 0, !dbg !52
  br i1 %.not.i, label %105, label %103, !dbg !52

103:                                              ; preds = %4
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %100), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

105:                                              ; preds = %4
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %100), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

__nv_rsqrtf.exit:                                 ; preds = %103, %105
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], !dbg !52
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %107, 0, !dbg !52
  br i1 %.not.i1, label %110, label %108, !dbg !52

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !52
  br label %__nv_rsqrtf.exit3, !dbg !52

110:                                              ; preds = %__nv_rsqrtf.exit
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !52
  br label %__nv_rsqrtf.exit3, !dbg !52

__nv_rsqrtf.exit3:                                ; preds = %108, %110
  %.0.i2 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !52
  %112 = extractvalue { i32, i32 } %17, 1, !dbg !17
  %113 = bitcast i32 %112 to float, !dbg !17
  %114 = fcmp ogt float %113, 0.000000e+00, !dbg !53
  %115 = fmul float %113, 0x3FC99999A0000000, !dbg !54
  %116 = select i1 %114, float %113, float %115, !dbg !55
  %117 = extractvalue { i32, i32 } %17, 0, !dbg !17
  %118 = bitcast i32 %117 to float, !dbg !17
  %119 = fcmp ogt float %118, 0.000000e+00, !dbg !53
  %120 = fmul float %118, 0x3FC99999A0000000, !dbg !54
  %121 = select i1 %119, float %118, float %120, !dbg !55
  %122 = fmul float %121, %.0.i, !dbg !56
  %123 = fmul float %116, %.0.i2, !dbg !56
  %124 = fmul float %2, %122, !dbg !57
  %125 = fmul float %2, %123, !dbg !57
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !58
  %127 = bitcast float %124 to i32, !dbg !59
  %128 = bitcast float %125 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 %12) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5lw5rimlxllkf4ly3jbwmngba7uadjkouurj76f7ccbhc7llysm.py", directory: "inductor_cache/5l")
!4 = !{ptr @triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2", linkageName: "triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 29, column: 41, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 50, scope: !7)
!25 = !DILocation(line: 30, column: 41, scope: !7)
!26 = !DILocation(line: 30, column: 31, scope: !7)
!27 = !DILocation(line: 30, column: 50, scope: !7)
!28 = !DILocation(line: 31, column: 42, scope: !7)
!29 = !DILocation(line: 31, column: 31, scope: !7)
!30 = !DILocation(line: 31, column: 51, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 32, scope: !7)
!34 = !DILocation(line: 41, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 35, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 35, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 35, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 28, scope: !7)
!53 = !DILocation(line: 34, column: 18, scope: !7)
!54 = !DILocation(line: 36, column: 18, scope: !7)
!55 = !DILocation(line: 37, column: 32, scope: !7)
!56 = !DILocation(line: 62, column: 19, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 28, scope: !7)
!59 = !DILocation(line: 64, column: 40, scope: !7)
!60 = !DILocation(line: 64, column: 4, scope: !7)
