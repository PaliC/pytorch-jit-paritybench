; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = icmp slt i32 %13, 64, !dbg !14
  %19 = icmp slt i32 %14, 64, !dbg !14
  %20 = icmp slt i32 %15, 64, !dbg !14
  %21 = icmp slt i32 %16, 64, !dbg !14
  %22 = icmp slt i32 %17, 64, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 8, !dbg !16
  %25 = and i32 %11, 252, !dbg !17
  %26 = lshr i32 %8, 2, !dbg !17
  %27 = and i32 %26, 63, !dbg !17
  %28 = or disjoint i32 %24, %25, !dbg !18
  %29 = or disjoint i32 %24, %27, !dbg !18
  %30 = or disjoint i32 %29, 64, !dbg !18
  %31 = or disjoint i32 %29, 128, !dbg !18
  %32 = or disjoint i32 %29, 192, !dbg !18
  %33 = icmp slt i32 %28, 256, !dbg !19
  %34 = icmp slt i32 %29, 256, !dbg !19
  %35 = icmp slt i32 %30, 256, !dbg !19
  %36 = icmp slt i32 %31, 256, !dbg !19
  %37 = icmp slt i32 %32, 256, !dbg !19
  %38 = srem i32 %13, 16, !dbg !20
  %39 = srem i32 %14, 16, !dbg !20
  %40 = srem i32 %15, 16, !dbg !20
  %41 = srem i32 %16, 16, !dbg !20
  %.frozen = freeze i32 %17, !dbg !21
  %42 = sdiv i32 %.frozen, 16, !dbg !21
  %43 = mul i32 %42, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %43, !dbg !20
  %44 = shl i32 %13, 8, !dbg !22
  %45 = shl i32 %14, 8, !dbg !22
  %46 = shl i32 %15, 8, !dbg !22
  %47 = shl i32 %16, 8, !dbg !22
  %48 = add i32 %28, %44, !dbg !23
  %49 = add i32 %28, %45, !dbg !23
  %50 = add i32 %28, %46, !dbg !23
  %51 = add i32 %28, %47, !dbg !23
  %52 = sext i32 %48 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %49 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = sext i32 %50 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = sext i32 %51 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = and i1 %18, %33, !dbg !25
  %61 = and i1 %19, %33, !dbg !25
  %62 = and i1 %20, %33, !dbg !25
  %63 = and i1 %21, %33, !dbg !25
  %64 = and i1 %22, %34, !dbg !25
  %65 = and i1 %35, %22, !dbg !25
  %66 = and i1 %36, %22, !dbg !25
  %67 = and i1 %37, %22, !dbg !25
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %60) #2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = bitcast i32 %72 to float, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %61) #2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !26
  %82 = bitcast i32 %78 to float, !dbg !26
  %83 = bitcast i32 %79 to float, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %62) #2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %63) #2, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !26
  %100 = bitcast i32 %96 to float, !dbg !26
  %101 = bitcast i32 %97 to float, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = sext i32 %38 to i64, !dbg !27
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !27
  %106 = sext i32 %39 to i64, !dbg !27
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !27
  %108 = sext i32 %40 to i64, !dbg !27
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !27
  %110 = sext i32 %41 to i64, !dbg !27
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !27
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %18) #2, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %18) #2, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %18) #2, !dbg !28
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %18) #2, !dbg !28
  %116 = bitcast i32 %115 to float, !dbg !28
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %19) #2, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %19) #2, !dbg !28
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %19) #2, !dbg !28
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %19) #2, !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %20) #2, !dbg !28
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %20) #2, !dbg !28
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %20) #2, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %20) #2, !dbg !28
  %126 = bitcast i32 %125 to float, !dbg !28
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %21) #2, !dbg !28
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %21) #2, !dbg !28
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %21) #2, !dbg !28
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %21) #2, !dbg !28
  %131 = bitcast i32 %130 to float, !dbg !28
  %132 = fadd float %73, %116, !dbg !29
  %133 = fadd float %74, %116, !dbg !29
  %134 = fadd float %75, %116, !dbg !29
  %135 = fadd float %76, %116, !dbg !29
  %136 = fadd float %82, %121, !dbg !29
  %137 = fadd float %83, %121, !dbg !29
  %138 = fadd float %84, %121, !dbg !29
  %139 = fadd float %85, %121, !dbg !29
  %140 = fadd float %91, %126, !dbg !29
  %141 = fadd float %92, %126, !dbg !29
  %142 = fadd float %93, %126, !dbg !29
  %143 = fadd float %94, %126, !dbg !29
  %144 = fadd float %100, %131, !dbg !29
  %145 = fadd float %101, %131, !dbg !29
  %146 = fadd float %102, %131, !dbg !29
  %147 = fadd float %103, %131, !dbg !29
  %148 = shl i32 %29, 4, !dbg !30
  %149 = shl i32 %30, 4, !dbg !30
  %150 = shl i32 %31, 4, !dbg !30
  %151 = shl i32 %32, 4, !dbg !30
  %152 = shl i32 %42, 12, !dbg !31
  %153 = add i32 %152, %.decomposed, !dbg !32
  %154 = add i32 %153, %148, !dbg !33
  %155 = add i32 %153, %149, !dbg !33
  %156 = add i32 %153, %150, !dbg !33
  %157 = add i32 %153, %151, !dbg !33
  %158 = sext i32 %154 to i64, !dbg !34
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !34
  %160 = sext i32 %155 to i64, !dbg !34
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !34
  %162 = sext i32 %156 to i64, !dbg !34
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !34
  %164 = sext i32 %157 to i64, !dbg !34
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %164, !dbg !34
  %166 = shl i32 %8, 6, !dbg !35
  %167 = and i32 %166, 4032, !dbg !35
  %168 = or disjoint i32 %167, %10, !dbg !35
  %169 = and i32 %11, 1020, !dbg !35
  %170 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %167, !dbg !35
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %168, !dbg !35
  %172 = bitcast float %132 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !35
  %173 = or disjoint i32 %168, 16, !dbg !35
  %174 = lshr i32 %173, 2, !dbg !35
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !35
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %173, !dbg !35
  %177 = bitcast float %133 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !35
  %178 = or disjoint i32 %168, 32, !dbg !35
  %179 = lshr i32 %178, 2, !dbg !35
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !35
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !35
  %182 = bitcast float %134 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !35
  %183 = or disjoint i32 %168, 48, !dbg !35
  %184 = lshr i32 %183, 2, !dbg !35
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !35
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !35
  %187 = bitcast float %135 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !35
  %188 = or disjoint i32 %168, 4, !dbg !35
  %189 = getelementptr float, ptr addrspace(3) %170, i32 %188, !dbg !35
  %190 = bitcast float %136 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !35
  %191 = or disjoint i32 %168, 20, !dbg !35
  %192 = lshr i32 %191, 2, !dbg !35
  %193 = and i32 %192, 1012, !dbg !35
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !35
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %191, !dbg !35
  %196 = bitcast float %137 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !35
  %197 = or disjoint i32 %168, 36, !dbg !35
  %198 = lshr i32 %197, 2, !dbg !35
  %199 = and i32 %198, 1016, !dbg !35
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !35
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %197, !dbg !35
  %202 = bitcast float %138 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !35
  %203 = or disjoint i32 %168, 52, !dbg !35
  %204 = lshr i32 %203, 2, !dbg !35
  %205 = and i32 %204, 1020, !dbg !35
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !35
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %203, !dbg !35
  %208 = bitcast float %139 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !35
  %209 = or disjoint i32 %168, 8, !dbg !35
  %210 = getelementptr float, ptr addrspace(3) %170, i32 %209, !dbg !35
  %211 = bitcast float %140 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !35
  %212 = or disjoint i32 %168, 24, !dbg !35
  %213 = lshr i32 %212, 2, !dbg !35
  %214 = and i32 %213, 1012, !dbg !35
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !35
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %212, !dbg !35
  %217 = bitcast float %141 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !35
  %218 = or disjoint i32 %168, 40, !dbg !35
  %219 = lshr i32 %218, 2, !dbg !35
  %220 = and i32 %219, 1016, !dbg !35
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !35
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %218, !dbg !35
  %223 = bitcast float %142 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !35
  %224 = or disjoint i32 %168, 56, !dbg !35
  %225 = lshr i32 %224, 2, !dbg !35
  %226 = and i32 %225, 1020, !dbg !35
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !35
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %224, !dbg !35
  %229 = bitcast float %143 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !35
  %230 = or disjoint i32 %168, 12, !dbg !35
  %231 = getelementptr float, ptr addrspace(3) %170, i32 %230, !dbg !35
  %232 = bitcast float %144 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #2, !dbg !35
  %233 = or disjoint i32 %168, 28, !dbg !35
  %234 = lshr i32 %233, 2, !dbg !35
  %235 = and i32 %234, 1012, !dbg !35
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !35
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %233, !dbg !35
  %238 = bitcast float %145 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #2, !dbg !35
  %239 = or disjoint i32 %168, 44, !dbg !35
  %240 = lshr i32 %239, 2, !dbg !35
  %241 = and i32 %240, 1016, !dbg !35
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !35
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %239, !dbg !35
  %244 = bitcast float %146 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !35
  %245 = or disjoint i32 %168, 60, !dbg !35
  %246 = lshr i32 %245, 2, !dbg !35
  %247 = and i32 %246, 1020, !dbg !35
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !35
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %245, !dbg !35
  %250 = bitcast float %147 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %251 = and i32 %8, 252, !dbg !35
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !35
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %169, !dbg !35
  %254 = or disjoint i32 %169, 1024, !dbg !35
  %255 = lshr exact i32 %254, 2, !dbg !35
  %256 = and i32 %255, 508, !dbg !35
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !35
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %254, !dbg !35
  %259 = load <4 x i32>, ptr addrspace(3) %258, align 16, !dbg !35
  %260 = or disjoint i32 %169, 2048, !dbg !35
  %261 = lshr exact i32 %260, 2, !dbg !35
  %262 = and i32 %261, 764, !dbg !35
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !35
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %260, !dbg !35
  %265 = load <4 x i32>, ptr addrspace(3) %264, align 16, !dbg !35
  %266 = or disjoint i32 %169, 3072, !dbg !35
  %267 = lshr exact i32 %266, 2, !dbg !35
  %268 = and i32 %267, 1020, !dbg !35
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !35
  %270 = getelementptr inbounds float, ptr addrspace(3) %269, i32 %266, !dbg !35
  %271 = load <4 x i32>, ptr addrspace(3) %270, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %253, align 16, !dbg !35
  %272 = getelementptr inbounds i8, ptr addrspace(3) %253, i32 4, !dbg !35
  %.extract19 = load i32, ptr addrspace(3) %272, align 4, !dbg !35
  %273 = getelementptr inbounds i8, ptr addrspace(3) %253, i32 8, !dbg !35
  %.extract20 = load i32, ptr addrspace(3) %273, align 8, !dbg !35
  %274 = getelementptr inbounds i8, ptr addrspace(3) %253, i32 12, !dbg !35
  %.extract21 = load i32, ptr addrspace(3) %274, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %159, i1 %64) #2, !dbg !35
  %.extract22 = extractelement <4 x i32> %259, i64 0, !dbg !35
  %.extract23 = extractelement <4 x i32> %259, i64 1, !dbg !35
  %.extract24 = extractelement <4 x i32> %259, i64 2, !dbg !35
  %.extract25 = extractelement <4 x i32> %259, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %161, i1 %65) #2, !dbg !35
  %.extract26 = extractelement <4 x i32> %265, i64 0, !dbg !35
  %.extract27 = extractelement <4 x i32> %265, i64 1, !dbg !35
  %.extract28 = extractelement <4 x i32> %265, i64 2, !dbg !35
  %.extract29 = extractelement <4 x i32> %265, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %163, i1 %66) #2, !dbg !35
  %.extract30 = extractelement <4 x i32> %271, i64 0, !dbg !35
  %.extract31 = extractelement <4 x i32> %271, i64 1, !dbg !35
  %.extract32 = extractelement <4 x i32> %271, i64 2, !dbg !35
  %.extract33 = extractelement <4 x i32> %271, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %165, i1 %67) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf5r3dr5z7v5vd7s4v4byy2nhllbawuwtkvwr3eyoucppnkzkiwx.py", directory: "inductor_cache/f5")
!4 = !{ptr @triton_poi_fused_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_1", linkageName: "triton_poi_fused_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 33, scope: !7)
!31 = !DILocation(line: 35, column: 43, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 38, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 54, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
