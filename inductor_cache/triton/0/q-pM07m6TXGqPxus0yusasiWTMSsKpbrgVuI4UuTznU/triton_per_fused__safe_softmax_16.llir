; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__safe_softmax_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %7 = and i32 %6, 31, !dbg !11
  %8 = lshr i32 %6, 5, !dbg !11
  %9 = and i32 %6, 127, !dbg !11
  %10 = or disjoint i32 %9, 128, !dbg !11
  %11 = or disjoint i32 %9, 256, !dbg !11
  %12 = or disjoint i32 %9, 384, !dbg !11
  %13 = icmp eq i32 %9, 0, !dbg !12
  %.frozen = freeze i32 %5, !dbg !13
  %14 = sdiv i32 %.frozen, 257, !dbg !13
  %15 = mul i32 %14, 257, !dbg !14
  %.decomposed = sub i32 %.frozen, %15, !dbg !14
  %16 = mul i32 %5, 257, !dbg !15
  %17 = add i32 %16, %9, !dbg !16
  %18 = add i32 %16, %10, !dbg !16
  %19 = add i32 %16, %11, !dbg !16
  %20 = add i32 %16, %12, !dbg !16
  %21 = sext i32 %17 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = sext i32 %18 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %25 = sext i32 %19 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !17
  %27 = sext i32 %20 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true) #3, !dbg !18
  %30 = bitcast i32 %29 to float, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true) #3, !dbg !18
  %32 = bitcast i32 %31 to float, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %13, i32 0, i1 %13) #3, !dbg !18
  %34 = bitcast i32 %33 to float, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 false, i32 0, i1 false) #3, !dbg !18
  %36 = bitcast i32 %35 to float, !dbg !18
  %37 = select i1 %13, float %34, float 0xFFF0000000000000, !dbg !19
  %38 = fcmp ogt float %30, %32, !dbg !20
  %39 = fcmp uno float %30, 0.000000e+00, !dbg !25
  %40 = or i1 %39, %38, !dbg !26
  %41 = select i1 %40, float %30, float %32, !dbg !27
  %42 = fcmp ogt float %41, %37, !dbg !20
  %43 = fcmp uno float %41, 0.000000e+00, !dbg !25
  %44 = or i1 %42, %43, !dbg !26
  %45 = select i1 %44, float %41, float %37, !dbg !27
  %46 = bitcast float %45 to i32, !dbg !28
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 16, i32 31), !dbg !28
  %48 = bitcast i32 %47 to float, !dbg !28
  %49 = fcmp ogt float %45, %48, !dbg !20
  %50 = fcmp uno float %45, 0.000000e+00, !dbg !25
  %51 = or i1 %49, %50, !dbg !26
  %52 = select i1 %51, float %45, float %48, !dbg !27
  %53 = bitcast float %52 to i32, !dbg !28
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !28
  %55 = bitcast i32 %54 to float, !dbg !28
  %56 = fcmp ogt float %52, %55, !dbg !20
  %57 = fcmp uno float %52, 0.000000e+00, !dbg !25
  %58 = or i1 %56, %57, !dbg !26
  %59 = select i1 %58, float %52, float %55, !dbg !27
  %60 = bitcast float %59 to i32, !dbg !28
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !28
  %62 = bitcast i32 %61 to float, !dbg !28
  %63 = fcmp ogt float %59, %62, !dbg !20
  %64 = fcmp uno float %59, 0.000000e+00, !dbg !25
  %65 = or i1 %63, %64, !dbg !26
  %66 = select i1 %65, float %59, float %62, !dbg !27
  %67 = bitcast float %66 to i32, !dbg !28
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = fcmp ogt float %66, %69, !dbg !20
  %71 = fcmp uno float %66, 0.000000e+00, !dbg !25
  %72 = or i1 %70, %71, !dbg !26
  %73 = select i1 %72, float %66, float %69, !dbg !27
  %74 = bitcast float %73 to i32, !dbg !28
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = fcmp ogt float %73, %76, !dbg !20
  %78 = fcmp uno float %73, 0.000000e+00, !dbg !25
  %79 = or i1 %77, %78, !dbg !26
  %80 = icmp eq i32 %7, 0, !dbg !28
  %81 = and i32 %8, 3, !dbg !28
  %82 = zext nneg i32 %81 to i64, !dbg !28
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i64 %82, !dbg !28
  %84 = select i1 %79, i32 %74, i32 %75, !dbg !27
  %85 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %85, i1 %80) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %86 = icmp slt i32 %6, 4, !dbg !28
  %87 = sext i32 %6 to i64, !dbg !28
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i64 %87, !dbg !28
  %89 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %86) #3, !dbg !28
  %90 = bitcast i32 %89 to float, !dbg !28
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !28
  %92 = bitcast i32 %91 to float, !dbg !28
  %93 = fcmp ogt float %90, %92, !dbg !20
  %94 = fcmp uno float %90, 0.000000e+00, !dbg !25
  %95 = or i1 %94, %93, !dbg !26
  %96 = select i1 %95, float %90, float %92, !dbg !27
  %97 = bitcast float %96 to i32, !dbg !28
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = fcmp ogt float %96, %99, !dbg !20
  %101 = fcmp uno float %96, 0.000000e+00, !dbg !25
  %102 = or i1 %100, %101, !dbg !26
  %103 = and i32 %6, 3, !dbg !28
  %104 = icmp eq i32 %103, 0, !dbg !28
  %105 = and i1 %86, %104, !dbg !28
  %106 = select i1 %102, i32 %97, i32 %98, !dbg !27
  %107 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %107, i1 %105) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %108 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %109 = fadd float %108, 0.000000e+00, !dbg !29
  %110 = fsub float %30, %109, !dbg !31
  %111 = fsub float %32, %109, !dbg !31
  %112 = fsub float %34, %109, !dbg !31
  %113 = fsub float %36, %109, !dbg !31
  %114 = fmul float %110, 0x3FF7154760000000, !dbg !32
  %115 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %114) #3, !dbg !32
  %116 = fmul float %111, 0x3FF7154760000000, !dbg !32
  %117 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %116) #3, !dbg !32
  %118 = fmul float %112, 0x3FF7154760000000, !dbg !32
  %119 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %118) #3, !dbg !32
  %120 = fmul float %113, 0x3FF7154760000000, !dbg !32
  %121 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %120) #3, !dbg !32
  %122 = select i1 %13, float %119, float 0.000000e+00, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %123 = fadd float %115, %117, !dbg !38
  %124 = fadd float %123, %122, !dbg !38
  %125 = fadd float %124, 0.000000e+00, !dbg !38
  %126 = bitcast float %125 to i32, !dbg !34
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 16, i32 31), !dbg !34
  %128 = bitcast i32 %127 to float, !dbg !34
  %129 = fadd float %125, %128, !dbg !38
  %130 = bitcast float %129 to i32, !dbg !34
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 8, i32 31), !dbg !34
  %132 = bitcast i32 %131 to float, !dbg !34
  %133 = fadd float %129, %132, !dbg !38
  %134 = bitcast float %133 to i32, !dbg !34
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !34
  %136 = bitcast i32 %135 to float, !dbg !34
  %137 = fadd float %133, %136, !dbg !38
  %138 = bitcast float %137 to i32, !dbg !34
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !34
  %140 = bitcast i32 %139 to float, !dbg !34
  %141 = fadd float %137, %140, !dbg !38
  %142 = bitcast float %141 to i32, !dbg !34
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !34
  %144 = bitcast i32 %143 to float, !dbg !34
  %145 = fadd float %141, %144, !dbg !38
  %146 = bitcast float %145 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %146, i1 %80) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %147 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %86) #3, !dbg !34
  %148 = bitcast i32 %147 to float, !dbg !34
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !34
  %150 = bitcast i32 %149 to float, !dbg !34
  %151 = fadd float %148, %150, !dbg !38
  %152 = bitcast float %151 to i32, !dbg !34
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !34
  %154 = bitcast i32 %153 to float, !dbg !34
  %155 = fadd float %151, %154, !dbg !38
  %156 = bitcast float %155 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %156, i1 %105) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %157 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %158 = fadd float %157, 0.000000e+00, !dbg !40
  %159 = fcmp une float %30, 0xFFF0000000000000, !dbg !42
  %160 = fcmp une float %32, 0xFFF0000000000000, !dbg !42
  %161 = fcmp une float %34, 0xFFF0000000000000, !dbg !42
  %narrow = select i1 %13, i1 %161, i1 false, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %162 = or i1 %159, %160, !dbg !46
  %163 = or i1 %162, %narrow, !dbg !46
  %164 = zext i1 %163 to i32, !dbg !46
  %165 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %164, i32 -1), !dbg !44
  %166 = insertelement <1 x i32> poison, i32 %165, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %166, i1 %80) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %167 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %86) #3, !dbg !44
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !44
  %169 = or i32 %168, %167, !dbg !46
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !44
  %171 = or i32 %169, %170, !dbg !46
  %172 = insertelement <1 x i32> poison, i32 %171, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %172, i1 %105) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %173 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %174 = icmp eq i32 %173, 0, !dbg !47
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %158) #3, !dbg !48
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %158) #3, !dbg !48
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %158) #3, !dbg !48
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %158) #3, !dbg !48
  %179 = mul nsw i32 %.decomposed, 257, !dbg !49
  %180 = mul i32 %14, 66080, !dbg !50
  %181 = add i32 %180, %179, !dbg !51
  %182 = add i32 %181, %9, !dbg !52
  %183 = add i32 %181, %10, !dbg !52
  %184 = add i32 %181, %11, !dbg !52
  %185 = add i32 %181, %12, !dbg !52
  %186 = sext i32 %182 to i64, !dbg !53
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !53
  %188 = sext i32 %183 to i64, !dbg !53
  %189 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !53
  %190 = sext i32 %184 to i64, !dbg !53
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !53
  %192 = sext i32 %185 to i64, !dbg !53
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !53
  %194 = bitcast float %175 to i32, !dbg !54
  %195 = select i1 %174, i32 0, i32 %194, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %187, i1 true) #3, !dbg !54
  %196 = bitcast float %176 to i32, !dbg !54
  %197 = select i1 %174, i32 0, i32 %196, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %189, i1 true) #3, !dbg !54
  %198 = bitcast float %177 to i32, !dbg !54
  %199 = select i1 %174, i32 0, i32 %198, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %191, i1 %13) #3, !dbg !54
  %200 = bitcast float %178 to i32, !dbg !54
  %201 = select i1 %174, i32 0, i32 %200, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %201, ptr addrspace(1) %193, i1 false) #3, !dbg !54
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clikztztje644adykjs3rtqlo2wga54e2pnssislqdckiyo2drot.py", directory: "inductor_cache/li")
!4 = !{ptr @triton_per_fused__safe_softmax_16, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__safe_softmax_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__safe_softmax_16", linkageName: "triton_per_fused__safe_softmax_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 35, column: 19, scope: !7)
!14 = !DILocation(line: 34, column: 19, scope: !7)
!15 = !DILocation(line: 36, column: 39, scope: !7)
!16 = !DILocation(line: 36, column: 35, scope: !7)
!17 = !DILocation(line: 36, column: 30, scope: !7)
!18 = !DILocation(line: 36, column: 44, scope: !7)
!19 = !DILocation(line: 38, column: 33, scope: !7)
!20 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 39, column: 70, scope: !7)
!25 = !DILocation(line: 120, column: 21, scope: !21, inlinedAt: !24)
!26 = !DILocation(line: 120, column: 16, scope: !21, inlinedAt: !24)
!27 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !24)
!28 = !DILocation(line: 131, column: 29, scope: !23, inlinedAt: !24)
!29 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !30)
!30 = !DILocation(line: 39, column: 44, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 23, scope: !7)
!33 = !DILocation(line: 43, column: 33, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 44, column: 58, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 45, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 35, scope: !7)
!44 = !DILocation(line: 232, column: 29, scope: !23, inlinedAt: !45)
!45 = !DILocation(line: 52, column: 71, scope: !7)
!46 = !DILocation(line: 227, column: 15, scope: !21, inlinedAt: !45)
!47 = !DILocation(line: 53, column: 21, scope: !7)
!48 = !DILocation(line: 54, column: 19, scope: !7)
!49 = !DILocation(line: 57, column: 34, scope: !7)
!50 = !DILocation(line: 57, column: 45, scope: !7)
!51 = !DILocation(line: 57, column: 30, scope: !7)
!52 = !DILocation(line: 57, column: 39, scope: !7)
!53 = !DILocation(line: 57, column: 25, scope: !7)
!54 = !DILocation(line: 57, column: 57, scope: !7)
!55 = !DILocation(line: 56, column: 35, scope: !7)
!56 = !DILocation(line: 57, column: 4, scope: !7)
