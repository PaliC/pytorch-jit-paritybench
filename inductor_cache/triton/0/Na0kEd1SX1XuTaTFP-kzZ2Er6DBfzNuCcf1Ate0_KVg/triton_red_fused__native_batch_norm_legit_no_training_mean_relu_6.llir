; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = lshr i32 %11, 4, !dbg !14
  %16 = and i32 %15, 7, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %17 = sdiv i32 %.frozen, 2048, !dbg !15
  %18 = mul i32 %17, 2048, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = sext i32 %.decomposed to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = insertelement <4 x i32> poison, i32 %22, i64 0, !dbg !18
  %27 = insertelement <4 x i32> %26, i32 %23, i64 1, !dbg !18
  %28 = insertelement <4 x i32> %27, i32 %24, i64 2, !dbg !18
  %29 = insertelement <4 x i32> %28, i32 %25, i64 3, !dbg !18
  %30 = bitcast <4 x i32> %29 to <4 x float>, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %37 = bitcast i32 %33 to float, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !21
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #5, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %47 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !22
  %48 = insertelement <4 x i32> %47, i32 %44, i64 1, !dbg !22
  %49 = insertelement <4 x i32> %48, i32 %45, i64 2, !dbg !22
  %50 = insertelement <4 x i32> %49, i32 %46, i64 3, !dbg !22
  %51 = bitcast <4 x i32> %50 to <4 x float>, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #5, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %58 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !24
  %59 = insertelement <4 x i32> %58, i32 %55, i64 1, !dbg !24
  %60 = insertelement <4 x i32> %59, i32 %56, i64 2, !dbg !24
  %61 = insertelement <4 x i32> %60, i32 %57, i64 3, !dbg !24
  %62 = bitcast <4 x i32> %61 to <4 x float>, !dbg !24
  %63 = shl i32 %17, 18, !dbg !25
  %64 = fadd float %37, 0x3EE4F8B580000000, !dbg !26
  %65 = fadd float %38, 0x3EE4F8B580000000, !dbg !26
  %66 = fadd float %39, 0x3EE4F8B580000000, !dbg !26
  %67 = fadd float %40, 0x3EE4F8B580000000, !dbg !26
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i = icmp eq i32 %68, 0, !dbg !27
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i = icmp eq i32 %69, 0, !dbg !27
  br i1 %.not.i, label %75, label %70, !dbg !27

70:                                               ; preds = %8
  br i1 %.not1.i, label %73, label %71, !dbg !27

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

75:                                               ; preds = %8
  br i1 %.not1.i, label %78, label %76, !dbg !27

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !27
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i1 = icmp eq i32 %80, 0, !dbg !27
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !27
  br i1 %.not.i1, label %87, label %82, !dbg !27

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !27

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !27

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !27
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i6 = icmp eq i32 %92, 0, !dbg !27
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i9 = icmp eq i32 %93, 0, !dbg !27
  br i1 %.not.i6, label %99, label %94, !dbg !27

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !27

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !27

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %95, %97, %100, %102
  %.0.i8 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !27
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i11 = icmp eq i32 %104, 0, !dbg !27
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i14 = icmp eq i32 %105, 0, !dbg !27
  br i1 %.not.i11, label %111, label %106, !dbg !27

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !27

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !27

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %107, %109, %112, %114
  %.0.i13 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !27
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !28
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !28
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #5, !dbg !28
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !28
  %120 = add i32 %63, %.decomposed
  %121 = insertelement <4 x float> poison, float %116, i64 0, !dbg !29
  %122 = insertelement <4 x float> %121, float %117, i64 1, !dbg !29
  %123 = insertelement <4 x float> %122, float %118, i64 2, !dbg !29
  %124 = insertelement <4 x float> %123, float %119, i64 3, !dbg !29
  br label %125, !dbg !30

125:                                              ; preds = %__nv_sqrtf.exit15, %125
  %indvars.iv = phi i64 [ 0, %__nv_sqrtf.exit15 ], [ %indvars.iv.next, %125 ]
  %126 = phi <4 x float> [ zeroinitializer, %__nv_sqrtf.exit15 ], [ %148, %125 ]
  %127 = trunc i64 %indvars.iv to i32, !dbg !31
  %.tr = or disjoint i32 %16, %127, !dbg !31
  %128 = shl i32 %.tr, 11, !dbg !31
  %129 = add i32 %120, %128, !dbg !31
  %130 = sext i32 %129 to i64, !dbg !32
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !32
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !33
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !33
  %137 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !33
  %138 = insertelement <4 x i32> %137, i32 %134, i64 1, !dbg !33
  %139 = insertelement <4 x i32> %138, i32 %135, i64 2, !dbg !33
  %140 = insertelement <4 x i32> %139, i32 %136, i64 3, !dbg !33
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !33
  %142 = fsub <4 x float> %141, %30, !dbg !34
  %143 = fmul <4 x float> %124, %142, !dbg !29
  %144 = fmul <4 x float> %143, %51, !dbg !35
  %145 = fadd <4 x float> %144, %62, !dbg !36
  %146 = fcmp olt <4 x float> %145, zeroinitializer, !dbg !37
  %147 = select <4 x i1> %146, <4 x float> zeroinitializer, <4 x float> %145, !dbg !41
  %148 = fadd <4 x float> %126, %147, !dbg !42
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !30
  %149 = icmp samesign ult i64 %indvars.iv, 120, !dbg !30
  br i1 %149, label %125, label %150, !dbg !30

150:                                              ; preds = %125
  %151 = lshr i32 %11, 5, !dbg !12
  %152 = and i32 %11, 63, !dbg !12
  %153 = or disjoint i32 %10, %152, !dbg !13
  %154 = and i32 %11, 16, !dbg !12
  %155 = extractelement <4 x float> %148, i64 0, !dbg !43
  %156 = bitcast float %155 to i32, !dbg !43
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 16, i32 31), !dbg !43
  %158 = bitcast i32 %157 to float, !dbg !43
  %159 = fadd float %155, %158, !dbg !47
  %160 = extractelement <4 x float> %148, i64 1, !dbg !43
  %161 = bitcast float %160 to i32, !dbg !43
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 16, i32 31), !dbg !43
  %163 = bitcast i32 %162 to float, !dbg !43
  %164 = fadd float %160, %163, !dbg !47
  %165 = extractelement <4 x float> %148, i64 2, !dbg !43
  %166 = bitcast float %165 to i32, !dbg !43
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 16, i32 31), !dbg !43
  %168 = bitcast i32 %167 to float, !dbg !43
  %169 = fadd float %165, %168, !dbg !47
  %170 = extractelement <4 x float> %148, i64 3, !dbg !43
  %171 = bitcast float %170 to i32, !dbg !43
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 16, i32 31), !dbg !43
  %173 = bitcast i32 %172 to float, !dbg !43
  %174 = fadd float %170, %173, !dbg !47
  %175 = icmp eq i32 %154, 0, !dbg !43
  %176 = and i32 %151, 3, !dbg !43
  %177 = shl nuw nsw i32 %13, 2, !dbg !43
  %178 = or disjoint i32 %177, %176, !dbg !43
  %179 = zext nneg i32 %178 to i64, !dbg !43
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i64 %179, !dbg !43
  %181 = bitcast float %159 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 %175) #5, !dbg !43
  %182 = or disjoint i32 %177, 4, !dbg !43
  %183 = or disjoint i32 %182, %176, !dbg !43
  %184 = zext nneg i32 %183 to i64, !dbg !43
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i64 %184, !dbg !43
  %186 = bitcast float %164 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 %175) #5, !dbg !43
  %187 = or disjoint i32 %177, 8, !dbg !43
  %188 = or disjoint i32 %187, %176, !dbg !43
  %189 = zext nneg i32 %188 to i64, !dbg !43
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i64 %189, !dbg !43
  %191 = bitcast float %169 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 %175) #5, !dbg !43
  %192 = or disjoint i32 %177, 12, !dbg !43
  %193 = or disjoint i32 %192, %176, !dbg !43
  %194 = zext nneg i32 %193 to i64, !dbg !43
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i64 %194, !dbg !43
  %196 = bitcast float %174 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 %175) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %197 = icmp slt i32 %11, 256, !dbg !43
  %198 = sext i32 %11 to i64, !dbg !43
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i64 %198, !dbg !43
  %200 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %199, i1 %197) #5, !dbg !43
  %201 = bitcast i32 %200 to float, !dbg !43
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 2, i32 31), !dbg !43
  %203 = bitcast i32 %202 to float, !dbg !43
  %204 = fadd float %201, %203, !dbg !47
  %205 = bitcast float %204 to i32, !dbg !43
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !43
  %207 = bitcast i32 %206 to float, !dbg !43
  %208 = fadd float %204, %207, !dbg !47
  %209 = and i32 %11, 3, !dbg !43
  %210 = icmp eq i32 %209, 0, !dbg !43
  %211 = and i1 %197, %210, !dbg !43
  %212 = bitcast float %208 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %212, i1 %211) #5, !dbg !43
  %213 = add i32 %11, 128, !dbg !43
  %214 = sext i32 %213 to i64, !dbg !43
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i64 %214, !dbg !43
  %216 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %215, i1 %197) #5, !dbg !43
  %217 = bitcast i32 %216 to float, !dbg !43
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !43
  %219 = bitcast i32 %218 to float, !dbg !43
  %220 = fadd float %217, %219, !dbg !47
  %221 = bitcast float %220 to i32, !dbg !43
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 1, i32 31), !dbg !43
  %223 = bitcast i32 %222 to float, !dbg !43
  %224 = fadd float %220, %223, !dbg !47
  %225 = bitcast float %224 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %225, i1 %211) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %226 = zext nneg i32 %177 to i64, !dbg !43
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i64 %226, !dbg !43
  %228 = load i32, ptr addrspace(3) %227, align 16, !dbg !43
  %229 = zext nneg i32 %182 to i64, !dbg !43
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !43
  %231 = load i32, ptr addrspace(3) %230, align 16, !dbg !43
  %232 = zext nneg i32 %187 to i64, !dbg !43
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i64 %232, !dbg !43
  %234 = load i32, ptr addrspace(3) %233, align 16, !dbg !43
  %235 = zext nneg i32 %192 to i64, !dbg !43
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i64 %235, !dbg !43
  %237 = load i32, ptr addrspace(3) %236, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %238 = zext nneg i32 %13 to i64, !dbg !49
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %238, !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %239, i32 %228, i32 %231, i32 %234, i32 %237, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %240 = zext nneg i32 %152 to i64, !dbg !49
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %240, !dbg !49
  %242 = load i32, ptr addrspace(3) %241, align 4, !dbg !49
  %243 = sext i32 %153 to i64, !dbg !50
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !50
  %245 = and i32 %11, 64, !dbg !51
  %246 = icmp eq i32 %245, 0, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %242, ptr addrspace(1) %244, i1 %246) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py", directory: "inductor_cache/tf")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_mean_relu_6", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_mean_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 38, column: 56, scope: !7)
!26 = !DILocation(line: 41, column: 22, scope: !7)
!27 = !DILocation(line: 42, column: 30, scope: !7)
!28 = !DILocation(line: 44, column: 22, scope: !7)
!29 = !DILocation(line: 47, column: 23, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 49, scope: !7)
!32 = !DILocation(line: 38, column: 34, scope: !7)
!33 = !DILocation(line: 38, column: 61, scope: !7)
!34 = !DILocation(line: 39, column: 22, scope: !7)
!35 = !DILocation(line: 48, column: 24, scope: !7)
!36 = !DILocation(line: 49, column: 24, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 51, column: 46, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 55, column: 27, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !46)
!48 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!49 = !DILocation(line: 55, column: 30, scope: !7)
!50 = !DILocation(line: 56, column: 25, scope: !7)
!51 = !DILocation(line: 56, column: 37, scope: !7)
!52 = !DILocation(line: 56, column: 4, scope: !7)
