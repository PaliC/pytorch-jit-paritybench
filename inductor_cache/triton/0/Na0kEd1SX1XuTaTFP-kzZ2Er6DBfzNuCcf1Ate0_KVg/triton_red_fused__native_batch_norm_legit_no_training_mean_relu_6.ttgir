#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":19:0)
#loc1 = loc(unknown)
#loc40 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":55:27)
#loc49 = loc(callsite(#loc1 at #loc40))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<2048> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<262144> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<2048> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<128> : tensor<1x8xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc6)
    %12 = arith.remsi %8, %cst_0 : tensor<64x1xi32, #blocked> loc(#loc7)
    %13 = arith.divsi %8, %cst_0 : tensor<64x1xi32, #blocked> loc(#loc8)
    %14 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %15 = tt.addptr %14, %12 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc9)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc10)
    %17 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %18 = tt.addptr %17, %12 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %20 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %12 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.load %21 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %23 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %24 = tt.addptr %23, %12 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.load %24 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %26 = tt.broadcast %12 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc17)
    %27 = arith.muli %13, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = tt.broadcast %27 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc19)
    %29 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc20)
    %30 = tt.broadcast %16 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc21)
    %31 = arith.addf %19, %cst_2 : tensor<64x1xf32, #blocked> loc(#loc22)
    %32 = tt.extern_elementwise %31 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<64x1xf32, #blocked>) -> tensor<64x1xf32, #blocked> loc(#loc23)
    %33 = arith.divf %cst_1, %32 : tensor<64x1xf32, #blocked> loc(#loc24)
    %34 = tt.broadcast %33 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc25)
    %35 = tt.broadcast %22 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc26)
    %36 = tt.broadcast %25 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc27)
    %37 = scf.for %arg8 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg9 = %cst) -> (tensor<64x8xf32, #blocked>)  : i32 {
      %43 = tt.splat %arg8 : i32 -> tensor<1x8xi32, #blocked> loc(#loc29)
      %44 = arith.addi %43, %11 : tensor<1x8xi32, #blocked> loc(#loc29)
      %45 = arith.cmpi slt, %44, %cst_5 : tensor<1x8xi32, #blocked> loc(#loc30)
      %46 = arith.muli %44, %cst_4 : tensor<1x8xi32, #blocked> loc(#loc31)
      %47 = tt.broadcast %46 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc17)
      %48 = arith.addi %26, %47 : tensor<64x8xi32, #blocked> loc(#loc17)
      %49 = arith.addi %48, %28 : tensor<64x8xi32, #blocked> loc(#loc19)
      %50 = tt.addptr %29, %49 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc20)
      %51 = tt.broadcast %45 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc32)
      %52 = tt.load %50, %51, %cst evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc32)
      %53 = arith.subf %52, %30 : tensor<64x8xf32, #blocked> loc(#loc21)
      %54 = arith.mulf %53, %34 : tensor<64x8xf32, #blocked> loc(#loc25)
      %55 = arith.mulf %54, %35 : tensor<64x8xf32, #blocked> loc(#loc26)
      %56 = arith.addf %55, %36 : tensor<64x8xf32, #blocked> loc(#loc27)
      %57 = arith.cmpf ogt, %cst, %56 : tensor<64x8xf32, #blocked> loc(#loc46)
      %58 = arith.select %57, %cst, %56 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc47)
      %59 = arith.addf %arg9, %58 : tensor<64x8xf32, #blocked> loc(#loc36)
      %60 = arith.select %51, %59, %arg9 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc37)
      scf.yield %60 : tensor<64x8xf32, #blocked> loc(#loc38)
    } loc(#loc28)
    %38 = "tt.reduce"(%37) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc40)), %arg9: f32 loc(callsite(#loc1 at #loc40))):
      %43 = arith.addf %arg8, %arg9 : f32 loc(#loc51)
      tt.reduce.return %43 : f32 loc(#loc48)
    }) : (tensor<64x8xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc48)
    %39 = triton_gpu.convert_layout %38 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc42)
    %40 = tt.expand_dims %39 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc42)
    %41 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc43)
    %42 = tt.addptr %41, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc43)
    tt.store %42, %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":22:28)
#loc3 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":22:33)
#loc4 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":23:44)
#loc5 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":23:23)
#loc6 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":25:33)
#loc7 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":26:19)
#loc8 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":27:19)
#loc9 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":28:30)
#loc10 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":28:35)
#loc11 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":29:30)
#loc12 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":29:35)
#loc13 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":30:31)
#loc14 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":30:36)
#loc15 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":31:31)
#loc16 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":31:36)
#loc17 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":38:39)
#loc18 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":38:56)
#loc19 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":38:49)
#loc20 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":38:34)
#loc21 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":39:22)
#loc22 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":41:22)
#loc23 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":42:30)
#loc24 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":44:22)
#loc25 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":47:23)
#loc26 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":48:24)
#loc27 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":49:24)
#loc28 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":34:36)
#loc29 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":35:27)
#loc30 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":36:25)
#loc31 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":38:44)
#loc32 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":38:61)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc34 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":51:46)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc36 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":53:25)
#loc37 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":54:40)
#loc38 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":54:8)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc42 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":55:30)
#loc43 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":56:25)
#loc44 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":56:37)
#loc45 = loc("inductor_cache/tf/ctfz3xr2uu7f4pbroa5q4n5ub2rk3jmx7o2m4iepmyzjrmsssgj5.py":56:4)
#loc46 = loc(callsite(#loc33 at #loc34))
#loc47 = loc(callsite(#loc35 at #loc34))
#loc48 = loc(callsite(#loc39 at #loc40))
#loc50 = loc(callsite(#loc41 at #loc39))
#loc51 = loc(callsite(#loc50 at #loc40))
