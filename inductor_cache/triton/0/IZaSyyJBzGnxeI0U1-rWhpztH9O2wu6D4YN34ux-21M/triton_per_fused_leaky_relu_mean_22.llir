; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_leaky_relu_mean_22(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 252, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 128, !dbg !12
  %12 = and i32 %10, 254, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %12, !dbg !13
  %15 = icmp slt i32 %13, 512, !dbg !14
  %16 = icmp slt i32 %14, 512, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen, 128, !dbg !15
  %18 = mul i32 %17, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = add nsw i32 %.decomposed, %11, !dbg !17
  %20 = shl i32 %17, 8, !dbg !18
  %21 = add i32 %19, %20, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !21
  %29 = lshr i32 %7, 6, !dbg !22
  %30 = and i32 %29, 1, !dbg !22
  %31 = shl nuw nsw i32 %9, 1, !dbg !22
  %32 = or disjoint i32 %31, %30, !dbg !22
  %33 = zext nneg i32 %32 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(3) @global_smem, i64 %33, !dbg !22
  %35 = select i1 %15, i32 %25, i32 0, !dbg !26
  %36 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %36, i1 true) #3, !dbg !22
  %37 = or disjoint i32 %31, 2, !dbg !22
  %38 = or disjoint i32 %37, %30, !dbg !22
  %39 = zext nneg i32 %38 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(3) @global_smem, i64 %39, !dbg !22
  %41 = select i1 %15, i32 %26, i32 0, !dbg !26
  %42 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %42, i1 true) #3, !dbg !22
  %43 = or disjoint i32 %31, 4, !dbg !22
  %44 = or disjoint i32 %43, %30, !dbg !22
  %45 = zext nneg i32 %44 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(3) @global_smem, i64 %45, !dbg !22
  %47 = select i1 %15, i32 %27, i32 0, !dbg !26
  %48 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %48, i1 true) #3, !dbg !22
  %49 = or disjoint i32 %31, 6, !dbg !22
  %50 = or disjoint i32 %49, %30, !dbg !22
  %51 = zext nneg i32 %50 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i64 %51, !dbg !22
  %53 = select i1 %15, i32 %28, i32 0, !dbg !26
  %54 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %54, i1 true) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %55 = icmp slt i32 %7, 512, !dbg !22
  %56 = sext i32 %7 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !22
  %58 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %57, i1 %55) #3, !dbg !22
  %59 = bitcast i32 %58 to float, !dbg !22
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = fadd float %59, %61, !dbg !27
  %63 = and i32 %7, 1, !dbg !22
  %64 = icmp eq i32 %63, 0, !dbg !22
  %65 = and i1 %55, %64, !dbg !22
  %66 = bitcast float %62 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %66, i1 %65) #3, !dbg !22
  %67 = add i32 %7, 128, !dbg !22
  %68 = sext i32 %67 to i64, !dbg !22
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i64 %68, !dbg !22
  %70 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %55) #3, !dbg !22
  %71 = bitcast i32 %70 to float, !dbg !22
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !22
  %73 = bitcast i32 %72 to float, !dbg !22
  %74 = fadd float %71, %73, !dbg !27
  %75 = bitcast float %74 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %75, i1 %65) #3, !dbg !22
  %76 = add i32 %7, 256, !dbg !22
  %77 = sext i32 %76 to i64, !dbg !22
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i64 %77, !dbg !22
  %79 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %55) #3, !dbg !22
  %80 = bitcast i32 %79 to float, !dbg !22
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !22
  %82 = bitcast i32 %81 to float, !dbg !22
  %83 = fadd float %80, %82, !dbg !27
  %84 = bitcast float %83 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %84, i1 %65) #3, !dbg !22
  %85 = add i32 %7, 384, !dbg !22
  %86 = sext i32 %85 to i64, !dbg !22
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i64 %86, !dbg !22
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %55) #3, !dbg !22
  %89 = bitcast i32 %88 to float, !dbg !22
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !22
  %91 = bitcast i32 %90 to float, !dbg !22
  %92 = fadd float %89, %91, !dbg !27
  %93 = bitcast float %92 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %93, i1 %65) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %94 = zext nneg i32 %31 to i64, !dbg !22
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i64 %94, !dbg !22
  %96 = load i32, ptr addrspace(3) %95, align 16, !dbg !22
  %97 = zext nneg i32 %37 to i64, !dbg !22
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i64 %97, !dbg !22
  %99 = load i32, ptr addrspace(3) %98, align 8, !dbg !22
  %100 = zext nneg i32 %43 to i64, !dbg !22
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i64 %100, !dbg !22
  %102 = load i32, ptr addrspace(3) %101, align 16, !dbg !22
  %103 = zext nneg i32 %49 to i64, !dbg !22
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i64 %103, !dbg !22
  %105 = load i32, ptr addrspace(3) %104, align 8, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %106 = zext nneg i32 %9 to i64, !dbg !29
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %107, i32 %96, i32 %99, i32 %102, i32 %105, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %108 = zext nneg i32 %12 to i64, !dbg !29
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %108, !dbg !29
  %110 = load float, ptr addrspace(3) %109, align 8, !dbg !29
  %111 = getelementptr inbounds i8, ptr addrspace(3) %109, i64 4, !dbg !29
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !29
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 2.560000e+02) #3, !dbg !29
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float 2.560000e+02) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %115 = sext i32 %14 to i64, !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !31
  %117 = bitcast float %113 to i32, !dbg !32
  %118 = bitcast float %114 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %118, ptr addrspace(1) %116, i1 %16) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccw2bwftbfyvta4bxyxvbrjr6k52osxeftjjq6c7gtrp7qvfpl2s.py", directory: "inductor_cache/cw")
!4 = !{ptr @triton_per_fused_leaky_relu_mean_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_leaky_relu_mean_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_leaky_relu_mean_22", linkageName: "triton_per_fused_leaky_relu_mean_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 44, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 53, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 36, column: 24, scope: !7)
!26 = !DILocation(line: 35, column: 33, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !25)
!28 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 4, scope: !7)
!31 = !DILocation(line: 40, column: 28, scope: !7)
!32 = !DILocation(line: 40, column: 39, scope: !7)
!33 = !DILocation(line: 40, column: 4, scope: !7)
