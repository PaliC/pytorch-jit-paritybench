; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 64, !dbg !13
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = icmp slt i32 %16, 128, !dbg !14
  %19 = shl i32 %12, 2, !dbg !15
  %20 = and i32 %19, 12, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %21 = sdiv i32 %.frozen, 32, !dbg !16
  %22 = mul i32 %21, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = shl i32 %15, 4, !dbg !18
  %24 = shl i32 %16, 4, !dbg !18
  %25 = or disjoint i32 %23, %20, !dbg !19
  %26 = or disjoint i32 %24, %20, !dbg !19
  %27 = sext i32 %25 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #4, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #4, !dbg !23
  %37 = sext i32 %.decomposed to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %17) #4, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %17) #4, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %17) #4, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %17) #4, !dbg !27
  %52 = bitcast i32 %51 to float, !dbg !27
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %18) #4, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %18) #4, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %18) #4, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %18) #4, !dbg !27
  %57 = bitcast i32 %56 to float, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #4, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #4, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #4, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #4, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #4, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #4, !dbg !29
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #4, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #4, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #4, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #4, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #4, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #4, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %18) #4, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %18) #4, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %18) #4, !dbg !31
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %18) #4, !dbg !31
  %76 = fadd float %52, 0x3EE4F8B580000000, !dbg !32
  %77 = fadd float %57, 0x3EE4F8B580000000, !dbg !32
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i11 = icmp eq i32 %84, 0, !dbg !33
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i14 = icmp eq i32 %85, 0, !dbg !33
  br i1 %.not.i11, label %91, label %86, !dbg !33

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %89, label %87, !dbg !33

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %94, label %92, !dbg !33

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

__nv_sqrtf.exit15:                                ; preds = %87, %89, %92, %94
  %.0.i13 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !33
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i31 = icmp eq i32 %102, 0, !dbg !33
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i34 = icmp eq i32 %103, 0, !dbg !33
  br i1 %.not.i31, label %109, label %104, !dbg !33

104:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %107, label %105, !dbg !33

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

109:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %112, label %110, !dbg !33

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

__nv_sqrtf.exit35:                                ; preds = %105, %107, %110, %112
  %.0.i33 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !33
  %114 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %115 = bitcast i32 %114 to float, !dbg !23
  %116 = bitcast i32 %46 to float, !dbg !25
  %117 = fsub float %115, %116, !dbg !34
  %118 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %119 = bitcast i32 %118 to float, !dbg !23
  %120 = fsub float %119, %116, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %122 = bitcast i32 %121 to float, !dbg !23
  %123 = fsub float %122, %116, !dbg !34
  %124 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %125 = bitcast i32 %124 to float, !dbg !23
  %126 = fsub float %125, %116, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %128 = bitcast i32 %127 to float, !dbg !23
  %129 = bitcast i32 %42 to float, !dbg !25
  %130 = fsub float %128, %129, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %132 = bitcast i32 %131 to float, !dbg !23
  %133 = fsub float %132, %129, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %135 = bitcast i32 %134 to float, !dbg !23
  %136 = fsub float %135, %129, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %138 = bitcast i32 %137 to float, !dbg !23
  %139 = fsub float %138, %129, !dbg !34
  %140 = bitcast i32 %75 to float, !dbg !31
  %141 = bitcast i32 %71 to float, !dbg !31
  %142 = bitcast i32 %66 to float, !dbg !29
  %143 = bitcast i32 %62 to float, !dbg !29
  %144 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !21
  %145 = bitcast i32 %144 to float, !dbg !21
  %146 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !21
  %147 = bitcast i32 %146 to float, !dbg !21
  %148 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !21
  %149 = bitcast i32 %148 to float, !dbg !21
  %150 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !21
  %151 = bitcast i32 %150 to float, !dbg !21
  %152 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %153 = bitcast i32 %152 to float, !dbg !21
  %154 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %155 = bitcast i32 %154 to float, !dbg !21
  %156 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %157 = bitcast i32 %156 to float, !dbg !21
  %158 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %159 = bitcast i32 %158 to float, !dbg !21
  %160 = sdiv i32 %16, 32, !dbg !16
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !35
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !35
  %163 = fmul float %139, %161, !dbg !36
  %164 = fmul float %136, %161, !dbg !36
  %165 = fmul float %133, %161, !dbg !36
  %166 = fmul float %130, %161, !dbg !36
  %167 = fmul float %126, %162, !dbg !36
  %168 = fmul float %123, %162, !dbg !36
  %169 = fmul float %120, %162, !dbg !36
  %170 = fmul float %117, %162, !dbg !36
  %171 = fmul float %163, %143, !dbg !37
  %172 = fmul float %164, %143, !dbg !37
  %173 = fmul float %165, %143, !dbg !37
  %174 = fmul float %166, %143, !dbg !37
  %175 = fmul float %167, %142, !dbg !37
  %176 = fmul float %168, %142, !dbg !37
  %177 = fmul float %169, %142, !dbg !37
  %178 = fmul float %170, %142, !dbg !37
  %179 = fadd float %171, %141, !dbg !38
  %180 = fadd float %172, %141, !dbg !38
  %181 = fadd float %173, %141, !dbg !38
  %182 = fadd float %174, %141, !dbg !38
  %183 = fadd float %175, %140, !dbg !38
  %184 = fadd float %176, %140, !dbg !38
  %185 = fadd float %177, %140, !dbg !38
  %186 = fadd float %178, %140, !dbg !38
  %187 = fadd float %179, %159, !dbg !39
  %188 = fadd float %180, %157, !dbg !39
  %189 = fadd float %181, %155, !dbg !39
  %190 = fadd float %182, %153, !dbg !39
  %191 = fadd float %183, %151, !dbg !39
  %192 = fadd float %184, %149, !dbg !39
  %193 = fadd float %185, %147, !dbg !39
  %194 = fadd float %186, %145, !dbg !39
  %195 = fadd float %187, %188, !dbg !40
  %196 = fadd float %189, %195, !dbg !40
  %197 = fadd float %190, %196, !dbg !40
  %198 = select i1 %17, float %197, float 0.000000e+00, !dbg !40
  %199 = fadd float %191, %192, !dbg !40
  %200 = fadd float %193, %199, !dbg !40
  %201 = fadd float %194, %200, !dbg !40
  %202 = select i1 %18, float %201, float 0.000000e+00, !dbg !40
  %203 = bitcast float %198 to i32, !dbg !45
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 2, i32 31), !dbg !45
  %205 = bitcast i32 %204 to float, !dbg !45
  %206 = fadd float %198, %205, !dbg !40
  %207 = bitcast float %206 to i32, !dbg !45
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 1, i32 31), !dbg !45
  %209 = bitcast i32 %208 to float, !dbg !45
  %210 = fadd float %206, %209, !dbg !40
  %211 = bitcast float %202 to i32, !dbg !45
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !45
  %213 = bitcast i32 %212 to float, !dbg !45
  %214 = fadd float %202, %213, !dbg !40
  %215 = bitcast float %214 to i32, !dbg !45
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !45
  %217 = bitcast i32 %216 to float, !dbg !45
  %218 = fadd float %214, %217, !dbg !40
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float 1.600000e+01) #4, !dbg !46
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float 1.600000e+01) #4, !dbg !46
  %221 = shl nsw i32 %.decomposed, 4, !dbg !47
  %222 = or disjoint i32 %221, %20, !dbg !48
  %223 = shl i32 %21, 10, !dbg !49
  %224 = shl i32 %160, 10, !dbg !49
  %225 = add i32 %222, %223, !dbg !50
  %226 = add i32 %222, %224, !dbg !50
  %227 = sext i32 %225 to i64, !dbg !51
  %228 = getelementptr float, ptr addrspace(1) %6, i64 %227, !dbg !51
  %229 = sext i32 %226 to i64, !dbg !51
  %230 = getelementptr float, ptr addrspace(1) %6, i64 %229, !dbg !51
  %231 = bitcast float %187 to i32, !dbg !52
  %232 = bitcast float %188 to i32, !dbg !52
  %233 = bitcast float %189 to i32, !dbg !52
  %234 = bitcast float %190 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %231, i32 %232, i32 %233, i32 %234, ptr addrspace(1) %228, i1 %17) #4, !dbg !52
  %235 = bitcast float %191 to i32, !dbg !52
  %236 = bitcast float %192 to i32, !dbg !52
  %237 = bitcast float %193 to i32, !dbg !52
  %238 = bitcast float %194 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %236, i32 %237, i32 %238, ptr addrspace(1) %230, i1 %18) #4, !dbg !52
  %239 = getelementptr float, ptr addrspace(1) %7, i64 %227, !dbg !53
  %240 = getelementptr float, ptr addrspace(1) %7, i64 %229, !dbg !53
  %241 = bitcast float %219 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %241, i32 %241, i32 %241, i32 %241, ptr addrspace(1) %239, i1 %17) #4, !dbg !54
  %242 = bitcast float %220 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %242, i32 %242, i32 %242, i32 %242, ptr addrspace(1) %240, i1 %18) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc7iiofio6bfybsgodfwefo57xavai2aciredorkitspcta6yogw.py", directory: "inductor_cache/c7")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 26, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 44, column: 18, scope: !7)
!36 = !DILocation(line: 47, column: 19, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 19, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !44)
!41 = distinct !DILexicalBlockFile(scope: !43, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!44 = !DILocation(line: 53, column: 26, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 33, scope: !7)
!48 = !DILocation(line: 56, column: 30, scope: !7)
!49 = !DILocation(line: 56, column: 43, scope: !7)
!50 = !DILocation(line: 56, column: 38, scope: !7)
!51 = !DILocation(line: 56, column: 25, scope: !7)
!52 = !DILocation(line: 56, column: 55, scope: !7)
!53 = !DILocation(line: 57, column: 25, scope: !7)
!54 = !DILocation(line: 57, column: 55, scope: !7)
!55 = !DILocation(line: 57, column: 4, scope: !7)
