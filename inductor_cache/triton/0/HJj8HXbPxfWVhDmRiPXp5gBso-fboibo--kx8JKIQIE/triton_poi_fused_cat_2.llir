; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 1, !dbg !13
  %21 = icmp slt i32 %19, 6400, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %22 = sdiv i32 %.frozen, 16, !dbg !15
  %23 = srem i32 %22, 100, !dbg !16
  %24 = mul i32 %22, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = srem i32 %20, 16, !dbg !17
  %.frozen16 = freeze i32 %19, !dbg !18
  %26 = sdiv i32 %.frozen16, 1600, !dbg !18
  %27 = icmp slt i32 %23, 4, !dbg !19
  %28 = mul i32 %26, 1600, !dbg !20
  %srem.decomposed = sub i32 %.frozen16, %28, !dbg !20
  %29 = shl nsw i32 %26, 6, !dbg !21
  %30 = add nsw i32 %29, %srem.decomposed, !dbg !22
  %31 = sext i32 %30 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = and i1 %21, %27, !dbg !24
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !25
  %35 = add nsw i32 %23, -4, !dbg !26
  %36 = icmp ult i32 %35, 48, !dbg !26
  %37 = mul nsw i32 %.decomposed, 48, !dbg !27
  %38 = mul nsw i32 %25, 48, !dbg !27
  %39 = mul nsw i32 %26, 768, !dbg !28
  %40 = add nsw i32 %37, %39, !dbg !29
  %41 = add nsw i32 %39, %38, !dbg !29
  %42 = add nsw i32 %40, %35, !dbg !30
  %43 = add nsw i32 %41, %35, !dbg !30
  %44 = sext i32 %42 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !31
  %46 = sext i32 %43 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !31
  %48 = and i1 %21, %36, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %48, i32 0, i1 %48) #3, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 0, i1 %48) #3, !dbg !33
  %51 = sext i32 %35 to i64, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !34
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %48, i32 0, i1 %48) #3, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %48, i32 0, i1 %48) #3, !dbg !35
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !36
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %48, i32 0, i1 %48) #3, !dbg !37
  %57 = bitcast i32 %56 to float, !dbg !37
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %48, i32 0, i1 %48) #3, !dbg !37
  %59 = bitcast i32 %58 to float, !dbg !37
  %60 = fadd float %57, 0x3EE4F8B580000000, !dbg !38
  %61 = fadd float %59, 0x3EE4F8B580000000, !dbg !38
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %62, 0, !dbg !39
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %63, 0, !dbg !39
  br i1 %.not.i, label %69, label %64, !dbg !39

64:                                               ; preds = %13
  br i1 %.not1.i, label %67, label %65, !dbg !39

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

69:                                               ; preds = %13
  br i1 %.not1.i, label %72, label %70, !dbg !39

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !39
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %74, 0, !dbg !39
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !39
  br i1 %.not.i1, label %81, label %76, !dbg !39

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !39

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !39

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !39
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %88 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !41
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %48, i32 0, i1 %48) #3, !dbg !42
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %48, i32 0, i1 %48) #3, !dbg !42
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !43
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %48, i32 0, i1 %48) #3, !dbg !44
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %48, i32 0, i1 %48) #3, !dbg !44
  %94 = icmp sgt i32 %23, 51, !dbg !45
  %95 = add nsw i32 %23, -52, !dbg !46
  %96 = add nsw i32 %40, %95, !dbg !47
  %97 = add nsw i32 %41, %95, !dbg !47
  %98 = sext i32 %96 to i64, !dbg !48
  %99 = getelementptr float, ptr addrspace(1) %6, i64 %98, !dbg !48
  %100 = sext i32 %97 to i64, !dbg !48
  %101 = getelementptr float, ptr addrspace(1) %6, i64 %100, !dbg !48
  %102 = and i1 %21, %94, !dbg !49
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %102, i32 0, i1 %102) #3, !dbg !50
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %102, i32 0, i1 %102) #3, !dbg !50
  %105 = sext i32 %95 to i64, !dbg !51
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %105, !dbg !51
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %102, i32 0, i1 %102) #3, !dbg !52
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %102, i32 0, i1 %102) #3, !dbg !52
  %109 = getelementptr float, ptr addrspace(1) %8, i64 %105, !dbg !53
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %102, i32 0, i1 %102) #3, !dbg !54
  %111 = bitcast i32 %110 to float, !dbg !54
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %102, i32 0, i1 %102) #3, !dbg !54
  %113 = bitcast i32 %112 to float, !dbg !54
  %114 = fadd float %111, 0x3EE4F8B580000000, !dbg !55
  %115 = fadd float %113, 0x3EE4F8B580000000, !dbg !55
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i6 = icmp eq i32 %116, 0, !dbg !56
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i9 = icmp eq i32 %117, 0, !dbg !56
  br i1 %.not.i6, label %123, label %118, !dbg !56

118:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %121, label %119, !dbg !56

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

123:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %126, label %124, !dbg !56

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

__nv_sqrtf.exit10:                                ; preds = %119, %121, %124, %126
  %.0.i8 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !56
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i11 = icmp eq i32 %128, 0, !dbg !56
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i14 = icmp eq i32 %129, 0, !dbg !56
  br i1 %.not.i11, label %135, label %130, !dbg !56

130:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %133, label %131, !dbg !56

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

135:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %138, label %136, !dbg !56

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

__nv_sqrtf.exit15:                                ; preds = %131, %133, %136, %138
  %.0.i13 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !56
  %140 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !50
  %141 = insertelement <4 x i32> %140, i32 %103, i64 1, !dbg !50
  %142 = insertelement <4 x i32> %141, i32 %49, i64 2, !dbg !50
  %143 = insertelement <4 x i32> %142, i32 %50, i64 3, !dbg !50
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !50
  %145 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !52
  %146 = insertelement <4 x i32> %145, i32 %107, i64 1, !dbg !52
  %147 = insertelement <4 x i32> %146, i32 %53, i64 2, !dbg !52
  %148 = insertelement <4 x i32> %147, i32 %54, i64 3, !dbg !52
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !52
  %150 = extractvalue { i32, i32 } %34, 1, !dbg !25
  %151 = extractvalue { i32, i32 } %34, 0, !dbg !25
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !57
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !57
  %154 = getelementptr float, ptr addrspace(1) %9, i64 %105, !dbg !58
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %102, i32 0, i1 %102) #3, !dbg !59
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %102, i32 0, i1 %102) #3, !dbg !59
  %157 = getelementptr float, ptr addrspace(1) %10, i64 %105, !dbg !60
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %102, i32 0, i1 %102) #3, !dbg !61
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %102, i32 0, i1 %102) #3, !dbg !61
  %160 = fsub <4 x float> %144, %149, !dbg !62
  %161 = insertelement <4 x float> poison, float %153, i64 0, !dbg !63
  %162 = insertelement <4 x float> %161, float %152, i64 1, !dbg !63
  %163 = insertelement <4 x float> %162, float %86, i64 2, !dbg !63
  %164 = insertelement <4 x float> %163, float %87, i64 3, !dbg !63
  %165 = fmul <4 x float> %160, %164, !dbg !63
  %166 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !59
  %167 = insertelement <4 x i32> %166, i32 %155, i64 1, !dbg !59
  %168 = insertelement <4 x i32> %167, i32 %89, i64 2, !dbg !59
  %169 = insertelement <4 x i32> %168, i32 %90, i64 3, !dbg !59
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !59
  %171 = fmul <4 x float> %165, %170, !dbg !64
  %172 = insertelement <4 x i32> poison, i32 %159, i64 0, !dbg !61
  %173 = insertelement <4 x i32> %172, i32 %158, i64 1, !dbg !61
  %174 = insertelement <4 x i32> %173, i32 %92, i64 2, !dbg !61
  %175 = insertelement <4 x i32> %174, i32 %93, i64 3, !dbg !61
  %176 = bitcast <4 x i32> %175 to <4 x float>, !dbg !61
  %177 = fadd <4 x float> %171, %176, !dbg !65
  %178 = fcmp olt <4 x float> %177, zeroinitializer, !dbg !66
  %179 = extractelement <4 x i1> %178, i64 3, !dbg !70
  %180 = extractelement <4 x float> %177, i64 3, !dbg !70
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !70
  %182 = extractelement <4 x i1> %178, i64 2, !dbg !70
  %183 = extractelement <4 x float> %177, i64 2, !dbg !70
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !70
  %185 = extractelement <4 x i1> %178, i64 1, !dbg !72
  %186 = extractelement <4 x float> %177, i64 1, !dbg !72
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !72
  %188 = extractelement <4 x i1> %178, i64 0, !dbg !72
  %189 = extractelement <4 x float> %177, i64 0, !dbg !72
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !72
  %191 = select i1 %94, float %187, float 0.000000e+00, !dbg !73
  %192 = select i1 %94, float %190, float 0.000000e+00, !dbg !73
  %193 = select i1 %36, float %184, float %191, !dbg !74
  %194 = select i1 %36, float %181, float %192, !dbg !74
  %195 = sext i32 %19 to i64, !dbg !75
  %196 = getelementptr float, ptr addrspace(1) %11, i64 %195, !dbg !75
  %197 = bitcast float %193 to i32, !dbg !76
  %198 = select i1 %27, i32 %151, i32 %197, !dbg !77
  %199 = bitcast float %194 to i32, !dbg !76
  %200 = select i1 %27, i32 %150, i32 %199, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %198, i32 %200, ptr addrspace(1) %196, i1 %21) #3, !dbg !76
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw7gjzirul6kar6rdb3jqoanjwlnvn7pwxfmmaprsic7x3qfaqxy.py", directory: "inductor_cache/w7")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 43, scope: !7)
!29 = !DILocation(line: 38, column: 39, scope: !7)
!30 = !DILocation(line: 38, column: 49, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 69, scope: !7)
!33 = !DILocation(line: 38, column: 62, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 43, scope: !7)
!36 = !DILocation(line: 41, column: 31, scope: !7)
!37 = !DILocation(line: 41, column: 43, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 44, column: 27, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 43, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 43, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 57, scope: !7)
!47 = !DILocation(line: 61, column: 49, scope: !7)
!48 = !DILocation(line: 61, column: 31, scope: !7)
!49 = !DILocation(line: 61, column: 71, scope: !7)
!50 = !DILocation(line: 61, column: 63, scope: !7)
!51 = !DILocation(line: 62, column: 31, scope: !7)
!52 = !DILocation(line: 62, column: 44, scope: !7)
!53 = !DILocation(line: 64, column: 31, scope: !7)
!54 = !DILocation(line: 64, column: 44, scope: !7)
!55 = !DILocation(line: 66, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 27, scope: !7)
!57 = !DILocation(line: 69, column: 20, scope: !7)
!58 = !DILocation(line: 73, column: 31, scope: !7)
!59 = !DILocation(line: 73, column: 44, scope: !7)
!60 = !DILocation(line: 75, column: 32, scope: !7)
!61 = !DILocation(line: 75, column: 45, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 72, column: 20, scope: !7)
!64 = !DILocation(line: 74, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 20, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 78, column: 42, scope: !7)
!70 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !71)
!71 = !DILocation(line: 55, column: 42, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 80, column: 35, scope: !7)
!74 = !DILocation(line: 0, scope: !7)
!75 = !DILocation(line: 83, column: 25, scope: !7)
!76 = !DILocation(line: 83, column: 37, scope: !7)
!77 = !DILocation(line: 82, column: 33, scope: !7)
!78 = !DILocation(line: 83, column: 4, scope: !7)
