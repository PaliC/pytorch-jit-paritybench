; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, i32 %19) local_unnamed_addr !dbg !7 {
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %22 = shl i32 %21, 7, !dbg !11
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %24 = and i32 %23, 127, !dbg !12
  %25 = or disjoint i32 %22, %24, !dbg !13
  %26 = sdiv i32 %25, 256, !dbg !14
  %27 = srem i32 %26, 16, !dbg !15
  %.frozen = freeze i32 %25, !dbg !16
  %28 = sdiv i32 %.frozen, 16, !dbg !16
  %29 = srem i32 %28, 16, !dbg !17
  %30 = mul i32 %28, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %30, !dbg !18
  %31 = sext i32 %25 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %34 = sext i32 %27 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !30
  %46 = sext i32 %29 to i64, !dbg !31
  %47 = getelementptr i64, ptr addrspace(1) %7, i64 %46, !dbg !31
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !32
  %49 = sext i32 %.decomposed to i64, !dbg !33
  %50 = getelementptr i64, ptr addrspace(1) %7, i64 %49, !dbg !33
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %9, i64 %34, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %10, i64 %34, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !38
  %56 = bitcast i32 %55 to float, !dbg !38
  %57 = getelementptr float, ptr addrspace(1) %11, i64 %34, !dbg !39
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %12, i64 %34, !dbg !41
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !42
  %61 = getelementptr i64, ptr addrspace(1) %13, i64 %46, !dbg !43
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !44
  %63 = getelementptr i64, ptr addrspace(1) %13, i64 %49, !dbg !45
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !46
  %65 = getelementptr float, ptr addrspace(1) %15, i64 %34, !dbg !47
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !48
  %67 = getelementptr float, ptr addrspace(1) %16, i64 %34, !dbg !49
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !50
  %69 = bitcast i32 %68 to float, !dbg !50
  %70 = getelementptr float, ptr addrspace(1) %17, i64 %34, !dbg !51
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !52
  %72 = getelementptr float, ptr addrspace(1) %18, i64 %34, !dbg !53
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !54
  %74 = fadd float %41, 0x3EE4F8B580000000, !dbg !55
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i = icmp eq i32 %75, 0, !dbg !56
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i = icmp eq i32 %76, 0, !dbg !56
  br i1 %.not.i, label %82, label %77, !dbg !56

77:                                               ; preds = %20
  br i1 %.not1.i, label %80, label %78, !dbg !56

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

82:                                               ; preds = %20
  br i1 %.not1.i, label %85, label %83, !dbg !56

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !56
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !57
  %88 = lshr i64 %48, 60, !dbg !58
  %89 = and i64 %88, 8, !dbg !58
  %90 = add i64 %89, %48, !dbg !58
  %91 = lshr i64 %51, 60, !dbg !59
  %92 = and i64 %91, 8, !dbg !59
  %93 = shl nsw i32 %26, 6, !dbg !60
  %94 = sext i32 %93 to i64, !dbg !61
  %95 = getelementptr float, ptr addrspace(1) %8, i64 %51, !dbg !62
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %92, !dbg !62
  %.idx = shl i64 %90, 5, !dbg !62
  %97 = getelementptr i8, ptr addrspace(1) %96, i64 %.idx, !dbg !62
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %94, !dbg !62
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !63
  %100 = fadd float %56, 0x3EE4F8B580000000, !dbg !64
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i2 = icmp eq i32 %101, 0, !dbg !65
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i5 = icmp eq i32 %102, 0, !dbg !65
  br i1 %.not.i2, label %108, label %103, !dbg !65

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %106, label %104, !dbg !65

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !65
  br label %__nv_sqrtf.exit6, !dbg !65

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !65
  br label %__nv_sqrtf.exit6, !dbg !65

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %111, label %109, !dbg !65

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !65
  br label %__nv_sqrtf.exit6, !dbg !65

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !65
  br label %__nv_sqrtf.exit6, !dbg !65

__nv_sqrtf.exit6:                                 ; preds = %104, %106, %109, %111
  %.0.i4 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !65
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !66
  %114 = lshr i64 %62, 61, !dbg !67
  %115 = and i64 %114, 4, !dbg !67
  %116 = add i64 %115, %62, !dbg !67
  %117 = lshr i64 %64, 61, !dbg !68
  %118 = and i64 %117, 4, !dbg !68
  %119 = shl nsw i32 %26, 4, !dbg !69
  %120 = sext i32 %119 to i64, !dbg !70
  %121 = getelementptr float, ptr addrspace(1) %14, i64 %64, !dbg !71
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %118, !dbg !71
  %.idx1 = shl i64 %116, 4, !dbg !71
  %123 = getelementptr i8, ptr addrspace(1) %122, i64 %.idx1, !dbg !71
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %120, !dbg !71
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !72
  %126 = fadd float %69, 0x3EE4F8B580000000, !dbg !73
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i7 = icmp eq i32 %127, 0, !dbg !74
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i10 = icmp eq i32 %128, 0, !dbg !74
  br i1 %.not.i7, label %134, label %129, !dbg !74

129:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %132, label %130, !dbg !74

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

134:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %137, label %135, !dbg !74

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

__nv_sqrtf.exit11:                                ; preds = %130, %132, %135, %137
  %.0.i9 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !74
  %139 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !63
  %140 = insertelement <2 x i32> %139, i32 %125, i64 1, !dbg !63
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !63
  %142 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !36
  %143 = insertelement <2 x i32> %142, i32 %66, i64 1, !dbg !36
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !36
  %145 = bitcast i32 %33 to float, !dbg !20
  %146 = bitcast i32 %36 to float, !dbg !22
  %147 = fadd float %145, %146, !dbg !75
  %148 = bitcast i32 %38 to float, !dbg !24
  %149 = fsub float %147, %148, !dbg !76
  %150 = fmul float %149, %87, !dbg !77
  %151 = bitcast i32 %43 to float, !dbg !28
  %152 = fmul float %150, %151, !dbg !78
  %153 = bitcast i32 %45 to float, !dbg !30
  %154 = fadd float %152, %153, !dbg !79
  %155 = fcmp olt float %154, 0.000000e+00, !dbg !80
  %156 = select i1 %155, float 0.000000e+00, float %154, !dbg !84
  %157 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !40
  %158 = insertelement <2 x i32> %157, i32 %71, i64 1, !dbg !40
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !40
  %160 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !42
  %161 = insertelement <2 x i32> %160, i32 %73, i64 1, !dbg !42
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !42
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !85
  %164 = fsub <2 x float> %141, %144, !dbg !86
  %165 = insertelement <2 x float> poison, float %113, i64 0, !dbg !87
  %166 = insertelement <2 x float> %165, float %163, i64 1, !dbg !87
  %167 = fmul <2 x float> %164, %166, !dbg !87
  %168 = fmul <2 x float> %167, %159, !dbg !88
  %169 = fadd <2 x float> %168, %162, !dbg !89
  %170 = extractelement <2 x float> %169, i64 0, !dbg !90
  %171 = fadd float %156, %170, !dbg !90
  %172 = extractelement <2 x float> %169, i64 1, !dbg !91
  %173 = fadd float %171, %172, !dbg !91
  %174 = bitcast float %147 to i32, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %32, i1 true) #3, !dbg !92
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !93
  %176 = bitcast float %173 to i32, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %175, i1 true) #3, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyrsxhwxkgnk4j7o6sdnxv3lhdk5cojsegk7q242oehiqnpseiv7.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 18, scope: !7)
!56 = !DILocation(line: 51, column: 26, scope: !7)
!57 = !DILocation(line: 53, column: 19, scope: !7)
!58 = !DILocation(line: 64, column: 35, scope: !7)
!59 = !DILocation(line: 67, column: 35, scope: !7)
!60 = !DILocation(line: 68, column: 52, scope: !7)
!61 = !DILocation(line: 68, column: 49, scope: !7)
!62 = !DILocation(line: 68, column: 31, scope: !7)
!63 = !DILocation(line: 68, column: 57, scope: !7)
!64 = !DILocation(line: 70, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 27, scope: !7)
!66 = !DILocation(line: 72, column: 19, scope: !7)
!67 = !DILocation(line: 81, column: 35, scope: !7)
!68 = !DILocation(line: 84, column: 35, scope: !7)
!69 = !DILocation(line: 85, column: 53, scope: !7)
!70 = !DILocation(line: 85, column: 50, scope: !7)
!71 = !DILocation(line: 85, column: 32, scope: !7)
!72 = !DILocation(line: 85, column: 58, scope: !7)
!73 = !DILocation(line: 87, column: 20, scope: !7)
!74 = !DILocation(line: 88, column: 27, scope: !7)
!75 = !DILocation(line: 47, column: 18, scope: !7)
!76 = !DILocation(line: 48, column: 18, scope: !7)
!77 = !DILocation(line: 56, column: 19, scope: !7)
!78 = !DILocation(line: 57, column: 20, scope: !7)
!79 = !DILocation(line: 58, column: 20, scope: !7)
!80 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlockFile(scope: !7, file: !82, discriminator: 0)
!82 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!83 = !DILocation(line: 60, column: 42, scope: !7)
!84 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !83)
!85 = !DILocation(line: 89, column: 19, scope: !7)
!86 = !DILocation(line: 69, column: 20, scope: !7)
!87 = !DILocation(line: 74, column: 20, scope: !7)
!88 = !DILocation(line: 75, column: 20, scope: !7)
!89 = !DILocation(line: 76, column: 20, scope: !7)
!90 = !DILocation(line: 77, column: 20, scope: !7)
!91 = !DILocation(line: 94, column: 20, scope: !7)
!92 = !DILocation(line: 95, column: 39, scope: !7)
!93 = !DILocation(line: 96, column: 28, scope: !7)
!94 = !DILocation(line: 96, column: 40, scope: !7)
!95 = !DILocation(line: 96, column: 4, scope: !7)
