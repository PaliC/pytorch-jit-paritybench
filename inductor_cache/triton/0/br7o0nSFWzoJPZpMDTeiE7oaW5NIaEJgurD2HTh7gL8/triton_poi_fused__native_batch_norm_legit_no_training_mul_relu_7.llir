; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 256, !dbg !14
  %17 = sdiv i32 %15, 256, !dbg !14
  %18 = srem i32 %16, 128, !dbg !15
  %19 = srem i32 %17, 128, !dbg !15
  %20 = sdiv i32 %14, 32768, !dbg !16
  %21 = sdiv i32 %15, 32768, !dbg !16
  %.lhs.trunc = trunc nsw i32 %18 to i8, !dbg !17
  %.lhs.trunc.frozen = freeze i8 %.lhs.trunc, !dbg !18
  %22 = sdiv i8 %.lhs.trunc.frozen, 4, !dbg !18
  %23 = mul i8 %22, 4, !dbg !17
  %.decomposed = sub i8 %.lhs.trunc.frozen, %23, !dbg !17
  %.sext = sext i8 %.decomposed to i32, !dbg !17
  %.lhs.trunc36 = trunc nsw i32 %19 to i8, !dbg !17
  %.lhs.trunc36.frozen = freeze i8 %.lhs.trunc36, !dbg !18
  %24 = sdiv i8 %.lhs.trunc36.frozen, 4, !dbg !18
  %25 = mul i8 %24, 4, !dbg !17
  %.decomposed42 = sub i8 %.lhs.trunc36.frozen, %25, !dbg !17
  %.sext37 = sext i8 %.decomposed42 to i32, !dbg !17
  %26 = shl nsw i32 %.sext, 5, !dbg !19
  %27 = shl nsw i32 %.sext37, 5, !dbg !19
  %28 = shl nsw i32 %20, 7, !dbg !20
  %29 = shl nsw i32 %21, 7, !dbg !20
  %.sext39 = sext i8 %22 to i32, !dbg !18
  %.sext41 = sext i8 %24 to i32, !dbg !18
  %30 = add nsw i32 %28, %.sext39, !dbg !21
  %31 = add nsw i32 %30, %26, !dbg !22
  %32 = add nsw i32 %29, %.sext41, !dbg !21
  %33 = add nsw i32 %32, %27, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %46 = sext i32 %14 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !25
  %48 = sext i32 %15 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !26
  %52 = sext i32 %18 to i64, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !27
  %54 = sext i32 %19 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !28
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %73 = bitcast i32 %72 to float, !dbg !30
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %77 = bitcast i32 %76 to float, !dbg !30
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %79 = bitcast i32 %78 to float, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %81 = bitcast i32 %80 to float, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !32
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !32
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !33
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !34
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !34
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !34
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !34
  %102 = fadd float %67, 0x3EE4F8B580000000, !dbg !35
  %103 = fadd float %69, 0x3EE4F8B580000000, !dbg !35
  %104 = fadd float %71, 0x3EE4F8B580000000, !dbg !35
  %105 = fadd float %73, 0x3EE4F8B580000000, !dbg !35
  %106 = fadd float %75, 0x3EE4F8B580000000, !dbg !35
  %107 = fadd float %77, 0x3EE4F8B580000000, !dbg !35
  %108 = fadd float %79, 0x3EE4F8B580000000, !dbg !35
  %109 = fadd float %81, 0x3EE4F8B580000000, !dbg !35
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %110, 0, !dbg !36
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %111, 0, !dbg !36
  br i1 %.not.i, label %117, label %112, !dbg !36

112:                                              ; preds = %8
  br i1 %.not1.i, label %115, label %113, !dbg !36

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

117:                                              ; preds = %8
  br i1 %.not1.i, label %120, label %118, !dbg !36

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %113, %115, %118, %120
  %.0.i = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !36
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %122, 0, !dbg !36
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %123, 0, !dbg !36
  br i1 %.not.i1, label %129, label %124, !dbg !36

124:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %127, label %125, !dbg !36

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

129:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %132, label %130, !dbg !36

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %125, %127, %130, %132
  %.0.i3 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !36
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %134, 0, !dbg !36
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %135, 0, !dbg !36
  br i1 %.not.i6, label %141, label %136, !dbg !36

136:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %139, label %137, !dbg !36

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

141:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %144, label %142, !dbg !36

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %137, %139, %142, %144
  %.0.i8 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !36
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %146, 0, !dbg !36
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %147, 0, !dbg !36
  br i1 %.not.i11, label %153, label %148, !dbg !36

148:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %151, label %149, !dbg !36

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

153:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %156, label %154, !dbg !36

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %149, %151, %154, %156
  %.0.i13 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !36
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i16 = icmp eq i32 %158, 0, !dbg !36
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i19 = icmp eq i32 %159, 0, !dbg !36
  br i1 %.not.i16, label %165, label %160, !dbg !36

160:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %163, label %161, !dbg !36

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

165:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %168, label %166, !dbg !36

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %161, %163, %166, %168
  %.0.i18 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !36
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i21 = icmp eq i32 %170, 0, !dbg !36
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i24 = icmp eq i32 %171, 0, !dbg !36
  br i1 %.not.i21, label %177, label %172, !dbg !36

172:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %175, label %173, !dbg !36

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

177:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %180, label %178, !dbg !36

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

__nv_sqrtf.exit25:                                ; preds = %173, %175, %178, %180
  %.0.i23 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !36
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i26 = icmp eq i32 %182, 0, !dbg !36
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i29 = icmp eq i32 %183, 0, !dbg !36
  br i1 %.not.i26, label %189, label %184, !dbg !36

184:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %187, label %185, !dbg !36

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

189:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %192, label %190, !dbg !36

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

__nv_sqrtf.exit30:                                ; preds = %185, %187, %190, %192
  %.0.i28 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !36
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i31 = icmp eq i32 %194, 0, !dbg !36
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i34 = icmp eq i32 %195, 0, !dbg !36
  br i1 %.not.i31, label %201, label %196, !dbg !36

196:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %199, label %197, !dbg !36

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

201:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %204, label %202, !dbg !36

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

__nv_sqrtf.exit35:                                ; preds = %197, %199, %202, %204
  %.0.i33 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !36
  %206 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %207 = insertelement <8 x i32> poison, i32 %63, i64 0, !dbg !28
  %208 = insertelement <8 x i32> %207, i32 %62, i64 1, !dbg !28
  %209 = insertelement <8 x i32> %208, i32 %61, i64 2, !dbg !28
  %210 = insertelement <8 x i32> %209, i32 %60, i64 3, !dbg !28
  %211 = insertelement <8 x i32> %210, i32 %59, i64 4, !dbg !28
  %212 = insertelement <8 x i32> %211, i32 %58, i64 5, !dbg !28
  %213 = insertelement <8 x i32> %212, i32 %57, i64 6, !dbg !28
  %214 = insertelement <8 x i32> %213, i32 %56, i64 7, !dbg !28
  %215 = bitcast <8 x i32> %214 to <8 x float>, !dbg !28
  %216 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %217 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %218 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %219 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %220 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %221 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %222 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %223 = insertelement <8 x i32> poison, i32 %101, i64 0, !dbg !34
  %224 = insertelement <8 x i32> %223, i32 %100, i64 1, !dbg !34
  %225 = insertelement <8 x i32> %224, i32 %99, i64 2, !dbg !34
  %226 = insertelement <8 x i32> %225, i32 %98, i64 3, !dbg !34
  %227 = insertelement <8 x i32> %226, i32 %97, i64 4, !dbg !34
  %228 = insertelement <8 x i32> %227, i32 %96, i64 5, !dbg !34
  %229 = insertelement <8 x i32> %228, i32 %95, i64 6, !dbg !34
  %230 = insertelement <8 x i32> %229, i32 %94, i64 7, !dbg !34
  %231 = bitcast <8 x i32> %230 to <8 x float>, !dbg !34
  %232 = insertelement <8 x i32> poison, i32 %91, i64 0, !dbg !32
  %233 = insertelement <8 x i32> %232, i32 %90, i64 1, !dbg !32
  %234 = insertelement <8 x i32> %233, i32 %89, i64 2, !dbg !32
  %235 = insertelement <8 x i32> %234, i32 %88, i64 3, !dbg !32
  %236 = insertelement <8 x i32> %235, i32 %87, i64 4, !dbg !32
  %237 = insertelement <8 x i32> %236, i32 %86, i64 5, !dbg !32
  %238 = insertelement <8 x i32> %237, i32 %85, i64 6, !dbg !32
  %239 = insertelement <8 x i32> %238, i32 %84, i64 7, !dbg !32
  %240 = bitcast <8 x i32> %239 to <8 x float>, !dbg !32
  %241 = bitcast i32 %45 to float, !dbg !24
  %242 = bitcast i32 %44 to float, !dbg !24
  %243 = bitcast i32 %43 to float, !dbg !24
  %244 = bitcast i32 %42 to float, !dbg !24
  %245 = bitcast i32 %41 to float, !dbg !24
  %246 = bitcast i32 %40 to float, !dbg !24
  %247 = bitcast i32 %39 to float, !dbg !24
  %248 = bitcast i32 %38 to float, !dbg !24
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %257 = insertelement <8 x i32> poison, i32 %206, i64 0, !dbg !26
  %258 = insertelement <8 x i32> %257, i32 %216, i64 1, !dbg !26
  %259 = insertelement <8 x i32> %258, i32 %217, i64 2, !dbg !26
  %260 = insertelement <8 x i32> %259, i32 %218, i64 3, !dbg !26
  %261 = insertelement <8 x i32> %260, i32 %219, i64 4, !dbg !26
  %262 = insertelement <8 x i32> %261, i32 %220, i64 5, !dbg !26
  %263 = insertelement <8 x i32> %262, i32 %221, i64 6, !dbg !26
  %264 = insertelement <8 x i32> %263, i32 %222, i64 7, !dbg !26
  %265 = bitcast <8 x i32> %264 to <8 x float>, !dbg !26
  %266 = fsub <8 x float> %265, %215, !dbg !38
  %267 = insertelement <8 x float> poison, float %256, i64 0, !dbg !39
  %268 = insertelement <8 x float> %267, float %255, i64 1, !dbg !39
  %269 = insertelement <8 x float> %268, float %254, i64 2, !dbg !39
  %270 = insertelement <8 x float> %269, float %253, i64 3, !dbg !39
  %271 = insertelement <8 x float> %270, float %252, i64 4, !dbg !39
  %272 = insertelement <8 x float> %271, float %251, i64 5, !dbg !39
  %273 = insertelement <8 x float> %272, float %250, i64 6, !dbg !39
  %274 = insertelement <8 x float> %273, float %249, i64 7, !dbg !39
  %275 = fmul <8 x float> %266, %274, !dbg !39
  %276 = fmul <8 x float> %275, %240, !dbg !40
  %277 = fadd <8 x float> %276, %231, !dbg !41
  %278 = fcmp olt <8 x float> %277, zeroinitializer, !dbg !42
  %279 = extractelement <8 x i1> %278, i64 7, !dbg !46
  %280 = extractelement <8 x float> %277, i64 7, !dbg !46
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !46
  %282 = extractelement <8 x i1> %278, i64 6, !dbg !46
  %283 = extractelement <8 x float> %277, i64 6, !dbg !46
  %284 = select i1 %282, float 0.000000e+00, float %283, !dbg !46
  %285 = extractelement <8 x i1> %278, i64 5, !dbg !46
  %286 = extractelement <8 x float> %277, i64 5, !dbg !46
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !46
  %288 = extractelement <8 x i1> %278, i64 4, !dbg !46
  %289 = extractelement <8 x float> %277, i64 4, !dbg !46
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !46
  %291 = extractelement <8 x i1> %278, i64 3, !dbg !46
  %292 = extractelement <8 x float> %277, i64 3, !dbg !46
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !46
  %294 = extractelement <8 x i1> %278, i64 2, !dbg !46
  %295 = extractelement <8 x float> %277, i64 2, !dbg !46
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !46
  %297 = extractelement <8 x i1> %278, i64 1, !dbg !46
  %298 = extractelement <8 x float> %277, i64 1, !dbg !46
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !46
  %300 = extractelement <8 x i1> %278, i64 0, !dbg !46
  %301 = extractelement <8 x float> %277, i64 0, !dbg !46
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !46
  %303 = fmul float %281, %248, !dbg !47
  %304 = fmul float %284, %247, !dbg !47
  %305 = fmul float %287, %246, !dbg !47
  %306 = fmul float %290, %245, !dbg !47
  %307 = fmul float %293, %244, !dbg !47
  %308 = fmul float %296, %243, !dbg !47
  %309 = fmul float %299, %242, !dbg !47
  %310 = fmul float %302, %241, !dbg !47
  %311 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !48
  %312 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !48
  %313 = bitcast float %303 to i32, !dbg !49
  %314 = bitcast float %304 to i32, !dbg !49
  %315 = bitcast float %305 to i32, !dbg !49
  %316 = bitcast float %306 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %313, i32 %314, i32 %315, i32 %316, ptr addrspace(1) %311, i1 true) #3, !dbg !49
  %317 = bitcast float %307 to i32, !dbg !49
  %318 = bitcast float %308 to i32, !dbg !49
  %319 = bitcast float %309 to i32, !dbg !49
  %320 = bitcast float %310 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %317, i32 %318, i32 %319, i32 %320, ptr addrspace(1) %312, i1 true) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ss3qukvgjvfy2bgxcdl3q5itojufvwe4ztn4a5cuwotlehgeoh.py", directory: "inductor_cache/3s")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 62, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 27, column: 50, scope: !7)
!21 = !DILocation(line: 27, column: 46, scope: !7)
!22 = !DILocation(line: 27, column: 56, scope: !7)
!23 = !DILocation(line: 27, column: 30, scope: !7)
!24 = !DILocation(line: 27, column: 67, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 35, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 36, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 26, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 33, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 19, scope: !7)
!40 = !DILocation(line: 42, column: 20, scope: !7)
!41 = !DILocation(line: 43, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 45, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 46, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 25, scope: !7)
!49 = !DILocation(line: 47, column: 37, scope: !7)
!50 = !DILocation(line: 47, column: 4, scope: !7)
