; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_relu_sigmoid_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = or disjoint i32 %9, 512, !dbg !12
  %14 = or disjoint i32 %9, 640, !dbg !12
  %15 = or disjoint i32 %9, 768, !dbg !12
  %16 = or disjoint i32 %9, 896, !dbg !12
  %17 = shl i32 %8, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %7, %9, !dbg !13
  %20 = or disjoint i32 %7, %10, !dbg !13
  %21 = or disjoint i32 %7, %11, !dbg !13
  %22 = or disjoint i32 %7, %12, !dbg !13
  %23 = or disjoint i32 %7, %13, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = or disjoint i32 %7, %16, !dbg !13
  %27 = or disjoint i32 %7, %18, !dbg !13
  %28 = or disjoint i32 %27, 512, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %30 = icmp slt i32 %29, 256, !dbg !15
  %.frozen = freeze i32 %27, !dbg !16
  %31 = sdiv i32 %.frozen, 4096, !dbg !16
  %32 = mul i32 %31, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %.frozen12 = freeze i32 %28, !dbg !16
  %33 = sdiv i32 %.frozen12, 4096, !dbg !16
  %34 = mul i32 %33, 4096, !dbg !17
  %.decomposed13 = sub i32 %.frozen12, %34, !dbg !17
  %35 = shl i32 %19, 8, !dbg !18
  %36 = shl i32 %20, 8, !dbg !18
  %37 = shl i32 %21, 8, !dbg !18
  %38 = shl i32 %22, 8, !dbg !18
  %39 = shl i32 %23, 8, !dbg !18
  %40 = shl i32 %24, 8, !dbg !18
  %41 = shl i32 %25, 8, !dbg !18
  %42 = shl i32 %26, 8, !dbg !18
  %43 = add i32 %35, %29, !dbg !19
  %44 = add i32 %36, %29, !dbg !19
  %45 = add i32 %37, %29, !dbg !19
  %46 = add i32 %38, %29, !dbg !19
  %47 = add i32 %39, %29, !dbg !19
  %48 = add i32 %40, %29, !dbg !19
  %49 = add i32 %41, %29, !dbg !19
  %50 = add i32 %42, %29, !dbg !19
  %51 = sext i32 %43 to i64, !dbg !20
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !20
  %53 = sext i32 %44 to i64, !dbg !20
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !20
  %55 = sext i32 %45 to i64, !dbg !20
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !20
  %57 = sext i32 %46 to i64, !dbg !20
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !20
  %59 = sext i32 %47 to i64, !dbg !20
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !20
  %61 = sext i32 %48 to i64, !dbg !20
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !20
  %63 = sext i32 %49 to i64, !dbg !20
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !20
  %65 = sext i32 %50 to i64, !dbg !20
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !20
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %30) #2, !dbg !21
  %68 = bitcast i32 %67 to float, !dbg !21
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %30) #2, !dbg !21
  %70 = bitcast i32 %69 to float, !dbg !21
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %30) #2, !dbg !21
  %72 = bitcast i32 %71 to float, !dbg !21
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %30) #2, !dbg !21
  %74 = bitcast i32 %73 to float, !dbg !21
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %30) #2, !dbg !21
  %76 = bitcast i32 %75 to float, !dbg !21
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %30) #2, !dbg !21
  %78 = bitcast i32 %77 to float, !dbg !21
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %30) #2, !dbg !21
  %80 = bitcast i32 %79 to float, !dbg !21
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %30) #2, !dbg !21
  %82 = bitcast i32 %81 to float, !dbg !21
  %83 = sext i32 %29 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !22
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %30) #2, !dbg !23
  %86 = bitcast i32 %85 to float, !dbg !23
  %87 = shl i32 %29, 12, !dbg !24
  %88 = add i32 %.decomposed, %87, !dbg !25
  %89 = shl i32 %31, 20, !dbg !26
  %90 = shl i32 %33, 20, !dbg !26
  %91 = add i32 %88, %89, !dbg !27
  %92 = add i32 %90, %.decomposed13, !dbg !25
  %93 = add i32 %92, %87, !dbg !27
  %94 = sext i32 %91 to i64, !dbg !28
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !28
  %96 = sext i32 %93 to i64, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !28
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %30) #2, !dbg !29
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !29
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !29
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !29
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !29
  %103 = bitcast i32 %99 to float, !dbg !29
  %104 = bitcast i32 %100 to float, !dbg !29
  %105 = bitcast i32 %101 to float, !dbg !29
  %106 = bitcast i32 %102 to float, !dbg !29
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %30) #2, !dbg !29
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !29
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !29
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !29
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !29
  %112 = bitcast i32 %108 to float, !dbg !29
  %113 = bitcast i32 %109 to float, !dbg !29
  %114 = bitcast i32 %110 to float, !dbg !29
  %115 = bitcast i32 %111 to float, !dbg !29
  %116 = fadd float %68, %86, !dbg !30
  %117 = fadd float %70, %86, !dbg !30
  %118 = fadd float %72, %86, !dbg !30
  %119 = fadd float %74, %86, !dbg !30
  %120 = fadd float %76, %86, !dbg !30
  %121 = fadd float %78, %86, !dbg !30
  %122 = fadd float %80, %86, !dbg !30
  %123 = fadd float %82, %86, !dbg !30
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !30
  %125 = bitcast float %116 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !30
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %127 = bitcast float %117 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !30
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %129 = bitcast float %118 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !30
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %131 = bitcast float %119 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !30
  %133 = bitcast float %120 to <1 x i32>, !dbg !30
  %134 = bitcast float %121 to <1 x i32>, !dbg !30
  %135 = bitcast float %122 to <1 x i32>, !dbg !30
  %136 = bitcast float %123 to <1 x i32>, !dbg !30
  %137 = fsub float 0.000000e+00, %103, !dbg !31
  %138 = fsub float 0.000000e+00, %104, !dbg !31
  %139 = fsub float 0.000000e+00, %105, !dbg !31
  %140 = fsub float 0.000000e+00, %106, !dbg !31
  %141 = fsub float 0.000000e+00, %112, !dbg !31
  %142 = fsub float 0.000000e+00, %113, !dbg !31
  %143 = fsub float 0.000000e+00, %114, !dbg !31
  %144 = fsub float 0.000000e+00, %115, !dbg !31
  %145 = fmul float %137, 0x3FF7154760000000, !dbg !35
  %146 = fmul float %138, 0x3FF7154760000000, !dbg !35
  %147 = fmul float %139, 0x3FF7154760000000, !dbg !35
  %148 = fmul float %140, 0x3FF7154760000000, !dbg !35
  %149 = fmul float %141, 0x3FF7154760000000, !dbg !35
  %150 = fmul float %142, 0x3FF7154760000000, !dbg !35
  %151 = fmul float %143, 0x3FF7154760000000, !dbg !35
  %152 = fmul float %144, 0x3FF7154760000000, !dbg !35
  %153 = load <4 x float>, ptr addrspace(3) %132, align 16, !dbg !30
  %154 = shufflevector <4 x float> %153, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %133, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %134, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %135, i1 true) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %136, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %155 = load <4 x float>, ptr addrspace(3) %132, align 16, !dbg !30
  %156 = shufflevector <4 x float> %155, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !30
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %145) #2, !dbg !35
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %146) #2, !dbg !35
  %159 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %147) #2, !dbg !35
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #2, !dbg !35
  %161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %149) #2, !dbg !35
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %150) #2, !dbg !35
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %151) #2, !dbg !35
  %164 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %152) #2, !dbg !35
  %165 = fadd float %157, 1.000000e+00, !dbg !36
  %166 = fadd float %158, 1.000000e+00, !dbg !36
  %167 = fadd float %159, 1.000000e+00, !dbg !36
  %168 = fadd float %160, 1.000000e+00, !dbg !36
  %169 = fadd float %161, 1.000000e+00, !dbg !36
  %170 = fadd float %162, 1.000000e+00, !dbg !36
  %171 = fadd float %163, 1.000000e+00, !dbg !36
  %172 = fadd float %164, 1.000000e+00, !dbg !36
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %165) #2, !dbg !37
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %166) #2, !dbg !37
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %167) #2, !dbg !37
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %168) #2, !dbg !37
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %169) #2, !dbg !37
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %170) #2, !dbg !37
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %171) #2, !dbg !37
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %172) #2, !dbg !37
  %181 = insertelement <8 x float> poison, float %180, i64 0, !dbg !38
  %182 = insertelement <8 x float> %181, float %179, i64 1, !dbg !38
  %183 = insertelement <8 x float> %182, float %178, i64 2, !dbg !38
  %184 = insertelement <8 x float> %183, float %177, i64 3, !dbg !38
  %185 = insertelement <8 x float> %184, float %176, i64 4, !dbg !38
  %186 = insertelement <8 x float> %185, float %175, i64 5, !dbg !38
  %187 = insertelement <8 x float> %186, float %174, i64 6, !dbg !38
  %188 = insertelement <8 x float> %187, float %173, i64 7, !dbg !38
  %189 = fcmp olt <8 x float> %188, zeroinitializer, !dbg !38
  %190 = select <8 x i1> %189, <8 x float> zeroinitializer, <8 x float> %188, !dbg !42
  %191 = shufflevector <4 x float> %156, <4 x float> %154, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !43
  %192 = fadd <8 x float> %191, %190, !dbg !43
  %193 = fcmp olt <8 x float> %192, zeroinitializer, !dbg !44
  %194 = extractelement <8 x i1> %193, i64 7, !dbg !46
  %195 = extractelement <8 x float> %192, i64 7, !dbg !46
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !46
  %197 = extractelement <8 x i1> %193, i64 6, !dbg !46
  %198 = extractelement <8 x float> %192, i64 6, !dbg !46
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !46
  %200 = extractelement <8 x i1> %193, i64 5, !dbg !46
  %201 = extractelement <8 x float> %192, i64 5, !dbg !46
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !46
  %203 = extractelement <8 x i1> %193, i64 4, !dbg !46
  %204 = extractelement <8 x float> %192, i64 4, !dbg !46
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !46
  %206 = extractelement <8 x i1> %193, i64 3, !dbg !46
  %207 = extractelement <8 x float> %192, i64 3, !dbg !46
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !46
  %209 = extractelement <8 x i1> %193, i64 2, !dbg !46
  %210 = extractelement <8 x float> %192, i64 2, !dbg !46
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !46
  %212 = extractelement <8 x i1> %193, i64 1, !dbg !46
  %213 = extractelement <8 x float> %192, i64 1, !dbg !46
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !46
  %215 = extractelement <8 x i1> %193, i64 0, !dbg !46
  %216 = extractelement <8 x float> %192, i64 0, !dbg !46
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %.idx = shl nuw nsw i32 %18, 3, !dbg !48
  %218 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !48
  %219 = bitcast float %196 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !48
  %220 = shl nuw nsw i32 %18, 1, !dbg !48
  %221 = or disjoint i32 %220, 2, !dbg !48
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !48
  %223 = bitcast float %199 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !48
  %224 = or disjoint i32 %220, 4, !dbg !48
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !48
  %226 = bitcast float %202 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !48
  %227 = or disjoint i32 %220, 6, !dbg !48
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !48
  %229 = bitcast float %205 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %.idx8 = shl nuw nsw i32 %9, 3, !dbg !48
  %230 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !48
  %231 = load i32, ptr addrspace(3) %230, align 8, !dbg !48
  %.idx9 = shl nuw nsw i32 %10, 3, !dbg !48
  %232 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !48
  %233 = load i32, ptr addrspace(3) %232, align 8, !dbg !48
  %.idx10 = shl nuw nsw i32 %11, 3, !dbg !48
  %234 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !48
  %235 = load i32, ptr addrspace(3) %234, align 8, !dbg !48
  %.idx11 = shl nuw nsw i32 %12, 3, !dbg !48
  %236 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !48
  %237 = load i32, ptr addrspace(3) %236, align 8, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %238 = bitcast float %208 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %238, i1 true) #2, !dbg !48
  %239 = bitcast float %211 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %239, i1 true) #2, !dbg !48
  %240 = bitcast float %214 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %240, i1 true) #2, !dbg !48
  %241 = bitcast float %217 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %241, i1 true) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %242 = load i32, ptr addrspace(3) %230, align 8, !dbg !48
  %243 = load i32, ptr addrspace(3) %232, align 8, !dbg !48
  %244 = load i32, ptr addrspace(3) %234, align 8, !dbg !48
  %245 = load i32, ptr addrspace(3) %236, align 8, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %231, ptr addrspace(1) %52, i1 %30) #2, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %233, ptr addrspace(1) %54, i1 %30) #2, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %235, ptr addrspace(1) %56, i1 %30) #2, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %237, ptr addrspace(1) %58, i1 %30) #2, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %242, ptr addrspace(1) %60, i1 %30) #2, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %243, ptr addrspace(1) %62, i1 %30) #2, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %244, ptr addrspace(1) %64, i1 %30) #2, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %245, ptr addrspace(1) %66, i1 %30) #2, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crzkju7pxyalzapwjamrwxfxoddye4j5mhcsmqoji2u3nzuyt5t2.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_relu_sigmoid_1", linkageName: "triton_poi_fused_add_convolution_relu_sigmoid_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 43, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 53, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 58, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 36, column: 22, scope: !7)
!35 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 38, column: 40, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !45)
!45 = !DILocation(line: 40, column: 40, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !45)
!47 = !DILocation(line: 41, column: 4, scope: !7)
!48 = !DILocation(line: 42, column: 48, scope: !7)
!49 = !DILocation(line: 42, column: 4, scope: !7)
