; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_convolution_leaky_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 2, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 16, !dbg !14
  %14 = srem i32 %13, 16, !dbg !15
  %15 = mul i32 %13, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = srem i32 %12, 16, !dbg !16
  %17 = sdiv i32 %11, 256, !dbg !17
  %18 = srem i32 %17, 64, !dbg !18
  %19 = sext i32 %14 to i64, !dbg !19
  %20 = getelementptr i64, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !20
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !20
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !20
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !20
  %25 = sext i32 %.decomposed to i64, !dbg !21
  %26 = getelementptr i64, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = sext i32 %16 to i64, !dbg !21
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !22
  %30 = extractvalue { i64, i64 } %29, 0, !dbg !22
  %31 = extractvalue { i64, i64 } %29, 1, !dbg !22
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !22
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !22
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !22
  %35 = sext i32 %18 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %41 = lshr i64 %21, 60, !dbg !25
  %42 = and i64 %41, 8, !dbg !25
  %43 = add i64 %42, %21, !dbg !25
  %44 = lshr i64 %30, 60, !dbg !26
  %45 = and i64 %44, 8, !dbg !26
  %46 = lshr i64 %31, 60, !dbg !26
  %47 = and i64 %46, 8, !dbg !26
  %48 = lshr i64 %33, 60, !dbg !26
  %49 = and i64 %48, 8, !dbg !26
  %50 = lshr i64 %34, 60, !dbg !26
  %51 = and i64 %50, 8, !dbg !26
  %52 = shl i64 %43, 3, !dbg !27
  %53 = shl nsw i32 %17, 6, !dbg !28
  %54 = sext i32 %53 to i64, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %45, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %56, i64 %52, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %54, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %47, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %52, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %54, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %49, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %52, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %54, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %51, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %52, !dbg !30
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %54, !dbg !30
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !31
  %75 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !24
  %76 = insertelement <4 x i32> %75, i32 %39, i64 1, !dbg !24
  %77 = insertelement <4 x i32> %76, i32 %38, i64 2, !dbg !24
  %78 = insertelement <4 x i32> %77, i32 %37, i64 3, !dbg !24
  %79 = bitcast <4 x i32> %78 to <4 x float>, !dbg !24
  %80 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !31
  %81 = insertelement <4 x i32> %80, i32 %73, i64 1, !dbg !31
  %82 = insertelement <4 x i32> %81, i32 %72, i64 2, !dbg !31
  %83 = insertelement <4 x i32> %82, i32 %71, i64 3, !dbg !31
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !31
  %85 = fadd <4 x float> %79, %84, !dbg !32
  %86 = fcmp ogt <4 x float> %85, zeroinitializer, !dbg !33
  %87 = extractelement <4 x float> %85, i64 3, !dbg !34
  %88 = fmul float %87, 0x3FC99999A0000000, !dbg !35
  %89 = extractelement <4 x float> %85, i64 2, !dbg !34
  %90 = fmul float %89, 0x3FC99999A0000000, !dbg !35
  %91 = extractelement <4 x float> %85, i64 1, !dbg !34
  %92 = fmul float %91, 0x3FC99999A0000000, !dbg !35
  %93 = extractelement <4 x float> %85, i64 0, !dbg !34
  %94 = fmul float %93, 0x3FC99999A0000000, !dbg !35
  %95 = extractelement <4 x i1> %86, i64 3, !dbg !34
  %96 = select i1 %95, float %87, float %88, !dbg !34
  %97 = extractelement <4 x i1> %86, i64 2, !dbg !34
  %98 = select i1 %97, float %89, float %90, !dbg !34
  %99 = extractelement <4 x i1> %86, i64 1, !dbg !34
  %100 = select i1 %99, float %91, float %92, !dbg !34
  %101 = extractelement <4 x i1> %86, i64 0, !dbg !34
  %102 = select i1 %101, float %93, float %94, !dbg !34
  %103 = sext i32 %11 to i64, !dbg !36
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !36
  %105 = bitcast float %96 to i32, !dbg !37
  %106 = bitcast float %98 to i32, !dbg !37
  %107 = bitcast float %100 to i32, !dbg !37
  %108 = bitcast float %102 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %105, i32 %106, i32 %107, i32 %108, ptr addrspace(1) %104, i1 true) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2shfci4cy5m5w2q3dmwpday4ajxdq66bkne3ykckfp2hl5snaoe.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused__unsafe_index_convolution_leaky_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_convolution_leaky_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_convolution_leaky_relu_14", linkageName: "triton_poi_fused__unsafe_index_convolution_leaky_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 32, scope: !7)
!26 = !DILocation(line: 38, column: 32, scope: !7)
!27 = !DILocation(line: 39, column: 39, scope: !7)
!28 = !DILocation(line: 39, column: 49, scope: !7)
!29 = !DILocation(line: 39, column: 46, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 54, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 35, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 25, scope: !7)
!37 = !DILocation(line: 46, column: 37, scope: !7)
!38 = !DILocation(line: 46, column: 4, scope: !7)
