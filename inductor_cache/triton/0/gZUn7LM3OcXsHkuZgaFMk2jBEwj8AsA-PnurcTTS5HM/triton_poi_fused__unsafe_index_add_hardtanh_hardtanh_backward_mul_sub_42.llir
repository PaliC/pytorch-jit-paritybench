; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 3, !dbg !12
  %16 = and i32 %15, 1016, !dbg !12
  %17 = shl i32 %14, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %18, 512, !dbg !12
  %20 = or disjoint i32 %13, %16, !dbg !13
  %21 = or disjoint i32 %20, 2, !dbg !13
  %22 = or disjoint i32 %20, 4, !dbg !13
  %23 = or disjoint i32 %20, 6, !dbg !13
  %24 = or disjoint i32 %13, %18, !dbg !13
  %25 = or disjoint i32 %13, %19, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %26 = sdiv i32 %.frozen, 16, !dbg !14
  %27 = srem i32 %26, 16, !dbg !15
  %28 = mul i32 %26, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %28, !dbg !16
  %29 = srem i32 %21, 16, !dbg !16
  %30 = srem i32 %22, 16, !dbg !16
  %31 = srem i32 %23, 16, !dbg !16
  %32 = sdiv i32 %20, 256, !dbg !17
  %33 = sext i32 %27 to i64, !dbg !18
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !19
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !19
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !19
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !19
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !19
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !19
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !19
  %43 = sext i32 %.decomposed to i64, !dbg !20
  %44 = getelementptr i64, ptr addrspace(1) %2, i64 %43, !dbg !20
  %45 = sext i32 %29 to i64, !dbg !20
  %46 = getelementptr i64, ptr addrspace(1) %2, i64 %45, !dbg !20
  %47 = sext i32 %30 to i64, !dbg !20
  %48 = getelementptr i64, ptr addrspace(1) %2, i64 %47, !dbg !20
  %49 = sext i32 %31 to i64, !dbg !20
  %50 = getelementptr i64, ptr addrspace(1) %2, i64 %49, !dbg !20
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #2, !dbg !21
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !21
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !21
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !21
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !21
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !21
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #2, !dbg !21
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !21
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !21
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !21
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !21
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !21
  %63 = getelementptr i64, ptr addrspace(1) %4, i64 %43, !dbg !22
  %64 = getelementptr i64, ptr addrspace(1) %4, i64 %45, !dbg !22
  %65 = getelementptr i64, ptr addrspace(1) %4, i64 %47, !dbg !22
  %66 = getelementptr i64, ptr addrspace(1) %4, i64 %49, !dbg !22
  %67 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #2, !dbg !23
  %68 = extractvalue { i64, i64 } %67, 0, !dbg !23
  %69 = extractvalue { i64, i64 } %67, 1, !dbg !23
  %70 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !23
  %71 = extractvalue { i64, i64 } %70, 0, !dbg !23
  %72 = extractvalue { i64, i64 } %70, 1, !dbg !23
  %73 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %65, i1 true) #2, !dbg !23
  %74 = extractvalue { i64, i64 } %73, 0, !dbg !23
  %75 = extractvalue { i64, i64 } %73, 1, !dbg !23
  %76 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !23
  %77 = extractvalue { i64, i64 } %76, 0, !dbg !23
  %78 = extractvalue { i64, i64 } %76, 1, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !24
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !25
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !25
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !25
  %91 = sext i32 %20 to i64, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !26
  %93 = sext i32 %22 to i64, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !26
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !27
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !27
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !27
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !27
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !27
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !27
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !27
  %105 = getelementptr i64, ptr addrspace(1) %6, i64 %33, !dbg !28
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %109 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %114 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %123 = lshr i64 %35, 60, !dbg !32
  %124 = and i64 %123, 8, !dbg !32
  %125 = add i64 %124, %35, !dbg !32
  %126 = lshr i64 %52, 60, !dbg !33
  %127 = and i64 %126, 8, !dbg !33
  %128 = lshr i64 %53, 60, !dbg !33
  %129 = and i64 %128, 8, !dbg !33
  %130 = lshr i64 %55, 60, !dbg !33
  %131 = and i64 %130, 8, !dbg !33
  %132 = lshr i64 %56, 60, !dbg !33
  %133 = and i64 %132, 8, !dbg !33
  %134 = lshr i64 %58, 60, !dbg !33
  %135 = and i64 %134, 8, !dbg !33
  %136 = lshr i64 %59, 60, !dbg !33
  %137 = and i64 %136, 8, !dbg !33
  %138 = lshr i64 %61, 60, !dbg !33
  %139 = and i64 %138, 8, !dbg !33
  %140 = lshr i64 %62, 60, !dbg !33
  %141 = and i64 %140, 8, !dbg !33
  %142 = shl i64 %125, 3, !dbg !34
  %143 = shl nsw i32 %32, 6, !dbg !35
  %144 = sext i32 %143 to i64, !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !37
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %127, !dbg !37
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %142, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %144, !dbg !37
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %129, !dbg !37
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %142, !dbg !37
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %144, !dbg !37
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !37
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %131, !dbg !37
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %142, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %144, !dbg !37
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %133, !dbg !37
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %142, !dbg !37
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %144, !dbg !37
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !37
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %135, !dbg !37
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %142, !dbg !37
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %144, !dbg !37
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !37
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %137, !dbg !37
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %142, !dbg !37
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %144, !dbg !37
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !37
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %139, !dbg !37
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %142, !dbg !37
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %144, !dbg !37
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !37
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %141, !dbg !37
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %142, !dbg !37
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %144, !dbg !37
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #2, !dbg !38
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #2, !dbg !38
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #2, !dbg !38
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #2, !dbg !38
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #2, !dbg !38
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #2, !dbg !38
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #2, !dbg !38
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #2, !dbg !38
  %185 = lshr i64 %68, 60, !dbg !39
  %186 = and i64 %185, 8, !dbg !39
  %187 = lshr i64 %69, 60, !dbg !39
  %188 = and i64 %187, 8, !dbg !39
  %189 = lshr i64 %71, 60, !dbg !39
  %190 = and i64 %189, 8, !dbg !39
  %191 = lshr i64 %72, 60, !dbg !39
  %192 = and i64 %191, 8, !dbg !39
  %193 = lshr i64 %74, 60, !dbg !39
  %194 = and i64 %193, 8, !dbg !39
  %195 = lshr i64 %75, 60, !dbg !39
  %196 = and i64 %195, 8, !dbg !39
  %197 = lshr i64 %77, 60, !dbg !39
  %198 = and i64 %197, 8, !dbg !39
  %199 = lshr i64 %78, 60, !dbg !39
  %200 = and i64 %199, 8, !dbg !39
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !40
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %186, !dbg !40
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %142, !dbg !40
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %144, !dbg !40
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !40
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %188, !dbg !40
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %142, !dbg !40
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %144, !dbg !40
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !40
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %190, !dbg !40
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %142, !dbg !40
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %144, !dbg !40
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !40
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %192, !dbg !40
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %142, !dbg !40
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %144, !dbg !40
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !40
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %194, !dbg !40
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %142, !dbg !40
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %144, !dbg !40
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !40
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %196, !dbg !40
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %142, !dbg !40
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %144, !dbg !40
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %77, !dbg !40
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %198, !dbg !40
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %142, !dbg !40
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %144, !dbg !40
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !40
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %200, !dbg !40
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %142, !dbg !40
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %144, !dbg !40
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #2, !dbg !41
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #2, !dbg !41
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #2, !dbg !41
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #2, !dbg !41
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #2, !dbg !41
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #2, !dbg !41
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #2, !dbg !41
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #2, !dbg !41
  %241 = lshr i64 %106, 60, !dbg !42
  %242 = and i64 %241, 8, !dbg !42
  %243 = add i64 %242, %106, !dbg !42
  %244 = shl i64 %243, 3, !dbg !43
  %245 = getelementptr float, ptr addrspace(1) %146, i64 %244, !dbg !44
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %144, !dbg !44
  %247 = getelementptr float, ptr addrspace(1) %150, i64 %244, !dbg !44
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %144, !dbg !44
  %249 = getelementptr float, ptr addrspace(1) %154, i64 %244, !dbg !44
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %144, !dbg !44
  %251 = getelementptr float, ptr addrspace(1) %158, i64 %244, !dbg !44
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %144, !dbg !44
  %253 = getelementptr float, ptr addrspace(1) %162, i64 %244, !dbg !44
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %144, !dbg !44
  %255 = getelementptr float, ptr addrspace(1) %166, i64 %244, !dbg !44
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %144, !dbg !44
  %257 = getelementptr float, ptr addrspace(1) %170, i64 %244, !dbg !44
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %144, !dbg !44
  %259 = getelementptr float, ptr addrspace(1) %174, i64 %244, !dbg !44
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %144, !dbg !44
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #2, !dbg !45
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #2, !dbg !45
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #2, !dbg !45
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #2, !dbg !45
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #2, !dbg !45
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #2, !dbg !45
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #2, !dbg !45
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 true) #2, !dbg !45
  %269 = getelementptr float, ptr addrspace(1) %202, i64 %244, !dbg !46
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %144, !dbg !46
  %271 = getelementptr float, ptr addrspace(1) %206, i64 %244, !dbg !46
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %144, !dbg !46
  %273 = getelementptr float, ptr addrspace(1) %210, i64 %244, !dbg !46
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %144, !dbg !46
  %275 = getelementptr float, ptr addrspace(1) %214, i64 %244, !dbg !46
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %144, !dbg !46
  %277 = getelementptr float, ptr addrspace(1) %218, i64 %244, !dbg !46
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %144, !dbg !46
  %279 = getelementptr float, ptr addrspace(1) %222, i64 %244, !dbg !46
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %144, !dbg !46
  %281 = getelementptr float, ptr addrspace(1) %226, i64 %244, !dbg !46
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %144, !dbg !46
  %283 = getelementptr float, ptr addrspace(1) %230, i64 %244, !dbg !46
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %144, !dbg !46
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #2, !dbg !47
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #2, !dbg !47
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #2, !dbg !47
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #2, !dbg !47
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #2, !dbg !47
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #2, !dbg !47
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #2, !dbg !47
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #2, !dbg !47
  %293 = insertelement <2 x i32> poison, i32 %261, i64 0, !dbg !45
  %294 = insertelement <2 x i32> %293, i32 %177, i64 1, !dbg !45
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !45
  %296 = insertelement <2 x i32> poison, i32 %285, i64 0, !dbg !47
  %297 = insertelement <2 x i32> %296, i32 %233, i64 1, !dbg !47
  %298 = bitcast <2 x i32> %297 to <2 x float>, !dbg !47
  %299 = fsub <2 x float> %298, %295, !dbg !48
  %300 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !49
  %301 = bitcast <2 x i32> %300 to <2 x float>, !dbg !49
  %302 = shufflevector <2 x float> %301, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %303 = fmul <2 x float> %299, %302, !dbg !49
  %304 = fadd <2 x float> %303, %295, !dbg !50
  %305 = insertelement <2 x i32> poison, i32 %262, i64 0, !dbg !45
  %306 = insertelement <2 x i32> %305, i32 %178, i64 1, !dbg !45
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !45
  %308 = insertelement <2 x i32> poison, i32 %286, i64 0, !dbg !47
  %309 = insertelement <2 x i32> %308, i32 %234, i64 1, !dbg !47
  %310 = bitcast <2 x i32> %309 to <2 x float>, !dbg !47
  %311 = fsub <2 x float> %310, %307, !dbg !48
  %312 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !49
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !49
  %314 = shufflevector <2 x float> %313, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %315 = fmul <2 x float> %311, %314, !dbg !49
  %316 = fadd <2 x float> %315, %307, !dbg !50
  %317 = insertelement <2 x i32> poison, i32 %263, i64 0, !dbg !45
  %318 = insertelement <2 x i32> %317, i32 %179, i64 1, !dbg !45
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !45
  %320 = insertelement <2 x i32> poison, i32 %287, i64 0, !dbg !47
  %321 = insertelement <2 x i32> %320, i32 %235, i64 1, !dbg !47
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !47
  %323 = fsub <2 x float> %322, %319, !dbg !48
  %324 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !49
  %325 = bitcast <2 x i32> %324 to <2 x float>, !dbg !49
  %326 = shufflevector <2 x float> %325, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %327 = fmul <2 x float> %323, %326, !dbg !49
  %328 = fadd <2 x float> %327, %319, !dbg !50
  %329 = shufflevector <2 x float> %328, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %330 = shufflevector <2 x float> %328, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %331 = insertelement <2 x i32> poison, i32 %264, i64 0, !dbg !45
  %332 = insertelement <2 x i32> %331, i32 %180, i64 1, !dbg !45
  %333 = bitcast <2 x i32> %332 to <2 x float>, !dbg !45
  %334 = insertelement <2 x i32> poison, i32 %288, i64 0, !dbg !47
  %335 = insertelement <2 x i32> %334, i32 %236, i64 1, !dbg !47
  %336 = bitcast <2 x i32> %335 to <2 x float>, !dbg !47
  %337 = fsub <2 x float> %336, %333, !dbg !48
  %338 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !49
  %339 = bitcast <2 x i32> %338 to <2 x float>, !dbg !49
  %340 = shufflevector <2 x float> %339, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %341 = fmul <2 x float> %337, %340, !dbg !49
  %342 = fadd <2 x float> %341, %333, !dbg !50
  %343 = shufflevector <2 x float> %342, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %344 = shufflevector <2 x float> %342, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %345 = insertelement <2 x i32> poison, i32 %265, i64 0, !dbg !45
  %346 = insertelement <2 x i32> %345, i32 %181, i64 1, !dbg !45
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !45
  %348 = insertelement <2 x i32> poison, i32 %289, i64 0, !dbg !47
  %349 = insertelement <2 x i32> %348, i32 %237, i64 1, !dbg !47
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !47
  %351 = fsub <2 x float> %350, %347, !dbg !48
  %352 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !49
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !49
  %354 = shufflevector <2 x float> %353, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %355 = fmul <2 x float> %351, %354, !dbg !49
  %356 = fadd <2 x float> %355, %347, !dbg !50
  %357 = insertelement <2 x i32> poison, i32 %266, i64 0, !dbg !45
  %358 = insertelement <2 x i32> %357, i32 %182, i64 1, !dbg !45
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !45
  %360 = insertelement <2 x i32> poison, i32 %290, i64 0, !dbg !47
  %361 = insertelement <2 x i32> %360, i32 %238, i64 1, !dbg !47
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !47
  %363 = fsub <2 x float> %362, %359, !dbg !48
  %364 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !49
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !49
  %366 = shufflevector <2 x float> %365, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %367 = fmul <2 x float> %363, %366, !dbg !49
  %368 = fadd <2 x float> %367, %359, !dbg !50
  %369 = insertelement <2 x i32> poison, i32 %267, i64 0, !dbg !45
  %370 = insertelement <2 x i32> %369, i32 %183, i64 1, !dbg !45
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !45
  %372 = insertelement <2 x i32> poison, i32 %291, i64 0, !dbg !47
  %373 = insertelement <2 x i32> %372, i32 %239, i64 1, !dbg !47
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !47
  %375 = fsub <2 x float> %374, %371, !dbg !48
  %376 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !49
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !49
  %378 = shufflevector <2 x float> %377, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %379 = fmul <2 x float> %375, %378, !dbg !49
  %380 = fadd <2 x float> %379, %371, !dbg !50
  %381 = shufflevector <2 x float> %380, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %382 = shufflevector <2 x float> %380, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %383 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !45
  %384 = insertelement <2 x i32> %383, i32 %184, i64 1, !dbg !45
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !45
  %386 = insertelement <2 x i32> poison, i32 %292, i64 0, !dbg !47
  %387 = insertelement <2 x i32> %386, i32 %240, i64 1, !dbg !47
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !47
  %389 = fsub <2 x float> %388, %385, !dbg !48
  %390 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !49
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !49
  %392 = shufflevector <2 x float> %391, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %393 = fmul <2 x float> %389, %392, !dbg !49
  %394 = fadd <2 x float> %393, %385, !dbg !50
  %395 = shufflevector <2 x float> %394, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %396 = shufflevector <2 x float> %394, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %397 = sext i32 %24 to i64, !dbg !51
  %398 = getelementptr float, ptr addrspace(1) %8, i64 %397, !dbg !51
  %399 = sext i32 %25 to i64, !dbg !51
  %400 = getelementptr float, ptr addrspace(1) %8, i64 %399, !dbg !51
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !52
  %402 = getelementptr inbounds i8, ptr addrspace(3) %401, i32 16, !dbg !52
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !52
  %404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !52
  %405 = getelementptr inbounds i8, ptr addrspace(3) %403, i32 4, !dbg !52
  %406 = getelementptr inbounds i8, ptr addrspace(3) %403, i32 8, !dbg !52
  %407 = getelementptr inbounds i8, ptr addrspace(3) %403, i32 12, !dbg !52
  %408 = getelementptr i1, ptr addrspace(1) %9, i64 %91, !dbg !53
  %409 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !27
  %410 = insertelement <4 x i32> %409, i32 %97, i64 1, !dbg !27
  %411 = insertelement <4 x i32> %410, i32 %98, i64 2, !dbg !27
  %412 = insertelement <4 x i32> %411, i32 %99, i64 3, !dbg !27
  %413 = bitcast <4 x i32> %412 to <4 x float>, !dbg !27
  %414 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !31
  %415 = insertelement <4 x i32> %414, i32 %116, i64 1, !dbg !31
  %416 = insertelement <4 x i32> %415, i32 %117, i64 2, !dbg !31
  %417 = insertelement <4 x i32> %416, i32 %118, i64 3, !dbg !31
  %418 = bitcast <4 x i32> %417 to <4 x float>, !dbg !31
  %419 = shufflevector <2 x float> %304, <2 x float> %316, <4 x i32> <i32 0, i32 2, i32 poison, i32 poison>, !dbg !54
  %420 = shufflevector <4 x float> %419, <4 x float> %330, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %421 = shufflevector <4 x float> %420, <4 x float> %344, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %422 = shufflevector <2 x float> %304, <2 x float> %316, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !54
  %423 = shufflevector <4 x float> %422, <4 x float> %329, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !54
  %424 = shufflevector <4 x float> %423, <4 x float> %343, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !54
  %425 = fsub <4 x float> %421, %424, !dbg !54
  %426 = fmul <4 x float> %425, %418, !dbg !55
  %427 = fadd <4 x float> %424, %426, !dbg !56
  %428 = fadd <4 x float> %427, %413, !dbg !57
  %429 = fcmp ole <4 x float> %428, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !58
  %430 = shufflevector <4 x i1> %429, <4 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %431 = shufflevector <4 x i1> %429, <4 x i1> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %432 = fcmp oge <4 x float> %428, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !58
  %433 = shufflevector <4 x i1> %429, <4 x i1> %432, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !58
  %434 = fcmp oge <4 x float> %428, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !62
  %435 = fcmp ole <4 x float> %428, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !62
  %436 = shufflevector <4 x i1> %435, <4 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %437 = shufflevector <4 x i1> %435, <4 x i1> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %438 = shufflevector <4 x i1> %434, <4 x i1> %435, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !62
  %439 = or <4 x i1> %438, %433, !dbg !63
  %440 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !27
  %441 = insertelement <4 x i32> %440, i32 %102, i64 1, !dbg !27
  %442 = insertelement <4 x i32> %441, i32 %103, i64 2, !dbg !27
  %443 = insertelement <4 x i32> %442, i32 %104, i64 3, !dbg !27
  %444 = bitcast <4 x i32> %443 to <4 x float>, !dbg !27
  %445 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !31
  %446 = insertelement <4 x i32> %445, i32 %120, i64 1, !dbg !31
  %447 = insertelement <4 x i32> %446, i32 %121, i64 2, !dbg !31
  %448 = insertelement <4 x i32> %447, i32 %122, i64 3, !dbg !31
  %449 = bitcast <4 x i32> %448 to <4 x float>, !dbg !31
  %450 = shufflevector <2 x float> %356, <2 x float> %368, <4 x i32> <i32 0, i32 2, i32 poison, i32 poison>, !dbg !54
  %451 = shufflevector <4 x float> %450, <4 x float> %382, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %452 = shufflevector <4 x float> %451, <4 x float> %396, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %453 = shufflevector <2 x float> %356, <2 x float> %368, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !54
  %454 = shufflevector <4 x float> %453, <4 x float> %381, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !54
  %455 = shufflevector <4 x float> %454, <4 x float> %395, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !54
  %456 = fsub <4 x float> %452, %455, !dbg !54
  %457 = fmul <4 x float> %456, %449, !dbg !55
  %458 = fadd <4 x float> %455, %457, !dbg !56
  %459 = fadd <4 x float> %458, %444, !dbg !57
  %460 = fcmp ole <4 x float> %459, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !58
  %461 = fcmp oge <4 x float> %459, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !58
  %462 = shufflevector <4 x i1> %460, <4 x i1> %461, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !58
  %463 = fcmp oge <4 x float> %459, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !62
  %464 = fcmp ole <4 x float> %459, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !62
  %465 = shufflevector <4 x i1> %463, <4 x i1> %464, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !62
  %466 = shufflevector <4 x i1> %465, <4 x i1> %462, <8 x i32> <i32 3, i32 6, i32 1, i32 4, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %467 = shufflevector <8 x i1> %466, <8 x i1> %436, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 11, i32 poison, i32 poison, i32 poison>, !dbg !58
  %468 = shufflevector <8 x i1> %467, <8 x i1> %430, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 10, i32 poison, i32 poison>, !dbg !58
  %469 = shufflevector <8 x i1> %468, <8 x i1> %437, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !58
  %470 = shufflevector <8 x i1> %469, <8 x i1> %431, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !58
  %471 = shufflevector <4 x float> %459, <4 x float> %428, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !58
  %472 = select <8 x i1> %470, <8 x float> zeroinitializer, <8 x float> %471, !dbg !58
  %473 = extractelement <8 x float> %472, i64 7, !dbg !52
  %474 = fcmp uno float %473, 0.000000e+00, !dbg !64
  %475 = extractelement <8 x float> %472, i64 6, !dbg !52
  %476 = fcmp uno float %475, 0.000000e+00, !dbg !64
  %477 = extractelement <8 x float> %472, i64 5, !dbg !52
  %478 = fcmp uno float %477, 0.000000e+00, !dbg !64
  %479 = extractelement <8 x float> %472, i64 4, !dbg !52
  %480 = fcmp uno float %479, 0.000000e+00, !dbg !64
  %481 = fcmp olt <8 x float> %472, splat (float 6.000000e+00), !dbg !66
  %482 = extractelement <8 x i1> %481, i64 7, !dbg !67
  %483 = or i1 %482, %474, !dbg !67
  %484 = extractelement <8 x i1> %481, i64 6, !dbg !67
  %485 = or i1 %484, %476, !dbg !67
  %486 = extractelement <8 x i1> %481, i64 5, !dbg !67
  %487 = or i1 %486, %478, !dbg !67
  %488 = extractelement <8 x i1> %481, i64 4, !dbg !67
  %489 = or i1 %488, %480, !dbg !67
  %490 = bitcast float %473 to i32, !dbg !52
  %491 = select i1 %483, i32 %490, i32 1086324736, !dbg !68
  %492 = bitcast float %475 to i32, !dbg !52
  %493 = select i1 %485, i32 %492, i32 1086324736, !dbg !68
  %494 = bitcast float %477 to i32, !dbg !52
  %495 = select i1 %487, i32 %494, i32 1086324736, !dbg !68
  %496 = bitcast float %479 to i32, !dbg !52
  %497 = select i1 %489, i32 %496, i32 1086324736, !dbg !68
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %401, i32 %491, i32 %493, i32 %495, i32 %497, i1 true) #2, !dbg !52
  %498 = extractelement <8 x float> %472, i64 3, !dbg !52
  %499 = fcmp uno float %498, 0.000000e+00, !dbg !64
  %500 = extractelement <8 x float> %472, i64 2, !dbg !52
  %501 = fcmp uno float %500, 0.000000e+00, !dbg !64
  %502 = extractelement <8 x float> %472, i64 1, !dbg !52
  %503 = fcmp uno float %502, 0.000000e+00, !dbg !64
  %504 = extractelement <8 x float> %472, i64 0, !dbg !52
  %505 = fcmp uno float %504, 0.000000e+00, !dbg !64
  %506 = extractelement <8 x i1> %481, i64 3, !dbg !67
  %507 = or i1 %506, %499, !dbg !67
  %508 = extractelement <8 x i1> %481, i64 2, !dbg !67
  %509 = or i1 %508, %501, !dbg !67
  %510 = extractelement <8 x i1> %481, i64 1, !dbg !67
  %511 = or i1 %510, %503, !dbg !67
  %512 = extractelement <8 x i1> %481, i64 0, !dbg !67
  %513 = or i1 %512, %505, !dbg !67
  %514 = or <4 x i1> %465, %462, !dbg !63
  %515 = bitcast float %498 to i32, !dbg !52
  %516 = select i1 %507, i32 %515, i32 1086324736, !dbg !68
  %517 = bitcast float %500 to i32, !dbg !52
  %518 = select i1 %509, i32 %517, i32 1086324736, !dbg !68
  %519 = bitcast float %502 to i32, !dbg !52
  %520 = select i1 %511, i32 %519, i32 1086324736, !dbg !68
  %521 = bitcast float %504 to i32, !dbg !52
  %522 = select i1 %513, i32 %521, i32 1086324736, !dbg !68
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %402, i32 %516, i32 %518, i32 %520, i32 %522, i1 true) #2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %523 = load <4 x i32>, ptr addrspace(3) %404, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %403, align 16, !dbg !52
  %.extract15 = load i32, ptr addrspace(3) %405, align 4, !dbg !52
  %.extract16 = load i32, ptr addrspace(3) %406, align 8, !dbg !52
  %.extract17 = load i32, ptr addrspace(3) %407, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %398, i1 true) #2, !dbg !52
  %.extract18 = extractelement <4 x i32> %523, i64 0, !dbg !52
  %.extract19 = extractelement <4 x i32> %523, i64 1, !dbg !52
  %.extract20 = extractelement <4 x i32> %523, i64 2, !dbg !52
  %.extract21 = extractelement <4 x i32> %523, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract18, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %400, i1 true) #2, !dbg !52
  %524 = zext <4 x i1> %439 to <4 x i8>, !dbg !69
  %525 = bitcast <4 x i8> %524 to i32, !dbg !69
  %526 = zext <4 x i1> %514 to <4 x i8>, !dbg !69
  %527 = bitcast <4 x i8> %526 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %525, i32 %527, ptr addrspace(1) %408, i1 true) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpkmx7xgpfzjxwimztawb5vqtr4x6oiqkq3h5jswrpk7qmtsvemb.py", directory: "inductor_cache/pk")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_42", linkageName: "triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 40, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 39, scope: !7)
!35 = !DILocation(line: 42, column: 49, scope: !7)
!36 = !DILocation(line: 42, column: 46, scope: !7)
!37 = !DILocation(line: 42, column: 30, scope: !7)
!38 = !DILocation(line: 42, column: 54, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 56, scope: !7)
!42 = !DILocation(line: 52, column: 35, scope: !7)
!43 = !DILocation(line: 53, column: 40, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 56, scope: !7)
!46 = !DILocation(line: 54, column: 31, scope: !7)
!47 = !DILocation(line: 54, column: 57, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 69, column: 25, scope: !7)
!52 = !DILocation(line: 69, column: 37, scope: !7)
!53 = !DILocation(line: 70, column: 25, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 63, column: 42, scope: !7)
!62 = !DILocation(line: 67, column: 21, scope: !7)
!63 = !DILocation(line: 68, column: 20, scope: !7)
!64 = !DILocation(line: 112, column: 21, scope: !59, inlinedAt: !65)
!65 = !DILocation(line: 65, column: 42, scope: !7)
!66 = !DILocation(line: 110, column: 15, scope: !59, inlinedAt: !65)
!67 = !DILocation(line: 112, column: 16, scope: !59, inlinedAt: !65)
!68 = !DILocation(line: 113, column: 29, scope: !59, inlinedAt: !65)
!69 = !DILocation(line: 70, column: 37, scope: !7)
!70 = !DILocation(line: 70, column: 4, scope: !7)
