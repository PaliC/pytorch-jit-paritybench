#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":36:24)
#loc25 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":40:24)
#loc50 = loc(callsite(#loc1 at #loc19))
#loc53 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_mul_pow_reciprocal_sub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0), %arg7: i32 loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.562500e-02> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e-01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.0158730168> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<0.899999976> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<0.899999976> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<1.000000e-01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<1.562500e-02> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %5 = arith.divsi %3, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = arith.muli %5, %cst_5 : tensor<1x64xi32, #blocked> loc(#loc7)
    %7 = tt.splat %4 : i32 -> tensor<1x64xi32, #blocked> loc(#loc8)
    %8 = arith.addi %7, %6 : tensor<1x64xi32, #blocked> loc(#loc8)
    %9 = arith.remsi %3, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc9)
    %10 = arith.addi %8, %9 : tensor<1x64xi32, #blocked> loc(#loc10)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.addptr %11, %10 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc11)
    %13 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc12)
    %14 = tt.load %12, %13, %cst_6 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc13)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %17 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc14)
    %18 = tt.load %16, %17 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %19 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc15)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %21 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc16)
    %22 = tt.load %20, %21 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %23 = arith.select %13, %14, %cst_6 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc17)
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc19)), %arg10: f32 loc(callsite(#loc1 at #loc19))):
      %57 = arith.addf %arg9, %arg10 : f32 loc(#loc54)
      tt.reduce.return %57 : f32 loc(#loc49)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc49)
    %25 = triton_gpu.convert_layout %24 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc22)
    %27 = tt.expand_dims %24 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc22)
    %28 = arith.mulf %14, %14 : tensor<1x64xf32, #blocked> loc(#loc23)
    %29 = arith.select %13, %28, %cst_6 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc24)
    %30 = "tt.reduce"(%29) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc25)), %arg10: f32 loc(callsite(#loc1 at #loc25))):
      %57 = arith.addf %arg9, %arg10 : f32 loc(#loc55)
      tt.reduce.return %57 : f32 loc(#loc52)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc52)
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc26)
    %32 = arith.mulf %18, %cst_8 : tensor<1x1xf32, #blocked1> loc(#loc27)
    %33 = arith.mulf %26, %cst_10 : tensor<1x1xf32, #blocked1> loc(#loc21)
    %34 = arith.mulf %27, %cst : tensor<1x1xf32, #blocked> loc(#loc21)
    %35 = arith.mulf %33, %cst_9 : tensor<1x1xf32, #blocked1> loc(#loc28)
    %36 = arith.addf %32, %35 : tensor<1x1xf32, #blocked1> loc(#loc29)
    %37 = arith.mulf %22, %cst_7 : tensor<1x1xf32, #blocked> loc(#loc30)
    %38 = arith.mulf %27, %34 : tensor<1x1xf32, #blocked> loc(#loc31)
    %39 = arith.subf %31, %38 : tensor<1x1xf32, #blocked> loc(#loc32)
    %40 = arith.mulf %39, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc33)
    %41 = arith.mulf %40, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc34)
    %42 = arith.addf %37, %41 : tensor<1x1xf32, #blocked> loc(#loc35)
    %43 = arith.mulf %39, %cst : tensor<1x1xf32, #blocked> loc(#loc36)
    %44 = arith.addf %43, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc37)
    %45 = tt.extern_elementwise %44 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc38)
    %46 = arith.divf %cst_3, %45 : tensor<1x1xf32, #blocked> loc(#loc39)
    %47 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc40)
    %48 = tt.splat %47 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    tt.store %48, %36, %17 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %49 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc42)
    %50 = tt.splat %49 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc43)
    %51 = triton_gpu.convert_layout %42 : tensor<1x1xf32, #blocked> -> tensor<1x1xf32, #blocked1> loc(#loc43)
    tt.store %50, %51, %17 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc43)
    %52 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc44)
    %53 = tt.splat %52 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc45)
    %54 = triton_gpu.convert_layout %46 : tensor<1x1xf32, #blocked> -> tensor<1x1xf32, #blocked1> loc(#loc45)
    tt.store %53, %54, %17 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc45)
    %55 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc46)
    %56 = tt.splat %55 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc47)
    tt.store %56, %33, %17 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc47)
    tt.return loc(#loc48)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":23:28)
#loc3 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":25:21)
#loc4 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":26:34)
#loc5 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":31:33)
#loc6 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":31:48)
#loc7 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":31:42)
#loc8 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":31:38)
#loc9 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":31:61)
#loc10 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":31:56)
#loc11 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":31:30)
#loc12 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":31:68)
#loc13 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":32:31)
#loc14 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":32:36)
#loc15 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":33:31)
#loc16 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":33:36)
#loc17 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":35:33)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc21 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":44:19)
#loc22 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":36:27)
#loc23 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":37:18)
#loc24 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":39:33)
#loc26 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":40:27)
#loc27 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":42:20)
#loc28 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":46:20)
#loc29 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":47:20)
#loc30 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":48:20)
#loc31 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":49:19)
#loc32 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":50:19)
#loc33 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":52:20)
#loc34 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":53:20)
#loc35 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":54:20)
#loc36 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":55:20)
#loc37 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":57:20)
#loc38 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":58:27)
#loc39 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":60:20)
#loc40 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":63:25)
#loc41 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":63:37)
#loc42 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":64:25)
#loc43 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":64:37)
#loc44 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":65:25)
#loc45 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":65:37)
#loc46 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":66:25)
#loc47 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":66:37)
#loc48 = loc("inductor_cache/zn/cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py":66:4)
#loc49 = loc(callsite(#loc18 at #loc19))
#loc51 = loc(callsite(#loc20 at #loc18))
#loc52 = loc(callsite(#loc18 at #loc25))
#loc54 = loc(callsite(#loc51 at #loc19))
#loc55 = loc(callsite(#loc51 at #loc25))
