; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_mul_pow_reciprocal_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = lshr i32 %12, 5, !dbg !12
  %15 = shl i32 %10, 4, !dbg !13
  %16 = shl i32 %12, 2, !dbg !14
  %17 = and i32 %16, 192, !dbg !14
  %18 = add i32 %15, %17, !dbg !15
  %19 = and i32 %12, 15, !dbg !16
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %11, i32 0, i1 %11) #5, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = sext i32 %10 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %11) #5, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %11) #5, !dbg !23
  %30 = select i1 %11, float %24, float 0.000000e+00, !dbg !24
  %31 = bitcast float %30 to i32, !dbg !25
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 16, i32 31), !dbg !25
  %33 = bitcast i32 %32 to float, !dbg !25
  %34 = fadd float %30, %33, !dbg !29
  %35 = bitcast float %34 to i32, !dbg !25
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 8, i32 31), !dbg !25
  %37 = bitcast i32 %36 to float, !dbg !25
  %38 = fadd float %34, %37, !dbg !29
  %39 = bitcast float %38 to i32, !dbg !25
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 4, i32 31), !dbg !25
  %41 = bitcast i32 %40 to float, !dbg !25
  %42 = fadd float %38, %41, !dbg !29
  %43 = bitcast float %42 to i32, !dbg !25
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 2, i32 31), !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = fadd float %42, %45, !dbg !29
  %47 = bitcast float %46 to i32, !dbg !25
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 1, i32 31), !dbg !25
  %49 = bitcast i32 %48 to float, !dbg !25
  %50 = fadd float %46, %49, !dbg !29
  %51 = icmp eq i32 %13, 0, !dbg !25
  %52 = and i32 %14, 1, !dbg !25
  %53 = zext nneg i32 %52 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %53, !dbg !25
  %55 = bitcast float %50 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 %51) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %56 = icmp slt i32 %12, 2, !dbg !25
  %57 = sext i32 %12 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57, !dbg !25
  %59 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %58, i1 %56) #5, !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = fadd float %60, %62, !dbg !29
  %64 = and i32 %12, 1, !dbg !25
  %65 = icmp eq i32 %64, 0, !dbg !25
  %66 = and i1 %56, %65, !dbg !25
  %67 = bitcast float %63 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %67, i1 %66) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %68 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %69 = fmul float %24, %24, !dbg !31
  %70 = select i1 %11, float %69, float 0.000000e+00, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %71 = bitcast float %70 to i32, !dbg !33
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !33
  %73 = bitcast i32 %72 to float, !dbg !33
  %74 = fadd float %70, %73, !dbg !35
  %75 = bitcast float %74 to i32, !dbg !33
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = fadd float %74, %77, !dbg !35
  %79 = bitcast float %78 to i32, !dbg !33
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !33
  %81 = bitcast i32 %80 to float, !dbg !33
  %82 = fadd float %78, %81, !dbg !35
  %83 = bitcast float %82 to i32, !dbg !33
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !33
  %85 = bitcast i32 %84 to float, !dbg !33
  %86 = fadd float %82, %85, !dbg !35
  %87 = bitcast float %86 to i32, !dbg !33
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = fadd float %86, %89, !dbg !35
  %91 = bitcast float %90 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %91, i1 %51) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %92 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %58, i1 %56) #5, !dbg !33
  %93 = bitcast i32 %92 to float, !dbg !33
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = fadd float %93, %95, !dbg !35
  %97 = bitcast float %96 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %97, i1 %66) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %98 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %99 = fmul float %68, 1.562500e-02, !dbg !36
  %100 = fmul float %68, %99, !dbg !37
  %101 = fsub float %98, %100, !dbg !38
  %102 = fmul float %101, 1.562500e-02, !dbg !39
  %103 = fadd float %102, 0x3EE4F8B580000000, !dbg !40
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %104, 0, !dbg !41
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %105, 0, !dbg !41
  br i1 %.not.i, label %111, label %106, !dbg !41

106:                                              ; preds = %9
  br i1 %.not1.i, label %109, label %107, !dbg !41

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

111:                                              ; preds = %9
  br i1 %.not1.i, label %114, label %112, !dbg !41

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !41
  %116 = bitcast i32 %29 to float, !dbg !23
  %117 = fmul float %116, 0x3FECCCCCC0000000, !dbg !42
  %118 = fmul float %101, 0x3F90410420000000, !dbg !43
  %119 = fmul float %118, 0x3FB99999A0000000, !dbg !44
  %120 = fadd float %117, %119, !dbg !45
  %121 = bitcast i32 %27 to float, !dbg !21
  %122 = fmul float %121, 0x3FECCCCCC0000000, !dbg !46
  %123 = fmul float %99, 0x3FB99999A0000000, !dbg !47
  %124 = fadd float %122, %123, !dbg !48
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !49
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !50
  %urem = and i32 %12, 63, !dbg !51
  %127 = icmp eq i32 %urem, 0, !dbg !51
  %128 = bitcast float %124 to i32, !dbg !51
  %129 = and i1 %127, %11, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %126, i1 %129) #5, !dbg !51
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !52
  %131 = bitcast float %120 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %130, i1 %129) #5, !dbg !53
  %132 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !54
  %133 = bitcast float %125 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %132, i1 %129) #5, !dbg !55
  %134 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !56
  %135 = bitcast float %99 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %134, i1 %129) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cznmgjsge2gkhwo33sdxf5hijwq5tbl7thlsrlavipzkh2ew3x46.py", directory: "inductor_cache/zn")
!4 = !{ptr @triton_per_fused_add_div_mul_pow_reciprocal_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mul_pow_reciprocal_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mul_pow_reciprocal_sub_sum_0", linkageName: "triton_per_fused_add_div_mul_pow_reciprocal_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 33, scope: !7)
!14 = !DILocation(line: 31, column: 42, scope: !7)
!15 = !DILocation(line: 31, column: 38, scope: !7)
!16 = !DILocation(line: 31, column: 61, scope: !7)
!17 = !DILocation(line: 31, column: 56, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 68, scope: !7)
!20 = !DILocation(line: 32, column: 31, scope: !7)
!21 = !DILocation(line: 32, column: 36, scope: !7)
!22 = !DILocation(line: 33, column: 31, scope: !7)
!23 = !DILocation(line: 33, column: 36, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 33, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !34)
!34 = !DILocation(line: 40, column: 24, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !34)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 49, column: 19, scope: !7)
!38 = !DILocation(line: 50, column: 19, scope: !7)
!39 = !DILocation(line: 55, column: 20, scope: !7)
!40 = !DILocation(line: 57, column: 20, scope: !7)
!41 = !DILocation(line: 58, column: 27, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 42, column: 20, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 25, scope: !7)
!51 = !DILocation(line: 63, column: 37, scope: !7)
!52 = !DILocation(line: 64, column: 25, scope: !7)
!53 = !DILocation(line: 64, column: 37, scope: !7)
!54 = !DILocation(line: 65, column: 25, scope: !7)
!55 = !DILocation(line: 65, column: 37, scope: !7)
!56 = !DILocation(line: 66, column: 25, scope: !7)
!57 = !DILocation(line: 66, column: 37, scope: !7)
!58 = !DILocation(line: 66, column: 4, scope: !7)
