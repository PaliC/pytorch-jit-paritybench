; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 255, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = or disjoint i32 %7, %9, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %12, 256, !dbg !14
  %15 = icmp slt i32 %13, 256, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 4, !dbg !16
  %.lobit1 = lshr i32 %8, 6, !dbg !17
  %18 = and i32 %.lobit1, 3, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !18
  %20 = or disjoint i32 %19, 4, !dbg !18
  %21 = or disjoint i32 %19, 8, !dbg !18
  %22 = or disjoint i32 %19, 12, !dbg !18
  %23 = icmp slt i32 %17, 768, !dbg !19
  %24 = icmp slt i32 %19, 768, !dbg !19
  %25 = icmp slt i32 %20, 768, !dbg !19
  %26 = icmp slt i32 %21, 768, !dbg !19
  %27 = icmp slt i32 %22, 768, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %28 = sdiv i32 %.frozen, 8, !dbg !20
  %29 = mul i32 %28, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = srem i32 %28, 8, !dbg !22
  %31 = sdiv i32 %12, 64, !dbg !23
  %.frozen59 = freeze i32 %13, !dbg !23
  %32 = sdiv i32 %.frozen59, 64, !dbg !23
  %33 = mul i32 %32, 64, !dbg !24
  %.decomposed60 = sub i32 %.frozen59, %33, !dbg !24
  %34 = mul nsw i32 %.decomposed, 1536, !dbg !25
  %35 = mul nsw i32 %30, 26112, !dbg !26
  %36 = mul i32 %31, 221952, !dbg !27
  %37 = add i32 %36, %34, !dbg !28
  %38 = add i32 %37, %17, !dbg !29
  %39 = add i32 %38, %35, !dbg !30
  %40 = or disjoint i32 %37, 4, !dbg !28
  %41 = add i32 %40, %17, !dbg !29
  %42 = add i32 %41, %35, !dbg !30
  %43 = or disjoint i32 %37, 8, !dbg !28
  %44 = add i32 %43, %17, !dbg !29
  %45 = add i32 %44, %35, !dbg !30
  %46 = or disjoint i32 %37, 12, !dbg !28
  %47 = add i32 %46, %17, !dbg !29
  %48 = add i32 %47, %35, !dbg !30
  %49 = sext i32 %39 to i64, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !31
  %51 = sext i32 %42 to i64, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !31
  %53 = sext i32 %45 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !31
  %55 = sext i32 %48 to i64, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !31
  %57 = and i1 %23, %14, !dbg !32
  %58 = and i1 %15, %24, !dbg !32
  %59 = and i1 %25, %15, !dbg !32
  %60 = and i1 %26, %15, !dbg !32
  %61 = and i1 %27, %15, !dbg !32
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %57) #2, !dbg !33
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !33
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !33
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !33
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !33
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %57) #2, !dbg !33
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !33
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !33
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !33
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !33
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %57) #2, !dbg !33
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !33
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !33
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !33
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !33
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %57) #2, !dbg !33
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !33
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !33
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !33
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !33
  %82 = add i32 %37, 768, !dbg !34
  %83 = add i32 %82, %17, !dbg !35
  %84 = add i32 %83, %35, !dbg !36
  %85 = add i32 %37, 772, !dbg !34
  %86 = add i32 %85, %17, !dbg !35
  %87 = add i32 %86, %35, !dbg !36
  %88 = add i32 %37, 776, !dbg !34
  %89 = add i32 %88, %17, !dbg !35
  %90 = add i32 %89, %35, !dbg !36
  %91 = add i32 %37, 780, !dbg !34
  %92 = add i32 %91, %17, !dbg !35
  %93 = add i32 %92, %35, !dbg !36
  %94 = sext i32 %84 to i64, !dbg !37
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !37
  %96 = sext i32 %87 to i64, !dbg !37
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !37
  %98 = sext i32 %90 to i64, !dbg !37
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !37
  %100 = sext i32 %93 to i64, !dbg !37
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !37
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %57) #2, !dbg !38
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !38
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !38
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !38
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !38
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %57) #2, !dbg !38
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !38
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !38
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !38
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %57) #2, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !38
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !38
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !38
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %57) #2, !dbg !38
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !38
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !38
  %122 = add i32 %37, 1536, !dbg !39
  %123 = add i32 %122, %17, !dbg !40
  %124 = add i32 %123, %35, !dbg !41
  %125 = add i32 %37, 1540, !dbg !39
  %126 = add i32 %125, %17, !dbg !40
  %127 = add i32 %126, %35, !dbg !41
  %128 = add i32 %37, 1544, !dbg !39
  %129 = add i32 %128, %17, !dbg !40
  %130 = add i32 %129, %35, !dbg !41
  %131 = add i32 %37, 1548, !dbg !39
  %132 = add i32 %131, %17, !dbg !40
  %133 = add i32 %132, %35, !dbg !41
  %134 = sext i32 %124 to i64, !dbg !42
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !42
  %136 = sext i32 %127 to i64, !dbg !42
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !42
  %138 = sext i32 %130 to i64, !dbg !42
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !42
  %140 = sext i32 %133 to i64, !dbg !42
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !42
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %57) #2, !dbg !43
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !43
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !43
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !43
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !43
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %57) #2, !dbg !43
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !43
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !43
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !43
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !43
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %57) #2, !dbg !43
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !43
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !43
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !43
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !43
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %57) #2, !dbg !43
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !43
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !43
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !43
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !43
  %162 = add i32 %37, 13056, !dbg !44
  %163 = add i32 %162, %17, !dbg !45
  %164 = add i32 %163, %35, !dbg !46
  %165 = add i32 %37, 13060, !dbg !44
  %166 = add i32 %165, %17, !dbg !45
  %167 = add i32 %166, %35, !dbg !46
  %168 = add i32 %37, 13064, !dbg !44
  %169 = add i32 %168, %17, !dbg !45
  %170 = add i32 %169, %35, !dbg !46
  %171 = add i32 %37, 13068, !dbg !44
  %172 = add i32 %171, %17, !dbg !45
  %173 = add i32 %172, %35, !dbg !46
  %174 = sext i32 %164 to i64, !dbg !47
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !47
  %176 = sext i32 %167 to i64, !dbg !47
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !47
  %178 = sext i32 %170 to i64, !dbg !47
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !47
  %180 = sext i32 %173 to i64, !dbg !47
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !47
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %57) #2, !dbg !48
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !48
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !48
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !48
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !48
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %177, i1 %57) #2, !dbg !48
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !48
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !48
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !48
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !48
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %57) #2, !dbg !48
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !48
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !48
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !48
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !48
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %57) #2, !dbg !48
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !48
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !48
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !48
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !48
  %202 = add i32 %37, 13824, !dbg !49
  %203 = add i32 %202, %17, !dbg !50
  %204 = add i32 %203, %35, !dbg !51
  %205 = add i32 %37, 13828, !dbg !49
  %206 = add i32 %205, %17, !dbg !50
  %207 = add i32 %206, %35, !dbg !51
  %208 = add i32 %37, 13832, !dbg !49
  %209 = add i32 %208, %17, !dbg !50
  %210 = add i32 %209, %35, !dbg !51
  %211 = add i32 %37, 13836, !dbg !49
  %212 = add i32 %211, %17, !dbg !50
  %213 = add i32 %212, %35, !dbg !51
  %214 = sext i32 %204 to i64, !dbg !52
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !52
  %216 = sext i32 %207 to i64, !dbg !52
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !52
  %218 = sext i32 %210 to i64, !dbg !52
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !52
  %220 = sext i32 %213 to i64, !dbg !52
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !52
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %215, i1 %57) #2, !dbg !53
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !53
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !53
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !53
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !53
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %217, i1 %57) #2, !dbg !53
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !53
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !53
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !53
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !53
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %219, i1 %57) #2, !dbg !53
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !53
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !53
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !53
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !53
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %221, i1 %57) #2, !dbg !53
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !53
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !53
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !53
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !53
  %242 = add i32 %37, 14592, !dbg !54
  %243 = add i32 %242, %17, !dbg !55
  %244 = add i32 %243, %35, !dbg !56
  %245 = add i32 %37, 14596, !dbg !54
  %246 = add i32 %245, %17, !dbg !55
  %247 = add i32 %246, %35, !dbg !56
  %248 = add i32 %37, 14600, !dbg !54
  %249 = add i32 %248, %17, !dbg !55
  %250 = add i32 %249, %35, !dbg !56
  %251 = add i32 %37, 14604, !dbg !54
  %252 = add i32 %251, %17, !dbg !55
  %253 = add i32 %252, %35, !dbg !56
  %254 = sext i32 %244 to i64, !dbg !57
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !57
  %256 = sext i32 %247 to i64, !dbg !57
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !57
  %258 = sext i32 %250 to i64, !dbg !57
  %259 = getelementptr float, ptr addrspace(1) %0, i64 %258, !dbg !57
  %260 = sext i32 %253 to i64, !dbg !57
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !57
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %57) #2, !dbg !58
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !58
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !58
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !58
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !58
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %257, i1 %57) #2, !dbg !58
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !58
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !58
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !58
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !58
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %259, i1 %57) #2, !dbg !58
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !58
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !58
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !58
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !58
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %261, i1 %57) #2, !dbg !58
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !58
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !58
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !58
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !58
  %282 = add i32 %37, 26112, !dbg !59
  %283 = add i32 %282, %17, !dbg !60
  %284 = add i32 %283, %35, !dbg !61
  %285 = add i32 %37, 26116, !dbg !59
  %286 = add i32 %285, %17, !dbg !60
  %287 = add i32 %286, %35, !dbg !61
  %288 = add i32 %37, 26120, !dbg !59
  %289 = add i32 %288, %17, !dbg !60
  %290 = add i32 %289, %35, !dbg !61
  %291 = add i32 %37, 26124, !dbg !59
  %292 = add i32 %291, %17, !dbg !60
  %293 = add i32 %292, %35, !dbg !61
  %294 = sext i32 %284 to i64, !dbg !62
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %294, !dbg !62
  %296 = sext i32 %287 to i64, !dbg !62
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %296, !dbg !62
  %298 = sext i32 %290 to i64, !dbg !62
  %299 = getelementptr float, ptr addrspace(1) %0, i64 %298, !dbg !62
  %300 = sext i32 %293 to i64, !dbg !62
  %301 = getelementptr float, ptr addrspace(1) %0, i64 %300, !dbg !62
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %295, i1 %57) #2, !dbg !63
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !63
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !63
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !63
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !63
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %297, i1 %57) #2, !dbg !63
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !63
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !63
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !63
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !63
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %299, i1 %57) #2, !dbg !63
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !63
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !63
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !63
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !63
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %301, i1 %57) #2, !dbg !63
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !63
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !63
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !63
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !63
  %322 = add i32 %37, 26880, !dbg !64
  %323 = add i32 %322, %17, !dbg !65
  %324 = add i32 %323, %35, !dbg !66
  %325 = add i32 %37, 26884, !dbg !64
  %326 = add i32 %325, %17, !dbg !65
  %327 = add i32 %326, %35, !dbg !66
  %328 = add i32 %37, 26888, !dbg !64
  %329 = add i32 %328, %17, !dbg !65
  %330 = add i32 %329, %35, !dbg !66
  %331 = add i32 %37, 26892, !dbg !64
  %332 = add i32 %331, %17, !dbg !65
  %333 = add i32 %332, %35, !dbg !66
  %334 = sext i32 %324 to i64, !dbg !67
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !67
  %336 = sext i32 %327 to i64, !dbg !67
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !67
  %338 = sext i32 %330 to i64, !dbg !67
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !67
  %340 = sext i32 %333 to i64, !dbg !67
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !67
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %335, i1 %57) #2, !dbg !68
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !68
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !68
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !68
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !68
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %337, i1 %57) #2, !dbg !68
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !68
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !68
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !68
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !68
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %339, i1 %57) #2, !dbg !68
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !68
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !68
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !68
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !68
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %341, i1 %57) #2, !dbg !68
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !68
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !68
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !68
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !68
  %362 = add i32 %37, 27648, !dbg !69
  %363 = add i32 %362, %17, !dbg !70
  %364 = add i32 %363, %35, !dbg !71
  %365 = add i32 %37, 27652, !dbg !69
  %366 = add i32 %365, %17, !dbg !70
  %367 = add i32 %366, %35, !dbg !71
  %368 = add i32 %37, 27656, !dbg !69
  %369 = add i32 %368, %17, !dbg !70
  %370 = add i32 %369, %35, !dbg !71
  %371 = add i32 %37, 27660, !dbg !69
  %372 = add i32 %371, %17, !dbg !70
  %373 = add i32 %372, %35, !dbg !71
  %374 = sext i32 %364 to i64, !dbg !72
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !72
  %376 = sext i32 %367 to i64, !dbg !72
  %377 = getelementptr float, ptr addrspace(1) %0, i64 %376, !dbg !72
  %378 = sext i32 %370 to i64, !dbg !72
  %379 = getelementptr float, ptr addrspace(1) %0, i64 %378, !dbg !72
  %380 = sext i32 %373 to i64, !dbg !72
  %381 = getelementptr float, ptr addrspace(1) %0, i64 %380, !dbg !72
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %375, i1 %57) #2, !dbg !73
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !73
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !73
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !73
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !73
  %387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %377, i1 %57) #2, !dbg !73
  %388 = extractvalue { i32, i32, i32, i32 } %387, 0, !dbg !73
  %389 = extractvalue { i32, i32, i32, i32 } %387, 1, !dbg !73
  %390 = extractvalue { i32, i32, i32, i32 } %387, 2, !dbg !73
  %391 = extractvalue { i32, i32, i32, i32 } %387, 3, !dbg !73
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %379, i1 %57) #2, !dbg !73
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !73
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !73
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !73
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !73
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %381, i1 %57) #2, !dbg !73
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !73
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !73
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !73
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !73
  %402 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !33
  %403 = insertelement <4 x i32> %402, i32 %64, i64 1, !dbg !33
  %404 = insertelement <4 x i32> %403, i32 %65, i64 2, !dbg !33
  %405 = insertelement <4 x i32> %404, i32 %66, i64 3, !dbg !33
  %406 = bitcast <4 x i32> %405 to <4 x float>, !dbg !33
  %407 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !38
  %408 = insertelement <4 x i32> %407, i32 %104, i64 1, !dbg !38
  %409 = insertelement <4 x i32> %408, i32 %105, i64 2, !dbg !38
  %410 = insertelement <4 x i32> %409, i32 %106, i64 3, !dbg !38
  %411 = bitcast <4 x i32> %410 to <4 x float>, !dbg !38
  %412 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !43
  %413 = insertelement <4 x i32> %412, i32 %144, i64 1, !dbg !43
  %414 = insertelement <4 x i32> %413, i32 %145, i64 2, !dbg !43
  %415 = insertelement <4 x i32> %414, i32 %146, i64 3, !dbg !43
  %416 = bitcast <4 x i32> %415 to <4 x float>, !dbg !43
  %417 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !48
  %418 = insertelement <4 x i32> %417, i32 %184, i64 1, !dbg !48
  %419 = insertelement <4 x i32> %418, i32 %185, i64 2, !dbg !48
  %420 = insertelement <4 x i32> %419, i32 %186, i64 3, !dbg !48
  %421 = bitcast <4 x i32> %420 to <4 x float>, !dbg !48
  %422 = insertelement <4 x i32> poison, i32 %223, i64 0, !dbg !53
  %423 = insertelement <4 x i32> %422, i32 %224, i64 1, !dbg !53
  %424 = insertelement <4 x i32> %423, i32 %225, i64 2, !dbg !53
  %425 = insertelement <4 x i32> %424, i32 %226, i64 3, !dbg !53
  %426 = bitcast <4 x i32> %425 to <4 x float>, !dbg !53
  %427 = insertelement <4 x i32> poison, i32 %263, i64 0, !dbg !58
  %428 = insertelement <4 x i32> %427, i32 %264, i64 1, !dbg !58
  %429 = insertelement <4 x i32> %428, i32 %265, i64 2, !dbg !58
  %430 = insertelement <4 x i32> %429, i32 %266, i64 3, !dbg !58
  %431 = bitcast <4 x i32> %430 to <4 x float>, !dbg !58
  %432 = insertelement <4 x i32> poison, i32 %303, i64 0, !dbg !63
  %433 = insertelement <4 x i32> %432, i32 %304, i64 1, !dbg !63
  %434 = insertelement <4 x i32> %433, i32 %305, i64 2, !dbg !63
  %435 = insertelement <4 x i32> %434, i32 %306, i64 3, !dbg !63
  %436 = bitcast <4 x i32> %435 to <4 x float>, !dbg !63
  %437 = insertelement <4 x i32> poison, i32 %343, i64 0, !dbg !68
  %438 = insertelement <4 x i32> %437, i32 %344, i64 1, !dbg !68
  %439 = insertelement <4 x i32> %438, i32 %345, i64 2, !dbg !68
  %440 = insertelement <4 x i32> %439, i32 %346, i64 3, !dbg !68
  %441 = bitcast <4 x i32> %440 to <4 x float>, !dbg !68
  %442 = insertelement <4 x i32> poison, i32 %383, i64 0, !dbg !73
  %443 = insertelement <4 x i32> %442, i32 %384, i64 1, !dbg !73
  %444 = insertelement <4 x i32> %443, i32 %385, i64 2, !dbg !73
  %445 = insertelement <4 x i32> %444, i32 %386, i64 3, !dbg !73
  %446 = bitcast <4 x i32> %445 to <4 x float>, !dbg !73
  %447 = fcmp ogt <4 x float> %411, %406, !dbg !74
  %448 = fcmp uno <4 x float> %411, zeroinitializer, !dbg !78
  %449 = or <4 x i1> %447, %448, !dbg !79
  %.v = select <4 x i1> %449, <4 x i32> %410, <4 x i32> %405, !dbg !80
  %450 = bitcast <4 x i32> %.v to <4 x float>, !dbg !80
  %451 = fcmp olt <4 x float> %450, %416, !dbg !81
  %452 = fcmp uno <4 x float> %416, zeroinitializer, !dbg !83
  %453 = or <4 x i1> %451, %452, !dbg !84
  %.v32 = select <4 x i1> %453, <4 x i32> %415, <4 x i32> %.v, !dbg !85
  %454 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !85
  %455 = fcmp olt <4 x float> %454, %421, !dbg !86
  %456 = fcmp uno <4 x float> %421, zeroinitializer, !dbg !88
  %457 = or <4 x i1> %455, %456, !dbg !89
  %.v33 = select <4 x i1> %457, <4 x i32> %420, <4 x i32> %.v32, !dbg !90
  %458 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !90
  %459 = fcmp olt <4 x float> %458, %426, !dbg !91
  %460 = fcmp uno <4 x float> %426, zeroinitializer, !dbg !93
  %461 = or <4 x i1> %459, %460, !dbg !94
  %.v34 = select <4 x i1> %461, <4 x i32> %425, <4 x i32> %.v33, !dbg !95
  %462 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !95
  %463 = fcmp olt <4 x float> %462, %431, !dbg !96
  %464 = fcmp uno <4 x float> %431, zeroinitializer, !dbg !98
  %465 = or <4 x i1> %463, %464, !dbg !99
  %.v35 = select <4 x i1> %465, <4 x i32> %430, <4 x i32> %.v34, !dbg !100
  %466 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !100
  %467 = fcmp olt <4 x float> %466, %436, !dbg !101
  %468 = fcmp uno <4 x float> %436, zeroinitializer, !dbg !103
  %469 = or <4 x i1> %467, %468, !dbg !104
  %.v36 = select <4 x i1> %469, <4 x i32> %435, <4 x i32> %.v35, !dbg !105
  %470 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !105
  %471 = fcmp olt <4 x float> %470, %441, !dbg !106
  %472 = fcmp uno <4 x float> %441, zeroinitializer, !dbg !108
  %473 = or <4 x i1> %471, %472, !dbg !109
  %.v37 = select <4 x i1> %473, <4 x i32> %440, <4 x i32> %.v36, !dbg !110
  %474 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !110
  %475 = fcmp olt <4 x float> %474, %446, !dbg !111
  %476 = bitcast i32 %383 to float, !dbg !113
  %477 = fcmp uno float %476, 0.000000e+00, !dbg !113
  %478 = bitcast i32 %384 to float, !dbg !113
  %479 = fcmp uno float %478, 0.000000e+00, !dbg !113
  %480 = bitcast i32 %385 to float, !dbg !113
  %481 = fcmp uno float %480, 0.000000e+00, !dbg !113
  %482 = bitcast i32 %386 to float, !dbg !113
  %483 = fcmp uno float %482, 0.000000e+00, !dbg !113
  %484 = extractelement <4 x i1> %475, i64 0, !dbg !114
  %485 = or i1 %484, %477, !dbg !114
  %486 = extractelement <4 x i1> %475, i64 1, !dbg !114
  %487 = or i1 %486, %479, !dbg !114
  %488 = extractelement <4 x i1> %475, i64 2, !dbg !114
  %489 = or i1 %488, %481, !dbg !114
  %490 = extractelement <4 x i1> %475, i64 3, !dbg !114
  %491 = or i1 %490, %483, !dbg !114
  %492 = zext <4 x i1> %447 to <4 x i8>, !dbg !115
  %493 = select <4 x i1> %451, <4 x i8> splat (i8 2), <4 x i8> %492, !dbg !116
  %494 = select <4 x i1> %455, <4 x i8> splat (i8 3), <4 x i8> %493, !dbg !117
  %495 = select <4 x i1> %459, <4 x i8> splat (i8 4), <4 x i8> %494, !dbg !118
  %496 = select <4 x i1> %463, <4 x i8> splat (i8 5), <4 x i8> %495, !dbg !119
  %497 = select <4 x i1> %467, <4 x i8> splat (i8 6), <4 x i8> %496, !dbg !120
  %498 = select <4 x i1> %471, <4 x i8> splat (i8 7), <4 x i8> %497, !dbg !121
  %499 = select <4 x i1> %475, <4 x i8> splat (i8 8), <4 x i8> %498, !dbg !122
  %500 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !33
  %501 = insertelement <4 x i32> %500, i32 %69, i64 1, !dbg !33
  %502 = insertelement <4 x i32> %501, i32 %70, i64 2, !dbg !33
  %503 = insertelement <4 x i32> %502, i32 %71, i64 3, !dbg !33
  %504 = bitcast <4 x i32> %503 to <4 x float>, !dbg !33
  %505 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !38
  %506 = insertelement <4 x i32> %505, i32 %109, i64 1, !dbg !38
  %507 = insertelement <4 x i32> %506, i32 %110, i64 2, !dbg !38
  %508 = insertelement <4 x i32> %507, i32 %111, i64 3, !dbg !38
  %509 = bitcast <4 x i32> %508 to <4 x float>, !dbg !38
  %510 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !43
  %511 = insertelement <4 x i32> %510, i32 %149, i64 1, !dbg !43
  %512 = insertelement <4 x i32> %511, i32 %150, i64 2, !dbg !43
  %513 = insertelement <4 x i32> %512, i32 %151, i64 3, !dbg !43
  %514 = bitcast <4 x i32> %513 to <4 x float>, !dbg !43
  %515 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !48
  %516 = insertelement <4 x i32> %515, i32 %189, i64 1, !dbg !48
  %517 = insertelement <4 x i32> %516, i32 %190, i64 2, !dbg !48
  %518 = insertelement <4 x i32> %517, i32 %191, i64 3, !dbg !48
  %519 = bitcast <4 x i32> %518 to <4 x float>, !dbg !48
  %520 = insertelement <4 x i32> poison, i32 %228, i64 0, !dbg !53
  %521 = insertelement <4 x i32> %520, i32 %229, i64 1, !dbg !53
  %522 = insertelement <4 x i32> %521, i32 %230, i64 2, !dbg !53
  %523 = insertelement <4 x i32> %522, i32 %231, i64 3, !dbg !53
  %524 = bitcast <4 x i32> %523 to <4 x float>, !dbg !53
  %525 = insertelement <4 x i32> poison, i32 %268, i64 0, !dbg !58
  %526 = insertelement <4 x i32> %525, i32 %269, i64 1, !dbg !58
  %527 = insertelement <4 x i32> %526, i32 %270, i64 2, !dbg !58
  %528 = insertelement <4 x i32> %527, i32 %271, i64 3, !dbg !58
  %529 = bitcast <4 x i32> %528 to <4 x float>, !dbg !58
  %530 = insertelement <4 x i32> poison, i32 %308, i64 0, !dbg !63
  %531 = insertelement <4 x i32> %530, i32 %309, i64 1, !dbg !63
  %532 = insertelement <4 x i32> %531, i32 %310, i64 2, !dbg !63
  %533 = insertelement <4 x i32> %532, i32 %311, i64 3, !dbg !63
  %534 = bitcast <4 x i32> %533 to <4 x float>, !dbg !63
  %535 = insertelement <4 x i32> poison, i32 %348, i64 0, !dbg !68
  %536 = insertelement <4 x i32> %535, i32 %349, i64 1, !dbg !68
  %537 = insertelement <4 x i32> %536, i32 %350, i64 2, !dbg !68
  %538 = insertelement <4 x i32> %537, i32 %351, i64 3, !dbg !68
  %539 = bitcast <4 x i32> %538 to <4 x float>, !dbg !68
  %540 = insertelement <4 x i32> poison, i32 %388, i64 0, !dbg !73
  %541 = insertelement <4 x i32> %540, i32 %389, i64 1, !dbg !73
  %542 = insertelement <4 x i32> %541, i32 %390, i64 2, !dbg !73
  %543 = insertelement <4 x i32> %542, i32 %391, i64 3, !dbg !73
  %544 = bitcast <4 x i32> %543 to <4 x float>, !dbg !73
  %545 = fcmp ogt <4 x float> %509, %504, !dbg !74
  %546 = fcmp uno <4 x float> %509, zeroinitializer, !dbg !78
  %547 = or <4 x i1> %545, %546, !dbg !79
  %.v38 = select <4 x i1> %547, <4 x i32> %508, <4 x i32> %503, !dbg !80
  %548 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !80
  %549 = fcmp olt <4 x float> %548, %514, !dbg !81
  %550 = fcmp uno <4 x float> %514, zeroinitializer, !dbg !83
  %551 = or <4 x i1> %549, %550, !dbg !84
  %.v39 = select <4 x i1> %551, <4 x i32> %513, <4 x i32> %.v38, !dbg !85
  %552 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !85
  %553 = fcmp olt <4 x float> %552, %519, !dbg !86
  %554 = fcmp uno <4 x float> %519, zeroinitializer, !dbg !88
  %555 = or <4 x i1> %553, %554, !dbg !89
  %.v40 = select <4 x i1> %555, <4 x i32> %518, <4 x i32> %.v39, !dbg !90
  %556 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !90
  %557 = fcmp olt <4 x float> %556, %524, !dbg !91
  %558 = fcmp uno <4 x float> %524, zeroinitializer, !dbg !93
  %559 = or <4 x i1> %557, %558, !dbg !94
  %.v41 = select <4 x i1> %559, <4 x i32> %523, <4 x i32> %.v40, !dbg !95
  %560 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !95
  %561 = fcmp olt <4 x float> %560, %529, !dbg !96
  %562 = fcmp uno <4 x float> %529, zeroinitializer, !dbg !98
  %563 = or <4 x i1> %561, %562, !dbg !99
  %.v42 = select <4 x i1> %563, <4 x i32> %528, <4 x i32> %.v41, !dbg !100
  %564 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !100
  %565 = fcmp olt <4 x float> %564, %534, !dbg !101
  %566 = fcmp uno <4 x float> %534, zeroinitializer, !dbg !103
  %567 = or <4 x i1> %565, %566, !dbg !104
  %.v43 = select <4 x i1> %567, <4 x i32> %533, <4 x i32> %.v42, !dbg !105
  %568 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !105
  %569 = fcmp olt <4 x float> %568, %539, !dbg !106
  %570 = fcmp uno <4 x float> %539, zeroinitializer, !dbg !108
  %571 = or <4 x i1> %569, %570, !dbg !109
  %.v44 = select <4 x i1> %571, <4 x i32> %538, <4 x i32> %.v43, !dbg !110
  %572 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !110
  %573 = fcmp olt <4 x float> %572, %544, !dbg !111
  %574 = bitcast i32 %388 to float, !dbg !113
  %575 = fcmp uno float %574, 0.000000e+00, !dbg !113
  %576 = bitcast i32 %389 to float, !dbg !113
  %577 = fcmp uno float %576, 0.000000e+00, !dbg !113
  %578 = bitcast i32 %390 to float, !dbg !113
  %579 = fcmp uno float %578, 0.000000e+00, !dbg !113
  %580 = bitcast i32 %391 to float, !dbg !113
  %581 = fcmp uno float %580, 0.000000e+00, !dbg !113
  %582 = extractelement <4 x i1> %573, i64 0, !dbg !114
  %583 = or i1 %582, %575, !dbg !114
  %584 = extractelement <4 x i1> %573, i64 1, !dbg !114
  %585 = or i1 %584, %577, !dbg !114
  %586 = extractelement <4 x i1> %573, i64 2, !dbg !114
  %587 = or i1 %586, %579, !dbg !114
  %588 = extractelement <4 x i1> %573, i64 3, !dbg !114
  %589 = or i1 %588, %581, !dbg !114
  %590 = zext <4 x i1> %545 to <4 x i8>, !dbg !115
  %591 = select <4 x i1> %549, <4 x i8> splat (i8 2), <4 x i8> %590, !dbg !116
  %592 = select <4 x i1> %553, <4 x i8> splat (i8 3), <4 x i8> %591, !dbg !117
  %593 = select <4 x i1> %557, <4 x i8> splat (i8 4), <4 x i8> %592, !dbg !118
  %594 = select <4 x i1> %561, <4 x i8> splat (i8 5), <4 x i8> %593, !dbg !119
  %595 = select <4 x i1> %565, <4 x i8> splat (i8 6), <4 x i8> %594, !dbg !120
  %596 = select <4 x i1> %569, <4 x i8> splat (i8 7), <4 x i8> %595, !dbg !121
  %597 = select <4 x i1> %573, <4 x i8> splat (i8 8), <4 x i8> %596, !dbg !122
  %598 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !33
  %599 = insertelement <4 x i32> %598, i32 %74, i64 1, !dbg !33
  %600 = insertelement <4 x i32> %599, i32 %75, i64 2, !dbg !33
  %601 = insertelement <4 x i32> %600, i32 %76, i64 3, !dbg !33
  %602 = bitcast <4 x i32> %601 to <4 x float>, !dbg !33
  %603 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !38
  %604 = insertelement <4 x i32> %603, i32 %114, i64 1, !dbg !38
  %605 = insertelement <4 x i32> %604, i32 %115, i64 2, !dbg !38
  %606 = insertelement <4 x i32> %605, i32 %116, i64 3, !dbg !38
  %607 = bitcast <4 x i32> %606 to <4 x float>, !dbg !38
  %608 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !43
  %609 = insertelement <4 x i32> %608, i32 %154, i64 1, !dbg !43
  %610 = insertelement <4 x i32> %609, i32 %155, i64 2, !dbg !43
  %611 = insertelement <4 x i32> %610, i32 %156, i64 3, !dbg !43
  %612 = bitcast <4 x i32> %611 to <4 x float>, !dbg !43
  %613 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !48
  %614 = insertelement <4 x i32> %613, i32 %194, i64 1, !dbg !48
  %615 = insertelement <4 x i32> %614, i32 %195, i64 2, !dbg !48
  %616 = insertelement <4 x i32> %615, i32 %196, i64 3, !dbg !48
  %617 = bitcast <4 x i32> %616 to <4 x float>, !dbg !48
  %618 = insertelement <4 x i32> poison, i32 %233, i64 0, !dbg !53
  %619 = insertelement <4 x i32> %618, i32 %234, i64 1, !dbg !53
  %620 = insertelement <4 x i32> %619, i32 %235, i64 2, !dbg !53
  %621 = insertelement <4 x i32> %620, i32 %236, i64 3, !dbg !53
  %622 = bitcast <4 x i32> %621 to <4 x float>, !dbg !53
  %623 = insertelement <4 x i32> poison, i32 %273, i64 0, !dbg !58
  %624 = insertelement <4 x i32> %623, i32 %274, i64 1, !dbg !58
  %625 = insertelement <4 x i32> %624, i32 %275, i64 2, !dbg !58
  %626 = insertelement <4 x i32> %625, i32 %276, i64 3, !dbg !58
  %627 = bitcast <4 x i32> %626 to <4 x float>, !dbg !58
  %628 = insertelement <4 x i32> poison, i32 %313, i64 0, !dbg !63
  %629 = insertelement <4 x i32> %628, i32 %314, i64 1, !dbg !63
  %630 = insertelement <4 x i32> %629, i32 %315, i64 2, !dbg !63
  %631 = insertelement <4 x i32> %630, i32 %316, i64 3, !dbg !63
  %632 = bitcast <4 x i32> %631 to <4 x float>, !dbg !63
  %633 = insertelement <4 x i32> poison, i32 %353, i64 0, !dbg !68
  %634 = insertelement <4 x i32> %633, i32 %354, i64 1, !dbg !68
  %635 = insertelement <4 x i32> %634, i32 %355, i64 2, !dbg !68
  %636 = insertelement <4 x i32> %635, i32 %356, i64 3, !dbg !68
  %637 = bitcast <4 x i32> %636 to <4 x float>, !dbg !68
  %638 = insertelement <4 x i32> poison, i32 %393, i64 0, !dbg !73
  %639 = insertelement <4 x i32> %638, i32 %394, i64 1, !dbg !73
  %640 = insertelement <4 x i32> %639, i32 %395, i64 2, !dbg !73
  %641 = insertelement <4 x i32> %640, i32 %396, i64 3, !dbg !73
  %642 = bitcast <4 x i32> %641 to <4 x float>, !dbg !73
  %643 = fcmp ogt <4 x float> %607, %602, !dbg !74
  %644 = fcmp uno <4 x float> %607, zeroinitializer, !dbg !78
  %645 = or <4 x i1> %643, %644, !dbg !79
  %.v45 = select <4 x i1> %645, <4 x i32> %606, <4 x i32> %601, !dbg !80
  %646 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !80
  %647 = fcmp olt <4 x float> %646, %612, !dbg !81
  %648 = fcmp uno <4 x float> %612, zeroinitializer, !dbg !83
  %649 = or <4 x i1> %647, %648, !dbg !84
  %.v46 = select <4 x i1> %649, <4 x i32> %611, <4 x i32> %.v45, !dbg !85
  %650 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !85
  %651 = fcmp olt <4 x float> %650, %617, !dbg !86
  %652 = fcmp uno <4 x float> %617, zeroinitializer, !dbg !88
  %653 = or <4 x i1> %651, %652, !dbg !89
  %.v47 = select <4 x i1> %653, <4 x i32> %616, <4 x i32> %.v46, !dbg !90
  %654 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !90
  %655 = fcmp olt <4 x float> %654, %622, !dbg !91
  %656 = fcmp uno <4 x float> %622, zeroinitializer, !dbg !93
  %657 = or <4 x i1> %655, %656, !dbg !94
  %.v48 = select <4 x i1> %657, <4 x i32> %621, <4 x i32> %.v47, !dbg !95
  %658 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !95
  %659 = fcmp olt <4 x float> %658, %627, !dbg !96
  %660 = fcmp uno <4 x float> %627, zeroinitializer, !dbg !98
  %661 = or <4 x i1> %659, %660, !dbg !99
  %.v49 = select <4 x i1> %661, <4 x i32> %626, <4 x i32> %.v48, !dbg !100
  %662 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !100
  %663 = fcmp olt <4 x float> %662, %632, !dbg !101
  %664 = fcmp uno <4 x float> %632, zeroinitializer, !dbg !103
  %665 = or <4 x i1> %663, %664, !dbg !104
  %.v50 = select <4 x i1> %665, <4 x i32> %631, <4 x i32> %.v49, !dbg !105
  %666 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !105
  %667 = fcmp olt <4 x float> %666, %637, !dbg !106
  %668 = fcmp uno <4 x float> %637, zeroinitializer, !dbg !108
  %669 = or <4 x i1> %667, %668, !dbg !109
  %.v51 = select <4 x i1> %669, <4 x i32> %636, <4 x i32> %.v50, !dbg !110
  %670 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !110
  %671 = fcmp olt <4 x float> %670, %642, !dbg !111
  %672 = bitcast i32 %393 to float, !dbg !113
  %673 = fcmp uno float %672, 0.000000e+00, !dbg !113
  %674 = bitcast i32 %394 to float, !dbg !113
  %675 = fcmp uno float %674, 0.000000e+00, !dbg !113
  %676 = bitcast i32 %395 to float, !dbg !113
  %677 = fcmp uno float %676, 0.000000e+00, !dbg !113
  %678 = bitcast i32 %396 to float, !dbg !113
  %679 = fcmp uno float %678, 0.000000e+00, !dbg !113
  %680 = extractelement <4 x i1> %671, i64 0, !dbg !114
  %681 = or i1 %680, %673, !dbg !114
  %682 = extractelement <4 x i1> %671, i64 1, !dbg !114
  %683 = or i1 %682, %675, !dbg !114
  %684 = extractelement <4 x i1> %671, i64 2, !dbg !114
  %685 = or i1 %684, %677, !dbg !114
  %686 = extractelement <4 x i1> %671, i64 3, !dbg !114
  %687 = or i1 %686, %679, !dbg !114
  %688 = zext <4 x i1> %643 to <4 x i8>, !dbg !115
  %689 = select <4 x i1> %647, <4 x i8> splat (i8 2), <4 x i8> %688, !dbg !116
  %690 = select <4 x i1> %651, <4 x i8> splat (i8 3), <4 x i8> %689, !dbg !117
  %691 = select <4 x i1> %655, <4 x i8> splat (i8 4), <4 x i8> %690, !dbg !118
  %692 = select <4 x i1> %659, <4 x i8> splat (i8 5), <4 x i8> %691, !dbg !119
  %693 = select <4 x i1> %663, <4 x i8> splat (i8 6), <4 x i8> %692, !dbg !120
  %694 = select <4 x i1> %667, <4 x i8> splat (i8 7), <4 x i8> %693, !dbg !121
  %695 = select <4 x i1> %671, <4 x i8> splat (i8 8), <4 x i8> %694, !dbg !122
  %696 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !33
  %697 = insertelement <4 x i32> %696, i32 %79, i64 1, !dbg !33
  %698 = insertelement <4 x i32> %697, i32 %80, i64 2, !dbg !33
  %699 = insertelement <4 x i32> %698, i32 %81, i64 3, !dbg !33
  %700 = bitcast <4 x i32> %699 to <4 x float>, !dbg !33
  %701 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !38
  %702 = insertelement <4 x i32> %701, i32 %119, i64 1, !dbg !38
  %703 = insertelement <4 x i32> %702, i32 %120, i64 2, !dbg !38
  %704 = insertelement <4 x i32> %703, i32 %121, i64 3, !dbg !38
  %705 = bitcast <4 x i32> %704 to <4 x float>, !dbg !38
  %706 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !43
  %707 = insertelement <4 x i32> %706, i32 %159, i64 1, !dbg !43
  %708 = insertelement <4 x i32> %707, i32 %160, i64 2, !dbg !43
  %709 = insertelement <4 x i32> %708, i32 %161, i64 3, !dbg !43
  %710 = bitcast <4 x i32> %709 to <4 x float>, !dbg !43
  %711 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !48
  %712 = insertelement <4 x i32> %711, i32 %199, i64 1, !dbg !48
  %713 = insertelement <4 x i32> %712, i32 %200, i64 2, !dbg !48
  %714 = insertelement <4 x i32> %713, i32 %201, i64 3, !dbg !48
  %715 = bitcast <4 x i32> %714 to <4 x float>, !dbg !48
  %716 = insertelement <4 x i32> poison, i32 %238, i64 0, !dbg !53
  %717 = insertelement <4 x i32> %716, i32 %239, i64 1, !dbg !53
  %718 = insertelement <4 x i32> %717, i32 %240, i64 2, !dbg !53
  %719 = insertelement <4 x i32> %718, i32 %241, i64 3, !dbg !53
  %720 = bitcast <4 x i32> %719 to <4 x float>, !dbg !53
  %721 = insertelement <4 x i32> poison, i32 %278, i64 0, !dbg !58
  %722 = insertelement <4 x i32> %721, i32 %279, i64 1, !dbg !58
  %723 = insertelement <4 x i32> %722, i32 %280, i64 2, !dbg !58
  %724 = insertelement <4 x i32> %723, i32 %281, i64 3, !dbg !58
  %725 = bitcast <4 x i32> %724 to <4 x float>, !dbg !58
  %726 = insertelement <4 x i32> poison, i32 %318, i64 0, !dbg !63
  %727 = insertelement <4 x i32> %726, i32 %319, i64 1, !dbg !63
  %728 = insertelement <4 x i32> %727, i32 %320, i64 2, !dbg !63
  %729 = insertelement <4 x i32> %728, i32 %321, i64 3, !dbg !63
  %730 = bitcast <4 x i32> %729 to <4 x float>, !dbg !63
  %731 = insertelement <4 x i32> poison, i32 %358, i64 0, !dbg !68
  %732 = insertelement <4 x i32> %731, i32 %359, i64 1, !dbg !68
  %733 = insertelement <4 x i32> %732, i32 %360, i64 2, !dbg !68
  %734 = insertelement <4 x i32> %733, i32 %361, i64 3, !dbg !68
  %735 = bitcast <4 x i32> %734 to <4 x float>, !dbg !68
  %736 = insertelement <4 x i32> poison, i32 %398, i64 0, !dbg !73
  %737 = insertelement <4 x i32> %736, i32 %399, i64 1, !dbg !73
  %738 = insertelement <4 x i32> %737, i32 %400, i64 2, !dbg !73
  %739 = insertelement <4 x i32> %738, i32 %401, i64 3, !dbg !73
  %740 = bitcast <4 x i32> %739 to <4 x float>, !dbg !73
  %741 = fcmp ogt <4 x float> %705, %700, !dbg !74
  %742 = fcmp uno <4 x float> %705, zeroinitializer, !dbg !78
  %743 = or <4 x i1> %741, %742, !dbg !79
  %.v52 = select <4 x i1> %743, <4 x i32> %704, <4 x i32> %699, !dbg !80
  %744 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !80
  %745 = fcmp olt <4 x float> %744, %710, !dbg !81
  %746 = fcmp uno <4 x float> %710, zeroinitializer, !dbg !83
  %747 = or <4 x i1> %745, %746, !dbg !84
  %.v53 = select <4 x i1> %747, <4 x i32> %709, <4 x i32> %.v52, !dbg !85
  %748 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !85
  %749 = fcmp olt <4 x float> %748, %715, !dbg !86
  %750 = fcmp uno <4 x float> %715, zeroinitializer, !dbg !88
  %751 = or <4 x i1> %749, %750, !dbg !89
  %.v54 = select <4 x i1> %751, <4 x i32> %714, <4 x i32> %.v53, !dbg !90
  %752 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !90
  %753 = fcmp olt <4 x float> %752, %720, !dbg !91
  %754 = fcmp uno <4 x float> %720, zeroinitializer, !dbg !93
  %755 = or <4 x i1> %753, %754, !dbg !94
  %.v55 = select <4 x i1> %755, <4 x i32> %719, <4 x i32> %.v54, !dbg !95
  %756 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !95
  %757 = fcmp olt <4 x float> %756, %725, !dbg !96
  %758 = fcmp uno <4 x float> %725, zeroinitializer, !dbg !98
  %759 = or <4 x i1> %757, %758, !dbg !99
  %.v56 = select <4 x i1> %759, <4 x i32> %724, <4 x i32> %.v55, !dbg !100
  %760 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !100
  %761 = fcmp olt <4 x float> %760, %730, !dbg !101
  %762 = fcmp uno <4 x float> %730, zeroinitializer, !dbg !103
  %763 = or <4 x i1> %761, %762, !dbg !104
  %.v57 = select <4 x i1> %763, <4 x i32> %729, <4 x i32> %.v56, !dbg !105
  %764 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !105
  %765 = fcmp olt <4 x float> %764, %735, !dbg !106
  %766 = fcmp uno <4 x float> %735, zeroinitializer, !dbg !108
  %767 = or <4 x i1> %765, %766, !dbg !109
  %.v58 = select <4 x i1> %767, <4 x i32> %734, <4 x i32> %.v57, !dbg !110
  %768 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !110
  %769 = fcmp olt <4 x float> %768, %740, !dbg !111
  %770 = bitcast i32 %398 to float, !dbg !113
  %771 = fcmp uno float %770, 0.000000e+00, !dbg !113
  %772 = bitcast i32 %399 to float, !dbg !113
  %773 = fcmp uno float %772, 0.000000e+00, !dbg !113
  %774 = bitcast i32 %400 to float, !dbg !113
  %775 = fcmp uno float %774, 0.000000e+00, !dbg !113
  %776 = bitcast i32 %401 to float, !dbg !113
  %777 = fcmp uno float %776, 0.000000e+00, !dbg !113
  %778 = extractelement <4 x i1> %769, i64 0, !dbg !114
  %779 = or i1 %778, %771, !dbg !114
  %780 = extractelement <4 x i1> %769, i64 1, !dbg !114
  %781 = or i1 %780, %773, !dbg !114
  %782 = extractelement <4 x i1> %769, i64 2, !dbg !114
  %783 = or i1 %782, %775, !dbg !114
  %784 = extractelement <4 x i1> %769, i64 3, !dbg !114
  %785 = or i1 %784, %777, !dbg !114
  %786 = zext <4 x i1> %741 to <4 x i8>, !dbg !115
  %787 = select <4 x i1> %745, <4 x i8> splat (i8 2), <4 x i8> %786, !dbg !116
  %788 = select <4 x i1> %749, <4 x i8> splat (i8 3), <4 x i8> %787, !dbg !117
  %789 = select <4 x i1> %753, <4 x i8> splat (i8 4), <4 x i8> %788, !dbg !118
  %790 = select <4 x i1> %757, <4 x i8> splat (i8 5), <4 x i8> %789, !dbg !119
  %791 = select <4 x i1> %761, <4 x i8> splat (i8 6), <4 x i8> %790, !dbg !120
  %792 = select <4 x i1> %765, <4 x i8> splat (i8 7), <4 x i8> %791, !dbg !121
  %793 = select <4 x i1> %769, <4 x i8> splat (i8 8), <4 x i8> %792, !dbg !122
  %794 = shl i32 %19, 6, !dbg !123
  %795 = shl i32 %20, 6, !dbg !123
  %796 = shl i32 %21, 6, !dbg !123
  %797 = shl i32 %22, 6, !dbg !123
  %798 = mul i32 %32, 81920, !dbg !124
  %799 = add i32 %798, %.decomposed60, !dbg !125
  %800 = add i32 %799, %794, !dbg !126
  %801 = add i32 %799, %795, !dbg !126
  %802 = add i32 %799, %796, !dbg !126
  %803 = add i32 %799, %797, !dbg !126
  %804 = sext i32 %800 to i64, !dbg !127
  %805 = getelementptr float, ptr addrspace(1) %1, i64 %804, !dbg !127
  %806 = sext i32 %801 to i64, !dbg !127
  %807 = getelementptr float, ptr addrspace(1) %1, i64 %806, !dbg !127
  %808 = sext i32 %802 to i64, !dbg !127
  %809 = getelementptr float, ptr addrspace(1) %1, i64 %808, !dbg !127
  %810 = sext i32 %803 to i64, !dbg !127
  %811 = getelementptr float, ptr addrspace(1) %1, i64 %810, !dbg !127
  %812 = and i32 %10, 1020, !dbg !128
  %813 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !128
  %814 = extractelement <4 x i32> %.v37, i64 0, !dbg !128
  %815 = select i1 %485, i32 %383, i32 %814, !dbg !129
  %816 = insertelement <1 x i32> poison, i32 %815, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %813, <1 x i32> %816, i1 true) #2, !dbg !128
  %817 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 1040, !dbg !128
  %818 = extractelement <4 x i32> %.v37, i64 1, !dbg !128
  %819 = select i1 %487, i32 %384, i32 %818, !dbg !129
  %820 = insertelement <1 x i32> poison, i32 %819, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %817, <1 x i32> %820, i1 true) #2, !dbg !128
  %821 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 2080, !dbg !128
  %822 = extractelement <4 x i32> %.v37, i64 2, !dbg !128
  %823 = select i1 %489, i32 %385, i32 %822, !dbg !129
  %824 = insertelement <1 x i32> poison, i32 %823, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %821, <1 x i32> %824, i1 true) #2, !dbg !128
  %825 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 3120, !dbg !128
  %826 = extractelement <4 x i32> %.v37, i64 3, !dbg !128
  %827 = select i1 %491, i32 %386, i32 %826, !dbg !129
  %828 = insertelement <1 x i32> poison, i32 %827, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %825, <1 x i32> %828, i1 true) #2, !dbg !128
  %829 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 4160, !dbg !128
  %830 = extractelement <4 x i32> %.v44, i64 0, !dbg !128
  %831 = select i1 %583, i32 %388, i32 %830, !dbg !129
  %832 = insertelement <1 x i32> poison, i32 %831, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %829, <1 x i32> %832, i1 true) #2, !dbg !128
  %833 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 5200, !dbg !128
  %834 = extractelement <4 x i32> %.v44, i64 1, !dbg !128
  %835 = select i1 %585, i32 %389, i32 %834, !dbg !129
  %836 = insertelement <1 x i32> poison, i32 %835, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %833, <1 x i32> %836, i1 true) #2, !dbg !128
  %837 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 6240, !dbg !128
  %838 = extractelement <4 x i32> %.v44, i64 2, !dbg !128
  %839 = select i1 %587, i32 %390, i32 %838, !dbg !129
  %840 = insertelement <1 x i32> poison, i32 %839, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %840, i1 true) #2, !dbg !128
  %841 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 7280, !dbg !128
  %842 = extractelement <4 x i32> %.v44, i64 3, !dbg !128
  %843 = select i1 %589, i32 %391, i32 %842, !dbg !129
  %844 = insertelement <1 x i32> poison, i32 %843, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %841, <1 x i32> %844, i1 true) #2, !dbg !128
  %845 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 8320, !dbg !128
  %846 = extractelement <4 x i32> %.v51, i64 0, !dbg !128
  %847 = select i1 %681, i32 %393, i32 %846, !dbg !129
  %848 = insertelement <1 x i32> poison, i32 %847, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %848, i1 true) #2, !dbg !128
  %849 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 9360, !dbg !128
  %850 = extractelement <4 x i32> %.v51, i64 1, !dbg !128
  %851 = select i1 %683, i32 %394, i32 %850, !dbg !129
  %852 = insertelement <1 x i32> poison, i32 %851, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %852, i1 true) #2, !dbg !128
  %853 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 10400, !dbg !128
  %854 = extractelement <4 x i32> %.v51, i64 2, !dbg !128
  %855 = select i1 %685, i32 %395, i32 %854, !dbg !129
  %856 = insertelement <1 x i32> poison, i32 %855, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %853, <1 x i32> %856, i1 true) #2, !dbg !128
  %857 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 11440, !dbg !128
  %858 = extractelement <4 x i32> %.v51, i64 3, !dbg !128
  %859 = select i1 %687, i32 %396, i32 %858, !dbg !129
  %860 = insertelement <1 x i32> poison, i32 %859, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %857, <1 x i32> %860, i1 true) #2, !dbg !128
  %861 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 12480, !dbg !128
  %862 = extractelement <4 x i32> %.v58, i64 0, !dbg !128
  %863 = select i1 %779, i32 %398, i32 %862, !dbg !129
  %864 = insertelement <1 x i32> poison, i32 %863, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %861, <1 x i32> %864, i1 true) #2, !dbg !128
  %865 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 13520, !dbg !128
  %866 = extractelement <4 x i32> %.v58, i64 1, !dbg !128
  %867 = select i1 %781, i32 %399, i32 %866, !dbg !129
  %868 = insertelement <1 x i32> poison, i32 %867, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %865, <1 x i32> %868, i1 true) #2, !dbg !128
  %869 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 14560, !dbg !128
  %870 = extractelement <4 x i32> %.v58, i64 2, !dbg !128
  %871 = select i1 %783, i32 %400, i32 %870, !dbg !129
  %872 = insertelement <1 x i32> poison, i32 %871, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %869, <1 x i32> %872, i1 true) #2, !dbg !128
  %873 = getelementptr inbounds i8, ptr addrspace(3) %813, i32 15600, !dbg !128
  %874 = extractelement <4 x i32> %.v58, i64 3, !dbg !128
  %875 = select i1 %785, i32 %401, i32 %874, !dbg !129
  %876 = insertelement <1 x i32> poison, i32 %875, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %873, <1 x i32> %876, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %877 = lshr i32 %10, 6, !dbg !128
  %878 = and i32 %877, 12, !dbg !128
  %879 = getelementptr float, ptr addrspace(3) @global_smem, i32 %878, !dbg !128
  %880 = getelementptr float, ptr addrspace(3) %879, i32 %812, !dbg !128
  %881 = or disjoint i32 %812, 1024, !dbg !128
  %882 = lshr i32 %881, 6, !dbg !128
  %883 = and i32 %882, 28, !dbg !128
  %884 = getelementptr float, ptr addrspace(3) @global_smem, i32 %883, !dbg !128
  %885 = getelementptr float, ptr addrspace(3) %884, i32 %881, !dbg !128
  %886 = load <4 x i32>, ptr addrspace(3) %885, align 16, !dbg !128
  %887 = or disjoint i32 %812, 2048, !dbg !128
  %888 = lshr i32 %887, 6, !dbg !128
  %889 = and i32 %888, 44, !dbg !128
  %890 = getelementptr float, ptr addrspace(3) @global_smem, i32 %889, !dbg !128
  %891 = getelementptr float, ptr addrspace(3) %890, i32 %887, !dbg !128
  %892 = load <4 x i32>, ptr addrspace(3) %891, align 16, !dbg !128
  %893 = or disjoint i32 %812, 3072, !dbg !128
  %894 = lshr i32 %893, 6, !dbg !128
  %895 = and i32 %894, 60, !dbg !128
  %896 = getelementptr float, ptr addrspace(3) @global_smem, i32 %895, !dbg !128
  %897 = getelementptr float, ptr addrspace(3) %896, i32 %893, !dbg !128
  %898 = load <4 x i32>, ptr addrspace(3) %897, align 16, !dbg !128
  %.extract = load i32, ptr addrspace(3) %880, align 16, !dbg !128
  %899 = getelementptr inbounds i8, ptr addrspace(3) %880, i32 4, !dbg !128
  %.extract17 = load i32, ptr addrspace(3) %899, align 4, !dbg !128
  %900 = getelementptr inbounds i8, ptr addrspace(3) %880, i32 8, !dbg !128
  %.extract18 = load i32, ptr addrspace(3) %900, align 8, !dbg !128
  %901 = getelementptr inbounds i8, ptr addrspace(3) %880, i32 12, !dbg !128
  %.extract19 = load i32, ptr addrspace(3) %901, align 4, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %805, i1 %58) #2, !dbg !128
  %.extract20 = extractelement <4 x i32> %886, i64 0, !dbg !128
  %.extract21 = extractelement <4 x i32> %886, i64 1, !dbg !128
  %.extract22 = extractelement <4 x i32> %886, i64 2, !dbg !128
  %.extract23 = extractelement <4 x i32> %886, i64 3, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract20, i32 %.extract21, i32 %.extract22, i32 %.extract23, ptr addrspace(1) %807, i1 %59) #2, !dbg !128
  %.extract24 = extractelement <4 x i32> %892, i64 0, !dbg !128
  %.extract25 = extractelement <4 x i32> %892, i64 1, !dbg !128
  %.extract26 = extractelement <4 x i32> %892, i64 2, !dbg !128
  %.extract27 = extractelement <4 x i32> %892, i64 3, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract24, i32 %.extract25, i32 %.extract26, i32 %.extract27, ptr addrspace(1) %809, i1 %60) #2, !dbg !128
  %.extract28 = extractelement <4 x i32> %898, i64 0, !dbg !128
  %.extract29 = extractelement <4 x i32> %898, i64 1, !dbg !128
  %.extract30 = extractelement <4 x i32> %898, i64 2, !dbg !128
  %.extract31 = extractelement <4 x i32> %898, i64 3, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract28, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %811, i1 %61) #2, !dbg !128
  %902 = mul i32 %12, 768, !dbg !130
  %903 = add i32 %902, %17, !dbg !131
  %904 = sext i32 %903 to i64, !dbg !132
  %905 = getelementptr i8, ptr addrspace(1) %2, i64 %904, !dbg !132
  %906 = bitcast <4 x i8> %499 to i32, !dbg !133
  %907 = bitcast <4 x i8> %597 to i32, !dbg !133
  %908 = bitcast <4 x i8> %695 to i32, !dbg !133
  %909 = bitcast <4 x i8> %793 to i32, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %906, i32 %907, i32 %908, i32 %909, ptr addrspace(1) %905, i1 %57) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cexazwoq3mhmmqbeypxt6o2janrpvpql7ovmftan6v6soeqauarp.py", directory: "inductor_cache/ex")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_42, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_42", linkageName: "triton_poi_fused_max_pool2d_with_indices_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 26, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 51, scope: !7)
!27 = !DILocation(line: 34, column: 63, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 45, scope: !7)
!30 = !DILocation(line: 34, column: 56, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 76, scope: !7)
!33 = !DILocation(line: 34, column: 68, scope: !7)
!34 = !DILocation(line: 35, column: 41, scope: !7)
!35 = !DILocation(line: 35, column: 51, scope: !7)
!36 = !DILocation(line: 35, column: 62, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 74, scope: !7)
!39 = !DILocation(line: 36, column: 42, scope: !7)
!40 = !DILocation(line: 36, column: 52, scope: !7)
!41 = !DILocation(line: 36, column: 63, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 75, scope: !7)
!44 = !DILocation(line: 37, column: 43, scope: !7)
!45 = !DILocation(line: 37, column: 53, scope: !7)
!46 = !DILocation(line: 37, column: 64, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 76, scope: !7)
!49 = !DILocation(line: 38, column: 43, scope: !7)
!50 = !DILocation(line: 38, column: 53, scope: !7)
!51 = !DILocation(line: 38, column: 64, scope: !7)
!52 = !DILocation(line: 38, column: 30, scope: !7)
!53 = !DILocation(line: 38, column: 76, scope: !7)
!54 = !DILocation(line: 39, column: 43, scope: !7)
!55 = !DILocation(line: 39, column: 53, scope: !7)
!56 = !DILocation(line: 39, column: 64, scope: !7)
!57 = !DILocation(line: 39, column: 30, scope: !7)
!58 = !DILocation(line: 39, column: 76, scope: !7)
!59 = !DILocation(line: 40, column: 44, scope: !7)
!60 = !DILocation(line: 40, column: 54, scope: !7)
!61 = !DILocation(line: 40, column: 65, scope: !7)
!62 = !DILocation(line: 40, column: 31, scope: !7)
!63 = !DILocation(line: 40, column: 77, scope: !7)
!64 = !DILocation(line: 41, column: 44, scope: !7)
!65 = !DILocation(line: 41, column: 54, scope: !7)
!66 = !DILocation(line: 41, column: 65, scope: !7)
!67 = !DILocation(line: 41, column: 31, scope: !7)
!68 = !DILocation(line: 41, column: 77, scope: !7)
!69 = !DILocation(line: 42, column: 44, scope: !7)
!70 = !DILocation(line: 42, column: 54, scope: !7)
!71 = !DILocation(line: 42, column: 65, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 77, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 44, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 45, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 46, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 47, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 48, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 49, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 50, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!115 = !DILocation(line: 54, column: 35, scope: !7)
!116 = !DILocation(line: 57, column: 35, scope: !7)
!117 = !DILocation(line: 60, column: 35, scope: !7)
!118 = !DILocation(line: 63, column: 35, scope: !7)
!119 = !DILocation(line: 66, column: 35, scope: !7)
!120 = !DILocation(line: 69, column: 35, scope: !7)
!121 = !DILocation(line: 72, column: 35, scope: !7)
!122 = !DILocation(line: 75, column: 35, scope: !7)
!123 = !DILocation(line: 76, column: 33, scope: !7)
!124 = !DILocation(line: 76, column: 44, scope: !7)
!125 = !DILocation(line: 76, column: 30, scope: !7)
!126 = !DILocation(line: 76, column: 38, scope: !7)
!127 = !DILocation(line: 76, column: 25, scope: !7)
!128 = !DILocation(line: 76, column: 56, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!130 = !DILocation(line: 77, column: 34, scope: !7)
!131 = !DILocation(line: 77, column: 30, scope: !7)
!132 = !DILocation(line: 77, column: 25, scope: !7)
!133 = !DILocation(line: 77, column: 46, scope: !7)
!134 = !DILocation(line: 77, column: 4, scope: !7)
