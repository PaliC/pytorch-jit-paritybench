; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_addmm_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 16, !dbg !12
  %15 = and i32 %13, 15, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 16, !dbg !14
  %18 = srem i32 %16, 4, !dbg !15
  %19 = shl i32 %16, 4, !dbg !16
  %20 = or disjoint i32 %19, 7, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %17) #1, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = sext i32 %16 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %17) #1, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = sext i32 %18 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %17) #1, !dbg !23
  %32 = bitcast i32 %31 to float, !dbg !23
  %33 = or disjoint i32 %19, 8, !dbg !24
  %34 = sext i32 %33 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %17) #1, !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #1, !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = or disjoint i32 %19, 9, !dbg !29
  %42 = sext i32 %41 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %17) #1, !dbg !31
  %45 = bitcast i32 %44 to float, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %17) #1, !dbg !33
  %48 = bitcast i32 %47 to float, !dbg !33
  %49 = or disjoint i32 %19, 10, !dbg !34
  %50 = sext i32 %49 to i64, !dbg !35
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %50, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #1, !dbg !36
  %53 = bitcast i32 %52 to float, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %17) #1, !dbg !38
  %56 = bitcast i32 %55 to float, !dbg !38
  %57 = or disjoint i32 %19, 11, !dbg !39
  %58 = sext i32 %57 to i64, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %7, i64 %58, !dbg !40
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %17) #1, !dbg !41
  %61 = bitcast i32 %60 to float, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !42
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %17) #1, !dbg !43
  %64 = bitcast i32 %63 to float, !dbg !43
  %65 = or disjoint i32 %19, 12, !dbg !44
  %66 = sext i32 %65 to i64, !dbg !45
  %67 = getelementptr float, ptr addrspace(1) %7, i64 %66, !dbg !45
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #1, !dbg !46
  %69 = bitcast i32 %68 to float, !dbg !46
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !47
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %17) #1, !dbg !48
  %72 = bitcast i32 %71 to float, !dbg !48
  %73 = or disjoint i32 %19, 13, !dbg !49
  %74 = sext i32 %73 to i64, !dbg !50
  %75 = getelementptr float, ptr addrspace(1) %7, i64 %74, !dbg !50
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %17) #1, !dbg !51
  %77 = bitcast i32 %76 to float, !dbg !51
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !52
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %17) #1, !dbg !53
  %80 = bitcast i32 %79 to float, !dbg !53
  %81 = fadd float %28, %32, !dbg !54
  %82 = fadd float %81, %24, !dbg !55
  %83 = fadd float %32, %40, !dbg !56
  %84 = fadd float %83, %37, !dbg !57
  %85 = fadd float %32, %48, !dbg !58
  %86 = fadd float %85, %45, !dbg !59
  %87 = fadd float %32, %56, !dbg !60
  %88 = fadd float %87, %53, !dbg !61
  %89 = fadd float %32, %64, !dbg !62
  %90 = fadd float %89, %61, !dbg !63
  %91 = fadd float %32, %72, !dbg !64
  %92 = fadd float %91, %69, !dbg !65
  %93 = fadd float %32, %80, !dbg !66
  %94 = fadd float %93, %77, !dbg !67
  %95 = icmp eq i32 %14, 0, !dbg !68
  %96 = bitcast float %82 to i32, !dbg !68
  %97 = and i1 %95, %17, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %26, i1 %97) #1, !dbg !68
  %98 = bitcast float %84 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %38, i1 %97) #1, !dbg !69
  %99 = bitcast float %86 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %46, i1 %97) #1, !dbg !70
  %100 = bitcast float %88 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %54, i1 %97) #1, !dbg !71
  %101 = bitcast float %90 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %62, i1 %97) #1, !dbg !72
  %102 = bitcast float %92 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %70, i1 %97) #1, !dbg !73
  %103 = bitcast float %94 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %78, i1 %97) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg2dvj57j5txzxxmatnqw5nuarklr5eyxvrjbutmecg2iwknudjm.py", directory: "inductor_cache/g2")
!4 = !{ptr @triton_poi_fused_add_addmm_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_addmm_19, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_addmm_19", linkageName: "triton_poi_fused_add_addmm_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 37, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 42, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 39, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 35, scope: !7)
!24 = !DILocation(line: 29, column: 34, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 34, scope: !7)
!28 = !DILocation(line: 30, column: 39, scope: !7)
!29 = !DILocation(line: 31, column: 34, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 42, scope: !7)
!32 = !DILocation(line: 32, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 40, scope: !7)
!34 = !DILocation(line: 33, column: 36, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 44, scope: !7)
!37 = !DILocation(line: 34, column: 35, scope: !7)
!38 = !DILocation(line: 34, column: 40, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 35, column: 31, scope: !7)
!41 = !DILocation(line: 35, column: 44, scope: !7)
!42 = !DILocation(line: 36, column: 35, scope: !7)
!43 = !DILocation(line: 36, column: 40, scope: !7)
!44 = !DILocation(line: 37, column: 36, scope: !7)
!45 = !DILocation(line: 37, column: 31, scope: !7)
!46 = !DILocation(line: 37, column: 44, scope: !7)
!47 = !DILocation(line: 38, column: 35, scope: !7)
!48 = !DILocation(line: 38, column: 40, scope: !7)
!49 = !DILocation(line: 39, column: 36, scope: !7)
!50 = !DILocation(line: 39, column: 31, scope: !7)
!51 = !DILocation(line: 39, column: 44, scope: !7)
!52 = !DILocation(line: 40, column: 35, scope: !7)
!53 = !DILocation(line: 40, column: 40, scope: !7)
!54 = !DILocation(line: 41, column: 18, scope: !7)
!55 = !DILocation(line: 42, column: 18, scope: !7)
!56 = !DILocation(line: 43, column: 18, scope: !7)
!57 = !DILocation(line: 44, column: 18, scope: !7)
!58 = !DILocation(line: 45, column: 20, scope: !7)
!59 = !DILocation(line: 46, column: 19, scope: !7)
!60 = !DILocation(line: 47, column: 20, scope: !7)
!61 = !DILocation(line: 48, column: 20, scope: !7)
!62 = !DILocation(line: 49, column: 20, scope: !7)
!63 = !DILocation(line: 50, column: 20, scope: !7)
!64 = !DILocation(line: 51, column: 20, scope: !7)
!65 = !DILocation(line: 52, column: 20, scope: !7)
!66 = !DILocation(line: 53, column: 20, scope: !7)
!67 = !DILocation(line: 54, column: 20, scope: !7)
!68 = !DILocation(line: 55, column: 39, scope: !7)
!69 = !DILocation(line: 56, column: 39, scope: !7)
!70 = !DILocation(line: 57, column: 40, scope: !7)
!71 = !DILocation(line: 58, column: 40, scope: !7)
!72 = !DILocation(line: 59, column: 40, scope: !7)
!73 = !DILocation(line: 60, column: 40, scope: !7)
!74 = !DILocation(line: 61, column: 40, scope: !7)
!75 = !DILocation(line: 61, column: 4, scope: !7)
