; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = sdiv i32 %9, 65536, !dbg !14
  %.lhs.trunc = trunc nsw i32 %10 to i16, !dbg !15
  %11 = srem i16 %.lhs.trunc, 64, !dbg !15
  %.sext = sext i16 %11 to i32, !dbg !15
  %12 = sdiv i32 %9, 1024, !dbg !16
  %13 = srem i32 %12, 64, !dbg !17
  %14 = add nsw i32 %.sext, -1, !dbg !18
  %15 = icmp sgt i16 %11, 0, !dbg !19
  %16 = add nsw i32 %13, -1, !dbg !20
  %17 = icmp sgt i32 %13, 0, !dbg !21
  %18 = and i1 %17, %15, !dbg !22
  %19 = add i32 %9, -66560, !dbg !23
  %20 = sext i32 %19 to i64, !dbg !24
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !24
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !25
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !25
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !25
  %25 = bitcast i32 %23 to float, !dbg !25
  %26 = bitcast i32 %24 to float, !dbg !25
  %27 = icmp sgt i32 %13, -1, !dbg !26
  %28 = and i1 %27, %15, !dbg !27
  %29 = add i32 %9, -65536, !dbg !28
  %30 = sext i32 %29 to i64, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !29
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !30
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !30
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !30
  %35 = bitcast i32 %33 to float, !dbg !30
  %36 = bitcast i32 %34 to float, !dbg !30
  %37 = fadd float %25, %35, !dbg !31
  %38 = fadd float %26, %36, !dbg !31
  %39 = add nsw i32 %13, 1, !dbg !32
  %40 = icmp ult i32 %39, 64, !dbg !32
  %41 = and i1 %15, %40, !dbg !33
  %42 = add i32 %9, -64512, !dbg !34
  %43 = sext i32 %42 to i64, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !35
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #1, !dbg !36
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !36
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !36
  %48 = bitcast i32 %46 to float, !dbg !36
  %49 = bitcast i32 %47 to float, !dbg !36
  %50 = fadd float %37, %48, !dbg !37
  %51 = fadd float %38, %49, !dbg !37
  %52 = icmp sgt i16 %11, -1, !dbg !38
  %53 = and i1 %17, %52, !dbg !39
  %54 = add i32 %9, -1024, !dbg !40
  %55 = sext i32 %54 to i64, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !41
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !42
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !42
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !42
  %60 = bitcast i32 %58 to float, !dbg !42
  %61 = bitcast i32 %59 to float, !dbg !42
  %62 = fadd float %50, %60, !dbg !43
  %63 = fadd float %51, %61, !dbg !43
  %64 = or i32 %13, %.sext, !dbg !44
  %65 = icmp sgt i32 %64, -1, !dbg !44
  %66 = sext i32 %9 to i64, !dbg !45
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !45
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !46
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !46
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !46
  %71 = bitcast i32 %69 to float, !dbg !46
  %72 = bitcast i32 %70 to float, !dbg !46
  %73 = fadd float %62, %71, !dbg !47
  %74 = fadd float %63, %72, !dbg !47
  %75 = and i1 %52, %40, !dbg !48
  %76 = add i32 %9, 1024, !dbg !49
  %77 = sext i32 %76 to i64, !dbg !50
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !50
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %78, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !51
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !51
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !51
  %82 = bitcast i32 %80 to float, !dbg !51
  %83 = bitcast i32 %81 to float, !dbg !51
  %84 = fadd float %73, %82, !dbg !52
  %85 = fadd float %74, %83, !dbg !52
  %86 = add nsw i32 %.sext, 1, !dbg !53
  %87 = icmp ult i32 %86, 64, !dbg !53
  %88 = and i1 %17, %87, !dbg !54
  %89 = add i32 %9, 64512, !dbg !55
  %90 = sext i32 %89 to i64, !dbg !56
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !56
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %91, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #1, !dbg !57
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !57
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !57
  %95 = bitcast i32 %93 to float, !dbg !57
  %96 = bitcast i32 %94 to float, !dbg !57
  %97 = fadd float %84, %95, !dbg !58
  %98 = fadd float %85, %96, !dbg !58
  %99 = and i1 %27, %87, !dbg !59
  %100 = add i32 %9, 65536, !dbg !60
  %101 = sext i32 %100 to i64, !dbg !61
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !61
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %102, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #1, !dbg !62
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !62
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !62
  %106 = bitcast i32 %104 to float, !dbg !62
  %107 = bitcast i32 %105 to float, !dbg !62
  %108 = fadd float %97, %106, !dbg !63
  %109 = fadd float %98, %107, !dbg !63
  %110 = or i32 %86, %39, !dbg !64
  %111 = icmp ult i32 %110, 64, !dbg !64
  %112 = add i32 %9, 66560, !dbg !65
  %113 = sext i32 %112 to i64, !dbg !66
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !66
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %114, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #1, !dbg !67
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !67
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !67
  %118 = bitcast i32 %116 to float, !dbg !67
  %119 = bitcast i32 %117 to float, !dbg !67
  %120 = fadd float %108, %118, !dbg !68
  %121 = fadd float %109, %119, !dbg !68
  %122 = icmp sgt i32 %13, 1, !dbg !69
  %123 = select i1 %122, i32 %16, i32 0, !dbg !70
  %124 = icmp sgt i16 %11, 1, !dbg !71
  %125 = select i1 %124, i32 %14, i32 0, !dbg !72
  %126 = add nsw i32 %13, 2, !dbg !73
  %127 = icmp sgt i32 %13, 61, !dbg !74
  %128 = icmp slt i32 %13, 62, !dbg !75
  %129 = add nsw i32 %.sext, 2, !dbg !76
  %130 = icmp sgt i16 %11, 61, !dbg !77
  %131 = icmp slt i16 %11, 62, !dbg !78
  %132 = insertelement <2 x i1> poison, i1 %128, i64 0, !dbg !79
  %133 = insertelement <2 x i1> %132, i1 %130, i64 1, !dbg !79
  %134 = insertelement <2 x i32> <i32 poison, i32 64>, i32 %126, i64 0, !dbg !79
  %135 = select <2 x i1> %133, <2 x i32> %134, <2 x i32> zeroinitializer, !dbg !79
  %136 = insertelement <2 x i1> poison, i1 %127, i64 0, !dbg !80
  %137 = insertelement <2 x i1> %136, i1 %131, i64 1, !dbg !80
  %138 = insertelement <2 x i32> <i32 64, i32 poison>, i32 %129, i64 1, !dbg !80
  %139 = select <2 x i1> %137, <2 x i32> %138, <2 x i32> zeroinitializer, !dbg !80
  %140 = add nsw <2 x i32> %139, %135, !dbg !81
  %141 = extractelement <2 x i32> %140, i64 0
  %reass.add = sub nsw i32 %141, %123
  %142 = extractelement <2 x i32> %140, i64 1
  %reass.mul = mul nsw i32 %reass.add, %142
  %reass.add3 = sub nsw i32 %123, %141
  %reass.mul4 = mul nsw i32 %reass.add3, %125
  %143 = add nsw i32 %reass.mul4, %reass.mul, !dbg !82
  %144 = sitofp i32 %143 to float, !dbg !83
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %144) #1, !dbg !83
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %144) #1, !dbg !83
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !84
  %148 = bitcast float %145 to i32, !dbg !85
  %149 = bitcast float %146 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %148, i32 %149, ptr addrspace(1) %147, i1 true) #1, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp7szdbsnlr5575dori7ozkt77wmqzgmc2iv6uvgnuhu5juptb2k.py", directory: "inductor_cache/p7")
!4 = !{ptr @triton_poi_fused_avg_pool2d_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_7", linkageName: "triton_poi_fused_avg_pool2d_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 29, scope: !7)
!18 = !DILocation(line: 27, column: 18, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 19, scope: !7)
!22 = !DILocation(line: 37, column: 19, scope: !7)
!23 = !DILocation(line: 38, column: 42, scope: !7)
!24 = !DILocation(line: 38, column: 31, scope: !7)
!25 = !DILocation(line: 38, column: 47, scope: !7)
!26 = !DILocation(line: 40, column: 21, scope: !7)
!27 = !DILocation(line: 43, column: 19, scope: !7)
!28 = !DILocation(line: 44, column: 42, scope: !7)
!29 = !DILocation(line: 44, column: 31, scope: !7)
!30 = !DILocation(line: 44, column: 47, scope: !7)
!31 = !DILocation(line: 45, column: 20, scope: !7)
!32 = !DILocation(line: 49, column: 20, scope: !7)
!33 = !DILocation(line: 50, column: 19, scope: !7)
!34 = !DILocation(line: 51, column: 42, scope: !7)
!35 = !DILocation(line: 51, column: 31, scope: !7)
!36 = !DILocation(line: 51, column: 47, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 54, column: 21, scope: !7)
!39 = !DILocation(line: 57, column: 20, scope: !7)
!40 = !DILocation(line: 58, column: 41, scope: !7)
!41 = !DILocation(line: 58, column: 31, scope: !7)
!42 = !DILocation(line: 58, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 20, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 61, column: 31, scope: !7)
!46 = !DILocation(line: 61, column: 36, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 38, scope: !7)
!50 = !DILocation(line: 64, column: 31, scope: !7)
!51 = !DILocation(line: 64, column: 43, scope: !7)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 69, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 39, scope: !7)
!56 = !DILocation(line: 71, column: 31, scope: !7)
!57 = !DILocation(line: 71, column: 44, scope: !7)
!58 = !DILocation(line: 72, column: 20, scope: !7)
!59 = !DILocation(line: 73, column: 20, scope: !7)
!60 = !DILocation(line: 74, column: 39, scope: !7)
!61 = !DILocation(line: 74, column: 31, scope: !7)
!62 = !DILocation(line: 74, column: 44, scope: !7)
!63 = !DILocation(line: 75, column: 20, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 77, column: 39, scope: !7)
!66 = !DILocation(line: 77, column: 31, scope: !7)
!67 = !DILocation(line: 77, column: 44, scope: !7)
!68 = !DILocation(line: 78, column: 20, scope: !7)
!69 = !DILocation(line: 79, column: 72, scope: !7)
!70 = !DILocation(line: 79, column: 57, scope: !7)
!71 = !DILocation(line: 79, column: 137, scope: !7)
!72 = !DILocation(line: 79, column: 122, scope: !7)
!73 = !DILocation(line: 79, column: 166, scope: !7)
!74 = !DILocation(line: 79, column: 162, scope: !7)
!75 = !DILocation(line: 79, column: 197, scope: !7)
!76 = !DILocation(line: 79, column: 225, scope: !7)
!77 = !DILocation(line: 79, column: 221, scope: !7)
!78 = !DILocation(line: 79, column: 256, scope: !7)
!79 = !DILocation(line: 79, column: 185, scope: !7)
!80 = !DILocation(line: 79, column: 153, scope: !7)
!81 = !DILocation(line: 79, column: 173, scope: !7)
!82 = !DILocation(line: 79, column: 398, scope: !7)
!83 = !DILocation(line: 80, column: 20, scope: !7)
!84 = !DILocation(line: 81, column: 25, scope: !7)
!85 = !DILocation(line: 81, column: 37, scope: !7)
!86 = !DILocation(line: 81, column: 4, scope: !7)
