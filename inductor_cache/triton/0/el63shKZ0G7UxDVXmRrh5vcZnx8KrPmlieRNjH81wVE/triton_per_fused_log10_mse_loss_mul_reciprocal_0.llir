; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_log10_mse_loss_mul_reciprocal_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %24 = insertelement <2 x i32> %23, i32 %14, i64 1, !dbg !12
  %25 = bitcast <2 x i32> %24 to <2 x float>, !dbg !12
  %26 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !14
  %27 = insertelement <2 x i32> %26, i32 %20, i64 1, !dbg !14
  %28 = bitcast <2 x i32> %27 to <2 x float>, !dbg !14
  %29 = fsub <2 x float> %25, %28, !dbg !15
  %30 = fmul <2 x float> %29, %29, !dbg !16
  %31 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !12
  %32 = insertelement <2 x i32> %31, i32 %15, i64 1, !dbg !12
  %33 = bitcast <2 x i32> %32 to <2 x float>, !dbg !12
  %34 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !14
  %35 = insertelement <2 x i32> %34, i32 %21, i64 1, !dbg !14
  %36 = bitcast <2 x i32> %35 to <2 x float>, !dbg !14
  %37 = fsub <2 x float> %33, %36, !dbg !15
  %38 = fmul <2 x float> %37, %37, !dbg !16
  %shift = shufflevector <2 x float> %30, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !17
  %39 = fadd <2 x float> %30, %shift, !dbg !17
  %shift1 = shufflevector <2 x float> %38, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !17
  %40 = fadd <2 x float> %shift1, %39, !dbg !17
  %41 = fadd <2 x float> %38, %40, !dbg !17
  %42 = extractelement <2 x float> %41, i64 0, !dbg !17
  %43 = bitcast float %42 to i32, !dbg !22
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = fadd float %42, %45, !dbg !17
  %47 = bitcast float %46 to i32, !dbg !22
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = fadd float %46, %49, !dbg !17
  %51 = bitcast float %50 to i32, !dbg !22
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = fadd float %50, %53, !dbg !17
  %55 = bitcast float %54 to i32, !dbg !22
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = fadd float %54, %57, !dbg !17
  %59 = bitcast float %58 to i32, !dbg !22
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = fadd float %58, %61, !dbg !17
  %63 = icmp eq i32 %6, 0, !dbg !22
  %64 = and i32 %7, 1, !dbg !22
  %65 = zext nneg i32 %64 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %65, !dbg !22
  %67 = bitcast float %62 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %63) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %68 = icmp slt i32 %5, 2, !dbg !22
  %69 = sext i32 %5 to i64, !dbg !22
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69, !dbg !22
  %71 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %68) #4, !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = fadd float %72, %74, !dbg !17
  %76 = and i32 %5, 1, !dbg !22
  %77 = icmp eq i32 %76, 0, !dbg !22
  %78 = and i1 %68, %77, !dbg !22
  %79 = bitcast float %75 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %79, i1 %78) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %80 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %81 = fadd float %80, 0.000000e+00, !dbg !23
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 2.560000e+02) #4, !dbg !27
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %82) #4, !dbg !28
  %84 = fcmp olt float %83, 0x3810000000000000, !dbg !29
  %85 = fmul float %83, 0x4160000000000000, !dbg !29
  %.02.i = select i1 %84, float %85, float %83, !dbg !29
  %i.i.0.i = select i1 %84, float -2.300000e+01, float 0.000000e+00, !dbg !29
  %86 = bitcast float %.02.i to i32, !dbg !29
  %87 = add i32 %86, -1059760811, !dbg !29
  %88 = and i32 %87, -8388608, !dbg !29
  %89 = sub i32 %86, %88, !dbg !29
  %90 = bitcast i32 %89 to float, !dbg !29
  %91 = sitofp i32 %88 to float, !dbg !29
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %92, 0, !dbg !29
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %91, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !29
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %91, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !29
  %.08.i = select i1 %.not.i, float %94, float %93, !dbg !29
  %95 = fadd float %90, -1.000000e+00, !dbg !29
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not1.i = icmp eq i32 %96, 0, !dbg !29
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %95, float 0x3FC2073EC0000000) #4, !dbg !29
  %98 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %95, float 0x3FC2073EC0000000) #4, !dbg !29
  %.010.i = select i1 %.not1.i, float %98, float %97, !dbg !29
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not2.i = icmp eq i32 %99, 0, !dbg !29
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %95, float 0xBFBF19B980000000) #4, !dbg !29
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %95, float 0xBFBF19B980000000) #4, !dbg !29
  %.011.i = select i1 %.not2.i, float %101, float %100, !dbg !29
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not3.i = icmp eq i32 %102, 0, !dbg !29
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %95, float 0x3FC1E52AA0000000) #4, !dbg !29
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %95, float 0x3FC1E52AA0000000) #4, !dbg !29
  %.012.i = select i1 %.not3.i, float %104, float %103, !dbg !29
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not4.i = icmp eq i32 %105, 0, !dbg !29
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %95, float 0xBFC55B1720000000) #4, !dbg !29
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %95, float 0xBFC55B1720000000) #4, !dbg !29
  %.09.i = select i1 %.not4.i, float %107, float %106, !dbg !29
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not5.i = icmp eq i32 %108, 0, !dbg !29
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %95, float 0x3FC99DA160000000) #4, !dbg !29
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %95, float 0x3FC99DA160000000) #4, !dbg !29
  %.05.i = select i1 %.not5.i, float %110, float %109, !dbg !29
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not6.i = icmp eq i32 %111, 0, !dbg !29
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %95, float 0xBFCFFFE440000000) #4, !dbg !29
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %95, float 0xBFCFFFE440000000) #4, !dbg !29
  %.01.i = select i1 %.not6.i, float %113, float %112, !dbg !29
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not7.i = icmp eq i32 %114, 0, !dbg !29
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %95, float 0x3FD5554F00000000) #4, !dbg !29
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %95, float 0x3FD5554F00000000) #4, !dbg !29
  %.0.i = select i1 %.not7.i, float %116, float %115, !dbg !29
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not8.i = icmp eq i32 %117, 0, !dbg !29
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %95, float -5.000000e-01) #4, !dbg !29
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %95, float -5.000000e-01) #4, !dbg !29
  %.07.i = select i1 %.not8.i, float %119, float %118, !dbg !29
  %120 = fmul float %95, %.07.i, !dbg !29
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not9.i = icmp eq i32 %121, 0, !dbg !29
  %122 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %120, float %95, float %95) #4, !dbg !29
  %123 = tail call float @llvm.nvvm.fma.rn.f(float %120, float %95, float %95) #4, !dbg !29
  %.06.i = select i1 %.not9.i, float %123, float %122, !dbg !29
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not10.i = icmp eq i32 %124, 0, !dbg !29
  %125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !29
  %126 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !29
  %.04.i = select i1 %.not10.i, float %126, float %125, !dbg !29
  %127 = icmp ugt i32 %86, 2139095039, !dbg !29
  br i1 %127, label %__nv_fmaf_rn.exit.i.i, label %__nv_log10f.exit, !dbg !29

__nv_fmaf_rn.exit.i.i:                            ; preds = %4
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not11.i = icmp eq i32 %128, 0, !dbg !29
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !29
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !29
  %.03.i = select i1 %.not11.i, float %130, float %129, !dbg !29
  br label %__nv_log10f.exit, !dbg !29

__nv_log10f.exit:                                 ; preds = %4, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %4 ], !dbg !29
  %131 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !29
  %132 = fmul float %r.i.0.i, 0x3FDBCB7B20000000, !dbg !29
  %133 = fmul float %132, 1.000000e+01, !dbg !30
  %134 = select i1 %131, float 0xFFF0000000000000, float %133, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %urem = and i32 %5, 63, !dbg !32
  %135 = icmp eq i32 %urem, 0, !dbg !32
  %136 = bitcast float %134 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %0, i1 %135) #4, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck4x6i2ls37powxbfj3xaaocwftowg3wgyzuief5ijjzornkp7yw.py", directory: "inductor_cache/k4")
!4 = !{ptr @triton_per_fused_log10_mse_loss_mul_reciprocal_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_log10_mse_loss_mul_reciprocal_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_log10_mse_loss_mul_reciprocal_0", linkageName: "triton_per_fused_log10_mse_loss_mul_reciprocal_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 18, scope: !7)
!17 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !21)
!18 = distinct !DILexicalBlockFile(scope: !20, file: !19, discriminator: 0)
!19 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!20 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!21 = !DILocation(line: 36, column: 57, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !21)
!23 = !DILocation(line: 73, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 36, column: 44, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 19, scope: !7)
!29 = !DILocation(line: 43, column: 28, scope: !7)
!30 = !DILocation(line: 45, column: 20, scope: !7)
!31 = !DILocation(line: 46, column: 4, scope: !7)
!32 = !DILocation(line: 47, column: 63, scope: !7)
!33 = !DILocation(line: 47, column: 4, scope: !7)
