; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr13 = freeze i32 %10, !dbg !11
  %11 = shl i32 %.fr13, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = and i32 %12, 15, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = sdiv i32 %17, 2, !dbg !15
  %21 = mul i32 %20, 2, !dbg !16
  %.decomposed = sub i32 %17, %21, !dbg !16
  %22 = srem i32 %20, 2, !dbg !17
  %23 = sdiv i32 %17, 4, !dbg !18
  %24 = mul i32 %16, 768, !dbg !19
  %25 = zext nneg i32 %15 to i64, !dbg !20
  %26 = or disjoint i32 %15, %24, !dbg !24
  %27 = sext i32 %26 to i64, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !25
  br i1 %18, label %.split.us.peel.next, label %.split.peel.next

.split.peel.next:                                 ; preds = %9
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 false, i32 0, i1 false) #5, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !27
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true) #5, !dbg !28
  %32 = bitcast i32 %29 to float, !dbg !26
  %33 = bitcast i32 %31 to float, !dbg !28
  %34 = fadd float %32, %33, !dbg !29
  %35 = bitcast float %34 to i32, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %35, ptr addrspace(1) %28, i1 false) #5, !dbg !30
  br label %67, !dbg !20

.split.us.peel.next:                              ; preds = %9
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 true, i32 0, i1 true) #5, !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true) #5, !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = fadd float %37, %40, !dbg !29
  %42 = bitcast float %41 to i32, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %42, ptr addrspace(1) %28, i1 true) #5, !dbg !30
  br label %43, !dbg !20

43:                                               ; preds = %.split.us.peel.next, %43
  %indvars.iv17 = phi i64 [ 16, %.split.us.peel.next ], [ %indvars.iv.next18, %43 ]
  %44 = phi float [ 1.000000e+00, %.split.us.peel.next ], [ %59, %43 ]
  %45 = phi float [ 0.000000e+00, %.split.us.peel.next ], [ %64, %43 ]
  %46 = phi float [ %41, %.split.us.peel.next ], [ %61, %43 ]
  %47 = or disjoint i64 %indvars.iv17, %25, !dbg !31
  %48 = trunc nuw nsw i64 %47 to i32, !dbg !24
  %49 = add i32 %24, %48, !dbg !24
  %50 = sext i32 %49 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 true, i32 0, i1 true) #5, !dbg !26
  %53 = bitcast i32 %52 to float, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 true, i32 0, i1 true) #5, !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = fadd float %53, %56, !dbg !29
  %58 = fsub float %57, %46, !dbg !32
  %59 = fadd float %44, 1.000000e+00, !dbg !33
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %59) #5, !dbg !34
  %61 = fadd float %46, %60, !dbg !35
  %62 = fsub float %57, %61, !dbg !36
  %63 = fmul float %58, %62, !dbg !37
  %64 = fadd float %45, %63, !dbg !38
  %65 = bitcast float %57 to i32, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %65, ptr addrspace(1) %51, i1 true) #5, !dbg !30
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 16, !dbg !39
  %66 = icmp samesign ult i64 %indvars.iv17, 752, !dbg !39
  br i1 %66, label %43, label %.split9.us, !dbg !39, !llvm.loop !40

67:                                               ; preds = %.split.peel.next, %67
  %indvars.iv = phi i64 [ 16, %.split.peel.next ], [ %indvars.iv.next, %67 ]
  %68 = or disjoint i64 %indvars.iv, %25, !dbg !31
  %69 = trunc nuw nsw i64 %68 to i32, !dbg !24
  %70 = add i32 %24, %69, !dbg !24
  %71 = sext i32 %70 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 false, i32 0, i1 false) #5, !dbg !26
  %74 = bitcast i32 %73 to float, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 true, i32 0, i1 true) #5, !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = fadd float %74, %77, !dbg !29
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 1.000000e+00) #5, !dbg !34
  %80 = bitcast float %78 to i32, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %72, i1 false) #5, !dbg !30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 16, !dbg !39
  %81 = icmp samesign ult i64 %indvars.iv, 752, !dbg !39
  br i1 %81, label %67, label %.split9.us, !dbg !39, !llvm.loop !42

.split9.us:                                       ; preds = %67, %43
  %.us-phi = phi float [ %61, %43 ], [ 0.000000e+00, %67 ], !dbg !43
  %.us-phi10 = phi float [ %64, %43 ], [ 0.000000e+00, %67 ], !dbg !43
  %.us-phi11 = phi float [ %59, %43 ], [ 0.000000e+00, %67 ], !dbg !43
  %82 = bitcast float %.us-phi to i32, !dbg !43
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !43
  %84 = bitcast i32 %83 to float, !dbg !43
  %85 = bitcast float %.us-phi10 to i32, !dbg !43
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !43
  %87 = bitcast i32 %86 to float, !dbg !43
  %88 = bitcast float %.us-phi11 to i32, !dbg !43
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !43
  %90 = bitcast i32 %89 to float, !dbg !43
  %91 = fsub float %84, %.us-phi, !dbg !45
  %92 = fadd float %.us-phi11, %90, !dbg !47
  %93 = fcmp oeq float %92, 0.000000e+00, !dbg !48
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %92) #5, !dbg !49
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !50
  %96 = fmul float %91, %95, !dbg !51
  %97 = fadd float %.us-phi, %96, !dbg !52
  %98 = fadd float %.us-phi10, %87, !dbg !53
  %99 = fmul float %91, %91, !dbg !54
  %100 = fmul float %.us-phi11, %99, !dbg !55
  %101 = fmul float %100, %95, !dbg !56
  %102 = fadd float %98, %101, !dbg !57
  %103 = bitcast float %97 to i32, !dbg !43
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !43
  %105 = bitcast i32 %104 to float, !dbg !43
  %106 = bitcast float %102 to i32, !dbg !43
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !43
  %108 = bitcast i32 %107 to float, !dbg !43
  %109 = bitcast float %92 to i32, !dbg !43
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !43
  %111 = bitcast i32 %110 to float, !dbg !43
  %112 = fsub float %105, %97, !dbg !45
  %113 = fadd float %92, %111, !dbg !47
  %114 = fcmp oeq float %113, 0.000000e+00, !dbg !48
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %113) #5, !dbg !49
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !50
  %117 = fmul float %112, %116, !dbg !51
  %118 = fadd float %97, %117, !dbg !52
  %119 = fadd float %102, %108, !dbg !53
  %120 = fmul float %112, %112, !dbg !54
  %121 = fmul float %92, %120, !dbg !55
  %122 = fmul float %116, %121, !dbg !56
  %123 = fadd float %119, %122, !dbg !57
  %124 = bitcast float %118 to i32, !dbg !43
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !43
  %126 = bitcast i32 %125 to float, !dbg !43
  %127 = bitcast float %123 to i32, !dbg !43
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !43
  %129 = bitcast i32 %128 to float, !dbg !43
  %130 = bitcast float %113 to i32, !dbg !43
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !43
  %132 = bitcast i32 %131 to float, !dbg !43
  %133 = fsub float %126, %118, !dbg !45
  %134 = fadd float %113, %132, !dbg !47
  %135 = fcmp oeq float %134, 0.000000e+00, !dbg !48
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %134) #5, !dbg !49
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !50
  %138 = fmul float %133, %137, !dbg !51
  %139 = fadd float %118, %138, !dbg !52
  %140 = fadd float %123, %129, !dbg !53
  %141 = fmul float %133, %133, !dbg !54
  %142 = fmul float %113, %141, !dbg !55
  %143 = fmul float %137, %142, !dbg !56
  %144 = fadd float %140, %143, !dbg !57
  %145 = bitcast float %139 to i32, !dbg !43
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !43
  %147 = bitcast i32 %146 to float, !dbg !43
  %148 = bitcast float %144 to i32, !dbg !43
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !43
  %150 = bitcast i32 %149 to float, !dbg !43
  %151 = bitcast float %134 to i32, !dbg !43
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !43
  %153 = bitcast i32 %152 to float, !dbg !43
  %154 = fsub float %147, %139, !dbg !45
  %155 = fadd float %134, %153, !dbg !47
  %156 = fcmp oeq float %155, 0.000000e+00, !dbg !48
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %155) #5, !dbg !49
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !50
  %159 = fmul float %154, %158, !dbg !51
  %160 = fadd float %139, %159, !dbg !52
  %161 = fadd float %144, %150, !dbg !53
  %162 = fmul float %154, %154, !dbg !54
  %163 = fmul float %134, %162, !dbg !55
  %164 = fmul float %158, %163, !dbg !56
  %165 = fadd float %161, %164, !dbg !57
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !58
  %167 = bitcast float %160 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #5, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !58
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %170 = bitcast float %165 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %170, i1 true) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %171 = load float, ptr addrspace(3) %168, align 4, !dbg !59
  %172 = shl nsw i32 %.decomposed, 1, !dbg !60
  %173 = add nsw i32 %22, %172, !dbg !61
  %174 = shl nsw i32 %23, 2, !dbg !62
  %175 = add i32 %173, %174, !dbg !63
  %176 = sext i32 %175 to i64, !dbg !64
  %177 = getelementptr float, ptr addrspace(1) %4, i64 %176, !dbg !64
  %178 = and i32 %12, 240, !dbg !65
  %179 = icmp eq i32 %178, 0, !dbg !65
  %180 = and i1 %179, %19, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %177, i1 %180) #5, !dbg !65
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float 7.680000e+02) #5, !dbg !66
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 7.680000e+02) #5, !dbg !66
  %183 = fadd float %181, 0x3EB0C6F7A0000000, !dbg !67
  %184 = fadd float %182, 0x3EB0C6F7A0000000, !dbg !67
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %.not.i = icmp eq i32 %185, 0, !dbg !59
  br i1 %.not.i, label %188, label %186, !dbg !59

186:                                              ; preds = %.split9.us
  %187 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %183), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

188:                                              ; preds = %.split9.us
  %189 = tail call float @llvm.nvvm.rsqrt.approx.f(float %183), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

__nv_rsqrtf.exit:                                 ; preds = %186, %188
  %.0.i = phi float [ %187, %186 ], [ %189, %188 ], !dbg !59
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %.not.i3 = icmp eq i32 %190, 0, !dbg !59
  br i1 %.not.i3, label %193, label %191, !dbg !59

191:                                              ; preds = %__nv_rsqrtf.exit
  %192 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %184), !dbg !59
  br label %__nv_rsqrtf.exit5, !dbg !59

193:                                              ; preds = %__nv_rsqrtf.exit
  %194 = tail call float @llvm.nvvm.rsqrt.approx.f(float %184), !dbg !59
  br label %__nv_rsqrtf.exit5, !dbg !59

__nv_rsqrtf.exit5:                                ; preds = %191, %193
  %.0.i4 = phi float [ %192, %191 ], [ %194, %193 ], !dbg !59
  %195 = getelementptr float, ptr addrspace(1) %5, i64 %176, !dbg !68
  %196 = bitcast float %.0.i to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %195, i1 %180) #5, !dbg !69
  %197 = zext nneg i32 %15 to i64, !dbg !70
  br label %198, !dbg !70

198:                                              ; preds = %__nv_rsqrtf.exit5, %198
  %indvars.iv20 = phi i64 [ 0, %__nv_rsqrtf.exit5 ], [ %indvars.iv.next21, %198 ]
  %199 = or disjoint i64 %indvars.iv20, %197, !dbg !71
  %200 = trunc nuw nsw i64 %199 to i32, !dbg !72
  %201 = add i32 %24, %200, !dbg !72
  %202 = sext i32 %201 to i64, !dbg !73
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !73
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %18, i32 0, i1 %18) #5, !dbg !74
  %205 = bitcast i32 %204 to float, !dbg !74
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !75
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 true, i32 0, i1 true) #5, !dbg !76
  %208 = bitcast i32 %207 to float, !dbg !76
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %199, !dbg !77
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 true, i32 0, i1 true) #5, !dbg !78
  %211 = bitcast i32 %210 to float, !dbg !78
  %212 = fsub float %205, %160, !dbg !79
  %213 = fmul float %.0.i4, %212, !dbg !80
  %214 = fmul float %213, %208, !dbg !81
  %215 = fadd float %214, %211, !dbg !82
  %216 = getelementptr float, ptr addrspace(1) %6, i64 %202, !dbg !83
  %217 = bitcast float %215 to i32, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %216, i1 %18) #5, !dbg !84
  %indvars.iv.next21 = add nuw nsw i64 %indvars.iv20, 16, !dbg !70
  %218 = icmp samesign ult i64 %indvars.iv20, 752, !dbg !70
  br i1 %218, label %198, label %219, !dbg !70

219:                                              ; preds = %198
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coliphs4rxgj6boypzskjfdo22bgsfzzx6b7vmweokh2m4uncwi6.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_32, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_32", linkageName: "triton_red_fused_convolution_native_layer_norm_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 26, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 37, column: 47, scope: !7)
!20 = !DILocation(line: 178, column: 7, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 42, column: 51, scope: !7)
!24 = !DILocation(line: 37, column: 43, scope: !7)
!25 = !DILocation(line: 37, column: 38, scope: !7)
!26 = !DILocation(line: 37, column: 52, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 39, scope: !7)
!29 = !DILocation(line: 39, column: 22, scope: !7)
!30 = !DILocation(line: 47, column: 52, scope: !7)
!31 = !DILocation(line: 34, column: 27, scope: !7)
!32 = !DILocation(line: 183, column: 24, scope: !21, inlinedAt: !23)
!33 = !DILocation(line: 184, column: 30, scope: !21, inlinedAt: !23)
!34 = !DILocation(line: 185, column: 34, scope: !21, inlinedAt: !23)
!35 = !DILocation(line: 185, column: 26, scope: !21, inlinedAt: !23)
!36 = !DILocation(line: 186, column: 39, scope: !21, inlinedAt: !23)
!37 = !DILocation(line: 186, column: 31, scope: !21, inlinedAt: !23)
!38 = !DILocation(line: 186, column: 22, scope: !21, inlinedAt: !23)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = distinct !{!40, !41}
!41 = !{!"llvm.loop.peeled.count", i32 1}
!42 = distinct !{!42, !41}
!43 = !DILocation(line: 204, column: 46, scope: !21, inlinedAt: !44)
!44 = !DILocation(line: 49, column: 41, scope: !7)
!45 = !DILocation(line: 192, column: 21, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!47 = !DILocation(line: 193, column: 28, scope: !46, inlinedAt: !44)
!48 = !DILocation(line: 194, column: 39, scope: !46, inlinedAt: !44)
!49 = !DILocation(line: 194, column: 60, scope: !46, inlinedAt: !44)
!50 = !DILocation(line: 194, column: 49, scope: !46, inlinedAt: !44)
!51 = !DILocation(line: 196, column: 25, scope: !46, inlinedAt: !44)
!52 = !DILocation(line: 196, column: 17, scope: !46, inlinedAt: !44)
!53 = !DILocation(line: 197, column: 15, scope: !46, inlinedAt: !44)
!54 = !DILocation(line: 197, column: 30, scope: !46, inlinedAt: !44)
!55 = !DILocation(line: 197, column: 38, scope: !46, inlinedAt: !44)
!56 = !DILocation(line: 197, column: 49, scope: !46, inlinedAt: !44)
!57 = !DILocation(line: 197, column: 22, scope: !46, inlinedAt: !44)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 59, column: 28, scope: !7)
!60 = !DILocation(line: 54, column: 32, scope: !7)
!61 = !DILocation(line: 54, column: 30, scope: !7)
!62 = !DILocation(line: 54, column: 39, scope: !7)
!63 = !DILocation(line: 54, column: 37, scope: !7)
!64 = !DILocation(line: 54, column: 25, scope: !7)
!65 = !DILocation(line: 54, column: 50, scope: !7)
!66 = !DILocation(line: 56, column: 18, scope: !7)
!67 = !DILocation(line: 58, column: 19, scope: !7)
!68 = !DILocation(line: 60, column: 25, scope: !7)
!69 = !DILocation(line: 60, column: 51, scope: !7)
!70 = !DILocation(line: 61, column: 36, scope: !7)
!71 = !DILocation(line: 62, column: 27, scope: !7)
!72 = !DILocation(line: 65, column: 44, scope: !7)
!73 = !DILocation(line: 65, column: 39, scope: !7)
!74 = !DILocation(line: 65, column: 53, scope: !7)
!75 = !DILocation(line: 66, column: 35, scope: !7)
!76 = !DILocation(line: 66, column: 40, scope: !7)
!77 = !DILocation(line: 67, column: 35, scope: !7)
!78 = !DILocation(line: 67, column: 40, scope: !7)
!79 = !DILocation(line: 68, column: 24, scope: !7)
!80 = !DILocation(line: 69, column: 24, scope: !7)
!81 = !DILocation(line: 70, column: 24, scope: !7)
!82 = !DILocation(line: 71, column: 24, scope: !7)
!83 = !DILocation(line: 72, column: 29, scope: !7)
!84 = !DILocation(line: 72, column: 50, scope: !7)
!85 = !DILocation(line: 61, column: 4, scope: !7)
