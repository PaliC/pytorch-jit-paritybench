; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %11 = and i32 %7, 7, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 384, !dbg !14
  %15 = icmp slt i32 %13, 384, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %17 = lshr i32 %7, 2, !dbg !15
  %18 = and i32 %17, 15, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %19 = sdiv i32 %.frozen, 96, !dbg !16
  %20 = mul i32 %19, 96, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = mul nuw nsw i32 %18, 96, !dbg !18
  %22 = add nsw i32 %.decomposed, %21, !dbg !19
  %23 = mul i32 %19, 1536, !dbg !20
  %24 = add i32 %22, %23, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !23
  %30 = bitcast i32 %28 to float, !dbg !23
  %31 = bitcast i32 %29 to float, !dbg !23
  %32 = select i1 %14, float %30, float 0.000000e+00, !dbg !24
  %33 = select i1 %14, float %31, float 0.000000e+00, !dbg !24
  %34 = bitcast float %32 to i32, !dbg !25
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 16, i32 31), !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = fadd float %32, %36, !dbg !29
  %38 = bitcast float %37 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = fadd float %37, %40, !dbg !29
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !29
  %46 = bitcast float %33 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 16, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %33, %48, !dbg !29
  %50 = bitcast float %49 to i32, !dbg !25
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 8, i32 31), !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = fadd float %49, %52, !dbg !29
  %54 = bitcast float %53 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 4, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %53, %56, !dbg !29
  %58 = icmp samesign ult i32 %8, 4, !dbg !25
  %59 = and i32 %16, 1, !dbg !25
  %60 = shl nuw nsw i32 %10, 1, !dbg !25
  %61 = or disjoint i32 %60, %59, !dbg !25
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !25
  %63 = bitcast float %45 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 %58) #3, !dbg !25
  %64 = or disjoint i32 %60, 2, !dbg !25
  %65 = or disjoint i32 %64, %59, !dbg !25
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !25
  %67 = bitcast float %57 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %58) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %68 = icmp slt i32 %7, 16, !dbg !25
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !25
  %70 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %68) #3, !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fadd float %71, %73, !dbg !29
  %75 = and i32 %7, 1, !dbg !25
  %76 = icmp eq i32 %75, 0, !dbg !25
  %77 = and i1 %68, %76, !dbg !25
  %78 = bitcast float %74 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %78, i1 %77) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !25
  %80 = load i32, ptr addrspace(3) %79, align 16, !dbg !25
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !25
  %82 = load i32, ptr addrspace(3) %81, align 8, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %83, i32 %80, i32 %82, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !31
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 1.600000e+01) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %87 = sext i32 %13 to i64, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !33
  %89 = lshr i32 %8, 3, !dbg !34
  %90 = shl nuw nsw i32 %59, 2, !dbg !34
  %91 = or disjoint i32 %90, %89, !dbg !34
  %92 = icmp eq i32 %91, 0, !dbg !34
  %93 = bitcast float %86 to i32, !dbg !34
  %94 = and i1 %92, %15, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %88, i1 %94) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czkjgwvozedyt6y4gehzvvw6uwhga63hl643vsszhaiog4d4q7jw.py", directory: "inductor_cache/zk")
!4 = !{ptr @triton_per_fused_mean_16, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_16, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_16", linkageName: "triton_per_fused_mean_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 4, scope: !7)
!33 = !DILocation(line: 40, column: 28, scope: !7)
!34 = !DILocation(line: 40, column: 39, scope: !7)
!35 = !DILocation(line: 40, column: 4, scope: !7)
