; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 2, !dbg !12
  %13 = and i32 %11, 14, !dbg !12
  %14 = lshr i32 %10, 1, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %9, %13, !dbg !13
  %17 = or disjoint i32 %9, %15, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = lshr i32 %10, 3, !dbg !17
  %23 = and i32 %22, 3, !dbg !17
  %24 = or disjoint i32 %21, %23, !dbg !18
  %25 = or disjoint i32 %21, %12, !dbg !18
  %26 = icmp slt i32 %24, 4, !dbg !19
  %27 = icmp slt i32 %25, 4, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %28 = sdiv i32 %.frozen, 4, !dbg !20
  %29 = mul i32 %28, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %.frozen3 = freeze i32 %17, !dbg !20
  %30 = sdiv i32 %.frozen3, 4, !dbg !20
  %31 = mul i32 %30, 4, !dbg !21
  %.decomposed4 = sub i32 %.frozen3, %31, !dbg !21
  %32 = shl i32 %24, 2, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = shl i32 %28, 4, !dbg !24
  %35 = add i32 %33, %34, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = and i1 %18, %26, !dbg !27
  %39 = and i1 %19, %27, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %38) #2, !dbg !28
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %43 = shl i32 %10, 3, !dbg !28
  %44 = and i32 %43, 56, !dbg !28
  %45 = or disjoint i32 %44, %23, !dbg !28
  %46 = and i32 %11, 62, !dbg !28
  %47 = lshr exact i32 %44, 2, !dbg !28
  %48 = add nuw nsw i32 %47, %45, !dbg !28
  %49 = zext nneg i32 %48 to i64, !dbg !28
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49, !dbg !28
  %51 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #2, !dbg !28
  %52 = or disjoint i32 %45, 4, !dbg !28
  %53 = lshr i32 %52, 2, !dbg !28
  %54 = add nuw nsw i32 %53, %52, !dbg !28
  %55 = zext nneg i32 %54 to i64, !dbg !28
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %55, !dbg !28
  %57 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %58 = lshr i32 %46, 2, !dbg !28
  %59 = add nuw nsw i32 %58, %46, !dbg !28
  %60 = zext nneg i32 %59 to i64, !dbg !28
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %60, !dbg !28
  %62 = load float, ptr addrspace(3) %61, align 4, !dbg !28
  %63 = or disjoint i32 %46, 1, !dbg !28
  %64 = add nuw nsw i32 %63, %58, !dbg !28
  %65 = zext nneg i32 %64 to i64, !dbg !28
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %65, !dbg !28
  %67 = load float, ptr addrspace(3) %66, align 4, !dbg !28
  %68 = shl nsw i32 %30, 2, !dbg !29
  %69 = add i32 %68, %25, !dbg !30
  %70 = sext i32 %69 to i64, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !31
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 %39) #2, !dbg !32
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !32
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !32
  %75 = bitcast i32 %73 to float, !dbg !32
  %76 = bitcast i32 %74 to float, !dbg !32
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !33
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %77, i1 %39) #2, !dbg !34
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !34
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !34
  %81 = bitcast i32 %79 to float, !dbg !34
  %82 = bitcast i32 %80 to float, !dbg !34
  %83 = fmul float %62, %75, !dbg !35
  %84 = fmul float %67, %76, !dbg !35
  %85 = fptosi float %81 to i64, !dbg !36
  %86 = fptosi float %82 to i64, !dbg !36
  %87 = sext i32 %.decomposed4 to i64, !dbg !37
  %88 = icmp eq i64 %85, %87, !dbg !37
  %89 = icmp eq i64 %86, %87, !dbg !37
  %90 = uitofp i1 %88 to float, !dbg !38
  %91 = uitofp i1 %89 to float, !dbg !38
  %92 = fmul float %75, %90, !dbg !39
  %93 = fmul float %76, %91, !dbg !39
  %94 = shl i32 %17, 2, !dbg !40
  %95 = add i32 %25, %94, !dbg !41
  %96 = sext i32 %95 to i64, !dbg !42
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %96, !dbg !42
  %98 = bitcast float %83 to i32, !dbg !43
  %99 = bitcast float %84 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %98, i32 %99, ptr addrspace(1) %97, i1 %39) #2, !dbg !43
  %100 = getelementptr float, ptr addrspace(1) %4, i64 %96, !dbg !44
  %101 = bitcast float %92 to i32, !dbg !45
  %102 = bitcast float %93 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %100, i1 %39) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctlcmurnybol56rd3mydb7psvatofu7monmvjadbjijyk35j5sf7.py", directory: "inductor_cache/tl")
!4 = !{ptr @triton_poi_fused_clone_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_0", linkageName: "triton_poi_fused_clone_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 58, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 33, column: 37, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 42, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 42, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 19, scope: !7)
!38 = !DILocation(line: 40, column: 19, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 32, scope: !7)
!41 = !DILocation(line: 42, column: 30, scope: !7)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 42, column: 43, scope: !7)
!44 = !DILocation(line: 43, column: 25, scope: !7)
!45 = !DILocation(line: 43, column: 43, scope: !7)
!46 = !DILocation(line: 43, column: 4, scope: !7)
