; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 31, !dbg !11
  %15 = lshr i32 %13, 5, !dbg !11
  %16 = shl i32 %13, 2, !dbg !11
  %17 = and i32 %16, 508, !dbg !11
  %18 = icmp samesign ult i32 %17, 384, !dbg !12
  %19 = mul i32 %12, 384, !dbg !13
  %20 = add i32 %19, %17, !dbg !14
  %21 = sext i32 %20 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %40 = zext nneg i32 %17 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !21
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !23
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !26
  %51 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !16
  %52 = insertelement <2 x i32> %51, i32 %38, i64 1, !dbg !16
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !16
  %54 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !18
  %55 = insertelement <2 x i32> %54, i32 %45, i64 1, !dbg !18
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !18
  %57 = fadd <2 x float> %53, %56, !dbg !27
  %58 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !16
  %59 = insertelement <2 x i32> %58, i32 %39, i64 1, !dbg !16
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !16
  %61 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !18
  %62 = insertelement <2 x i32> %61, i32 %46, i64 1, !dbg !18
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !18
  %64 = fadd <2 x float> %60, %63, !dbg !27
  %65 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !16
  %66 = insertelement <2 x i32> %65, i32 %25, i64 1, !dbg !16
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !16
  %68 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !18
  %69 = insertelement <2 x i32> %68, i32 %31, i64 1, !dbg !18
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !18
  %71 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !20
  %72 = insertelement <2 x i32> %71, i32 %37, i64 1, !dbg !20
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !20
  %74 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !22
  %75 = insertelement <2 x i32> %74, i32 %44, i64 1, !dbg !22
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !22
  %77 = fadd <2 x float> %67, %70, !dbg !27
  %78 = fadd <2 x float> %73, %76, !dbg !28
  %79 = fadd <2 x float> %77, %78, !dbg !29
  %shift = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %80 = fadd <2 x float> %57, %shift, !dbg !29
  %81 = extractelement <2 x float> %80, i64 0, !dbg !29
  %shift1 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %82 = fadd <2 x float> %64, %shift1, !dbg !29
  %83 = extractelement <2 x float> %82, i64 0, !dbg !29
  %84 = extractelement <2 x float> %79, i64 0, !dbg !30
  %85 = extractelement <2 x float> %79, i64 1, !dbg !30
  %86 = fadd float %84, %85, !dbg !30
  %87 = fadd float %81, %86, !dbg !30
  %88 = fadd float %83, %87, !dbg !30
  %89 = select i1 %18, float %88, float 0.000000e+00, !dbg !30
  %90 = bitcast float %89 to i32, !dbg !35
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !35
  %92 = bitcast i32 %91 to float, !dbg !35
  %93 = fadd float %89, %92, !dbg !30
  %94 = bitcast float %93 to i32, !dbg !35
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !35
  %96 = bitcast i32 %95 to float, !dbg !35
  %97 = fadd float %93, %96, !dbg !30
  %98 = bitcast float %97 to i32, !dbg !35
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !35
  %100 = bitcast i32 %99 to float, !dbg !35
  %101 = fadd float %97, %100, !dbg !30
  %102 = bitcast float %101 to i32, !dbg !35
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !35
  %104 = bitcast i32 %103 to float, !dbg !35
  %105 = fadd float %101, %104, !dbg !30
  %106 = bitcast float %105 to i32, !dbg !35
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !35
  %108 = bitcast i32 %107 to float, !dbg !35
  %109 = fadd float %105, %108, !dbg !30
  %110 = icmp eq i32 %14, 0, !dbg !35
  %111 = and i32 %15, 3, !dbg !35
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !35
  %113 = bitcast float %109 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %110) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %114 = icmp slt i32 %13, 4, !dbg !35
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %115, i1 %114) #5, !dbg !35
  %117 = bitcast i32 %116 to float, !dbg !35
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !35
  %119 = bitcast i32 %118 to float, !dbg !35
  %120 = fadd float %117, %119, !dbg !30
  %121 = bitcast float %120 to i32, !dbg !35
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !35
  %123 = bitcast i32 %122 to float, !dbg !35
  %124 = fadd float %120, %123, !dbg !30
  %125 = and i32 %13, 3, !dbg !35
  %126 = icmp eq i32 %125, 0, !dbg !35
  %127 = and i1 %114, %126, !dbg !35
  %128 = bitcast float %124 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %128, i1 %127) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %129 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %130 = fadd float %129, 0.000000e+00, !dbg !36
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float 3.840000e+02) #5, !dbg !40
  %132 = fsub float %84, %131, !dbg !41
  %133 = fsub float %85, %131, !dbg !41
  %134 = fsub float %81, %131, !dbg !41
  %135 = fsub float %83, %131, !dbg !41
  %136 = fmul float %132, %132, !dbg !42
  %137 = fmul float %133, %133, !dbg !42
  %138 = fmul float %134, %134, !dbg !42
  %139 = fmul float %135, %135, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %140 = fadd float %136, %137, !dbg !45
  %141 = fadd float %138, %140, !dbg !45
  %142 = fadd float %139, %141, !dbg !45
  %143 = select i1 %18, float %142, float 0.000000e+00, !dbg !45
  %144 = bitcast float %143 to i32, !dbg !43
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !43
  %146 = bitcast i32 %145 to float, !dbg !43
  %147 = fadd float %143, %146, !dbg !45
  %148 = bitcast float %147 to i32, !dbg !43
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 8, i32 31), !dbg !43
  %150 = bitcast i32 %149 to float, !dbg !43
  %151 = fadd float %147, %150, !dbg !45
  %152 = bitcast float %151 to i32, !dbg !43
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 4, i32 31), !dbg !43
  %154 = bitcast i32 %153 to float, !dbg !43
  %155 = fadd float %151, %154, !dbg !45
  %156 = bitcast float %155 to i32, !dbg !43
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 2, i32 31), !dbg !43
  %158 = bitcast i32 %157 to float, !dbg !43
  %159 = fadd float %155, %158, !dbg !45
  %160 = bitcast float %159 to i32, !dbg !43
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !43
  %162 = bitcast i32 %161 to float, !dbg !43
  %163 = fadd float %159, %162, !dbg !45
  %164 = bitcast float %163 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %164, i1 %110) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %165 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %115, i1 %114) #5, !dbg !43
  %166 = bitcast i32 %165 to float, !dbg !43
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !43
  %168 = bitcast i32 %167 to float, !dbg !43
  %169 = fadd float %166, %168, !dbg !45
  %170 = bitcast float %169 to i32, !dbg !43
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !43
  %172 = bitcast i32 %171 to float, !dbg !43
  %173 = fadd float %169, %172, !dbg !45
  %174 = bitcast float %173 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %174, i1 %127) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %175 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %176 = fadd float %175, 0.000000e+00, !dbg !46
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 3.840000e+02) #5, !dbg !48
  %178 = fadd float %177, 0x3EE4F8B580000000, !dbg !49
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %179, 0, !dbg !50
  br i1 %.not.i, label %182, label %180, !dbg !50

180:                                              ; preds = %11
  %181 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %178), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

182:                                              ; preds = %11
  %183 = tail call float @llvm.nvvm.rsqrt.approx.f(float %178), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %180, %182
  %.0.i = phi float [ %181, %180 ], [ %183, %182 ], !dbg !50
  %184 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %185 = bitcast i32 %184 to float, !dbg !26
  %186 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %187 = bitcast i32 %186 to float, !dbg !26
  %188 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %189 = bitcast i32 %188 to float, !dbg !26
  %190 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %191 = bitcast i32 %190 to float, !dbg !26
  %192 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !24
  %193 = bitcast i32 %192 to float, !dbg !24
  %194 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !24
  %195 = bitcast i32 %194 to float, !dbg !24
  %196 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !24
  %197 = bitcast i32 %196 to float, !dbg !24
  %198 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !24
  %199 = bitcast i32 %198 to float, !dbg !24
  %200 = fmul float %132, %.0.i, !dbg !51
  %201 = fmul float %133, %.0.i, !dbg !51
  %202 = fmul float %134, %.0.i, !dbg !51
  %203 = fmul float %135, %.0.i, !dbg !51
  %204 = fmul float %200, %199, !dbg !52
  %205 = fmul float %201, %197, !dbg !52
  %206 = fmul float %202, %195, !dbg !52
  %207 = fmul float %203, %193, !dbg !52
  %208 = fadd float %204, %191, !dbg !53
  %209 = fadd float %205, %189, !dbg !53
  %210 = fadd float %206, %187, !dbg !53
  %211 = fadd float %207, %185, !dbg !53
  %212 = fmul float %.0.i, 0x3F65555560000000, !dbg !54
  %213 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !55
  %214 = bitcast float %200 to i32, !dbg !56
  %215 = bitcast float %201 to i32, !dbg !56
  %216 = bitcast float %202 to i32, !dbg !56
  %217 = bitcast float %203 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %214, i32 %215, i32 %216, i32 %217, ptr addrspace(1) %213, i1 %18) #5, !dbg !56
  %218 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !57
  %219 = bitcast float %208 to i32, !dbg !58
  %220 = bitcast float %209 to i32, !dbg !58
  %221 = bitcast float %210 to i32, !dbg !58
  %222 = bitcast float %211 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %220, i32 %221, i32 %222, ptr addrspace(1) %218, i1 %18) #5, !dbg !58
  %223 = sext i32 %12 to i64, !dbg !59
  %224 = getelementptr float, ptr addrspace(1) %8, i64 %223, !dbg !59
  %urem = and i32 %13, 127, !dbg !60
  %225 = icmp eq i32 %urem, 0, !dbg !60
  %226 = bitcast float %212 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %226, ptr addrspace(1) %224, i1 %225) #5, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceih53ckwqer4jl3uprl2rwajeykp7lgcvqo2npzrrpipmvfjqxu.py", directory: "inductor_cache/ei")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_9", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 44, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 36, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!34 = !DILocation(line: 45, column: 59, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 45, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 19, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !44)
!44 = !DILocation(line: 53, column: 59, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !44)
!46 = !DILocation(line: 73, column: 15, scope: !37, inlinedAt: !47)
!47 = !DILocation(line: 53, column: 45, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 28, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 25, scope: !7)
!56 = !DILocation(line: 65, column: 46, scope: !7)
!57 = !DILocation(line: 66, column: 25, scope: !7)
!58 = !DILocation(line: 66, column: 46, scope: !7)
!59 = !DILocation(line: 67, column: 25, scope: !7)
!60 = !DILocation(line: 67, column: 37, scope: !7)
!61 = !DILocation(line: 67, column: 4, scope: !7)
