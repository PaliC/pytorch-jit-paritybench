; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 3, !dbg !12
  %16 = and i32 %15, 1016, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %19 = or disjoint i32 %17, 2, !dbg !13
  %20 = or disjoint i32 %17, 3, !dbg !13
  %21 = or disjoint i32 %17, 4, !dbg !13
  %22 = or disjoint i32 %17, 5, !dbg !13
  %23 = or disjoint i32 %17, 6, !dbg !13
  %24 = or disjoint i32 %17, 7, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %25 = sdiv i32 %.frozen, 32, !dbg !14
  %26 = mul i32 %25, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %26, !dbg !15
  %27 = srem i32 %18, 32, !dbg !15
  %28 = srem i32 %19, 32, !dbg !15
  %29 = srem i32 %20, 32, !dbg !15
  %30 = srem i32 %21, 32, !dbg !15
  %31 = srem i32 %22, 32, !dbg !15
  %32 = srem i32 %23, 32, !dbg !15
  %33 = srem i32 %24, 32, !dbg !15
  %34 = sdiv i32 %17, 1024, !dbg !16
  %35 = srem i32 %34, 64, !dbg !17
  %36 = shl nsw i32 %.decomposed, 1, !dbg !18
  %37 = shl nsw i32 %27, 1, !dbg !18
  %38 = shl nsw i32 %28, 1, !dbg !18
  %39 = shl nsw i32 %29, 1, !dbg !18
  %40 = shl nsw i32 %30, 1, !dbg !18
  %41 = shl nsw i32 %31, 1, !dbg !18
  %42 = shl nsw i32 %32, 1, !dbg !18
  %43 = shl nsw i32 %33, 1, !dbg !18
  %44 = shl i32 %25, 7, !dbg !19
  %45 = add i32 %36, %44, !dbg !20
  %46 = add i32 %44, %37, !dbg !20
  %47 = add i32 %44, %38, !dbg !20
  %48 = add i32 %44, %39, !dbg !20
  %49 = add i32 %44, %40, !dbg !20
  %50 = add i32 %44, %41, !dbg !20
  %51 = add i32 %44, %42, !dbg !20
  %52 = add i32 %44, %43, !dbg !20
  %53 = sext i32 %45 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !21
  %55 = sext i32 %46 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !21
  %57 = sext i32 %47 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !21
  %59 = sext i32 %48 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !21
  %61 = sext i32 %49 to i64, !dbg !21
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !21
  %63 = sext i32 %50 to i64, !dbg !21
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !21
  %65 = sext i32 %51 to i64, !dbg !21
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !21
  %67 = sext i32 %52 to i64, !dbg !21
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !21
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #4, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !22
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !22
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #4, !dbg !22
  %77 = or disjoint i32 %45, 1, !dbg !23
  %78 = or disjoint i32 %46, 1, !dbg !23
  %79 = or disjoint i32 %47, 1, !dbg !23
  %80 = or disjoint i32 %48, 1, !dbg !23
  %81 = or disjoint i32 %49, 1, !dbg !23
  %82 = or disjoint i32 %50, 1, !dbg !23
  %83 = or disjoint i32 %51, 1, !dbg !23
  %84 = or disjoint i32 %52, 1, !dbg !23
  %85 = sext i32 %77 to i64, !dbg !24
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !24
  %87 = sext i32 %78 to i64, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !24
  %89 = sext i32 %79 to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !24
  %91 = sext i32 %80 to i64, !dbg !24
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !24
  %93 = sext i32 %81 to i64, !dbg !24
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !24
  %95 = sext i32 %82 to i64, !dbg !24
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !24
  %97 = sext i32 %83 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !24
  %99 = sext i32 %84 to i64, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !24
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #4, !dbg !25
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #4, !dbg !25
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #4, !dbg !25
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #4, !dbg !25
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #4, !dbg !25
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #4, !dbg !25
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #4, !dbg !25
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #4, !dbg !25
  %109 = or disjoint i32 %44, 64, !dbg !26
  %110 = add i32 %109, %36, !dbg !27
  %111 = add i32 %109, %37, !dbg !27
  %112 = add i32 %109, %38, !dbg !27
  %113 = add i32 %109, %39, !dbg !27
  %114 = add i32 %109, %40, !dbg !27
  %115 = add i32 %109, %41, !dbg !27
  %116 = add i32 %109, %42, !dbg !27
  %117 = add i32 %109, %43, !dbg !27
  %118 = sext i32 %110 to i64, !dbg !28
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !28
  %120 = sext i32 %111 to i64, !dbg !28
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !28
  %122 = sext i32 %112 to i64, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !28
  %124 = sext i32 %113 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !28
  %126 = sext i32 %114 to i64, !dbg !28
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !28
  %128 = sext i32 %115 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !28
  %130 = sext i32 %116 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !28
  %132 = sext i32 %117 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #4, !dbg !29
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #4, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #4, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #4, !dbg !29
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #4, !dbg !29
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #4, !dbg !29
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #4, !dbg !29
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #4, !dbg !29
  %142 = or disjoint i32 %44, 65, !dbg !30
  %143 = add i32 %142, %36, !dbg !31
  %144 = add i32 %142, %37, !dbg !31
  %145 = add i32 %142, %38, !dbg !31
  %146 = add i32 %142, %39, !dbg !31
  %147 = add i32 %142, %40, !dbg !31
  %148 = add i32 %142, %41, !dbg !31
  %149 = add i32 %142, %42, !dbg !31
  %150 = add i32 %142, %43, !dbg !31
  %151 = sext i32 %143 to i64, !dbg !32
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !32
  %153 = sext i32 %144 to i64, !dbg !32
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !32
  %155 = sext i32 %145 to i64, !dbg !32
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !32
  %157 = sext i32 %146 to i64, !dbg !32
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !32
  %159 = sext i32 %147 to i64, !dbg !32
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %159, !dbg !32
  %161 = sext i32 %148 to i64, !dbg !32
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !32
  %163 = sext i32 %149 to i64, !dbg !32
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !32
  %165 = sext i32 %150 to i64, !dbg !32
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !32
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #4, !dbg !33
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #4, !dbg !33
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #4, !dbg !33
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #4, !dbg !33
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #4, !dbg !33
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #4, !dbg !33
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #4, !dbg !33
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #4, !dbg !33
  %175 = sext i32 %17 to i64, !dbg !34
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !34
  %177 = sext i32 %21 to i64, !dbg !34
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !34
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %176, i1 true) #4, !dbg !35
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 true) #4, !dbg !35
  %181 = sext i32 %35 to i64, !dbg !36
  %182 = getelementptr float, ptr addrspace(1) %2, i64 %181, !dbg !36
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #4, !dbg !37
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #4, !dbg !37
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #4, !dbg !37
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #4, !dbg !37
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #4, !dbg !37
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #4, !dbg !37
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #4, !dbg !37
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #4, !dbg !37
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %181, !dbg !38
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #4, !dbg !39
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #4, !dbg !39
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #4, !dbg !39
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #4, !dbg !39
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #4, !dbg !39
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #4, !dbg !39
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #4, !dbg !39
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #4, !dbg !39
  %200 = getelementptr float, ptr addrspace(1) %4, i64 %181, !dbg !40
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #4, !dbg !41
  %202 = bitcast i32 %201 to float, !dbg !41
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #4, !dbg !41
  %204 = bitcast i32 %203 to float, !dbg !41
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #4, !dbg !41
  %206 = bitcast i32 %205 to float, !dbg !41
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #4, !dbg !41
  %208 = bitcast i32 %207 to float, !dbg !41
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #4, !dbg !41
  %210 = bitcast i32 %209 to float, !dbg !41
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #4, !dbg !41
  %212 = bitcast i32 %211 to float, !dbg !41
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #4, !dbg !41
  %214 = bitcast i32 %213 to float, !dbg !41
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #4, !dbg !41
  %216 = bitcast i32 %215 to float, !dbg !41
  %217 = getelementptr float, ptr addrspace(1) %5, i64 %181, !dbg !42
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #4, !dbg !43
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #4, !dbg !43
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #4, !dbg !43
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #4, !dbg !43
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #4, !dbg !43
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #4, !dbg !43
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #4, !dbg !43
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #4, !dbg !43
  %226 = getelementptr float, ptr addrspace(1) %6, i64 %181, !dbg !44
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #4, !dbg !45
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #4, !dbg !45
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #4, !dbg !45
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #4, !dbg !45
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #4, !dbg !45
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #4, !dbg !45
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #4, !dbg !45
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #4, !dbg !45
  %235 = fadd float %202, 0x3EE4F8B580000000, !dbg !46
  %236 = fadd float %204, 0x3EE4F8B580000000, !dbg !46
  %237 = fadd float %206, 0x3EE4F8B580000000, !dbg !46
  %238 = fadd float %208, 0x3EE4F8B580000000, !dbg !46
  %239 = fadd float %210, 0x3EE4F8B580000000, !dbg !46
  %240 = fadd float %212, 0x3EE4F8B580000000, !dbg !46
  %241 = fadd float %214, 0x3EE4F8B580000000, !dbg !46
  %242 = fadd float %216, 0x3EE4F8B580000000, !dbg !46
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i = icmp eq i32 %243, 0, !dbg !47
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i = icmp eq i32 %244, 0, !dbg !47
  br i1 %.not.i, label %250, label %245, !dbg !47

245:                                              ; preds = %11
  br i1 %.not1.i, label %248, label %246, !dbg !47

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %235) #4, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %235) #4, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

250:                                              ; preds = %11
  br i1 %.not1.i, label %253, label %251, !dbg !47

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.f(float %235) #4, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.f(float %235) #4, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %246, %248, %251, %253
  %.0.i = phi float [ %247, %246 ], [ %249, %248 ], [ %252, %251 ], [ %254, %253 ], !dbg !47
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i30 = icmp eq i32 %255, 0, !dbg !47
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i33 = icmp eq i32 %256, 0, !dbg !47
  br i1 %.not.i30, label %262, label %257, !dbg !47

257:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %260, label %258, !dbg !47

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %236) #4, !dbg !47
  br label %__nv_sqrtf.exit34, !dbg !47

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %236) #4, !dbg !47
  br label %__nv_sqrtf.exit34, !dbg !47

262:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %265, label %263, !dbg !47

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.f(float %236) #4, !dbg !47
  br label %__nv_sqrtf.exit34, !dbg !47

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.f(float %236) #4, !dbg !47
  br label %__nv_sqrtf.exit34, !dbg !47

__nv_sqrtf.exit34:                                ; preds = %258, %260, %263, %265
  %.0.i32 = phi float [ %259, %258 ], [ %261, %260 ], [ %264, %263 ], [ %266, %265 ], !dbg !47
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i35 = icmp eq i32 %267, 0, !dbg !47
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i38 = icmp eq i32 %268, 0, !dbg !47
  br i1 %.not.i35, label %274, label %269, !dbg !47

269:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %272, label %270, !dbg !47

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %237) #4, !dbg !47
  br label %__nv_sqrtf.exit39, !dbg !47

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %237) #4, !dbg !47
  br label %__nv_sqrtf.exit39, !dbg !47

274:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %277, label %275, !dbg !47

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.f(float %237) #4, !dbg !47
  br label %__nv_sqrtf.exit39, !dbg !47

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.f(float %237) #4, !dbg !47
  br label %__nv_sqrtf.exit39, !dbg !47

__nv_sqrtf.exit39:                                ; preds = %270, %272, %275, %277
  %.0.i37 = phi float [ %271, %270 ], [ %273, %272 ], [ %276, %275 ], [ %278, %277 ], !dbg !47
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i40 = icmp eq i32 %279, 0, !dbg !47
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i43 = icmp eq i32 %280, 0, !dbg !47
  br i1 %.not.i40, label %286, label %281, !dbg !47

281:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %284, label %282, !dbg !47

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %238) #4, !dbg !47
  br label %__nv_sqrtf.exit44, !dbg !47

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %238) #4, !dbg !47
  br label %__nv_sqrtf.exit44, !dbg !47

286:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %289, label %287, !dbg !47

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.f(float %238) #4, !dbg !47
  br label %__nv_sqrtf.exit44, !dbg !47

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.f(float %238) #4, !dbg !47
  br label %__nv_sqrtf.exit44, !dbg !47

__nv_sqrtf.exit44:                                ; preds = %282, %284, %287, %289
  %.0.i42 = phi float [ %283, %282 ], [ %285, %284 ], [ %288, %287 ], [ %290, %289 ], !dbg !47
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i45 = icmp eq i32 %291, 0, !dbg !47
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i48 = icmp eq i32 %292, 0, !dbg !47
  br i1 %.not.i45, label %298, label %293, !dbg !47

293:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %296, label %294, !dbg !47

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %239) #4, !dbg !47
  br label %__nv_sqrtf.exit49, !dbg !47

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %239) #4, !dbg !47
  br label %__nv_sqrtf.exit49, !dbg !47

298:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %301, label %299, !dbg !47

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.f(float %239) #4, !dbg !47
  br label %__nv_sqrtf.exit49, !dbg !47

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.f(float %239) #4, !dbg !47
  br label %__nv_sqrtf.exit49, !dbg !47

__nv_sqrtf.exit49:                                ; preds = %294, %296, %299, %301
  %.0.i47 = phi float [ %295, %294 ], [ %297, %296 ], [ %300, %299 ], [ %302, %301 ], !dbg !47
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i50 = icmp eq i32 %303, 0, !dbg !47
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i53 = icmp eq i32 %304, 0, !dbg !47
  br i1 %.not.i50, label %310, label %305, !dbg !47

305:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %308, label %306, !dbg !47

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %240) #4, !dbg !47
  br label %__nv_sqrtf.exit54, !dbg !47

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %240) #4, !dbg !47
  br label %__nv_sqrtf.exit54, !dbg !47

310:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %313, label %311, !dbg !47

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.f(float %240) #4, !dbg !47
  br label %__nv_sqrtf.exit54, !dbg !47

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.f(float %240) #4, !dbg !47
  br label %__nv_sqrtf.exit54, !dbg !47

__nv_sqrtf.exit54:                                ; preds = %306, %308, %311, %313
  %.0.i52 = phi float [ %307, %306 ], [ %309, %308 ], [ %312, %311 ], [ %314, %313 ], !dbg !47
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i55 = icmp eq i32 %315, 0, !dbg !47
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i58 = icmp eq i32 %316, 0, !dbg !47
  br i1 %.not.i55, label %322, label %317, !dbg !47

317:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %320, label %318, !dbg !47

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %241) #4, !dbg !47
  br label %__nv_sqrtf.exit59, !dbg !47

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %241) #4, !dbg !47
  br label %__nv_sqrtf.exit59, !dbg !47

322:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %325, label %323, !dbg !47

323:                                              ; preds = %322
  %324 = tail call float @llvm.nvvm.sqrt.rn.f(float %241) #4, !dbg !47
  br label %__nv_sqrtf.exit59, !dbg !47

325:                                              ; preds = %322
  %326 = tail call float @llvm.nvvm.sqrt.approx.f(float %241) #4, !dbg !47
  br label %__nv_sqrtf.exit59, !dbg !47

__nv_sqrtf.exit59:                                ; preds = %318, %320, %323, %325
  %.0.i57 = phi float [ %319, %318 ], [ %321, %320 ], [ %324, %323 ], [ %326, %325 ], !dbg !47
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i60 = icmp eq i32 %327, 0, !dbg !47
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i63 = icmp eq i32 %328, 0, !dbg !47
  br i1 %.not.i60, label %334, label %329, !dbg !47

329:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %332, label %330, !dbg !47

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %242) #4, !dbg !47
  br label %__nv_sqrtf.exit64, !dbg !47

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %242) #4, !dbg !47
  br label %__nv_sqrtf.exit64, !dbg !47

334:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %337, label %335, !dbg !47

335:                                              ; preds = %334
  %336 = tail call float @llvm.nvvm.sqrt.rn.f(float %242) #4, !dbg !47
  br label %__nv_sqrtf.exit64, !dbg !47

337:                                              ; preds = %334
  %338 = tail call float @llvm.nvvm.sqrt.approx.f(float %242) #4, !dbg !47
  br label %__nv_sqrtf.exit64, !dbg !47

__nv_sqrtf.exit64:                                ; preds = %330, %332, %335, %337
  %.0.i62 = phi float [ %331, %330 ], [ %333, %332 ], [ %336, %335 ], [ %338, %337 ], !dbg !47
  %339 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !25
  %340 = insertelement <4 x i32> %339, i32 %106, i64 1, !dbg !25
  %341 = insertelement <4 x i32> %340, i32 %107, i64 2, !dbg !25
  %342 = insertelement <4 x i32> %341, i32 %108, i64 3, !dbg !25
  %343 = bitcast <4 x i32> %342 to <4 x float>, !dbg !25
  %344 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !22
  %345 = insertelement <4 x i32> %344, i32 %74, i64 1, !dbg !22
  %346 = insertelement <4 x i32> %345, i32 %75, i64 2, !dbg !22
  %347 = insertelement <4 x i32> %346, i32 %76, i64 3, !dbg !22
  %348 = bitcast <4 x i32> %347 to <4 x float>, !dbg !22
  %349 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !29
  %350 = insertelement <4 x i32> %349, i32 %139, i64 1, !dbg !29
  %351 = insertelement <4 x i32> %350, i32 %140, i64 2, !dbg !29
  %352 = insertelement <4 x i32> %351, i32 %141, i64 3, !dbg !29
  %353 = bitcast <4 x i32> %352 to <4 x float>, !dbg !29
  %354 = insertelement <4 x i32> poison, i32 %171, i64 0, !dbg !33
  %355 = insertelement <4 x i32> %354, i32 %172, i64 1, !dbg !33
  %356 = insertelement <4 x i32> %355, i32 %173, i64 2, !dbg !33
  %357 = insertelement <4 x i32> %356, i32 %174, i64 3, !dbg !33
  %358 = bitcast <4 x i32> %357 to <4 x float>, !dbg !33
  %359 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !35
  %360 = insertelement <8 x i32> poison, i32 %190, i64 0, !dbg !37
  %361 = insertelement <8 x i32> %360, i32 %189, i64 1, !dbg !37
  %362 = insertelement <8 x i32> %361, i32 %188, i64 2, !dbg !37
  %363 = insertelement <8 x i32> %362, i32 %187, i64 3, !dbg !37
  %364 = insertelement <8 x i32> %363, i32 %186, i64 4, !dbg !37
  %365 = insertelement <8 x i32> %364, i32 %185, i64 5, !dbg !37
  %366 = insertelement <8 x i32> %365, i32 %184, i64 6, !dbg !37
  %367 = insertelement <8 x i32> %366, i32 %183, i64 7, !dbg !37
  %368 = bitcast <8 x i32> %367 to <8 x float>, !dbg !37
  %369 = insertelement <8 x i32> poison, i32 %199, i64 0, !dbg !39
  %370 = insertelement <8 x i32> %369, i32 %198, i64 1, !dbg !39
  %371 = insertelement <8 x i32> %370, i32 %197, i64 2, !dbg !39
  %372 = insertelement <8 x i32> %371, i32 %196, i64 3, !dbg !39
  %373 = insertelement <8 x i32> %372, i32 %195, i64 4, !dbg !39
  %374 = insertelement <8 x i32> %373, i32 %194, i64 5, !dbg !39
  %375 = insertelement <8 x i32> %374, i32 %193, i64 6, !dbg !39
  %376 = insertelement <8 x i32> %375, i32 %192, i64 7, !dbg !39
  %377 = bitcast <8 x i32> %376 to <8 x float>, !dbg !39
  %378 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !35
  %379 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !35
  %380 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !35
  %381 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !25
  %382 = insertelement <4 x i32> %381, i32 %102, i64 1, !dbg !25
  %383 = insertelement <4 x i32> %382, i32 %103, i64 2, !dbg !25
  %384 = insertelement <4 x i32> %383, i32 %104, i64 3, !dbg !25
  %385 = bitcast <4 x i32> %384 to <4 x float>, !dbg !25
  %386 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !22
  %387 = insertelement <4 x i32> %386, i32 %70, i64 1, !dbg !22
  %388 = insertelement <4 x i32> %387, i32 %71, i64 2, !dbg !22
  %389 = insertelement <4 x i32> %388, i32 %72, i64 3, !dbg !22
  %390 = bitcast <4 x i32> %389 to <4 x float>, !dbg !22
  %391 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !29
  %392 = insertelement <4 x i32> %391, i32 %135, i64 1, !dbg !29
  %393 = insertelement <4 x i32> %392, i32 %136, i64 2, !dbg !29
  %394 = insertelement <4 x i32> %393, i32 %137, i64 3, !dbg !29
  %395 = bitcast <4 x i32> %394 to <4 x float>, !dbg !29
  %396 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !33
  %397 = insertelement <4 x i32> %396, i32 %168, i64 1, !dbg !33
  %398 = insertelement <4 x i32> %397, i32 %169, i64 2, !dbg !33
  %399 = insertelement <4 x i32> %398, i32 %170, i64 3, !dbg !33
  %400 = bitcast <4 x i32> %399 to <4 x float>, !dbg !33
  %401 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !35
  %402 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !35
  %403 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !35
  %404 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !35
  %405 = fcmp ogt <4 x float> %343, %348, !dbg !48
  %406 = fcmp uno <4 x float> %343, zeroinitializer, !dbg !49
  %407 = or <4 x i1> %405, %406, !dbg !53
  %.v = select <4 x i1> %407, <4 x i32> %342, <4 x i32> %347, !dbg !54
  %408 = bitcast <4 x i32> %.v to <4 x float>, !dbg !54
  %409 = fcmp olt <4 x float> %408, %353, !dbg !55
  %410 = fcmp uno <4 x float> %353, zeroinitializer, !dbg !56
  %411 = or <4 x i1> %409, %410, !dbg !58
  %.v65 = select <4 x i1> %411, <4 x i32> %352, <4 x i32> %.v, !dbg !59
  %412 = bitcast <4 x i32> %.v65 to <4 x float>, !dbg !59
  %413 = fcmp olt <4 x float> %412, %358, !dbg !60
  %414 = zext <4 x i1> %405 to <4 x i8>, !dbg !61
  %415 = select <4 x i1> %409, <4 x i8> splat (i8 2), <4 x i8> %414, !dbg !62
  %416 = select <4 x i1> %413, <4 x i8> splat (i8 3), <4 x i8> %415, !dbg !63
  %417 = fcmp ogt <4 x float> %385, %390, !dbg !48
  %418 = fcmp uno <4 x float> %385, zeroinitializer, !dbg !49
  %419 = or <4 x i1> %417, %418, !dbg !53
  %.v66 = select <4 x i1> %419, <4 x i32> %384, <4 x i32> %389, !dbg !54
  %420 = bitcast <4 x i32> %.v66 to <4 x float>, !dbg !54
  %421 = fcmp olt <4 x float> %420, %395, !dbg !55
  %422 = fcmp uno <4 x float> %395, zeroinitializer, !dbg !56
  %423 = or <4 x i1> %421, %422, !dbg !58
  %.v67 = select <4 x i1> %423, <4 x i32> %394, <4 x i32> %.v66, !dbg !59
  %424 = bitcast <4 x i32> %.v67 to <4 x float>, !dbg !59
  %425 = fcmp olt <4 x float> %424, %400, !dbg !60
  %426 = zext <4 x i1> %417 to <4 x i8>, !dbg !61
  %427 = select <4 x i1> %421, <4 x i8> splat (i8 2), <4 x i8> %426, !dbg !62
  %428 = select <4 x i1> %425, <4 x i8> splat (i8 3), <4 x i8> %427, !dbg !63
  %429 = insertelement <8 x i32> poison, i32 %234, i64 0, !dbg !45
  %430 = insertelement <8 x i32> %429, i32 %233, i64 1, !dbg !45
  %431 = insertelement <8 x i32> %430, i32 %232, i64 2, !dbg !45
  %432 = insertelement <8 x i32> %431, i32 %231, i64 3, !dbg !45
  %433 = insertelement <8 x i32> %432, i32 %230, i64 4, !dbg !45
  %434 = insertelement <8 x i32> %433, i32 %229, i64 5, !dbg !45
  %435 = insertelement <8 x i32> %434, i32 %228, i64 6, !dbg !45
  %436 = insertelement <8 x i32> %435, i32 %227, i64 7, !dbg !45
  %437 = bitcast <8 x i32> %436 to <8 x float>, !dbg !45
  %438 = insertelement <8 x i32> poison, i32 %225, i64 0, !dbg !43
  %439 = insertelement <8 x i32> %438, i32 %224, i64 1, !dbg !43
  %440 = insertelement <8 x i32> %439, i32 %223, i64 2, !dbg !43
  %441 = insertelement <8 x i32> %440, i32 %222, i64 3, !dbg !43
  %442 = insertelement <8 x i32> %441, i32 %221, i64 4, !dbg !43
  %443 = insertelement <8 x i32> %442, i32 %220, i64 5, !dbg !43
  %444 = insertelement <8 x i32> %443, i32 %219, i64 6, !dbg !43
  %445 = insertelement <8 x i32> %444, i32 %218, i64 7, !dbg !43
  %446 = bitcast <8 x i32> %445 to <8 x float>, !dbg !43
  %447 = shl i32 %14, 2, !dbg !12
  %448 = and i32 %447, 508, !dbg !12
  %449 = or disjoint i32 %448, 512, !dbg !12
  %450 = or disjoint i32 %13, %449, !dbg !13
  %451 = or disjoint i32 %13, %448, !dbg !13
  %452 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !64
  %453 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !64
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !64
  %455 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !64
  %456 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !64
  %457 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !64
  %458 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !64
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !64
  %460 = shufflevector <4 x float> %358, <4 x float> %400, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !65
  %461 = fcmp uno <8 x float> %460, zeroinitializer, !dbg !65
  %462 = insertelement <8 x i32> poison, i32 %359, i64 0, !dbg !35
  %463 = insertelement <8 x i32> %462, i32 %378, i64 1, !dbg !35
  %464 = insertelement <8 x i32> %463, i32 %379, i64 2, !dbg !35
  %465 = insertelement <8 x i32> %464, i32 %380, i64 3, !dbg !35
  %466 = insertelement <8 x i32> %465, i32 %401, i64 4, !dbg !35
  %467 = insertelement <8 x i32> %466, i32 %402, i64 5, !dbg !35
  %468 = insertelement <8 x i32> %467, i32 %403, i64 6, !dbg !35
  %469 = insertelement <8 x i32> %468, i32 %404, i64 7, !dbg !35
  %470 = bitcast <8 x i32> %469 to <8 x float>, !dbg !35
  %471 = fadd <8 x float> %470, %368, !dbg !67
  %472 = shufflevector <4 x i1> %413, <4 x i1> %425, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !68
  %473 = or <8 x i1> %472, %461, !dbg !68
  %474 = shufflevector <4 x float> %412, <4 x float> %424, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !69
  %475 = select <8 x i1> %473, <8 x float> %460, <8 x float> %474, !dbg !69
  %476 = fadd <8 x float> %475, %471, !dbg !70
  %477 = fsub <8 x float> %476, %377, !dbg !71
  %478 = insertelement <8 x float> poison, float %459, i64 0, !dbg !72
  %479 = insertelement <8 x float> %478, float %458, i64 1, !dbg !72
  %480 = insertelement <8 x float> %479, float %457, i64 2, !dbg !72
  %481 = insertelement <8 x float> %480, float %456, i64 3, !dbg !72
  %482 = insertelement <8 x float> %481, float %455, i64 4, !dbg !72
  %483 = insertelement <8 x float> %482, float %454, i64 5, !dbg !72
  %484 = insertelement <8 x float> %483, float %453, i64 6, !dbg !72
  %485 = insertelement <8 x float> %484, float %452, i64 7, !dbg !72
  %486 = fmul <8 x float> %477, %485, !dbg !72
  %487 = fmul <8 x float> %486, %446, !dbg !73
  %488 = fadd <8 x float> %487, %437, !dbg !74
  %489 = fcmp olt <8 x float> %488, zeroinitializer, !dbg !75
  %490 = extractelement <8 x i1> %489, i64 7, !dbg !77
  %491 = extractelement <8 x i1> %489, i64 6, !dbg !77
  %492 = extractelement <8 x i1> %489, i64 5, !dbg !77
  %493 = extractelement <8 x i1> %489, i64 4, !dbg !77
  %494 = extractelement <8 x i1> %489, i64 3, !dbg !77
  %495 = extractelement <8 x i1> %489, i64 2, !dbg !77
  %496 = extractelement <8 x i1> %489, i64 1, !dbg !77
  %497 = extractelement <8 x i1> %489, i64 0, !dbg !77
  %498 = getelementptr i8, ptr addrspace(1) %7, i64 %175, !dbg !78
  %499 = bitcast <4 x i8> %428 to i32, !dbg !79
  %500 = bitcast <4 x i8> %416 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %499, i32 %500, ptr addrspace(1) %498, i1 true) #4, !dbg !79
  %501 = sext i32 %451 to i64, !dbg !80
  %502 = getelementptr float, ptr addrspace(1) %8, i64 %501, !dbg !80
  %503 = sext i32 %450 to i64, !dbg !80
  %504 = getelementptr float, ptr addrspace(1) %8, i64 %503, !dbg !80
  %505 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !81
  %bc = bitcast <8 x float> %488 to <8 x i32>, !dbg !81
  %506 = extractelement <8 x i32> %bc, i64 7, !dbg !81
  %507 = select i1 %490, i32 0, i32 %506, !dbg !77
  %bc68 = bitcast <8 x float> %488 to <8 x i32>, !dbg !81
  %508 = extractelement <8 x i32> %bc68, i64 6, !dbg !81
  %509 = select i1 %491, i32 0, i32 %508, !dbg !77
  %bc69 = bitcast <8 x float> %488 to <8 x i32>, !dbg !81
  %510 = extractelement <8 x i32> %bc69, i64 5, !dbg !81
  %511 = select i1 %492, i32 0, i32 %510, !dbg !77
  %bc70 = bitcast <8 x float> %488 to <8 x i32>, !dbg !81
  %512 = extractelement <8 x i32> %bc70, i64 4, !dbg !81
  %513 = select i1 %493, i32 0, i32 %512, !dbg !77
  %bc71 = bitcast <8 x float> %488 to <8 x i32>, !dbg !81
  %514 = extractelement <8 x i32> %bc71, i64 3, !dbg !81
  %515 = select i1 %494, i32 0, i32 %514, !dbg !77
  %bc72 = bitcast <8 x float> %488 to <8 x i32>, !dbg !81
  %516 = extractelement <8 x i32> %bc72, i64 2, !dbg !81
  %517 = select i1 %495, i32 0, i32 %516, !dbg !77
  %bc73 = bitcast <8 x float> %488 to <8 x i32>, !dbg !81
  %518 = extractelement <8 x i32> %bc73, i64 1, !dbg !81
  %519 = select i1 %496, i32 0, i32 %518, !dbg !77
  %bc74 = bitcast <8 x float> %488 to <8 x i32>, !dbg !81
  %520 = extractelement <8 x i32> %bc74, i64 0, !dbg !81
  %521 = select i1 %497, i32 0, i32 %520, !dbg !77
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %505, i32 %507, i32 %509, i32 %511, i32 %513, i1 true) #4, !dbg !81
  %522 = getelementptr inbounds i8, ptr addrspace(3) %505, i32 16, !dbg !81
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %522, i32 %515, i32 %517, i32 %519, i32 %521, i1 true) #4, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %523 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %448, !dbg !81
  %524 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %449, !dbg !81
  %525 = load <4 x i32>, ptr addrspace(3) %524, align 16, !dbg !81
  %.extract = load i32, ptr addrspace(3) %523, align 16, !dbg !81
  %526 = getelementptr inbounds i8, ptr addrspace(3) %523, i32 4, !dbg !81
  %.extract8 = load i32, ptr addrspace(3) %526, align 4, !dbg !81
  %527 = getelementptr inbounds i8, ptr addrspace(3) %523, i32 8, !dbg !81
  %.extract9 = load i32, ptr addrspace(3) %527, align 8, !dbg !81
  %528 = getelementptr inbounds i8, ptr addrspace(3) %523, i32 12, !dbg !81
  %.extract10 = load i32, ptr addrspace(3) %528, align 4, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %502, i1 true) #4, !dbg !81
  %.extract11 = extractelement <4 x i32> %525, i64 0, !dbg !81
  %.extract12 = extractelement <4 x i32> %525, i64 1, !dbg !81
  %.extract13 = extractelement <4 x i32> %525, i64 2, !dbg !81
  %.extract14 = extractelement <4 x i32> %525, i64 3, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %504, i1 true) #4, !dbg !81
  %529 = getelementptr float, ptr addrspace(1) %9, i64 %501, !dbg !82
  %530 = getelementptr float, ptr addrspace(1) %9, i64 %503, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %bc75 = bitcast <8 x float> %477 to <8 x i32>, !dbg !83
  %531 = extractelement <8 x i32> %bc75, i64 7, !dbg !83
  %bc76 = bitcast <8 x float> %477 to <8 x i32>, !dbg !83
  %532 = extractelement <8 x i32> %bc76, i64 6, !dbg !83
  %bc77 = bitcast <8 x float> %477 to <8 x i32>, !dbg !83
  %533 = extractelement <8 x i32> %bc77, i64 5, !dbg !83
  %bc78 = bitcast <8 x float> %477 to <8 x i32>, !dbg !83
  %534 = extractelement <8 x i32> %bc78, i64 4, !dbg !83
  %bc79 = bitcast <8 x float> %477 to <8 x i32>, !dbg !83
  %535 = extractelement <8 x i32> %bc79, i64 3, !dbg !83
  %bc80 = bitcast <8 x float> %477 to <8 x i32>, !dbg !83
  %536 = extractelement <8 x i32> %bc80, i64 2, !dbg !83
  %bc81 = bitcast <8 x float> %477 to <8 x i32>, !dbg !83
  %537 = extractelement <8 x i32> %bc81, i64 1, !dbg !83
  %bc82 = bitcast <8 x float> %477 to <8 x i32>, !dbg !83
  %538 = extractelement <8 x i32> %bc82, i64 0, !dbg !83
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %505, i32 %531, i32 %532, i32 %533, i32 %534, i1 true) #4, !dbg !83
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %522, i32 %535, i32 %536, i32 %537, i32 %538, i1 true) #4, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %539 = load <4 x i32>, ptr addrspace(3) %524, align 16, !dbg !83
  %.extract22 = load i32, ptr addrspace(3) %523, align 16, !dbg !83
  %.extract23 = load i32, ptr addrspace(3) %526, align 4, !dbg !83
  %.extract24 = load i32, ptr addrspace(3) %527, align 8, !dbg !83
  %.extract25 = load i32, ptr addrspace(3) %528, align 4, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %529, i1 true) #4, !dbg !83
  %.extract26 = extractelement <4 x i32> %539, i64 0, !dbg !83
  %.extract27 = extractelement <4 x i32> %539, i64 1, !dbg !83
  %.extract28 = extractelement <4 x i32> %539, i64 2, !dbg !83
  %.extract29 = extractelement <4 x i32> %539, i64 3, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %530, i1 true) #4, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceoikqegmvjlyniec6qv6smbpmcf76tz2bgr2vyrcqbnoed4q4xl.py", directory: "inductor_cache/eo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 29, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 41, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 46, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 30, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 31, column: 36, scope: !7)
!31 = !DILocation(line: 31, column: 43, scope: !7)
!32 = !DILocation(line: 31, column: 31, scope: !7)
!33 = !DILocation(line: 31, column: 52, scope: !7)
!34 = !DILocation(line: 32, column: 35, scope: !7)
!35 = !DILocation(line: 32, column: 40, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 36, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 36, scope: !7)
!40 = !DILocation(line: 35, column: 31, scope: !7)
!41 = !DILocation(line: 35, column: 36, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 36, scope: !7)
!44 = !DILocation(line: 37, column: 31, scope: !7)
!45 = !DILocation(line: 37, column: 36, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 27, scope: !7)
!48 = !DILocation(line: 38, column: 18, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 42, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 43, column: 18, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !57)
!57 = !DILocation(line: 46, column: 41, scope: !7)
!58 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !57)
!59 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !57)
!60 = !DILocation(line: 47, column: 20, scope: !7)
!61 = !DILocation(line: 41, column: 32, scope: !7)
!62 = !DILocation(line: 45, column: 33, scope: !7)
!63 = !DILocation(line: 49, column: 35, scope: !7)
!64 = !DILocation(line: 58, column: 20, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !66)
!66 = !DILocation(line: 50, column: 42, scope: !7)
!67 = !DILocation(line: 51, column: 20, scope: !7)
!68 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !66)
!70 = !DILocation(line: 52, column: 20, scope: !7)
!71 = !DILocation(line: 53, column: 20, scope: !7)
!72 = !DILocation(line: 61, column: 20, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 63, column: 20, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !76)
!76 = !DILocation(line: 65, column: 42, scope: !7)
!77 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !76)
!78 = !DILocation(line: 66, column: 25, scope: !7)
!79 = !DILocation(line: 66, column: 37, scope: !7)
!80 = !DILocation(line: 67, column: 25, scope: !7)
!81 = !DILocation(line: 67, column: 37, scope: !7)
!82 = !DILocation(line: 68, column: 25, scope: !7)
!83 = !DILocation(line: 68, column: 37, scope: !7)
!84 = !DILocation(line: 68, column: 4, scope: !7)
