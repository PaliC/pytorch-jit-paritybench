; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = icmp slt i32 %9, 1364224, !dbg !14
  %12 = icmp slt i32 %10, 1364224, !dbg !14
  %13 = srem i32 %9, 64, !dbg !15
  %14 = sdiv i32 %9, 341056, !dbg !16
  %15 = sdiv i32 %10, 341056, !dbg !16
  %16 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !17
  %17 = shufflevector <2 x i32> %16, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %18 = sdiv <2 x i32> %17, <i32 64, i32 4672>, !dbg !17
  %19 = srem <2 x i32> %18, splat (i32 73), !dbg !18
  %20 = mul nsw <2 x i32> %19, <i32 128, i32 18816>, !dbg !19
  %21 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !17
  %22 = shufflevector <2 x i32> %21, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %23 = sdiv <2 x i32> %22, <i32 64, i32 4672>, !dbg !17
  %24 = srem <2 x i32> %23, splat (i32 73), !dbg !18
  %25 = mul nsw <2 x i32> %24, <i32 128, i32 18816>, !dbg !19
  %26 = mul i32 %14, 1382976, !dbg !20
  %27 = mul i32 %15, 1382976, !dbg !20
  %28 = add i32 %26, %13, !dbg !21
  %29 = extractelement <2 x i32> %20, i64 0, !dbg !22
  %30 = add i32 %28, %29, !dbg !23
  %31 = extractelement <2 x i32> %20, i64 1, !dbg !24
  %32 = add i32 %30, %31, !dbg !25
  %33 = add i32 %27, %13, !dbg !21
  %34 = extractelement <2 x i32> %25, i64 0, !dbg !22
  %35 = add i32 %33, %34, !dbg !23
  %36 = extractelement <2 x i32> %25, i64 1, !dbg !24
  %37 = add i32 %35, %36, !dbg !25
  %38 = sext i32 %32 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %11) #1, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %12) #1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = add i32 %28, 64, !dbg !28
  %61 = add i32 %60, %29, !dbg !29
  %62 = add i32 %61, %31, !dbg !30
  %63 = add i32 %33, 64, !dbg !28
  %64 = add i32 %63, %34, !dbg !29
  %65 = add i32 %64, %36, !dbg !30
  %66 = sext i32 %62 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !31
  %68 = sext i32 %65 to i64, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %11) #1, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = bitcast i32 %72 to float, !dbg !32
  %77 = bitcast i32 %73 to float, !dbg !32
  %78 = bitcast i32 %74 to float, !dbg !32
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %12) #1, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = bitcast i32 %81 to float, !dbg !32
  %86 = bitcast i32 %82 to float, !dbg !32
  %87 = bitcast i32 %83 to float, !dbg !32
  %88 = add i32 %28, 128, !dbg !33
  %89 = add i32 %88, %29, !dbg !34
  %90 = add i32 %89, %31, !dbg !35
  %91 = add i32 %33, 128, !dbg !33
  %92 = add i32 %91, %34, !dbg !34
  %93 = add i32 %92, %36, !dbg !35
  %94 = sext i32 %90 to i64, !dbg !36
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !36
  %96 = sext i32 %93 to i64, !dbg !36
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !36
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %11) #1, !dbg !37
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !37
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !37
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !37
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !37
  %103 = bitcast i32 %99 to float, !dbg !37
  %104 = bitcast i32 %100 to float, !dbg !37
  %105 = bitcast i32 %101 to float, !dbg !37
  %106 = bitcast i32 %102 to float, !dbg !37
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %12) #1, !dbg !37
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !37
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !37
  %112 = bitcast i32 %108 to float, !dbg !37
  %113 = bitcast i32 %109 to float, !dbg !37
  %114 = bitcast i32 %110 to float, !dbg !37
  %115 = bitcast i32 %111 to float, !dbg !37
  %116 = add i32 %28, 9408, !dbg !38
  %117 = add i32 %116, %29, !dbg !39
  %118 = add i32 %117, %31, !dbg !40
  %119 = add i32 %33, 9408, !dbg !38
  %120 = add i32 %119, %34, !dbg !39
  %121 = add i32 %120, %36, !dbg !40
  %122 = sext i32 %118 to i64, !dbg !41
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !41
  %124 = sext i32 %121 to i64, !dbg !41
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !41
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %11) #1, !dbg !42
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !42
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !42
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !42
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !42
  %131 = bitcast i32 %127 to float, !dbg !42
  %132 = bitcast i32 %128 to float, !dbg !42
  %133 = bitcast i32 %129 to float, !dbg !42
  %134 = bitcast i32 %130 to float, !dbg !42
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %12) #1, !dbg !42
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !42
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !42
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !42
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !42
  %140 = bitcast i32 %136 to float, !dbg !42
  %141 = bitcast i32 %137 to float, !dbg !42
  %142 = bitcast i32 %138 to float, !dbg !42
  %143 = bitcast i32 %139 to float, !dbg !42
  %144 = add i32 %28, 9472, !dbg !43
  %145 = add i32 %144, %29, !dbg !44
  %146 = add i32 %145, %31, !dbg !45
  %147 = add i32 %33, 9472, !dbg !43
  %148 = add i32 %147, %34, !dbg !44
  %149 = add i32 %148, %36, !dbg !45
  %150 = sext i32 %146 to i64, !dbg !46
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !46
  %152 = sext i32 %149 to i64, !dbg !46
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !46
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %11) #1, !dbg !47
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !47
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !47
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !47
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !47
  %159 = bitcast i32 %155 to float, !dbg !47
  %160 = bitcast i32 %156 to float, !dbg !47
  %161 = bitcast i32 %157 to float, !dbg !47
  %162 = bitcast i32 %158 to float, !dbg !47
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %12) #1, !dbg !47
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !47
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !47
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !47
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !47
  %168 = bitcast i32 %164 to float, !dbg !47
  %169 = bitcast i32 %165 to float, !dbg !47
  %170 = bitcast i32 %166 to float, !dbg !47
  %171 = bitcast i32 %167 to float, !dbg !47
  %172 = add i32 %28, 9536, !dbg !48
  %173 = add i32 %172, %29, !dbg !49
  %174 = add i32 %173, %31, !dbg !50
  %175 = add i32 %33, 9536, !dbg !48
  %176 = add i32 %175, %34, !dbg !49
  %177 = add i32 %176, %36, !dbg !50
  %178 = sext i32 %174 to i64, !dbg !51
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !51
  %180 = sext i32 %177 to i64, !dbg !51
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !51
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %11) #1, !dbg !52
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !52
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !52
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !52
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !52
  %187 = bitcast i32 %183 to float, !dbg !52
  %188 = bitcast i32 %184 to float, !dbg !52
  %189 = bitcast i32 %185 to float, !dbg !52
  %190 = bitcast i32 %186 to float, !dbg !52
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %12) #1, !dbg !52
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !52
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !52
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !52
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !52
  %196 = bitcast i32 %192 to float, !dbg !52
  %197 = bitcast i32 %193 to float, !dbg !52
  %198 = bitcast i32 %194 to float, !dbg !52
  %199 = bitcast i32 %195 to float, !dbg !52
  %200 = add i32 %28, 18816, !dbg !53
  %201 = add i32 %200, %29, !dbg !54
  %202 = add i32 %201, %31, !dbg !55
  %203 = add i32 %33, 18816, !dbg !53
  %204 = add i32 %203, %34, !dbg !54
  %205 = add i32 %204, %36, !dbg !55
  %206 = sext i32 %202 to i64, !dbg !56
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !56
  %208 = sext i32 %205 to i64, !dbg !56
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !56
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %207, i1 %11) #1, !dbg !57
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !57
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !57
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !57
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !57
  %215 = bitcast i32 %211 to float, !dbg !57
  %216 = bitcast i32 %212 to float, !dbg !57
  %217 = bitcast i32 %213 to float, !dbg !57
  %218 = bitcast i32 %214 to float, !dbg !57
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %209, i1 %12) #1, !dbg !57
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !57
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !57
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !57
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !57
  %224 = bitcast i32 %220 to float, !dbg !57
  %225 = bitcast i32 %221 to float, !dbg !57
  %226 = bitcast i32 %222 to float, !dbg !57
  %227 = bitcast i32 %223 to float, !dbg !57
  %228 = add i32 %28, 18880, !dbg !58
  %229 = add i32 %228, %29, !dbg !59
  %230 = add i32 %229, %31, !dbg !60
  %231 = add i32 %33, 18880, !dbg !58
  %232 = add i32 %231, %34, !dbg !59
  %233 = add i32 %232, %36, !dbg !60
  %234 = sext i32 %230 to i64, !dbg !61
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !61
  %236 = sext i32 %233 to i64, !dbg !61
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !61
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %235, i1 %11) #1, !dbg !62
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !62
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !62
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !62
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !62
  %243 = bitcast i32 %239 to float, !dbg !62
  %244 = bitcast i32 %240 to float, !dbg !62
  %245 = bitcast i32 %241 to float, !dbg !62
  %246 = bitcast i32 %242 to float, !dbg !62
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %237, i1 %12) #1, !dbg !62
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !62
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !62
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !62
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !62
  %252 = bitcast i32 %248 to float, !dbg !62
  %253 = bitcast i32 %249 to float, !dbg !62
  %254 = bitcast i32 %250 to float, !dbg !62
  %255 = bitcast i32 %251 to float, !dbg !62
  %256 = add i32 %28, 18944, !dbg !63
  %257 = add i32 %256, %29, !dbg !22
  %258 = add i32 %257, %31, !dbg !24
  %259 = add i32 %33, 18944, !dbg !63
  %260 = add i32 %259, %34, !dbg !22
  %261 = add i32 %260, %36, !dbg !24
  %262 = sext i32 %258 to i64, !dbg !64
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !64
  %264 = sext i32 %261 to i64, !dbg !64
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !64
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %263, i1 %11) #1, !dbg !65
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !65
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !65
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !65
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !65
  %271 = bitcast i32 %267 to float, !dbg !65
  %272 = bitcast i32 %268 to float, !dbg !65
  %273 = bitcast i32 %269 to float, !dbg !65
  %274 = bitcast i32 %270 to float, !dbg !65
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %265, i1 %12) #1, !dbg !65
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !65
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !65
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !65
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !65
  %280 = bitcast i32 %276 to float, !dbg !65
  %281 = bitcast i32 %277 to float, !dbg !65
  %282 = bitcast i32 %278 to float, !dbg !65
  %283 = bitcast i32 %279 to float, !dbg !65
  %284 = fcmp ogt float %75, %47, !dbg !66
  %285 = fcmp ogt float %76, %48, !dbg !66
  %286 = fcmp ogt float %77, %49, !dbg !66
  %287 = fcmp ogt float %78, %50, !dbg !66
  %288 = fcmp ogt float %84, %56, !dbg !66
  %289 = fcmp ogt float %85, %57, !dbg !66
  %290 = fcmp ogt float %86, %58, !dbg !66
  %291 = fcmp ogt float %87, %59, !dbg !66
  %292 = fcmp uno float %75, 0.000000e+00, !dbg !70
  %293 = fcmp uno float %76, 0.000000e+00, !dbg !70
  %294 = fcmp uno float %77, 0.000000e+00, !dbg !70
  %295 = fcmp uno float %78, 0.000000e+00, !dbg !70
  %296 = fcmp uno float %84, 0.000000e+00, !dbg !70
  %297 = fcmp uno float %85, 0.000000e+00, !dbg !70
  %298 = fcmp uno float %86, 0.000000e+00, !dbg !70
  %299 = fcmp uno float %87, 0.000000e+00, !dbg !70
  %300 = or i1 %284, %292, !dbg !71
  %301 = or i1 %285, %293, !dbg !71
  %302 = or i1 %286, %294, !dbg !71
  %303 = or i1 %287, %295, !dbg !71
  %304 = or i1 %288, %296, !dbg !71
  %305 = or i1 %289, %297, !dbg !71
  %306 = or i1 %290, %298, !dbg !71
  %307 = or i1 %291, %299, !dbg !71
  %308 = select i1 %300, float %75, float %47, !dbg !72
  %309 = select i1 %301, float %76, float %48, !dbg !72
  %310 = select i1 %302, float %77, float %49, !dbg !72
  %311 = select i1 %303, float %78, float %50, !dbg !72
  %312 = select i1 %304, float %84, float %56, !dbg !72
  %313 = select i1 %305, float %85, float %57, !dbg !72
  %314 = select i1 %306, float %86, float %58, !dbg !72
  %315 = select i1 %307, float %87, float %59, !dbg !72
  %316 = fcmp olt float %308, %103, !dbg !73
  %317 = fcmp olt float %309, %104, !dbg !73
  %318 = fcmp olt float %310, %105, !dbg !73
  %319 = fcmp olt float %311, %106, !dbg !73
  %320 = fcmp olt float %312, %112, !dbg !73
  %321 = fcmp olt float %313, %113, !dbg !73
  %322 = fcmp olt float %314, %114, !dbg !73
  %323 = fcmp olt float %315, %115, !dbg !73
  %324 = fcmp uno float %103, 0.000000e+00, !dbg !75
  %325 = fcmp uno float %104, 0.000000e+00, !dbg !75
  %326 = fcmp uno float %105, 0.000000e+00, !dbg !75
  %327 = fcmp uno float %106, 0.000000e+00, !dbg !75
  %328 = fcmp uno float %112, 0.000000e+00, !dbg !75
  %329 = fcmp uno float %113, 0.000000e+00, !dbg !75
  %330 = fcmp uno float %114, 0.000000e+00, !dbg !75
  %331 = fcmp uno float %115, 0.000000e+00, !dbg !75
  %332 = or i1 %324, %316, !dbg !76
  %333 = or i1 %325, %317, !dbg !76
  %334 = or i1 %326, %318, !dbg !76
  %335 = or i1 %327, %319, !dbg !76
  %336 = or i1 %328, %320, !dbg !76
  %337 = or i1 %329, %321, !dbg !76
  %338 = or i1 %330, %322, !dbg !76
  %339 = or i1 %331, %323, !dbg !76
  %340 = select i1 %332, float %103, float %308, !dbg !77
  %341 = select i1 %333, float %104, float %309, !dbg !77
  %342 = select i1 %334, float %105, float %310, !dbg !77
  %343 = select i1 %335, float %106, float %311, !dbg !77
  %344 = select i1 %336, float %112, float %312, !dbg !77
  %345 = select i1 %337, float %113, float %313, !dbg !77
  %346 = select i1 %338, float %114, float %314, !dbg !77
  %347 = select i1 %339, float %115, float %315, !dbg !77
  %348 = fcmp olt float %340, %131, !dbg !78
  %349 = fcmp olt float %341, %132, !dbg !78
  %350 = fcmp olt float %342, %133, !dbg !78
  %351 = fcmp olt float %343, %134, !dbg !78
  %352 = fcmp olt float %344, %140, !dbg !78
  %353 = fcmp olt float %345, %141, !dbg !78
  %354 = fcmp olt float %346, %142, !dbg !78
  %355 = fcmp olt float %347, %143, !dbg !78
  %356 = fcmp uno float %131, 0.000000e+00, !dbg !80
  %357 = fcmp uno float %132, 0.000000e+00, !dbg !80
  %358 = fcmp uno float %133, 0.000000e+00, !dbg !80
  %359 = fcmp uno float %134, 0.000000e+00, !dbg !80
  %360 = fcmp uno float %140, 0.000000e+00, !dbg !80
  %361 = fcmp uno float %141, 0.000000e+00, !dbg !80
  %362 = fcmp uno float %142, 0.000000e+00, !dbg !80
  %363 = fcmp uno float %143, 0.000000e+00, !dbg !80
  %364 = or i1 %356, %348, !dbg !81
  %365 = or i1 %357, %349, !dbg !81
  %366 = or i1 %358, %350, !dbg !81
  %367 = or i1 %359, %351, !dbg !81
  %368 = or i1 %360, %352, !dbg !81
  %369 = or i1 %361, %353, !dbg !81
  %370 = or i1 %362, %354, !dbg !81
  %371 = or i1 %363, %355, !dbg !81
  %372 = select i1 %364, float %131, float %340, !dbg !82
  %373 = select i1 %365, float %132, float %341, !dbg !82
  %374 = select i1 %366, float %133, float %342, !dbg !82
  %375 = select i1 %367, float %134, float %343, !dbg !82
  %376 = select i1 %368, float %140, float %344, !dbg !82
  %377 = select i1 %369, float %141, float %345, !dbg !82
  %378 = select i1 %370, float %142, float %346, !dbg !82
  %379 = select i1 %371, float %143, float %347, !dbg !82
  %380 = fcmp olt float %372, %159, !dbg !83
  %381 = fcmp olt float %373, %160, !dbg !83
  %382 = fcmp olt float %374, %161, !dbg !83
  %383 = fcmp olt float %375, %162, !dbg !83
  %384 = fcmp olt float %376, %168, !dbg !83
  %385 = fcmp olt float %377, %169, !dbg !83
  %386 = fcmp olt float %378, %170, !dbg !83
  %387 = fcmp olt float %379, %171, !dbg !83
  %388 = fcmp uno float %159, 0.000000e+00, !dbg !85
  %389 = fcmp uno float %160, 0.000000e+00, !dbg !85
  %390 = fcmp uno float %161, 0.000000e+00, !dbg !85
  %391 = fcmp uno float %162, 0.000000e+00, !dbg !85
  %392 = fcmp uno float %168, 0.000000e+00, !dbg !85
  %393 = fcmp uno float %169, 0.000000e+00, !dbg !85
  %394 = fcmp uno float %170, 0.000000e+00, !dbg !85
  %395 = fcmp uno float %171, 0.000000e+00, !dbg !85
  %396 = or i1 %388, %380, !dbg !86
  %397 = or i1 %389, %381, !dbg !86
  %398 = or i1 %390, %382, !dbg !86
  %399 = or i1 %391, %383, !dbg !86
  %400 = or i1 %392, %384, !dbg !86
  %401 = or i1 %393, %385, !dbg !86
  %402 = or i1 %394, %386, !dbg !86
  %403 = or i1 %395, %387, !dbg !86
  %404 = select i1 %396, float %159, float %372, !dbg !87
  %405 = select i1 %397, float %160, float %373, !dbg !87
  %406 = select i1 %398, float %161, float %374, !dbg !87
  %407 = select i1 %399, float %162, float %375, !dbg !87
  %408 = select i1 %400, float %168, float %376, !dbg !87
  %409 = select i1 %401, float %169, float %377, !dbg !87
  %410 = select i1 %402, float %170, float %378, !dbg !87
  %411 = select i1 %403, float %171, float %379, !dbg !87
  %412 = fcmp olt float %404, %187, !dbg !88
  %413 = fcmp olt float %405, %188, !dbg !88
  %414 = fcmp olt float %406, %189, !dbg !88
  %415 = fcmp olt float %407, %190, !dbg !88
  %416 = fcmp olt float %408, %196, !dbg !88
  %417 = fcmp olt float %409, %197, !dbg !88
  %418 = fcmp olt float %410, %198, !dbg !88
  %419 = fcmp olt float %411, %199, !dbg !88
  %420 = fcmp uno float %187, 0.000000e+00, !dbg !90
  %421 = fcmp uno float %188, 0.000000e+00, !dbg !90
  %422 = fcmp uno float %189, 0.000000e+00, !dbg !90
  %423 = fcmp uno float %190, 0.000000e+00, !dbg !90
  %424 = fcmp uno float %196, 0.000000e+00, !dbg !90
  %425 = fcmp uno float %197, 0.000000e+00, !dbg !90
  %426 = fcmp uno float %198, 0.000000e+00, !dbg !90
  %427 = fcmp uno float %199, 0.000000e+00, !dbg !90
  %428 = or i1 %420, %412, !dbg !91
  %429 = or i1 %421, %413, !dbg !91
  %430 = or i1 %422, %414, !dbg !91
  %431 = or i1 %423, %415, !dbg !91
  %432 = or i1 %424, %416, !dbg !91
  %433 = or i1 %425, %417, !dbg !91
  %434 = or i1 %426, %418, !dbg !91
  %435 = or i1 %427, %419, !dbg !91
  %436 = select i1 %428, float %187, float %404, !dbg !92
  %437 = select i1 %429, float %188, float %405, !dbg !92
  %438 = select i1 %430, float %189, float %406, !dbg !92
  %439 = select i1 %431, float %190, float %407, !dbg !92
  %440 = select i1 %432, float %196, float %408, !dbg !92
  %441 = select i1 %433, float %197, float %409, !dbg !92
  %442 = select i1 %434, float %198, float %410, !dbg !92
  %443 = select i1 %435, float %199, float %411, !dbg !92
  %444 = fcmp olt float %436, %215, !dbg !93
  %445 = fcmp olt float %437, %216, !dbg !93
  %446 = fcmp olt float %438, %217, !dbg !93
  %447 = fcmp olt float %439, %218, !dbg !93
  %448 = fcmp olt float %440, %224, !dbg !93
  %449 = fcmp olt float %441, %225, !dbg !93
  %450 = fcmp olt float %442, %226, !dbg !93
  %451 = fcmp olt float %443, %227, !dbg !93
  %452 = fcmp uno float %215, 0.000000e+00, !dbg !95
  %453 = fcmp uno float %216, 0.000000e+00, !dbg !95
  %454 = fcmp uno float %217, 0.000000e+00, !dbg !95
  %455 = fcmp uno float %218, 0.000000e+00, !dbg !95
  %456 = fcmp uno float %224, 0.000000e+00, !dbg !95
  %457 = fcmp uno float %225, 0.000000e+00, !dbg !95
  %458 = fcmp uno float %226, 0.000000e+00, !dbg !95
  %459 = fcmp uno float %227, 0.000000e+00, !dbg !95
  %460 = or i1 %452, %444, !dbg !96
  %461 = or i1 %453, %445, !dbg !96
  %462 = or i1 %454, %446, !dbg !96
  %463 = or i1 %455, %447, !dbg !96
  %464 = or i1 %456, %448, !dbg !96
  %465 = or i1 %457, %449, !dbg !96
  %466 = or i1 %458, %450, !dbg !96
  %467 = or i1 %459, %451, !dbg !96
  %468 = select i1 %460, float %215, float %436, !dbg !97
  %469 = select i1 %461, float %216, float %437, !dbg !97
  %470 = select i1 %462, float %217, float %438, !dbg !97
  %471 = select i1 %463, float %218, float %439, !dbg !97
  %472 = select i1 %464, float %224, float %440, !dbg !97
  %473 = select i1 %465, float %225, float %441, !dbg !97
  %474 = select i1 %466, float %226, float %442, !dbg !97
  %475 = select i1 %467, float %227, float %443, !dbg !97
  %476 = fcmp olt float %468, %243, !dbg !98
  %477 = fcmp olt float %469, %244, !dbg !98
  %478 = fcmp olt float %470, %245, !dbg !98
  %479 = fcmp olt float %471, %246, !dbg !98
  %480 = fcmp olt float %472, %252, !dbg !98
  %481 = fcmp olt float %473, %253, !dbg !98
  %482 = fcmp olt float %474, %254, !dbg !98
  %483 = fcmp olt float %475, %255, !dbg !98
  %484 = fcmp uno float %243, 0.000000e+00, !dbg !100
  %485 = fcmp uno float %244, 0.000000e+00, !dbg !100
  %486 = fcmp uno float %245, 0.000000e+00, !dbg !100
  %487 = fcmp uno float %246, 0.000000e+00, !dbg !100
  %488 = fcmp uno float %252, 0.000000e+00, !dbg !100
  %489 = fcmp uno float %253, 0.000000e+00, !dbg !100
  %490 = fcmp uno float %254, 0.000000e+00, !dbg !100
  %491 = fcmp uno float %255, 0.000000e+00, !dbg !100
  %492 = or i1 %484, %476, !dbg !101
  %493 = or i1 %485, %477, !dbg !101
  %494 = or i1 %486, %478, !dbg !101
  %495 = or i1 %487, %479, !dbg !101
  %496 = or i1 %488, %480, !dbg !101
  %497 = or i1 %489, %481, !dbg !101
  %498 = or i1 %490, %482, !dbg !101
  %499 = or i1 %491, %483, !dbg !101
  %500 = select i1 %492, float %243, float %468, !dbg !102
  %501 = select i1 %493, float %244, float %469, !dbg !102
  %502 = select i1 %494, float %245, float %470, !dbg !102
  %503 = select i1 %495, float %246, float %471, !dbg !102
  %504 = select i1 %496, float %252, float %472, !dbg !102
  %505 = select i1 %497, float %253, float %473, !dbg !102
  %506 = select i1 %498, float %254, float %474, !dbg !102
  %507 = select i1 %499, float %255, float %475, !dbg !102
  %508 = fcmp olt float %500, %271, !dbg !103
  %509 = fcmp olt float %501, %272, !dbg !103
  %510 = fcmp olt float %502, %273, !dbg !103
  %511 = fcmp olt float %503, %274, !dbg !103
  %512 = fcmp olt float %504, %280, !dbg !103
  %513 = fcmp olt float %505, %281, !dbg !103
  %514 = fcmp olt float %506, %282, !dbg !103
  %515 = fcmp olt float %507, %283, !dbg !103
  %516 = fcmp uno float %271, 0.000000e+00, !dbg !105
  %517 = fcmp uno float %272, 0.000000e+00, !dbg !105
  %518 = fcmp uno float %273, 0.000000e+00, !dbg !105
  %519 = fcmp uno float %274, 0.000000e+00, !dbg !105
  %520 = fcmp uno float %280, 0.000000e+00, !dbg !105
  %521 = fcmp uno float %281, 0.000000e+00, !dbg !105
  %522 = fcmp uno float %282, 0.000000e+00, !dbg !105
  %523 = fcmp uno float %283, 0.000000e+00, !dbg !105
  %524 = or i1 %516, %508, !dbg !106
  %525 = or i1 %517, %509, !dbg !106
  %526 = or i1 %518, %510, !dbg !106
  %527 = or i1 %519, %511, !dbg !106
  %528 = or i1 %520, %512, !dbg !106
  %529 = or i1 %521, %513, !dbg !106
  %530 = or i1 %522, %514, !dbg !106
  %531 = or i1 %523, %515, !dbg !106
  %532 = sext i32 %9 to i64, !dbg !107
  %533 = getelementptr float, ptr addrspace(1) %1, i64 %532, !dbg !107
  %534 = sext i32 %10 to i64, !dbg !107
  %535 = getelementptr float, ptr addrspace(1) %1, i64 %534, !dbg !107
  %536 = bitcast float %500 to i32, !dbg !108
  %537 = select i1 %524, i32 %267, i32 %536, !dbg !109
  %538 = bitcast float %501 to i32, !dbg !108
  %539 = select i1 %525, i32 %268, i32 %538, !dbg !109
  %540 = bitcast float %502 to i32, !dbg !108
  %541 = select i1 %526, i32 %269, i32 %540, !dbg !109
  %542 = bitcast float %503 to i32, !dbg !108
  %543 = select i1 %527, i32 %270, i32 %542, !dbg !109
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %537, i32 %539, i32 %541, i32 %543, ptr addrspace(1) %533, i1 %11) #1, !dbg !108
  %544 = bitcast float %504 to i32, !dbg !108
  %545 = select i1 %528, i32 %276, i32 %544, !dbg !109
  %546 = bitcast float %505 to i32, !dbg !108
  %547 = select i1 %529, i32 %277, i32 %546, !dbg !109
  %548 = bitcast float %506 to i32, !dbg !108
  %549 = select i1 %530, i32 %278, i32 %548, !dbg !109
  %550 = bitcast float %507 to i32, !dbg !108
  %551 = select i1 %531, i32 %279, i32 %550, !dbg !109
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %545, i32 %547, i32 %549, i32 %551, ptr addrspace(1) %535, i1 %12) #1, !dbg !108
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu7we7aygvlk5goiezb73lthjz2nfxwz5asdcxhxzu7o7pw3hw2m.py", directory: "inductor_cache/u7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 63, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 37, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 44, scope: !7)
!24 = !DILocation(line: 37, column: 64, scope: !7)
!25 = !DILocation(line: 29, column: 55, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 68, scope: !7)
!28 = !DILocation(line: 30, column: 40, scope: !7)
!29 = !DILocation(line: 30, column: 49, scope: !7)
!30 = !DILocation(line: 30, column: 60, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 73, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 31, column: 50, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 74, scope: !7)
!38 = !DILocation(line: 32, column: 42, scope: !7)
!39 = !DILocation(line: 32, column: 51, scope: !7)
!40 = !DILocation(line: 32, column: 62, scope: !7)
!41 = !DILocation(line: 32, column: 30, scope: !7)
!42 = !DILocation(line: 32, column: 75, scope: !7)
!43 = !DILocation(line: 33, column: 42, scope: !7)
!44 = !DILocation(line: 33, column: 51, scope: !7)
!45 = !DILocation(line: 33, column: 62, scope: !7)
!46 = !DILocation(line: 33, column: 30, scope: !7)
!47 = !DILocation(line: 33, column: 75, scope: !7)
!48 = !DILocation(line: 34, column: 42, scope: !7)
!49 = !DILocation(line: 34, column: 51, scope: !7)
!50 = !DILocation(line: 34, column: 62, scope: !7)
!51 = !DILocation(line: 34, column: 30, scope: !7)
!52 = !DILocation(line: 34, column: 75, scope: !7)
!53 = !DILocation(line: 35, column: 44, scope: !7)
!54 = !DILocation(line: 35, column: 53, scope: !7)
!55 = !DILocation(line: 35, column: 64, scope: !7)
!56 = !DILocation(line: 35, column: 31, scope: !7)
!57 = !DILocation(line: 35, column: 77, scope: !7)
!58 = !DILocation(line: 36, column: 44, scope: !7)
!59 = !DILocation(line: 36, column: 53, scope: !7)
!60 = !DILocation(line: 36, column: 64, scope: !7)
!61 = !DILocation(line: 36, column: 31, scope: !7)
!62 = !DILocation(line: 36, column: 77, scope: !7)
!63 = !DILocation(line: 37, column: 44, scope: !7)
!64 = !DILocation(line: 37, column: 31, scope: !7)
!65 = !DILocation(line: 37, column: 77, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 38, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !74)
!74 = !DILocation(line: 39, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !79)
!79 = !DILocation(line: 40, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !84)
!84 = !DILocation(line: 41, column: 40, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !89)
!89 = !DILocation(line: 42, column: 41, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !94)
!94 = !DILocation(line: 43, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !99)
!99 = !DILocation(line: 44, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !104)
!104 = !DILocation(line: 45, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !104)
!107 = !DILocation(line: 46, column: 25, scope: !7)
!108 = !DILocation(line: 46, column: 37, scope: !7)
!109 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !104)
!110 = !DILocation(line: 46, column: 4, scope: !7)
