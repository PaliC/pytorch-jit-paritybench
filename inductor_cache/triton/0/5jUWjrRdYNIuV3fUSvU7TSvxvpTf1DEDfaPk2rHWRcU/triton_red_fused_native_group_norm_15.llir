; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_native_group_norm_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
.peel.next:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 16, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2016, !dbg !12
  %.frozen = freeze i32 %6, !dbg !13
  %11 = sdiv i32 %.frozen, 4, !dbg !13
  %12 = mul i32 %11, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %12, !dbg !14
  %13 = shl nsw i32 %.decomposed, 5, !dbg !15
  %14 = shl i32 %11, 15, !dbg !16
  %15 = and i32 %9, 28
  %16 = or disjoint i32 %13, %15
  %17 = add i32 %16, %14
  %18 = shl nuw nsw i32 %10, 2, !dbg !17
  %19 = add i32 %17, %18, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !20
  %23 = insertelement <4 x i1> poison, i1 %7, i64 0, !dbg !21
  %24 = shufflevector <4 x i1> %23, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !20
  %26 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !20
  %28 = insertelement <4 x i32> %26, i32 %27, i64 1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !20
  %30 = insertelement <4 x i32> %28, i32 %29, i64 2, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !20
  %32 = insertelement <4 x i32> %30, i32 %31, i64 3, !dbg !20
  %33 = bitcast <4 x i32> %32 to <4 x float>, !dbg !20
  %34 = select <4 x i1> %24, <4 x float> %33, <4 x float> zeroinitializer, !dbg !21
  %35 = select i1 %7, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %.tr = shl nuw nsw i32 %10, 2, !dbg !18
  %36 = or disjoint i32 %.tr, 8192, !dbg !18
  %37 = add i32 %17, %36, !dbg !18
  %38 = sext i32 %37 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !19
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !20
  %45 = fadd float %35, 1.000000e+00, !dbg !23
  %46 = fadd float %35, 1.000000e+00, !dbg !23
  %47 = fadd float %35, 1.000000e+00, !dbg !23
  %48 = fadd float %35, 1.000000e+00, !dbg !23
  %49 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !20
  %50 = insertelement <4 x i32> %49, i32 %43, i64 1, !dbg !20
  %51 = insertelement <4 x i32> %50, i32 %42, i64 2, !dbg !20
  %52 = insertelement <4 x i32> %51, i32 %41, i64 3, !dbg !20
  %53 = bitcast <4 x i32> %52 to <4 x float>, !dbg !20
  %54 = fsub <4 x float> %53, %34, !dbg !27
  %55 = extractelement <4 x float> %54, i64 0, !dbg !28
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %45) #5, !dbg !28
  %57 = extractelement <4 x float> %54, i64 1, !dbg !28
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %46) #5, !dbg !28
  %59 = extractelement <4 x float> %54, i64 2, !dbg !28
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %47) #5, !dbg !28
  %61 = extractelement <4 x float> %54, i64 3, !dbg !28
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %48) #5, !dbg !28
  %63 = insertelement <4 x float> poison, float %56, i64 0, !dbg !29
  %64 = insertelement <4 x float> %63, float %58, i64 1, !dbg !29
  %65 = insertelement <4 x float> %64, float %60, i64 2, !dbg !29
  %66 = insertelement <4 x float> %65, float %62, i64 3, !dbg !29
  %67 = fadd <4 x float> %34, %66, !dbg !29
  %68 = fsub <4 x float> %53, %67, !dbg !30
  %69 = fmul <4 x float> %54, %68, !dbg !31
  %70 = fadd <4 x float> %69, zeroinitializer, !dbg !32
  %71 = select <4 x i1> %24, <4 x float> %67, <4 x float> zeroinitializer, !dbg !21
  %.tr.1 = shl nuw nsw i32 %10, 2, !dbg !18
  %72 = or disjoint i32 %.tr.1, 16384, !dbg !18
  %73 = add i32 %17, %72, !dbg !18
  %74 = sext i32 %73 to i64, !dbg !19
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !19
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !20
  %77 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !20
  %78 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !20
  %79 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !20
  %80 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !20
  %81 = fadd float %45, 1.000000e+00, !dbg !23
  %82 = select i1 %7, float %81, float 1.000000e+00, !dbg !22
  %83 = fadd float %46, 1.000000e+00, !dbg !23
  %84 = select i1 %7, float %83, float 1.000000e+00, !dbg !22
  %85 = fadd float %47, 1.000000e+00, !dbg !23
  %86 = select i1 %7, float %85, float 1.000000e+00, !dbg !22
  %87 = fadd float %48, 1.000000e+00, !dbg !23
  %88 = select i1 %7, float %87, float 1.000000e+00, !dbg !22
  %89 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !20
  %90 = insertelement <4 x i32> %89, i32 %79, i64 1, !dbg !20
  %91 = insertelement <4 x i32> %90, i32 %78, i64 2, !dbg !20
  %92 = insertelement <4 x i32> %91, i32 %77, i64 3, !dbg !20
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !20
  %94 = fsub <4 x float> %93, %71, !dbg !27
  %95 = extractelement <4 x float> %94, i64 0, !dbg !28
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %82) #5, !dbg !28
  %97 = extractelement <4 x float> %94, i64 1, !dbg !28
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %84) #5, !dbg !28
  %99 = extractelement <4 x float> %94, i64 2, !dbg !28
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %86) #5, !dbg !28
  %101 = extractelement <4 x float> %94, i64 3, !dbg !28
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %88) #5, !dbg !28
  %103 = insertelement <4 x float> poison, float %96, i64 0, !dbg !29
  %104 = insertelement <4 x float> %103, float %98, i64 1, !dbg !29
  %105 = insertelement <4 x float> %104, float %100, i64 2, !dbg !29
  %106 = insertelement <4 x float> %105, float %102, i64 3, !dbg !29
  %107 = fadd <4 x float> %71, %106, !dbg !29
  %108 = fsub <4 x float> %93, %107, !dbg !30
  %109 = fmul <4 x float> %94, %108, !dbg !31
  %110 = fadd <4 x float> %70, %109, !dbg !32
  %111 = select <4 x i1> %24, <4 x float> %107, <4 x float> zeroinitializer, !dbg !21
  %.tr.2 = shl nuw nsw i32 %10, 2, !dbg !18
  %112 = or disjoint i32 %.tr.2, 24576, !dbg !18
  %113 = add i32 %17, %112, !dbg !18
  %114 = sext i32 %113 to i64, !dbg !19
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !19
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !20
  %117 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !20
  %118 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !20
  %119 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !20
  %120 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !20
  %121 = fadd float %81, 1.000000e+00, !dbg !23
  %122 = select i1 %7, float %121, float 1.000000e+00, !dbg !22
  %123 = fadd float %83, 1.000000e+00, !dbg !23
  %124 = select i1 %7, float %123, float 1.000000e+00, !dbg !22
  %125 = fadd float %85, 1.000000e+00, !dbg !23
  %126 = select i1 %7, float %125, float 1.000000e+00, !dbg !22
  %127 = fadd float %87, 1.000000e+00, !dbg !23
  %128 = select i1 %7, float %127, float 1.000000e+00, !dbg !22
  %129 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !20
  %130 = insertelement <4 x i32> %129, i32 %119, i64 1, !dbg !20
  %131 = insertelement <4 x i32> %130, i32 %118, i64 2, !dbg !20
  %132 = insertelement <4 x i32> %131, i32 %117, i64 3, !dbg !20
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !20
  %134 = fsub <4 x float> %133, %111, !dbg !27
  %135 = extractelement <4 x float> %134, i64 0, !dbg !28
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %122) #5, !dbg !28
  %137 = extractelement <4 x float> %134, i64 1, !dbg !28
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %124) #5, !dbg !28
  %139 = extractelement <4 x float> %134, i64 2, !dbg !28
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %126) #5, !dbg !28
  %141 = extractelement <4 x float> %134, i64 3, !dbg !28
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %128) #5, !dbg !28
  %143 = insertelement <4 x float> poison, float %136, i64 0, !dbg !29
  %144 = insertelement <4 x float> %143, float %138, i64 1, !dbg !29
  %145 = insertelement <4 x float> %144, float %140, i64 2, !dbg !29
  %146 = insertelement <4 x float> %145, float %142, i64 3, !dbg !29
  %147 = fadd <4 x float> %111, %146, !dbg !29
  %148 = fsub <4 x float> %133, %147, !dbg !30
  %149 = fmul <4 x float> %134, %148, !dbg !31
  %150 = fadd <4 x float> %110, %149, !dbg !32
  %151 = select <4 x i1> %24, <4 x float> %147, <4 x float> zeroinitializer, !dbg !21
  %152 = select <4 x i1> %24, <4 x float> %150, <4 x float> zeroinitializer, !dbg !33
  %153 = select i1 %7, float %121, float 0.000000e+00, !dbg !22
  %154 = select i1 %7, float %123, float 0.000000e+00, !dbg !22
  %155 = select i1 %7, float %125, float 0.000000e+00, !dbg !22
  %156 = select i1 %7, float %127, float 0.000000e+00, !dbg !22
  %157 = lshr i32 %8, 5, !dbg !12
  %158 = and i32 %8, 31, !dbg !12
  %159 = extractelement <4 x float> %151, i64 0, !dbg !34
  %160 = extractelement <4 x float> %151, i64 1, !dbg !34
  %161 = fsub float %160, %159, !dbg !34
  %162 = fadd float %153, %154, !dbg !37
  %163 = fcmp oeq float %162, 0.000000e+00, !dbg !38
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %162) #5, !dbg !39
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !40
  %166 = fmul float %161, %165, !dbg !41
  %167 = fadd float %159, %166, !dbg !42
  %shift = shufflevector <4 x float> %152, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %168 = fadd <4 x float> %152, %shift, !dbg !43
  %169 = extractelement <4 x float> %168, i64 0, !dbg !43
  %170 = fmul float %161, %161, !dbg !44
  %171 = fmul float %170, %153, !dbg !45
  %172 = fmul float %171, %165, !dbg !46
  %173 = fadd float %169, %172, !dbg !47
  %174 = extractelement <4 x float> %151, i64 2, !dbg !34
  %175 = fsub float %174, %167, !dbg !34
  %176 = fadd float %155, %162, !dbg !37
  %177 = fcmp oeq float %176, 0.000000e+00, !dbg !38
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float %176) #5, !dbg !39
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !40
  %180 = fmul float %179, %175, !dbg !41
  %181 = fadd float %167, %180, !dbg !42
  %182 = extractelement <4 x float> %152, i64 2, !dbg !43
  %183 = fadd float %182, %173, !dbg !43
  %184 = fmul float %175, %175, !dbg !44
  %185 = fmul float %162, %184, !dbg !45
  %186 = fmul float %179, %185, !dbg !46
  %187 = fadd float %183, %186, !dbg !47
  %188 = extractelement <4 x float> %151, i64 3, !dbg !34
  %189 = fsub float %188, %181, !dbg !34
  %190 = fadd float %156, %176, !dbg !37
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !38
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %190) #5, !dbg !39
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !40
  %194 = fmul float %193, %189, !dbg !41
  %195 = fadd float %181, %194, !dbg !42
  %196 = extractelement <4 x float> %152, i64 3, !dbg !43
  %197 = fadd float %196, %187, !dbg !43
  %198 = fmul float %189, %189, !dbg !44
  %199 = fmul float %176, %198, !dbg !45
  %200 = fmul float %193, %199, !dbg !46
  %201 = fadd float %197, %200, !dbg !47
  %202 = bitcast float %195 to i32, !dbg !48
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 16, i32 31), !dbg !48
  %204 = bitcast i32 %203 to float, !dbg !48
  %205 = bitcast float %201 to i32, !dbg !48
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 16, i32 31), !dbg !48
  %207 = bitcast i32 %206 to float, !dbg !48
  %208 = bitcast float %190 to i32, !dbg !48
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 16, i32 31), !dbg !48
  %210 = bitcast i32 %209 to float, !dbg !48
  %211 = fsub float %204, %195, !dbg !34
  %212 = fadd float %190, %210, !dbg !37
  %213 = fcmp oeq float %212, 0.000000e+00, !dbg !38
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %212) #5, !dbg !39
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !40
  %216 = fmul float %215, %211, !dbg !41
  %217 = fadd float %195, %216, !dbg !42
  %218 = fadd float %201, %207, !dbg !43
  %219 = fmul float %211, %211, !dbg !44
  %220 = fmul float %190, %219, !dbg !45
  %221 = fmul float %215, %220, !dbg !46
  %222 = fadd float %218, %221, !dbg !47
  %223 = bitcast float %217 to i32, !dbg !48
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !48
  %225 = bitcast i32 %224 to float, !dbg !48
  %226 = bitcast float %222 to i32, !dbg !48
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !48
  %228 = bitcast i32 %227 to float, !dbg !48
  %229 = bitcast float %212 to i32, !dbg !48
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !48
  %231 = bitcast i32 %230 to float, !dbg !48
  %232 = fsub float %225, %217, !dbg !34
  %233 = fadd float %212, %231, !dbg !37
  %234 = fcmp oeq float %233, 0.000000e+00, !dbg !38
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float %233) #5, !dbg !39
  %236 = select i1 %234, float 0.000000e+00, float %235, !dbg !40
  %237 = fmul float %232, %236, !dbg !41
  %238 = fadd float %217, %237, !dbg !42
  %239 = fadd float %222, %228, !dbg !43
  %240 = fmul float %232, %232, !dbg !44
  %241 = fmul float %212, %240, !dbg !45
  %242 = fmul float %236, %241, !dbg !46
  %243 = fadd float %239, %242, !dbg !47
  %244 = bitcast float %238 to i32, !dbg !48
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !48
  %246 = bitcast i32 %245 to float, !dbg !48
  %247 = bitcast float %243 to i32, !dbg !48
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 4, i32 31), !dbg !48
  %249 = bitcast i32 %248 to float, !dbg !48
  %250 = bitcast float %233 to i32, !dbg !48
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 4, i32 31), !dbg !48
  %252 = bitcast i32 %251 to float, !dbg !48
  %253 = fsub float %246, %238, !dbg !34
  %254 = fadd float %233, %252, !dbg !37
  %255 = fcmp oeq float %254, 0.000000e+00, !dbg !38
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float %254) #5, !dbg !39
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !40
  %258 = fmul float %253, %257, !dbg !41
  %259 = fadd float %238, %258, !dbg !42
  %260 = fadd float %243, %249, !dbg !43
  %261 = fmul float %253, %253, !dbg !44
  %262 = fmul float %233, %261, !dbg !45
  %263 = fmul float %257, %262, !dbg !46
  %264 = fadd float %260, %263, !dbg !47
  %265 = bitcast float %259 to i32, !dbg !48
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 2, i32 31), !dbg !48
  %267 = bitcast i32 %266 to float, !dbg !48
  %268 = bitcast float %264 to i32, !dbg !48
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !48
  %270 = bitcast i32 %269 to float, !dbg !48
  %271 = bitcast float %254 to i32, !dbg !48
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !48
  %273 = bitcast i32 %272 to float, !dbg !48
  %274 = fsub float %267, %259, !dbg !34
  %275 = fadd float %254, %273, !dbg !37
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !38
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %273, float %275) #5, !dbg !39
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !40
  %279 = fmul float %274, %278, !dbg !41
  %280 = fadd float %259, %279, !dbg !42
  %281 = fadd float %264, %270, !dbg !43
  %282 = fmul float %274, %274, !dbg !44
  %283 = fmul float %254, %282, !dbg !45
  %284 = fmul float %278, %283, !dbg !46
  %285 = fadd float %281, %284, !dbg !47
  %286 = bitcast float %280 to i32, !dbg !48
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 1, i32 31), !dbg !48
  %288 = bitcast i32 %287 to float, !dbg !48
  %289 = bitcast float %285 to i32, !dbg !48
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 1, i32 31), !dbg !48
  %291 = bitcast i32 %290 to float, !dbg !48
  %292 = bitcast float %275 to i32, !dbg !48
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 1, i32 31), !dbg !48
  %294 = bitcast i32 %293 to float, !dbg !48
  %295 = fsub float %288, %280, !dbg !34
  %296 = fadd float %275, %294, !dbg !37
  %297 = fcmp oeq float %296, 0.000000e+00, !dbg !38
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %294, float %296) #5, !dbg !39
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !40
  %300 = fmul float %295, %299, !dbg !41
  %301 = fadd float %280, %300, !dbg !42
  %302 = fadd float %285, %291, !dbg !43
  %303 = fmul float %295, %295, !dbg !44
  %304 = fmul float %275, %303, !dbg !45
  %305 = fmul float %299, %304, !dbg !46
  %306 = fadd float %302, %305, !dbg !47
  %307 = icmp eq i32 %158, 0, !dbg !48
  %308 = and i32 %157, 15, !dbg !48
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %308, !dbg !48
  %310 = bitcast float %301 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 %307) #5, !dbg !48
  %311 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %308, !dbg !48
  %312 = bitcast float %306 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 %307) #5, !dbg !48
  %313 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %308, !dbg !48
  %314 = bitcast float %296 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 %307) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %315 = icmp slt i32 %8, 16, !dbg !48
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !48
  %317 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %316, i1 %315) #5, !dbg !48
  %318 = bitcast i32 %317 to float, !dbg !48
  %319 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %8, !dbg !48
  %320 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %319, i1 %315) #5, !dbg !48
  %321 = bitcast i32 %320 to float, !dbg !48
  %322 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %8, !dbg !48
  %323 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %322, i1 %315) #5, !dbg !48
  %324 = bitcast i32 %323 to float, !dbg !48
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 8, i32 31), !dbg !48
  %326 = bitcast i32 %325 to float, !dbg !48
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 8, i32 31), !dbg !48
  %328 = bitcast i32 %327 to float, !dbg !48
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 8, i32 31), !dbg !48
  %330 = bitcast i32 %329 to float, !dbg !48
  %331 = fsub float %326, %318, !dbg !34
  %332 = fadd float %324, %330, !dbg !37
  %333 = fcmp oeq float %332, 0.000000e+00, !dbg !38
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %332) #5, !dbg !39
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !40
  %336 = fmul float %331, %335, !dbg !41
  %337 = fadd float %336, %318, !dbg !42
  %338 = fadd float %321, %328, !dbg !43
  %339 = fmul float %331, %331, !dbg !44
  %340 = fmul float %339, %324, !dbg !45
  %341 = fmul float %340, %335, !dbg !46
  %342 = fadd float %338, %341, !dbg !47
  %343 = bitcast float %337 to i32, !dbg !48
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !48
  %345 = bitcast i32 %344 to float, !dbg !48
  %346 = bitcast float %342 to i32, !dbg !48
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 4, i32 31), !dbg !48
  %348 = bitcast i32 %347 to float, !dbg !48
  %349 = bitcast float %332 to i32, !dbg !48
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 4, i32 31), !dbg !48
  %351 = bitcast i32 %350 to float, !dbg !48
  %352 = fsub float %345, %337, !dbg !34
  %353 = fadd float %332, %351, !dbg !37
  %354 = fcmp oeq float %353, 0.000000e+00, !dbg !38
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float %353) #5, !dbg !39
  %356 = select i1 %354, float 0.000000e+00, float %355, !dbg !40
  %357 = fmul float %352, %356, !dbg !41
  %358 = fadd float %337, %357, !dbg !42
  %359 = fadd float %342, %348, !dbg !43
  %360 = fmul float %352, %352, !dbg !44
  %361 = fmul float %332, %360, !dbg !45
  %362 = fmul float %356, %361, !dbg !46
  %363 = fadd float %359, %362, !dbg !47
  %364 = bitcast float %358 to i32, !dbg !48
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !48
  %366 = bitcast i32 %365 to float, !dbg !48
  %367 = bitcast float %363 to i32, !dbg !48
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !48
  %369 = bitcast i32 %368 to float, !dbg !48
  %370 = bitcast float %353 to i32, !dbg !48
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 2, i32 31), !dbg !48
  %372 = bitcast i32 %371 to float, !dbg !48
  %373 = fsub float %366, %358, !dbg !34
  %374 = fadd float %353, %372, !dbg !37
  %375 = fcmp oeq float %374, 0.000000e+00, !dbg !38
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float %374) #5, !dbg !39
  %377 = select i1 %375, float 0.000000e+00, float %376, !dbg !40
  %378 = fmul float %373, %377, !dbg !41
  %379 = fadd float %358, %378, !dbg !42
  %380 = fadd float %363, %369, !dbg !43
  %381 = fmul float %373, %373, !dbg !44
  %382 = fmul float %353, %381, !dbg !45
  %383 = fmul float %377, %382, !dbg !46
  %384 = fadd float %380, %383, !dbg !47
  %385 = bitcast float %379 to i32, !dbg !48
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !48
  %387 = bitcast i32 %386 to float, !dbg !48
  %388 = bitcast float %384 to i32, !dbg !48
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !48
  %390 = bitcast i32 %389 to float, !dbg !48
  %391 = bitcast float %374 to i32, !dbg !48
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 1, i32 31), !dbg !48
  %393 = bitcast i32 %392 to float, !dbg !48
  %394 = fsub float %387, %379, !dbg !34
  %395 = fadd float %374, %393, !dbg !37
  %396 = fcmp oeq float %395, 0.000000e+00, !dbg !38
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float %395) #5, !dbg !39
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !40
  %399 = fmul float %394, %398, !dbg !41
  %400 = fadd float %379, %399, !dbg !42
  %401 = fadd float %384, %390, !dbg !43
  %402 = fmul float %394, %394, !dbg !44
  %403 = fmul float %374, %402, !dbg !45
  %404 = fmul float %398, %403, !dbg !46
  %405 = fadd float %401, %404, !dbg !47
  %406 = and i32 %8, 15, !dbg !48
  %407 = icmp eq i32 %406, 0, !dbg !48
  %408 = and i1 %315, %407, !dbg !48
  %409 = bitcast float %400 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %409, i1 %408) #5, !dbg !48
  %410 = bitcast float %405 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %410, i1 %408) #5, !dbg !48
  %411 = bitcast float %395 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %411, i1 %408) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %412 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %413 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !48
  %414 = sext i32 %6 to i64, !dbg !49
  %415 = getelementptr float, ptr addrspace(1) %1, i64 %414, !dbg !49
  %urem = and i32 %8, 511, !dbg !50
  %416 = icmp eq i32 %urem, 0, !dbg !50
  %417 = and i1 %416, %7, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %412, ptr addrspace(1) %415, i1 %417) #5, !dbg !50
  %418 = getelementptr float, ptr addrspace(1) %2, i64 %414, !dbg !51
  %419 = bitcast float %413 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %419, ptr addrspace(1) %418, i1 %417) #5, !dbg !52
  %420 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %413, float 8.192000e+03) #5, !dbg !53
  %421 = fadd float %420, 0x3EE4F8B580000000, !dbg !54
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i = icmp eq i32 %422, 0, !dbg !55
  br i1 %.not.i, label %425, label %423, !dbg !55

423:                                              ; preds = %.peel.next
  %424 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %421), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

425:                                              ; preds = %.peel.next
  %426 = tail call float @llvm.nvvm.rsqrt.approx.f(float %421), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %423, %425
  %.0.i = phi float [ %424, %423 ], [ %426, %425 ], !dbg !55
  %427 = getelementptr float, ptr addrspace(1) %3, i64 %414, !dbg !56
  %428 = bitcast float %.0.i to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %427, i1 %417) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chsas5udgfozlirpqs4edjzz55bhiq3ir35amfybntweckghtz2r.py", directory: "inductor_cache/hs")
!4 = !{ptr @triton_red_fused_native_group_norm_15, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_native_group_norm_15, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_native_group_norm_15", linkageName: "triton_red_fused_native_group_norm_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 37, column: 62, scope: !7)
!17 = !DILocation(line: 37, column: 51, scope: !7)
!18 = !DILocation(line: 37, column: 56, scope: !7)
!19 = !DILocation(line: 37, column: 34, scope: !7)
!20 = !DILocation(line: 37, column: 67, scope: !7)
!21 = !DILocation(line: 42, column: 60, scope: !7)
!22 = !DILocation(line: 44, column: 64, scope: !7)
!23 = !DILocation(line: 184, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 40, column: 51, scope: !7)
!27 = !DILocation(line: 183, column: 24, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 185, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 185, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 186, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 186, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 186, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 43, column: 56, scope: !7)
!34 = !DILocation(line: 192, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!36 = !DILocation(line: 46, column: 41, scope: !7)
!37 = !DILocation(line: 193, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 194, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 194, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 194, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 196, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 196, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 197, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 197, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 197, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 197, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 197, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 204, column: 46, scope: !24, inlinedAt: !36)
!49 = !DILocation(line: 51, column: 25, scope: !7)
!50 = !DILocation(line: 51, column: 36, scope: !7)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 52, column: 36, scope: !7)
!53 = !DILocation(line: 54, column: 18, scope: !7)
!54 = !DILocation(line: 56, column: 18, scope: !7)
!55 = !DILocation(line: 57, column: 27, scope: !7)
!56 = !DILocation(line: 58, column: 25, scope: !7)
!57 = !DILocation(line: 58, column: 36, scope: !7)
!58 = !DILocation(line: 58, column: 4, scope: !7)
