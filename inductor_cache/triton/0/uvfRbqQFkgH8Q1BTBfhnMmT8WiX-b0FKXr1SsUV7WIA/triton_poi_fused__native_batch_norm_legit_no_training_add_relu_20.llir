; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 126, !dbg !12
  %16 = and i32 %13, 127, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = or disjoint i32 %12, %16, !dbg !13
  %19 = icmp slt i32 %17, 128, !dbg !14
  %20 = icmp slt i32 %18, 128, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 1, !dbg !16
  %23 = lshr i32 %13, 6, !dbg !17
  %.lobit = and i32 %23, 1, !dbg !17
  %24 = or disjoint i32 %22, %.lobit, !dbg !18
  %25 = icmp slt i32 %24, 64, !dbg !19
  %26 = icmp slt i32 %22, 64, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %27 = sdiv i32 %.frozen, 32, !dbg !20
  %28 = mul i32 %27, 32, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen3 = freeze i32 %18, !dbg !20
  %29 = sdiv i32 %.frozen3, 32, !dbg !20
  %30 = mul i32 %29, 32, !dbg !21
  %.decomposed4 = sub i32 %.frozen3, %30, !dbg !21
  %31 = shl i32 %24, 5, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = shl i32 %27, 11, !dbg !24
  %34 = add i32 %32, %33, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = and i1 %19, %25, !dbg !27
  %38 = and i1 %26, %20, !dbg !27
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %37) #4, !dbg !28
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !28
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !28
  %42 = and i32 %14, 254, !dbg !28
  %43 = lshr i32 %14, 6, !dbg !28
  %44 = and i32 %43, 2, !dbg !28
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %44, !dbg !28
  %46 = getelementptr inbounds float, ptr addrspace(3) %45, i32 %42, !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %46, i32 %40, i32 %41, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !28
  %48 = load float, ptr addrspace(3) %47, align 4, !dbg !28
  %49 = getelementptr inbounds i8, ptr addrspace(3) %47, i32 520, !dbg !28
  %50 = load float, ptr addrspace(3) %49, align 4, !dbg !28
  %51 = sext i32 %.decomposed4 to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %20) #4, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %20) #4, !dbg !32
  %56 = bitcast i32 %55 to float, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %20) #4, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %20) #4, !dbg !36
  %61 = shl nsw i32 %.decomposed4, 6, !dbg !37
  %62 = shl i32 %29, 13, !dbg !38
  %63 = add i32 %61, %22, !dbg !39
  %64 = add i32 %63, 6144, !dbg !40
  %65 = add i32 %64, %62, !dbg !41
  %66 = sext i32 %65 to i64, !dbg !42
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !42
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %38) #4, !dbg !43
  %69 = fadd float %56, 0x3EE4F8B580000000, !dbg !44
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %70, 0, !dbg !45
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %71, 0, !dbg !45
  br i1 %.not.i, label %77, label %72, !dbg !45

72:                                               ; preds = %10
  br i1 %.not1.i, label %75, label %73, !dbg !45

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

77:                                               ; preds = %10
  br i1 %.not1.i, label %80, label %78, !dbg !45

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !45
  %82 = bitcast i32 %53 to float, !dbg !30
  %83 = fsub float %50, %82, !dbg !46
  %84 = fsub float %48, %82, !dbg !46
  %85 = extractvalue { i32, i32 } %68, 1, !dbg !43
  %86 = bitcast i32 %85 to float, !dbg !43
  %87 = extractvalue { i32, i32 } %68, 0, !dbg !43
  %88 = bitcast i32 %87 to float, !dbg !43
  %89 = bitcast i32 %60 to float, !dbg !36
  %90 = bitcast i32 %58 to float, !dbg !34
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !47
  %92 = fmul float %84, %91, !dbg !48
  %93 = fmul float %83, %91, !dbg !48
  %94 = fmul float %92, %90, !dbg !49
  %95 = fmul float %93, %90, !dbg !49
  %96 = fadd float %94, %89, !dbg !50
  %97 = fadd float %95, %89, !dbg !50
  %98 = fcmp olt float %96, 0.000000e+00, !dbg !51
  %99 = fcmp olt float %97, 0.000000e+00, !dbg !51
  %100 = select i1 %98, float 0.000000e+00, float %96, !dbg !55
  %101 = select i1 %99, float 0.000000e+00, float %97, !dbg !55
  %102 = fadd float %100, %88, !dbg !56
  %103 = fadd float %101, %86, !dbg !56
  %104 = add i32 %63, %62, !dbg !57
  %105 = sext i32 %104 to i64, !dbg !58
  %106 = getelementptr float, ptr addrspace(1) %6, i64 %105, !dbg !58
  %107 = bitcast float %100 to i32, !dbg !59
  %108 = bitcast float %101 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %107, i32 %108, ptr addrspace(1) %106, i1 %38) #4, !dbg !59
  %109 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %110 = bitcast float %102 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %110, i1 true) #4, !dbg !61
  %111 = bitcast float %103 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %111, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %.extract = load i32, ptr addrspace(3) %46, align 8, !dbg !61
  %112 = getelementptr inbounds i8, ptr addrspace(3) %46, i32 4, !dbg !61
  %.extract2 = load i32, ptr addrspace(3) %112, align 4, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %109, i1 %37) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbn65sa2g7vs66mfkvakocc4bntguzcbgtsqg56noybo4odbaqn3.py", directory: "inductor_cache/bn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 48, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 61, scope: !7)
!28 = !DILocation(line: 31, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 46, scope: !7)
!38 = !DILocation(line: 36, column: 56, scope: !7)
!39 = !DILocation(line: 36, column: 38, scope: !7)
!40 = !DILocation(line: 36, column: 43, scope: !7)
!41 = !DILocation(line: 36, column: 51, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 61, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 26, scope: !7)
!46 = !DILocation(line: 37, column: 18, scope: !7)
!47 = !DILocation(line: 42, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 38, scope: !7)
!58 = !DILocation(line: 51, column: 25, scope: !7)
!59 = !DILocation(line: 51, column: 55, scope: !7)
!60 = !DILocation(line: 52, column: 25, scope: !7)
!61 = !DILocation(line: 52, column: 55, scope: !7)
!62 = !DILocation(line: 52, column: 4, scope: !7)
