; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 7, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = srem i32 %18, 128, !dbg !15
  %20 = mul i32 %18, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %.frozen1 = freeze i32 %17, !dbg !17
  %21 = sdiv i32 %.frozen1, 8192, !dbg !17
  %22 = sext i32 %19 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %9, i64 %22, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !27
  %34 = icmp slt i32 %19, 32, !dbg !28
  %35 = mul i32 %21, 8192, !dbg !29
  %srem.decomposed = sub i32 %.frozen1, %35, !dbg !29
  %36 = shl nsw i32 %21, 11, !dbg !30
  %37 = add nsw i32 %36, %srem.decomposed, !dbg !31
  %38 = sext i32 %37 to i64, !dbg !32
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !32
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %34, i32 0, i1 %34) #3, !dbg !33
  %41 = and i32 %19, -32, !dbg !34
  %42 = icmp eq i32 %41, 32, !dbg !34
  %43 = shl nsw i32 %19, 6, !dbg !35
  %44 = add nsw i32 %36, %.decomposed, !dbg !35
  %45 = add nsw i32 %44, -2048, !dbg !36
  %46 = add nsw i32 %45, %43, !dbg !37
  %47 = sext i32 %46 to i64, !dbg !38
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !38
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %42, i32 0, i1 %42) #3, !dbg !39
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !40
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %42, i32 0, i1 %42) #3, !dbg !41
  %52 = icmp eq i32 %41, 64, !dbg !42
  %53 = add nsw i32 %44, -4096, !dbg !43
  %54 = add nsw i32 %53, %43, !dbg !44
  %55 = sext i32 %54 to i64, !dbg !45
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !45
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %52, i32 0, i1 %52) #3, !dbg !46
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !47
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %52, i32 0, i1 %52) #3, !dbg !48
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !49
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %52, i32 0, i1 %52) #3, !dbg !50
  %62 = icmp sgt i32 %19, 95, !dbg !51
  %63 = add nsw i32 %44, -6144, !dbg !52
  %64 = add nsw i32 %63, %43, !dbg !53
  %65 = sext i32 %64 to i64, !dbg !54
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !54
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %62, i32 0, i1 %62) #3, !dbg !55
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !56
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %62, i32 0, i1 %62) #3, !dbg !57
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !58
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %62, i32 0, i1 %62) #3, !dbg !59
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !60
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %62, i32 0, i1 %62) #3, !dbg !61
  %74 = fadd float %27, 0x3EE4F8B580000000, !dbg !62
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i = icmp eq i32 %75, 0, !dbg !63
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i = icmp eq i32 %76, 0, !dbg !63
  br i1 %.not.i, label %82, label %77, !dbg !63

77:                                               ; preds = %12
  br i1 %.not1.i, label %80, label %78, !dbg !63

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

82:                                               ; preds = %12
  br i1 %.not1.i, label %85, label %83, !dbg !63

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !63
  %87 = bitcast i32 %40 to float, !dbg !33
  %88 = bitcast i32 %49 to float, !dbg !39
  %89 = bitcast i32 %51 to float, !dbg !41
  %90 = fadd float %88, %89, !dbg !64
  %91 = bitcast i32 %59 to float, !dbg !48
  %92 = bitcast i32 %61 to float, !dbg !50
  %93 = fadd float %91, %92, !dbg !65
  %94 = bitcast i32 %57 to float, !dbg !46
  %95 = fadd float %93, %94, !dbg !66
  %96 = bitcast i32 %71 to float, !dbg !59
  %97 = bitcast i32 %73 to float, !dbg !61
  %98 = fadd float %96, %97, !dbg !67
  %99 = bitcast i32 %69 to float, !dbg !57
  %100 = fadd float %98, %99, !dbg !68
  %101 = bitcast i32 %67 to float, !dbg !55
  %102 = fadd float %100, %101, !dbg !69
  %103 = select i1 %62, float %102, float 0.000000e+00, !dbg !70
  %104 = select i1 %52, float %95, float %103, !dbg !71
  %105 = select i1 %42, float %90, float %104, !dbg !71
  %106 = select i1 %34, float %87, float %105, !dbg !72
  %107 = bitcast i32 %24 to float, !dbg !19
  %108 = fsub float %106, %107, !dbg !73
  %109 = bitcast i32 %33 to float, !dbg !27
  %110 = bitcast i32 %31 to float, !dbg !25
  %111 = bitcast i32 %29 to float, !dbg !23
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !74
  %113 = fmul float %108, %112, !dbg !75
  %114 = fmul float %113, %111, !dbg !76
  %115 = fadd float %114, %110, !dbg !77
  %116 = fcmp ogt float %115, 0.000000e+00, !dbg !78
  %117 = fmul float %115, %109, !dbg !79
  %118 = select i1 %116, float %115, float %117, !dbg !80
  %119 = sext i32 %17 to i64, !dbg !81
  %120 = getelementptr float, ptr addrspace(1) %10, i64 %119, !dbg !81
  %121 = bitcast float %106 to i32, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %120, i1 true) #3, !dbg !82
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !83
  %123 = bitcast float %118 to i32, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %122, i1 true) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqyunan7bakvc7ec4lr53boakem5mbyveuixs32ggipud6rljqkh.py", directory: "inductor_cache/qy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 50, scope: !7)
!31 = !DILocation(line: 38, column: 45, scope: !7)
!32 = !DILocation(line: 38, column: 30, scope: !7)
!33 = !DILocation(line: 38, column: 55, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 40, scope: !7)
!36 = !DILocation(line: 43, column: 36, scope: !7)
!37 = !DILocation(line: 43, column: 54, scope: !7)
!38 = !DILocation(line: 43, column: 31, scope: !7)
!39 = !DILocation(line: 43, column: 64, scope: !7)
!40 = !DILocation(line: 44, column: 31, scope: !7)
!41 = !DILocation(line: 44, column: 64, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 36, scope: !7)
!44 = !DILocation(line: 52, column: 54, scope: !7)
!45 = !DILocation(line: 52, column: 31, scope: !7)
!46 = !DILocation(line: 52, column: 64, scope: !7)
!47 = !DILocation(line: 53, column: 31, scope: !7)
!48 = !DILocation(line: 53, column: 64, scope: !7)
!49 = !DILocation(line: 54, column: 31, scope: !7)
!50 = !DILocation(line: 54, column: 64, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 36, scope: !7)
!53 = !DILocation(line: 62, column: 54, scope: !7)
!54 = !DILocation(line: 62, column: 31, scope: !7)
!55 = !DILocation(line: 62, column: 64, scope: !7)
!56 = !DILocation(line: 63, column: 31, scope: !7)
!57 = !DILocation(line: 63, column: 64, scope: !7)
!58 = !DILocation(line: 64, column: 31, scope: !7)
!59 = !DILocation(line: 64, column: 64, scope: !7)
!60 = !DILocation(line: 65, column: 31, scope: !7)
!61 = !DILocation(line: 65, column: 64, scope: !7)
!62 = !DILocation(line: 76, column: 20, scope: !7)
!63 = !DILocation(line: 77, column: 27, scope: !7)
!64 = !DILocation(line: 45, column: 20, scope: !7)
!65 = !DILocation(line: 55, column: 20, scope: !7)
!66 = !DILocation(line: 56, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 35, scope: !7)
!71 = !DILocation(line: 0, scope: !7)
!72 = !DILocation(line: 73, column: 33, scope: !7)
!73 = !DILocation(line: 74, column: 20, scope: !7)
!74 = !DILocation(line: 79, column: 20, scope: !7)
!75 = !DILocation(line: 82, column: 20, scope: !7)
!76 = !DILocation(line: 83, column: 20, scope: !7)
!77 = !DILocation(line: 84, column: 20, scope: !7)
!78 = !DILocation(line: 86, column: 20, scope: !7)
!79 = !DILocation(line: 87, column: 20, scope: !7)
!80 = !DILocation(line: 88, column: 35, scope: !7)
!81 = !DILocation(line: 89, column: 25, scope: !7)
!82 = !DILocation(line: 89, column: 37, scope: !7)
!83 = !DILocation(line: 90, column: 28, scope: !7)
!84 = !DILocation(line: 90, column: 40, scope: !7)
!85 = !DILocation(line: 90, column: 4, scope: !7)
