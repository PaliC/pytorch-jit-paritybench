; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 40960, !dbg !14
  %17 = sdiv i32 %15, 40960, !dbg !14
  %18 = srem i32 %14, 2560, !dbg !15
  %19 = srem i32 %15, 2560, !dbg !15
  %20 = srem i32 %14, 160, !dbg !16
  %21 = srem i32 %15, 160, !dbg !16
  %22 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !17
  %23 = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %24 = sdiv <2 x i32> %23, <i32 2560, i32 160>, !dbg !17
  %25 = srem <2 x i32> %24, splat (i32 16), !dbg !18
  %26 = add nsw <2 x i32> %25, splat (i32 -4), !dbg !19
  %shift = shufflevector <2 x i32> %26, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %27 = or <2 x i32> %26, %shift, !dbg !20
  %28 = extractelement <2 x i32> %27, i64 0, !dbg !20
  %29 = icmp ult i32 %28, 8, !dbg !20
  %30 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !17
  %31 = shufflevector <2 x i32> %30, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %32 = sdiv <2 x i32> %31, <i32 2560, i32 160>, !dbg !17
  %33 = srem <2 x i32> %32, splat (i32 16), !dbg !18
  %34 = add nsw <2 x i32> %33, splat (i32 -4), !dbg !19
  %shift36 = shufflevector <2 x i32> %34, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %35 = or <2 x i32> %34, %shift36, !dbg !20
  %36 = extractelement <2 x i32> %35, i64 0, !dbg !20
  %37 = icmp ult i32 %36, 8, !dbg !20
  %38 = add nsw i32 %18, -5760, !dbg !21
  %39 = add nsw i32 %19, -5760, !dbg !21
  %40 = extractelement <2 x i32> %25, i64 0, !dbg !22
  %41 = mul nsw i32 %40, 1280, !dbg !22
  %42 = extractelement <2 x i32> %33, i64 0, !dbg !22
  %43 = mul nsw i32 %42, 1280, !dbg !22
  %44 = mul nsw i32 %16, 10240, !dbg !23
  %45 = mul nsw i32 %17, 10240, !dbg !23
  %46 = add nsw i32 %38, %44, !dbg !24
  %47 = add nsw i32 %46, %41, !dbg !25
  %48 = add nsw i32 %39, %45, !dbg !24
  %49 = add nsw i32 %48, %43, !dbg !25
  %50 = sext i32 %47 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !26
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !29
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !29
  %60 = sext i32 %20 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !30
  %62 = sext i32 %21 to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !30
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !32
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !33
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !33
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !33
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !33
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !33
  %73 = bitcast i32 %69 to float, !dbg !33
  %74 = bitcast i32 %70 to float, !dbg !33
  %75 = bitcast i32 %71 to float, !dbg !33
  %76 = bitcast i32 %72 to float, !dbg !33
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !33
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !33
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !33
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !33
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !33
  %82 = bitcast i32 %78 to float, !dbg !33
  %83 = bitcast i32 %79 to float, !dbg !33
  %84 = bitcast i32 %80 to float, !dbg !33
  %85 = bitcast i32 %81 to float, !dbg !33
  %86 = fadd float %73, 0x3EE4F8B580000000, !dbg !34
  %87 = fadd float %74, 0x3EE4F8B580000000, !dbg !34
  %88 = fadd float %75, 0x3EE4F8B580000000, !dbg !34
  %89 = fadd float %76, 0x3EE4F8B580000000, !dbg !34
  %90 = fadd float %82, 0x3EE4F8B580000000, !dbg !34
  %91 = fadd float %83, 0x3EE4F8B580000000, !dbg !34
  %92 = fadd float %84, 0x3EE4F8B580000000, !dbg !34
  %93 = fadd float %85, 0x3EE4F8B580000000, !dbg !34
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %94, 0, !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %95, 0, !dbg !35
  br i1 %.not.i, label %101, label %96, !dbg !35

96:                                               ; preds = %8
  br i1 %.not1.i, label %99, label %97, !dbg !35

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

101:                                              ; preds = %8
  br i1 %.not1.i, label %104, label %102, !dbg !35

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %97, %99, %102, %104
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %106, 0, !dbg !35
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %107, 0, !dbg !35
  br i1 %.not.i1, label %113, label %108, !dbg !35

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %111, label %109, !dbg !35

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %116, label %114, !dbg !35

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %109, %111, %114, %116
  %.0.i3 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !35
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %118, 0, !dbg !35
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %119, 0, !dbg !35
  br i1 %.not.i6, label %125, label %120, !dbg !35

120:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %123, label %121, !dbg !35

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

125:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %128, label %126, !dbg !35

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %121, %123, %126, %128
  %.0.i8 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !35
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %130, 0, !dbg !35
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %131, 0, !dbg !35
  br i1 %.not.i11, label %137, label %132, !dbg !35

132:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %135, label %133, !dbg !35

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

137:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %140, label %138, !dbg !35

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %133, %135, %138, %140
  %.0.i13 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %142, 0, !dbg !35
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i19 = icmp eq i32 %143, 0, !dbg !35
  br i1 %.not.i16, label %149, label %144, !dbg !35

144:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %147, label %145, !dbg !35

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

149:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %152, label %150, !dbg !35

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %145, %147, %150, %152
  %.0.i18 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i21 = icmp eq i32 %154, 0, !dbg !35
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i24 = icmp eq i32 %155, 0, !dbg !35
  br i1 %.not.i21, label %161, label %156, !dbg !35

156:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %159, label %157, !dbg !35

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

161:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %164, label %162, !dbg !35

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %157, %159, %162, %164
  %.0.i23 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !35
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i26 = icmp eq i32 %166, 0, !dbg !35
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i29 = icmp eq i32 %167, 0, !dbg !35
  br i1 %.not.i26, label %173, label %168, !dbg !35

168:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %171, label %169, !dbg !35

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

173:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %176, label %174, !dbg !35

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %169, %171, %174, %176
  %.0.i28 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !35
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i31 = icmp eq i32 %178, 0, !dbg !35
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i34 = icmp eq i32 %179, 0, !dbg !35
  br i1 %.not.i31, label %185, label %180, !dbg !35

180:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %183, label %181, !dbg !35

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

185:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %188, label %186, !dbg !35

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %181, %183, %186, %188
  %.0.i33 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !35
  %190 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !29
  %191 = bitcast i32 %190 to float, !dbg !29
  %192 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %193 = bitcast i32 %192 to float, !dbg !31
  %194 = fsub float %191, %193, !dbg !36
  %195 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !29
  %196 = bitcast i32 %195 to float, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %198 = bitcast i32 %197 to float, !dbg !31
  %199 = fsub float %196, %198, !dbg !36
  %200 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !29
  %201 = bitcast i32 %200 to float, !dbg !29
  %202 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %203 = bitcast i32 %202 to float, !dbg !31
  %204 = fsub float %201, %203, !dbg !36
  %205 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !29
  %206 = bitcast i32 %205 to float, !dbg !29
  %207 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %208 = bitcast i32 %207 to float, !dbg !31
  %209 = fsub float %206, %208, !dbg !36
  %210 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !29
  %211 = bitcast i32 %210 to float, !dbg !29
  %212 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !31
  %213 = bitcast i32 %212 to float, !dbg !31
  %214 = fsub float %211, %213, !dbg !36
  %215 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !29
  %216 = bitcast i32 %215 to float, !dbg !29
  %217 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !31
  %218 = bitcast i32 %217 to float, !dbg !31
  %219 = fsub float %216, %218, !dbg !36
  %220 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !29
  %221 = bitcast i32 %220 to float, !dbg !29
  %222 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !31
  %223 = bitcast i32 %222 to float, !dbg !31
  %224 = fsub float %221, %223, !dbg !36
  %225 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !29
  %226 = bitcast i32 %225 to float, !dbg !29
  %227 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !31
  %228 = bitcast i32 %227 to float, !dbg !31
  %229 = fsub float %226, %228, !dbg !36
  %230 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %231 = bitcast i32 %230 to float, !dbg !27
  %232 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %233 = bitcast i32 %232 to float, !dbg !27
  %234 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %235 = bitcast i32 %234 to float, !dbg !27
  %236 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %237 = bitcast i32 %236 to float, !dbg !27
  %238 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !27
  %239 = bitcast i32 %238 to float, !dbg !27
  %240 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !27
  %241 = bitcast i32 %240 to float, !dbg !27
  %242 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !27
  %243 = bitcast i32 %242 to float, !dbg !27
  %244 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !27
  %245 = bitcast i32 %244 to float, !dbg !27
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %254 = fmul float %229, %246, !dbg !38
  %255 = fmul float %224, %247, !dbg !38
  %256 = fmul float %219, %248, !dbg !38
  %257 = fmul float %214, %249, !dbg !38
  %258 = fmul float %209, %250, !dbg !38
  %259 = fmul float %204, %251, !dbg !38
  %260 = fmul float %199, %252, !dbg !38
  %261 = fmul float %194, %253, !dbg !38
  %262 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !39
  %263 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !39
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %262, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !40
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !40
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !40
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !40
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !40
  %269 = bitcast i32 %265 to float, !dbg !40
  %270 = bitcast i32 %266 to float, !dbg !40
  %271 = bitcast i32 %267 to float, !dbg !40
  %272 = bitcast i32 %268 to float, !dbg !40
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %263, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !40
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !40
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !40
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !40
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !40
  %278 = bitcast i32 %274 to float, !dbg !40
  %279 = bitcast i32 %275 to float, !dbg !40
  %280 = bitcast i32 %276 to float, !dbg !40
  %281 = bitcast i32 %277 to float, !dbg !40
  %282 = fmul float %254, %269, !dbg !41
  %283 = fmul float %255, %270, !dbg !41
  %284 = fmul float %256, %271, !dbg !41
  %285 = fmul float %257, %272, !dbg !41
  %286 = fmul float %258, %278, !dbg !41
  %287 = fmul float %259, %279, !dbg !41
  %288 = fmul float %260, %280, !dbg !41
  %289 = fmul float %261, %281, !dbg !41
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %60, !dbg !42
  %291 = getelementptr float, ptr addrspace(1) %5, i64 %62, !dbg !42
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %290, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !43
  %293 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !43
  %294 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !43
  %295 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !43
  %296 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !43
  %297 = bitcast i32 %293 to float, !dbg !43
  %298 = bitcast i32 %294 to float, !dbg !43
  %299 = bitcast i32 %295 to float, !dbg !43
  %300 = bitcast i32 %296 to float, !dbg !43
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %291, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !43
  %302 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !43
  %303 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !43
  %304 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !43
  %305 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !43
  %306 = bitcast i32 %302 to float, !dbg !43
  %307 = bitcast i32 %303 to float, !dbg !43
  %308 = bitcast i32 %304 to float, !dbg !43
  %309 = bitcast i32 %305 to float, !dbg !43
  %310 = fadd float %282, %297, !dbg !44
  %311 = fadd float %283, %298, !dbg !44
  %312 = fadd float %284, %299, !dbg !44
  %313 = fadd float %285, %300, !dbg !44
  %314 = fadd float %286, %306, !dbg !44
  %315 = fadd float %287, %307, !dbg !44
  %316 = fadd float %288, %308, !dbg !44
  %317 = fadd float %289, %309, !dbg !44
  %318 = fadd float %310, %245, !dbg !45
  %319 = fadd float %311, %243, !dbg !45
  %320 = fadd float %312, %241, !dbg !45
  %321 = fadd float %313, %239, !dbg !45
  %322 = fadd float %314, %237, !dbg !45
  %323 = fadd float %315, %235, !dbg !45
  %324 = fadd float %316, %233, !dbg !45
  %325 = fadd float %317, %231, !dbg !45
  %326 = sext i32 %14 to i64, !dbg !46
  %327 = getelementptr float, ptr addrspace(1) %6, i64 %326, !dbg !46
  %328 = sext i32 %15 to i64, !dbg !46
  %329 = getelementptr float, ptr addrspace(1) %6, i64 %328, !dbg !46
  %330 = bitcast float %318 to i32, !dbg !47
  %331 = select i1 %29, i32 %330, i32 0, !dbg !48
  %332 = bitcast float %319 to i32, !dbg !47
  %333 = select i1 %29, i32 %332, i32 0, !dbg !48
  %334 = bitcast float %320 to i32, !dbg !47
  %335 = select i1 %29, i32 %334, i32 0, !dbg !48
  %336 = bitcast float %321 to i32, !dbg !47
  %337 = select i1 %29, i32 %336, i32 0, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %333, i32 %335, i32 %337, ptr addrspace(1) %327, i1 true) #3, !dbg !47
  %338 = bitcast float %322 to i32, !dbg !47
  %339 = select i1 %37, i32 %338, i32 0, !dbg !48
  %340 = bitcast float %323 to i32, !dbg !47
  %341 = select i1 %37, i32 %340, i32 0, !dbg !48
  %342 = bitcast float %324 to i32, !dbg !47
  %343 = select i1 %37, i32 %342, i32 0, !dbg !48
  %344 = bitcast float %325 to i32, !dbg !47
  %345 = select i1 %37, i32 %344, i32 0, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %341, i32 %343, i32 %345, ptr addrspace(1) %329, i1 true) #3, !dbg !47
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctxkasoiypehbra7aa5m4ti2y4f4c65cfp6hkrduxgknxcynrvfs.py", directory: "inductor_cache/tx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_36", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 24, column: 29, scope: !7)
!19 = !DILocation(line: 38, column: 18, scope: !7)
!20 = !DILocation(line: 40, column: 19, scope: !7)
!21 = !DILocation(line: 41, column: 41, scope: !7)
!22 = !DILocation(line: 41, column: 51, scope: !7)
!23 = !DILocation(line: 41, column: 62, scope: !7)
!24 = !DILocation(line: 41, column: 46, scope: !7)
!25 = !DILocation(line: 41, column: 56, scope: !7)
!26 = !DILocation(line: 41, column: 31, scope: !7)
!27 = !DILocation(line: 41, column: 67, scope: !7)
!28 = !DILocation(line: 42, column: 31, scope: !7)
!29 = !DILocation(line: 42, column: 67, scope: !7)
!30 = !DILocation(line: 43, column: 31, scope: !7)
!31 = !DILocation(line: 43, column: 36, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 27, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 31, scope: !7)
!40 = !DILocation(line: 54, column: 36, scope: !7)
!41 = !DILocation(line: 55, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 31, scope: !7)
!43 = !DILocation(line: 56, column: 36, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 25, scope: !7)
!47 = !DILocation(line: 61, column: 37, scope: !7)
!48 = !DILocation(line: 60, column: 35, scope: !7)
!49 = !DILocation(line: 61, column: 4, scope: !7)
