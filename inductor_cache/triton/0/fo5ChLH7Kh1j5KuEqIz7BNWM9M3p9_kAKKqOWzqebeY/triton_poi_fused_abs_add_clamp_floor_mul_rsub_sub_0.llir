; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_abs_add_clamp_floor_mul_rsub_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 62, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 64, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 16, !dbg !15
  %16 = mul i32 %15, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = sext i32 %.decomposed to i64, !dbg !17
  %18 = add nsw i64 %17, 16, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %14) #3, !dbg !19
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %23 = shl i32 %15, 5, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %25, i64 %24, !dbg !22
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %14) #3, !dbg !23
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !23
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %31 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !25
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %14) #3, !dbg !26
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %36, i64 %24, !dbg !27
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %14) #3, !dbg !28
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !28
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !28
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %43 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !19
  %44 = insertelement <2 x i32> %43, i32 %34, i64 1, !dbg !19
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !19
  %46 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !23
  %47 = insertelement <2 x i32> %46, i32 %39, i64 1, !dbg !23
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !23
  %49 = fadd <2 x float> %45, %48, !dbg !30
  %50 = extractelement <2 x float> %49, i64 0, !dbg !24
  %51 = tail call float @llvm.nvvm.floor.ftz.f(float %50), !dbg !24
  %52 = tail call float @llvm.nvvm.floor.f(float %50), !dbg !24
  %53 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !24
  %54 = insertelement <2 x i32> %53, i32 %41, i64 1, !dbg !24
  %55 = icmp eq <2 x i32> %54, zeroinitializer, !dbg !24
  %56 = extractelement <2 x float> %49, i64 1, !dbg !29
  %57 = tail call float @llvm.nvvm.floor.ftz.f(float %56), !dbg !29
  %58 = tail call float @llvm.nvvm.floor.f(float %56), !dbg !29
  %59 = insertelement <2 x float> poison, float %52, i64 0, !dbg !24
  %60 = insertelement <2 x float> %59, float %58, i64 1, !dbg !24
  %61 = insertelement <2 x float> poison, float %51, i64 0, !dbg !24
  %62 = insertelement <2 x float> %61, float %57, i64 1, !dbg !24
  %63 = select <2 x i1> %55, <2 x float> %60, <2 x float> %62, !dbg !24
  %64 = fadd <2 x float> %63, splat (float 1.000000e+00), !dbg !31
  %65 = fcmp ole <2 x float> %64, zeroinitializer, !dbg !32
  %66 = select <2 x i1> %65, <2 x float> zeroinitializer, <2 x float> %64, !dbg !32
  %67 = fcmp olt <2 x float> %66, splat (float 3.000000e+00), !dbg !36
  %68 = fcmp uno <2 x float> %66, zeroinitializer, !dbg !38
  %69 = or <2 x i1> %67, %68, !dbg !39
  %70 = select <2 x i1> %69, <2 x float> %66, <2 x float> splat (float 3.000000e+00), !dbg !40
  %71 = fsub <2 x float> %49, %70, !dbg !41
  %72 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %71), !dbg !42
  %73 = fsub <2 x float> splat (float 1.000000e+00), %72, !dbg !43
  %74 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !19
  %75 = insertelement <2 x i32> %74, i32 %35, i64 1, !dbg !19
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !19
  %77 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !23
  %78 = insertelement <2 x i32> %77, i32 %40, i64 1, !dbg !23
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !23
  %80 = fadd <2 x float> %76, %79, !dbg !30
  %81 = extractelement <2 x float> %80, i64 0, !dbg !24
  %82 = tail call float @llvm.nvvm.floor.ftz.f(float %81), !dbg !24
  %83 = tail call float @llvm.nvvm.floor.f(float %81), !dbg !24
  %84 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !24
  %85 = insertelement <2 x i32> %84, i32 %42, i64 1, !dbg !24
  %86 = icmp eq <2 x i32> %85, zeroinitializer, !dbg !24
  %87 = extractelement <2 x float> %80, i64 1, !dbg !29
  %88 = tail call float @llvm.nvvm.floor.ftz.f(float %87), !dbg !29
  %89 = tail call float @llvm.nvvm.floor.f(float %87), !dbg !29
  %90 = insertelement <2 x float> poison, float %83, i64 0, !dbg !24
  %91 = insertelement <2 x float> %90, float %89, i64 1, !dbg !24
  %92 = insertelement <2 x float> poison, float %82, i64 0, !dbg !24
  %93 = insertelement <2 x float> %92, float %88, i64 1, !dbg !24
  %94 = select <2 x i1> %86, <2 x float> %91, <2 x float> %93, !dbg !24
  %95 = fadd <2 x float> %94, splat (float 1.000000e+00), !dbg !31
  %96 = fcmp ole <2 x float> %95, zeroinitializer, !dbg !32
  %97 = select <2 x i1> %96, <2 x float> zeroinitializer, <2 x float> %95, !dbg !32
  %98 = fcmp olt <2 x float> %97, splat (float 3.000000e+00), !dbg !36
  %99 = fcmp uno <2 x float> %97, zeroinitializer, !dbg !38
  %100 = or <2 x i1> %98, %99, !dbg !39
  %101 = select <2 x i1> %100, <2 x float> %97, <2 x float> splat (float 3.000000e+00), !dbg !40
  %102 = fsub <2 x float> %80, %101, !dbg !41
  %103 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %102), !dbg !42
  %104 = fsub <2 x float> splat (float 1.000000e+00), %103, !dbg !43
  %105 = extractelement <2 x float> %73, i64 0, !dbg !44
  %106 = extractelement <2 x float> %73, i64 1, !dbg !45
  %107 = fmul float %105, %106, !dbg !46
  %108 = extractelement <2 x float> %104, i64 0, !dbg !44
  %109 = extractelement <2 x float> %104, i64 1, !dbg !45
  %110 = fmul float %108, %109, !dbg !46
  %111 = fcmp ole <2 x float> %63, zeroinitializer, !dbg !47
  %112 = select <2 x i1> %111, <2 x float> zeroinitializer, <2 x float> %63, !dbg !47
  %113 = fcmp olt <2 x float> %112, splat (float 3.000000e+00), !dbg !49
  %114 = fcmp uno <2 x float> %112, zeroinitializer, !dbg !51
  %115 = or <2 x i1> %113, %114, !dbg !52
  %116 = select <2 x i1> %115, <2 x float> %112, <2 x float> splat (float 3.000000e+00), !dbg !53
  %117 = fsub <2 x float> %49, %116, !dbg !54
  %118 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %117), !dbg !55
  %119 = fsub <2 x float> splat (float 1.000000e+00), %118, !dbg !56
  %120 = extractelement <2 x float> %119, i64 1, !dbg !57
  %121 = fmul float %105, %120, !dbg !44
  %122 = fcmp ole <2 x float> %94, zeroinitializer, !dbg !47
  %123 = select <2 x i1> %122, <2 x float> zeroinitializer, <2 x float> %94, !dbg !47
  %124 = fcmp olt <2 x float> %123, splat (float 3.000000e+00), !dbg !49
  %125 = fcmp uno <2 x float> %123, zeroinitializer, !dbg !51
  %126 = or <2 x i1> %124, %125, !dbg !52
  %127 = select <2 x i1> %126, <2 x float> %123, <2 x float> splat (float 3.000000e+00), !dbg !53
  %128 = fsub <2 x float> %80, %127, !dbg !54
  %129 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %128), !dbg !55
  %130 = fsub <2 x float> splat (float 1.000000e+00), %129, !dbg !56
  %131 = extractelement <2 x float> %130, i64 1, !dbg !57
  %132 = fmul float %108, %131, !dbg !44
  %133 = extractelement <2 x float> %119, i64 0, !dbg !57
  %134 = fmul float %133, %106, !dbg !45
  %135 = extractelement <2 x float> %130, i64 0, !dbg !57
  %136 = fmul float %135, %109, !dbg !45
  %137 = fmul float %133, %120, !dbg !57
  %138 = fmul float %135, %131, !dbg !57
  %139 = shl i32 %15, 6, !dbg !58
  %140 = add i32 %139, %.decomposed, !dbg !59
  %141 = sext i32 %140 to i64, !dbg !60
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !60
  %143 = bitcast float %107 to i32, !dbg !61
  %144 = bitcast float %110 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %144, ptr addrspace(1) %142, i1 %14) #3, !dbg !61
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !62
  %146 = bitcast float %121 to i32, !dbg !63
  %147 = bitcast float %132 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %145, i1 %14) #3, !dbg !63
  %148 = getelementptr float, ptr addrspace(1) %4, i64 %141, !dbg !64
  %149 = bitcast float %134 to i32, !dbg !65
  %150 = bitcast float %136 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %149, i32 %150, ptr addrspace(1) %148, i1 %14) #3, !dbg !65
  %151 = getelementptr float, ptr addrspace(1) %5, i64 %141, !dbg !66
  %152 = bitcast float %137 to i32, !dbg !67
  %153 = bitcast float %138 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %152, i32 %153, ptr addrspace(1) %151, i1 %14) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cimqvpx3tgurczlfs6gkfpjrdvzygrbfsssjuaijdsvn7lwniylw.py", directory: "inductor_cache/im")
!4 = !{ptr @triton_poi_fused_abs_add_clamp_floor_mul_rsub_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_abs_add_clamp_floor_mul_rsub_sub_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_abs_add_clamp_floor_mul_rsub_sub_0", linkageName: "triton_poi_fused_abs_add_clamp_floor_mul_rsub_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 35, scope: !7)
!18 = !DILocation(line: 30, column: 30, scope: !7)
!19 = !DILocation(line: 30, column: 45, scope: !7)
!20 = !DILocation(line: 31, column: 48, scope: !7)
!21 = !DILocation(line: 31, column: 45, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 53, scope: !7)
!24 = !DILocation(line: 33, column: 27, scope: !7)
!25 = !DILocation(line: 45, column: 31, scope: !7)
!26 = !DILocation(line: 45, column: 47, scope: !7)
!27 = !DILocation(line: 46, column: 31, scope: !7)
!28 = !DILocation(line: 46, column: 55, scope: !7)
!29 = !DILocation(line: 48, column: 28, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 37, column: 41, scope: !7)
!36 = !DILocation(line: 110, column: 15, scope: !33, inlinedAt: !37)
!37 = !DILocation(line: 39, column: 42, scope: !7)
!38 = !DILocation(line: 112, column: 21, scope: !33, inlinedAt: !37)
!39 = !DILocation(line: 112, column: 16, scope: !33, inlinedAt: !37)
!40 = !DILocation(line: 113, column: 29, scope: !33, inlinedAt: !37)
!41 = !DILocation(line: 40, column: 19, scope: !7)
!42 = !DILocation(line: 41, column: 24, scope: !7)
!43 = !DILocation(line: 42, column: 19, scope: !7)
!44 = !DILocation(line: 61, column: 20, scope: !7)
!45 = !DILocation(line: 67, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !48)
!48 = !DILocation(line: 62, column: 41, scope: !7)
!49 = !DILocation(line: 110, column: 15, scope: !33, inlinedAt: !50)
!50 = !DILocation(line: 63, column: 42, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !33, inlinedAt: !50)
!52 = !DILocation(line: 112, column: 16, scope: !33, inlinedAt: !50)
!53 = !DILocation(line: 113, column: 29, scope: !33, inlinedAt: !50)
!54 = !DILocation(line: 64, column: 19, scope: !7)
!55 = !DILocation(line: 65, column: 24, scope: !7)
!56 = !DILocation(line: 66, column: 19, scope: !7)
!57 = !DILocation(line: 68, column: 20, scope: !7)
!58 = !DILocation(line: 69, column: 33, scope: !7)
!59 = !DILocation(line: 69, column: 30, scope: !7)
!60 = !DILocation(line: 69, column: 25, scope: !7)
!61 = !DILocation(line: 69, column: 45, scope: !7)
!62 = !DILocation(line: 70, column: 25, scope: !7)
!63 = !DILocation(line: 70, column: 45, scope: !7)
!64 = !DILocation(line: 71, column: 25, scope: !7)
!65 = !DILocation(line: 71, column: 45, scope: !7)
!66 = !DILocation(line: 72, column: 25, scope: !7)
!67 = !DILocation(line: 72, column: 45, scope: !7)
!68 = !DILocation(line: 72, column: 4, scope: !7)
