; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %16 = sdiv i32 %.frozen, 128, !dbg !14
  %17 = mul i32 %16, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %17, !dbg !15
  %18 = sdiv i32 %15, 128, !dbg !14
  %19 = icmp slt i32 %.decomposed, 64, !dbg !16
  %20 = shl nsw i32 %16, 6, !dbg !17
  %21 = shl nsw i32 %18, 6, !dbg !17
  %22 = add nsw i32 %20, %.decomposed, !dbg !18
  %23 = add nsw i32 %21, %.decomposed, !dbg !18
  %24 = sext i32 %22 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !20
  %30 = icmp sgt i32 %.decomposed, 63, !dbg !21
  %31 = add nsw i32 %.decomposed, -64, !dbg !22
  %32 = add nsw i32 %20, %31, !dbg !23
  %33 = add nsw i32 %21, %31, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !25
  %40 = sext i32 %31 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !28
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = bitcast i32 %49 to float, !dbg !29
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = bitcast i32 %58 to float, !dbg !29
  %63 = fadd float %50, 0x3EE4F8B580000000, !dbg !30
  %64 = fadd float %51, 0x3EE4F8B580000000, !dbg !30
  %65 = fadd float %52, 0x3EE4F8B580000000, !dbg !30
  %66 = fadd float %53, 0x3EE4F8B580000000, !dbg !30
  %67 = fadd float %59, 0x3EE4F8B580000000, !dbg !30
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !30
  %69 = fadd float %61, 0x3EE4F8B580000000, !dbg !30
  %70 = fadd float %62, 0x3EE4F8B580000000, !dbg !30
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %71, 0, !dbg !31
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %72, 0, !dbg !31
  br i1 %.not.i, label %78, label %73, !dbg !31

73:                                               ; preds = %8
  br i1 %.not1.i, label %76, label %74, !dbg !31

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

78:                                               ; preds = %8
  br i1 %.not1.i, label %81, label %79, !dbg !31

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !31
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %83, 0, !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !31
  br i1 %.not.i1, label %90, label %85, !dbg !31

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !31

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !31

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !31
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i6 = icmp eq i32 %95, 0, !dbg !31
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i9 = icmp eq i32 %96, 0, !dbg !31
  br i1 %.not.i6, label %102, label %97, !dbg !31

97:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %100, label %98, !dbg !31

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !31

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %98, %100, %103, %105
  %.0.i8 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !31
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i11 = icmp eq i32 %107, 0, !dbg !31
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i14 = icmp eq i32 %108, 0, !dbg !31
  br i1 %.not.i11, label %114, label %109, !dbg !31

109:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %112, label %110, !dbg !31

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !31

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %110, %112, %115, %117
  %.0.i13 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !31
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i16 = icmp eq i32 %119, 0, !dbg !31
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i19 = icmp eq i32 %120, 0, !dbg !31
  br i1 %.not.i16, label %126, label %121, !dbg !31

121:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %124, label %122, !dbg !31

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

126:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %129, label %127, !dbg !31

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %122, %124, %127, %129
  %.0.i18 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !31
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i21 = icmp eq i32 %131, 0, !dbg !31
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i24 = icmp eq i32 %132, 0, !dbg !31
  br i1 %.not.i21, label %138, label %133, !dbg !31

133:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %136, label %134, !dbg !31

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

138:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %141, label %139, !dbg !31

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

__nv_sqrtf.exit25:                                ; preds = %134, %136, %139, %141
  %.0.i23 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !31
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i26 = icmp eq i32 %143, 0, !dbg !31
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i29 = icmp eq i32 %144, 0, !dbg !31
  br i1 %.not.i26, label %150, label %145, !dbg !31

145:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %148, label %146, !dbg !31

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

150:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %153, label %151, !dbg !31

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

__nv_sqrtf.exit30:                                ; preds = %146, %148, %151, %153
  %.0.i28 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !31
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i31 = icmp eq i32 %155, 0, !dbg !31
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i34 = icmp eq i32 %156, 0, !dbg !31
  br i1 %.not.i31, label %162, label %157, !dbg !31

157:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %160, label %158, !dbg !31

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

162:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %165, label %163, !dbg !31

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %158, %160, %163, %165
  %.0.i33 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !31
  %167 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %168 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %169 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %170 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %171 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %172 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %173 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %174 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %175 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %176 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %177 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %178 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %179 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %180 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %181 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %182 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %183 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %184 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %185 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %186 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %187 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %188 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %189 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %190 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !32
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !32
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !32
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !32
  %199 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !33
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !34
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !34
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !34
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !34
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !34
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !34
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !34
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !34
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !34
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !34
  %210 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !35
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %210, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !36
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !36
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !36
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !36
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !36
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %210, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !36
  %217 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !36
  %218 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !36
  %219 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !36
  %220 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !36
  %221 = insertelement <8 x i32> poison, i32 %167, i64 0, !dbg !25
  %222 = insertelement <8 x i32> %221, i32 %169, i64 1, !dbg !25
  %223 = insertelement <8 x i32> %222, i32 %171, i64 2, !dbg !25
  %224 = insertelement <8 x i32> %223, i32 %173, i64 3, !dbg !25
  %225 = insertelement <8 x i32> %224, i32 %175, i64 4, !dbg !25
  %226 = insertelement <8 x i32> %225, i32 %177, i64 5, !dbg !25
  %227 = insertelement <8 x i32> %226, i32 %179, i64 6, !dbg !25
  %228 = insertelement <8 x i32> %227, i32 %181, i64 7, !dbg !25
  %229 = bitcast <8 x i32> %228 to <8 x float>, !dbg !25
  %230 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !27
  %231 = insertelement <8 x i32> %230, i32 %170, i64 1, !dbg !27
  %232 = insertelement <8 x i32> %231, i32 %172, i64 2, !dbg !27
  %233 = insertelement <8 x i32> %232, i32 %174, i64 3, !dbg !27
  %234 = insertelement <8 x i32> %233, i32 %176, i64 4, !dbg !27
  %235 = insertelement <8 x i32> %234, i32 %178, i64 5, !dbg !27
  %236 = insertelement <8 x i32> %235, i32 %180, i64 6, !dbg !27
  %237 = insertelement <8 x i32> %236, i32 %182, i64 7, !dbg !27
  %238 = bitcast <8 x i32> %237 to <8 x float>, !dbg !27
  %239 = fsub <8 x float> %229, %238, !dbg !37
  %240 = insertelement <8 x i32> poison, i32 %183, i64 0, !dbg !20
  %241 = insertelement <8 x i32> %240, i32 %184, i64 1, !dbg !20
  %242 = insertelement <8 x i32> %241, i32 %185, i64 2, !dbg !20
  %243 = insertelement <8 x i32> %242, i32 %186, i64 3, !dbg !20
  %244 = insertelement <8 x i32> %243, i32 %187, i64 4, !dbg !20
  %245 = insertelement <8 x i32> %244, i32 %188, i64 5, !dbg !20
  %246 = insertelement <8 x i32> %245, i32 %189, i64 6, !dbg !20
  %247 = insertelement <8 x i32> %246, i32 %190, i64 7, !dbg !20
  %248 = bitcast <8 x i32> %247 to <8 x float>, !dbg !20
  %249 = insertelement <8 x float> poison, float %198, i64 0, !dbg !38
  %250 = insertelement <8 x float> %249, float %197, i64 1, !dbg !38
  %251 = insertelement <8 x float> %250, float %196, i64 2, !dbg !38
  %252 = insertelement <8 x float> %251, float %195, i64 3, !dbg !38
  %253 = insertelement <8 x float> %252, float %194, i64 4, !dbg !38
  %254 = insertelement <8 x float> %253, float %193, i64 5, !dbg !38
  %255 = insertelement <8 x float> %254, float %192, i64 6, !dbg !38
  %256 = insertelement <8 x float> %255, float %191, i64 7, !dbg !38
  %257 = fmul <8 x float> %239, %256, !dbg !38
  %258 = insertelement <8 x i32> poison, i32 %209, i64 0, !dbg !34
  %259 = insertelement <8 x i32> %258, i32 %208, i64 1, !dbg !34
  %260 = insertelement <8 x i32> %259, i32 %207, i64 2, !dbg !34
  %261 = insertelement <8 x i32> %260, i32 %206, i64 3, !dbg !34
  %262 = insertelement <8 x i32> %261, i32 %204, i64 4, !dbg !34
  %263 = insertelement <8 x i32> %262, i32 %203, i64 5, !dbg !34
  %264 = insertelement <8 x i32> %263, i32 %202, i64 6, !dbg !34
  %265 = insertelement <8 x i32> %264, i32 %201, i64 7, !dbg !34
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !34
  %267 = fmul <8 x float> %257, %266, !dbg !39
  %268 = insertelement <8 x i32> poison, i32 %220, i64 0, !dbg !36
  %269 = insertelement <8 x i32> %268, i32 %219, i64 1, !dbg !36
  %270 = insertelement <8 x i32> %269, i32 %218, i64 2, !dbg !36
  %271 = insertelement <8 x i32> %270, i32 %217, i64 3, !dbg !36
  %272 = insertelement <8 x i32> %271, i32 %215, i64 4, !dbg !36
  %273 = insertelement <8 x i32> %272, i32 %214, i64 5, !dbg !36
  %274 = insertelement <8 x i32> %273, i32 %213, i64 6, !dbg !36
  %275 = insertelement <8 x i32> %274, i32 %212, i64 7, !dbg !36
  %276 = bitcast <8 x i32> %275 to <8 x float>, !dbg !36
  %277 = fadd <8 x float> %267, %276, !dbg !40
  %278 = insertelement <8 x i1> poison, i1 %19, i64 0, !dbg !41
  %279 = shufflevector <8 x i1> %278, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !41
  %280 = select <8 x i1> %279, <8 x float> %248, <8 x float> %277, !dbg !41
  %281 = fcmp olt <8 x float> %280, zeroinitializer, !dbg !42
  %282 = extractelement <8 x i1> %281, i64 7, !dbg !46
  %283 = extractelement <8 x i1> %281, i64 6, !dbg !46
  %284 = extractelement <8 x i1> %281, i64 5, !dbg !46
  %285 = extractelement <8 x i1> %281, i64 4, !dbg !46
  %286 = extractelement <8 x i1> %281, i64 3, !dbg !46
  %287 = extractelement <8 x i1> %281, i64 2, !dbg !46
  %288 = extractelement <8 x i1> %281, i64 1, !dbg !46
  %289 = extractelement <8 x i1> %281, i64 0, !dbg !46
  %290 = sext i32 %14 to i64, !dbg !47
  %291 = getelementptr float, ptr addrspace(1) %6, i64 %290, !dbg !47
  %292 = sext i32 %15 to i64, !dbg !47
  %293 = getelementptr float, ptr addrspace(1) %6, i64 %292, !dbg !47
  %bc = bitcast <8 x float> %280 to <8 x i32>, !dbg !48
  %294 = extractelement <8 x i32> %bc, i64 7, !dbg !48
  %295 = select i1 %282, i32 0, i32 %294, !dbg !46
  %bc36 = bitcast <8 x float> %280 to <8 x i32>, !dbg !48
  %296 = extractelement <8 x i32> %bc36, i64 6, !dbg !48
  %297 = select i1 %283, i32 0, i32 %296, !dbg !46
  %bc37 = bitcast <8 x float> %280 to <8 x i32>, !dbg !48
  %298 = extractelement <8 x i32> %bc37, i64 5, !dbg !48
  %299 = select i1 %284, i32 0, i32 %298, !dbg !46
  %bc38 = bitcast <8 x float> %280 to <8 x i32>, !dbg !48
  %300 = extractelement <8 x i32> %bc38, i64 4, !dbg !48
  %301 = select i1 %285, i32 0, i32 %300, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %297, i32 %299, i32 %301, ptr addrspace(1) %291, i1 true) #3, !dbg !48
  %bc39 = bitcast <8 x float> %280 to <8 x i32>, !dbg !48
  %302 = extractelement <8 x i32> %bc39, i64 3, !dbg !48
  %303 = select i1 %286, i32 0, i32 %302, !dbg !46
  %bc40 = bitcast <8 x float> %280 to <8 x i32>, !dbg !48
  %304 = extractelement <8 x i32> %bc40, i64 2, !dbg !48
  %305 = select i1 %287, i32 0, i32 %304, !dbg !46
  %bc41 = bitcast <8 x float> %280 to <8 x i32>, !dbg !48
  %306 = extractelement <8 x i32> %bc41, i64 1, !dbg !48
  %307 = select i1 %288, i32 0, i32 %306, !dbg !46
  %bc42 = bitcast <8 x float> %280 to <8 x i32>, !dbg !48
  %308 = extractelement <8 x i32> %bc42, i64 0, !dbg !48
  %309 = select i1 %289, i32 0, i32 %308, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %303, i32 %305, i32 %307, i32 %309, ptr addrspace(1) %293, i1 true) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czuh3xgdmzapcyw5cxlx7doltv4yvgugc3ctlxsjoqlgofuz2kjh.py", directory: "inductor_cache/zu")
!4 = !{ptr @triton_poi_fused_cat_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_18", linkageName: "triton_poi_fused_cat_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 33, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 47, scope: !7)
!23 = !DILocation(line: 36, column: 39, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 53, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 44, scope: !7)
!28 = !DILocation(line: 39, column: 31, scope: !7)
!29 = !DILocation(line: 39, column: 44, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 42, column: 27, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 48, column: 31, scope: !7)
!34 = !DILocation(line: 48, column: 44, scope: !7)
!35 = !DILocation(line: 50, column: 31, scope: !7)
!36 = !DILocation(line: 50, column: 44, scope: !7)
!37 = !DILocation(line: 38, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 33, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 56, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 57, column: 25, scope: !7)
!48 = !DILocation(line: 57, column: 37, scope: !7)
!49 = !DILocation(line: 57, column: 4, scope: !7)
