//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_per_fused_mean_28 // -- Begin function triton_per_fused_mean_28
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_per_fused_mean_28
.visible .entry triton_per_fused_mean_28(
	.param .u64 .ptr .global .align 1 triton_per_fused_mean_28_param_0,
	.param .u64 .ptr .global .align 1 triton_per_fused_mean_28_param_1,
	.param .u32 triton_per_fused_mean_28_param_2,
	.param .u32 triton_per_fused_mean_28_param_3
)
.reqntid 256, 1, 1
{
	.reg .pred 	%p<28>;
	.reg .b32 	%r<103>;
	.reg .f32 	%f<41>;
	.reg .b64 	%rd<9>;
	.loc	1 19 0                          // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:19:0

// %bb.0:
	ld.param.u64 	%rd4, [triton_per_fused_mean_28_param_0];
	ld.param.u64 	%rd5, [triton_per_fused_mean_28_param_1];
$L__tmp0:
	.loc	1 23 28                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:23:28
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	.loc	1 23 33                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:23:33
	shl.b32 	%r51, %r1, 7;
	.loc	1 24 44                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:24:44
	mov.u32 	%r52, %tid.x;
	shl.b32 	%r53, %r52, 2;
	and.b32  	%r54, %r53, 124;
	and.b32  	%r55, %r52, 127;
	.loc	1 24 23                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:24:23
	or.b32  	%r56, %r51, %r54;
	or.b32  	%r57, %r51, %r55;
	.loc	1 25 21                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:25:21
	setp.lt.s32 	%p1, %r56, 480;
	setp.lt.s32 	%p25, %r57, 480;
	.loc	1 26 34                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:26:34
	bfe.u32 	%r58, %r52, 5, 3;
	.loc	1 31 19                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:31:19
	mul.hi.s32 	%r60, %r56, -2004318071;
	mad.lo.s32 	%r61, %r56, 1, %r60;
	shr.u32 	%r62, %r61, 31;
	shr.s32 	%r63, %r61, 6;
	add.s32 	%r64, %r63, %r62;
	.loc	1 30 19                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:30:19
	mul.lo.s32 	%r65, %r64, 120;
	sub.s32 	%r66, %r56, %r65;
	.loc	1 33 35                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:33:35
	mad.lo.s32 	%r67, %r58, 120, %r66;
	.loc	1 33 44                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:33:44
	mad.lo.s32 	%r68, %r64, 1920, %r67;
	add.s32 	%r69, %r68, 960;
	.loc	1 33 30                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:33:30
	mul.wide.s32 	%rd6, %r68, 4;
	add.s64 	%rd1, %rd5, %rd6;
	mul.wide.s32 	%rd7, %r69, 4;
	add.s64 	%rd2, %rd5, %rd7;
	mov.b32 	%r6, 0;
	.loc	1 33 54                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:33:54
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	@%p1 ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r2, %r6;
	@!%p1 mov.u32 %r3, %r6;
	@!%p1 mov.u32 %r4, %r6;
	@!%p1 mov.u32 %r5, %r6;
	// end inline asm
	mov.b32 	%f1, %r2;
	mov.b32 	%f2, %r3;
	mov.b32 	%f3, %r4;
	mov.b32 	%f4, %r5;
	// begin inline asm
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	mov.u32 %r12, 0x0;
	mov.u32 %r13, 0x0;
	@%p1 ld.global.v4.b32 { %r10, %r11, %r12, %r13 }, [ %rd2 + 0 ];
	@!%p1 mov.u32 %r10, %r6;
	@!%p1 mov.u32 %r11, %r6;
	@!%p1 mov.u32 %r12, %r6;
	@!%p1 mov.u32 %r13, %r6;
	// end inline asm
	mov.b32 	%f5, %r10;
	mov.b32 	%f6, %r11;
	mov.b32 	%f7, %r12;
	mov.b32 	%f8, %r13;
$L__tmp1:
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f9, %f1, %f5;
	add.f32 	%f10, %f2, %f6;
	add.f32 	%f11, %f3, %f7;
	add.f32 	%f12, %f4, %f8;
	.loc	2 267 36                        // standard.py:267:36
	shl.b32 	%r70, %r58, 2;
	shl.b32 	%r71, %r54, 5;
	or.b32  	%r72, %r71, %r70;
	mov.u32 	%r73, global_smem;
	add.s32 	%r18, %r73, %r72;
	mov.b32 	%r74, %f9;
	.loc	2 256 15                        // standard.py:256:15
	selp.b32 	%r19, %r74, 0, %p1;
	mov.pred 	%p11, -1;
	.loc	2 267 36                        // standard.py:267:36
	// begin inline asm
	@%p11 st.shared.b32 [ %r18 + 0 ], %r19;
	// end inline asm
	add.s32 	%r20, %r18, 32;
	mov.b32 	%r75, %f10;
	.loc	2 256 15                        // standard.py:256:15
	selp.b32 	%r21, %r75, 0, %p1;
	.loc	2 267 36                        // standard.py:267:36
	// begin inline asm
	@%p11 st.shared.b32 [ %r20 + 0 ], %r21;
	// end inline asm
	add.s32 	%r22, %r18, 64;
	mov.b32 	%r76, %f11;
	.loc	2 256 15                        // standard.py:256:15
	selp.b32 	%r23, %r76, 0, %p1;
	.loc	2 267 36                        // standard.py:267:36
	// begin inline asm
	@%p11 st.shared.b32 [ %r22 + 0 ], %r23;
	// end inline asm
	add.s32 	%r24, %r18, 96;
	mov.b32 	%r77, %f12;
	.loc	2 256 15                        // standard.py:256:15
	selp.b32 	%r25, %r77, 0, %p1;
	.loc	2 267 36                        // standard.py:267:36
	// begin inline asm
	@%p11 st.shared.b32 [ %r24 + 0 ], %r25;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p15, %r52, 1024;
	add.s32 	%r27, %r73, %r53;
	// begin inline asm
	@%p15 ld.shared.b32 %r26, [ %r27 + 0 ];
	// end inline asm
	mov.b32 	%f13, %r26;
	shfl.sync.bfly.b32	%r78, %r26, 4, 31, -1;
	mov.b32 	%f14, %r78;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f15, %f13, %f14;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r79, %f15;
	shfl.sync.bfly.b32	%r80, %r79, 2, 31, -1;
	mov.b32 	%f16, %r80;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f17, %f15, %f16;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r81, %f17;
	shfl.sync.bfly.b32	%r82, %r81, 1, 31, -1;
	mov.b32 	%f18, %r82;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f19, %f17, %f18;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r83, %r52, 7;
	setp.eq.s32 	%p26, %r83, 0;
	and.pred  	%p16, %p15, %p26;
	mov.b32 	%r29, %f19;
	// begin inline asm
	@%p16 st.shared.b32 [ %r27 + 0 ], %r29;
	// end inline asm
	add.s32 	%r31, %r27, 1024;
	// begin inline asm
	@%p15 ld.shared.b32 %r30, [ %r31 + 0 ];
	// end inline asm
	mov.b32 	%f20, %r30;
	shfl.sync.bfly.b32	%r84, %r30, 4, 31, -1;
	mov.b32 	%f21, %r84;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f22, %f20, %f21;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r85, %f22;
	shfl.sync.bfly.b32	%r86, %r85, 2, 31, -1;
	mov.b32 	%f23, %r86;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f24, %f22, %f23;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r87, %f24;
	shfl.sync.bfly.b32	%r88, %r87, 1, 31, -1;
	mov.b32 	%f25, %r88;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f26, %f24, %f25;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r33, %f26;
	// begin inline asm
	@%p16 st.shared.b32 [ %r31 + 0 ], %r33;
	// end inline asm
	add.s32 	%r35, %r27, 2048;
	// begin inline asm
	@%p15 ld.shared.b32 %r34, [ %r35 + 0 ];
	// end inline asm
	mov.b32 	%f27, %r34;
	shfl.sync.bfly.b32	%r89, %r34, 4, 31, -1;
	mov.b32 	%f28, %r89;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f29, %f27, %f28;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r90, %f29;
	shfl.sync.bfly.b32	%r91, %r90, 2, 31, -1;
	mov.b32 	%f30, %r91;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f31, %f29, %f30;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r92, %f31;
	shfl.sync.bfly.b32	%r93, %r92, 1, 31, -1;
	mov.b32 	%f32, %r93;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f33, %f31, %f32;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r37, %f33;
	// begin inline asm
	@%p16 st.shared.b32 [ %r35 + 0 ], %r37;
	// end inline asm
	add.s32 	%r39, %r27, 3072;
	// begin inline asm
	@%p15 ld.shared.b32 %r38, [ %r39 + 0 ];
	// end inline asm
	mov.b32 	%f34, %r38;
	shfl.sync.bfly.b32	%r94, %r38, 4, 31, -1;
	mov.b32 	%f35, %r94;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f36, %f34, %f35;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r95, %f36;
	shfl.sync.bfly.b32	%r96, %r95, 2, 31, -1;
	mov.b32 	%f37, %r96;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f38, %f36, %f37;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r97, %f38;
	shfl.sync.bfly.b32	%r98, %r97, 1, 31, -1;
	mov.b32 	%f39, %r98;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f40, %f38, %f39;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r41, %f40;
	// begin inline asm
	@%p16 st.shared.b32 [ %r39 + 0 ], %r41;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r99, %r73, %r71;
	ld.shared.u32 	%r43, [%r99];
	ld.shared.u32 	%r44, [%r99+32];
	ld.shared.u32 	%r45, [%r99+64];
	ld.shared.u32 	%r46, [%r99+96];
$L__tmp2:
	.loc	1 38 18                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:38:18
	bar.sync 	0;
	mad.lo.s32 	%r42, %r54, -28, %r99;
	// begin inline asm
	@%p11 st.shared.v4.b32 [ %r42 + 0 ], { %r43, %r44, %r45, %r46 };
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r100, %r55, 2;
	add.s32 	%r101, %r73, %r100;
	ld.shared.u32 	%r48, [%r101];
	mov.b32 	%r49, 1098907648;
	// begin inline asm
	div.full.f32 %r50, %r48, %r49;
	// end inline asm
	.loc	1 39 4                          // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:39:4
	bar.sync 	0;
	.loc	1 40 28                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:40:28
	mul.wide.s32 	%rd8, %r57, 4;
	add.s64 	%rd3, %rd4, %rd8;
	.loc	1 40 39                         // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:40:39
	and.b32  	%r102, %r52, 128;
	setp.eq.s32 	%p27, %r102, 0;
	and.pred  	%p24, %p27, %p25;
	// begin inline asm
	@%p24 st.global.b32 [ %rd3 + 0 ], { %r50 };
	// end inline asm
	.loc	1 40 4                          // coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py:40:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/oh/coh3lcw4usu3k2dvptozqreytbwntvs6lu3kkb4pd2drlrmf3ihz.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 169                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xa2 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 111
.b8 104
.b8 51
.b8 108
.b8 99
.b8 119
.b8 52
.b8 117
.b8 115
.b8 117
.b8 51
.b8 107
.b8 50
.b8 100
.b8 118
.b8 112
.b8 116
.b8 111
.b8 122
.b8 113
.b8 114
.b8 101
.b8 121
.b8 116
.b8 98
.b8 119
.b8 110
.b8 116
.b8 118
.b8 115
.b8 54
.b8 108
.b8 117
.b8 51
.b8 107
.b8 107
.b8 98
.b8 52
.b8 112
.b8 100
.b8 50
.b8 100
.b8 114
.b8 108
.b8 114
.b8 109
.b8 102
.b8 51
.b8 105
.b8 104
.b8 122
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 111
.b8 104
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x1b DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 101
.b8 114
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 109
.b8 101
.b8 97
.b8 110
.b8 95
.b8 50
.b8 56
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x7e:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x93:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 36                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
