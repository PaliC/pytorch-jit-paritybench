; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_convolution_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = sdiv i32 %10, 4096, !dbg !14
  %13 = sdiv i32 %11, 4096, !dbg !14
  %14 = srem i32 %12, 32, !dbg !15
  %15 = srem i32 %13, 32, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %16 = sdiv i32 %.frozen, 131072, !dbg !16
  %.frozen8 = freeze i32 %11, !dbg !16
  %17 = sdiv i32 %.frozen8, 131072, !dbg !16
  %18 = mul i32 %16, 131072, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = mul i32 %17, 131072, !dbg !17
  %.decomposed9 = sub i32 %.frozen8, %19, !dbg !17
  %20 = sext i32 %10 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = sext i32 %11 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %34 = sext i32 %14 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !20
  %36 = sext i32 %15 to i64, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %46 = insertelement <8 x i32> poison, i32 %33, i64 0, !dbg !19
  %47 = insertelement <8 x i32> %46, i32 %32, i64 1, !dbg !19
  %48 = insertelement <8 x i32> %47, i32 %31, i64 2, !dbg !19
  %49 = insertelement <8 x i32> %48, i32 %30, i64 3, !dbg !19
  %50 = insertelement <8 x i32> %49, i32 %28, i64 4, !dbg !19
  %51 = insertelement <8 x i32> %50, i32 %27, i64 5, !dbg !19
  %52 = insertelement <8 x i32> %51, i32 %26, i64 6, !dbg !19
  %53 = insertelement <8 x i32> %52, i32 %25, i64 7, !dbg !19
  %54 = bitcast <8 x i32> %53 to <8 x float>, !dbg !19
  %55 = insertelement <8 x i32> poison, i32 %45, i64 0, !dbg !21
  %56 = insertelement <8 x i32> %55, i32 %44, i64 1, !dbg !21
  %57 = insertelement <8 x i32> %56, i32 %43, i64 2, !dbg !21
  %58 = insertelement <8 x i32> %57, i32 %42, i64 3, !dbg !21
  %59 = insertelement <8 x i32> %58, i32 %41, i64 4, !dbg !21
  %60 = insertelement <8 x i32> %59, i32 %40, i64 5, !dbg !21
  %61 = insertelement <8 x i32> %60, i32 %39, i64 6, !dbg !21
  %62 = insertelement <8 x i32> %61, i32 %38, i64 7, !dbg !21
  %63 = bitcast <8 x i32> %62 to <8 x float>, !dbg !21
  %64 = fadd <8 x float> %54, %63, !dbg !22
  %65 = fcmp olt <8 x float> %64, zeroinitializer, !dbg !23
  %66 = extractelement <8 x i1> %65, i64 7, !dbg !27
  %67 = extractelement <8 x i1> %65, i64 6, !dbg !27
  %68 = extractelement <8 x i1> %65, i64 5, !dbg !27
  %69 = extractelement <8 x i1> %65, i64 4, !dbg !27
  %70 = extractelement <8 x i1> %65, i64 3, !dbg !27
  %71 = extractelement <8 x i1> %65, i64 2, !dbg !27
  %72 = extractelement <8 x i1> %65, i64 1, !dbg !27
  %73 = extractelement <8 x i1> %65, i64 0, !dbg !27
  %bc = bitcast <8 x float> %64 to <8 x i32>, !dbg !28
  %74 = extractelement <8 x i32> %bc, i64 7, !dbg !28
  %75 = select i1 %66, i32 0, i32 %74, !dbg !27
  %bc1 = bitcast <8 x float> %64 to <8 x i32>, !dbg !28
  %76 = extractelement <8 x i32> %bc1, i64 6, !dbg !28
  %77 = select i1 %67, i32 0, i32 %76, !dbg !27
  %bc2 = bitcast <8 x float> %64 to <8 x i32>, !dbg !28
  %78 = extractelement <8 x i32> %bc2, i64 5, !dbg !28
  %79 = select i1 %68, i32 0, i32 %78, !dbg !27
  %bc3 = bitcast <8 x float> %64 to <8 x i32>, !dbg !28
  %80 = extractelement <8 x i32> %bc3, i64 4, !dbg !28
  %81 = select i1 %69, i32 0, i32 %80, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %75, i32 %77, i32 %79, i32 %81, ptr addrspace(1) %21, i1 true) #1, !dbg !28
  %bc4 = bitcast <8 x float> %64 to <8 x i32>, !dbg !28
  %82 = extractelement <8 x i32> %bc4, i64 3, !dbg !28
  %83 = select i1 %70, i32 0, i32 %82, !dbg !27
  %bc5 = bitcast <8 x float> %64 to <8 x i32>, !dbg !28
  %84 = extractelement <8 x i32> %bc5, i64 2, !dbg !28
  %85 = select i1 %71, i32 0, i32 %84, !dbg !27
  %bc6 = bitcast <8 x float> %64 to <8 x i32>, !dbg !28
  %86 = extractelement <8 x i32> %bc6, i64 1, !dbg !28
  %87 = select i1 %72, i32 0, i32 %86, !dbg !27
  %bc7 = bitcast <8 x float> %64 to <8 x i32>, !dbg !28
  %88 = extractelement <8 x i32> %bc7, i64 0, !dbg !28
  %89 = select i1 %73, i32 0, i32 %88, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %83, i32 %85, i32 %87, i32 %89, ptr addrspace(1) %23, i1 true) #1, !dbg !28
  %90 = mul i32 %16, 655360, !dbg !29
  %91 = mul i32 %17, 655360, !dbg !29
  %92 = add i32 %90, %.decomposed, !dbg !30
  %93 = add i32 %91, %.decomposed9, !dbg !30
  %94 = sext i32 %92 to i64, !dbg !31
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !31
  %96 = sext i32 %93 to i64, !dbg !31
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %75, i32 %77, i32 %79, i32 %81, ptr addrspace(1) %95, i1 true) #1, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %83, i32 %85, i32 %87, i32 %89, ptr addrspace(1) %97, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4cnrkzjlbke44nh66ay2ekbqj5pvsjfrbqiit4cv7lzdnvonoah.py", directory: "inductor_cache/4c")
!4 = !{ptr @triton_poi_fused_cat_convolution_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_relu_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_relu_22", linkageName: "triton_poi_fused_cat_convolution_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 32, column: 40, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 25, scope: !7)
!32 = !DILocation(line: 34, column: 48, scope: !7)
!33 = !DILocation(line: 34, column: 4, scope: !7)
