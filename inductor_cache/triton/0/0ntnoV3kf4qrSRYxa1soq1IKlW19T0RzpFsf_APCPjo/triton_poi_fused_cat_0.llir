; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 256, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 16, !dbg !15
  %19 = srem i32 %18, 4, !dbg !16
  %20 = mul i32 %18, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = sdiv i32 %16, 64, !dbg !18
  %22 = icmp slt i32 %19, 1, !dbg !19
  %23 = shl nsw i32 %21, 4, !dbg !20
  %24 = add nsw i32 %23, %.decomposed, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = and i1 %17, %22, !dbg !23
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !24
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !24
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !24
  %31 = bitcast i32 %29 to float, !dbg !24
  %32 = bitcast i32 %30 to float, !dbg !24
  %33 = fmul float %31, %31, !dbg !25
  %34 = fmul float %32, %32, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !26
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !27
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !27
  %39 = bitcast i32 %37 to float, !dbg !27
  %40 = bitcast i32 %38 to float, !dbg !27
  %41 = fmul float %39, %39, !dbg !28
  %42 = fmul float %40, %40, !dbg !28
  %43 = fadd float %33, %41, !dbg !29
  %44 = fadd float %34, %42, !dbg !29
  %45 = fadd float %43, 0x3EB0C6F7A0000000, !dbg !30
  %46 = fadd float %44, 0x3EB0C6F7A0000000, !dbg !30
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %47, 0, !dbg !31
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %48, 0, !dbg !31
  br i1 %.not.i, label %54, label %49, !dbg !31

49:                                               ; preds = %10
  br i1 %.not1.i, label %52, label %50, !dbg !31

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

54:                                               ; preds = %10
  br i1 %.not1.i, label %57, label %55, !dbg !31

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !31
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %59, 0, !dbg !31
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %60, 0, !dbg !31
  br i1 %.not.i1, label %66, label %61, !dbg !31

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %64, label %62, !dbg !31

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !31

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %62, %64, %67, %69
  %.0.i3 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !31
  %71 = icmp eq i32 %19, 1, !dbg !32
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !33
  %73 = and i1 %17, %71, !dbg !34
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !35
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !35
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !35
  %77 = bitcast i32 %75 to float, !dbg !35
  %78 = bitcast i32 %76 to float, !dbg !35
  %79 = fmul float %77, %77, !dbg !36
  %80 = fmul float %78, %78, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !37
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !38
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !38
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !38
  %85 = bitcast i32 %83 to float, !dbg !38
  %86 = bitcast i32 %84 to float, !dbg !38
  %87 = fmul float %85, %85, !dbg !39
  %88 = fmul float %86, %86, !dbg !39
  %89 = fadd float %79, %87, !dbg !40
  %90 = fadd float %80, %88, !dbg !40
  %91 = fadd float %89, 0x3EB0C6F7A0000000, !dbg !41
  %92 = fadd float %90, 0x3EB0C6F7A0000000, !dbg !41
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i6 = icmp eq i32 %93, 0, !dbg !42
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i9 = icmp eq i32 %94, 0, !dbg !42
  br i1 %.not.i6, label %100, label %95, !dbg !42

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !42

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !42

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

__nv_sqrtf.exit10:                                ; preds = %96, %98, %101, %103
  %.0.i8 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !42
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i11 = icmp eq i32 %105, 0, !dbg !42
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i14 = icmp eq i32 %106, 0, !dbg !42
  br i1 %.not.i11, label %112, label %107, !dbg !42

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !42

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !42

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %108, %110, %113, %115
  %.0.i13 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !42
  %117 = icmp eq i32 %19, 2, !dbg !43
  %118 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !44
  %119 = and i1 %17, %117, !dbg !45
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %118, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !46
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !46
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !46
  %123 = bitcast i32 %121 to float, !dbg !46
  %124 = bitcast i32 %122 to float, !dbg !46
  %125 = fmul float %123, %123, !dbg !47
  %126 = fmul float %124, %124, !dbg !47
  %127 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !48
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %127, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !49
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !49
  %130 = extractvalue { i32, i32 } %128, 1, !dbg !49
  %131 = bitcast i32 %129 to float, !dbg !49
  %132 = bitcast i32 %130 to float, !dbg !49
  %133 = fmul float %131, %131, !dbg !50
  %134 = fmul float %132, %132, !dbg !50
  %135 = fadd float %125, %133, !dbg !51
  %136 = fadd float %126, %134, !dbg !51
  %137 = fadd float %135, 0x3EB0C6F7A0000000, !dbg !52
  %138 = fadd float %136, 0x3EB0C6F7A0000000, !dbg !52
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i16 = icmp eq i32 %139, 0, !dbg !53
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i19 = icmp eq i32 %140, 0, !dbg !53
  br i1 %.not.i16, label %146, label %141, !dbg !53

141:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %144, label %142, !dbg !53

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

146:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %149, label %147, !dbg !53

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

__nv_sqrtf.exit20:                                ; preds = %142, %144, %147, %149
  %.0.i18 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !53
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i21 = icmp eq i32 %151, 0, !dbg !53
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i24 = icmp eq i32 %152, 0, !dbg !53
  br i1 %.not.i21, label %158, label %153, !dbg !53

153:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %156, label %154, !dbg !53

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

158:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %161, label %159, !dbg !53

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

__nv_sqrtf.exit25:                                ; preds = %154, %156, %159, %161
  %.0.i23 = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !53
  %163 = icmp sgt i32 %19, 2, !dbg !54
  %164 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !55
  %165 = and i1 %17, %163, !dbg !56
  %166 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %164, i1 %165, i32 0, i1 %165, i32 0, i1 %165) #3, !dbg !57
  %167 = extractvalue { i32, i32 } %166, 0, !dbg !57
  %168 = extractvalue { i32, i32 } %166, 1, !dbg !57
  %169 = bitcast i32 %167 to float, !dbg !57
  %170 = bitcast i32 %168 to float, !dbg !57
  %171 = fmul float %169, %169, !dbg !58
  %172 = fmul float %170, %170, !dbg !58
  %173 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !59
  %174 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %173, i1 %165, i32 0, i1 %165, i32 0, i1 %165) #3, !dbg !60
  %175 = extractvalue { i32, i32 } %174, 0, !dbg !60
  %176 = extractvalue { i32, i32 } %174, 1, !dbg !60
  %177 = bitcast i32 %175 to float, !dbg !60
  %178 = bitcast i32 %176 to float, !dbg !60
  %179 = fmul float %177, %177, !dbg !61
  %180 = fmul float %178, %178, !dbg !61
  %181 = fadd float %171, %179, !dbg !62
  %182 = fadd float %172, %180, !dbg !62
  %183 = fadd float %181, 0x3EB0C6F7A0000000, !dbg !63
  %184 = fadd float %182, 0x3EB0C6F7A0000000, !dbg !63
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not.i26 = icmp eq i32 %185, 0, !dbg !64
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !64
  %.not1.i29 = icmp eq i32 %186, 0, !dbg !64
  br i1 %.not.i26, label %192, label %187, !dbg !64

187:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %190, label %188, !dbg !64

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %183) #3, !dbg !64
  br label %__nv_sqrtf.exit30, !dbg !64

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %183) #3, !dbg !64
  br label %__nv_sqrtf.exit30, !dbg !64

192:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %195, label %193, !dbg !64

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.f(float %183) #3, !dbg !64
  br label %__nv_sqrtf.exit30, !dbg !64

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.f(float %183) #3, !dbg !64
  br label %__nv_sqrtf.exit30, !dbg !64

__nv_sqrtf.exit30:                                ; preds = %188, %190, %193, %195
  %.0.i28 = phi float [ %189, %188 ], [ %191, %190 ], [ %194, %193 ], [ %196, %195 ], !dbg !64
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not.i31 = icmp eq i32 %197, 0, !dbg !64
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !64
  %.not1.i34 = icmp eq i32 %198, 0, !dbg !64
  br i1 %.not.i31, label %204, label %199, !dbg !64

199:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %202, label %200, !dbg !64

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %184) #3, !dbg !64
  br label %__nv_sqrtf.exit35, !dbg !64

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %184) #3, !dbg !64
  br label %__nv_sqrtf.exit35, !dbg !64

204:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %207, label %205, !dbg !64

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %184) #3, !dbg !64
  br label %__nv_sqrtf.exit35, !dbg !64

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %184) #3, !dbg !64
  br label %__nv_sqrtf.exit35, !dbg !64

__nv_sqrtf.exit35:                                ; preds = %200, %202, %205, %207
  %.0.i33 = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !64
  %209 = select i1 %163, float %.0.i28, float 0.000000e+00, !dbg !65
  %210 = select i1 %163, float %.0.i33, float 0.000000e+00, !dbg !65
  %211 = select i1 %117, float %.0.i18, float %209, !dbg !66
  %212 = select i1 %117, float %.0.i23, float %210, !dbg !66
  %213 = select i1 %71, float %.0.i8, float %211, !dbg !66
  %214 = select i1 %71, float %.0.i13, float %212, !dbg !66
  %215 = select i1 %22, float %.0.i, float %213, !dbg !66
  %216 = select i1 %22, float %.0.i3, float %214, !dbg !66
  %217 = sext i32 %16 to i64, !dbg !67
  %218 = getelementptr float, ptr addrspace(1) %8, i64 %217, !dbg !67
  %219 = bitcast float %215 to i32, !dbg !68
  %220 = bitcast float %216 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %219, i32 %220, ptr addrspace(1) %218, i1 %17) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw3krlil6navzcnlnt5zyvivozsiiq7ijlstk6uwprvutxpik2fr.py", directory: "inductor_cache/w3")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 38, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 50, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 43, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 27, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 52, scope: !7)
!35 = !DILocation(line: 47, column: 44, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 31, scope: !7)
!38 = !DILocation(line: 49, column: 44, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 27, scope: !7)
!43 = !DILocation(line: 60, column: 20, scope: !7)
!44 = !DILocation(line: 61, column: 31, scope: !7)
!45 = !DILocation(line: 61, column: 52, scope: !7)
!46 = !DILocation(line: 61, column: 44, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 31, scope: !7)
!49 = !DILocation(line: 63, column: 44, scope: !7)
!50 = !DILocation(line: 64, column: 20, scope: !7)
!51 = !DILocation(line: 65, column: 20, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 27, scope: !7)
!54 = !DILocation(line: 71, column: 20, scope: !7)
!55 = !DILocation(line: 74, column: 31, scope: !7)
!56 = !DILocation(line: 74, column: 52, scope: !7)
!57 = !DILocation(line: 74, column: 44, scope: !7)
!58 = !DILocation(line: 75, column: 20, scope: !7)
!59 = !DILocation(line: 76, column: 31, scope: !7)
!60 = !DILocation(line: 76, column: 44, scope: !7)
!61 = !DILocation(line: 77, column: 20, scope: !7)
!62 = !DILocation(line: 78, column: 20, scope: !7)
!63 = !DILocation(line: 80, column: 20, scope: !7)
!64 = !DILocation(line: 81, column: 27, scope: !7)
!65 = !DILocation(line: 83, column: 35, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 87, column: 25, scope: !7)
!68 = !DILocation(line: 87, column: 37, scope: !7)
!69 = !DILocation(line: 87, column: 4, scope: !7)
