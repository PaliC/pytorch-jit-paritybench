; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = srem i32 %10, 64, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %13 = shufflevector <2 x i32> %12, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %14 = sdiv <2 x i32> %13, <i32 1024, i32 64>, !dbg !15
  %15 = srem <2 x i32> %14, splat (i32 16), !dbg !16
  %16 = extractelement <2 x i32> %15, i64 0, !dbg !17
  %17 = icmp sgt i32 %16, 0, !dbg !18
  %18 = icmp sgt <2 x i32> %15, <i32 -1, i32 0>, !dbg !19
  %19 = extractelement <2 x i1> %18, i64 1, !dbg !20
  %20 = and i1 %17, %19, !dbg !20
  %21 = extractelement <2 x i32> %15, i64 1, !dbg !17
  %22 = shl nsw i32 %21, 7, !dbg !21
  %23 = extractelement <2 x i32> %14, i64 0, !dbg !22
  %24 = shl i32 %23, 12, !dbg !22
  %25 = add i32 %24, %11, !dbg !23
  %26 = add i32 %25, -2112, !dbg !24
  %27 = add i32 %26, %22, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %20, i32 -8388608, i1 %20, i32 -8388608, i1 %20, i32 -8388608, i1 %20, i32 -8388608, i1 %20) #1, !dbg !27
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !27
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !27
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !27
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !27
  %35 = icmp sgt i32 %21, -1, !dbg !28
  %36 = and i1 %17, %35, !dbg !29
  %37 = add i32 %25, -2048, !dbg !30
  %38 = add i32 %37, %22, !dbg !31
  %39 = sext i32 %38 to i64, !dbg !32
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !32
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36) #1, !dbg !33
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !33
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !33
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !33
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !33
  %46 = add i32 %25, -1984, !dbg !34
  %47 = add i32 %46, %22, !dbg !35
  %48 = sext i32 %47 to i64, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !36
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36) #1, !dbg !37
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !37
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !37
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !37
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !37
  %55 = extractelement <2 x i1> %18, i64 0, !dbg !38
  %56 = and i1 %55, %19, !dbg !38
  %57 = add i32 %25, -64, !dbg !39
  %58 = add i32 %57, %22, !dbg !40
  %59 = sext i32 %58 to i64, !dbg !41
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !41
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56) #1, !dbg !42
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !42
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !42
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !42
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !42
  %66 = or i32 %16, %21, !dbg !17
  %67 = icmp sgt i32 %66, -1, !dbg !17
  %68 = add i32 %25, %22, !dbg !43
  %69 = sext i32 %68 to i64, !dbg !44
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !44
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #1, !dbg !45
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !45
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !45
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !45
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !45
  %76 = add i32 %25, 64, !dbg !46
  %77 = add i32 %76, %22, !dbg !47
  %78 = sext i32 %77 to i64, !dbg !48
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !48
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #1, !dbg !49
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !49
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !49
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !49
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !49
  %85 = add i32 %25, 1984, !dbg !50
  %86 = add i32 %85, %22, !dbg !51
  %87 = sext i32 %86 to i64, !dbg !52
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !52
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56) #1, !dbg !53
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !53
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !53
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !53
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !53
  %94 = add i32 %25, 2048, !dbg !54
  %95 = add i32 %94, %22, !dbg !55
  %96 = sext i32 %95 to i64, !dbg !56
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !56
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #1, !dbg !57
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !57
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !57
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !57
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !57
  %103 = add i32 %25, 2112, !dbg !58
  %104 = add i32 %103, %22, !dbg !59
  %105 = sext i32 %104 to i64, !dbg !60
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !60
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #1, !dbg !61
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !61
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !61
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !61
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !61
  %112 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !27
  %113 = insertelement <4 x i32> %112, i32 %32, i64 1, !dbg !27
  %114 = insertelement <4 x i32> %113, i32 %33, i64 2, !dbg !27
  %115 = insertelement <4 x i32> %114, i32 %34, i64 3, !dbg !27
  %116 = bitcast <4 x i32> %115 to <4 x float>, !dbg !27
  %117 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !33
  %118 = insertelement <4 x i32> %117, i32 %43, i64 1, !dbg !33
  %119 = insertelement <4 x i32> %118, i32 %44, i64 2, !dbg !33
  %120 = insertelement <4 x i32> %119, i32 %45, i64 3, !dbg !33
  %121 = bitcast <4 x i32> %120 to <4 x float>, !dbg !33
  %122 = fcmp ogt <4 x float> %121, %116, !dbg !62
  %123 = fcmp uno <4 x float> %121, zeroinitializer, !dbg !66
  %124 = or <4 x i1> %122, %123, !dbg !67
  %.v = select <4 x i1> %124, <4 x i32> %120, <4 x i32> %115, !dbg !68
  %125 = bitcast <4 x i32> %.v to <4 x float>, !dbg !68
  %126 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !37
  %127 = insertelement <4 x i32> %126, i32 %52, i64 1, !dbg !37
  %128 = insertelement <4 x i32> %127, i32 %53, i64 2, !dbg !37
  %129 = insertelement <4 x i32> %128, i32 %54, i64 3, !dbg !37
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !37
  %131 = fcmp olt <4 x float> %125, %130, !dbg !69
  %132 = fcmp uno <4 x float> %130, zeroinitializer, !dbg !71
  %133 = or <4 x i1> %132, %131, !dbg !72
  %.v1 = select <4 x i1> %133, <4 x i32> %129, <4 x i32> %.v, !dbg !73
  %134 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !73
  %135 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !42
  %136 = insertelement <4 x i32> %135, i32 %63, i64 1, !dbg !42
  %137 = insertelement <4 x i32> %136, i32 %64, i64 2, !dbg !42
  %138 = insertelement <4 x i32> %137, i32 %65, i64 3, !dbg !42
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !42
  %140 = fcmp olt <4 x float> %134, %139, !dbg !74
  %141 = fcmp uno <4 x float> %139, zeroinitializer, !dbg !76
  %142 = or <4 x i1> %141, %140, !dbg !77
  %.v2 = select <4 x i1> %142, <4 x i32> %138, <4 x i32> %.v1, !dbg !78
  %143 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !78
  %144 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !45
  %145 = insertelement <4 x i32> %144, i32 %73, i64 1, !dbg !45
  %146 = insertelement <4 x i32> %145, i32 %74, i64 2, !dbg !45
  %147 = insertelement <4 x i32> %146, i32 %75, i64 3, !dbg !45
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !45
  %149 = fcmp olt <4 x float> %143, %148, !dbg !79
  %150 = fcmp uno <4 x float> %148, zeroinitializer, !dbg !81
  %151 = or <4 x i1> %150, %149, !dbg !82
  %.v3 = select <4 x i1> %151, <4 x i32> %147, <4 x i32> %.v2, !dbg !83
  %152 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !83
  %153 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !49
  %154 = insertelement <4 x i32> %153, i32 %82, i64 1, !dbg !49
  %155 = insertelement <4 x i32> %154, i32 %83, i64 2, !dbg !49
  %156 = insertelement <4 x i32> %155, i32 %84, i64 3, !dbg !49
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !49
  %158 = fcmp olt <4 x float> %152, %157, !dbg !84
  %159 = fcmp uno <4 x float> %157, zeroinitializer, !dbg !86
  %160 = or <4 x i1> %159, %158, !dbg !87
  %.v4 = select <4 x i1> %160, <4 x i32> %156, <4 x i32> %.v3, !dbg !88
  %161 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !88
  %162 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !53
  %163 = insertelement <4 x i32> %162, i32 %91, i64 1, !dbg !53
  %164 = insertelement <4 x i32> %163, i32 %92, i64 2, !dbg !53
  %165 = insertelement <4 x i32> %164, i32 %93, i64 3, !dbg !53
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !53
  %167 = fcmp olt <4 x float> %161, %166, !dbg !89
  %168 = fcmp uno <4 x float> %166, zeroinitializer, !dbg !91
  %169 = or <4 x i1> %168, %167, !dbg !92
  %.v5 = select <4 x i1> %169, <4 x i32> %165, <4 x i32> %.v4, !dbg !93
  %170 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !93
  %171 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !57
  %172 = insertelement <4 x i32> %171, i32 %100, i64 1, !dbg !57
  %173 = insertelement <4 x i32> %172, i32 %101, i64 2, !dbg !57
  %174 = insertelement <4 x i32> %173, i32 %102, i64 3, !dbg !57
  %175 = bitcast <4 x i32> %174 to <4 x float>, !dbg !57
  %176 = fcmp olt <4 x float> %170, %175, !dbg !94
  %177 = fcmp uno <4 x float> %175, zeroinitializer, !dbg !96
  %178 = or <4 x i1> %177, %176, !dbg !97
  %.v6 = select <4 x i1> %178, <4 x i32> %174, <4 x i32> %.v5, !dbg !98
  %179 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !98
  %180 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !61
  %181 = insertelement <4 x i32> %180, i32 %109, i64 1, !dbg !61
  %182 = insertelement <4 x i32> %181, i32 %110, i64 2, !dbg !61
  %183 = insertelement <4 x i32> %182, i32 %111, i64 3, !dbg !61
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !61
  %185 = fcmp olt <4 x float> %179, %184, !dbg !99
  %186 = fcmp uno <4 x float> %184, zeroinitializer, !dbg !101
  %187 = or <4 x i1> %186, %185, !dbg !102
  %188 = extractelement <4 x i1> %187, i64 0, !dbg !102
  %189 = or <4 x i1> %186, %185, !dbg !102
  %190 = extractelement <4 x i1> %189, i64 1, !dbg !102
  %191 = or <4 x i1> %186, %185, !dbg !102
  %192 = extractelement <4 x i1> %191, i64 2, !dbg !102
  %193 = or <4 x i1> %186, %185, !dbg !102
  %194 = extractelement <4 x i1> %193, i64 3, !dbg !102
  %195 = zext <4 x i1> %122 to <4 x i8>, !dbg !103
  %196 = select <4 x i1> %131, <4 x i8> splat (i8 2), <4 x i8> %195, !dbg !104
  %197 = select <4 x i1> %140, <4 x i8> splat (i8 3), <4 x i8> %196, !dbg !105
  %198 = select <4 x i1> %149, <4 x i8> splat (i8 4), <4 x i8> %197, !dbg !106
  %199 = select <4 x i1> %158, <4 x i8> splat (i8 5), <4 x i8> %198, !dbg !107
  %200 = select <4 x i1> %167, <4 x i8> splat (i8 6), <4 x i8> %199, !dbg !108
  %201 = select <4 x i1> %176, <4 x i8> splat (i8 7), <4 x i8> %200, !dbg !109
  %202 = select <4 x i1> %185, <4 x i8> splat (i8 8), <4 x i8> %201, !dbg !110
  %203 = sext i32 %10 to i64, !dbg !111
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !111
  %205 = extractelement <4 x i32> %.v6, i64 0, !dbg !112
  %206 = select i1 %188, i32 %108, i32 %205, !dbg !113
  %207 = extractelement <4 x i32> %.v6, i64 1, !dbg !112
  %208 = select i1 %190, i32 %109, i32 %207, !dbg !113
  %209 = extractelement <4 x i32> %.v6, i64 2, !dbg !112
  %210 = select i1 %192, i32 %110, i32 %209, !dbg !113
  %211 = extractelement <4 x i32> %.v6, i64 3, !dbg !112
  %212 = select i1 %194, i32 %111, i32 %211, !dbg !113
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %208, i32 %210, i32 %212, ptr addrspace(1) %204, i1 true) #1, !dbg !112
  %213 = getelementptr i8, ptr addrspace(1) %2, i64 %203, !dbg !114
  %214 = bitcast <4 x i8> %202 to i32, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %213, i1 true) #1, !dbg !115
  ret void, !dbg !116
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxhry6lewu3nqk65gk6xttomocs4mkavjrxcxxwqjbtxdozanfyt.py", directory: "inductor_cache/xh")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_23", linkageName: "triton_poi_fused_max_pool2d_with_indices_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 62, column: 20, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 56, column: 21, scope: !7)
!20 = !DILocation(line: 39, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 50, scope: !7)
!22 = !DILocation(line: 40, column: 60, scope: !7)
!23 = !DILocation(line: 40, column: 41, scope: !7)
!24 = !DILocation(line: 40, column: 46, scope: !7)
!25 = !DILocation(line: 40, column: 55, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 65, scope: !7)
!28 = !DILocation(line: 42, column: 21, scope: !7)
!29 = !DILocation(line: 45, column: 19, scope: !7)
!30 = !DILocation(line: 46, column: 46, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 65, scope: !7)
!34 = !DILocation(line: 53, column: 46, scope: !7)
!35 = !DILocation(line: 53, column: 55, scope: !7)
!36 = !DILocation(line: 53, column: 31, scope: !7)
!37 = !DILocation(line: 53, column: 65, scope: !7)
!38 = !DILocation(line: 59, column: 20, scope: !7)
!39 = !DILocation(line: 60, column: 44, scope: !7)
!40 = !DILocation(line: 60, column: 53, scope: !7)
!41 = !DILocation(line: 60, column: 31, scope: !7)
!42 = !DILocation(line: 60, column: 63, scope: !7)
!43 = !DILocation(line: 63, column: 45, scope: !7)
!44 = !DILocation(line: 63, column: 31, scope: !7)
!45 = !DILocation(line: 63, column: 55, scope: !7)
!46 = !DILocation(line: 66, column: 41, scope: !7)
!47 = !DILocation(line: 66, column: 50, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 60, scope: !7)
!50 = !DILocation(line: 73, column: 43, scope: !7)
!51 = !DILocation(line: 73, column: 52, scope: !7)
!52 = !DILocation(line: 73, column: 31, scope: !7)
!53 = !DILocation(line: 73, column: 62, scope: !7)
!54 = !DILocation(line: 76, column: 43, scope: !7)
!55 = !DILocation(line: 76, column: 52, scope: !7)
!56 = !DILocation(line: 76, column: 31, scope: !7)
!57 = !DILocation(line: 76, column: 62, scope: !7)
!58 = !DILocation(line: 79, column: 43, scope: !7)
!59 = !DILocation(line: 79, column: 52, scope: !7)
!60 = !DILocation(line: 79, column: 31, scope: !7)
!61 = !DILocation(line: 79, column: 62, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!64 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!65 = !DILocation(line: 47, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !65)
!69 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !70)
!70 = !DILocation(line: 54, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !70)
!74 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !75)
!75 = !DILocation(line: 61, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !80)
!80 = !DILocation(line: 64, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !85)
!85 = !DILocation(line: 67, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !90)
!90 = !DILocation(line: 74, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !95)
!95 = !DILocation(line: 77, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !100)
!103 = !DILocation(line: 84, column: 35, scope: !7)
!104 = !DILocation(line: 87, column: 35, scope: !7)
!105 = !DILocation(line: 90, column: 35, scope: !7)
!106 = !DILocation(line: 93, column: 35, scope: !7)
!107 = !DILocation(line: 96, column: 35, scope: !7)
!108 = !DILocation(line: 99, column: 35, scope: !7)
!109 = !DILocation(line: 102, column: 35, scope: !7)
!110 = !DILocation(line: 105, column: 35, scope: !7)
!111 = !DILocation(line: 106, column: 25, scope: !7)
!112 = !DILocation(line: 106, column: 37, scope: !7)
!113 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !100)
!114 = !DILocation(line: 107, column: 25, scope: !7)
!115 = !DILocation(line: 107, column: 37, scope: !7)
!116 = !DILocation(line: 107, column: 4, scope: !7)
