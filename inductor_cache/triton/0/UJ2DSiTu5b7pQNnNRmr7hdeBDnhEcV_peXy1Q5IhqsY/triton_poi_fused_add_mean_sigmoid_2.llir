; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mean_sigmoid_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 16, !dbg !15
  %13 = mul i32 %12, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = shl nsw i32 %12, 2, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %11) #1, !dbg !19
  %18 = bitcast i32 %17 to float, !dbg !19
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %11) #1, !dbg !19
  %20 = bitcast i32 %19 to float, !dbg !19
  %21 = shl i32 %12, 6, !dbg !20
  %22 = add i32 %21, %.decomposed, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %11) #1, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = bitcast i32 %27 to float, !dbg !23
  %30 = or disjoint i32 %14, 1, !dbg !24
  %31 = sext i32 %30 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %11) #1, !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %11) #1, !dbg !26
  %36 = bitcast i32 %35 to float, !dbg !26
  %37 = add i32 %22, 16, !dbg !27
  %38 = sext i32 %37 to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !28
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %11) #1, !dbg !29
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !29
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !29
  %43 = bitcast i32 %41 to float, !dbg !29
  %44 = bitcast i32 %42 to float, !dbg !29
  %45 = or disjoint i32 %14, 2, !dbg !30
  %46 = sext i32 %45 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #1, !dbg !32
  %49 = bitcast i32 %48 to float, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #1, !dbg !32
  %51 = bitcast i32 %50 to float, !dbg !32
  %52 = add i32 %22, 32, !dbg !33
  %53 = sext i32 %52 to i64, !dbg !34
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !34
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %11) #1, !dbg !35
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !35
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !35
  %58 = bitcast i32 %56 to float, !dbg !35
  %59 = bitcast i32 %57 to float, !dbg !35
  %60 = or disjoint i32 %14, 3, !dbg !36
  %61 = sext i32 %60 to i64, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %11) #1, !dbg !38
  %64 = bitcast i32 %63 to float, !dbg !38
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %11) #1, !dbg !38
  %66 = bitcast i32 %65 to float, !dbg !38
  %67 = add i32 %22, 48, !dbg !39
  %68 = sext i32 %67 to i64, !dbg !40
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !40
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %11) #1, !dbg !41
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !41
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !41
  %73 = bitcast i32 %71 to float, !dbg !41
  %74 = bitcast i32 %72 to float, !dbg !41
  %75 = fsub float 0.000000e+00, %18, !dbg !42
  %76 = fsub float 0.000000e+00, %20, !dbg !42
  %77 = fmul float %75, 0x3FF7154760000000, !dbg !46
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #1, !dbg !46
  %79 = fmul float %76, 0x3FF7154760000000, !dbg !46
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !46
  %81 = fadd float %78, 1.000000e+00, !dbg !47
  %82 = fadd float %80, 1.000000e+00, !dbg !47
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %81) #1, !dbg !48
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %82) #1, !dbg !48
  %85 = fadd float %83, %28, !dbg !49
  %86 = fadd float %84, %29, !dbg !49
  %87 = fsub float 0.000000e+00, %34, !dbg !50
  %88 = fsub float 0.000000e+00, %36, !dbg !50
  %89 = fmul float %87, 0x3FF7154760000000, !dbg !52
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #1, !dbg !52
  %91 = fmul float %88, 0x3FF7154760000000, !dbg !52
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !52
  %93 = fadd float %90, 1.000000e+00, !dbg !53
  %94 = fadd float %92, 1.000000e+00, !dbg !53
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !54
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !54
  %97 = fadd float %95, %43, !dbg !55
  %98 = fadd float %96, %44, !dbg !55
  %99 = fadd float %85, %97, !dbg !56
  %100 = fadd float %86, %98, !dbg !56
  %101 = fsub float 0.000000e+00, %49, !dbg !57
  %102 = fsub float 0.000000e+00, %51, !dbg !57
  %103 = fmul float %101, 0x3FF7154760000000, !dbg !59
  %104 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %103) #1, !dbg !59
  %105 = fmul float %102, 0x3FF7154760000000, !dbg !59
  %106 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %105) #1, !dbg !59
  %107 = fadd float %104, 1.000000e+00, !dbg !60
  %108 = fadd float %106, 1.000000e+00, !dbg !60
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %107) #1, !dbg !61
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %108) #1, !dbg !61
  %111 = fadd float %109, %58, !dbg !62
  %112 = fadd float %110, %59, !dbg !62
  %113 = fadd float %99, %111, !dbg !63
  %114 = fadd float %100, %112, !dbg !63
  %115 = fsub float 0.000000e+00, %64, !dbg !64
  %116 = fsub float 0.000000e+00, %66, !dbg !64
  %117 = fmul float %115, 0x3FF7154760000000, !dbg !66
  %118 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %117) #1, !dbg !66
  %119 = fmul float %116, 0x3FF7154760000000, !dbg !66
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #1, !dbg !66
  %121 = fadd float %118, 1.000000e+00, !dbg !67
  %122 = fadd float %120, 1.000000e+00, !dbg !67
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %121) #1, !dbg !68
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %122) #1, !dbg !68
  %125 = fadd float %123, %73, !dbg !69
  %126 = fadd float %124, %74, !dbg !69
  %127 = fadd float %113, %125, !dbg !70
  %128 = fadd float %114, %126, !dbg !70
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 4.000000e+00) #1, !dbg !71
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float 4.000000e+00) #1, !dbg !71
  %131 = sext i32 %10 to i64, !dbg !72
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !72
  %133 = bitcast float %129 to i32, !dbg !73
  %134 = bitcast float %130 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %134, ptr addrspace(1) %132, i1 %11) #1, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cspfsmzqnzvbjhzhnurfurhtahkvn7ikqa2tefggddymdjiefcc4.py", directory: "inductor_cache/sp")
!4 = !{ptr @triton_poi_fused_add_mean_sigmoid_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mean_sigmoid_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mean_sigmoid_2", linkageName: "triton_poi_fused_add_mean_sigmoid_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 38, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 43, scope: !7)
!24 = !DILocation(line: 29, column: 34, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 40, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 48, scope: !7)
!30 = !DILocation(line: 31, column: 34, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 41, scope: !7)
!33 = !DILocation(line: 32, column: 41, scope: !7)
!34 = !DILocation(line: 32, column: 31, scope: !7)
!35 = !DILocation(line: 32, column: 49, scope: !7)
!36 = !DILocation(line: 33, column: 35, scope: !7)
!37 = !DILocation(line: 33, column: 31, scope: !7)
!38 = !DILocation(line: 33, column: 42, scope: !7)
!39 = !DILocation(line: 34, column: 41, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 49, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 35, column: 22, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 36, column: 18, scope: !7)
!50 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !51)
!51 = !DILocation(line: 37, column: 22, scope: !7)
!52 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !51)
!53 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !51)
!54 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !51)
!55 = !DILocation(line: 38, column: 18, scope: !7)
!56 = !DILocation(line: 39, column: 18, scope: !7)
!57 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !58)
!58 = !DILocation(line: 40, column: 23, scope: !7)
!59 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !58)
!60 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !58)
!61 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !58)
!62 = !DILocation(line: 41, column: 20, scope: !7)
!63 = !DILocation(line: 42, column: 19, scope: !7)
!64 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !65)
!65 = !DILocation(line: 43, column: 23, scope: !7)
!66 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !65)
!67 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !65)
!68 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !65)
!69 = !DILocation(line: 44, column: 20, scope: !7)
!70 = !DILocation(line: 45, column: 20, scope: !7)
!71 = !DILocation(line: 47, column: 20, scope: !7)
!72 = !DILocation(line: 48, column: 25, scope: !7)
!73 = !DILocation(line: 48, column: 37, scope: !7)
!74 = !DILocation(line: 48, column: 4, scope: !7)
