; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = srem i32 %16, 1024, !dbg !14
  %19 = srem i32 %17, 1024, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %20 = sdiv i32 %.frozen, 135168, !dbg !15
  %.frozen59 = freeze i32 %17, !dbg !15
  %21 = sdiv i32 %.frozen59, 135168, !dbg !15
  %22 = mul i32 %20, 135168, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = mul i32 %21, 135168, !dbg !16
  %srem1.decomposed = sub i32 %.frozen59, %23, !dbg !16
  %24 = mul nsw i32 %20, 110592, !dbg !17
  %25 = mul nsw i32 %21, 110592, !dbg !17
  %26 = add nsw i32 %24, %srem.decomposed, !dbg !18
  %27 = add nsw i32 %25, %srem1.decomposed, !dbg !18
  %28 = sext i32 %26 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = sext i32 %27 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !20
  %33 = insertelement <2 x i32> %32, i32 %16, i64 1, !dbg !20
  %34 = sdiv <2 x i32> %33, splat (i32 1024), !dbg !20
  %35 = srem <2 x i32> %34, splat (i32 132), !dbg !21
  %36 = extractelement <2 x i32> %35, i64 1, !dbg !22
  %37 = sext i32 %36 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !23
  %39 = extractelement <2 x i32> %35, i64 0, !dbg !22
  %40 = sext i32 %39 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !26
  %53 = bitcast i32 %52 to float, !dbg !26
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !26
  %55 = bitcast i32 %54 to float, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !26
  %57 = bitcast i32 %56 to float, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !26
  %59 = bitcast i32 %58 to float, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !26
  %63 = bitcast i32 %62 to float, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !26
  %65 = bitcast i32 %64 to float, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !26
  %67 = bitcast i32 %66 to float, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !29
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !30
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !30
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !30
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !30
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !30
  %88 = icmp slt <2 x i32> %35, splat (i32 108), !dbg !31
  %89 = extractelement <2 x i1> %88, i64 1, !dbg !32
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !32
  %91 = extractelement <2 x i1> %88, i64 0, !dbg !32
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !32
  %93 = add nsw <2 x i32> %35, splat (i32 -108), !dbg !33
  %94 = icmp ult <2 x i32> %93, splat (i32 12), !dbg !33
  %95 = shl nsw i32 %36, 10, !dbg !34
  %96 = shl nsw i32 %39, 10, !dbg !34
  %97 = mul nsw i32 %20, 12288, !dbg !35
  %98 = mul nsw i32 %21, 12288, !dbg !35
  %99 = add nsw i32 %97, %18, !dbg !34
  %100 = add nsw i32 %99, -110592, !dbg !36
  %101 = add nsw i32 %100, %95, !dbg !37
  %102 = add nsw i32 %98, %19, !dbg !34
  %103 = add nsw i32 %102, -110592, !dbg !36
  %104 = add nsw i32 %103, %96, !dbg !37
  %105 = sext i32 %101 to i64, !dbg !38
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !38
  %107 = sext i32 %104 to i64, !dbg !38
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !38
  %109 = extractelement <2 x i1> %94, i64 1, !dbg !39
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #3, !dbg !39
  %111 = extractelement <2 x i1> %94, i64 0, !dbg !39
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #3, !dbg !39
  %113 = icmp sgt i32 %36, 119, !dbg !22
  %114 = icmp sgt i32 %39, 119, !dbg !22
  %115 = add nsw i32 %99, -122880, !dbg !40
  %116 = add nsw i32 %115, %95, !dbg !41
  %117 = add nsw i32 %102, -122880, !dbg !40
  %118 = add nsw i32 %117, %96, !dbg !41
  %119 = sext i32 %116 to i64, !dbg !42
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !42
  %121 = sext i32 %118 to i64, !dbg !42
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !42
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113) #3, !dbg !43
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114) #3, !dbg !43
  %125 = fadd float %53, 0x3EE4F8B580000000, !dbg !44
  %126 = fadd float %55, 0x3EE4F8B580000000, !dbg !44
  %127 = fadd float %57, 0x3EE4F8B580000000, !dbg !44
  %128 = fadd float %59, 0x3EE4F8B580000000, !dbg !44
  %129 = fadd float %61, 0x3EE4F8B580000000, !dbg !44
  %130 = fadd float %63, 0x3EE4F8B580000000, !dbg !44
  %131 = fadd float %65, 0x3EE4F8B580000000, !dbg !44
  %132 = fadd float %67, 0x3EE4F8B580000000, !dbg !44
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %133, 0, !dbg !45
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %134, 0, !dbg !45
  br i1 %.not.i, label %140, label %135, !dbg !45

135:                                              ; preds = %10
  br i1 %.not1.i, label %138, label %136, !dbg !45

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

140:                                              ; preds = %10
  br i1 %.not1.i, label %143, label %141, !dbg !45

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %136, %138, %141, %143
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !45
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i17 = icmp eq i32 %145, 0, !dbg !45
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i20 = icmp eq i32 %146, 0, !dbg !45
  br i1 %.not.i17, label %152, label %147, !dbg !45

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %150, label %148, !dbg !45

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

152:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %155, label %153, !dbg !45

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

__nv_sqrtf.exit21:                                ; preds = %148, %150, %153, %155
  %.0.i19 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !45
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i22 = icmp eq i32 %157, 0, !dbg !45
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i25 = icmp eq i32 %158, 0, !dbg !45
  br i1 %.not.i22, label %164, label %159, !dbg !45

159:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %162, label %160, !dbg !45

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !45
  br label %__nv_sqrtf.exit26, !dbg !45

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !45
  br label %__nv_sqrtf.exit26, !dbg !45

164:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %167, label %165, !dbg !45

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !45
  br label %__nv_sqrtf.exit26, !dbg !45

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !45
  br label %__nv_sqrtf.exit26, !dbg !45

__nv_sqrtf.exit26:                                ; preds = %160, %162, %165, %167
  %.0.i24 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !45
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i27 = icmp eq i32 %169, 0, !dbg !45
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i30 = icmp eq i32 %170, 0, !dbg !45
  br i1 %.not.i27, label %176, label %171, !dbg !45

171:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %174, label %172, !dbg !45

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !45
  br label %__nv_sqrtf.exit31, !dbg !45

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !45
  br label %__nv_sqrtf.exit31, !dbg !45

176:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %179, label %177, !dbg !45

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !45
  br label %__nv_sqrtf.exit31, !dbg !45

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !45
  br label %__nv_sqrtf.exit31, !dbg !45

__nv_sqrtf.exit31:                                ; preds = %172, %174, %177, %179
  %.0.i29 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !45
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i32 = icmp eq i32 %181, 0, !dbg !45
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i35 = icmp eq i32 %182, 0, !dbg !45
  br i1 %.not.i32, label %188, label %183, !dbg !45

183:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %186, label %184, !dbg !45

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !45
  br label %__nv_sqrtf.exit36, !dbg !45

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !45
  br label %__nv_sqrtf.exit36, !dbg !45

188:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %191, label %189, !dbg !45

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !45
  br label %__nv_sqrtf.exit36, !dbg !45

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !45
  br label %__nv_sqrtf.exit36, !dbg !45

__nv_sqrtf.exit36:                                ; preds = %184, %186, %189, %191
  %.0.i34 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !45
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i37 = icmp eq i32 %193, 0, !dbg !45
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i40 = icmp eq i32 %194, 0, !dbg !45
  br i1 %.not.i37, label %200, label %195, !dbg !45

195:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %198, label %196, !dbg !45

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !45
  br label %__nv_sqrtf.exit41, !dbg !45

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !45
  br label %__nv_sqrtf.exit41, !dbg !45

200:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %203, label %201, !dbg !45

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !45
  br label %__nv_sqrtf.exit41, !dbg !45

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !45
  br label %__nv_sqrtf.exit41, !dbg !45

__nv_sqrtf.exit41:                                ; preds = %196, %198, %201, %203
  %.0.i39 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !45
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i42 = icmp eq i32 %205, 0, !dbg !45
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i45 = icmp eq i32 %206, 0, !dbg !45
  br i1 %.not.i42, label %212, label %207, !dbg !45

207:                                              ; preds = %__nv_sqrtf.exit41
  br i1 %.not1.i45, label %210, label %208, !dbg !45

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !45
  br label %__nv_sqrtf.exit46, !dbg !45

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !45
  br label %__nv_sqrtf.exit46, !dbg !45

212:                                              ; preds = %__nv_sqrtf.exit41
  br i1 %.not1.i45, label %215, label %213, !dbg !45

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !45
  br label %__nv_sqrtf.exit46, !dbg !45

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !45
  br label %__nv_sqrtf.exit46, !dbg !45

__nv_sqrtf.exit46:                                ; preds = %208, %210, %213, %215
  %.0.i44 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !45
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i47 = icmp eq i32 %217, 0, !dbg !45
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i50 = icmp eq i32 %218, 0, !dbg !45
  br i1 %.not.i47, label %224, label %219, !dbg !45

219:                                              ; preds = %__nv_sqrtf.exit46
  br i1 %.not1.i50, label %222, label %220, !dbg !45

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !45
  br label %__nv_sqrtf.exit51, !dbg !45

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !45
  br label %__nv_sqrtf.exit51, !dbg !45

224:                                              ; preds = %__nv_sqrtf.exit46
  br i1 %.not1.i50, label %227, label %225, !dbg !45

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !45
  br label %__nv_sqrtf.exit51, !dbg !45

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !45
  br label %__nv_sqrtf.exit51, !dbg !45

__nv_sqrtf.exit51:                                ; preds = %220, %222, %225, %227
  %.0.i49 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !45
  %229 = shufflevector <2 x i1> %94, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !33
  %230 = shufflevector <2 x i1> %88, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !31
  %231 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !32
  %232 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !39
  %233 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !43
  %234 = insertelement <8 x i32> poison, i32 %49, i64 0, !dbg !24
  %235 = insertelement <8 x i32> %234, i32 %48, i64 1, !dbg !24
  %236 = insertelement <8 x i32> %235, i32 %47, i64 2, !dbg !24
  %237 = insertelement <8 x i32> %236, i32 %46, i64 3, !dbg !24
  %238 = insertelement <8 x i32> %237, i32 %45, i64 4, !dbg !24
  %239 = insertelement <8 x i32> %238, i32 %44, i64 5, !dbg !24
  %240 = insertelement <8 x i32> %239, i32 %43, i64 6, !dbg !24
  %241 = insertelement <8 x i32> %240, i32 %42, i64 7, !dbg !24
  %242 = bitcast <8 x i32> %241 to <8 x float>, !dbg !24
  %243 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !32
  %244 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !39
  %245 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !43
  %246 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !32
  %247 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !39
  %248 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !43
  %249 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !32
  %250 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !39
  %251 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !43
  %252 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !32
  %253 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !39
  %254 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !43
  %255 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !32
  %256 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !39
  %257 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !43
  %258 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !32
  %259 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !39
  %260 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !43
  %261 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !32
  %262 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !39
  %263 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !43
  %264 = insertelement <8 x i32> poison, i32 %87, i64 0, !dbg !30
  %265 = insertelement <8 x i32> %264, i32 %86, i64 1, !dbg !30
  %266 = insertelement <8 x i32> %265, i32 %85, i64 2, !dbg !30
  %267 = insertelement <8 x i32> %266, i32 %84, i64 3, !dbg !30
  %268 = insertelement <8 x i32> %267, i32 %83, i64 4, !dbg !30
  %269 = insertelement <8 x i32> %268, i32 %82, i64 5, !dbg !30
  %270 = insertelement <8 x i32> %269, i32 %81, i64 6, !dbg !30
  %271 = insertelement <8 x i32> %270, i32 %80, i64 7, !dbg !30
  %272 = bitcast <8 x i32> %271 to <8 x float>, !dbg !30
  %273 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !28
  %274 = insertelement <8 x i32> %273, i32 %76, i64 1, !dbg !28
  %275 = insertelement <8 x i32> %274, i32 %75, i64 2, !dbg !28
  %276 = insertelement <8 x i32> %275, i32 %74, i64 3, !dbg !28
  %277 = insertelement <8 x i32> %276, i32 %73, i64 4, !dbg !28
  %278 = insertelement <8 x i32> %277, i32 %72, i64 5, !dbg !28
  %279 = insertelement <8 x i32> %278, i32 %71, i64 6, !dbg !28
  %280 = insertelement <8 x i32> %279, i32 %70, i64 7, !dbg !28
  %281 = bitcast <8 x i32> %280 to <8 x float>, !dbg !28
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !46
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !46
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !46
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !46
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i39) #3, !dbg !46
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i44) #3, !dbg !46
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i49) #3, !dbg !46
  %290 = insertelement <8 x i32> poison, i32 %232, i64 0, !dbg !47
  %291 = insertelement <8 x i32> %290, i32 %244, i64 1, !dbg !47
  %292 = insertelement <8 x i32> %291, i32 %247, i64 2, !dbg !47
  %293 = insertelement <8 x i32> %292, i32 %250, i64 3, !dbg !47
  %294 = insertelement <8 x i32> %293, i32 %253, i64 4, !dbg !47
  %295 = insertelement <8 x i32> %294, i32 %256, i64 5, !dbg !47
  %296 = insertelement <8 x i32> %295, i32 %259, i64 6, !dbg !47
  %297 = insertelement <8 x i32> %296, i32 %262, i64 7, !dbg !47
  %298 = insertelement <8 x i32> poison, i32 %233, i64 0, !dbg !47
  %299 = insertelement <8 x i32> %298, i32 %245, i64 1, !dbg !47
  %300 = insertelement <8 x i32> %299, i32 %248, i64 2, !dbg !47
  %301 = insertelement <8 x i32> %300, i32 %251, i64 3, !dbg !47
  %302 = insertelement <8 x i32> %301, i32 %254, i64 4, !dbg !47
  %303 = insertelement <8 x i32> %302, i32 %257, i64 5, !dbg !47
  %304 = insertelement <8 x i32> %303, i32 %260, i64 6, !dbg !47
  %305 = insertelement <8 x i32> %304, i32 %263, i64 7, !dbg !47
  %306 = select <8 x i1> %229, <8 x i32> %297, <8 x i32> %305, !dbg !47
  %307 = insertelement <8 x i32> poison, i32 %231, i64 0, !dbg !48
  %308 = insertelement <8 x i32> %307, i32 %243, i64 1, !dbg !48
  %309 = insertelement <8 x i32> %308, i32 %246, i64 2, !dbg !48
  %310 = insertelement <8 x i32> %309, i32 %249, i64 3, !dbg !48
  %311 = insertelement <8 x i32> %310, i32 %252, i64 4, !dbg !48
  %312 = insertelement <8 x i32> %311, i32 %255, i64 5, !dbg !48
  %313 = insertelement <8 x i32> %312, i32 %258, i64 6, !dbg !48
  %314 = insertelement <8 x i32> %313, i32 %261, i64 7, !dbg !48
  %315 = select <8 x i1> %230, <8 x i32> %314, <8 x i32> %306, !dbg !48
  %316 = bitcast <8 x i32> %315 to <8 x float>, !dbg !48
  %317 = fsub <8 x float> %316, %242, !dbg !49
  %318 = insertelement <8 x float> poison, float %289, i64 0, !dbg !50
  %319 = insertelement <8 x float> %318, float %288, i64 1, !dbg !50
  %320 = insertelement <8 x float> %319, float %287, i64 2, !dbg !50
  %321 = insertelement <8 x float> %320, float %286, i64 3, !dbg !50
  %322 = insertelement <8 x float> %321, float %285, i64 4, !dbg !50
  %323 = insertelement <8 x float> %322, float %284, i64 5, !dbg !50
  %324 = insertelement <8 x float> %323, float %283, i64 6, !dbg !50
  %325 = insertelement <8 x float> %324, float %282, i64 7, !dbg !50
  %326 = fmul <8 x float> %317, %325, !dbg !50
  %327 = fmul <8 x float> %326, %281, !dbg !51
  %328 = fadd <8 x float> %327, %272, !dbg !52
  %329 = fcmp olt <8 x float> %328, zeroinitializer, !dbg !53
  %330 = extractelement <8 x i1> %329, i64 7, !dbg !57
  %331 = extractelement <8 x i1> %329, i64 6, !dbg !57
  %332 = extractelement <8 x i1> %329, i64 5, !dbg !57
  %333 = extractelement <8 x i1> %329, i64 4, !dbg !57
  %334 = extractelement <8 x i1> %329, i64 3, !dbg !57
  %335 = extractelement <8 x i1> %329, i64 2, !dbg !57
  %336 = extractelement <8 x i1> %329, i64 1, !dbg !57
  %337 = extractelement <8 x i1> %329, i64 0, !dbg !57
  %338 = sext i32 %16 to i64, !dbg !58
  %339 = getelementptr float, ptr addrspace(1) %7, i64 %338, !dbg !58
  %340 = sext i32 %17 to i64, !dbg !58
  %341 = getelementptr float, ptr addrspace(1) %7, i64 %340, !dbg !58
  %342 = extractelement <8 x i32> %315, i64 4, !dbg !59
  %343 = extractelement <8 x i32> %315, i64 5, !dbg !59
  %344 = extractelement <8 x i32> %315, i64 6, !dbg !59
  %345 = extractelement <8 x i32> %315, i64 7, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %345, i32 %344, i32 %343, i32 %342, ptr addrspace(1) %339, i1 true) #3, !dbg !59
  %346 = extractelement <8 x i32> %315, i64 0, !dbg !59
  %347 = extractelement <8 x i32> %315, i64 1, !dbg !59
  %348 = extractelement <8 x i32> %315, i64 2, !dbg !59
  %349 = extractelement <8 x i32> %315, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %348, i32 %347, i32 %346, ptr addrspace(1) %341, i1 true) #3, !dbg !59
  %350 = getelementptr float, ptr addrspace(1) %8, i64 %338, !dbg !60
  %351 = getelementptr float, ptr addrspace(1) %8, i64 %340, !dbg !60
  %bc = bitcast <8 x float> %328 to <8 x i32>, !dbg !61
  %352 = extractelement <8 x i32> %bc, i64 7, !dbg !61
  %353 = select i1 %330, i32 0, i32 %352, !dbg !57
  %bc52 = bitcast <8 x float> %328 to <8 x i32>, !dbg !61
  %354 = extractelement <8 x i32> %bc52, i64 6, !dbg !61
  %355 = select i1 %331, i32 0, i32 %354, !dbg !57
  %bc53 = bitcast <8 x float> %328 to <8 x i32>, !dbg !61
  %356 = extractelement <8 x i32> %bc53, i64 5, !dbg !61
  %357 = select i1 %332, i32 0, i32 %356, !dbg !57
  %bc54 = bitcast <8 x float> %328 to <8 x i32>, !dbg !61
  %358 = extractelement <8 x i32> %bc54, i64 4, !dbg !61
  %359 = select i1 %333, i32 0, i32 %358, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %353, i32 %355, i32 %357, i32 %359, ptr addrspace(1) %350, i1 true) #3, !dbg !61
  %bc55 = bitcast <8 x float> %328 to <8 x i32>, !dbg !61
  %360 = extractelement <8 x i32> %bc55, i64 3, !dbg !61
  %361 = select i1 %334, i32 0, i32 %360, !dbg !57
  %bc56 = bitcast <8 x float> %328 to <8 x i32>, !dbg !61
  %362 = extractelement <8 x i32> %bc56, i64 2, !dbg !61
  %363 = select i1 %335, i32 0, i32 %362, !dbg !57
  %bc57 = bitcast <8 x float> %328 to <8 x i32>, !dbg !61
  %364 = extractelement <8 x i32> %bc57, i64 1, !dbg !61
  %365 = select i1 %336, i32 0, i32 %364, !dbg !57
  %bc58 = bitcast <8 x float> %328 to <8 x i32>, !dbg !61
  %366 = extractelement <8 x i32> %bc58, i64 0, !dbg !61
  %367 = select i1 %337, i32 0, i32 %366, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %361, i32 %363, i32 %365, i32 %367, ptr addrspace(1) %351, i1 true) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py", directory: "inductor_cache/x6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 54, scope: !7)
!18 = !DILocation(line: 37, column: 47, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 24, column: 21, scope: !7)
!21 = !DILocation(line: 24, column: 29, scope: !7)
!22 = !DILocation(line: 43, column: 20, scope: !7)
!23 = !DILocation(line: 28, column: 31, scope: !7)
!24 = !DILocation(line: 28, column: 36, scope: !7)
!25 = !DILocation(line: 29, column: 31, scope: !7)
!26 = !DILocation(line: 29, column: 36, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 36, scope: !7)
!29 = !DILocation(line: 31, column: 31, scope: !7)
!30 = !DILocation(line: 31, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 59, scope: !7)
!33 = !DILocation(line: 41, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 42, scope: !7)
!35 = !DILocation(line: 42, column: 63, scope: !7)
!36 = !DILocation(line: 42, column: 36, scope: !7)
!37 = !DILocation(line: 42, column: 57, scope: !7)
!38 = !DILocation(line: 42, column: 31, scope: !7)
!39 = !DILocation(line: 42, column: 68, scope: !7)
!40 = !DILocation(line: 46, column: 36, scope: !7)
!41 = !DILocation(line: 46, column: 57, scope: !7)
!42 = !DILocation(line: 46, column: 31, scope: !7)
!43 = !DILocation(line: 46, column: 68, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 27, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 34, scope: !7)
!48 = !DILocation(line: 48, column: 33, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 61, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 62, column: 25, scope: !7)
!59 = !DILocation(line: 62, column: 37, scope: !7)
!60 = !DILocation(line: 63, column: 25, scope: !7)
!61 = !DILocation(line: 63, column: 37, scope: !7)
!62 = !DILocation(line: 63, column: 4, scope: !7)
