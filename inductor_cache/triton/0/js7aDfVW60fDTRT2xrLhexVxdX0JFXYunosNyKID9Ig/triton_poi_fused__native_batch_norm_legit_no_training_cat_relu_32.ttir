#loc = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0)
module {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_32(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<1024xf32> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1024xf32> loc(#loc1)
    %cst_1 = arith.constant dense<-120> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<12288> : tensor<1024xi32> loc(#loc1)
    %cst_3 = arith.constant dense<-108> : tensor<1024xi32> loc(#loc1)
    %cst_4 = arith.constant dense<120> : tensor<1024xi64> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1024xf32> loc(#loc1)
    %cst_6 = arith.constant dense<110592> : tensor<1024xi32> loc(#loc1)
    %cst_7 = arith.constant dense<108> : tensor<1024xi64> loc(#loc1)
    %cst_8 = arith.constant dense<135168> : tensor<1024xi32> loc(#loc1)
    %cst_9 = arith.constant dense<132> : tensor<1024xi32> loc(#loc1)
    %cst_10 = arith.constant dense<1024> : tensor<1024xi32> loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = arith.divsi %4, %cst_10 : tensor<1024xi32> loc(#loc6)
    %6 = arith.remsi %5, %cst_9 : tensor<1024xi32> loc(#loc7)
    %7 = arith.remsi %4, %cst_10 : tensor<1024xi32> loc(#loc8)
    %8 = arith.divsi %4, %cst_8 : tensor<1024xi32> loc(#loc9)
    %9 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %10 = tt.addptr %9, %6 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc10)
    %11 = tt.load %10 evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>> loc(#loc11)
    %12 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %13 = tt.addptr %12, %6 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    %14 = tt.load %13 evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    %15 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc14)
    %16 = tt.addptr %15, %6 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc14)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>> loc(#loc15)
    %18 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc16)
    %19 = tt.addptr %18, %6 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc16)
    %20 = tt.load %19 evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>> loc(#loc17)
    %21 = arith.extsi %6 : tensor<1024xi32> to tensor<1024xi64> loc(#loc18)
    %22 = arith.cmpi slt, %21, %cst_7 : tensor<1024xi64> loc(#loc18)
    %23 = arith.muli %6, %cst_10 : tensor<1024xi32> loc(#loc19)
    %24 = arith.addi %7, %23 : tensor<1024xi32> loc(#loc20)
    %25 = arith.muli %8, %cst_6 : tensor<1024xi32> loc(#loc21)
    %26 = arith.addi %24, %25 : tensor<1024xi32> loc(#loc22)
    %27 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc23)
    %28 = tt.addptr %27, %26 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc23)
    %29 = tt.load %28, %22, %cst_5 : tensor<1024x!tt.ptr<f32>> loc(#loc24)
    %30 = arith.cmpi sge, %21, %cst_7 : tensor<1024xi64> loc(#loc25)
    %31 = arith.cmpi slt, %21, %cst_4 : tensor<1024xi64> loc(#loc26)
    %32 = arith.andi %30, %31 : tensor<1024xi1> loc(#loc27)
    %33 = arith.addi %6, %cst_3 : tensor<1024xi32> loc(#loc28)
    %34 = arith.muli %33, %cst_10 : tensor<1024xi32> loc(#loc29)
    %35 = arith.addi %7, %34 : tensor<1024xi32> loc(#loc30)
    %36 = arith.muli %8, %cst_2 : tensor<1024xi32> loc(#loc31)
    %37 = arith.addi %35, %36 : tensor<1024xi32> loc(#loc32)
    %38 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc33)
    %39 = tt.addptr %38, %37 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc33)
    %40 = tt.load %39, %32, %cst_5 : tensor<1024x!tt.ptr<f32>> loc(#loc34)
    %41 = arith.cmpi sge, %21, %cst_4 : tensor<1024xi64> loc(#loc35)
    %42 = arith.addi %6, %cst_1 : tensor<1024xi32> loc(#loc36)
    %43 = arith.muli %42, %cst_10 : tensor<1024xi32> loc(#loc37)
    %44 = arith.addi %7, %43 : tensor<1024xi32> loc(#loc38)
    %45 = arith.addi %44, %36 : tensor<1024xi32> loc(#loc39)
    %46 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc40)
    %47 = tt.addptr %46, %45 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc40)
    %48 = tt.load %47, %41, %cst_5 : tensor<1024x!tt.ptr<f32>> loc(#loc41)
    %49 = arith.select %32, %40, %48 : tensor<1024xi1>, tensor<1024xf32> loc(#loc42)
    %50 = arith.select %22, %29, %49 : tensor<1024xi1>, tensor<1024xf32> loc(#loc43)
    %51 = arith.subf %50, %11 : tensor<1024xf32> loc(#loc44)
    %52 = arith.addf %14, %cst_0 : tensor<1024xf32> loc(#loc45)
    %53 = tt.extern_elementwise %52 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1024xf32>) -> tensor<1024xf32> loc(#loc46)
    %54 = arith.divf %cst, %53 : tensor<1024xf32> loc(#loc47)
    %55 = arith.mulf %51, %54 : tensor<1024xf32> loc(#loc48)
    %56 = arith.mulf %55, %17 : tensor<1024xf32> loc(#loc49)
    %57 = arith.addf %56, %20 : tensor<1024xf32> loc(#loc50)
    %58 = arith.cmpf ogt, %cst_5, %57 : tensor<1024xf32> loc(#loc59)
    %59 = arith.select %58, %cst_5, %57 : tensor<1024xi1>, tensor<1024xf32> loc(#loc60)
    %60 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc54)
    %61 = tt.addptr %60, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc54)
    tt.store %61, %50 : tensor<1024x!tt.ptr<f32>> loc(#loc55)
    %62 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc56)
    %63 = tt.addptr %62, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc56)
    tt.store %63, %59 : tensor<1024x!tt.ptr<f32>> loc(#loc57)
    tt.return loc(#loc58)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":21:28)
#loc3 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":21:33)
#loc4 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":22:36)
#loc5 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":22:23)
#loc6 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":24:21)
#loc7 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":24:29)
#loc8 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":25:19)
#loc9 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":26:19)
#loc10 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":28:31)
#loc11 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":28:36)
#loc12 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":29:31)
#loc13 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":29:36)
#loc14 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":30:31)
#loc15 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":30:36)
#loc16 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":31:31)
#loc17 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":31:36)
#loc18 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":36:18)
#loc19 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":37:41)
#loc20 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":37:35)
#loc21 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":37:54)
#loc22 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":37:47)
#loc23 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":37:30)
#loc24 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":37:59)
#loc25 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":38:19)
#loc26 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":40:18)
#loc27 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":41:18)
#loc28 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":42:51)
#loc29 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":42:42)
#loc30 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":42:36)
#loc31 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":42:63)
#loc32 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":42:57)
#loc33 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":42:31)
#loc34 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":42:68)
#loc35 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":43:20)
#loc36 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":46:51)
#loc37 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":46:42)
#loc38 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":46:36)
#loc39 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":46:57)
#loc40 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":46:31)
#loc41 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":46:68)
#loc42 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":47:34)
#loc43 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":48:33)
#loc44 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":49:20)
#loc45 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":51:20)
#loc46 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":52:27)
#loc47 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":54:20)
#loc48 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":57:20)
#loc49 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":58:20)
#loc50 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":59:20)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc52 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":61:42)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc54 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":62:25)
#loc55 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":62:37)
#loc56 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":63:25)
#loc57 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":63:37)
#loc58 = loc("inductor_cache/x6/cx6t7zndb7qkgsu34pmngsx2oovxmxu5smo2yqfp7mgvob4gi5ap.py":63:4)
#loc59 = loc(callsite(#loc51 at #loc52))
#loc60 = loc(callsite(#loc53 at #loc52))
