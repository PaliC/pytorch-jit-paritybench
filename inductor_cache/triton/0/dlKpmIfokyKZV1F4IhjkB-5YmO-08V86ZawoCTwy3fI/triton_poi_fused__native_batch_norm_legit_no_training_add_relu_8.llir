; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %14, 252, !dbg !12
  %17 = lshr i32 %13, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = and i32 %13, 255, !dbg !12
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = or disjoint i32 %12, %18, !dbg !13
  %22 = or disjoint i32 %21, 64, !dbg !13
  %23 = or disjoint i32 %21, 128, !dbg !13
  %24 = or disjoint i32 %21, 192, !dbg !13
  %25 = or disjoint i32 %12, %19, !dbg !13
  %26 = icmp slt i32 %20, 256, !dbg !14
  %27 = icmp slt i32 %21, 256, !dbg !14
  %28 = icmp slt i32 %22, 256, !dbg !14
  %29 = icmp slt i32 %23, 256, !dbg !14
  %30 = icmp slt i32 %24, 256, !dbg !14
  %31 = icmp slt i32 %25, 256, !dbg !14
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %33 = shl i32 %32, 4, !dbg !16
  %.lobit24 = lshr i32 %13, 6, !dbg !17
  %34 = and i32 %.lobit24, 3, !dbg !17
  %35 = or disjoint i32 %34, 4, !dbg !17
  %36 = or disjoint i32 %34, 8, !dbg !17
  %37 = or disjoint i32 %34, 12, !dbg !17
  %38 = or disjoint i32 %33, %34, !dbg !18
  %39 = or disjoint i32 %33, %35, !dbg !18
  %40 = or disjoint i32 %33, %36, !dbg !18
  %41 = or disjoint i32 %33, %37, !dbg !18
  %42 = or disjoint i32 %33, %15, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %43 = sdiv i32 %.frozen, 64, !dbg !19
  %44 = mul i32 %43, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %44, !dbg !20
  %.frozen35 = freeze i32 %21, !dbg !19
  %45 = sdiv i32 %.frozen35, 64, !dbg !19
  %46 = mul i32 %45, 64, !dbg !20
  %.decomposed36 = sub i32 %.frozen35, %46, !dbg !20
  %47 = srem i32 %25, 64, !dbg !20
  %48 = sdiv i32 %22, 64, !dbg !19
  %49 = sdiv i32 %23, 64, !dbg !19
  %50 = sdiv i32 %24, 64, !dbg !19
  %51 = shl i32 %38, 6, !dbg !21
  %52 = shl i32 %39, 6, !dbg !21
  %53 = shl i32 %40, 6, !dbg !21
  %54 = shl i32 %41, 6, !dbg !21
  %55 = shl i32 %43, 18, !dbg !22
  %56 = add i32 %55, %.decomposed, !dbg !23
  %57 = add i32 %56, %51, !dbg !24
  %58 = add i32 %56, %52, !dbg !24
  %59 = add i32 %56, %53, !dbg !24
  %60 = add i32 %56, %54, !dbg !24
  %61 = sext i32 %57 to i64, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !25
  %63 = sext i32 %58 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !25
  %65 = sext i32 %59 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !25
  %67 = sext i32 %60 to i64, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !25
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !26
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %26) #4, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !26
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %26) #4, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !26
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %26) #4, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !26
  %89 = and i32 %14, 1020, !dbg !26
  %90 = lshr i32 %14, 6, !dbg !26
  %91 = and i32 %90, 12, !dbg !26
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !26
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %89, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %93, i32 %70, i32 %71, i32 %72, i32 %73, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !26
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %96 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 1040, !dbg !26
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !26
  %98 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 2080, !dbg !26
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !26
  %100 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 3120, !dbg !26
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %93, i32 %75, i32 %76, i32 %77, i32 %78, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %102 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %103 = load float, ptr addrspace(3) %96, align 4, !dbg !26
  %104 = load float, ptr addrspace(3) %98, align 4, !dbg !26
  %105 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %93, i32 %80, i32 %81, i32 %82, i32 %83, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %106 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %107 = load float, ptr addrspace(3) %96, align 4, !dbg !26
  %108 = load float, ptr addrspace(3) %98, align 4, !dbg !26
  %109 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %93, i32 %85, i32 %86, i32 %87, i32 %88, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %110 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %111 = load float, ptr addrspace(3) %96, align 4, !dbg !26
  %112 = load float, ptr addrspace(3) %98, align 4, !dbg !26
  %113 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  %114 = sext i32 %47 to i64, !dbg !27
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !27
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %31) #4, !dbg !28
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !29
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %31) #4, !dbg !30
  %119 = bitcast i32 %118 to float, !dbg !30
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %114, !dbg !31
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %31) #4, !dbg !32
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %114, !dbg !33
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %31) #4, !dbg !34
  %124 = add i32 %42, 524288, !dbg !35
  %125 = shl nsw i32 %.decomposed36, 12, !dbg !36
  %126 = shl i32 %45, 20, !dbg !37
  %127 = shl i32 %48, 20, !dbg !37
  %128 = shl i32 %49, 20, !dbg !37
  %129 = shl i32 %50, 20, !dbg !37
  %130 = add i32 %126, %125, !dbg !38
  %131 = add i32 %130, %124, !dbg !39
  %132 = add i32 %127, %125, !dbg !38
  %133 = add i32 %132, %124, !dbg !39
  %134 = add i32 %128, %125, !dbg !38
  %135 = add i32 %134, %124, !dbg !39
  %136 = add i32 %129, %125, !dbg !38
  %137 = add i32 %136, %124, !dbg !39
  %138 = sext i32 %131 to i64, !dbg !40
  %139 = getelementptr float, ptr addrspace(1) %5, i64 %138, !dbg !40
  %140 = sext i32 %133 to i64, !dbg !40
  %141 = getelementptr float, ptr addrspace(1) %5, i64 %140, !dbg !40
  %142 = sext i32 %135 to i64, !dbg !40
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !40
  %144 = sext i32 %137 to i64, !dbg !40
  %145 = getelementptr float, ptr addrspace(1) %5, i64 %144, !dbg !40
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %27) #4, !dbg !41
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %28) #4, !dbg !41
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %29) #4, !dbg !41
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %30) #4, !dbg !41
  %150 = fadd float %119, 0x3EE4F8B580000000, !dbg !42
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not.i = icmp eq i32 %151, 0, !dbg !43
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !43
  %.not1.i = icmp eq i32 %152, 0, !dbg !43
  br i1 %.not.i, label %158, label %153, !dbg !43

153:                                              ; preds = %10
  br i1 %.not1.i, label %156, label %154, !dbg !43

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

158:                                              ; preds = %10
  br i1 %.not1.i, label %161, label %159, !dbg !43

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %154, %156, %159, %161
  %.0.i = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !43
  %163 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !41
  %164 = bitcast i32 %163 to float, !dbg !41
  %165 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !41
  %166 = bitcast i32 %165 to float, !dbg !41
  %167 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !41
  %168 = bitcast i32 %167 to float, !dbg !41
  %169 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !41
  %170 = bitcast i32 %169 to float, !dbg !41
  %171 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !41
  %172 = bitcast i32 %171 to float, !dbg !41
  %173 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !41
  %174 = bitcast i32 %173 to float, !dbg !41
  %175 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !41
  %176 = bitcast i32 %175 to float, !dbg !41
  %177 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !41
  %178 = bitcast i32 %177 to float, !dbg !41
  %179 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !41
  %180 = bitcast i32 %179 to float, !dbg !41
  %181 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !41
  %182 = bitcast i32 %181 to float, !dbg !41
  %183 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !41
  %184 = bitcast i32 %183 to float, !dbg !41
  %185 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !41
  %186 = bitcast i32 %185 to float, !dbg !41
  %187 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !41
  %188 = bitcast i32 %187 to float, !dbg !41
  %189 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !41
  %190 = bitcast i32 %189 to float, !dbg !41
  %191 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !41
  %192 = bitcast i32 %191 to float, !dbg !41
  %193 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !41
  %194 = bitcast i32 %193 to float, !dbg !41
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !44
  %196 = insertelement <16 x float> poison, float %113, i64 0, !dbg !45
  %197 = insertelement <16 x float> %196, float %112, i64 1, !dbg !45
  %198 = insertelement <16 x float> %197, float %111, i64 2, !dbg !45
  %199 = insertelement <16 x float> %198, float %110, i64 3, !dbg !45
  %200 = insertelement <16 x float> %199, float %109, i64 4, !dbg !45
  %201 = insertelement <16 x float> %200, float %108, i64 5, !dbg !45
  %202 = insertelement <16 x float> %201, float %107, i64 6, !dbg !45
  %203 = insertelement <16 x float> %202, float %106, i64 7, !dbg !45
  %204 = insertelement <16 x float> %203, float %105, i64 8, !dbg !45
  %205 = insertelement <16 x float> %204, float %104, i64 9, !dbg !45
  %206 = insertelement <16 x float> %205, float %103, i64 10, !dbg !45
  %207 = insertelement <16 x float> %206, float %102, i64 11, !dbg !45
  %208 = insertelement <16 x float> %207, float %101, i64 12, !dbg !45
  %209 = insertelement <16 x float> %208, float %99, i64 13, !dbg !45
  %210 = insertelement <16 x float> %209, float %97, i64 14, !dbg !45
  %211 = insertelement <16 x float> %210, float %95, i64 15, !dbg !45
  %212 = insertelement <16 x i32> poison, i32 %116, i64 0, !dbg !45
  %213 = bitcast <16 x i32> %212 to <16 x float>, !dbg !45
  %214 = shufflevector <16 x float> %213, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !45
  %215 = fsub <16 x float> %211, %214, !dbg !45
  %216 = insertelement <16 x float> poison, float %195, i64 0, !dbg !46
  %217 = shufflevector <16 x float> %216, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !46
  %218 = fmul <16 x float> %215, %217, !dbg !46
  %219 = insertelement <16 x i32> poison, i32 %121, i64 0, !dbg !47
  %220 = bitcast <16 x i32> %219 to <16 x float>, !dbg !47
  %221 = shufflevector <16 x float> %220, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !47
  %222 = fmul <16 x float> %218, %221, !dbg !47
  %223 = insertelement <16 x i32> poison, i32 %123, i64 0, !dbg !48
  %224 = bitcast <16 x i32> %223 to <16 x float>, !dbg !48
  %225 = shufflevector <16 x float> %224, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !48
  %226 = fadd <16 x float> %222, %225, !dbg !48
  %227 = fcmp olt <16 x float> %226, zeroinitializer, !dbg !49
  %228 = extractelement <16 x i1> %227, i64 15, !dbg !53
  %229 = extractelement <16 x float> %226, i64 15, !dbg !53
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !53
  %231 = extractelement <16 x i1> %227, i64 14, !dbg !53
  %232 = extractelement <16 x float> %226, i64 14, !dbg !53
  %233 = select i1 %231, float 0.000000e+00, float %232, !dbg !53
  %234 = extractelement <16 x i1> %227, i64 13, !dbg !53
  %235 = extractelement <16 x float> %226, i64 13, !dbg !53
  %236 = select i1 %234, float 0.000000e+00, float %235, !dbg !53
  %237 = extractelement <16 x i1> %227, i64 12, !dbg !53
  %238 = extractelement <16 x float> %226, i64 12, !dbg !53
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !53
  %240 = extractelement <16 x i1> %227, i64 11, !dbg !53
  %241 = extractelement <16 x float> %226, i64 11, !dbg !53
  %242 = select i1 %240, float 0.000000e+00, float %241, !dbg !53
  %243 = extractelement <16 x i1> %227, i64 10, !dbg !53
  %244 = extractelement <16 x float> %226, i64 10, !dbg !53
  %245 = select i1 %243, float 0.000000e+00, float %244, !dbg !53
  %246 = extractelement <16 x i1> %227, i64 9, !dbg !53
  %247 = extractelement <16 x float> %226, i64 9, !dbg !53
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !53
  %249 = extractelement <16 x i1> %227, i64 8, !dbg !53
  %250 = extractelement <16 x float> %226, i64 8, !dbg !53
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !53
  %252 = extractelement <16 x i1> %227, i64 7, !dbg !53
  %253 = extractelement <16 x float> %226, i64 7, !dbg !53
  %254 = select i1 %252, float 0.000000e+00, float %253, !dbg !53
  %255 = extractelement <16 x i1> %227, i64 6, !dbg !53
  %256 = extractelement <16 x float> %226, i64 6, !dbg !53
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !53
  %258 = extractelement <16 x i1> %227, i64 5, !dbg !53
  %259 = extractelement <16 x float> %226, i64 5, !dbg !53
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !53
  %261 = extractelement <16 x i1> %227, i64 4, !dbg !53
  %262 = extractelement <16 x float> %226, i64 4, !dbg !53
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !53
  %264 = extractelement <16 x i1> %227, i64 3, !dbg !53
  %265 = extractelement <16 x float> %226, i64 3, !dbg !53
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !53
  %267 = extractelement <16 x i1> %227, i64 2, !dbg !53
  %268 = extractelement <16 x float> %226, i64 2, !dbg !53
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !53
  %270 = extractelement <16 x i1> %227, i64 1, !dbg !53
  %271 = extractelement <16 x float> %226, i64 1, !dbg !53
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !53
  %273 = extractelement <16 x i1> %227, i64 0, !dbg !53
  %274 = extractelement <16 x float> %226, i64 0, !dbg !53
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %276 = shl i32 %13, 4, !dbg !53
  %277 = and i32 %276, 4080, !dbg !53
  %278 = lshr exact i32 %277, 2, !dbg !53
  %279 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %278, !dbg !53
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !53
  %281 = bitcast float %230 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !53
  %282 = or disjoint i32 %277, 1, !dbg !53
  %283 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %282, !dbg !53
  %284 = bitcast float %233 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !53
  %285 = or disjoint i32 %277, 2, !dbg !53
  %286 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %285, !dbg !53
  %287 = bitcast float %236 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !53
  %288 = or disjoint i32 %277, 3, !dbg !53
  %289 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %288, !dbg !53
  %290 = bitcast float %239 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #4, !dbg !53
  %291 = or disjoint i32 %277, 4, !dbg !53
  %292 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %291, !dbg !53
  %293 = bitcast float %242 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !53
  %294 = or disjoint i32 %277, 5, !dbg !53
  %295 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %294, !dbg !53
  %296 = bitcast float %245 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 true) #4, !dbg !53
  %297 = or disjoint i32 %277, 6, !dbg !53
  %298 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %297, !dbg !53
  %299 = bitcast float %248 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !53
  %300 = or disjoint i32 %277, 7, !dbg !53
  %301 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %300, !dbg !53
  %302 = bitcast float %251 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !53
  %303 = or disjoint i32 %277, 8, !dbg !53
  %304 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %303, !dbg !53
  %305 = bitcast float %254 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #4, !dbg !53
  %306 = or disjoint i32 %277, 9, !dbg !53
  %307 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %306, !dbg !53
  %308 = bitcast float %257 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #4, !dbg !53
  %309 = or disjoint i32 %277, 10, !dbg !53
  %310 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %309, !dbg !53
  %311 = bitcast float %260 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #4, !dbg !53
  %312 = or disjoint i32 %277, 11, !dbg !53
  %313 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %312, !dbg !53
  %314 = bitcast float %263 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #4, !dbg !53
  %315 = or disjoint i32 %277, 12, !dbg !53
  %316 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %315, !dbg !53
  %317 = bitcast float %266 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #4, !dbg !53
  %318 = or disjoint i32 %277, 13, !dbg !53
  %319 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %318, !dbg !53
  %320 = bitcast float %269 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #4, !dbg !53
  %321 = or disjoint i32 %277, 14, !dbg !53
  %322 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %321, !dbg !53
  %323 = bitcast float %272 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #4, !dbg !53
  %324 = or disjoint i32 %277, 15, !dbg !53
  %325 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %324, !dbg !53
  %326 = bitcast float %275 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %327 = lshr i32 %89, 4, !dbg !53
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !53
  %329 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %89, !dbg !53
  %330 = load float, ptr addrspace(3) %329, align 4, !dbg !53
  %331 = or disjoint i32 %89, 1, !dbg !53
  %332 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %331, !dbg !53
  %333 = load float, ptr addrspace(3) %332, align 4, !dbg !53
  %334 = or disjoint i32 %89, 2, !dbg !53
  %335 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %334, !dbg !53
  %336 = load float, ptr addrspace(3) %335, align 4, !dbg !53
  %337 = or disjoint i32 %89, 3, !dbg !53
  %338 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %337, !dbg !53
  %339 = load float, ptr addrspace(3) %338, align 4, !dbg !53
  %340 = or disjoint i32 %89, 1024, !dbg !53
  %341 = lshr i32 %340, 4, !dbg !53
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !53
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !53
  %344 = load float, ptr addrspace(3) %343, align 4, !dbg !53
  %345 = or disjoint i32 %89, 1025, !dbg !53
  %346 = lshr i32 %345, 4, !dbg !53
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !53
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %345, !dbg !53
  %349 = load float, ptr addrspace(3) %348, align 4, !dbg !53
  %350 = or disjoint i32 %89, 1026, !dbg !53
  %351 = lshr i32 %350, 4, !dbg !53
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !53
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %350, !dbg !53
  %354 = load float, ptr addrspace(3) %353, align 4, !dbg !53
  %355 = or disjoint i32 %89, 1027, !dbg !53
  %356 = lshr i32 %355, 4, !dbg !53
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !53
  %358 = getelementptr inbounds float, ptr addrspace(3) %357, i32 %355, !dbg !53
  %359 = load float, ptr addrspace(3) %358, align 4, !dbg !53
  %360 = or disjoint i32 %89, 2048, !dbg !53
  %361 = lshr i32 %360, 4, !dbg !53
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !53
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %360, !dbg !53
  %364 = load float, ptr addrspace(3) %363, align 4, !dbg !53
  %365 = or disjoint i32 %89, 2049, !dbg !53
  %366 = lshr i32 %365, 4, !dbg !53
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !53
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %365, !dbg !53
  %369 = load float, ptr addrspace(3) %368, align 4, !dbg !53
  %370 = or disjoint i32 %89, 2050, !dbg !53
  %371 = lshr i32 %370, 4, !dbg !53
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !53
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %370, !dbg !53
  %374 = load float, ptr addrspace(3) %373, align 4, !dbg !53
  %375 = or disjoint i32 %89, 2051, !dbg !53
  %376 = lshr i32 %375, 4, !dbg !53
  %377 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %376, !dbg !53
  %378 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %375, !dbg !53
  %379 = load float, ptr addrspace(3) %378, align 4, !dbg !53
  %380 = or disjoint i32 %89, 3072, !dbg !53
  %381 = lshr i32 %380, 4, !dbg !53
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %381, !dbg !53
  %383 = getelementptr inbounds float, ptr addrspace(3) %382, i32 %380, !dbg !53
  %384 = load float, ptr addrspace(3) %383, align 4, !dbg !53
  %385 = or disjoint i32 %89, 3073, !dbg !53
  %386 = lshr i32 %385, 4, !dbg !53
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %386, !dbg !53
  %388 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %385, !dbg !53
  %389 = load float, ptr addrspace(3) %388, align 4, !dbg !53
  %390 = or disjoint i32 %89, 3074, !dbg !53
  %391 = lshr i32 %390, 4, !dbg !53
  %392 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %391, !dbg !53
  %393 = getelementptr inbounds float, ptr addrspace(3) %392, i32 %390, !dbg !53
  %394 = load float, ptr addrspace(3) %393, align 4, !dbg !53
  %395 = or disjoint i32 %89, 3075, !dbg !53
  %396 = lshr i32 %395, 4, !dbg !53
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %396, !dbg !53
  %398 = getelementptr inbounds float, ptr addrspace(3) %397, i32 %395, !dbg !53
  %399 = load float, ptr addrspace(3) %398, align 4, !dbg !53
  %400 = fadd float %330, %194, !dbg !54
  %401 = fadd float %333, %192, !dbg !54
  %402 = fadd float %336, %190, !dbg !54
  %403 = fadd float %339, %188, !dbg !54
  %404 = fadd float %344, %186, !dbg !54
  %405 = fadd float %349, %184, !dbg !54
  %406 = fadd float %354, %182, !dbg !54
  %407 = fadd float %359, %180, !dbg !54
  %408 = fadd float %364, %178, !dbg !54
  %409 = fadd float %369, %176, !dbg !54
  %410 = fadd float %374, %174, !dbg !54
  %411 = fadd float %379, %172, !dbg !54
  %412 = fadd float %384, %170, !dbg !54
  %413 = fadd float %389, %168, !dbg !54
  %414 = fadd float %394, %166, !dbg !54
  %415 = fadd float %399, %164, !dbg !54
  %416 = add i32 %130, %42, !dbg !55
  %417 = add i32 %132, %42, !dbg !55
  %418 = add i32 %134, %42, !dbg !55
  %419 = add i32 %136, %42, !dbg !55
  %420 = sext i32 %416 to i64, !dbg !56
  %421 = getelementptr float, ptr addrspace(1) %6, i64 %420, !dbg !56
  %422 = sext i32 %417 to i64, !dbg !56
  %423 = getelementptr float, ptr addrspace(1) %6, i64 %422, !dbg !56
  %424 = sext i32 %418 to i64, !dbg !56
  %425 = getelementptr float, ptr addrspace(1) %6, i64 %424, !dbg !56
  %426 = sext i32 %419 to i64, !dbg !56
  %427 = getelementptr float, ptr addrspace(1) %6, i64 %426, !dbg !56
  %428 = bitcast float %330 to i32, !dbg !57
  %429 = bitcast float %333 to i32, !dbg !57
  %430 = bitcast float %336 to i32, !dbg !57
  %431 = bitcast float %339 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %428, i32 %429, i32 %430, i32 %431, ptr addrspace(1) %421, i1 %27) #4, !dbg !57
  %432 = bitcast float %344 to i32, !dbg !57
  %433 = bitcast float %349 to i32, !dbg !57
  %434 = bitcast float %354 to i32, !dbg !57
  %435 = bitcast float %359 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %432, i32 %433, i32 %434, i32 %435, ptr addrspace(1) %423, i1 %28) #4, !dbg !57
  %436 = bitcast float %364 to i32, !dbg !57
  %437 = bitcast float %369 to i32, !dbg !57
  %438 = bitcast float %374 to i32, !dbg !57
  %439 = bitcast float %379 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %425, i1 %29) #4, !dbg !57
  %440 = bitcast float %384 to i32, !dbg !57
  %441 = bitcast float %389 to i32, !dbg !57
  %442 = bitcast float %394 to i32, !dbg !57
  %443 = bitcast float %399 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %427, i1 %30) #4, !dbg !57
  %444 = getelementptr float, ptr addrspace(1) %7, i64 %61, !dbg !58
  %445 = getelementptr float, ptr addrspace(1) %7, i64 %63, !dbg !58
  %446 = getelementptr float, ptr addrspace(1) %7, i64 %65, !dbg !58
  %447 = getelementptr float, ptr addrspace(1) %7, i64 %67, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %448 = shl i32 %13, 10, !dbg !59
  %449 = and i32 %448, 3072, !dbg !59
  %450 = or disjoint i32 %449, %18, !dbg !59
  %451 = lshr exact i32 %449, 4, !dbg !59
  %452 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %451, !dbg !59
  %453 = getelementptr float, ptr addrspace(3) %452, i32 %450, !dbg !59
  %454 = bitcast float %400 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %454, i1 true) #4, !dbg !59
  %455 = or disjoint i32 %450, 256, !dbg !59
  %456 = lshr i32 %455, 6, !dbg !59
  %457 = getelementptr float, ptr addrspace(3) @global_smem, i32 %456, !dbg !59
  %458 = getelementptr float, ptr addrspace(3) %457, i32 %455, !dbg !59
  %459 = bitcast float %401 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %459, i1 true) #4, !dbg !59
  %460 = or disjoint i32 %450, 512, !dbg !59
  %461 = lshr i32 %460, 6, !dbg !59
  %462 = getelementptr float, ptr addrspace(3) @global_smem, i32 %461, !dbg !59
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %460, !dbg !59
  %464 = bitcast float %402 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %464, i1 true) #4, !dbg !59
  %465 = or disjoint i32 %450, 768, !dbg !59
  %466 = lshr i32 %465, 6, !dbg !59
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %466, !dbg !59
  %468 = getelementptr float, ptr addrspace(3) %467, i32 %465, !dbg !59
  %469 = bitcast float %403 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %469, i1 true) #4, !dbg !59
  %470 = or disjoint i32 %450, 64, !dbg !59
  %471 = getelementptr float, ptr addrspace(3) %452, i32 %470, !dbg !59
  %472 = bitcast float %404 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %472, i1 true) #4, !dbg !59
  %473 = or disjoint i32 %450, 320, !dbg !59
  %474 = lshr i32 %473, 6, !dbg !59
  %475 = and i32 %474, 52, !dbg !59
  %476 = getelementptr float, ptr addrspace(3) @global_smem, i32 %475, !dbg !59
  %477 = getelementptr float, ptr addrspace(3) %476, i32 %473, !dbg !59
  %478 = bitcast float %405 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %478, i1 true) #4, !dbg !59
  %479 = or disjoint i32 %450, 576, !dbg !59
  %480 = lshr i32 %479, 6, !dbg !59
  %481 = and i32 %480, 56, !dbg !59
  %482 = getelementptr float, ptr addrspace(3) @global_smem, i32 %481, !dbg !59
  %483 = getelementptr float, ptr addrspace(3) %482, i32 %479, !dbg !59
  %484 = bitcast float %406 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %484, i1 true) #4, !dbg !59
  %485 = or disjoint i32 %450, 832, !dbg !59
  %486 = lshr i32 %485, 6, !dbg !59
  %487 = and i32 %486, 60, !dbg !59
  %488 = getelementptr float, ptr addrspace(3) @global_smem, i32 %487, !dbg !59
  %489 = getelementptr float, ptr addrspace(3) %488, i32 %485, !dbg !59
  %490 = bitcast float %407 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %489, <1 x i32> %490, i1 true) #4, !dbg !59
  %491 = or disjoint i32 %450, 128, !dbg !59
  %492 = getelementptr float, ptr addrspace(3) %452, i32 %491, !dbg !59
  %493 = bitcast float %408 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %492, <1 x i32> %493, i1 true) #4, !dbg !59
  %494 = or disjoint i32 %450, 384, !dbg !59
  %495 = lshr i32 %494, 6, !dbg !59
  %496 = and i32 %495, 52, !dbg !59
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %496, !dbg !59
  %498 = getelementptr float, ptr addrspace(3) %497, i32 %494, !dbg !59
  %499 = bitcast float %409 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %499, i1 true) #4, !dbg !59
  %500 = or disjoint i32 %450, 640, !dbg !59
  %501 = lshr i32 %500, 6, !dbg !59
  %502 = and i32 %501, 56, !dbg !59
  %503 = getelementptr float, ptr addrspace(3) @global_smem, i32 %502, !dbg !59
  %504 = getelementptr float, ptr addrspace(3) %503, i32 %500, !dbg !59
  %505 = bitcast float %410 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %504, <1 x i32> %505, i1 true) #4, !dbg !59
  %506 = or disjoint i32 %450, 896, !dbg !59
  %507 = lshr i32 %506, 6, !dbg !59
  %508 = and i32 %507, 60, !dbg !59
  %509 = getelementptr float, ptr addrspace(3) @global_smem, i32 %508, !dbg !59
  %510 = getelementptr float, ptr addrspace(3) %509, i32 %506, !dbg !59
  %511 = bitcast float %411 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %510, <1 x i32> %511, i1 true) #4, !dbg !59
  %512 = or disjoint i32 %450, 192, !dbg !59
  %513 = getelementptr float, ptr addrspace(3) %452, i32 %512, !dbg !59
  %514 = bitcast float %412 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %514, i1 true) #4, !dbg !59
  %515 = or disjoint i32 %450, 448, !dbg !59
  %516 = lshr i32 %515, 6, !dbg !59
  %517 = and i32 %516, 52, !dbg !59
  %518 = getelementptr float, ptr addrspace(3) @global_smem, i32 %517, !dbg !59
  %519 = getelementptr float, ptr addrspace(3) %518, i32 %515, !dbg !59
  %520 = bitcast float %413 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %520, i1 true) #4, !dbg !59
  %521 = or disjoint i32 %450, 704, !dbg !59
  %522 = lshr i32 %521, 6, !dbg !59
  %523 = and i32 %522, 56, !dbg !59
  %524 = getelementptr float, ptr addrspace(3) @global_smem, i32 %523, !dbg !59
  %525 = getelementptr float, ptr addrspace(3) %524, i32 %521, !dbg !59
  %526 = bitcast float %414 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %525, <1 x i32> %526, i1 true) #4, !dbg !59
  %527 = or disjoint i32 %450, 960, !dbg !59
  %528 = lshr i32 %527, 6, !dbg !59
  %529 = and i32 %528, 60, !dbg !59
  %530 = getelementptr float, ptr addrspace(3) @global_smem, i32 %529, !dbg !59
  %531 = getelementptr float, ptr addrspace(3) %530, i32 %527, !dbg !59
  %532 = bitcast float %415 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %532, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %533 = lshr i32 %340, 6, !dbg !59
  %534 = and i32 %533, 28, !dbg !59
  %535 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %534, !dbg !59
  %536 = getelementptr inbounds float, ptr addrspace(3) %535, i32 %340, !dbg !59
  %537 = load <4 x i32>, ptr addrspace(3) %536, align 16, !dbg !59
  %538 = lshr i32 %360, 6, !dbg !59
  %539 = and i32 %538, 44, !dbg !59
  %540 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %539, !dbg !59
  %541 = getelementptr inbounds float, ptr addrspace(3) %540, i32 %360, !dbg !59
  %542 = load <4 x i32>, ptr addrspace(3) %541, align 16, !dbg !59
  %543 = lshr i32 %380, 6, !dbg !59
  %544 = and i32 %543, 60, !dbg !59
  %545 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %544, !dbg !59
  %546 = getelementptr inbounds float, ptr addrspace(3) %545, i32 %380, !dbg !59
  %547 = load <4 x i32>, ptr addrspace(3) %546, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %93, align 16, !dbg !59
  %548 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 4, !dbg !59
  %.extract20 = load i32, ptr addrspace(3) %548, align 4, !dbg !59
  %549 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 8, !dbg !59
  %.extract21 = load i32, ptr addrspace(3) %549, align 8, !dbg !59
  %550 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 12, !dbg !59
  %.extract22 = load i32, ptr addrspace(3) %550, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %444, i1 %26) #4, !dbg !59
  %.extract23 = extractelement <4 x i32> %537, i64 0, !dbg !59
  %.extract24 = extractelement <4 x i32> %537, i64 1, !dbg !59
  %.extract25 = extractelement <4 x i32> %537, i64 2, !dbg !59
  %.extract26 = extractelement <4 x i32> %537, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %445, i1 %26) #4, !dbg !59
  %.extract27 = extractelement <4 x i32> %542, i64 0, !dbg !59
  %.extract28 = extractelement <4 x i32> %542, i64 1, !dbg !59
  %.extract29 = extractelement <4 x i32> %542, i64 2, !dbg !59
  %.extract30 = extractelement <4 x i32> %542, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %446, i1 %26) #4, !dbg !59
  %.extract31 = extractelement <4 x i32> %547, i64 0, !dbg !59
  %.extract32 = extractelement <4 x i32> %547, i64 1, !dbg !59
  %.extract33 = extractelement <4 x i32> %547, i64 2, !dbg !59
  %.extract34 = extractelement <4 x i32> %547, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %447, i1 %26) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdymlnuzyd6d2jcuevadzq6zybkz3nvfqjjg5gken5dhbe4udwku.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 38, scope: !7)
!22 = !DILocation(line: 31, column: 50, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 43, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 55, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 63, scope: !7)
!38 = !DILocation(line: 36, column: 45, scope: !7)
!39 = !DILocation(line: 36, column: 55, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 68, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 26, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 49, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 40, scope: !7)
!56 = !DILocation(line: 51, column: 25, scope: !7)
!57 = !DILocation(line: 51, column: 60, scope: !7)
!58 = !DILocation(line: 52, column: 25, scope: !7)
!59 = !DILocation(line: 52, column: 57, scope: !7)
!60 = !DILocation(line: 52, column: 4, scope: !7)
