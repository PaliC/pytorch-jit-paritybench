#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_26(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<3840> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<2560> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1280> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<5120> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_5 : tensor<128xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_5 : tensor<128xi32, #blocked> loc(#loc8)
    %8 = arith.muli %7, %cst_6 : tensor<128xi32, #blocked> loc(#loc9)
    %9 = arith.addi %6, %8 : tensor<128xi32, #blocked> loc(#loc10)
    %10 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc11)
    %11 = tt.addptr %10, %9 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc11)
    %12 = tt.load %11, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc13)
    %14 = tt.addptr %13, %6 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc13)
    %15 = tt.load %14, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc15)
    %17 = tt.addptr %16, %6 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc15)
    %18 = tt.load %17, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %19 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.addptr %19, %6 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc17)
    %21 = tt.load %20, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc18)
    %22 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %23 = tt.addptr %22, %6 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc19)
    %24 = tt.load %23, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc20)
    %25 = arith.addi %6, %cst_5 : tensor<128xi32, #blocked> loc(#loc21)
    %26 = arith.addi %25, %8 : tensor<128xi32, #blocked> loc(#loc22)
    %27 = tt.addptr %10, %26 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc23)
    %28 = tt.load %27, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc24)
    %29 = arith.addi %6, %cst_4 : tensor<128xi32, #blocked> loc(#loc25)
    %30 = arith.addi %29, %8 : tensor<128xi32, #blocked> loc(#loc26)
    %31 = tt.addptr %10, %30 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc27)
    %32 = tt.load %31, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc28)
    %33 = arith.addi %6, %cst_3 : tensor<128xi32, #blocked> loc(#loc29)
    %34 = arith.addi %33, %8 : tensor<128xi32, #blocked> loc(#loc30)
    %35 = tt.addptr %10, %34 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc31)
    %36 = tt.load %35, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc32)
    %37 = arith.subf %12, %15 : tensor<128xf32, #blocked> loc(#loc33)
    %38 = arith.addf %18, %cst_2 : tensor<128xf32, #blocked> loc(#loc34)
    %39 = tt.extern_elementwise %38 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<128xf32, #blocked>) -> tensor<128xf32, #blocked> loc(#loc35)
    %40 = arith.divf %cst_0, %39 : tensor<128xf32, #blocked> loc(#loc36)
    %41 = arith.mulf %37, %40 : tensor<128xf32, #blocked> loc(#loc37)
    %42 = arith.mulf %41, %21 : tensor<128xf32, #blocked> loc(#loc38)
    %43 = arith.addf %42, %24 : tensor<128xf32, #blocked> loc(#loc39)
    %44 = arith.cmpf ogt, %cst, %43 : tensor<128xf32, #blocked> loc(#loc65)
    %45 = arith.select %44, %cst, %43 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc66)
    %46 = arith.subf %28, %15 : tensor<128xf32, #blocked> loc(#loc43)
    %47 = arith.mulf %46, %40 : tensor<128xf32, #blocked> loc(#loc44)
    %48 = arith.mulf %47, %21 : tensor<128xf32, #blocked> loc(#loc45)
    %49 = arith.addf %48, %24 : tensor<128xf32, #blocked> loc(#loc46)
    %50 = arith.cmpf ogt, %cst, %49 : tensor<128xf32, #blocked> loc(#loc67)
    %51 = arith.select %50, %cst, %49 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc68)
    %52 = arith.addf %45, %51 : tensor<128xf32, #blocked> loc(#loc48)
    %53 = arith.subf %32, %15 : tensor<128xf32, #blocked> loc(#loc49)
    %54 = arith.mulf %53, %40 : tensor<128xf32, #blocked> loc(#loc50)
    %55 = arith.mulf %54, %21 : tensor<128xf32, #blocked> loc(#loc51)
    %56 = arith.addf %55, %24 : tensor<128xf32, #blocked> loc(#loc52)
    %57 = arith.cmpf ogt, %cst, %56 : tensor<128xf32, #blocked> loc(#loc69)
    %58 = arith.select %57, %cst, %56 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc70)
    %59 = arith.addf %52, %58 : tensor<128xf32, #blocked> loc(#loc54)
    %60 = arith.subf %36, %15 : tensor<128xf32, #blocked> loc(#loc55)
    %61 = arith.mulf %60, %40 : tensor<128xf32, #blocked> loc(#loc56)
    %62 = arith.mulf %61, %21 : tensor<128xf32, #blocked> loc(#loc57)
    %63 = arith.addf %62, %24 : tensor<128xf32, #blocked> loc(#loc58)
    %64 = arith.cmpf ogt, %cst, %63 : tensor<128xf32, #blocked> loc(#loc71)
    %65 = arith.select %64, %cst, %63 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc72)
    %66 = arith.addf %59, %65 : tensor<128xf32, #blocked> loc(#loc60)
    %67 = arith.divf %66, %cst_1 : tensor<128xf32, #blocked> loc(#loc61)
    %68 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc62)
    %69 = tt.addptr %68, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc62)
    tt.store %69, %67, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc63)
    tt.return loc(#loc64)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":21:28)
#loc3 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":21:33)
#loc4 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":22:36)
#loc5 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":22:23)
#loc6 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":23:21)
#loc7 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":24:19)
#loc8 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":25:19)
#loc9 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":27:40)
#loc10 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":27:35)
#loc11 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":27:30)
#loc12 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":27:45)
#loc13 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":28:30)
#loc14 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":28:35)
#loc15 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":29:30)
#loc16 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":29:35)
#loc17 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":30:31)
#loc18 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":30:36)
#loc19 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":31:31)
#loc20 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":31:36)
#loc21 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":32:38)
#loc22 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":32:43)
#loc23 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":32:31)
#loc24 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":32:53)
#loc25 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":33:38)
#loc26 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":33:43)
#loc27 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":33:31)
#loc28 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":33:53)
#loc29 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":34:38)
#loc30 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":34:43)
#loc31 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":34:31)
#loc32 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":34:53)
#loc33 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":35:18)
#loc34 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":37:18)
#loc35 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":38:26)
#loc36 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":40:18)
#loc37 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":43:19)
#loc38 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":44:20)
#loc39 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":45:20)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc41 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":47:42)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc43 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":48:20)
#loc44 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":49:20)
#loc45 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":50:20)
#loc46 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":51:20)
#loc47 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":52:42)
#loc48 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":53:20)
#loc49 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":54:20)
#loc50 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":55:20)
#loc51 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":56:20)
#loc52 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":57:20)
#loc53 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":58:42)
#loc54 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":59:20)
#loc55 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":60:20)
#loc56 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":61:20)
#loc57 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":62:20)
#loc58 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":63:20)
#loc59 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":64:42)
#loc60 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":65:20)
#loc61 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":67:20)
#loc62 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":68:25)
#loc63 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":68:37)
#loc64 = loc("inductor_cache/qp/cqphqhkzkydlg3p6qf6oihn3buxzzovvjrxhpeybrs2s72t5o5ww.py":68:4)
#loc65 = loc(callsite(#loc40 at #loc41))
#loc66 = loc(callsite(#loc42 at #loc41))
#loc67 = loc(callsite(#loc40 at #loc47))
#loc68 = loc(callsite(#loc42 at #loc47))
#loc69 = loc(callsite(#loc40 at #loc53))
#loc70 = loc(callsite(#loc42 at #loc53))
#loc71 = loc(callsite(#loc40 at #loc59))
#loc72 = loc(callsite(#loc42 at #loc59))
