; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = srem i32 %21, 64, !dbg !14
  %23 = sext i32 %21 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !15
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !16
  %26 = sext i32 %22 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !17
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %35 = bitcast i32 %33 to float, !dbg !22
  %36 = bitcast i32 %34 to float, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !25
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !27
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !29
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !31
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !33
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !34
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !34
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !34
  %51 = bitcast i32 %49 to float, !dbg !34
  %52 = bitcast i32 %50 to float, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !35
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !37
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !38
  %57 = fadd float %35, 0x3EE4F8B580000000, !dbg !39
  %58 = fadd float %36, 0x3EE4F8B580000000, !dbg !39
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %59, 0, !dbg !40
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %60, 0, !dbg !40
  br i1 %.not.i, label %66, label %61, !dbg !40

61:                                               ; preds = %15
  br i1 %.not1.i, label %64, label %62, !dbg !40

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

66:                                               ; preds = %15
  br i1 %.not1.i, label %69, label %67, !dbg !40

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !40
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %71, 0, !dbg !40
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !40
  br i1 %.not.i1, label %78, label %73, !dbg !40

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !40

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !40

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !40
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %85 = fadd float %51, 0x3EE4F8B580000000, !dbg !42
  %86 = fadd float %52, 0x3EE4F8B580000000, !dbg !42
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i6 = icmp eq i32 %87, 0, !dbg !43
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i9 = icmp eq i32 %88, 0, !dbg !43
  br i1 %.not.i6, label %94, label %89, !dbg !43

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !43

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !43

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %90, %92, %95, %97
  %.0.i8 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !43
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i11 = icmp eq i32 %99, 0, !dbg !43
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i14 = icmp eq i32 %100, 0, !dbg !43
  br i1 %.not.i11, label %106, label %101, !dbg !43

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !43

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !43

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

__nv_sqrtf.exit15:                                ; preds = %102, %104, %107, %109
  %.0.i13 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !43
  %111 = extractvalue { i32, i32 } %42, 1, !dbg !28
  %112 = extractvalue { i32, i32 } %44, 1, !dbg !30
  %113 = extractvalue { i32, i32 } %46, 1, !dbg !32
  %114 = extractvalue { i32, i32 } %42, 0, !dbg !28
  %115 = extractvalue { i32, i32 } %44, 0, !dbg !30
  %116 = extractvalue { i32, i32 } %46, 0, !dbg !32
  %117 = extractvalue { i32, i32 } %25, 1, !dbg !16
  %118 = extractvalue { i32, i32 } %28, 1, !dbg !18
  %119 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %120 = extractvalue { i32, i32 } %38, 1, !dbg !24
  %121 = extractvalue { i32, i32 } %40, 1, !dbg !26
  %122 = extractvalue { i32, i32 } %25, 0, !dbg !16
  %123 = extractvalue { i32, i32 } %28, 0, !dbg !18
  %124 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %125 = extractvalue { i32, i32 } %38, 0, !dbg !24
  %126 = extractvalue { i32, i32 } %40, 0, !dbg !26
  %127 = extractvalue { i32, i32 } %56, 1, !dbg !38
  %128 = extractvalue { i32, i32 } %56, 0, !dbg !38
  %129 = extractvalue { i32, i32 } %54, 1, !dbg !36
  %130 = extractvalue { i32, i32 } %54, 0, !dbg !36
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !44
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !44
  %133 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !16
  %134 = insertelement <2 x i32> %133, i32 %114, i64 1, !dbg !16
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !16
  %136 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !18
  %137 = insertelement <2 x i32> %136, i32 %115, i64 1, !dbg !18
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !18
  %139 = fadd <2 x float> %135, %138, !dbg !45
  %140 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !20
  %141 = insertelement <2 x i32> %140, i32 %116, i64 1, !dbg !20
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !20
  %143 = fsub <2 x float> %139, %142, !dbg !46
  %144 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !26
  %145 = insertelement <2 x i32> %144, i32 %128, i64 1, !dbg !26
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !26
  %147 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !24
  %148 = insertelement <2 x i32> %147, i32 %130, i64 1, !dbg !24
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !24
  %150 = insertelement <2 x float> poison, float %83, i64 0, !dbg !47
  %151 = insertelement <2 x float> %150, float %131, i64 1, !dbg !47
  %152 = fmul <2 x float> %143, %151, !dbg !47
  %153 = fmul <2 x float> %152, %149, !dbg !48
  %154 = fadd <2 x float> %153, %146, !dbg !49
  %155 = fcmp olt <2 x float> %154, zeroinitializer, !dbg !50
  %156 = select <2 x i1> %155, <2 x float> zeroinitializer, <2 x float> %154, !dbg !54
  %157 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !16
  %158 = insertelement <2 x i32> %157, i32 %111, i64 1, !dbg !16
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !16
  %160 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !18
  %161 = insertelement <2 x i32> %160, i32 %112, i64 1, !dbg !18
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !18
  %163 = fadd <2 x float> %159, %162, !dbg !45
  %164 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !20
  %165 = insertelement <2 x i32> %164, i32 %113, i64 1, !dbg !20
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !20
  %167 = fsub <2 x float> %163, %166, !dbg !46
  %168 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !26
  %169 = insertelement <2 x i32> %168, i32 %127, i64 1, !dbg !26
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !26
  %171 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !24
  %172 = insertelement <2 x i32> %171, i32 %129, i64 1, !dbg !24
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !24
  %174 = insertelement <2 x float> poison, float %84, i64 0, !dbg !47
  %175 = insertelement <2 x float> %174, float %132, i64 1, !dbg !47
  %176 = fmul <2 x float> %167, %175, !dbg !47
  %177 = fmul <2 x float> %176, %173, !dbg !48
  %178 = fadd <2 x float> %177, %170, !dbg !49
  %179 = fcmp olt <2 x float> %178, zeroinitializer, !dbg !50
  %180 = select <2 x i1> %179, <2 x float> zeroinitializer, <2 x float> %178, !dbg !54
  %181 = extractelement <2 x float> %156, i64 0, !dbg !55
  %182 = extractelement <2 x float> %156, i64 1, !dbg !56
  %183 = fadd float %181, %182, !dbg !56
  %184 = extractelement <2 x float> %180, i64 0, !dbg !55
  %185 = extractelement <2 x float> %180, i64 1, !dbg !56
  %186 = fadd float %184, %185, !dbg !56
  %bc = bitcast <2 x float> %139 to <2 x i32>, !dbg !57
  %187 = extractelement <2 x i32> %bc, i64 0, !dbg !57
  %bc16 = bitcast <2 x float> %163 to <2 x i32>, !dbg !57
  %188 = extractelement <2 x i32> %bc16, i64 0, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %187, i32 %188, ptr addrspace(1) %24, i1 true) #3, !dbg !57
  %189 = getelementptr float, ptr addrspace(1) %12, i64 %23, !dbg !58
  %190 = bitcast float %181 to i32, !dbg !55
  %191 = bitcast float %184 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %190, i32 %191, ptr addrspace(1) %189, i1 true) #3, !dbg !55
  %bc17 = bitcast <2 x float> %139 to <2 x i32>, !dbg !59
  %192 = extractelement <2 x i32> %bc17, i64 1, !dbg !59
  %bc18 = bitcast <2 x float> %163 to <2 x i32>, !dbg !59
  %193 = extractelement <2 x i32> %bc18, i64 1, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %192, i32 %193, ptr addrspace(1) %41, i1 true) #3, !dbg !59
  %194 = getelementptr float, ptr addrspace(1) %13, i64 %23, !dbg !60
  %195 = bitcast float %183 to i32, !dbg !61
  %196 = bitcast float %186 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %195, i32 %196, ptr addrspace(1) %194, i1 true) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cci4at5rhjol22hagwzn4ofkbshoxyk4scci5zfwzlns4ftqf2gz.py", directory: "inductor_cache/ci")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 40, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 26, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 27, scope: !7)
!44 = !DILocation(line: 56, column: 19, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 47, column: 19, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 51, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 64, column: 37, scope: !7)
!56 = !DILocation(line: 62, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 39, scope: !7)
!58 = !DILocation(line: 64, column: 25, scope: !7)
!59 = !DILocation(line: 65, column: 40, scope: !7)
!60 = !DILocation(line: 66, column: 25, scope: !7)
!61 = !DILocation(line: 66, column: 37, scope: !7)
!62 = !DILocation(line: 66, column: 4, scope: !7)
