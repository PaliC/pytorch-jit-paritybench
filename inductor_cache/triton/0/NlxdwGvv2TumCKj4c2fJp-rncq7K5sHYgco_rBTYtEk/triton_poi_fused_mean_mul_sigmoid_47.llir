; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mean_mul_sigmoid_47(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %10 = sdiv i32 %.frozen, 3072, !dbg !14
  %11 = mul i32 %10, 3072, !dbg !15
  %.decomposed = sub i32 %.frozen, %11, !dbg !15
  %12 = mul i32 %10, 12288, !dbg !16
  %13 = add i32 %12, %.decomposed, !dbg !17
  %14 = sext i32 %13 to i64, !dbg !18
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !18
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !19
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !19
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !19
  %19 = bitcast i32 %17 to float, !dbg !19
  %20 = bitcast i32 %18 to float, !dbg !19
  %21 = add i32 %13, 3072, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = add i32 %13, 6144, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !25
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = add i32 %13, 9216, !dbg !26
  %38 = sext i32 %37 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !28
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %43 = bitcast i32 %41 to float, !dbg !28
  %44 = bitcast i32 %42 to float, !dbg !28
  %45 = fsub float 0.000000e+00, %19, !dbg !29
  %46 = fsub float 0.000000e+00, %20, !dbg !29
  %47 = fmul float %45, 0x3FF7154760000000, !dbg !33
  %48 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %47) #1, !dbg !33
  %49 = fmul float %46, 0x3FF7154760000000, !dbg !33
  %50 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %49) #1, !dbg !33
  %51 = fadd float %48, 1.000000e+00, !dbg !34
  %52 = fadd float %50, 1.000000e+00, !dbg !34
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %51) #1, !dbg !35
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %52) #1, !dbg !35
  %55 = fmul float %53, %19, !dbg !36
  %56 = fmul float %54, %20, !dbg !36
  %57 = fsub float 0.000000e+00, %27, !dbg !37
  %58 = fsub float 0.000000e+00, %28, !dbg !37
  %59 = fmul float %57, 0x3FF7154760000000, !dbg !39
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #1, !dbg !39
  %61 = fmul float %58, 0x3FF7154760000000, !dbg !39
  %62 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %61) #1, !dbg !39
  %63 = fadd float %60, 1.000000e+00, !dbg !40
  %64 = fadd float %62, 1.000000e+00, !dbg !40
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %63) #1, !dbg !41
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %64) #1, !dbg !41
  %67 = fmul float %65, %27, !dbg !42
  %68 = fmul float %66, %28, !dbg !42
  %69 = fadd float %55, %67, !dbg !43
  %70 = fadd float %56, %68, !dbg !43
  %71 = fsub float 0.000000e+00, %35, !dbg !44
  %72 = fsub float 0.000000e+00, %36, !dbg !44
  %73 = fmul float %71, 0x3FF7154760000000, !dbg !46
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #1, !dbg !46
  %75 = fmul float %72, 0x3FF7154760000000, !dbg !46
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !46
  %77 = fadd float %74, 1.000000e+00, !dbg !47
  %78 = fadd float %76, 1.000000e+00, !dbg !47
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %77) #1, !dbg !48
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %78) #1, !dbg !48
  %81 = fmul float %79, %35, !dbg !49
  %82 = fmul float %80, %36, !dbg !49
  %83 = fadd float %69, %81, !dbg !50
  %84 = fadd float %70, %82, !dbg !50
  %85 = fsub float 0.000000e+00, %43, !dbg !51
  %86 = fsub float 0.000000e+00, %44, !dbg !51
  %87 = fmul float %85, 0x3FF7154760000000, !dbg !53
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #1, !dbg !53
  %89 = fmul float %86, 0x3FF7154760000000, !dbg !53
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #1, !dbg !53
  %91 = fadd float %88, 1.000000e+00, !dbg !54
  %92 = fadd float %90, 1.000000e+00, !dbg !54
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #1, !dbg !55
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #1, !dbg !55
  %95 = fmul float %93, %43, !dbg !56
  %96 = fmul float %94, %44, !dbg !56
  %97 = fadd float %83, %95, !dbg !57
  %98 = fadd float %84, %96, !dbg !57
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 4.000000e+00) #1, !dbg !58
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 4.000000e+00) #1, !dbg !58
  %101 = sext i32 %9 to i64, !dbg !59
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !59
  %103 = bitcast float %99 to i32, !dbg !60
  %104 = bitcast float %100 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %103, i32 %104, ptr addrspace(1) %102, i1 true) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chpgh5zbazieltou2xavu2nwtdgnmxzlrz4hwsin5xt457t5l5ax.py", directory: "inductor_cache/hp")
!4 = !{ptr @triton_poi_fused_mean_mul_sigmoid_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mean_mul_sigmoid_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mean_mul_sigmoid_47", linkageName: "triton_poi_fused_mean_mul_sigmoid_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 41, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 42, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 42, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 53, scope: !7)
!26 = !DILocation(line: 30, column: 43, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 54, scope: !7)
!29 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 31, column: 22, scope: !7)
!33 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 32, column: 18, scope: !7)
!37 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !38)
!38 = !DILocation(line: 33, column: 22, scope: !7)
!39 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !38)
!40 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !38)
!41 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !38)
!42 = !DILocation(line: 34, column: 18, scope: !7)
!43 = !DILocation(line: 35, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !45)
!45 = !DILocation(line: 36, column: 22, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !45)
!49 = !DILocation(line: 37, column: 18, scope: !7)
!50 = !DILocation(line: 38, column: 19, scope: !7)
!51 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !52)
!52 = !DILocation(line: 39, column: 23, scope: !7)
!53 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !52)
!54 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !52)
!55 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !52)
!56 = !DILocation(line: 40, column: 20, scope: !7)
!57 = !DILocation(line: 41, column: 20, scope: !7)
!58 = !DILocation(line: 43, column: 20, scope: !7)
!59 = !DILocation(line: 44, column: 25, scope: !7)
!60 = !DILocation(line: 44, column: 37, scope: !7)
!61 = !DILocation(line: 44, column: 4, scope: !7)
