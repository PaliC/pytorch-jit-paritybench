; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_pow_sub_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %13 = sdiv i32 %.frozen, 4, !dbg !15
  %14 = mul i32 %13, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = srem i32 %11, 4, !dbg !16
  %16 = shl nsw i32 %13, 2, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !19
  %21 = or disjoint i32 %16, 1, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #1, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #1, !dbg !22
  %26 = or disjoint i32 %16, 2, !dbg !23
  %27 = sext i32 %26 to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %12) #1, !dbg !25
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %12) #1, !dbg !25
  %31 = or disjoint i32 %16, 3, !dbg !26
  %32 = sext i32 %31 to i64, !dbg !27
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !28
  %36 = shl nsw i32 %.decomposed, 2, !dbg !29
  %37 = shl nsw i32 %15, 2, !dbg !29
  %38 = sext i32 %36 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !30
  %40 = sext i32 %37 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %12) #1, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %12) #1, !dbg !31
  %44 = or disjoint i32 %36, 1, !dbg !32
  %45 = or disjoint i32 %37, 1, !dbg !32
  %46 = sext i32 %44 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !33
  %48 = sext i32 %45 to i64, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %12) #1, !dbg !34
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %12) #1, !dbg !34
  %52 = or disjoint i32 %36, 2, !dbg !35
  %53 = or disjoint i32 %37, 2, !dbg !35
  %54 = sext i32 %52 to i64, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !36
  %56 = sext i32 %53 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #1, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %12) #1, !dbg !37
  %60 = or disjoint i32 %36, 3, !dbg !38
  %61 = or disjoint i32 %37, 3, !dbg !38
  %62 = sext i32 %60 to i64, !dbg !39
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !39
  %64 = sext i32 %61 to i64, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %12) #1, !dbg !40
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #1, !dbg !40
  %68 = sext i32 %10 to i64, !dbg !41
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !41
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %12) #1, !dbg !42
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !42
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !42
  %73 = bitcast i32 %71 to float, !dbg !42
  %74 = bitcast i32 %72 to float, !dbg !42
  %75 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !19
  %76 = insertelement <2 x i32> %75, i32 %42, i64 1, !dbg !19
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !19
  %78 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !22
  %79 = insertelement <2 x i32> %78, i32 %50, i64 1, !dbg !22
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !22
  %81 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !25
  %82 = insertelement <2 x i32> %81, i32 %58, i64 1, !dbg !25
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !25
  %84 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !28
  %85 = insertelement <2 x i32> %84, i32 %66, i64 1, !dbg !28
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !28
  %87 = fmul <2 x float> %77, %77, !dbg !43
  %88 = fmul <2 x float> %80, %80, !dbg !44
  %89 = fadd <2 x float> %87, %88, !dbg !45
  %90 = fmul <2 x float> %83, %83, !dbg !46
  %91 = fadd <2 x float> %89, %90, !dbg !47
  %92 = fmul <2 x float> %86, %86, !dbg !48
  %93 = fadd <2 x float> %91, %92, !dbg !49
  %94 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !19
  %95 = insertelement <2 x i32> %94, i32 %43, i64 1, !dbg !19
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !19
  %97 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !22
  %98 = insertelement <2 x i32> %97, i32 %51, i64 1, !dbg !22
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !22
  %100 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !25
  %101 = insertelement <2 x i32> %100, i32 %59, i64 1, !dbg !25
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !25
  %103 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !28
  %104 = insertelement <2 x i32> %103, i32 %67, i64 1, !dbg !28
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !28
  %106 = fmul <2 x float> %96, %96, !dbg !43
  %107 = fmul <2 x float> %99, %99, !dbg !44
  %108 = fadd <2 x float> %106, %107, !dbg !45
  %109 = fmul <2 x float> %102, %102, !dbg !46
  %110 = fadd <2 x float> %108, %109, !dbg !47
  %111 = fmul <2 x float> %105, %105, !dbg !48
  %112 = fadd <2 x float> %110, %111, !dbg !49
  %shift = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %113 = fadd <2 x float> %93, %shift, !dbg !50
  %114 = extractelement <2 x float> %113, i64 0, !dbg !50
  %shift1 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %115 = fadd <2 x float> %112, %shift1, !dbg !50
  %116 = extractelement <2 x float> %115, i64 0, !dbg !50
  %117 = fmul float %73, 2.000000e+00, !dbg !51
  %118 = fmul float %74, 2.000000e+00, !dbg !51
  %119 = fsub float %114, %117, !dbg !52
  %120 = fsub float %116, %118, !dbg !52
  %121 = bitcast float %119 to i32, !dbg !53
  %122 = bitcast float %120 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %69, i1 %12) #1, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cul7d4xwa57p5l3izl435ks5tfm2xh654737wq5oxf2loxuvrxcv.py", directory: "inductor_cache/ul")
!4 = !{ptr @triton_poi_fused_add_mul_pow_sub_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_pow_sub_sum_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_pow_sub_sum_2", linkageName: "triton_poi_fused_add_mul_pow_sub_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 41, scope: !7)
!23 = !DILocation(line: 29, column: 34, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 41, scope: !7)
!26 = !DILocation(line: 30, column: 34, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 33, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 38, scope: !7)
!32 = !DILocation(line: 32, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 42, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 42, scope: !7)
!41 = !DILocation(line: 35, column: 35, scope: !7)
!42 = !DILocation(line: 35, column: 40, scope: !7)
!43 = !DILocation(line: 36, column: 18, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 41, column: 18, scope: !7)
!49 = !DILocation(line: 42, column: 19, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 40, scope: !7)
!54 = !DILocation(line: 54, column: 4, scope: !7)
