#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<3> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<8> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<-2> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<16xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<16xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<4> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<16> : tensor<16xi32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<16xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<16xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_8 : tensor<16xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_7 : tensor<16xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_7 : tensor<16xi32, #blocked> loc(#loc8)
    %8 = arith.extsi %6 : tensor<16xi32, #blocked> to tensor<16xi64, #blocked> loc(#loc9)
    %9 = arith.cmpi slt, %8, %cst_6 : tensor<16xi64, #blocked> loc(#loc9)
    %10 = arith.muli %7, %cst_5 : tensor<16xi32, #blocked> loc(#loc10)
    %11 = arith.addi %10, %6 : tensor<16xi32, #blocked> loc(#loc11)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.addptr %12, %11 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc12)
    %14 = arith.andi %9, %5 : tensor<16xi1, #blocked> loc(#loc13)
    %15 = tt.load %13, %14, %cst_4 evictionPolicy = evict_last : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = arith.subf %cst_4, %15 : tensor<16xf32, #blocked> loc(#loc54)
    %17 = math.exp %16 : tensor<16xf32, #blocked> loc(#loc55)
    %18 = arith.addf %17, %cst : tensor<16xf32, #blocked> loc(#loc56)
    %19 = arith.divf %cst, %18 : tensor<16xf32, #blocked> loc(#loc57)
    %20 = arith.mulf %15, %19 : tensor<16xf32, #blocked> loc(#loc20)
    %21 = arith.cmpi sge, %8, %cst_6 : tensor<16xi64, #blocked> loc(#loc21)
    %22 = arith.addi %6, %cst_3 : tensor<16xi32, #blocked> loc(#loc22)
    %23 = arith.muli %22, %cst_7 : tensor<16xi32, #blocked> loc(#loc23)
    %24 = arith.muli %7, %cst_2 : tensor<16xi32, #blocked> loc(#loc24)
    %25 = arith.addi %23, %24 : tensor<16xi32, #blocked> loc(#loc25)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>, #blocked> loc(#loc26)
    %27 = tt.addptr %26, %25 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc26)
    %28 = arith.andi %21, %5 : tensor<16xi1, #blocked> loc(#loc27)
    %29 = tt.load %27, %28, %cst_4 evictionPolicy = evict_last : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc28)
    %30 = arith.addi %23, %cst_1 : tensor<16xi32, #blocked> loc(#loc29)
    %31 = arith.addi %30, %24 : tensor<16xi32, #blocked> loc(#loc30)
    %32 = tt.addptr %26, %31 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc31)
    %33 = tt.load %32, %28, %cst_4 evictionPolicy = evict_last : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc32)
    %34 = arith.cmpf ogt, %33, %29 : tensor<16xf32, #blocked> loc(#loc58)
    %35 = arith.cmpf une, %33, %33 : tensor<16xf32, #blocked> loc(#loc59)
    %36 = arith.ori %34, %35 : tensor<16xi1, #blocked> loc(#loc60)
    %37 = arith.select %36, %33, %29 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc61)
    %38 = arith.addi %23, %cst_5 : tensor<16xi32, #blocked> loc(#loc38)
    %39 = arith.addi %38, %24 : tensor<16xi32, #blocked> loc(#loc39)
    %40 = tt.addptr %26, %39 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc40)
    %41 = tt.load %40, %28, %cst_4 evictionPolicy = evict_last : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc41)
    %42 = arith.cmpf ogt, %41, %37 : tensor<16xf32, #blocked> loc(#loc62)
    %43 = arith.cmpf une, %41, %41 : tensor<16xf32, #blocked> loc(#loc63)
    %44 = arith.ori %42, %43 : tensor<16xi1, #blocked> loc(#loc64)
    %45 = arith.select %44, %41, %37 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc65)
    %46 = arith.addi %23, %cst_0 : tensor<16xi32, #blocked> loc(#loc43)
    %47 = arith.addi %46, %24 : tensor<16xi32, #blocked> loc(#loc44)
    %48 = tt.addptr %26, %47 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc45)
    %49 = tt.load %48, %28, %cst_4 evictionPolicy = evict_last : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc46)
    %50 = arith.cmpf ogt, %49, %45 : tensor<16xf32, #blocked> loc(#loc66)
    %51 = arith.cmpf une, %49, %49 : tensor<16xf32, #blocked> loc(#loc67)
    %52 = arith.ori %50, %51 : tensor<16xi1, #blocked> loc(#loc68)
    %53 = arith.select %52, %49, %45 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc69)
    %54 = arith.select %21, %53, %cst_4 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc48)
    %55 = arith.select %9, %20, %54 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc70)
    %56 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>, #blocked> loc(#loc51)
    %57 = tt.addptr %56, %4 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc51)
    tt.store %57, %55, %5 : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc52)
    tt.return loc(#loc53)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":21:28)
#loc3 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":21:33)
#loc4 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":22:36)
#loc5 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":22:23)
#loc6 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":23:21)
#loc7 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":24:19)
#loc8 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":25:19)
#loc9 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":31:18)
#loc10 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":32:32)
#loc11 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":32:38)
#loc12 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":32:30)
#loc13 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":32:51)
#loc14 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":32:44)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc16 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":33:22)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc20 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":34:18)
#loc21 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":37:20)
#loc22 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":40:41)
#loc23 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":40:34)
#loc24 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":40:49)
#loc25 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":40:47)
#loc26 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":40:31)
#loc27 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":40:62)
#loc28 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":40:54)
#loc29 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":41:35)
#loc30 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":41:51)
#loc31 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":41:31)
#loc32 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":41:58)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc34 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":42:42)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc38 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":43:35)
#loc39 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":43:51)
#loc40 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":43:31)
#loc41 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":43:58)
#loc42 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":44:42)
#loc43 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":45:35)
#loc44 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":45:51)
#loc45 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":45:31)
#loc46 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":45:58)
#loc47 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":46:42)
#loc48 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":48:35)
#loc49 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":49:33)
#loc50 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":36:32)
#loc51 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":50:25)
#loc52 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":50:37)
#loc53 = loc("inductor_cache/fv/cfv3kyf5nx2t7fizxugdq7se7bx26qnuvtww55qhtqj334fwqn6q.py":50:4)
#loc54 = loc(callsite(#loc15 at #loc16))
#loc55 = loc(callsite(#loc17 at #loc16))
#loc56 = loc(callsite(#loc18 at #loc16))
#loc57 = loc(callsite(#loc19 at #loc16))
#loc58 = loc(callsite(#loc33 at #loc34))
#loc59 = loc(callsite(#loc35 at #loc34))
#loc60 = loc(callsite(#loc36 at #loc34))
#loc61 = loc(callsite(#loc37 at #loc34))
#loc62 = loc(callsite(#loc33 at #loc42))
#loc63 = loc(callsite(#loc35 at #loc42))
#loc64 = loc(callsite(#loc36 at #loc42))
#loc65 = loc(callsite(#loc37 at #loc42))
#loc66 = loc(callsite(#loc33 at #loc47))
#loc67 = loc(callsite(#loc35 at #loc47))
#loc68 = loc(callsite(#loc36 at #loc47))
#loc69 = loc(callsite(#loc37 at #loc47))
#loc70 = loc(fused[#loc49, #loc50])
