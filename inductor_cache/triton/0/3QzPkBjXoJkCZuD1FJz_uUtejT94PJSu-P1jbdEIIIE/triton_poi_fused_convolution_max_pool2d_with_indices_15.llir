; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = or disjoint i32 %10, 32, !dbg !12
  %13 = or disjoint i32 %10, 48, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 60, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 6, !dbg !15
  %23 = or disjoint i32 %22, %15, !dbg !16
  %24 = or disjoint i32 %23, 1, !dbg !16
  %25 = or disjoint i32 %23, 2, !dbg !16
  %26 = or disjoint i32 %23, 3, !dbg !16
  %27 = or disjoint i32 %22, %10, !dbg !16
  %28 = or disjoint i32 %22, %11, !dbg !16
  %29 = or disjoint i32 %22, %12, !dbg !16
  %30 = or disjoint i32 %22, %13, !dbg !16
  %31 = icmp slt i32 %23, 64, !dbg !17
  %32 = icmp slt i32 %27, 64, !dbg !17
  %33 = icmp slt i32 %28, 64, !dbg !17
  %34 = icmp slt i32 %29, 64, !dbg !17
  %35 = icmp slt i32 %30, 64, !dbg !17
  %.frozen = freeze i32 %23, !dbg !18
  %36 = sdiv i32 %.frozen, 8, !dbg !18
  %37 = mul i32 %36, 8, !dbg !19
  %.decomposed = sub i32 %.frozen, %37, !dbg !19
  %38 = srem i32 %24, 8, !dbg !19
  %39 = srem i32 %25, 8, !dbg !19
  %40 = srem i32 %26, 8, !dbg !19
  %.frozen31 = freeze i32 %20, !dbg !20
  %41 = sdiv i32 %.frozen31, 256, !dbg !20
  %42 = mul i32 %41, 256, !dbg !21
  %.decomposed32 = sub i32 %.frozen31, %42, !dbg !21
  %43 = shl nsw i32 %.decomposed, 1, !dbg !22
  %44 = shl nsw i32 %38, 1, !dbg !22
  %45 = shl nsw i32 %39, 1, !dbg !22
  %46 = shl nsw i32 %40, 1, !dbg !22
  %47 = shl i32 %36, 5, !dbg !23
  %48 = add i32 %43, %47, !dbg !24
  %49 = add i32 %47, %44, !dbg !24
  %50 = add i32 %47, %45, !dbg !24
  %51 = add i32 %47, %46, !dbg !24
  %52 = shl i32 %16, 8, !dbg !25
  %53 = shl i32 %17, 8, !dbg !25
  %54 = shl i32 %18, 8, !dbg !25
  %55 = shl i32 %19, 8, !dbg !25
  %56 = add i32 %48, %52, !dbg !26
  %57 = add i32 %49, %52, !dbg !26
  %58 = add i32 %50, %52, !dbg !26
  %59 = add i32 %51, %52, !dbg !26
  %60 = add i32 %48, %53, !dbg !26
  %61 = add i32 %49, %53, !dbg !26
  %62 = add i32 %50, %53, !dbg !26
  %63 = add i32 %51, %53, !dbg !26
  %64 = add i32 %48, %54, !dbg !26
  %65 = add i32 %49, %54, !dbg !26
  %66 = add i32 %50, %54, !dbg !26
  %67 = add i32 %51, %54, !dbg !26
  %68 = add i32 %48, %55, !dbg !26
  %69 = add i32 %49, %55, !dbg !26
  %70 = add i32 %50, %55, !dbg !26
  %71 = add i32 %51, %55, !dbg !26
  %72 = sext i32 %56 to i64, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !27
  %74 = sext i32 %57 to i64, !dbg !27
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !27
  %76 = sext i32 %58 to i64, !dbg !27
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !27
  %78 = sext i32 %59 to i64, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !27
  %80 = sext i32 %60 to i64, !dbg !27
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !27
  %82 = sext i32 %61 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !27
  %84 = sext i32 %62 to i64, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !27
  %86 = sext i32 %63 to i64, !dbg !27
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !27
  %88 = sext i32 %64 to i64, !dbg !27
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !27
  %90 = sext i32 %65 to i64, !dbg !27
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !27
  %92 = sext i32 %66 to i64, !dbg !27
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !27
  %94 = sext i32 %67 to i64, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !27
  %96 = sext i32 %68 to i64, !dbg !27
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !27
  %98 = sext i32 %69 to i64, !dbg !27
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !27
  %100 = sext i32 %70 to i64, !dbg !27
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !27
  %102 = sext i32 %71 to i64, !dbg !27
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !27
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %31) #2, !dbg !28
  %105 = bitcast i32 %104 to float, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %31) #2, !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %31) #2, !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %31) #2, !dbg !28
  %111 = bitcast i32 %110 to float, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %31) #2, !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %31) #2, !dbg !28
  %115 = bitcast i32 %114 to float, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %31) #2, !dbg !28
  %117 = bitcast i32 %116 to float, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %31) #2, !dbg !28
  %119 = bitcast i32 %118 to float, !dbg !28
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %31) #2, !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %31) #2, !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %31) #2, !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %31) #2, !dbg !28
  %127 = bitcast i32 %126 to float, !dbg !28
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %31) #2, !dbg !28
  %129 = bitcast i32 %128 to float, !dbg !28
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %31) #2, !dbg !28
  %131 = bitcast i32 %130 to float, !dbg !28
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %31) #2, !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %31) #2, !dbg !28
  %135 = bitcast i32 %134 to float, !dbg !28
  %136 = or disjoint i32 %43, 1, !dbg !29
  %137 = or disjoint i32 %44, 1, !dbg !29
  %138 = or disjoint i32 %45, 1, !dbg !29
  %139 = or disjoint i32 %46, 1, !dbg !29
  %140 = add i32 %136, %47, !dbg !30
  %141 = add i32 %47, %137, !dbg !30
  %142 = add i32 %47, %138, !dbg !30
  %143 = add i32 %47, %139, !dbg !30
  %144 = add i32 %140, %52, !dbg !31
  %145 = add i32 %141, %52, !dbg !31
  %146 = add i32 %142, %52, !dbg !31
  %147 = add i32 %143, %52, !dbg !31
  %148 = add i32 %140, %53, !dbg !31
  %149 = add i32 %141, %53, !dbg !31
  %150 = add i32 %142, %53, !dbg !31
  %151 = add i32 %143, %53, !dbg !31
  %152 = add i32 %140, %54, !dbg !31
  %153 = add i32 %141, %54, !dbg !31
  %154 = add i32 %142, %54, !dbg !31
  %155 = add i32 %143, %54, !dbg !31
  %156 = add i32 %140, %55, !dbg !31
  %157 = add i32 %141, %55, !dbg !31
  %158 = add i32 %142, %55, !dbg !31
  %159 = add i32 %143, %55, !dbg !31
  %160 = sext i32 %144 to i64, !dbg !32
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !32
  %162 = sext i32 %145 to i64, !dbg !32
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !32
  %164 = sext i32 %146 to i64, !dbg !32
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !32
  %166 = sext i32 %147 to i64, !dbg !32
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !32
  %168 = sext i32 %148 to i64, !dbg !32
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !32
  %170 = sext i32 %149 to i64, !dbg !32
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !32
  %172 = sext i32 %150 to i64, !dbg !32
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !32
  %174 = sext i32 %151 to i64, !dbg !32
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !32
  %176 = sext i32 %152 to i64, !dbg !32
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !32
  %178 = sext i32 %153 to i64, !dbg !32
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !32
  %180 = sext i32 %154 to i64, !dbg !32
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !32
  %182 = sext i32 %155 to i64, !dbg !32
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !32
  %184 = sext i32 %156 to i64, !dbg !32
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !32
  %186 = sext i32 %157 to i64, !dbg !32
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !32
  %188 = sext i32 %158 to i64, !dbg !32
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !32
  %190 = sext i32 %159 to i64, !dbg !32
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !32
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %31) #2, !dbg !33
  %193 = bitcast i32 %192 to float, !dbg !33
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %31) #2, !dbg !33
  %195 = bitcast i32 %194 to float, !dbg !33
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %31) #2, !dbg !33
  %197 = bitcast i32 %196 to float, !dbg !33
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %31) #2, !dbg !33
  %199 = bitcast i32 %198 to float, !dbg !33
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %31) #2, !dbg !33
  %201 = bitcast i32 %200 to float, !dbg !33
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %31) #2, !dbg !33
  %203 = bitcast i32 %202 to float, !dbg !33
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %31) #2, !dbg !33
  %205 = bitcast i32 %204 to float, !dbg !33
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %31) #2, !dbg !33
  %207 = bitcast i32 %206 to float, !dbg !33
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %31) #2, !dbg !33
  %209 = bitcast i32 %208 to float, !dbg !33
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %31) #2, !dbg !33
  %211 = bitcast i32 %210 to float, !dbg !33
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %31) #2, !dbg !33
  %213 = bitcast i32 %212 to float, !dbg !33
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %31) #2, !dbg !33
  %215 = bitcast i32 %214 to float, !dbg !33
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %31) #2, !dbg !33
  %217 = bitcast i32 %216 to float, !dbg !33
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %31) #2, !dbg !33
  %219 = bitcast i32 %218 to float, !dbg !33
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %31) #2, !dbg !33
  %221 = bitcast i32 %220 to float, !dbg !33
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %31) #2, !dbg !33
  %223 = bitcast i32 %222 to float, !dbg !33
  %224 = or disjoint i32 %47, 16, !dbg !34
  %225 = add i32 %224, %43, !dbg !35
  %226 = add i32 %224, %44, !dbg !35
  %227 = add i32 %224, %45, !dbg !35
  %228 = add i32 %224, %46, !dbg !35
  %229 = add i32 %225, %52, !dbg !36
  %230 = add i32 %52, %226, !dbg !36
  %231 = add i32 %52, %227, !dbg !36
  %232 = add i32 %52, %228, !dbg !36
  %233 = add i32 %225, %53, !dbg !36
  %234 = add i32 %53, %226, !dbg !36
  %235 = add i32 %53, %227, !dbg !36
  %236 = add i32 %53, %228, !dbg !36
  %237 = add i32 %225, %54, !dbg !36
  %238 = add i32 %54, %226, !dbg !36
  %239 = add i32 %54, %227, !dbg !36
  %240 = add i32 %54, %228, !dbg !36
  %241 = add i32 %225, %55, !dbg !36
  %242 = add i32 %55, %226, !dbg !36
  %243 = add i32 %55, %227, !dbg !36
  %244 = add i32 %55, %228, !dbg !36
  %245 = sext i32 %229 to i64, !dbg !37
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !37
  %247 = sext i32 %230 to i64, !dbg !37
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !37
  %249 = sext i32 %231 to i64, !dbg !37
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !37
  %251 = sext i32 %232 to i64, !dbg !37
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !37
  %253 = sext i32 %233 to i64, !dbg !37
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !37
  %255 = sext i32 %234 to i64, !dbg !37
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !37
  %257 = sext i32 %235 to i64, !dbg !37
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !37
  %259 = sext i32 %236 to i64, !dbg !37
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !37
  %261 = sext i32 %237 to i64, !dbg !37
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !37
  %263 = sext i32 %238 to i64, !dbg !37
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !37
  %265 = sext i32 %239 to i64, !dbg !37
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !37
  %267 = sext i32 %240 to i64, !dbg !37
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !37
  %269 = sext i32 %241 to i64, !dbg !37
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !37
  %271 = sext i32 %242 to i64, !dbg !37
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !37
  %273 = sext i32 %243 to i64, !dbg !37
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !37
  %275 = sext i32 %244 to i64, !dbg !37
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !37
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %31) #2, !dbg !38
  %278 = bitcast i32 %277 to float, !dbg !38
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 %31) #2, !dbg !38
  %280 = bitcast i32 %279 to float, !dbg !38
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 %31) #2, !dbg !38
  %282 = bitcast i32 %281 to float, !dbg !38
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 %31) #2, !dbg !38
  %284 = bitcast i32 %283 to float, !dbg !38
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %31) #2, !dbg !38
  %286 = bitcast i32 %285 to float, !dbg !38
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 %31) #2, !dbg !38
  %288 = bitcast i32 %287 to float, !dbg !38
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 %31) #2, !dbg !38
  %290 = bitcast i32 %289 to float, !dbg !38
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 %31) #2, !dbg !38
  %292 = bitcast i32 %291 to float, !dbg !38
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %31) #2, !dbg !38
  %294 = bitcast i32 %293 to float, !dbg !38
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 %31) #2, !dbg !38
  %296 = bitcast i32 %295 to float, !dbg !38
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 %31) #2, !dbg !38
  %298 = bitcast i32 %297 to float, !dbg !38
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 %31) #2, !dbg !38
  %300 = bitcast i32 %299 to float, !dbg !38
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 %31) #2, !dbg !38
  %302 = bitcast i32 %301 to float, !dbg !38
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 %31) #2, !dbg !38
  %304 = bitcast i32 %303 to float, !dbg !38
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 %31) #2, !dbg !38
  %306 = bitcast i32 %305 to float, !dbg !38
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 %31) #2, !dbg !38
  %308 = bitcast i32 %307 to float, !dbg !38
  %309 = or disjoint i32 %47, 17, !dbg !39
  %310 = add i32 %309, %43, !dbg !40
  %311 = add i32 %309, %44, !dbg !40
  %312 = add i32 %309, %45, !dbg !40
  %313 = add i32 %309, %46, !dbg !40
  %314 = add i32 %310, %52, !dbg !41
  %315 = add i32 %52, %311, !dbg !41
  %316 = add i32 %52, %312, !dbg !41
  %317 = add i32 %52, %313, !dbg !41
  %318 = add i32 %310, %53, !dbg !41
  %319 = add i32 %53, %311, !dbg !41
  %320 = add i32 %53, %312, !dbg !41
  %321 = add i32 %53, %313, !dbg !41
  %322 = add i32 %310, %54, !dbg !41
  %323 = add i32 %54, %311, !dbg !41
  %324 = add i32 %54, %312, !dbg !41
  %325 = add i32 %54, %313, !dbg !41
  %326 = add i32 %310, %55, !dbg !41
  %327 = add i32 %55, %311, !dbg !41
  %328 = add i32 %55, %312, !dbg !41
  %329 = add i32 %55, %313, !dbg !41
  %330 = sext i32 %314 to i64, !dbg !42
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !42
  %332 = sext i32 %315 to i64, !dbg !42
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !42
  %334 = sext i32 %316 to i64, !dbg !42
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !42
  %336 = sext i32 %317 to i64, !dbg !42
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !42
  %338 = sext i32 %318 to i64, !dbg !42
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !42
  %340 = sext i32 %319 to i64, !dbg !42
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !42
  %342 = sext i32 %320 to i64, !dbg !42
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %342, !dbg !42
  %344 = sext i32 %321 to i64, !dbg !42
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %344, !dbg !42
  %346 = sext i32 %322 to i64, !dbg !42
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !42
  %348 = sext i32 %323 to i64, !dbg !42
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !42
  %350 = sext i32 %324 to i64, !dbg !42
  %351 = getelementptr float, ptr addrspace(1) %0, i64 %350, !dbg !42
  %352 = sext i32 %325 to i64, !dbg !42
  %353 = getelementptr float, ptr addrspace(1) %0, i64 %352, !dbg !42
  %354 = sext i32 %326 to i64, !dbg !42
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !42
  %356 = sext i32 %327 to i64, !dbg !42
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %356, !dbg !42
  %358 = sext i32 %328 to i64, !dbg !42
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !42
  %360 = sext i32 %329 to i64, !dbg !42
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !42
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %31) #2, !dbg !43
  %363 = bitcast i32 %362 to float, !dbg !43
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %31) #2, !dbg !43
  %365 = bitcast i32 %364 to float, !dbg !43
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %31) #2, !dbg !43
  %367 = bitcast i32 %366 to float, !dbg !43
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %31) #2, !dbg !43
  %369 = bitcast i32 %368 to float, !dbg !43
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %31) #2, !dbg !43
  %371 = bitcast i32 %370 to float, !dbg !43
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 %31) #2, !dbg !43
  %373 = bitcast i32 %372 to float, !dbg !43
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %343, i1 %31) #2, !dbg !43
  %375 = bitcast i32 %374 to float, !dbg !43
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %345, i1 %31) #2, !dbg !43
  %377 = bitcast i32 %376 to float, !dbg !43
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %347, i1 %31) #2, !dbg !43
  %379 = bitcast i32 %378 to float, !dbg !43
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %349, i1 %31) #2, !dbg !43
  %381 = bitcast i32 %380 to float, !dbg !43
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 %31) #2, !dbg !43
  %383 = bitcast i32 %382 to float, !dbg !43
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 %31) #2, !dbg !43
  %385 = bitcast i32 %384 to float, !dbg !43
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 %31) #2, !dbg !43
  %387 = bitcast i32 %386 to float, !dbg !43
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 %31) #2, !dbg !43
  %389 = bitcast i32 %388 to float, !dbg !43
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %31) #2, !dbg !43
  %391 = bitcast i32 %390 to float, !dbg !43
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %31) #2, !dbg !43
  %393 = bitcast i32 %392 to float, !dbg !43
  %394 = fcmp ogt float %193, %105, !dbg !44
  %395 = fcmp ogt float %195, %107, !dbg !44
  %396 = fcmp ogt float %197, %109, !dbg !44
  %397 = fcmp ogt float %199, %111, !dbg !44
  %398 = fcmp ogt float %201, %113, !dbg !44
  %399 = fcmp ogt float %203, %115, !dbg !44
  %400 = fcmp ogt float %205, %117, !dbg !44
  %401 = fcmp ogt float %207, %119, !dbg !44
  %402 = fcmp ogt float %209, %121, !dbg !44
  %403 = fcmp ogt float %211, %123, !dbg !44
  %404 = fcmp ogt float %213, %125, !dbg !44
  %405 = fcmp ogt float %215, %127, !dbg !44
  %406 = fcmp ogt float %217, %129, !dbg !44
  %407 = fcmp ogt float %219, %131, !dbg !44
  %408 = fcmp ogt float %221, %133, !dbg !44
  %409 = fcmp ogt float %223, %135, !dbg !44
  %410 = fcmp uno float %193, 0.000000e+00, !dbg !48
  %411 = fcmp uno float %195, 0.000000e+00, !dbg !48
  %412 = fcmp uno float %197, 0.000000e+00, !dbg !48
  %413 = fcmp uno float %199, 0.000000e+00, !dbg !48
  %414 = fcmp uno float %201, 0.000000e+00, !dbg !48
  %415 = fcmp uno float %203, 0.000000e+00, !dbg !48
  %416 = fcmp uno float %205, 0.000000e+00, !dbg !48
  %417 = fcmp uno float %207, 0.000000e+00, !dbg !48
  %418 = fcmp uno float %209, 0.000000e+00, !dbg !48
  %419 = fcmp uno float %211, 0.000000e+00, !dbg !48
  %420 = fcmp uno float %213, 0.000000e+00, !dbg !48
  %421 = fcmp uno float %215, 0.000000e+00, !dbg !48
  %422 = fcmp uno float %217, 0.000000e+00, !dbg !48
  %423 = fcmp uno float %219, 0.000000e+00, !dbg !48
  %424 = fcmp uno float %221, 0.000000e+00, !dbg !48
  %425 = fcmp uno float %223, 0.000000e+00, !dbg !48
  %426 = or i1 %394, %410, !dbg !49
  %427 = or i1 %395, %411, !dbg !49
  %428 = or i1 %396, %412, !dbg !49
  %429 = or i1 %397, %413, !dbg !49
  %430 = or i1 %398, %414, !dbg !49
  %431 = or i1 %399, %415, !dbg !49
  %432 = or i1 %400, %416, !dbg !49
  %433 = or i1 %401, %417, !dbg !49
  %434 = or i1 %402, %418, !dbg !49
  %435 = or i1 %403, %419, !dbg !49
  %436 = or i1 %404, %420, !dbg !49
  %437 = or i1 %405, %421, !dbg !49
  %438 = or i1 %406, %422, !dbg !49
  %439 = or i1 %407, %423, !dbg !49
  %440 = or i1 %408, %424, !dbg !49
  %441 = or i1 %409, %425, !dbg !49
  %442 = select i1 %426, float %193, float %105, !dbg !50
  %443 = select i1 %427, float %195, float %107, !dbg !50
  %444 = select i1 %428, float %197, float %109, !dbg !50
  %445 = select i1 %429, float %199, float %111, !dbg !50
  %446 = select i1 %430, float %201, float %113, !dbg !50
  %447 = select i1 %431, float %203, float %115, !dbg !50
  %448 = select i1 %432, float %205, float %117, !dbg !50
  %449 = select i1 %433, float %207, float %119, !dbg !50
  %450 = select i1 %434, float %209, float %121, !dbg !50
  %451 = select i1 %435, float %211, float %123, !dbg !50
  %452 = select i1 %436, float %213, float %125, !dbg !50
  %453 = select i1 %437, float %215, float %127, !dbg !50
  %454 = select i1 %438, float %217, float %129, !dbg !50
  %455 = select i1 %439, float %219, float %131, !dbg !50
  %456 = select i1 %440, float %221, float %133, !dbg !50
  %457 = select i1 %441, float %223, float %135, !dbg !50
  %458 = fcmp olt float %442, %278, !dbg !51
  %459 = fcmp olt float %443, %280, !dbg !51
  %460 = fcmp olt float %444, %282, !dbg !51
  %461 = fcmp olt float %445, %284, !dbg !51
  %462 = fcmp olt float %446, %286, !dbg !51
  %463 = fcmp olt float %447, %288, !dbg !51
  %464 = fcmp olt float %448, %290, !dbg !51
  %465 = fcmp olt float %449, %292, !dbg !51
  %466 = fcmp olt float %450, %294, !dbg !51
  %467 = fcmp olt float %451, %296, !dbg !51
  %468 = fcmp olt float %452, %298, !dbg !51
  %469 = fcmp olt float %453, %300, !dbg !51
  %470 = fcmp olt float %454, %302, !dbg !51
  %471 = fcmp olt float %455, %304, !dbg !51
  %472 = fcmp olt float %456, %306, !dbg !51
  %473 = fcmp olt float %457, %308, !dbg !51
  %474 = fcmp uno float %278, 0.000000e+00, !dbg !53
  %475 = fcmp uno float %280, 0.000000e+00, !dbg !53
  %476 = fcmp uno float %282, 0.000000e+00, !dbg !53
  %477 = fcmp uno float %284, 0.000000e+00, !dbg !53
  %478 = fcmp uno float %286, 0.000000e+00, !dbg !53
  %479 = fcmp uno float %288, 0.000000e+00, !dbg !53
  %480 = fcmp uno float %290, 0.000000e+00, !dbg !53
  %481 = fcmp uno float %292, 0.000000e+00, !dbg !53
  %482 = fcmp uno float %294, 0.000000e+00, !dbg !53
  %483 = fcmp uno float %296, 0.000000e+00, !dbg !53
  %484 = fcmp uno float %298, 0.000000e+00, !dbg !53
  %485 = fcmp uno float %300, 0.000000e+00, !dbg !53
  %486 = fcmp uno float %302, 0.000000e+00, !dbg !53
  %487 = fcmp uno float %304, 0.000000e+00, !dbg !53
  %488 = fcmp uno float %306, 0.000000e+00, !dbg !53
  %489 = fcmp uno float %308, 0.000000e+00, !dbg !53
  %490 = or i1 %458, %474, !dbg !54
  %491 = or i1 %459, %475, !dbg !54
  %492 = or i1 %460, %476, !dbg !54
  %493 = or i1 %461, %477, !dbg !54
  %494 = or i1 %462, %478, !dbg !54
  %495 = or i1 %463, %479, !dbg !54
  %496 = or i1 %464, %480, !dbg !54
  %497 = or i1 %465, %481, !dbg !54
  %498 = or i1 %466, %482, !dbg !54
  %499 = or i1 %467, %483, !dbg !54
  %500 = or i1 %468, %484, !dbg !54
  %501 = or i1 %469, %485, !dbg !54
  %502 = or i1 %470, %486, !dbg !54
  %503 = or i1 %471, %487, !dbg !54
  %504 = or i1 %472, %488, !dbg !54
  %505 = or i1 %473, %489, !dbg !54
  %506 = select i1 %490, float %278, float %442, !dbg !55
  %507 = select i1 %491, float %280, float %443, !dbg !55
  %508 = select i1 %492, float %282, float %444, !dbg !55
  %509 = select i1 %493, float %284, float %445, !dbg !55
  %510 = select i1 %494, float %286, float %446, !dbg !55
  %511 = select i1 %495, float %288, float %447, !dbg !55
  %512 = select i1 %496, float %290, float %448, !dbg !55
  %513 = select i1 %497, float %292, float %449, !dbg !55
  %514 = select i1 %498, float %294, float %450, !dbg !55
  %515 = select i1 %499, float %296, float %451, !dbg !55
  %516 = select i1 %500, float %298, float %452, !dbg !55
  %517 = select i1 %501, float %300, float %453, !dbg !55
  %518 = select i1 %502, float %302, float %454, !dbg !55
  %519 = select i1 %503, float %304, float %455, !dbg !55
  %520 = select i1 %504, float %306, float %456, !dbg !55
  %521 = select i1 %505, float %308, float %457, !dbg !55
  %522 = fcmp olt float %506, %363, !dbg !56
  %523 = fcmp olt float %507, %365, !dbg !56
  %524 = fcmp olt float %508, %367, !dbg !56
  %525 = fcmp olt float %509, %369, !dbg !56
  %526 = fcmp olt float %510, %371, !dbg !56
  %527 = fcmp olt float %511, %373, !dbg !56
  %528 = fcmp olt float %512, %375, !dbg !56
  %529 = fcmp olt float %513, %377, !dbg !56
  %530 = fcmp olt float %514, %379, !dbg !56
  %531 = fcmp olt float %515, %381, !dbg !56
  %532 = fcmp olt float %516, %383, !dbg !56
  %533 = fcmp olt float %517, %385, !dbg !56
  %534 = fcmp olt float %518, %387, !dbg !56
  %535 = fcmp olt float %519, %389, !dbg !56
  %536 = fcmp olt float %520, %391, !dbg !56
  %537 = fcmp olt float %521, %393, !dbg !56
  %538 = fcmp uno float %363, 0.000000e+00, !dbg !58
  %539 = fcmp uno float %365, 0.000000e+00, !dbg !58
  %540 = fcmp uno float %367, 0.000000e+00, !dbg !58
  %541 = fcmp uno float %369, 0.000000e+00, !dbg !58
  %542 = fcmp uno float %371, 0.000000e+00, !dbg !58
  %543 = fcmp uno float %373, 0.000000e+00, !dbg !58
  %544 = fcmp uno float %375, 0.000000e+00, !dbg !58
  %545 = fcmp uno float %377, 0.000000e+00, !dbg !58
  %546 = fcmp uno float %379, 0.000000e+00, !dbg !58
  %547 = fcmp uno float %381, 0.000000e+00, !dbg !58
  %548 = fcmp uno float %383, 0.000000e+00, !dbg !58
  %549 = fcmp uno float %385, 0.000000e+00, !dbg !58
  %550 = fcmp uno float %387, 0.000000e+00, !dbg !58
  %551 = fcmp uno float %389, 0.000000e+00, !dbg !58
  %552 = fcmp uno float %391, 0.000000e+00, !dbg !58
  %553 = fcmp uno float %393, 0.000000e+00, !dbg !58
  %554 = or i1 %522, %538, !dbg !59
  %555 = or i1 %523, %539, !dbg !59
  %556 = or i1 %524, %540, !dbg !59
  %557 = or i1 %525, %541, !dbg !59
  %558 = or i1 %526, %542, !dbg !59
  %559 = or i1 %527, %543, !dbg !59
  %560 = or i1 %528, %544, !dbg !59
  %561 = or i1 %529, %545, !dbg !59
  %562 = or i1 %530, %546, !dbg !59
  %563 = or i1 %531, %547, !dbg !59
  %564 = or i1 %532, %548, !dbg !59
  %565 = or i1 %533, %549, !dbg !59
  %566 = or i1 %534, %550, !dbg !59
  %567 = or i1 %535, %551, !dbg !59
  %568 = or i1 %536, %552, !dbg !59
  %569 = or i1 %537, %553, !dbg !59
  %570 = select i1 %554, float %363, float %506, !dbg !60
  %571 = select i1 %555, float %365, float %507, !dbg !60
  %572 = select i1 %556, float %367, float %508, !dbg !60
  %573 = select i1 %557, float %369, float %509, !dbg !60
  %574 = select i1 %558, float %371, float %510, !dbg !60
  %575 = select i1 %559, float %373, float %511, !dbg !60
  %576 = select i1 %560, float %375, float %512, !dbg !60
  %577 = select i1 %561, float %377, float %513, !dbg !60
  %578 = select i1 %562, float %379, float %514, !dbg !60
  %579 = select i1 %563, float %381, float %515, !dbg !60
  %580 = select i1 %564, float %383, float %516, !dbg !60
  %581 = select i1 %565, float %385, float %517, !dbg !60
  %582 = select i1 %566, float %387, float %518, !dbg !60
  %583 = select i1 %567, float %389, float %519, !dbg !60
  %584 = select i1 %568, float %391, float %520, !dbg !60
  %585 = select i1 %569, float %393, float %521, !dbg !60
  %586 = shl i32 %16, 6, !dbg !61
  %587 = shl i32 %17, 6, !dbg !61
  %588 = shl i32 %18, 6, !dbg !61
  %589 = shl i32 %19, 6, !dbg !61
  %590 = add i32 %23, %586, !dbg !62
  %591 = add i32 %23, %587, !dbg !62
  %592 = add i32 %23, %588, !dbg !62
  %593 = add i32 %23, %589, !dbg !62
  %594 = sext i32 %590 to i64, !dbg !63
  %595 = getelementptr float, ptr addrspace(1) %1, i64 %594, !dbg !63
  %596 = sext i32 %591 to i64, !dbg !63
  %597 = getelementptr float, ptr addrspace(1) %1, i64 %596, !dbg !63
  %598 = sext i32 %592 to i64, !dbg !63
  %599 = getelementptr float, ptr addrspace(1) %1, i64 %598, !dbg !63
  %600 = sext i32 %593 to i64, !dbg !63
  %601 = getelementptr float, ptr addrspace(1) %1, i64 %600, !dbg !63
  %602 = bitcast float %570 to i32, !dbg !64
  %603 = bitcast float %571 to i32, !dbg !64
  %604 = bitcast float %572 to i32, !dbg !64
  %605 = bitcast float %573 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %602, i32 %603, i32 %604, i32 %605, ptr addrspace(1) %595, i1 %31) #2, !dbg !64
  %606 = bitcast float %574 to i32, !dbg !64
  %607 = bitcast float %575 to i32, !dbg !64
  %608 = bitcast float %576 to i32, !dbg !64
  %609 = bitcast float %577 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %606, i32 %607, i32 %608, i32 %609, ptr addrspace(1) %597, i1 %31) #2, !dbg !64
  %610 = bitcast float %578 to i32, !dbg !64
  %611 = bitcast float %579 to i32, !dbg !64
  %612 = bitcast float %580 to i32, !dbg !64
  %613 = bitcast float %581 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %610, i32 %611, i32 %612, i32 %613, ptr addrspace(1) %599, i1 %31) #2, !dbg !64
  %614 = bitcast float %582 to i32, !dbg !64
  %615 = bitcast float %583 to i32, !dbg !64
  %616 = bitcast float %584 to i32, !dbg !64
  %617 = bitcast float %585 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %614, i32 %615, i32 %616, i32 %617, ptr addrspace(1) %601, i1 %31) #2, !dbg !64
  %618 = shl i32 %27, 8, !dbg !65
  %619 = shl i32 %28, 8, !dbg !65
  %620 = shl i32 %29, 8, !dbg !65
  %621 = shl i32 %30, 8, !dbg !65
  %622 = shl i32 %41, 14, !dbg !66
  %623 = add i32 %622, %.decomposed32, !dbg !67
  %624 = add i32 %623, %618, !dbg !68
  %625 = add i32 %623, %619, !dbg !68
  %626 = add i32 %623, %620, !dbg !68
  %627 = add i32 %623, %621, !dbg !68
  %628 = sext i32 %624 to i64, !dbg !69
  %629 = getelementptr float, ptr addrspace(1) %2, i64 %628, !dbg !69
  %630 = sext i32 %625 to i64, !dbg !69
  %631 = getelementptr float, ptr addrspace(1) %2, i64 %630, !dbg !69
  %632 = sext i32 %626 to i64, !dbg !69
  %633 = getelementptr float, ptr addrspace(1) %2, i64 %632, !dbg !69
  %634 = sext i32 %627 to i64, !dbg !69
  %635 = getelementptr float, ptr addrspace(1) %2, i64 %634, !dbg !69
  %636 = shl i32 %8, 8, !dbg !70
  %637 = and i32 %636, 3840, !dbg !70
  %638 = or disjoint i32 %637, %10, !dbg !70
  %639 = and i32 %14, 1020, !dbg !70
  %640 = lshr exact i32 %637, 2, !dbg !70
  %641 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %640, !dbg !70
  %642 = getelementptr float, ptr addrspace(3) %641, i32 %638, !dbg !70
  %643 = bitcast float %570 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %642, <1 x i32> %643, i1 true) #2, !dbg !70
  %644 = or disjoint i32 %638, 64, !dbg !70
  %645 = lshr i32 %644, 4, !dbg !70
  %646 = getelementptr float, ptr addrspace(3) @global_smem, i32 %645, !dbg !70
  %647 = getelementptr float, ptr addrspace(3) %646, i32 %644, !dbg !70
  %648 = bitcast float %571 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %648, i1 true) #2, !dbg !70
  %649 = or disjoint i32 %638, 128, !dbg !70
  %650 = lshr i32 %649, 4, !dbg !70
  %651 = getelementptr float, ptr addrspace(3) @global_smem, i32 %650, !dbg !70
  %652 = getelementptr float, ptr addrspace(3) %651, i32 %649, !dbg !70
  %653 = bitcast float %572 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %652, <1 x i32> %653, i1 true) #2, !dbg !70
  %654 = or disjoint i32 %638, 192, !dbg !70
  %655 = lshr i32 %654, 4, !dbg !70
  %656 = getelementptr float, ptr addrspace(3) @global_smem, i32 %655, !dbg !70
  %657 = getelementptr float, ptr addrspace(3) %656, i32 %654, !dbg !70
  %658 = bitcast float %573 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %657, <1 x i32> %658, i1 true) #2, !dbg !70
  %659 = or disjoint i32 %638, 16, !dbg !70
  %660 = getelementptr float, ptr addrspace(3) %641, i32 %659, !dbg !70
  %661 = bitcast float %574 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %660, <1 x i32> %661, i1 true) #2, !dbg !70
  %662 = or disjoint i32 %638, 80, !dbg !70
  %663 = lshr i32 %662, 4, !dbg !70
  %664 = and i32 %663, 244, !dbg !70
  %665 = getelementptr float, ptr addrspace(3) @global_smem, i32 %664, !dbg !70
  %666 = getelementptr float, ptr addrspace(3) %665, i32 %662, !dbg !70
  %667 = bitcast float %575 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %666, <1 x i32> %667, i1 true) #2, !dbg !70
  %668 = or disjoint i32 %638, 144, !dbg !70
  %669 = lshr i32 %668, 4, !dbg !70
  %670 = and i32 %669, 248, !dbg !70
  %671 = getelementptr float, ptr addrspace(3) @global_smem, i32 %670, !dbg !70
  %672 = getelementptr float, ptr addrspace(3) %671, i32 %668, !dbg !70
  %673 = bitcast float %576 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %672, <1 x i32> %673, i1 true) #2, !dbg !70
  %674 = or disjoint i32 %638, 208, !dbg !70
  %675 = lshr i32 %674, 4, !dbg !70
  %676 = and i32 %675, 252, !dbg !70
  %677 = getelementptr float, ptr addrspace(3) @global_smem, i32 %676, !dbg !70
  %678 = getelementptr float, ptr addrspace(3) %677, i32 %674, !dbg !70
  %679 = bitcast float %577 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %678, <1 x i32> %679, i1 true) #2, !dbg !70
  %680 = or disjoint i32 %638, 32, !dbg !70
  %681 = getelementptr float, ptr addrspace(3) %641, i32 %680, !dbg !70
  %682 = bitcast float %578 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %681, <1 x i32> %682, i1 true) #2, !dbg !70
  %683 = or disjoint i32 %638, 96, !dbg !70
  %684 = lshr i32 %683, 4, !dbg !70
  %685 = and i32 %684, 244, !dbg !70
  %686 = getelementptr float, ptr addrspace(3) @global_smem, i32 %685, !dbg !70
  %687 = getelementptr float, ptr addrspace(3) %686, i32 %683, !dbg !70
  %688 = bitcast float %579 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %687, <1 x i32> %688, i1 true) #2, !dbg !70
  %689 = or disjoint i32 %638, 160, !dbg !70
  %690 = lshr i32 %689, 4, !dbg !70
  %691 = and i32 %690, 248, !dbg !70
  %692 = getelementptr float, ptr addrspace(3) @global_smem, i32 %691, !dbg !70
  %693 = getelementptr float, ptr addrspace(3) %692, i32 %689, !dbg !70
  %694 = bitcast float %580 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %693, <1 x i32> %694, i1 true) #2, !dbg !70
  %695 = or disjoint i32 %638, 224, !dbg !70
  %696 = lshr i32 %695, 4, !dbg !70
  %697 = and i32 %696, 252, !dbg !70
  %698 = getelementptr float, ptr addrspace(3) @global_smem, i32 %697, !dbg !70
  %699 = getelementptr float, ptr addrspace(3) %698, i32 %695, !dbg !70
  %700 = bitcast float %581 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %699, <1 x i32> %700, i1 true) #2, !dbg !70
  %701 = or disjoint i32 %638, 48, !dbg !70
  %702 = getelementptr float, ptr addrspace(3) %641, i32 %701, !dbg !70
  %703 = bitcast float %582 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %702, <1 x i32> %703, i1 true) #2, !dbg !70
  %704 = or disjoint i32 %638, 112, !dbg !70
  %705 = lshr i32 %704, 4, !dbg !70
  %706 = and i32 %705, 244, !dbg !70
  %707 = getelementptr float, ptr addrspace(3) @global_smem, i32 %706, !dbg !70
  %708 = getelementptr float, ptr addrspace(3) %707, i32 %704, !dbg !70
  %709 = bitcast float %583 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %708, <1 x i32> %709, i1 true) #2, !dbg !70
  %710 = or disjoint i32 %638, 176, !dbg !70
  %711 = lshr i32 %710, 4, !dbg !70
  %712 = and i32 %711, 248, !dbg !70
  %713 = getelementptr float, ptr addrspace(3) @global_smem, i32 %712, !dbg !70
  %714 = getelementptr float, ptr addrspace(3) %713, i32 %710, !dbg !70
  %715 = bitcast float %584 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %714, <1 x i32> %715, i1 true) #2, !dbg !70
  %716 = or disjoint i32 %638, 240, !dbg !70
  %717 = lshr i32 %716, 4, !dbg !70
  %718 = and i32 %717, 252, !dbg !70
  %719 = getelementptr float, ptr addrspace(3) @global_smem, i32 %718, !dbg !70
  %720 = getelementptr float, ptr addrspace(3) %719, i32 %716, !dbg !70
  %721 = bitcast float %585 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %720, <1 x i32> %721, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %722 = lshr i32 %14, 4, !dbg !70
  %723 = and i32 %722, 60, !dbg !70
  %724 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %723, !dbg !70
  %725 = getelementptr inbounds float, ptr addrspace(3) %724, i32 %639, !dbg !70
  %726 = or disjoint i32 %639, 1024, !dbg !70
  %727 = lshr i32 %726, 4, !dbg !70
  %728 = and i32 %727, 124, !dbg !70
  %729 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %728, !dbg !70
  %730 = getelementptr inbounds float, ptr addrspace(3) %729, i32 %726, !dbg !70
  %731 = load <4 x i32>, ptr addrspace(3) %730, align 16, !dbg !70
  %732 = or disjoint i32 %639, 2048, !dbg !70
  %733 = lshr i32 %732, 4, !dbg !70
  %734 = and i32 %733, 188, !dbg !70
  %735 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %734, !dbg !70
  %736 = getelementptr inbounds float, ptr addrspace(3) %735, i32 %732, !dbg !70
  %737 = load <4 x i32>, ptr addrspace(3) %736, align 16, !dbg !70
  %738 = or disjoint i32 %639, 3072, !dbg !70
  %739 = lshr i32 %738, 4, !dbg !70
  %740 = and i32 %739, 252, !dbg !70
  %741 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %740, !dbg !70
  %742 = getelementptr inbounds float, ptr addrspace(3) %741, i32 %738, !dbg !70
  %743 = load <4 x i32>, ptr addrspace(3) %742, align 16, !dbg !70
  %.extract = load i32, ptr addrspace(3) %725, align 16, !dbg !70
  %744 = getelementptr inbounds i8, ptr addrspace(3) %725, i32 4, !dbg !70
  %.extract16 = load i32, ptr addrspace(3) %744, align 4, !dbg !70
  %745 = getelementptr inbounds i8, ptr addrspace(3) %725, i32 8, !dbg !70
  %.extract17 = load i32, ptr addrspace(3) %745, align 8, !dbg !70
  %746 = getelementptr inbounds i8, ptr addrspace(3) %725, i32 12, !dbg !70
  %.extract18 = load i32, ptr addrspace(3) %746, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %629, i1 %32) #2, !dbg !70
  %.extract19 = extractelement <4 x i32> %731, i64 0, !dbg !70
  %.extract20 = extractelement <4 x i32> %731, i64 1, !dbg !70
  %.extract21 = extractelement <4 x i32> %731, i64 2, !dbg !70
  %.extract22 = extractelement <4 x i32> %731, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %631, i1 %33) #2, !dbg !70
  %.extract23 = extractelement <4 x i32> %737, i64 0, !dbg !70
  %.extract24 = extractelement <4 x i32> %737, i64 1, !dbg !70
  %.extract25 = extractelement <4 x i32> %737, i64 2, !dbg !70
  %.extract26 = extractelement <4 x i32> %737, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %633, i1 %34) #2, !dbg !70
  %.extract27 = extractelement <4 x i32> %743, i64 0, !dbg !70
  %.extract28 = extractelement <4 x i32> %743, i64 1, !dbg !70
  %.extract29 = extractelement <4 x i32> %743, i64 2, !dbg !70
  %.extract30 = extractelement <4 x i32> %743, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %635, i1 %35) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdywpmszpgbzy5fojfkyxs3z7sijunr2t5zlydoamo26vtyon7wo.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 32, scope: !7)
!23 = !DILocation(line: 34, column: 40, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 54, scope: !7)
!29 = !DILocation(line: 35, column: 34, scope: !7)
!30 = !DILocation(line: 35, column: 41, scope: !7)
!31 = !DILocation(line: 35, column: 49, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 58, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 59, scope: !7)
!39 = !DILocation(line: 37, column: 35, scope: !7)
!40 = !DILocation(line: 37, column: 42, scope: !7)
!41 = !DILocation(line: 37, column: 50, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 59, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 38, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 39, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !57)
!57 = !DILocation(line: 40, column: 40, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !57)
!61 = !DILocation(line: 41, column: 33, scope: !7)
!62 = !DILocation(line: 41, column: 30, scope: !7)
!63 = !DILocation(line: 41, column: 25, scope: !7)
!64 = !DILocation(line: 41, column: 44, scope: !7)
!65 = !DILocation(line: 42, column: 34, scope: !7)
!66 = !DILocation(line: 42, column: 45, scope: !7)
!67 = !DILocation(line: 42, column: 30, scope: !7)
!68 = !DILocation(line: 42, column: 39, scope: !7)
!69 = !DILocation(line: 42, column: 25, scope: !7)
!70 = !DILocation(line: 42, column: 56, scope: !7)
!71 = !DILocation(line: 42, column: 4, scope: !7)
