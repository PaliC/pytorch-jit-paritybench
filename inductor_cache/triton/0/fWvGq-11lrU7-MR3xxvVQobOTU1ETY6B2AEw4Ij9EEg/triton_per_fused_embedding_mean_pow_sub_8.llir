; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp4 < 1024\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_embedding_mean_pow_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %9 = shl i32 %8, 3, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 7, !dbg !14
  %12 = or disjoint i32 %9, %11, !dbg !15
  %13 = icmp slt i32 %12, 512, !dbg !16
  %14 = lshr i32 %10, 3, !dbg !17
  %15 = and i32 %14, 31, !dbg !17
  %16 = or disjoint i32 %15, 32, !dbg !17
  %.frozen = freeze i32 %12, !dbg !18
  %17 = sdiv i32 %.frozen, 64, !dbg !18
  %18 = mul i32 %17, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %18, !dbg !19
  %19 = shl i32 %12, 1, !dbg !20
  %20 = or disjoint i32 %19, 1, !dbg !21
  %21 = sext i32 %19 to i64, !dbg !22
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = sext i32 %20 to i64, !dbg !22
  %24 = getelementptr i64, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %22, i1 %13, i1 %13) #5, !dbg !23
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %22, i1 %13, i1 %13) #5, !dbg !23
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %24, i1 %13, i1 %13) #5, !dbg !23
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %24, i1 %13, i1 %13) #5, !dbg !23
  %29 = shl nsw i32 %.decomposed, 7, !dbg !24
  %30 = or disjoint i32 %29, %15, !dbg !25
  %31 = or disjoint i32 %29, %16, !dbg !25
  %32 = or disjoint i32 %30, 64, !dbg !25
  %33 = or disjoint i32 %30, 96, !dbg !25
  %34 = shl i32 %17, 13, !dbg !26
  %35 = add i32 %30, %34, !dbg !27
  %36 = add i32 %31, %34, !dbg !27
  %37 = add i32 %32, %34, !dbg !27
  %38 = add i32 %33, %34, !dbg !27
  %39 = sdiv i32 %35, 1024, !dbg !28
  %40 = sdiv i32 %36, 1024, !dbg !28
  %41 = sdiv i32 %37, 1024, !dbg !28
  %42 = sdiv i32 %38, 1024, !dbg !28
  %43 = srem i32 %39, 16, !dbg !29
  %44 = srem i32 %40, 16, !dbg !29
  %45 = srem i32 %41, 16, !dbg !29
  %46 = srem i32 %42, 16, !dbg !29
  %47 = shl nsw i32 %43, 4, !dbg !30
  %48 = shl nsw i32 %44, 4, !dbg !30
  %49 = shl nsw i32 %45, 4, !dbg !30
  %50 = shl nsw i32 %46, 4, !dbg !30
  %51 = shl nuw nsw i32 %15, 8, !dbg !31
  %52 = shl nuw nsw i32 %16, 8, !dbg !31
  %53 = sdiv i32 %35, 16384, !dbg !32
  %54 = sdiv i32 %36, 16384, !dbg !32
  %55 = sdiv i32 %37, 16384, !dbg !32
  %56 = sdiv i32 %38, 16384, !dbg !32
  %57 = shl nsw i32 %53, 14, !dbg !33
  %58 = shl nsw i32 %54, 14, !dbg !33
  %59 = shl nsw i32 %55, 14, !dbg !33
  %60 = shl nsw i32 %56, 14, !dbg !33
  %61 = sdiv i32 %30, 64, !dbg !34
  %62 = sdiv i32 %31, 64, !dbg !34
  %63 = sdiv i32 %32, 64, !dbg !34
  %64 = sdiv i32 %33, 64, !dbg !34
  %65 = srem i32 %61, 16, !dbg !35
  %66 = srem i32 %62, 16, !dbg !35
  %67 = srem i32 %63, 16, !dbg !35
  %68 = srem i32 %64, 16, !dbg !35
  %69 = add nsw i32 %65, %51, !dbg !36
  %70 = add i32 %69, %57, !dbg !37
  %71 = add i32 %70, %47, !dbg !38
  %72 = add nsw i32 %66, %52, !dbg !36
  %73 = add nsw i32 %72, %58, !dbg !37
  %74 = add nsw i32 %73, %48, !dbg !38
  %75 = add nsw i32 %67, %51, !dbg !36
  %76 = add i32 %75, %59, !dbg !37
  %77 = add i32 %76, %49, !dbg !38
  %78 = add nsw i32 %68, %52, !dbg !36
  %79 = add nsw i32 %78, %60, !dbg !37
  %80 = add nsw i32 %79, %50, !dbg !38
  %81 = sext i32 %71 to i64, !dbg !39
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !39
  %83 = sext i32 %74 to i64, !dbg !39
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !39
  %85 = sext i32 %77 to i64, !dbg !39
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !39
  %87 = sext i32 %80 to i64, !dbg !39
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !39
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %93 = zext nneg i32 %15 to i64, !dbg !41
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !41
  %95 = zext nneg i32 %16 to i64, !dbg !41
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !41
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !42
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #5, !dbg !42
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !42
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #5, !dbg !42
  %101 = insertelement <4 x i64> poison, i64 %26, i64 0, !dbg !43
  %102 = insertelement <4 x i64> %101, i64 %25, i64 1, !dbg !43
  %103 = insertelement <4 x i64> %102, i64 %27, i64 2, !dbg !43
  %104 = insertelement <4 x i64> %103, i64 %28, i64 3, !dbg !43
  %105 = lshr <4 x i64> %104, splat (i64 53), !dbg !43
  %106 = and <4 x i64> %105, splat (i64 1024), !dbg !43
  %107 = add <4 x i64> %106, %104, !dbg !43
  %108 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %107), !dbg !44
  %109 = icmp ugt i64 %108, 1023, !dbg !44
  %110 = and i1 %13, %109, !dbg !44
  br i1 %110, label %111, label %112, !dbg !44

111:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !44
  unreachable, !dbg !44

112:                                              ; preds = %7
  %113 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !42
  %114 = insertelement <2 x i32> %113, i32 %100, i64 1, !dbg !42
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !42
  %116 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !42
  %117 = insertelement <2 x i32> %116, i32 %98, i64 1, !dbg !42
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !42
  %119 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !40
  %120 = insertelement <2 x i32> %119, i32 %92, i64 1, !dbg !40
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !40
  %122 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !40
  %123 = insertelement <2 x i32> %122, i32 %90, i64 1, !dbg !40
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !40
  %125 = lshr i32 %10, 5, !dbg !17
  %126 = and i32 %10, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %127 = shl nuw nsw i32 %15, 10, !dbg !45
  %128 = shl nuw nsw i32 %16, 10, !dbg !45
  %129 = zext nneg i32 %127 to i64, !dbg !46
  %130 = zext nneg i32 %128 to i64, !dbg !46
  %131 = extractelement <4 x i64> %107, i64 1, !dbg !47
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !47
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %129, !dbg !47
  %134 = extractelement <4 x i64> %107, i64 0, !dbg !47
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !47
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %130, !dbg !47
  %137 = extractelement <4 x i64> %107, i64 2, !dbg !47
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !47
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %129, !dbg !47
  %140 = extractelement <4 x i64> %107, i64 3, !dbg !47
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !47
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %130, !dbg !47
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %147 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !48
  %148 = insertelement <2 x i32> %147, i32 %144, i64 1, !dbg !48
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !48
  %150 = fadd <2 x float> %124, %118, !dbg !49
  %151 = fsub <2 x float> %149, %150, !dbg !50
  %152 = fmul <2 x float> %151, %151, !dbg !51
  %153 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !48
  %154 = insertelement <2 x i32> %153, i32 %146, i64 1, !dbg !48
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !48
  %156 = fadd <2 x float> %121, %115, !dbg !49
  %157 = fsub <2 x float> %155, %156, !dbg !50
  %158 = fmul <2 x float> %157, %157, !dbg !51
  %shift = shufflevector <2 x float> %152, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %159 = fadd <2 x float> %152, %shift, !dbg !52
  %160 = fadd <2 x float> %159, %158, !dbg !52
  %shift6 = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %161 = fadd <2 x float> %160, %shift6, !dbg !52
  %162 = extractelement <2 x float> %161, i64 0, !dbg !52
  %163 = select i1 %13, float %162, float 0.000000e+00, !dbg !52
  %164 = bitcast float %163 to i32, !dbg !57
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 16, i32 31), !dbg !57
  %166 = bitcast i32 %165 to float, !dbg !57
  %167 = fadd float %163, %166, !dbg !52
  %168 = bitcast float %167 to i32, !dbg !57
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !57
  %170 = bitcast i32 %169 to float, !dbg !57
  %171 = fadd float %167, %170, !dbg !52
  %172 = lshr i32 %126, 3, !dbg !57
  %173 = icmp samesign ult i32 %126, 8, !dbg !57
  %174 = and i32 %125, 7, !dbg !57
  %175 = shl nuw nsw i32 %11, 3, !dbg !57
  %176 = or disjoint i32 %175, %174, !dbg !57
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !57
  %178 = bitcast float %171 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 %173) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %179 = icmp slt i32 %10, 64, !dbg !57
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !57
  %181 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %179) #5, !dbg !57
  %182 = bitcast i32 %181 to float, !dbg !57
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 4, i32 31), !dbg !57
  %184 = bitcast i32 %183 to float, !dbg !57
  %185 = fadd float %182, %184, !dbg !52
  %186 = bitcast float %185 to i32, !dbg !57
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 2, i32 31), !dbg !57
  %188 = bitcast i32 %187 to float, !dbg !57
  %189 = fadd float %185, %188, !dbg !52
  %190 = bitcast float %189 to i32, !dbg !57
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 1, i32 31), !dbg !57
  %192 = bitcast i32 %191 to float, !dbg !57
  %193 = fadd float %189, %192, !dbg !52
  %194 = icmp eq i32 %11, 0, !dbg !57
  %195 = and i1 %179, %194, !dbg !57
  %196 = bitcast float %193 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %196, i1 %195) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !57
  %198 = load i32, ptr addrspace(3) %197, align 16, !dbg !57
  %199 = sext i32 %12 to i64, !dbg !58
  %200 = getelementptr float, ptr addrspace(1) %4, i64 %199, !dbg !58
  %201 = shl nuw nsw i32 %174, 2, !dbg !59
  %202 = or disjoint i32 %201, %172, !dbg !59
  %203 = icmp eq i32 %202, 0, !dbg !59
  %204 = and i1 %203, %13, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %200, i1 %204) #5, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py", directory: "inductor_cache/63")
!4 = !{ptr @triton_per_fused_embedding_mean_pow_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_embedding_mean_pow_sub_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_embedding_mean_pow_sub_8", linkageName: "triton_per_fused_embedding_mean_pow_sub_8", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 34, scope: !11)
!18 = !DILocation(line: 32, column: 19, scope: !11)
!19 = !DILocation(line: 31, column: 19, scope: !11)
!20 = !DILocation(line: 33, column: 32, scope: !11)
!21 = !DILocation(line: 33, column: 38, scope: !11)
!22 = !DILocation(line: 33, column: 30, scope: !11)
!23 = !DILocation(line: 33, column: 50, scope: !11)
!24 = !DILocation(line: 34, column: 46, scope: !11)
!25 = !DILocation(line: 34, column: 42, scope: !11)
!26 = !DILocation(line: 34, column: 56, scope: !11)
!27 = !DILocation(line: 34, column: 51, scope: !11)
!28 = !DILocation(line: 34, column: 63, scope: !11)
!29 = !DILocation(line: 34, column: 71, scope: !11)
!30 = !DILocation(line: 34, column: 35, scope: !11)
!31 = !DILocation(line: 34, column: 84, scope: !11)
!32 = !DILocation(line: 34, column: 130, scope: !11)
!33 = !DILocation(line: 34, column: 103, scope: !11)
!34 = !DILocation(line: 34, column: 159, scope: !11)
!35 = !DILocation(line: 34, column: 165, scope: !11)
!36 = !DILocation(line: 34, column: 78, scope: !11)
!37 = !DILocation(line: 34, column: 96, scope: !11)
!38 = !DILocation(line: 34, column: 141, scope: !11)
!39 = !DILocation(line: 34, column: 30, scope: !11)
!40 = !DILocation(line: 34, column: 172, scope: !11)
!41 = !DILocation(line: 35, column: 31, scope: !11)
!42 = !DILocation(line: 35, column: 42, scope: !11)
!43 = !DILocation(line: 39, column: 32, scope: !11)
!44 = !DILocation(line: 40, column: 63, scope: !11)
!45 = !DILocation(line: 41, column: 44, scope: !11)
!46 = !DILocation(line: 41, column: 37, scope: !11)
!47 = !DILocation(line: 41, column: 30, scope: !11)
!48 = !DILocation(line: 41, column: 56, scope: !11)
!49 = !DILocation(line: 42, column: 18, scope: !11)
!50 = !DILocation(line: 43, column: 19, scope: !11)
!51 = !DILocation(line: 44, column: 20, scope: !11)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !56)
!53 = distinct !DILexicalBlockFile(scope: !55, file: !54, discriminator: 0)
!54 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!55 = distinct !DILexicalBlockFile(scope: !11, file: !54, discriminator: 0)
!56 = !DILocation(line: 47, column: 26, scope: !11)
!57 = !DILocation(line: 267, column: 36, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 48, column: 25, scope: !11)
!59 = !DILocation(line: 48, column: 37, scope: !11)
!60 = !DILocation(line: 48, column: 4, scope: !11)
