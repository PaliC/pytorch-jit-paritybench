#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0)
#loc1 = loc(unknown)
#loc53 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":47:26)
#loc60 = loc(callsite(#loc1 at #loc53))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_embedding_mean_pow_sub_8(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<8x128xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1024> : tensor<8x128xi64, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<512> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<2> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<8192> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<1024> : tensor<8x128xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<16> : tensor<8x128xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<256> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<16384> : tensor<8x128xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<64> : tensor<8x128xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<true> : tensor<8x1xi1, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<1024> : tensor<1x128xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<8x1xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc6)
    %7 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc7)
    %9 = arith.remsi %5, %cst_3 : tensor<8x1xi32, #blocked> loc(#loc8)
    %10 = arith.divsi %5, %cst_3 : tensor<8x1xi32, #blocked> loc(#loc9)
    %11 = arith.muli %5, %cst_4 : tensor<8x1xi32, #blocked> loc(#loc10)
    %12 = arith.divsi %8, %cst_5 : tensor<1x128xi32, #blocked> loc(#loc11)
    %13 = tt.broadcast %11 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc12)
    %14 = tt.broadcast %12 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc12)
    %15 = arith.addi %13, %14 : tensor<8x128xi32, #blocked> loc(#loc12)
    %16 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<8x128x!tt.ptr<i64>, #blocked> loc(#loc13)
    %17 = tt.addptr %16, %15 : tensor<8x128x!tt.ptr<i64>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc13)
    %18 = tt.broadcast %6 : tensor<8x1xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc14)
    %19 = tt.load %17, %18, %cst_0 evictionPolicy = evict_last : tensor<8x128x!tt.ptr<i64>, #blocked> loc(#loc14)
    %20 = arith.muli %9, %cst_6 : tensor<8x1xi32, #blocked> loc(#loc15)
    %21 = tt.broadcast %8 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc16)
    %22 = tt.broadcast %20 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc16)
    %23 = arith.addi %21, %22 : tensor<8x128xi32, #blocked> loc(#loc16)
    %24 = arith.muli %10, %cst_7 : tensor<8x1xi32, #blocked> loc(#loc17)
    %25 = tt.broadcast %24 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc18)
    %26 = arith.addi %23, %25 : tensor<8x128xi32, #blocked> loc(#loc18)
    %27 = arith.divsi %26, %cst_8 : tensor<8x128xi32, #blocked> loc(#loc19)
    %28 = arith.remsi %27, %cst_9 : tensor<8x128xi32, #blocked> loc(#loc20)
    %29 = arith.muli %28, %cst_9 : tensor<8x128xi32, #blocked> loc(#loc21)
    %30 = arith.remsi %8, %cst_5 : tensor<1x128xi32, #blocked> loc(#loc22)
    %31 = arith.muli %30, %cst_10 : tensor<1x128xi32, #blocked> loc(#loc23)
    %32 = tt.broadcast %31 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc24)
    %33 = arith.addi %29, %32 : tensor<8x128xi32, #blocked> loc(#loc24)
    %34 = arith.divsi %26, %cst_11 : tensor<8x128xi32, #blocked> loc(#loc25)
    %35 = arith.muli %34, %cst_11 : tensor<8x128xi32, #blocked> loc(#loc26)
    %36 = arith.addi %33, %35 : tensor<8x128xi32, #blocked> loc(#loc27)
    %37 = arith.divsi %23, %cst_12 : tensor<8x128xi32, #blocked> loc(#loc28)
    %38 = arith.remsi %37, %cst_9 : tensor<8x128xi32, #blocked> loc(#loc29)
    %39 = arith.addi %36, %38 : tensor<8x128xi32, #blocked> loc(#loc30)
    %40 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc31)
    %41 = tt.addptr %40, %39 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc31)
    %42 = tt.load %41, %18, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc32)
    %43 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc33)
    %44 = tt.addptr %43, %30 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc33)
    %45 = tt.load %44 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc34)
    %46 = arith.addi %19, %cst_1 : tensor<8x128xi64, #blocked> loc(#loc35)
    %47 = arith.cmpi slt, %19, %cst_0 : tensor<8x128xi64, #blocked> loc(#loc36)
    %48 = arith.select %47, %46, %19 : tensor<8x128xi1, #blocked>, tensor<8x128xi64, #blocked> loc(#loc37)
    %49 = arith.cmpi sge, %48, %cst_0 : tensor<8x128xi64, #blocked> loc(#loc38)
    %50 = arith.cmpi slt, %48, %cst_1 : tensor<8x128xi64, #blocked> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<8x128xi1, #blocked> loc(#loc40)
    %52 = arith.xori %6, %cst_13 : tensor<8x1xi1, #blocked> loc(#loc41)
    %53 = tt.broadcast %52 : tensor<8x1xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc42)
    %54 = arith.ori %51, %53 : tensor<8x128xi1, #blocked> loc(#loc42)
    tt.assert %54, "index out of bounds: 0 <= tmp4 < 1024" : tensor<8x128xi1, #blocked> loc(#loc43)
    %55 = arith.muli %30, %cst_14 : tensor<1x128xi32, #blocked> loc(#loc44)
    %56 = arith.extsi %55 : tensor<1x128xi32, #blocked> to tensor<1x128xi64, #blocked> loc(#loc45)
    %57 = tt.broadcast %56 : tensor<1x128xi64, #blocked> -> tensor<8x128xi64, #blocked> loc(#loc45)
    %58 = arith.addi %48, %57 : tensor<8x128xi64, #blocked> loc(#loc45)
    %59 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc46)
    %60 = tt.addptr %59, %58 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi64, #blocked> loc(#loc46)
    %61 = tt.load %60, %18, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc47)
    %62 = tt.broadcast %45 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc48)
    %63 = arith.addf %42, %62 : tensor<8x128xf32, #blocked> loc(#loc48)
    %64 = arith.subf %61, %63 : tensor<8x128xf32, #blocked> loc(#loc49)
    %65 = arith.mulf %64, %64 : tensor<8x128xf32, #blocked> loc(#loc50)
    %66 = arith.select %18, %65, %cst : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc51)
    %67 = "tt.reduce"(%66) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc53)), %arg8: f32 loc(callsite(#loc1 at #loc53))):
      %71 = arith.addf %arg7, %arg8 : f32 loc(#loc62)
      tt.reduce.return %71 : f32 loc(#loc59)
    }) : (tensor<8x128xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc59)
    %68 = tt.expand_dims %67 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc55)
    %69 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc56)
    %70 = tt.addptr %69, %5 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc56)
    tt.store %70, %68, %6 : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc57)
    tt.return loc(#loc58)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":23:28)
#loc3 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":23:33)
#loc4 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":24:44)
#loc5 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":24:23)
#loc6 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":25:21)
#loc7 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":26:34)
#loc8 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":31:19)
#loc9 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":32:19)
#loc10 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:32)
#loc11 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:44)
#loc12 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:38)
#loc13 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:30)
#loc14 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:50)
#loc15 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:46)
#loc16 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:42)
#loc17 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:56)
#loc18 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:51)
#loc19 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:63)
#loc20 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:71)
#loc21 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:35)
#loc22 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:89)
#loc23 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:84)
#loc24 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:78)
#loc25 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:130)
#loc26 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:103)
#loc27 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:96)
#loc28 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:159)
#loc29 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:165)
#loc30 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:141)
#loc31 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:30)
#loc32 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:172)
#loc33 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":35:31)
#loc34 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":35:42)
#loc35 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":37:18)
#loc36 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":38:18)
#loc37 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":39:32)
#loc38 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:28)
#loc39 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:44)
#loc40 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:37)
#loc41 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:55)
#loc42 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:53)
#loc43 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:63)
#loc44 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":41:44)
#loc45 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":41:37)
#loc46 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":41:30)
#loc47 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":41:56)
#loc48 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":42:18)
#loc49 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":43:19)
#loc50 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":44:20)
#loc51 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":46:35)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc55 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":47:29)
#loc56 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":48:25)
#loc57 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":48:37)
#loc58 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":48:4)
#loc59 = loc(callsite(#loc52 at #loc53))
#loc61 = loc(callsite(#loc54 at #loc52))
#loc62 = loc(callsite(#loc61 at #loc53))
