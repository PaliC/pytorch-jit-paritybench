; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_leaky_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = sdiv i32 %16, 4096, !dbg !14
  %19 = sdiv i32 %17, 4096, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %20 = sdiv i32 %.frozen, 409600, !dbg !15
  %.frozen2 = freeze i32 %17, !dbg !15
  %21 = sdiv i32 %.frozen2, 409600, !dbg !15
  %22 = mul i32 %20, 409600, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = mul i32 %21, 409600, !dbg !16
  %srem1.decomposed = sub i32 %.frozen2, %23, !dbg !16
  %24 = mul nsw i32 %20, 102400, !dbg !17
  %25 = mul nsw i32 %21, 102400, !dbg !17
  %26 = add nsw i32 %24, %srem.decomposed, !dbg !18
  %27 = add nsw i32 %25, %srem1.decomposed, !dbg !18
  %28 = sext i32 %26 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = sext i32 %27 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !20
  %33 = insertelement <2 x i32> %32, i32 %18, i64 1, !dbg !20
  %34 = srem <2 x i32> %33, <i32 4096, i32 100>, !dbg !20
  %35 = extractelement <2 x i32> %34, i64 1, !dbg !21
  %36 = sext i32 %35 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !22
  %38 = insertelement <2 x i32> <i32 poison, i32 -25>, i32 %24, i64 0, !dbg !23
  %39 = add nsw <2 x i32> %38, %34, !dbg !23
  %40 = extractelement <2 x i32> %39, i64 1, !dbg !24
  %41 = shl nsw i32 %40, 12, !dbg !24
  %42 = extractelement <2 x i32> %39, i64 0, !dbg !25
  %43 = add nsw i32 %42, %41, !dbg !26
  %44 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !20
  %45 = insertelement <2 x i32> %44, i32 %19, i64 1, !dbg !20
  %46 = insertelement <2 x i32> <i32 poison, i32 -25>, i32 %25, i64 0, !dbg !23
  %47 = sext i32 %43 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !27
  %49 = sext i32 %40 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !28
  %51 = add nsw i32 %35, -75, !dbg !29
  %52 = shl nsw i32 %51, 12, !dbg !30
  %53 = add nsw i32 %42, %52, !dbg !25
  %54 = sext i32 %53 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %7, i64 %54, !dbg !31
  %56 = sext i32 %51 to i64, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %56, !dbg !32
  %58 = icmp slt i32 %35, 25, !dbg !33
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #1, !dbg !34
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !34
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !34
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !34
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !34
  %64 = srem <2 x i32> %45, <i32 4096, i32 100>, !dbg !20
  %65 = extractelement <2 x i32> %64, i64 1, !dbg !21
  %66 = icmp slt i32 %65, 25, !dbg !33
  %67 = sext i32 %65 to i64, !dbg !22
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !22
  %69 = add nsw <2 x i32> %46, %64, !dbg !23
  %70 = extractelement <2 x i32> %69, i64 1, !dbg !24
  %71 = shufflevector <2 x i32> %69, <2 x i32> %39, <2 x i32> <i32 1, i32 3>, !dbg !35
  %72 = icmp ult <2 x i32> %71, splat (i32 25), !dbg !35
  %73 = shufflevector <2 x i1> %72, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %74 = shl nsw i32 %70, 12, !dbg !24
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !34
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !34
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !34
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !34
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !34
  %80 = insertelement <8 x i32> poison, i32 %79, i64 0, !dbg !34
  %81 = insertelement <8 x i32> %80, i32 %78, i64 1, !dbg !34
  %82 = insertelement <8 x i32> %81, i32 %77, i64 2, !dbg !34
  %83 = insertelement <8 x i32> %82, i32 %76, i64 3, !dbg !34
  %84 = insertelement <8 x i32> %83, i32 %63, i64 4, !dbg !34
  %85 = insertelement <8 x i32> %84, i32 %62, i64 5, !dbg !34
  %86 = insertelement <8 x i32> %85, i32 %61, i64 6, !dbg !34
  %87 = insertelement <8 x i32> %86, i32 %60, i64 7, !dbg !34
  %88 = bitcast <8 x i32> %87 to <8 x float>, !dbg !34
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %58, i32 0, i1 %58) #1, !dbg !36
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %58, i32 0, i1 %58) #1, !dbg !36
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %58, i32 0, i1 %58) #1, !dbg !36
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %58, i32 0, i1 %58) #1, !dbg !36
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %66, i32 0, i1 %66) #1, !dbg !36
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %66, i32 0, i1 %66) #1, !dbg !36
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %66, i32 0, i1 %66) #1, !dbg !36
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %66, i32 0, i1 %66) #1, !dbg !36
  %97 = insertelement <8 x i32> poison, i32 %96, i64 0, !dbg !36
  %98 = insertelement <8 x i32> %97, i32 %95, i64 1, !dbg !36
  %99 = insertelement <8 x i32> %98, i32 %94, i64 2, !dbg !36
  %100 = insertelement <8 x i32> %99, i32 %93, i64 3, !dbg !36
  %101 = insertelement <8 x i32> %100, i32 %92, i64 4, !dbg !36
  %102 = insertelement <8 x i32> %101, i32 %91, i64 5, !dbg !36
  %103 = insertelement <8 x i32> %102, i32 %90, i64 6, !dbg !36
  %104 = insertelement <8 x i32> %103, i32 %89, i64 7, !dbg !36
  %105 = bitcast <8 x i32> %104 to <8 x float>, !dbg !36
  %106 = fadd <8 x float> %88, %105, !dbg !37
  %107 = extractelement <2 x i32> %69, i64 0, !dbg !25
  %108 = add nsw i32 %107, %74, !dbg !26
  %109 = sext i32 %108 to i64, !dbg !27
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !27
  %111 = extractelement <2 x i1> %72, i64 1, !dbg !38
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #1, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !38
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !38
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !38
  %117 = extractelement <2 x i1> %72, i64 0, !dbg !38
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117) #1, !dbg !38
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !38
  %123 = insertelement <8 x i32> poison, i32 %122, i64 0, !dbg !38
  %124 = insertelement <8 x i32> %123, i32 %121, i64 1, !dbg !38
  %125 = insertelement <8 x i32> %124, i32 %120, i64 2, !dbg !38
  %126 = insertelement <8 x i32> %125, i32 %119, i64 3, !dbg !38
  %127 = insertelement <8 x i32> %126, i32 %116, i64 4, !dbg !38
  %128 = insertelement <8 x i32> %127, i32 %115, i64 5, !dbg !38
  %129 = insertelement <8 x i32> %128, i32 %114, i64 6, !dbg !38
  %130 = insertelement <8 x i32> %129, i32 %113, i64 7, !dbg !38
  %131 = bitcast <8 x i32> %130 to <8 x float>, !dbg !38
  %132 = sext i32 %70 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %132, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %111, i32 0, i1 %111) #1, !dbg !39
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %111, i32 0, i1 %111) #1, !dbg !39
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %111, i32 0, i1 %111) #1, !dbg !39
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %111, i32 0, i1 %111) #1, !dbg !39
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %117, i32 0, i1 %117) #1, !dbg !39
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %117, i32 0, i1 %117) #1, !dbg !39
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %117, i32 0, i1 %117) #1, !dbg !39
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %117, i32 0, i1 %117) #1, !dbg !39
  %142 = insertelement <8 x i32> poison, i32 %141, i64 0, !dbg !39
  %143 = insertelement <8 x i32> %142, i32 %140, i64 1, !dbg !39
  %144 = insertelement <8 x i32> %143, i32 %139, i64 2, !dbg !39
  %145 = insertelement <8 x i32> %144, i32 %138, i64 3, !dbg !39
  %146 = insertelement <8 x i32> %145, i32 %137, i64 4, !dbg !39
  %147 = insertelement <8 x i32> %146, i32 %136, i64 5, !dbg !39
  %148 = insertelement <8 x i32> %147, i32 %135, i64 6, !dbg !39
  %149 = insertelement <8 x i32> %148, i32 %134, i64 7, !dbg !39
  %150 = bitcast <8 x i32> %149 to <8 x float>, !dbg !39
  %151 = fadd <8 x float> %131, %150, !dbg !40
  %152 = shufflevector <2 x i32> %64, <2 x i32> %34, <2 x i32> <i32 1, i32 3>, !dbg !41
  %153 = add nsw <2 x i32> %152, splat (i32 -50), !dbg !41
  %154 = icmp ult <2 x i32> %153, splat (i32 25), !dbg !41
  %155 = shufflevector <2 x i1> %154, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !41
  %156 = extractelement <2 x i32> %153, i64 1, !dbg !42
  %157 = shl nsw i32 %156, 12, !dbg !42
  %158 = extractelement <2 x i32> %153, i64 0, !dbg !42
  %159 = shl nsw i32 %158, 12, !dbg !42
  %160 = add nsw i32 %42, %157, !dbg !43
  %161 = add nsw i32 %107, %159, !dbg !43
  %162 = sext i32 %160 to i64, !dbg !44
  %163 = getelementptr float, ptr addrspace(1) %5, i64 %162, !dbg !44
  %164 = sext i32 %161 to i64, !dbg !44
  %165 = getelementptr float, ptr addrspace(1) %5, i64 %164, !dbg !44
  %166 = extractelement <2 x i1> %154, i64 1, !dbg !45
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %163, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166) #1, !dbg !45
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !45
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !45
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !45
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !45
  %172 = extractelement <2 x i1> %154, i64 0, !dbg !45
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %165, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172) #1, !dbg !45
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !45
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !45
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !45
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !45
  %178 = insertelement <8 x i32> poison, i32 %177, i64 0, !dbg !45
  %179 = insertelement <8 x i32> %178, i32 %176, i64 1, !dbg !45
  %180 = insertelement <8 x i32> %179, i32 %175, i64 2, !dbg !45
  %181 = insertelement <8 x i32> %180, i32 %174, i64 3, !dbg !45
  %182 = insertelement <8 x i32> %181, i32 %171, i64 4, !dbg !45
  %183 = insertelement <8 x i32> %182, i32 %170, i64 5, !dbg !45
  %184 = insertelement <8 x i32> %183, i32 %169, i64 6, !dbg !45
  %185 = insertelement <8 x i32> %184, i32 %168, i64 7, !dbg !45
  %186 = bitcast <8 x i32> %185 to <8 x float>, !dbg !45
  %187 = sext i32 %156 to i64, !dbg !46
  %188 = getelementptr float, ptr addrspace(1) %6, i64 %187, !dbg !46
  %189 = sext i32 %158 to i64, !dbg !46
  %190 = getelementptr float, ptr addrspace(1) %6, i64 %189, !dbg !46
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %166, i32 0, i1 %166) #1, !dbg !47
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %166, i32 0, i1 %166) #1, !dbg !47
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %166, i32 0, i1 %166) #1, !dbg !47
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %166, i32 0, i1 %166) #1, !dbg !47
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %172, i32 0, i1 %172) #1, !dbg !47
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %172, i32 0, i1 %172) #1, !dbg !47
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %172, i32 0, i1 %172) #1, !dbg !47
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %172, i32 0, i1 %172) #1, !dbg !47
  %199 = insertelement <8 x i32> poison, i32 %198, i64 0, !dbg !47
  %200 = insertelement <8 x i32> %199, i32 %197, i64 1, !dbg !47
  %201 = insertelement <8 x i32> %200, i32 %196, i64 2, !dbg !47
  %202 = insertelement <8 x i32> %201, i32 %195, i64 3, !dbg !47
  %203 = insertelement <8 x i32> %202, i32 %194, i64 4, !dbg !47
  %204 = insertelement <8 x i32> %203, i32 %193, i64 5, !dbg !47
  %205 = insertelement <8 x i32> %204, i32 %192, i64 6, !dbg !47
  %206 = insertelement <8 x i32> %205, i32 %191, i64 7, !dbg !47
  %207 = bitcast <8 x i32> %206 to <8 x float>, !dbg !47
  %208 = fadd <8 x float> %186, %207, !dbg !48
  %209 = icmp sgt <2 x i32> %152, splat (i32 74), !dbg !21
  %210 = shufflevector <2 x i1> %209, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !21
  %211 = add nsw i32 %65, -75, !dbg !29
  %212 = shl nsw i32 %211, 12, !dbg !30
  %213 = add nsw i32 %107, %212, !dbg !25
  %214 = sext i32 %213 to i64, !dbg !31
  %215 = getelementptr float, ptr addrspace(1) %7, i64 %214, !dbg !31
  %216 = extractelement <2 x i1> %209, i64 1, !dbg !49
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #1, !dbg !50
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !50
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !50
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !50
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !50
  %222 = extractelement <2 x i1> %209, i64 0, !dbg !49
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %215, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #1, !dbg !50
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !50
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !50
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !50
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !50
  %228 = insertelement <8 x i32> poison, i32 %227, i64 0, !dbg !50
  %229 = insertelement <8 x i32> %228, i32 %226, i64 1, !dbg !50
  %230 = insertelement <8 x i32> %229, i32 %225, i64 2, !dbg !50
  %231 = insertelement <8 x i32> %230, i32 %224, i64 3, !dbg !50
  %232 = insertelement <8 x i32> %231, i32 %221, i64 4, !dbg !50
  %233 = insertelement <8 x i32> %232, i32 %220, i64 5, !dbg !50
  %234 = insertelement <8 x i32> %233, i32 %219, i64 6, !dbg !50
  %235 = insertelement <8 x i32> %234, i32 %218, i64 7, !dbg !50
  %236 = bitcast <8 x i32> %235 to <8 x float>, !dbg !50
  %237 = sext i32 %211 to i64, !dbg !32
  %238 = getelementptr float, ptr addrspace(1) %8, i64 %237, !dbg !32
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %216, i32 0, i1 %216) #1, !dbg !49
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %216, i32 0, i1 %216) #1, !dbg !49
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %216, i32 0, i1 %216) #1, !dbg !49
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %216, i32 0, i1 %216) #1, !dbg !49
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %222, i32 0, i1 %222) #1, !dbg !49
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %222, i32 0, i1 %222) #1, !dbg !49
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %222, i32 0, i1 %222) #1, !dbg !49
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %222, i32 0, i1 %222) #1, !dbg !49
  %247 = insertelement <8 x i32> poison, i32 %246, i64 0, !dbg !49
  %248 = insertelement <8 x i32> %247, i32 %245, i64 1, !dbg !49
  %249 = insertelement <8 x i32> %248, i32 %244, i64 2, !dbg !49
  %250 = insertelement <8 x i32> %249, i32 %243, i64 3, !dbg !49
  %251 = insertelement <8 x i32> %250, i32 %242, i64 4, !dbg !49
  %252 = insertelement <8 x i32> %251, i32 %241, i64 5, !dbg !49
  %253 = insertelement <8 x i32> %252, i32 %240, i64 6, !dbg !49
  %254 = insertelement <8 x i32> %253, i32 %239, i64 7, !dbg !49
  %255 = bitcast <8 x i32> %254 to <8 x float>, !dbg !49
  %256 = fadd <8 x float> %236, %255, !dbg !51
  %257 = select <8 x i1> %210, <8 x float> %256, <8 x float> zeroinitializer, !dbg !52
  %258 = select <8 x i1> %155, <8 x float> %208, <8 x float> %257, !dbg !53
  %259 = select <8 x i1> %73, <8 x float> %151, <8 x float> %258, !dbg !53
  %260 = insertelement <8 x i1> poison, i1 %66, i64 0, !dbg !53
  %261 = insertelement <8 x i1> %260, i1 %58, i64 1, !dbg !53
  %262 = shufflevector <8 x i1> %261, <8 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !53
  %263 = select <8 x i1> %262, <8 x float> %106, <8 x float> %259, !dbg !53
  %264 = fcmp ogt <8 x float> %263, zeroinitializer, !dbg !54
  %265 = extractelement <8 x float> %263, i64 7, !dbg !55
  %266 = fmul float %265, 0x3FA99999A0000000, !dbg !56
  %267 = extractelement <8 x float> %263, i64 6, !dbg !55
  %268 = fmul float %267, 0x3FA99999A0000000, !dbg !56
  %269 = extractelement <8 x float> %263, i64 5, !dbg !55
  %270 = fmul float %269, 0x3FA99999A0000000, !dbg !56
  %271 = extractelement <8 x float> %263, i64 4, !dbg !55
  %272 = fmul float %271, 0x3FA99999A0000000, !dbg !56
  %273 = extractelement <8 x float> %263, i64 3, !dbg !55
  %274 = fmul float %273, 0x3FA99999A0000000, !dbg !56
  %275 = extractelement <8 x float> %263, i64 2, !dbg !55
  %276 = fmul float %275, 0x3FA99999A0000000, !dbg !56
  %277 = extractelement <8 x float> %263, i64 1, !dbg !55
  %278 = fmul float %277, 0x3FA99999A0000000, !dbg !56
  %279 = extractelement <8 x float> %263, i64 0, !dbg !55
  %280 = fmul float %279, 0x3FA99999A0000000, !dbg !56
  %281 = extractelement <8 x i1> %264, i64 7, !dbg !55
  %282 = select i1 %281, float %265, float %266, !dbg !55
  %283 = extractelement <8 x i1> %264, i64 6, !dbg !55
  %284 = select i1 %283, float %267, float %268, !dbg !55
  %285 = extractelement <8 x i1> %264, i64 5, !dbg !55
  %286 = select i1 %285, float %269, float %270, !dbg !55
  %287 = extractelement <8 x i1> %264, i64 4, !dbg !55
  %288 = select i1 %287, float %271, float %272, !dbg !55
  %289 = extractelement <8 x i1> %264, i64 3, !dbg !55
  %290 = select i1 %289, float %273, float %274, !dbg !55
  %291 = extractelement <8 x i1> %264, i64 2, !dbg !55
  %292 = select i1 %291, float %275, float %276, !dbg !55
  %293 = extractelement <8 x i1> %264, i64 1, !dbg !55
  %294 = select i1 %293, float %277, float %278, !dbg !55
  %295 = extractelement <8 x i1> %264, i64 0, !dbg !55
  %296 = select i1 %295, float %279, float %280, !dbg !55
  %297 = sext i32 %16 to i64, !dbg !57
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !57
  %299 = sext i32 %17 to i64, !dbg !57
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !57
  %301 = bitcast float %282 to i32, !dbg !58
  %302 = bitcast float %284 to i32, !dbg !58
  %303 = bitcast float %286 to i32, !dbg !58
  %304 = bitcast float %288 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %302, i32 %303, i32 %304, ptr addrspace(1) %298, i1 true) #1, !dbg !58
  %305 = bitcast float %290 to i32, !dbg !58
  %306 = bitcast float %292 to i32, !dbg !58
  %307 = bitcast float %294 to i32, !dbg !58
  %308 = bitcast float %296 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %305, i32 %306, i32 %307, i32 %308, ptr addrspace(1) %300, i1 true) #1, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crzkyvluxge7v5kltrmx56d2bszwyofx6yy7ewfor6xkj77o7qhl.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_poi_fused_cat_leaky_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_leaky_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_leaky_relu_1", linkageName: "triton_poi_fused_cat_leaky_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 25, column: 19, scope: !7)
!21 = !DILocation(line: 56, column: 20, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 42, column: 36, scope: !7)
!24 = !DILocation(line: 42, column: 42, scope: !7)
!25 = !DILocation(line: 59, column: 56, scope: !7)
!26 = !DILocation(line: 42, column: 56, scope: !7)
!27 = !DILocation(line: 42, column: 31, scope: !7)
!28 = !DILocation(line: 43, column: 31, scope: !7)
!29 = !DILocation(line: 59, column: 50, scope: !7)
!30 = !DILocation(line: 59, column: 42, scope: !7)
!31 = !DILocation(line: 59, column: 31, scope: !7)
!32 = !DILocation(line: 60, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 33, column: 59, scope: !7)
!35 = !DILocation(line: 41, column: 20, scope: !7)
!36 = !DILocation(line: 34, column: 35, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 68, scope: !7)
!39 = !DILocation(line: 43, column: 44, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 42, scope: !7)
!43 = !DILocation(line: 51, column: 56, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 68, scope: !7)
!46 = !DILocation(line: 52, column: 31, scope: !7)
!47 = !DILocation(line: 52, column: 44, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 44, scope: !7)
!50 = !DILocation(line: 59, column: 68, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 35, scope: !7)
!53 = !DILocation(line: 0, scope: !7)
!54 = !DILocation(line: 68, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 35, scope: !7)
!56 = !DILocation(line: 70, column: 20, scope: !7)
!57 = !DILocation(line: 72, column: 28, scope: !7)
!58 = !DILocation(line: 72, column: 40, scope: !7)
!59 = !DILocation(line: 72, column: 4, scope: !7)
