; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 2, !dbg !11
  %16 = and i32 %15, 508, !dbg !11
  %17 = icmp samesign ult i32 %16, 384, !dbg !12
  %18 = mul i32 %11, 384, !dbg !13
  %19 = add i32 %18, %16, !dbg !14
  %20 = sext i32 %19 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %33 = zext nneg i32 %16 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !21
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %44 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !16
  %45 = insertelement <2 x i32> %44, i32 %24, i64 1, !dbg !16
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !16
  %47 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !18
  %48 = insertelement <2 x i32> %47, i32 %30, i64 1, !dbg !18
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !18
  %50 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !20
  %51 = insertelement <2 x i32> %50, i32 %37, i64 1, !dbg !20
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !20
  %53 = fadd <2 x float> %49, %52, !dbg !25
  %54 = fadd <2 x float> %53, %46, !dbg !26
  %55 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !16
  %56 = insertelement <2 x i32> %55, i32 %25, i64 1, !dbg !16
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !16
  %58 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !18
  %59 = insertelement <2 x i32> %58, i32 %31, i64 1, !dbg !18
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !18
  %61 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !20
  %62 = insertelement <2 x i32> %61, i32 %38, i64 1, !dbg !20
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !20
  %64 = fadd <2 x float> %60, %63, !dbg !25
  %65 = fadd <2 x float> %64, %57, !dbg !26
  %66 = extractelement <2 x float> %54, i64 0, !dbg !27
  %67 = extractelement <2 x float> %54, i64 1, !dbg !27
  %68 = fadd float %66, %67, !dbg !27
  %69 = extractelement <2 x float> %65, i64 1, !dbg !27
  %70 = fadd float %69, %68, !dbg !27
  %71 = extractelement <2 x float> %65, i64 0, !dbg !27
  %72 = fadd float %71, %70, !dbg !27
  %73 = select i1 %17, float %72, float 0.000000e+00, !dbg !27
  %74 = bitcast float %73 to i32, !dbg !32
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 16, i32 31), !dbg !32
  %76 = bitcast i32 %75 to float, !dbg !32
  %77 = fadd float %73, %76, !dbg !27
  %78 = bitcast float %77 to i32, !dbg !32
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !32
  %80 = bitcast i32 %79 to float, !dbg !32
  %81 = fadd float %77, %80, !dbg !27
  %82 = bitcast float %81 to i32, !dbg !32
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 4, i32 31), !dbg !32
  %84 = bitcast i32 %83 to float, !dbg !32
  %85 = fadd float %81, %84, !dbg !27
  %86 = bitcast float %85 to i32, !dbg !32
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !32
  %88 = bitcast i32 %87 to float, !dbg !32
  %89 = fadd float %85, %88, !dbg !27
  %90 = bitcast float %89 to i32, !dbg !32
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = fadd float %89, %92, !dbg !27
  %94 = icmp eq i32 %13, 0, !dbg !32
  %95 = and i32 %14, 3, !dbg !32
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !32
  %97 = bitcast float %93 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 %94) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %98 = icmp slt i32 %12, 4, !dbg !32
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %100 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %99, i1 %98) #5, !dbg !32
  %101 = bitcast i32 %100 to float, !dbg !32
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !32
  %103 = bitcast i32 %102 to float, !dbg !32
  %104 = fadd float %101, %103, !dbg !27
  %105 = bitcast float %104 to i32, !dbg !32
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !32
  %107 = bitcast i32 %106 to float, !dbg !32
  %108 = fadd float %104, %107, !dbg !27
  %109 = and i32 %12, 3, !dbg !32
  %110 = icmp eq i32 %109, 0, !dbg !32
  %111 = and i1 %98, %110, !dbg !32
  %112 = bitcast float %108 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %112, i1 %111) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %113 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %114 = fadd float %113, 0.000000e+00, !dbg !33
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float 3.840000e+02) #5, !dbg !37
  %116 = fsub float %66, %115, !dbg !38
  %117 = fsub float %67, %115, !dbg !38
  %118 = fsub float %69, %115, !dbg !38
  %119 = fsub float %71, %115, !dbg !38
  %120 = fmul float %116, %116, !dbg !39
  %121 = fmul float %117, %117, !dbg !39
  %122 = fmul float %118, %118, !dbg !39
  %123 = fmul float %119, %119, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %124 = fadd float %120, %121, !dbg !42
  %125 = fadd float %122, %124, !dbg !42
  %126 = fadd float %123, %125, !dbg !42
  %127 = select i1 %17, float %126, float 0.000000e+00, !dbg !42
  %128 = bitcast float %127 to i32, !dbg !40
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !40
  %130 = bitcast i32 %129 to float, !dbg !40
  %131 = fadd float %127, %130, !dbg !42
  %132 = bitcast float %131 to i32, !dbg !40
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 8, i32 31), !dbg !40
  %134 = bitcast i32 %133 to float, !dbg !40
  %135 = fadd float %131, %134, !dbg !42
  %136 = bitcast float %135 to i32, !dbg !40
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !40
  %138 = bitcast i32 %137 to float, !dbg !40
  %139 = fadd float %135, %138, !dbg !42
  %140 = bitcast float %139 to i32, !dbg !40
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !40
  %142 = bitcast i32 %141 to float, !dbg !40
  %143 = fadd float %139, %142, !dbg !42
  %144 = bitcast float %143 to i32, !dbg !40
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !40
  %146 = bitcast i32 %145 to float, !dbg !40
  %147 = fadd float %143, %146, !dbg !42
  %148 = bitcast float %147 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %148, i1 %94) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %149 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %99, i1 %98) #5, !dbg !40
  %150 = bitcast i32 %149 to float, !dbg !40
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !40
  %152 = bitcast i32 %151 to float, !dbg !40
  %153 = fadd float %150, %152, !dbg !42
  %154 = bitcast float %153 to i32, !dbg !40
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !40
  %156 = bitcast i32 %155 to float, !dbg !40
  %157 = fadd float %153, %156, !dbg !42
  %158 = bitcast float %157 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %158, i1 %111) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %159 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %160 = fadd float %159, 0.000000e+00, !dbg !43
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 3.840000e+02) #5, !dbg !45
  %162 = fadd float %161, 0x3EE4F8B580000000, !dbg !46
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %163, 0, !dbg !47
  br i1 %.not.i, label %166, label %164, !dbg !47

164:                                              ; preds = %10
  %165 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %162), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

166:                                              ; preds = %10
  %167 = tail call float @llvm.nvvm.rsqrt.approx.f(float %162), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

__nv_rsqrtf.exit:                                 ; preds = %164, %166
  %.0.i = phi float [ %165, %164 ], [ %167, %166 ], !dbg !47
  %168 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %169 = bitcast i32 %168 to float, !dbg !24
  %170 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %171 = bitcast i32 %170 to float, !dbg !24
  %172 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %173 = bitcast i32 %172 to float, !dbg !24
  %174 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %175 = bitcast i32 %174 to float, !dbg !24
  %176 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %177 = bitcast i32 %176 to float, !dbg !22
  %178 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %179 = bitcast i32 %178 to float, !dbg !22
  %180 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %181 = bitcast i32 %180 to float, !dbg !22
  %182 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %183 = bitcast i32 %182 to float, !dbg !22
  %184 = fmul float %116, %.0.i, !dbg !48
  %185 = fmul float %117, %.0.i, !dbg !48
  %186 = fmul float %118, %.0.i, !dbg !48
  %187 = fmul float %119, %.0.i, !dbg !48
  %188 = fmul float %184, %183, !dbg !49
  %189 = fmul float %185, %181, !dbg !49
  %190 = fmul float %186, %179, !dbg !49
  %191 = fmul float %187, %177, !dbg !49
  %192 = fadd float %188, %175, !dbg !50
  %193 = fadd float %189, %173, !dbg !50
  %194 = fadd float %190, %171, !dbg !50
  %195 = fadd float %191, %169, !dbg !50
  %196 = fmul float %.0.i, 0x3F65555560000000, !dbg !51
  %197 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !52
  %198 = bitcast float %184 to i32, !dbg !53
  %199 = bitcast float %185 to i32, !dbg !53
  %200 = bitcast float %186 to i32, !dbg !53
  %201 = bitcast float %187 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %199, i32 %200, i32 %201, ptr addrspace(1) %197, i1 %17) #5, !dbg !53
  %202 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !54
  %203 = bitcast float %192 to i32, !dbg !55
  %204 = bitcast float %193 to i32, !dbg !55
  %205 = bitcast float %194 to i32, !dbg !55
  %206 = bitcast float %195 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %204, i32 %205, i32 %206, ptr addrspace(1) %202, i1 %17) #5, !dbg !55
  %207 = sext i32 %11 to i64, !dbg !56
  %208 = getelementptr float, ptr addrspace(1) %7, i64 %207, !dbg !56
  %urem = and i32 %12, 127, !dbg !57
  %209 = icmp eq i32 %urem, 0, !dbg !57
  %210 = bitcast float %196 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %208, i1 %209) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd7qxjr7aq64ukzmlzlktlspf5n2cnr3t45owvn5j2eu5nxyni3t.py", directory: "inductor_cache/d7")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_11", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 36, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 36, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 43, column: 59, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 43, column: 45, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 19, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !41)
!41 = !DILocation(line: 51, column: 59, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !41)
!43 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !44)
!44 = !DILocation(line: 51, column: 45, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 28, scope: !7)
!48 = !DILocation(line: 58, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 25, scope: !7)
!53 = !DILocation(line: 63, column: 46, scope: !7)
!54 = !DILocation(line: 64, column: 25, scope: !7)
!55 = !DILocation(line: 64, column: 46, scope: !7)
!56 = !DILocation(line: 65, column: 25, scope: !7)
!57 = !DILocation(line: 65, column: 37, scope: !7)
!58 = !DILocation(line: 65, column: 4, scope: !7)
