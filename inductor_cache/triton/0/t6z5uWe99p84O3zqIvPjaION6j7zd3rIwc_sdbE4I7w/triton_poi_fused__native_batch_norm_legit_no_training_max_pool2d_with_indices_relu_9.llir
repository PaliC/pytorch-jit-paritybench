; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 1364224, !dbg !14
  %11 = srem i32 %9, 64, !dbg !15
  %12 = sdiv i32 %9, 341056, !dbg !16
  %13 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !17
  %14 = shufflevector <2 x i32> %13, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %15 = sdiv <2 x i32> %14, <i32 64, i32 4672>, !dbg !17
  %16 = srem <2 x i32> %15, splat (i32 73), !dbg !18
  %17 = mul nsw <2 x i32> %16, <i32 128, i32 18816>, !dbg !19
  %18 = mul i32 %12, 1382976, !dbg !20
  %19 = add i32 %18, %11, !dbg !21
  %20 = extractelement <2 x i32> %17, i64 0, !dbg !22
  %21 = add i32 %19, %20, !dbg !23
  %22 = extractelement <2 x i32> %17, i64 1, !dbg !24
  %23 = add i32 %21, %22, !dbg !25
  %24 = sext i32 %23 to i64, !dbg !26
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !26
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %10) #1, !dbg !27
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !27
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !27
  %29 = bitcast i32 %27 to float, !dbg !27
  %30 = bitcast i32 %28 to float, !dbg !27
  %31 = add i32 %19, 64, !dbg !28
  %32 = add i32 %31, %20, !dbg !29
  %33 = add i32 %32, %22, !dbg !30
  %34 = sext i32 %33 to i64, !dbg !31
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !31
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %10) #1, !dbg !32
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !32
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !32
  %39 = bitcast i32 %37 to float, !dbg !32
  %40 = bitcast i32 %38 to float, !dbg !32
  %41 = add i32 %19, 128, !dbg !33
  %42 = add i32 %41, %20, !dbg !34
  %43 = add i32 %42, %22, !dbg !35
  %44 = sext i32 %43 to i64, !dbg !36
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !36
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %10) #1, !dbg !37
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !37
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !37
  %49 = bitcast i32 %47 to float, !dbg !37
  %50 = bitcast i32 %48 to float, !dbg !37
  %51 = add i32 %19, 9408, !dbg !38
  %52 = add i32 %51, %20, !dbg !39
  %53 = add i32 %52, %22, !dbg !40
  %54 = sext i32 %53 to i64, !dbg !41
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !41
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %10) #1, !dbg !42
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !42
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !42
  %59 = bitcast i32 %57 to float, !dbg !42
  %60 = bitcast i32 %58 to float, !dbg !42
  %61 = add i32 %19, 9472, !dbg !43
  %62 = add i32 %61, %20, !dbg !44
  %63 = add i32 %62, %22, !dbg !45
  %64 = sext i32 %63 to i64, !dbg !46
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !46
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %10) #1, !dbg !47
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !47
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !47
  %69 = bitcast i32 %67 to float, !dbg !47
  %70 = bitcast i32 %68 to float, !dbg !47
  %71 = add i32 %19, 9536, !dbg !48
  %72 = add i32 %71, %20, !dbg !49
  %73 = add i32 %72, %22, !dbg !50
  %74 = sext i32 %73 to i64, !dbg !51
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !51
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %10) #1, !dbg !52
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !52
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !52
  %79 = bitcast i32 %77 to float, !dbg !52
  %80 = bitcast i32 %78 to float, !dbg !52
  %81 = add i32 %19, 18816, !dbg !53
  %82 = add i32 %81, %20, !dbg !54
  %83 = add i32 %82, %22, !dbg !55
  %84 = sext i32 %83 to i64, !dbg !56
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !56
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %10) #1, !dbg !57
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !57
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !57
  %89 = bitcast i32 %87 to float, !dbg !57
  %90 = bitcast i32 %88 to float, !dbg !57
  %91 = add i32 %19, 18880, !dbg !58
  %92 = add i32 %91, %20, !dbg !59
  %93 = add i32 %92, %22, !dbg !60
  %94 = sext i32 %93 to i64, !dbg !61
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !61
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %95, i1 %10) #1, !dbg !62
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !62
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !62
  %99 = bitcast i32 %97 to float, !dbg !62
  %100 = bitcast i32 %98 to float, !dbg !62
  %101 = add i32 %19, 18944, !dbg !63
  %102 = add i32 %101, %20, !dbg !22
  %103 = add i32 %102, %22, !dbg !24
  %104 = sext i32 %103 to i64, !dbg !64
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !64
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %105, i1 %10) #1, !dbg !65
  %107 = extractvalue { i32, i32 } %106, 0, !dbg !65
  %108 = extractvalue { i32, i32 } %106, 1, !dbg !65
  %109 = bitcast i32 %107 to float, !dbg !65
  %110 = bitcast i32 %108 to float, !dbg !65
  %111 = fcmp ogt float %39, %29, !dbg !66
  %112 = fcmp ogt float %40, %30, !dbg !66
  %113 = fcmp uno float %39, 0.000000e+00, !dbg !70
  %114 = fcmp uno float %40, 0.000000e+00, !dbg !70
  %115 = or i1 %111, %113, !dbg !71
  %116 = or i1 %112, %114, !dbg !71
  %117 = select i1 %115, float %39, float %29, !dbg !72
  %118 = select i1 %116, float %40, float %30, !dbg !72
  %119 = fcmp olt float %117, %49, !dbg !73
  %120 = fcmp olt float %118, %50, !dbg !73
  %121 = fcmp uno float %49, 0.000000e+00, !dbg !75
  %122 = fcmp uno float %50, 0.000000e+00, !dbg !75
  %123 = or i1 %121, %119, !dbg !76
  %124 = or i1 %122, %120, !dbg !76
  %125 = select i1 %123, float %49, float %117, !dbg !77
  %126 = select i1 %124, float %50, float %118, !dbg !77
  %127 = fcmp olt float %125, %59, !dbg !78
  %128 = fcmp olt float %126, %60, !dbg !78
  %129 = fcmp uno float %59, 0.000000e+00, !dbg !80
  %130 = fcmp uno float %60, 0.000000e+00, !dbg !80
  %131 = or i1 %129, %127, !dbg !81
  %132 = or i1 %130, %128, !dbg !81
  %133 = select i1 %131, float %59, float %125, !dbg !82
  %134 = select i1 %132, float %60, float %126, !dbg !82
  %135 = fcmp olt float %133, %69, !dbg !83
  %136 = fcmp olt float %134, %70, !dbg !83
  %137 = fcmp uno float %69, 0.000000e+00, !dbg !85
  %138 = fcmp uno float %70, 0.000000e+00, !dbg !85
  %139 = or i1 %137, %135, !dbg !86
  %140 = or i1 %138, %136, !dbg !86
  %141 = select i1 %139, float %69, float %133, !dbg !87
  %142 = select i1 %140, float %70, float %134, !dbg !87
  %143 = fcmp olt float %141, %79, !dbg !88
  %144 = fcmp olt float %142, %80, !dbg !88
  %145 = fcmp uno float %79, 0.000000e+00, !dbg !90
  %146 = fcmp uno float %80, 0.000000e+00, !dbg !90
  %147 = or i1 %145, %143, !dbg !91
  %148 = or i1 %146, %144, !dbg !91
  %149 = select i1 %147, float %79, float %141, !dbg !92
  %150 = select i1 %148, float %80, float %142, !dbg !92
  %151 = fcmp olt float %149, %89, !dbg !93
  %152 = fcmp olt float %150, %90, !dbg !93
  %153 = fcmp uno float %89, 0.000000e+00, !dbg !95
  %154 = fcmp uno float %90, 0.000000e+00, !dbg !95
  %155 = or i1 %153, %151, !dbg !96
  %156 = or i1 %154, %152, !dbg !96
  %157 = select i1 %155, float %89, float %149, !dbg !97
  %158 = select i1 %156, float %90, float %150, !dbg !97
  %159 = fcmp olt float %157, %99, !dbg !98
  %160 = fcmp olt float %158, %100, !dbg !98
  %161 = fcmp uno float %99, 0.000000e+00, !dbg !100
  %162 = fcmp uno float %100, 0.000000e+00, !dbg !100
  %163 = or i1 %161, %159, !dbg !101
  %164 = or i1 %162, %160, !dbg !101
  %165 = select i1 %163, float %99, float %157, !dbg !102
  %166 = select i1 %164, float %100, float %158, !dbg !102
  %167 = fcmp olt float %165, %109, !dbg !103
  %168 = fcmp olt float %166, %110, !dbg !103
  %169 = fcmp uno float %109, 0.000000e+00, !dbg !105
  %170 = fcmp uno float %110, 0.000000e+00, !dbg !105
  %171 = or i1 %169, %167, !dbg !106
  %172 = or i1 %170, %168, !dbg !106
  %173 = sext i32 %9 to i64, !dbg !107
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !107
  %175 = bitcast float %165 to i32, !dbg !108
  %176 = select i1 %171, i32 %107, i32 %175, !dbg !109
  %177 = bitcast float %166 to i32, !dbg !108
  %178 = select i1 %172, i32 %108, i32 %177, !dbg !109
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %178, ptr addrspace(1) %174, i1 %10) #1, !dbg !108
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu7we7aygvlk5goiezb73lthjz2nfxwz5asdcxhxzu7o7pw3hw2m.py", directory: "inductor_cache/u7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 63, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 37, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 44, scope: !7)
!24 = !DILocation(line: 37, column: 64, scope: !7)
!25 = !DILocation(line: 29, column: 55, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 68, scope: !7)
!28 = !DILocation(line: 30, column: 40, scope: !7)
!29 = !DILocation(line: 30, column: 49, scope: !7)
!30 = !DILocation(line: 30, column: 60, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 73, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 31, column: 50, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 74, scope: !7)
!38 = !DILocation(line: 32, column: 42, scope: !7)
!39 = !DILocation(line: 32, column: 51, scope: !7)
!40 = !DILocation(line: 32, column: 62, scope: !7)
!41 = !DILocation(line: 32, column: 30, scope: !7)
!42 = !DILocation(line: 32, column: 75, scope: !7)
!43 = !DILocation(line: 33, column: 42, scope: !7)
!44 = !DILocation(line: 33, column: 51, scope: !7)
!45 = !DILocation(line: 33, column: 62, scope: !7)
!46 = !DILocation(line: 33, column: 30, scope: !7)
!47 = !DILocation(line: 33, column: 75, scope: !7)
!48 = !DILocation(line: 34, column: 42, scope: !7)
!49 = !DILocation(line: 34, column: 51, scope: !7)
!50 = !DILocation(line: 34, column: 62, scope: !7)
!51 = !DILocation(line: 34, column: 30, scope: !7)
!52 = !DILocation(line: 34, column: 75, scope: !7)
!53 = !DILocation(line: 35, column: 44, scope: !7)
!54 = !DILocation(line: 35, column: 53, scope: !7)
!55 = !DILocation(line: 35, column: 64, scope: !7)
!56 = !DILocation(line: 35, column: 31, scope: !7)
!57 = !DILocation(line: 35, column: 77, scope: !7)
!58 = !DILocation(line: 36, column: 44, scope: !7)
!59 = !DILocation(line: 36, column: 53, scope: !7)
!60 = !DILocation(line: 36, column: 64, scope: !7)
!61 = !DILocation(line: 36, column: 31, scope: !7)
!62 = !DILocation(line: 36, column: 77, scope: !7)
!63 = !DILocation(line: 37, column: 44, scope: !7)
!64 = !DILocation(line: 37, column: 31, scope: !7)
!65 = !DILocation(line: 37, column: 77, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 38, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !74)
!74 = !DILocation(line: 39, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !79)
!79 = !DILocation(line: 40, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !84)
!84 = !DILocation(line: 41, column: 40, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !89)
!89 = !DILocation(line: 42, column: 41, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !94)
!94 = !DILocation(line: 43, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !99)
!99 = !DILocation(line: 44, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !104)
!104 = !DILocation(line: 45, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !104)
!107 = !DILocation(line: 46, column: 25, scope: !7)
!108 = !DILocation(line: 46, column: 37, scope: !7)
!109 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !104)
!110 = !DILocation(line: 46, column: 4, scope: !7)
