; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !13
  %15 = or disjoint i32 %14, 128, !dbg !13
  %16 = icmp slt i32 %14, 196, !dbg !14
  %17 = icmp slt i32 %15, 196, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %19 = icmp slt i32 %18, 96, !dbg !16
  %20 = mul i32 %14, 96, !dbg !17
  %21 = mul i32 %15, 96, !dbg !17
  %22 = add i32 %20, %18, !dbg !18
  %23 = add i32 %18, %21, !dbg !18
  %24 = sext i32 %22 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = and i1 %19, %16, !dbg !20
  %29 = and i1 %17, %19, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %28) #3, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %29) #3, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %28) #3, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %29) #3, !dbg !23
  %36 = sext i32 %18 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #3, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %19) #3, !dbg !31
  %46 = fadd float %41, 0x3EE4F8B580000000, !dbg !32
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %47, 0, !dbg !33
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i = icmp eq i32 %48, 0, !dbg !33
  br i1 %.not.i, label %54, label %49, !dbg !33

49:                                               ; preds = %9
  br i1 %.not1.i, label %52, label %50, !dbg !33

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

54:                                               ; preds = %9
  br i1 %.not1.i, label %57, label %55, !dbg !33

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !33
  %59 = bitcast i32 %35 to float, !dbg !23
  %60 = bitcast i32 %38 to float, !dbg !25
  %61 = fsub float %59, %60, !dbg !34
  %62 = bitcast i32 %34 to float, !dbg !23
  %63 = fsub float %62, %60, !dbg !34
  %64 = bitcast i32 %45 to float, !dbg !31
  %65 = bitcast i32 %43 to float, !dbg !29
  %66 = bitcast i32 %31 to float, !dbg !21
  %67 = bitcast i32 %30 to float, !dbg !21
  %.frozen = freeze i32 %15, !dbg !35
  %68 = sdiv i32 %.frozen, 49, !dbg !35
  %.frozen1 = freeze i32 %14, !dbg !35
  %69 = sdiv i32 %.frozen1, 49, !dbg !35
  %70 = mul i32 %68, 49, !dbg !36
  %.decomposed = sub i32 %.frozen, %70, !dbg !36
  %71 = mul i32 %69, 49, !dbg !36
  %.decomposed2 = sub i32 %.frozen1, %71, !dbg !36
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %73 = fmul float %63, %72, !dbg !38
  %74 = fmul float %61, %72, !dbg !38
  %75 = fmul float %73, %65, !dbg !39
  %76 = fmul float %74, %65, !dbg !39
  %77 = fadd float %75, %64, !dbg !40
  %78 = fadd float %76, %64, !dbg !40
  %79 = fadd float %77, %67, !dbg !41
  %80 = fadd float %78, %66, !dbg !41
  %81 = mul i32 %18, 49, !dbg !42
  %82 = add i32 %.decomposed2, %81, !dbg !43
  %83 = mul i32 %69, 4704, !dbg !44
  %84 = mul i32 %68, 4704, !dbg !44
  %85 = add i32 %82, %83, !dbg !45
  %86 = add i32 %84, %.decomposed, !dbg !43
  %87 = add i32 %86, %81, !dbg !45
  %88 = sext i32 %85 to i64, !dbg !46
  %89 = getelementptr float, ptr addrspace(1) %6, i64 %88, !dbg !46
  %90 = sext i32 %87 to i64, !dbg !46
  %91 = getelementptr float, ptr addrspace(1) %6, i64 %90, !dbg !46
  %92 = bitcast float %79 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %89, i1 %28) #3, !dbg !47
  %93 = bitcast float %80 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %91, i1 %29) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxklqyirgid5ft55pdgi4crp6bulxvd5ibodz4yeudvxfeadxgav.py", directory: "inductor_cache/xk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 43, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 26, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 19, scope: !7)
!42 = !DILocation(line: 50, column: 33, scope: !7)
!43 = !DILocation(line: 50, column: 30, scope: !7)
!44 = !DILocation(line: 50, column: 43, scope: !7)
!45 = !DILocation(line: 50, column: 38, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 55, scope: !7)
!48 = !DILocation(line: 50, column: 4, scope: !7)
