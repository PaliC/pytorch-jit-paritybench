; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_max_pool2d_with_indices_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 256, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = or disjoint i32 %12, 128, !dbg !12
  %15 = or disjoint i32 %12, 192, !dbg !12
  %16 = shl i32 %9, 2, !dbg !12
  %17 = and i32 %16, 252, !dbg !12
  %18 = icmp samesign ugt i32 %12, 15, !dbg !13
  %19 = shl i32 %9, 1, !dbg !14
  %20 = and i32 %19, 30, !dbg !14
  %21 = add nsw i32 %20, -1, !dbg !15
  %22 = icmp ne i32 %20, 0, !dbg !16
  %23 = and i1 %18, %22, !dbg !17
  %24 = add nuw nsw i32 %20, -33, !dbg !18
  %25 = shl nuw nsw i32 %12, 2, !dbg !19
  %26 = and i32 %25, 192, !dbg !19
  %27 = shl nuw nsw i32 %13, 2, !dbg !19
  %28 = and i32 %27, 448, !dbg !19
  %29 = shl nuw nsw i32 %14, 2, !dbg !19
  %30 = and i32 %29, 704, !dbg !19
  %31 = shl nuw nsw i32 %15, 2, !dbg !19
  %32 = and i32 %31, 960, !dbg !19
  %33 = add nsw i32 %28, %24, !dbg !20
  %34 = add nsw i32 %30, %24, !dbg !20
  %35 = add nsw i32 %32, %24, !dbg !20
  %36 = shl i32 %7, 10, !dbg !21
  %37 = or disjoint i32 %36, %26, !dbg !20
  %38 = add i32 %37, %24, !dbg !22
  %39 = or disjoint i32 %36, %33, !dbg !22
  %40 = or disjoint i32 %36, %34, !dbg !22
  %41 = or disjoint i32 %36, %35, !dbg !22
  %42 = sext i32 %38 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !23
  %44 = sext i32 %39 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !23
  %46 = sext i32 %40 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !23
  %48 = sext i32 %41 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !23
  %50 = and i1 %23, %8, !dbg !24
  %51 = and i1 %22, %8, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %50, i32 -8388608, i1 %50) #3, !dbg !25
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %51, i32 -8388608, i1 %51) #3, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %51, i32 -8388608, i1 %51) #3, !dbg !25
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %51, i32 -8388608, i1 %51) #3, !dbg !25
  %56 = or i32 %19, -32, !dbg !26
  %57 = add nsw i32 %28, %56, !dbg !27
  %58 = add nsw i32 %30, %56, !dbg !27
  %59 = add nsw i32 %32, %56, !dbg !27
  %60 = add i32 %37, %56, !dbg !28
  %61 = or disjoint i32 %36, %57, !dbg !28
  %62 = or disjoint i32 %36, %58, !dbg !28
  %63 = or disjoint i32 %36, %59, !dbg !28
  %64 = sext i32 %60 to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !29
  %66 = sext i32 %61 to i64, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !29
  %68 = sext i32 %62 to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !29
  %70 = sext i32 %63 to i64, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !29
  %72 = and i1 %18, %8, !dbg !30
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %72, i32 -8388608, i1 %72) #3, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %8, i32 -8388608, i1 %8) #3, !dbg !31
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %8, i32 -8388608, i1 %8) #3, !dbg !31
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %8, i32 -8388608, i1 %8) #3, !dbg !31
  %77 = or i32 %19, -31, !dbg !32
  %78 = add nsw i32 %28, %77, !dbg !33
  %79 = add nsw i32 %30, %77, !dbg !33
  %80 = add nsw i32 %32, %77, !dbg !33
  %81 = add i32 %37, %77, !dbg !34
  %82 = or disjoint i32 %36, %78, !dbg !34
  %83 = or disjoint i32 %36, %79, !dbg !34
  %84 = or disjoint i32 %36, %80, !dbg !34
  %85 = sext i32 %81 to i64, !dbg !35
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !35
  %87 = sext i32 %82 to i64, !dbg !35
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !35
  %89 = sext i32 %83 to i64, !dbg !35
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !35
  %91 = sext i32 %84 to i64, !dbg !35
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !35
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %72, i32 -8388608, i1 %72) #3, !dbg !36
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %8, i32 -8388608, i1 %8) #3, !dbg !36
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %8, i32 -8388608, i1 %8) #3, !dbg !36
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %8, i32 -8388608, i1 %8) #3, !dbg !36
  %97 = add i32 %37, %21, !dbg !37
  %98 = add i32 %36, %21, !dbg !38
  %99 = add i32 %98, %28, !dbg !37
  %100 = add i32 %98, %30, !dbg !37
  %101 = add i32 %98, %32, !dbg !37
  %102 = sext i32 %97 to i64, !dbg !39
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !39
  %104 = sext i32 %99 to i64, !dbg !39
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !39
  %106 = sext i32 %100 to i64, !dbg !39
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !39
  %108 = sext i32 %101 to i64, !dbg !39
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !39
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %51, i32 -8388608, i1 %51) #3, !dbg !40
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %51, i32 -8388608, i1 %51) #3, !dbg !40
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %51, i32 -8388608, i1 %51) #3, !dbg !40
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %51, i32 -8388608, i1 %51) #3, !dbg !40
  %114 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !25
  %115 = insertelement <2 x i32> %114, i32 %53, i64 1, !dbg !25
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !25
  %117 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !31
  %118 = insertelement <2 x i32> %117, i32 %74, i64 1, !dbg !31
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !31
  %120 = fcmp ogt <2 x float> %119, %116, !dbg !41
  %121 = fcmp uno <2 x float> %119, zeroinitializer, !dbg !45
  %122 = or <2 x i1> %120, %121, !dbg !46
  %.v = select <2 x i1> %122, <2 x i32> %118, <2 x i32> %115, !dbg !47
  %123 = bitcast <2 x i32> %.v to <2 x float>, !dbg !47
  %124 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !36
  %125 = insertelement <2 x i32> %124, i32 %94, i64 1, !dbg !36
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !36
  %127 = fcmp olt <2 x float> %123, %126, !dbg !48
  %128 = fcmp uno <2 x float> %126, zeroinitializer, !dbg !50
  %129 = or <2 x i1> %127, %128, !dbg !51
  %.v8 = select <2 x i1> %129, <2 x i32> %125, <2 x i32> %.v, !dbg !52
  %130 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !52
  %131 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !40
  %132 = insertelement <2 x i32> %131, i32 %111, i64 1, !dbg !40
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !40
  %134 = fcmp olt <2 x float> %130, %133, !dbg !53
  %135 = fcmp uno <2 x float> %133, zeroinitializer, !dbg !55
  %136 = or <2 x i1> %134, %135, !dbg !56
  %.v9 = select <2 x i1> %136, <2 x i32> %132, <2 x i32> %.v8, !dbg !57
  %137 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !57
  %138 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !25
  %139 = insertelement <2 x i32> %138, i32 %55, i64 1, !dbg !25
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !25
  %141 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !31
  %142 = insertelement <2 x i32> %141, i32 %76, i64 1, !dbg !31
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !31
  %144 = fcmp ogt <2 x float> %143, %140, !dbg !41
  %145 = fcmp uno <2 x float> %143, zeroinitializer, !dbg !45
  %146 = or <2 x i1> %144, %145, !dbg !46
  %.v10 = select <2 x i1> %146, <2 x i32> %142, <2 x i32> %139, !dbg !47
  %147 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !47
  %148 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !36
  %149 = insertelement <2 x i32> %148, i32 %96, i64 1, !dbg !36
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !36
  %151 = fcmp olt <2 x float> %147, %150, !dbg !48
  %152 = fcmp uno <2 x float> %150, zeroinitializer, !dbg !50
  %153 = or <2 x i1> %151, %152, !dbg !51
  %.v11 = select <2 x i1> %153, <2 x i32> %149, <2 x i32> %.v10, !dbg !52
  %154 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !52
  %155 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !40
  %156 = insertelement <2 x i32> %155, i32 %113, i64 1, !dbg !40
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !40
  %158 = fcmp olt <2 x float> %154, %157, !dbg !53
  %159 = fcmp uno <2 x float> %157, zeroinitializer, !dbg !55
  %160 = or <2 x i1> %158, %159, !dbg !56
  %.v12 = select <2 x i1> %160, <2 x i32> %156, <2 x i32> %.v11, !dbg !57
  %161 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !57
  %162 = or disjoint i32 %36, %20, !dbg !58
  %163 = or disjoint i32 %162, %26, !dbg !59
  %164 = or disjoint i32 %162, %28, !dbg !59
  %165 = or disjoint i32 %162, %30, !dbg !59
  %166 = or disjoint i32 %162, %32, !dbg !59
  %167 = sext i32 %163 to i64, !dbg !60
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !60
  %169 = sext i32 %164 to i64, !dbg !60
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !60
  %171 = sext i32 %165 to i64, !dbg !60
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !60
  %173 = sext i32 %166 to i64, !dbg !60
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !60
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %8, i32 -8388608, i1 %8) #3, !dbg !61
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %8, i32 -8388608, i1 %8) #3, !dbg !61
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %8, i32 -8388608, i1 %8) #3, !dbg !61
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %8, i32 -8388608, i1 %8) #3, !dbg !61
  %179 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !61
  %180 = insertelement <2 x i32> %179, i32 %176, i64 1, !dbg !61
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !61
  %182 = fcmp olt <2 x float> %137, %181, !dbg !62
  %183 = fcmp uno <2 x float> %181, zeroinitializer, !dbg !64
  %184 = or <2 x i1> %182, %183, !dbg !65
  %185 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !61
  %186 = insertelement <2 x i32> %185, i32 %178, i64 1, !dbg !61
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !61
  %188 = fcmp olt <2 x float> %161, %187, !dbg !62
  %189 = fcmp uno <2 x float> %187, zeroinitializer, !dbg !64
  %190 = or <2 x i1> %188, %189, !dbg !65
  %191 = or disjoint i32 %163, 1, !dbg !66
  %192 = or disjoint i32 %164, 1, !dbg !66
  %193 = or disjoint i32 %165, 1, !dbg !66
  %194 = or disjoint i32 %166, 1, !dbg !66
  %195 = sext i32 %191 to i64, !dbg !67
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !67
  %197 = sext i32 %192 to i64, !dbg !67
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !67
  %199 = sext i32 %193 to i64, !dbg !67
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %199, !dbg !67
  %201 = sext i32 %194 to i64, !dbg !67
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !67
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %8, i32 -8388608, i1 %8) #3, !dbg !68
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %8, i32 -8388608, i1 %8) #3, !dbg !68
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %8, i32 -8388608, i1 %8) #3, !dbg !68
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %8, i32 -8388608, i1 %8) #3, !dbg !68
  %207 = add nuw nsw i32 %20, 31, !dbg !69
  %208 = or disjoint i32 %36, %207, !dbg !70
  %209 = or disjoint i32 %208, %26, !dbg !71
  %210 = or disjoint i32 %208, %28, !dbg !71
  %211 = or disjoint i32 %208, %30, !dbg !71
  %212 = or disjoint i32 %208, %32, !dbg !71
  %213 = sext i32 %209 to i64, !dbg !72
  %214 = getelementptr float, ptr addrspace(1) %1, i64 %213, !dbg !72
  %215 = sext i32 %210 to i64, !dbg !72
  %216 = getelementptr float, ptr addrspace(1) %1, i64 %215, !dbg !72
  %217 = sext i32 %211 to i64, !dbg !72
  %218 = getelementptr float, ptr addrspace(1) %1, i64 %217, !dbg !72
  %219 = sext i32 %212 to i64, !dbg !72
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !72
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %51, i32 -8388608, i1 %51) #3, !dbg !73
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %51, i32 -8388608, i1 %51) #3, !dbg !73
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %51, i32 -8388608, i1 %51) #3, !dbg !73
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %51, i32 -8388608, i1 %51) #3, !dbg !73
  %225 = or disjoint i32 %163, 32, !dbg !74
  %226 = or disjoint i32 %164, 32, !dbg !74
  %227 = or disjoint i32 %165, 32, !dbg !74
  %228 = or disjoint i32 %166, 32, !dbg !74
  %229 = sext i32 %225 to i64, !dbg !75
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !75
  %231 = sext i32 %226 to i64, !dbg !75
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !75
  %233 = sext i32 %227 to i64, !dbg !75
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !75
  %235 = sext i32 %228 to i64, !dbg !75
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !75
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %8, i32 -8388608, i1 %8) #3, !dbg !76
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %8, i32 -8388608, i1 %8) #3, !dbg !76
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %8, i32 -8388608, i1 %8) #3, !dbg !76
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %8, i32 -8388608, i1 %8) #3, !dbg !76
  %241 = or disjoint i32 %163, 33, !dbg !77
  %242 = or disjoint i32 %164, 33, !dbg !77
  %243 = or disjoint i32 %165, 33, !dbg !77
  %244 = or disjoint i32 %166, 33, !dbg !77
  %245 = sext i32 %241 to i64, !dbg !78
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !78
  %247 = sext i32 %242 to i64, !dbg !78
  %248 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !78
  %249 = sext i32 %243 to i64, !dbg !78
  %250 = getelementptr float, ptr addrspace(1) %1, i64 %249, !dbg !78
  %251 = sext i32 %244 to i64, !dbg !78
  %252 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !78
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %8, i32 -8388608, i1 %8) #3, !dbg !79
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %8, i32 -8388608, i1 %8) #3, !dbg !79
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %8, i32 -8388608, i1 %8) #3, !dbg !79
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %8, i32 -8388608, i1 %8) #3, !dbg !79
  %257 = extractelement <2 x i1> %120, i64 0, !dbg !80
  %258 = zext i1 %257 to i8, !dbg !80
  %259 = extractelement <2 x i1> %120, i64 1, !dbg !80
  %260 = zext i1 %259 to i8, !dbg !80
  %261 = extractelement <2 x i1> %144, i64 0, !dbg !80
  %262 = zext i1 %261 to i8, !dbg !80
  %263 = extractelement <2 x i1> %144, i64 1, !dbg !80
  %264 = zext i1 %263 to i8, !dbg !80
  %265 = extractelement <2 x i1> %127, i64 0, !dbg !81
  %266 = select i1 %265, i8 2, i8 %258, !dbg !81
  %267 = extractelement <2 x i1> %127, i64 1, !dbg !81
  %268 = select i1 %267, i8 2, i8 %260, !dbg !81
  %269 = extractelement <2 x i1> %151, i64 0, !dbg !81
  %270 = select i1 %269, i8 2, i8 %262, !dbg !81
  %271 = extractelement <2 x i1> %151, i64 1, !dbg !81
  %272 = select i1 %271, i8 2, i8 %264, !dbg !81
  %273 = extractelement <2 x i1> %134, i64 0, !dbg !82
  %274 = select i1 %273, i8 3, i8 %266, !dbg !82
  %275 = extractelement <2 x i1> %134, i64 1, !dbg !82
  %276 = select i1 %275, i8 3, i8 %268, !dbg !82
  %277 = extractelement <2 x i1> %158, i64 0, !dbg !82
  %278 = select i1 %277, i8 3, i8 %270, !dbg !82
  %279 = extractelement <2 x i1> %158, i64 1, !dbg !82
  %280 = select i1 %279, i8 3, i8 %272, !dbg !82
  %281 = extractelement <2 x i1> %182, i64 0, !dbg !83
  %282 = select i1 %281, i8 4, i8 %274, !dbg !83
  %283 = extractelement <2 x i1> %182, i64 1, !dbg !83
  %284 = select i1 %283, i8 4, i8 %276, !dbg !83
  %285 = extractelement <2 x i1> %188, i64 0, !dbg !83
  %286 = select i1 %285, i8 4, i8 %278, !dbg !83
  %287 = extractelement <2 x i1> %188, i64 1, !dbg !83
  %288 = select i1 %287, i8 4, i8 %280, !dbg !83
  %.v13 = select <2 x i1> %184, <2 x i32> %180, <2 x i32> %.v9, !dbg !84
  %289 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !84
  %290 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !68
  %291 = insertelement <2 x i32> %290, i32 %204, i64 1, !dbg !68
  %292 = bitcast <2 x i32> %291 to <2 x float>, !dbg !68
  %293 = fcmp olt <2 x float> %289, %292, !dbg !85
  %294 = fcmp uno <2 x float> %292, zeroinitializer, !dbg !87
  %295 = or <2 x i1> %293, %294, !dbg !88
  %.v14 = select <2 x i1> %295, <2 x i32> %291, <2 x i32> %.v13, !dbg !89
  %296 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !89
  %297 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !73
  %298 = insertelement <2 x i32> %297, i32 %222, i64 1, !dbg !73
  %299 = bitcast <2 x i32> %298 to <2 x float>, !dbg !73
  %300 = fcmp olt <2 x float> %296, %299, !dbg !90
  %301 = fcmp uno <2 x float> %299, zeroinitializer, !dbg !92
  %302 = or <2 x i1> %300, %301, !dbg !93
  %.v15 = select <2 x i1> %302, <2 x i32> %298, <2 x i32> %.v14, !dbg !94
  %303 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !94
  %304 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !76
  %305 = insertelement <2 x i32> %304, i32 %238, i64 1, !dbg !76
  %306 = bitcast <2 x i32> %305 to <2 x float>, !dbg !76
  %307 = fcmp olt <2 x float> %303, %306, !dbg !95
  %308 = fcmp uno <2 x float> %306, zeroinitializer, !dbg !97
  %309 = or <2 x i1> %307, %308, !dbg !98
  %.v16 = select <2 x i1> %309, <2 x i32> %305, <2 x i32> %.v15, !dbg !99
  %310 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !99
  %311 = insertelement <2 x i32> poison, i32 %253, i64 0, !dbg !79
  %312 = insertelement <2 x i32> %311, i32 %254, i64 1, !dbg !79
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !79
  %314 = fcmp olt <2 x float> %310, %313, !dbg !100
  %315 = fcmp uno <2 x float> %313, zeroinitializer, !dbg !102
  %316 = or <2 x i1> %314, %315, !dbg !103
  %.v17 = select <2 x i1> %316, <2 x i32> %312, <2 x i32> %.v16, !dbg !104
  %317 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !104
  %318 = extractelement <2 x i1> %293, i64 0, !dbg !105
  %319 = select i1 %318, i8 5, i8 %282, !dbg !105
  %320 = extractelement <2 x i1> %293, i64 1, !dbg !105
  %321 = select i1 %320, i8 5, i8 %284, !dbg !105
  %322 = extractelement <2 x i1> %300, i64 0, !dbg !106
  %323 = select i1 %322, i8 6, i8 %319, !dbg !106
  %324 = extractelement <2 x i1> %300, i64 1, !dbg !106
  %325 = select i1 %324, i8 6, i8 %321, !dbg !106
  %326 = extractelement <2 x i1> %307, i64 0, !dbg !107
  %327 = select i1 %326, i8 7, i8 %323, !dbg !107
  %328 = extractelement <2 x i1> %307, i64 1, !dbg !107
  %329 = select i1 %328, i8 7, i8 %325, !dbg !107
  %330 = extractelement <2 x i1> %314, i64 0, !dbg !108
  %331 = select i1 %330, i8 8, i8 %327, !dbg !108
  %332 = extractelement <2 x i1> %314, i64 1, !dbg !108
  %333 = select i1 %332, i8 8, i8 %329, !dbg !108
  %334 = fadd <2 x float> %317, zeroinitializer, !dbg !109
  %.v18 = select <2 x i1> %190, <2 x i32> %186, <2 x i32> %.v12, !dbg !84
  %335 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !84
  %336 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !68
  %337 = insertelement <2 x i32> %336, i32 %206, i64 1, !dbg !68
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !68
  %339 = fcmp olt <2 x float> %335, %338, !dbg !85
  %340 = fcmp uno <2 x float> %338, zeroinitializer, !dbg !87
  %341 = or <2 x i1> %339, %340, !dbg !88
  %.v19 = select <2 x i1> %341, <2 x i32> %337, <2 x i32> %.v18, !dbg !89
  %342 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !89
  %343 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !73
  %344 = insertelement <2 x i32> %343, i32 %224, i64 1, !dbg !73
  %345 = bitcast <2 x i32> %344 to <2 x float>, !dbg !73
  %346 = fcmp olt <2 x float> %342, %345, !dbg !90
  %347 = fcmp uno <2 x float> %345, zeroinitializer, !dbg !92
  %348 = or <2 x i1> %346, %347, !dbg !93
  %.v20 = select <2 x i1> %348, <2 x i32> %344, <2 x i32> %.v19, !dbg !94
  %349 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !94
  %350 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !76
  %351 = insertelement <2 x i32> %350, i32 %240, i64 1, !dbg !76
  %352 = bitcast <2 x i32> %351 to <2 x float>, !dbg !76
  %353 = fcmp olt <2 x float> %349, %352, !dbg !95
  %354 = fcmp uno <2 x float> %352, zeroinitializer, !dbg !97
  %355 = or <2 x i1> %353, %354, !dbg !98
  %.v21 = select <2 x i1> %355, <2 x i32> %351, <2 x i32> %.v20, !dbg !99
  %356 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !99
  %357 = insertelement <2 x i32> poison, i32 %255, i64 0, !dbg !79
  %358 = insertelement <2 x i32> %357, i32 %256, i64 1, !dbg !79
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !79
  %360 = fcmp olt <2 x float> %356, %359, !dbg !100
  %361 = fcmp uno <2 x float> %359, zeroinitializer, !dbg !102
  %362 = or <2 x i1> %360, %361, !dbg !103
  %.v22 = select <2 x i1> %362, <2 x i32> %358, <2 x i32> %.v21, !dbg !104
  %363 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !104
  %364 = extractelement <2 x i1> %339, i64 0, !dbg !105
  %365 = select i1 %364, i8 5, i8 %286, !dbg !105
  %366 = extractelement <2 x i1> %339, i64 1, !dbg !105
  %367 = select i1 %366, i8 5, i8 %288, !dbg !105
  %368 = extractelement <2 x i1> %346, i64 0, !dbg !106
  %369 = select i1 %368, i8 6, i8 %365, !dbg !106
  %370 = extractelement <2 x i1> %346, i64 1, !dbg !106
  %371 = select i1 %370, i8 6, i8 %367, !dbg !106
  %372 = extractelement <2 x i1> %353, i64 0, !dbg !107
  %373 = select i1 %372, i8 7, i8 %369, !dbg !107
  %374 = extractelement <2 x i1> %353, i64 1, !dbg !107
  %375 = select i1 %374, i8 7, i8 %371, !dbg !107
  %376 = extractelement <2 x i1> %360, i64 0, !dbg !108
  %377 = select i1 %376, i8 8, i8 %373, !dbg !108
  %378 = extractelement <2 x i1> %360, i64 1, !dbg !108
  %379 = select i1 %378, i8 8, i8 %375, !dbg !108
  %380 = fadd <2 x float> %363, zeroinitializer, !dbg !109
  %381 = shl i32 %7, 8, !dbg !110
  %382 = or disjoint i32 %381, %17, !dbg !111
  %383 = sext i32 %382 to i64, !dbg !112
  %384 = getelementptr float, ptr addrspace(1) %2, i64 %383, !dbg !112
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !113
  %386 = extractelement <2 x float> %317, i64 0, !dbg !113
  %387 = bitcast float %386 to <1 x i32>, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %387, i1 true) #3, !dbg !113
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !113
  %389 = extractelement <2 x float> %317, i64 1, !dbg !113
  %390 = bitcast float %389 to <1 x i32>, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %390, i1 true) #3, !dbg !113
  %391 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !113
  %392 = extractelement <2 x float> %363, i64 0, !dbg !113
  %393 = bitcast float %392 to <1 x i32>, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %393, i1 true) #3, !dbg !113
  %394 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !113
  %395 = extractelement <2 x float> %363, i64 1, !dbg !113
  %396 = bitcast float %395 to <1 x i32>, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %394, <1 x i32> %396, i1 true) #3, !dbg !113
  tail call void @llvm.nvvm.barrier0(), !dbg !113
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !113
  %.extract = load i32, ptr addrspace(3) %397, align 16, !dbg !113
  %398 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 4, !dbg !113
  %.extract4 = load i32, ptr addrspace(3) %398, align 4, !dbg !113
  %399 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 8, !dbg !113
  %.extract5 = load i32, ptr addrspace(3) %399, align 8, !dbg !113
  %400 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 12, !dbg !113
  %.extract6 = load i32, ptr addrspace(3) %400, align 4, !dbg !113
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %384, i1 %8) #3, !dbg !113
  %401 = getelementptr i8, ptr addrspace(1) %3, i64 %383, !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %402 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %12, !dbg !115
  %403 = insertelement <1 x i8> poison, i8 %331, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %402, <1 x i8> %403, i1 true) #3, !dbg !115
  %404 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !115
  %405 = insertelement <1 x i8> poison, i8 %333, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %404, <1 x i8> %405, i1 true) #3, !dbg !115
  %406 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %14, !dbg !115
  %407 = insertelement <1 x i8> poison, i8 %377, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %406, <1 x i8> %407, i1 true) #3, !dbg !115
  %408 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !115
  %409 = insertelement <1 x i8> poison, i8 %379, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %408, <1 x i8> %409, i1 true) #3, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %410 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %17, !dbg !115
  %411 = load i32, ptr addrspace(3) %410, align 4, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %411, ptr addrspace(1) %401, i1 %8) #3, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %shift = shufflevector <2 x float> %334, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !120
  %412 = fadd <2 x float> %334, %shift, !dbg !120
  %413 = fadd <2 x float> %412, %380, !dbg !120
  %shift7 = shufflevector <2 x float> %380, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !120
  %414 = fadd <2 x float> %413, %shift7, !dbg !120
  %415 = extractelement <2 x float> %414, i64 0, !dbg !120
  %416 = select i1 %8, float %415, float 0.000000e+00, !dbg !120
  %417 = bitcast float %416 to i32, !dbg !116
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 16, i32 31), !dbg !116
  %419 = bitcast i32 %418 to float, !dbg !116
  %420 = fadd float %416, %419, !dbg !120
  %421 = bitcast float %420 to i32, !dbg !116
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 8, i32 31), !dbg !116
  %423 = bitcast i32 %422 to float, !dbg !116
  %424 = fadd float %420, %423, !dbg !120
  %425 = bitcast float %424 to i32, !dbg !116
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 4, i32 31), !dbg !116
  %427 = bitcast i32 %426 to float, !dbg !116
  %428 = fadd float %424, %427, !dbg !120
  %429 = bitcast float %428 to i32, !dbg !116
  %430 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 2, i32 31), !dbg !116
  %431 = bitcast i32 %430 to float, !dbg !116
  %432 = fadd float %428, %431, !dbg !120
  %433 = bitcast float %432 to i32, !dbg !116
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 1, i32 31), !dbg !116
  %435 = bitcast i32 %434 to float, !dbg !116
  %436 = fadd float %432, %435, !dbg !120
  %437 = icmp eq i32 %10, 0, !dbg !116
  %438 = and i32 %11, 1, !dbg !116
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %438, !dbg !116
  %440 = bitcast float %436 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %440, i1 %437) #3, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %441 = icmp slt i32 %9, 2, !dbg !116
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !116
  %443 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %442, i1 %441) #3, !dbg !116
  %444 = bitcast i32 %443 to float, !dbg !116
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !116
  %446 = bitcast i32 %445 to float, !dbg !116
  %447 = fadd float %444, %446, !dbg !120
  %448 = and i32 %9, 1, !dbg !116
  %449 = icmp eq i32 %448, 0, !dbg !116
  %450 = and i1 %441, %449, !dbg !116
  %451 = bitcast float %447 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %451, i1 %450) #3, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %452 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !116
  %453 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %452, float 2.560000e+02) #3, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %454 = sext i32 %7 to i64, !dbg !124
  %455 = getelementptr float, ptr addrspace(1) %0, i64 %454, !dbg !124
  %456 = icmp eq i32 %12, 0, !dbg !125
  %457 = bitcast float %453 to i32, !dbg !125
  %458 = and i1 %456, %8, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %457, ptr addrspace(1) %455, i1 %458) #3, !dbg !125
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_max_pool2d_with_indices_mean_1", linkageName: "triton_red_fused_max_pool2d_with_indices_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 36, column: 23, scope: !7)
!14 = !DILocation(line: 40, column: 24, scope: !7)
!15 = !DILocation(line: 40, column: 22, scope: !7)
!16 = !DILocation(line: 41, column: 23, scope: !7)
!17 = !DILocation(line: 44, column: 23, scope: !7)
!18 = !DILocation(line: 45, column: 43, scope: !7)
!19 = !DILocation(line: 45, column: 53, scope: !7)
!20 = !DILocation(line: 45, column: 50, scope: !7)
!21 = !DILocation(line: 45, column: 63, scope: !7)
!22 = !DILocation(line: 45, column: 58, scope: !7)
!23 = !DILocation(line: 45, column: 35, scope: !7)
!24 = !DILocation(line: 45, column: 84, scope: !7)
!25 = !DILocation(line: 45, column: 68, scope: !7)
!26 = !DILocation(line: 51, column: 43, scope: !7)
!27 = !DILocation(line: 51, column: 50, scope: !7)
!28 = !DILocation(line: 51, column: 58, scope: !7)
!29 = !DILocation(line: 51, column: 35, scope: !7)
!30 = !DILocation(line: 51, column: 84, scope: !7)
!31 = !DILocation(line: 51, column: 68, scope: !7)
!32 = !DILocation(line: 58, column: 43, scope: !7)
!33 = !DILocation(line: 58, column: 50, scope: !7)
!34 = !DILocation(line: 58, column: 58, scope: !7)
!35 = !DILocation(line: 58, column: 35, scope: !7)
!36 = !DILocation(line: 58, column: 68, scope: !7)
!37 = !DILocation(line: 65, column: 57, scope: !7)
!38 = !DILocation(line: 65, column: 49, scope: !7)
!39 = !DILocation(line: 65, column: 35, scope: !7)
!40 = !DILocation(line: 65, column: 67, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 52, column: 46, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !49)
!49 = !DILocation(line: 59, column: 46, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !54)
!54 = !DILocation(line: 66, column: 46, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !54)
!58 = !DILocation(line: 68, column: 42, scope: !7)
!59 = !DILocation(line: 68, column: 50, scope: !7)
!60 = !DILocation(line: 68, column: 35, scope: !7)
!61 = !DILocation(line: 68, column: 60, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !63)
!63 = !DILocation(line: 69, column: 46, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !63)
!66 = !DILocation(line: 71, column: 54, scope: !7)
!67 = !DILocation(line: 71, column: 35, scope: !7)
!68 = !DILocation(line: 71, column: 64, scope: !7)
!69 = !DILocation(line: 78, column: 40, scope: !7)
!70 = !DILocation(line: 78, column: 47, scope: !7)
!71 = !DILocation(line: 78, column: 55, scope: !7)
!72 = !DILocation(line: 78, column: 35, scope: !7)
!73 = !DILocation(line: 78, column: 65, scope: !7)
!74 = !DILocation(line: 81, column: 55, scope: !7)
!75 = !DILocation(line: 81, column: 35, scope: !7)
!76 = !DILocation(line: 81, column: 65, scope: !7)
!77 = !DILocation(line: 84, column: 55, scope: !7)
!78 = !DILocation(line: 84, column: 35, scope: !7)
!79 = !DILocation(line: 84, column: 65, scope: !7)
!80 = !DILocation(line: 89, column: 39, scope: !7)
!81 = !DILocation(line: 92, column: 39, scope: !7)
!82 = !DILocation(line: 95, column: 39, scope: !7)
!83 = !DILocation(line: 98, column: 39, scope: !7)
!84 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !63)
!85 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !86)
!86 = !DILocation(line: 72, column: 46, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !91)
!91 = !DILocation(line: 79, column: 46, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !96)
!96 = !DILocation(line: 82, column: 46, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !101)
!101 = !DILocation(line: 85, column: 46, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !101)
!105 = !DILocation(line: 101, column: 39, scope: !7)
!106 = !DILocation(line: 104, column: 39, scope: !7)
!107 = !DILocation(line: 107, column: 39, scope: !7)
!108 = !DILocation(line: 110, column: 39, scope: !7)
!109 = !DILocation(line: 112, column: 25, scope: !7)
!110 = !DILocation(line: 114, column: 38, scope: !7)
!111 = !DILocation(line: 114, column: 34, scope: !7)
!112 = !DILocation(line: 114, column: 29, scope: !7)
!113 = !DILocation(line: 114, column: 50, scope: !7)
!114 = !DILocation(line: 115, column: 29, scope: !7)
!115 = !DILocation(line: 115, column: 50, scope: !7)
!116 = !DILocation(line: 267, column: 36, scope: !117, inlinedAt: !119)
!117 = distinct !DILexicalBlockFile(scope: !7, file: !118, discriminator: 0)
!118 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!119 = !DILocation(line: 116, column: 27, scope: !7)
!120 = !DILocation(line: 256, column: 15, scope: !121, inlinedAt: !119)
!121 = distinct !DILexicalBlockFile(scope: !117, file: !118, discriminator: 0)
!122 = !DILocation(line: 118, column: 20, scope: !7)
!123 = !DILocation(line: 119, column: 4, scope: !7)
!124 = !DILocation(line: 120, column: 28, scope: !7)
!125 = !DILocation(line: 120, column: 40, scope: !7)
!126 = !DILocation(line: 120, column: 4, scope: !7)
