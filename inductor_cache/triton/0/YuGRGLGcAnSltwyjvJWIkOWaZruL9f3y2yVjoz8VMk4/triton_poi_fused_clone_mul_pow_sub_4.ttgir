#blocked = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_clone_mul_pow_sub_4(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":19:0), %arg5: i32 loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<4x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<true> : tensor<1x64xi1, #blocked1> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<1x64xi32, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<4x1xi32, #blocked2> loc(#loc1)
    %cst_7 = arith.constant dense<4> : tensor<4x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<16> : tensor<1x64xi32, #blocked2> loc(#loc1)
    %cst_9 = arith.constant dense<16> : tensor<4x1xi32, #blocked2> loc(#loc1)
    %cst_10 = arith.constant dense<4> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<4> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<1x64xi32, #blocked2> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<1x64xi32, #blocked> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<1x64xi32, #blocked2> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<1x64xi32, #blocked> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<1x64xi32, #blocked1> loc(#loc5)
    %14 = arith.cmpi slt, %11, %cst_4 : tensor<1x64xi32, #blocked2> loc(#loc6)
    %15 = arith.cmpi slt, %12, %cst_5 : tensor<1x64xi32, #blocked> loc(#loc6)
    %16 = arith.cmpi slt, %13, %cst_3 : tensor<1x64xi32, #blocked1> loc(#loc6)
    %17 = tt.get_program_id x : i32 loc(#loc7)
    %18 = arith.muli %17, %c4_i32 : i32 loc(#loc8)
    %19 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc9)
    %20 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<4x1xi32, #blocked2> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<4x1xi32, #blocked> loc(#loc9)
    %23 = tt.splat %18 : i32 -> tensor<4x1xi32, #blocked2> loc(#loc10)
    %24 = tt.splat %18 : i32 -> tensor<4x1xi32, #blocked> loc(#loc10)
    %25 = arith.addi %23, %21 : tensor<4x1xi32, #blocked2> loc(#loc10)
    %26 = arith.addi %24, %22 : tensor<4x1xi32, #blocked> loc(#loc10)
    %27 = arith.cmpi slt, %25, %cst_6 : tensor<4x1xi32, #blocked2> loc(#loc11)
    %28 = arith.cmpi slt, %26, %cst_7 : tensor<4x1xi32, #blocked> loc(#loc11)
    %29 = arith.remsi %11, %cst_8 : tensor<1x64xi32, #blocked2> loc(#loc12)
    %30 = arith.divsi %11, %cst_8 : tensor<1x64xi32, #blocked2> loc(#loc13)
    %31 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc14)
    %32 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>, #blocked1> loc(#loc14)
    %33 = tt.addptr %31, %12 : tensor<1x64x!tt.ptr<i64>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc14)
    %34 = tt.addptr %32, %13 : tensor<1x64x!tt.ptr<i64>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc14)
    %35 = tt.load %33, %15 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc15)
    %36 = tt.load %34, %16 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>, #blocked1> loc(#loc15)
    %37 = arith.muli %25, %cst_9 : tensor<4x1xi32, #blocked2> loc(#loc16)
    %38 = tt.broadcast %29 : tensor<1x64xi32, #blocked2> -> tensor<4x64xi32, #blocked2> loc(#loc17)
    %39 = tt.broadcast %37 : tensor<4x1xi32, #blocked2> -> tensor<4x64xi32, #blocked2> loc(#loc17)
    %40 = arith.addi %38, %39 : tensor<4x64xi32, #blocked2> loc(#loc17)
    %41 = arith.muli %30, %cst_4 : tensor<1x64xi32, #blocked2> loc(#loc18)
    %42 = tt.broadcast %41 : tensor<1x64xi32, #blocked2> -> tensor<4x64xi32, #blocked2> loc(#loc19)
    %43 = arith.addi %40, %42 : tensor<4x64xi32, #blocked2> loc(#loc19)
    %44 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<4x64x!tt.ptr<f32>, #blocked2> loc(#loc20)
    %45 = tt.addptr %44, %43 : tensor<4x64x!tt.ptr<f32>, #blocked2>, tensor<4x64xi32, #blocked2> loc(#loc20)
    %46 = tt.broadcast %27 : tensor<4x1xi1, #blocked2> -> tensor<4x64xi1, #blocked2> loc(#loc21)
    %47 = tt.broadcast %28 : tensor<4x1xi1, #blocked> -> tensor<4x64xi1, #blocked> loc(#loc21)
    %48 = tt.broadcast %14 : tensor<1x64xi1, #blocked2> -> tensor<4x64xi1, #blocked2> loc(#loc21)
    %49 = tt.broadcast %15 : tensor<1x64xi1, #blocked> -> tensor<4x64xi1, #blocked> loc(#loc21)
    %50 = arith.andi %46, %48 : tensor<4x64xi1, #blocked2> loc(#loc21)
    %51 = arith.andi %47, %49 : tensor<4x64xi1, #blocked> loc(#loc21)
    %52 = tt.load %45, %50 evictionPolicy = evict_last : tensor<4x64x!tt.ptr<f32>, #blocked2> loc(#loc22)
    %53 = triton_gpu.convert_layout %52 : tensor<4x64xf32, #blocked2> -> tensor<4x64xf32, #blocked> loc(#loc22)
    %54 = arith.addi %35, %cst_10 : tensor<1x64xi64, #blocked> loc(#loc23)
    %55 = arith.addi %36, %cst_1 : tensor<1x64xi64, #blocked1> loc(#loc23)
    %56 = arith.cmpi slt, %35, %cst_11 : tensor<1x64xi64, #blocked> loc(#loc24)
    %57 = arith.cmpi slt, %36, %cst_0 : tensor<1x64xi64, #blocked1> loc(#loc24)
    %58 = arith.select %56, %54, %35 : tensor<1x64xi1, #blocked>, tensor<1x64xi64, #blocked> loc(#loc25)
    %59 = arith.select %57, %55, %36 : tensor<1x64xi1, #blocked1>, tensor<1x64xi64, #blocked1> loc(#loc25)
    %60 = arith.cmpi sge, %59, %cst_0 : tensor<1x64xi64, #blocked1> loc(#loc26)
    %61 = arith.cmpi slt, %59, %cst_1 : tensor<1x64xi64, #blocked1> loc(#loc27)
    %62 = arith.andi %60, %61 : tensor<1x64xi1, #blocked1> loc(#loc28)
    %63 = arith.xori %16, %cst_2 : tensor<1x64xi1, #blocked1> loc(#loc29)
    %64 = arith.ori %62, %63 : tensor<1x64xi1, #blocked1> loc(#loc30)
    %65 = tt.broadcast %64 : tensor<1x64xi1, #blocked1> -> tensor<4x64xi1, #blocked1> loc(#loc30)
    tt.assert %65, "index out of bounds: 0 <= tmp4 < 4" : tensor<4x64xi1, #blocked1> loc(#loc31)
    %66 = arith.muli %58, %cst_10 : tensor<1x64xi64, #blocked> loc(#loc32)
    %67 = tt.broadcast %66 : tensor<1x64xi64, #blocked> -> tensor<4x64xi64, #blocked> loc(#loc32)
    %68 = arith.extsi %26 : tensor<4x1xi32, #blocked> to tensor<4x1xi64, #blocked> loc(#loc33)
    %69 = tt.broadcast %68 : tensor<4x1xi64, #blocked> -> tensor<4x64xi64, #blocked> loc(#loc33)
    %70 = arith.addi %69, %67 : tensor<4x64xi64, #blocked> loc(#loc33)
    %71 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x64x!tt.ptr<f32>, #blocked> loc(#loc34)
    %72 = tt.addptr %71, %70 : tensor<4x64x!tt.ptr<f32>, #blocked>, tensor<4x64xi64, #blocked> loc(#loc34)
    %73 = tt.load %72, %51 : tensor<4x64x!tt.ptr<f32>, #blocked> loc(#loc35)
    %74 = arith.subf %73, %53 : tensor<4x64xf32, #blocked> loc(#loc36)
    %75 = arith.mulf %74, %cst : tensor<4x64xf32, #blocked> loc(#loc37)
    %76 = arith.muli %12, %cst_12 : tensor<1x64xi32, #blocked> loc(#loc38)
    %77 = tt.broadcast %26 : tensor<4x1xi32, #blocked> -> tensor<4x64xi32, #blocked> loc(#loc39)
    %78 = tt.broadcast %76 : tensor<1x64xi32, #blocked> -> tensor<4x64xi32, #blocked> loc(#loc39)
    %79 = arith.addi %77, %78 : tensor<4x64xi32, #blocked> loc(#loc39)
    %80 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<4x64x!tt.ptr<f32>, #blocked> loc(#loc40)
    %81 = tt.addptr %80, %79 : tensor<4x64x!tt.ptr<f32>, #blocked>, tensor<4x64xi32, #blocked> loc(#loc40)
    tt.store %81, %75, %51 : tensor<4x64x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":22:28)
#loc3 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":22:33)
#loc4 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":23:44)
#loc5 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":23:23)
#loc6 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":24:21)
#loc7 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":25:28)
#loc8 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":25:33)
#loc9 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":26:44)
#loc10 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":26:23)
#loc11 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":27:21)
#loc12 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":30:19)
#loc13 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":31:19)
#loc14 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":32:30)
#loc15 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":32:35)
#loc16 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":33:38)
#loc17 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":33:35)
#loc18 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":33:46)
#loc19 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":33:43)
#loc20 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":33:30)
#loc21 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":33:59)
#loc22 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":33:51)
#loc23 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":35:18)
#loc24 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":36:18)
#loc25 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":37:32)
#loc26 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":38:28)
#loc27 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":38:44)
#loc28 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":38:37)
#loc29 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":38:52)
#loc30 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":38:50)
#loc31 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":38:60)
#loc32 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":39:37)
#loc33 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":39:35)
#loc34 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":39:30)
#loc35 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":39:44)
#loc36 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":40:18)
#loc37 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":42:19)
#loc38 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":43:32)
#loc39 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":43:30)
#loc40 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":43:25)
#loc41 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":43:44)
#loc42 = loc("inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py":43:4)
