; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_clone_mul_pow_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %8 = shl i32 %7, 6, !dbg !13
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %10 = shl i32 %9, 1, !dbg !14
  %11 = and i32 %10, 62, !dbg !14
  %12 = lshr i32 %9, 1, !dbg !14
  %13 = and i32 %12, 63, !dbg !14
  %14 = and i32 %9, 63, !dbg !14
  %15 = or disjoint i32 %8, %11, !dbg !15
  %16 = or disjoint i32 %8, %13, !dbg !15
  %17 = or disjoint i32 %8, %14, !dbg !15
  %18 = icmp slt i32 %15, 64, !dbg !16
  %19 = icmp slt i32 %16, 64, !dbg !16
  %20 = icmp slt i32 %17, 64, !dbg !16
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !17
  %22 = shl i32 %21, 2, !dbg !18
  %23 = lshr i32 %9, 5, !dbg !19
  %24 = and i32 %23, 3, !dbg !19
  %25 = or disjoint i32 %22, %24, !dbg !20
  %26 = icmp slt i32 %25, 4, !dbg !21
  %.frozen = freeze i32 %15, !dbg !22
  %27 = sdiv i32 %.frozen, 16, !dbg !22
  %28 = mul i32 %27, 16, !dbg !23
  %.decomposed = sub i32 %.frozen, %28, !dbg !23
  %29 = sext i32 %16 to i64, !dbg !24
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !24
  %31 = sext i32 %17 to i64, !dbg !24
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %19) #3, !dbg !25
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %19) #3, !dbg !25
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %20) #3, !dbg !25
  %36 = shl i32 %25, 4, !dbg !26
  %37 = add i32 %36, %.decomposed, !dbg !27
  %38 = shl i32 %27, 6, !dbg !28
  %39 = add i32 %37, %38, !dbg !29
  %40 = sext i32 %39 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !30
  %42 = and i1 %18, %26, !dbg !31
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %42) #3, !dbg !32
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !32
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !32
  %46 = shl i32 %9, 3, !dbg !32
  %47 = and i32 %46, 248, !dbg !32
  %48 = or disjoint i32 %47, %24, !dbg !32
  %49 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %47, !dbg !32
  %50 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %48, !dbg !32
  %51 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #3, !dbg !32
  %52 = or disjoint i32 %48, 4, !dbg !32
  %53 = lshr i32 %52, 2, !dbg !32
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !32
  %55 = getelementptr float, ptr addrspace(3) %54, i32 %52, !dbg !32
  %56 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %57 = lshr i64 %35, 61, !dbg !33
  %58 = and i64 %57, 4, !dbg !33
  %59 = add i64 %58, %35, !dbg !33
  %60 = icmp ugt i64 %59, 3, !dbg !34
  %.not4 = and i1 %20, %60, !dbg !35
  br i1 %.not4, label %61, label %62, !dbg !35

61:                                               ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 38, ptr nonnull @assertFunc_0, i64 1), !dbg !35
  unreachable, !dbg !35

62:                                               ; preds = %6
  %63 = lshr i64 %34, 61, !dbg !33
  %64 = and i64 %63, 4, !dbg !33
  %65 = add i64 %64, %34, !dbg !33
  %66 = and i32 %10, 254, !dbg !32
  %67 = lshr i32 %66, 2, !dbg !32
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %67, !dbg !32
  %69 = or disjoint i32 %66, 1, !dbg !32
  %70 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %69, !dbg !32
  %71 = load float, ptr addrspace(3) %70, align 4, !dbg !32
  %72 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %66, !dbg !32
  %73 = load float, ptr addrspace(3) %72, align 4, !dbg !32
  %74 = and i32 %10, 2, !dbg !14
  %75 = or disjoint i32 %22, %74, !dbg !20
  %76 = icmp slt i32 %75, 4, !dbg !21
  %77 = and i1 %19, %76, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %78 = sext i32 %75 to i64, !dbg !36
  %.idx = shl i64 %65, 4, !dbg !37
  %79 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !37
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %78, !dbg !37
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 %77) #3, !dbg !38
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !38
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !38
  %84 = bitcast i32 %82 to float, !dbg !38
  %85 = bitcast i32 %83 to float, !dbg !38
  %86 = fsub float %84, %73, !dbg !39
  %87 = fsub float %85, %71, !dbg !39
  %88 = fmul float %86, 2.000000e+00, !dbg !40
  %89 = fmul float %87, 2.000000e+00, !dbg !40
  %90 = shl i32 %16, 2, !dbg !41
  %91 = add i32 %75, %90, !dbg !42
  %92 = sext i32 %91 to i64, !dbg !43
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !43
  %94 = bitcast float %88 to i32, !dbg !44
  %95 = bitcast float %89 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %94, i32 %95, ptr addrspace(1) %93, i1 %77) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py", directory: "inductor_cache/wr")
!4 = !{ptr @triton_poi_fused_clone_mul_pow_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_mul_pow_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_clone_mul_pow_sub_4", linkageName: "triton_poi_fused_clone_mul_pow_sub_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 25, column: 33, scope: !11)
!19 = !DILocation(line: 26, column: 44, scope: !11)
!20 = !DILocation(line: 26, column: 23, scope: !11)
!21 = !DILocation(line: 27, column: 21, scope: !11)
!22 = !DILocation(line: 31, column: 19, scope: !11)
!23 = !DILocation(line: 30, column: 19, scope: !11)
!24 = !DILocation(line: 32, column: 30, scope: !11)
!25 = !DILocation(line: 32, column: 35, scope: !11)
!26 = !DILocation(line: 33, column: 38, scope: !11)
!27 = !DILocation(line: 33, column: 35, scope: !11)
!28 = !DILocation(line: 33, column: 46, scope: !11)
!29 = !DILocation(line: 33, column: 43, scope: !11)
!30 = !DILocation(line: 33, column: 30, scope: !11)
!31 = !DILocation(line: 33, column: 59, scope: !11)
!32 = !DILocation(line: 33, column: 51, scope: !11)
!33 = !DILocation(line: 37, column: 32, scope: !11)
!34 = !DILocation(line: 38, column: 37, scope: !11)
!35 = !DILocation(line: 38, column: 60, scope: !11)
!36 = !DILocation(line: 39, column: 35, scope: !11)
!37 = !DILocation(line: 39, column: 30, scope: !11)
!38 = !DILocation(line: 39, column: 44, scope: !11)
!39 = !DILocation(line: 40, column: 18, scope: !11)
!40 = !DILocation(line: 42, column: 19, scope: !11)
!41 = !DILocation(line: 43, column: 32, scope: !11)
!42 = !DILocation(line: 43, column: 30, scope: !11)
!43 = !DILocation(line: 43, column: 25, scope: !11)
!44 = !DILocation(line: 43, column: 44, scope: !11)
!45 = !DILocation(line: 43, column: 4, scope: !11)
