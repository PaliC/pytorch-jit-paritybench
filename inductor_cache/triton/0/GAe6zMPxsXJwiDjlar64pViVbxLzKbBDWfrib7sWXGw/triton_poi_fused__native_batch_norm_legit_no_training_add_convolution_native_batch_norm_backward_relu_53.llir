; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_native_batch_norm_backward_relu_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 8, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 254, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = icmp slt i32 %22, 1024, !dbg !14
  %24 = srem i32 %22, 4, !dbg !15
  %25 = sext i32 %22 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %23) #3, !dbg !17
  %28 = sext i32 %24 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %23) #3, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !20
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %23) #3, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %23) #3, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #3, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %23) #3, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !28
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %23) #3, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !30
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %23) #3, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !32
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %23) #3, !dbg !33
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !33
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !33
  %47 = bitcast i32 %45 to float, !dbg !33
  %48 = bitcast i32 %46 to float, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !34
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %23) #3, !dbg !35
  %51 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !36
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %23) #3, !dbg !37
  %53 = fadd float %47, 0x3EE4F8B580000000, !dbg !38
  %54 = fadd float %48, 0x3EE4F8B580000000, !dbg !38
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %55, 0, !dbg !39
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %56, 0, !dbg !39
  br i1 %.not.i, label %62, label %57, !dbg !39

57:                                               ; preds = %16
  br i1 %.not1.i, label %60, label %58, !dbg !39

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

62:                                               ; preds = %16
  br i1 %.not1.i, label %65, label %63, !dbg !39

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %58, %60, %63, %65
  %.0.i = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !39
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %67, 0, !dbg !39
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %68, 0, !dbg !39
  br i1 %.not.i1, label %74, label %69, !dbg !39

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !39

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !39

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %70, %72, %75, %77
  %.0.i3 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !39
  %79 = extractvalue { i32, i32 } %27, 1, !dbg !17
  %80 = bitcast i32 %79 to float, !dbg !17
  %81 = extractvalue { i32, i32 } %30, 1, !dbg !19
  %82 = bitcast i32 %81 to float, !dbg !19
  %83 = fadd float %80, %82, !dbg !40
  %84 = extractvalue { i32, i32 } %32, 1, !dbg !21
  %85 = bitcast i32 %84 to float, !dbg !21
  %86 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %87 = bitcast i32 %86 to float, !dbg !23
  %88 = fadd float %85, %87, !dbg !41
  %89 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %90 = bitcast i32 %89 to float, !dbg !25
  %91 = fadd float %88, %90, !dbg !42
  %92 = fadd float %83, %91, !dbg !43
  %93 = extractvalue { i32, i32 } %42, 1, !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = fsub float %92, %94, !dbg !44
  %96 = extractvalue { i32, i32 } %27, 0, !dbg !17
  %97 = bitcast i32 %96 to float, !dbg !17
  %98 = extractvalue { i32, i32 } %30, 0, !dbg !19
  %99 = bitcast i32 %98 to float, !dbg !19
  %100 = fadd float %97, %99, !dbg !40
  %101 = extractvalue { i32, i32 } %32, 0, !dbg !21
  %102 = bitcast i32 %101 to float, !dbg !21
  %103 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %104 = bitcast i32 %103 to float, !dbg !23
  %105 = fadd float %102, %104, !dbg !41
  %106 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %107 = bitcast i32 %106 to float, !dbg !25
  %108 = fadd float %105, %107, !dbg !42
  %109 = fadd float %100, %108, !dbg !43
  %110 = extractvalue { i32, i32 } %42, 0, !dbg !31
  %111 = bitcast i32 %110 to float, !dbg !31
  %112 = fsub float %109, %111, !dbg !44
  %113 = extractvalue { i32, i32 } %40, 1, !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = fsub float %90, %114, !dbg !45
  %116 = extractvalue { i32, i32 } %40, 0, !dbg !29
  %117 = bitcast i32 %116 to float, !dbg !29
  %118 = fsub float %107, %117, !dbg !45
  %119 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %120 = bitcast i32 %119 to float, !dbg !27
  %121 = fsub float %91, %120, !dbg !46
  %122 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = fsub float %108, %123, !dbg !46
  %125 = extractvalue { i32, i32 } %52, 1, !dbg !37
  %126 = bitcast i32 %125 to float, !dbg !37
  %127 = extractvalue { i32, i32 } %52, 0, !dbg !37
  %128 = bitcast i32 %127 to float, !dbg !37
  %129 = extractvalue { i32, i32 } %50, 1, !dbg !35
  %130 = bitcast i32 %129 to float, !dbg !35
  %131 = extractvalue { i32, i32 } %50, 0, !dbg !35
  %132 = bitcast i32 %131 to float, !dbg !35
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %135 = fmul float %112, %133, !dbg !48
  %136 = fmul float %95, %134, !dbg !48
  %137 = fmul float %135, %132, !dbg !49
  %138 = fmul float %136, %130, !dbg !49
  %139 = fadd float %137, %128, !dbg !50
  %140 = fadd float %138, %126, !dbg !50
  %141 = fcmp olt float %139, 0.000000e+00, !dbg !51
  %142 = fcmp olt float %140, 0.000000e+00, !dbg !51
  %143 = select i1 %141, float 0.000000e+00, float %139, !dbg !55
  %144 = select i1 %142, float 0.000000e+00, float %140, !dbg !55
  %145 = bitcast float %109 to i32, !dbg !56
  %146 = bitcast float %92 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %145, i32 %146, ptr addrspace(1) %26, i1 %23) #3, !dbg !56
  %147 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !57
  %148 = bitcast float %124 to i32, !dbg !58
  %149 = bitcast float %121 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %148, i32 %149, ptr addrspace(1) %147, i1 %23) #3, !dbg !58
  %150 = getelementptr float, ptr addrspace(1) %12, i64 %25, !dbg !59
  %151 = bitcast float %118 to i32, !dbg !60
  %152 = bitcast float %115 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %151, i32 %152, ptr addrspace(1) %150, i1 %23) #3, !dbg !60
  %153 = getelementptr float, ptr addrspace(1) %13, i64 %25, !dbg !61
  %154 = bitcast float %143 to i32, !dbg !62
  %155 = bitcast float %144 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %153, i1 %23) #3, !dbg !62
  %156 = getelementptr float, ptr addrspace(1) %14, i64 %25, !dbg !63
  %157 = bitcast float %112 to i32, !dbg !64
  %158 = bitcast float %95 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %156, i1 %23) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c26oiii4f3etovmwxpw5sy3idbgudwkn3wvmbg55v23rioxx7zqr.py", directory: "inductor_cache/26")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_native_batch_norm_backward_relu_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_native_batch_norm_backward_relu_53, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_native_batch_norm_backward_relu_53", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_native_batch_norm_backward_relu_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 27, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 41, column: 19, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 55, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 56, column: 39, scope: !7)
!57 = !DILocation(line: 57, column: 25, scope: !7)
!58 = !DILocation(line: 57, column: 37, scope: !7)
!59 = !DILocation(line: 58, column: 25, scope: !7)
!60 = !DILocation(line: 58, column: 37, scope: !7)
!61 = !DILocation(line: 59, column: 25, scope: !7)
!62 = !DILocation(line: 59, column: 37, scope: !7)
!63 = !DILocation(line: 60, column: 25, scope: !7)
!64 = !DILocation(line: 60, column: 37, scope: !7)
!65 = !DILocation(line: 60, column: 4, scope: !7)
