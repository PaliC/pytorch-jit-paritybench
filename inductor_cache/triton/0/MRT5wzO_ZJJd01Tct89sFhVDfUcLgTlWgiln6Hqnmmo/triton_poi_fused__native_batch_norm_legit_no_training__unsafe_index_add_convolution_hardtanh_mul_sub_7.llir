; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) nocapture readnone %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) nocapture readnone %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) nocapture readnone %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 6, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 62, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = icmp slt i32 %21, 64, !dbg !14
  %23 = sdiv i32 %21, 4, !dbg !15
  %24 = srem i32 %23, 4, !dbg !16
  %25 = ashr exact i32 %21, 1, !dbg !17
  %26 = srem i32 %25, 2, !dbg !18
  %27 = sext i32 %21 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %22) #3, !dbg !20
  %30 = sext i32 %24 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %22) #3, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %22) #3, !dbg !22
  %34 = sext i32 %23 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %22) #3, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %22) #3, !dbg !24
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %7, i1 %22) #3, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #3, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #3, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %22) #3, !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %22) #3, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %22) #3, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %22) #3, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #3, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #3, !dbg !33
  %53 = sext i32 %26 to i64, !dbg !34
  %54 = getelementptr float, ptr addrspace(1) %13, i64 %53, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #3, !dbg !35
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #3, !dbg !35
  %57 = fadd float %44, 0x3EE4F8B580000000, !dbg !36
  %58 = fadd float %46, 0x3EE4F8B580000000, !dbg !36
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %59, 0, !dbg !37
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %60, 0, !dbg !37
  br i1 %.not.i, label %66, label %61, !dbg !37

61:                                               ; preds = %15
  br i1 %.not1.i, label %64, label %62, !dbg !37

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

66:                                               ; preds = %15
  br i1 %.not1.i, label %69, label %67, !dbg !37

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !37
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i2 = icmp eq i32 %71, 0, !dbg !37
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i5 = icmp eq i32 %72, 0, !dbg !37
  br i1 %.not.i2, label %78, label %73, !dbg !37

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %76, label %74, !dbg !37

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %81, label %79, !dbg !37

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

__nv_sqrtf.exit6:                                 ; preds = %74, %76, %79, %81
  %.0.i4 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !37
  %83 = extractvalue { i32, i32 } %29, 1, !dbg !20
  %84 = bitcast i32 %83 to float, !dbg !20
  %85 = bitcast i32 %33 to float, !dbg !22
  %86 = fadd float %84, %85, !dbg !38
  %87 = bitcast i32 %41 to float, !dbg !27
  %88 = fsub float %86, %87, !dbg !39
  %89 = extractvalue { i32, i32 } %29, 0, !dbg !20
  %90 = bitcast i32 %89 to float, !dbg !20
  %91 = bitcast i32 %32 to float, !dbg !22
  %92 = fadd float %90, %91, !dbg !38
  %93 = bitcast i32 %40 to float, !dbg !27
  %94 = fsub float %92, %93, !dbg !39
  %95 = bitcast i32 %37 to float, !dbg !24
  %96 = fsub float %95, %95, !dbg !40
  %97 = extractvalue { i32, i32 } %38, 1, !dbg !25
  %98 = bitcast i32 %97 to float, !dbg !25
  %99 = fmul float %96, %98, !dbg !41
  %100 = fadd float %99, %95, !dbg !42
  %101 = bitcast i32 %36 to float, !dbg !24
  %102 = fsub float %101, %101, !dbg !40
  %103 = extractvalue { i32, i32 } %38, 0, !dbg !25
  %104 = bitcast i32 %103 to float, !dbg !25
  %105 = fmul float %102, %104, !dbg !41
  %106 = fadd float %105, %101, !dbg !42
  %107 = bitcast i32 %56 to float, !dbg !35
  %108 = bitcast i32 %55 to float, !dbg !35
  %109 = bitcast i32 %52 to float, !dbg !33
  %110 = bitcast i32 %51 to float, !dbg !33
  %111 = bitcast i32 %49 to float, !dbg !31
  %112 = bitcast i32 %48 to float, !dbg !31
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !43
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !43
  %115 = fmul float %94, %113, !dbg !44
  %116 = fmul float %88, %114, !dbg !44
  %117 = fmul float %115, %112, !dbg !45
  %118 = fmul float %116, %111, !dbg !45
  %119 = fadd float %117, %110, !dbg !46
  %120 = fadd float %118, %109, !dbg !46
  %.inv = fcmp ole float %119, 0.000000e+00, !dbg !47
  %121 = select i1 %.inv, float 0.000000e+00, float %119, !dbg !47
  %.inv1 = fcmp ole float %120, 0.000000e+00, !dbg !47
  %122 = select i1 %.inv1, float 0.000000e+00, float %120, !dbg !47
  %123 = fcmp olt float %121, 6.000000e+00, !dbg !51
  %124 = fcmp olt float %122, 6.000000e+00, !dbg !51
  %125 = fcmp uno float %121, 0.000000e+00, !dbg !53
  %126 = fcmp uno float %122, 0.000000e+00, !dbg !53
  %127 = or i1 %123, %125, !dbg !54
  %128 = or i1 %124, %126, !dbg !54
  %129 = select i1 %127, float %121, float 6.000000e+00, !dbg !55
  %130 = select i1 %128, float %122, float 6.000000e+00, !dbg !55
  %131 = fsub float %106, %106, !dbg !56
  %132 = fsub float %100, %100, !dbg !56
  %133 = fmul float %131, %108, !dbg !57
  %134 = fmul float %132, %107, !dbg !57
  %135 = fadd float %106, %133, !dbg !58
  %136 = fadd float %100, %134, !dbg !58
  %137 = fadd float %135, %129, !dbg !59
  %138 = fadd float %136, %130, !dbg !59
  %139 = bitcast float %92 to i32, !dbg !60
  %140 = bitcast float %86 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %139, i32 %140, ptr addrspace(1) %28, i1 %22) #3, !dbg !60
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !61
  %142 = bitcast float %137 to i32, !dbg !62
  %143 = bitcast float %138 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %141, i1 %22) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs3vs5p76o4xoxbpnmwm555thofvweocieeyqutjdg3s25qigwoz.py", directory: "inductor_cache/s3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 41, column: 32, scope: !7)
!35 = !DILocation(line: 41, column: 37, scope: !7)
!36 = !DILocation(line: 58, column: 20, scope: !7)
!37 = !DILocation(line: 59, column: 27, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 56, column: 19, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 61, column: 20, scope: !7)
!44 = !DILocation(line: 64, column: 20, scope: !7)
!45 = !DILocation(line: 65, column: 20, scope: !7)
!46 = !DILocation(line: 66, column: 20, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 68, column: 42, scope: !7)
!51 = !DILocation(line: 110, column: 15, scope: !48, inlinedAt: !52)
!52 = !DILocation(line: 70, column: 42, scope: !7)
!53 = !DILocation(line: 112, column: 21, scope: !48, inlinedAt: !52)
!54 = !DILocation(line: 112, column: 16, scope: !48, inlinedAt: !52)
!55 = !DILocation(line: 113, column: 29, scope: !48, inlinedAt: !52)
!56 = !DILocation(line: 74, column: 20, scope: !7)
!57 = !DILocation(line: 75, column: 20, scope: !7)
!58 = !DILocation(line: 76, column: 20, scope: !7)
!59 = !DILocation(line: 77, column: 20, scope: !7)
!60 = !DILocation(line: 78, column: 39, scope: !7)
!61 = !DILocation(line: 79, column: 28, scope: !7)
!62 = !DILocation(line: 79, column: 40, scope: !7)
!63 = !DILocation(line: 79, column: 4, scope: !7)
