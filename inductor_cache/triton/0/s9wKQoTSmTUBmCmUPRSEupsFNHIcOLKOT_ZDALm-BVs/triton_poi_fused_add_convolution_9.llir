; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %11, 8, !dbg !12
  %13 = shl i32 %9, 2, !dbg !12
  %14 = and i32 %13, 12, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 6, !dbg !15
  %20 = and i32 %13, 60, !dbg !16
  %21 = lshr i32 %9, 2, !dbg !16
  %22 = and i32 %21, 31, !dbg !16
  %23 = or disjoint i32 %19, %20, !dbg !17
  %24 = or disjoint i32 %19, %22, !dbg !17
  %25 = or disjoint i32 %24, 32, !dbg !17
  %26 = icmp slt i32 %23, 64, !dbg !18
  %27 = icmp slt i32 %24, 64, !dbg !18
  %28 = icmp slt i32 %25, 64, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %29 = sdiv i32 %.frozen, 4096, !dbg !19
  %30 = mul i32 %29, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = shl i32 %15, 6, !dbg !21
  %32 = shl i32 %16, 6, !dbg !21
  %33 = add i32 %23, %31, !dbg !22
  %34 = add i32 %23, %32, !dbg !22
  %35 = sext i32 %33 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %26) #2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %44 = bitcast i32 %40 to float, !dbg !24
  %45 = bitcast i32 %41 to float, !dbg !24
  %46 = bitcast i32 %42 to float, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %26) #2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = sext i32 %23 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %26) #2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %26) #2, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = bitcast i32 %71 to float, !dbg !28
  %76 = bitcast i32 %72 to float, !dbg !28
  %77 = bitcast i32 %73 to float, !dbg !28
  %78 = bitcast i32 %74 to float, !dbg !28
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %26) #2, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !28
  %84 = bitcast i32 %80 to float, !dbg !28
  %85 = bitcast i32 %81 to float, !dbg !28
  %86 = bitcast i32 %82 to float, !dbg !28
  %87 = bitcast i32 %83 to float, !dbg !28
  %88 = fadd float %44, %64, !dbg !29
  %89 = fadd float %45, %65, !dbg !29
  %90 = fadd float %46, %66, !dbg !29
  %91 = fadd float %47, %67, !dbg !29
  %92 = fadd float %53, %64, !dbg !29
  %93 = fadd float %54, %65, !dbg !29
  %94 = fadd float %55, %66, !dbg !29
  %95 = fadd float %56, %67, !dbg !29
  %96 = fadd float %88, %75, !dbg !30
  %97 = fadd float %89, %76, !dbg !30
  %98 = fadd float %90, %77, !dbg !30
  %99 = fadd float %91, %78, !dbg !30
  %100 = fadd float %92, %84, !dbg !30
  %101 = fadd float %93, %85, !dbg !30
  %102 = fadd float %94, %86, !dbg !30
  %103 = fadd float %95, %87, !dbg !30
  %104 = shl i32 %24, 12, !dbg !31
  %105 = shl i32 %25, 12, !dbg !31
  %106 = shl i32 %29, 18, !dbg !32
  %107 = add i32 %106, %.decomposed, !dbg !33
  %108 = add i32 %107, %104, !dbg !34
  %109 = add i32 %107, %105, !dbg !34
  %110 = sext i32 %108 to i64, !dbg !35
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %110, !dbg !35
  %112 = sext i32 %109 to i64, !dbg !35
  %113 = getelementptr float, ptr addrspace(1) %3, i64 %112, !dbg !35
  %114 = shl i32 %9, 6, !dbg !36
  %115 = and i32 %114, 960, !dbg !36
  %116 = or disjoint i32 %115, %11, !dbg !36
  %117 = and i32 %13, 508, !dbg !36
  %118 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %115, !dbg !36
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !36
  %120 = bitcast float %96 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !36
  %121 = or disjoint i32 %116, 16, !dbg !36
  %122 = lshr i32 %121, 2, !dbg !36
  %123 = and i32 %122, 244, !dbg !36
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !36
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %121, !dbg !36
  %126 = bitcast float %97 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !36
  %127 = or disjoint i32 %116, 32, !dbg !36
  %128 = lshr i32 %127, 2, !dbg !36
  %129 = and i32 %128, 248, !dbg !36
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !36
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %127, !dbg !36
  %132 = bitcast float %98 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !36
  %133 = or disjoint i32 %116, 48, !dbg !36
  %134 = lshr i32 %133, 2, !dbg !36
  %135 = and i32 %134, 252, !dbg !36
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !36
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %133, !dbg !36
  %138 = bitcast float %99 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !36
  %139 = or disjoint i32 %116, 8, !dbg !36
  %140 = getelementptr float, ptr addrspace(3) %118, i32 %139, !dbg !36
  %141 = bitcast float %100 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !36
  %142 = or disjoint i32 %116, 24, !dbg !36
  %143 = lshr i32 %142, 2, !dbg !36
  %144 = and i32 %143, 244, !dbg !36
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !36
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %142, !dbg !36
  %147 = bitcast float %101 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !36
  %148 = or disjoint i32 %116, 40, !dbg !36
  %149 = lshr i32 %148, 2, !dbg !36
  %150 = and i32 %149, 248, !dbg !36
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !36
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %148, !dbg !36
  %153 = bitcast float %102 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !36
  %154 = or disjoint i32 %116, 56, !dbg !36
  %155 = lshr i32 %154, 2, !dbg !36
  %156 = and i32 %155, 252, !dbg !36
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !36
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %154, !dbg !36
  %159 = bitcast float %103 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %160 = and i32 %9, 124, !dbg !36
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %160, !dbg !36
  %162 = getelementptr inbounds float, ptr addrspace(3) %161, i32 %117, !dbg !36
  %163 = or disjoint i32 %117, 512, !dbg !36
  %164 = lshr exact i32 %163, 2, !dbg !36
  %165 = and i32 %164, 252, !dbg !36
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %165, !dbg !36
  %167 = getelementptr inbounds float, ptr addrspace(3) %166, i32 %163, !dbg !36
  %168 = load <4 x i32>, ptr addrspace(3) %167, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %162, align 16, !dbg !36
  %169 = getelementptr inbounds i8, ptr addrspace(3) %162, i32 4, !dbg !36
  %.extract11 = load i32, ptr addrspace(3) %169, align 4, !dbg !36
  %170 = getelementptr inbounds i8, ptr addrspace(3) %162, i32 8, !dbg !36
  %.extract12 = load i32, ptr addrspace(3) %170, align 8, !dbg !36
  %171 = getelementptr inbounds i8, ptr addrspace(3) %162, i32 12, !dbg !36
  %.extract13 = load i32, ptr addrspace(3) %171, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %111, i1 %27) #2, !dbg !36
  %.extract14 = extractelement <4 x i32> %168, i64 0, !dbg !36
  %.extract15 = extractelement <4 x i32> %168, i64 1, !dbg !36
  %.extract16 = extractelement <4 x i32> %168, i64 2, !dbg !36
  %.extract17 = extractelement <4 x i32> %168, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %113, i1 %28) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2azcitplqiajftz4frpjloezo4q5y4qt7zgz5o3ag4yfttc72qr.py", directory: "inductor_cache/2a")
!4 = !{ptr @triton_poi_fused_add_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_9", linkageName: "triton_poi_fused_add_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 43, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 47, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 40, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 58, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
