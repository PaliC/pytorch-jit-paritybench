; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %12, 8, !dbg !12
  %14 = or disjoint i32 %12, 16, !dbg !12
  %15 = or disjoint i32 %12, 24, !dbg !12
  %16 = and i32 %10, 15, !dbg !12
  %17 = and i32 %10, 31, !dbg !12
  %18 = or disjoint i32 %9, %12, !dbg !13
  %19 = or disjoint i32 %9, %13, !dbg !13
  %20 = or disjoint i32 %9, %14, !dbg !13
  %21 = or disjoint i32 %9, %15, !dbg !13
  %22 = icmp slt i32 %18, 128, !dbg !14
  %23 = icmp slt i32 %19, 128, !dbg !14
  %24 = icmp slt i32 %20, 128, !dbg !14
  %25 = icmp slt i32 %21, 128, !dbg !14
  %26 = icmp ne i32 %16, 15, !dbg !15
  %27 = mul i32 %18, 15, !dbg !16
  %28 = mul i32 %19, 15, !dbg !16
  %29 = mul i32 %20, 15, !dbg !16
  %30 = mul i32 %21, 15, !dbg !16
  %31 = add i32 %27, %16, !dbg !17
  %32 = add i32 %28, %16, !dbg !17
  %33 = add i32 %29, %16, !dbg !17
  %34 = add i32 %30, %16, !dbg !17
  %35 = sext i32 %31 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !18
  %37 = sext i32 %32 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !18
  %39 = sext i32 %33 to i64, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !18
  %41 = sext i32 %34 to i64, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !18
  %43 = and i1 %26, %22, !dbg !19
  %44 = and i1 %26, %23, !dbg !19
  %45 = and i1 %26, %24, !dbg !19
  %46 = and i1 %26, %25, !dbg !19
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %43, i32 0, i1 %43) #5, !dbg !20
  %48 = bitcast i32 %47 to float, !dbg !20
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %44, i32 0, i1 %44) #5, !dbg !20
  %50 = bitcast i32 %49 to float, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %45, i32 0, i1 %45) #5, !dbg !20
  %52 = bitcast i32 %51 to float, !dbg !20
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %46, i32 0, i1 %46) #5, !dbg !20
  %54 = bitcast i32 %53 to float, !dbg !20
  %55 = sext i32 %18 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !21
  %57 = sext i32 %19 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !21
  %59 = sext i32 %20 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !21
  %61 = sext i32 %21 to i64, !dbg !21
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !21
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %22) #5, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %23) #5, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %24) #5, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %25) #5, !dbg !22
  %67 = fmul float %48, %48, !dbg !23
  %68 = fmul float %50, %50, !dbg !23
  %69 = fmul float %52, %52, !dbg !23
  %70 = fmul float %54, %54, !dbg !23
  %71 = select i1 %43, float %67, float 0.000000e+00, !dbg !24
  %72 = select i1 %44, float %68, float 0.000000e+00, !dbg !24
  %73 = select i1 %45, float %69, float 0.000000e+00, !dbg !24
  %74 = select i1 %46, float %70, float 0.000000e+00, !dbg !24
  %75 = bitcast float %71 to i32, !dbg !25
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !25
  %77 = bitcast i32 %76 to float, !dbg !25
  %78 = fadd float %71, %77, !dbg !29
  %79 = bitcast float %78 to i32, !dbg !25
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = fadd float %78, %81, !dbg !29
  %83 = bitcast float %82 to i32, !dbg !25
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = fadd float %82, %85, !dbg !29
  %87 = bitcast float %86 to i32, !dbg !25
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = fadd float %86, %89, !dbg !29
  %91 = bitcast float %72 to i32, !dbg !25
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !25
  %93 = bitcast i32 %92 to float, !dbg !25
  %94 = fadd float %72, %93, !dbg !29
  %95 = bitcast float %94 to i32, !dbg !25
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !25
  %97 = bitcast i32 %96 to float, !dbg !25
  %98 = fadd float %94, %97, !dbg !29
  %99 = bitcast float %98 to i32, !dbg !25
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !25
  %101 = bitcast i32 %100 to float, !dbg !25
  %102 = fadd float %98, %101, !dbg !29
  %103 = bitcast float %102 to i32, !dbg !25
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !25
  %105 = bitcast i32 %104 to float, !dbg !25
  %106 = fadd float %102, %105, !dbg !29
  %107 = bitcast float %73 to i32, !dbg !25
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !25
  %109 = bitcast i32 %108 to float, !dbg !25
  %110 = fadd float %73, %109, !dbg !29
  %111 = bitcast float %110 to i32, !dbg !25
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !25
  %113 = bitcast i32 %112 to float, !dbg !25
  %114 = fadd float %110, %113, !dbg !29
  %115 = bitcast float %114 to i32, !dbg !25
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !25
  %117 = bitcast i32 %116 to float, !dbg !25
  %118 = fadd float %114, %117, !dbg !29
  %119 = bitcast float %118 to i32, !dbg !25
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !25
  %121 = bitcast i32 %120 to float, !dbg !25
  %122 = fadd float %118, %121, !dbg !29
  %123 = bitcast float %74 to i32, !dbg !25
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !25
  %125 = bitcast i32 %124 to float, !dbg !25
  %126 = fadd float %74, %125, !dbg !29
  %127 = bitcast float %126 to i32, !dbg !25
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !25
  %129 = bitcast i32 %128 to float, !dbg !25
  %130 = fadd float %126, %129, !dbg !29
  %131 = bitcast float %130 to i32, !dbg !25
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !25
  %133 = bitcast i32 %132 to float, !dbg !25
  %134 = fadd float %130, %133, !dbg !29
  %135 = bitcast float %134 to i32, !dbg !25
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !25
  %137 = bitcast i32 %136 to float, !dbg !25
  %138 = fadd float %134, %137, !dbg !29
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %140 = bitcast float %90 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #5, !dbg !31
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %142 = bitcast float %106 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #5, !dbg !31
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %144 = bitcast float %122 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #5, !dbg !31
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !31
  %146 = bitcast float %138 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !31
  %148 = load float, ptr addrspace(3) %147, align 4, !dbg !31
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %149, 0, !dbg !31
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %150, 0, !dbg !31
  br i1 %.not.i, label %156, label %151, !dbg !31

151:                                              ; preds = %7
  br i1 %.not1.i, label %154, label %152, !dbg !31

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

156:                                              ; preds = %7
  br i1 %.not1.i, label %159, label %157, !dbg !31

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %152, %154, %157, %159
  %.0.i = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !31
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i1 = icmp eq i32 %161, 0, !dbg !31
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i4 = icmp eq i32 %162, 0, !dbg !31
  br i1 %.not.i1, label %168, label %163, !dbg !31

163:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %166, label %164, !dbg !31

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

168:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %171, label %169, !dbg !31

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %164, %166, %169, %171
  %.0.i3 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !31
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i6 = icmp eq i32 %173, 0, !dbg !31
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i9 = icmp eq i32 %174, 0, !dbg !31
  br i1 %.not.i6, label %180, label %175, !dbg !31

175:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %178, label %176, !dbg !31

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

180:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %183, label %181, !dbg !31

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %176, %178, %181, %183
  %.0.i8 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !31
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i11 = icmp eq i32 %185, 0, !dbg !31
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i14 = icmp eq i32 %186, 0, !dbg !31
  br i1 %.not.i11, label %192, label %187, !dbg !31

187:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %190, label %188, !dbg !31

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

192:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %195, label %193, !dbg !31

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %188, %190, %193, %195
  %.0.i13 = phi float [ %189, %188 ], [ %191, %190 ], [ %194, %193 ], [ %196, %195 ], !dbg !31
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i16 = icmp eq i32 %197, 0, !dbg !31
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i19 = icmp eq i32 %198, 0, !dbg !31
  br i1 %.not.i16, label %204, label %199, !dbg !31

199:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %202, label %200, !dbg !31

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

204:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %207, label %205, !dbg !31

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %200, %202, %205, %207
  %.0.i18 = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !31
  %209 = bitcast i32 %66 to float, !dbg !22
  %210 = bitcast i32 %65 to float, !dbg !22
  %211 = bitcast i32 %64 to float, !dbg !22
  %212 = bitcast i32 %63 to float, !dbg !22
  %213 = or disjoint i32 %9, %17, !dbg !13
  %214 = icmp slt i32 %213, 128, !dbg !14
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %.0.i3) #5, !dbg !32
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %.0.i8) #5, !dbg !32
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %.0.i13) #5, !dbg !32
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %.0.i18) #5, !dbg !32
  %219 = fmul float %215, %48, !dbg !33
  %220 = fmul float %216, %50, !dbg !33
  %221 = fmul float %217, %52, !dbg !33
  %222 = fmul float %218, %54, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %223 = sext i32 %213 to i64, !dbg !35
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !35
  %225 = and i32 %10, 96, !dbg !36
  %226 = icmp eq i32 %225, 0, !dbg !36
  %227 = bitcast float %.0.i to i32, !dbg !36
  %228 = and i1 %226, %214, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %227, ptr addrspace(1) %224, i1 %228) #5, !dbg !36
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !37
  %230 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !37
  %231 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !37
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !37
  %233 = bitcast float %219 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %233, ptr addrspace(1) %229, i1 %43) #5, !dbg !38
  %234 = bitcast float %220 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %234, ptr addrspace(1) %230, i1 %44) #5, !dbg !38
  %235 = bitcast float %221 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %235, ptr addrspace(1) %231, i1 %45) #5, !dbg !38
  %236 = bitcast float %222 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %236, ptr addrspace(1) %232, i1 %46) #5, !dbg !38
  %237 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !39
  %238 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !39
  %239 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !39
  %240 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %233, ptr addrspace(1) %237, i1 %43) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %234, ptr addrspace(1) %238, i1 %44) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %235, ptr addrspace(1) %239, i1 %45) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %236, ptr addrspace(1) %240, i1 %46) #5, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjoyn6gnd44g2qpeopfmcj5ihra5uny4uovjo422ppa46s24ojn4.py", directory: "inductor_cache/jo")
!4 = !{ptr @triton_per_fused__weight_norm_interface_26, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_26", linkageName: "triton_per_fused__weight_norm_interface_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 51, scope: !7)
!20 = !DILocation(line: 31, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 44, scope: !7)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 43, column: 44, scope: !7)
!41 = !DILocation(line: 43, column: 4, scope: !7)
