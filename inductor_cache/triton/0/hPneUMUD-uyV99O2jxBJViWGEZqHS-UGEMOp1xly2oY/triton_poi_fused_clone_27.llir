; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 14, !dbg !12
  %13 = lshr i32 %10, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = icmp slt i32 %15, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = or disjoint i32 %18, %14, !dbg !17
  %20 = icmp slt i32 %19, 2048, !dbg !18
  %21 = srem i32 %19, 512, !dbg !19
  %22 = shl i32 %19, 4, !dbg !20
  %23 = add i32 %22, %15, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = and i1 %16, %20, !dbg !23
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %26) #4, !dbg !24
  %28 = sdiv i32 %19, 16, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #4, !dbg !27
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #4, !dbg !27
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !28
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %20) #4, !dbg !29
  %35 = bitcast i32 %34 to float, !dbg !29
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %20) #4, !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = sext i32 %21 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #4, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #4, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !32
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #4, !dbg !33
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #4, !dbg !33
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float 2.560000e+02) #4, !dbg !34
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 2.560000e+02) #4, !dbg !34
  %47 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i1 = icmp eq i32 %49, 0, !dbg !36
  br i1 %.not.i1, label %52, label %50, !dbg !36

50:                                               ; preds = %__nv_rsqrtf.exit
  %51 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %47), !dbg !36
  br label %__nv_rsqrtf.exit3, !dbg !36

52:                                               ; preds = %__nv_rsqrtf.exit
  %53 = tail call float @llvm.nvvm.rsqrt.approx.f(float %47), !dbg !36
  br label %__nv_rsqrtf.exit3, !dbg !36

__nv_rsqrtf.exit3:                                ; preds = %50, %52
  %.0.i2 = phi float [ %51, %50 ], [ %53, %52 ], !dbg !36
  %54 = extractvalue { i32, i32 } %27, 1, !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = bitcast i32 %32 to float, !dbg !27
  %57 = fsub float %55, %56, !dbg !37
  %58 = extractvalue { i32, i32 } %27, 0, !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = fsub float %59, %56, !dbg !37
  %61 = bitcast i32 %44 to float, !dbg !33
  %62 = bitcast i32 %41 to float, !dbg !31
  %63 = or disjoint i32 %18, %12, !dbg !17
  %64 = icmp slt i32 %63, 2048, !dbg !18
  %65 = or disjoint i32 %9, %14, !dbg !13
  %66 = icmp slt i32 %65, 16, !dbg !14
  %67 = and i1 %66, %64, !dbg !23
  %68 = fmul float %60, %.0.i2, !dbg !38
  %69 = fmul float %57, %.0.i2, !dbg !38
  %70 = fmul float %68, %62, !dbg !39
  %71 = fmul float %69, %62, !dbg !39
  %72 = fadd float %70, %61, !dbg !40
  %73 = fadd float %71, %61, !dbg !40
  %74 = shl i32 %65, 11, !dbg !41
  %75 = add i32 %63, %74, !dbg !42
  %76 = sext i32 %75 to i64, !dbg !43
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %76, !dbg !43
  %78 = shl i32 %10, 5, !dbg !44
  %79 = and i32 %78, 224, !dbg !44
  %80 = or disjoint i32 %79, %14, !dbg !44
  %81 = and i32 %11, 254, !dbg !44
  %82 = lshr exact i32 %79, 2, !dbg !44
  %83 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %82, !dbg !44
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %80, !dbg !44
  %85 = bitcast float %72 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #4, !dbg !44
  %86 = or disjoint i32 %80, 16, !dbg !44
  %87 = lshr i32 %86, 4, !dbg !44
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !44
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %86, !dbg !44
  %90 = bitcast float %73 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %91 = lshr i32 %81, 4, !dbg !44
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !44
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %81, !dbg !44
  %94 = load i32, ptr addrspace(3) %93, align 4, !dbg !44
  %95 = or disjoint i32 %81, 1, !dbg !44
  %96 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %95, !dbg !44
  %97 = load i32, ptr addrspace(3) %96, align 4, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %94, i32 %97, ptr addrspace(1) %77, i1 %67) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czuwiecqcgwoxntkrxikx2iquhuyvzp66ikodxf5qw33jd3y6a4c.py", directory: "inductor_cache/zu")
!4 = !{ptr @triton_poi_fused_clone_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_27", linkageName: "triton_poi_fused_clone_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 51, scope: !7)
!24 = !DILocation(line: 31, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 41, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 41, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 27, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 45, column: 35, scope: !7)
!42 = !DILocation(line: 45, column: 30, scope: !7)
!43 = !DILocation(line: 45, column: 25, scope: !7)
!44 = !DILocation(line: 45, column: 47, scope: !7)
!45 = !DILocation(line: 45, column: 4, scope: !7)
