; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 128, !dbg !14
  %16 = mul i32 %15, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = srem i32 %15, 16, !dbg !16
  %18 = sdiv i32 %14, 2048, !dbg !17
  %19 = shl nsw i32 %17, 8, !dbg !18
  %20 = shl i32 %18, 13, !dbg !19
  %21 = add i32 %20, %.decomposed, !dbg !20
  %22 = add i32 %21, %19, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !23
  %26 = add i32 %21, 128, !dbg !24
  %27 = add i32 %26, %19, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !27
  %31 = add i32 %21, 4096, !dbg !28
  %32 = add i32 %31, %19, !dbg !29
  %33 = sext i32 %32 to i64, !dbg !30
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !30
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !31
  %36 = add i32 %21, 4224, !dbg !32
  %37 = add i32 %36, %19, !dbg !33
  %38 = sext i32 %37 to i64, !dbg !34
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !34
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !35
  %41 = sext i32 %.decomposed to i64, !dbg !36
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !36
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !37
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !38
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !39
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !39
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !39
  %48 = bitcast i32 %46 to float, !dbg !39
  %49 = bitcast i32 %47 to float, !dbg !39
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !40
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !41
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !42
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !43
  %54 = fadd float %48, 0x3EE4F8B580000000, !dbg !44
  %55 = fadd float %49, 0x3EE4F8B580000000, !dbg !44
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %56, 0, !dbg !45
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %57, 0, !dbg !45
  br i1 %.not.i, label %63, label %58, !dbg !45

58:                                               ; preds = %8
  br i1 %.not1.i, label %61, label %59, !dbg !45

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !45

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !45
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i1 = icmp eq i32 %68, 0, !dbg !45
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i4 = icmp eq i32 %69, 0, !dbg !45
  br i1 %.not.i1, label %75, label %70, !dbg !45

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !45

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !45

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

__nv_sqrtf.exit5:                                 ; preds = %71, %73, %76, %78
  %.0.i3 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !45
  %80 = extractvalue { i32, i32 } %30, 1, !dbg !27
  %81 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %82 = extractvalue { i32, i32 } %35, 1, !dbg !31
  %83 = extractvalue { i32, i32 } %40, 1, !dbg !35
  %84 = extractvalue { i32, i32 } %43, 1, !dbg !37
  %85 = bitcast i32 %84 to float, !dbg !37
  %86 = extractvalue { i32, i32 } %30, 0, !dbg !27
  %87 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %88 = extractvalue { i32, i32 } %35, 0, !dbg !31
  %89 = extractvalue { i32, i32 } %40, 0, !dbg !35
  %90 = extractvalue { i32, i32 } %43, 0, !dbg !37
  %91 = bitcast i32 %90 to float, !dbg !37
  %92 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !35
  %93 = insertelement <2 x i32> %92, i32 %83, i64 1, !dbg !35
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !35
  %95 = bitcast i32 %83 to float, !dbg !46
  %96 = fcmp uno float %95, 0.000000e+00, !dbg !46
  %97 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !27
  %98 = insertelement <2 x i32> %97, i32 %80, i64 1, !dbg !27
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !27
  %100 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !23
  %101 = insertelement <2 x i32> %100, i32 %81, i64 1, !dbg !23
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !23
  %103 = fcmp ogt <2 x float> %99, %102, !dbg !50
  %104 = fcmp uno <2 x float> %99, zeroinitializer, !dbg !51
  %105 = or <2 x i1> %103, %104, !dbg !53
  %.v = select <2 x i1> %105, <2 x i32> %98, <2 x i32> %101, !dbg !54
  %106 = bitcast <2 x i32> %.v to <2 x float>, !dbg !54
  %107 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !31
  %108 = insertelement <2 x i32> %107, i32 %82, i64 1, !dbg !31
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !31
  %110 = fcmp olt <2 x float> %106, %109, !dbg !55
  %111 = fcmp uno <2 x float> %109, zeroinitializer, !dbg !56
  %112 = or <2 x i1> %111, %110, !dbg !58
  %.v6 = select <2 x i1> %112, <2 x i32> %108, <2 x i32> %.v, !dbg !59
  %113 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !59
  %114 = fcmp olt <2 x float> %113, %94, !dbg !60
  %115 = extractelement <2 x i1> %114, i64 1, !dbg !61
  %116 = or i1 %96, %115, !dbg !61
  %117 = extractelement <2 x float> %113, i64 1, !dbg !62
  %118 = select i1 %116, float %95, float %117, !dbg !62
  %119 = fsub float %118, %85, !dbg !63
  %120 = bitcast i32 %89 to float, !dbg !46
  %121 = fcmp uno float %120, 0.000000e+00, !dbg !46
  %122 = extractelement <2 x i1> %114, i64 0, !dbg !61
  %123 = or i1 %121, %122, !dbg !61
  %124 = extractelement <2 x float> %113, i64 0, !dbg !62
  %125 = select i1 %123, float %120, float %124, !dbg !62
  %126 = fsub float %125, %91, !dbg !63
  %127 = zext <2 x i1> %103 to <2 x i8>, !dbg !64
  %128 = select <2 x i1> %110, <2 x i8> splat (i8 2), <2 x i8> %127, !dbg !65
  %129 = select <2 x i1> %114, <2 x i8> splat (i8 3), <2 x i8> %128, !dbg !66
  %130 = extractvalue { i32, i32 } %53, 1, !dbg !43
  %131 = bitcast i32 %130 to float, !dbg !43
  %132 = extractvalue { i32, i32 } %53, 0, !dbg !43
  %133 = bitcast i32 %132 to float, !dbg !43
  %134 = extractvalue { i32, i32 } %51, 1, !dbg !41
  %135 = bitcast i32 %134 to float, !dbg !41
  %136 = extractvalue { i32, i32 } %51, 0, !dbg !41
  %137 = bitcast i32 %136 to float, !dbg !41
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !67
  %140 = fmul float %126, %138, !dbg !68
  %141 = fmul float %119, %139, !dbg !68
  %142 = fmul float %140, %137, !dbg !69
  %143 = fmul float %141, %135, !dbg !69
  %144 = fadd float %142, %133, !dbg !70
  %145 = fadd float %143, %131, !dbg !70
  %146 = fcmp olt float %144, 0.000000e+00, !dbg !71
  %147 = fcmp olt float %145, 0.000000e+00, !dbg !71
  %148 = select i1 %146, float 0.000000e+00, float %144, !dbg !73
  %149 = select i1 %147, float 0.000000e+00, float %145, !dbg !73
  %150 = sext i32 %14 to i64, !dbg !74
  %151 = getelementptr i8, ptr addrspace(1) %5, i64 %150, !dbg !74
  %152 = bitcast <2 x i8> %129 to i16, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %152, ptr addrspace(1) %151, i1 true) #3, !dbg !75
  %153 = getelementptr float, ptr addrspace(1) %6, i64 %150, !dbg !76
  %154 = bitcast float %148 to i32, !dbg !77
  %155 = bitcast float %149 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %153, i1 true) #3, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cccxhfa5h4djbxxok6mvvycj2optguo6sxfu4pyn5rk2mibjdi3m.py", directory: "inductor_cache/cc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 49, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 54, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 60, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 52, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 62, scope: !7)
!36 = !DILocation(line: 32, column: 31, scope: !7)
!37 = !DILocation(line: 32, column: 36, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 36, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 36, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 27, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 48, column: 42, scope: !7)
!50 = !DILocation(line: 36, column: 18, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !52)
!52 = !DILocation(line: 40, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !52)
!54 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !52)
!55 = !DILocation(line: 41, column: 18, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !57)
!57 = !DILocation(line: 44, column: 41, scope: !7)
!58 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !57)
!59 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !57)
!60 = !DILocation(line: 45, column: 20, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !49)
!62 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!63 = !DILocation(line: 49, column: 20, scope: !7)
!64 = !DILocation(line: 39, column: 32, scope: !7)
!65 = !DILocation(line: 43, column: 33, scope: !7)
!66 = !DILocation(line: 47, column: 35, scope: !7)
!67 = !DILocation(line: 54, column: 20, scope: !7)
!68 = !DILocation(line: 57, column: 20, scope: !7)
!69 = !DILocation(line: 58, column: 20, scope: !7)
!70 = !DILocation(line: 59, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !72)
!72 = !DILocation(line: 61, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !72)
!74 = !DILocation(line: 62, column: 25, scope: !7)
!75 = !DILocation(line: 62, column: 37, scope: !7)
!76 = !DILocation(line: 63, column: 25, scope: !7)
!77 = !DILocation(line: 63, column: 37, scope: !7)
!78 = !DILocation(line: 63, column: 4, scope: !7)
