; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %.lobit = and i32 %13, 1, !dbg !12
  %14 = or disjoint i32 %11, %.lobit, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 8, !dbg !15
  %18 = shl i32 %12, 2, !dbg !16
  %19 = and i32 %18, 252, !dbg !16
  %20 = shl i32 %12, 1, !dbg !16
  %21 = and i32 %20, 254, !dbg !16
  %22 = or disjoint i32 %17, %19, !dbg !17
  %23 = or disjoint i32 %17, %21, !dbg !17
  %24 = icmp slt i32 %22, 256, !dbg !18
  %25 = icmp slt i32 %23, 256, !dbg !18
  %26 = sdiv i32 %14, 256, !dbg !19
  %27 = sdiv i32 %15, 256, !dbg !19
  %28 = shl i32 %14, 8, !dbg !20
  %29 = shl i32 %15, 8, !dbg !20
  %30 = add i32 %22, %28, !dbg !21
  %31 = add i32 %22, %29, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %24) #4, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %24) #4, !dbg !23
  %38 = shl nsw i32 %26, 5, !dbg !24
  %39 = shl nsw i32 %27, 5, !dbg !24
  %40 = sdiv i32 %22, 8, !dbg !25
  %41 = add nsw i32 %38, %40, !dbg !26
  %42 = add nsw i32 %40, %39, !dbg !26
  %43 = sext i32 %41 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !27
  %45 = sext i32 %42 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %24) #4, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %24) #4, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %24) #4, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %24) #4, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #4, !dbg !30
  %58 = bitcast i32 %57 to float, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #4, !dbg !30
  %60 = bitcast i32 %59 to float, !dbg !30
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #4, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #4, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %24) #4, !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %24) #4, !dbg !30
  %68 = bitcast i32 %67 to float, !dbg !30
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %24) #4, !dbg !30
  %70 = bitcast i32 %69 to float, !dbg !30
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %24) #4, !dbg !30
  %72 = bitcast i32 %71 to float, !dbg !30
  %73 = sext i32 %23 to i64, !dbg !31
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !31
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %25) #4, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !33
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %25) #4, !dbg !34
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !35
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !35
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %24) #4, !dbg !36
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %24) #4, !dbg !36
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 2.048000e+03) #4, !dbg !37
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 2.048000e+03) #4, !dbg !37
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 2.048000e+03) #4, !dbg !37
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 2.048000e+03) #4, !dbg !37
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 2.048000e+03) #4, !dbg !37
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 2.048000e+03) #4, !dbg !37
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 2.048000e+03) #4, !dbg !37
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float 2.048000e+03) #4, !dbg !37
  %90 = fadd float %82, 0x3EE4F8B580000000, !dbg !38
  %91 = fadd float %83, 0x3EE4F8B580000000, !dbg !38
  %92 = fadd float %84, 0x3EE4F8B580000000, !dbg !38
  %93 = fadd float %85, 0x3EE4F8B580000000, !dbg !38
  %94 = fadd float %86, 0x3EE4F8B580000000, !dbg !38
  %95 = fadd float %87, 0x3EE4F8B580000000, !dbg !38
  %96 = fadd float %88, 0x3EE4F8B580000000, !dbg !38
  %97 = fadd float %89, 0x3EE4F8B580000000, !dbg !38
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %98, 0, !dbg !39
  br i1 %.not.i, label %101, label %99, !dbg !39

99:                                               ; preds = %9
  %100 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %90), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

101:                                              ; preds = %9
  %102 = tail call float @llvm.nvvm.rsqrt.approx.f(float %90), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %99, %101
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], !dbg !39
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i16 = icmp eq i32 %103, 0, !dbg !39
  br i1 %.not.i16, label %106, label %104, !dbg !39

104:                                              ; preds = %__nv_rsqrtf.exit
  %105 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %91), !dbg !39
  br label %__nv_rsqrtf.exit18, !dbg !39

106:                                              ; preds = %__nv_rsqrtf.exit
  %107 = tail call float @llvm.nvvm.rsqrt.approx.f(float %91), !dbg !39
  br label %__nv_rsqrtf.exit18, !dbg !39

__nv_rsqrtf.exit18:                               ; preds = %104, %106
  %.0.i17 = phi float [ %105, %104 ], [ %107, %106 ], !dbg !39
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i19 = icmp eq i32 %108, 0, !dbg !39
  br i1 %.not.i19, label %111, label %109, !dbg !39

109:                                              ; preds = %__nv_rsqrtf.exit18
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !39
  br label %__nv_rsqrtf.exit21, !dbg !39

111:                                              ; preds = %__nv_rsqrtf.exit18
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !39
  br label %__nv_rsqrtf.exit21, !dbg !39

__nv_rsqrtf.exit21:                               ; preds = %109, %111
  %.0.i20 = phi float [ %110, %109 ], [ %112, %111 ], !dbg !39
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i22 = icmp eq i32 %113, 0, !dbg !39
  br i1 %.not.i22, label %116, label %114, !dbg !39

114:                                              ; preds = %__nv_rsqrtf.exit21
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !39
  br label %__nv_rsqrtf.exit24, !dbg !39

116:                                              ; preds = %__nv_rsqrtf.exit21
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !39
  br label %__nv_rsqrtf.exit24, !dbg !39

__nv_rsqrtf.exit24:                               ; preds = %114, %116
  %.0.i23 = phi float [ %115, %114 ], [ %117, %116 ], !dbg !39
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i25 = icmp eq i32 %118, 0, !dbg !39
  br i1 %.not.i25, label %121, label %119, !dbg !39

119:                                              ; preds = %__nv_rsqrtf.exit24
  %120 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !39
  br label %__nv_rsqrtf.exit27, !dbg !39

121:                                              ; preds = %__nv_rsqrtf.exit24
  %122 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !39
  br label %__nv_rsqrtf.exit27, !dbg !39

__nv_rsqrtf.exit27:                               ; preds = %119, %121
  %.0.i26 = phi float [ %120, %119 ], [ %122, %121 ], !dbg !39
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i28 = icmp eq i32 %123, 0, !dbg !39
  br i1 %.not.i28, label %126, label %124, !dbg !39

124:                                              ; preds = %__nv_rsqrtf.exit27
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !39
  br label %__nv_rsqrtf.exit30, !dbg !39

126:                                              ; preds = %__nv_rsqrtf.exit27
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !39
  br label %__nv_rsqrtf.exit30, !dbg !39

__nv_rsqrtf.exit30:                               ; preds = %124, %126
  %.0.i29 = phi float [ %125, %124 ], [ %127, %126 ], !dbg !39
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i31 = icmp eq i32 %128, 0, !dbg !39
  br i1 %.not.i31, label %131, label %129, !dbg !39

129:                                              ; preds = %__nv_rsqrtf.exit30
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %96), !dbg !39
  br label %__nv_rsqrtf.exit33, !dbg !39

131:                                              ; preds = %__nv_rsqrtf.exit30
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %96), !dbg !39
  br label %__nv_rsqrtf.exit33, !dbg !39

__nv_rsqrtf.exit33:                               ; preds = %129, %131
  %.0.i32 = phi float [ %130, %129 ], [ %132, %131 ], !dbg !39
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i34 = icmp eq i32 %133, 0, !dbg !39
  br i1 %.not.i34, label %136, label %134, !dbg !39

134:                                              ; preds = %__nv_rsqrtf.exit33
  %135 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %97), !dbg !39
  br label %__nv_rsqrtf.exit36, !dbg !39

136:                                              ; preds = %__nv_rsqrtf.exit33
  %137 = tail call float @llvm.nvvm.rsqrt.approx.f(float %97), !dbg !39
  br label %__nv_rsqrtf.exit36, !dbg !39

__nv_rsqrtf.exit36:                               ; preds = %134, %136
  %.0.i35 = phi float [ %135, %134 ], [ %137, %136 ], !dbg !39
  %138 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %139 = bitcast i32 %138 to float, !dbg !23
  %140 = bitcast i32 %54 to float, !dbg !28
  %141 = fsub float %139, %140, !dbg !40
  %142 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %143 = bitcast i32 %142 to float, !dbg !23
  %144 = bitcast i32 %53 to float, !dbg !28
  %145 = fsub float %143, %144, !dbg !40
  %146 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %147 = bitcast i32 %146 to float, !dbg !23
  %148 = bitcast i32 %52 to float, !dbg !28
  %149 = fsub float %147, %148, !dbg !40
  %150 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %151 = bitcast i32 %150 to float, !dbg !23
  %152 = bitcast i32 %51 to float, !dbg !28
  %153 = fsub float %151, %152, !dbg !40
  %154 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %155 = bitcast i32 %154 to float, !dbg !23
  %156 = bitcast i32 %50 to float, !dbg !28
  %157 = fsub float %155, %156, !dbg !40
  %158 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %159 = bitcast i32 %158 to float, !dbg !23
  %160 = bitcast i32 %49 to float, !dbg !28
  %161 = fsub float %159, %160, !dbg !40
  %162 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %163 = bitcast i32 %162 to float, !dbg !23
  %164 = bitcast i32 %48 to float, !dbg !28
  %165 = fsub float %163, %164, !dbg !40
  %166 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %167 = bitcast i32 %166 to float, !dbg !23
  %168 = bitcast i32 %47 to float, !dbg !28
  %169 = fsub float %167, %168, !dbg !40
  %170 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !36
  %172 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !36
  %173 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !36
  %174 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !36
  %175 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !36
  %177 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !36
  %178 = extractvalue { i32, i32 } %77, 1, !dbg !34
  %179 = bitcast i32 %178 to float, !dbg !34
  %180 = extractvalue { i32, i32 } %77, 0, !dbg !34
  %181 = bitcast i32 %180 to float, !dbg !34
  %182 = extractvalue { i32, i32 } %75, 1, !dbg !32
  %183 = bitcast i32 %182 to float, !dbg !32
  %184 = extractvalue { i32, i32 } %75, 0, !dbg !32
  %185 = bitcast i32 %184 to float, !dbg !32
  %.frozen = freeze i32 %11, !dbg !19
  %186 = sdiv i32 %.frozen, 256, !dbg !19
  %187 = mul i32 %186, 256, !dbg !41
  %.decomposed = sub i32 %.frozen, %187, !dbg !41
  %188 = and i32 %12, 127, !dbg !16
  %189 = or disjoint i32 %188, %17, !dbg !17
  %190 = or disjoint i32 %189, 128, !dbg !17
  %191 = icmp slt i32 %190, 256, !dbg !18
  %192 = icmp slt i32 %189, 256, !dbg !18
  %193 = fmul float %169, %.0.i, !dbg !42
  %194 = fmul float %165, %.0.i17, !dbg !42
  %195 = fmul float %161, %.0.i20, !dbg !42
  %196 = fmul float %157, %.0.i23, !dbg !42
  %197 = fmul float %153, %.0.i26, !dbg !42
  %198 = fmul float %149, %.0.i29, !dbg !42
  %199 = fmul float %145, %.0.i32, !dbg !42
  %200 = fmul float %141, %.0.i35, !dbg !42
  %201 = and i32 %18, 508, !dbg !42
  %202 = lshr i32 %201, 8, !dbg !42
  %203 = or disjoint i32 %202, %201, !dbg !42
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !42
  %205 = bitcast float %193 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #4, !dbg !42
  %206 = or disjoint i32 %201, 1, !dbg !42
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !42
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %206, !dbg !42
  %209 = bitcast float %194 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #4, !dbg !42
  %210 = or disjoint i32 %203, 2, !dbg !42
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !42
  %212 = bitcast float %195 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #4, !dbg !42
  %213 = or disjoint i32 %201, 3, !dbg !42
  %214 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %213, !dbg !42
  %215 = bitcast float %196 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !42
  %217 = load float, ptr addrspace(3) %216, align 8, !dbg !42
  %218 = or disjoint i32 %21, 1, !dbg !42
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !42
  %220 = load float, ptr addrspace(3) %219, align 4, !dbg !42
  %221 = or disjoint i32 %21, 257, !dbg !42
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !42
  %223 = load float, ptr addrspace(3) %222, align 4, !dbg !42
  %224 = getelementptr inbounds i8, ptr addrspace(3) %216, i32 1032, !dbg !42
  %225 = load float, ptr addrspace(3) %224, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %226 = bitcast float %197 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %226, i1 true) #4, !dbg !42
  %227 = bitcast float %198 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %227, i1 true) #4, !dbg !42
  %228 = bitcast float %199 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %228, i1 true) #4, !dbg !42
  %229 = bitcast float %200 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %229, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %230 = load float, ptr addrspace(3) %216, align 8, !dbg !42
  %231 = load float, ptr addrspace(3) %219, align 4, !dbg !42
  %232 = load float, ptr addrspace(3) %222, align 4, !dbg !42
  %233 = load float, ptr addrspace(3) %224, align 8, !dbg !42
  %234 = fmul float %217, %185, !dbg !43
  %235 = fmul float %220, %183, !dbg !43
  %236 = fmul float %223, %185, !dbg !43
  %237 = fmul float %225, %183, !dbg !43
  %238 = fmul float %230, %185, !dbg !43
  %239 = fmul float %231, %183, !dbg !43
  %240 = fmul float %232, %185, !dbg !43
  %241 = fmul float %233, %183, !dbg !43
  %242 = fadd float %234, %181, !dbg !44
  %243 = fadd float %235, %179, !dbg !44
  %244 = fadd float %236, %181, !dbg !44
  %245 = fadd float %237, %179, !dbg !44
  %246 = fadd float %238, %181, !dbg !44
  %247 = fadd float %239, %179, !dbg !44
  %248 = fadd float %240, %181, !dbg !44
  %249 = fadd float %241, %179, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %250 = bitcast float %242 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %250, i1 true) #4, !dbg !44
  %251 = bitcast float %243 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %251, i1 true) #4, !dbg !44
  %252 = bitcast float %244 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %252, i1 true) #4, !dbg !44
  %253 = bitcast float %245 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %253, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %254 = bitcast float %246 to <1 x i32>, !dbg !44
  %255 = bitcast float %247 to <1 x i32>, !dbg !44
  %256 = bitcast float %248 to <1 x i32>, !dbg !44
  %257 = bitcast float %249 to <1 x i32>, !dbg !44
  %258 = insertelement <8 x i32> poison, i32 %170, i64 0, !dbg !36
  %259 = insertelement <8 x i32> %258, i32 %171, i64 1, !dbg !36
  %260 = insertelement <8 x i32> %259, i32 %172, i64 2, !dbg !36
  %261 = insertelement <8 x i32> %260, i32 %173, i64 3, !dbg !36
  %262 = insertelement <8 x i32> %261, i32 %174, i64 4, !dbg !36
  %263 = insertelement <8 x i32> %262, i32 %175, i64 5, !dbg !36
  %264 = insertelement <8 x i32> %263, i32 %176, i64 6, !dbg !36
  %265 = insertelement <8 x i32> %264, i32 %177, i64 7, !dbg !36
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !36
  %267 = load <4 x float>, ptr addrspace(3) %204, align 4, !dbg !44
  %268 = shufflevector <4 x float> %267, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %254, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %255, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %256, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %257, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %269 = load <4 x float>, ptr addrspace(3) %204, align 4, !dbg !44
  %270 = shufflevector <4 x float> %269, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !44
  %271 = shufflevector <4 x float> %270, <4 x float> %268, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !45
  %272 = fadd <8 x float> %271, %266, !dbg !45
  %273 = fcmp olt <8 x float> %272, zeroinitializer, !dbg !46
  %274 = extractelement <8 x i1> %273, i64 7, !dbg !50
  %275 = extractelement <8 x float> %272, i64 7, !dbg !50
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !50
  %277 = extractelement <8 x i1> %273, i64 6, !dbg !50
  %278 = extractelement <8 x float> %272, i64 6, !dbg !50
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !50
  %280 = extractelement <8 x i1> %273, i64 5, !dbg !50
  %281 = extractelement <8 x float> %272, i64 5, !dbg !50
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !50
  %283 = extractelement <8 x i1> %273, i64 4, !dbg !50
  %284 = extractelement <8 x float> %272, i64 4, !dbg !50
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !50
  %286 = extractelement <8 x i1> %273, i64 3, !dbg !50
  %287 = extractelement <8 x float> %272, i64 3, !dbg !50
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !50
  %289 = extractelement <8 x i1> %273, i64 2, !dbg !50
  %290 = extractelement <8 x float> %272, i64 2, !dbg !50
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !50
  %292 = extractelement <8 x i1> %273, i64 1, !dbg !50
  %293 = extractelement <8 x float> %272, i64 1, !dbg !50
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !50
  %295 = extractelement <8 x i1> %273, i64 0, !dbg !50
  %296 = extractelement <8 x float> %272, i64 0, !dbg !50
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !50
  %298 = shl i32 %189, 8, !dbg !51
  %299 = shl i32 %190, 8, !dbg !51
  %300 = shl i32 %186, 16, !dbg !52
  %301 = add i32 %300, %.decomposed, !dbg !53
  %302 = add i32 %301, %298, !dbg !54
  %303 = add i32 %301, %299, !dbg !54
  %304 = sext i32 %302 to i64, !dbg !55
  %305 = getelementptr float, ptr addrspace(1) %6, i64 %304, !dbg !55
  %306 = sext i32 %303 to i64, !dbg !55
  %307 = getelementptr float, ptr addrspace(1) %6, i64 %306, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %308 = shl i32 %12, 4, !dbg !56
  %309 = and i32 %308, 1008, !dbg !56
  %310 = or disjoint i32 %309, %.lobit, !dbg !56
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !56
  %312 = getelementptr float, ptr addrspace(3) %311, i32 %310, !dbg !56
  %313 = bitcast float %276 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #4, !dbg !56
  %314 = or disjoint i32 %310, 4, !dbg !56
  %315 = or disjoint i32 %309, 4, !dbg !56
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i32 %315, !dbg !56
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %314, !dbg !56
  %318 = bitcast float %279 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #4, !dbg !56
  %319 = or disjoint i32 %310, 8, !dbg !56
  %320 = or disjoint i32 %309, 8, !dbg !56
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i32 %320, !dbg !56
  %322 = getelementptr float, ptr addrspace(3) %321, i32 %319, !dbg !56
  %323 = bitcast float %282 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #4, !dbg !56
  %324 = or disjoint i32 %310, 12, !dbg !56
  %325 = or disjoint i32 %309, 12, !dbg !56
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %325, !dbg !56
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %324, !dbg !56
  %328 = bitcast float %285 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #4, !dbg !56
  %329 = or disjoint i32 %310, 2, !dbg !56
  %330 = getelementptr float, ptr addrspace(3) %311, i32 %329, !dbg !56
  %331 = bitcast float %288 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 true) #4, !dbg !56
  %332 = or disjoint i32 %310, 6, !dbg !56
  %333 = getelementptr float, ptr addrspace(3) %316, i32 %332, !dbg !56
  %334 = bitcast float %291 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #4, !dbg !56
  %335 = or disjoint i32 %310, 10, !dbg !56
  %336 = getelementptr float, ptr addrspace(3) %321, i32 %335, !dbg !56
  %337 = bitcast float %294 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #4, !dbg !56
  %338 = or disjoint i32 %310, 14, !dbg !56
  %339 = getelementptr float, ptr addrspace(3) %326, i32 %338, !dbg !56
  %340 = bitcast float %297 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %.idx = shl nuw nsw i32 %201, 3, !dbg !56
  %341 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !56
  %342 = shl nuw nsw i32 %201, 1, !dbg !56
  %343 = or disjoint i32 %342, 1024, !dbg !56
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !56
  %345 = load <4 x i32>, ptr addrspace(3) %344, align 16, !dbg !56
  %.extract = load i32, ptr addrspace(3) %341, align 16, !dbg !56
  %346 = getelementptr inbounds i8, ptr addrspace(3) %341, i32 4, !dbg !56
  %.extract9 = load i32, ptr addrspace(3) %346, align 4, !dbg !56
  %347 = getelementptr inbounds i8, ptr addrspace(3) %341, i32 8, !dbg !56
  %.extract10 = load i32, ptr addrspace(3) %347, align 8, !dbg !56
  %348 = getelementptr inbounds i8, ptr addrspace(3) %341, i32 12, !dbg !56
  %.extract11 = load i32, ptr addrspace(3) %348, align 4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %305, i1 %192) #4, !dbg !56
  %.extract12 = extractelement <4 x i32> %345, i64 0, !dbg !56
  %.extract13 = extractelement <4 x i32> %345, i64 1, !dbg !56
  %.extract14 = extractelement <4 x i32> %345, i64 2, !dbg !56
  %.extract15 = extractelement <4 x i32> %345, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %307, i1 %191) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chpkzmamrinkofmye3hsfimvddb7xudxygedx6ls64oqmoqmbf2p.py", directory: "inductor_cache/hp")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_14", linkageName: "triton_poi_fused_add_native_group_norm_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 33, scope: !7)
!25 = !DILocation(line: 33, column: 45, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 50, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 45, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 43, column: 27, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 31, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 49, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 50, column: 34, scope: !7)
!52 = !DILocation(line: 50, column: 45, scope: !7)
!53 = !DILocation(line: 50, column: 30, scope: !7)
!54 = !DILocation(line: 50, column: 39, scope: !7)
!55 = !DILocation(line: 50, column: 25, scope: !7)
!56 = !DILocation(line: 50, column: 57, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
