#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_native_layer_norm_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":19:0), %arg4: i32 loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<1028> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<257> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1056> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<3> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_0 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_1 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_1 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = arith.muli %6, %cst_2 : tensor<256xi32, #blocked> loc(#loc9)
    %9 = arith.muli %7, %cst_3 : tensor<256xi32, #blocked> loc(#loc10)
    %10 = arith.addi %8, %9 : tensor<256xi32, #blocked> loc(#loc11)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %12 = tt.addptr %11, %10 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc12)
    %13 = tt.load %12, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %14 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %15 = tt.addptr %14, %8 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc14)
    %16 = tt.load %15, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    %17 = arith.addi %8, %cst_4 : tensor<256xi32, #blocked> loc(#loc16)
    %18 = arith.addi %17, %9 : tensor<256xi32, #blocked> loc(#loc17)
    %19 = tt.addptr %11, %18 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc18)
    %20 = tt.load %19, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc19)
    %21 = tt.addptr %14, %17 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc20)
    %22 = tt.load %21, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc21)
    %23 = arith.addi %8, %cst_5 : tensor<256xi32, #blocked> loc(#loc22)
    %24 = arith.addi %23, %9 : tensor<256xi32, #blocked> loc(#loc23)
    %25 = tt.addptr %11, %24 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc24)
    %26 = tt.load %25, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc25)
    %27 = tt.addptr %14, %23 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc26)
    %28 = tt.load %27, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc27)
    %29 = arith.addi %8, %cst_6 : tensor<256xi32, #blocked> loc(#loc28)
    %30 = arith.addi %29, %9 : tensor<256xi32, #blocked> loc(#loc29)
    %31 = tt.addptr %11, %30 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc30)
    %32 = tt.load %31, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc31)
    %33 = tt.addptr %14, %29 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc32)
    %34 = tt.load %33, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc33)
    %35 = arith.addf %13, %16 : tensor<256xf32, #blocked> loc(#loc34)
    %36 = arith.addf %20, %22 : tensor<256xf32, #blocked> loc(#loc35)
    %37 = arith.addf %35, %36 : tensor<256xf32, #blocked> loc(#loc36)
    %38 = arith.addf %26, %28 : tensor<256xf32, #blocked> loc(#loc37)
    %39 = arith.addf %37, %38 : tensor<256xf32, #blocked> loc(#loc38)
    %40 = arith.addf %32, %34 : tensor<256xf32, #blocked> loc(#loc39)
    %41 = arith.addf %39, %40 : tensor<256xf32, #blocked> loc(#loc40)
    %42 = arith.divf %41, %cst : tensor<256xf32, #blocked> loc(#loc41)
    %43 = arith.subf %35, %42 : tensor<256xf32, #blocked> loc(#loc42)
    %44 = arith.mulf %43, %43 : tensor<256xf32, #blocked> loc(#loc43)
    %45 = arith.subf %36, %42 : tensor<256xf32, #blocked> loc(#loc44)
    %46 = arith.mulf %45, %45 : tensor<256xf32, #blocked> loc(#loc45)
    %47 = arith.addf %44, %46 : tensor<256xf32, #blocked> loc(#loc46)
    %48 = arith.subf %38, %42 : tensor<256xf32, #blocked> loc(#loc47)
    %49 = arith.mulf %48, %48 : tensor<256xf32, #blocked> loc(#loc48)
    %50 = arith.addf %47, %49 : tensor<256xf32, #blocked> loc(#loc49)
    %51 = arith.subf %40, %42 : tensor<256xf32, #blocked> loc(#loc50)
    %52 = arith.mulf %51, %51 : tensor<256xf32, #blocked> loc(#loc51)
    %53 = arith.addf %50, %52 : tensor<256xf32, #blocked> loc(#loc52)
    %54 = arith.divf %53, %cst : tensor<256xf32, #blocked> loc(#loc53)
    %55 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc54)
    %56 = tt.addptr %55, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc54)
    tt.store %56, %42, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc55)
    %57 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc56)
    %58 = tt.addptr %57, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc56)
    tt.store %58, %54, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc57)
    tt.return loc(#loc58)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":21:28)
#loc3 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":21:33)
#loc4 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":22:36)
#loc5 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":22:23)
#loc6 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":23:21)
#loc7 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":24:19)
#loc8 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":25:19)
#loc9 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":27:32)
#loc10 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":27:42)
#loc11 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":27:37)
#loc12 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":27:30)
#loc13 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":27:47)
#loc14 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":28:30)
#loc15 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":28:37)
#loc16 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":29:34)
#loc17 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":29:41)
#loc18 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":29:30)
#loc19 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":29:51)
#loc20 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":30:30)
#loc21 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":30:41)
#loc22 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":31:34)
#loc23 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":31:41)
#loc24 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":31:30)
#loc25 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":31:51)
#loc26 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":32:30)
#loc27 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":32:41)
#loc28 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":33:35)
#loc29 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":33:42)
#loc30 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":33:31)
#loc31 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":33:52)
#loc32 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":34:31)
#loc33 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":34:42)
#loc34 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":35:18)
#loc35 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":36:18)
#loc36 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":37:18)
#loc37 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":38:18)
#loc38 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":39:19)
#loc39 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":40:20)
#loc40 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":41:20)
#loc41 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":43:20)
#loc42 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":44:19)
#loc43 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":45:20)
#loc44 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":46:19)
#loc45 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":47:20)
#loc46 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":48:20)
#loc47 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":49:19)
#loc48 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":50:20)
#loc49 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":51:20)
#loc50 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":52:20)
#loc51 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":53:20)
#loc52 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":54:20)
#loc53 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":55:20)
#loc54 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":56:25)
#loc55 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":56:37)
#loc56 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":57:25)
#loc57 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":57:37)
#loc58 = loc("inductor_cache/qe/cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py":57:4)
