; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_native_layer_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 1028, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %14 = sdiv i32 %.frozen, 257, !dbg !15
  %15 = mul i32 %14, 257, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %.frozen1 = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen1, 257, !dbg !15
  %17 = mul i32 %16, 257, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %17, !dbg !16
  %18 = shl nsw i32 %.decomposed, 2, !dbg !17
  %19 = shl nsw i32 %.decomposed2, 2, !dbg !17
  %20 = mul i32 %14, 1056, !dbg !18
  %21 = mul i32 %16, 1056, !dbg !18
  %22 = add i32 %18, %20, !dbg !19
  %23 = add i32 %19, %21, !dbg !19
  %24 = sext i32 %22 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = sext i32 %23 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %13) #1, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #1, !dbg !21
  %30 = sext i32 %18 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %32 = sext i32 %19 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #1, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !23
  %36 = or disjoint i32 %18, 1, !dbg !24
  %37 = or disjoint i32 %19, 1, !dbg !24
  %38 = add i32 %36, %20, !dbg !25
  %39 = add i32 %37, %21, !dbg !25
  %40 = sext i32 %38 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %39 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %13) #1, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !27
  %46 = sext i32 %36 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !28
  %48 = sext i32 %37 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %13) #1, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %13) #1, !dbg !29
  %52 = or disjoint i32 %18, 2, !dbg !30
  %53 = or disjoint i32 %19, 2, !dbg !30
  %54 = add i32 %52, %20, !dbg !31
  %55 = add i32 %53, %21, !dbg !31
  %56 = sext i32 %54 to i64, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !32
  %58 = sext i32 %55 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %13) #1, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %13) #1, !dbg !33
  %62 = sext i32 %52 to i64, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !34
  %64 = sext i32 %53 to i64, !dbg !34
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !34
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %13) #1, !dbg !35
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %13) #1, !dbg !35
  %68 = or disjoint i32 %18, 3, !dbg !36
  %69 = or disjoint i32 %19, 3, !dbg !36
  %70 = add i32 %68, %20, !dbg !37
  %71 = add i32 %69, %21, !dbg !37
  %72 = sext i32 %70 to i64, !dbg !38
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !38
  %74 = sext i32 %71 to i64, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !38
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %13) #1, !dbg !39
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %13) #1, !dbg !39
  %78 = sext i32 %68 to i64, !dbg !40
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !40
  %80 = sext i32 %69 to i64, !dbg !40
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !40
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %13) #1, !dbg !41
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %13) #1, !dbg !41
  %84 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !21
  %85 = insertelement <2 x i32> %84, i32 %44, i64 1, !dbg !21
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !21
  %87 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !23
  %88 = insertelement <2 x i32> %87, i32 %50, i64 1, !dbg !23
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !23
  %90 = fadd <2 x float> %86, %89, !dbg !42
  %91 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !21
  %92 = insertelement <2 x i32> %91, i32 %45, i64 1, !dbg !21
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !21
  %94 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !23
  %95 = insertelement <2 x i32> %94, i32 %51, i64 1, !dbg !23
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !23
  %97 = fadd <2 x float> %93, %96, !dbg !42
  %98 = extractelement <2 x float> %90, i64 0, !dbg !43
  %99 = extractelement <2 x float> %90, i64 1, !dbg !44
  %100 = fadd float %98, %99, !dbg !45
  %101 = extractelement <2 x float> %97, i64 0, !dbg !43
  %102 = extractelement <2 x float> %97, i64 1, !dbg !44
  %103 = fadd float %101, %102, !dbg !45
  %104 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !33
  %105 = insertelement <2 x i32> %104, i32 %76, i64 1, !dbg !33
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !33
  %107 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !35
  %108 = insertelement <2 x i32> %107, i32 %82, i64 1, !dbg !35
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !35
  %110 = fadd <2 x float> %106, %109, !dbg !46
  %111 = extractelement <2 x float> %110, i64 0, !dbg !47
  %112 = fadd float %100, %111, !dbg !48
  %113 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !33
  %114 = insertelement <2 x i32> %113, i32 %77, i64 1, !dbg !33
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !33
  %116 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !35
  %117 = insertelement <2 x i32> %116, i32 %83, i64 1, !dbg !35
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !35
  %119 = fadd <2 x float> %115, %118, !dbg !46
  %120 = extractelement <2 x float> %119, i64 0, !dbg !47
  %121 = fadd float %103, %120, !dbg !48
  %122 = extractelement <2 x float> %110, i64 1, !dbg !49
  %123 = fadd float %112, %122, !dbg !50
  %124 = extractelement <2 x float> %119, i64 1, !dbg !49
  %125 = fadd float %121, %124, !dbg !50
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 4.000000e+00) #1, !dbg !51
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 4.000000e+00) #1, !dbg !51
  %128 = fsub float %98, %126, !dbg !43
  %129 = fsub float %101, %127, !dbg !43
  %130 = fmul float %128, %128, !dbg !52
  %131 = fmul float %129, %129, !dbg !52
  %132 = fsub float %99, %126, !dbg !44
  %133 = fsub float %102, %127, !dbg !44
  %134 = fmul float %132, %132, !dbg !53
  %135 = fmul float %133, %133, !dbg !53
  %136 = fadd float %130, %134, !dbg !54
  %137 = fadd float %131, %135, !dbg !54
  %138 = fsub float %111, %126, !dbg !47
  %139 = fsub float %120, %127, !dbg !47
  %140 = fmul float %138, %138, !dbg !55
  %141 = fmul float %139, %139, !dbg !55
  %142 = fadd float %140, %136, !dbg !56
  %143 = fadd float %141, %137, !dbg !56
  %144 = fsub float %122, %126, !dbg !49
  %145 = fsub float %124, %127, !dbg !49
  %146 = fmul float %144, %144, !dbg !57
  %147 = fmul float %145, %145, !dbg !57
  %148 = fadd float %146, %142, !dbg !58
  %149 = fadd float %147, %143, !dbg !58
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 4.000000e+00) #1, !dbg !59
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 4.000000e+00) #1, !dbg !59
  %152 = sext i32 %11 to i64, !dbg !60
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !60
  %154 = bitcast float %126 to i32, !dbg !61
  %155 = bitcast float %127 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %153, i1 %13) #1, !dbg !61
  %156 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !62
  %157 = bitcast float %150 to i32, !dbg !63
  %158 = bitcast float %151 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %156, i1 %13) #1, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqepksz3lppms52r4255gyxmlsytmgvrtuhau4wkinddotmblcx3.py", directory: "inductor_cache/qe")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_7", linkageName: "triton_poi_fused_add_native_layer_norm_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 42, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 47, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 37, scope: !7)
!24 = !DILocation(line: 29, column: 34, scope: !7)
!25 = !DILocation(line: 29, column: 41, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 51, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 34, scope: !7)
!31 = !DILocation(line: 31, column: 41, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 32, column: 30, scope: !7)
!35 = !DILocation(line: 32, column: 41, scope: !7)
!36 = !DILocation(line: 33, column: 35, scope: !7)
!37 = !DILocation(line: 33, column: 42, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 52, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 42, scope: !7)
!42 = !DILocation(line: 35, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 19, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 39, column: 19, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 41, column: 20, scope: !7)
!51 = !DILocation(line: 43, column: 20, scope: !7)
!52 = !DILocation(line: 45, column: 20, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 53, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 20, scope: !7)
!59 = !DILocation(line: 55, column: 20, scope: !7)
!60 = !DILocation(line: 56, column: 25, scope: !7)
!61 = !DILocation(line: 56, column: 37, scope: !7)
!62 = !DILocation(line: 57, column: 25, scope: !7)
!63 = !DILocation(line: 57, column: 37, scope: !7)
!64 = !DILocation(line: 57, column: 4, scope: !7)
