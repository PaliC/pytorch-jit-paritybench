; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_slice_13(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %.lobit1 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %.lobit1, 3, !dbg !12
  %11 = or disjoint i32 %10, 4, !dbg !12
  %12 = or disjoint i32 %10, 8, !dbg !12
  %13 = or disjoint i32 %10, 12, !dbg !12
  %14 = or disjoint i32 %10, 16, !dbg !12
  %15 = or disjoint i32 %10, 20, !dbg !12
  %16 = or disjoint i32 %10, 24, !dbg !12
  %17 = or disjoint i32 %10, 28, !dbg !12
  %18 = or disjoint i32 %6, %9, !dbg !13
  %19 = or disjoint i32 %6, %10, !dbg !13
  %20 = or disjoint i32 %6, %11, !dbg !13
  %21 = or disjoint i32 %6, %12, !dbg !13
  %22 = or disjoint i32 %6, %13, !dbg !13
  %23 = or disjoint i32 %6, %14, !dbg !13
  %24 = or disjoint i32 %6, %15, !dbg !13
  %25 = or disjoint i32 %6, %16, !dbg !13
  %26 = or disjoint i32 %6, %17, !dbg !13
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %28 = shl i32 %27, 5, !dbg !15
  %29 = lshr i32 %7, 3, !dbg !16
  %30 = and i32 %29, 15, !dbg !16
  %31 = and i32 %7, 31, !dbg !16
  %32 = or disjoint i32 %28, %30, !dbg !17
  %33 = or disjoint i32 %32, 16, !dbg !17
  %34 = or disjoint i32 %28, %31, !dbg !17
  %35 = icmp slt i32 %32, 81, !dbg !18
  %36 = icmp slt i32 %33, 81, !dbg !18
  %37 = icmp slt i32 %34, 81, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %38 = sdiv i32 %.frozen, 256, !dbg !19
  %39 = mul i32 %38, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = add nsw i32 %.decomposed, 256, !dbg !21
  %41 = shl i32 %32, 9, !dbg !22
  %42 = shl i32 %33, 9, !dbg !22
  %43 = mul i32 %38, 41472, !dbg !23
  %44 = add i32 %43, %40, !dbg !24
  %45 = add i32 %44, %41, !dbg !25
  %46 = add i32 %44, %42, !dbg !25
  %47 = sext i32 %45 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %46 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %35) #2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %36) #2, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %61 = mul i32 %19, 81, !dbg !28
  %62 = mul i32 %20, 81, !dbg !28
  %63 = mul i32 %21, 81, !dbg !28
  %64 = mul i32 %22, 81, !dbg !28
  %65 = mul i32 %23, 81, !dbg !28
  %66 = mul i32 %24, 81, !dbg !28
  %67 = mul i32 %25, 81, !dbg !28
  %68 = mul i32 %26, 81, !dbg !28
  %69 = add i32 %34, %61, !dbg !29
  %70 = add i32 %34, %62, !dbg !29
  %71 = add i32 %34, %63, !dbg !29
  %72 = add i32 %34, %64, !dbg !29
  %73 = add i32 %34, %65, !dbg !29
  %74 = add i32 %34, %66, !dbg !29
  %75 = add i32 %34, %67, !dbg !29
  %76 = add i32 %34, %68, !dbg !29
  %77 = sext i32 %69 to i64, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !30
  %79 = sext i32 %70 to i64, !dbg !30
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !30
  %81 = sext i32 %71 to i64, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !30
  %83 = sext i32 %72 to i64, !dbg !30
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !30
  %85 = sext i32 %73 to i64, !dbg !30
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !30
  %87 = sext i32 %74 to i64, !dbg !30
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !30
  %89 = sext i32 %75 to i64, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !30
  %91 = sext i32 %76 to i64, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !30
  %93 = shl i32 %7, 7, !dbg !31
  %94 = and i32 %93, 896, !dbg !31
  %95 = or disjoint i32 %94, %30, !dbg !31
  %96 = and i32 %7, 127, !dbg !31
  %97 = lshr exact i32 %94, 5, !dbg !31
  %98 = add nuw nsw i32 %97, %95, !dbg !31
  %99 = zext nneg i32 %98 to i64, !dbg !31
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !31
  %101 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !31
  %102 = or disjoint i32 %95, 32, !dbg !31
  %103 = lshr i32 %102, 5, !dbg !31
  %104 = add nuw nsw i32 %103, %102, !dbg !31
  %105 = zext nneg i32 %104 to i64, !dbg !31
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %105, !dbg !31
  %107 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !31
  %108 = or disjoint i32 %95, 64, !dbg !31
  %109 = lshr i32 %108, 5, !dbg !31
  %110 = add nuw nsw i32 %109, %108, !dbg !31
  %111 = zext nneg i32 %110 to i64, !dbg !31
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %111, !dbg !31
  %113 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !31
  %114 = or disjoint i32 %95, 96, !dbg !31
  %115 = lshr i32 %114, 5, !dbg !31
  %116 = add nuw nsw i32 %115, %114, !dbg !31
  %117 = zext nneg i32 %116 to i64, !dbg !31
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %117, !dbg !31
  %119 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !31
  %120 = or disjoint i32 %95, 16, !dbg !31
  %121 = add nuw nsw i32 %120, %97, !dbg !31
  %122 = zext nneg i32 %121 to i64, !dbg !31
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %122, !dbg !31
  %124 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !31
  %125 = or disjoint i32 %95, 48, !dbg !31
  %126 = lshr i32 %125, 5, !dbg !31
  %127 = add nuw nsw i32 %126, %125, !dbg !31
  %128 = zext nneg i32 %127 to i64, !dbg !31
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %128, !dbg !31
  %130 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !31
  %131 = or disjoint i32 %95, 80, !dbg !31
  %132 = lshr i32 %131, 5, !dbg !31
  %133 = add nuw nsw i32 %132, %131, !dbg !31
  %134 = zext nneg i32 %133 to i64, !dbg !31
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !31
  %136 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !31
  %137 = or disjoint i32 %95, 112, !dbg !31
  %138 = lshr i32 %137, 5, !dbg !31
  %139 = add nuw nsw i32 %138, %137, !dbg !31
  %140 = zext nneg i32 %139 to i64, !dbg !31
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !31
  %142 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %143 = lshr i32 %96, 5, !dbg !31
  %144 = add nuw nsw i32 %143, %96, !dbg !31
  %145 = zext nneg i32 %144 to i64, !dbg !31
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !31
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !31
  %148 = or disjoint i32 %96, 128, !dbg !31
  %149 = lshr i32 %148, 5, !dbg !31
  %150 = add nuw nsw i32 %149, %148, !dbg !31
  %151 = zext nneg i32 %150 to i64, !dbg !31
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %151, !dbg !31
  %153 = load i32, ptr addrspace(3) %152, align 4, !dbg !31
  %154 = or disjoint i32 %96, 256, !dbg !31
  %155 = lshr i32 %154, 5, !dbg !31
  %156 = add nuw nsw i32 %155, %154, !dbg !31
  %157 = zext nneg i32 %156 to i64, !dbg !31
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %157, !dbg !31
  %159 = load i32, ptr addrspace(3) %158, align 4, !dbg !31
  %160 = or disjoint i32 %96, 384, !dbg !31
  %161 = lshr i32 %160, 5, !dbg !31
  %162 = add nuw nsw i32 %161, %160, !dbg !31
  %163 = zext nneg i32 %162 to i64, !dbg !31
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %163, !dbg !31
  %165 = load i32, ptr addrspace(3) %164, align 4, !dbg !31
  %166 = or disjoint i32 %96, 512, !dbg !31
  %167 = lshr i32 %166, 5, !dbg !31
  %168 = add nuw nsw i32 %167, %166, !dbg !31
  %169 = zext nneg i32 %168 to i64, !dbg !31
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !31
  %171 = load i32, ptr addrspace(3) %170, align 4, !dbg !31
  %172 = or disjoint i32 %96, 640, !dbg !31
  %173 = lshr i32 %172, 5, !dbg !31
  %174 = add nuw nsw i32 %173, %172, !dbg !31
  %175 = zext nneg i32 %174 to i64, !dbg !31
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %175, !dbg !31
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !31
  %178 = or disjoint i32 %96, 768, !dbg !31
  %179 = lshr i32 %178, 5, !dbg !31
  %180 = add nuw nsw i32 %179, %178, !dbg !31
  %181 = zext nneg i32 %180 to i64, !dbg !31
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %181, !dbg !31
  %183 = load i32, ptr addrspace(3) %182, align 4, !dbg !31
  %184 = or disjoint i32 %96, 896, !dbg !31
  %185 = lshr i32 %184, 5, !dbg !31
  %186 = add nuw nsw i32 %185, %184, !dbg !31
  %187 = zext nneg i32 %186 to i64, !dbg !31
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %187, !dbg !31
  %189 = load i32, ptr addrspace(3) %188, align 4, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %78, i1 %37) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %80, i1 %37) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %82, i1 %37) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %84, i1 %37) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %86, i1 %37) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %88, i1 %37) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %90, i1 %37) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %189, ptr addrspace(1) %92, i1 %37) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv62wiuvi5mh4x7toxipq4yyodfvtlmpy3wn5yyieaqc7vsxu4ny.py", directory: "inductor_cache/v6")
!4 = !{ptr @triton_poi_fused_slice_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_slice_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_slice_13", linkageName: "triton_poi_fused_slice_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 36, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 32, column: 41, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 33, column: 33, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 44, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
