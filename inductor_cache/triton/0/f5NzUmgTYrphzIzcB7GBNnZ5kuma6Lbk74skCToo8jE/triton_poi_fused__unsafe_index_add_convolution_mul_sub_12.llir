; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !14
  %19 = icmp slt i32 %18, 16, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %20 = sdiv i32 %.frozen, 4, !dbg !16
  %21 = mul i32 %20, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %.frozen2 = freeze i32 %17, !dbg !18
  %22 = sdiv i32 %.frozen2, 256, !dbg !18
  %23 = mul i32 %22, 256, !dbg !19
  %.decomposed3 = sub i32 %.frozen2, %23, !dbg !19
  %24 = sext i32 %20 to i64, !dbg !20
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %19) #1, !dbg !21
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %19) #1, !dbg !21
  %28 = sext i32 %.decomposed to i64, !dbg !22
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %19) #1, !dbg !23
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %19) #1, !dbg !23
  %32 = sext i32 %.decomposed3 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !24
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !25
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !25
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !25
  %37 = getelementptr i64, ptr addrspace(1) %4, i64 %28, !dbg !26
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %19) #1, !dbg !27
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %19) #1, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %19) #1, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %19) #1, !dbg !29
  %43 = getelementptr i64, ptr addrspace(1) %6, i64 %24, !dbg !30
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %19) #1, !dbg !31
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %19) #1, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #1, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #1, !dbg !33
  %49 = bitcast i32 %48 to float, !dbg !33
  %50 = lshr i64 %27, 62, !dbg !34
  %51 = and i64 %50, 2, !dbg !34
  %52 = add i64 %51, %27, !dbg !34
  %53 = lshr i64 %31, 62, !dbg !35
  %54 = and i64 %53, 2, !dbg !35
  %55 = add i64 %54, %31, !dbg !35
  %56 = shl i64 %52, 9, !dbg !36
  %57 = shl i32 %22, 10, !dbg !37
  %58 = sext i32 %57 to i64, !dbg !38
  %.idx = shl i64 %55, 10, !dbg !39
  %59 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !39
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %32, !dbg !39
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %56, !dbg !39
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %58, !dbg !39
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %19) #1, !dbg !40
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !40
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !40
  %66 = lshr i64 %39, 62, !dbg !41
  %67 = and i64 %66, 2, !dbg !41
  %68 = add i64 %67, %39, !dbg !41
  %.idx1 = shl i64 %68, 10, !dbg !42
  %69 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx1, !dbg !42
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %32, !dbg !42
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %56, !dbg !42
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %58, !dbg !42
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %19) #1, !dbg !43
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !43
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !43
  %76 = lshr i64 %45, 62, !dbg !44
  %77 = and i64 %76, 2, !dbg !44
  %78 = add i64 %77, %45, !dbg !44
  %79 = shl i64 %78, 9, !dbg !45
  %80 = getelementptr float, ptr addrspace(1) %60, i64 %79, !dbg !46
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %58, !dbg !46
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 %19) #1, !dbg !47
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !47
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !47
  %85 = getelementptr float, ptr addrspace(1) %70, i64 %79, !dbg !48
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %58, !dbg !48
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %86, i1 %19) #1, !dbg !49
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !49
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !49
  %90 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !47
  %91 = insertelement <2 x i32> %90, i32 %64, i64 1, !dbg !47
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !47
  %93 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !50
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !50
  %95 = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %96 = fadd <2 x float> %95, %92, !dbg !50
  %97 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !49
  %98 = insertelement <2 x i32> %97, i32 %74, i64 1, !dbg !49
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !49
  %100 = fadd <2 x float> %95, %99, !dbg !51
  %101 = fsub <2 x float> %100, %96, !dbg !52
  %102 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !53
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !53
  %104 = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %105 = fmul <2 x float> %101, %104, !dbg !53
  %106 = fadd <2 x float> %96, %105, !dbg !54
  %107 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !47
  %108 = insertelement <2 x i32> %107, i32 %65, i64 1, !dbg !47
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !47
  %110 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !50
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !50
  %112 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %113 = fadd <2 x float> %112, %109, !dbg !50
  %114 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !49
  %115 = insertelement <2 x i32> %114, i32 %75, i64 1, !dbg !49
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !49
  %117 = fadd <2 x float> %112, %116, !dbg !51
  %118 = fsub <2 x float> %117, %113, !dbg !52
  %119 = fmul <2 x float> %118, %104, !dbg !53
  %120 = fadd <2 x float> %113, %119, !dbg !54
  %121 = extractelement <2 x float> %106, i64 0, !dbg !55
  %122 = extractelement <2 x float> %106, i64 1, !dbg !56
  %123 = fsub float %121, %122, !dbg !55
  %124 = extractelement <2 x float> %120, i64 0, !dbg !55
  %125 = extractelement <2 x float> %120, i64 1, !dbg !56
  %126 = fsub float %124, %125, !dbg !55
  %127 = fmul float %123, %49, !dbg !57
  %128 = fmul float %126, %49, !dbg !57
  %129 = fadd float %122, %127, !dbg !56
  %130 = fadd float %125, %128, !dbg !56
  %131 = shl i32 %18, 8, !dbg !58
  %132 = add i32 %.decomposed3, %131, !dbg !59
  %133 = shl i32 %22, 12, !dbg !60
  %134 = add i32 %132, %133, !dbg !61
  %135 = sext i32 %134 to i64, !dbg !62
  %136 = getelementptr float, ptr addrspace(1) %8, i64 %135, !dbg !62
  %137 = bitcast float %129 to i32, !dbg !63
  %138 = bitcast float %130 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %137, i32 %138, ptr addrspace(1) %136, i1 %19) #1, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg3fiiehl3syuq5yykkpwi7bsyoyvlpxtdko5e3oj4zq53sc4lua.py", directory: "inductor_cache/g3")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_12", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 44, column: 32, scope: !7)
!35 = !DILocation(line: 47, column: 32, scope: !7)
!36 = !DILocation(line: 48, column: 50, scope: !7)
!37 = !DILocation(line: 48, column: 62, scope: !7)
!38 = !DILocation(line: 48, column: 57, scope: !7)
!39 = !DILocation(line: 48, column: 30, scope: !7)
!40 = !DILocation(line: 48, column: 67, scope: !7)
!41 = !DILocation(line: 52, column: 35, scope: !7)
!42 = !DILocation(line: 53, column: 31, scope: !7)
!43 = !DILocation(line: 53, column: 69, scope: !7)
!44 = !DILocation(line: 60, column: 35, scope: !7)
!45 = !DILocation(line: 61, column: 51, scope: !7)
!46 = !DILocation(line: 61, column: 31, scope: !7)
!47 = !DILocation(line: 61, column: 69, scope: !7)
!48 = !DILocation(line: 63, column: 31, scope: !7)
!49 = !DILocation(line: 63, column: 70, scope: !7)
!50 = !DILocation(line: 62, column: 20, scope: !7)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 68, column: 20, scope: !7)
!56 = !DILocation(line: 70, column: 20, scope: !7)
!57 = !DILocation(line: 69, column: 20, scope: !7)
!58 = !DILocation(line: 71, column: 34, scope: !7)
!59 = !DILocation(line: 71, column: 30, scope: !7)
!60 = !DILocation(line: 71, column: 44, scope: !7)
!61 = !DILocation(line: 71, column: 39, scope: !7)
!62 = !DILocation(line: 71, column: 25, scope: !7)
!63 = !DILocation(line: 71, column: 56, scope: !7)
!64 = !DILocation(line: 71, column: 4, scope: !7)
