; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_69(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 7, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = and i32 %25, 127, !dbg !12
  %27 = or disjoint i32 %24, %26, !dbg !13
  %.frozen = freeze i32 %27, !dbg !14
  %28 = sdiv i32 %.frozen, 1024, !dbg !14
  %29 = mul i32 %28, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %29, !dbg !15
  %30 = icmp slt i32 %.decomposed, 352, !dbg !16
  %31 = mul nsw i32 %28, 352, !dbg !17
  %32 = add nsw i32 %31, %.decomposed, !dbg !18
  %33 = sext i32 %32 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %30, i32 0, i1 %30) #3, !dbg !20
  %36 = sext i32 %.decomposed to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %30, i32 0, i1 %30) #3, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %30, i32 0, i1 %30) #3, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = fadd float %41, 0x3EE4F8B580000000, !dbg !25
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %43, 0, !dbg !26
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %44, 0, !dbg !26
  br i1 %.not.i, label %50, label %45, !dbg !26

45:                                               ; preds = %22
  br i1 %.not1.i, label %48, label %46, !dbg !26

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

50:                                               ; preds = %22
  br i1 %.not1.i, label %53, label %51, !dbg !26

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !26
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %30, i32 0, i1 %30) #3, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %60 = add nsw i32 %.decomposed, -352, !dbg !32
  %61 = icmp ult i32 %60, 320, !dbg !32
  %62 = mul nsw i32 %28, 320, !dbg !33
  %63 = add nsw i32 %62, %60, !dbg !34
  %64 = sext i32 %63 to i64, !dbg !35
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %64, !dbg !35
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %61, i32 0, i1 %61) #3, !dbg !36
  %67 = sext i32 %60 to i64, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %67, !dbg !37
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %61, i32 0, i1 %61) #3, !dbg !38
  %70 = getelementptr float, ptr addrspace(1) %7, i64 %67, !dbg !39
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %61, i32 0, i1 %61) #3, !dbg !40
  %72 = bitcast i32 %71 to float, !dbg !40
  %73 = fadd float %72, 0x3EE4F8B580000000, !dbg !41
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %74, 0, !dbg !42
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !42
  br i1 %.not.i1, label %81, label %76, !dbg !42

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !42

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !42

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !42
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %8, i64 %67, !dbg !44
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %61, i32 0, i1 %61) #3, !dbg !45
  %89 = getelementptr float, ptr addrspace(1) %9, i64 %67, !dbg !46
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %61, i32 0, i1 %61) #3, !dbg !47
  %91 = add nsw i32 %.decomposed, -672, !dbg !48
  %92 = icmp ult i32 %91, 224, !dbg !48
  %93 = mul nsw i32 %28, 224, !dbg !49
  %94 = add nsw i32 %93, %91, !dbg !50
  %95 = sext i32 %94 to i64, !dbg !51
  %96 = getelementptr float, ptr addrspace(1) %10, i64 %95, !dbg !51
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %92, i32 0, i1 %92) #3, !dbg !52
  %98 = sext i32 %91 to i64, !dbg !53
  %99 = getelementptr float, ptr addrspace(1) %11, i64 %98, !dbg !53
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %92, i32 0, i1 %92) #3, !dbg !54
  %101 = getelementptr float, ptr addrspace(1) %12, i64 %98, !dbg !55
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %92, i32 0, i1 %92) #3, !dbg !56
  %103 = bitcast i32 %102 to float, !dbg !56
  %104 = fadd float %103, 0x3EE4F8B580000000, !dbg !57
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i6 = icmp eq i32 %105, 0, !dbg !58
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i9 = icmp eq i32 %106, 0, !dbg !58
  br i1 %.not.i6, label %112, label %107, !dbg !58

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !58

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

112:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %115, label %113, !dbg !58

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

__nv_sqrtf.exit10:                                ; preds = %108, %110, %113, %115
  %.0.i8 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !58
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !59
  %118 = getelementptr float, ptr addrspace(1) %13, i64 %98, !dbg !60
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %92, i32 0, i1 %92) #3, !dbg !61
  %120 = getelementptr float, ptr addrspace(1) %14, i64 %98, !dbg !62
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %92, i32 0, i1 %92) #3, !dbg !63
  %122 = icmp sgt i32 %.decomposed, 895, !dbg !64
  %123 = shl nsw i32 %28, 7, !dbg !65
  %124 = add nsw i32 %.decomposed, -896, !dbg !66
  %125 = add nsw i32 %123, %124, !dbg !67
  %126 = sext i32 %125 to i64, !dbg !68
  %127 = getelementptr float, ptr addrspace(1) %15, i64 %126, !dbg !68
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %122, i32 0, i1 %122) #3, !dbg !69
  %129 = sext i32 %124 to i64, !dbg !70
  %130 = getelementptr float, ptr addrspace(1) %16, i64 %129, !dbg !70
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %122, i32 0, i1 %122) #3, !dbg !71
  %132 = getelementptr float, ptr addrspace(1) %17, i64 %129, !dbg !72
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %122, i32 0, i1 %122) #3, !dbg !73
  %134 = bitcast i32 %133 to float, !dbg !73
  %135 = fadd float %134, 0x3EE4F8B580000000, !dbg !74
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i11 = icmp eq i32 %136, 0, !dbg !75
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i14 = icmp eq i32 %137, 0, !dbg !75
  br i1 %.not.i11, label %143, label %138, !dbg !75

138:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %141, label %139, !dbg !75

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

143:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %146, label %144, !dbg !75

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

__nv_sqrtf.exit15:                                ; preds = %139, %141, %144, %146
  %.0.i13 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !75
  %148 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !69
  %149 = insertelement <4 x i32> %148, i32 %35, i64 1, !dbg !69
  %150 = insertelement <4 x i32> %149, i32 %66, i64 2, !dbg !69
  %151 = insertelement <4 x i32> %150, i32 %97, i64 3, !dbg !69
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !69
  %153 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !71
  %154 = insertelement <4 x i32> %153, i32 %38, i64 1, !dbg !71
  %155 = insertelement <4 x i32> %154, i32 %69, i64 2, !dbg !71
  %156 = insertelement <4 x i32> %155, i32 %100, i64 3, !dbg !71
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !71
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !76
  %159 = getelementptr float, ptr addrspace(1) %18, i64 %129, !dbg !77
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %122, i32 0, i1 %122) #3, !dbg !78
  %161 = getelementptr float, ptr addrspace(1) %19, i64 %129, !dbg !79
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %122, i32 0, i1 %122) #3, !dbg !80
  %163 = fsub <4 x float> %152, %157, !dbg !81
  %164 = insertelement <4 x float> poison, float %158, i64 0, !dbg !82
  %165 = insertelement <4 x float> %164, float %55, i64 1, !dbg !82
  %166 = insertelement <4 x float> %165, float %86, i64 2, !dbg !82
  %167 = insertelement <4 x float> %166, float %117, i64 3, !dbg !82
  %168 = fmul <4 x float> %163, %167, !dbg !82
  %169 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !78
  %170 = insertelement <4 x i32> %169, i32 %57, i64 1, !dbg !78
  %171 = insertelement <4 x i32> %170, i32 %88, i64 2, !dbg !78
  %172 = insertelement <4 x i32> %171, i32 %119, i64 3, !dbg !78
  %173 = bitcast <4 x i32> %172 to <4 x float>, !dbg !78
  %174 = fmul <4 x float> %168, %173, !dbg !83
  %175 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !80
  %176 = insertelement <4 x i32> %175, i32 %59, i64 1, !dbg !80
  %177 = insertelement <4 x i32> %176, i32 %90, i64 2, !dbg !80
  %178 = insertelement <4 x i32> %177, i32 %121, i64 3, !dbg !80
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !80
  %180 = fadd <4 x float> %174, %179, !dbg !84
  %181 = fcmp olt <4 x float> %180, zeroinitializer, !dbg !85
  %182 = extractelement <4 x i1> %181, i64 3, !dbg !89
  %183 = extractelement <4 x float> %180, i64 3, !dbg !89
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !89
  %185 = extractelement <4 x i1> %181, i64 2, !dbg !91
  %186 = extractelement <4 x float> %180, i64 2, !dbg !91
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !91
  %188 = extractelement <4 x i1> %181, i64 1, !dbg !93
  %189 = extractelement <4 x float> %180, i64 1, !dbg !93
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !93
  %191 = extractelement <4 x i1> %181, i64 0, !dbg !95
  %192 = extractelement <4 x float> %180, i64 0, !dbg !95
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !95
  %194 = select i1 %122, float %193, float 0.000000e+00, !dbg !96
  %195 = select i1 %92, float %184, float %194, !dbg !97
  %196 = select i1 %61, float %187, float %195, !dbg !97
  %197 = select i1 %30, float %190, float %196, !dbg !97
  %198 = sext i32 %27 to i64, !dbg !98
  %199 = getelementptr float, ptr addrspace(1) %20, i64 %198, !dbg !98
  %200 = bitcast float %197 to i32, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %199, i1 true) #3, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuqparkvjums3nqvst33o2d527e6w32so374p5bfkltiiwtjf3bg.py", directory: "inductor_cache/uq")
!4 = !{ptr @triton_poi_fused_cat_69, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_69, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_69", linkageName: "triton_poi_fused_cat_69", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 27, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 36, scope: !7)
!32 = !DILocation(line: 55, column: 20, scope: !7)
!33 = !DILocation(line: 56, column: 35, scope: !7)
!34 = !DILocation(line: 56, column: 41, scope: !7)
!35 = !DILocation(line: 56, column: 31, scope: !7)
!36 = !DILocation(line: 56, column: 56, scope: !7)
!37 = !DILocation(line: 57, column: 31, scope: !7)
!38 = !DILocation(line: 57, column: 45, scope: !7)
!39 = !DILocation(line: 59, column: 31, scope: !7)
!40 = !DILocation(line: 59, column: 45, scope: !7)
!41 = !DILocation(line: 61, column: 20, scope: !7)
!42 = !DILocation(line: 62, column: 27, scope: !7)
!43 = !DILocation(line: 64, column: 20, scope: !7)
!44 = !DILocation(line: 68, column: 31, scope: !7)
!45 = !DILocation(line: 68, column: 45, scope: !7)
!46 = !DILocation(line: 70, column: 31, scope: !7)
!47 = !DILocation(line: 70, column: 45, scope: !7)
!48 = !DILocation(line: 79, column: 20, scope: !7)
!49 = !DILocation(line: 80, column: 36, scope: !7)
!50 = !DILocation(line: 80, column: 42, scope: !7)
!51 = !DILocation(line: 80, column: 32, scope: !7)
!52 = !DILocation(line: 80, column: 57, scope: !7)
!53 = !DILocation(line: 81, column: 32, scope: !7)
!54 = !DILocation(line: 81, column: 46, scope: !7)
!55 = !DILocation(line: 83, column: 32, scope: !7)
!56 = !DILocation(line: 83, column: 46, scope: !7)
!57 = !DILocation(line: 85, column: 20, scope: !7)
!58 = !DILocation(line: 86, column: 27, scope: !7)
!59 = !DILocation(line: 88, column: 20, scope: !7)
!60 = !DILocation(line: 92, column: 32, scope: !7)
!61 = !DILocation(line: 92, column: 46, scope: !7)
!62 = !DILocation(line: 94, column: 32, scope: !7)
!63 = !DILocation(line: 94, column: 46, scope: !7)
!64 = !DILocation(line: 100, column: 20, scope: !7)
!65 = !DILocation(line: 103, column: 36, scope: !7)
!66 = !DILocation(line: 103, column: 51, scope: !7)
!67 = !DILocation(line: 103, column: 42, scope: !7)
!68 = !DILocation(line: 103, column: 32, scope: !7)
!69 = !DILocation(line: 103, column: 57, scope: !7)
!70 = !DILocation(line: 104, column: 32, scope: !7)
!71 = !DILocation(line: 104, column: 46, scope: !7)
!72 = !DILocation(line: 106, column: 32, scope: !7)
!73 = !DILocation(line: 106, column: 46, scope: !7)
!74 = !DILocation(line: 108, column: 20, scope: !7)
!75 = !DILocation(line: 109, column: 27, scope: !7)
!76 = !DILocation(line: 111, column: 20, scope: !7)
!77 = !DILocation(line: 115, column: 32, scope: !7)
!78 = !DILocation(line: 115, column: 46, scope: !7)
!79 = !DILocation(line: 117, column: 32, scope: !7)
!80 = !DILocation(line: 117, column: 46, scope: !7)
!81 = !DILocation(line: 105, column: 20, scope: !7)
!82 = !DILocation(line: 114, column: 20, scope: !7)
!83 = !DILocation(line: 116, column: 20, scope: !7)
!84 = !DILocation(line: 118, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 120, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !90)
!90 = !DILocation(line: 97, column: 42, scope: !7)
!91 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !92)
!92 = !DILocation(line: 73, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !94)
!94 = !DILocation(line: 49, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!96 = !DILocation(line: 122, column: 35, scope: !7)
!97 = !DILocation(line: 0, scope: !7)
!98 = !DILocation(line: 126, column: 25, scope: !7)
!99 = !DILocation(line: 126, column: 37, scope: !7)
!100 = !DILocation(line: 126, column: 4, scope: !7)
