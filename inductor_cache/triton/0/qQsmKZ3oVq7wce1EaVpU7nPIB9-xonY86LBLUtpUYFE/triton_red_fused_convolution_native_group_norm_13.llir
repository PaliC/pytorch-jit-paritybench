; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 2048, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 511, !dbg !12
  %11 = or disjoint i32 %10, 512, !dbg !12
  %12 = or disjoint i32 %10, 1024, !dbg !12
  %13 = or disjoint i32 %10, 1536, !dbg !12
  %14 = shl i32 %9, 2, !dbg !12
  %15 = and i32 %14, 2044, !dbg !12
  %16 = srem i32 %7, 8, !dbg !13
  %17 = shl i32 %7, 12, !dbg !14
  %18 = shl nsw i32 %16, 6, !dbg !15
  %19 = or disjoint i32 %17, %15
  %20 = shl nuw nsw i32 %15, 1
  %21 = zext nneg i32 %20 to i64
  %22 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %21
  %23 = or disjoint i32 %20, 2
  %24 = zext nneg i32 %23 to i64
  %25 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %24
  %26 = or disjoint i32 %20, 4
  %27 = zext nneg i32 %26 to i64
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %27
  %29 = or disjoint i32 %20, 6
  %30 = zext nneg i32 %29 to i64
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %30
  %32 = shl nuw nsw i32 %10, 1
  %33 = zext nneg i32 %32 to i64
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %33
  %35 = shl nuw nsw i32 %11, 1
  %36 = zext nneg i32 %35 to i64
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %36
  %38 = shl nuw nsw i32 %12, 1
  %39 = zext nneg i32 %38 to i64
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %39
  %41 = shl nuw nsw i32 %13, 1
  %42 = zext nneg i32 %41 to i64
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %42
  %44 = zext nneg i32 %10 to i64
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %44
  %46 = zext nneg i32 %11 to i64
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %46
  %48 = zext nneg i32 %12 to i64
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48
  %50 = zext nneg i32 %13 to i64
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50
  %52 = zext nneg i32 %15 to i64
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52
  %54 = sext i32 %19 to i64, !dbg !16
  %55 = zext nneg i32 %13 to i64, !dbg !16
  %56 = sext i32 %18 to i64, !dbg !16
  %57 = zext nneg i32 %12 to i64, !dbg !16
  %58 = zext nneg i32 %11 to i64, !dbg !16
  %59 = zext nneg i32 %10 to i64, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !16
  %60 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 4
  %61 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 8
  %62 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 12
  br label %63, !dbg !16

63:                                               ; preds = %6, %._crit_edge
  %64 = phi i1 [ true, %6 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %6 ], [ 2048, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %6 ], [ %163, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %6 ], [ %164, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %6 ], [ %165, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %6 ], [ %166, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %6 ], [ %159, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %6 ], [ %160, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %6 ], [ %161, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %6 ], [ %162, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %6 ], [ %155, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %6 ], [ %156, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %6 ], [ %157, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %6 ], [ %158, %._crit_edge ]
  %77 = or disjoint i64 %indvars.iv, %59, !dbg !17
  %78 = or disjoint i64 %indvars.iv, %58, !dbg !17
  %79 = or disjoint i64 %indvars.iv, %57, !dbg !17
  %80 = or disjoint i64 %indvars.iv, %55, !dbg !17
  %81 = lshr i64 %77, 6, !dbg !18
  %82 = lshr i64 %78, 6, !dbg !18
  %83 = lshr i64 %79, 6, !dbg !18
  %84 = lshr i64 %80, 6, !dbg !18
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !19
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !20
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !20
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %90 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %90, i1 true) #5, !dbg !20
  %91 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %91, i1 true) #5, !dbg !20
  %92 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %92, i1 true) #5, !dbg !20
  %93 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %93, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %94 = load float, ptr addrspace(3) %34, align 8, !dbg !20
  %95 = load float, ptr addrspace(3) %37, align 8, !dbg !20
  %96 = load float, ptr addrspace(3) %40, align 8, !dbg !20
  %97 = load float, ptr addrspace(3) %43, align 8, !dbg !20
  %98 = or disjoint i64 %81, %56, !dbg !21
  %99 = or disjoint i64 %82, %56, !dbg !21
  %100 = or disjoint i64 %83, %56, !dbg !21
  %101 = or disjoint i64 %84, %56, !dbg !21
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !22
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !22
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !22
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !22
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %8, i32 0, i1 %8) #5, !dbg !23
  %107 = bitcast i32 %106 to float, !dbg !23
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %8, i32 0, i1 %8) #5, !dbg !23
  %109 = bitcast i32 %108 to float, !dbg !23
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %8, i32 0, i1 %8) #5, !dbg !23
  %111 = bitcast i32 %110 to float, !dbg !23
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %8, i32 0, i1 %8) #5, !dbg !23
  %113 = bitcast i32 %112 to float, !dbg !23
  %114 = fadd float %94, %107, !dbg !24
  %115 = fadd float %95, %109, !dbg !24
  %116 = fadd float %96, %111, !dbg !24
  %117 = fadd float %97, %113, !dbg !24
  br i1 %64, label %._crit_edge, label %118, !dbg !25

118:                                              ; preds = %63
  %119 = fsub float %114, %73, !dbg !29
  %120 = fsub float %115, %74, !dbg !29
  %121 = fsub float %116, %75, !dbg !29
  %122 = fsub float %117, %76, !dbg !29
  %123 = fadd float %65, 1.000000e+00, !dbg !30
  %124 = fadd float %66, 1.000000e+00, !dbg !30
  %125 = fadd float %67, 1.000000e+00, !dbg !30
  %126 = fadd float %68, 1.000000e+00, !dbg !30
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #5, !dbg !31
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %124) #5, !dbg !31
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %125) #5, !dbg !31
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %126) #5, !dbg !31
  %131 = fadd float %73, %127, !dbg !32
  %132 = fadd float %74, %128, !dbg !32
  %133 = fadd float %75, %129, !dbg !32
  %134 = fadd float %76, %130, !dbg !32
  %135 = fsub float %114, %131, !dbg !33
  %136 = fsub float %115, %132, !dbg !33
  %137 = fsub float %116, %133, !dbg !33
  %138 = fsub float %117, %134, !dbg !33
  %139 = fmul float %119, %135, !dbg !34
  %140 = fmul float %120, %136, !dbg !34
  %141 = fmul float %121, %137, !dbg !34
  %142 = fmul float %122, %138, !dbg !34
  %143 = fadd float %69, %139, !dbg !35
  %144 = fadd float %70, %140, !dbg !35
  %145 = fadd float %71, %141, !dbg !35
  %146 = fadd float %72, %142, !dbg !35
  br label %._crit_edge, !dbg !25

._crit_edge:                                      ; preds = %63, %118
  %147 = phi float [ %143, %118 ], [ 0.000000e+00, %63 ], !dbg !28
  %148 = phi float [ %144, %118 ], [ 0.000000e+00, %63 ], !dbg !28
  %149 = phi float [ %145, %118 ], [ 0.000000e+00, %63 ], !dbg !28
  %150 = phi float [ %146, %118 ], [ 0.000000e+00, %63 ], !dbg !28
  %.pn7 = phi float [ %131, %118 ], [ %114, %63 ]
  %.pn5 = phi float [ %132, %118 ], [ %115, %63 ]
  %.pn3 = phi float [ %133, %118 ], [ %116, %63 ]
  %.pn1 = phi float [ %134, %118 ], [ %117, %63 ]
  %151 = phi float [ %123, %118 ], [ 1.000000e+00, %63 ], !dbg !28
  %152 = phi float [ %124, %118 ], [ 1.000000e+00, %63 ], !dbg !28
  %153 = phi float [ %125, %118 ], [ 1.000000e+00, %63 ], !dbg !28
  %154 = phi float [ %126, %118 ], [ 1.000000e+00, %63 ], !dbg !28
  %155 = select i1 %8, float %.pn7, float %73, !dbg !36
  %156 = select i1 %8, float %.pn5, float %74, !dbg !36
  %157 = select i1 %8, float %.pn3, float %75, !dbg !36
  %158 = select i1 %8, float %.pn1, float %76, !dbg !36
  %159 = select i1 %8, float %147, float %69, !dbg !37
  %160 = select i1 %8, float %148, float %70, !dbg !37
  %161 = select i1 %8, float %149, float %71, !dbg !37
  %162 = select i1 %8, float %150, float %72, !dbg !37
  %163 = select i1 %8, float %151, float %65, !dbg !38
  %164 = select i1 %8, float %152, float %66, !dbg !38
  %165 = select i1 %8, float %153, float %67, !dbg !38
  %166 = select i1 %8, float %154, float %68, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %167 = bitcast float %114 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %167, i1 true) #5, !dbg !39
  %168 = bitcast float %115 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %168, i1 true) #5, !dbg !39
  %169 = bitcast float %116 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %169, i1 true) #5, !dbg !39
  %170 = bitcast float %117 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %170, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.extract = load i32, ptr addrspace(3) %53, align 16, !dbg !39
  %.extract11 = load i32, ptr addrspace(3) %60, align 4, !dbg !39
  %.extract12 = load i32, ptr addrspace(3) %61, align 8, !dbg !39
  %.extract13 = load i32, ptr addrspace(3) %62, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %gep, i1 %8) #5, !dbg !39
  br i1 %64, label %63, label %171, !dbg !16

171:                                              ; preds = %._crit_edge
  %172 = lshr i32 %9, 5, !dbg !12
  %173 = and i32 %9, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %174 = fsub float %156, %155, !dbg !42
  %175 = fadd float %163, %164, !dbg !44
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !45
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %175) #5, !dbg !46
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !47
  %179 = fmul float %174, %178, !dbg !48
  %180 = fadd float %155, %179, !dbg !49
  %181 = fadd float %159, %160, !dbg !50
  %182 = fmul float %174, %174, !dbg !51
  %183 = fmul float %182, %163, !dbg !52
  %184 = fmul float %183, %178, !dbg !53
  %185 = fadd float %181, %184, !dbg !54
  %186 = fsub float %157, %180, !dbg !42
  %187 = fadd float %165, %175, !dbg !44
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !45
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %187) #5, !dbg !46
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !47
  %191 = fmul float %190, %186, !dbg !48
  %192 = fadd float %180, %191, !dbg !49
  %193 = fadd float %161, %185, !dbg !50
  %194 = fmul float %186, %186, !dbg !51
  %195 = fmul float %175, %194, !dbg !52
  %196 = fmul float %190, %195, !dbg !53
  %197 = fadd float %193, %196, !dbg !54
  %198 = fsub float %158, %192, !dbg !42
  %199 = fadd float %166, %187, !dbg !44
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !45
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %199) #5, !dbg !46
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !47
  %203 = fmul float %202, %198, !dbg !48
  %204 = fadd float %192, %203, !dbg !49
  %205 = fadd float %162, %197, !dbg !50
  %206 = fmul float %198, %198, !dbg !51
  %207 = fmul float %187, %206, !dbg !52
  %208 = fmul float %202, %207, !dbg !53
  %209 = fadd float %205, %208, !dbg !54
  %210 = bitcast float %204 to i32, !dbg !40
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 16, i32 31), !dbg !40
  %212 = bitcast i32 %211 to float, !dbg !40
  %213 = bitcast float %209 to i32, !dbg !40
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 16, i32 31), !dbg !40
  %215 = bitcast i32 %214 to float, !dbg !40
  %216 = bitcast float %199 to i32, !dbg !40
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 16, i32 31), !dbg !40
  %218 = bitcast i32 %217 to float, !dbg !40
  %219 = fsub float %212, %204, !dbg !42
  %220 = fadd float %199, %218, !dbg !44
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !45
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %220) #5, !dbg !46
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !47
  %224 = fmul float %223, %219, !dbg !48
  %225 = fadd float %204, %224, !dbg !49
  %226 = fadd float %209, %215, !dbg !50
  %227 = fmul float %219, %219, !dbg !51
  %228 = fmul float %199, %227, !dbg !52
  %229 = fmul float %223, %228, !dbg !53
  %230 = fadd float %226, %229, !dbg !54
  %231 = bitcast float %225 to i32, !dbg !40
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !40
  %233 = bitcast i32 %232 to float, !dbg !40
  %234 = bitcast float %230 to i32, !dbg !40
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !40
  %236 = bitcast i32 %235 to float, !dbg !40
  %237 = bitcast float %220 to i32, !dbg !40
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !40
  %239 = bitcast i32 %238 to float, !dbg !40
  %240 = fsub float %233, %225, !dbg !42
  %241 = fadd float %220, %239, !dbg !44
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !45
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float %241) #5, !dbg !46
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !47
  %245 = fmul float %240, %244, !dbg !48
  %246 = fadd float %225, %245, !dbg !49
  %247 = fadd float %230, %236, !dbg !50
  %248 = fmul float %240, %240, !dbg !51
  %249 = fmul float %220, %248, !dbg !52
  %250 = fmul float %244, %249, !dbg !53
  %251 = fadd float %247, %250, !dbg !54
  %252 = bitcast float %246 to i32, !dbg !40
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 4, i32 31), !dbg !40
  %254 = bitcast i32 %253 to float, !dbg !40
  %255 = bitcast float %251 to i32, !dbg !40
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 4, i32 31), !dbg !40
  %257 = bitcast i32 %256 to float, !dbg !40
  %258 = bitcast float %241 to i32, !dbg !40
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !40
  %260 = bitcast i32 %259 to float, !dbg !40
  %261 = fsub float %254, %246, !dbg !42
  %262 = fadd float %241, %260, !dbg !44
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !45
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float %262) #5, !dbg !46
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !47
  %266 = fmul float %261, %265, !dbg !48
  %267 = fadd float %246, %266, !dbg !49
  %268 = fadd float %251, %257, !dbg !50
  %269 = fmul float %261, %261, !dbg !51
  %270 = fmul float %241, %269, !dbg !52
  %271 = fmul float %265, %270, !dbg !53
  %272 = fadd float %268, %271, !dbg !54
  %273 = bitcast float %267 to i32, !dbg !40
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !40
  %275 = bitcast i32 %274 to float, !dbg !40
  %276 = bitcast float %272 to i32, !dbg !40
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !40
  %278 = bitcast i32 %277 to float, !dbg !40
  %279 = bitcast float %262 to i32, !dbg !40
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !40
  %281 = bitcast i32 %280 to float, !dbg !40
  %282 = fsub float %275, %267, !dbg !42
  %283 = fadd float %262, %281, !dbg !44
  %284 = fcmp oeq float %283, 0.000000e+00, !dbg !45
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %281, float %283) #5, !dbg !46
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !47
  %287 = fmul float %282, %286, !dbg !48
  %288 = fadd float %267, %287, !dbg !49
  %289 = fadd float %272, %278, !dbg !50
  %290 = fmul float %282, %282, !dbg !51
  %291 = fmul float %262, %290, !dbg !52
  %292 = fmul float %286, %291, !dbg !53
  %293 = fadd float %289, %292, !dbg !54
  %294 = bitcast float %288 to i32, !dbg !40
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 1, i32 31), !dbg !40
  %296 = bitcast i32 %295 to float, !dbg !40
  %297 = bitcast float %293 to i32, !dbg !40
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 1, i32 31), !dbg !40
  %299 = bitcast i32 %298 to float, !dbg !40
  %300 = bitcast float %283 to i32, !dbg !40
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !40
  %302 = bitcast i32 %301 to float, !dbg !40
  %303 = fsub float %296, %288, !dbg !42
  %304 = fadd float %283, %302, !dbg !44
  %305 = fcmp oeq float %304, 0.000000e+00, !dbg !45
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %302, float %304) #5, !dbg !46
  %307 = select i1 %305, float 0.000000e+00, float %306, !dbg !47
  %308 = fmul float %303, %307, !dbg !48
  %309 = fadd float %288, %308, !dbg !49
  %310 = fadd float %293, %299, !dbg !50
  %311 = fmul float %303, %303, !dbg !51
  %312 = fmul float %283, %311, !dbg !52
  %313 = fmul float %307, %312, !dbg !53
  %314 = fadd float %310, %313, !dbg !54
  %315 = icmp eq i32 %173, 0, !dbg !40
  %316 = and i32 %172, 15, !dbg !40
  %317 = zext nneg i32 %316 to i64, !dbg !40
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i64 %317, !dbg !40
  %319 = bitcast float %309 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 %315) #5, !dbg !40
  %320 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %317, !dbg !40
  %321 = bitcast float %314 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 %315) #5, !dbg !40
  %322 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %317, !dbg !40
  %323 = bitcast float %304 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 %315) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %324 = icmp slt i32 %9, 16, !dbg !40
  %325 = sext i32 %9 to i64, !dbg !40
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !40
  %327 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %326, i1 %324) #5, !dbg !40
  %328 = bitcast i32 %327 to float, !dbg !40
  %329 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %325, !dbg !40
  %330 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %329, i1 %324) #5, !dbg !40
  %331 = bitcast i32 %330 to float, !dbg !40
  %332 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %325, !dbg !40
  %333 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %332, i1 %324) #5, !dbg !40
  %334 = bitcast i32 %333 to float, !dbg !40
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 8, i32 31), !dbg !40
  %336 = bitcast i32 %335 to float, !dbg !40
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 8, i32 31), !dbg !40
  %338 = bitcast i32 %337 to float, !dbg !40
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 8, i32 31), !dbg !40
  %340 = bitcast i32 %339 to float, !dbg !40
  %341 = fsub float %336, %328, !dbg !42
  %342 = fadd float %334, %340, !dbg !44
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !45
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float %342) #5, !dbg !46
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !47
  %346 = fmul float %341, %345, !dbg !48
  %347 = fadd float %346, %328, !dbg !49
  %348 = fadd float %331, %338, !dbg !50
  %349 = fmul float %341, %341, !dbg !51
  %350 = fmul float %349, %334, !dbg !52
  %351 = fmul float %350, %345, !dbg !53
  %352 = fadd float %348, %351, !dbg !54
  %353 = bitcast float %347 to i32, !dbg !40
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 4, i32 31), !dbg !40
  %355 = bitcast i32 %354 to float, !dbg !40
  %356 = bitcast float %352 to i32, !dbg !40
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 4, i32 31), !dbg !40
  %358 = bitcast i32 %357 to float, !dbg !40
  %359 = bitcast float %342 to i32, !dbg !40
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 4, i32 31), !dbg !40
  %361 = bitcast i32 %360 to float, !dbg !40
  %362 = fsub float %355, %347, !dbg !42
  %363 = fadd float %342, %361, !dbg !44
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !45
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %363) #5, !dbg !46
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !47
  %367 = fmul float %362, %366, !dbg !48
  %368 = fadd float %347, %367, !dbg !49
  %369 = fadd float %352, %358, !dbg !50
  %370 = fmul float %362, %362, !dbg !51
  %371 = fmul float %342, %370, !dbg !52
  %372 = fmul float %366, %371, !dbg !53
  %373 = fadd float %369, %372, !dbg !54
  %374 = bitcast float %368 to i32, !dbg !40
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 2, i32 31), !dbg !40
  %376 = bitcast i32 %375 to float, !dbg !40
  %377 = bitcast float %373 to i32, !dbg !40
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 2, i32 31), !dbg !40
  %379 = bitcast i32 %378 to float, !dbg !40
  %380 = bitcast float %363 to i32, !dbg !40
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 2, i32 31), !dbg !40
  %382 = bitcast i32 %381 to float, !dbg !40
  %383 = fsub float %376, %368, !dbg !42
  %384 = fadd float %363, %382, !dbg !44
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !45
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %384) #5, !dbg !46
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !47
  %388 = fmul float %383, %387, !dbg !48
  %389 = fadd float %368, %388, !dbg !49
  %390 = fadd float %373, %379, !dbg !50
  %391 = fmul float %383, %383, !dbg !51
  %392 = fmul float %363, %391, !dbg !52
  %393 = fmul float %387, %392, !dbg !53
  %394 = fadd float %390, %393, !dbg !54
  %395 = bitcast float %389 to i32, !dbg !40
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 1, i32 31), !dbg !40
  %397 = bitcast i32 %396 to float, !dbg !40
  %398 = bitcast float %394 to i32, !dbg !40
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 1, i32 31), !dbg !40
  %400 = bitcast i32 %399 to float, !dbg !40
  %401 = bitcast float %384 to i32, !dbg !40
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 1, i32 31), !dbg !40
  %403 = bitcast i32 %402 to float, !dbg !40
  %404 = fsub float %397, %389, !dbg !42
  %405 = fadd float %384, %403, !dbg !44
  %406 = fcmp oeq float %405, 0.000000e+00, !dbg !45
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %403, float %405) #5, !dbg !46
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !47
  %409 = fmul float %404, %408, !dbg !48
  %410 = fadd float %389, %409, !dbg !49
  %411 = fadd float %394, %400, !dbg !50
  %412 = fmul float %404, %404, !dbg !51
  %413 = fmul float %384, %412, !dbg !52
  %414 = fmul float %408, %413, !dbg !53
  %415 = fadd float %411, %414, !dbg !54
  %416 = and i32 %9, 15, !dbg !40
  %417 = icmp eq i32 %416, 0, !dbg !40
  %418 = and i1 %324, %417, !dbg !40
  %419 = bitcast float %410 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %419, i1 %418) #5, !dbg !40
  %420 = bitcast float %415 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %420, i1 %418) #5, !dbg !40
  %421 = bitcast float %405 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %421, i1 %418) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %422 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %423 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !40
  %424 = sext i32 %7 to i64, !dbg !55
  %425 = getelementptr float, ptr addrspace(1) %3, i64 %424, !dbg !55
  %426 = icmp eq i32 %10, 0, !dbg !56
  %427 = and i1 %426, %8, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %422, ptr addrspace(1) %425, i1 %427) #5, !dbg !56
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %423, float 4.096000e+03) #5, !dbg !57
  %429 = fadd float %428, 0x3EE4F8B580000000, !dbg !58
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %.not.i = icmp eq i32 %430, 0, !dbg !59
  br i1 %.not.i, label %433, label %431, !dbg !59

431:                                              ; preds = %171
  %432 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %429), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

433:                                              ; preds = %171
  %434 = tail call float @llvm.nvvm.rsqrt.approx.f(float %429), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

__nv_rsqrtf.exit:                                 ; preds = %431, %433
  %.0.i = phi float [ %432, %431 ], [ %434, %433 ], !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %435 = getelementptr float, ptr addrspace(1) %1, i64 %424, !dbg !61
  %436 = bitcast float %.0.i to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %436, ptr addrspace(1) %435, i1 %427) #5, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpuqwtvtlvep2ftvuyj2qahgi4xjnwylgswrurzsqeqjlcfxq5am.py", directory: "inductor_cache/pu")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_13, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_13, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_13", linkageName: "triton_red_fused_convolution_native_group_norm_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 32, column: 27, scope: !7)
!18 = !DILocation(line: 35, column: 23, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 53, scope: !7)
!21 = !DILocation(line: 37, column: 39, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 47, scope: !7)
!24 = !DILocation(line: 38, column: 22, scope: !7)
!25 = !DILocation(line: 178, column: 7, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 51, scope: !7)
!29 = !DILocation(line: 183, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 184, column: 30, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 185, column: 34, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 185, column: 26, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 186, column: 39, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 186, column: 31, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 186, column: 22, scope: !26, inlinedAt: !28)
!36 = !DILocation(line: 43, column: 60, scope: !7)
!37 = !DILocation(line: 44, column: 56, scope: !7)
!38 = !DILocation(line: 45, column: 64, scope: !7)
!39 = !DILocation(line: 46, column: 53, scope: !7)
!40 = !DILocation(line: 204, column: 46, scope: !26, inlinedAt: !41)
!41 = !DILocation(line: 48, column: 41, scope: !7)
!42 = !DILocation(line: 192, column: 21, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!44 = !DILocation(line: 193, column: 28, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 194, column: 39, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 194, column: 60, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 194, column: 49, scope: !43, inlinedAt: !41)
!48 = !DILocation(line: 196, column: 25, scope: !43, inlinedAt: !41)
!49 = !DILocation(line: 196, column: 17, scope: !43, inlinedAt: !41)
!50 = !DILocation(line: 197, column: 15, scope: !43, inlinedAt: !41)
!51 = !DILocation(line: 197, column: 30, scope: !43, inlinedAt: !41)
!52 = !DILocation(line: 197, column: 38, scope: !43, inlinedAt: !41)
!53 = !DILocation(line: 197, column: 49, scope: !43, inlinedAt: !41)
!54 = !DILocation(line: 197, column: 22, scope: !43, inlinedAt: !41)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 36, scope: !7)
!57 = !DILocation(line: 55, column: 18, scope: !7)
!58 = !DILocation(line: 57, column: 19, scope: !7)
!59 = !DILocation(line: 58, column: 28, scope: !7)
!60 = !DILocation(line: 59, column: 4, scope: !7)
!61 = !DILocation(line: 60, column: 28, scope: !7)
!62 = !DILocation(line: 60, column: 40, scope: !7)
!63 = !DILocation(line: 60, column: 4, scope: !7)
