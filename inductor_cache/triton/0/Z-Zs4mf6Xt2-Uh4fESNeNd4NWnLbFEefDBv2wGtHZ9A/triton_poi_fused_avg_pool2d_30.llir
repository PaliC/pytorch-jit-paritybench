; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_30(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = icmp slt i32 %9, 1254400, !dbg !14
  %12 = icmp slt i32 %10, 1254400, !dbg !14
  %13 = add i32 %9, -9216, !dbg !15
  %14 = add i32 %9, -8704, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = add i32 %9, -8960, !dbg !17
  %20 = add i32 %9, -8448, !dbg !17
  %21 = sext i32 %19 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = add i32 %9, -8192, !dbg !19
  %26 = sext i32 %25 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = add i32 %9, -256, !dbg !21
  %29 = sext i32 %28 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %10 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = getelementptr i8, ptr addrspace(1) %32, i64 -1024, !dbg !22
  %34 = sext i32 %9 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = add i32 %9, 768, !dbg !24
  %37 = getelementptr i8, ptr addrspace(1) %35, i64 1024, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = add i32 %9, 8704, !dbg !26
  %41 = add i32 %9, 9216, !dbg !26
  %42 = sext i32 %40 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = sext i32 %41 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = add i32 %9, 8960, !dbg !28
  %47 = add i32 %9, 9472, !dbg !28
  %48 = sext i32 %46 to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !29
  %50 = sext i32 %47 to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !29
  %52 = add i32 %9, 9728, !dbg !30
  %53 = sext i32 %52 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !31
  %55 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !32
  %56 = shufflevector <2 x i32> %55, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %57 = sdiv <2 x i32> %56, <i32 256, i32 8960>, !dbg !32
  %58 = srem <2 x i32> %57, splat (i32 35), !dbg !33
  %59 = extractelement <2 x i32> %58, i64 1, !dbg !34
  %60 = icmp sgt i32 %59, 0, !dbg !35
  %61 = extractelement <2 x i32> %58, i64 0, !dbg !36
  %62 = add nsw i32 %61, -1, !dbg !37
  %63 = icmp sgt i32 %61, 0, !dbg !38
  %64 = and i1 %60, %63, !dbg !39
  %65 = and i1 %11, %64, !dbg !40
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !41
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !41
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !41
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !41
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !41
  %71 = bitcast i32 %67 to float, !dbg !41
  %72 = bitcast i32 %68 to float, !dbg !41
  %73 = bitcast i32 %69 to float, !dbg !41
  %74 = bitcast i32 %70 to float, !dbg !41
  %75 = icmp sgt i32 %61, -1, !dbg !42
  %76 = and i1 %60, %75, !dbg !43
  %77 = and i1 %11, %76, !dbg !44
  %78 = icmp sgt i32 %59, -1, !dbg !45
  %79 = and i1 %78, %63, !dbg !46
  %80 = and i1 %11, %79, !dbg !47
  %81 = or i32 %59, %61, !dbg !36
  %82 = icmp sgt i32 %81, -1, !dbg !36
  %83 = and i1 %11, %82, !dbg !48
  %84 = add nsw <2 x i32> %58, <i32 2, i32 -1>, !dbg !49
  %85 = shufflevector <2 x i32> %58, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !50
  %86 = icmp sgt <2 x i32> %85, <i32 32, i32 1>, !dbg !50
  %87 = insertelement <2 x i32> <i32 35, i32 poison>, i32 %62, i64 1, !dbg !51
  %88 = select <2 x i1> %86, <2 x i32> %87, <2 x i32> zeroinitializer, !dbg !51
  %89 = insertelement <2 x i32> %85, i32 1, i64 1, !dbg !52
  %90 = insertelement <2 x i32> %58, i32 33, i64 0, !dbg !52
  %91 = icmp slt <2 x i32> %89, %90, !dbg !52
  %92 = select <2 x i1> %91, <2 x i32> %84, <2 x i32> zeroinitializer, !dbg !53
  %93 = add nsw <2 x i32> %88, %92, !dbg !54
  %94 = mul nsw <2 x i32> %88, %92, !dbg !54
  %95 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !32
  %96 = shufflevector <2 x i32> %95, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %97 = sdiv <2 x i32> %96, <i32 256, i32 8960>, !dbg !32
  %98 = srem <2 x i32> %97, splat (i32 35), !dbg !33
  %99 = extractelement <2 x i32> %98, i64 1, !dbg !34
  %100 = icmp sgt i32 %99, 0, !dbg !35
  %101 = extractelement <2 x i32> %98, i64 0, !dbg !36
  %102 = add nsw i32 %101, -1, !dbg !37
  %103 = icmp sgt i32 %101, 0, !dbg !38
  %104 = and i1 %100, %103, !dbg !39
  %105 = and i1 %12, %104, !dbg !40
  %106 = icmp sgt i32 %101, -1, !dbg !42
  %107 = and i1 %100, %106, !dbg !43
  %108 = and i1 %12, %107, !dbg !44
  %109 = icmp sgt i32 %99, -1, !dbg !45
  %110 = and i1 %109, %103, !dbg !46
  %111 = and i1 %12, %110, !dbg !47
  %112 = or i32 %99, %101, !dbg !36
  %113 = icmp sgt i32 %112, -1, !dbg !36
  %114 = and i1 %12, %113, !dbg !48
  %115 = shufflevector <2 x i32> %98, <2 x i32> %58, <4 x i32> <i32 1, i32 3, i32 0, i32 2>, !dbg !55
  %116 = add nsw <4 x i32> %115, splat (i32 1), !dbg !55
  %117 = icmp ult <4 x i32> %116, splat (i32 35), !dbg !55
  %118 = extractelement <4 x i1> %117, i64 3, !dbg !56
  %119 = and i1 %60, %118, !dbg !56
  %120 = and i1 %11, %119, !dbg !57
  %121 = and i1 %78, %118, !dbg !58
  %122 = and i1 %11, %121, !dbg !59
  %123 = extractelement <4 x i1> %117, i64 1, !dbg !60
  %124 = and i1 %63, %123, !dbg !60
  %125 = and i1 %11, %124, !dbg !61
  %126 = and i1 %75, %123, !dbg !62
  %127 = and i1 %11, %126, !dbg !63
  %128 = and i1 %123, %118, !dbg !64
  %129 = and i1 %11, %128, !dbg !65
  %130 = extractelement <4 x i1> %117, i64 2, !dbg !56
  %131 = and i1 %100, %130, !dbg !56
  %132 = and i1 %12, %131, !dbg !57
  %133 = and i1 %109, %130, !dbg !58
  %134 = and i1 %12, %133, !dbg !59
  %135 = extractelement <4 x i1> %117, i64 0, !dbg !60
  %136 = and i1 %103, %135, !dbg !60
  %137 = and i1 %12, %136, !dbg !61
  %138 = and i1 %106, %135, !dbg !62
  %139 = and i1 %12, %138, !dbg !63
  %140 = and i1 %135, %130, !dbg !64
  %141 = and i1 %12, %140, !dbg !65
  %142 = add nsw <2 x i32> %98, <i32 2, i32 -1>, !dbg !49
  %143 = shufflevector <2 x i32> %98, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !50
  %144 = icmp sgt <2 x i32> %143, <i32 32, i32 1>, !dbg !50
  %145 = insertelement <2 x i32> <i32 35, i32 poison>, i32 %102, i64 1, !dbg !51
  %146 = select <2 x i1> %144, <2 x i32> %145, <2 x i32> zeroinitializer, !dbg !51
  %147 = insertelement <2 x i32> %143, i32 1, i64 1, !dbg !52
  %148 = insertelement <2 x i32> %98, i32 33, i64 0, !dbg !52
  %149 = icmp slt <2 x i32> %147, %148, !dbg !52
  %150 = select <2 x i1> %149, <2 x i32> %142, <2 x i32> zeroinitializer, !dbg !53
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #1, !dbg !41
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !41
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !41
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !41
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !41
  %156 = bitcast i32 %152 to float, !dbg !41
  %157 = bitcast i32 %153 to float, !dbg !41
  %158 = bitcast i32 %154 to float, !dbg !41
  %159 = bitcast i32 %155 to float, !dbg !41
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #1, !dbg !66
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !66
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !66
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !66
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !66
  %165 = bitcast i32 %161 to float, !dbg !66
  %166 = bitcast i32 %162 to float, !dbg !66
  %167 = bitcast i32 %163 to float, !dbg !66
  %168 = bitcast i32 %164 to float, !dbg !66
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #1, !dbg !66
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !66
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !66
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !66
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !66
  %174 = bitcast i32 %170 to float, !dbg !66
  %175 = bitcast i32 %171 to float, !dbg !66
  %176 = bitcast i32 %172 to float, !dbg !66
  %177 = bitcast i32 %173 to float, !dbg !66
  %178 = fadd float %71, %165, !dbg !67
  %179 = fadd float %72, %166, !dbg !67
  %180 = fadd float %73, %167, !dbg !67
  %181 = fadd float %74, %168, !dbg !67
  %182 = fadd float %156, %174, !dbg !67
  %183 = fadd float %157, %175, !dbg !67
  %184 = fadd float %158, %176, !dbg !67
  %185 = fadd float %159, %177, !dbg !67
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #1, !dbg !68
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !68
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !68
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !68
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !68
  %191 = bitcast i32 %187 to float, !dbg !68
  %192 = bitcast i32 %188 to float, !dbg !68
  %193 = bitcast i32 %189 to float, !dbg !68
  %194 = bitcast i32 %190 to float, !dbg !68
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #1, !dbg !68
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !68
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !68
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !68
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !68
  %200 = bitcast i32 %196 to float, !dbg !68
  %201 = bitcast i32 %197 to float, !dbg !68
  %202 = bitcast i32 %198 to float, !dbg !68
  %203 = bitcast i32 %199 to float, !dbg !68
  %204 = fadd float %178, %191, !dbg !69
  %205 = fadd float %179, %192, !dbg !69
  %206 = fadd float %180, %193, !dbg !69
  %207 = fadd float %181, %194, !dbg !69
  %208 = fadd float %182, %200, !dbg !69
  %209 = fadd float %183, %201, !dbg !69
  %210 = fadd float %184, %202, !dbg !69
  %211 = fadd float %185, %203, !dbg !69
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %80, i32 0, i1 %80, i32 0, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #1, !dbg !70
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !70
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !70
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !70
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !70
  %217 = bitcast i32 %213 to float, !dbg !70
  %218 = bitcast i32 %214 to float, !dbg !70
  %219 = bitcast i32 %215 to float, !dbg !70
  %220 = bitcast i32 %216 to float, !dbg !70
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #1, !dbg !70
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !70
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !70
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !70
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !70
  %226 = bitcast i32 %222 to float, !dbg !70
  %227 = bitcast i32 %223 to float, !dbg !70
  %228 = bitcast i32 %224 to float, !dbg !70
  %229 = bitcast i32 %225 to float, !dbg !70
  %230 = fadd float %204, %217, !dbg !71
  %231 = fadd float %205, %218, !dbg !71
  %232 = fadd float %206, %219, !dbg !71
  %233 = fadd float %207, %220, !dbg !71
  %234 = fadd float %208, %226, !dbg !71
  %235 = fadd float %209, %227, !dbg !71
  %236 = fadd float %210, %228, !dbg !71
  %237 = fadd float %211, %229, !dbg !71
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !72
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !72
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !72
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !72
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !72
  %243 = bitcast i32 %239 to float, !dbg !72
  %244 = bitcast i32 %240 to float, !dbg !72
  %245 = bitcast i32 %241 to float, !dbg !72
  %246 = bitcast i32 %242 to float, !dbg !72
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114) #1, !dbg !72
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !72
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !72
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !72
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !72
  %252 = bitcast i32 %248 to float, !dbg !72
  %253 = bitcast i32 %249 to float, !dbg !72
  %254 = bitcast i32 %250 to float, !dbg !72
  %255 = bitcast i32 %251 to float, !dbg !72
  %256 = fadd float %230, %243, !dbg !73
  %257 = fadd float %231, %244, !dbg !73
  %258 = fadd float %232, %245, !dbg !73
  %259 = fadd float %233, %246, !dbg !73
  %260 = fadd float %234, %252, !dbg !73
  %261 = fadd float %235, %253, !dbg !73
  %262 = fadd float %236, %254, !dbg !73
  %263 = fadd float %237, %255, !dbg !73
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #1, !dbg !74
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !74
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !74
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !74
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !74
  %269 = bitcast i32 %265 to float, !dbg !74
  %270 = bitcast i32 %266 to float, !dbg !74
  %271 = bitcast i32 %267 to float, !dbg !74
  %272 = bitcast i32 %268 to float, !dbg !74
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #1, !dbg !74
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !74
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !74
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !74
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !74
  %278 = bitcast i32 %274 to float, !dbg !74
  %279 = bitcast i32 %275 to float, !dbg !74
  %280 = bitcast i32 %276 to float, !dbg !74
  %281 = bitcast i32 %277 to float, !dbg !74
  %282 = fadd float %256, %269, !dbg !75
  %283 = fadd float %257, %270, !dbg !75
  %284 = fadd float %258, %271, !dbg !75
  %285 = fadd float %259, %272, !dbg !75
  %286 = fadd float %260, %278, !dbg !75
  %287 = fadd float %261, %279, !dbg !75
  %288 = fadd float %262, %280, !dbg !75
  %289 = fadd float %263, %281, !dbg !75
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125) #1, !dbg !76
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !76
  %292 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !76
  %293 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !76
  %294 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !76
  %295 = bitcast i32 %291 to float, !dbg !76
  %296 = bitcast i32 %292 to float, !dbg !76
  %297 = bitcast i32 %293 to float, !dbg !76
  %298 = bitcast i32 %294 to float, !dbg !76
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137) #1, !dbg !76
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !76
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !76
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !76
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !76
  %304 = bitcast i32 %300 to float, !dbg !76
  %305 = bitcast i32 %301 to float, !dbg !76
  %306 = bitcast i32 %302 to float, !dbg !76
  %307 = bitcast i32 %303 to float, !dbg !76
  %308 = fadd float %282, %295, !dbg !77
  %309 = fadd float %283, %296, !dbg !77
  %310 = fadd float %284, %297, !dbg !77
  %311 = fadd float %285, %298, !dbg !77
  %312 = fadd float %286, %304, !dbg !77
  %313 = fadd float %287, %305, !dbg !77
  %314 = fadd float %288, %306, !dbg !77
  %315 = fadd float %289, %307, !dbg !77
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #1, !dbg !78
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !78
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !78
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !78
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !78
  %321 = bitcast i32 %317 to float, !dbg !78
  %322 = bitcast i32 %318 to float, !dbg !78
  %323 = bitcast i32 %319 to float, !dbg !78
  %324 = bitcast i32 %320 to float, !dbg !78
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139) #1, !dbg !78
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !78
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !78
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !78
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !78
  %330 = bitcast i32 %326 to float, !dbg !78
  %331 = bitcast i32 %327 to float, !dbg !78
  %332 = bitcast i32 %328 to float, !dbg !78
  %333 = bitcast i32 %329 to float, !dbg !78
  %334 = fadd float %308, %321, !dbg !79
  %335 = fadd float %309, %322, !dbg !79
  %336 = fadd float %310, %323, !dbg !79
  %337 = fadd float %311, %324, !dbg !79
  %338 = fadd float %312, %330, !dbg !79
  %339 = fadd float %313, %331, !dbg !79
  %340 = fadd float %314, %332, !dbg !79
  %341 = fadd float %315, %333, !dbg !79
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #1, !dbg !80
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !80
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !80
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !80
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !80
  %347 = bitcast i32 %343 to float, !dbg !80
  %348 = bitcast i32 %344 to float, !dbg !80
  %349 = bitcast i32 %345 to float, !dbg !80
  %350 = bitcast i32 %346 to float, !dbg !80
  %351 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141) #1, !dbg !80
  %352 = extractvalue { i32, i32, i32, i32 } %351, 0, !dbg !80
  %353 = extractvalue { i32, i32, i32, i32 } %351, 1, !dbg !80
  %354 = extractvalue { i32, i32, i32, i32 } %351, 2, !dbg !80
  %355 = extractvalue { i32, i32, i32, i32 } %351, 3, !dbg !80
  %356 = bitcast i32 %352 to float, !dbg !80
  %357 = bitcast i32 %353 to float, !dbg !80
  %358 = bitcast i32 %354 to float, !dbg !80
  %359 = bitcast i32 %355 to float, !dbg !80
  %360 = fadd float %334, %347, !dbg !81
  %361 = fadd float %335, %348, !dbg !81
  %362 = fadd float %336, %349, !dbg !81
  %363 = fadd float %337, %350, !dbg !81
  %364 = fadd float %338, %356, !dbg !81
  %365 = fadd float %339, %357, !dbg !81
  %366 = fadd float %340, %358, !dbg !81
  %367 = fadd float %341, %359, !dbg !81
  %368 = add nsw <2 x i32> %146, %150, !dbg !54
  %369 = mul nsw <2 x i32> %146, %150, !dbg !54
  %370 = add nsw i32 %59, 2, !dbg !82
  %371 = add nsw i32 %99, 2, !dbg !82
  %372 = icmp sgt i32 %59, 32, !dbg !83
  %373 = icmp sgt i32 %99, 32, !dbg !83
  %374 = select i1 %372, i32 35, i32 0, !dbg !84
  %375 = select i1 %373, i32 35, i32 0, !dbg !84
  %376 = icmp slt i32 %59, 33, !dbg !34
  %377 = icmp slt i32 %99, 33, !dbg !34
  %378 = select i1 %376, i32 %370, i32 0, !dbg !85
  %379 = select i1 %377, i32 %371, i32 0, !dbg !85
  %380 = add nsw i32 %374, %378, !dbg !86
  %381 = add nsw i32 %375, %379, !dbg !86
  %382 = extractelement <2 x i32> %93, i64 0, !dbg !87
  %383 = mul nsw i32 %382, %380, !dbg !88
  %384 = extractelement <2 x i32> %368, i64 0, !dbg !87
  %385 = mul nsw i32 %384, %381, !dbg !88
  %386 = extractelement <2 x i32> %88, i64 1, !dbg !87
  %.neg = mul nsw i32 %380, %386, !dbg !87
  %387 = extractelement <2 x i32> %92, i64 1, !dbg !87
  %.neg1 = mul nsw i32 %382, %387, !dbg !87
  %reass.add = add nsw i32 %.neg, %.neg1
  %388 = extractelement <2 x i32> %94, i64 1, !dbg !89
  %389 = add nsw i32 %383, %388, !dbg !89
  %390 = sub nsw i32 %389, %reass.add, !dbg !87
  %391 = extractelement <2 x i32> %146, i64 1, !dbg !87
  %.neg3 = mul nsw i32 %381, %391, !dbg !87
  %392 = extractelement <2 x i32> %150, i64 1, !dbg !87
  %.neg4 = mul nsw i32 %384, %392, !dbg !87
  %reass.add6 = add nsw i32 %.neg3, %.neg4
  %393 = extractelement <2 x i32> %369, i64 1, !dbg !89
  %394 = add nsw i32 %385, %393, !dbg !89
  %395 = sub nsw i32 %394, %reass.add6, !dbg !87
  %396 = sitofp i32 %390 to float, !dbg !90
  %397 = sitofp i32 %395 to float, !dbg !90
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %360, float %396) #1, !dbg !90
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %396) #1, !dbg !90
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %396) #1, !dbg !90
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %363, float %396) #1, !dbg !90
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %397) #1, !dbg !90
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float %397) #1, !dbg !90
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %397) #1, !dbg !90
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float %397) #1, !dbg !90
  %406 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !91
  %407 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !91
  %408 = bitcast float %398 to i32, !dbg !92
  %409 = bitcast float %399 to i32, !dbg !92
  %410 = bitcast float %400 to i32, !dbg !92
  %411 = bitcast float %401 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %408, i32 %409, i32 %410, i32 %411, ptr addrspace(1) %406, i1 %11) #1, !dbg !92
  %412 = bitcast float %402 to i32, !dbg !92
  %413 = bitcast float %403 to i32, !dbg !92
  %414 = bitcast float %404 to i32, !dbg !92
  %415 = bitcast float %405 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %412, i32 %413, i32 %414, i32 %415, ptr addrspace(1) %407, i1 %12) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c726z2wnb7ptwf5p34vrbfzah664wikcsqf4npdbamegvhxgbrt3.py", directory: "inductor_cache/72")
!4 = !{ptr @triton_poi_fused_avg_pool2d_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_30", linkageName: "triton_poi_fused_avg_pool2d_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 41, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 41, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 41, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 58, column: 40, scope: !7)
!22 = !DILocation(line: 58, column: 31, scope: !7)
!23 = !DILocation(line: 61, column: 31, scope: !7)
!24 = !DILocation(line: 64, column: 37, scope: !7)
!25 = !DILocation(line: 64, column: 31, scope: !7)
!26 = !DILocation(line: 71, column: 38, scope: !7)
!27 = !DILocation(line: 71, column: 31, scope: !7)
!28 = !DILocation(line: 74, column: 38, scope: !7)
!29 = !DILocation(line: 74, column: 31, scope: !7)
!30 = !DILocation(line: 77, column: 38, scope: !7)
!31 = !DILocation(line: 77, column: 31, scope: !7)
!32 = !DILocation(line: 25, column: 21, scope: !7)
!33 = !DILocation(line: 25, column: 28, scope: !7)
!34 = !DILocation(line: 79, column: 256, scope: !7)
!35 = !DILocation(line: 29, column: 19, scope: !7)
!36 = !DILocation(line: 60, column: 20, scope: !7)
!37 = !DILocation(line: 33, column: 18, scope: !7)
!38 = !DILocation(line: 34, column: 19, scope: !7)
!39 = !DILocation(line: 37, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 54, scope: !7)
!41 = !DILocation(line: 38, column: 46, scope: !7)
!42 = !DILocation(line: 40, column: 21, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 54, scope: !7)
!45 = !DILocation(line: 54, column: 21, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 53, scope: !7)
!48 = !DILocation(line: 61, column: 44, scope: !7)
!49 = !DILocation(line: 79, column: 166, scope: !7)
!50 = !DILocation(line: 79, column: 162, scope: !7)
!51 = !DILocation(line: 79, column: 153, scope: !7)
!52 = !DILocation(line: 79, column: 197, scope: !7)
!53 = !DILocation(line: 79, column: 185, scope: !7)
!54 = !DILocation(line: 79, column: 173, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 50, column: 19, scope: !7)
!57 = !DILocation(line: 51, column: 54, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 50, scope: !7)
!60 = !DILocation(line: 70, column: 20, scope: !7)
!61 = !DILocation(line: 71, column: 51, scope: !7)
!62 = !DILocation(line: 73, column: 20, scope: !7)
!63 = !DILocation(line: 74, column: 51, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 77, column: 51, scope: !7)
!66 = !DILocation(line: 44, column: 46, scope: !7)
!67 = !DILocation(line: 45, column: 20, scope: !7)
!68 = !DILocation(line: 51, column: 46, scope: !7)
!69 = !DILocation(line: 52, column: 20, scope: !7)
!70 = !DILocation(line: 58, column: 45, scope: !7)
!71 = !DILocation(line: 59, column: 20, scope: !7)
!72 = !DILocation(line: 61, column: 36, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 64, column: 42, scope: !7)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 43, scope: !7)
!77 = !DILocation(line: 72, column: 20, scope: !7)
!78 = !DILocation(line: 74, column: 43, scope: !7)
!79 = !DILocation(line: 75, column: 20, scope: !7)
!80 = !DILocation(line: 77, column: 43, scope: !7)
!81 = !DILocation(line: 78, column: 20, scope: !7)
!82 = !DILocation(line: 79, column: 225, scope: !7)
!83 = !DILocation(line: 79, column: 221, scope: !7)
!84 = !DILocation(line: 79, column: 212, scope: !7)
!85 = !DILocation(line: 79, column: 244, scope: !7)
!86 = !DILocation(line: 79, column: 232, scope: !7)
!87 = !DILocation(line: 79, column: 398, scope: !7)
!88 = !DILocation(line: 79, column: 204, scope: !7)
!89 = !DILocation(line: 79, column: 144, scope: !7)
!90 = !DILocation(line: 80, column: 20, scope: !7)
!91 = !DILocation(line: 81, column: 25, scope: !7)
!92 = !DILocation(line: 81, column: 37, scope: !7)
!93 = !DILocation(line: 81, column: 4, scope: !7)
