#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__weight_norm_interface_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":19:0)) attributes {noinline = false} {
    %c6_i32 = arith.constant 6 : i32 loc(#loc1)
    %c5_i32 = arith.constant 5 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %0 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc2)
    %1 = tt.load %0 : !tt.ptr<f32> loc(#loc3)
    %2 = tt.addptr %arg0, %c1_i32 : !tt.ptr<f32>, i32 loc(#loc4)
    %3 = tt.load %2 : !tt.ptr<f32> loc(#loc5)
    %4 = tt.addptr %arg0, %c2_i32 : !tt.ptr<f32>, i32 loc(#loc6)
    %5 = tt.load %4 : !tt.ptr<f32> loc(#loc7)
    %6 = tt.addptr %arg0, %c3_i32 : !tt.ptr<f32>, i32 loc(#loc8)
    %7 = tt.load %6 : !tt.ptr<f32> loc(#loc9)
    %8 = tt.addptr %arg0, %c4_i32 : !tt.ptr<f32>, i32 loc(#loc10)
    %9 = tt.load %8 : !tt.ptr<f32> loc(#loc11)
    %10 = tt.addptr %arg0, %c5_i32 : !tt.ptr<f32>, i32 loc(#loc12)
    %11 = tt.load %10 : !tt.ptr<f32> loc(#loc13)
    %12 = tt.addptr %arg0, %c6_i32 : !tt.ptr<f32>, i32 loc(#loc14)
    %13 = tt.load %12 : !tt.ptr<f32> loc(#loc15)
    %14 = arith.mulf %1, %1 : f32 loc(#loc16)
    %15 = arith.mulf %3, %3 : f32 loc(#loc17)
    %16 = arith.addf %14, %15 : f32 loc(#loc18)
    %17 = arith.mulf %5, %5 : f32 loc(#loc19)
    %18 = arith.addf %16, %17 : f32 loc(#loc20)
    %19 = arith.mulf %7, %7 : f32 loc(#loc21)
    %20 = arith.addf %18, %19 : f32 loc(#loc22)
    %21 = arith.mulf %9, %9 : f32 loc(#loc23)
    %22 = arith.addf %20, %21 : f32 loc(#loc24)
    %23 = arith.mulf %11, %11 : f32 loc(#loc25)
    %24 = arith.addf %22, %23 : f32 loc(#loc26)
    %25 = arith.mulf %13, %13 : f32 loc(#loc27)
    %26 = arith.addf %24, %25 : f32 loc(#loc28)
    %27 = tt.extern_elementwise %26 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (f32) -> f32 loc(#loc29)
    %28 = tt.splat %27 : f32 -> tensor<1xf32, #blocked> loc(#loc29)
    %29 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc30)
    %30 = tt.splat %29 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc30)
    tt.store %30, %28 : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc31)
    tt.return loc(#loc32)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":24:30)
#loc3 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":24:19)
#loc4 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":26:30)
#loc5 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":26:19)
#loc6 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":28:30)
#loc7 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":28:19)
#loc8 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":30:31)
#loc9 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":30:20)
#loc10 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":32:31)
#loc11 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":32:20)
#loc12 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":34:31)
#loc13 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":34:20)
#loc14 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":36:31)
#loc15 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":36:20)
#loc16 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":38:18)
#loc17 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":39:18)
#loc18 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":40:18)
#loc19 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":41:18)
#loc20 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":42:19)
#loc21 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":43:20)
#loc22 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":44:20)
#loc23 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":45:20)
#loc24 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":46:20)
#loc25 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":47:20)
#loc26 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":48:20)
#loc27 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":49:20)
#loc28 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":50:20)
#loc29 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":51:27)
#loc30 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":52:25)
#loc31 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":52:65)
#loc32 = loc("inductor_cache/nv/cnvsdowl4or5kk3owet6vydo6ltirkp25rutjt25dah27tef24pk.py":52:4)
