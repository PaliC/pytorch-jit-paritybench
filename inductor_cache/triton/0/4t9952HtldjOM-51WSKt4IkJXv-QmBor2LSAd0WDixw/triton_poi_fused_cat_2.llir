; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 7, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 127, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !13
  %19 = icmp slt i32 %18, 6400, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %20 = sdiv i32 %.frozen, 16, !dbg !15
  %21 = srem i32 %20, 100, !dbg !16
  %22 = mul i32 %20, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %.frozen6 = freeze i32 %18, !dbg !18
  %23 = sdiv i32 %.frozen6, 1600, !dbg !18
  %24 = icmp slt i32 %21, 4, !dbg !19
  %25 = mul i32 %23, 1600, !dbg !20
  %srem.decomposed = sub i32 %.frozen6, %25, !dbg !20
  %26 = shl nsw i32 %23, 6, !dbg !21
  %27 = add nsw i32 %26, %srem.decomposed, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = and i1 %19, %24, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30) #3, !dbg !25
  %32 = add nsw i32 %21, -4, !dbg !26
  %33 = icmp ult i32 %32, 48, !dbg !26
  %34 = mul nsw i32 %.decomposed, 48, !dbg !27
  %35 = mul nsw i32 %23, 768, !dbg !28
  %36 = add nsw i32 %34, %35, !dbg !29
  %37 = add nsw i32 %36, %32, !dbg !30
  %38 = sext i32 %37 to i64, !dbg !31
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !31
  %40 = and i1 %19, %33, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %40, i32 0, i1 %40) #3, !dbg !33
  %42 = sext i32 %32 to i64, !dbg !34
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !34
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %40, i32 0, i1 %40) #3, !dbg !35
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !36
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %40, i32 0, i1 %40) #3, !dbg !37
  %47 = bitcast i32 %46 to float, !dbg !37
  %48 = fadd float %47, 0x3EE4F8B580000000, !dbg !38
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %49, 0, !dbg !39
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %50, 0, !dbg !39
  br i1 %.not.i, label %56, label %51, !dbg !39

51:                                               ; preds = %13
  br i1 %.not1.i, label %54, label %52, !dbg !39

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

56:                                               ; preds = %13
  br i1 %.not1.i, label %59, label %57, !dbg !39

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !39
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !41
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %40, i32 0, i1 %40) #3, !dbg !42
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !43
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %40, i32 0, i1 %40) #3, !dbg !44
  %66 = icmp sgt i32 %21, 51, !dbg !45
  %67 = add nsw i32 %21, -52, !dbg !46
  %68 = add nsw i32 %36, %67, !dbg !47
  %69 = sext i32 %68 to i64, !dbg !48
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %69, !dbg !48
  %71 = and i1 %19, %66, !dbg !49
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 0, i1 %71) #3, !dbg !50
  %73 = sext i32 %67 to i64, !dbg !51
  %74 = getelementptr float, ptr addrspace(1) %7, i64 %73, !dbg !51
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %71, i32 0, i1 %71) #3, !dbg !52
  %76 = getelementptr float, ptr addrspace(1) %8, i64 %73, !dbg !53
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %71, i32 0, i1 %71) #3, !dbg !54
  %78 = bitcast i32 %77 to float, !dbg !54
  %79 = fadd float %78, 0x3EE4F8B580000000, !dbg !55
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i1 = icmp eq i32 %80, 0, !dbg !56
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !56
  br i1 %.not.i1, label %87, label %82, !dbg !56

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !56

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !56

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !56
  %92 = bitcast i32 %72 to float, !dbg !50
  %93 = bitcast i32 %75 to float, !dbg !52
  %94 = fsub float %92, %93, !dbg !57
  %95 = bitcast i32 %41 to float, !dbg !33
  %96 = bitcast i32 %44 to float, !dbg !35
  %97 = fsub float %95, %96, !dbg !58
  %98 = fmul float %97, %61, !dbg !59
  %99 = bitcast i32 %63 to float, !dbg !42
  %100 = fmul float %98, %99, !dbg !60
  %101 = bitcast i32 %65 to float, !dbg !44
  %102 = fadd float %100, %101, !dbg !61
  %103 = fcmp olt float %102, 0.000000e+00, !dbg !62
  %104 = select i1 %103, float 0.000000e+00, float %102, !dbg !66
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !67
  %106 = fmul float %94, %105, !dbg !68
  %107 = getelementptr float, ptr addrspace(1) %9, i64 %73, !dbg !69
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %71, i32 0, i1 %71) #3, !dbg !70
  %109 = bitcast i32 %108 to float, !dbg !70
  %110 = fmul float %106, %109, !dbg !71
  %111 = getelementptr float, ptr addrspace(1) %10, i64 %73, !dbg !72
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %71, i32 0, i1 %71) #3, !dbg !73
  %113 = bitcast i32 %112 to float, !dbg !73
  %114 = fadd float %110, %113, !dbg !74
  %115 = fcmp olt float %114, 0.000000e+00, !dbg !75
  %116 = select i1 %115, float 0.000000e+00, float %114, !dbg !77
  %117 = select i1 %66, float %116, float 0.000000e+00, !dbg !78
  %118 = select i1 %33, float %104, float %117, !dbg !79
  %119 = sext i32 %18 to i64, !dbg !80
  %120 = getelementptr float, ptr addrspace(1) %11, i64 %119, !dbg !80
  %121 = bitcast float %118 to i32, !dbg !81
  %122 = select i1 %24, i32 %31, i32 %121, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %120, i1 %19) #3, !dbg !81
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw7gjzirul6kar6rdb3jqoanjwlnvn7pwxfmmaprsic7x3qfaqxy.py", directory: "inductor_cache/w7")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 43, scope: !7)
!29 = !DILocation(line: 38, column: 39, scope: !7)
!30 = !DILocation(line: 38, column: 49, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 69, scope: !7)
!33 = !DILocation(line: 38, column: 62, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 43, scope: !7)
!36 = !DILocation(line: 41, column: 31, scope: !7)
!37 = !DILocation(line: 41, column: 43, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 44, column: 27, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 43, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 43, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 57, scope: !7)
!47 = !DILocation(line: 61, column: 49, scope: !7)
!48 = !DILocation(line: 61, column: 31, scope: !7)
!49 = !DILocation(line: 61, column: 71, scope: !7)
!50 = !DILocation(line: 61, column: 63, scope: !7)
!51 = !DILocation(line: 62, column: 31, scope: !7)
!52 = !DILocation(line: 62, column: 44, scope: !7)
!53 = !DILocation(line: 64, column: 31, scope: !7)
!54 = !DILocation(line: 64, column: 44, scope: !7)
!55 = !DILocation(line: 66, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 27, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 40, column: 20, scope: !7)
!59 = !DILocation(line: 49, column: 20, scope: !7)
!60 = !DILocation(line: 51, column: 20, scope: !7)
!61 = !DILocation(line: 53, column: 20, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!64 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!65 = !DILocation(line: 55, column: 42, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 31, scope: !7)
!70 = !DILocation(line: 73, column: 44, scope: !7)
!71 = !DILocation(line: 74, column: 20, scope: !7)
!72 = !DILocation(line: 75, column: 32, scope: !7)
!73 = !DILocation(line: 75, column: 45, scope: !7)
!74 = !DILocation(line: 76, column: 20, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !76)
!76 = !DILocation(line: 78, column: 42, scope: !7)
!77 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !76)
!78 = !DILocation(line: 80, column: 35, scope: !7)
!79 = !DILocation(line: 0, scope: !7)
!80 = !DILocation(line: 83, column: 25, scope: !7)
!81 = !DILocation(line: 83, column: 37, scope: !7)
!82 = !DILocation(line: 82, column: 33, scope: !7)
!83 = !DILocation(line: 83, column: 4, scope: !7)
