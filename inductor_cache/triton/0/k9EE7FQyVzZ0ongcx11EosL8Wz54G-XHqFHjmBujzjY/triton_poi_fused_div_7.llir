; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 288, !dbg !14
  %12 = sdiv i32 %9, 3, !dbg !15
  %13 = sdiv i32 %10, 3, !dbg !15
  %14 = shl i32 %9, 1, !dbg !16
  %15 = shl i32 %10, 1, !dbg !16
  %16 = sext i32 %14 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !17
  %18 = sext i32 %15 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #3, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %11) #3, !dbg !18
  %22 = mul i32 %12, 6, !dbg !19
  %23 = mul i32 %13, 6, !dbg !19
  %24 = sext i32 %22 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = sext i32 %23 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #3, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = add i32 %22, 2, !dbg !22
  %33 = add i32 %23, 2, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %11) #3, !dbg !24
  %39 = bitcast i32 %38 to float, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #3, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = add i32 %22, 4, !dbg !25
  %43 = add i32 %23, 4, !dbg !25
  %44 = sext i32 %42 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %43 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #3, !dbg !27
  %49 = bitcast i32 %48 to float, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #3, !dbg !27
  %51 = bitcast i32 %50 to float, !dbg !27
  %52 = fmul float %29, %29, !dbg !28
  %53 = fmul float %31, %31, !dbg !28
  %54 = fmul float %39, %39, !dbg !29
  %55 = fmul float %41, %41, !dbg !29
  %56 = fadd float %52, %54, !dbg !30
  %57 = fadd float %53, %55, !dbg !30
  %58 = fmul float %49, %49, !dbg !31
  %59 = fmul float %51, %51, !dbg !31
  %60 = fadd float %56, %58, !dbg !32
  %61 = fadd float %57, %59, !dbg !32
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %62, 0, !dbg !33
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i = icmp eq i32 %63, 0, !dbg !33
  br i1 %.not.i, label %69, label %64, !dbg !33

64:                                               ; preds = %3
  br i1 %.not1.i, label %67, label %65, !dbg !33

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

69:                                               ; preds = %3
  br i1 %.not1.i, label %72, label %70, !dbg !33

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !33
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %74, 0, !dbg !33
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !33
  br i1 %.not.i1, label %81, label %76, !dbg !33

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !33

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !33

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !33
  %86 = bitcast i32 %21 to float, !dbg !18
  %87 = bitcast i32 %20 to float, !dbg !18
  %88 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !34
  %89 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !34
  %90 = fcmp uno float %.0.i, 0.000000e+00, !dbg !38
  %91 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !38
  %92 = or i1 %88, %90, !dbg !39
  %93 = or i1 %89, %91, !dbg !39
  %94 = select i1 %92, float %.0.i, float 0x3D71979980000000, !dbg !40
  %95 = select i1 %93, float %.0.i3, float 0x3D71979980000000, !dbg !40
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %94) #3, !dbg !41
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %95) #3, !dbg !41
  %98 = sext i32 %9 to i64, !dbg !42
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !42
  %100 = bitcast float %96 to i32, !dbg !43
  %101 = bitcast float %97 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %99, i1 %11) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4bc3jpymx5nayaa55njb73ezj5tmfmcto5l3dwbslm665iyui2.py", directory: "inductor_cache/s4")
!4 = !{ptr @triton_poi_fused_div_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_7", linkageName: "triton_poi_fused_div_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 32, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 26, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 37, column: 41, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 38, column: 19, scope: !7)
!42 = !DILocation(line: 39, column: 25, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 39, column: 4, scope: !7)
