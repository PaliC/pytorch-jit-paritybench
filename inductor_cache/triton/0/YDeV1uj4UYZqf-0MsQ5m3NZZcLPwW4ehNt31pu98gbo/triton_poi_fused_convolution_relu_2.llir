; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %12, 32, !dbg !12
  %15 = or disjoint i32 %12, 48, !dbg !12
  %16 = or disjoint i32 %12, 64, !dbg !12
  %17 = or disjoint i32 %12, 80, !dbg !12
  %18 = or disjoint i32 %12, 96, !dbg !12
  %19 = or disjoint i32 %12, 112, !dbg !12
  %20 = or disjoint i32 %12, 128, !dbg !12
  %21 = or disjoint i32 %12, 144, !dbg !12
  %22 = or disjoint i32 %12, 160, !dbg !12
  %23 = or disjoint i32 %12, 176, !dbg !12
  %24 = or disjoint i32 %12, 192, !dbg !12
  %25 = or disjoint i32 %12, 208, !dbg !12
  %26 = or disjoint i32 %12, 224, !dbg !12
  %27 = or disjoint i32 %12, 240, !dbg !12
  %28 = and i32 %8, 15, !dbg !12
  %29 = and i32 %8, 255, !dbg !12
  %30 = or disjoint i32 %7, %10, !dbg !13
  %31 = or disjoint i32 %7, %12, !dbg !13
  %32 = or disjoint i32 %7, %13, !dbg !13
  %33 = or disjoint i32 %7, %14, !dbg !13
  %34 = or disjoint i32 %7, %15, !dbg !13
  %35 = or disjoint i32 %7, %16, !dbg !13
  %36 = or disjoint i32 %7, %17, !dbg !13
  %37 = or disjoint i32 %7, %18, !dbg !13
  %38 = or disjoint i32 %7, %19, !dbg !13
  %39 = or disjoint i32 %7, %20, !dbg !13
  %40 = or disjoint i32 %7, %21, !dbg !13
  %41 = or disjoint i32 %7, %22, !dbg !13
  %42 = or disjoint i32 %7, %23, !dbg !13
  %43 = or disjoint i32 %7, %24, !dbg !13
  %44 = or disjoint i32 %7, %25, !dbg !13
  %45 = or disjoint i32 %7, %26, !dbg !13
  %46 = or disjoint i32 %7, %27, !dbg !13
  %47 = or disjoint i32 %7, %29, !dbg !13
  %48 = icmp slt i32 %30, 256, !dbg !14
  %49 = icmp slt i32 %31, 256, !dbg !14
  %50 = icmp slt i32 %32, 256, !dbg !14
  %51 = icmp slt i32 %33, 256, !dbg !14
  %52 = icmp slt i32 %34, 256, !dbg !14
  %53 = icmp slt i32 %35, 256, !dbg !14
  %54 = icmp slt i32 %36, 256, !dbg !14
  %55 = icmp slt i32 %37, 256, !dbg !14
  %56 = icmp slt i32 %38, 256, !dbg !14
  %57 = icmp slt i32 %39, 256, !dbg !14
  %58 = icmp slt i32 %40, 256, !dbg !14
  %59 = icmp slt i32 %41, 256, !dbg !14
  %60 = icmp slt i32 %42, 256, !dbg !14
  %61 = icmp slt i32 %43, 256, !dbg !14
  %62 = icmp slt i32 %44, 256, !dbg !14
  %63 = icmp slt i32 %45, 256, !dbg !14
  %64 = icmp slt i32 %46, 256, !dbg !14
  %65 = icmp slt i32 %47, 256, !dbg !14
  %66 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %67 = shl i32 %66, 4, !dbg !16
  %68 = lshr i32 %8, 6, !dbg !17
  %69 = and i32 %68, 3, !dbg !17
  %70 = or disjoint i32 %67, %69, !dbg !18
  %71 = or disjoint i32 %70, 4, !dbg !18
  %72 = or disjoint i32 %70, 8, !dbg !18
  %73 = or disjoint i32 %70, 12, !dbg !18
  %74 = or disjoint i32 %67, %28, !dbg !18
  %75 = icmp slt i32 %70, 961, !dbg !19
  %76 = icmp slt i32 %71, 961, !dbg !19
  %77 = icmp slt i32 %72, 961, !dbg !19
  %78 = icmp slt i32 %73, 961, !dbg !19
  %79 = icmp slt i32 %74, 961, !dbg !19
  %.frozen = freeze i32 %30, !dbg !20
  %80 = sdiv i32 %.frozen, 64, !dbg !20
  %81 = mul i32 %80, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %81, !dbg !21
  %82 = srem i32 %47, 64, !dbg !21
  %83 = shl i32 %70, 6, !dbg !22
  %84 = shl i32 %71, 6, !dbg !22
  %85 = shl i32 %72, 6, !dbg !22
  %86 = shl i32 %73, 6, !dbg !22
  %87 = mul i32 %80, 61504, !dbg !23
  %88 = add i32 %87, %.decomposed, !dbg !24
  %89 = add i32 %88, %83, !dbg !25
  %90 = add i32 %88, %84, !dbg !25
  %91 = add i32 %88, %85, !dbg !25
  %92 = add i32 %88, %86, !dbg !25
  %93 = sext i32 %89 to i64, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !26
  %95 = sext i32 %90 to i64, !dbg !26
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !26
  %97 = sext i32 %91 to i64, !dbg !26
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !26
  %99 = sext i32 %92 to i64, !dbg !26
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !26
  %101 = and i1 %48, %75, !dbg !27
  %102 = and i1 %76, %48, !dbg !27
  %103 = and i1 %77, %48, !dbg !27
  %104 = and i1 %78, %48, !dbg !27
  %105 = and i1 %49, %79, !dbg !27
  %106 = and i1 %50, %79, !dbg !27
  %107 = and i1 %51, %79, !dbg !27
  %108 = and i1 %52, %79, !dbg !27
  %109 = and i1 %53, %79, !dbg !27
  %110 = and i1 %54, %79, !dbg !27
  %111 = and i1 %55, %79, !dbg !27
  %112 = and i1 %56, %79, !dbg !27
  %113 = and i1 %57, %79, !dbg !27
  %114 = and i1 %58, %79, !dbg !27
  %115 = and i1 %59, %79, !dbg !27
  %116 = and i1 %60, %79, !dbg !27
  %117 = and i1 %61, %79, !dbg !27
  %118 = and i1 %62, %79, !dbg !27
  %119 = and i1 %63, %79, !dbg !27
  %120 = and i1 %64, %79, !dbg !27
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %101) #2, !dbg !28
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !28
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !28
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %102) #2, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !28
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !28
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !28
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %103) #2, !dbg !28
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !28
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !28
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %104) #2, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !28
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !28
  %141 = shl i32 %8, 6, !dbg !28
  %142 = and i32 %141, 4032, !dbg !28
  %143 = or disjoint i32 %142, %69, !dbg !28
  %144 = lshr exact i32 %142, 2, !dbg !28
  %145 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %144, !dbg !28
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !28
  %147 = insertelement <1 x i32> poison, i32 %122, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !28
  %148 = or disjoint i32 %143, 16, !dbg !28
  %149 = lshr i32 %148, 4, !dbg !28
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !28
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %148, !dbg !28
  %152 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !28
  %153 = or disjoint i32 %143, 32, !dbg !28
  %154 = lshr i32 %153, 4, !dbg !28
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !28
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !28
  %157 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !28
  %158 = or disjoint i32 %143, 48, !dbg !28
  %159 = lshr i32 %158, 4, !dbg !28
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !28
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !28
  %162 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !28
  %163 = or disjoint i32 %143, 4, !dbg !28
  %164 = getelementptr float, ptr addrspace(3) %145, i32 %163, !dbg !28
  %165 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !28
  %166 = or disjoint i32 %143, 20, !dbg !28
  %167 = lshr i32 %166, 4, !dbg !28
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !28
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !28
  %170 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !28
  %171 = or disjoint i32 %143, 36, !dbg !28
  %172 = lshr i32 %171, 4, !dbg !28
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !28
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !28
  %175 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !28
  %176 = or disjoint i32 %143, 52, !dbg !28
  %177 = lshr i32 %176, 4, !dbg !28
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !28
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !28
  %180 = insertelement <1 x i32> poison, i32 %130, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !28
  %181 = or disjoint i32 %143, 8, !dbg !28
  %182 = getelementptr float, ptr addrspace(3) %145, i32 %181, !dbg !28
  %183 = insertelement <1 x i32> poison, i32 %132, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !28
  %184 = or disjoint i32 %143, 24, !dbg !28
  %185 = lshr i32 %184, 4, !dbg !28
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !28
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %184, !dbg !28
  %188 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !28
  %189 = or disjoint i32 %143, 40, !dbg !28
  %190 = lshr i32 %189, 4, !dbg !28
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !28
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !28
  %193 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !28
  %194 = or disjoint i32 %143, 56, !dbg !28
  %195 = lshr i32 %194, 4, !dbg !28
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !28
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %194, !dbg !28
  %198 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !28
  %199 = or disjoint i32 %143, 12, !dbg !28
  %200 = getelementptr float, ptr addrspace(3) %145, i32 %199, !dbg !28
  %201 = insertelement <1 x i32> poison, i32 %137, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !28
  %202 = or disjoint i32 %143, 28, !dbg !28
  %203 = lshr i32 %202, 4, !dbg !28
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !28
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %202, !dbg !28
  %206 = insertelement <1 x i32> poison, i32 %138, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !28
  %207 = or disjoint i32 %143, 44, !dbg !28
  %208 = lshr i32 %207, 4, !dbg !28
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !28
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !28
  %211 = insertelement <1 x i32> poison, i32 %139, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !28
  %212 = or disjoint i32 %143, 60, !dbg !28
  %213 = lshr i32 %212, 4, !dbg !28
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !28
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !28
  %216 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %217 = lshr i32 %29, 4, !dbg !28
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %217, !dbg !28
  %219 = getelementptr inbounds float, ptr addrspace(3) %218, i32 %29, !dbg !28
  %220 = load float, ptr addrspace(3) %219, align 4, !dbg !28
  %221 = or disjoint i32 %29, 256, !dbg !28
  %222 = lshr i32 %221, 4, !dbg !28
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !28
  %224 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %221, !dbg !28
  %225 = load float, ptr addrspace(3) %224, align 4, !dbg !28
  %226 = or disjoint i32 %29, 512, !dbg !28
  %227 = lshr i32 %226, 4, !dbg !28
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !28
  %229 = getelementptr inbounds float, ptr addrspace(3) %228, i32 %226, !dbg !28
  %230 = load float, ptr addrspace(3) %229, align 4, !dbg !28
  %231 = or disjoint i32 %29, 768, !dbg !28
  %232 = lshr i32 %231, 4, !dbg !28
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !28
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %231, !dbg !28
  %235 = load float, ptr addrspace(3) %234, align 4, !dbg !28
  %236 = or disjoint i32 %29, 1024, !dbg !28
  %237 = lshr i32 %236, 4, !dbg !28
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !28
  %239 = getelementptr inbounds float, ptr addrspace(3) %238, i32 %236, !dbg !28
  %240 = load float, ptr addrspace(3) %239, align 4, !dbg !28
  %241 = or disjoint i32 %29, 1280, !dbg !28
  %242 = lshr i32 %241, 4, !dbg !28
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !28
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %241, !dbg !28
  %245 = load float, ptr addrspace(3) %244, align 4, !dbg !28
  %246 = or disjoint i32 %29, 1536, !dbg !28
  %247 = lshr i32 %246, 4, !dbg !28
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %247, !dbg !28
  %249 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %246, !dbg !28
  %250 = load float, ptr addrspace(3) %249, align 4, !dbg !28
  %251 = or disjoint i32 %29, 1792, !dbg !28
  %252 = lshr i32 %251, 4, !dbg !28
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %252, !dbg !28
  %254 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %251, !dbg !28
  %255 = load float, ptr addrspace(3) %254, align 4, !dbg !28
  %256 = or disjoint i32 %29, 2048, !dbg !28
  %257 = lshr i32 %256, 4, !dbg !28
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %257, !dbg !28
  %259 = getelementptr inbounds float, ptr addrspace(3) %258, i32 %256, !dbg !28
  %260 = load float, ptr addrspace(3) %259, align 4, !dbg !28
  %261 = or disjoint i32 %29, 2304, !dbg !28
  %262 = lshr i32 %261, 4, !dbg !28
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !28
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %261, !dbg !28
  %265 = load float, ptr addrspace(3) %264, align 4, !dbg !28
  %266 = or disjoint i32 %29, 2560, !dbg !28
  %267 = lshr i32 %266, 4, !dbg !28
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !28
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %266, !dbg !28
  %270 = load float, ptr addrspace(3) %269, align 4, !dbg !28
  %271 = or disjoint i32 %29, 2816, !dbg !28
  %272 = lshr i32 %271, 4, !dbg !28
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !28
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !28
  %275 = load float, ptr addrspace(3) %274, align 4, !dbg !28
  %276 = or disjoint i32 %29, 3072, !dbg !28
  %277 = lshr i32 %276, 4, !dbg !28
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !28
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %276, !dbg !28
  %280 = load float, ptr addrspace(3) %279, align 4, !dbg !28
  %281 = or disjoint i32 %29, 3328, !dbg !28
  %282 = lshr i32 %281, 4, !dbg !28
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !28
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %281, !dbg !28
  %285 = load float, ptr addrspace(3) %284, align 4, !dbg !28
  %286 = or disjoint i32 %29, 3584, !dbg !28
  %287 = lshr i32 %286, 4, !dbg !28
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !28
  %289 = getelementptr inbounds float, ptr addrspace(3) %288, i32 %286, !dbg !28
  %290 = load float, ptr addrspace(3) %289, align 4, !dbg !28
  %291 = or disjoint i32 %29, 3840, !dbg !28
  %292 = lshr i32 %291, 4, !dbg !28
  %293 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %292, !dbg !28
  %294 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %291, !dbg !28
  %295 = load float, ptr addrspace(3) %294, align 4, !dbg !28
  %296 = sext i32 %82 to i64, !dbg !29
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %296, !dbg !29
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %65) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl nuw nsw i32 %29, 3, !dbg !31
  %299 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %300 = insertelement <1 x i32> poison, i32 %298, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx3 = shl nuw nsw i32 %12, 3, !dbg !31
  %301 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !31
  %302 = load float, ptr addrspace(3) %301, align 8, !dbg !31
  %.idx4 = shl nuw nsw i32 %13, 3, !dbg !31
  %303 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !31
  %304 = load float, ptr addrspace(3) %303, align 8, !dbg !31
  %.idx5 = shl nuw nsw i32 %14, 3, !dbg !31
  %305 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !31
  %306 = load float, ptr addrspace(3) %305, align 8, !dbg !31
  %.idx6 = shl nuw nsw i32 %15, 3, !dbg !31
  %307 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !31
  %308 = load float, ptr addrspace(3) %307, align 8, !dbg !31
  %.idx7 = shl nuw nsw i32 %16, 3, !dbg !31
  %309 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !31
  %310 = load float, ptr addrspace(3) %309, align 8, !dbg !31
  %.idx8 = shl nuw nsw i32 %17, 3, !dbg !31
  %311 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !31
  %312 = load float, ptr addrspace(3) %311, align 8, !dbg !31
  %.idx9 = shl nuw nsw i32 %18, 3, !dbg !31
  %313 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !31
  %314 = load float, ptr addrspace(3) %313, align 8, !dbg !31
  %.idx10 = shl nuw nsw i32 %19, 3, !dbg !31
  %315 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !31
  %316 = load float, ptr addrspace(3) %315, align 8, !dbg !31
  %.idx11 = shl nuw nsw i32 %20, 3, !dbg !31
  %317 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !31
  %318 = load float, ptr addrspace(3) %317, align 8, !dbg !31
  %.idx12 = shl nuw nsw i32 %21, 3, !dbg !31
  %319 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !31
  %320 = load float, ptr addrspace(3) %319, align 8, !dbg !31
  %.idx13 = shl nuw nsw i32 %22, 3, !dbg !31
  %321 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !31
  %322 = load float, ptr addrspace(3) %321, align 8, !dbg !31
  %.idx14 = shl nuw nsw i32 %23, 3, !dbg !31
  %323 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !31
  %324 = load float, ptr addrspace(3) %323, align 8, !dbg !31
  %.idx15 = shl nuw nsw i32 %24, 3, !dbg !31
  %325 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx15, !dbg !31
  %326 = load float, ptr addrspace(3) %325, align 8, !dbg !31
  %.idx16 = shl nuw nsw i32 %25, 3, !dbg !31
  %327 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !31
  %328 = load float, ptr addrspace(3) %327, align 8, !dbg !31
  %.idx17 = shl nuw nsw i32 %26, 3, !dbg !31
  %329 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx17, !dbg !31
  %330 = load float, ptr addrspace(3) %329, align 8, !dbg !31
  %.idx18 = shl nuw nsw i32 %27, 3, !dbg !31
  %331 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx18, !dbg !31
  %332 = load float, ptr addrspace(3) %331, align 8, !dbg !31
  %333 = fadd float %220, %302, !dbg !35
  %334 = fadd float %225, %304, !dbg !35
  %335 = fadd float %230, %306, !dbg !35
  %336 = fadd float %235, %308, !dbg !35
  %337 = fadd float %240, %310, !dbg !35
  %338 = fadd float %245, %312, !dbg !35
  %339 = fadd float %250, %314, !dbg !35
  %340 = fadd float %255, %316, !dbg !35
  %341 = fadd float %260, %318, !dbg !35
  %342 = fadd float %265, %320, !dbg !35
  %343 = fadd float %270, %322, !dbg !35
  %344 = fadd float %275, %324, !dbg !35
  %345 = fadd float %280, %326, !dbg !35
  %346 = fadd float %285, %328, !dbg !35
  %347 = fadd float %290, %330, !dbg !35
  %348 = fadd float %295, %332, !dbg !35
  %349 = fcmp olt float %333, 0.000000e+00, !dbg !36
  %350 = fcmp olt float %334, 0.000000e+00, !dbg !36
  %351 = fcmp olt float %335, 0.000000e+00, !dbg !36
  %352 = fcmp olt float %336, 0.000000e+00, !dbg !36
  %353 = fcmp olt float %337, 0.000000e+00, !dbg !36
  %354 = fcmp olt float %338, 0.000000e+00, !dbg !36
  %355 = fcmp olt float %339, 0.000000e+00, !dbg !36
  %356 = fcmp olt float %340, 0.000000e+00, !dbg !36
  %357 = fcmp olt float %341, 0.000000e+00, !dbg !36
  %358 = fcmp olt float %342, 0.000000e+00, !dbg !36
  %359 = fcmp olt float %343, 0.000000e+00, !dbg !36
  %360 = fcmp olt float %344, 0.000000e+00, !dbg !36
  %361 = fcmp olt float %345, 0.000000e+00, !dbg !36
  %362 = fcmp olt float %346, 0.000000e+00, !dbg !36
  %363 = fcmp olt float %347, 0.000000e+00, !dbg !36
  %364 = fcmp olt float %348, 0.000000e+00, !dbg !36
  %365 = select i1 %349, float 0.000000e+00, float %333, !dbg !31
  %366 = select i1 %350, float 0.000000e+00, float %334, !dbg !31
  %367 = select i1 %351, float 0.000000e+00, float %335, !dbg !31
  %368 = select i1 %352, float 0.000000e+00, float %336, !dbg !31
  %369 = select i1 %353, float 0.000000e+00, float %337, !dbg !31
  %370 = select i1 %354, float 0.000000e+00, float %338, !dbg !31
  %371 = select i1 %355, float 0.000000e+00, float %339, !dbg !31
  %372 = select i1 %356, float 0.000000e+00, float %340, !dbg !31
  %373 = select i1 %357, float 0.000000e+00, float %341, !dbg !31
  %374 = select i1 %358, float 0.000000e+00, float %342, !dbg !31
  %375 = select i1 %359, float 0.000000e+00, float %343, !dbg !31
  %376 = select i1 %360, float 0.000000e+00, float %344, !dbg !31
  %377 = select i1 %361, float 0.000000e+00, float %345, !dbg !31
  %378 = select i1 %362, float 0.000000e+00, float %346, !dbg !31
  %379 = select i1 %363, float 0.000000e+00, float %347, !dbg !31
  %380 = select i1 %364, float 0.000000e+00, float %348, !dbg !31
  %381 = mul i32 %31, 961, !dbg !37
  %382 = mul i32 %32, 961, !dbg !37
  %383 = mul i32 %33, 961, !dbg !37
  %384 = mul i32 %34, 961, !dbg !37
  %385 = mul i32 %35, 961, !dbg !37
  %386 = mul i32 %36, 961, !dbg !37
  %387 = mul i32 %37, 961, !dbg !37
  %388 = mul i32 %38, 961, !dbg !37
  %389 = mul i32 %39, 961, !dbg !37
  %390 = mul i32 %40, 961, !dbg !37
  %391 = mul i32 %41, 961, !dbg !37
  %392 = mul i32 %42, 961, !dbg !37
  %393 = mul i32 %43, 961, !dbg !37
  %394 = mul i32 %44, 961, !dbg !37
  %395 = mul i32 %45, 961, !dbg !37
  %396 = mul i32 %46, 961, !dbg !37
  %397 = add i32 %74, %381, !dbg !38
  %398 = add i32 %74, %382, !dbg !38
  %399 = add i32 %74, %383, !dbg !38
  %400 = add i32 %74, %384, !dbg !38
  %401 = add i32 %74, %385, !dbg !38
  %402 = add i32 %74, %386, !dbg !38
  %403 = add i32 %74, %387, !dbg !38
  %404 = add i32 %74, %388, !dbg !38
  %405 = add i32 %74, %389, !dbg !38
  %406 = add i32 %74, %390, !dbg !38
  %407 = add i32 %74, %391, !dbg !38
  %408 = add i32 %74, %392, !dbg !38
  %409 = add i32 %74, %393, !dbg !38
  %410 = add i32 %74, %394, !dbg !38
  %411 = add i32 %74, %395, !dbg !38
  %412 = add i32 %74, %396, !dbg !38
  %413 = sext i32 %397 to i64, !dbg !39
  %414 = getelementptr float, ptr addrspace(1) %2, i64 %413, !dbg !39
  %415 = sext i32 %398 to i64, !dbg !39
  %416 = getelementptr float, ptr addrspace(1) %2, i64 %415, !dbg !39
  %417 = sext i32 %399 to i64, !dbg !39
  %418 = getelementptr float, ptr addrspace(1) %2, i64 %417, !dbg !39
  %419 = sext i32 %400 to i64, !dbg !39
  %420 = getelementptr float, ptr addrspace(1) %2, i64 %419, !dbg !39
  %421 = sext i32 %401 to i64, !dbg !39
  %422 = getelementptr float, ptr addrspace(1) %2, i64 %421, !dbg !39
  %423 = sext i32 %402 to i64, !dbg !39
  %424 = getelementptr float, ptr addrspace(1) %2, i64 %423, !dbg !39
  %425 = sext i32 %403 to i64, !dbg !39
  %426 = getelementptr float, ptr addrspace(1) %2, i64 %425, !dbg !39
  %427 = sext i32 %404 to i64, !dbg !39
  %428 = getelementptr float, ptr addrspace(1) %2, i64 %427, !dbg !39
  %429 = sext i32 %405 to i64, !dbg !39
  %430 = getelementptr float, ptr addrspace(1) %2, i64 %429, !dbg !39
  %431 = sext i32 %406 to i64, !dbg !39
  %432 = getelementptr float, ptr addrspace(1) %2, i64 %431, !dbg !39
  %433 = sext i32 %407 to i64, !dbg !39
  %434 = getelementptr float, ptr addrspace(1) %2, i64 %433, !dbg !39
  %435 = sext i32 %408 to i64, !dbg !39
  %436 = getelementptr float, ptr addrspace(1) %2, i64 %435, !dbg !39
  %437 = sext i32 %409 to i64, !dbg !39
  %438 = getelementptr float, ptr addrspace(1) %2, i64 %437, !dbg !39
  %439 = sext i32 %410 to i64, !dbg !39
  %440 = getelementptr float, ptr addrspace(1) %2, i64 %439, !dbg !39
  %441 = sext i32 %411 to i64, !dbg !39
  %442 = getelementptr float, ptr addrspace(1) %2, i64 %441, !dbg !39
  %443 = sext i32 %412 to i64, !dbg !39
  %444 = getelementptr float, ptr addrspace(1) %2, i64 %443, !dbg !39
  %445 = bitcast float %365 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %445, ptr addrspace(1) %414, i1 %105) #2, !dbg !40
  %446 = bitcast float %366 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %446, ptr addrspace(1) %416, i1 %106) #2, !dbg !40
  %447 = bitcast float %367 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %447, ptr addrspace(1) %418, i1 %107) #2, !dbg !40
  %448 = bitcast float %368 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %448, ptr addrspace(1) %420, i1 %108) #2, !dbg !40
  %449 = bitcast float %369 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %449, ptr addrspace(1) %422, i1 %109) #2, !dbg !40
  %450 = bitcast float %370 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %450, ptr addrspace(1) %424, i1 %110) #2, !dbg !40
  %451 = bitcast float %371 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %451, ptr addrspace(1) %426, i1 %111) #2, !dbg !40
  %452 = bitcast float %372 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %452, ptr addrspace(1) %428, i1 %112) #2, !dbg !40
  %453 = bitcast float %373 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %453, ptr addrspace(1) %430, i1 %113) #2, !dbg !40
  %454 = bitcast float %374 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %454, ptr addrspace(1) %432, i1 %114) #2, !dbg !40
  %455 = bitcast float %375 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %455, ptr addrspace(1) %434, i1 %115) #2, !dbg !40
  %456 = bitcast float %376 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %456, ptr addrspace(1) %436, i1 %116) #2, !dbg !40
  %457 = bitcast float %377 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %457, ptr addrspace(1) %438, i1 %117) #2, !dbg !40
  %458 = bitcast float %378 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %458, ptr addrspace(1) %440, i1 %118) #2, !dbg !40
  %459 = bitcast float %379 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %459, ptr addrspace(1) %442, i1 %119) #2, !dbg !40
  %460 = bitcast float %380 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %460, ptr addrspace(1) %444, i1 %120) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cstaarsnbemu4daenwrw2iv3lbe5sphuamdxrw5evpkjhyzh5pvz.py", directory: "inductor_cache/st")
!4 = !{ptr @triton_poi_fused_convolution_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_2", linkageName: "triton_poi_fused_convolution_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 37, column: 34, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 45, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
