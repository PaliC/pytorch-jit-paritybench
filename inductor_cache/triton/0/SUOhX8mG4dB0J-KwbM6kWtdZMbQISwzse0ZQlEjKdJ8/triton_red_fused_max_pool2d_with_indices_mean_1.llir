; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_max_pool2d_with_indices_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = and i32 %9, 63, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = lshr i32 %9, 6, !dbg !15
  %19 = shl i32 %14, 10, !dbg !16
  %20 = shl i32 %15, 8, !dbg !17
  %21 = and i32 %18, 3
  %22 = add i32 %19, -33
  %23 = add i32 %19, -32
  %24 = add i32 %19, -31
  %25 = add i32 %19, -1
  %26 = or disjoint i32 %20, %10
  %27 = shl i32 %9, 2
  %28 = and i32 %27, 252
  %.reass = or disjoint i32 %28, %21
  %29 = and i32 %9, 255
  %30 = lshr exact i32 %28, 2
  %31 = add nuw nsw i32 %.reass, %30
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %31
  %33 = lshr i32 %29, 2
  %34 = add nuw nsw i32 %33, %29
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %34
  %36 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %31
  %37 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %34
  %38 = sext i32 %26 to i64, !dbg !18
  br label %39, !dbg !18

39:                                               ; preds = %6, %39
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %39 ]
  %40 = phi float [ 0.000000e+00, %6 ], [ %145, %39 ]
  %41 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %.masked = and i32 %41, 12, !dbg !19
  %42 = or disjoint i32 %21, %.masked, !dbg !19
  %43 = icmp samesign ugt i64 %indvars.iv, 15, !dbg !20
  %44 = shl nuw nsw i32 %42, 1, !dbg !21
  %45 = icmp ne i32 %42, 0, !dbg !22
  %46 = and i1 %43, %45, !dbg !23
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !24
  %47 = shl nuw nsw i32 %indvars.iv.tr, 2, !dbg !24
  %48 = and i32 %47, 960, !dbg !24
  %49 = add i32 %22, %48, !dbg !25
  %50 = add nuw nsw i32 %49, %44, !dbg !26
  %51 = sext i32 %50 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !27
  %53 = and i1 %16, %46, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 -8388608, i1 %53) #3, !dbg !29
  %55 = bitcast i32 %54 to float, !dbg !29
  %56 = add i32 %23, %48, !dbg !30
  %57 = or disjoint i32 %56, %44, !dbg !31
  %58 = sext i32 %57 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !32
  %60 = and i1 %16, %43, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 -8388608, i1 %60) #3, !dbg !34
  %62 = bitcast i32 %61 to float, !dbg !34
  %63 = fcmp ogt float %62, %55, !dbg !35
  %64 = fcmp uno float %62, 0.000000e+00, !dbg !39
  %65 = or i1 %63, %64, !dbg !40
  %66 = select i1 %65, float %62, float %55, !dbg !41
  %67 = add i32 %24, %48, !dbg !42
  %68 = or disjoint i32 %67, %44, !dbg !43
  %69 = sext i32 %68 to i64, !dbg !44
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !44
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %60, i32 -8388608, i1 %60) #3, !dbg !45
  %72 = bitcast i32 %71 to float, !dbg !45
  %73 = fcmp olt float %66, %72, !dbg !46
  %74 = fcmp uno float %72, 0.000000e+00, !dbg !48
  %75 = or i1 %74, %73, !dbg !49
  %76 = select i1 %75, float %72, float %66, !dbg !50
  %77 = add i32 %25, %48, !dbg !51
  %78 = add i32 %77, %44, !dbg !52
  %79 = sext i32 %78 to i64, !dbg !53
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !53
  %81 = and i1 %16, %45, !dbg !54
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 -8388608, i1 %81) #3, !dbg !55
  %83 = bitcast i32 %82 to float, !dbg !55
  %84 = fcmp olt float %76, %83, !dbg !56
  %85 = fcmp uno float %83, 0.000000e+00, !dbg !58
  %86 = or i1 %85, %84, !dbg !59
  %87 = select i1 %86, float %83, float %76, !dbg !60
  %88 = or disjoint i32 %44, %48, !dbg !61
  %89 = or disjoint i32 %88, %19, !dbg !62
  %90 = sext i32 %89 to i64, !dbg !63
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !63
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %16, i32 -8388608, i1 %16) #3, !dbg !64
  %93 = bitcast i32 %92 to float, !dbg !64
  %94 = fcmp olt float %87, %93, !dbg !65
  %95 = fcmp uno float %93, 0.000000e+00, !dbg !67
  %96 = or i1 %95, %94, !dbg !68
  %97 = select i1 %96, float %93, float %87, !dbg !69
  %98 = or disjoint i32 %89, 1, !dbg !70
  %99 = sext i32 %98 to i64, !dbg !71
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !71
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %16, i32 -8388608, i1 %16) #3, !dbg !72
  %102 = bitcast i32 %101 to float, !dbg !72
  %103 = fcmp olt float %97, %102, !dbg !73
  %104 = fcmp uno float %102, 0.000000e+00, !dbg !75
  %105 = or i1 %104, %103, !dbg !76
  %106 = select i1 %105, float %102, float %97, !dbg !77
  %107 = add nuw nsw i32 %44, 31, !dbg !78
  %108 = or disjoint i32 %107, %48, !dbg !79
  %109 = or disjoint i32 %108, %19, !dbg !80
  %110 = sext i32 %109 to i64, !dbg !81
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !81
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %81, i32 -8388608, i1 %81) #3, !dbg !82
  %113 = bitcast i32 %112 to float, !dbg !82
  %114 = fcmp olt float %106, %113, !dbg !83
  %115 = fcmp uno float %113, 0.000000e+00, !dbg !85
  %116 = or i1 %115, %114, !dbg !86
  %117 = select i1 %116, float %113, float %106, !dbg !87
  %118 = or disjoint i32 %89, 32, !dbg !88
  %119 = sext i32 %118 to i64, !dbg !89
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !89
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %16, i32 -8388608, i1 %16) #3, !dbg !90
  %122 = bitcast i32 %121 to float, !dbg !90
  %123 = fcmp olt float %117, %122, !dbg !91
  %124 = fcmp uno float %122, 0.000000e+00, !dbg !93
  %125 = or i1 %124, %123, !dbg !94
  %126 = select i1 %125, float %122, float %117, !dbg !95
  %127 = or disjoint i32 %89, 33, !dbg !96
  %128 = sext i32 %127 to i64, !dbg !97
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !97
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %16, i32 -8388608, i1 %16) #3, !dbg !98
  %131 = bitcast i32 %130 to float, !dbg !98
  %132 = fcmp olt float %126, %131, !dbg !99
  %133 = fcmp uno float %131, 0.000000e+00, !dbg !101
  %134 = or i1 %133, %132, !dbg !102
  %135 = select i1 %134, float %131, float %126, !dbg !103
  %136 = zext i1 %63 to i8, !dbg !104
  %137 = select i1 %73, i8 2, i8 %136, !dbg !105
  %138 = select i1 %84, i8 3, i8 %137, !dbg !106
  %139 = select i1 %94, i8 4, i8 %138, !dbg !107
  %140 = select i1 %103, i8 5, i8 %139, !dbg !108
  %141 = select i1 %114, i8 6, i8 %140, !dbg !109
  %142 = select i1 %123, i8 7, i8 %141, !dbg !110
  %143 = select i1 %132, i8 8, i8 %142, !dbg !111
  %144 = fadd float %40, %135, !dbg !112
  %145 = select i1 %16, float %144, float %40, !dbg !113
  %146 = add nuw nsw i64 %indvars.iv, %38, !dbg !114
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %148 = bitcast float %135 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %148, i1 true) #3, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %149 = load i32, ptr addrspace(3) %35, align 4, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %147, i1 %17) #3, !dbg !116
  %150 = getelementptr i8, ptr addrspace(1) %3, i64 %146, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %151 = insertelement <1 x i8> poison, i8 %143, i64 0, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %36, <1 x i8> %151, i1 true) #3, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %152 = load i8, ptr addrspace(3) %37, align 1, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %152, ptr addrspace(1) %150, i1 %17) #3, !dbg !118
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !18
  %153 = icmp samesign ult i64 %indvars.iv, 252, !dbg !18
  br i1 %153, label %39, label %154, !dbg !18

154:                                              ; preds = %39
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %155 = shl nuw nsw i32 %11, 2, !dbg !119
  %156 = or disjoint i32 %155, %21, !dbg !119
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !119
  %158 = bitcast float %145 to <1 x i32>, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #3, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %159 = icmp slt i32 %9, 256, !dbg !119
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !119
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #3, !dbg !119
  %162 = bitcast i32 %161 to float, !dbg !119
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !119
  %164 = bitcast i32 %163 to float, !dbg !119
  %165 = fadd float %162, %164, !dbg !123
  %166 = bitcast float %165 to i32, !dbg !119
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !119
  %168 = bitcast i32 %167 to float, !dbg !119
  %169 = fadd float %165, %168, !dbg !123
  %170 = icmp eq i32 %10, 0, !dbg !119
  %171 = and i1 %159, %170, !dbg !119
  %172 = bitcast float %169 to <1 x i32>, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %172, i1 %171) #3, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !119
  %174 = load float, ptr addrspace(3) %173, align 16, !dbg !119
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float 2.560000e+02) #3, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %176 = sext i32 %14 to i64, !dbg !127
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !127
  %178 = icmp eq i32 %21, 0, !dbg !128
  %179 = bitcast float %175 to i32, !dbg !128
  %180 = and i1 %178, %16, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %177, i1 %180) #3, !dbg !128
  ret void, !dbg !129
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_max_pool2d_with_indices_mean_1", linkageName: "triton_red_fused_max_pool2d_with_indices_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 45, column: 63, scope: !7)
!17 = !DILocation(line: 114, column: 38, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 32, column: 23, scope: !7)
!20 = !DILocation(line: 36, column: 23, scope: !7)
!21 = !DILocation(line: 40, column: 24, scope: !7)
!22 = !DILocation(line: 41, column: 23, scope: !7)
!23 = !DILocation(line: 44, column: 23, scope: !7)
!24 = !DILocation(line: 45, column: 53, scope: !7)
!25 = !DILocation(line: 45, column: 50, scope: !7)
!26 = !DILocation(line: 45, column: 58, scope: !7)
!27 = !DILocation(line: 45, column: 35, scope: !7)
!28 = !DILocation(line: 45, column: 84, scope: !7)
!29 = !DILocation(line: 45, column: 68, scope: !7)
!30 = !DILocation(line: 51, column: 50, scope: !7)
!31 = !DILocation(line: 51, column: 58, scope: !7)
!32 = !DILocation(line: 51, column: 35, scope: !7)
!33 = !DILocation(line: 51, column: 84, scope: !7)
!34 = !DILocation(line: 51, column: 68, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 52, column: 46, scope: !7)
!39 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 58, column: 50, scope: !7)
!43 = !DILocation(line: 58, column: 58, scope: !7)
!44 = !DILocation(line: 58, column: 35, scope: !7)
!45 = !DILocation(line: 58, column: 68, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !47)
!47 = !DILocation(line: 59, column: 46, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !47)
!51 = !DILocation(line: 65, column: 49, scope: !7)
!52 = !DILocation(line: 65, column: 57, scope: !7)
!53 = !DILocation(line: 65, column: 35, scope: !7)
!54 = !DILocation(line: 65, column: 83, scope: !7)
!55 = !DILocation(line: 65, column: 67, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !57)
!57 = !DILocation(line: 66, column: 46, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !57)
!61 = !DILocation(line: 68, column: 42, scope: !7)
!62 = !DILocation(line: 68, column: 50, scope: !7)
!63 = !DILocation(line: 68, column: 35, scope: !7)
!64 = !DILocation(line: 68, column: 60, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !66)
!66 = !DILocation(line: 69, column: 46, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !66)
!70 = !DILocation(line: 71, column: 54, scope: !7)
!71 = !DILocation(line: 71, column: 35, scope: !7)
!72 = !DILocation(line: 71, column: 64, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !74)
!74 = !DILocation(line: 72, column: 46, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !74)
!78 = !DILocation(line: 78, column: 40, scope: !7)
!79 = !DILocation(line: 78, column: 47, scope: !7)
!80 = !DILocation(line: 78, column: 55, scope: !7)
!81 = !DILocation(line: 78, column: 35, scope: !7)
!82 = !DILocation(line: 78, column: 65, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !84)
!84 = !DILocation(line: 79, column: 46, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !84)
!88 = !DILocation(line: 81, column: 55, scope: !7)
!89 = !DILocation(line: 81, column: 35, scope: !7)
!90 = !DILocation(line: 81, column: 65, scope: !7)
!91 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !92)
!92 = !DILocation(line: 82, column: 46, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !92)
!96 = !DILocation(line: 84, column: 55, scope: !7)
!97 = !DILocation(line: 84, column: 35, scope: !7)
!98 = !DILocation(line: 84, column: 65, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !100)
!100 = !DILocation(line: 85, column: 46, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !100)
!104 = !DILocation(line: 89, column: 39, scope: !7)
!105 = !DILocation(line: 92, column: 39, scope: !7)
!106 = !DILocation(line: 95, column: 39, scope: !7)
!107 = !DILocation(line: 98, column: 39, scope: !7)
!108 = !DILocation(line: 101, column: 39, scope: !7)
!109 = !DILocation(line: 104, column: 39, scope: !7)
!110 = !DILocation(line: 107, column: 39, scope: !7)
!111 = !DILocation(line: 110, column: 39, scope: !7)
!112 = !DILocation(line: 112, column: 25, scope: !7)
!113 = !DILocation(line: 113, column: 48, scope: !7)
!114 = !DILocation(line: 114, column: 34, scope: !7)
!115 = !DILocation(line: 114, column: 29, scope: !7)
!116 = !DILocation(line: 114, column: 50, scope: !7)
!117 = !DILocation(line: 115, column: 29, scope: !7)
!118 = !DILocation(line: 115, column: 50, scope: !7)
!119 = !DILocation(line: 267, column: 36, scope: !120, inlinedAt: !122)
!120 = distinct !DILexicalBlockFile(scope: !7, file: !121, discriminator: 0)
!121 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!122 = !DILocation(line: 116, column: 27, scope: !7)
!123 = !DILocation(line: 256, column: 15, scope: !124, inlinedAt: !122)
!124 = distinct !DILexicalBlockFile(scope: !120, file: !121, discriminator: 0)
!125 = !DILocation(line: 118, column: 20, scope: !7)
!126 = !DILocation(line: 119, column: 4, scope: !7)
!127 = !DILocation(line: 120, column: 28, scope: !7)
!128 = !DILocation(line: 120, column: 40, scope: !7)
!129 = !DILocation(line: 120, column: 4, scope: !7)
