; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pixel_shuffle_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %14, 256, !dbg !12
  %17 = or disjoint i32 %14, 384, !dbg !12
  %18 = or disjoint i32 %10, %13, !dbg !13
  %19 = or disjoint i32 %10, %14, !dbg !13
  %20 = or disjoint i32 %10, %15, !dbg !13
  %21 = or disjoint i32 %10, %16, !dbg !13
  %22 = or disjoint i32 %10, %17, !dbg !13
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !14
  %24 = icmp slt i32 %23, 8, !dbg !15
  %25 = srem i32 %18, 8, !dbg !16
  %26 = sdiv i32 %19, 8, !dbg !17
  %27 = sdiv i32 %20, 8, !dbg !17
  %28 = sdiv i32 %21, 8, !dbg !17
  %29 = sdiv i32 %22, 8, !dbg !17
  %30 = srem i32 %26, 8, !dbg !18
  %31 = srem i32 %27, 8, !dbg !18
  %32 = srem i32 %28, 8, !dbg !18
  %33 = srem i32 %29, 8, !dbg !18
  %34 = sdiv i32 %18, 512, !dbg !19
  %35 = sdiv i32 %19, 512, !dbg !19
  %36 = sdiv i32 %20, 512, !dbg !19
  %37 = sdiv i32 %21, 512, !dbg !19
  %38 = sdiv i32 %22, 512, !dbg !19
  %39 = srem i32 %35, 4, !dbg !20
  %40 = srem i32 %36, 4, !dbg !20
  %41 = srem i32 %37, 4, !dbg !20
  %42 = srem i32 %38, 4, !dbg !20
  %43 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !21
  %44 = shufflevector <2 x i32> %43, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !21
  %45 = sdiv <2 x i32> %44, <i32 64, i32 8>, !dbg !21
  %46 = srem <2 x i32> %45, splat (i32 8), !dbg !22
  %47 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !23
  %48 = insertelement <4 x i32> %47, i32 %34, i64 1, !dbg !23
  %49 = shufflevector <2 x i32> %46, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !23
  %50 = shufflevector <4 x i32> %48, <4 x i32> %49, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !23
  %51 = shl <4 x i32> %50, <i32 6, i32 12, i32 3, i32 9>, !dbg !23
  %52 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %51), !dbg !24
  %op.rdx = add i32 %52, %25, !dbg !25
  %53 = sext i32 %op.rdx to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %24) #5, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %.idx = shl nuw nsw i32 %13, 3, !dbg !27
  %60 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !27
  %61 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #5, !dbg !27
  %62 = shl nuw nsw i32 %13, 1, !dbg !27
  %63 = or disjoint i32 %62, 2, !dbg !27
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !27
  %65 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #5, !dbg !27
  %66 = or disjoint i32 %62, 4, !dbg !27
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66, !dbg !27
  %68 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #5, !dbg !27
  %69 = or disjoint i32 %62, 6, !dbg !27
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !27
  %71 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %.idx1 = shl nuw nsw i32 %14, 3, !dbg !27
  %72 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !27
  %73 = load float, ptr addrspace(3) %72, align 8, !dbg !27
  %.idx2 = shl nuw nsw i32 %15, 3, !dbg !27
  %74 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !27
  %75 = load float, ptr addrspace(3) %74, align 8, !dbg !27
  %.idx3 = shl nuw nsw i32 %16, 3, !dbg !27
  %76 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !27
  %77 = load float, ptr addrspace(3) %76, align 8, !dbg !27
  %.idx4 = shl nuw nsw i32 %17, 3, !dbg !27
  %78 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !27
  %79 = load float, ptr addrspace(3) %78, align 8, !dbg !27
  %80 = shl nsw i32 %30, 3, !dbg !28
  %81 = shl nsw i32 %31, 3, !dbg !28
  %82 = shl nsw i32 %32, 3, !dbg !28
  %83 = shl nsw i32 %33, 3, !dbg !28
  %84 = add i32 %80, %23, !dbg !29
  %85 = add i32 %81, %23, !dbg !29
  %86 = add i32 %82, %23, !dbg !29
  %87 = add i32 %83, %23, !dbg !29
  %88 = shl nsw i32 %39, 6, !dbg !30
  %89 = shl nsw i32 %40, 6, !dbg !30
  %90 = shl nsw i32 %41, 6, !dbg !30
  %91 = shl nsw i32 %42, 6, !dbg !30
  %92 = add i32 %84, %88, !dbg !31
  %93 = add i32 %85, %89, !dbg !31
  %94 = add i32 %86, %90, !dbg !31
  %95 = add i32 %87, %91, !dbg !31
  %96 = sext i32 %92 to i64, !dbg !32
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !32
  %98 = sext i32 %93 to i64, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !32
  %100 = sext i32 %94 to i64, !dbg !32
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !32
  %102 = sext i32 %95 to i64, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !32
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %24) #5, !dbg !33
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %24) #5, !dbg !33
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %24) #5, !dbg !33
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %24) #5, !dbg !33
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !34
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !34
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !34
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !34
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %24) #5, !dbg !35
  %113 = bitcast i32 %112 to float, !dbg !35
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %24) #5, !dbg !35
  %115 = bitcast i32 %114 to float, !dbg !35
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %24) #5, !dbg !35
  %117 = bitcast i32 %116 to float, !dbg !35
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %24) #5, !dbg !35
  %119 = bitcast i32 %118 to float, !dbg !35
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %96, !dbg !36
  %121 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !36
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !36
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !36
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %24) #5, !dbg !37
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %24) #5, !dbg !37
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %24) #5, !dbg !37
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %24) #5, !dbg !37
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %96, !dbg !38
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %98, !dbg !38
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !38
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %102, !dbg !38
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %24) #5, !dbg !39
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %24) #5, !dbg !39
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %24) #5, !dbg !39
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %24) #5, !dbg !39
  %136 = fadd float %113, 0x3EE4F8B580000000, !dbg !40
  %137 = fadd float %115, 0x3EE4F8B580000000, !dbg !40
  %138 = fadd float %117, 0x3EE4F8B580000000, !dbg !40
  %139 = fadd float %119, 0x3EE4F8B580000000, !dbg !40
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %140, 0, !dbg !41
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %141, 0, !dbg !41
  br i1 %.not.i, label %147, label %142, !dbg !41

142:                                              ; preds = %8
  br i1 %.not1.i, label %145, label %143, !dbg !41

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

147:                                              ; preds = %8
  br i1 %.not1.i, label %150, label %148, !dbg !41

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %143, %145, %148, %150
  %.0.i = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !41
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i5 = icmp eq i32 %152, 0, !dbg !41
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i8 = icmp eq i32 %153, 0, !dbg !41
  br i1 %.not.i5, label %159, label %154, !dbg !41

154:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %157, label %155, !dbg !41

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #5, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #5, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

159:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %162, label %160, !dbg !41

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #5, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #5, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

__nv_sqrtf.exit9:                                 ; preds = %155, %157, %160, %162
  %.0.i7 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !41
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i10 = icmp eq i32 %164, 0, !dbg !41
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i13 = icmp eq i32 %165, 0, !dbg !41
  br i1 %.not.i10, label %171, label %166, !dbg !41

166:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %169, label %167, !dbg !41

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #5, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #5, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

171:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %174, label %172, !dbg !41

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #5, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #5, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

__nv_sqrtf.exit14:                                ; preds = %167, %169, %172, %174
  %.0.i12 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !41
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i15 = icmp eq i32 %176, 0, !dbg !41
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i18 = icmp eq i32 %177, 0, !dbg !41
  br i1 %.not.i15, label %183, label %178, !dbg !41

178:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %181, label %179, !dbg !41

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #5, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #5, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

183:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %186, label %184, !dbg !41

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #5, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #5, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

__nv_sqrtf.exit19:                                ; preds = %179, %181, %184, %186
  %.0.i17 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !41
  %188 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !33
  %189 = insertelement <4 x i32> %188, i32 %106, i64 1, !dbg !33
  %190 = insertelement <4 x i32> %189, i32 %105, i64 2, !dbg !33
  %191 = insertelement <4 x i32> %190, i32 %104, i64 3, !dbg !33
  %192 = bitcast <4 x i32> %191 to <4 x float>, !dbg !33
  %193 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !39
  %194 = insertelement <4 x i32> %193, i32 %134, i64 1, !dbg !39
  %195 = insertelement <4 x i32> %194, i32 %133, i64 2, !dbg !39
  %196 = insertelement <4 x i32> %195, i32 %132, i64 3, !dbg !39
  %197 = bitcast <4 x i32> %196 to <4 x float>, !dbg !39
  %198 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !37
  %199 = insertelement <4 x i32> %198, i32 %126, i64 1, !dbg !37
  %200 = insertelement <4 x i32> %199, i32 %125, i64 2, !dbg !37
  %201 = insertelement <4 x i32> %200, i32 %124, i64 3, !dbg !37
  %202 = bitcast <4 x i32> %201 to <4 x float>, !dbg !37
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !42
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #5, !dbg !42
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #5, !dbg !42
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #5, !dbg !42
  %207 = insertelement <4 x float> poison, float %79, i64 0, !dbg !43
  %208 = insertelement <4 x float> %207, float %77, i64 1, !dbg !43
  %209 = insertelement <4 x float> %208, float %75, i64 2, !dbg !43
  %210 = insertelement <4 x float> %209, float %73, i64 3, !dbg !43
  %211 = fsub <4 x float> %210, %192, !dbg !43
  %212 = insertelement <4 x float> poison, float %206, i64 0, !dbg !44
  %213 = insertelement <4 x float> %212, float %205, i64 1, !dbg !44
  %214 = insertelement <4 x float> %213, float %204, i64 2, !dbg !44
  %215 = insertelement <4 x float> %214, float %203, i64 3, !dbg !44
  %216 = fmul <4 x float> %211, %215, !dbg !44
  %217 = fmul <4 x float> %216, %202, !dbg !45
  %218 = fadd <4 x float> %217, %197, !dbg !46
  %219 = fcmp olt <4 x float> %218, zeroinitializer, !dbg !47
  %220 = extractelement <4 x i1> %219, i64 3, !dbg !51
  %221 = extractelement <4 x i1> %219, i64 2, !dbg !51
  %222 = extractelement <4 x i1> %219, i64 1, !dbg !51
  %223 = extractelement <4 x i1> %219, i64 0, !dbg !51
  %224 = shl i32 %19, 3, !dbg !52
  %225 = shl i32 %20, 3, !dbg !52
  %226 = shl i32 %21, 3, !dbg !52
  %227 = shl i32 %22, 3, !dbg !52
  %228 = add i32 %224, %23, !dbg !53
  %229 = add i32 %225, %23, !dbg !53
  %230 = add i32 %226, %23, !dbg !53
  %231 = add i32 %227, %23, !dbg !53
  %232 = sext i32 %228 to i64, !dbg !54
  %233 = getelementptr float, ptr addrspace(1) %5, i64 %232, !dbg !54
  %234 = sext i32 %229 to i64, !dbg !54
  %235 = getelementptr float, ptr addrspace(1) %5, i64 %234, !dbg !54
  %236 = sext i32 %230 to i64, !dbg !54
  %237 = getelementptr float, ptr addrspace(1) %5, i64 %236, !dbg !54
  %238 = sext i32 %231 to i64, !dbg !54
  %239 = getelementptr float, ptr addrspace(1) %5, i64 %238, !dbg !54
  %bc = bitcast <4 x float> %218 to <4 x i32>, !dbg !55
  %240 = extractelement <4 x i32> %bc, i64 3, !dbg !55
  %241 = select i1 %220, i32 0, i32 %240, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %233, i1 %24) #5, !dbg !55
  %bc20 = bitcast <4 x float> %218 to <4 x i32>, !dbg !55
  %242 = extractelement <4 x i32> %bc20, i64 2, !dbg !55
  %243 = select i1 %221, i32 0, i32 %242, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %243, ptr addrspace(1) %235, i1 %24) #5, !dbg !55
  %bc21 = bitcast <4 x float> %218 to <4 x i32>, !dbg !55
  %244 = extractelement <4 x i32> %bc21, i64 1, !dbg !55
  %245 = select i1 %222, i32 0, i32 %244, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %245, ptr addrspace(1) %237, i1 %24) #5, !dbg !55
  %bc22 = bitcast <4 x float> %218 to <4 x i32>, !dbg !55
  %246 = extractelement <4 x i32> %bc22, i64 0, !dbg !55
  %247 = select i1 %223, i32 0, i32 %246, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %247, ptr addrspace(1) %239, i1 %24) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3cdbhjxmsend7ypfcp7e33aht3v6kggiwqjtrzpzqupjxvjtpwi.py", directory: "inductor_cache/3c")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_16", linkageName: "triton_poi_fused_pixel_shuffle_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 26, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 28, scope: !7)
!21 = !DILocation(line: 31, column: 21, scope: !7)
!22 = !DILocation(line: 31, column: 27, scope: !7)
!23 = !DILocation(line: 35, column: 45, scope: !7)
!24 = !DILocation(line: 35, column: 59, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 69, scope: !7)
!28 = !DILocation(line: 36, column: 37, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 45, scope: !7)
!31 = !DILocation(line: 36, column: 42, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 50, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 50, scope: !7)
!36 = !DILocation(line: 38, column: 31, scope: !7)
!37 = !DILocation(line: 38, column: 51, scope: !7)
!38 = !DILocation(line: 39, column: 31, scope: !7)
!39 = !DILocation(line: 39, column: 51, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 26, scope: !7)
!42 = !DILocation(line: 45, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 48, column: 19, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 52, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 53, column: 32, scope: !7)
!53 = !DILocation(line: 53, column: 30, scope: !7)
!54 = !DILocation(line: 53, column: 25, scope: !7)
!55 = !DILocation(line: 53, column: 44, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
