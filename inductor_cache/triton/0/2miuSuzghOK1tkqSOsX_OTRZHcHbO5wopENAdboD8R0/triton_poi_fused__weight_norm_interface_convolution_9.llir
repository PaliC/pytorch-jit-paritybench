; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 252, !dbg !12
  %13 = and i32 %10, 15, !dbg !12
  %14 = and i32 %10, 255, !dbg !12
  %15 = lshr i32 %10, 4, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %16, 32, !dbg !12
  %19 = or disjoint i32 %16, 48, !dbg !12
  %20 = or disjoint i32 %16, 64, !dbg !12
  %21 = or disjoint i32 %16, 80, !dbg !12
  %22 = or disjoint i32 %16, 96, !dbg !12
  %23 = or disjoint i32 %16, 112, !dbg !12
  %24 = or disjoint i32 %16, 128, !dbg !12
  %25 = or disjoint i32 %16, 144, !dbg !12
  %26 = or disjoint i32 %16, 160, !dbg !12
  %27 = or disjoint i32 %16, 176, !dbg !12
  %28 = or disjoint i32 %16, 192, !dbg !12
  %29 = or disjoint i32 %16, 208, !dbg !12
  %30 = or disjoint i32 %16, 224, !dbg !12
  %31 = or disjoint i32 %16, 240, !dbg !12
  %32 = or disjoint i32 %9, %12, !dbg !13
  %33 = or disjoint i32 %9, %14, !dbg !13
  %34 = or disjoint i32 %9, %16, !dbg !13
  %35 = or disjoint i32 %9, %17, !dbg !13
  %36 = or disjoint i32 %9, %18, !dbg !13
  %37 = or disjoint i32 %9, %19, !dbg !13
  %38 = or disjoint i32 %9, %20, !dbg !13
  %39 = or disjoint i32 %9, %21, !dbg !13
  %40 = or disjoint i32 %9, %22, !dbg !13
  %41 = or disjoint i32 %9, %23, !dbg !13
  %42 = or disjoint i32 %9, %24, !dbg !13
  %43 = or disjoint i32 %9, %25, !dbg !13
  %44 = or disjoint i32 %9, %26, !dbg !13
  %45 = or disjoint i32 %9, %27, !dbg !13
  %46 = or disjoint i32 %9, %28, !dbg !13
  %47 = or disjoint i32 %9, %29, !dbg !13
  %48 = or disjoint i32 %9, %30, !dbg !13
  %49 = or disjoint i32 %9, %31, !dbg !13
  %50 = icmp slt i32 %32, 512, !dbg !14
  %51 = icmp slt i32 %33, 512, !dbg !14
  %52 = icmp slt i32 %34, 512, !dbg !14
  %53 = icmp slt i32 %35, 512, !dbg !14
  %54 = icmp slt i32 %36, 512, !dbg !14
  %55 = icmp slt i32 %37, 512, !dbg !14
  %56 = icmp slt i32 %38, 512, !dbg !14
  %57 = icmp slt i32 %39, 512, !dbg !14
  %58 = icmp slt i32 %40, 512, !dbg !14
  %59 = icmp slt i32 %41, 512, !dbg !14
  %60 = icmp slt i32 %42, 512, !dbg !14
  %61 = icmp slt i32 %43, 512, !dbg !14
  %62 = icmp slt i32 %44, 512, !dbg !14
  %63 = icmp slt i32 %45, 512, !dbg !14
  %64 = icmp slt i32 %46, 512, !dbg !14
  %65 = icmp slt i32 %47, 512, !dbg !14
  %66 = icmp slt i32 %48, 512, !dbg !14
  %67 = icmp slt i32 %49, 512, !dbg !14
  %68 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %69 = shl i32 %68, 4, !dbg !16
  %70 = lshr i32 %10, 6, !dbg !17
  %71 = and i32 %70, 3, !dbg !17
  %72 = or disjoint i32 %69, %71, !dbg !18
  %73 = or disjoint i32 %72, 4, !dbg !18
  %74 = or disjoint i32 %72, 8, !dbg !18
  %75 = or disjoint i32 %72, 12, !dbg !18
  %76 = or disjoint i32 %69, %13, !dbg !18
  %77 = icmp slt i32 %72, 25, !dbg !19
  %78 = icmp slt i32 %73, 25, !dbg !19
  %79 = icmp slt i32 %74, 25, !dbg !19
  %80 = icmp slt i32 %75, 25, !dbg !19
  %81 = icmp slt i32 %76, 25, !dbg !19
  %.frozen = freeze i32 %32, !dbg !20
  %82 = sdiv i32 %.frozen, 16, !dbg !20
  %83 = mul i32 %82, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %83, !dbg !21
  %84 = sdiv i32 %33, 16, !dbg !20
  %85 = shl i32 %72, 4, !dbg !22
  %86 = shl i32 %73, 4, !dbg !22
  %87 = shl i32 %74, 4, !dbg !22
  %88 = shl i32 %75, 4, !dbg !22
  %89 = mul i32 %82, 400, !dbg !23
  %90 = add i32 %89, %.decomposed, !dbg !24
  %91 = add i32 %90, %85, !dbg !25
  %92 = add i32 %90, %86, !dbg !25
  %93 = add i32 %90, %87, !dbg !25
  %94 = add i32 %90, %88, !dbg !25
  %95 = sext i32 %91 to i64, !dbg !26
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !26
  %97 = sext i32 %92 to i64, !dbg !26
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !26
  %99 = sext i32 %93 to i64, !dbg !26
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !26
  %101 = sext i32 %94 to i64, !dbg !26
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !26
  %103 = and i1 %50, %77, !dbg !27
  %104 = and i1 %78, %50, !dbg !27
  %105 = and i1 %79, %50, !dbg !27
  %106 = and i1 %80, %50, !dbg !27
  %107 = and i1 %52, %81, !dbg !27
  %108 = and i1 %53, %81, !dbg !27
  %109 = and i1 %54, %81, !dbg !27
  %110 = and i1 %55, %81, !dbg !27
  %111 = and i1 %56, %81, !dbg !27
  %112 = and i1 %57, %81, !dbg !27
  %113 = and i1 %58, %81, !dbg !27
  %114 = and i1 %59, %81, !dbg !27
  %115 = and i1 %60, %81, !dbg !27
  %116 = and i1 %61, %81, !dbg !27
  %117 = and i1 %62, %81, !dbg !27
  %118 = and i1 %63, %81, !dbg !27
  %119 = and i1 %64, %81, !dbg !27
  %120 = and i1 %65, %81, !dbg !27
  %121 = and i1 %66, %81, !dbg !27
  %122 = and i1 %67, %81, !dbg !27
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %103) #2, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !28
  %128 = bitcast i32 %124 to float, !dbg !28
  %129 = bitcast i32 %125 to float, !dbg !28
  %130 = bitcast i32 %126 to float, !dbg !28
  %131 = bitcast i32 %127 to float, !dbg !28
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %104) #2, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !28
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !28
  %137 = bitcast i32 %133 to float, !dbg !28
  %138 = bitcast i32 %134 to float, !dbg !28
  %139 = bitcast i32 %135 to float, !dbg !28
  %140 = bitcast i32 %136 to float, !dbg !28
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %105) #2, !dbg !28
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !28
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !28
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !28
  %146 = bitcast i32 %142 to float, !dbg !28
  %147 = bitcast i32 %143 to float, !dbg !28
  %148 = bitcast i32 %144 to float, !dbg !28
  %149 = bitcast i32 %145 to float, !dbg !28
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %106) #2, !dbg !28
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !28
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !28
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !28
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !28
  %155 = bitcast i32 %151 to float, !dbg !28
  %156 = bitcast i32 %152 to float, !dbg !28
  %157 = bitcast i32 %153 to float, !dbg !28
  %158 = bitcast i32 %154 to float, !dbg !28
  %159 = shl i32 %10, 6, !dbg !28
  %160 = and i32 %159, 4032, !dbg !28
  %161 = or disjoint i32 %160, %71, !dbg !28
  %162 = lshr exact i32 %160, 2, !dbg !28
  %163 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %162, !dbg !28
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !28
  %165 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !28
  %166 = or disjoint i32 %161, 16, !dbg !28
  %167 = lshr i32 %166, 4, !dbg !28
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !28
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !28
  %170 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !28
  %171 = or disjoint i32 %161, 32, !dbg !28
  %172 = lshr i32 %171, 4, !dbg !28
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !28
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !28
  %175 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !28
  %176 = or disjoint i32 %161, 48, !dbg !28
  %177 = lshr i32 %176, 4, !dbg !28
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !28
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !28
  %180 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !28
  %181 = or disjoint i32 %161, 4, !dbg !28
  %182 = getelementptr float, ptr addrspace(3) %163, i32 %181, !dbg !28
  %183 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !28
  %184 = or disjoint i32 %161, 20, !dbg !28
  %185 = lshr i32 %184, 4, !dbg !28
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !28
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %184, !dbg !28
  %188 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !28
  %189 = or disjoint i32 %161, 36, !dbg !28
  %190 = lshr i32 %189, 4, !dbg !28
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !28
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !28
  %193 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !28
  %194 = or disjoint i32 %161, 52, !dbg !28
  %195 = lshr i32 %194, 4, !dbg !28
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !28
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %194, !dbg !28
  %198 = insertelement <1 x i32> poison, i32 %136, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !28
  %199 = or disjoint i32 %161, 8, !dbg !28
  %200 = getelementptr float, ptr addrspace(3) %163, i32 %199, !dbg !28
  %201 = insertelement <1 x i32> poison, i32 %142, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !28
  %202 = or disjoint i32 %161, 24, !dbg !28
  %203 = lshr i32 %202, 4, !dbg !28
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !28
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %202, !dbg !28
  %206 = insertelement <1 x i32> poison, i32 %143, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !28
  %207 = or disjoint i32 %161, 40, !dbg !28
  %208 = lshr i32 %207, 4, !dbg !28
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !28
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !28
  %211 = insertelement <1 x i32> poison, i32 %144, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !28
  %212 = or disjoint i32 %161, 56, !dbg !28
  %213 = lshr i32 %212, 4, !dbg !28
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !28
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !28
  %216 = insertelement <1 x i32> poison, i32 %145, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !28
  %217 = or disjoint i32 %161, 12, !dbg !28
  %218 = getelementptr float, ptr addrspace(3) %163, i32 %217, !dbg !28
  %219 = insertelement <1 x i32> poison, i32 %151, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !28
  %220 = or disjoint i32 %161, 28, !dbg !28
  %221 = lshr i32 %220, 4, !dbg !28
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !28
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !28
  %224 = insertelement <1 x i32> poison, i32 %152, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #2, !dbg !28
  %225 = or disjoint i32 %161, 44, !dbg !28
  %226 = lshr i32 %225, 4, !dbg !28
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !28
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %225, !dbg !28
  %229 = insertelement <1 x i32> poison, i32 %153, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !28
  %230 = or disjoint i32 %161, 60, !dbg !28
  %231 = lshr i32 %230, 4, !dbg !28
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %231, !dbg !28
  %233 = getelementptr float, ptr addrspace(3) %232, i32 %230, !dbg !28
  %234 = insertelement <1 x i32> poison, i32 %154, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %235 = lshr i32 %14, 4, !dbg !28
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %235, !dbg !28
  %237 = getelementptr inbounds float, ptr addrspace(3) %236, i32 %14, !dbg !28
  %238 = load float, ptr addrspace(3) %237, align 4, !dbg !28
  %239 = or disjoint i32 %14, 256, !dbg !28
  %240 = lshr i32 %239, 4, !dbg !28
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !28
  %242 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %239, !dbg !28
  %243 = load float, ptr addrspace(3) %242, align 4, !dbg !28
  %244 = or disjoint i32 %14, 512, !dbg !28
  %245 = lshr i32 %244, 4, !dbg !28
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %245, !dbg !28
  %247 = getelementptr inbounds float, ptr addrspace(3) %246, i32 %244, !dbg !28
  %248 = load float, ptr addrspace(3) %247, align 4, !dbg !28
  %249 = or disjoint i32 %14, 768, !dbg !28
  %250 = lshr i32 %249, 4, !dbg !28
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !28
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %249, !dbg !28
  %253 = load float, ptr addrspace(3) %252, align 4, !dbg !28
  %254 = or disjoint i32 %14, 1024, !dbg !28
  %255 = lshr i32 %254, 4, !dbg !28
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !28
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %254, !dbg !28
  %258 = load float, ptr addrspace(3) %257, align 4, !dbg !28
  %259 = or disjoint i32 %14, 1280, !dbg !28
  %260 = lshr i32 %259, 4, !dbg !28
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %260, !dbg !28
  %262 = getelementptr inbounds float, ptr addrspace(3) %261, i32 %259, !dbg !28
  %263 = load float, ptr addrspace(3) %262, align 4, !dbg !28
  %264 = or disjoint i32 %14, 1536, !dbg !28
  %265 = lshr i32 %264, 4, !dbg !28
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !28
  %267 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %264, !dbg !28
  %268 = load float, ptr addrspace(3) %267, align 4, !dbg !28
  %269 = or disjoint i32 %14, 1792, !dbg !28
  %270 = lshr i32 %269, 4, !dbg !28
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %270, !dbg !28
  %272 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %269, !dbg !28
  %273 = load float, ptr addrspace(3) %272, align 4, !dbg !28
  %274 = or disjoint i32 %14, 2048, !dbg !28
  %275 = lshr i32 %274, 4, !dbg !28
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !28
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %274, !dbg !28
  %278 = load float, ptr addrspace(3) %277, align 4, !dbg !28
  %279 = or disjoint i32 %14, 2304, !dbg !28
  %280 = lshr i32 %279, 4, !dbg !28
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !28
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %279, !dbg !28
  %283 = load float, ptr addrspace(3) %282, align 4, !dbg !28
  %284 = or disjoint i32 %14, 2560, !dbg !28
  %285 = lshr i32 %284, 4, !dbg !28
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !28
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %284, !dbg !28
  %288 = load float, ptr addrspace(3) %287, align 4, !dbg !28
  %289 = or disjoint i32 %14, 2816, !dbg !28
  %290 = lshr i32 %289, 4, !dbg !28
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !28
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %289, !dbg !28
  %293 = load float, ptr addrspace(3) %292, align 4, !dbg !28
  %294 = or disjoint i32 %14, 3072, !dbg !28
  %295 = lshr i32 %294, 4, !dbg !28
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !28
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %294, !dbg !28
  %298 = load float, ptr addrspace(3) %297, align 4, !dbg !28
  %299 = or disjoint i32 %14, 3328, !dbg !28
  %300 = lshr i32 %299, 4, !dbg !28
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !28
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %299, !dbg !28
  %303 = load float, ptr addrspace(3) %302, align 4, !dbg !28
  %304 = or disjoint i32 %14, 3584, !dbg !28
  %305 = lshr i32 %304, 4, !dbg !28
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !28
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %304, !dbg !28
  %308 = load float, ptr addrspace(3) %307, align 4, !dbg !28
  %309 = or disjoint i32 %14, 3840, !dbg !28
  %310 = lshr i32 %309, 4, !dbg !28
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %310, !dbg !28
  %312 = getelementptr inbounds float, ptr addrspace(3) %311, i32 %309, !dbg !28
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !28
  %314 = sext i32 %84 to i64, !dbg !29
  %315 = getelementptr float, ptr addrspace(1) %1, i64 %314, !dbg !29
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 %51) #2, !dbg !30
  %317 = bitcast i32 %316 to float, !dbg !30
  %318 = getelementptr float, ptr addrspace(1) %2, i64 %314, !dbg !31
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %318, i1 %51) #2, !dbg !32
  %320 = bitcast i32 %319 to float, !dbg !32
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %320) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %.idx = shl nuw nsw i32 %14, 3, !dbg !34
  %322 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !34
  %323 = bitcast float %321 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %.idx3 = shl nuw nsw i32 %16, 3, !dbg !34
  %324 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !34
  %325 = load float, ptr addrspace(3) %324, align 8, !dbg !34
  %.idx4 = shl nuw nsw i32 %17, 3, !dbg !34
  %326 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !34
  %327 = load float, ptr addrspace(3) %326, align 8, !dbg !34
  %.idx5 = shl nuw nsw i32 %18, 3, !dbg !34
  %328 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !34
  %329 = load float, ptr addrspace(3) %328, align 8, !dbg !34
  %.idx6 = shl nuw nsw i32 %19, 3, !dbg !34
  %330 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !34
  %331 = load float, ptr addrspace(3) %330, align 8, !dbg !34
  %.idx7 = shl nuw nsw i32 %20, 3, !dbg !34
  %332 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !34
  %333 = load float, ptr addrspace(3) %332, align 8, !dbg !34
  %.idx8 = shl nuw nsw i32 %21, 3, !dbg !34
  %334 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !34
  %335 = load float, ptr addrspace(3) %334, align 8, !dbg !34
  %.idx9 = shl nuw nsw i32 %22, 3, !dbg !34
  %336 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !34
  %337 = load float, ptr addrspace(3) %336, align 8, !dbg !34
  %.idx10 = shl nuw nsw i32 %23, 3, !dbg !34
  %338 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !34
  %339 = load float, ptr addrspace(3) %338, align 8, !dbg !34
  %.idx11 = shl nuw nsw i32 %24, 3, !dbg !34
  %340 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !34
  %341 = load float, ptr addrspace(3) %340, align 8, !dbg !34
  %.idx12 = shl nuw nsw i32 %25, 3, !dbg !34
  %342 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !34
  %343 = load float, ptr addrspace(3) %342, align 8, !dbg !34
  %.idx13 = shl nuw nsw i32 %26, 3, !dbg !34
  %344 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !34
  %345 = load float, ptr addrspace(3) %344, align 8, !dbg !34
  %.idx14 = shl nuw nsw i32 %27, 3, !dbg !34
  %346 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !34
  %347 = load float, ptr addrspace(3) %346, align 8, !dbg !34
  %.idx15 = shl nuw nsw i32 %28, 3, !dbg !34
  %348 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx15, !dbg !34
  %349 = load float, ptr addrspace(3) %348, align 8, !dbg !34
  %.idx16 = shl nuw nsw i32 %29, 3, !dbg !34
  %350 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !34
  %351 = load float, ptr addrspace(3) %350, align 8, !dbg !34
  %.idx17 = shl nuw nsw i32 %30, 3, !dbg !34
  %352 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx17, !dbg !34
  %353 = load float, ptr addrspace(3) %352, align 8, !dbg !34
  %.idx18 = shl nuw nsw i32 %31, 3, !dbg !34
  %354 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx18, !dbg !34
  %355 = load float, ptr addrspace(3) %354, align 8, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %356 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %323, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  %358 = load float, ptr addrspace(3) %357, align 16, !dbg !34
  %359 = getelementptr inbounds i8, ptr addrspace(3) %357, i32 4, !dbg !34
  %360 = load float, ptr addrspace(3) %359, align 4, !dbg !34
  %361 = getelementptr inbounds i8, ptr addrspace(3) %357, i32 8, !dbg !34
  %362 = load float, ptr addrspace(3) %361, align 8, !dbg !34
  %363 = getelementptr inbounds i8, ptr addrspace(3) %357, i32 12, !dbg !34
  %364 = load float, ptr addrspace(3) %363, align 4, !dbg !34
  %365 = fmul float %238, %325, !dbg !34
  %366 = fmul float %243, %327, !dbg !34
  %367 = fmul float %248, %329, !dbg !34
  %368 = fmul float %253, %331, !dbg !34
  %369 = fmul float %258, %333, !dbg !34
  %370 = fmul float %263, %335, !dbg !34
  %371 = fmul float %268, %337, !dbg !34
  %372 = fmul float %273, %339, !dbg !34
  %373 = fmul float %278, %341, !dbg !34
  %374 = fmul float %283, %343, !dbg !34
  %375 = fmul float %288, %345, !dbg !34
  %376 = fmul float %293, %347, !dbg !34
  %377 = fmul float %298, %349, !dbg !34
  %378 = fmul float %303, %351, !dbg !34
  %379 = fmul float %308, %353, !dbg !34
  %380 = fmul float %313, %355, !dbg !34
  %381 = fmul float %358, %128, !dbg !34
  %382 = fmul float %360, %129, !dbg !34
  %383 = fmul float %362, %130, !dbg !34
  %384 = fmul float %364, %131, !dbg !34
  %385 = fmul float %358, %137, !dbg !34
  %386 = fmul float %360, %138, !dbg !34
  %387 = fmul float %362, %139, !dbg !34
  %388 = fmul float %364, %140, !dbg !34
  %389 = fmul float %358, %146, !dbg !34
  %390 = fmul float %360, %147, !dbg !34
  %391 = fmul float %362, %148, !dbg !34
  %392 = fmul float %364, %149, !dbg !34
  %393 = fmul float %358, %155, !dbg !34
  %394 = fmul float %360, %156, !dbg !34
  %395 = fmul float %362, %157, !dbg !34
  %396 = fmul float %364, %158, !dbg !34
  %397 = mul i32 %34, 25, !dbg !35
  %398 = mul i32 %35, 25, !dbg !35
  %399 = mul i32 %36, 25, !dbg !35
  %400 = mul i32 %37, 25, !dbg !35
  %401 = mul i32 %38, 25, !dbg !35
  %402 = mul i32 %39, 25, !dbg !35
  %403 = mul i32 %40, 25, !dbg !35
  %404 = mul i32 %41, 25, !dbg !35
  %405 = mul i32 %42, 25, !dbg !35
  %406 = mul i32 %43, 25, !dbg !35
  %407 = mul i32 %44, 25, !dbg !35
  %408 = mul i32 %45, 25, !dbg !35
  %409 = mul i32 %46, 25, !dbg !35
  %410 = mul i32 %47, 25, !dbg !35
  %411 = mul i32 %48, 25, !dbg !35
  %412 = mul i32 %49, 25, !dbg !35
  %413 = add i32 %76, %397, !dbg !36
  %414 = add i32 %76, %398, !dbg !36
  %415 = add i32 %76, %399, !dbg !36
  %416 = add i32 %76, %400, !dbg !36
  %417 = add i32 %76, %401, !dbg !36
  %418 = add i32 %76, %402, !dbg !36
  %419 = add i32 %76, %403, !dbg !36
  %420 = add i32 %76, %404, !dbg !36
  %421 = add i32 %76, %405, !dbg !36
  %422 = add i32 %76, %406, !dbg !36
  %423 = add i32 %76, %407, !dbg !36
  %424 = add i32 %76, %408, !dbg !36
  %425 = add i32 %76, %409, !dbg !36
  %426 = add i32 %76, %410, !dbg !36
  %427 = add i32 %76, %411, !dbg !36
  %428 = add i32 %76, %412, !dbg !36
  %429 = sext i32 %413 to i64, !dbg !37
  %430 = getelementptr float, ptr addrspace(1) %3, i64 %429, !dbg !37
  %431 = sext i32 %414 to i64, !dbg !37
  %432 = getelementptr float, ptr addrspace(1) %3, i64 %431, !dbg !37
  %433 = sext i32 %415 to i64, !dbg !37
  %434 = getelementptr float, ptr addrspace(1) %3, i64 %433, !dbg !37
  %435 = sext i32 %416 to i64, !dbg !37
  %436 = getelementptr float, ptr addrspace(1) %3, i64 %435, !dbg !37
  %437 = sext i32 %417 to i64, !dbg !37
  %438 = getelementptr float, ptr addrspace(1) %3, i64 %437, !dbg !37
  %439 = sext i32 %418 to i64, !dbg !37
  %440 = getelementptr float, ptr addrspace(1) %3, i64 %439, !dbg !37
  %441 = sext i32 %419 to i64, !dbg !37
  %442 = getelementptr float, ptr addrspace(1) %3, i64 %441, !dbg !37
  %443 = sext i32 %420 to i64, !dbg !37
  %444 = getelementptr float, ptr addrspace(1) %3, i64 %443, !dbg !37
  %445 = sext i32 %421 to i64, !dbg !37
  %446 = getelementptr float, ptr addrspace(1) %3, i64 %445, !dbg !37
  %447 = sext i32 %422 to i64, !dbg !37
  %448 = getelementptr float, ptr addrspace(1) %3, i64 %447, !dbg !37
  %449 = sext i32 %423 to i64, !dbg !37
  %450 = getelementptr float, ptr addrspace(1) %3, i64 %449, !dbg !37
  %451 = sext i32 %424 to i64, !dbg !37
  %452 = getelementptr float, ptr addrspace(1) %3, i64 %451, !dbg !37
  %453 = sext i32 %425 to i64, !dbg !37
  %454 = getelementptr float, ptr addrspace(1) %3, i64 %453, !dbg !37
  %455 = sext i32 %426 to i64, !dbg !37
  %456 = getelementptr float, ptr addrspace(1) %3, i64 %455, !dbg !37
  %457 = sext i32 %427 to i64, !dbg !37
  %458 = getelementptr float, ptr addrspace(1) %3, i64 %457, !dbg !37
  %459 = sext i32 %428 to i64, !dbg !37
  %460 = getelementptr float, ptr addrspace(1) %3, i64 %459, !dbg !37
  %461 = bitcast float %365 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %461, ptr addrspace(1) %430, i1 %107) #2, !dbg !38
  %462 = bitcast float %366 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %462, ptr addrspace(1) %432, i1 %108) #2, !dbg !38
  %463 = bitcast float %367 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %463, ptr addrspace(1) %434, i1 %109) #2, !dbg !38
  %464 = bitcast float %368 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %464, ptr addrspace(1) %436, i1 %110) #2, !dbg !38
  %465 = bitcast float %369 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %438, i1 %111) #2, !dbg !38
  %466 = bitcast float %370 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %466, ptr addrspace(1) %440, i1 %112) #2, !dbg !38
  %467 = bitcast float %371 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %467, ptr addrspace(1) %442, i1 %113) #2, !dbg !38
  %468 = bitcast float %372 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %468, ptr addrspace(1) %444, i1 %114) #2, !dbg !38
  %469 = bitcast float %373 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %469, ptr addrspace(1) %446, i1 %115) #2, !dbg !38
  %470 = bitcast float %374 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %470, ptr addrspace(1) %448, i1 %116) #2, !dbg !38
  %471 = bitcast float %375 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %471, ptr addrspace(1) %450, i1 %117) #2, !dbg !38
  %472 = bitcast float %376 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %472, ptr addrspace(1) %452, i1 %118) #2, !dbg !38
  %473 = bitcast float %377 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %473, ptr addrspace(1) %454, i1 %119) #2, !dbg !38
  %474 = bitcast float %378 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %474, ptr addrspace(1) %456, i1 %120) #2, !dbg !38
  %475 = bitcast float %379 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %475, ptr addrspace(1) %458, i1 %121) #2, !dbg !38
  %476 = bitcast float %380 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %476, ptr addrspace(1) %460, i1 %122) #2, !dbg !38
  %477 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !39
  %478 = getelementptr float, ptr addrspace(1) %4, i64 %97, !dbg !39
  %479 = getelementptr float, ptr addrspace(1) %4, i64 %99, !dbg !39
  %480 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !39
  %481 = bitcast float %381 to i32, !dbg !40
  %482 = bitcast float %382 to i32, !dbg !40
  %483 = bitcast float %383 to i32, !dbg !40
  %484 = bitcast float %384 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %481, i32 %482, i32 %483, i32 %484, ptr addrspace(1) %477, i1 %103) #2, !dbg !40
  %485 = bitcast float %385 to i32, !dbg !40
  %486 = bitcast float %386 to i32, !dbg !40
  %487 = bitcast float %387 to i32, !dbg !40
  %488 = bitcast float %388 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %485, i32 %486, i32 %487, i32 %488, ptr addrspace(1) %478, i1 %104) #2, !dbg !40
  %489 = bitcast float %389 to i32, !dbg !40
  %490 = bitcast float %390 to i32, !dbg !40
  %491 = bitcast float %391 to i32, !dbg !40
  %492 = bitcast float %392 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %489, i32 %490, i32 %491, i32 %492, ptr addrspace(1) %479, i1 %105) #2, !dbg !40
  %493 = bitcast float %393 to i32, !dbg !40
  %494 = bitcast float %394 to i32, !dbg !40
  %495 = bitcast float %395 to i32, !dbg !40
  %496 = bitcast float %396 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %493, i32 %494, i32 %495, i32 %496, ptr addrspace(1) %480, i1 %106) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc7c4xkfiennpwowvw2xe6gtmgytl7ske7ff7lxlbln627f7zez2.py", directory: "inductor_cache/c7")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_9", linkageName: "triton_poi_fused__weight_norm_interface_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 44, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 53, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
