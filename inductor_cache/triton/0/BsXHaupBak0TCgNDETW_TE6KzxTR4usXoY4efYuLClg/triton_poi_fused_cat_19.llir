; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) nocapture readnone %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) nocapture readnone %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %19 = shl i32 %18, 8, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 254, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = icmp slt i32 %23, 512, !dbg !14
  %.frozen = freeze i32 %23, !dbg !15
  %25 = sdiv i32 %.frozen, 16, !dbg !15
  %26 = srem i32 %25, 8, !dbg !16
  %.frozen3 = freeze i32 %23, !dbg !17
  %27 = sdiv i32 %.frozen3, 128, !dbg !17
  %28 = mul i32 %25, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %.frozen1 = freeze i32 %23, !dbg !19
  %29 = sdiv i32 %.frozen1, 4, !dbg !19
  %30 = srem i32 %29, 4, !dbg !20
  %31 = mul i32 %29, 4, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %31, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #1, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = icmp slt i32 %26, 4, !dbg !23
  %35 = mul i32 %27, 128, !dbg !24
  %srem.decomposed = sub i32 %.frozen3, %35, !dbg !24
  %36 = shl nsw i32 %27, 6, !dbg !25
  %37 = add nsw i32 %36, %srem.decomposed, !dbg !26
  %38 = sext i32 %37 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = and i1 %24, %34, !dbg !28
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #1, !dbg !29
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !29
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !29
  %44 = icmp eq i32 %26, 4, !dbg !30
  %45 = shl nsw i32 %27, 4, !dbg !31
  %46 = add nsw i32 %45, %.decomposed, !dbg !32
  %47 = sext i32 %46 to i64, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !33
  %49 = and i1 %24, %44, !dbg !34
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !35
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !35
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !35
  %53 = bitcast i32 %51 to float, !dbg !35
  %54 = bitcast i32 %52 to float, !dbg !35
  %55 = sext i32 %27 to i64, !dbg !36
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !36
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %49, i32 0, i1 %49) #1, !dbg !37
  %58 = bitcast i32 %57 to float, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %49, i32 0, i1 %49) #1, !dbg !37
  %60 = bitcast i32 %59 to float, !dbg !37
  %61 = fadd float %33, %58, !dbg !38
  %62 = fadd float %33, %60, !dbg !38
  %63 = fsub float %61, %61, !dbg !39
  %64 = fsub float %62, %62, !dbg !39
  %65 = sext i32 %.decomposed2 to i64, !dbg !40
  %66 = getelementptr float, ptr addrspace(1) %7, i64 %65, !dbg !40
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !41
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !41
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !41
  %70 = bitcast i32 %68 to float, !dbg !41
  %71 = bitcast i32 %69 to float, !dbg !41
  %72 = fmul float %63, %70, !dbg !42
  %73 = fmul float %64, %71, !dbg !42
  %74 = fadd float %61, %72, !dbg !43
  %75 = fadd float %62, %73, !dbg !43
  %76 = fsub float %74, %53, !dbg !44
  %77 = fsub float %75, %54, !dbg !44
  %78 = sext i32 %30 to i64, !dbg !45
  %79 = getelementptr float, ptr addrspace(1) %8, i64 %78, !dbg !45
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %49, i32 0, i1 %49) #1, !dbg !46
  %81 = bitcast i32 %80 to float, !dbg !46
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %49, i32 0, i1 %49) #1, !dbg !46
  %83 = bitcast i32 %82 to float, !dbg !46
  %84 = fmul float %76, %81, !dbg !47
  %85 = fmul float %77, %83, !dbg !47
  %86 = fadd float %84, %53, !dbg !48
  %87 = fadd float %85, %54, !dbg !48
  %88 = icmp eq i32 %26, 5, !dbg !49
  %89 = getelementptr float, ptr addrspace(1) %9, i64 %47, !dbg !50
  %90 = and i1 %24, %88, !dbg !51
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #1, !dbg !52
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !52
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !52
  %94 = bitcast i32 %92 to float, !dbg !52
  %95 = bitcast i32 %93 to float, !dbg !52
  %96 = getelementptr float, ptr addrspace(1) %10, i64 %47, !dbg !53
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #1, !dbg !54
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !54
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !54
  %100 = bitcast i32 %98 to float, !dbg !54
  %101 = bitcast i32 %99 to float, !dbg !54
  %102 = fadd float %94, %100, !dbg !55
  %103 = fadd float %95, %101, !dbg !55
  %104 = icmp eq i32 %26, 6, !dbg !56
  %105 = getelementptr float, ptr addrspace(1) %11, i64 %47, !dbg !57
  %106 = and i1 %24, %104, !dbg !58
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %105, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #1, !dbg !59
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !59
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !59
  %110 = bitcast i32 %108 to float, !dbg !59
  %111 = bitcast i32 %109 to float, !dbg !59
  %112 = getelementptr float, ptr addrspace(1) %12, i64 %47, !dbg !60
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %112, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #1, !dbg !61
  %114 = extractvalue { i32, i32 } %113, 0, !dbg !61
  %115 = extractvalue { i32, i32 } %113, 1, !dbg !61
  %116 = bitcast i32 %114 to float, !dbg !61
  %117 = bitcast i32 %115 to float, !dbg !61
  %118 = fadd float %110, %116, !dbg !62
  %119 = fadd float %111, %117, !dbg !62
  %120 = icmp sgt i32 %26, 6, !dbg !63
  %121 = getelementptr float, ptr addrspace(1) %13, i64 %47, !dbg !64
  %122 = and i1 %24, %120, !dbg !65
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %121, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #1, !dbg !66
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !66
  %125 = extractvalue { i32, i32 } %123, 1, !dbg !66
  %126 = bitcast i32 %124 to float, !dbg !66
  %127 = bitcast i32 %125 to float, !dbg !66
  %128 = getelementptr float, ptr addrspace(1) %14, i64 %47, !dbg !67
  %129 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %128, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #1, !dbg !68
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !68
  %131 = extractvalue { i32, i32 } %129, 1, !dbg !68
  %132 = bitcast i32 %130 to float, !dbg !68
  %133 = bitcast i32 %131 to float, !dbg !68
  %134 = fadd float %126, %132, !dbg !69
  %135 = fadd float %127, %133, !dbg !69
  %136 = select i1 %120, float %134, float 0.000000e+00, !dbg !70
  %137 = select i1 %120, float %135, float 0.000000e+00, !dbg !70
  %138 = select i1 %104, float %118, float %136, !dbg !71
  %139 = select i1 %104, float %119, float %137, !dbg !71
  %140 = select i1 %88, float %102, float %138, !dbg !71
  %141 = select i1 %88, float %103, float %139, !dbg !71
  %142 = select i1 %44, float %86, float %140, !dbg !71
  %143 = select i1 %44, float %87, float %141, !dbg !71
  %144 = sext i32 %23 to i64, !dbg !72
  %145 = getelementptr float, ptr addrspace(1) %15, i64 %144, !dbg !72
  %146 = bitcast float %142 to i32, !dbg !73
  %147 = select i1 %34, i32 %42, i32 %146, !dbg !74
  %148 = bitcast float %143 to i32, !dbg !73
  %149 = select i1 %34, i32 %43, i32 %148, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %149, ptr addrspace(1) %145, i1 %24) #1, !dbg !73
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cutbmfspwvriczvbbwpy2pvkjealknfc6br3c2dircynucl2f4cy.py", directory: "inductor_cache/ut")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 27, column: 26, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 20, scope: !7)
!23 = !DILocation(line: 36, column: 18, scope: !7)
!24 = !DILocation(line: 37, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 48, scope: !7)
!26 = !DILocation(line: 37, column: 45, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 60, scope: !7)
!29 = !DILocation(line: 37, column: 53, scope: !7)
!30 = !DILocation(line: 41, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 39, scope: !7)
!32 = !DILocation(line: 42, column: 36, scope: !7)
!33 = !DILocation(line: 42, column: 31, scope: !7)
!34 = !DILocation(line: 42, column: 51, scope: !7)
!35 = !DILocation(line: 42, column: 44, scope: !7)
!36 = !DILocation(line: 52, column: 31, scope: !7)
!37 = !DILocation(line: 52, column: 36, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 58, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 31, scope: !7)
!41 = !DILocation(line: 59, column: 36, scope: !7)
!42 = !DILocation(line: 60, column: 20, scope: !7)
!43 = !DILocation(line: 61, column: 20, scope: !7)
!44 = !DILocation(line: 62, column: 20, scope: !7)
!45 = !DILocation(line: 63, column: 31, scope: !7)
!46 = !DILocation(line: 63, column: 36, scope: !7)
!47 = !DILocation(line: 64, column: 20, scope: !7)
!48 = !DILocation(line: 65, column: 20, scope: !7)
!49 = !DILocation(line: 71, column: 20, scope: !7)
!50 = !DILocation(line: 72, column: 31, scope: !7)
!51 = !DILocation(line: 72, column: 52, scope: !7)
!52 = !DILocation(line: 72, column: 44, scope: !7)
!53 = !DILocation(line: 73, column: 32, scope: !7)
!54 = !DILocation(line: 73, column: 45, scope: !7)
!55 = !DILocation(line: 74, column: 20, scope: !7)
!56 = !DILocation(line: 80, column: 20, scope: !7)
!57 = !DILocation(line: 81, column: 32, scope: !7)
!58 = !DILocation(line: 81, column: 53, scope: !7)
!59 = !DILocation(line: 81, column: 45, scope: !7)
!60 = !DILocation(line: 82, column: 32, scope: !7)
!61 = !DILocation(line: 82, column: 45, scope: !7)
!62 = !DILocation(line: 83, column: 20, scope: !7)
!63 = !DILocation(line: 86, column: 20, scope: !7)
!64 = !DILocation(line: 89, column: 32, scope: !7)
!65 = !DILocation(line: 89, column: 53, scope: !7)
!66 = !DILocation(line: 89, column: 45, scope: !7)
!67 = !DILocation(line: 90, column: 32, scope: !7)
!68 = !DILocation(line: 90, column: 45, scope: !7)
!69 = !DILocation(line: 91, column: 20, scope: !7)
!70 = !DILocation(line: 93, column: 35, scope: !7)
!71 = !DILocation(line: 0, scope: !7)
!72 = !DILocation(line: 98, column: 25, scope: !7)
!73 = !DILocation(line: 98, column: 37, scope: !7)
!74 = !DILocation(line: 97, column: 33, scope: !7)
!75 = !DILocation(line: 98, column: 4, scope: !7)
