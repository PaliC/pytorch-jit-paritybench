; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_mul_sigmoid_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = sdiv i32 %13, 4096, !dbg !14
  %15 = srem i32 %14, 4, !dbg !15
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !17
  %23 = bitcast i32 %19 to float, !dbg !17
  %24 = bitcast i32 %20 to float, !dbg !17
  %25 = bitcast i32 %21 to float, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = sext i32 %15 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %34 = bitcast i32 %33 to float, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %36 = bitcast i32 %35 to float, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !20
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !21
  %43 = bitcast i32 %39 to float, !dbg !21
  %44 = bitcast i32 %40 to float, !dbg !21
  %45 = bitcast i32 %41 to float, !dbg !21
  %46 = bitcast i32 %42 to float, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %49 = bitcast i32 %48 to float, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %51 = bitcast i32 %50 to float, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = bitcast i32 %59 to float, !dbg !25
  %64 = bitcast i32 %60 to float, !dbg !25
  %65 = bitcast i32 %61 to float, !dbg !25
  %66 = fadd float %23, %30, !dbg !26
  %67 = fadd float %24, %32, !dbg !26
  %68 = fadd float %25, %34, !dbg !26
  %69 = fadd float %26, %36, !dbg !26
  %70 = fadd float %43, %49, !dbg !27
  %71 = fadd float %44, %51, !dbg !27
  %72 = fadd float %45, %53, !dbg !27
  %73 = fadd float %46, %55, !dbg !27
  %74 = fsub float 0.000000e+00, %70, !dbg !28
  %75 = fsub float 0.000000e+00, %71, !dbg !28
  %76 = fsub float 0.000000e+00, %72, !dbg !28
  %77 = fsub float 0.000000e+00, %73, !dbg !28
  %78 = fmul float %74, 0x3FF7154760000000, !dbg !32
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #1, !dbg !32
  %80 = fmul float %75, 0x3FF7154760000000, !dbg !32
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #1, !dbg !32
  %82 = fmul float %76, 0x3FF7154760000000, !dbg !32
  %83 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %82) #1, !dbg !32
  %84 = fmul float %77, 0x3FF7154760000000, !dbg !32
  %85 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %84) #1, !dbg !32
  %86 = fadd float %79, 1.000000e+00, !dbg !33
  %87 = fadd float %81, 1.000000e+00, !dbg !33
  %88 = fadd float %83, 1.000000e+00, !dbg !33
  %89 = fadd float %85, 1.000000e+00, !dbg !33
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %86) #1, !dbg !34
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %87) #1, !dbg !34
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %88) #1, !dbg !34
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %89) #1, !dbg !34
  %94 = fmul float %66, %90, !dbg !35
  %95 = fmul float %67, %91, !dbg !35
  %96 = fmul float %68, %92, !dbg !35
  %97 = fmul float %69, %93, !dbg !35
  %98 = fadd float %94, %62, !dbg !36
  %99 = fadd float %95, %63, !dbg !36
  %100 = fadd float %96, %64, !dbg !36
  %101 = fadd float %97, %65, !dbg !36
  %102 = bitcast float %66 to i32, !dbg !37
  %103 = bitcast float %67 to i32, !dbg !37
  %104 = bitcast float %68 to i32, !dbg !37
  %105 = bitcast float %69 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %103, i32 %104, i32 %105, ptr addrspace(1) %17, i1 true) #1, !dbg !37
  %106 = bitcast float %70 to i32, !dbg !38
  %107 = bitcast float %71 to i32, !dbg !38
  %108 = bitcast float %72 to i32, !dbg !38
  %109 = bitcast float %73 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %107, i32 %108, i32 %109, ptr addrspace(1) %37, i1 true) #1, !dbg !38
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %16, !dbg !39
  %111 = bitcast float %98 to i32, !dbg !40
  %112 = bitcast float %99 to i32, !dbg !40
  %113 = bitcast float %100 to i32, !dbg !40
  %114 = bitcast float %101 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %112, i32 %113, i32 %114, ptr addrspace(1) %110, i1 true) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmer73dvpi27enqvged3rofrbbtkpjweey4tvekswvunu2y3ez6z.py", directory: "inductor_cache/me")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_sigmoid_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_sigmoid_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_sigmoid_1", linkageName: "triton_poi_fused_add_convolution_mul_sigmoid_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 18, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 33, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 39, scope: !7)
!38 = !DILocation(line: 37, column: 39, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 36, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
