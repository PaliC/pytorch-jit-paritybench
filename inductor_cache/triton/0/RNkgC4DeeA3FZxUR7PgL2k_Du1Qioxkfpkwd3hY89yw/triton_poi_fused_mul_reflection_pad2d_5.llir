; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_reflection_pad2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 5, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = icmp slt i32 %14, 16, !dbg !14
  %20 = icmp slt i32 %15, 16, !dbg !14
  %21 = icmp slt i32 %16, 16, !dbg !14
  %22 = icmp slt i32 %17, 16, !dbg !14
  %23 = icmp slt i32 %18, 16, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 5, !dbg !16
  %26 = and i32 %9, 31, !dbg !17
  %27 = lshr i32 %9, 2, !dbg !17
  %28 = and i32 %27, 31, !dbg !17
  %29 = or disjoint i32 %25, %26, !dbg !18
  %30 = or disjoint i32 %25, %28, !dbg !18
  %31 = icmp slt i32 %29, 100, !dbg !19
  %32 = icmp slt i32 %30, 100, !dbg !19
  %.frozen = freeze i32 %29, !dbg !20
  %33 = sdiv i32 %.frozen, 10, !dbg !20
  %34 = mul i32 %33, 10, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %35 = ashr exact i32 %18, 2, !dbg !22
  %36 = add nsw i32 %.decomposed, -3, !dbg !23
  %37 = tail call i32 @llvm.abs.i32(i32 %36, i1 true), !dbg !24
  %38 = add nsw i32 %37, -3, !dbg !25
  %39 = tail call i32 @llvm.abs.i32(i32 %38, i1 true), !dbg !26
  %40 = add nsw i32 %33, -3, !dbg !27
  %41 = tail call i32 @llvm.abs.i32(i32 %40, i1 true), !dbg !28
  %42 = add nsw i32 %41, -3, !dbg !29
  %43 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !30
  %44 = mul nsw i32 %43, -4, !dbg !31
  %reass.sub = sub nsw i32 %44, %39, !dbg !32
  %45 = add nsw i32 %reass.sub, 15, !dbg !32
  %46 = shl i32 %14, 4, !dbg !33
  %47 = shl i32 %15, 4, !dbg !33
  %48 = shl i32 %16, 4, !dbg !33
  %49 = shl i32 %17, 4, !dbg !33
  %50 = add i32 %45, %46, !dbg !34
  %51 = add i32 %45, %47, !dbg !34
  %52 = add i32 %45, %48, !dbg !34
  %53 = add i32 %45, %49, !dbg !34
  %54 = sext i32 %50 to i64, !dbg !35
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !35
  %56 = sext i32 %51 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !35
  %58 = sext i32 %52 to i64, !dbg !35
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !35
  %60 = sext i32 %53 to i64, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !35
  %62 = and i1 %19, %31, !dbg !36
  %63 = and i1 %20, %31, !dbg !36
  %64 = and i1 %21, %31, !dbg !36
  %65 = and i1 %22, %31, !dbg !36
  %66 = and i1 %23, %32, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %62) #2, !dbg !37
  %68 = bitcast i32 %67 to float, !dbg !37
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %63) #2, !dbg !37
  %70 = bitcast i32 %69 to float, !dbg !37
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %64) #2, !dbg !37
  %72 = bitcast i32 %71 to float, !dbg !37
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %65) #2, !dbg !37
  %74 = bitcast i32 %73 to float, !dbg !37
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !38
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !38
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !38
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !38
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %62) #2, !dbg !39
  %80 = bitcast i32 %79 to float, !dbg !39
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %63) #2, !dbg !39
  %82 = bitcast i32 %81 to float, !dbg !39
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %64) #2, !dbg !39
  %84 = bitcast i32 %83 to float, !dbg !39
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %65) #2, !dbg !39
  %86 = bitcast i32 %85 to float, !dbg !39
  %87 = fmul float %68, %80, !dbg !40
  %88 = fmul float %70, %82, !dbg !40
  %89 = fmul float %72, %84, !dbg !40
  %90 = fmul float %74, %86, !dbg !40
  %91 = shl i32 %30, 2, !dbg !41
  %92 = mul i32 %35, 400, !dbg !42
  %93 = add i32 %91, %92, !dbg !43
  %94 = sext i32 %93 to i64, !dbg !44
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !44
  %96 = shl i32 %9, 4, !dbg !45
  %97 = and i32 %96, 496, !dbg !45
  %98 = or disjoint i32 %97, %11, !dbg !45
  %99 = and i32 %12, 508, !dbg !45
  %100 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %97, !dbg !45
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !45
  %102 = bitcast float %87 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !45
  %103 = or disjoint i32 %98, 4, !dbg !45
  %104 = getelementptr float, ptr addrspace(3) %100, i32 %103, !dbg !45
  %105 = bitcast float %88 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !45
  %106 = or disjoint i32 %98, 8, !dbg !45
  %107 = getelementptr float, ptr addrspace(3) %100, i32 %106, !dbg !45
  %108 = bitcast float %89 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !45
  %109 = or disjoint i32 %98, 12, !dbg !45
  %110 = getelementptr float, ptr addrspace(3) %100, i32 %109, !dbg !45
  %111 = bitcast float %90 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %112 = and i32 %9, 124, !dbg !45
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !45
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %99, !dbg !45
  %.extract = load i32, ptr addrspace(3) %114, align 16, !dbg !45
  %115 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 4, !dbg !45
  %.extract8 = load i32, ptr addrspace(3) %115, align 4, !dbg !45
  %116 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 8, !dbg !45
  %.extract9 = load i32, ptr addrspace(3) %116, align 8, !dbg !45
  %117 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 12, !dbg !45
  %.extract10 = load i32, ptr addrspace(3) %117, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %95, i1 %66) #2, !dbg !45
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %119 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %119, i1 true) #2, !dbg !47
  %120 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %120, i1 true) #2, !dbg !47
  %121 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %121, i1 true) #2, !dbg !47
  %122 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %122, i1 true) #2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %.extract14 = load i32, ptr addrspace(3) %114, align 16, !dbg !47
  %.extract15 = load i32, ptr addrspace(3) %115, align 4, !dbg !47
  %.extract16 = load i32, ptr addrspace(3) %116, align 8, !dbg !47
  %.extract17 = load i32, ptr addrspace(3) %117, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %118, i1 %66) #2, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccz3syobdwf2qjusl7u5yxorsohclzq4rey7ak7wndcwtjxivziu.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_poi_fused_mul_reflection_pad2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_reflection_pad2d_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_reflection_pad2d_5", linkageName: "triton_poi_fused_mul_reflection_pad2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 79, scope: !7)
!24 = !DILocation(line: 34, column: 72, scope: !7)
!25 = !DILocation(line: 34, column: 60, scope: !7)
!26 = !DILocation(line: 34, column: 53, scope: !7)
!27 = !DILocation(line: 34, column: 131, scope: !7)
!28 = !DILocation(line: 34, column: 124, scope: !7)
!29 = !DILocation(line: 34, column: 112, scope: !7)
!30 = !DILocation(line: 34, column: 105, scope: !7)
!31 = !DILocation(line: 34, column: 93, scope: !7)
!32 = !DILocation(line: 34, column: 88, scope: !7)
!33 = !DILocation(line: 34, column: 142, scope: !7)
!34 = !DILocation(line: 34, column: 139, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 155, scope: !7)
!37 = !DILocation(line: 34, column: 147, scope: !7)
!38 = !DILocation(line: 35, column: 30, scope: !7)
!39 = !DILocation(line: 35, column: 147, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 37, column: 32, scope: !7)
!42 = !DILocation(line: 37, column: 41, scope: !7)
!43 = !DILocation(line: 37, column: 37, scope: !7)
!44 = !DILocation(line: 37, column: 25, scope: !7)
!45 = !DILocation(line: 37, column: 52, scope: !7)
!46 = !DILocation(line: 38, column: 25, scope: !7)
!47 = !DILocation(line: 38, column: 52, scope: !7)
!48 = !DILocation(line: 38, column: 4, scope: !7)
