; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, i32 %25) local_unnamed_addr !dbg !7 {
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %28 = shl i32 %27, 8, !dbg !11
  %29 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %30 = shl i32 %29, 1, !dbg !12
  %31 = and i32 %30, 254, !dbg !12
  %32 = or disjoint i32 %28, %31, !dbg !13
  %33 = sdiv i32 %32, 64, !dbg !14
  %34 = srem i32 %33, 256, !dbg !15
  %35 = sext i32 %32 to i64, !dbg !16
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !16
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !17
  %38 = sext i32 %34 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !18
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !20
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !24
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !28
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %9, i64 %38, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %10, i64 %38, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !35
  %62 = bitcast i32 %61 to float, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !35
  %64 = bitcast i32 %63 to float, !dbg !35
  %65 = getelementptr float, ptr addrspace(1) %11, i64 %38, !dbg !36
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !37
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %12, i64 %38, !dbg !38
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !39
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %13, i64 %38, !dbg !40
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !41
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !41
  %74 = getelementptr float, ptr addrspace(1) %14, i64 %38, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !43
  %76 = bitcast i32 %75 to float, !dbg !43
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !43
  %78 = bitcast i32 %77 to float, !dbg !43
  %79 = getelementptr float, ptr addrspace(1) %15, i64 %38, !dbg !44
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !45
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !45
  %82 = getelementptr float, ptr addrspace(1) %16, i64 %38, !dbg !46
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !47
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !47
  %85 = getelementptr float, ptr addrspace(1) %17, i64 %38, !dbg !48
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !49
  %88 = getelementptr float, ptr addrspace(1) %18, i64 %38, !dbg !50
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !51
  %90 = bitcast i32 %89 to float, !dbg !51
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !51
  %92 = bitcast i32 %91 to float, !dbg !51
  %93 = getelementptr float, ptr addrspace(1) %19, i64 %38, !dbg !52
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !53
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !53
  %96 = getelementptr float, ptr addrspace(1) %20, i64 %38, !dbg !54
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !55
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !55
  %99 = getelementptr float, ptr addrspace(1) %21, i64 %38, !dbg !56
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !57
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !57
  %102 = getelementptr float, ptr addrspace(1) %22, i64 %38, !dbg !58
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !59
  %104 = bitcast i32 %103 to float, !dbg !59
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !59
  %106 = bitcast i32 %105 to float, !dbg !59
  %107 = getelementptr float, ptr addrspace(1) %23, i64 %38, !dbg !60
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !61
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !61
  %110 = getelementptr float, ptr addrspace(1) %24, i64 %38, !dbg !62
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !63
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !63
  %113 = fadd float %62, 0x3EE4F8B580000000, !dbg !64
  %114 = fadd float %64, 0x3EE4F8B580000000, !dbg !64
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %115, 0, !dbg !65
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %116, 0, !dbg !65
  br i1 %.not.i, label %122, label %117, !dbg !65

117:                                              ; preds = %26
  br i1 %.not1.i, label %120, label %118, !dbg !65

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

122:                                              ; preds = %26
  br i1 %.not1.i, label %125, label %123, !dbg !65

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %118, %120, %123, %125
  %.0.i = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !65
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %127, 0, !dbg !65
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %128, 0, !dbg !65
  br i1 %.not.i1, label %134, label %129, !dbg !65

129:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %132, label %130, !dbg !65

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

134:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %137, label %135, !dbg !65

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %130, %132, %135, %137
  %.0.i3 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !65
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !66
  %141 = fadd float %76, 0x3EE4F8B580000000, !dbg !67
  %142 = fadd float %78, 0x3EE4F8B580000000, !dbg !67
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i6 = icmp eq i32 %143, 0, !dbg !68
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i9 = icmp eq i32 %144, 0, !dbg !68
  br i1 %.not.i6, label %150, label %145, !dbg !68

145:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %148, label %146, !dbg !68

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

150:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %153, label %151, !dbg !68

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

__nv_sqrtf.exit10:                                ; preds = %146, %148, %151, %153
  %.0.i8 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !68
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i11 = icmp eq i32 %155, 0, !dbg !68
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i14 = icmp eq i32 %156, 0, !dbg !68
  br i1 %.not.i11, label %162, label %157, !dbg !68

157:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %160, label %158, !dbg !68

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !68
  br label %__nv_sqrtf.exit15, !dbg !68

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !68
  br label %__nv_sqrtf.exit15, !dbg !68

162:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %165, label %163, !dbg !68

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !68
  br label %__nv_sqrtf.exit15, !dbg !68

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !68
  br label %__nv_sqrtf.exit15, !dbg !68

__nv_sqrtf.exit15:                                ; preds = %158, %160, %163, %165
  %.0.i13 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !68
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !69
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !69
  %169 = fadd float %90, 0x3EE4F8B580000000, !dbg !70
  %170 = fadd float %92, 0x3EE4F8B580000000, !dbg !70
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i16 = icmp eq i32 %171, 0, !dbg !71
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i19 = icmp eq i32 %172, 0, !dbg !71
  br i1 %.not.i16, label %178, label %173, !dbg !71

173:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %176, label %174, !dbg !71

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !71
  br label %__nv_sqrtf.exit20, !dbg !71

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !71
  br label %__nv_sqrtf.exit20, !dbg !71

178:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %181, label %179, !dbg !71

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !71
  br label %__nv_sqrtf.exit20, !dbg !71

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !71
  br label %__nv_sqrtf.exit20, !dbg !71

__nv_sqrtf.exit20:                                ; preds = %174, %176, %179, %181
  %.0.i18 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !71
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i21 = icmp eq i32 %183, 0, !dbg !71
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i24 = icmp eq i32 %184, 0, !dbg !71
  br i1 %.not.i21, label %190, label %185, !dbg !71

185:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %188, label %186, !dbg !71

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !71
  br label %__nv_sqrtf.exit25, !dbg !71

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !71
  br label %__nv_sqrtf.exit25, !dbg !71

190:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %193, label %191, !dbg !71

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !71
  br label %__nv_sqrtf.exit25, !dbg !71

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !71
  br label %__nv_sqrtf.exit25, !dbg !71

__nv_sqrtf.exit25:                                ; preds = %186, %188, %191, %193
  %.0.i23 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !71
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !72
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !72
  %197 = fadd float %104, 0x3EE4F8B580000000, !dbg !73
  %198 = fadd float %106, 0x3EE4F8B580000000, !dbg !73
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i26 = icmp eq i32 %199, 0, !dbg !74
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i29 = icmp eq i32 %200, 0, !dbg !74
  br i1 %.not.i26, label %206, label %201, !dbg !74

201:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %204, label %202, !dbg !74

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %197) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %197) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

206:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %209, label %207, !dbg !74

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.f(float %197) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.f(float %197) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

__nv_sqrtf.exit30:                                ; preds = %202, %204, %207, %209
  %.0.i28 = phi float [ %203, %202 ], [ %205, %204 ], [ %208, %207 ], [ %210, %209 ], !dbg !74
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i31 = icmp eq i32 %211, 0, !dbg !74
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i34 = icmp eq i32 %212, 0, !dbg !74
  br i1 %.not.i31, label %218, label %213, !dbg !74

213:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %216, label %214, !dbg !74

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %198) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %198) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

218:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %221, label %219, !dbg !74

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.f(float %198) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.f(float %198) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

__nv_sqrtf.exit35:                                ; preds = %214, %216, %219, %221
  %.0.i33 = phi float [ %215, %214 ], [ %217, %216 ], [ %220, %219 ], [ %222, %221 ], !dbg !74
  %223 = extractvalue { i32, i32 } %53, 1, !dbg !29
  %224 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !27
  %225 = insertelement <2 x i32> %224, i32 %56, i64 1, !dbg !27
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !27
  %227 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !49
  %228 = insertelement <2 x i32> %227, i32 %101, i64 1, !dbg !49
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !49
  %230 = extractvalue { i32, i32 } %53, 0, !dbg !29
  %231 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !27
  %232 = insertelement <2 x i32> %231, i32 %55, i64 1, !dbg !27
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !27
  %234 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !49
  %235 = insertelement <2 x i32> %234, i32 %100, i64 1, !dbg !49
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !49
  %237 = extractvalue { i32, i32 } %37, 1, !dbg !17
  %238 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !19
  %239 = insertelement <2 x i32> %238, i32 %46, i64 1, !dbg !19
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !19
  %241 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !33
  %242 = insertelement <2 x i32> %241, i32 %73, i64 1, !dbg !33
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !33
  %244 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !37
  %245 = insertelement <2 x i32> %244, i32 %81, i64 1, !dbg !37
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !37
  %247 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !39
  %248 = insertelement <2 x i32> %247, i32 %84, i64 1, !dbg !39
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !39
  %250 = extractvalue { i32, i32 } %43, 1, !dbg !21
  %251 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !17
  %252 = insertelement <2 x i32> %251, i32 %250, i64 1, !dbg !17
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !17
  %254 = fadd <2 x float> %253, %240, !dbg !75
  %255 = fsub <2 x float> %254, %243, !dbg !76
  %256 = insertelement <2 x float> poison, float %140, i64 0, !dbg !77
  %257 = insertelement <2 x float> %256, float %168, i64 1, !dbg !77
  %258 = fmul <2 x float> %255, %257, !dbg !77
  %259 = fmul <2 x float> %258, %246, !dbg !78
  %260 = fadd <2 x float> %259, %249, !dbg !79
  %shift = shufflevector <2 x float> %260, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %261 = fadd <2 x float> %260, %shift, !dbg !80
  %262 = extractvalue { i32, i32 } %48, 1, !dbg !25
  %263 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !53
  %264 = insertelement <2 x i32> %263, i32 %109, i64 1, !dbg !53
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !53
  %266 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !55
  %267 = insertelement <2 x i32> %266, i32 %112, i64 1, !dbg !55
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !55
  %269 = extractvalue { i32, i32 } %37, 0, !dbg !17
  %270 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %271 = insertelement <2 x i32> %270, i32 %45, i64 1, !dbg !19
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !19
  %273 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !33
  %274 = insertelement <2 x i32> %273, i32 %72, i64 1, !dbg !33
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !33
  %276 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !37
  %277 = insertelement <2 x i32> %276, i32 %80, i64 1, !dbg !37
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !37
  %279 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !39
  %280 = insertelement <2 x i32> %279, i32 %83, i64 1, !dbg !39
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !39
  %282 = extractvalue { i32, i32 } %43, 0, !dbg !21
  %283 = insertelement <2 x i32> poison, i32 %269, i64 0, !dbg !17
  %284 = insertelement <2 x i32> %283, i32 %282, i64 1, !dbg !17
  %285 = bitcast <2 x i32> %284 to <2 x float>, !dbg !17
  %286 = fadd <2 x float> %285, %272, !dbg !75
  %287 = fsub <2 x float> %286, %275, !dbg !76
  %288 = insertelement <2 x float> poison, float %139, i64 0, !dbg !77
  %289 = insertelement <2 x float> %288, float %167, i64 1, !dbg !77
  %290 = fmul <2 x float> %287, %289, !dbg !77
  %291 = fmul <2 x float> %290, %278, !dbg !78
  %292 = fadd <2 x float> %291, %281, !dbg !79
  %shift36 = shufflevector <2 x float> %292, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %293 = fadd <2 x float> %292, %shift36, !dbg !80
  %294 = extractvalue { i32, i32 } %48, 0, !dbg !25
  %295 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !53
  %296 = insertelement <2 x i32> %295, i32 %108, i64 1, !dbg !53
  %297 = bitcast <2 x i32> %296 to <2 x float>, !dbg !53
  %298 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !55
  %299 = insertelement <2 x i32> %298, i32 %111, i64 1, !dbg !55
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !55
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !81
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !81
  %303 = insertelement <2 x i32> poison, i32 %294, i64 0, !dbg !25
  %304 = insertelement <2 x i32> %303, i32 %230, i64 1, !dbg !25
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !25
  %306 = fadd <2 x float> %305, %233, !dbg !82
  %307 = fsub <2 x float> %306, %236, !dbg !83
  %308 = insertelement <2 x float> poison, float %195, i64 0, !dbg !84
  %309 = insertelement <2 x float> %308, float %301, i64 1, !dbg !84
  %310 = fmul <2 x float> %307, %309, !dbg !84
  %311 = fmul <2 x float> %310, %297, !dbg !85
  %312 = fadd <2 x float> %311, %300, !dbg !86
  %313 = fadd <2 x float> %293, %312, !dbg !87
  %314 = insertelement <2 x i32> poison, i32 %262, i64 0, !dbg !25
  %315 = insertelement <2 x i32> %314, i32 %223, i64 1, !dbg !25
  %316 = bitcast <2 x i32> %315 to <2 x float>, !dbg !25
  %317 = fadd <2 x float> %316, %226, !dbg !82
  %318 = fsub <2 x float> %317, %229, !dbg !83
  %319 = insertelement <2 x float> poison, float %196, i64 0, !dbg !84
  %320 = insertelement <2 x float> %319, float %302, i64 1, !dbg !84
  %321 = fmul <2 x float> %318, %320, !dbg !84
  %322 = fmul <2 x float> %321, %265, !dbg !85
  %323 = fadd <2 x float> %322, %268, !dbg !86
  %324 = fadd <2 x float> %261, %323, !dbg !87
  %shift37 = shufflevector <2 x float> %312, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !88
  %325 = fadd <2 x float> %313, %shift37, !dbg !88
  %shift38 = shufflevector <2 x float> %323, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !88
  %326 = fadd <2 x float> %324, %shift38, !dbg !88
  %bc = bitcast <2 x float> %286 to <2 x i32>, !dbg !89
  %327 = extractelement <2 x i32> %bc, i64 0, !dbg !89
  %bc39 = bitcast <2 x float> %254 to <2 x i32>, !dbg !89
  %328 = extractelement <2 x i32> %bc39, i64 0, !dbg !89
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %327, i32 %328, ptr addrspace(1) %36, i1 true) #3, !dbg !89
  %bc40 = bitcast <2 x float> %286 to <2 x i32>, !dbg !90
  %329 = extractelement <2 x i32> %bc40, i64 1, !dbg !90
  %bc41 = bitcast <2 x float> %254 to <2 x i32>, !dbg !90
  %330 = extractelement <2 x i32> %bc41, i64 1, !dbg !90
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %329, i32 %330, ptr addrspace(1) %42, i1 true) #3, !dbg !90
  %bc42 = bitcast <2 x float> %306 to <2 x i32>, !dbg !91
  %331 = extractelement <2 x i32> %bc42, i64 0, !dbg !91
  %bc43 = bitcast <2 x float> %317 to <2 x i32>, !dbg !91
  %332 = extractelement <2 x i32> %bc43, i64 0, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %331, i32 %332, ptr addrspace(1) %47, i1 true) #3, !dbg !91
  %bc44 = bitcast <2 x float> %306 to <2 x i32>, !dbg !92
  %333 = extractelement <2 x i32> %bc44, i64 1, !dbg !92
  %bc45 = bitcast <2 x float> %317 to <2 x i32>, !dbg !92
  %334 = extractelement <2 x i32> %bc45, i64 1, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %333, i32 %334, ptr addrspace(1) %52, i1 true) #3, !dbg !92
  %335 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !93
  %bc46 = bitcast <2 x float> %325 to <2 x i32>, !dbg !94
  %336 = extractelement <2 x i32> %bc46, i64 0, !dbg !94
  %bc47 = bitcast <2 x float> %326 to <2 x i32>, !dbg !94
  %337 = extractelement <2 x i32> %bc47, i64 0, !dbg !94
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %336, i32 %337, ptr addrspace(1) %335, i1 true) #3, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c45ur3xdil4qugl637slk4uaccxk72nsg4cgzxccwiybr3nzrxcr.py", directory: "inductor_cache/45")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 34, scope: !7)
!25 = !DILocation(line: 30, column: 39, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 34, scope: !7)
!29 = !DILocation(line: 32, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 38, column: 31, scope: !7)
!41 = !DILocation(line: 38, column: 36, scope: !7)
!42 = !DILocation(line: 39, column: 31, scope: !7)
!43 = !DILocation(line: 39, column: 36, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 42, column: 32, scope: !7)
!49 = !DILocation(line: 42, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 32, scope: !7)
!51 = !DILocation(line: 43, column: 37, scope: !7)
!52 = !DILocation(line: 44, column: 32, scope: !7)
!53 = !DILocation(line: 44, column: 37, scope: !7)
!54 = !DILocation(line: 45, column: 32, scope: !7)
!55 = !DILocation(line: 45, column: 37, scope: !7)
!56 = !DILocation(line: 46, column: 32, scope: !7)
!57 = !DILocation(line: 46, column: 37, scope: !7)
!58 = !DILocation(line: 47, column: 32, scope: !7)
!59 = !DILocation(line: 47, column: 37, scope: !7)
!60 = !DILocation(line: 48, column: 32, scope: !7)
!61 = !DILocation(line: 48, column: 37, scope: !7)
!62 = !DILocation(line: 49, column: 32, scope: !7)
!63 = !DILocation(line: 49, column: 37, scope: !7)
!64 = !DILocation(line: 56, column: 20, scope: !7)
!65 = !DILocation(line: 57, column: 27, scope: !7)
!66 = !DILocation(line: 59, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 27, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 75, column: 20, scope: !7)
!71 = !DILocation(line: 76, column: 27, scope: !7)
!72 = !DILocation(line: 77, column: 20, scope: !7)
!73 = !DILocation(line: 84, column: 20, scope: !7)
!74 = !DILocation(line: 85, column: 27, scope: !7)
!75 = !DILocation(line: 50, column: 18, scope: !7)
!76 = !DILocation(line: 54, column: 19, scope: !7)
!77 = !DILocation(line: 62, column: 20, scope: !7)
!78 = !DILocation(line: 63, column: 20, scope: !7)
!79 = !DILocation(line: 64, column: 20, scope: !7)
!80 = !DILocation(line: 73, column: 20, scope: !7)
!81 = !DILocation(line: 86, column: 20, scope: !7)
!82 = !DILocation(line: 52, column: 18, scope: !7)
!83 = !DILocation(line: 74, column: 19, scope: !7)
!84 = !DILocation(line: 79, column: 20, scope: !7)
!85 = !DILocation(line: 80, column: 20, scope: !7)
!86 = !DILocation(line: 81, column: 20, scope: !7)
!87 = !DILocation(line: 82, column: 20, scope: !7)
!88 = !DILocation(line: 91, column: 20, scope: !7)
!89 = !DILocation(line: 92, column: 39, scope: !7)
!90 = !DILocation(line: 93, column: 39, scope: !7)
!91 = !DILocation(line: 94, column: 39, scope: !7)
!92 = !DILocation(line: 95, column: 40, scope: !7)
!93 = !DILocation(line: 96, column: 28, scope: !7)
!94 = !DILocation(line: 96, column: 40, scope: !7)
!95 = !DILocation(line: 96, column: 4, scope: !7)
