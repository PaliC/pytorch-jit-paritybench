; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %7 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %8 = mul i32 %7, %6, !dbg !13
  %9 = add i32 %8, %5, !dbg !14
  %10 = shl i32 %9, 9, !dbg !15
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %12 = and i32 %11, 127, !dbg !16
  %13 = or disjoint i32 %12, 128, !dbg !16
  %14 = or disjoint i32 %12, 256, !dbg !16
  %15 = or disjoint i32 %12, 384, !dbg !16
  %16 = shl i32 %11, 2, !dbg !16
  %17 = and i32 %16, 508, !dbg !16
  %18 = or disjoint i32 %10, %12, !dbg !17
  %19 = or disjoint i32 %10, %13, !dbg !17
  %20 = or disjoint i32 %10, %14, !dbg !17
  %21 = or disjoint i32 %10, %15, !dbg !17
  %22 = or disjoint i32 %10, %17, !dbg !17
  %23 = icmp slt i32 %18, 262144, !dbg !18
  %24 = icmp slt i32 %19, 262144, !dbg !18
  %25 = icmp slt i32 %20, 262144, !dbg !18
  %26 = icmp slt i32 %21, 262144, !dbg !18
  %27 = icmp slt i32 %22, 262144, !dbg !18
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %29 = shl i32 %28, 1, !dbg !20
  %30 = or disjoint i32 %29, 1, !dbg !21
  %31 = icmp slt i32 %29, 2, !dbg !22
  %32 = icmp slt i32 %30, 2, !dbg !22
  %.frozen = freeze i32 %22, !dbg !23
  %33 = sdiv i32 %.frozen, 512, !dbg !23
  %34 = mul i32 %33, 512, !dbg !24
  %.decomposed = sub i32 %.frozen, %34, !dbg !24
  %35 = add i32 %18, %28, !dbg !25
  %36 = shl i32 %35, 1, !dbg !25
  %37 = add i32 %19, %28, !dbg !25
  %38 = shl i32 %37, 1, !dbg !25
  %39 = add i32 %20, %28, !dbg !25
  %40 = shl i32 %39, 1, !dbg !25
  %41 = add i32 %21, %28, !dbg !25
  %42 = shl i32 %41, 1, !dbg !25
  %43 = sext i32 %36 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %38 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %40 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %42 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = and i1 %31, %23, !dbg !27
  %52 = and i1 %31, %24, !dbg !27
  %53 = and i1 %31, %25, !dbg !27
  %54 = and i1 %31, %26, !dbg !27
  %55 = and i1 %31, %27, !dbg !27
  %56 = and i1 %32, %27, !dbg !27
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %51) #2, !dbg !28
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !28
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !28
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %52) #2, !dbg !28
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !28
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #2, !dbg !28
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !28
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !28
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %54) #2, !dbg !28
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !28
  %69 = shl i32 %30, 9, !dbg !29
  %70 = shl i32 %33, 10, !dbg !30
  %71 = add i32 %70, %.decomposed, !dbg !31
  %72 = add i32 %33, %28, !dbg !32
  %73 = shl i32 %72, 10, !dbg !32
  %74 = add i32 %73, %.decomposed, !dbg !32
  %75 = add i32 %71, %69, !dbg !32
  %76 = sext i32 %74 to i64, !dbg !33
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !33
  %78 = sext i32 %75 to i64, !dbg !33
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !33
  %80 = zext nneg i32 %12 to i64, !dbg !34
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %80, !dbg !34
  %82 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !34
  %83 = getelementptr inbounds i8, ptr addrspace(3) %81, i64 2064, !dbg !34
  %84 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !34
  %85 = zext nneg i32 %13 to i64, !dbg !34
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %85, !dbg !34
  %87 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !34
  %88 = getelementptr inbounds i8, ptr addrspace(3) %81, i64 2576, !dbg !34
  %89 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !34
  %90 = zext nneg i32 %14 to i64, !dbg !34
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %90, !dbg !34
  %92 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !34
  %93 = getelementptr inbounds i8, ptr addrspace(3) %81, i64 3088, !dbg !34
  %94 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !34
  %95 = zext nneg i32 %15 to i64, !dbg !34
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %95, !dbg !34
  %97 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !34
  %98 = getelementptr inbounds i8, ptr addrspace(3) %81, i64 3600, !dbg !34
  %99 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %100 = zext nneg i32 %17 to i64, !dbg !34
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %100, !dbg !34
  %102 = or disjoint i32 %17, 512, !dbg !34
  %103 = zext nneg i32 %102 to i64, !dbg !34
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i64 %103, !dbg !34
  %105 = getelementptr i8, ptr addrspace(3) %104, i64 16, !dbg !34
  %106 = load <4 x i32>, ptr addrspace(3) %105, align 16, !dbg !34
  %.extract = load i32, ptr addrspace(3) %101, align 16, !dbg !34
  %107 = getelementptr inbounds i8, ptr addrspace(3) %101, i64 4, !dbg !34
  %.extract8 = load i32, ptr addrspace(3) %107, align 4, !dbg !34
  %108 = getelementptr inbounds i8, ptr addrspace(3) %101, i64 8, !dbg !34
  %.extract9 = load i32, ptr addrspace(3) %108, align 8, !dbg !34
  %109 = getelementptr inbounds i8, ptr addrspace(3) %101, i64 12, !dbg !34
  %.extract10 = load i32, ptr addrspace(3) %109, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %77, i1 %55) #2, !dbg !34
  %.extract11 = extractelement <4 x i32> %106, i64 0, !dbg !34
  %.extract12 = extractelement <4 x i32> %106, i64 1, !dbg !34
  %.extract13 = extractelement <4 x i32> %106, i64 2, !dbg !34
  %.extract14 = extractelement <4 x i32> %106, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %79, i1 %56) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuuu3hk5zpvjcwalan2jhkdxjrjfyp6xcju37sl6bjtvf7bxkv6u.py", directory: "inductor_cache/uu")
!4 = !{ptr @triton_poi_fused_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_4", linkageName: "triton_poi_fused_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 23, scope: !7)
!22 = !DILocation(line: 27, column: 21, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 30, column: 19, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 50, scope: !7)
!28 = !DILocation(line: 32, column: 42, scope: !7)
!29 = !DILocation(line: 33, column: 34, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 39, scope: !7)
!33 = !DILocation(line: 33, column: 25, scope: !7)
!34 = !DILocation(line: 33, column: 55, scope: !7)
!35 = !DILocation(line: 33, column: 4, scope: !7)
