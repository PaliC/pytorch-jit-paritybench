; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_clone_mul_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 32, !dbg !12
  %14 = lshr exact i32 %13, 2, !dbg !12
  %15 = and i32 %10, 64, !dbg !12
  %16 = lshr exact i32 %15, 2, !dbg !12
  %17 = and i32 %10, 3, !dbg !12
  %18 = and i32 %10, 31, !dbg !12
  %19 = or disjoint i32 %14, %12, !dbg !12
  %20 = or disjoint i32 %19, %16, !dbg !12
  %21 = or disjoint i32 %20, %9, !dbg !13
  %22 = or disjoint i32 %9, %18, !dbg !13
  %23 = icmp slt i32 %21, 64, !dbg !14
  %24 = icmp slt i32 %22, 64, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 2, !dbg !16
  %.lobit2 = lshr exact i32 %13, 5, !dbg !17
  %27 = lshr exact i32 %15, 5, !dbg !17
  %28 = or disjoint i32 %.lobit2, %27, !dbg !17
  %29 = or disjoint i32 %26, %17, !dbg !18
  %30 = or disjoint i32 %28, %26, !dbg !18
  %31 = icmp slt i32 %29, 4, !dbg !19
  %32 = icmp slt i32 %30, 4, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %33 = sdiv i32 %.frozen, 16, !dbg !20
  %34 = mul i32 %33, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %35 = sdiv i32 %21, 16, !dbg !20
  %36 = shl i32 %30, 4, !dbg !22
  %37 = add i32 %36, %.decomposed, !dbg !23
  %38 = shl i32 %33, 6, !dbg !24
  %39 = add i32 %37, %38, !dbg !25
  %40 = sext i32 %39 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = and i1 %23, %31, !dbg !27
  %43 = and i1 %24, %32, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %43) #2, !dbg !28
  %45 = shl i32 %10, 2, !dbg !28
  %46 = and i32 %45, 124, !dbg !28
  %47 = or disjoint i32 %46, %.lobit2, !dbg !28
  %48 = or disjoint i32 %47, %27, !dbg !28
  %49 = and i32 %10, 127, !dbg !28
  %50 = lshr exact i32 %46, 2, !dbg !28
  %51 = add nuw nsw i32 %48, %50, !dbg !28
  %52 = zext nneg i32 %51 to i64, !dbg !28
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52, !dbg !28
  %54 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %55 = lshr i32 %49, 2, !dbg !28
  %56 = add nuw nsw i32 %55, %49, !dbg !28
  %57 = zext nneg i32 %56 to i64, !dbg !28
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %57, !dbg !28
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !28
  %60 = mul i32 %29, 3, !dbg !29
  %61 = mul nsw i32 %35, 12, !dbg !30
  %62 = add i32 %60, %61, !dbg !31
  %63 = sext i32 %62 to i64, !dbg !32
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !32
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %42) #2, !dbg !33
  %66 = bitcast i32 %65 to float, !dbg !33
  %67 = add i32 %62, 1, !dbg !34
  %68 = sext i32 %67 to i64, !dbg !35
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !35
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %42) #2, !dbg !36
  %71 = bitcast i32 %70 to float, !dbg !36
  %72 = add i32 %62, 2, !dbg !37
  %73 = sext i32 %72 to i64, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !38
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %42) #2, !dbg !39
  %76 = bitcast i32 %75 to float, !dbg !39
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !40
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %43) #2, !dbg !41
  %79 = bitcast i32 %78 to float, !dbg !41
  %80 = shl i32 %21, 2, !dbg !42
  %81 = add i32 %29, %80, !dbg !43
  %82 = sext i32 %81 to i64, !dbg !44
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !44
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %42) #2, !dbg !45
  %85 = bitcast i32 %84 to float, !dbg !45
  %86 = fcmp ogt float %66, %71, !dbg !46
  %87 = fcmp uno float %66, 0.000000e+00, !dbg !50
  %88 = or i1 %87, %86, !dbg !51
  %89 = select i1 %88, float %66, float %71, !dbg !52
  %90 = fcmp ogt float %89, %76, !dbg !53
  %91 = fcmp uno float %89, 0.000000e+00, !dbg !55
  %92 = or i1 %90, %91, !dbg !56
  %93 = select i1 %92, float %89, float %76, !dbg !57
  %94 = fsub float %66, %93, !dbg !58
  %95 = fmul float %94, 0x3FF7154760000000, !dbg !59
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %95) #2, !dbg !59
  %97 = fsub float %71, %93, !dbg !60
  %98 = fmul float %97, 0x3FF7154760000000, !dbg !61
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #2, !dbg !61
  %100 = fadd float %96, %99, !dbg !62
  %101 = fsub float %76, %93, !dbg !63
  %102 = fmul float %101, 0x3FF7154760000000, !dbg !64
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #2, !dbg !64
  %104 = fadd float %100, %103, !dbg !65
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %104) #2, !dbg !66
  %106 = fmul float %59, %105, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %107 = shl i32 %10, 5, !dbg !67
  %108 = and i32 %107, 96, !dbg !67
  %109 = lshr exact i32 %108, 5, !dbg !67
  %110 = or disjoint i32 %108, %12, !dbg !67
  %111 = or disjoint i32 %110, %14, !dbg !67
  %112 = or disjoint i32 %111, %16, !dbg !67
  %113 = add nuw nsw i32 %112, %109, !dbg !67
  %114 = zext nneg i32 %113 to i64, !dbg !67
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !67
  %116 = bitcast float %106 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %117 = lshr i32 %49, 5, !dbg !67
  %118 = add nuw nsw i32 %117, %49, !dbg !67
  %119 = zext nneg i32 %118 to i64, !dbg !67
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !67
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !67
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %104) #2, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %123 = bitcast float %122 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %123, i1 true) #2, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %124 = load float, ptr addrspace(3) %120, align 4, !dbg !68
  %125 = fmul float %124, %79, !dbg !69
  %126 = fadd float %121, %125, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %127 = bitcast float %126 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %127, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %128 = load float, ptr addrspace(3) %58, align 4, !dbg !70
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %104) #2, !dbg !71
  %130 = fmul float %129, %85, !dbg !72
  %131 = fadd float %128, %130, !dbg !73
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %82, !dbg !74
  %133 = bitcast float %131 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %132, i1 %42) #2, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2agl53fxpqjba3xfmgfymtffqkiq4lax6xrojwxsapsnlkc566x.py", directory: "inductor_cache/2a")
!4 = !{ptr @triton_poi_fused_add_clone_mul_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clone_mul_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clone_mul_7", linkageName: "triton_poi_fused_add_clone_mul_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 59, scope: !7)
!28 = !DILocation(line: 32, column: 51, scope: !7)
!29 = !DILocation(line: 33, column: 32, scope: !7)
!30 = !DILocation(line: 33, column: 40, scope: !7)
!31 = !DILocation(line: 33, column: 37, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 45, scope: !7)
!34 = !DILocation(line: 34, column: 41, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 49, scope: !7)
!37 = !DILocation(line: 35, column: 41, scope: !7)
!38 = !DILocation(line: 35, column: 30, scope: !7)
!39 = !DILocation(line: 35, column: 49, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 52, scope: !7)
!42 = !DILocation(line: 37, column: 38, scope: !7)
!43 = !DILocation(line: 37, column: 36, scope: !7)
!44 = !DILocation(line: 37, column: 31, scope: !7)
!45 = !DILocation(line: 37, column: 43, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 38, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !54)
!54 = !DILocation(line: 39, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !54)
!58 = !DILocation(line: 40, column: 18, scope: !7)
!59 = !DILocation(line: 41, column: 23, scope: !7)
!60 = !DILocation(line: 42, column: 18, scope: !7)
!61 = !DILocation(line: 43, column: 23, scope: !7)
!62 = !DILocation(line: 44, column: 19, scope: !7)
!63 = !DILocation(line: 45, column: 19, scope: !7)
!64 = !DILocation(line: 46, column: 24, scope: !7)
!65 = !DILocation(line: 47, column: 20, scope: !7)
!66 = !DILocation(line: 48, column: 19, scope: !7)
!67 = !DILocation(line: 49, column: 19, scope: !7)
!68 = !DILocation(line: 50, column: 19, scope: !7)
!69 = !DILocation(line: 51, column: 20, scope: !7)
!70 = !DILocation(line: 52, column: 20, scope: !7)
!71 = !DILocation(line: 53, column: 20, scope: !7)
!72 = !DILocation(line: 54, column: 20, scope: !7)
!73 = !DILocation(line: 55, column: 20, scope: !7)
!74 = !DILocation(line: 56, column: 25, scope: !7)
!75 = !DILocation(line: 56, column: 44, scope: !7)
!76 = !DILocation(line: 56, column: 4, scope: !7)
