; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp5 < 225\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__softmax_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 3, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = lshr i32 %8, 4, !dbg !14
  %10 = and i32 %9, 7, !dbg !14
  %11 = or disjoint i32 %7, %10, !dbg !15
  %12 = icmp slt i32 %11, 256, !dbg !16
  %13 = shl i32 %8, 2, !dbg !17
  %14 = and i32 %13, 60, !dbg !17
  %15 = srem i32 %11, 64, !dbg !18
  %16 = shl i32 %11, 6, !dbg !19
  %17 = or disjoint i32 %16, %14, !dbg !20
  %18 = sext i32 %17 to i64, !dbg !21
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !21
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #4, !dbg !22
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !22
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !22
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !22
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !22
  %25 = shl i32 %8, 5, !dbg !22
  %26 = and i32 %25, 480, !dbg !22
  %27 = or disjoint i32 %26, %10, !dbg !22
  %28 = and i32 %8, 127, !dbg !22
  %29 = lshr exact i32 %26, 3, !dbg !22
  %30 = add nuw nsw i32 %29, %27, !dbg !22
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30, !dbg !22
  %32 = insertelement <1 x i32> poison, i32 %21, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %32, i1 true) #4, !dbg !22
  %33 = or disjoint i32 %27, 8, !dbg !22
  %34 = lshr i32 %33, 3, !dbg !22
  %35 = add nuw nsw i32 %34, %33, !dbg !22
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %35, !dbg !22
  %37 = insertelement <1 x i32> poison, i32 %22, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %37, i1 true) #4, !dbg !22
  %38 = or disjoint i32 %27, 16, !dbg !22
  %39 = lshr i32 %38, 3, !dbg !22
  %40 = add nuw nsw i32 %39, %38, !dbg !22
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %40, !dbg !22
  %42 = insertelement <1 x i32> poison, i32 %23, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %42, i1 true) #4, !dbg !22
  %43 = or disjoint i32 %27, 24, !dbg !22
  %44 = lshr i32 %43, 3, !dbg !22
  %45 = add nuw nsw i32 %44, %43, !dbg !22
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %45, !dbg !22
  %47 = insertelement <1 x i32> poison, i32 %24, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %48 = lshr i32 %28, 3, !dbg !22
  %49 = add nuw nsw i32 %48, %28, !dbg !22
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49, !dbg !22
  %51 = load float, ptr addrspace(3) %50, align 4, !dbg !22
  %52 = or disjoint i32 %28, 128, !dbg !22
  %53 = lshr i32 %52, 3, !dbg !22
  %54 = add nuw nsw i32 %53, %52, !dbg !22
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !22
  %56 = load float, ptr addrspace(3) %55, align 4, !dbg !22
  %57 = or disjoint i32 %28, 256, !dbg !22
  %58 = lshr i32 %57, 3, !dbg !22
  %59 = add nuw nsw i32 %58, %57, !dbg !22
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %59, !dbg !22
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !22
  %62 = or disjoint i32 %28, 384, !dbg !22
  %63 = lshr i32 %62, 3, !dbg !22
  %64 = add nuw nsw i32 %63, %62, !dbg !22
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !22
  %66 = load float, ptr addrspace(3) %65, align 4, !dbg !22
  %67 = shl nsw i32 %15, 6, !dbg !23
  %68 = or disjoint i32 %67, %14, !dbg !24
  %69 = or disjoint i32 %68, 2, !dbg !24
  %70 = sext i32 %68 to i64, !dbg !25
  %71 = getelementptr i64, ptr addrspace(1) %1, i64 %70, !dbg !25
  %72 = sext i32 %69 to i64, !dbg !25
  %73 = getelementptr i64, ptr addrspace(1) %1, i64 %72, !dbg !25
  %74 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %71, i1 %12, i1 %12, i1 %12) #4, !dbg !26
  %75 = extractvalue { i64, i64 } %74, 0, !dbg !26
  %76 = extractvalue { i64, i64 } %74, 1, !dbg !26
  %77 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %73, i1 %12, i1 %12, i1 %12) #4, !dbg !26
  %78 = extractvalue { i64, i64 } %77, 0, !dbg !26
  %79 = extractvalue { i64, i64 } %77, 1, !dbg !26
  %80 = insertelement <4 x i64> poison, i64 %75, i64 0, !dbg !27
  %81 = insertelement <4 x i64> %80, i64 %76, i64 1, !dbg !27
  %82 = insertelement <4 x i64> %81, i64 %78, i64 2, !dbg !27
  %83 = insertelement <4 x i64> %82, i64 %79, i64 3, !dbg !27
  %84 = add <4 x i64> %83, splat (i64 225), !dbg !27
  %85 = icmp slt <4 x i64> %83, zeroinitializer, !dbg !28
  %86 = select <4 x i1> %85, <4 x i64> %84, <4 x i64> %83, !dbg !29
  %87 = icmp ugt <4 x i64> %86, splat (i64 224), !dbg !30
  %88 = bitcast <4 x i1> %87 to i4, !dbg !31
  %89 = icmp ne i4 %88, 0, !dbg !31
  %90 = and i1 %12, %89, !dbg !31
  br i1 %90, label %91, label %92, !dbg !31

91:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 38, ptr nonnull @assertFunc_0, i64 1), !dbg !31
  unreachable, !dbg !31

92:                                               ; preds = %5
  %93 = and i32 %8, 7, !dbg !14
  %94 = and i32 %8, 24, !dbg !14
  %95 = or disjoint i32 %7, %93, !dbg !15
  %96 = icmp slt i32 %95, 256, !dbg !16
  %97 = lshr i32 %8, 5, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %98 = extractelement <4 x i64> %86, i64 0, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !32
  %100 = extractelement <4 x i64> %86, i64 1, !dbg !32
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !32
  %102 = extractelement <4 x i64> %86, i64 2, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !32
  %104 = extractelement <4 x i64> %86, i64 3, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %106 = ptrtoint ptr addrspace(1) %99 to i64, !dbg !33
  %107 = ptrtoint ptr addrspace(1) %101 to i64, !dbg !33
  %108 = ptrtoint ptr addrspace(1) %103 to i64, !dbg !33
  %109 = ptrtoint ptr addrspace(1) %105 to i64, !dbg !33
  %110 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %30, !dbg !33
  %111 = insertelement <1 x i64> poison, i64 %106, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %110, <1 x i64> %111, i1 true) #4, !dbg !33
  %112 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %35, !dbg !33
  %113 = insertelement <1 x i64> poison, i64 %107, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %112, <1 x i64> %113, i1 true) #4, !dbg !33
  %114 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %40, !dbg !33
  %115 = insertelement <1 x i64> poison, i64 %108, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %114, <1 x i64> %115, i1 true) #4, !dbg !33
  %116 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %45, !dbg !33
  %117 = insertelement <1 x i64> poison, i64 %109, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %116, <1 x i64> %117, i1 true) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %118 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %49, !dbg !33
  %119 = load i64, ptr addrspace(3) %118, align 8, !dbg !33
  %120 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %54, !dbg !33
  %121 = load i64, ptr addrspace(3) %120, align 8, !dbg !33
  %122 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %59, !dbg !33
  %123 = load i64, ptr addrspace(3) %122, align 8, !dbg !33
  %124 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %64, !dbg !33
  %125 = load i64, ptr addrspace(3) %124, align 8, !dbg !33
  %126 = inttoptr i64 %119 to ptr addrspace(1), !dbg !33
  %127 = inttoptr i64 %121 to ptr addrspace(1), !dbg !33
  %128 = inttoptr i64 %123 to ptr addrspace(1), !dbg !33
  %129 = inttoptr i64 %125 to ptr addrspace(1), !dbg !33
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %96) #4, !dbg !33
  %131 = bitcast i32 %130 to float, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %96) #4, !dbg !33
  %133 = bitcast i32 %132 to float, !dbg !33
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %96) #4, !dbg !33
  %135 = bitcast i32 %134 to float, !dbg !33
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %96) #4, !dbg !33
  %137 = bitcast i32 %136 to float, !dbg !33
  %138 = fadd float %51, %131, !dbg !34
  %139 = fadd float %56, %133, !dbg !34
  %140 = fadd float %61, %135, !dbg !34
  %141 = fadd float %66, %137, !dbg !34
  %142 = select i1 %96, float %138, float 0xFFF0000000000000, !dbg !35
  %143 = select i1 %96, float %139, float 0xFFF0000000000000, !dbg !35
  %144 = select i1 %96, float %140, float 0xFFF0000000000000, !dbg !35
  %145 = select i1 %96, float %141, float 0xFFF0000000000000, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %146 = fcmp ogt float %142, %143, !dbg !40
  %147 = fcmp uno float %142, 0.000000e+00, !dbg !42
  %148 = or i1 %147, %146, !dbg !43
  %149 = select i1 %148, float %142, float %143, !dbg !44
  %150 = fcmp ogt float %149, %144, !dbg !40
  %151 = fcmp uno float %149, 0.000000e+00, !dbg !42
  %152 = or i1 %150, %151, !dbg !43
  %153 = select i1 %152, float %149, float %144, !dbg !44
  %154 = fcmp ogt float %153, %145, !dbg !40
  %155 = fcmp uno float %153, 0.000000e+00, !dbg !42
  %156 = or i1 %154, %155, !dbg !43
  %157 = select i1 %156, float %153, float %145, !dbg !44
  %158 = bitcast float %157 to i32, !dbg !36
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !36
  %160 = bitcast i32 %159 to float, !dbg !36
  %161 = fcmp ogt float %157, %160, !dbg !40
  %162 = fcmp uno float %157, 0.000000e+00, !dbg !42
  %163 = or i1 %161, %162, !dbg !43
  %164 = select i1 %163, float %157, float %160, !dbg !44
  %165 = bitcast float %164 to i32, !dbg !36
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !36
  %167 = bitcast i32 %166 to float, !dbg !36
  %168 = fcmp ogt float %164, %167, !dbg !40
  %169 = fcmp uno float %164, 0.000000e+00, !dbg !42
  %170 = or i1 %168, %169, !dbg !43
  %171 = icmp eq i32 %94, 0, !dbg !36
  %172 = and i32 %97, 3, !dbg !36
  %173 = shl nuw nsw i32 %93, 2, !dbg !36
  %174 = or disjoint i32 %173, %172, !dbg !36
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !36
  %176 = select i1 %170, i32 %165, i32 %166, !dbg !44
  %177 = insertelement <1 x i32> poison, i32 %176, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %177, i1 %171) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %178 = icmp slt i32 %8, 32, !dbg !36
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !36
  %180 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %179, i1 %178) #4, !dbg !36
  %181 = bitcast i32 %180 to float, !dbg !36
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !36
  %183 = bitcast i32 %182 to float, !dbg !36
  %184 = fcmp ogt float %181, %183, !dbg !40
  %185 = fcmp uno float %181, 0.000000e+00, !dbg !42
  %186 = or i1 %185, %184, !dbg !43
  %187 = select i1 %186, float %181, float %183, !dbg !44
  %188 = bitcast float %187 to i32, !dbg !36
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !36
  %190 = bitcast i32 %189 to float, !dbg !36
  %191 = fcmp ogt float %187, %190, !dbg !40
  %192 = fcmp uno float %187, 0.000000e+00, !dbg !42
  %193 = or i1 %191, %192, !dbg !43
  %194 = and i32 %8, 3, !dbg !36
  %195 = icmp eq i32 %194, 0, !dbg !36
  %196 = and i1 %178, %195, !dbg !36
  %197 = select i1 %193, i32 %188, i32 %189, !dbg !44
  %198 = insertelement <1 x i32> poison, i32 %197, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %198, i1 %196) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !36
  %200 = load float, ptr addrspace(3) %199, align 16, !dbg !36
  %201 = fsub float %138, %200, !dbg !45
  %202 = fsub float %139, %200, !dbg !45
  %203 = fsub float %140, %200, !dbg !45
  %204 = fsub float %141, %200, !dbg !45
  %205 = fmul float %201, 0x3FF7154760000000, !dbg !46
  %206 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %205) #4, !dbg !46
  %207 = fmul float %202, 0x3FF7154760000000, !dbg !46
  %208 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %207) #4, !dbg !46
  %209 = fmul float %203, 0x3FF7154760000000, !dbg !46
  %210 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %209) #4, !dbg !46
  %211 = fmul float %204, 0x3FF7154760000000, !dbg !46
  %212 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %211) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %213 = fadd float %206, %208, !dbg !51
  %214 = fadd float %213, %210, !dbg !51
  %215 = fadd float %214, %212, !dbg !51
  %216 = select i1 %96, float %215, float 0.000000e+00, !dbg !51
  %217 = bitcast float %216 to i32, !dbg !47
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 16, i32 31), !dbg !47
  %219 = bitcast i32 %218 to float, !dbg !47
  %220 = fadd float %216, %219, !dbg !51
  %221 = bitcast float %220 to i32, !dbg !47
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 8, i32 31), !dbg !47
  %223 = bitcast i32 %222 to float, !dbg !47
  %224 = fadd float %220, %223, !dbg !51
  %225 = bitcast float %224 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %225, i1 %171) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %226 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %179, i1 %178) #4, !dbg !47
  %227 = bitcast i32 %226 to float, !dbg !47
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 2, i32 31), !dbg !47
  %229 = bitcast i32 %228 to float, !dbg !47
  %230 = fadd float %227, %229, !dbg !51
  %231 = bitcast float %230 to i32, !dbg !47
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !47
  %233 = bitcast i32 %232 to float, !dbg !47
  %234 = fadd float %230, %233, !dbg !51
  %235 = bitcast float %234 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %235, i1 %196) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %236 = load float, ptr addrspace(3) %199, align 16, !dbg !47
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %236) #4, !dbg !53
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %236) #4, !dbg !53
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %236) #4, !dbg !53
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %236) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %241 = shl i32 %8, 6, !dbg !54
  %242 = and i32 %241, 448, !dbg !54
  %243 = lshr i32 %8, 3, !dbg !54
  %244 = and i32 %243, 15, !dbg !54
  %245 = or disjoint i32 %244, %242, !dbg !54
  %246 = and i32 %13, 508, !dbg !54
  %247 = lshr exact i32 %242, 2, !dbg !54
  %248 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %247, !dbg !54
  %249 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %245, !dbg !54
  %250 = bitcast float %237 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !54
  %251 = or disjoint i32 %245, 16, !dbg !54
  %252 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %251, !dbg !54
  %253 = bitcast float %238 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !54
  %254 = or disjoint i32 %245, 32, !dbg !54
  %255 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %254, !dbg !54
  %256 = bitcast float %239 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !54
  %257 = or disjoint i32 %245, 48, !dbg !54
  %258 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %257, !dbg !54
  %259 = bitcast float %240 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %260 = lshr i32 %13, 4, !dbg !54
  %261 = and i32 %260, 28, !dbg !54
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !54
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %246, !dbg !54
  %.extract = load i32, ptr addrspace(3) %263, align 16, !dbg !54
  %264 = getelementptr inbounds i8, ptr addrspace(3) %263, i32 4, !dbg !54
  %.extract15 = load i32, ptr addrspace(3) %264, align 4, !dbg !54
  %265 = getelementptr inbounds i8, ptr addrspace(3) %263, i32 8, !dbg !54
  %.extract16 = load i32, ptr addrspace(3) %265, align 8, !dbg !54
  %266 = getelementptr inbounds i8, ptr addrspace(3) %263, i32 12, !dbg !54
  %.extract17 = load i32, ptr addrspace(3) %266, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %19, i1 %12) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py", directory: "inductor_cache/h6")
!4 = !{ptr @triton_per_fused__softmax_add_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_4", linkageName: "triton_per_fused__softmax_add_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 34, scope: !11)
!18 = !DILocation(line: 31, column: 19, scope: !11)
!19 = !DILocation(line: 32, column: 42, scope: !11)
!20 = !DILocation(line: 32, column: 39, scope: !11)
!21 = !DILocation(line: 32, column: 34, scope: !11)
!22 = !DILocation(line: 32, column: 47, scope: !11)
!23 = !DILocation(line: 33, column: 38, scope: !11)
!24 = !DILocation(line: 33, column: 35, scope: !11)
!25 = !DILocation(line: 33, column: 30, scope: !11)
!26 = !DILocation(line: 33, column: 43, scope: !11)
!27 = !DILocation(line: 35, column: 18, scope: !11)
!28 = !DILocation(line: 36, column: 18, scope: !11)
!29 = !DILocation(line: 37, column: 32, scope: !11)
!30 = !DILocation(line: 38, column: 37, scope: !11)
!31 = !DILocation(line: 38, column: 62, scope: !11)
!32 = !DILocation(line: 39, column: 30, scope: !11)
!33 = !DILocation(line: 39, column: 37, scope: !11)
!34 = !DILocation(line: 40, column: 18, scope: !11)
!35 = !DILocation(line: 42, column: 34, scope: !11)
!36 = !DILocation(line: 131, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !11, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 43, column: 39, scope: !11)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !39)
!43 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !39)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !39)
!45 = !DILocation(line: 44, column: 19, scope: !11)
!46 = !DILocation(line: 45, column: 24, scope: !11)
!47 = !DILocation(line: 267, column: 36, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !11, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = !DILocation(line: 48, column: 26, scope: !11)
!51 = !DILocation(line: 256, column: 15, scope: !52, inlinedAt: !50)
!52 = distinct !DILexicalBlockFile(scope: !48, file: !49, discriminator: 0)
!53 = !DILocation(line: 49, column: 20, scope: !11)
!54 = !DILocation(line: 50, column: 48, scope: !11)
!55 = !DILocation(line: 50, column: 4, scope: !11)
