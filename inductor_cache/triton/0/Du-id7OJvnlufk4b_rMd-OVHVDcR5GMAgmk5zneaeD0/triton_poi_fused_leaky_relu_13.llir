; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %10, 256, !dbg !12
  %13 = or disjoint i32 %10, 384, !dbg !12
  %14 = or disjoint i32 %8, %10, !dbg !13
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %8, %13, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = icmp slt i32 %18, 64, !dbg !15
  %20 = sdiv i32 %14, 256, !dbg !16
  %21 = sdiv i32 %15, 256, !dbg !16
  %22 = sdiv i32 %16, 256, !dbg !16
  %23 = sdiv i32 %17, 256, !dbg !16
  %24 = shl i32 %14, 6, !dbg !17
  %25 = shl i32 %15, 6, !dbg !17
  %26 = shl i32 %16, 6, !dbg !17
  %27 = shl i32 %17, 6, !dbg !17
  %28 = add i32 %24, %18, !dbg !18
  %29 = add i32 %25, %18, !dbg !18
  %30 = add i32 %26, %18, !dbg !18
  %31 = add i32 %27, %18, !dbg !18
  %32 = sext i32 %28 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = sext i32 %29 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = sext i32 %30 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = sext i32 %31 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %19) #4, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %19) #4, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #4, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #4, !dbg !20
  %44 = shl nsw i32 %20, 6, !dbg !21
  %45 = shl nsw i32 %21, 6, !dbg !21
  %46 = shl nsw i32 %22, 6, !dbg !21
  %47 = shl nsw i32 %23, 6, !dbg !21
  %48 = add i32 %44, %18, !dbg !22
  %49 = add i32 %45, %18, !dbg !22
  %50 = add i32 %46, %18, !dbg !22
  %51 = add i32 %47, %18, !dbg !22
  %52 = sext i32 %48 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !23
  %54 = sext i32 %49 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !23
  %56 = sext i32 %50 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !23
  %58 = sext i32 %51 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %19) #4, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %19) #4, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %19) #4, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %19) #4, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !25
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %19) #4, !dbg !26
  %69 = bitcast i32 %68 to float, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %19) #4, !dbg !26
  %71 = bitcast i32 %70 to float, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %19) #4, !dbg !26
  %73 = bitcast i32 %72 to float, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %19) #4, !dbg !26
  %75 = bitcast i32 %74 to float, !dbg !26
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 2.560000e+02) #4, !dbg !27
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 2.560000e+02) #4, !dbg !27
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 2.560000e+02) #4, !dbg !27
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 2.560000e+02) #4, !dbg !27
  %80 = fadd float %76, 0x3EE4F8B580000000, !dbg !28
  %81 = fadd float %77, 0x3EE4F8B580000000, !dbg !28
  %82 = fadd float %78, 0x3EE4F8B580000000, !dbg !28
  %83 = fadd float %79, 0x3EE4F8B580000000, !dbg !28
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %84, 0, !dbg !29
  br i1 %.not.i, label %87, label %85, !dbg !29

85:                                               ; preds = %6
  %86 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

87:                                               ; preds = %6
  %88 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %85, %87
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], !dbg !29
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i7 = icmp eq i32 %89, 0, !dbg !29
  br i1 %.not.i7, label %92, label %90, !dbg !29

90:                                               ; preds = %__nv_rsqrtf.exit
  %91 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !29
  br label %__nv_rsqrtf.exit9, !dbg !29

92:                                               ; preds = %__nv_rsqrtf.exit
  %93 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !29
  br label %__nv_rsqrtf.exit9, !dbg !29

__nv_rsqrtf.exit9:                                ; preds = %90, %92
  %.0.i8 = phi float [ %91, %90 ], [ %93, %92 ], !dbg !29
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i10 = icmp eq i32 %94, 0, !dbg !29
  br i1 %.not.i10, label %97, label %95, !dbg !29

95:                                               ; preds = %__nv_rsqrtf.exit9
  %96 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !29
  br label %__nv_rsqrtf.exit12, !dbg !29

97:                                               ; preds = %__nv_rsqrtf.exit9
  %98 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !29
  br label %__nv_rsqrtf.exit12, !dbg !29

__nv_rsqrtf.exit12:                               ; preds = %95, %97
  %.0.i11 = phi float [ %96, %95 ], [ %98, %97 ], !dbg !29
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i13 = icmp eq i32 %99, 0, !dbg !29
  br i1 %.not.i13, label %102, label %100, !dbg !29

100:                                              ; preds = %__nv_rsqrtf.exit12
  %101 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !29
  br label %__nv_rsqrtf.exit15, !dbg !29

102:                                              ; preds = %__nv_rsqrtf.exit12
  %103 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !29
  br label %__nv_rsqrtf.exit15, !dbg !29

__nv_rsqrtf.exit15:                               ; preds = %100, %102
  %.0.i14 = phi float [ %101, %100 ], [ %103, %102 ], !dbg !29
  %104 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !20
  %105 = insertelement <4 x i32> %104, i32 %42, i64 1, !dbg !20
  %106 = insertelement <4 x i32> %105, i32 %41, i64 2, !dbg !20
  %107 = insertelement <4 x i32> %106, i32 %40, i64 3, !dbg !20
  %108 = bitcast <4 x i32> %107 to <4 x float>, !dbg !20
  %109 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !24
  %110 = insertelement <4 x i32> %109, i32 %62, i64 1, !dbg !24
  %111 = insertelement <4 x i32> %110, i32 %61, i64 2, !dbg !24
  %112 = insertelement <4 x i32> %111, i32 %60, i64 3, !dbg !24
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !24
  %114 = shl i32 %9, 2, !dbg !12
  %115 = and i32 %114, 508, !dbg !12
  %116 = or disjoint i32 %8, %115, !dbg !13
  %.frozen = freeze i32 %116, !dbg !16
  %117 = sdiv i32 %.frozen, 256, !dbg !16
  %118 = mul i32 %117, 256, !dbg !30
  %.decomposed = sub i32 %.frozen, %118, !dbg !30
  %119 = fsub <4 x float> %108, %113, !dbg !31
  %120 = insertelement <4 x float> poison, float %.0.i14, i64 0, !dbg !32
  %121 = insertelement <4 x float> %120, float %.0.i11, i64 1, !dbg !32
  %122 = insertelement <4 x float> %121, float %.0.i8, i64 2, !dbg !32
  %123 = insertelement <4 x float> %122, float %.0.i, i64 3, !dbg !32
  %124 = fmul <4 x float> %119, %123, !dbg !32
  %125 = fcmp ogt <4 x float> %124, zeroinitializer, !dbg !33
  %126 = extractelement <4 x float> %124, i64 3, !dbg !34
  %127 = fmul float %126, 0x3FB99999A0000000, !dbg !35
  %128 = extractelement <4 x float> %124, i64 2, !dbg !34
  %129 = fmul float %128, 0x3FB99999A0000000, !dbg !35
  %130 = extractelement <4 x float> %124, i64 1, !dbg !34
  %131 = fmul float %130, 0x3FB99999A0000000, !dbg !35
  %132 = extractelement <4 x float> %124, i64 0, !dbg !34
  %133 = fmul float %132, 0x3FB99999A0000000, !dbg !35
  %134 = extractelement <4 x i1> %125, i64 3, !dbg !34
  %135 = select i1 %134, float %126, float %127, !dbg !34
  %136 = extractelement <4 x i1> %125, i64 2, !dbg !34
  %137 = select i1 %136, float %128, float %129, !dbg !34
  %138 = extractelement <4 x i1> %125, i64 1, !dbg !34
  %139 = select i1 %138, float %130, float %131, !dbg !34
  %140 = extractelement <4 x i1> %125, i64 0, !dbg !34
  %141 = select i1 %140, float %132, float %133, !dbg !34
  %142 = shl i32 %18, 8, !dbg !36
  %143 = add i32 %.decomposed, %142, !dbg !37
  %144 = shl i32 %117, 14, !dbg !38
  %145 = add i32 %143, %144, !dbg !39
  %146 = sext i32 %145 to i64, !dbg !40
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !40
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !41
  %149 = bitcast float %135 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #4, !dbg !41
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !41
  %151 = bitcast float %137 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #4, !dbg !41
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !41
  %153 = bitcast float %139 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #4, !dbg !41
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !41
  %155 = bitcast float %141 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !41
  %.extract = load i32, ptr addrspace(3) %156, align 16, !dbg !41
  %157 = getelementptr inbounds i8, ptr addrspace(3) %156, i32 4, !dbg !41
  %.extract4 = load i32, ptr addrspace(3) %157, align 4, !dbg !41
  %158 = getelementptr inbounds i8, ptr addrspace(3) %156, i32 8, !dbg !41
  %.extract5 = load i32, ptr addrspace(3) %158, align 8, !dbg !41
  %159 = getelementptr inbounds i8, ptr addrspace(3) %156, i32 12, !dbg !41
  %.extract6 = load i32, ptr addrspace(3) %159, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %147, i1 %19) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czgyn7uzcuuf5e2cfubq7xjjgu5vtgvtsb3z53cijxhjt24b4mvi.py", directory: "inductor_cache/zg")
!4 = !{ptr @triton_poi_fused_leaky_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_13", linkageName: "triton_poi_fused_leaky_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 43, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 27, scope: !7)
!30 = !DILocation(line: 31, column: 19, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 34, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 34, scope: !7)
!37 = !DILocation(line: 47, column: 30, scope: !7)
!38 = !DILocation(line: 47, column: 45, scope: !7)
!39 = !DILocation(line: 47, column: 39, scope: !7)
!40 = !DILocation(line: 47, column: 25, scope: !7)
!41 = !DILocation(line: 47, column: 57, scope: !7)
!42 = !DILocation(line: 47, column: 4, scope: !7)
