; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %14 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !14
  %15 = insertelement <2 x i32> %14, i32 %12, i64 1, !dbg !14
  %16 = sdiv <2 x i32> %15, splat (i32 256), !dbg !14
  %17 = srem <2 x i32> %16, splat (i32 192), !dbg !15
  %18 = shufflevector <2 x i32> %17, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !15
  %19 = srem i32 %12, 256, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %20 = sdiv i32 %.frozen, 49152, !dbg !17
  %.frozen2 = freeze i32 %13, !dbg !17
  %21 = sdiv i32 %.frozen2, 49152, !dbg !17
  %22 = icmp slt <4 x i32> %18, <i32 64, i32 64, i32 128, i32 128>, !dbg !18
  %23 = mul i32 %20, 49152, !dbg !19
  %srem.decomposed = sub i32 %.frozen, %23, !dbg !19
  %24 = mul i32 %21, 49152, !dbg !19
  %srem1.decomposed = sub i32 %.frozen2, %24, !dbg !19
  %25 = shl nsw i32 %20, 14, !dbg !20
  %26 = shl nsw i32 %21, 14, !dbg !20
  %27 = add nsw i32 %25, %srem.decomposed, !dbg !21
  %28 = add nsw i32 %26, %srem1.decomposed, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = extractelement <4 x i1> %22, i64 1, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #1, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %39 = bitcast i32 %35 to float, !dbg !24
  %40 = bitcast i32 %36 to float, !dbg !24
  %41 = bitcast i32 %37 to float, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = extractelement <4 x i1> %22, i64 0, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #1, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = extractelement <2 x i32> %17, i64 1, !dbg !25
  %54 = sext i32 %53 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %56 = extractelement <2 x i32> %17, i64 0, !dbg !25
  %57 = sext i32 %56 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %33, i32 0, i1 %33) #1, !dbg !27
  %60 = bitcast i32 %59 to float, !dbg !27
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %33, i32 0, i1 %33) #1, !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %33, i32 0, i1 %33) #1, !dbg !27
  %64 = bitcast i32 %63 to float, !dbg !27
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %33, i32 0, i1 %33) #1, !dbg !27
  %66 = bitcast i32 %65 to float, !dbg !27
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %43, i32 0, i1 %43) #1, !dbg !27
  %68 = bitcast i32 %67 to float, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %43, i32 0, i1 %43) #1, !dbg !27
  %70 = bitcast i32 %69 to float, !dbg !27
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %43, i32 0, i1 %43) #1, !dbg !27
  %72 = bitcast i32 %71 to float, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %43, i32 0, i1 %43) #1, !dbg !27
  %74 = bitcast i32 %73 to float, !dbg !27
  %75 = fadd float %39, %60, !dbg !28
  %76 = fadd float %40, %62, !dbg !28
  %77 = fadd float %41, %64, !dbg !28
  %78 = fadd float %42, %66, !dbg !28
  %79 = fadd float %49, %68, !dbg !28
  %80 = fadd float %50, %70, !dbg !28
  %81 = fadd float %51, %72, !dbg !28
  %82 = fadd float %52, %74, !dbg !28
  %83 = and i32 %53, -64, !dbg !29
  %84 = icmp eq i32 %83, 64, !dbg !29
  %85 = and i32 %56, -64, !dbg !29
  %86 = icmp eq i32 %85, 64, !dbg !29
  %87 = shl nsw i32 %53, 8, !dbg !30
  %88 = shl nsw i32 %56, 8, !dbg !30
  %89 = add nsw i32 %25, %19, !dbg !30
  %90 = add nsw i32 %89, -16384, !dbg !31
  %91 = add nsw i32 %90, %87, !dbg !32
  %92 = add nsw i32 %26, %19, !dbg !30
  %93 = add nsw i32 %92, -16384, !dbg !31
  %94 = add nsw i32 %93, %88, !dbg !32
  %95 = sext i32 %91 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !33
  %97 = sext i32 %94 to i64, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !33
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #1, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !34
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !34
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !34
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !34
  %109 = icmp sgt i32 %53, 127, !dbg !25
  %110 = icmp sgt i32 %56, 127, !dbg !25
  %111 = add nsw i32 %89, -32768, !dbg !35
  %112 = add nsw i32 %111, %87, !dbg !36
  %113 = add nsw i32 %92, -32768, !dbg !35
  %114 = add nsw i32 %113, %88, !dbg !36
  %115 = sext i32 %112 to i64, !dbg !37
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !37
  %117 = sext i32 %114 to i64, !dbg !37
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !37
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #1, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !38
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !38
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110) #1, !dbg !38
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !38
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !38
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !38
  %129 = sext i32 %12 to i64, !dbg !39
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !39
  %131 = sext i32 %13 to i64, !dbg !39
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %131, !dbg !39
  %133 = bitcast float %75 to i32, !dbg !40
  %134 = select i1 %33, i32 %133, i32 %100, !dbg !23
  %135 = extractelement <4 x i1> %22, i64 3, !dbg !41
  %136 = select i1 %135, i32 %134, i32 %120, !dbg !41
  %137 = bitcast float %76 to i32, !dbg !40
  %138 = select i1 %33, i32 %137, i32 %101, !dbg !23
  %139 = select i1 %135, i32 %138, i32 %121, !dbg !41
  %140 = bitcast float %77 to i32, !dbg !40
  %141 = select i1 %33, i32 %140, i32 %102, !dbg !23
  %142 = select i1 %135, i32 %141, i32 %122, !dbg !41
  %143 = bitcast float %78 to i32, !dbg !40
  %144 = select i1 %33, i32 %143, i32 %103, !dbg !23
  %145 = select i1 %135, i32 %144, i32 %123, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %136, i32 %139, i32 %142, i32 %145, ptr addrspace(1) %130, i1 true) #1, !dbg !40
  %146 = bitcast float %79 to i32, !dbg !40
  %147 = select i1 %43, i32 %146, i32 %105, !dbg !23
  %148 = extractelement <4 x i1> %22, i64 2, !dbg !41
  %149 = select i1 %148, i32 %147, i32 %125, !dbg !41
  %150 = bitcast float %80 to i32, !dbg !40
  %151 = select i1 %43, i32 %150, i32 %106, !dbg !23
  %152 = select i1 %148, i32 %151, i32 %126, !dbg !41
  %153 = bitcast float %81 to i32, !dbg !40
  %154 = select i1 %43, i32 %153, i32 %107, !dbg !23
  %155 = select i1 %148, i32 %154, i32 %127, !dbg !41
  %156 = bitcast float %82 to i32, !dbg !40
  %157 = select i1 %43, i32 %156, i32 %108, !dbg !23
  %158 = select i1 %148, i32 %157, i32 %128, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %149, i32 %152, i32 %155, i32 %158, ptr addrspace(1) %132, i1 true) #1, !dbg !40
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd3oi6ipq233c244pbz2mi4zjjsmiutdyclg2vmgakcrpvkpgu2c.py", directory: "inductor_cache/d3")
!4 = !{ptr @triton_poi_fused_cat_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_22", linkageName: "triton_poi_fused_cat_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 37, column: 18, scope: !7)
!19 = !DILocation(line: 39, column: 36, scope: !7)
!20 = !DILocation(line: 39, column: 53, scope: !7)
!21 = !DILocation(line: 39, column: 47, scope: !7)
!22 = !DILocation(line: 39, column: 31, scope: !7)
!23 = !DILocation(line: 49, column: 34, scope: !7)
!24 = !DILocation(line: 39, column: 58, scope: !7)
!25 = !DILocation(line: 52, column: 20, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 36, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 47, column: 20, scope: !7)
!30 = !DILocation(line: 48, column: 41, scope: !7)
!31 = !DILocation(line: 48, column: 36, scope: !7)
!32 = !DILocation(line: 48, column: 57, scope: !7)
!33 = !DILocation(line: 48, column: 31, scope: !7)
!34 = !DILocation(line: 48, column: 68, scope: !7)
!35 = !DILocation(line: 55, column: 36, scope: !7)
!36 = !DILocation(line: 55, column: 56, scope: !7)
!37 = !DILocation(line: 55, column: 31, scope: !7)
!38 = !DILocation(line: 55, column: 67, scope: !7)
!39 = !DILocation(line: 57, column: 25, scope: !7)
!40 = !DILocation(line: 57, column: 37, scope: !7)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 57, column: 4, scope: !7)
