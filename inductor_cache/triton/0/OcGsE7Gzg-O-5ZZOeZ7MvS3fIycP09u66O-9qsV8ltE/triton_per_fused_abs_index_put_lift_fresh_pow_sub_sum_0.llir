; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_index_put_lift_fresh_pow_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %0, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %15 to float, !dbg !12
  %18 = bitcast i32 %16 to float, !dbg !12
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !13
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !14
  %25 = bitcast i32 %23 to float, !dbg !14
  %26 = bitcast i32 %24 to float, !dbg !14
  %27 = fsub float %17, %25, !dbg !15
  %28 = fsub float %18, %26, !dbg !15
  %29 = tail call float @llvm.fabs.f32(float %27), !dbg !16
  %30 = tail call float @llvm.fabs.f32(float %28), !dbg !16
  %31 = fcmp olt float %29, 1.000000e+00, !dbg !17
  %32 = fcmp olt float %30, 1.000000e+00, !dbg !17
  %33 = fmul float %27, %27, !dbg !18
  %34 = fmul float %28, %28, !dbg !18
  %35 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %36 = insertelement <2 x i32> %35, i32 %14, i64 1, !dbg !12
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !12
  %38 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !14
  %39 = insertelement <2 x i32> %38, i32 %22, i64 1, !dbg !14
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !14
  %41 = fsub <2 x float> %37, %40, !dbg !15
  %42 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %41), !dbg !16
  %43 = fcmp olt <2 x float> %42, splat (float 1.000000e+00), !dbg !17
  %44 = fmul <2 x float> %41, %41, !dbg !18
  %45 = select <2 x i1> %43, <2 x float> zeroinitializer, <2 x float> %44, !dbg !19
  %46 = select i1 %31, float 0.000000e+00, float %33, !dbg !19
  %47 = select i1 %32, float 0.000000e+00, float %34, !dbg !19
  %shift = shufflevector <2 x float> %45, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %48 = fadd <2 x float> %45, %shift, !dbg !20
  %49 = extractelement <2 x float> %48, i64 0, !dbg !20
  %50 = fadd float %46, %49, !dbg !20
  %51 = fadd float %47, %50, !dbg !20
  %52 = bitcast float %51 to i32, !dbg !25
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !25
  %54 = bitcast i32 %53 to float, !dbg !25
  %55 = fadd float %51, %54, !dbg !20
  %56 = bitcast float %55 to i32, !dbg !25
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !25
  %58 = bitcast i32 %57 to float, !dbg !25
  %59 = fadd float %55, %58, !dbg !20
  %60 = bitcast float %59 to i32, !dbg !25
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = fadd float %59, %62, !dbg !20
  %64 = bitcast float %63 to i32, !dbg !25
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !25
  %66 = bitcast i32 %65 to float, !dbg !25
  %67 = fadd float %63, %66, !dbg !20
  %68 = bitcast float %67 to i32, !dbg !25
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = fadd float %67, %70, !dbg !20
  %72 = icmp eq i32 %6, 0, !dbg !25
  %73 = and i32 %7, 1, !dbg !25
  %74 = zext nneg i32 %73 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i64 %74, !dbg !25
  %76 = bitcast float %71 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 %72) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %77 = icmp slt i32 %5, 2, !dbg !25
  %78 = sext i32 %5 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i64 %78, !dbg !25
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %77) #4, !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !25
  %83 = bitcast i32 %82 to float, !dbg !25
  %84 = fadd float %81, %83, !dbg !20
  %85 = and i32 %5, 1, !dbg !25
  %86 = icmp eq i32 %85, 0, !dbg !25
  %87 = and i1 %77, %86, !dbg !25
  %88 = bitcast float %84 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %88, i1 %87) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %89 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %90 = fadd float %89, 0.000000e+00, !dbg !26
  %urem = and i32 %5, 63, !dbg !30
  %91 = icmp eq i32 %urem, 0, !dbg !30
  %92 = bitcast float %90 to i32, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %2, i1 %91) #4, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckromxhtsuxurpv5xxdatpnntq3by5pfumuyxymu4rkqbmqet4uo.py", directory: "inductor_cache/kr")
!4 = !{ptr @triton_per_fused_abs_index_put_lift_fresh_pow_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_index_put_lift_fresh_pow_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_index_put_lift_fresh_pow_sub_sum_0", linkageName: "triton_per_fused_abs_index_put_lift_fresh_pow_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 23, scope: !7)
!17 = !DILocation(line: 36, column: 18, scope: !7)
!18 = !DILocation(line: 37, column: 18, scope: !7)
!19 = !DILocation(line: 39, column: 32, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 41, column: 58, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 41, column: 45, scope: !7)
!30 = !DILocation(line: 42, column: 60, scope: !7)
!31 = !DILocation(line: 42, column: 4, scope: !7)
