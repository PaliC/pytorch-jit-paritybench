; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %20 = shl i32 %19, 7, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = and i32 %21, 127, !dbg !12
  %23 = or disjoint i32 %20, %22, !dbg !13
  %24 = icmp slt i32 %23, 8960, !dbg !14
  %.frozen = freeze i32 %23, !dbg !15
  %25 = sdiv i32 %.frozen, 2240, !dbg !15
  %26 = mul i32 %25, 2240, !dbg !16
  %.decomposed = sub i32 %.frozen, %26, !dbg !16
  %27 = icmp slt i32 %.decomposed, 900, !dbg !17
  %28 = mul nsw i32 %25, 900, !dbg !18
  %.lhs.trunc = trunc nsw i32 %.decomposed to i16, !dbg !19
  %29 = srem i16 %.lhs.trunc, 900, !dbg !19
  %.sext = sext i16 %29 to i32, !dbg !19
  %30 = add nsw i32 %28, %.sext, !dbg !20
  %31 = sext i32 %30 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = and i1 %24, %27, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %33, i32 0, i1 %33) #1, !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = srem i16 %.lhs.trunc, 4, !dbg !24
  %37 = sext i16 %36 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %33, i32 0, i1 %33) #1, !dbg !26
  %40 = bitcast i32 %39 to float, !dbg !26
  %41 = fadd float %35, %40, !dbg !27
  %42 = add nsw i32 %.decomposed, -900, !dbg !28
  %43 = icmp ult i32 %42, 900, !dbg !28
  %.lhs.trunc3 = trunc nsw i32 %42 to i16, !dbg !29
  %44 = srem i16 %.lhs.trunc3, 900, !dbg !29
  %.sext4 = sext i16 %44 to i32, !dbg !29
  %45 = add nsw i32 %28, %.sext4, !dbg !30
  %46 = sext i32 %45 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !31
  %48 = and i1 %24, %43, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 0, i1 %48) #1, !dbg !33
  %50 = bitcast i32 %49 to float, !dbg !33
  %51 = srem i16 %.lhs.trunc3, 4, !dbg !34
  %52 = sext i16 %51 to i64, !dbg !35
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %48, i32 0, i1 %48) #1, !dbg !36
  %55 = bitcast i32 %54 to float, !dbg !36
  %56 = fadd float %50, %55, !dbg !37
  %57 = add nsw i32 %.decomposed, -1800, !dbg !38
  %58 = icmp ult i32 %57, 196, !dbg !38
  %59 = mul nsw i32 %25, 196, !dbg !39
  %.lhs.trunc7 = trunc nsw i32 %57 to i16, !dbg !40
  %60 = srem i16 %.lhs.trunc7, 196, !dbg !40
  %.sext8 = sext i16 %60 to i32, !dbg !40
  %61 = add nsw i32 %59, %.sext8, !dbg !41
  %62 = sext i32 %61 to i64, !dbg !42
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !42
  %64 = and i1 %24, %58, !dbg !43
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %64, i32 0, i1 %64) #1, !dbg !44
  %66 = bitcast i32 %65 to float, !dbg !44
  %67 = srem i16 %.lhs.trunc7, 4, !dbg !45
  %68 = sext i16 %67 to i64, !dbg !46
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %68, !dbg !46
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %64, i32 0, i1 %64) #1, !dbg !47
  %71 = bitcast i32 %70 to float, !dbg !47
  %72 = fadd float %66, %71, !dbg !48
  %73 = add nsw i32 %.decomposed, -1996, !dbg !49
  %74 = icmp ult i32 %73, 196, !dbg !49
  %.lhs.trunc11 = trunc nsw i32 %73 to i16, !dbg !50
  %75 = srem i16 %.lhs.trunc11, 196, !dbg !50
  %.sext12 = sext i16 %75 to i32, !dbg !50
  %76 = add nsw i32 %59, %.sext12, !dbg !51
  %77 = sext i32 %76 to i64, !dbg !52
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %77, !dbg !52
  %79 = and i1 %24, %74, !dbg !53
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 0, i1 %79) #1, !dbg !54
  %81 = bitcast i32 %80 to float, !dbg !54
  %82 = srem i16 %.lhs.trunc11, 4, !dbg !55
  %83 = sext i16 %82 to i64, !dbg !56
  %84 = getelementptr float, ptr addrspace(1) %7, i64 %83, !dbg !56
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %79, i32 0, i1 %79) #1, !dbg !57
  %86 = bitcast i32 %85 to float, !dbg !57
  %87 = fadd float %81, %86, !dbg !58
  %88 = add nsw i32 %.decomposed, -2192, !dbg !59
  %89 = icmp ult i32 %88, 36, !dbg !59
  %90 = mul nsw i32 %25, 36, !dbg !60
  %.lhs.trunc15 = trunc nsw i32 %88 to i16, !dbg !61
  %91 = srem i16 %.lhs.trunc15, 36, !dbg !61
  %.sext16 = sext i16 %91 to i32, !dbg !61
  %92 = add nsw i32 %90, %.sext16, !dbg !62
  %93 = sext i32 %92 to i64, !dbg !63
  %94 = getelementptr float, ptr addrspace(1) %8, i64 %93, !dbg !63
  %95 = and i1 %24, %89, !dbg !64
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %95, i32 0, i1 %95) #1, !dbg !65
  %97 = bitcast i32 %96 to float, !dbg !65
  %98 = srem i16 %.lhs.trunc15, 4, !dbg !66
  %99 = sext i16 %98 to i64, !dbg !67
  %100 = getelementptr float, ptr addrspace(1) %9, i64 %99, !dbg !67
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %95, i32 0, i1 %95) #1, !dbg !68
  %102 = bitcast i32 %101 to float, !dbg !68
  %103 = fadd float %97, %102, !dbg !69
  %104 = and i32 %.decomposed, -4, !dbg !70
  %105 = icmp eq i32 %104, 2228, !dbg !70
  %106 = shl nsw i32 %25, 2, !dbg !71
  %107 = add nsw i32 %.decomposed, -2228, !dbg !72
  %108 = add nsw i32 %106, %107, !dbg !73
  %109 = sext i32 %108 to i64, !dbg !74
  %110 = getelementptr float, ptr addrspace(1) %10, i64 %109, !dbg !74
  %111 = and i1 %24, %105, !dbg !75
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %111, i32 0, i1 %111) #1, !dbg !76
  %113 = bitcast i32 %112 to float, !dbg !76
  %114 = sext i32 %107 to i64, !dbg !77
  %115 = getelementptr float, ptr addrspace(1) %11, i64 %114, !dbg !77
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %111, i32 0, i1 %111) #1, !dbg !78
  %117 = bitcast i32 %116 to float, !dbg !78
  %118 = fadd float %113, %117, !dbg !79
  %119 = icmp eq i32 %104, 2232, !dbg !80
  %120 = add nsw i32 %.decomposed, -2232, !dbg !81
  %121 = add nsw i32 %106, %120, !dbg !82
  %122 = sext i32 %121 to i64, !dbg !83
  %123 = getelementptr float, ptr addrspace(1) %12, i64 %122, !dbg !83
  %124 = and i1 %24, %119, !dbg !84
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %124, i32 0, i1 %124) #1, !dbg !85
  %126 = bitcast i32 %125 to float, !dbg !85
  %127 = sext i32 %120 to i64, !dbg !86
  %128 = getelementptr float, ptr addrspace(1) %13, i64 %127, !dbg !86
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %124, i32 0, i1 %124) #1, !dbg !87
  %130 = bitcast i32 %129 to float, !dbg !87
  %131 = fadd float %126, %130, !dbg !88
  %132 = icmp sgt i32 %.decomposed, 2235, !dbg !89
  %133 = add nsw i32 %.decomposed, -2236, !dbg !90
  %134 = add nsw i32 %106, %133, !dbg !91
  %135 = sext i32 %134 to i64, !dbg !92
  %136 = getelementptr float, ptr addrspace(1) %14, i64 %135, !dbg !92
  %137 = and i1 %24, %132, !dbg !93
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %137, i32 0, i1 %137) #1, !dbg !94
  %139 = bitcast i32 %138 to float, !dbg !94
  %140 = sext i32 %133 to i64, !dbg !95
  %141 = getelementptr float, ptr addrspace(1) %15, i64 %140, !dbg !95
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %137, i32 0, i1 %137) #1, !dbg !96
  %143 = bitcast i32 %142 to float, !dbg !96
  %144 = fadd float %139, %143, !dbg !97
  %145 = select i1 %132, float %144, float 0.000000e+00, !dbg !98
  %146 = select i1 %119, float %131, float %145, !dbg !99
  %147 = select i1 %105, float %118, float %146, !dbg !99
  %148 = select i1 %89, float %103, float %147, !dbg !99
  %149 = select i1 %74, float %87, float %148, !dbg !99
  %150 = select i1 %58, float %72, float %149, !dbg !99
  %151 = select i1 %43, float %56, float %150, !dbg !99
  %152 = select i1 %27, float %41, float %151, !dbg !99
  %153 = sext i32 %23 to i64, !dbg !100
  %154 = getelementptr float, ptr addrspace(1) %16, i64 %153, !dbg !100
  %155 = bitcast float %152 to i32, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %154, i1 %24) #1, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdfupmsjaf7v5t2sjyvhklmrumujrtpa2i2lfnzptknblzwnsvas.py", directory: "inductor_cache/df")
!4 = !{ptr @triton_poi_fused_cat_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_35", linkageName: "triton_poi_fused_cat_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 48, scope: !7)
!20 = !DILocation(line: 32, column: 41, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 63, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 33, column: 38, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 20, scope: !7)
!29 = !DILocation(line: 41, column: 58, scope: !7)
!30 = !DILocation(line: 41, column: 42, scope: !7)
!31 = !DILocation(line: 41, column: 31, scope: !7)
!32 = !DILocation(line: 41, column: 74, scope: !7)
!33 = !DILocation(line: 41, column: 66, scope: !7)
!34 = !DILocation(line: 42, column: 48, scope: !7)
!35 = !DILocation(line: 42, column: 32, scope: !7)
!36 = !DILocation(line: 42, column: 53, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 35, scope: !7)
!40 = !DILocation(line: 50, column: 59, scope: !7)
!41 = !DILocation(line: 50, column: 42, scope: !7)
!42 = !DILocation(line: 50, column: 31, scope: !7)
!43 = !DILocation(line: 50, column: 75, scope: !7)
!44 = !DILocation(line: 50, column: 67, scope: !7)
!45 = !DILocation(line: 51, column: 49, scope: !7)
!46 = !DILocation(line: 51, column: 32, scope: !7)
!47 = !DILocation(line: 51, column: 54, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 59, scope: !7)
!51 = !DILocation(line: 59, column: 42, scope: !7)
!52 = !DILocation(line: 59, column: 31, scope: !7)
!53 = !DILocation(line: 59, column: 75, scope: !7)
!54 = !DILocation(line: 59, column: 67, scope: !7)
!55 = !DILocation(line: 60, column: 49, scope: !7)
!56 = !DILocation(line: 60, column: 32, scope: !7)
!57 = !DILocation(line: 60, column: 54, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 34, scope: !7)
!61 = !DILocation(line: 68, column: 58, scope: !7)
!62 = !DILocation(line: 68, column: 41, scope: !7)
!63 = !DILocation(line: 68, column: 31, scope: !7)
!64 = !DILocation(line: 68, column: 73, scope: !7)
!65 = !DILocation(line: 68, column: 65, scope: !7)
!66 = !DILocation(line: 69, column: 49, scope: !7)
!67 = !DILocation(line: 69, column: 32, scope: !7)
!68 = !DILocation(line: 69, column: 54, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 76, column: 20, scope: !7)
!71 = !DILocation(line: 77, column: 34, scope: !7)
!72 = !DILocation(line: 77, column: 50, scope: !7)
!73 = !DILocation(line: 77, column: 40, scope: !7)
!74 = !DILocation(line: 77, column: 32, scope: !7)
!75 = !DILocation(line: 77, column: 64, scope: !7)
!76 = !DILocation(line: 77, column: 56, scope: !7)
!77 = !DILocation(line: 78, column: 32, scope: !7)
!78 = !DILocation(line: 78, column: 47, scope: !7)
!79 = !DILocation(line: 79, column: 20, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 86, column: 50, scope: !7)
!82 = !DILocation(line: 86, column: 40, scope: !7)
!83 = !DILocation(line: 86, column: 32, scope: !7)
!84 = !DILocation(line: 86, column: 64, scope: !7)
!85 = !DILocation(line: 86, column: 56, scope: !7)
!86 = !DILocation(line: 87, column: 32, scope: !7)
!87 = !DILocation(line: 87, column: 47, scope: !7)
!88 = !DILocation(line: 88, column: 20, scope: !7)
!89 = !DILocation(line: 91, column: 20, scope: !7)
!90 = !DILocation(line: 94, column: 50, scope: !7)
!91 = !DILocation(line: 94, column: 40, scope: !7)
!92 = !DILocation(line: 94, column: 32, scope: !7)
!93 = !DILocation(line: 94, column: 64, scope: !7)
!94 = !DILocation(line: 94, column: 56, scope: !7)
!95 = !DILocation(line: 95, column: 32, scope: !7)
!96 = !DILocation(line: 95, column: 47, scope: !7)
!97 = !DILocation(line: 96, column: 20, scope: !7)
!98 = !DILocation(line: 98, column: 35, scope: !7)
!99 = !DILocation(line: 0, scope: !7)
!100 = !DILocation(line: 106, column: 25, scope: !7)
!101 = !DILocation(line: 106, column: 37, scope: !7)
!102 = !DILocation(line: 106, column: 4, scope: !7)
