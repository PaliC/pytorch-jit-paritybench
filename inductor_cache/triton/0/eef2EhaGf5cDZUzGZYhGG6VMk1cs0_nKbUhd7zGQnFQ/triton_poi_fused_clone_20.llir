; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_clone_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %.fr = freeze i32 %6, !dbg !11
  %7 = shl i32 %.fr, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = srem i32 %11, 768, !dbg !14
  %13 = srem i32 %11, 192, !dbg !15
  %14 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !16
  %15 = shufflevector <2 x i32> %14, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %16 = sdiv <2 x i32> %15, <i32 3072, i32 768>, !dbg !16
  %17 = srem <2 x i32> %16, <i32 2, i32 4>, !dbg !17
  %18 = mul nsw <2 x i32> %17, <i32 768, i32 1536>, !dbg !18
  %19 = srem i32 %11, 6144, !dbg !19
  %20 = sub nsw i32 %11, %19, !dbg !20
  %21 = add i32 %20, %12, !dbg !21
  %22 = extractelement <2 x i32> %18, i64 0, !dbg !19
  %23 = add i32 %21, %22, !dbg !19
  %24 = extractelement <2 x i32> %18, i64 1, !dbg !22
  %25 = add i32 %23, %24, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !24
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !24
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !24
  %33 = bitcast i32 %29 to float, !dbg !24
  %34 = bitcast i32 %30 to float, !dbg !24
  %35 = bitcast i32 %31 to float, !dbg !24
  %36 = bitcast i32 %32 to float, !dbg !24
  %37 = sext i32 %13 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %44 = bitcast i32 %40 to float, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !27
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !28
  %54 = bitcast i32 %50 to float, !dbg !28
  %55 = bitcast i32 %51 to float, !dbg !28
  %56 = bitcast i32 %52 to float, !dbg !28
  %57 = bitcast i32 %53 to float, !dbg !28
  %58 = fmul float %33, %44, !dbg !29
  %59 = fmul float %34, %45, !dbg !29
  %60 = fmul float %35, %46, !dbg !29
  %61 = fmul float %36, %47, !dbg !29
  %62 = fadd float %58, %54, !dbg !30
  %63 = fadd float %59, %55, !dbg !30
  %64 = fadd float %60, %56, !dbg !30
  %65 = fadd float %61, %57, !dbg !30
  %66 = sext i32 %11 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !31
  %68 = bitcast float %62 to i32, !dbg !32
  %69 = bitcast float %63 to i32, !dbg !32
  %70 = bitcast float %64 to i32, !dbg !32
  %71 = bitcast float %65 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %68, i32 %69, i32 %70, i32 %71, ptr addrspace(1) %67, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjkjg7hgwluwvx3olocdvslrvyjwp4e4rm5bi6t5wxyzopp3xwg2.py", directory: "inductor_cache/jk")
!4 = !{ptr @triton_poi_fused_clone_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_20", linkageName: "triton_poi_fused_clone_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 28, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 29, scope: !7)
!18 = !DILocation(line: 30, column: 39, scope: !7)
!19 = !DILocation(line: 30, column: 59, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 44, scope: !7)
!22 = !DILocation(line: 30, column: 54, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 64, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
