#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0)
#loc1 = loc(unknown)
#loc27 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":43:25)
#loc33 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":50:26)
#loc62 = loc(callsite(#loc1 at #loc27))
#loc65 = loc(callsite(#loc1 at #loc33))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.600000e+01> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1024> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<1024> : tensor<8x1xi32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<1.600000e+01> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc6)
    %12 = arith.remsi %8, %cst_4 : tensor<8x1xi32, #blocked> loc(#loc7)
    %13 = arith.remsi %9, %cst_3 : tensor<8x1xi32, #blocked1> loc(#loc7)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc8)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %16 = tt.addptr %14, %8 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc8)
    %17 = tt.addptr %15, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc8)
    %18 = tt.load %16 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %19 = tt.load %17 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc10)
    %21 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %22 = tt.addptr %20, %12 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc10)
    %23 = tt.addptr %21, %13 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc10)
    %24 = tt.load %22 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %25 = tt.load %23 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %26 = arith.muli %8, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc12)
    %27 = tt.broadcast %11 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc13)
    %28 = tt.broadcast %26 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc13)
    %29 = arith.addi %27, %28 : tensor<8x16xi32, #blocked> loc(#loc13)
    %30 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc14)
    %31 = tt.addptr %30, %29 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc14)
    %32 = tt.load %31 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %33 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %34 = tt.addptr %33, %12 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc16)
    %35 = tt.load %34 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %36 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc18)
    %37 = tt.addptr %36, %29 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc18)
    %38 = tt.load %37 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc19)
    %39 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %40 = tt.addptr %39, %8 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc20)
    %41 = tt.load %40 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %42 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %43 = tt.addptr %42, %8 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc22)
    %44 = tt.load %43 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %45 = arith.addf %18, %24 : tensor<8x1xf32, #blocked> loc(#loc24)
    %46 = arith.addf %19, %25 : tensor<8x1xf32, #blocked1> loc(#loc24)
    %47 = tt.broadcast %35 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc25)
    %48 = arith.addf %32, %47 : tensor<8x16xf32, #blocked> loc(#loc25)
    %49 = "tt.reduce"(%48) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc27)), %arg13: f32 loc(callsite(#loc1 at #loc27))):
      %89 = arith.addf %arg12, %arg13 : f32 loc(#loc72)
      tt.reduce.return %89 : f32 loc(#loc61)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc61)
    %50 = triton_gpu.convert_layout %49 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %51 = tt.expand_dims %50 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc30)
    %52 = tt.expand_dims %49 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc30)
    %53 = arith.divf %51, %cst_8 : tensor<8x1xf32, #blocked1> loc(#loc29)
    %54 = arith.divf %52, %cst : tensor<8x1xf32, #blocked> loc(#loc29)
    %55 = tt.broadcast %54 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc31)
    %56 = arith.subf %48, %55 : tensor<8x16xf32, #blocked> loc(#loc31)
    %57 = arith.mulf %56, %56 : tensor<8x16xf32, #blocked> loc(#loc32)
    %58 = "tt.reduce"(%57) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc33)), %arg13: f32 loc(callsite(#loc1 at #loc33))):
      %89 = arith.addf %arg12, %arg13 : f32 loc(#loc73)
      tt.reduce.return %89 : f32 loc(#loc64)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc64)
    %59 = triton_gpu.convert_layout %58 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc34)
    %60 = tt.expand_dims %59 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc35)
    %61 = tt.expand_dims %58 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc35)
    %62 = tt.broadcast %41 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc36)
    %63 = arith.subf %38, %62 : tensor<8x16xf32, #blocked> loc(#loc36)
    %64 = tt.broadcast %44 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc37)
    %65 = arith.mulf %63, %64 : tensor<8x16xf32, #blocked> loc(#loc37)
    %66 = arith.subf %cst_0, %45 : tensor<8x1xf32, #blocked> loc(#loc66)
    %67 = math.exp %66 : tensor<8x1xf32, #blocked> loc(#loc67)
    %68 = arith.addf %67, %cst_1 : tensor<8x1xf32, #blocked> loc(#loc68)
    %69 = arith.divf %cst_1, %68 : tensor<8x1xf32, #blocked> loc(#loc69)
    %70 = tt.broadcast %69 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc43)
    %71 = arith.mulf %65, %70 : tensor<8x16xf32, #blocked> loc(#loc43)
    %72 = arith.divf %60, %cst_8 : tensor<8x1xf32, #blocked1> loc(#loc44)
    %73 = arith.divf %61, %cst : tensor<8x1xf32, #blocked> loc(#loc44)
    %74 = arith.addf %72, %cst_7 : tensor<8x1xf32, #blocked1> loc(#loc45)
    %75 = arith.addf %73, %cst_6 : tensor<8x1xf32, #blocked> loc(#loc45)
    %76 = tt.extern_elementwise %74 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked1>) -> tensor<8x1xf32, #blocked1> loc(#loc34)
    %77 = tt.extern_elementwise %75 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc34)
    %78 = tt.broadcast %77 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc46)
    %79 = arith.mulf %56, %78 : tensor<8x16xf32, #blocked> loc(#loc46)
    %80 = arith.addf %71, %79 : tensor<8x16xf32, #blocked> loc(#loc47)
    %81 = arith.cmpf ogt, %cst_5, %80 : tensor<8x16xf32, #blocked> loc(#loc70)
    %82 = arith.select %81, %cst_5, %80 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc71)
    gpu.barrier loc(#loc51)
    tt.store %17, %46 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc52)
    tt.store %31, %48 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc53)
    %83 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc54)
    %84 = tt.addptr %83, %29 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc54)
    tt.store %84, %82 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc55)
    %85 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc56)
    %86 = tt.addptr %85, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc56)
    tt.store %86, %76 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc57)
    %87 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc58)
    %88 = tt.addptr %87, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc58)
    tt.store %88, %53 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc59)
    tt.return loc(#loc60)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":23:28)
#loc3 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":23:33)
#loc4 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":24:44)
#loc5 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":24:23)
#loc6 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":26:34)
#loc7 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":30:19)
#loc8 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":32:34)
#loc9 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":32:39)
#loc10 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":33:30)
#loc11 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":33:35)
#loc12 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":34:42)
#loc13 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":34:39)
#loc14 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":34:34)
#loc15 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":34:47)
#loc16 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":35:30)
#loc17 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":35:35)
#loc18 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":36:31)
#loc19 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":36:44)
#loc20 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":37:31)
#loc21 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":37:36)
#loc22 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":38:31)
#loc23 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":38:36)
#loc24 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":39:18)
#loc25 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":40:18)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc29 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":46:20)
#loc30 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":43:28)
#loc31 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":47:19)
#loc32 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":48:20)
#loc34 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":60:28)
#loc35 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":50:29)
#loc36 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":51:20)
#loc37 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":52:20)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc39 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":53:23)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc43 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":54:20)
#loc44 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":57:20)
#loc45 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":59:20)
#loc46 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":61:20)
#loc47 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":62:20)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc49 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":64:42)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc51 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":65:4)
#loc52 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":66:39)
#loc53 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":67:47)
#loc54 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":68:25)
#loc55 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":68:45)
#loc56 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":69:25)
#loc57 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":69:37)
#loc58 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":70:25)
#loc59 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":70:37)
#loc60 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":70:4)
#loc61 = loc(callsite(#loc26 at #loc27))
#loc63 = loc(callsite(#loc28 at #loc26))
#loc64 = loc(callsite(#loc26 at #loc33))
#loc66 = loc(callsite(#loc38 at #loc39))
#loc67 = loc(callsite(#loc40 at #loc39))
#loc68 = loc(callsite(#loc41 at #loc39))
#loc69 = loc(callsite(#loc42 at #loc39))
#loc70 = loc(callsite(#loc48 at #loc49))
#loc71 = loc(callsite(#loc50 at #loc49))
#loc72 = loc(callsite(#loc63 at #loc27))
#loc73 = loc(callsite(#loc63 at #loc33))
