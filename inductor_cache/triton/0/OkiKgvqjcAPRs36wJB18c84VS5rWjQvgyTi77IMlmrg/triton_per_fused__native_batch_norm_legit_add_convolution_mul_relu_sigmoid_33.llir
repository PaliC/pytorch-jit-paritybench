; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 3, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 3, !dbg !12
  %17 = and i32 %16, 7, !dbg !12
  %18 = and i32 %15, 7, !dbg !12
  %19 = or disjoint i32 %14, %17, !dbg !13
  %20 = or disjoint i32 %14, %18, !dbg !13
  %21 = shl i32 %15, 1, !dbg !14
  %22 = and i32 %21, 14, !dbg !14
  %23 = srem i32 %19, 1024, !dbg !15
  %24 = srem i32 %20, 1024, !dbg !15
  %25 = sext i32 %19 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = sext i32 %20 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %31 = bitcast i32 %30 to float, !dbg !17
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !17
  %33 = sext i32 %23 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !18
  %35 = sext i32 %24 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !18
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %39 = bitcast i32 %38 to float, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !19
  %41 = shl i32 %19, 4, !dbg !20
  %42 = or disjoint i32 %41, %22, !dbg !21
  %43 = sext i32 %42 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !22
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !23
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !23
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !23
  %48 = bitcast i32 %46 to float, !dbg !23
  %49 = bitcast i32 %47 to float, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !26
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #5, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #5, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !30
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !31
  %62 = fadd float %31, %39, !dbg !32
  %63 = fadd float %48, %53, !dbg !33
  %64 = fadd float %49, %53, !dbg !33
  %65 = fadd float %63, %64, !dbg !34
  %66 = bitcast float %65 to i32, !dbg !39
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !39
  %68 = bitcast i32 %67 to float, !dbg !39
  %69 = fadd float %65, %68, !dbg !34
  %70 = bitcast float %69 to i32, !dbg !39
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !39
  %72 = bitcast i32 %71 to float, !dbg !39
  %73 = fadd float %69, %72, !dbg !34
  %74 = bitcast float %73 to i32, !dbg !39
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !39
  %76 = bitcast i32 %75 to float, !dbg !39
  %77 = fadd float %73, %76, !dbg !34
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !40
  %79 = bitcast float %77 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !40
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !40
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 1.600000e+01) #5, !dbg !40
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 1.600000e+01) #5, !dbg !40
  %84 = fsub float %63, %83, !dbg !41
  %85 = fsub float %64, %83, !dbg !41
  %86 = fmul float %84, %84, !dbg !42
  %87 = fmul float %85, %85, !dbg !42
  %88 = fadd float %86, %87, !dbg !43
  %89 = bitcast float %88 to i32, !dbg !45
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 4, i32 31), !dbg !45
  %91 = bitcast i32 %90 to float, !dbg !45
  %92 = fadd float %88, %91, !dbg !43
  %93 = bitcast float %92 to i32, !dbg !45
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !45
  %95 = bitcast i32 %94 to float, !dbg !45
  %96 = fadd float %92, %95, !dbg !43
  %97 = bitcast float %96 to i32, !dbg !45
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !45
  %99 = bitcast i32 %98 to float, !dbg !45
  %100 = fadd float %96, %99, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %101 = bitcast float %100 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %101, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %102 = load float, ptr addrspace(3) %80, align 4, !dbg !46
  %103 = fsub float 0.000000e+00, %62, !dbg !47
  %104 = fmul float %103, 0x3FF7154760000000, !dbg !49
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #5, !dbg !49
  %106 = fadd float %105, 1.000000e+00, !dbg !50
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %106) #5, !dbg !51
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 1.600000e+01) #5, !dbg !52
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 1.600000e+01) #5, !dbg !52
  %110 = fadd float %108, 0x3EE4F8B580000000, !dbg !53
  %111 = fadd float %109, 0x3EE4F8B580000000, !dbg !53
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %112, 0, !dbg !46
  br i1 %.not.i, label %115, label %113, !dbg !46

113:                                              ; preds = %12
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %110), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

115:                                              ; preds = %12
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %110), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %113, %115
  %.0.i = phi float [ %114, %113 ], [ %116, %115 ], !dbg !46
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i4 = icmp eq i32 %118, 0, !dbg !46
  br i1 %.not.i4, label %121, label %119, !dbg !46

119:                                              ; preds = %__nv_rsqrtf.exit
  %120 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %111), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

121:                                              ; preds = %__nv_rsqrtf.exit
  %122 = tail call float @llvm.nvvm.rsqrt.approx.f(float %111), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

__nv_rsqrtf.exit6:                                ; preds = %119, %121
  %.0.i5 = phi float [ %120, %119 ], [ %122, %121 ], !dbg !46
  %123 = extractvalue { i32, i32 } %55, 1, !dbg !27
  %124 = bitcast i32 %123 to float, !dbg !27
  %125 = bitcast i32 %58 to float, !dbg !29
  %126 = fsub float %124, %125, !dbg !54
  %127 = bitcast i32 %61 to float, !dbg !31
  %128 = fmul float %126, %127, !dbg !55
  %129 = fmul float %128, %107, !dbg !56
  %130 = extractvalue { i32, i32 } %55, 0, !dbg !27
  %131 = bitcast i32 %130 to float, !dbg !27
  %132 = fsub float %131, %125, !dbg !54
  %133 = fmul float %132, %127, !dbg !55
  %134 = fmul float %133, %107, !dbg !56
  %135 = bitcast i32 %32 to float, !dbg !17
  %136 = bitcast i32 %40 to float, !dbg !19
  %137 = fadd float %135, %136, !dbg !32
  %138 = fmul float %84, %.0.i5, !dbg !57
  %139 = fmul float %85, %.0.i5, !dbg !57
  %140 = fadd float %134, %138, !dbg !58
  %141 = fadd float %129, %139, !dbg !58
  %142 = fcmp olt float %140, 0.000000e+00, !dbg !59
  %143 = fcmp olt float %141, 0.000000e+00, !dbg !59
  %144 = select i1 %142, float 0.000000e+00, float %140, !dbg !63
  %145 = select i1 %143, float 0.000000e+00, float %141, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %146 = and i32 %15, 56, !dbg !65
  %147 = icmp eq i32 %146, 0, !dbg !65
  %148 = bitcast float %137 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %28, i1 %147) #5, !dbg !65
  %149 = bitcast float %63 to i32, !dbg !66
  %150 = bitcast float %64 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %149, i32 %150, ptr addrspace(1) %44, i1 true) #5, !dbg !66
  %151 = getelementptr float, ptr addrspace(1) %8, i64 %43, !dbg !67
  %152 = bitcast float %144 to i32, !dbg !68
  %153 = bitcast float %145 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %152, i32 %153, ptr addrspace(1) %151, i1 true) #5, !dbg !68
  %154 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !69
  %155 = bitcast float %.0.i to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %154, i1 %147) #5, !dbg !70
  %156 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !71
  %157 = bitcast float %82 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %156, i1 %147) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py", directory: "inductor_cache/gw")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 42, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 47, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 44, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 43, column: 25, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !44)
!44 = !DILocation(line: 50, column: 26, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !44)
!46 = !DILocation(line: 60, column: 28, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !37, inlinedAt: !48)
!48 = !DILocation(line: 53, column: 23, scope: !7)
!49 = !DILocation(line: 47, column: 29, scope: !37, inlinedAt: !48)
!50 = !DILocation(line: 47, column: 20, scope: !37, inlinedAt: !48)
!51 = !DILocation(line: 47, column: 16, scope: !37, inlinedAt: !48)
!52 = !DILocation(line: 57, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 51, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 64, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 65, column: 4, scope: !7)
!65 = !DILocation(line: 66, column: 39, scope: !7)
!66 = !DILocation(line: 67, column: 47, scope: !7)
!67 = !DILocation(line: 68, column: 25, scope: !7)
!68 = !DILocation(line: 68, column: 45, scope: !7)
!69 = !DILocation(line: 69, column: 25, scope: !7)
!70 = !DILocation(line: 69, column: 37, scope: !7)
!71 = !DILocation(line: 70, column: 25, scope: !7)
!72 = !DILocation(line: 70, column: 37, scope: !7)
!73 = !DILocation(line: 70, column: 4, scope: !7)
