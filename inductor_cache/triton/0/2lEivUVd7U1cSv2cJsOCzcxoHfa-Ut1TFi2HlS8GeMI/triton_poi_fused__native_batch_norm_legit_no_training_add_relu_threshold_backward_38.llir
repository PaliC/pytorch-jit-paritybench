; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 5632, !dbg !14
  %21 = srem i32 %19, 88, !dbg !15
  %22 = sext i32 %19 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %20) #3, !dbg !17
  %25 = sext i32 %21 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %20) #3, !dbg !21
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %32 = bitcast i32 %30 to float, !dbg !21
  %33 = bitcast i32 %31 to float, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !22
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !24
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %20) #3, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !26
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #3, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !28
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #3, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !30
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %20) #3, !dbg !31
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !31
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !31
  %46 = bitcast i32 %44 to float, !dbg !31
  %47 = bitcast i32 %45 to float, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !32
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %20) #3, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !34
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %20) #3, !dbg !35
  %52 = fadd float %32, 0x3F50624DE0000000, !dbg !36
  %53 = fadd float %33, 0x3F50624DE0000000, !dbg !36
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %54, 0, !dbg !37
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %55, 0, !dbg !37
  br i1 %.not.i, label %61, label %56, !dbg !37

56:                                               ; preds = %13
  br i1 %.not1.i, label %59, label %57, !dbg !37

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

61:                                               ; preds = %13
  br i1 %.not1.i, label %64, label %62, !dbg !37

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !37
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %66, 0, !dbg !37
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !37
  br i1 %.not.i1, label %73, label %68, !dbg !37

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !37

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !37

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !37
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %80 = fadd float %46, 0x3F50624DE0000000, !dbg !39
  %81 = fadd float %47, 0x3F50624DE0000000, !dbg !39
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %82, 0, !dbg !40
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %83, 0, !dbg !40
  br i1 %.not.i6, label %89, label %84, !dbg !40

84:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %87, label %85, !dbg !40

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !40

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %85, %87, %90, %92
  %.0.i8 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !40
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %94, 0, !dbg !40
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i14 = icmp eq i32 %95, 0, !dbg !40
  br i1 %.not.i11, label %101, label %96, !dbg !40

96:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %99, label %97, !dbg !40

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !40

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %97, %99, %102, %104
  %.0.i13 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !40
  %106 = extractvalue { i32, i32 } %39, 1, !dbg !27
  %107 = extractvalue { i32, i32 } %41, 1, !dbg !29
  %108 = extractvalue { i32, i32 } %39, 0, !dbg !27
  %109 = extractvalue { i32, i32 } %41, 0, !dbg !29
  %110 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %111 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %112 = extractvalue { i32, i32 } %35, 1, !dbg !23
  %113 = extractvalue { i32, i32 } %37, 1, !dbg !25
  %114 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %115 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %116 = extractvalue { i32, i32 } %35, 0, !dbg !23
  %117 = extractvalue { i32, i32 } %37, 0, !dbg !25
  %118 = extractvalue { i32, i32 } %51, 1, !dbg !35
  %119 = extractvalue { i32, i32 } %51, 0, !dbg !35
  %120 = extractvalue { i32, i32 } %49, 1, !dbg !33
  %121 = extractvalue { i32, i32 } %49, 0, !dbg !33
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %124 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !17
  %125 = insertelement <2 x i32> %124, i32 %108, i64 1, !dbg !17
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !17
  %127 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !19
  %128 = insertelement <2 x i32> %127, i32 %109, i64 1, !dbg !19
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !19
  %130 = fsub <2 x float> %126, %129, !dbg !42
  %131 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !25
  %132 = insertelement <2 x i32> %131, i32 %119, i64 1, !dbg !25
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !25
  %134 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !23
  %135 = insertelement <2 x i32> %134, i32 %121, i64 1, !dbg !23
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !23
  %137 = insertelement <2 x float> poison, float %78, i64 0, !dbg !43
  %138 = insertelement <2 x float> %137, float %122, i64 1, !dbg !43
  %139 = fmul <2 x float> %130, %138, !dbg !43
  %140 = fmul <2 x float> %139, %136, !dbg !44
  %141 = fadd <2 x float> %140, %133, !dbg !45
  %142 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !17
  %143 = insertelement <2 x i32> %142, i32 %106, i64 1, !dbg !17
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !17
  %145 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !19
  %146 = insertelement <2 x i32> %145, i32 %107, i64 1, !dbg !19
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !19
  %148 = fsub <2 x float> %144, %147, !dbg !42
  %149 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !25
  %150 = insertelement <2 x i32> %149, i32 %118, i64 1, !dbg !25
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !25
  %152 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !23
  %153 = insertelement <2 x i32> %152, i32 %120, i64 1, !dbg !23
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !23
  %155 = insertelement <2 x float> poison, float %79, i64 0, !dbg !43
  %156 = insertelement <2 x float> %155, float %123, i64 1, !dbg !43
  %157 = fmul <2 x float> %148, %156, !dbg !43
  %158 = fmul <2 x float> %157, %154, !dbg !44
  %159 = fadd <2 x float> %158, %151, !dbg !45
  %160 = getelementptr float, ptr addrspace(1) %10, i64 %22, !dbg !46
  %161 = getelementptr i1, ptr addrspace(1) %11, i64 %22, !dbg !47
  %162 = shufflevector <2 x float> %141, <2 x float> %159, <2 x i32> <i32 0, i32 2>, !dbg !48
  %163 = shufflevector <2 x float> %141, <2 x float> %159, <2 x i32> <i32 1, i32 3>, !dbg !48
  %164 = fadd <2 x float> %162, %163, !dbg !48
  %165 = fcmp olt <2 x float> %164, zeroinitializer, !dbg !49
  %166 = select <2 x i1> %165, <2 x float> zeroinitializer, <2 x float> %164, !dbg !53
  %167 = fcmp ole <2 x float> %166, zeroinitializer, !dbg !54
  %bc = bitcast <2 x float> %164 to <2 x i32>, !dbg !55
  %168 = extractelement <2 x i32> %bc, i64 0, !dbg !55
  %bc16 = bitcast <2 x float> %164 to <2 x i32>, !dbg !55
  %169 = extractelement <2 x i32> %bc16, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %168, i32 %169, ptr addrspace(1) %160, i1 %20) #3, !dbg !55
  %170 = zext <2 x i1> %167 to <2 x i8>, !dbg !56
  %171 = bitcast <2 x i8> %170 to i16, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %171, ptr addrspace(1) %161, i1 %20) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chsz3sgze4gdq2pe5bsgbtv2xs2gdigwgr6cd3vnkfnij25pa7mf.py", directory: "inductor_cache/hs")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_38", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 26, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 27, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 60, column: 25, scope: !7)
!47 = !DILocation(line: 61, column: 25, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 57, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 59, column: 21, scope: !7)
!55 = !DILocation(line: 60, column: 37, scope: !7)
!56 = !DILocation(line: 61, column: 37, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
