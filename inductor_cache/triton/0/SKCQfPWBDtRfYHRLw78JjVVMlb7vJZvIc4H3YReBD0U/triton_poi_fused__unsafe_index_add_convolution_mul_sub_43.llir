; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 2, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %21 = sdiv i32 %.frozen, 64, !dbg !14
  %22 = srem i32 %21, 64, !dbg !15
  %23 = mul i32 %21, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = srem i32 %20, 64, !dbg !16
  %25 = sdiv i32 %19, 4096, !dbg !17
  %26 = srem i32 %25, 4, !dbg !18
  %27 = sext i32 %22 to i64, !dbg !19
  %28 = getelementptr i64, ptr addrspace(1) %2, i64 %27, !dbg !19
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %33 = sext i32 %.decomposed to i64, !dbg !21
  %34 = getelementptr i64, ptr addrspace(1) %3, i64 %33, !dbg !21
  %35 = sext i32 %24 to i64, !dbg !21
  %36 = getelementptr i64, ptr addrspace(1) %3, i64 %35, !dbg !21
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !22
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !22
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !22
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !22
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !22
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !22
  %43 = sext i32 %26 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !24
  %49 = getelementptr i64, ptr addrspace(1) %6, i64 %33, !dbg !25
  %50 = getelementptr i64, ptr addrspace(1) %6, i64 %35, !dbg !25
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !26
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !26
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !26
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !26
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !26
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !26
  %57 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !27
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !28
  %63 = getelementptr i64, ptr addrspace(1) %8, i64 %27, !dbg !29
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !30
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !30
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !30
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !32
  %70 = bitcast i32 %69 to float, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !32
  %72 = bitcast i32 %71 to float, !dbg !32
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !32
  %74 = bitcast i32 %73 to float, !dbg !32
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !32
  %76 = bitcast i32 %75 to float, !dbg !32
  %77 = getelementptr float, ptr addrspace(1) %11, i64 %43, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !34
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !34
  %82 = lshr i64 %29, 60, !dbg !35
  %83 = and i64 %82, 8, !dbg !35
  %84 = add i64 %83, %29, !dbg !35
  %85 = lshr i64 %38, 60, !dbg !36
  %86 = and i64 %85, 8, !dbg !36
  %87 = add i64 %86, %38, !dbg !36
  %88 = lshr i64 %39, 60, !dbg !36
  %89 = and i64 %88, 8, !dbg !36
  %90 = add i64 %89, %39, !dbg !36
  %91 = lshr i64 %41, 60, !dbg !36
  %92 = and i64 %91, 8, !dbg !36
  %93 = add i64 %92, %41, !dbg !36
  %94 = lshr i64 %42, 60, !dbg !36
  %95 = and i64 %94, 8, !dbg !36
  %96 = add i64 %95, %42, !dbg !36
  %97 = shl i64 %84, 3, !dbg !37
  %98 = shl nsw i32 %25, 6, !dbg !38
  %99 = sext i32 %98 to i64, !dbg !39
  %100 = add i64 %97, %99, !dbg !40
  %101 = add i64 %100, %87, !dbg !39
  %102 = add i64 %100, %90, !dbg !39
  %103 = add i64 %100, %93, !dbg !39
  %104 = add i64 %100, %96, !dbg !39
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !41
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %102, !dbg !41
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %103, !dbg !41
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %104, !dbg !41
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !42
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !42
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !42
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !42
  %113 = lshr i64 %52, 60, !dbg !43
  %114 = and i64 %113, 8, !dbg !43
  %115 = add i64 %114, %52, !dbg !43
  %116 = lshr i64 %53, 60, !dbg !43
  %117 = and i64 %116, 8, !dbg !43
  %118 = add i64 %117, %53, !dbg !43
  %119 = lshr i64 %55, 60, !dbg !43
  %120 = and i64 %119, 8, !dbg !43
  %121 = add i64 %120, %55, !dbg !43
  %122 = lshr i64 %56, 60, !dbg !43
  %123 = and i64 %122, 8, !dbg !43
  %124 = add i64 %123, %56, !dbg !43
  %125 = add i64 %100, %115, !dbg !44
  %126 = add i64 %100, %118, !dbg !44
  %127 = add i64 %100, %121, !dbg !44
  %128 = add i64 %100, %124, !dbg !44
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %125, !dbg !45
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %126, !dbg !45
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %127, !dbg !45
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %128, !dbg !45
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !46
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !46
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #1, !dbg !46
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !46
  %137 = lshr i64 %64, 60, !dbg !47
  %138 = and i64 %137, 8, !dbg !47
  %139 = add i64 %138, %64, !dbg !47
  %140 = shl i64 %139, 3, !dbg !48
  %141 = add i64 %140, %99, !dbg !49
  %142 = add i64 %141, %87, !dbg !50
  %143 = add i64 %141, %90, !dbg !50
  %144 = add i64 %141, %93, !dbg !50
  %145 = add i64 %141, %96, !dbg !50
  %146 = getelementptr float, ptr addrspace(1) %4, i64 %142, !dbg !51
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %143, !dbg !51
  %148 = getelementptr float, ptr addrspace(1) %4, i64 %144, !dbg !51
  %149 = getelementptr float, ptr addrspace(1) %4, i64 %145, !dbg !51
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !52
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !52
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !52
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #1, !dbg !52
  %154 = add i64 %141, %115, !dbg !53
  %155 = add i64 %141, %118, !dbg !53
  %156 = add i64 %141, %121, !dbg !53
  %157 = add i64 %141, %124, !dbg !53
  %158 = getelementptr float, ptr addrspace(1) %4, i64 %154, !dbg !54
  %159 = getelementptr float, ptr addrspace(1) %4, i64 %155, !dbg !54
  %160 = getelementptr float, ptr addrspace(1) %4, i64 %156, !dbg !54
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %157, !dbg !54
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !55
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #1, !dbg !55
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #1, !dbg !55
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #1, !dbg !55
  %166 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !52
  %167 = insertelement <2 x i32> %166, i32 %109, i64 1, !dbg !52
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !52
  %169 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !56
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !56
  %171 = shufflevector <2 x float> %170, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %172 = fadd <2 x float> %171, %168, !dbg !56
  %173 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !55
  %174 = insertelement <2 x i32> %173, i32 %133, i64 1, !dbg !55
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !55
  %176 = fadd <2 x float> %171, %175, !dbg !57
  %177 = fsub <2 x float> %176, %172, !dbg !58
  %178 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !59
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !59
  %180 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %181 = fmul <2 x float> %177, %180, !dbg !59
  %182 = fadd <2 x float> %172, %181, !dbg !60
  %183 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !52
  %184 = insertelement <2 x i32> %183, i32 %110, i64 1, !dbg !52
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !52
  %186 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !56
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !56
  %188 = shufflevector <2 x float> %187, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %189 = fadd <2 x float> %188, %185, !dbg !56
  %190 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !55
  %191 = insertelement <2 x i32> %190, i32 %134, i64 1, !dbg !55
  %192 = bitcast <2 x i32> %191 to <2 x float>, !dbg !55
  %193 = fadd <2 x float> %188, %192, !dbg !57
  %194 = fsub <2 x float> %193, %189, !dbg !58
  %195 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !59
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !59
  %197 = shufflevector <2 x float> %196, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %198 = fmul <2 x float> %194, %197, !dbg !59
  %199 = fadd <2 x float> %189, %198, !dbg !60
  %200 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !52
  %201 = insertelement <2 x i32> %200, i32 %111, i64 1, !dbg !52
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !52
  %203 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !56
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !56
  %205 = shufflevector <2 x float> %204, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %206 = fadd <2 x float> %205, %202, !dbg !56
  %207 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !55
  %208 = insertelement <2 x i32> %207, i32 %135, i64 1, !dbg !55
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !55
  %210 = fadd <2 x float> %205, %209, !dbg !57
  %211 = fsub <2 x float> %210, %206, !dbg !58
  %212 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !59
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !59
  %214 = shufflevector <2 x float> %213, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %215 = fmul <2 x float> %211, %214, !dbg !59
  %216 = fadd <2 x float> %206, %215, !dbg !60
  %217 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !52
  %218 = insertelement <2 x i32> %217, i32 %112, i64 1, !dbg !52
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !52
  %220 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !56
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !56
  %222 = shufflevector <2 x float> %221, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %223 = fadd <2 x float> %222, %219, !dbg !56
  %224 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !55
  %225 = insertelement <2 x i32> %224, i32 %136, i64 1, !dbg !55
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !55
  %227 = fadd <2 x float> %222, %226, !dbg !57
  %228 = fsub <2 x float> %227, %223, !dbg !58
  %229 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !59
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !59
  %231 = shufflevector <2 x float> %230, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %232 = fmul <2 x float> %228, %231, !dbg !59
  %233 = fadd <2 x float> %223, %232, !dbg !60
  %234 = extractelement <2 x float> %182, i64 0, !dbg !61
  %235 = extractelement <2 x float> %182, i64 1, !dbg !62
  %236 = fsub float %234, %235, !dbg !61
  %237 = extractelement <2 x float> %199, i64 0, !dbg !61
  %238 = extractelement <2 x float> %199, i64 1, !dbg !62
  %239 = fsub float %237, %238, !dbg !61
  %240 = extractelement <2 x float> %216, i64 0, !dbg !61
  %241 = extractelement <2 x float> %216, i64 1, !dbg !62
  %242 = fsub float %240, %241, !dbg !61
  %243 = extractelement <2 x float> %233, i64 0, !dbg !61
  %244 = extractelement <2 x float> %233, i64 1, !dbg !62
  %245 = fsub float %243, %244, !dbg !61
  %246 = fmul float %236, %70, !dbg !63
  %247 = fmul float %239, %72, !dbg !63
  %248 = fmul float %242, %74, !dbg !63
  %249 = fmul float %245, %76, !dbg !63
  %250 = fadd float %235, %246, !dbg !62
  %251 = fadd float %238, %247, !dbg !62
  %252 = fadd float %241, %248, !dbg !62
  %253 = fadd float %244, %249, !dbg !62
  %254 = getelementptr float, ptr addrspace(1) %10, i64 %101, !dbg !64
  %255 = getelementptr float, ptr addrspace(1) %10, i64 %102, !dbg !64
  %256 = getelementptr float, ptr addrspace(1) %10, i64 %103, !dbg !64
  %257 = getelementptr float, ptr addrspace(1) %10, i64 %104, !dbg !64
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !65
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 true) #1, !dbg !65
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #1, !dbg !65
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #1, !dbg !65
  %262 = getelementptr float, ptr addrspace(1) %10, i64 %125, !dbg !66
  %263 = getelementptr float, ptr addrspace(1) %10, i64 %126, !dbg !66
  %264 = getelementptr float, ptr addrspace(1) %10, i64 %127, !dbg !66
  %265 = getelementptr float, ptr addrspace(1) %10, i64 %128, !dbg !66
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #1, !dbg !67
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 true) #1, !dbg !67
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #1, !dbg !67
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 true) #1, !dbg !67
  %270 = getelementptr float, ptr addrspace(1) %10, i64 %142, !dbg !68
  %271 = getelementptr float, ptr addrspace(1) %10, i64 %143, !dbg !68
  %272 = getelementptr float, ptr addrspace(1) %10, i64 %144, !dbg !68
  %273 = getelementptr float, ptr addrspace(1) %10, i64 %145, !dbg !68
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !69
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 true) #1, !dbg !69
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !69
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #1, !dbg !69
  %278 = getelementptr float, ptr addrspace(1) %10, i64 %154, !dbg !70
  %279 = getelementptr float, ptr addrspace(1) %10, i64 %155, !dbg !70
  %280 = getelementptr float, ptr addrspace(1) %10, i64 %156, !dbg !70
  %281 = getelementptr float, ptr addrspace(1) %10, i64 %157, !dbg !70
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !71
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 true) #1, !dbg !71
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #1, !dbg !71
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 true) #1, !dbg !71
  %286 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !69
  %287 = insertelement <2 x i32> %286, i32 %258, i64 1, !dbg !69
  %288 = bitcast <2 x i32> %287 to <2 x float>, !dbg !69
  %289 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !72
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !72
  %291 = shufflevector <2 x float> %290, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %292 = fadd <2 x float> %291, %288, !dbg !72
  %293 = insertelement <2 x i32> poison, i32 %282, i64 0, !dbg !71
  %294 = insertelement <2 x i32> %293, i32 %266, i64 1, !dbg !71
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !71
  %296 = fadd <2 x float> %291, %295, !dbg !73
  %297 = fsub <2 x float> %296, %292, !dbg !74
  %298 = fmul <2 x float> %297, %180, !dbg !75
  %299 = fadd <2 x float> %292, %298, !dbg !76
  %300 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !69
  %301 = insertelement <2 x i32> %300, i32 %259, i64 1, !dbg !69
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !69
  %303 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !72
  %304 = bitcast <2 x i32> %303 to <2 x float>, !dbg !72
  %305 = shufflevector <2 x float> %304, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %306 = fadd <2 x float> %305, %302, !dbg !72
  %307 = insertelement <2 x i32> poison, i32 %283, i64 0, !dbg !71
  %308 = insertelement <2 x i32> %307, i32 %267, i64 1, !dbg !71
  %309 = bitcast <2 x i32> %308 to <2 x float>, !dbg !71
  %310 = fadd <2 x float> %305, %309, !dbg !73
  %311 = fsub <2 x float> %310, %306, !dbg !74
  %312 = fmul <2 x float> %311, %197, !dbg !75
  %313 = fadd <2 x float> %306, %312, !dbg !76
  %314 = insertelement <2 x i32> poison, i32 %276, i64 0, !dbg !69
  %315 = insertelement <2 x i32> %314, i32 %260, i64 1, !dbg !69
  %316 = bitcast <2 x i32> %315 to <2 x float>, !dbg !69
  %317 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !72
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !72
  %319 = shufflevector <2 x float> %318, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %320 = fadd <2 x float> %319, %316, !dbg !72
  %321 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !71
  %322 = insertelement <2 x i32> %321, i32 %268, i64 1, !dbg !71
  %323 = bitcast <2 x i32> %322 to <2 x float>, !dbg !71
  %324 = fadd <2 x float> %319, %323, !dbg !73
  %325 = fsub <2 x float> %324, %320, !dbg !74
  %326 = fmul <2 x float> %325, %214, !dbg !75
  %327 = fadd <2 x float> %320, %326, !dbg !76
  %328 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !69
  %329 = insertelement <2 x i32> %328, i32 %261, i64 1, !dbg !69
  %330 = bitcast <2 x i32> %329 to <2 x float>, !dbg !69
  %331 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !72
  %332 = bitcast <2 x i32> %331 to <2 x float>, !dbg !72
  %333 = shufflevector <2 x float> %332, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %334 = fadd <2 x float> %333, %330, !dbg !72
  %335 = insertelement <2 x i32> poison, i32 %285, i64 0, !dbg !71
  %336 = insertelement <2 x i32> %335, i32 %269, i64 1, !dbg !71
  %337 = bitcast <2 x i32> %336 to <2 x float>, !dbg !71
  %338 = fadd <2 x float> %333, %337, !dbg !73
  %339 = fsub <2 x float> %338, %334, !dbg !74
  %340 = fmul <2 x float> %339, %231, !dbg !75
  %341 = fadd <2 x float> %334, %340, !dbg !76
  %342 = extractelement <2 x float> %299, i64 0, !dbg !77
  %343 = extractelement <2 x float> %299, i64 1, !dbg !78
  %344 = fsub float %342, %343, !dbg !77
  %345 = extractelement <2 x float> %313, i64 0, !dbg !77
  %346 = extractelement <2 x float> %313, i64 1, !dbg !78
  %347 = fsub float %345, %346, !dbg !77
  %348 = extractelement <2 x float> %327, i64 0, !dbg !77
  %349 = extractelement <2 x float> %327, i64 1, !dbg !78
  %350 = fsub float %348, %349, !dbg !77
  %351 = extractelement <2 x float> %341, i64 0, !dbg !77
  %352 = extractelement <2 x float> %341, i64 1, !dbg !78
  %353 = fsub float %351, %352, !dbg !77
  %354 = fmul float %344, %70, !dbg !79
  %355 = fmul float %347, %72, !dbg !79
  %356 = fmul float %350, %74, !dbg !79
  %357 = fmul float %353, %76, !dbg !79
  %358 = fadd float %343, %354, !dbg !78
  %359 = fadd float %346, %355, !dbg !78
  %360 = fadd float %349, %356, !dbg !78
  %361 = fadd float %352, %357, !dbg !78
  %362 = sext i32 %19 to i64, !dbg !80
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !80
  %364 = bitcast float %250 to i32, !dbg !81
  %365 = bitcast float %251 to i32, !dbg !81
  %366 = bitcast float %252 to i32, !dbg !81
  %367 = bitcast float %253 to i32, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %365, i32 %366, i32 %367, ptr addrspace(1) %363, i1 true) #1, !dbg !81
  %368 = getelementptr float, ptr addrspace(1) %1, i64 %362, !dbg !82
  %369 = bitcast float %358 to i32, !dbg !83
  %370 = bitcast float %359 to i32, !dbg !83
  %371 = bitcast float %360 to i32, !dbg !83
  %372 = bitcast float %361 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %369, i32 %370, i32 %371, i32 %372, ptr addrspace(1) %368, i1 true) #1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvmxpuxomvumb77yoyudc36zg56pgzwryg4ddwqr6reuhoh65dzh.py", directory: "inductor_cache/vm")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_43, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_43, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_43", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 32, scope: !7)
!36 = !DILocation(line: 43, column: 32, scope: !7)
!37 = !DILocation(line: 44, column: 39, scope: !7)
!38 = !DILocation(line: 44, column: 49, scope: !7)
!39 = !DILocation(line: 44, column: 46, scope: !7)
!40 = !DILocation(line: 44, column: 37, scope: !7)
!41 = !DILocation(line: 44, column: 30, scope: !7)
!42 = !DILocation(line: 44, column: 54, scope: !7)
!43 = !DILocation(line: 48, column: 35, scope: !7)
!44 = !DILocation(line: 49, column: 48, scope: !7)
!45 = !DILocation(line: 49, column: 31, scope: !7)
!46 = !DILocation(line: 49, column: 56, scope: !7)
!47 = !DILocation(line: 56, column: 35, scope: !7)
!48 = !DILocation(line: 57, column: 40, scope: !7)
!49 = !DILocation(line: 57, column: 38, scope: !7)
!50 = !DILocation(line: 57, column: 48, scope: !7)
!51 = !DILocation(line: 57, column: 31, scope: !7)
!52 = !DILocation(line: 57, column: 56, scope: !7)
!53 = !DILocation(line: 59, column: 49, scope: !7)
!54 = !DILocation(line: 59, column: 31, scope: !7)
!55 = !DILocation(line: 59, column: 57, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 66, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 31, scope: !7)
!65 = !DILocation(line: 67, column: 55, scope: !7)
!66 = !DILocation(line: 69, column: 31, scope: !7)
!67 = !DILocation(line: 69, column: 56, scope: !7)
!68 = !DILocation(line: 74, column: 31, scope: !7)
!69 = !DILocation(line: 74, column: 56, scope: !7)
!70 = !DILocation(line: 76, column: 31, scope: !7)
!71 = !DILocation(line: 76, column: 57, scope: !7)
!72 = !DILocation(line: 75, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 78, column: 20, scope: !7)
!75 = !DILocation(line: 79, column: 20, scope: !7)
!76 = !DILocation(line: 80, column: 20, scope: !7)
!77 = !DILocation(line: 81, column: 20, scope: !7)
!78 = !DILocation(line: 83, column: 20, scope: !7)
!79 = !DILocation(line: 82, column: 20, scope: !7)
!80 = !DILocation(line: 84, column: 28, scope: !7)
!81 = !DILocation(line: 84, column: 40, scope: !7)
!82 = !DILocation(line: 85, column: 28, scope: !7)
!83 = !DILocation(line: 85, column: 40, scope: !7)
!84 = !DILocation(line: 85, column: 4, scope: !7)
