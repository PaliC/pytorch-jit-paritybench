; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_view_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %12, !dbg !16
  %20 = or disjoint i32 %18, %13, !dbg !16
  %21 = or disjoint i32 %18, %10, !dbg !16
  %22 = icmp slt i32 %19, 36, !dbg !17
  %23 = icmp slt i32 %20, 36, !dbg !17
  %24 = icmp slt i32 %21, 36, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %25 = sdiv i32 %.frozen, 4096, !dbg !18
  %26 = mul i32 %25, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %19, 12, !dbg !20
  %28 = shl i32 %20, 12, !dbg !20
  %29 = mul i32 %25, 147456, !dbg !21
  %30 = add i32 %29, %.decomposed, !dbg !22
  %31 = add i32 %30, %27, !dbg !23
  %32 = add i32 %30, %28, !dbg !23
  %33 = sext i32 %31 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !24
  %35 = sext i32 %32 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #2, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %42 = bitcast i32 %38 to float, !dbg !25
  %43 = bitcast i32 %39 to float, !dbg !25
  %44 = bitcast i32 %40 to float, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %23) #2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = bitcast i32 %48 to float, !dbg !25
  %53 = bitcast i32 %49 to float, !dbg !25
  %54 = bitcast i32 %50 to float, !dbg !25
  %55 = sext i32 %19 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !26
  %57 = sext i32 %20 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %22) #2, !dbg !27
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %22) #2, !dbg !27
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %22) #2, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %22) #2, !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %23) #2, !dbg !27
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %23) #2, !dbg !27
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %23) #2, !dbg !27
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %23) #2, !dbg !27
  %68 = bitcast i32 %67 to float, !dbg !27
  %69 = fadd float %42, %63, !dbg !28
  %70 = fadd float %43, %63, !dbg !28
  %71 = fadd float %44, %63, !dbg !28
  %72 = fadd float %45, %63, !dbg !28
  %73 = fadd float %51, %68, !dbg !28
  %74 = fadd float %52, %68, !dbg !28
  %75 = fadd float %53, %68, !dbg !28
  %76 = fadd float %54, %68, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %77 = mul i32 %15, 36, !dbg !30
  %78 = mul i32 %16, 36, !dbg !30
  %79 = add i32 %21, %77, !dbg !31
  %80 = add i32 %21, %78, !dbg !31
  %81 = sext i32 %79 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !32
  %83 = sext i32 %80 to i64, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !32
  %85 = shl i32 %8, 7, !dbg !33
  %86 = and i32 %85, 896, !dbg !33
  %87 = or disjoint i32 %86, %12, !dbg !33
  %88 = and i32 %9, 508, !dbg !33
  %89 = lshr exact i32 %86, 5, !dbg !33
  %90 = add nuw nsw i32 %89, %87, !dbg !33
  %91 = zext nneg i32 %90 to i64, !dbg !33
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %91, !dbg !33
  %93 = bitcast float %69 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !33
  %94 = or disjoint i32 %87, 32, !dbg !33
  %95 = lshr i32 %94, 5, !dbg !33
  %96 = add nuw nsw i32 %95, %94, !dbg !33
  %97 = zext nneg i32 %96 to i64, !dbg !33
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !33
  %99 = bitcast float %70 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !33
  %100 = or disjoint i32 %87, 64, !dbg !33
  %101 = lshr i32 %100, 5, !dbg !33
  %102 = add nuw nsw i32 %101, %100, !dbg !33
  %103 = zext nneg i32 %102 to i64, !dbg !33
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !33
  %105 = bitcast float %71 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !33
  %106 = or disjoint i32 %87, 96, !dbg !33
  %107 = lshr i32 %106, 5, !dbg !33
  %108 = add nuw nsw i32 %107, %106, !dbg !33
  %109 = zext nneg i32 %108 to i64, !dbg !33
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !33
  %111 = bitcast float %72 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !33
  %112 = or disjoint i32 %87, 16, !dbg !33
  %113 = add nuw nsw i32 %112, %89, !dbg !33
  %114 = zext nneg i32 %113 to i64, !dbg !33
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !33
  %116 = bitcast float %73 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !33
  %117 = or disjoint i32 %87, 48, !dbg !33
  %118 = lshr i32 %117, 5, !dbg !33
  %119 = add nuw nsw i32 %118, %117, !dbg !33
  %120 = zext nneg i32 %119 to i64, !dbg !33
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !33
  %122 = bitcast float %74 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !33
  %123 = or disjoint i32 %87, 80, !dbg !33
  %124 = lshr i32 %123, 5, !dbg !33
  %125 = add nuw nsw i32 %124, %123, !dbg !33
  %126 = zext nneg i32 %125 to i64, !dbg !33
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !33
  %128 = bitcast float %75 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !33
  %129 = or disjoint i32 %87, 112, !dbg !33
  %130 = lshr i32 %129, 5, !dbg !33
  %131 = add nuw nsw i32 %130, %129, !dbg !33
  %132 = zext nneg i32 %131 to i64, !dbg !33
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !33
  %134 = bitcast float %76 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %135 = lshr i32 %88, 5, !dbg !33
  %136 = add nuw nsw i32 %135, %88, !dbg !33
  %137 = zext nneg i32 %136 to i64, !dbg !33
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %137, !dbg !33
  %139 = load i32, ptr addrspace(3) %138, align 4, !dbg !33
  %140 = or disjoint i32 %88, 1, !dbg !33
  %141 = add nuw nsw i32 %140, %135, !dbg !33
  %142 = zext nneg i32 %141 to i64, !dbg !33
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %142, !dbg !33
  %144 = load i32, ptr addrspace(3) %143, align 4, !dbg !33
  %145 = or disjoint i32 %88, 2, !dbg !33
  %146 = add nuw nsw i32 %145, %135, !dbg !33
  %147 = zext nneg i32 %146 to i64, !dbg !33
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !33
  %149 = load i32, ptr addrspace(3) %148, align 4, !dbg !33
  %150 = or disjoint i32 %88, 3, !dbg !33
  %151 = add nuw nsw i32 %150, %135, !dbg !33
  %152 = zext nneg i32 %151 to i64, !dbg !33
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !33
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !33
  %155 = or disjoint i32 %88, 512, !dbg !33
  %156 = lshr i32 %155, 5, !dbg !33
  %157 = add nuw nsw i32 %156, %155, !dbg !33
  %158 = zext nneg i32 %157 to i64, !dbg !33
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !33
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !33
  %161 = or disjoint i32 %88, 513, !dbg !33
  %162 = lshr i32 %161, 5, !dbg !33
  %163 = add nuw nsw i32 %162, %161, !dbg !33
  %164 = zext nneg i32 %163 to i64, !dbg !33
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !33
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !33
  %167 = or disjoint i32 %88, 514, !dbg !33
  %168 = lshr i32 %167, 5, !dbg !33
  %169 = add nuw nsw i32 %168, %167, !dbg !33
  %170 = zext nneg i32 %169 to i64, !dbg !33
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %170, !dbg !33
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !33
  %173 = or disjoint i32 %88, 515, !dbg !33
  %174 = lshr i32 %173, 5, !dbg !33
  %175 = add nuw nsw i32 %174, %173, !dbg !33
  %176 = zext nneg i32 %175 to i64, !dbg !33
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %176, !dbg !33
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %139, i32 %144, i32 %149, i32 %154, ptr addrspace(1) %82, i1 %24) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %160, i32 %166, i32 %172, i32 %178, ptr addrspace(1) %84, i1 %24) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cagwpezg2bapxucni6m5e36vyrybkdozg7hvqzt72rdzovwu4nie.py", directory: "inductor_cache/ag")
!4 = !{ptr @triton_poi_fused_clone_view_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_view_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_view_0", linkageName: "triton_poi_fused_clone_view_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 4, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 33, scope: !7)
!32 = !DILocation(line: 36, column: 28, scope: !7)
!33 = !DILocation(line: 36, column: 47, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
