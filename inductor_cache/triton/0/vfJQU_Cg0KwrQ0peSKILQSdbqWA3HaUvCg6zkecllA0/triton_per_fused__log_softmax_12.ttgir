#blocked = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":19:0)
#loc1 = loc(unknown)
#loc22 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":38:37)
#loc32 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":43:25)
#loc47 = loc(callsite(#loc1 at #loc22))
#loc53 = loc(callsite(#loc1 at #loc32))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__log_softmax_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":19:0), %arg3: i32 loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<128x16xf32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<400> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<400> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<10> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<10> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<10> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<10> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<100> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<100> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<1000> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<128x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<128x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<128x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_1 : tensor<128x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_2 : tensor<128x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %14 = tt.expand_dims %12 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc7)
    %15 = tt.expand_dims %13 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc7)
    %16 = arith.cmpi slt, %14, %cst_3 : tensor<1x16xi32, #blocked> loc(#loc8)
    %17 = arith.cmpi slt, %15, %cst_4 : tensor<1x16xi32, #blocked1> loc(#loc8)
    %18 = arith.remsi %8, %cst_5 : tensor<128x1xi32, #blocked> loc(#loc9)
    %19 = arith.remsi %9, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc9)
    %20 = arith.divsi %8, %cst_5 : tensor<128x1xi32, #blocked> loc(#loc10)
    %21 = arith.divsi %9, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc10)
    %22 = arith.remsi %21, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc11)
    %23 = arith.divsi %9, %cst_8 : tensor<128x1xi32, #blocked1> loc(#loc12)
    %24 = arith.muli %14, %cst_3 : tensor<1x16xi32, #blocked> loc(#loc13)
    %25 = tt.broadcast %18 : tensor<128x1xi32, #blocked> -> tensor<128x16xi32, #blocked> loc(#loc14)
    %26 = tt.broadcast %24 : tensor<1x16xi32, #blocked> -> tensor<128x16xi32, #blocked> loc(#loc14)
    %27 = arith.addi %25, %26 : tensor<128x16xi32, #blocked> loc(#loc14)
    %28 = arith.muli %20, %cst_7 : tensor<128x1xi32, #blocked> loc(#loc15)
    %29 = tt.broadcast %28 : tensor<128x1xi32, #blocked> -> tensor<128x16xi32, #blocked> loc(#loc16)
    %30 = arith.addi %27, %29 : tensor<128x16xi32, #blocked> loc(#loc16)
    %31 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc17)
    %32 = tt.addptr %31, %30 : tensor<128x16x!tt.ptr<f32>, #blocked>, tensor<128x16xi32, #blocked> loc(#loc17)
    %33 = tt.broadcast %16 : tensor<1x16xi1, #blocked> -> tensor<128x16xi1, #blocked> loc(#loc18)
    %34 = tt.broadcast %17 : tensor<1x16xi1, #blocked1> -> tensor<128x16xi1, #blocked1> loc(#loc18)
    %35 = tt.broadcast %10 : tensor<128x1xi1, #blocked> -> tensor<128x16xi1, #blocked> loc(#loc18)
    %36 = tt.broadcast %11 : tensor<128x1xi1, #blocked1> -> tensor<128x16xi1, #blocked1> loc(#loc18)
    %37 = arith.andi %33, %35 : tensor<128x16xi1, #blocked> loc(#loc18)
    %38 = arith.andi %34, %36 : tensor<128x16xi1, #blocked1> loc(#loc18)
    %39 = tt.load %32, %37, %cst : tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc19)
    %40 = arith.select %37, %39, %cst_0 : tensor<128x16xi1, #blocked>, tensor<128x16xf32, #blocked> loc(#loc20)
    %41 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc22)), %arg5: f32 loc(callsite(#loc1 at #loc22))):
      %65 = arith.cmpf ogt, %arg4, %arg5 : f32 loc(#loc55)
      %66 = arith.cmpf une, %arg4, %arg4 : f32 loc(#loc56)
      %67 = arith.ori %65, %66 : i1 loc(#loc57)
      %68 = arith.select %67, %arg4, %arg5 : f32 loc(#loc58)
      tt.reduce.return %68 : f32 loc(#loc46)
    }) : (tensor<128x16xf32, #blocked>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xf32, #blocked> loc(#loc27)
    %43 = tt.broadcast %42 : tensor<128x1xf32, #blocked> -> tensor<128x16xf32, #blocked> loc(#loc28)
    %44 = arith.subf %39, %43 : tensor<128x16xf32, #blocked> loc(#loc28)
    %45 = math.exp %44 : tensor<128x16xf32, #blocked> loc(#loc29)
    %46 = arith.select %37, %45, %cst : tensor<128x16xi1, #blocked>, tensor<128x16xf32, #blocked> loc(#loc30)
    %47 = "tt.reduce"(%46) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc32)), %arg5: f32 loc(callsite(#loc1 at #loc32))):
      %65 = arith.addf %arg4, %arg5 : f32 loc(#loc59)
      tt.reduce.return %65 : f32 loc(#loc52)
    }) : (tensor<128x16xf32, #blocked>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc52)
    %48 = tt.expand_dims %47 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xf32, #blocked> loc(#loc34)
    %49 = math.log %48 : tensor<128x1xf32, #blocked> loc(#loc35)
    %50 = tt.broadcast %49 : tensor<128x1xf32, #blocked> -> tensor<128x16xf32, #blocked> loc(#loc36)
    %51 = arith.subf %44, %50 : tensor<128x16xf32, #blocked> loc(#loc36)
    %52 = arith.muli %22, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc37)
    %53 = tt.broadcast %15 : tensor<1x16xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc38)
    %54 = tt.broadcast %52 : tensor<128x1xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc38)
    %55 = arith.addi %53, %54 : tensor<128x16xi32, #blocked1> loc(#loc38)
    %56 = arith.muli %19, %cst_8 : tensor<128x1xi32, #blocked1> loc(#loc39)
    %57 = tt.broadcast %56 : tensor<128x1xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc40)
    %58 = arith.addi %55, %57 : tensor<128x16xi32, #blocked1> loc(#loc40)
    %59 = arith.muli %23, %cst_9 : tensor<128x1xi32, #blocked1> loc(#loc41)
    %60 = tt.broadcast %59 : tensor<128x1xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc42)
    %61 = arith.addi %58, %60 : tensor<128x16xi32, #blocked1> loc(#loc42)
    %62 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x16x!tt.ptr<f32>, #blocked1> loc(#loc43)
    %63 = tt.addptr %62, %61 : tensor<128x16x!tt.ptr<f32>, #blocked1>, tensor<128x16xi32, #blocked1> loc(#loc43)
    %64 = triton_gpu.convert_layout %51 : tensor<128x16xf32, #blocked> -> tensor<128x16xf32, #blocked1> loc(#loc44)
    tt.store %63, %64, %38 : tensor<128x16x!tt.ptr<f32>, #blocked1> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":23:28)
#loc3 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":23:33)
#loc4 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":24:44)
#loc5 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":24:23)
#loc6 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":25:21)
#loc7 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":26:34)
#loc8 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":28:21)
#loc9 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":30:19)
#loc10 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":31:19)
#loc11 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":33:27)
#loc12 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":34:19)
#loc13 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":35:38)
#loc14 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":35:35)
#loc15 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":35:47)
#loc16 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":35:43)
#loc17 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":35:30)
#loc18 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":35:60)
#loc19 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":35:52)
#loc20 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":37:41)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc27 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":38:40)
#loc28 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":39:18)
#loc29 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":40:23)
#loc30 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":42:41)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc34 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":43:28)
#loc35 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":44:24)
#loc36 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":45:19)
#loc37 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":46:33)
#loc38 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":46:30)
#loc39 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":46:42)
#loc40 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":46:38)
#loc41 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":46:52)
#loc42 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":46:47)
#loc43 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":46:25)
#loc44 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":46:64)
#loc45 = loc("inductor_cache/l5/cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py":46:4)
#loc46 = loc(callsite(#loc21 at #loc22))
#loc48 = loc(callsite(#loc23 at #loc21))
#loc49 = loc(callsite(#loc24 at #loc21))
#loc50 = loc(callsite(#loc25 at #loc21))
#loc51 = loc(callsite(#loc26 at #loc21))
#loc52 = loc(callsite(#loc31 at #loc32))
#loc54 = loc(callsite(#loc33 at #loc31))
#loc55 = loc(callsite(#loc48 at #loc22))
#loc56 = loc(callsite(#loc49 at #loc22))
#loc57 = loc(callsite(#loc50 at #loc22))
#loc58 = loc(callsite(#loc51 at #loc22))
#loc59 = loc(callsite(#loc54 at #loc32))
