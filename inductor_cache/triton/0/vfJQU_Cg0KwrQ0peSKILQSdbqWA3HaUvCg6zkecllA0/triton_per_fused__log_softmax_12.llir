; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__log_softmax_12(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 126, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 400, !dbg !14
  %12 = lshr i32 %7, 6, !dbg !15
  %13 = and i32 %12, 3, !dbg !15
  %14 = or disjoint i32 %13, 8, !dbg !15
  %15 = icmp samesign ult i32 %14, 10, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %16 = sdiv i32 %.frozen, 10, !dbg !17
  %17 = mul i32 %16, 10, !dbg !18
  %.decomposed = sub i32 %.frozen, %17, !dbg !18
  %18 = mul nuw nsw i32 %13, 10, !dbg !19
  %19 = mul nuw nsw i32 %14, 10, !dbg !19
  %20 = mul i32 %16, 100, !dbg !20
  %21 = add i32 %20, %.decomposed, !dbg !21
  %22 = add i32 %21, %18, !dbg !22
  %23 = add i32 %21, 40, !dbg !21
  %24 = add i32 %23, %18, !dbg !22
  %25 = add i32 %21, %19, !dbg !22
  %26 = add i32 %21, 120, !dbg !21
  %27 = add i32 %26, %18, !dbg !22
  %28 = sext i32 %22 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = sext i32 %24 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %25 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = sext i32 %27 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = and i1 %15, %11, !dbg !24
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #4, !dbg !25
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !25
  %40 = bitcast i32 %38 to float, !dbg !25
  %41 = bitcast i32 %39 to float, !dbg !25
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #4, !dbg !25
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !25
  %45 = bitcast i32 %43 to float, !dbg !25
  %46 = bitcast i32 %44 to float, !dbg !25
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #4, !dbg !25
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !25
  %50 = bitcast i32 %48 to float, !dbg !25
  %51 = bitcast i32 %49 to float, !dbg !25
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 false, i32 0, i1 false, i32 0, i1 false) #4, !dbg !25
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !25
  %55 = bitcast i32 %53 to float, !dbg !25
  %56 = bitcast i32 %54 to float, !dbg !25
  %57 = select i1 %11, float %40, float 0xFFF0000000000000, !dbg !26
  %58 = select i1 %11, float %41, float 0xFFF0000000000000, !dbg !26
  %59 = select i1 %11, float %45, float 0xFFF0000000000000, !dbg !26
  %60 = select i1 %11, float %46, float 0xFFF0000000000000, !dbg !26
  %61 = select i1 %36, float %50, float 0xFFF0000000000000, !dbg !26
  %62 = select i1 %36, float %51, float 0xFFF0000000000000, !dbg !26
  %63 = fcmp ogt float %57, %59, !dbg !27
  %64 = fcmp uno float %57, 0.000000e+00, !dbg !32
  %65 = or i1 %64, %63, !dbg !33
  %66 = select i1 %65, float %57, float %59, !dbg !34
  %67 = fcmp ogt float %58, %60, !dbg !27
  %68 = fcmp uno float %58, 0.000000e+00, !dbg !32
  %69 = or i1 %68, %67, !dbg !33
  %70 = select i1 %69, float %58, float %60, !dbg !34
  %71 = fcmp ogt float %66, %61, !dbg !27
  %72 = fcmp uno float %66, 0.000000e+00, !dbg !32
  %73 = or i1 %71, %72, !dbg !33
  %74 = select i1 %73, float %66, float %61, !dbg !34
  %75 = fcmp ogt float %70, %62, !dbg !27
  %76 = fcmp uno float %70, 0.000000e+00, !dbg !32
  %77 = or i1 %75, %76, !dbg !33
  %78 = select i1 %77, float %70, float %62, !dbg !34
  %79 = shl nuw nsw i32 %9, 2, !dbg !35
  %80 = or disjoint i32 %79, %13, !dbg !35
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !35
  %82 = bitcast float %74 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !35
  %83 = or disjoint i32 %79, 4, !dbg !35
  %84 = or disjoint i32 %83, %13, !dbg !35
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !35
  %86 = bitcast float %78 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %87 = icmp slt i32 %7, 512, !dbg !35
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !35
  %89 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %87) #4, !dbg !35
  %90 = bitcast i32 %89 to float, !dbg !35
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !35
  %92 = bitcast i32 %91 to float, !dbg !35
  %93 = fcmp ogt float %90, %92, !dbg !27
  %94 = fcmp uno float %90, 0.000000e+00, !dbg !32
  %95 = or i1 %94, %93, !dbg !33
  %96 = select i1 %95, float %90, float %92, !dbg !34
  %97 = bitcast float %96 to i32, !dbg !35
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !35
  %99 = bitcast i32 %98 to float, !dbg !35
  %100 = fcmp ogt float %96, %99, !dbg !27
  %101 = fcmp uno float %96, 0.000000e+00, !dbg !32
  %102 = or i1 %100, %101, !dbg !33
  %103 = and i32 %7, 3, !dbg !35
  %104 = icmp eq i32 %103, 0, !dbg !35
  %105 = and i1 %87, %104, !dbg !35
  %106 = select i1 %102, i32 %97, i32 %98, !dbg !34
  %107 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %107, i1 %105) #4, !dbg !35
  %108 = getelementptr i8, ptr addrspace(3) %88, i32 1024, !dbg !35
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %87) #4, !dbg !35
  %110 = bitcast i32 %109 to float, !dbg !35
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !35
  %112 = bitcast i32 %111 to float, !dbg !35
  %113 = fcmp ogt float %110, %112, !dbg !27
  %114 = fcmp uno float %110, 0.000000e+00, !dbg !32
  %115 = or i1 %114, %113, !dbg !33
  %116 = select i1 %115, float %110, float %112, !dbg !34
  %117 = bitcast float %116 to i32, !dbg !35
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !35
  %119 = bitcast i32 %118 to float, !dbg !35
  %120 = fcmp ogt float %116, %119, !dbg !27
  %121 = fcmp uno float %116, 0.000000e+00, !dbg !32
  %122 = or i1 %120, %121, !dbg !33
  %123 = select i1 %122, i32 %117, i32 %118, !dbg !34
  %124 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %124, i1 %105) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !35
  %126 = load float, ptr addrspace(3) %125, align 16, !dbg !35
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !35
  %128 = load float, ptr addrspace(3) %127, align 16, !dbg !35
  %129 = fsub float %40, %126, !dbg !36
  %130 = fsub float %41, %128, !dbg !36
  %131 = fsub float %45, %126, !dbg !36
  %132 = fsub float %46, %128, !dbg !36
  %133 = fsub float %50, %126, !dbg !36
  %134 = fsub float %51, %128, !dbg !36
  %135 = fsub float %55, %126, !dbg !36
  %136 = fsub float %56, %128, !dbg !36
  %137 = fmul float %129, 0x3FF7154760000000, !dbg !37
  %138 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %137) #4, !dbg !37
  %139 = fmul float %130, 0x3FF7154760000000, !dbg !37
  %140 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %139) #4, !dbg !37
  %141 = fmul float %131, 0x3FF7154760000000, !dbg !37
  %142 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %141) #4, !dbg !37
  %143 = fmul float %132, 0x3FF7154760000000, !dbg !37
  %144 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %143) #4, !dbg !37
  %145 = fmul float %133, 0x3FF7154760000000, !dbg !37
  %146 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %145) #4, !dbg !37
  %147 = fmul float %134, 0x3FF7154760000000, !dbg !37
  %148 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %147) #4, !dbg !37
  %149 = fmul float %135, 0x3FF7154760000000, !dbg !37
  %150 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %149) #4, !dbg !37
  %151 = fmul float %136, 0x3FF7154760000000, !dbg !37
  %152 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %151) #4, !dbg !37
  %153 = select i1 %36, float %146, float 0.000000e+00, !dbg !38
  %154 = select i1 %36, float %148, float 0.000000e+00, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %155 = fadd float %138, %142, !dbg !43
  %156 = select i1 %11, float %155, float 0.000000e+00, !dbg !43
  %157 = fadd float %140, %144, !dbg !43
  %158 = select i1 %11, float %157, float 0.000000e+00, !dbg !43
  %159 = fadd float %156, %153, !dbg !43
  %160 = fadd float %158, %154, !dbg !43
  %161 = fadd float %159, 0.000000e+00, !dbg !43
  %162 = fadd float %160, 0.000000e+00, !dbg !43
  %163 = bitcast float %161 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %163, i1 true) #4, !dbg !39
  %164 = bitcast float %162 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %164, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %165 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %87) #4, !dbg !39
  %166 = bitcast i32 %165 to float, !dbg !39
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !39
  %168 = bitcast i32 %167 to float, !dbg !39
  %169 = fadd float %166, %168, !dbg !43
  %170 = bitcast float %169 to i32, !dbg !39
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !39
  %172 = bitcast i32 %171 to float, !dbg !39
  %173 = fadd float %169, %172, !dbg !43
  %174 = bitcast float %173 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %174, i1 %105) #4, !dbg !39
  %175 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %87) #4, !dbg !39
  %176 = bitcast i32 %175 to float, !dbg !39
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !39
  %178 = bitcast i32 %177 to float, !dbg !39
  %179 = fadd float %176, %178, !dbg !43
  %180 = bitcast float %179 to i32, !dbg !39
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !39
  %182 = bitcast i32 %181 to float, !dbg !39
  %183 = fadd float %179, %182, !dbg !43
  %184 = bitcast float %183 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %184, i1 %105) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %185 = load float, ptr addrspace(3) %125, align 16, !dbg !39
  %186 = load float, ptr addrspace(3) %127, align 16, !dbg !39
  %187 = fcmp olt float %185, 0x3810000000000000, !dbg !45
  %188 = fmul float %185, 0x4160000000000000, !dbg !45
  %.02.i = select i1 %187, float %188, float %185, !dbg !45
  %i.i.0.i = select i1 %187, float -2.300000e+01, float 0.000000e+00, !dbg !45
  %189 = bitcast float %.02.i to i32, !dbg !45
  %190 = add i32 %189, -1059760811, !dbg !45
  %191 = and i32 %190, -8388608, !dbg !45
  %192 = sub i32 %189, %191, !dbg !45
  %193 = bitcast i32 %192 to float, !dbg !45
  %194 = sitofp i32 %191 to float, !dbg !45
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %195, 0, !dbg !45
  %196 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %194, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !45
  %197 = tail call float @llvm.nvvm.fma.rn.f(float %194, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !45
  %.08.i = select i1 %.not.i, float %197, float %196, !dbg !45
  %198 = fadd float %193, -1.000000e+00, !dbg !45
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not1.i = icmp eq i32 %199, 0, !dbg !45
  %200 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %198, float 0x3FC2073EC0000000) #4, !dbg !45
  %201 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %198, float 0x3FC2073EC0000000) #4, !dbg !45
  %.010.i = select i1 %.not1.i, float %201, float %200, !dbg !45
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not2.i = icmp eq i32 %202, 0, !dbg !45
  %203 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %198, float 0xBFBF19B980000000) #4, !dbg !45
  %204 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %198, float 0xBFBF19B980000000) #4, !dbg !45
  %.011.i = select i1 %.not2.i, float %204, float %203, !dbg !45
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not3.i = icmp eq i32 %205, 0, !dbg !45
  %206 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %198, float 0x3FC1E52AA0000000) #4, !dbg !45
  %207 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %198, float 0x3FC1E52AA0000000) #4, !dbg !45
  %.012.i = select i1 %.not3.i, float %207, float %206, !dbg !45
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not4.i = icmp eq i32 %208, 0, !dbg !45
  %209 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %198, float 0xBFC55B1720000000) #4, !dbg !45
  %210 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %198, float 0xBFC55B1720000000) #4, !dbg !45
  %.09.i = select i1 %.not4.i, float %210, float %209, !dbg !45
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not5.i = icmp eq i32 %211, 0, !dbg !45
  %212 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %198, float 0x3FC99DA160000000) #4, !dbg !45
  %213 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %198, float 0x3FC99DA160000000) #4, !dbg !45
  %.05.i = select i1 %.not5.i, float %213, float %212, !dbg !45
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not6.i = icmp eq i32 %214, 0, !dbg !45
  %215 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %198, float 0xBFCFFFE440000000) #4, !dbg !45
  %216 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %198, float 0xBFCFFFE440000000) #4, !dbg !45
  %.01.i = select i1 %.not6.i, float %216, float %215, !dbg !45
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not7.i = icmp eq i32 %217, 0, !dbg !45
  %218 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %198, float 0x3FD5554F00000000) #4, !dbg !45
  %219 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %198, float 0x3FD5554F00000000) #4, !dbg !45
  %.0.i = select i1 %.not7.i, float %219, float %218, !dbg !45
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not8.i = icmp eq i32 %220, 0, !dbg !45
  %221 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %198, float -5.000000e-01) #4, !dbg !45
  %222 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %198, float -5.000000e-01) #4, !dbg !45
  %.07.i = select i1 %.not8.i, float %222, float %221, !dbg !45
  %223 = fmul float %198, %.07.i, !dbg !45
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not9.i = icmp eq i32 %224, 0, !dbg !45
  %225 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %223, float %198, float %198) #4, !dbg !45
  %226 = tail call float @llvm.nvvm.fma.rn.f(float %223, float %198, float %198) #4, !dbg !45
  %.06.i = select i1 %.not9.i, float %226, float %225, !dbg !45
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not10.i = icmp eq i32 %227, 0, !dbg !45
  %228 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !45
  %229 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !45
  %.04.i = select i1 %.not10.i, float %229, float %228, !dbg !45
  %230 = icmp ugt i32 %189, 2139095039, !dbg !45
  br i1 %230, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !45

__nv_fmaf_rn.exit.i.i:                            ; preds = %4
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not11.i = icmp eq i32 %231, 0, !dbg !45
  %232 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %233 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %.03.i = select i1 %.not11.i, float %233, float %232, !dbg !45
  br label %__nv_logf.exit, !dbg !45

__nv_logf.exit:                                   ; preds = %4, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %4 ], !dbg !45
  %234 = fcmp olt float %186, 0x3810000000000000, !dbg !45
  %235 = fmul float %186, 0x4160000000000000, !dbg !45
  %.02.i17 = select i1 %234, float %235, float %186, !dbg !45
  %i.i.0.i18 = select i1 %234, float -2.300000e+01, float 0.000000e+00, !dbg !45
  %236 = bitcast float %.02.i17 to i32, !dbg !45
  %237 = add i32 %236, -1059760811, !dbg !45
  %238 = and i32 %237, -8388608, !dbg !45
  %239 = sub i32 %236, %238, !dbg !45
  %240 = bitcast i32 %239 to float, !dbg !45
  %241 = sitofp i32 %238 to float, !dbg !45
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i19 = icmp eq i32 %242, 0, !dbg !45
  %243 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %241, float 0x3E80000000000000, float %i.i.0.i18) #4, !dbg !45
  %244 = tail call float @llvm.nvvm.fma.rn.f(float %241, float 0x3E80000000000000, float %i.i.0.i18) #4, !dbg !45
  %.08.i20 = select i1 %.not.i19, float %244, float %243, !dbg !45
  %245 = fadd float %240, -1.000000e+00, !dbg !45
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not1.i21 = icmp eq i32 %246, 0, !dbg !45
  %247 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %245, float 0x3FC2073EC0000000) #4, !dbg !45
  %248 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %245, float 0x3FC2073EC0000000) #4, !dbg !45
  %.010.i22 = select i1 %.not1.i21, float %248, float %247, !dbg !45
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not2.i23 = icmp eq i32 %249, 0, !dbg !45
  %250 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i22, float %245, float 0xBFBF19B980000000) #4, !dbg !45
  %251 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i22, float %245, float 0xBFBF19B980000000) #4, !dbg !45
  %.011.i24 = select i1 %.not2.i23, float %251, float %250, !dbg !45
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not3.i25 = icmp eq i32 %252, 0, !dbg !45
  %253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i24, float %245, float 0x3FC1E52AA0000000) #4, !dbg !45
  %254 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i24, float %245, float 0x3FC1E52AA0000000) #4, !dbg !45
  %.012.i26 = select i1 %.not3.i25, float %254, float %253, !dbg !45
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not4.i27 = icmp eq i32 %255, 0, !dbg !45
  %256 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i26, float %245, float 0xBFC55B1720000000) #4, !dbg !45
  %257 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i26, float %245, float 0xBFC55B1720000000) #4, !dbg !45
  %.09.i28 = select i1 %.not4.i27, float %257, float %256, !dbg !45
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not5.i29 = icmp eq i32 %258, 0, !dbg !45
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i28, float %245, float 0x3FC99DA160000000) #4, !dbg !45
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i28, float %245, float 0x3FC99DA160000000) #4, !dbg !45
  %.05.i30 = select i1 %.not5.i29, float %260, float %259, !dbg !45
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not6.i31 = icmp eq i32 %261, 0, !dbg !45
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i30, float %245, float 0xBFCFFFE440000000) #4, !dbg !45
  %263 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i30, float %245, float 0xBFCFFFE440000000) #4, !dbg !45
  %.01.i32 = select i1 %.not6.i31, float %263, float %262, !dbg !45
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not7.i33 = icmp eq i32 %264, 0, !dbg !45
  %265 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i32, float %245, float 0x3FD5554F00000000) #4, !dbg !45
  %266 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i32, float %245, float 0x3FD5554F00000000) #4, !dbg !45
  %.0.i34 = select i1 %.not7.i33, float %266, float %265, !dbg !45
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not8.i35 = icmp eq i32 %267, 0, !dbg !45
  %268 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i34, float %245, float -5.000000e-01) #4, !dbg !45
  %269 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i34, float %245, float -5.000000e-01) #4, !dbg !45
  %.07.i36 = select i1 %.not8.i35, float %269, float %268, !dbg !45
  %270 = fmul float %245, %.07.i36, !dbg !45
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not9.i37 = icmp eq i32 %271, 0, !dbg !45
  %272 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %270, float %245, float %245) #4, !dbg !45
  %273 = tail call float @llvm.nvvm.fma.rn.f(float %270, float %245, float %245) #4, !dbg !45
  %.06.i38 = select i1 %.not9.i37, float %273, float %272, !dbg !45
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not10.i39 = icmp eq i32 %274, 0, !dbg !45
  %275 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i20, float 0x3FE62E4300000000, float %.06.i38) #4, !dbg !45
  %276 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i20, float 0x3FE62E4300000000, float %.06.i38) #4, !dbg !45
  %.04.i40 = select i1 %.not10.i39, float %276, float %275, !dbg !45
  %277 = icmp ugt i32 %236, 2139095039, !dbg !45
  br i1 %277, label %__nv_fmaf_rn.exit.i.i43, label %__nv_logf.exit46, !dbg !45

__nv_fmaf_rn.exit.i.i43:                          ; preds = %__nv_logf.exit
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not11.i44 = icmp eq i32 %278, 0, !dbg !45
  %279 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i17, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %280 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i17, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %.03.i45 = select i1 %.not11.i44, float %280, float %279, !dbg !45
  br label %__nv_logf.exit46, !dbg !45

__nv_logf.exit46:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i43
  %r.i.0.i41 = phi float [ %.03.i45, %__nv_fmaf_rn.exit.i.i43 ], [ %.04.i40, %__nv_logf.exit ], !dbg !45
  %281 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !45
  %r.i.1.i = select i1 %281, float 0xFFF0000000000000, float %r.i.0.i, !dbg !45
  %282 = and i32 %8, 14, !dbg !12
  %283 = icmp samesign ult i32 %282, 10, !dbg !16
  %284 = lshr i32 %7, 3, !dbg !12
  %285 = and i32 %284, 31, !dbg !12
  %286 = or disjoint i32 %285, %6, !dbg !13
  %287 = or disjoint i32 %286, 96, !dbg !13
  %288 = icmp slt i32 %287, 400, !dbg !14
  %289 = and i1 %283, %288, !dbg !24
  %290 = or disjoint i32 %286, 64, !dbg !13
  %291 = icmp slt i32 %290, 400, !dbg !14
  %292 = and i1 %283, %291, !dbg !24
  %293 = or disjoint i32 %286, 32, !dbg !13
  %294 = icmp slt i32 %293, 400, !dbg !14
  %295 = and i1 %283, %294, !dbg !24
  %296 = icmp slt i32 %286, 400, !dbg !14
  %297 = and i1 %283, %296, !dbg !24
  %298 = sdiv i32 %287, 100, !dbg !46
  %299 = sdiv i32 %290, 100, !dbg !46
  %300 = sdiv i32 %293, 100, !dbg !46
  %301 = sdiv i32 %286, 100, !dbg !46
  %.frozen47 = freeze i32 %287, !dbg !17
  %302 = sdiv i32 %.frozen47, 10, !dbg !17
  %303 = srem i32 %302, 10, !dbg !47
  %.frozen49 = freeze i32 %290, !dbg !17
  %304 = sdiv i32 %.frozen49, 10, !dbg !17
  %305 = srem i32 %304, 10, !dbg !47
  %.frozen51 = freeze i32 %293, !dbg !17
  %306 = sdiv i32 %.frozen51, 10, !dbg !17
  %307 = srem i32 %306, 10, !dbg !47
  %.frozen53 = freeze i32 %286, !dbg !17
  %308 = sdiv i32 %.frozen53, 10, !dbg !17
  %309 = srem i32 %308, 10, !dbg !47
  %310 = mul i32 %302, 10, !dbg !18
  %.decomposed48 = sub i32 %.frozen47, %310, !dbg !18
  %311 = mul i32 %304, 10, !dbg !18
  %.decomposed50 = sub i32 %.frozen49, %311, !dbg !18
  %312 = mul i32 %306, 10, !dbg !18
  %.decomposed52 = sub i32 %.frozen51, %312, !dbg !18
  %313 = mul i32 %308, 10, !dbg !18
  %.decomposed54 = sub i32 %.frozen53, %313, !dbg !18
  %314 = fcmp oeq float %.02.i17, 0.000000e+00, !dbg !45
  %r.i.1.i42 = select i1 %314, float 0xFFF0000000000000, float %r.i.0.i41, !dbg !45
  %315 = fsub float %129, %r.i.1.i, !dbg !48
  %316 = fsub float %130, %r.i.1.i42, !dbg !48
  %317 = fsub float %131, %r.i.1.i, !dbg !48
  %318 = fsub float %132, %r.i.1.i42, !dbg !48
  %319 = fsub float %133, %r.i.1.i, !dbg !48
  %320 = fsub float %134, %r.i.1.i42, !dbg !48
  %321 = fsub float %135, %r.i.1.i, !dbg !48
  %322 = fsub float %136, %r.i.1.i42, !dbg !48
  %323 = mul nsw i32 %309, 10, !dbg !49
  %324 = mul nsw i32 %307, 10, !dbg !49
  %325 = mul nsw i32 %305, 10, !dbg !49
  %326 = mul nsw i32 %303, 10, !dbg !49
  %327 = mul nsw i32 %.decomposed54, 100, !dbg !50
  %328 = mul nsw i32 %.decomposed52, 100, !dbg !50
  %329 = mul nsw i32 %.decomposed50, 100, !dbg !50
  %330 = mul nsw i32 %.decomposed48, 100, !dbg !50
  %331 = mul i32 %301, 1000, !dbg !51
  %332 = mul i32 %300, 1000, !dbg !51
  %333 = mul i32 %299, 1000, !dbg !51
  %334 = mul i32 %298, 1000, !dbg !51
  %335 = add nsw i32 %327, %282, !dbg !52
  %336 = add i32 %335, %331, !dbg !53
  %337 = add i32 %336, %323, !dbg !54
  %338 = add nsw i32 %328, %282, !dbg !52
  %339 = add i32 %338, %332, !dbg !53
  %340 = add i32 %339, %324, !dbg !54
  %341 = add nsw i32 %329, %282, !dbg !52
  %342 = add i32 %341, %333, !dbg !53
  %343 = add i32 %342, %325, !dbg !54
  %344 = add nsw i32 %330, %282, !dbg !52
  %345 = add i32 %344, %334, !dbg !53
  %346 = add i32 %345, %326, !dbg !54
  %347 = sext i32 %337 to i64, !dbg !55
  %348 = getelementptr float, ptr addrspace(1) %1, i64 %347, !dbg !55
  %349 = sext i32 %340 to i64, !dbg !55
  %350 = getelementptr float, ptr addrspace(1) %1, i64 %349, !dbg !55
  %351 = sext i32 %343 to i64, !dbg !55
  %352 = getelementptr float, ptr addrspace(1) %1, i64 %351, !dbg !55
  %353 = sext i32 %346 to i64, !dbg !55
  %354 = getelementptr float, ptr addrspace(1) %1, i64 %353, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %355 = shl i32 %7, 5, !dbg !56
  %356 = and i32 %355, 2016, !dbg !56
  %357 = or disjoint i32 %356, %13, !dbg !56
  %358 = and i32 %8, 510, !dbg !56
  %359 = lshr exact i32 %356, 1, !dbg !56
  %360 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %359, !dbg !56
  %361 = getelementptr float, ptr addrspace(3) %360, i32 %357, !dbg !56
  %362 = bitcast float %315 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #4, !dbg !56
  %363 = or disjoint i32 %357, 16, !dbg !56
  %364 = lshr i32 %363, 3, !dbg !56
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i32 %364, !dbg !56
  %366 = getelementptr float, ptr addrspace(3) %365, i32 %363, !dbg !56
  %367 = bitcast float %316 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #4, !dbg !56
  %368 = or disjoint i32 %357, 4, !dbg !56
  %369 = getelementptr float, ptr addrspace(3) %360, i32 %368, !dbg !56
  %370 = bitcast float %317 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #4, !dbg !56
  %371 = or disjoint i32 %357, 20, !dbg !56
  %372 = lshr i32 %371, 3, !dbg !56
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i32 %372, !dbg !56
  %374 = getelementptr float, ptr addrspace(3) %373, i32 %371, !dbg !56
  %375 = bitcast float %318 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #4, !dbg !56
  %376 = or disjoint i32 %357, 8, !dbg !56
  %377 = getelementptr float, ptr addrspace(3) %360, i32 %376, !dbg !56
  %378 = bitcast float %319 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 true) #4, !dbg !56
  %379 = or disjoint i32 %357, 24, !dbg !56
  %380 = lshr i32 %379, 3, !dbg !56
  %381 = and i32 %380, 254, !dbg !56
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i32 %381, !dbg !56
  %383 = getelementptr float, ptr addrspace(3) %382, i32 %379, !dbg !56
  %384 = bitcast float %320 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #4, !dbg !56
  %385 = or disjoint i32 %357, 12, !dbg !56
  %386 = getelementptr float, ptr addrspace(3) %360, i32 %385, !dbg !56
  %387 = bitcast float %321 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !56
  %388 = or disjoint i32 %357, 28, !dbg !56
  %389 = lshr i32 %388, 3, !dbg !56
  %390 = and i32 %389, 254, !dbg !56
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i32 %390, !dbg !56
  %392 = getelementptr float, ptr addrspace(3) %391, i32 %388, !dbg !56
  %393 = bitcast float %322 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %394 = lshr i32 %8, 3, !dbg !56
  %395 = and i32 %394, 62, !dbg !56
  %396 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %395, !dbg !56
  %397 = getelementptr inbounds float, ptr addrspace(3) %396, i32 %358, !dbg !56
  %398 = or disjoint i32 %358, 512, !dbg !56
  %399 = lshr i32 %398, 3, !dbg !56
  %400 = and i32 %399, 126, !dbg !56
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %400, !dbg !56
  %402 = getelementptr inbounds float, ptr addrspace(3) %401, i32 %398, !dbg !56
  %403 = load <2 x i32>, ptr addrspace(3) %402, align 8, !dbg !56
  %404 = or disjoint i32 %358, 1024, !dbg !56
  %405 = lshr i32 %404, 3, !dbg !56
  %406 = and i32 %405, 190, !dbg !56
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %406, !dbg !56
  %408 = getelementptr inbounds float, ptr addrspace(3) %407, i32 %404, !dbg !56
  %409 = load <2 x i32>, ptr addrspace(3) %408, align 8, !dbg !56
  %410 = or disjoint i32 %358, 1536, !dbg !56
  %411 = lshr i32 %410, 3, !dbg !56
  %412 = and i32 %411, 254, !dbg !56
  %413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %412, !dbg !56
  %414 = getelementptr inbounds float, ptr addrspace(3) %413, i32 %410, !dbg !56
  %415 = load <2 x i32>, ptr addrspace(3) %414, align 8, !dbg !56
  %.extract = load i32, ptr addrspace(3) %397, align 8, !dbg !56
  %416 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 4, !dbg !56
  %.extract10 = load i32, ptr addrspace(3) %416, align 4, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract10, ptr addrspace(1) %348, i1 %297) #4, !dbg !56
  %.extract11 = extractelement <2 x i32> %403, i64 0, !dbg !56
  %.extract12 = extractelement <2 x i32> %403, i64 1, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %350, i1 %295) #4, !dbg !56
  %.extract13 = extractelement <2 x i32> %409, i64 0, !dbg !56
  %.extract14 = extractelement <2 x i32> %409, i64 1, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %352, i1 %292) #4, !dbg !56
  %.extract15 = extractelement <2 x i32> %415, i64 0, !dbg !56
  %.extract16 = extractelement <2 x i32> %415, i64 1, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract15, i32 %.extract16, ptr addrspace(1) %354, i1 %289) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py", directory: "inductor_cache/l5")
!4 = !{ptr @triton_per_fused__log_softmax_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__log_softmax_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__log_softmax_12", linkageName: "triton_per_fused__log_softmax_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 35, column: 47, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 43, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 60, scope: !7)
!25 = !DILocation(line: 35, column: 52, scope: !7)
!26 = !DILocation(line: 37, column: 41, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 38, column: 37, scope: !7)
!32 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !31)
!33 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !31)
!35 = !DILocation(line: 131, column: 29, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 23, scope: !7)
!38 = !DILocation(line: 42, column: 41, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 43, column: 25, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 44, column: 24, scope: !7)
!46 = !DILocation(line: 34, column: 19, scope: !7)
!47 = !DILocation(line: 33, column: 27, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 33, scope: !7)
!50 = !DILocation(line: 46, column: 42, scope: !7)
!51 = !DILocation(line: 46, column: 52, scope: !7)
!52 = !DILocation(line: 46, column: 30, scope: !7)
!53 = !DILocation(line: 46, column: 38, scope: !7)
!54 = !DILocation(line: 46, column: 47, scope: !7)
!55 = !DILocation(line: 46, column: 25, scope: !7)
!56 = !DILocation(line: 46, column: 64, scope: !7)
!57 = !DILocation(line: 46, column: 4, scope: !7)
