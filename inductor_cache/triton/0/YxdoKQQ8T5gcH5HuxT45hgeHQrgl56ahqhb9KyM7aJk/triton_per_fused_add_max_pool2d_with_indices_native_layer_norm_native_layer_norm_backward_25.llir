; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !10
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %15 = and i32 %14, 31, !dbg !11
  %16 = lshr i32 %14, 5, !dbg !11
  %17 = shl i32 %14, 2, !dbg !11
  %18 = and i32 %17, 508, !dbg !11
  %19 = icmp samesign ult i32 %18, 384, !dbg !12
  %.frozen = freeze i32 %13, !dbg !13
  %20 = sdiv i32 %.frozen, 4, !dbg !13
  %21 = mul i32 %20, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %21, !dbg !14
  %22 = srem i32 %20, 4, !dbg !15
  %23 = sdiv i32 %13, 16, !dbg !16
  %24 = mul nsw i32 %.decomposed, 768, !dbg !17
  %25 = mul i32 %20, 6144, !dbg !18
  %26 = add i32 %25, %24, !dbg !19
  %27 = add i32 %26, %18, !dbg !20
  %28 = sext i32 %27 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !22
  %35 = add i32 %26, 384, !dbg !23
  %36 = add i32 %35, %18, !dbg !24
  %37 = sext i32 %36 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %44 = add i32 %26, 3072, !dbg !27
  %45 = add i32 %44, %18, !dbg !28
  %46 = sext i32 %45 to i64, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !29
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !30
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !30
  %53 = add i32 %26, 3456, !dbg !31
  %54 = add i32 %53, %18, !dbg !32
  %55 = sext i32 %54 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !33
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !34
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !34
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !34
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !34
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !34
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !35
  %62 = sdiv i8 %.lhs.trunc, 2, !dbg !36
  %63 = mul i8 %62, 2, !dbg !35
  %.decomposed8 = sub i8 %.lhs.trunc, %63, !dbg !35
  %.lhs.trunc1 = trunc nsw i32 %22 to i8, !dbg !37
  %64 = sdiv i8 %.lhs.trunc1, 2, !dbg !38
  %65 = mul i8 %64, 2, !dbg !37
  %.decomposed9 = sub i8 %.lhs.trunc1, %65, !dbg !37
  %66 = insertelement <4 x i8> poison, i8 %.decomposed8, i64 0, !dbg !35
  %67 = insertelement <4 x i8> %66, i8 %62, i64 1, !dbg !35
  %68 = insertelement <4 x i8> %67, i8 %.decomposed9, i64 2, !dbg !35
  %69 = insertelement <4 x i8> %68, i8 %64, i64 3, !dbg !35
  %70 = sext <4 x i8> %69 to <4 x i32>, !dbg !35
  %71 = mul nsw <4 x i32> %70, <i32 384, i32 1536, i32 768, i32 3072>, !dbg !39
  %72 = mul i32 %23, 6144, !dbg !40
  %73 = or disjoint i32 %72, %18, !dbg !41
  %74 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %71), !dbg !42
  %op.rdx = add i32 %74, %73, !dbg !43
  %75 = sext i32 %op.rdx to i64, !dbg !44
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !44
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !45
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !45
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !45
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !45
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !45
  %82 = zext nneg i32 %18 to i64, !dbg !46
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !46
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !47
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !47
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !47
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !47
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !47
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !48
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !49
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %82, !dbg !50
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !51
  %93 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !22
  %94 = insertelement <4 x i32> %93, i32 %32, i64 1, !dbg !22
  %95 = insertelement <4 x i32> %94, i32 %33, i64 2, !dbg !22
  %96 = insertelement <4 x i32> %95, i32 %34, i64 3, !dbg !22
  %97 = bitcast <4 x i32> %96 to <4 x float>, !dbg !22
  %98 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !26
  %99 = insertelement <4 x i32> %98, i32 %41, i64 1, !dbg !26
  %100 = insertelement <4 x i32> %99, i32 %42, i64 2, !dbg !26
  %101 = insertelement <4 x i32> %100, i32 %43, i64 3, !dbg !26
  %102 = bitcast <4 x i32> %101 to <4 x float>, !dbg !26
  %103 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !30
  %104 = insertelement <4 x i32> %103, i32 %50, i64 1, !dbg !30
  %105 = insertelement <4 x i32> %104, i32 %51, i64 2, !dbg !30
  %106 = insertelement <4 x i32> %105, i32 %52, i64 3, !dbg !30
  %107 = bitcast <4 x i32> %106 to <4 x float>, !dbg !30
  %108 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !34
  %109 = insertelement <4 x i32> %108, i32 %59, i64 1, !dbg !34
  %110 = insertelement <4 x i32> %109, i32 %60, i64 2, !dbg !34
  %111 = insertelement <4 x i32> %110, i32 %61, i64 3, !dbg !34
  %112 = bitcast <4 x i32> %111 to <4 x float>, !dbg !34
  %113 = fcmp ogt <4 x float> %102, %97, !dbg !52
  %114 = fcmp uno <4 x float> %102, zeroinitializer, !dbg !53
  %115 = or <4 x i1> %113, %114, !dbg !57
  %.v = select <4 x i1> %115, <4 x i32> %101, <4 x i32> %96, !dbg !58
  %116 = bitcast <4 x i32> %.v to <4 x float>, !dbg !58
  %117 = fcmp olt <4 x float> %116, %107, !dbg !59
  %118 = fcmp uno <4 x float> %107, zeroinitializer, !dbg !60
  %119 = or <4 x i1> %118, %117, !dbg !62
  %.v7 = select <4 x i1> %119, <4 x i32> %106, <4 x i32> %.v, !dbg !63
  %120 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !63
  %121 = fcmp olt <4 x float> %120, %112, !dbg !64
  %122 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !45
  %123 = insertelement <2 x i32> %122, i32 %79, i64 1, !dbg !45
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !45
  %125 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !47
  %126 = insertelement <2 x i32> %125, i32 %86, i64 1, !dbg !47
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !47
  %128 = shufflevector <4 x float> %112, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !65
  %129 = fcmp uno <2 x float> %128, zeroinitializer, !dbg !65
  %130 = shufflevector <4 x i1> %121, <4 x i1> poison, <2 x i32> <i32 0, i32 1>, !dbg !67
  %131 = or <2 x i1> %129, %130, !dbg !67
  %132 = shufflevector <4 x float> %120, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !68
  %133 = select <2 x i1> %131, <2 x float> %128, <2 x float> %132, !dbg !68
  %134 = fadd <2 x float> %124, %127, !dbg !69
  %135 = fadd <2 x float> %134, %133, !dbg !70
  %136 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !45
  %137 = insertelement <2 x i32> %136, i32 %81, i64 1, !dbg !45
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !45
  %139 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !47
  %140 = insertelement <2 x i32> %139, i32 %88, i64 1, !dbg !47
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !47
  %142 = shufflevector <4 x float> %112, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !65
  %143 = fcmp uno <2 x float> %142, zeroinitializer, !dbg !65
  %144 = shufflevector <4 x i1> %121, <4 x i1> poison, <2 x i32> <i32 2, i32 3>, !dbg !67
  %145 = or <2 x i1> %143, %144, !dbg !67
  %146 = shufflevector <4 x float> %120, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !68
  %147 = select <2 x i1> %145, <2 x float> %142, <2 x float> %146, !dbg !68
  %148 = fadd <2 x float> %138, %141, !dbg !69
  %149 = fadd <2 x float> %148, %147, !dbg !70
  %150 = extractelement <2 x float> %135, i64 0, !dbg !71
  %151 = extractelement <2 x float> %135, i64 1, !dbg !71
  %152 = fadd float %150, %151, !dbg !71
  %153 = extractelement <2 x float> %149, i64 0, !dbg !71
  %154 = fadd float %153, %152, !dbg !71
  %155 = extractelement <2 x float> %149, i64 1, !dbg !71
  %156 = fadd float %155, %154, !dbg !71
  %157 = select i1 %19, float %156, float 0.000000e+00, !dbg !71
  %158 = bitcast float %157 to i32, !dbg !76
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !76
  %160 = bitcast i32 %159 to float, !dbg !76
  %161 = fadd float %157, %160, !dbg !71
  %162 = bitcast float %161 to i32, !dbg !76
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !76
  %164 = bitcast i32 %163 to float, !dbg !76
  %165 = fadd float %161, %164, !dbg !71
  %166 = bitcast float %165 to i32, !dbg !76
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !76
  %168 = bitcast i32 %167 to float, !dbg !76
  %169 = fadd float %165, %168, !dbg !71
  %170 = bitcast float %169 to i32, !dbg !76
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !76
  %172 = bitcast i32 %171 to float, !dbg !76
  %173 = fadd float %169, %172, !dbg !71
  %174 = bitcast float %173 to i32, !dbg !76
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !76
  %176 = bitcast i32 %175 to float, !dbg !76
  %177 = fadd float %173, %176, !dbg !71
  %178 = icmp eq i32 %15, 0, !dbg !76
  %179 = and i32 %16, 3, !dbg !76
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !76
  %181 = bitcast float %177 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 %178) #6, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %182 = icmp slt i32 %14, 4, !dbg !76
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %14, !dbg !76
  %184 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %183, i1 %182) #6, !dbg !76
  %185 = bitcast i32 %184 to float, !dbg !76
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !76
  %187 = bitcast i32 %186 to float, !dbg !76
  %188 = fadd float %185, %187, !dbg !71
  %189 = bitcast float %188 to i32, !dbg !76
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 1, i32 31), !dbg !76
  %191 = bitcast i32 %190 to float, !dbg !76
  %192 = fadd float %188, %191, !dbg !71
  %193 = and i32 %14, 3, !dbg !76
  %194 = icmp eq i32 %193, 0, !dbg !76
  %195 = and i1 %182, %194, !dbg !76
  %196 = bitcast float %192 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %196, i1 %195) #6, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %197 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !76
  %198 = fadd float %197, 0.000000e+00, !dbg !77
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 3.840000e+02) #6, !dbg !79
  %200 = fsub float %150, %199, !dbg !80
  %201 = fsub float %151, %199, !dbg !80
  %202 = fsub float %153, %199, !dbg !80
  %203 = fsub float %155, %199, !dbg !80
  %204 = fmul float %200, %200, !dbg !81
  %205 = fmul float %201, %201, !dbg !81
  %206 = fmul float %202, %202, !dbg !81
  %207 = fmul float %203, %203, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %208 = fadd float %204, %205, !dbg !84
  %209 = fadd float %206, %208, !dbg !84
  %210 = fadd float %207, %209, !dbg !84
  %211 = select i1 %19, float %210, float 0.000000e+00, !dbg !84
  %212 = bitcast float %211 to i32, !dbg !82
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 16, i32 31), !dbg !82
  %214 = bitcast i32 %213 to float, !dbg !82
  %215 = fadd float %211, %214, !dbg !84
  %216 = bitcast float %215 to i32, !dbg !82
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !82
  %218 = bitcast i32 %217 to float, !dbg !82
  %219 = fadd float %215, %218, !dbg !84
  %220 = bitcast float %219 to i32, !dbg !82
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !82
  %222 = bitcast i32 %221 to float, !dbg !82
  %223 = fadd float %219, %222, !dbg !84
  %224 = bitcast float %223 to i32, !dbg !82
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !82
  %226 = bitcast i32 %225 to float, !dbg !82
  %227 = fadd float %223, %226, !dbg !84
  %228 = bitcast float %227 to i32, !dbg !82
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !82
  %230 = bitcast i32 %229 to float, !dbg !82
  %231 = fadd float %227, %230, !dbg !84
  %232 = bitcast float %231 to <1 x i32>, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %232, i1 %178) #6, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %183, i1 %182) #6, !dbg !82
  %234 = bitcast i32 %233 to float, !dbg !82
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 2, i32 31), !dbg !82
  %236 = bitcast i32 %235 to float, !dbg !82
  %237 = fadd float %234, %236, !dbg !84
  %238 = bitcast float %237 to i32, !dbg !82
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 1, i32 31), !dbg !82
  %240 = bitcast i32 %239 to float, !dbg !82
  %241 = fadd float %237, %240, !dbg !84
  %242 = bitcast float %241 to <1 x i32>, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %242, i1 %195) #6, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %243 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !82
  %244 = fadd float %243, 0.000000e+00, !dbg !85
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float 3.840000e+02) #6, !dbg !87
  %246 = fadd float %245, 0x3EB0C6F7A0000000, !dbg !88
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !89
  %.not.i = icmp eq i32 %247, 0, !dbg !89
  br i1 %.not.i, label %250, label %248, !dbg !89

248:                                              ; preds = %12
  %249 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %246), !dbg !89
  br label %__nv_rsqrtf.exit, !dbg !89

250:                                              ; preds = %12
  %251 = tail call float @llvm.nvvm.rsqrt.approx.f(float %246), !dbg !89
  br label %__nv_rsqrtf.exit, !dbg !89

__nv_rsqrtf.exit:                                 ; preds = %248, %250
  %.0.i = phi float [ %249, %248 ], [ %251, %250 ], !dbg !89
  %252 = zext <4 x i1> %113 to <4 x i8>, !dbg !90
  %253 = select <4 x i1> %117, <4 x i8> splat (i8 2), <4 x i8> %252, !dbg !91
  %254 = select <4 x i1> %121, <4 x i8> splat (i8 3), <4 x i8> %253, !dbg !92
  %255 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !51
  %256 = bitcast i32 %255 to float, !dbg !51
  %257 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !51
  %258 = bitcast i32 %257 to float, !dbg !51
  %259 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !51
  %260 = bitcast i32 %259 to float, !dbg !51
  %261 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !51
  %262 = bitcast i32 %261 to float, !dbg !51
  %263 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !49
  %264 = bitcast i32 %263 to float, !dbg !49
  %265 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !49
  %266 = bitcast i32 %265 to float, !dbg !49
  %267 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !49
  %268 = bitcast i32 %267 to float, !dbg !49
  %269 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !49
  %270 = bitcast i32 %269 to float, !dbg !49
  %271 = fmul float %200, %.0.i, !dbg !93
  %272 = fmul float %201, %.0.i, !dbg !93
  %273 = fmul float %202, %.0.i, !dbg !93
  %274 = fmul float %203, %.0.i, !dbg !93
  %275 = fmul float %271, %270, !dbg !94
  %276 = fmul float %272, %268, !dbg !94
  %277 = fmul float %273, %266, !dbg !94
  %278 = fmul float %274, %264, !dbg !94
  %279 = fadd float %275, %262, !dbg !95
  %280 = fadd float %276, %260, !dbg !95
  %281 = fadd float %277, %258, !dbg !95
  %282 = fadd float %278, %256, !dbg !95
  %283 = fmul float %.0.i, 0x3F65555560000000, !dbg !96
  %284 = mul i32 %13, 384, !dbg !97
  %285 = add i32 %284, %18, !dbg !98
  %286 = sext i32 %285 to i64, !dbg !99
  %287 = getelementptr i8, ptr addrspace(1) %5, i64 %286, !dbg !99
  %288 = bitcast <4 x i8> %254 to i32, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %288, ptr addrspace(1) %287, i1 %19) #6, !dbg !100
  %289 = getelementptr float, ptr addrspace(1) %6, i64 %286, !dbg !101
  %290 = bitcast float %150 to i32, !dbg !102
  %291 = bitcast float %151 to i32, !dbg !102
  %292 = bitcast float %153 to i32, !dbg !102
  %293 = bitcast float %155 to i32, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %289, i1 %19) #6, !dbg !102
  %294 = getelementptr float, ptr addrspace(1) %7, i64 %286, !dbg !103
  %295 = bitcast float %271 to i32, !dbg !104
  %296 = bitcast float %272 to i32, !dbg !104
  %297 = bitcast float %273 to i32, !dbg !104
  %298 = bitcast float %274 to i32, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %296, i32 %297, i32 %298, ptr addrspace(1) %294, i1 %19) #6, !dbg !104
  %299 = getelementptr float, ptr addrspace(1) %8, i64 %286, !dbg !105
  %300 = bitcast float %279 to i32, !dbg !106
  %301 = bitcast float %280 to i32, !dbg !106
  %302 = bitcast float %281 to i32, !dbg !106
  %303 = bitcast float %282 to i32, !dbg !106
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %299, i1 %19) #6, !dbg !106
  %304 = sext i32 %13 to i64, !dbg !107
  %305 = getelementptr float, ptr addrspace(1) %9, i64 %304, !dbg !107
  %urem = and i32 %14, 127, !dbg !108
  %306 = icmp eq i32 %urem, 0, !dbg !108
  %307 = bitcast float %283 to i32, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %307, ptr addrspace(1) %305, i1 %306) #6, !dbg !108
  ret void, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyot3xuihcbnuf3hoj7rtg47vrhe7ryfrckodvrl43fsgwhxdlfi.py", directory: "inductor_cache/yo")
!4 = !{ptr @triton_per_fused_add_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_25, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_25", linkageName: "triton_per_fused_add_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 34, column: 26, scope: !7)
!16 = !DILocation(line: 35, column: 19, scope: !7)
!17 = !DILocation(line: 36, column: 39, scope: !7)
!18 = !DILocation(line: 36, column: 49, scope: !7)
!19 = !DILocation(line: 36, column: 35, scope: !7)
!20 = !DILocation(line: 36, column: 44, scope: !7)
!21 = !DILocation(line: 36, column: 30, scope: !7)
!22 = !DILocation(line: 36, column: 54, scope: !7)
!23 = !DILocation(line: 37, column: 41, scope: !7)
!24 = !DILocation(line: 37, column: 50, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 60, scope: !7)
!27 = !DILocation(line: 38, column: 42, scope: !7)
!28 = !DILocation(line: 38, column: 51, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 61, scope: !7)
!31 = !DILocation(line: 39, column: 43, scope: !7)
!32 = !DILocation(line: 39, column: 52, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 62, scope: !7)
!35 = !DILocation(line: 40, column: 47, scope: !7)
!36 = !DILocation(line: 40, column: 82, scope: !7)
!37 = !DILocation(line: 40, column: 64, scope: !7)
!38 = !DILocation(line: 40, column: 99, scope: !7)
!39 = !DILocation(line: 40, column: 42, scope: !7)
!40 = !DILocation(line: 40, column: 109, scope: !7)
!41 = !DILocation(line: 40, column: 36, scope: !7)
!42 = !DILocation(line: 40, column: 104, scope: !7)
!43 = !DILocation(line: 40, column: 53, scope: !7)
!44 = !DILocation(line: 40, column: 31, scope: !7)
!45 = !DILocation(line: 40, column: 114, scope: !7)
!46 = !DILocation(line: 41, column: 31, scope: !7)
!47 = !DILocation(line: 41, column: 36, scope: !7)
!48 = !DILocation(line: 42, column: 31, scope: !7)
!49 = !DILocation(line: 42, column: 36, scope: !7)
!50 = !DILocation(line: 43, column: 31, scope: !7)
!51 = !DILocation(line: 43, column: 36, scope: !7)
!52 = !DILocation(line: 44, column: 18, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 48, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!59 = !DILocation(line: 49, column: 18, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !61)
!61 = !DILocation(line: 52, column: 41, scope: !7)
!62 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !61)
!63 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !61)
!64 = !DILocation(line: 53, column: 20, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !66)
!66 = !DILocation(line: 56, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !66)
!68 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !66)
!69 = !DILocation(line: 57, column: 20, scope: !7)
!70 = !DILocation(line: 58, column: 20, scope: !7)
!71 = !DILocation(line: 256, column: 15, scope: !72, inlinedAt: !75)
!72 = distinct !DILexicalBlockFile(scope: !74, file: !73, discriminator: 0)
!73 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!74 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!75 = !DILocation(line: 63, column: 59, scope: !7)
!76 = !DILocation(line: 267, column: 36, scope: !74, inlinedAt: !75)
!77 = !DILocation(line: 73, column: 15, scope: !54, inlinedAt: !78)
!78 = !DILocation(line: 63, column: 45, scope: !7)
!79 = !DILocation(line: 66, column: 20, scope: !7)
!80 = !DILocation(line: 67, column: 20, scope: !7)
!81 = !DILocation(line: 68, column: 20, scope: !7)
!82 = !DILocation(line: 267, column: 36, scope: !74, inlinedAt: !83)
!83 = !DILocation(line: 71, column: 59, scope: !7)
!84 = !DILocation(line: 256, column: 15, scope: !72, inlinedAt: !83)
!85 = !DILocation(line: 73, column: 15, scope: !54, inlinedAt: !86)
!86 = !DILocation(line: 71, column: 45, scope: !7)
!87 = !DILocation(line: 74, column: 20, scope: !7)
!88 = !DILocation(line: 76, column: 20, scope: !7)
!89 = !DILocation(line: 77, column: 28, scope: !7)
!90 = !DILocation(line: 47, column: 32, scope: !7)
!91 = !DILocation(line: 51, column: 33, scope: !7)
!92 = !DILocation(line: 55, column: 35, scope: !7)
!93 = !DILocation(line: 78, column: 20, scope: !7)
!94 = !DILocation(line: 79, column: 20, scope: !7)
!95 = !DILocation(line: 80, column: 20, scope: !7)
!96 = !DILocation(line: 82, column: 20, scope: !7)
!97 = !DILocation(line: 83, column: 34, scope: !7)
!98 = !DILocation(line: 83, column: 30, scope: !7)
!99 = !DILocation(line: 83, column: 25, scope: !7)
!100 = !DILocation(line: 83, column: 46, scope: !7)
!101 = !DILocation(line: 84, column: 25, scope: !7)
!102 = !DILocation(line: 84, column: 46, scope: !7)
!103 = !DILocation(line: 85, column: 25, scope: !7)
!104 = !DILocation(line: 85, column: 46, scope: !7)
!105 = !DILocation(line: 86, column: 25, scope: !7)
!106 = !DILocation(line: 86, column: 46, scope: !7)
!107 = !DILocation(line: 87, column: 25, scope: !7)
!108 = !DILocation(line: 87, column: 37, scope: !7)
!109 = !DILocation(line: 87, column: 4, scope: !7)
