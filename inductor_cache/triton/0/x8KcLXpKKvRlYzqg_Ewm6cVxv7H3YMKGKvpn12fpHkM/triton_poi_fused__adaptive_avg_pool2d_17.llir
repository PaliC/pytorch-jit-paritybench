; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !14
  %12 = insertelement <2 x i32> %11, i32 %10, i64 1, !dbg !14
  %13 = srem <2 x i32> %12, splat (i32 2048), !dbg !14
  %14 = sdiv i32 %9, 73728, !dbg !15
  %15 = shl nsw <2 x i32> %13, splat (i32 4), !dbg !16
  %16 = shl nsw i32 %14, 15, !dbg !17
  %17 = shufflevector <2 x i32> %11, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %18 = sdiv <2 x i32> %17, <i32 12288, i32 2048>, !dbg !18
  %19 = srem <2 x i32> %18, splat (i32 6), !dbg !19
  %20 = trunc nsw <2 x i32> %19 to <2 x i8>, !dbg !20
  %21 = shl nsw <2 x i8> %20, splat (i8 1), !dbg !20
  %22 = sdiv <2 x i8> %21, splat (i8 3), !dbg !20
  %23 = shl nsw <2 x i8> %20, splat (i8 2), !dbg !21
  %24 = add nsw <2 x i8> %23, splat (i8 9), !dbg !21
  %25 = sdiv <2 x i8> %24, splat (i8 6), !dbg !21
  %26 = icmp slt <2 x i8> %22, %25, !dbg !22
  %27 = extractelement <2 x i1> %26, i64 0, !dbg !23
  %28 = extractelement <2 x i1> %26, i64 1, !dbg !23
  %29 = and i1 %27, %28, !dbg !23
  %30 = extractelement <2 x i8> %22, i64 0, !dbg !24
  %31 = sext i8 %30 to i32, !dbg !24
  %32 = shl nsw i32 %31, 2, !dbg !24
  %33 = extractelement <2 x i8> %22, i64 1, !dbg !25
  %34 = sext i8 %33 to i32, !dbg !25
  %35 = add nsw i32 %16, %34, !dbg !25
  %36 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !26
  %37 = shufflevector <2 x i32> %36, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !26
  %38 = add nsw <2 x i32> %37, %15, !dbg !26
  %39 = shufflevector <2 x i32> %38, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !26
  %40 = or disjoint i32 %32, 1, !dbg !27
  %41 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !28
  %42 = insertelement <4 x i32> %41, i32 %40, i64 1, !dbg !28
  %43 = shufflevector <4 x i32> %42, <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !28
  %44 = add <4 x i32> %39, %43, !dbg !28
  %45 = extractelement <4 x i32> %44, i64 0, !dbg !29
  %46 = sext i32 %45 to i64, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !29
  %48 = extractelement <4 x i32> %44, i64 1, !dbg !29
  %49 = sext i32 %48 to i64, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %29, i32 0, i1 %29) #1, !dbg !30
  %52 = bitcast i32 %51 to float, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %29, i32 0, i1 %29) #1, !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = add nsw <2 x i8> %22, splat (i8 1), !dbg !31
  %56 = icmp slt <2 x i8> %55, %25, !dbg !32
  %57 = extractelement <2 x i1> %56, i64 1, !dbg !33
  %58 = and i1 %27, %57, !dbg !34
  %59 = extractelement <4 x i32> %44, i64 2, !dbg !35
  %60 = sext i32 %59 to i64, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !35
  %62 = extractelement <4 x i32> %44, i64 3, !dbg !35
  %63 = sext i32 %62 to i64, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %58, i32 0, i1 %58) #1, !dbg !36
  %66 = bitcast i32 %65 to float, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %58, i32 0, i1 %58) #1, !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = fadd float %52, %66, !dbg !37
  %70 = fadd float %54, %68, !dbg !37
  %71 = extractelement <2 x i1> %56, i64 0, !dbg !33
  %72 = and i1 %28, %71, !dbg !38
  %73 = and i1 %71, %57, !dbg !33
  %74 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !39
  %75 = shufflevector <2 x i32> %74, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !39
  %76 = add nsw <2 x i32> %75, <i32 4, i32 5>, !dbg !39
  %77 = shufflevector <2 x i32> %76, <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !39
  %78 = add nsw <4 x i32> %39, %77, !dbg !40
  %79 = extractelement <4 x i32> %78, i64 0, !dbg !41
  %80 = sext i32 %79 to i64, !dbg !41
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !41
  %82 = extractelement <4 x i32> %78, i64 1, !dbg !41
  %83 = sext i32 %82 to i64, !dbg !41
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !41
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %72, i32 0, i1 %72) #1, !dbg !42
  %86 = bitcast i32 %85 to float, !dbg !42
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %72, i32 0, i1 %72) #1, !dbg !42
  %88 = bitcast i32 %87 to float, !dbg !42
  %89 = fadd float %69, %86, !dbg !43
  %90 = fadd float %70, %88, !dbg !43
  %91 = extractelement <4 x i32> %78, i64 2, !dbg !44
  %92 = sext i32 %91 to i64, !dbg !44
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !44
  %94 = extractelement <4 x i32> %78, i64 3, !dbg !44
  %95 = sext i32 %94 to i64, !dbg !44
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !44
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %73, i32 0, i1 %73) #1, !dbg !45
  %98 = bitcast i32 %97 to float, !dbg !45
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %73, i32 0, i1 %73) #1, !dbg !45
  %100 = bitcast i32 %99 to float, !dbg !45
  %101 = fadd float %89, %98, !dbg !46
  %102 = fadd float %90, %100, !dbg !46
  %103 = select i1 %29, float 1.000000e+00, float 0.000000e+00, !dbg !47
  %104 = select i1 %58, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %105 = fadd float %103, %104, !dbg !49
  %106 = select i1 %72, float 1.000000e+00, float 0.000000e+00, !dbg !50
  %107 = fadd float %106, %105, !dbg !51
  %108 = select i1 %73, float 1.000000e+00, float 0.000000e+00, !dbg !52
  %109 = fadd float %108, %107, !dbg !53
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %109) #1, !dbg !54
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %109) #1, !dbg !54
  %112 = sext i32 %9 to i64, !dbg !55
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !55
  %114 = bitcast float %110 to i32, !dbg !56
  %115 = bitcast float %111 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %114, i32 %115, ptr addrspace(1) %113, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gp767t6rfcjsqbpsth43b6phuhuqwglzqn7lyy7hoq6c75ogue.py", directory: "inductor_cache/6g")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_17", linkageName: "triton_poi_fused__adaptive_avg_pool2d_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 36, column: 51, scope: !7)
!17 = !DILocation(line: 36, column: 62, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 21, scope: !7)
!21 = !DILocation(line: 30, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 18, scope: !7)
!24 = !DILocation(line: 36, column: 33, scope: !7)
!25 = !DILocation(line: 36, column: 48, scope: !7)
!26 = !DILocation(line: 36, column: 56, scope: !7)
!27 = !DILocation(line: 40, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 68, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 83, scope: !7)
!31 = !DILocation(line: 42, column: 17, scope: !7)
!32 = !DILocation(line: 43, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 20, scope: !7)
!34 = !DILocation(line: 39, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 88, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 45, column: 73, scope: !7)
!41 = !DILocation(line: 45, column: 31, scope: !7)
!42 = !DILocation(line: 45, column: 88, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 31, scope: !7)
!45 = !DILocation(line: 48, column: 88, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 34, scope: !7)
!48 = !DILocation(line: 55, column: 35, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 35, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 35, scope: !7)
!53 = !DILocation(line: 64, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 25, scope: !7)
!56 = !DILocation(line: 66, column: 37, scope: !7)
!57 = !DILocation(line: 66, column: 4, scope: !7)
