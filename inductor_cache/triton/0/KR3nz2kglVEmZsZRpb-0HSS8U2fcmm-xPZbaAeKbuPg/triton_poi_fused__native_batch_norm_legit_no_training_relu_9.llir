; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = icmp slt i32 %14, 768, !dbg !14
  %17 = icmp slt i32 %15, 768, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %19 = icmp slt i32 %18, 961, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %20 = sdiv i32 %.frozen, 192, !dbg !17
  %21 = mul i32 %20, 192, !dbg !18
  %.decomposed = sub i32 %.frozen, %21, !dbg !18
  %.frozen40 = freeze i32 %15, !dbg !17
  %22 = sdiv i32 %.frozen40, 192, !dbg !17
  %23 = mul i32 %22, 192, !dbg !18
  %.decomposed41 = sub i32 %.frozen40, %23, !dbg !18
  %24 = mul i32 %18, 192, !dbg !19
  %25 = add i32 %.decomposed, %24, !dbg !20
  %26 = mul i32 %20, 184512, !dbg !21
  %27 = mul i32 %22, 184512, !dbg !21
  %28 = add i32 %25, %26, !dbg !22
  %29 = add i32 %27, %.decomposed41, !dbg !20
  %30 = add i32 %29, %24, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = sext i32 %30 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = and i1 %19, %16, !dbg !24
  %36 = and i1 %17, %19, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %35) #4, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %36) #4, !dbg !25
  %39 = sext i32 %.decomposed to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !26
  %41 = sext i32 %.decomposed41 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %16) #4, !dbg !27
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %17) #4, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !28
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %16) #4, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = bitcast i32 %49 to float, !dbg !29
  %54 = bitcast i32 %50 to float, !dbg !29
  %55 = bitcast i32 %51 to float, !dbg !29
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %17) #4, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = bitcast i32 %58 to float, !dbg !29
  %63 = bitcast i32 %59 to float, !dbg !29
  %64 = bitcast i32 %60 to float, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %16) #4, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %17) #4, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !32
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %16) #4, !dbg !33
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %17) #4, !dbg !33
  %73 = fadd float %52, 0x3F50624DE0000000, !dbg !34
  %74 = fadd float %53, 0x3F50624DE0000000, !dbg !34
  %75 = fadd float %54, 0x3F50624DE0000000, !dbg !34
  %76 = fadd float %55, 0x3F50624DE0000000, !dbg !34
  %77 = fadd float %61, 0x3F50624DE0000000, !dbg !34
  %78 = fadd float %62, 0x3F50624DE0000000, !dbg !34
  %79 = fadd float %63, 0x3F50624DE0000000, !dbg !34
  %80 = fadd float %64, 0x3F50624DE0000000, !dbg !34
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %81, 0, !dbg !35
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %82, 0, !dbg !35
  br i1 %.not.i, label %88, label %83, !dbg !35

83:                                               ; preds = %8
  br i1 %.not1.i, label %86, label %84, !dbg !35

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

88:                                               ; preds = %8
  br i1 %.not1.i, label %91, label %89, !dbg !35

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !35
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i5 = icmp eq i32 %93, 0, !dbg !35
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i8 = icmp eq i32 %94, 0, !dbg !35
  br i1 %.not.i5, label %100, label %95, !dbg !35

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %98, label %96, !dbg !35

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit9, !dbg !35

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit9, !dbg !35

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %103, label %101, !dbg !35

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit9, !dbg !35

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit9, !dbg !35

__nv_sqrtf.exit9:                                 ; preds = %96, %98, %101, %103
  %.0.i7 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i10 = icmp eq i32 %105, 0, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i13 = icmp eq i32 %106, 0, !dbg !35
  br i1 %.not.i10, label %112, label %107, !dbg !35

107:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %110, label %108, !dbg !35

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

112:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %115, label %113, !dbg !35

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

__nv_sqrtf.exit14:                                ; preds = %108, %110, %113, %115
  %.0.i12 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !35
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i15 = icmp eq i32 %117, 0, !dbg !35
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i18 = icmp eq i32 %118, 0, !dbg !35
  br i1 %.not.i15, label %124, label %119, !dbg !35

119:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %122, label %120, !dbg !35

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

124:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %127, label %125, !dbg !35

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

__nv_sqrtf.exit19:                                ; preds = %120, %122, %125, %127
  %.0.i17 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !35
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i20 = icmp eq i32 %129, 0, !dbg !35
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i23 = icmp eq i32 %130, 0, !dbg !35
  br i1 %.not.i20, label %136, label %131, !dbg !35

131:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %134, label %132, !dbg !35

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

136:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %139, label %137, !dbg !35

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

__nv_sqrtf.exit24:                                ; preds = %132, %134, %137, %139
  %.0.i22 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i25 = icmp eq i32 %141, 0, !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i28 = icmp eq i32 %142, 0, !dbg !35
  br i1 %.not.i25, label %148, label %143, !dbg !35

143:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %146, label %144, !dbg !35

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

148:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %151, label %149, !dbg !35

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

__nv_sqrtf.exit29:                                ; preds = %144, %146, %149, %151
  %.0.i27 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i30 = icmp eq i32 %153, 0, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i33 = icmp eq i32 %154, 0, !dbg !35
  br i1 %.not.i30, label %160, label %155, !dbg !35

155:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %158, label %156, !dbg !35

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit34, !dbg !35

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit34, !dbg !35

160:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %163, label %161, !dbg !35

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit34, !dbg !35

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit34, !dbg !35

__nv_sqrtf.exit34:                                ; preds = %156, %158, %161, %163
  %.0.i32 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i35 = icmp eq i32 %165, 0, !dbg !35
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i38 = icmp eq i32 %166, 0, !dbg !35
  br i1 %.not.i35, label %172, label %167, !dbg !35

167:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %170, label %168, !dbg !35

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit39, !dbg !35

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit39, !dbg !35

172:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %175, label %173, !dbg !35

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit39, !dbg !35

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit39, !dbg !35

__nv_sqrtf.exit39:                                ; preds = %168, %170, %173, %175
  %.0.i37 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !35
  %177 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %178 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %179 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %180 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %181 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %182 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %183 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %184 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %185 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %186 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %187 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %188 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %189 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %190 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %191 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %192 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %193 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !33
  %194 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !33
  %195 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !33
  %196 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !33
  %198 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !33
  %199 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !33
  %200 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !33
  %201 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %203 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %204 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %205 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !31
  %206 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !31
  %207 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !31
  %208 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !31
  %209 = and i32 %11, 127, !dbg !12
  %210 = or disjoint i32 %209, %10, !dbg !13
  %211 = or disjoint i32 %210, 896, !dbg !13
  %212 = icmp slt i32 %10, 0, !dbg !14
  %213 = and i1 %19, %212, !dbg !24
  %214 = or disjoint i32 %210, 768, !dbg !13
  %215 = or disjoint i32 %210, 640, !dbg !13
  %216 = icmp slt i32 %215, 768, !dbg !14
  %217 = and i1 %19, %216, !dbg !24
  %218 = or disjoint i32 %210, 512, !dbg !13
  %219 = icmp slt i32 %218, 768, !dbg !14
  %220 = and i1 %19, %219, !dbg !24
  %221 = or disjoint i32 %209, 384, !dbg !12
  %222 = or disjoint i32 %10, %221, !dbg !13
  %223 = icmp slt i32 %222, 768, !dbg !14
  %224 = and i1 %19, %223, !dbg !24
  %225 = or disjoint i32 %209, 256, !dbg !12
  %226 = or disjoint i32 %10, %225, !dbg !13
  %227 = icmp slt i32 %226, 768, !dbg !14
  %228 = and i1 %19, %227, !dbg !24
  %229 = or disjoint i32 %209, 128, !dbg !12
  %230 = or disjoint i32 %10, %229, !dbg !13
  %231 = icmp slt i32 %230, 768, !dbg !14
  %232 = and i1 %19, %231, !dbg !24
  %233 = icmp slt i32 %210, 768, !dbg !14
  %234 = and i1 %19, %233, !dbg !24
  %.frozen42 = freeze i32 %211, !dbg !17
  %235 = sdiv i32 %.frozen42, 192, !dbg !17
  %.frozen44 = freeze i32 %214, !dbg !17
  %236 = sdiv i32 %.frozen44, 192, !dbg !17
  %.frozen46 = freeze i32 %215, !dbg !17
  %237 = sdiv i32 %.frozen46, 192, !dbg !17
  %.frozen48 = freeze i32 %218, !dbg !17
  %238 = sdiv i32 %.frozen48, 192, !dbg !17
  %.frozen50 = freeze i32 %222, !dbg !17
  %239 = sdiv i32 %.frozen50, 192, !dbg !17
  %.frozen52 = freeze i32 %226, !dbg !17
  %240 = sdiv i32 %.frozen52, 192, !dbg !17
  %.frozen54 = freeze i32 %230, !dbg !17
  %241 = sdiv i32 %.frozen54, 192, !dbg !17
  %.frozen56 = freeze i32 %210, !dbg !17
  %242 = sdiv i32 %.frozen56, 192, !dbg !17
  %243 = mul i32 %235, 192, !dbg !18
  %.decomposed43 = sub i32 %.frozen42, %243, !dbg !18
  %244 = mul i32 %236, 192, !dbg !18
  %.decomposed45 = sub i32 %.frozen44, %244, !dbg !18
  %245 = mul i32 %237, 192, !dbg !18
  %.decomposed47 = sub i32 %.frozen46, %245, !dbg !18
  %246 = mul i32 %238, 192, !dbg !18
  %.decomposed49 = sub i32 %.frozen48, %246, !dbg !18
  %247 = mul i32 %239, 192, !dbg !18
  %.decomposed51 = sub i32 %.frozen50, %247, !dbg !18
  %248 = mul i32 %240, 192, !dbg !18
  %.decomposed53 = sub i32 %.frozen52, %248, !dbg !18
  %249 = mul i32 %241, 192, !dbg !18
  %.decomposed55 = sub i32 %.frozen54, %249, !dbg !18
  %250 = mul i32 %242, 192, !dbg !18
  %.decomposed57 = sub i32 %.frozen56, %250, !dbg !18
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !36
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !36
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !36
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !36
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !36
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !36
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !36
  %259 = insertelement <8 x i32> poison, i32 %177, i64 0, !dbg !25
  %260 = insertelement <8 x i32> %259, i32 %179, i64 1, !dbg !25
  %261 = insertelement <8 x i32> %260, i32 %181, i64 2, !dbg !25
  %262 = insertelement <8 x i32> %261, i32 %183, i64 3, !dbg !25
  %263 = insertelement <8 x i32> %262, i32 %185, i64 4, !dbg !25
  %264 = insertelement <8 x i32> %263, i32 %187, i64 5, !dbg !25
  %265 = insertelement <8 x i32> %264, i32 %189, i64 6, !dbg !25
  %266 = insertelement <8 x i32> %265, i32 %191, i64 7, !dbg !25
  %267 = bitcast <8 x i32> %266 to <8 x float>, !dbg !25
  %268 = insertelement <8 x i32> poison, i32 %178, i64 0, !dbg !27
  %269 = insertelement <8 x i32> %268, i32 %180, i64 1, !dbg !27
  %270 = insertelement <8 x i32> %269, i32 %182, i64 2, !dbg !27
  %271 = insertelement <8 x i32> %270, i32 %184, i64 3, !dbg !27
  %272 = insertelement <8 x i32> %271, i32 %186, i64 4, !dbg !27
  %273 = insertelement <8 x i32> %272, i32 %188, i64 5, !dbg !27
  %274 = insertelement <8 x i32> %273, i32 %190, i64 6, !dbg !27
  %275 = insertelement <8 x i32> %274, i32 %192, i64 7, !dbg !27
  %276 = bitcast <8 x i32> %275 to <8 x float>, !dbg !27
  %277 = fsub <8 x float> %267, %276, !dbg !37
  %278 = insertelement <8 x i32> poison, i32 %193, i64 0, !dbg !33
  %279 = insertelement <8 x i32> %278, i32 %194, i64 1, !dbg !33
  %280 = insertelement <8 x i32> %279, i32 %195, i64 2, !dbg !33
  %281 = insertelement <8 x i32> %280, i32 %196, i64 3, !dbg !33
  %282 = insertelement <8 x i32> %281, i32 %197, i64 4, !dbg !33
  %283 = insertelement <8 x i32> %282, i32 %198, i64 5, !dbg !33
  %284 = insertelement <8 x i32> %283, i32 %199, i64 6, !dbg !33
  %285 = insertelement <8 x i32> %284, i32 %200, i64 7, !dbg !33
  %286 = bitcast <8 x i32> %285 to <8 x float>, !dbg !33
  %287 = insertelement <8 x i32> poison, i32 %201, i64 0, !dbg !31
  %288 = insertelement <8 x i32> %287, i32 %202, i64 1, !dbg !31
  %289 = insertelement <8 x i32> %288, i32 %203, i64 2, !dbg !31
  %290 = insertelement <8 x i32> %289, i32 %204, i64 3, !dbg !31
  %291 = insertelement <8 x i32> %290, i32 %205, i64 4, !dbg !31
  %292 = insertelement <8 x i32> %291, i32 %206, i64 5, !dbg !31
  %293 = insertelement <8 x i32> %292, i32 %207, i64 6, !dbg !31
  %294 = insertelement <8 x i32> %293, i32 %208, i64 7, !dbg !31
  %295 = bitcast <8 x i32> %294 to <8 x float>, !dbg !31
  %296 = insertelement <8 x float> poison, float %258, i64 0, !dbg !38
  %297 = insertelement <8 x float> %296, float %257, i64 1, !dbg !38
  %298 = insertelement <8 x float> %297, float %256, i64 2, !dbg !38
  %299 = insertelement <8 x float> %298, float %255, i64 3, !dbg !38
  %300 = insertelement <8 x float> %299, float %254, i64 4, !dbg !38
  %301 = insertelement <8 x float> %300, float %253, i64 5, !dbg !38
  %302 = insertelement <8 x float> %301, float %252, i64 6, !dbg !38
  %303 = insertelement <8 x float> %302, float %251, i64 7, !dbg !38
  %304 = fmul <8 x float> %277, %303, !dbg !38
  %305 = fmul <8 x float> %304, %295, !dbg !39
  %306 = fadd <8 x float> %305, %286, !dbg !40
  %307 = fcmp olt <8 x float> %306, zeroinitializer, !dbg !41
  %308 = extractelement <8 x i1> %307, i64 7, !dbg !45
  %309 = extractelement <8 x float> %306, i64 7, !dbg !45
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !45
  %311 = extractelement <8 x i1> %307, i64 6, !dbg !45
  %312 = extractelement <8 x float> %306, i64 6, !dbg !45
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !45
  %314 = extractelement <8 x i1> %307, i64 5, !dbg !45
  %315 = extractelement <8 x float> %306, i64 5, !dbg !45
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !45
  %317 = extractelement <8 x i1> %307, i64 4, !dbg !45
  %318 = extractelement <8 x float> %306, i64 4, !dbg !45
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !45
  %320 = extractelement <8 x i1> %307, i64 3, !dbg !45
  %321 = extractelement <8 x float> %306, i64 3, !dbg !45
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !45
  %323 = extractelement <8 x i1> %307, i64 2, !dbg !45
  %324 = extractelement <8 x float> %306, i64 2, !dbg !45
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !45
  %326 = extractelement <8 x i1> %307, i64 1, !dbg !45
  %327 = extractelement <8 x float> %306, i64 1, !dbg !45
  %328 = select i1 %326, float 0.000000e+00, float %327, !dbg !45
  %329 = extractelement <8 x i1> %307, i64 0, !dbg !45
  %330 = extractelement <8 x float> %306, i64 0, !dbg !45
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !45
  %332 = mul nsw i32 %.decomposed57, 961, !dbg !46
  %333 = mul nsw i32 %.decomposed55, 961, !dbg !46
  %334 = mul nsw i32 %.decomposed53, 961, !dbg !46
  %335 = mul nsw i32 %.decomposed51, 961, !dbg !46
  %336 = mul nsw i32 %.decomposed49, 961, !dbg !46
  %337 = mul nsw i32 %.decomposed47, 961, !dbg !46
  %338 = mul nsw i32 %.decomposed45, 961, !dbg !46
  %339 = mul nsw i32 %.decomposed43, 961, !dbg !46
  %340 = add i32 %332, %18, !dbg !47
  %341 = add i32 %333, %18, !dbg !47
  %342 = add i32 %334, %18, !dbg !47
  %343 = add i32 %335, %18, !dbg !47
  %344 = add i32 %336, %18, !dbg !47
  %345 = add i32 %337, %18, !dbg !47
  %346 = add i32 %338, %18, !dbg !47
  %347 = add i32 %339, %18, !dbg !47
  %348 = mul i32 %242, 1476096, !dbg !48
  %349 = mul i32 %241, 1476096, !dbg !48
  %350 = mul i32 %240, 1476096, !dbg !48
  %351 = mul i32 %239, 1476096, !dbg !48
  %352 = mul i32 %238, 1476096, !dbg !48
  %353 = mul i32 %237, 1476096, !dbg !48
  %354 = mul i32 %236, 1476096, !dbg !48
  %355 = mul i32 %235, 1476096, !dbg !48
  %356 = add i32 %340, %348, !dbg !49
  %357 = add i32 %341, %349, !dbg !49
  %358 = add i32 %342, %350, !dbg !49
  %359 = add i32 %343, %351, !dbg !49
  %360 = add i32 %344, %352, !dbg !49
  %361 = add i32 %345, %353, !dbg !49
  %362 = add i32 %346, %354, !dbg !49
  %363 = add i32 %347, %355, !dbg !49
  %364 = sext i32 %356 to i64, !dbg !50
  %365 = getelementptr float, ptr addrspace(1) %5, i64 %364, !dbg !50
  %366 = sext i32 %357 to i64, !dbg !50
  %367 = getelementptr float, ptr addrspace(1) %5, i64 %366, !dbg !50
  %368 = sext i32 %358 to i64, !dbg !50
  %369 = getelementptr float, ptr addrspace(1) %5, i64 %368, !dbg !50
  %370 = sext i32 %359 to i64, !dbg !50
  %371 = getelementptr float, ptr addrspace(1) %5, i64 %370, !dbg !50
  %372 = sext i32 %360 to i64, !dbg !50
  %373 = getelementptr float, ptr addrspace(1) %5, i64 %372, !dbg !50
  %374 = sext i32 %361 to i64, !dbg !50
  %375 = getelementptr float, ptr addrspace(1) %5, i64 %374, !dbg !50
  %376 = sext i32 %362 to i64, !dbg !50
  %377 = getelementptr float, ptr addrspace(1) %5, i64 %376, !dbg !50
  %378 = sext i32 %363 to i64, !dbg !50
  %379 = getelementptr float, ptr addrspace(1) %5, i64 %378, !dbg !50
  %.idx = shl nuw nsw i32 %13, 3, !dbg !51
  %380 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !51
  %381 = bitcast float %310 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 true) #4, !dbg !51
  %382 = shl nuw nsw i32 %13, 1, !dbg !51
  %383 = or disjoint i32 %382, 2, !dbg !51
  %384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %383, !dbg !51
  %385 = bitcast float %313 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !51
  %386 = or disjoint i32 %382, 4, !dbg !51
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %386, !dbg !51
  %388 = bitcast float %316 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 true) #4, !dbg !51
  %389 = or disjoint i32 %382, 6, !dbg !51
  %390 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %389, !dbg !51
  %391 = bitcast float %319 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %391, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %.idx1 = shl nuw nsw i32 %209, 3, !dbg !51
  %392 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !51
  %393 = load i32, ptr addrspace(3) %392, align 8, !dbg !51
  %.idx2 = shl nuw nsw i32 %229, 3, !dbg !51
  %394 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !51
  %395 = load i32, ptr addrspace(3) %394, align 8, !dbg !51
  %.idx3 = shl nuw nsw i32 %225, 3, !dbg !51
  %396 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !51
  %397 = load i32, ptr addrspace(3) %396, align 8, !dbg !51
  %.idx4 = shl nuw nsw i32 %221, 3, !dbg !51
  %398 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !51
  %399 = load i32, ptr addrspace(3) %398, align 8, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %400 = bitcast float %322 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %400, i1 true) #4, !dbg !51
  %401 = bitcast float %325 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %401, i1 true) #4, !dbg !51
  %402 = bitcast float %328 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %402, i1 true) #4, !dbg !51
  %403 = bitcast float %331 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %403, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %404 = load i32, ptr addrspace(3) %392, align 8, !dbg !51
  %405 = load i32, ptr addrspace(3) %394, align 8, !dbg !51
  %406 = load i32, ptr addrspace(3) %396, align 8, !dbg !51
  %407 = load i32, ptr addrspace(3) %398, align 8, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %393, ptr addrspace(1) %365, i1 %234) #4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %395, ptr addrspace(1) %367, i1 %232) #4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %397, ptr addrspace(1) %369, i1 %228) #4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %399, ptr addrspace(1) %371, i1 %224) #4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %404, ptr addrspace(1) %373, i1 %220) #4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %405, ptr addrspace(1) %375, i1 %217) #4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %406, ptr addrspace(1) %377, i1 %213) #4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %407, ptr addrspace(1) %379, i1 %213) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c242biigmsfxsiaevfhiojy5asnac2lmkv2y5flpt6eudfbbthr3.py", directory: "inductor_cache/24")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 39, scope: !7)
!20 = !DILocation(line: 31, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 51, scope: !7)
!22 = !DILocation(line: 31, column: 44, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 64, scope: !7)
!25 = !DILocation(line: 31, column: 56, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 26, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 48, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 49, column: 34, scope: !7)
!47 = !DILocation(line: 49, column: 30, scope: !7)
!48 = !DILocation(line: 49, column: 47, scope: !7)
!49 = !DILocation(line: 49, column: 39, scope: !7)
!50 = !DILocation(line: 49, column: 25, scope: !7)
!51 = !DILocation(line: 49, column: 59, scope: !7)
!52 = !DILocation(line: 49, column: 4, scope: !7)
