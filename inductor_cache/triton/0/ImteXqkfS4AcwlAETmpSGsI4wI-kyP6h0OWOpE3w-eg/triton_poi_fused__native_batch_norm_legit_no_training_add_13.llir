; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 16, !dbg !13
  %17 = icmp slt i32 %15, 196, !dbg !14
  %18 = icmp slt i32 %16, 196, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = shl i32 %12, 2, !dbg !17
  %22 = and i32 %21, 28, !dbg !17
  %23 = or disjoint i32 %20, %22, !dbg !18
  %24 = icmp slt i32 %23, 32, !dbg !19
  %25 = shl i32 %15, 5, !dbg !20
  %26 = shl i32 %16, 5, !dbg !20
  %27 = add i32 %23, %25, !dbg !21
  %28 = add i32 %23, %26, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = and i1 %17, %24, !dbg !23
  %34 = and i1 %18, %24, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %33) #4, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %34) #4, !dbg !26
  %41 = sext i32 %23 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !29
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !30
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !30
  %50 = bitcast i32 %46 to float, !dbg !30
  %51 = bitcast i32 %47 to float, !dbg !30
  %52 = bitcast i32 %48 to float, !dbg !30
  %53 = bitcast i32 %49 to float, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !31
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %24) #4, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !33
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %24) #4, !dbg !34
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !35
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !35
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %62, 0, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %63, 0, !dbg !36
  br i1 %.not.i, label %69, label %64, !dbg !36

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !36

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %9
  br i1 %.not1.i, label %72, label %70, !dbg !36

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i4 = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i7 = icmp eq i32 %75, 0, !dbg !36
  br i1 %.not.i4, label %81, label %76, !dbg !36

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

__nv_sqrtf.exit8:                                 ; preds = %77, %79, %82, %84
  %.0.i6 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i9 = icmp eq i32 %86, 0, !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i12 = icmp eq i32 %87, 0, !dbg !36
  br i1 %.not.i9, label %93, label %88, !dbg !36

88:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

93:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %96, label %94, !dbg !36

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

__nv_sqrtf.exit13:                                ; preds = %89, %91, %94, %96
  %.0.i11 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i14 = icmp eq i32 %98, 0, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i17 = icmp eq i32 %99, 0, !dbg !36
  br i1 %.not.i14, label %105, label %100, !dbg !36

100:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %103, label %101, !dbg !36

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

105:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %108, label %106, !dbg !36

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

__nv_sqrtf.exit18:                                ; preds = %101, %103, %106, %108
  %.0.i16 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %111 = bitcast i32 %110 to float, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = fsub float %111, %113, !dbg !37
  %115 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %116 = bitcast i32 %115 to float, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = fsub float %116, %118, !dbg !37
  %120 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = fsub float %121, %123, !dbg !37
  %125 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %126 = bitcast i32 %125 to float, !dbg !26
  %127 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %128 = bitcast i32 %127 to float, !dbg !28
  %129 = fsub float %126, %128, !dbg !37
  %130 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %131 = bitcast i32 %130 to float, !dbg !26
  %132 = fsub float %131, %113, !dbg !37
  %133 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %134 = bitcast i32 %133 to float, !dbg !26
  %135 = fsub float %134, %118, !dbg !37
  %136 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %137 = bitcast i32 %136 to float, !dbg !26
  %138 = fsub float %137, %123, !dbg !37
  %139 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %140 = bitcast i32 %139 to float, !dbg !26
  %141 = fsub float %140, %128, !dbg !37
  %142 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !34
  %143 = bitcast i32 %142 to float, !dbg !34
  %144 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !34
  %145 = bitcast i32 %144 to float, !dbg !34
  %146 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !34
  %147 = bitcast i32 %146 to float, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !34
  %149 = bitcast i32 %148 to float, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !32
  %151 = bitcast i32 %150 to float, !dbg !32
  %152 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !32
  %153 = bitcast i32 %152 to float, !dbg !32
  %154 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !32
  %155 = bitcast i32 %154 to float, !dbg !32
  %156 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !32
  %157 = bitcast i32 %156 to float, !dbg !32
  %158 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %159 = bitcast i32 %158 to float, !dbg !24
  %160 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %161 = bitcast i32 %160 to float, !dbg !24
  %162 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %163 = bitcast i32 %162 to float, !dbg !24
  %164 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %165 = bitcast i32 %164 to float, !dbg !24
  %166 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %167 = bitcast i32 %166 to float, !dbg !24
  %168 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %169 = bitcast i32 %168 to float, !dbg !24
  %170 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %171 = bitcast i32 %170 to float, !dbg !24
  %172 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %173 = bitcast i32 %172 to float, !dbg !24
  %174 = and i32 %12, 31, !dbg !17
  %175 = or disjoint i32 %20, %174, !dbg !18
  %176 = icmp slt i32 %175, 32, !dbg !19
  %.lobit3 = lshr i32 %12, 5, !dbg !12
  %177 = and i32 %.lobit3, 3, !dbg !12
  %178 = or disjoint i32 %177, %11, !dbg !13
  %179 = or disjoint i32 %178, 28, !dbg !13
  %180 = icmp slt i32 %179, 196, !dbg !14
  %181 = and i1 %180, %176, !dbg !23
  %182 = or disjoint i32 %178, 24, !dbg !13
  %183 = icmp slt i32 %182, 196, !dbg !14
  %184 = and i1 %183, %176, !dbg !23
  %185 = or disjoint i32 %178, 20, !dbg !13
  %186 = icmp slt i32 %185, 196, !dbg !14
  %187 = and i1 %186, %176, !dbg !23
  %188 = or disjoint i32 %178, 16, !dbg !13
  %189 = icmp slt i32 %188, 196, !dbg !14
  %190 = and i1 %189, %176, !dbg !23
  %191 = or disjoint i32 %178, 12, !dbg !13
  %192 = icmp slt i32 %191, 196, !dbg !14
  %193 = and i1 %192, %176, !dbg !23
  %194 = or disjoint i32 %178, 8, !dbg !13
  %195 = icmp slt i32 %194, 196, !dbg !14
  %196 = and i1 %195, %176, !dbg !23
  %197 = or disjoint i32 %178, 4, !dbg !13
  %198 = icmp slt i32 %197, 196, !dbg !14
  %199 = and i1 %198, %176, !dbg !23
  %200 = icmp slt i32 %178, 196, !dbg !14
  %201 = and i1 %200, %176, !dbg !23
  %.frozen = freeze i32 %179, !dbg !38
  %202 = sdiv i32 %.frozen, 49, !dbg !38
  %.frozen19 = freeze i32 %182, !dbg !38
  %203 = sdiv i32 %.frozen19, 49, !dbg !38
  %.frozen21 = freeze i32 %185, !dbg !38
  %204 = sdiv i32 %.frozen21, 49, !dbg !38
  %.frozen23 = freeze i32 %188, !dbg !38
  %205 = sdiv i32 %.frozen23, 49, !dbg !38
  %.frozen25 = freeze i32 %191, !dbg !38
  %206 = sdiv i32 %.frozen25, 49, !dbg !38
  %.frozen27 = freeze i32 %194, !dbg !38
  %207 = sdiv i32 %.frozen27, 49, !dbg !38
  %.frozen29 = freeze i32 %197, !dbg !38
  %208 = sdiv i32 %.frozen29, 49, !dbg !38
  %.frozen31 = freeze i32 %178, !dbg !38
  %209 = sdiv i32 %.frozen31, 49, !dbg !38
  %210 = mul i32 %202, 49, !dbg !39
  %.decomposed = sub i32 %.frozen, %210, !dbg !39
  %211 = mul i32 %203, 49, !dbg !39
  %.decomposed20 = sub i32 %.frozen19, %211, !dbg !39
  %212 = mul i32 %204, 49, !dbg !39
  %.decomposed22 = sub i32 %.frozen21, %212, !dbg !39
  %213 = mul i32 %205, 49, !dbg !39
  %.decomposed24 = sub i32 %.frozen23, %213, !dbg !39
  %214 = mul i32 %206, 49, !dbg !39
  %.decomposed26 = sub i32 %.frozen25, %214, !dbg !39
  %215 = mul i32 %207, 49, !dbg !39
  %.decomposed28 = sub i32 %.frozen27, %215, !dbg !39
  %216 = mul i32 %208, 49, !dbg !39
  %.decomposed30 = sub i32 %.frozen29, %216, !dbg !39
  %217 = mul i32 %209, 49, !dbg !39
  %.decomposed32 = sub i32 %.frozen31, %217, !dbg !39
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !40
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !40
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !40
  %222 = fmul float %141, %218, !dbg !41
  %223 = fmul float %138, %219, !dbg !41
  %224 = fmul float %135, %220, !dbg !41
  %225 = fmul float %132, %221, !dbg !41
  %226 = fmul float %129, %218, !dbg !41
  %227 = fmul float %124, %219, !dbg !41
  %228 = fmul float %119, %220, !dbg !41
  %229 = fmul float %114, %221, !dbg !41
  %230 = fmul float %222, %157, !dbg !42
  %231 = fmul float %223, %155, !dbg !42
  %232 = fmul float %224, %153, !dbg !42
  %233 = fmul float %225, %151, !dbg !42
  %234 = fmul float %226, %157, !dbg !42
  %235 = fmul float %227, %155, !dbg !42
  %236 = fmul float %228, %153, !dbg !42
  %237 = fmul float %229, %151, !dbg !42
  %238 = fadd float %230, %149, !dbg !43
  %239 = fadd float %231, %147, !dbg !43
  %240 = fadd float %232, %145, !dbg !43
  %241 = fadd float %233, %143, !dbg !43
  %242 = fadd float %234, %149, !dbg !43
  %243 = fadd float %235, %147, !dbg !43
  %244 = fadd float %236, %145, !dbg !43
  %245 = fadd float %237, %143, !dbg !43
  %246 = fadd float %238, %173, !dbg !44
  %247 = fadd float %239, %171, !dbg !44
  %248 = fadd float %240, %169, !dbg !44
  %249 = fadd float %241, %167, !dbg !44
  %250 = fadd float %242, %165, !dbg !44
  %251 = fadd float %243, %163, !dbg !44
  %252 = fadd float %244, %161, !dbg !44
  %253 = fadd float %245, %159, !dbg !44
  %254 = mul i32 %175, 49, !dbg !45
  %255 = add i32 %254, %.decomposed32, !dbg !46
  %256 = add i32 %254, %.decomposed30, !dbg !46
  %257 = add i32 %254, %.decomposed28, !dbg !46
  %258 = add i32 %254, %.decomposed26, !dbg !46
  %259 = add i32 %254, %.decomposed24, !dbg !46
  %260 = add i32 %254, %.decomposed22, !dbg !46
  %261 = add i32 %254, %.decomposed20, !dbg !46
  %262 = add i32 %254, %.decomposed, !dbg !46
  %263 = mul i32 %209, 1568, !dbg !47
  %264 = mul i32 %208, 1568, !dbg !47
  %265 = mul i32 %207, 1568, !dbg !47
  %266 = mul i32 %206, 1568, !dbg !47
  %267 = mul i32 %205, 1568, !dbg !47
  %268 = mul i32 %204, 1568, !dbg !47
  %269 = mul i32 %203, 1568, !dbg !47
  %270 = mul i32 %202, 1568, !dbg !47
  %271 = add i32 %255, %263, !dbg !48
  %272 = add i32 %256, %264, !dbg !48
  %273 = add i32 %257, %265, !dbg !48
  %274 = add i32 %258, %266, !dbg !48
  %275 = add i32 %259, %267, !dbg !48
  %276 = add i32 %260, %268, !dbg !48
  %277 = add i32 %261, %269, !dbg !48
  %278 = add i32 %262, %270, !dbg !48
  %279 = sext i32 %271 to i64, !dbg !49
  %280 = getelementptr float, ptr addrspace(1) %6, i64 %279, !dbg !49
  %281 = sext i32 %272 to i64, !dbg !49
  %282 = getelementptr float, ptr addrspace(1) %6, i64 %281, !dbg !49
  %283 = sext i32 %273 to i64, !dbg !49
  %284 = getelementptr float, ptr addrspace(1) %6, i64 %283, !dbg !49
  %285 = sext i32 %274 to i64, !dbg !49
  %286 = getelementptr float, ptr addrspace(1) %6, i64 %285, !dbg !49
  %287 = sext i32 %275 to i64, !dbg !49
  %288 = getelementptr float, ptr addrspace(1) %6, i64 %287, !dbg !49
  %289 = sext i32 %276 to i64, !dbg !49
  %290 = getelementptr float, ptr addrspace(1) %6, i64 %289, !dbg !49
  %291 = sext i32 %277 to i64, !dbg !49
  %292 = getelementptr float, ptr addrspace(1) %6, i64 %291, !dbg !49
  %293 = sext i32 %278 to i64, !dbg !49
  %294 = getelementptr float, ptr addrspace(1) %6, i64 %293, !dbg !49
  %295 = and i32 %21, 508, !dbg !50
  %296 = and i32 %12, 127, !dbg !50
  %297 = lshr i32 %21, 3, !dbg !50
  %298 = and i32 %297, 60, !dbg !50
  %299 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %298, !dbg !50
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %295, !dbg !50
  %301 = bitcast float %246 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !50
  %302 = or disjoint i32 %295, 1, !dbg !50
  %303 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %302, !dbg !50
  %304 = bitcast float %247 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !50
  %305 = or disjoint i32 %295, 2, !dbg !50
  %306 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %305, !dbg !50
  %307 = bitcast float %248 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !50
  %308 = or disjoint i32 %295, 3, !dbg !50
  %309 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %308, !dbg !50
  %310 = bitcast float %249 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %311 = lshr i32 %296, 5, !dbg !50
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !50
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %296, !dbg !50
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !50
  %315 = or disjoint i32 %296, 128, !dbg !50
  %316 = lshr i32 %315, 5, !dbg !50
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !50
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !50
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !50
  %320 = or disjoint i32 %296, 256, !dbg !50
  %321 = lshr i32 %320, 5, !dbg !50
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !50
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %320, !dbg !50
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !50
  %325 = or disjoint i32 %296, 384, !dbg !50
  %326 = lshr i32 %325, 5, !dbg !50
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !50
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %325, !dbg !50
  %329 = load i32, ptr addrspace(3) %328, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %330 = bitcast float %250 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %330, i1 true) #4, !dbg !50
  %331 = bitcast float %251 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %331, i1 true) #4, !dbg !50
  %332 = bitcast float %252 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %332, i1 true) #4, !dbg !50
  %333 = bitcast float %253 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %333, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %334 = load i32, ptr addrspace(3) %313, align 4, !dbg !50
  %335 = load i32, ptr addrspace(3) %318, align 4, !dbg !50
  %336 = load i32, ptr addrspace(3) %323, align 4, !dbg !50
  %337 = load i32, ptr addrspace(3) %328, align 4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %314, ptr addrspace(1) %280, i1 %201) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %282, i1 %199) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %284, i1 %196) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %329, ptr addrspace(1) %286, i1 %193) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %288, i1 %190) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %335, ptr addrspace(1) %290, i1 %187) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %336, ptr addrspace(1) %292, i1 %184) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %337, ptr addrspace(1) %294, i1 %181) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cikyy5aja7pdiut3bjd4n5jfjgwyookk45xt4jvq7bf2i5mdsvah.py", directory: "inductor_cache/ik")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 19, scope: !7)
!45 = !DILocation(line: 50, column: 33, scope: !7)
!46 = !DILocation(line: 50, column: 30, scope: !7)
!47 = !DILocation(line: 50, column: 43, scope: !7)
!48 = !DILocation(line: 50, column: 38, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 55, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
