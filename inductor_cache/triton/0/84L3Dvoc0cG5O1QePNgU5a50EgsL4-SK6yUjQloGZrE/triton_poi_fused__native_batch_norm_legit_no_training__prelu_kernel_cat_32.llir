; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %16 = shl i32 %15, 5, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = lshr i32 %17, 3, !dbg !12
  %19 = and i32 %18, 15, !dbg !12
  %20 = or disjoint i32 %19, 16, !dbg !12
  %21 = shl i32 %17, 2, !dbg !12
  %22 = and i32 %21, 28, !dbg !12
  %23 = or disjoint i32 %16, %19, !dbg !13
  %24 = or disjoint i32 %16, %20, !dbg !13
  %25 = icmp slt i32 %23, 256, !dbg !14
  %26 = icmp slt i32 %24, 256, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %28 = shl i32 %27, 5, !dbg !16
  %29 = or disjoint i32 %28, %22, !dbg !17
  %30 = icmp slt i32 %29, 256, !dbg !18
  %31 = sdiv i32 %23, 64, !dbg !19
  %32 = sdiv i32 %24, 64, !dbg !19
  %33 = sext i32 %29 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %30) #4, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %30) #4, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %30) #4, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %30) #4, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !28
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %30) #4, !dbg !29
  %52 = icmp slt i32 %29, 128, !dbg !30
  %53 = shl i32 %23, 7, !dbg !31
  %54 = shl i32 %24, 7, !dbg !31
  %55 = add i32 %53, %29, !dbg !32
  %56 = add i32 %54, %29, !dbg !32
  %57 = sext i32 %55 to i64, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !33
  %59 = sext i32 %56 to i64, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !33
  %61 = and i1 %25, %52, !dbg !34
  %62 = and i1 %26, %52, !dbg !34
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #4, !dbg !35
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #4, !dbg !35
  %65 = add i32 %29, -128, !dbg !36
  %66 = add i32 %65, %53, !dbg !37
  %67 = add i32 %65, %54, !dbg !37
  %68 = sext i32 %66 to i64, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !38
  %70 = sext i32 %67 to i64, !dbg !38
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !38
  %72 = and i32 %27, 134217724, !dbg !39
  %73 = icmp eq i32 %72, 4, !dbg !39
  %74 = and i1 %73, %25, !dbg !40
  %75 = and i1 %73, %26, !dbg !40
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #4, !dbg !41
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !41
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !42
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !42
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #4, !dbg !43
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !43
  %82 = sext i32 %65 to i64, !dbg !44
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !44
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #4, !dbg !45
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !45
  %86 = shl i32 %31, 7, !dbg !46
  %87 = shl i32 %32, 7, !dbg !46
  %88 = add i32 %86, %65, !dbg !47
  %89 = add i32 %87, %65, !dbg !47
  %90 = sext i32 %88 to i64, !dbg !48
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !48
  %92 = sext i32 %89 to i64, !dbg !48
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %92, !dbg !48
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #4, !dbg !49
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !49
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !49
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !49
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !49
  %99 = bitcast i32 %95 to float, !dbg !49
  %100 = bitcast i32 %96 to float, !dbg !49
  %101 = bitcast i32 %97 to float, !dbg !49
  %102 = bitcast i32 %98 to float, !dbg !49
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !49
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !49
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !49
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !49
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !49
  %108 = bitcast i32 %104 to float, !dbg !49
  %109 = bitcast i32 %105 to float, !dbg !49
  %110 = bitcast i32 %106 to float, !dbg !49
  %111 = bitcast i32 %107 to float, !dbg !49
  %112 = fsub float 0.000000e+00, %99, !dbg !50
  %113 = fsub float 0.000000e+00, %100, !dbg !50
  %114 = fsub float 0.000000e+00, %101, !dbg !50
  %115 = fsub float 0.000000e+00, %102, !dbg !50
  %116 = fsub float 0.000000e+00, %108, !dbg !50
  %117 = fsub float 0.000000e+00, %109, !dbg !50
  %118 = fsub float 0.000000e+00, %110, !dbg !50
  %119 = fsub float 0.000000e+00, %111, !dbg !50
  %120 = fmul float %112, 0x3FF7154760000000, !dbg !54
  %121 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %120) #4, !dbg !54
  %122 = fmul float %113, 0x3FF7154760000000, !dbg !54
  %123 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %122) #4, !dbg !54
  %124 = fmul float %114, 0x3FF7154760000000, !dbg !54
  %125 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %124) #4, !dbg !54
  %126 = fmul float %115, 0x3FF7154760000000, !dbg !54
  %127 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %126) #4, !dbg !54
  %128 = fmul float %116, 0x3FF7154760000000, !dbg !54
  %129 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %128) #4, !dbg !54
  %130 = fmul float %117, 0x3FF7154760000000, !dbg !54
  %131 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %130) #4, !dbg !54
  %132 = fmul float %118, 0x3FF7154760000000, !dbg !54
  %133 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %132) #4, !dbg !54
  %134 = fmul float %119, 0x3FF7154760000000, !dbg !54
  %135 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %134) #4, !dbg !54
  %136 = fadd float %121, 1.000000e+00, !dbg !55
  %137 = fadd float %123, 1.000000e+00, !dbg !55
  %138 = fadd float %125, 1.000000e+00, !dbg !55
  %139 = fadd float %127, 1.000000e+00, !dbg !55
  %140 = fadd float %129, 1.000000e+00, !dbg !55
  %141 = fadd float %131, 1.000000e+00, !dbg !55
  %142 = fadd float %133, 1.000000e+00, !dbg !55
  %143 = fadd float %135, 1.000000e+00, !dbg !55
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %136) #4, !dbg !56
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %137) #4, !dbg !56
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %138) #4, !dbg !56
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %139) #4, !dbg !56
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %140) #4, !dbg !56
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %141) #4, !dbg !56
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %142) #4, !dbg !56
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %143) #4, !dbg !56
  %152 = fadd float %42, 0x3EE4F8B580000000, !dbg !57
  %153 = fadd float %43, 0x3EE4F8B580000000, !dbg !57
  %154 = fadd float %44, 0x3EE4F8B580000000, !dbg !57
  %155 = fadd float %45, 0x3EE4F8B580000000, !dbg !57
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i = icmp eq i32 %156, 0, !dbg !58
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i = icmp eq i32 %157, 0, !dbg !58
  br i1 %.not.i, label %163, label %158, !dbg !58

158:                                              ; preds = %14
  br i1 %.not1.i, label %161, label %159, !dbg !58

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

163:                                              ; preds = %14
  br i1 %.not1.i, label %166, label %164, !dbg !58

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %159, %161, %164, %166
  %.0.i = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !58
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i15 = icmp eq i32 %168, 0, !dbg !58
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i18 = icmp eq i32 %169, 0, !dbg !58
  br i1 %.not.i15, label %175, label %170, !dbg !58

170:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %173, label %171, !dbg !58

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #4, !dbg !58
  br label %__nv_sqrtf.exit19, !dbg !58

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #4, !dbg !58
  br label %__nv_sqrtf.exit19, !dbg !58

175:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %178, label %176, !dbg !58

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #4, !dbg !58
  br label %__nv_sqrtf.exit19, !dbg !58

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #4, !dbg !58
  br label %__nv_sqrtf.exit19, !dbg !58

__nv_sqrtf.exit19:                                ; preds = %171, %173, %176, %178
  %.0.i17 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !58
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i20 = icmp eq i32 %180, 0, !dbg !58
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i23 = icmp eq i32 %181, 0, !dbg !58
  br i1 %.not.i20, label %187, label %182, !dbg !58

182:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %185, label %183, !dbg !58

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #4, !dbg !58
  br label %__nv_sqrtf.exit24, !dbg !58

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #4, !dbg !58
  br label %__nv_sqrtf.exit24, !dbg !58

187:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %190, label %188, !dbg !58

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #4, !dbg !58
  br label %__nv_sqrtf.exit24, !dbg !58

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #4, !dbg !58
  br label %__nv_sqrtf.exit24, !dbg !58

__nv_sqrtf.exit24:                                ; preds = %183, %185, %188, %190
  %.0.i22 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !58
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i25 = icmp eq i32 %192, 0, !dbg !58
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i28 = icmp eq i32 %193, 0, !dbg !58
  br i1 %.not.i25, label %199, label %194, !dbg !58

194:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %197, label %195, !dbg !58

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #4, !dbg !58
  br label %__nv_sqrtf.exit29, !dbg !58

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #4, !dbg !58
  br label %__nv_sqrtf.exit29, !dbg !58

199:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %202, label %200, !dbg !58

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #4, !dbg !58
  br label %__nv_sqrtf.exit29, !dbg !58

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #4, !dbg !58
  br label %__nv_sqrtf.exit29, !dbg !58

__nv_sqrtf.exit29:                                ; preds = %195, %197, %200, %202
  %.0.i27 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !58
  %204 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !35
  %205 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !43
  %206 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !45
  %207 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !41
  %208 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !21
  %209 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !35
  %210 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !43
  %211 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !45
  %212 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !41
  %213 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !21
  %214 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !35
  %215 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !43
  %216 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !45
  %217 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !41
  %218 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !21
  %219 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !35
  %220 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !43
  %221 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !45
  %222 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !41
  %223 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !21
  %224 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !35
  %225 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !43
  %226 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !45
  %227 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !41
  %228 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !35
  %229 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !43
  %230 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !45
  %231 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !41
  %232 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !35
  %233 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !43
  %234 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !45
  %235 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !41
  %236 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !35
  %237 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !43
  %238 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !45
  %239 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !41
  %240 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !29
  %241 = bitcast i32 %240 to float, !dbg !29
  %242 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !29
  %243 = bitcast i32 %242 to float, !dbg !29
  %244 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !29
  %245 = bitcast i32 %244 to float, !dbg !29
  %246 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !29
  %247 = bitcast i32 %246 to float, !dbg !29
  %248 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %249 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %250 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %251 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %252 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %253 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %254 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %255 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %256 = or disjoint i32 %16, %22, !dbg !13
  %.frozen = freeze i32 %256, !dbg !19
  %257 = sdiv i32 %.frozen, 64, !dbg !19
  %258 = mul i32 %257, 64, !dbg !59
  %.decomposed = sub i32 %.frozen, %258, !dbg !59
  %259 = or disjoint i32 %28, %20, !dbg !17
  %260 = icmp slt i32 %259, 256, !dbg !18
  %261 = or disjoint i32 %28, %19, !dbg !17
  %262 = icmp slt i32 %261, 256, !dbg !18
  %263 = icmp slt i32 %256, 256, !dbg !14
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !60
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !60
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !60
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !60
  %268 = insertelement <4 x i32> poison, i32 %208, i64 0, !dbg !21
  %269 = insertelement <4 x i32> %268, i32 %213, i64 1, !dbg !21
  %270 = insertelement <4 x i32> %269, i32 %218, i64 2, !dbg !21
  %271 = insertelement <4 x i32> %270, i32 %223, i64 3, !dbg !21
  %272 = bitcast <4 x i32> %271 to <4 x float>, !dbg !21
  %273 = shufflevector <4 x float> %272, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %274 = insertelement <8 x i32> poison, i32 %204, i64 0, !dbg !35
  %275 = insertelement <8 x i32> %274, i32 %209, i64 1, !dbg !35
  %276 = insertelement <8 x i32> %275, i32 %214, i64 2, !dbg !35
  %277 = insertelement <8 x i32> %276, i32 %219, i64 3, !dbg !35
  %278 = insertelement <8 x i32> %277, i32 %224, i64 4, !dbg !35
  %279 = insertelement <8 x i32> %278, i32 %228, i64 5, !dbg !35
  %280 = insertelement <8 x i32> %279, i32 %232, i64 6, !dbg !35
  %281 = insertelement <8 x i32> %280, i32 %236, i64 7, !dbg !35
  %282 = bitcast <8 x i32> %281 to <8 x float>, !dbg !35
  %283 = insertelement <8 x i32> poison, i32 %205, i64 0, !dbg !43
  %284 = insertelement <8 x i32> %283, i32 %210, i64 1, !dbg !43
  %285 = insertelement <8 x i32> %284, i32 %215, i64 2, !dbg !43
  %286 = insertelement <8 x i32> %285, i32 %220, i64 3, !dbg !43
  %287 = insertelement <8 x i32> %286, i32 %225, i64 4, !dbg !43
  %288 = insertelement <8 x i32> %287, i32 %229, i64 5, !dbg !43
  %289 = insertelement <8 x i32> %288, i32 %233, i64 6, !dbg !43
  %290 = insertelement <8 x i32> %289, i32 %237, i64 7, !dbg !43
  %291 = bitcast <8 x i32> %290 to <8 x float>, !dbg !43
  %292 = fcmp ogt <8 x float> %291, zeroinitializer, !dbg !61
  %293 = insertelement <8 x i32> poison, i32 %206, i64 0, !dbg !45
  %294 = insertelement <8 x i32> %293, i32 %211, i64 1, !dbg !45
  %295 = insertelement <8 x i32> %294, i32 %216, i64 2, !dbg !45
  %296 = insertelement <8 x i32> %295, i32 %221, i64 3, !dbg !45
  %297 = insertelement <8 x i32> %296, i32 %226, i64 4, !dbg !45
  %298 = insertelement <8 x i32> %297, i32 %230, i64 5, !dbg !45
  %299 = insertelement <8 x i32> %298, i32 %234, i64 6, !dbg !45
  %300 = insertelement <8 x i32> %299, i32 %238, i64 7, !dbg !45
  %301 = bitcast <8 x i32> %300 to <8 x float>, !dbg !45
  %302 = fmul <8 x float> %291, %301, !dbg !62
  %303 = select <8 x i1> %292, <8 x float> %291, <8 x float> %302, !dbg !63
  %304 = insertelement <8 x float> poison, float %151, i64 0, !dbg !64
  %305 = insertelement <8 x float> %304, float %150, i64 1, !dbg !64
  %306 = insertelement <8 x float> %305, float %149, i64 2, !dbg !64
  %307 = insertelement <8 x float> %306, float %148, i64 3, !dbg !64
  %308 = insertelement <8 x float> %307, float %147, i64 4, !dbg !64
  %309 = insertelement <8 x float> %308, float %146, i64 5, !dbg !64
  %310 = insertelement <8 x float> %309, float %145, i64 6, !dbg !64
  %311 = insertelement <8 x float> %310, float %144, i64 7, !dbg !64
  %312 = fmul <8 x float> %303, %311, !dbg !64
  %313 = insertelement <8 x i32> poison, i32 %207, i64 0, !dbg !41
  %314 = insertelement <8 x i32> %313, i32 %212, i64 1, !dbg !41
  %315 = insertelement <8 x i32> %314, i32 %217, i64 2, !dbg !41
  %316 = insertelement <8 x i32> %315, i32 %222, i64 3, !dbg !41
  %317 = insertelement <8 x i32> %316, i32 %227, i64 4, !dbg !41
  %318 = insertelement <8 x i32> %317, i32 %231, i64 5, !dbg !41
  %319 = insertelement <8 x i32> %318, i32 %235, i64 6, !dbg !41
  %320 = insertelement <8 x i32> %319, i32 %239, i64 7, !dbg !41
  %321 = bitcast <8 x i32> %320 to <8 x float>, !dbg !41
  %322 = fadd <8 x float> %312, %321, !dbg !65
  %323 = insertelement <8 x i1> poison, i1 %52, i64 0, !dbg !66
  %324 = shufflevector <8 x i1> %323, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !66
  %325 = select <8 x i1> %324, <8 x float> %282, <8 x float> %322, !dbg !66
  %326 = fsub <8 x float> %325, %273, !dbg !67
  %327 = insertelement <4 x i32> poison, i32 %248, i64 0, !dbg !27
  %328 = insertelement <4 x i32> %327, i32 %249, i64 1, !dbg !27
  %329 = insertelement <4 x i32> %328, i32 %250, i64 2, !dbg !27
  %330 = insertelement <4 x i32> %329, i32 %251, i64 3, !dbg !27
  %331 = bitcast <4 x i32> %330 to <4 x float>, !dbg !27
  %332 = shufflevector <4 x float> %331, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %333 = insertelement <4 x i32> poison, i32 %252, i64 0, !dbg !25
  %334 = insertelement <4 x i32> %333, i32 %253, i64 1, !dbg !25
  %335 = insertelement <4 x i32> %334, i32 %254, i64 2, !dbg !25
  %336 = insertelement <4 x i32> %335, i32 %255, i64 3, !dbg !25
  %337 = bitcast <4 x i32> %336 to <4 x float>, !dbg !25
  %338 = shufflevector <4 x float> %337, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %339 = insertelement <8 x float> poison, float %267, i64 0, !dbg !68
  %340 = insertelement <8 x float> %339, float %266, i64 1, !dbg !68
  %341 = insertelement <8 x float> %340, float %265, i64 2, !dbg !68
  %342 = insertelement <8 x float> %341, float %264, i64 3, !dbg !68
  %343 = shufflevector <8 x float> %342, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !68
  %344 = fmul <8 x float> %326, %343, !dbg !68
  %345 = fmul <8 x float> %344, %338, !dbg !69
  %346 = fadd <8 x float> %345, %332, !dbg !70
  %347 = fcmp ogt <8 x float> %346, zeroinitializer, !dbg !71
  %348 = extractelement <8 x float> %346, i64 7, !dbg !72
  %349 = fmul float %348, %247, !dbg !73
  %350 = extractelement <8 x float> %346, i64 6, !dbg !72
  %351 = fmul float %350, %245, !dbg !73
  %352 = extractelement <8 x float> %346, i64 5, !dbg !72
  %353 = fmul float %352, %243, !dbg !73
  %354 = extractelement <8 x float> %346, i64 4, !dbg !72
  %355 = fmul float %354, %241, !dbg !73
  %356 = extractelement <8 x float> %346, i64 3, !dbg !72
  %357 = fmul float %356, %247, !dbg !73
  %358 = extractelement <8 x float> %346, i64 2, !dbg !72
  %359 = fmul float %358, %245, !dbg !73
  %360 = extractelement <8 x float> %346, i64 1, !dbg !72
  %361 = fmul float %360, %243, !dbg !73
  %362 = extractelement <8 x float> %346, i64 0, !dbg !72
  %363 = fmul float %362, %241, !dbg !73
  %364 = extractelement <8 x i1> %347, i64 7, !dbg !72
  %365 = select i1 %364, float %348, float %349, !dbg !72
  %366 = extractelement <8 x i1> %347, i64 6, !dbg !72
  %367 = select i1 %366, float %350, float %351, !dbg !72
  %368 = extractelement <8 x i1> %347, i64 5, !dbg !72
  %369 = select i1 %368, float %352, float %353, !dbg !72
  %370 = extractelement <8 x i1> %347, i64 4, !dbg !72
  %371 = select i1 %370, float %354, float %355, !dbg !72
  %372 = extractelement <8 x i1> %347, i64 3, !dbg !72
  %373 = select i1 %372, float %356, float %357, !dbg !72
  %374 = extractelement <8 x i1> %347, i64 2, !dbg !72
  %375 = select i1 %374, float %358, float %359, !dbg !72
  %376 = extractelement <8 x i1> %347, i64 1, !dbg !72
  %377 = select i1 %376, float %360, float %361, !dbg !72
  %378 = extractelement <8 x i1> %347, i64 0, !dbg !72
  %379 = select i1 %378, float %362, float %363, !dbg !72
  %380 = shl i32 %23, 8, !dbg !74
  %381 = shl i32 %24, 8, !dbg !74
  %382 = add i32 %29, %380, !dbg !75
  %383 = add i32 %29, %381, !dbg !75
  %384 = sext i32 %382 to i64, !dbg !76
  %385 = getelementptr float, ptr addrspace(1) %10, i64 %384, !dbg !76
  %386 = sext i32 %383 to i64, !dbg !76
  %387 = getelementptr float, ptr addrspace(1) %10, i64 %386, !dbg !76
  %388 = and i1 %25, %30, !dbg !77
  %389 = and i1 %26, %30, !dbg !77
  %390 = and i1 %263, %262, !dbg !77
  %391 = and i1 %263, %260, !dbg !77
  %bc = bitcast <8 x float> %325 to <8 x i32>, !dbg !78
  %392 = extractelement <8 x i32> %bc, i64 7, !dbg !78
  %bc30 = bitcast <8 x float> %325 to <8 x i32>, !dbg !78
  %393 = extractelement <8 x i32> %bc30, i64 6, !dbg !78
  %bc31 = bitcast <8 x float> %325 to <8 x i32>, !dbg !78
  %394 = extractelement <8 x i32> %bc31, i64 5, !dbg !78
  %bc32 = bitcast <8 x float> %325 to <8 x i32>, !dbg !78
  %395 = extractelement <8 x i32> %bc32, i64 4, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %392, i32 %393, i32 %394, i32 %395, ptr addrspace(1) %385, i1 %388) #4, !dbg !78
  %bc33 = bitcast <8 x float> %325 to <8 x i32>, !dbg !78
  %396 = extractelement <8 x i32> %bc33, i64 3, !dbg !78
  %bc34 = bitcast <8 x float> %325 to <8 x i32>, !dbg !78
  %397 = extractelement <8 x i32> %bc34, i64 2, !dbg !78
  %bc35 = bitcast <8 x float> %325 to <8 x i32>, !dbg !78
  %398 = extractelement <8 x i32> %bc35, i64 1, !dbg !78
  %bc36 = bitcast <8 x float> %325 to <8 x i32>, !dbg !78
  %399 = extractelement <8 x i32> %bc36, i64 0, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %396, i32 %397, i32 %398, i32 %399, ptr addrspace(1) %387, i1 %389) #4, !dbg !78
  %400 = shl i32 %261, 6, !dbg !79
  %401 = shl i32 %259, 6, !dbg !79
  %402 = shl i32 %257, 14, !dbg !80
  %403 = add i32 %402, %.decomposed, !dbg !81
  %404 = add i32 %403, %400, !dbg !82
  %405 = add i32 %403, %401, !dbg !82
  %406 = sext i32 %404 to i64, !dbg !83
  %407 = getelementptr float, ptr addrspace(1) %11, i64 %406, !dbg !83
  %408 = sext i32 %405 to i64, !dbg !83
  %409 = getelementptr float, ptr addrspace(1) %11, i64 %408, !dbg !83
  %410 = shl i32 %17, 7, !dbg !84
  %411 = and i32 %410, 896, !dbg !84
  %412 = or disjoint i32 %411, %19, !dbg !84
  %413 = and i32 %21, 508, !dbg !84
  %414 = lshr exact i32 %411, 1, !dbg !84
  %415 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %414, !dbg !84
  %416 = getelementptr float, ptr addrspace(3) %415, i32 %412, !dbg !84
  %417 = bitcast float %365 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %417, i1 true) #4, !dbg !84
  %418 = or disjoint i32 %412, 32, !dbg !84
  %419 = lshr i32 %418, 3, !dbg !84
  %420 = and i32 %419, 116, !dbg !84
  %421 = getelementptr float, ptr addrspace(3) @global_smem, i32 %420, !dbg !84
  %422 = getelementptr float, ptr addrspace(3) %421, i32 %418, !dbg !84
  %423 = bitcast float %367 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #4, !dbg !84
  %424 = or disjoint i32 %412, 64, !dbg !84
  %425 = lshr i32 %424, 3, !dbg !84
  %426 = and i32 %425, 120, !dbg !84
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !84
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %424, !dbg !84
  %429 = bitcast float %369 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #4, !dbg !84
  %430 = or disjoint i32 %412, 96, !dbg !84
  %431 = lshr i32 %430, 3, !dbg !84
  %432 = and i32 %431, 124, !dbg !84
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i32 %432, !dbg !84
  %434 = getelementptr float, ptr addrspace(3) %433, i32 %430, !dbg !84
  %435 = bitcast float %371 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #4, !dbg !84
  %436 = or disjoint i32 %412, 16, !dbg !84
  %437 = getelementptr float, ptr addrspace(3) %415, i32 %436, !dbg !84
  %438 = bitcast float %373 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #4, !dbg !84
  %439 = or disjoint i32 %412, 48, !dbg !84
  %440 = lshr i32 %439, 3, !dbg !84
  %441 = and i32 %440, 116, !dbg !84
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %441, !dbg !84
  %443 = getelementptr float, ptr addrspace(3) %442, i32 %439, !dbg !84
  %444 = bitcast float %375 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #4, !dbg !84
  %445 = or disjoint i32 %412, 80, !dbg !84
  %446 = lshr i32 %445, 3, !dbg !84
  %447 = and i32 %446, 120, !dbg !84
  %448 = getelementptr float, ptr addrspace(3) @global_smem, i32 %447, !dbg !84
  %449 = getelementptr float, ptr addrspace(3) %448, i32 %445, !dbg !84
  %450 = bitcast float %377 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %450, i1 true) #4, !dbg !84
  %451 = or disjoint i32 %412, 112, !dbg !84
  %452 = lshr i32 %451, 3, !dbg !84
  %453 = and i32 %452, 124, !dbg !84
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !84
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %451, !dbg !84
  %456 = bitcast float %379 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #4, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %457 = lshr i32 %21, 3, !dbg !84
  %458 = and i32 %457, 60, !dbg !84
  %459 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %458, !dbg !84
  %460 = getelementptr inbounds float, ptr addrspace(3) %459, i32 %413, !dbg !84
  %461 = or disjoint i32 %413, 512, !dbg !84
  %462 = lshr i32 %461, 3, !dbg !84
  %463 = and i32 %462, 124, !dbg !84
  %464 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %463, !dbg !84
  %465 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %461, !dbg !84
  %466 = load <4 x i32>, ptr addrspace(3) %465, align 16, !dbg !84
  %.extract = load i32, ptr addrspace(3) %460, align 16, !dbg !84
  %467 = getelementptr inbounds i8, ptr addrspace(3) %460, i32 4, !dbg !84
  %.extract8 = load i32, ptr addrspace(3) %467, align 4, !dbg !84
  %468 = getelementptr inbounds i8, ptr addrspace(3) %460, i32 8, !dbg !84
  %.extract9 = load i32, ptr addrspace(3) %468, align 8, !dbg !84
  %469 = getelementptr inbounds i8, ptr addrspace(3) %460, i32 12, !dbg !84
  %.extract10 = load i32, ptr addrspace(3) %469, align 4, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %407, i1 %390) #4, !dbg !84
  %.extract11 = extractelement <4 x i32> %466, i64 0, !dbg !84
  %.extract12 = extractelement <4 x i32> %466, i64 1, !dbg !84
  %.extract13 = extractelement <4 x i32> %466, i64 2, !dbg !84
  %.extract14 = extractelement <4 x i32> %466, i64 3, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %409, i1 %391) #4, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py", directory: "inductor_cache/6s")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 31, scope: !7)
!21 = !DILocation(line: 32, column: 36, scope: !7)
!22 = !DILocation(line: 33, column: 31, scope: !7)
!23 = !DILocation(line: 33, column: 36, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 41, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 34, scope: !7)
!32 = !DILocation(line: 42, column: 40, scope: !7)
!33 = !DILocation(line: 42, column: 30, scope: !7)
!34 = !DILocation(line: 42, column: 61, scope: !7)
!35 = !DILocation(line: 42, column: 46, scope: !7)
!36 = !DILocation(line: 46, column: 49, scope: !7)
!37 = !DILocation(line: 46, column: 40, scope: !7)
!38 = !DILocation(line: 46, column: 30, scope: !7)
!39 = !DILocation(line: 46, column: 62, scope: !7)
!40 = !DILocation(line: 46, column: 70, scope: !7)
!41 = !DILocation(line: 46, column: 55, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 56, scope: !7)
!44 = !DILocation(line: 50, column: 31, scope: !7)
!45 = !DILocation(line: 50, column: 80, scope: !7)
!46 = !DILocation(line: 53, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 41, scope: !7)
!48 = !DILocation(line: 53, column: 31, scope: !7)
!49 = !DILocation(line: 53, column: 56, scope: !7)
!50 = !DILocation(line: 47, column: 30, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 54, column: 23, scope: !7)
!54 = !DILocation(line: 47, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 47, column: 20, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 16, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 27, scope: !7)
!59 = !DILocation(line: 31, column: 19, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 49, column: 20, scope: !7)
!62 = !DILocation(line: 51, column: 20, scope: !7)
!63 = !DILocation(line: 52, column: 35, scope: !7)
!64 = !DILocation(line: 55, column: 20, scope: !7)
!65 = !DILocation(line: 56, column: 19, scope: !7)
!66 = !DILocation(line: 59, column: 33, scope: !7)
!67 = !DILocation(line: 60, column: 20, scope: !7)
!68 = !DILocation(line: 68, column: 20, scope: !7)
!69 = !DILocation(line: 69, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 35, scope: !7)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 75, column: 34, scope: !7)
!75 = !DILocation(line: 75, column: 30, scope: !7)
!76 = !DILocation(line: 75, column: 25, scope: !7)
!77 = !DILocation(line: 75, column: 54, scope: !7)
!78 = !DILocation(line: 75, column: 46, scope: !7)
!79 = !DILocation(line: 76, column: 33, scope: !7)
!80 = !DILocation(line: 76, column: 44, scope: !7)
!81 = !DILocation(line: 76, column: 30, scope: !7)
!82 = !DILocation(line: 76, column: 38, scope: !7)
!83 = !DILocation(line: 76, column: 25, scope: !7)
!84 = !DILocation(line: 76, column: 56, scope: !7)
!85 = !DILocation(line: 76, column: 4, scope: !7)
