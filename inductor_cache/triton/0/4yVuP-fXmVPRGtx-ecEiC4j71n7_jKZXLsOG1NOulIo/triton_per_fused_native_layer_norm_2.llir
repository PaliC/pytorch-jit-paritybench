; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_layer_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 124, !dbg !12
  %14 = lshr i32 %11, 5, !dbg !12
  %15 = and i32 %11, 127, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = icmp slt i32 %16, 256, !dbg !14
  %18 = and i32 %14, 7, !dbg !15
  %19 = or disjoint i32 %18, 8, !dbg !15
  %20 = or disjoint i32 %18, 16, !dbg !15
  %21 = or disjoint i32 %18, 24, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %22 = sdiv i32 %.frozen, 64, !dbg !16
  %23 = mul i32 %22, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = shl nuw nsw i32 %18, 6, !dbg !18
  %25 = shl nuw nsw i32 %19, 6, !dbg !18
  %26 = shl nuw nsw i32 %20, 6, !dbg !18
  %27 = shl nuw nsw i32 %21, 6, !dbg !18
  %28 = shl i32 %22, 11, !dbg !19
  %29 = add i32 %28, %.decomposed, !dbg !20
  %30 = add i32 %29, %24, !dbg !21
  %31 = add i32 %29, %25, !dbg !21
  %32 = add i32 %29, %26, !dbg !21
  %33 = add i32 %29, %27, !dbg !21
  %34 = sext i32 %30 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !22
  %36 = sext i32 %31 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !22
  %38 = sext i32 %32 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !22
  %40 = sext i32 %33 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !22
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = bitcast i32 %54 to float, !dbg !23
  %59 = bitcast i32 %55 to float, !dbg !23
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !23
  %74 = bitcast i32 %70 to float, !dbg !23
  %75 = bitcast i32 %71 to float, !dbg !23
  %76 = bitcast i32 %72 to float, !dbg !23
  %77 = bitcast i32 %73 to float, !dbg !23
  %78 = zext nneg i32 %18 to i64, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !24
  %80 = zext nneg i32 %19 to i64, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !24
  %82 = zext nneg i32 %20 to i64, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !24
  %84 = zext nneg i32 %21 to i64, !dbg !24
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !24
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #5, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #5, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #5, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #5, !dbg !25
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #5, !dbg !25
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #5, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #5, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #5, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #5, !dbg !25
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #5, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #5, !dbg !25
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #5, !dbg !25
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #5, !dbg !25
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #5, !dbg !25
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #5, !dbg !25
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #5, !dbg !25
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !26
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #5, !dbg !27
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #5, !dbg !27
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #5, !dbg !27
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #5, !dbg !27
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #5, !dbg !27
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #5, !dbg !27
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #5, !dbg !27
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #5, !dbg !27
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #5, !dbg !27
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #5, !dbg !27
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #5, !dbg !27
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #5, !dbg !27
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #5, !dbg !27
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #5, !dbg !27
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #5, !dbg !27
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #5, !dbg !27
  %122 = fadd float %47, %56, !dbg !28
  %123 = fadd float %48, %57, !dbg !28
  %124 = fadd float %49, %58, !dbg !28
  %125 = fadd float %50, %59, !dbg !28
  %126 = fadd float %122, %65, !dbg !28
  %127 = fadd float %123, %66, !dbg !28
  %128 = fadd float %124, %67, !dbg !28
  %129 = fadd float %125, %68, !dbg !28
  %130 = fadd float %126, %74, !dbg !28
  %131 = fadd float %127, %75, !dbg !28
  %132 = fadd float %128, %76, !dbg !28
  %133 = fadd float %129, %77, !dbg !28
  %134 = shl nuw nsw i32 %13, 3, !dbg !33
  %135 = or disjoint i32 %134, %18, !dbg !33
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !33
  %137 = bitcast float %130 to i32, !dbg !33
  %138 = select i1 %17, i32 %137, i32 0, !dbg !28
  %139 = insertelement <1 x i32> poison, i32 %138, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %139, i1 true) #5, !dbg !33
  %140 = or disjoint i32 %134, 8, !dbg !33
  %141 = or disjoint i32 %140, %18, !dbg !33
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !33
  %143 = bitcast float %131 to i32, !dbg !33
  %144 = select i1 %17, i32 %143, i32 0, !dbg !28
  %145 = insertelement <1 x i32> poison, i32 %144, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %145, i1 true) #5, !dbg !33
  %146 = or disjoint i32 %134, 16, !dbg !33
  %147 = or disjoint i32 %146, %18, !dbg !33
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !33
  %149 = bitcast float %132 to i32, !dbg !33
  %150 = select i1 %17, i32 %149, i32 0, !dbg !28
  %151 = insertelement <1 x i32> poison, i32 %150, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %151, i1 true) #5, !dbg !33
  %152 = or disjoint i32 %134, 24, !dbg !33
  %153 = or disjoint i32 %152, %18, !dbg !33
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !33
  %155 = bitcast float %133 to i32, !dbg !33
  %156 = select i1 %17, i32 %155, i32 0, !dbg !28
  %157 = insertelement <1 x i32> poison, i32 %156, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %157, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %158 = icmp slt i32 %11, 1024, !dbg !33
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !33
  %160 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %159, i1 %158) #5, !dbg !33
  %161 = bitcast i32 %160 to float, !dbg !33
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 4, i32 31), !dbg !33
  %163 = bitcast i32 %162 to float, !dbg !33
  %164 = fadd float %161, %163, !dbg !28
  %165 = bitcast float %164 to i32, !dbg !33
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !33
  %167 = bitcast i32 %166 to float, !dbg !33
  %168 = fadd float %164, %167, !dbg !28
  %169 = bitcast float %168 to i32, !dbg !33
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !33
  %171 = bitcast i32 %170 to float, !dbg !33
  %172 = fadd float %168, %171, !dbg !28
  %173 = and i32 %11, 7, !dbg !33
  %174 = icmp eq i32 %173, 0, !dbg !33
  %175 = and i1 %158, %174, !dbg !33
  %176 = bitcast float %172 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %176, i1 %175) #5, !dbg !33
  %177 = getelementptr i8, ptr addrspace(3) %159, i32 1024, !dbg !33
  %178 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %177, i1 %158) #5, !dbg !33
  %179 = bitcast i32 %178 to float, !dbg !33
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 4, i32 31), !dbg !33
  %181 = bitcast i32 %180 to float, !dbg !33
  %182 = fadd float %179, %181, !dbg !28
  %183 = bitcast float %182 to i32, !dbg !33
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !33
  %185 = bitcast i32 %184 to float, !dbg !33
  %186 = fadd float %182, %185, !dbg !28
  %187 = bitcast float %186 to i32, !dbg !33
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !33
  %189 = bitcast i32 %188 to float, !dbg !33
  %190 = fadd float %186, %189, !dbg !28
  %191 = bitcast float %190 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %191, i1 %175) #5, !dbg !33
  %192 = getelementptr i8, ptr addrspace(3) %159, i32 2048, !dbg !33
  %193 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %192, i1 %158) #5, !dbg !33
  %194 = bitcast i32 %193 to float, !dbg !33
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !33
  %196 = bitcast i32 %195 to float, !dbg !33
  %197 = fadd float %194, %196, !dbg !28
  %198 = bitcast float %197 to i32, !dbg !33
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 2, i32 31), !dbg !33
  %200 = bitcast i32 %199 to float, !dbg !33
  %201 = fadd float %197, %200, !dbg !28
  %202 = bitcast float %201 to i32, !dbg !33
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !33
  %204 = bitcast i32 %203 to float, !dbg !33
  %205 = fadd float %201, %204, !dbg !28
  %206 = bitcast float %205 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %206, i1 %175) #5, !dbg !33
  %207 = getelementptr i8, ptr addrspace(3) %159, i32 3072, !dbg !33
  %208 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %207, i1 %158) #5, !dbg !33
  %209 = bitcast i32 %208 to float, !dbg !33
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 4, i32 31), !dbg !33
  %211 = bitcast i32 %210 to float, !dbg !33
  %212 = fadd float %209, %211, !dbg !28
  %213 = bitcast float %212 to i32, !dbg !33
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !33
  %215 = bitcast i32 %214 to float, !dbg !33
  %216 = fadd float %212, %215, !dbg !28
  %217 = bitcast float %216 to i32, !dbg !33
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 1, i32 31), !dbg !33
  %219 = bitcast i32 %218 to float, !dbg !33
  %220 = fadd float %216, %219, !dbg !28
  %221 = bitcast float %220 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %221, i1 %175) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !33
  %223 = load float, ptr addrspace(3) %222, align 16, !dbg !33
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !33
  %225 = load float, ptr addrspace(3) %224, align 16, !dbg !33
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !33
  %227 = load float, ptr addrspace(3) %226, align 16, !dbg !33
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !33
  %229 = load float, ptr addrspace(3) %228, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %231 = bitcast float %223 to i32, !dbg !34
  %232 = bitcast float %225 to i32, !dbg !34
  %233 = bitcast float %227 to i32, !dbg !34
  %234 = bitcast float %229 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %230, i32 %231, i32 %232, i32 %233, i32 %234, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !34
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !34
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float 3.200000e+01) #5, !dbg !34
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float 3.200000e+01) #5, !dbg !34
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float 3.200000e+01) #5, !dbg !34
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float 3.200000e+01) #5, !dbg !34
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float 3.200000e+01) #5, !dbg !34
  %242 = fsub float %47, %238, !dbg !35
  %243 = fsub float %48, %239, !dbg !35
  %244 = fsub float %49, %240, !dbg !35
  %245 = fsub float %50, %241, !dbg !35
  %246 = fsub float %56, %238, !dbg !35
  %247 = fsub float %57, %239, !dbg !35
  %248 = fsub float %58, %240, !dbg !35
  %249 = fsub float %59, %241, !dbg !35
  %250 = fsub float %65, %238, !dbg !35
  %251 = fsub float %66, %239, !dbg !35
  %252 = fsub float %67, %240, !dbg !35
  %253 = fsub float %68, %241, !dbg !35
  %254 = fsub float %74, %238, !dbg !35
  %255 = fsub float %75, %239, !dbg !35
  %256 = fsub float %76, %240, !dbg !35
  %257 = fsub float %77, %241, !dbg !35
  %258 = fmul float %242, %242, !dbg !36
  %259 = fmul float %243, %243, !dbg !36
  %260 = fmul float %244, %244, !dbg !36
  %261 = fmul float %245, %245, !dbg !36
  %262 = fmul float %246, %246, !dbg !36
  %263 = fmul float %247, %247, !dbg !36
  %264 = fmul float %248, %248, !dbg !36
  %265 = fmul float %249, %249, !dbg !36
  %266 = fmul float %250, %250, !dbg !36
  %267 = fmul float %251, %251, !dbg !36
  %268 = fmul float %252, %252, !dbg !36
  %269 = fmul float %253, %253, !dbg !36
  %270 = fmul float %254, %254, !dbg !36
  %271 = fmul float %255, %255, !dbg !36
  %272 = fmul float %256, %256, !dbg !36
  %273 = fmul float %257, %257, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %274 = fadd float %258, %262, !dbg !39
  %275 = fadd float %259, %263, !dbg !39
  %276 = fadd float %260, %264, !dbg !39
  %277 = fadd float %261, %265, !dbg !39
  %278 = fadd float %266, %274, !dbg !39
  %279 = fadd float %267, %275, !dbg !39
  %280 = fadd float %268, %276, !dbg !39
  %281 = fadd float %269, %277, !dbg !39
  %282 = fadd float %270, %278, !dbg !39
  %283 = fadd float %271, %279, !dbg !39
  %284 = fadd float %272, %280, !dbg !39
  %285 = fadd float %273, %281, !dbg !39
  %286 = bitcast float %282 to i32, !dbg !37
  %287 = select i1 %17, i32 %286, i32 0, !dbg !39
  %288 = insertelement <1 x i32> poison, i32 %287, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %288, i1 true) #5, !dbg !37
  %289 = bitcast float %283 to i32, !dbg !37
  %290 = select i1 %17, i32 %289, i32 0, !dbg !39
  %291 = insertelement <1 x i32> poison, i32 %290, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %291, i1 true) #5, !dbg !37
  %292 = bitcast float %284 to i32, !dbg !37
  %293 = select i1 %17, i32 %292, i32 0, !dbg !39
  %294 = insertelement <1 x i32> poison, i32 %293, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %294, i1 true) #5, !dbg !37
  %295 = bitcast float %285 to i32, !dbg !37
  %296 = select i1 %17, i32 %295, i32 0, !dbg !39
  %297 = insertelement <1 x i32> poison, i32 %296, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %297, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %298 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %159, i1 %158) #5, !dbg !37
  %299 = bitcast i32 %298 to float, !dbg !37
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !37
  %301 = bitcast i32 %300 to float, !dbg !37
  %302 = fadd float %299, %301, !dbg !39
  %303 = bitcast float %302 to i32, !dbg !37
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !37
  %305 = bitcast i32 %304 to float, !dbg !37
  %306 = fadd float %302, %305, !dbg !39
  %307 = bitcast float %306 to i32, !dbg !37
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 1, i32 31), !dbg !37
  %309 = bitcast i32 %308 to float, !dbg !37
  %310 = fadd float %306, %309, !dbg !39
  %311 = bitcast float %310 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %311, i1 %175) #5, !dbg !37
  %312 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %177, i1 %158) #5, !dbg !37
  %313 = bitcast i32 %312 to float, !dbg !37
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !37
  %315 = bitcast i32 %314 to float, !dbg !37
  %316 = fadd float %313, %315, !dbg !39
  %317 = bitcast float %316 to i32, !dbg !37
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 2, i32 31), !dbg !37
  %319 = bitcast i32 %318 to float, !dbg !37
  %320 = fadd float %316, %319, !dbg !39
  %321 = bitcast float %320 to i32, !dbg !37
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 1, i32 31), !dbg !37
  %323 = bitcast i32 %322 to float, !dbg !37
  %324 = fadd float %320, %323, !dbg !39
  %325 = bitcast float %324 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %325, i1 %175) #5, !dbg !37
  %326 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %192, i1 %158) #5, !dbg !37
  %327 = bitcast i32 %326 to float, !dbg !37
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 4, i32 31), !dbg !37
  %329 = bitcast i32 %328 to float, !dbg !37
  %330 = fadd float %327, %329, !dbg !39
  %331 = bitcast float %330 to i32, !dbg !37
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 2, i32 31), !dbg !37
  %333 = bitcast i32 %332 to float, !dbg !37
  %334 = fadd float %330, %333, !dbg !39
  %335 = bitcast float %334 to i32, !dbg !37
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !37
  %337 = bitcast i32 %336 to float, !dbg !37
  %338 = fadd float %334, %337, !dbg !39
  %339 = bitcast float %338 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %339, i1 %175) #5, !dbg !37
  %340 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %207, i1 %158) #5, !dbg !37
  %341 = bitcast i32 %340 to float, !dbg !37
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !37
  %343 = bitcast i32 %342 to float, !dbg !37
  %344 = fadd float %341, %343, !dbg !39
  %345 = bitcast float %344 to i32, !dbg !37
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !37
  %347 = bitcast i32 %346 to float, !dbg !37
  %348 = fadd float %344, %347, !dbg !39
  %349 = bitcast float %348 to i32, !dbg !37
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 1, i32 31), !dbg !37
  %351 = bitcast i32 %350 to float, !dbg !37
  %352 = fadd float %348, %351, !dbg !39
  %353 = bitcast float %352 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %353, i1 %175) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %354 = load float, ptr addrspace(3) %222, align 16, !dbg !37
  %355 = load float, ptr addrspace(3) %224, align 16, !dbg !37
  %356 = load float, ptr addrspace(3) %226, align 16, !dbg !37
  %357 = load float, ptr addrspace(3) %228, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %358 = bitcast float %354 to i32, !dbg !40
  %359 = bitcast float %355 to i32, !dbg !40
  %360 = bitcast float %356 to i32, !dbg !40
  %361 = bitcast float %357 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %230, i32 %358, i32 %359, i32 %360, i32 %361, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %362 = load float, ptr addrspace(3) %235, align 4, !dbg !40
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float 3.200000e+01) #5, !dbg !41
  %364 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float 3.200000e+01) #5, !dbg !41
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %355, float 3.200000e+01) #5, !dbg !41
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float 3.200000e+01) #5, !dbg !41
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float 3.200000e+01) #5, !dbg !41
  %368 = fadd float %363, 0x3EE4F8B580000000, !dbg !42
  %369 = fadd float %364, 0x3EE4F8B580000000, !dbg !42
  %370 = fadd float %365, 0x3EE4F8B580000000, !dbg !42
  %371 = fadd float %366, 0x3EE4F8B580000000, !dbg !42
  %372 = fadd float %367, 0x3EE4F8B580000000, !dbg !42
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %373, 0, !dbg !40
  br i1 %.not.i, label %376, label %374, !dbg !40

374:                                              ; preds = %8
  %375 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %368), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

376:                                              ; preds = %8
  %377 = tail call float @llvm.nvvm.rsqrt.approx.f(float %368), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %374, %376
  %.0.i = phi float [ %375, %374 ], [ %377, %376 ], !dbg !40
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i34 = icmp eq i32 %378, 0, !dbg !40
  br i1 %.not.i34, label %381, label %379, !dbg !40

379:                                              ; preds = %__nv_rsqrtf.exit
  %380 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %369), !dbg !40
  br label %__nv_rsqrtf.exit36, !dbg !40

381:                                              ; preds = %__nv_rsqrtf.exit
  %382 = tail call float @llvm.nvvm.rsqrt.approx.f(float %369), !dbg !40
  br label %__nv_rsqrtf.exit36, !dbg !40

__nv_rsqrtf.exit36:                               ; preds = %379, %381
  %.0.i35 = phi float [ %380, %379 ], [ %382, %381 ], !dbg !40
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i37 = icmp eq i32 %383, 0, !dbg !40
  br i1 %.not.i37, label %386, label %384, !dbg !40

384:                                              ; preds = %__nv_rsqrtf.exit36
  %385 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %370), !dbg !40
  br label %__nv_rsqrtf.exit39, !dbg !40

386:                                              ; preds = %__nv_rsqrtf.exit36
  %387 = tail call float @llvm.nvvm.rsqrt.approx.f(float %370), !dbg !40
  br label %__nv_rsqrtf.exit39, !dbg !40

__nv_rsqrtf.exit39:                               ; preds = %384, %386
  %.0.i38 = phi float [ %385, %384 ], [ %387, %386 ], !dbg !40
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i40 = icmp eq i32 %388, 0, !dbg !40
  br i1 %.not.i40, label %391, label %389, !dbg !40

389:                                              ; preds = %__nv_rsqrtf.exit39
  %390 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %371), !dbg !40
  br label %__nv_rsqrtf.exit42, !dbg !40

391:                                              ; preds = %__nv_rsqrtf.exit39
  %392 = tail call float @llvm.nvvm.rsqrt.approx.f(float %371), !dbg !40
  br label %__nv_rsqrtf.exit42, !dbg !40

__nv_rsqrtf.exit42:                               ; preds = %389, %391
  %.0.i41 = phi float [ %390, %389 ], [ %392, %391 ], !dbg !40
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i43 = icmp eq i32 %393, 0, !dbg !40
  br i1 %.not.i43, label %396, label %394, !dbg !40

394:                                              ; preds = %__nv_rsqrtf.exit42
  %395 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %372), !dbg !40
  br label %__nv_rsqrtf.exit45, !dbg !40

396:                                              ; preds = %__nv_rsqrtf.exit42
  %397 = tail call float @llvm.nvvm.rsqrt.approx.f(float %372), !dbg !40
  br label %__nv_rsqrtf.exit45, !dbg !40

__nv_rsqrtf.exit45:                               ; preds = %394, %396
  %.0.i44 = phi float [ %395, %394 ], [ %397, %396 ], !dbg !40
  %398 = bitcast i32 %121 to float, !dbg !27
  %399 = bitcast i32 %117 to float, !dbg !27
  %400 = bitcast i32 %113 to float, !dbg !27
  %401 = bitcast i32 %109 to float, !dbg !27
  %402 = bitcast i32 %101 to float, !dbg !25
  %403 = bitcast i32 %97 to float, !dbg !25
  %404 = bitcast i32 %93 to float, !dbg !25
  %405 = bitcast i32 %89 to float, !dbg !25
  %406 = lshr i32 %11, 3, !dbg !12
  %407 = and i32 %406, 31, !dbg !12
  %408 = or disjoint i32 %407, %10, !dbg !13
  %409 = or disjoint i32 %408, 96, !dbg !13
  %410 = icmp slt i32 %409, 256, !dbg !14
  %411 = or disjoint i32 %408, 64, !dbg !13
  %412 = icmp slt i32 %411, 256, !dbg !14
  %413 = or disjoint i32 %408, 32, !dbg !13
  %414 = icmp slt i32 %413, 256, !dbg !14
  %415 = icmp slt i32 %408, 256, !dbg !14
  %416 = or disjoint i32 %10, %15, !dbg !13
  %417 = icmp slt i32 %416, 256, !dbg !14
  %418 = and i32 %12, 28, !dbg !12
  %419 = fmul float %242, %.0.i35, !dbg !43
  %420 = fmul float %243, %.0.i38, !dbg !43
  %421 = fmul float %244, %.0.i41, !dbg !43
  %422 = fmul float %245, %.0.i44, !dbg !43
  %423 = fmul float %246, %.0.i35, !dbg !43
  %424 = fmul float %247, %.0.i38, !dbg !43
  %425 = fmul float %248, %.0.i41, !dbg !43
  %426 = fmul float %249, %.0.i44, !dbg !43
  %427 = fmul float %250, %.0.i35, !dbg !43
  %428 = fmul float %251, %.0.i38, !dbg !43
  %429 = fmul float %252, %.0.i41, !dbg !43
  %430 = fmul float %253, %.0.i44, !dbg !43
  %431 = fmul float %254, %.0.i35, !dbg !43
  %432 = fmul float %255, %.0.i38, !dbg !43
  %433 = fmul float %256, %.0.i41, !dbg !43
  %434 = fmul float %257, %.0.i44, !dbg !43
  %435 = fmul float %419, %405, !dbg !44
  %436 = fmul float %420, %405, !dbg !44
  %437 = fmul float %421, %405, !dbg !44
  %438 = fmul float %422, %405, !dbg !44
  %439 = fmul float %423, %404, !dbg !44
  %440 = fmul float %424, %404, !dbg !44
  %441 = fmul float %425, %404, !dbg !44
  %442 = fmul float %426, %404, !dbg !44
  %443 = fmul float %427, %403, !dbg !44
  %444 = fmul float %428, %403, !dbg !44
  %445 = fmul float %429, %403, !dbg !44
  %446 = fmul float %430, %403, !dbg !44
  %447 = fmul float %431, %402, !dbg !44
  %448 = fmul float %432, %402, !dbg !44
  %449 = fmul float %433, %402, !dbg !44
  %450 = fmul float %434, %402, !dbg !44
  %451 = fadd float %435, %401, !dbg !45
  %452 = fadd float %436, %401, !dbg !45
  %453 = fadd float %437, %401, !dbg !45
  %454 = fadd float %438, %401, !dbg !45
  %455 = fadd float %439, %400, !dbg !45
  %456 = fadd float %440, %400, !dbg !45
  %457 = fadd float %441, %400, !dbg !45
  %458 = fadd float %442, %400, !dbg !45
  %459 = fadd float %443, %399, !dbg !45
  %460 = fadd float %444, %399, !dbg !45
  %461 = fadd float %445, %399, !dbg !45
  %462 = fadd float %446, %399, !dbg !45
  %463 = fadd float %447, %398, !dbg !45
  %464 = fadd float %448, %398, !dbg !45
  %465 = fadd float %449, %398, !dbg !45
  %466 = fadd float %450, %398, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %467 = sext i32 %416 to i64, !dbg !47
  %468 = getelementptr float, ptr addrspace(1) %0, i64 %467, !dbg !47
  %469 = and i32 %11, 128, !dbg !48
  %470 = icmp eq i32 %469, 0, !dbg !48
  %471 = bitcast float %.0.i to i32, !dbg !48
  %472 = and i1 %470, %417, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %471, ptr addrspace(1) %468, i1 %472) #5, !dbg !48
  %473 = shl i32 %408, 5, !dbg !49
  %474 = shl i32 %413, 5, !dbg !49
  %475 = shl i32 %411, 5, !dbg !49
  %476 = shl i32 %409, 5, !dbg !49
  %477 = or disjoint i32 %473, %418, !dbg !50
  %478 = or disjoint i32 %474, %418, !dbg !50
  %479 = or disjoint i32 %475, %418, !dbg !50
  %480 = or disjoint i32 %476, %418, !dbg !50
  %481 = sext i32 %477 to i64, !dbg !51
  %482 = getelementptr float, ptr addrspace(1) %5, i64 %481, !dbg !51
  %483 = sext i32 %478 to i64, !dbg !51
  %484 = getelementptr float, ptr addrspace(1) %5, i64 %483, !dbg !51
  %485 = sext i32 %479 to i64, !dbg !51
  %486 = getelementptr float, ptr addrspace(1) %5, i64 %485, !dbg !51
  %487 = sext i32 %480 to i64, !dbg !51
  %488 = getelementptr float, ptr addrspace(1) %5, i64 %487, !dbg !51
  %489 = shl i32 %11, 7, !dbg !52
  %490 = and i32 %489, 3968, !dbg !52
  %491 = or disjoint i32 %490, %18, !dbg !52
  %492 = and i32 %12, 1020, !dbg !52
  %493 = lshr exact i32 %490, 1, !dbg !52
  %494 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %493, !dbg !52
  %495 = getelementptr float, ptr addrspace(3) %494, i32 %491, !dbg !52
  %496 = bitcast float %451 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %496, i1 true) #5, !dbg !52
  %497 = or disjoint i32 %491, 32, !dbg !52
  %498 = lshr i32 %497, 3, !dbg !52
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %498, !dbg !52
  %500 = getelementptr float, ptr addrspace(3) %499, i32 %497, !dbg !52
  %501 = bitcast float %452 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %501, i1 true) #5, !dbg !52
  %502 = or disjoint i32 %491, 64, !dbg !52
  %503 = lshr i32 %502, 3, !dbg !52
  %504 = getelementptr float, ptr addrspace(3) @global_smem, i32 %503, !dbg !52
  %505 = getelementptr float, ptr addrspace(3) %504, i32 %502, !dbg !52
  %506 = bitcast float %453 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %505, <1 x i32> %506, i1 true) #5, !dbg !52
  %507 = or disjoint i32 %491, 96, !dbg !52
  %508 = lshr i32 %507, 3, !dbg !52
  %509 = getelementptr float, ptr addrspace(3) @global_smem, i32 %508, !dbg !52
  %510 = getelementptr float, ptr addrspace(3) %509, i32 %507, !dbg !52
  %511 = bitcast float %454 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %510, <1 x i32> %511, i1 true) #5, !dbg !52
  %512 = or disjoint i32 %491, 8, !dbg !52
  %513 = getelementptr float, ptr addrspace(3) %494, i32 %512, !dbg !52
  %514 = bitcast float %455 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %514, i1 true) #5, !dbg !52
  %515 = or disjoint i32 %491, 40, !dbg !52
  %516 = lshr i32 %515, 3, !dbg !52
  %517 = and i32 %516, 500, !dbg !52
  %518 = getelementptr float, ptr addrspace(3) @global_smem, i32 %517, !dbg !52
  %519 = getelementptr float, ptr addrspace(3) %518, i32 %515, !dbg !52
  %520 = bitcast float %456 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %520, i1 true) #5, !dbg !52
  %521 = or disjoint i32 %491, 72, !dbg !52
  %522 = lshr i32 %521, 3, !dbg !52
  %523 = and i32 %522, 504, !dbg !52
  %524 = getelementptr float, ptr addrspace(3) @global_smem, i32 %523, !dbg !52
  %525 = getelementptr float, ptr addrspace(3) %524, i32 %521, !dbg !52
  %526 = bitcast float %457 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %525, <1 x i32> %526, i1 true) #5, !dbg !52
  %527 = or disjoint i32 %491, 104, !dbg !52
  %528 = lshr i32 %527, 3, !dbg !52
  %529 = and i32 %528, 508, !dbg !52
  %530 = getelementptr float, ptr addrspace(3) @global_smem, i32 %529, !dbg !52
  %531 = getelementptr float, ptr addrspace(3) %530, i32 %527, !dbg !52
  %532 = bitcast float %458 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %532, i1 true) #5, !dbg !52
  %533 = or disjoint i32 %491, 16, !dbg !52
  %534 = getelementptr float, ptr addrspace(3) %494, i32 %533, !dbg !52
  %535 = bitcast float %459 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %534, <1 x i32> %535, i1 true) #5, !dbg !52
  %536 = or disjoint i32 %491, 48, !dbg !52
  %537 = lshr i32 %536, 3, !dbg !52
  %538 = and i32 %537, 500, !dbg !52
  %539 = getelementptr float, ptr addrspace(3) @global_smem, i32 %538, !dbg !52
  %540 = getelementptr float, ptr addrspace(3) %539, i32 %536, !dbg !52
  %541 = bitcast float %460 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %540, <1 x i32> %541, i1 true) #5, !dbg !52
  %542 = or disjoint i32 %491, 80, !dbg !52
  %543 = lshr i32 %542, 3, !dbg !52
  %544 = and i32 %543, 504, !dbg !52
  %545 = getelementptr float, ptr addrspace(3) @global_smem, i32 %544, !dbg !52
  %546 = getelementptr float, ptr addrspace(3) %545, i32 %542, !dbg !52
  %547 = bitcast float %461 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %547, i1 true) #5, !dbg !52
  %548 = or disjoint i32 %491, 112, !dbg !52
  %549 = lshr i32 %548, 3, !dbg !52
  %550 = and i32 %549, 508, !dbg !52
  %551 = getelementptr float, ptr addrspace(3) @global_smem, i32 %550, !dbg !52
  %552 = getelementptr float, ptr addrspace(3) %551, i32 %548, !dbg !52
  %553 = bitcast float %462 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %552, <1 x i32> %553, i1 true) #5, !dbg !52
  %554 = or disjoint i32 %491, 24, !dbg !52
  %555 = getelementptr float, ptr addrspace(3) %494, i32 %554, !dbg !52
  %556 = bitcast float %463 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %556, i1 true) #5, !dbg !52
  %557 = or disjoint i32 %491, 56, !dbg !52
  %558 = lshr i32 %557, 3, !dbg !52
  %559 = and i32 %558, 500, !dbg !52
  %560 = getelementptr float, ptr addrspace(3) @global_smem, i32 %559, !dbg !52
  %561 = getelementptr float, ptr addrspace(3) %560, i32 %557, !dbg !52
  %562 = bitcast float %464 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %562, i1 true) #5, !dbg !52
  %563 = or disjoint i32 %491, 88, !dbg !52
  %564 = lshr i32 %563, 3, !dbg !52
  %565 = and i32 %564, 504, !dbg !52
  %566 = getelementptr float, ptr addrspace(3) @global_smem, i32 %565, !dbg !52
  %567 = getelementptr float, ptr addrspace(3) %566, i32 %563, !dbg !52
  %568 = bitcast float %465 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %568, i1 true) #5, !dbg !52
  %569 = or disjoint i32 %491, 120, !dbg !52
  %570 = lshr i32 %569, 3, !dbg !52
  %571 = and i32 %570, 508, !dbg !52
  %572 = getelementptr float, ptr addrspace(3) @global_smem, i32 %571, !dbg !52
  %573 = getelementptr float, ptr addrspace(3) %572, i32 %569, !dbg !52
  %574 = bitcast float %466 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %573, <1 x i32> %574, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %575 = lshr i32 %12, 3, !dbg !52
  %576 = and i32 %575, 124, !dbg !52
  %577 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %576, !dbg !52
  %578 = getelementptr inbounds float, ptr addrspace(3) %577, i32 %492, !dbg !52
  %579 = or disjoint i32 %492, 1024, !dbg !52
  %580 = lshr i32 %579, 3, !dbg !52
  %581 = and i32 %580, 252, !dbg !52
  %582 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %581, !dbg !52
  %583 = getelementptr inbounds float, ptr addrspace(3) %582, i32 %579, !dbg !52
  %584 = load <4 x i32>, ptr addrspace(3) %583, align 16, !dbg !52
  %585 = or disjoint i32 %492, 2048, !dbg !52
  %586 = lshr i32 %585, 3, !dbg !52
  %587 = and i32 %586, 380, !dbg !52
  %588 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %587, !dbg !52
  %589 = getelementptr inbounds float, ptr addrspace(3) %588, i32 %585, !dbg !52
  %590 = load <4 x i32>, ptr addrspace(3) %589, align 16, !dbg !52
  %591 = or disjoint i32 %492, 3072, !dbg !52
  %592 = lshr i32 %591, 3, !dbg !52
  %593 = and i32 %592, 508, !dbg !52
  %594 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %593, !dbg !52
  %595 = getelementptr inbounds float, ptr addrspace(3) %594, i32 %591, !dbg !52
  %596 = load <4 x i32>, ptr addrspace(3) %595, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %578, align 16, !dbg !52
  %597 = getelementptr inbounds i8, ptr addrspace(3) %578, i32 4, !dbg !52
  %.extract19 = load i32, ptr addrspace(3) %597, align 4, !dbg !52
  %598 = getelementptr inbounds i8, ptr addrspace(3) %578, i32 8, !dbg !52
  %.extract20 = load i32, ptr addrspace(3) %598, align 8, !dbg !52
  %599 = getelementptr inbounds i8, ptr addrspace(3) %578, i32 12, !dbg !52
  %.extract21 = load i32, ptr addrspace(3) %599, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %482, i1 %415) #5, !dbg !52
  %.extract22 = extractelement <4 x i32> %584, i64 0, !dbg !52
  %.extract23 = extractelement <4 x i32> %584, i64 1, !dbg !52
  %.extract24 = extractelement <4 x i32> %584, i64 2, !dbg !52
  %.extract25 = extractelement <4 x i32> %584, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %484, i1 %414) #5, !dbg !52
  %.extract26 = extractelement <4 x i32> %590, i64 0, !dbg !52
  %.extract27 = extractelement <4 x i32> %590, i64 1, !dbg !52
  %.extract28 = extractelement <4 x i32> %590, i64 2, !dbg !52
  %.extract29 = extractelement <4 x i32> %590, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %486, i1 %412) #5, !dbg !52
  %.extract30 = extractelement <4 x i32> %596, i64 0, !dbg !52
  %.extract31 = extractelement <4 x i32> %596, i64 1, !dbg !52
  %.extract32 = extractelement <4 x i32> %596, i64 2, !dbg !52
  %.extract33 = extractelement <4 x i32> %596, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %488, i1 %410) #5, !dbg !52
  %600 = getelementptr float, ptr addrspace(1) %4, i64 %467, !dbg !53
  %601 = bitcast float %237 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %601, ptr addrspace(1) %600, i1 %472) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvsc36iptsv2cfg5djtaknliti74ddda4nwuwx446wlek6af2hpp.py", directory: "inductor_cache/vs")
!4 = !{ptr @triton_per_fused_native_layer_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_layer_norm_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_layer_norm_2", linkageName: "triton_per_fused_native_layer_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 40, column: 24, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !38)
!38 = !DILocation(line: 48, column: 26, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !38)
!40 = !DILocation(line: 53, column: 28, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 20, scope: !7)
!46 = !DILocation(line: 58, column: 4, scope: !7)
!47 = !DILocation(line: 59, column: 28, scope: !7)
!48 = !DILocation(line: 59, column: 40, scope: !7)
!49 = !DILocation(line: 60, column: 33, scope: !7)
!50 = !DILocation(line: 60, column: 30, scope: !7)
!51 = !DILocation(line: 60, column: 25, scope: !7)
!52 = !DILocation(line: 60, column: 45, scope: !7)
!53 = !DILocation(line: 61, column: 25, scope: !7)
!54 = !DILocation(line: 61, column: 37, scope: !7)
!55 = !DILocation(line: 61, column: 4, scope: !7)
