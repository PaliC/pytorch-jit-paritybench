; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = shl i32 %15, 2, !dbg !11
  %17 = and i32 %16, 252, !dbg !11
  %18 = srem i32 %14, 256, !dbg !12
  %19 = shl i32 %14, 8, !dbg !13
  %20 = or disjoint i32 %19, %17, !dbg !14
  %21 = sext i32 %20 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %24 = sext i32 %18 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !17
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !20
  %35 = bitcast i32 %34 to float, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #5, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #5, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #5, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #5, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #5, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #5, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #5, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #5, !dbg !30
  %58 = bitcast i32 %57 to float, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !32
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !32
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !32
  %64 = getelementptr float, ptr addrspace(1) %11, i64 %24, !dbg !33
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #5, !dbg !34
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #5, !dbg !34
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #5, !dbg !34
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #5, !dbg !34
  %69 = fadd float %35, 0x3EE4F8B580000000, !dbg !35
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i11 = icmp eq i32 %76, 0, !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i14 = icmp eq i32 %77, 0, !dbg !36
  br i1 %.not.i11, label %83, label %78, !dbg !36

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %81, label %79, !dbg !36

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #5, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #5, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #5, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #5, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %79, %81, %84, %86
  %.0.i13 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !36
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !37
  %89 = fadd float %58, 0x3EE4F8B580000000, !dbg !38
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i31 = icmp eq i32 %96, 0, !dbg !39
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i34 = icmp eq i32 %97, 0, !dbg !39
  br i1 %.not.i31, label %103, label %98, !dbg !39

98:                                               ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %101, label %99, !dbg !39

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #5, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #5, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

103:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %106, label %104, !dbg !39

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #5, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #5, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

__nv_sqrtf.exit35:                                ; preds = %99, %101, %104, %106
  %.0.i33 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !39
  %108 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %109 = bitcast i32 %108 to float, !dbg !26
  %110 = bitcast i32 %52 to float, !dbg !28
  %111 = fsub float %109, %110, !dbg !40
  %112 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = fsub float %113, %110, !dbg !40
  %115 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %116 = bitcast i32 %115 to float, !dbg !26
  %117 = fsub float %116, %110, !dbg !40
  %118 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %119 = bitcast i32 %118 to float, !dbg !26
  %120 = fsub float %119, %110, !dbg !40
  %121 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %122 = bitcast i32 %121 to float, !dbg !16
  %123 = bitcast i32 %29 to float, !dbg !18
  %124 = fsub float %122, %123, !dbg !41
  %125 = fmul float %124, %88, !dbg !42
  %126 = bitcast i32 %40 to float, !dbg !22
  %127 = fmul float %125, %126, !dbg !43
  %128 = bitcast i32 %45 to float, !dbg !24
  %129 = fadd float %127, %128, !dbg !44
  %130 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %131 = bitcast i32 %130 to float, !dbg !16
  %132 = fsub float %131, %123, !dbg !41
  %133 = fmul float %132, %88, !dbg !42
  %134 = fmul float %133, %126, !dbg !43
  %135 = fadd float %134, %128, !dbg !44
  %136 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %137 = bitcast i32 %136 to float, !dbg !16
  %138 = fsub float %137, %123, !dbg !41
  %139 = fmul float %138, %88, !dbg !42
  %140 = fmul float %139, %126, !dbg !43
  %141 = fadd float %140, %128, !dbg !44
  %142 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %143 = bitcast i32 %142 to float, !dbg !16
  %144 = fsub float %143, %123, !dbg !41
  %145 = fmul float %144, %88, !dbg !42
  %146 = fmul float %145, %126, !dbg !43
  %147 = fadd float %146, %128, !dbg !44
  %148 = bitcast i32 %68 to float, !dbg !34
  %149 = bitcast i32 %63 to float, !dbg !32
  %150 = lshr i32 %15, 5, !dbg !11
  %151 = and i32 %15, 31, !dbg !11
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #5, !dbg !45
  %153 = fmul float %120, %152, !dbg !46
  %154 = fmul float %117, %152, !dbg !46
  %155 = fmul float %114, %152, !dbg !46
  %156 = fmul float %111, %152, !dbg !46
  %157 = fmul float %153, %149, !dbg !47
  %158 = fmul float %154, %149, !dbg !47
  %159 = fmul float %155, %149, !dbg !47
  %160 = fmul float %156, %149, !dbg !47
  %161 = fadd float %157, %148, !dbg !48
  %162 = fadd float %158, %148, !dbg !48
  %163 = fadd float %159, %148, !dbg !48
  %164 = fadd float %160, %148, !dbg !48
  %165 = fcmp olt float %161, 0.000000e+00, !dbg !49
  %166 = fcmp olt float %162, 0.000000e+00, !dbg !49
  %167 = fcmp olt float %163, 0.000000e+00, !dbg !49
  %168 = fcmp olt float %164, 0.000000e+00, !dbg !49
  %169 = select i1 %165, float 0.000000e+00, float %161, !dbg !53
  %170 = select i1 %166, float 0.000000e+00, float %162, !dbg !53
  %171 = select i1 %167, float 0.000000e+00, float %163, !dbg !53
  %172 = select i1 %168, float 0.000000e+00, float %164, !dbg !53
  %173 = fadd float %147, %169, !dbg !54
  %174 = fadd float %141, %170, !dbg !54
  %175 = fadd float %135, %171, !dbg !54
  %176 = fadd float %129, %172, !dbg !54
  %177 = fcmp olt float %173, 0.000000e+00, !dbg !55
  %178 = fcmp olt float %174, 0.000000e+00, !dbg !55
  %179 = fcmp olt float %175, 0.000000e+00, !dbg !55
  %180 = fcmp olt float %176, 0.000000e+00, !dbg !55
  %181 = select i1 %177, float 0.000000e+00, float %173, !dbg !57
  %182 = select i1 %178, float 0.000000e+00, float %174, !dbg !57
  %183 = select i1 %179, float 0.000000e+00, float %175, !dbg !57
  %184 = select i1 %180, float 0.000000e+00, float %176, !dbg !57
  %185 = fadd float %181, %182, !dbg !58
  %186 = fadd float %183, %185, !dbg !58
  %187 = fadd float %184, %186, !dbg !58
  %188 = bitcast float %187 to i32, !dbg !63
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 16, i32 31), !dbg !63
  %190 = bitcast i32 %189 to float, !dbg !63
  %191 = fadd float %187, %190, !dbg !58
  %192 = bitcast float %191 to i32, !dbg !63
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 8, i32 31), !dbg !63
  %194 = bitcast i32 %193 to float, !dbg !63
  %195 = fadd float %191, %194, !dbg !58
  %196 = bitcast float %195 to i32, !dbg !63
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !63
  %198 = bitcast i32 %197 to float, !dbg !63
  %199 = fadd float %195, %198, !dbg !58
  %200 = bitcast float %199 to i32, !dbg !63
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 2, i32 31), !dbg !63
  %202 = bitcast i32 %201 to float, !dbg !63
  %203 = fadd float %199, %202, !dbg !58
  %204 = bitcast float %203 to i32, !dbg !63
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !63
  %206 = bitcast i32 %205 to float, !dbg !63
  %207 = fadd float %203, %206, !dbg !58
  %208 = icmp eq i32 %151, 0, !dbg !63
  %209 = and i32 %150, 1, !dbg !63
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !63
  %211 = bitcast float %207 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 %208) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %212 = icmp slt i32 %15, 2, !dbg !63
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !63
  %214 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %213, i1 %212) #5, !dbg !63
  %215 = bitcast i32 %214 to float, !dbg !63
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !63
  %217 = bitcast i32 %216 to float, !dbg !63
  %218 = fadd float %215, %217, !dbg !58
  %219 = and i32 %15, 1, !dbg !63
  %220 = icmp eq i32 %219, 0, !dbg !63
  %221 = and i1 %212, %220, !dbg !63
  %222 = bitcast float %218 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %222, i1 %221) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %223 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !63
  %224 = fadd float %223, 0.000000e+00, !dbg !64
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float 2.560000e+02) #5, !dbg !66
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !67
  %227 = bitcast float %181 to i32, !dbg !68
  %228 = bitcast float %182 to i32, !dbg !68
  %229 = bitcast float %183 to i32, !dbg !68
  %230 = bitcast float %184 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %227, i32 %228, i32 %229, i32 %230, ptr addrspace(1) %226, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %231 = sext i32 %14 to i64, !dbg !70
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !70
  %urem = and i32 %15, 63, !dbg !71
  %233 = icmp eq i32 %urem, 0, !dbg !71
  %234 = bitcast float %225 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %234, ptr addrspace(1) %232, i1 %233) #5, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c465zczoojjleqgoz7ezepr5uadpelar4t7ibpfwfzed5che5jhc.py", directory: "inductor_cache/46")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_8, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_8", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 39, scope: !7)
!14 = !DILocation(line: 33, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 44, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 30, scope: !7)
!20 = !DILocation(line: 35, column: 35, scope: !7)
!21 = !DILocation(line: 36, column: 31, scope: !7)
!22 = !DILocation(line: 36, column: 36, scope: !7)
!23 = !DILocation(line: 37, column: 31, scope: !7)
!24 = !DILocation(line: 37, column: 36, scope: !7)
!25 = !DILocation(line: 38, column: 31, scope: !7)
!26 = !DILocation(line: 38, column: 45, scope: !7)
!27 = !DILocation(line: 39, column: 31, scope: !7)
!28 = !DILocation(line: 39, column: 36, scope: !7)
!29 = !DILocation(line: 40, column: 31, scope: !7)
!30 = !DILocation(line: 40, column: 36, scope: !7)
!31 = !DILocation(line: 41, column: 31, scope: !7)
!32 = !DILocation(line: 41, column: 36, scope: !7)
!33 = !DILocation(line: 42, column: 31, scope: !7)
!34 = !DILocation(line: 42, column: 36, scope: !7)
!35 = !DILocation(line: 45, column: 18, scope: !7)
!36 = !DILocation(line: 46, column: 26, scope: !7)
!37 = !DILocation(line: 48, column: 18, scope: !7)
!38 = !DILocation(line: 55, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 27, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 43, column: 18, scope: !7)
!42 = !DILocation(line: 51, column: 19, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 19, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 63, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !56)
!56 = !DILocation(line: 65, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !56)
!58 = !DILocation(line: 256, column: 15, scope: !59, inlinedAt: !62)
!59 = distinct !DILexicalBlockFile(scope: !61, file: !60, discriminator: 0)
!60 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!61 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!62 = !DILocation(line: 67, column: 59, scope: !7)
!63 = !DILocation(line: 267, column: 36, scope: !61, inlinedAt: !62)
!64 = !DILocation(line: 73, column: 15, scope: !50, inlinedAt: !65)
!65 = !DILocation(line: 67, column: 45, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 28, scope: !7)
!68 = !DILocation(line: 70, column: 49, scope: !7)
!69 = !DILocation(line: 71, column: 4, scope: !7)
!70 = !DILocation(line: 72, column: 28, scope: !7)
!71 = !DILocation(line: 72, column: 40, scope: !7)
!72 = !DILocation(line: 72, column: 4, scope: !7)
