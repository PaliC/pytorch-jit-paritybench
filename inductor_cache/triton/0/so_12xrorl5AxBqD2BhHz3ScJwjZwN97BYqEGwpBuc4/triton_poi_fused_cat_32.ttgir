#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_32(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg12: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg13: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg14: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg15: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1024xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1024xf32, #blocked> loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<1905152> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<32> : tensor<1024xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<32> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<64> : tensor<1024xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<-32> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<-64> : tensor<1024xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_2 : tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_3 : tensor<1024xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_3 : tensor<1024xi32, #blocked> loc(#loc8)
    %8 = arith.extsi %6 : tensor<1024xi32, #blocked> to tensor<1024xi64, #blocked> loc(#loc9)
    %9 = arith.cmpi slt, %8, %cst_4 : tensor<1024xi64, #blocked> loc(#loc9)
    %10 = arith.muli %7, %cst_5 : tensor<1024xi32, #blocked> loc(#loc10)
    %11 = arith.addi %10, %6 : tensor<1024xi32, #blocked> loc(#loc11)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.addptr %12, %11 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %14 = arith.andi %9, %5 : tensor<1024xi1, #blocked> loc(#loc13)
    %15 = tt.load %13, %14, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc15)
    %17 = tt.addptr %16, %6 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc15)
    %18 = tt.load %17, %14, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %19 = arith.subf %15, %18 : tensor<1024xf32, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %6 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc18)
    %22 = tt.load %21, %14, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc19)
    %23 = arith.addf %22, %cst_0 : tensor<1024xf32, #blocked> loc(#loc20)
    %24 = tt.extern_elementwise %23 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1024xf32, #blocked>) -> tensor<1024xf32, #blocked> loc(#loc21)
    %25 = arith.divf %cst_1, %24 : tensor<1024xf32, #blocked> loc(#loc22)
    %26 = arith.mulf %19, %25 : tensor<1024xf32, #blocked> loc(#loc23)
    %27 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc24)
    %28 = tt.addptr %27, %6 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc24)
    %29 = tt.load %28, %14, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc25)
    %30 = arith.mulf %26, %29 : tensor<1024xf32, #blocked> loc(#loc26)
    %31 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc27)
    %32 = tt.addptr %31, %6 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc27)
    %33 = tt.load %32, %14, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc28)
    %34 = arith.addf %30, %33 : tensor<1024xf32, #blocked> loc(#loc29)
    %35 = arith.cmpf ogt, %cst, %34 : tensor<1024xf32, #blocked> loc(#loc88)
    %36 = arith.select %35, %cst, %34 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc89)
    %37 = arith.cmpi sge, %8, %cst_4 : tensor<1024xi64, #blocked> loc(#loc33)
    %38 = arith.cmpi slt, %8, %cst_6 : tensor<1024xi64, #blocked> loc(#loc34)
    %39 = arith.andi %37, %38 : tensor<1024xi1, #blocked> loc(#loc35)
    %40 = arith.addi %6, %cst_7 : tensor<1024xi32, #blocked> loc(#loc36)
    %41 = arith.addi %10, %40 : tensor<1024xi32, #blocked> loc(#loc37)
    %42 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc38)
    %43 = tt.addptr %42, %41 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc38)
    %44 = arith.andi %39, %5 : tensor<1024xi1, #blocked> loc(#loc39)
    %45 = tt.load %43, %44, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc40)
    %46 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc41)
    %47 = tt.addptr %46, %40 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc41)
    %48 = tt.load %47, %44, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc42)
    %49 = arith.subf %45, %48 : tensor<1024xf32, #blocked> loc(#loc43)
    %50 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc44)
    %51 = tt.addptr %50, %40 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc44)
    %52 = tt.load %51, %44, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc45)
    %53 = arith.addf %52, %cst_0 : tensor<1024xf32, #blocked> loc(#loc46)
    %54 = tt.extern_elementwise %53 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1024xf32, #blocked>) -> tensor<1024xf32, #blocked> loc(#loc47)
    %55 = arith.divf %cst_1, %54 : tensor<1024xf32, #blocked> loc(#loc48)
    %56 = arith.mulf %49, %55 : tensor<1024xf32, #blocked> loc(#loc49)
    %57 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc50)
    %58 = tt.addptr %57, %40 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc50)
    %59 = tt.load %58, %44, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc51)
    %60 = arith.mulf %56, %59 : tensor<1024xf32, #blocked> loc(#loc52)
    %61 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc53)
    %62 = tt.addptr %61, %40 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc53)
    %63 = tt.load %62, %44, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc54)
    %64 = arith.addf %60, %63 : tensor<1024xf32, #blocked> loc(#loc55)
    %65 = arith.cmpf ogt, %cst, %64 : tensor<1024xf32, #blocked> loc(#loc90)
    %66 = arith.select %65, %cst, %64 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc91)
    %67 = arith.cmpi sge, %8, %cst_6 : tensor<1024xi64, #blocked> loc(#loc57)
    %68 = arith.muli %7, %cst_8 : tensor<1024xi32, #blocked> loc(#loc58)
    %69 = arith.addi %6, %cst_9 : tensor<1024xi32, #blocked> loc(#loc59)
    %70 = arith.addi %68, %69 : tensor<1024xi32, #blocked> loc(#loc60)
    %71 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc61)
    %72 = tt.addptr %71, %70 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc61)
    %73 = arith.andi %67, %5 : tensor<1024xi1, #blocked> loc(#loc62)
    %74 = tt.load %72, %73, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc63)
    %75 = tt.splat %arg11 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc64)
    %76 = tt.addptr %75, %69 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc64)
    %77 = tt.load %76, %73, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc65)
    %78 = arith.subf %74, %77 : tensor<1024xf32, #blocked> loc(#loc66)
    %79 = tt.splat %arg12 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc67)
    %80 = tt.addptr %79, %69 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc67)
    %81 = tt.load %80, %73, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc68)
    %82 = arith.addf %81, %cst_0 : tensor<1024xf32, #blocked> loc(#loc69)
    %83 = tt.extern_elementwise %82 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1024xf32, #blocked>) -> tensor<1024xf32, #blocked> loc(#loc70)
    %84 = arith.divf %cst_1, %83 : tensor<1024xf32, #blocked> loc(#loc71)
    %85 = arith.mulf %78, %84 : tensor<1024xf32, #blocked> loc(#loc72)
    %86 = tt.splat %arg13 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc73)
    %87 = tt.addptr %86, %69 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc73)
    %88 = tt.load %87, %73, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc74)
    %89 = arith.mulf %85, %88 : tensor<1024xf32, #blocked> loc(#loc75)
    %90 = tt.splat %arg14 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc76)
    %91 = tt.addptr %90, %69 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc76)
    %92 = tt.load %91, %73, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc77)
    %93 = arith.addf %89, %92 : tensor<1024xf32, #blocked> loc(#loc78)
    %94 = arith.cmpf ogt, %cst, %93 : tensor<1024xf32, #blocked> loc(#loc92)
    %95 = arith.select %94, %cst, %93 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc93)
    %96 = arith.select %67, %95, %cst : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc80)
    %97 = arith.select %39, %66, %96 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc94)
    %98 = arith.select %9, %36, %97 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc95)
    %99 = tt.splat %arg15 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc85)
    %100 = tt.addptr %99, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc85)
    tt.store %100, %98, %5 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc86)
    tt.return loc(#loc87)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":21:28)
#loc3 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":21:33)
#loc4 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":22:36)
#loc5 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":22:23)
#loc6 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":23:21)
#loc7 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":24:19)
#loc8 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":25:19)
#loc9 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":31:18)
#loc10 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":32:33)
#loc11 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":32:39)
#loc12 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":32:30)
#loc13 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":32:52)
#loc14 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":32:45)
#loc15 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":33:30)
#loc16 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":33:35)
#loc17 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":34:18)
#loc18 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":35:30)
#loc19 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":35:35)
#loc20 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":37:19)
#loc21 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":38:27)
#loc22 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":40:20)
#loc23 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":43:19)
#loc24 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":44:31)
#loc25 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":44:36)
#loc26 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":45:20)
#loc27 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":46:31)
#loc28 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":46:36)
#loc29 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":47:20)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc31 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":49:42)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc33 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":52:20)
#loc34 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":54:19)
#loc35 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":55:20)
#loc36 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":56:48)
#loc37 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":56:40)
#loc38 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":56:31)
#loc39 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":56:62)
#loc40 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":56:54)
#loc41 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":57:31)
#loc42 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":57:44)
#loc43 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":58:20)
#loc44 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":59:31)
#loc45 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":59:44)
#loc46 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":61:20)
#loc47 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":62:27)
#loc48 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":64:20)
#loc49 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":67:20)
#loc50 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":68:31)
#loc51 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":68:44)
#loc52 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":69:20)
#loc53 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":70:31)
#loc54 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":70:44)
#loc55 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":71:20)
#loc56 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":73:42)
#loc57 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":76:20)
#loc58 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":79:35)
#loc59 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":79:49)
#loc60 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":79:41)
#loc61 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":79:32)
#loc62 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":79:63)
#loc63 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":79:55)
#loc64 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":80:32)
#loc65 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":80:45)
#loc66 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":81:20)
#loc67 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":82:32)
#loc68 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":82:45)
#loc69 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":84:20)
#loc70 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":85:27)
#loc71 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":87:20)
#loc72 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":90:20)
#loc73 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":91:32)
#loc74 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":91:45)
#loc75 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":92:20)
#loc76 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":93:32)
#loc77 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":93:45)
#loc78 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":94:20)
#loc79 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":96:42)
#loc80 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":98:35)
#loc81 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":99:35)
#loc82 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":75:35)
#loc83 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":100:34)
#loc84 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":51:34)
#loc85 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":101:25)
#loc86 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":101:37)
#loc87 = loc("inductor_cache/2l/c2lzh42advxgd44kh7mk7qqq236q2gjiiqn2qaugehqkf5kl4v3e.py":101:4)
#loc88 = loc(callsite(#loc30 at #loc31))
#loc89 = loc(callsite(#loc32 at #loc31))
#loc90 = loc(callsite(#loc30 at #loc56))
#loc91 = loc(callsite(#loc32 at #loc56))
#loc92 = loc(callsite(#loc30 at #loc79))
#loc93 = loc(callsite(#loc32 at #loc79))
#loc94 = loc(fused[#loc81, #loc82])
#loc95 = loc(fused[#loc83, #loc84])
