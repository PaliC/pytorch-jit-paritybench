; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = or disjoint i32 %14, 512, !dbg !13
  %17 = or disjoint i32 %14, 514, !dbg !13
  %18 = srem i32 %14, 42, !dbg !14
  %19 = srem i32 %15, 42, !dbg !14
  %20 = srem i32 %16, 42, !dbg !14
  %21 = srem i32 %17, 42, !dbg !14
  %22 = sext i32 %14 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = sext i32 %16 to i64, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !15
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !16
  %28 = sext i32 %18 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !17
  %30 = sext i32 %19 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !17
  %32 = sext i32 %20 to i64, !dbg !17
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !17
  %34 = sext i32 %21 to i64, !dbg !17
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !17
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !18
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !18
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !19
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !20
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !20
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !20
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !21
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !22
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !22
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !22
  %55 = bitcast i32 %53 to float, !dbg !22
  %56 = bitcast i32 %54 to float, !dbg !22
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !22
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !22
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !22
  %60 = bitcast i32 %58 to float, !dbg !22
  %61 = bitcast i32 %59 to float, !dbg !22
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !22
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !22
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !22
  %65 = bitcast i32 %63 to float, !dbg !22
  %66 = bitcast i32 %64 to float, !dbg !22
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !22
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !22
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !22
  %70 = bitcast i32 %68 to float, !dbg !22
  %71 = bitcast i32 %69 to float, !dbg !22
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !23
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !24
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !24
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !24
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !25
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !26
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !26
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !26
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !26
  %88 = fadd float %55, 0x3EE4F8B580000000, !dbg !27
  %89 = fadd float %56, 0x3EE4F8B580000000, !dbg !27
  %90 = fadd float %60, 0x3EE4F8B580000000, !dbg !27
  %91 = fadd float %61, 0x3EE4F8B580000000, !dbg !27
  %92 = fadd float %65, 0x3EE4F8B580000000, !dbg !27
  %93 = fadd float %66, 0x3EE4F8B580000000, !dbg !27
  %94 = fadd float %70, 0x3EE4F8B580000000, !dbg !27
  %95 = fadd float %71, 0x3EE4F8B580000000, !dbg !27
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %96, 0, !dbg !28
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %97, 0, !dbg !28
  br i1 %.not.i, label %103, label %98, !dbg !28

98:                                               ; preds = %8
  br i1 %.not1.i, label %101, label %99, !dbg !28

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

103:                                              ; preds = %8
  br i1 %.not1.i, label %106, label %104, !dbg !28

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !28
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i8 = icmp eq i32 %108, 0, !dbg !28
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i11 = icmp eq i32 %109, 0, !dbg !28
  br i1 %.not.i8, label %115, label %110, !dbg !28

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %113, label %111, !dbg !28

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !28
  br label %__nv_sqrtf.exit12, !dbg !28

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !28
  br label %__nv_sqrtf.exit12, !dbg !28

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %118, label %116, !dbg !28

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !28
  br label %__nv_sqrtf.exit12, !dbg !28

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !28
  br label %__nv_sqrtf.exit12, !dbg !28

__nv_sqrtf.exit12:                                ; preds = %111, %113, %116, %118
  %.0.i10 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !28
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i13 = icmp eq i32 %120, 0, !dbg !28
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i16 = icmp eq i32 %121, 0, !dbg !28
  br i1 %.not.i13, label %127, label %122, !dbg !28

122:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %125, label %123, !dbg !28

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !28
  br label %__nv_sqrtf.exit17, !dbg !28

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !28
  br label %__nv_sqrtf.exit17, !dbg !28

127:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %130, label %128, !dbg !28

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !28
  br label %__nv_sqrtf.exit17, !dbg !28

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !28
  br label %__nv_sqrtf.exit17, !dbg !28

__nv_sqrtf.exit17:                                ; preds = %123, %125, %128, %130
  %.0.i15 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !28
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i18 = icmp eq i32 %132, 0, !dbg !28
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i21 = icmp eq i32 %133, 0, !dbg !28
  br i1 %.not.i18, label %139, label %134, !dbg !28

134:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %137, label %135, !dbg !28

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !28
  br label %__nv_sqrtf.exit22, !dbg !28

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !28
  br label %__nv_sqrtf.exit22, !dbg !28

139:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %142, label %140, !dbg !28

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !28
  br label %__nv_sqrtf.exit22, !dbg !28

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !28
  br label %__nv_sqrtf.exit22, !dbg !28

__nv_sqrtf.exit22:                                ; preds = %135, %137, %140, %142
  %.0.i20 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !28
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i23 = icmp eq i32 %144, 0, !dbg !28
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i26 = icmp eq i32 %145, 0, !dbg !28
  br i1 %.not.i23, label %151, label %146, !dbg !28

146:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %149, label %147, !dbg !28

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !28
  br label %__nv_sqrtf.exit27, !dbg !28

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !28
  br label %__nv_sqrtf.exit27, !dbg !28

151:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %154, label %152, !dbg !28

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !28
  br label %__nv_sqrtf.exit27, !dbg !28

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !28
  br label %__nv_sqrtf.exit27, !dbg !28

__nv_sqrtf.exit27:                                ; preds = %147, %149, %152, %154
  %.0.i25 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !28
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i28 = icmp eq i32 %156, 0, !dbg !28
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i31 = icmp eq i32 %157, 0, !dbg !28
  br i1 %.not.i28, label %163, label %158, !dbg !28

158:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %161, label %159, !dbg !28

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !28
  br label %__nv_sqrtf.exit32, !dbg !28

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !28
  br label %__nv_sqrtf.exit32, !dbg !28

163:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %166, label %164, !dbg !28

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !28
  br label %__nv_sqrtf.exit32, !dbg !28

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !28
  br label %__nv_sqrtf.exit32, !dbg !28

__nv_sqrtf.exit32:                                ; preds = %159, %161, %164, %166
  %.0.i30 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !28
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i33 = icmp eq i32 %168, 0, !dbg !28
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i36 = icmp eq i32 %169, 0, !dbg !28
  br i1 %.not.i33, label %175, label %170, !dbg !28

170:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %173, label %171, !dbg !28

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !28
  br label %__nv_sqrtf.exit37, !dbg !28

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !28
  br label %__nv_sqrtf.exit37, !dbg !28

175:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %178, label %176, !dbg !28

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !28
  br label %__nv_sqrtf.exit37, !dbg !28

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !28
  br label %__nv_sqrtf.exit37, !dbg !28

__nv_sqrtf.exit37:                                ; preds = %171, %173, %176, %178
  %.0.i35 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !28
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i38 = icmp eq i32 %180, 0, !dbg !28
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i41 = icmp eq i32 %181, 0, !dbg !28
  br i1 %.not.i38, label %187, label %182, !dbg !28

182:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %185, label %183, !dbg !28

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !28
  br label %__nv_sqrtf.exit42, !dbg !28

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !28
  br label %__nv_sqrtf.exit42, !dbg !28

187:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %190, label %188, !dbg !28

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !28
  br label %__nv_sqrtf.exit42, !dbg !28

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !28
  br label %__nv_sqrtf.exit42, !dbg !28

__nv_sqrtf.exit42:                                ; preds = %183, %185, %188, %190
  %.0.i40 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !28
  %192 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %193 = extractvalue { i32, i32 } %39, 1, !dbg !18
  %194 = extractvalue { i32, i32 } %47, 1, !dbg !20
  %195 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %196 = extractvalue { i32, i32 } %39, 0, !dbg !18
  %197 = extractvalue { i32, i32 } %47, 0, !dbg !20
  %198 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %199 = extractvalue { i32, i32 } %38, 1, !dbg !18
  %200 = extractvalue { i32, i32 } %46, 1, !dbg !20
  %201 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %202 = extractvalue { i32, i32 } %38, 0, !dbg !18
  %203 = extractvalue { i32, i32 } %46, 0, !dbg !20
  %204 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %205 = extractvalue { i32, i32 } %37, 1, !dbg !18
  %206 = extractvalue { i32, i32 } %45, 1, !dbg !20
  %207 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %208 = extractvalue { i32, i32 } %37, 0, !dbg !18
  %209 = extractvalue { i32, i32 } %45, 0, !dbg !20
  %210 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %211 = extractvalue { i32, i32 } %36, 1, !dbg !18
  %212 = extractvalue { i32, i32 } %44, 1, !dbg !20
  %213 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %214 = extractvalue { i32, i32 } %36, 0, !dbg !18
  %215 = extractvalue { i32, i32 } %44, 0, !dbg !20
  %216 = extractvalue { i32, i32 } %87, 1, !dbg !26
  %217 = extractvalue { i32, i32 } %87, 0, !dbg !26
  %218 = extractvalue { i32, i32 } %86, 1, !dbg !26
  %219 = extractvalue { i32, i32 } %86, 0, !dbg !26
  %220 = extractvalue { i32, i32 } %85, 1, !dbg !26
  %221 = extractvalue { i32, i32 } %85, 0, !dbg !26
  %222 = extractvalue { i32, i32 } %84, 1, !dbg !26
  %223 = extractvalue { i32, i32 } %84, 0, !dbg !26
  %224 = extractvalue { i32, i32 } %79, 1, !dbg !24
  %225 = extractvalue { i32, i32 } %79, 0, !dbg !24
  %226 = extractvalue { i32, i32 } %78, 1, !dbg !24
  %227 = extractvalue { i32, i32 } %78, 0, !dbg !24
  %228 = extractvalue { i32, i32 } %77, 1, !dbg !24
  %229 = extractvalue { i32, i32 } %77, 0, !dbg !24
  %230 = extractvalue { i32, i32 } %76, 1, !dbg !24
  %231 = extractvalue { i32, i32 } %76, 0, !dbg !24
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !29
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !29
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !29
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !29
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !29
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !29
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !29
  %240 = insertelement <8 x i32> poison, i32 %192, i64 0, !dbg !16
  %241 = insertelement <8 x i32> %240, i32 %195, i64 1, !dbg !16
  %242 = insertelement <8 x i32> %241, i32 %198, i64 2, !dbg !16
  %243 = insertelement <8 x i32> %242, i32 %201, i64 3, !dbg !16
  %244 = insertelement <8 x i32> %243, i32 %204, i64 4, !dbg !16
  %245 = insertelement <8 x i32> %244, i32 %207, i64 5, !dbg !16
  %246 = insertelement <8 x i32> %245, i32 %210, i64 6, !dbg !16
  %247 = insertelement <8 x i32> %246, i32 %213, i64 7, !dbg !16
  %248 = bitcast <8 x i32> %247 to <8 x float>, !dbg !16
  %249 = insertelement <8 x i32> poison, i32 %193, i64 0, !dbg !18
  %250 = insertelement <8 x i32> %249, i32 %196, i64 1, !dbg !18
  %251 = insertelement <8 x i32> %250, i32 %199, i64 2, !dbg !18
  %252 = insertelement <8 x i32> %251, i32 %202, i64 3, !dbg !18
  %253 = insertelement <8 x i32> %252, i32 %205, i64 4, !dbg !18
  %254 = insertelement <8 x i32> %253, i32 %208, i64 5, !dbg !18
  %255 = insertelement <8 x i32> %254, i32 %211, i64 6, !dbg !18
  %256 = insertelement <8 x i32> %255, i32 %214, i64 7, !dbg !18
  %257 = bitcast <8 x i32> %256 to <8 x float>, !dbg !18
  %258 = fadd <8 x float> %248, %257, !dbg !30
  %259 = insertelement <8 x i32> poison, i32 %194, i64 0, !dbg !20
  %260 = insertelement <8 x i32> %259, i32 %197, i64 1, !dbg !20
  %261 = insertelement <8 x i32> %260, i32 %200, i64 2, !dbg !20
  %262 = insertelement <8 x i32> %261, i32 %203, i64 3, !dbg !20
  %263 = insertelement <8 x i32> %262, i32 %206, i64 4, !dbg !20
  %264 = insertelement <8 x i32> %263, i32 %209, i64 5, !dbg !20
  %265 = insertelement <8 x i32> %264, i32 %212, i64 6, !dbg !20
  %266 = insertelement <8 x i32> %265, i32 %215, i64 7, !dbg !20
  %267 = bitcast <8 x i32> %266 to <8 x float>, !dbg !20
  %268 = fsub <8 x float> %258, %267, !dbg !31
  %269 = insertelement <8 x i32> poison, i32 %216, i64 0, !dbg !26
  %270 = insertelement <8 x i32> %269, i32 %217, i64 1, !dbg !26
  %271 = insertelement <8 x i32> %270, i32 %218, i64 2, !dbg !26
  %272 = insertelement <8 x i32> %271, i32 %219, i64 3, !dbg !26
  %273 = insertelement <8 x i32> %272, i32 %220, i64 4, !dbg !26
  %274 = insertelement <8 x i32> %273, i32 %221, i64 5, !dbg !26
  %275 = insertelement <8 x i32> %274, i32 %222, i64 6, !dbg !26
  %276 = insertelement <8 x i32> %275, i32 %223, i64 7, !dbg !26
  %277 = bitcast <8 x i32> %276 to <8 x float>, !dbg !26
  %278 = insertelement <8 x i32> poison, i32 %224, i64 0, !dbg !24
  %279 = insertelement <8 x i32> %278, i32 %225, i64 1, !dbg !24
  %280 = insertelement <8 x i32> %279, i32 %226, i64 2, !dbg !24
  %281 = insertelement <8 x i32> %280, i32 %227, i64 3, !dbg !24
  %282 = insertelement <8 x i32> %281, i32 %228, i64 4, !dbg !24
  %283 = insertelement <8 x i32> %282, i32 %229, i64 5, !dbg !24
  %284 = insertelement <8 x i32> %283, i32 %230, i64 6, !dbg !24
  %285 = insertelement <8 x i32> %284, i32 %231, i64 7, !dbg !24
  %286 = bitcast <8 x i32> %285 to <8 x float>, !dbg !24
  %287 = insertelement <8 x float> poison, float %239, i64 0, !dbg !32
  %288 = insertelement <8 x float> %287, float %238, i64 1, !dbg !32
  %289 = insertelement <8 x float> %288, float %237, i64 2, !dbg !32
  %290 = insertelement <8 x float> %289, float %236, i64 3, !dbg !32
  %291 = insertelement <8 x float> %290, float %235, i64 4, !dbg !32
  %292 = insertelement <8 x float> %291, float %234, i64 5, !dbg !32
  %293 = insertelement <8 x float> %292, float %233, i64 6, !dbg !32
  %294 = insertelement <8 x float> %293, float %232, i64 7, !dbg !32
  %295 = fmul <8 x float> %268, %294, !dbg !32
  %296 = fmul <8 x float> %295, %286, !dbg !33
  %297 = fadd <8 x float> %296, %277, !dbg !34
  %298 = fcmp ole <8 x float> %297, zeroinitializer, !dbg !35
  %299 = select <8 x i1> %298, <8 x float> zeroinitializer, <8 x float> %297, !dbg !35
  %300 = fcmp olt <8 x float> %299, splat (float 6.000000e+00), !dbg !39
  %301 = extractelement <8 x float> %299, i64 7, !dbg !41
  %302 = fcmp uno float %301, 0.000000e+00, !dbg !42
  %303 = extractelement <8 x float> %299, i64 6, !dbg !41
  %304 = fcmp uno float %303, 0.000000e+00, !dbg !42
  %305 = extractelement <8 x float> %299, i64 5, !dbg !41
  %306 = fcmp uno float %305, 0.000000e+00, !dbg !42
  %307 = extractelement <8 x float> %299, i64 4, !dbg !41
  %308 = fcmp uno float %307, 0.000000e+00, !dbg !42
  %309 = extractelement <8 x float> %299, i64 3, !dbg !41
  %310 = fcmp uno float %309, 0.000000e+00, !dbg !42
  %311 = extractelement <8 x float> %299, i64 2, !dbg !41
  %312 = fcmp uno float %311, 0.000000e+00, !dbg !42
  %313 = extractelement <8 x float> %299, i64 1, !dbg !41
  %314 = fcmp uno float %313, 0.000000e+00, !dbg !42
  %315 = extractelement <8 x float> %299, i64 0, !dbg !41
  %316 = fcmp uno float %315, 0.000000e+00, !dbg !42
  %317 = extractelement <8 x i1> %300, i64 7, !dbg !43
  %318 = or i1 %317, %302, !dbg !43
  %319 = extractelement <8 x i1> %300, i64 6, !dbg !43
  %320 = or i1 %319, %304, !dbg !43
  %321 = extractelement <8 x i1> %300, i64 5, !dbg !43
  %322 = or i1 %321, %306, !dbg !43
  %323 = extractelement <8 x i1> %300, i64 4, !dbg !43
  %324 = or i1 %323, %308, !dbg !43
  %325 = extractelement <8 x i1> %300, i64 3, !dbg !43
  %326 = or i1 %325, %310, !dbg !43
  %327 = extractelement <8 x i1> %300, i64 2, !dbg !43
  %328 = or i1 %327, %312, !dbg !43
  %329 = extractelement <8 x i1> %300, i64 1, !dbg !43
  %330 = or i1 %329, %314, !dbg !43
  %331 = extractelement <8 x i1> %300, i64 0, !dbg !43
  %332 = or i1 %331, %316, !dbg !43
  %bc = bitcast <8 x float> %258 to <8 x i32>, !dbg !44
  %333 = extractelement <8 x i32> %bc, i64 7, !dbg !44
  %bc43 = bitcast <8 x float> %258 to <8 x i32>, !dbg !44
  %334 = extractelement <8 x i32> %bc43, i64 6, !dbg !44
  %bc44 = bitcast <8 x float> %258 to <8 x i32>, !dbg !44
  %335 = extractelement <8 x i32> %bc44, i64 5, !dbg !44
  %bc45 = bitcast <8 x float> %258 to <8 x i32>, !dbg !44
  %336 = extractelement <8 x i32> %bc45, i64 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %334, i32 %335, i32 %336, ptr addrspace(1) %23, i1 true) #3, !dbg !44
  %bc46 = bitcast <8 x float> %258 to <8 x i32>, !dbg !44
  %337 = extractelement <8 x i32> %bc46, i64 3, !dbg !44
  %bc47 = bitcast <8 x float> %258 to <8 x i32>, !dbg !44
  %338 = extractelement <8 x i32> %bc47, i64 2, !dbg !44
  %bc48 = bitcast <8 x float> %258 to <8 x i32>, !dbg !44
  %339 = extractelement <8 x i32> %bc48, i64 1, !dbg !44
  %bc49 = bitcast <8 x float> %258 to <8 x i32>, !dbg !44
  %340 = extractelement <8 x i32> %bc49, i64 0, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %337, i32 %338, i32 %339, i32 %340, ptr addrspace(1) %25, i1 true) #3, !dbg !44
  %341 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !45
  %342 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !45
  %343 = bitcast float %301 to i32, !dbg !41
  %344 = select i1 %318, i32 %343, i32 1086324736, !dbg !46
  %345 = bitcast float %303 to i32, !dbg !41
  %346 = select i1 %320, i32 %345, i32 1086324736, !dbg !46
  %347 = bitcast float %305 to i32, !dbg !41
  %348 = select i1 %322, i32 %347, i32 1086324736, !dbg !46
  %349 = bitcast float %307 to i32, !dbg !41
  %350 = select i1 %324, i32 %349, i32 1086324736, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %346, i32 %348, i32 %350, ptr addrspace(1) %341, i1 true) #3, !dbg !41
  %351 = bitcast float %309 to i32, !dbg !41
  %352 = select i1 %326, i32 %351, i32 1086324736, !dbg !46
  %353 = bitcast float %311 to i32, !dbg !41
  %354 = select i1 %328, i32 %353, i32 1086324736, !dbg !46
  %355 = bitcast float %313 to i32, !dbg !41
  %356 = select i1 %330, i32 %355, i32 1086324736, !dbg !46
  %357 = bitcast float %315 to i32, !dbg !41
  %358 = select i1 %332, i32 %357, i32 1086324736, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %352, i32 %354, i32 %356, i32 %358, ptr addrspace(1) %342, i1 true) #3, !dbg !41
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crot4jx26j5h7slziyrucbifv2lj56i7mavlzbb47g4zefsy2voe.py", directory: "inductor_cache/ro")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 26, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 20, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 45, column: 42, scope: !7)
!39 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !40)
!40 = !DILocation(line: 47, column: 42, scope: !7)
!41 = !DILocation(line: 49, column: 37, scope: !7)
!42 = !DILocation(line: 112, column: 21, scope: !36, inlinedAt: !40)
!43 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !40)
!44 = !DILocation(line: 48, column: 39, scope: !7)
!45 = !DILocation(line: 49, column: 25, scope: !7)
!46 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !40)
!47 = !DILocation(line: 49, column: 4, scope: !7)
