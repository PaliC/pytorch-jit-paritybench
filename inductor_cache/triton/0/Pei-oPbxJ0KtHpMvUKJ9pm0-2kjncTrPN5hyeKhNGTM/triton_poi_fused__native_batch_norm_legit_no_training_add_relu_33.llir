; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %14, 252, !dbg !12
  %17 = lshr i32 %13, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = and i32 %13, 255, !dbg !12
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = or disjoint i32 %12, %18, !dbg !13
  %22 = or disjoint i32 %21, 64, !dbg !13
  %23 = or disjoint i32 %21, 128, !dbg !13
  %24 = or disjoint i32 %21, 192, !dbg !13
  %25 = or disjoint i32 %12, %19, !dbg !13
  %26 = icmp slt i32 %20, 208, !dbg !14
  %27 = icmp slt i32 %21, 208, !dbg !14
  %28 = icmp slt i32 %22, 208, !dbg !14
  %29 = icmp slt i32 %23, 208, !dbg !14
  %30 = icmp slt i32 %24, 208, !dbg !14
  %31 = icmp slt i32 %25, 208, !dbg !14
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %33 = shl i32 %32, 4, !dbg !16
  %.lobit24 = lshr i32 %13, 6, !dbg !17
  %34 = and i32 %.lobit24, 3, !dbg !17
  %35 = or disjoint i32 %33, %34, !dbg !18
  %36 = or disjoint i32 %35, 4, !dbg !18
  %37 = or disjoint i32 %35, 8, !dbg !18
  %38 = or disjoint i32 %35, 12, !dbg !18
  %39 = or disjoint i32 %33, %15, !dbg !18
  %40 = icmp slt i32 %35, 64, !dbg !19
  %41 = icmp slt i32 %36, 64, !dbg !19
  %42 = icmp slt i32 %37, 64, !dbg !19
  %43 = icmp slt i32 %38, 64, !dbg !19
  %44 = icmp slt i32 %39, 64, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %45 = sdiv i32 %.frozen, 52, !dbg !20
  %46 = mul i32 %45, 52, !dbg !21
  %.decomposed = sub i32 %.frozen, %46, !dbg !21
  %.frozen35 = freeze i32 %21, !dbg !20
  %47 = sdiv i32 %.frozen35, 52, !dbg !20
  %48 = mul i32 %47, 52, !dbg !21
  %.decomposed36 = sub i32 %.frozen35, %48, !dbg !21
  %.frozen37 = freeze i32 %22, !dbg !20
  %49 = sdiv i32 %.frozen37, 52, !dbg !20
  %50 = mul i32 %49, 52, !dbg !21
  %.decomposed38 = sub i32 %.frozen37, %50, !dbg !21
  %.frozen39 = freeze i32 %23, !dbg !20
  %51 = sdiv i32 %.frozen39, 52, !dbg !20
  %52 = mul i32 %51, 52, !dbg !21
  %.decomposed40 = sub i32 %.frozen39, %52, !dbg !21
  %.frozen41 = freeze i32 %24, !dbg !20
  %53 = sdiv i32 %.frozen41, 52, !dbg !20
  %54 = mul i32 %53, 52, !dbg !21
  %.decomposed42 = sub i32 %.frozen41, %54, !dbg !21
  %55 = srem i32 %25, 52, !dbg !21
  %56 = mul i32 %35, 52, !dbg !22
  %57 = mul i32 %36, 52, !dbg !22
  %58 = mul i32 %37, 52, !dbg !22
  %59 = mul i32 %38, 52, !dbg !22
  %60 = mul i32 %45, 3328, !dbg !23
  %61 = add i32 %60, %.decomposed, !dbg !24
  %62 = add i32 %61, %56, !dbg !25
  %63 = add i32 %61, %57, !dbg !25
  %64 = add i32 %61, %58, !dbg !25
  %65 = add i32 %61, %59, !dbg !25
  %66 = sext i32 %62 to i64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !26
  %68 = sext i32 %63 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !26
  %70 = sext i32 %64 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !26
  %72 = sext i32 %65 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = and i1 %26, %40, !dbg !27
  %75 = and i1 %41, %26, !dbg !27
  %76 = and i1 %42, %26, !dbg !27
  %77 = and i1 %43, %26, !dbg !27
  %78 = and i1 %27, %44, !dbg !27
  %79 = and i1 %28, %44, !dbg !27
  %80 = and i1 %29, %44, !dbg !27
  %81 = and i1 %30, %44, !dbg !27
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %74) #4, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !28
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %75) #4, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !28
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %76) #4, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !28
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %77) #4, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !28
  %102 = and i32 %14, 1020, !dbg !28
  %103 = lshr i32 %14, 6, !dbg !28
  %104 = and i32 %103, 12, !dbg !28
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !28
  %106 = getelementptr inbounds float, ptr addrspace(3) %105, i32 %102, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %106, i32 %83, i32 %84, i32 %85, i32 %86, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !28
  %108 = load float, ptr addrspace(3) %107, align 4, !dbg !28
  %109 = getelementptr inbounds i8, ptr addrspace(3) %107, i32 1040, !dbg !28
  %110 = load float, ptr addrspace(3) %109, align 4, !dbg !28
  %111 = getelementptr inbounds i8, ptr addrspace(3) %107, i32 2080, !dbg !28
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !28
  %113 = getelementptr inbounds i8, ptr addrspace(3) %107, i32 3120, !dbg !28
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %106, i32 %88, i32 %89, i32 %90, i32 %91, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %115 = load float, ptr addrspace(3) %107, align 4, !dbg !28
  %116 = load float, ptr addrspace(3) %109, align 4, !dbg !28
  %117 = load float, ptr addrspace(3) %111, align 4, !dbg !28
  %118 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %106, i32 %93, i32 %94, i32 %95, i32 %96, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %119 = load float, ptr addrspace(3) %107, align 4, !dbg !28
  %120 = load float, ptr addrspace(3) %109, align 4, !dbg !28
  %121 = load float, ptr addrspace(3) %111, align 4, !dbg !28
  %122 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %106, i32 %98, i32 %99, i32 %100, i32 %101, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %123 = load float, ptr addrspace(3) %107, align 4, !dbg !28
  %124 = load float, ptr addrspace(3) %109, align 4, !dbg !28
  %125 = load float, ptr addrspace(3) %111, align 4, !dbg !28
  %126 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %127 = sext i32 %55 to i64, !dbg !29
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !29
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %31) #4, !dbg !30
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !31
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %31) #4, !dbg !32
  %132 = bitcast i32 %131 to float, !dbg !32
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !33
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %31) #4, !dbg !34
  %135 = getelementptr float, ptr addrspace(1) %4, i64 %127, !dbg !35
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %31) #4, !dbg !36
  %137 = add i32 %39, 6656, !dbg !37
  %138 = shl nsw i32 %.decomposed36, 6, !dbg !38
  %139 = shl nsw i32 %.decomposed38, 6, !dbg !38
  %140 = shl nsw i32 %.decomposed40, 6, !dbg !38
  %141 = shl nsw i32 %.decomposed42, 6, !dbg !38
  %142 = add i32 %137, %138, !dbg !39
  %143 = mul i32 %47, 13312, !dbg !40
  %144 = mul i32 %49, 13312, !dbg !40
  %145 = mul i32 %51, 13312, !dbg !40
  %146 = mul i32 %53, 13312, !dbg !40
  %147 = add i32 %142, %143, !dbg !41
  %148 = add i32 %144, %139, !dbg !39
  %149 = add i32 %148, %137, !dbg !41
  %150 = add i32 %145, %140, !dbg !39
  %151 = add i32 %150, %137, !dbg !41
  %152 = add i32 %146, %141, !dbg !39
  %153 = add i32 %152, %137, !dbg !41
  %154 = sext i32 %147 to i64, !dbg !42
  %155 = getelementptr float, ptr addrspace(1) %5, i64 %154, !dbg !42
  %156 = sext i32 %149 to i64, !dbg !42
  %157 = getelementptr float, ptr addrspace(1) %5, i64 %156, !dbg !42
  %158 = sext i32 %151 to i64, !dbg !42
  %159 = getelementptr float, ptr addrspace(1) %5, i64 %158, !dbg !42
  %160 = sext i32 %153 to i64, !dbg !42
  %161 = getelementptr float, ptr addrspace(1) %5, i64 %160, !dbg !42
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %78) #4, !dbg !43
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %79) #4, !dbg !43
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %159, i1 %80) #4, !dbg !43
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %161, i1 %81) #4, !dbg !43
  %166 = fadd float %132, 0x3EE4F8B580000000, !dbg !44
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %167, 0, !dbg !45
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %168, 0, !dbg !45
  br i1 %.not.i, label %174, label %169, !dbg !45

169:                                              ; preds = %10
  br i1 %.not1.i, label %172, label %170, !dbg !45

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

174:                                              ; preds = %10
  br i1 %.not1.i, label %177, label %175, !dbg !45

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %170, %172, %175, %177
  %.0.i = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !45
  %179 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !43
  %180 = bitcast i32 %179 to float, !dbg !43
  %181 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !43
  %182 = bitcast i32 %181 to float, !dbg !43
  %183 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !43
  %184 = bitcast i32 %183 to float, !dbg !43
  %185 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !43
  %186 = bitcast i32 %185 to float, !dbg !43
  %187 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !43
  %188 = bitcast i32 %187 to float, !dbg !43
  %189 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !43
  %190 = bitcast i32 %189 to float, !dbg !43
  %191 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !43
  %192 = bitcast i32 %191 to float, !dbg !43
  %193 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !43
  %194 = bitcast i32 %193 to float, !dbg !43
  %195 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !43
  %196 = bitcast i32 %195 to float, !dbg !43
  %197 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !43
  %198 = bitcast i32 %197 to float, !dbg !43
  %199 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !43
  %200 = bitcast i32 %199 to float, !dbg !43
  %201 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !43
  %202 = bitcast i32 %201 to float, !dbg !43
  %203 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !43
  %204 = bitcast i32 %203 to float, !dbg !43
  %205 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !43
  %208 = bitcast i32 %207 to float, !dbg !43
  %209 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !43
  %210 = bitcast i32 %209 to float, !dbg !43
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %212 = insertelement <16 x float> poison, float %126, i64 0, !dbg !47
  %213 = insertelement <16 x float> %212, float %125, i64 1, !dbg !47
  %214 = insertelement <16 x float> %213, float %124, i64 2, !dbg !47
  %215 = insertelement <16 x float> %214, float %123, i64 3, !dbg !47
  %216 = insertelement <16 x float> %215, float %122, i64 4, !dbg !47
  %217 = insertelement <16 x float> %216, float %121, i64 5, !dbg !47
  %218 = insertelement <16 x float> %217, float %120, i64 6, !dbg !47
  %219 = insertelement <16 x float> %218, float %119, i64 7, !dbg !47
  %220 = insertelement <16 x float> %219, float %118, i64 8, !dbg !47
  %221 = insertelement <16 x float> %220, float %117, i64 9, !dbg !47
  %222 = insertelement <16 x float> %221, float %116, i64 10, !dbg !47
  %223 = insertelement <16 x float> %222, float %115, i64 11, !dbg !47
  %224 = insertelement <16 x float> %223, float %114, i64 12, !dbg !47
  %225 = insertelement <16 x float> %224, float %112, i64 13, !dbg !47
  %226 = insertelement <16 x float> %225, float %110, i64 14, !dbg !47
  %227 = insertelement <16 x float> %226, float %108, i64 15, !dbg !47
  %228 = insertelement <16 x i32> poison, i32 %129, i64 0, !dbg !47
  %229 = bitcast <16 x i32> %228 to <16 x float>, !dbg !47
  %230 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !47
  %231 = fsub <16 x float> %227, %230, !dbg !47
  %232 = insertelement <16 x float> poison, float %211, i64 0, !dbg !48
  %233 = shufflevector <16 x float> %232, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !48
  %234 = fmul <16 x float> %231, %233, !dbg !48
  %235 = insertelement <16 x i32> poison, i32 %134, i64 0, !dbg !49
  %236 = bitcast <16 x i32> %235 to <16 x float>, !dbg !49
  %237 = shufflevector <16 x float> %236, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !49
  %238 = fmul <16 x float> %234, %237, !dbg !49
  %239 = insertelement <16 x i32> poison, i32 %136, i64 0, !dbg !50
  %240 = bitcast <16 x i32> %239 to <16 x float>, !dbg !50
  %241 = shufflevector <16 x float> %240, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !50
  %242 = fadd <16 x float> %238, %241, !dbg !50
  %243 = fcmp olt <16 x float> %242, zeroinitializer, !dbg !51
  %244 = extractelement <16 x i1> %243, i64 15, !dbg !55
  %245 = extractelement <16 x float> %242, i64 15, !dbg !55
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !55
  %247 = extractelement <16 x i1> %243, i64 14, !dbg !55
  %248 = extractelement <16 x float> %242, i64 14, !dbg !55
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !55
  %250 = extractelement <16 x i1> %243, i64 13, !dbg !55
  %251 = extractelement <16 x float> %242, i64 13, !dbg !55
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !55
  %253 = extractelement <16 x i1> %243, i64 12, !dbg !55
  %254 = extractelement <16 x float> %242, i64 12, !dbg !55
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !55
  %256 = extractelement <16 x i1> %243, i64 11, !dbg !55
  %257 = extractelement <16 x float> %242, i64 11, !dbg !55
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !55
  %259 = extractelement <16 x i1> %243, i64 10, !dbg !55
  %260 = extractelement <16 x float> %242, i64 10, !dbg !55
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !55
  %262 = extractelement <16 x i1> %243, i64 9, !dbg !55
  %263 = extractelement <16 x float> %242, i64 9, !dbg !55
  %264 = select i1 %262, float 0.000000e+00, float %263, !dbg !55
  %265 = extractelement <16 x i1> %243, i64 8, !dbg !55
  %266 = extractelement <16 x float> %242, i64 8, !dbg !55
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !55
  %268 = extractelement <16 x i1> %243, i64 7, !dbg !55
  %269 = extractelement <16 x float> %242, i64 7, !dbg !55
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !55
  %271 = extractelement <16 x i1> %243, i64 6, !dbg !55
  %272 = extractelement <16 x float> %242, i64 6, !dbg !55
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !55
  %274 = extractelement <16 x i1> %243, i64 5, !dbg !55
  %275 = extractelement <16 x float> %242, i64 5, !dbg !55
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !55
  %277 = extractelement <16 x i1> %243, i64 4, !dbg !55
  %278 = extractelement <16 x float> %242, i64 4, !dbg !55
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !55
  %280 = extractelement <16 x i1> %243, i64 3, !dbg !55
  %281 = extractelement <16 x float> %242, i64 3, !dbg !55
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !55
  %283 = extractelement <16 x i1> %243, i64 2, !dbg !55
  %284 = extractelement <16 x float> %242, i64 2, !dbg !55
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !55
  %286 = extractelement <16 x i1> %243, i64 1, !dbg !55
  %287 = extractelement <16 x float> %242, i64 1, !dbg !55
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !55
  %289 = extractelement <16 x i1> %243, i64 0, !dbg !55
  %290 = extractelement <16 x float> %242, i64 0, !dbg !55
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %292 = shl i32 %13, 4, !dbg !55
  %293 = and i32 %292, 4080, !dbg !55
  %294 = lshr exact i32 %293, 2, !dbg !55
  %295 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %294, !dbg !55
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %293, !dbg !55
  %297 = bitcast float %246 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !55
  %298 = or disjoint i32 %293, 1, !dbg !55
  %299 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %298, !dbg !55
  %300 = bitcast float %249 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #4, !dbg !55
  %301 = or disjoint i32 %293, 2, !dbg !55
  %302 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %301, !dbg !55
  %303 = bitcast float %252 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #4, !dbg !55
  %304 = or disjoint i32 %293, 3, !dbg !55
  %305 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %304, !dbg !55
  %306 = bitcast float %255 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #4, !dbg !55
  %307 = or disjoint i32 %293, 4, !dbg !55
  %308 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %307, !dbg !55
  %309 = bitcast float %258 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #4, !dbg !55
  %310 = or disjoint i32 %293, 5, !dbg !55
  %311 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %310, !dbg !55
  %312 = bitcast float %261 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !55
  %313 = or disjoint i32 %293, 6, !dbg !55
  %314 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %313, !dbg !55
  %315 = bitcast float %264 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #4, !dbg !55
  %316 = or disjoint i32 %293, 7, !dbg !55
  %317 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %316, !dbg !55
  %318 = bitcast float %267 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #4, !dbg !55
  %319 = or disjoint i32 %293, 8, !dbg !55
  %320 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %319, !dbg !55
  %321 = bitcast float %270 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #4, !dbg !55
  %322 = or disjoint i32 %293, 9, !dbg !55
  %323 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %322, !dbg !55
  %324 = bitcast float %273 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #4, !dbg !55
  %325 = or disjoint i32 %293, 10, !dbg !55
  %326 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %325, !dbg !55
  %327 = bitcast float %276 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #4, !dbg !55
  %328 = or disjoint i32 %293, 11, !dbg !55
  %329 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %328, !dbg !55
  %330 = bitcast float %279 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !55
  %331 = or disjoint i32 %293, 12, !dbg !55
  %332 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %331, !dbg !55
  %333 = bitcast float %282 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #4, !dbg !55
  %334 = or disjoint i32 %293, 13, !dbg !55
  %335 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %334, !dbg !55
  %336 = bitcast float %285 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #4, !dbg !55
  %337 = or disjoint i32 %293, 14, !dbg !55
  %338 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %337, !dbg !55
  %339 = bitcast float %288 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #4, !dbg !55
  %340 = or disjoint i32 %293, 15, !dbg !55
  %341 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %340, !dbg !55
  %342 = bitcast float %291 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %343 = lshr i32 %102, 4, !dbg !55
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !55
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %102, !dbg !55
  %346 = load float, ptr addrspace(3) %345, align 4, !dbg !55
  %347 = or disjoint i32 %102, 1, !dbg !55
  %348 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %347, !dbg !55
  %349 = load float, ptr addrspace(3) %348, align 4, !dbg !55
  %350 = or disjoint i32 %102, 2, !dbg !55
  %351 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %350, !dbg !55
  %352 = load float, ptr addrspace(3) %351, align 4, !dbg !55
  %353 = or disjoint i32 %102, 3, !dbg !55
  %354 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %353, !dbg !55
  %355 = load float, ptr addrspace(3) %354, align 4, !dbg !55
  %356 = or disjoint i32 %102, 1024, !dbg !55
  %357 = lshr i32 %356, 4, !dbg !55
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %357, !dbg !55
  %359 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %356, !dbg !55
  %360 = load float, ptr addrspace(3) %359, align 4, !dbg !55
  %361 = or disjoint i32 %102, 1025, !dbg !55
  %362 = lshr i32 %361, 4, !dbg !55
  %363 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %362, !dbg !55
  %364 = getelementptr inbounds float, ptr addrspace(3) %363, i32 %361, !dbg !55
  %365 = load float, ptr addrspace(3) %364, align 4, !dbg !55
  %366 = or disjoint i32 %102, 1026, !dbg !55
  %367 = lshr i32 %366, 4, !dbg !55
  %368 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %367, !dbg !55
  %369 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %366, !dbg !55
  %370 = load float, ptr addrspace(3) %369, align 4, !dbg !55
  %371 = or disjoint i32 %102, 1027, !dbg !55
  %372 = lshr i32 %371, 4, !dbg !55
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %372, !dbg !55
  %374 = getelementptr inbounds float, ptr addrspace(3) %373, i32 %371, !dbg !55
  %375 = load float, ptr addrspace(3) %374, align 4, !dbg !55
  %376 = or disjoint i32 %102, 2048, !dbg !55
  %377 = lshr i32 %376, 4, !dbg !55
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %377, !dbg !55
  %379 = getelementptr inbounds float, ptr addrspace(3) %378, i32 %376, !dbg !55
  %380 = load float, ptr addrspace(3) %379, align 4, !dbg !55
  %381 = or disjoint i32 %102, 2049, !dbg !55
  %382 = lshr i32 %381, 4, !dbg !55
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %382, !dbg !55
  %384 = getelementptr inbounds float, ptr addrspace(3) %383, i32 %381, !dbg !55
  %385 = load float, ptr addrspace(3) %384, align 4, !dbg !55
  %386 = or disjoint i32 %102, 2050, !dbg !55
  %387 = lshr i32 %386, 4, !dbg !55
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %387, !dbg !55
  %389 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %386, !dbg !55
  %390 = load float, ptr addrspace(3) %389, align 4, !dbg !55
  %391 = or disjoint i32 %102, 2051, !dbg !55
  %392 = lshr i32 %391, 4, !dbg !55
  %393 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %392, !dbg !55
  %394 = getelementptr inbounds float, ptr addrspace(3) %393, i32 %391, !dbg !55
  %395 = load float, ptr addrspace(3) %394, align 4, !dbg !55
  %396 = or disjoint i32 %102, 3072, !dbg !55
  %397 = lshr i32 %396, 4, !dbg !55
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %397, !dbg !55
  %399 = getelementptr inbounds float, ptr addrspace(3) %398, i32 %396, !dbg !55
  %400 = load float, ptr addrspace(3) %399, align 4, !dbg !55
  %401 = or disjoint i32 %102, 3073, !dbg !55
  %402 = lshr i32 %401, 4, !dbg !55
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %402, !dbg !55
  %404 = getelementptr inbounds float, ptr addrspace(3) %403, i32 %401, !dbg !55
  %405 = load float, ptr addrspace(3) %404, align 4, !dbg !55
  %406 = or disjoint i32 %102, 3074, !dbg !55
  %407 = lshr i32 %406, 4, !dbg !55
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %407, !dbg !55
  %409 = getelementptr inbounds float, ptr addrspace(3) %408, i32 %406, !dbg !55
  %410 = load float, ptr addrspace(3) %409, align 4, !dbg !55
  %411 = or disjoint i32 %102, 3075, !dbg !55
  %412 = lshr i32 %411, 4, !dbg !55
  %413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %412, !dbg !55
  %414 = getelementptr inbounds float, ptr addrspace(3) %413, i32 %411, !dbg !55
  %415 = load float, ptr addrspace(3) %414, align 4, !dbg !55
  %416 = fadd float %346, %210, !dbg !56
  %417 = fadd float %349, %208, !dbg !56
  %418 = fadd float %352, %206, !dbg !56
  %419 = fadd float %355, %204, !dbg !56
  %420 = fadd float %360, %202, !dbg !56
  %421 = fadd float %365, %200, !dbg !56
  %422 = fadd float %370, %198, !dbg !56
  %423 = fadd float %375, %196, !dbg !56
  %424 = fadd float %380, %194, !dbg !56
  %425 = fadd float %385, %192, !dbg !56
  %426 = fadd float %390, %190, !dbg !56
  %427 = fadd float %395, %188, !dbg !56
  %428 = fadd float %400, %186, !dbg !56
  %429 = fadd float %405, %184, !dbg !56
  %430 = fadd float %410, %182, !dbg !56
  %431 = fadd float %415, %180, !dbg !56
  %432 = add i32 %138, %39, !dbg !57
  %433 = mul i32 %47, 6656, !dbg !58
  %434 = mul i32 %49, 6656, !dbg !58
  %435 = mul i32 %51, 6656, !dbg !58
  %436 = mul i32 %53, 6656, !dbg !58
  %437 = add i32 %432, %433, !dbg !59
  %438 = add i32 %434, %139, !dbg !57
  %439 = add i32 %438, %39, !dbg !59
  %440 = add i32 %435, %140, !dbg !57
  %441 = add i32 %440, %39, !dbg !59
  %442 = add i32 %436, %141, !dbg !57
  %443 = add i32 %442, %39, !dbg !59
  %444 = sext i32 %437 to i64, !dbg !60
  %445 = getelementptr float, ptr addrspace(1) %6, i64 %444, !dbg !60
  %446 = sext i32 %439 to i64, !dbg !60
  %447 = getelementptr float, ptr addrspace(1) %6, i64 %446, !dbg !60
  %448 = sext i32 %441 to i64, !dbg !60
  %449 = getelementptr float, ptr addrspace(1) %6, i64 %448, !dbg !60
  %450 = sext i32 %443 to i64, !dbg !60
  %451 = getelementptr float, ptr addrspace(1) %6, i64 %450, !dbg !60
  %452 = bitcast float %346 to i32, !dbg !61
  %453 = bitcast float %349 to i32, !dbg !61
  %454 = bitcast float %352 to i32, !dbg !61
  %455 = bitcast float %355 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %445, i1 %78) #4, !dbg !61
  %456 = bitcast float %360 to i32, !dbg !61
  %457 = bitcast float %365 to i32, !dbg !61
  %458 = bitcast float %370 to i32, !dbg !61
  %459 = bitcast float %375 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %447, i1 %79) #4, !dbg !61
  %460 = bitcast float %380 to i32, !dbg !61
  %461 = bitcast float %385 to i32, !dbg !61
  %462 = bitcast float %390 to i32, !dbg !61
  %463 = bitcast float %395 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %460, i32 %461, i32 %462, i32 %463, ptr addrspace(1) %449, i1 %80) #4, !dbg !61
  %464 = bitcast float %400 to i32, !dbg !61
  %465 = bitcast float %405 to i32, !dbg !61
  %466 = bitcast float %410 to i32, !dbg !61
  %467 = bitcast float %415 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %464, i32 %465, i32 %466, i32 %467, ptr addrspace(1) %451, i1 %81) #4, !dbg !61
  %468 = getelementptr float, ptr addrspace(1) %7, i64 %66, !dbg !62
  %469 = getelementptr float, ptr addrspace(1) %7, i64 %68, !dbg !62
  %470 = getelementptr float, ptr addrspace(1) %7, i64 %70, !dbg !62
  %471 = getelementptr float, ptr addrspace(1) %7, i64 %72, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %472 = shl i32 %13, 10, !dbg !63
  %473 = and i32 %472, 3072, !dbg !63
  %474 = or disjoint i32 %473, %18, !dbg !63
  %475 = lshr exact i32 %473, 4, !dbg !63
  %476 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %475, !dbg !63
  %477 = getelementptr float, ptr addrspace(3) %476, i32 %474, !dbg !63
  %478 = bitcast float %416 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %478, i1 true) #4, !dbg !63
  %479 = or disjoint i32 %474, 256, !dbg !63
  %480 = lshr i32 %479, 6, !dbg !63
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !63
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %479, !dbg !63
  %483 = bitcast float %417 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 true) #4, !dbg !63
  %484 = or disjoint i32 %474, 512, !dbg !63
  %485 = lshr i32 %484, 6, !dbg !63
  %486 = getelementptr float, ptr addrspace(3) @global_smem, i32 %485, !dbg !63
  %487 = getelementptr float, ptr addrspace(3) %486, i32 %484, !dbg !63
  %488 = bitcast float %418 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %488, i1 true) #4, !dbg !63
  %489 = or disjoint i32 %474, 768, !dbg !63
  %490 = lshr i32 %489, 6, !dbg !63
  %491 = getelementptr float, ptr addrspace(3) @global_smem, i32 %490, !dbg !63
  %492 = getelementptr float, ptr addrspace(3) %491, i32 %489, !dbg !63
  %493 = bitcast float %419 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %492, <1 x i32> %493, i1 true) #4, !dbg !63
  %494 = or disjoint i32 %474, 64, !dbg !63
  %495 = getelementptr float, ptr addrspace(3) %476, i32 %494, !dbg !63
  %496 = bitcast float %420 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %496, i1 true) #4, !dbg !63
  %497 = or disjoint i32 %474, 320, !dbg !63
  %498 = lshr i32 %497, 6, !dbg !63
  %499 = and i32 %498, 52, !dbg !63
  %500 = getelementptr float, ptr addrspace(3) @global_smem, i32 %499, !dbg !63
  %501 = getelementptr float, ptr addrspace(3) %500, i32 %497, !dbg !63
  %502 = bitcast float %421 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %501, <1 x i32> %502, i1 true) #4, !dbg !63
  %503 = or disjoint i32 %474, 576, !dbg !63
  %504 = lshr i32 %503, 6, !dbg !63
  %505 = and i32 %504, 56, !dbg !63
  %506 = getelementptr float, ptr addrspace(3) @global_smem, i32 %505, !dbg !63
  %507 = getelementptr float, ptr addrspace(3) %506, i32 %503, !dbg !63
  %508 = bitcast float %422 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %507, <1 x i32> %508, i1 true) #4, !dbg !63
  %509 = or disjoint i32 %474, 832, !dbg !63
  %510 = lshr i32 %509, 6, !dbg !63
  %511 = and i32 %510, 60, !dbg !63
  %512 = getelementptr float, ptr addrspace(3) @global_smem, i32 %511, !dbg !63
  %513 = getelementptr float, ptr addrspace(3) %512, i32 %509, !dbg !63
  %514 = bitcast float %423 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %514, i1 true) #4, !dbg !63
  %515 = or disjoint i32 %474, 128, !dbg !63
  %516 = getelementptr float, ptr addrspace(3) %476, i32 %515, !dbg !63
  %517 = bitcast float %424 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %517, i1 true) #4, !dbg !63
  %518 = or disjoint i32 %474, 384, !dbg !63
  %519 = lshr i32 %518, 6, !dbg !63
  %520 = and i32 %519, 52, !dbg !63
  %521 = getelementptr float, ptr addrspace(3) @global_smem, i32 %520, !dbg !63
  %522 = getelementptr float, ptr addrspace(3) %521, i32 %518, !dbg !63
  %523 = bitcast float %425 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %522, <1 x i32> %523, i1 true) #4, !dbg !63
  %524 = or disjoint i32 %474, 640, !dbg !63
  %525 = lshr i32 %524, 6, !dbg !63
  %526 = and i32 %525, 56, !dbg !63
  %527 = getelementptr float, ptr addrspace(3) @global_smem, i32 %526, !dbg !63
  %528 = getelementptr float, ptr addrspace(3) %527, i32 %524, !dbg !63
  %529 = bitcast float %426 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %528, <1 x i32> %529, i1 true) #4, !dbg !63
  %530 = or disjoint i32 %474, 896, !dbg !63
  %531 = lshr i32 %530, 6, !dbg !63
  %532 = and i32 %531, 60, !dbg !63
  %533 = getelementptr float, ptr addrspace(3) @global_smem, i32 %532, !dbg !63
  %534 = getelementptr float, ptr addrspace(3) %533, i32 %530, !dbg !63
  %535 = bitcast float %427 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %534, <1 x i32> %535, i1 true) #4, !dbg !63
  %536 = or disjoint i32 %474, 192, !dbg !63
  %537 = getelementptr float, ptr addrspace(3) %476, i32 %536, !dbg !63
  %538 = bitcast float %428 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %538, i1 true) #4, !dbg !63
  %539 = or disjoint i32 %474, 448, !dbg !63
  %540 = lshr i32 %539, 6, !dbg !63
  %541 = and i32 %540, 52, !dbg !63
  %542 = getelementptr float, ptr addrspace(3) @global_smem, i32 %541, !dbg !63
  %543 = getelementptr float, ptr addrspace(3) %542, i32 %539, !dbg !63
  %544 = bitcast float %429 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 true) #4, !dbg !63
  %545 = or disjoint i32 %474, 704, !dbg !63
  %546 = lshr i32 %545, 6, !dbg !63
  %547 = and i32 %546, 56, !dbg !63
  %548 = getelementptr float, ptr addrspace(3) @global_smem, i32 %547, !dbg !63
  %549 = getelementptr float, ptr addrspace(3) %548, i32 %545, !dbg !63
  %550 = bitcast float %430 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %550, i1 true) #4, !dbg !63
  %551 = or disjoint i32 %474, 960, !dbg !63
  %552 = lshr i32 %551, 6, !dbg !63
  %553 = and i32 %552, 60, !dbg !63
  %554 = getelementptr float, ptr addrspace(3) @global_smem, i32 %553, !dbg !63
  %555 = getelementptr float, ptr addrspace(3) %554, i32 %551, !dbg !63
  %556 = bitcast float %431 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %556, i1 true) #4, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %557 = lshr i32 %356, 6, !dbg !63
  %558 = and i32 %557, 28, !dbg !63
  %559 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %558, !dbg !63
  %560 = getelementptr inbounds float, ptr addrspace(3) %559, i32 %356, !dbg !63
  %561 = load <4 x i32>, ptr addrspace(3) %560, align 16, !dbg !63
  %562 = lshr i32 %376, 6, !dbg !63
  %563 = and i32 %562, 44, !dbg !63
  %564 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %563, !dbg !63
  %565 = getelementptr inbounds float, ptr addrspace(3) %564, i32 %376, !dbg !63
  %566 = load <4 x i32>, ptr addrspace(3) %565, align 16, !dbg !63
  %567 = lshr i32 %396, 6, !dbg !63
  %568 = and i32 %567, 60, !dbg !63
  %569 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %568, !dbg !63
  %570 = getelementptr inbounds float, ptr addrspace(3) %569, i32 %396, !dbg !63
  %571 = load <4 x i32>, ptr addrspace(3) %570, align 16, !dbg !63
  %.extract = load i32, ptr addrspace(3) %106, align 16, !dbg !63
  %572 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 4, !dbg !63
  %.extract20 = load i32, ptr addrspace(3) %572, align 4, !dbg !63
  %573 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 8, !dbg !63
  %.extract21 = load i32, ptr addrspace(3) %573, align 8, !dbg !63
  %574 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 12, !dbg !63
  %.extract22 = load i32, ptr addrspace(3) %574, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %468, i1 %74) #4, !dbg !63
  %.extract23 = extractelement <4 x i32> %561, i64 0, !dbg !63
  %.extract24 = extractelement <4 x i32> %561, i64 1, !dbg !63
  %.extract25 = extractelement <4 x i32> %561, i64 2, !dbg !63
  %.extract26 = extractelement <4 x i32> %561, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %469, i1 %75) #4, !dbg !63
  %.extract27 = extractelement <4 x i32> %566, i64 0, !dbg !63
  %.extract28 = extractelement <4 x i32> %566, i64 1, !dbg !63
  %.extract29 = extractelement <4 x i32> %566, i64 2, !dbg !63
  %.extract30 = extractelement <4 x i32> %566, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %470, i1 %76) #4, !dbg !63
  %.extract31 = extractelement <4 x i32> %571, i64 0, !dbg !63
  %.extract32 = extractelement <4 x i32> %571, i64 1, !dbg !63
  %.extract33 = extractelement <4 x i32> %571, i64 2, !dbg !63
  %.extract34 = extractelement <4 x i32> %571, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %471, i1 %77) #4, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxnbfp6l75z4aonmuuacgz7ak4z6kfmrcjus7espozhn4nqpomnr.py", directory: "inductor_cache/xn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 48, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 61, scope: !7)
!28 = !DILocation(line: 31, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 38, scope: !7)
!38 = !DILocation(line: 36, column: 46, scope: !7)
!39 = !DILocation(line: 36, column: 43, scope: !7)
!40 = !DILocation(line: 36, column: 57, scope: !7)
!41 = !DILocation(line: 36, column: 51, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 62, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 26, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 37, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 30, scope: !7)
!58 = !DILocation(line: 51, column: 43, scope: !7)
!59 = !DILocation(line: 51, column: 38, scope: !7)
!60 = !DILocation(line: 51, column: 25, scope: !7)
!61 = !DILocation(line: 51, column: 55, scope: !7)
!62 = !DILocation(line: 52, column: 25, scope: !7)
!63 = !DILocation(line: 52, column: 55, scope: !7)
!64 = !DILocation(line: 52, column: 4, scope: !7)
