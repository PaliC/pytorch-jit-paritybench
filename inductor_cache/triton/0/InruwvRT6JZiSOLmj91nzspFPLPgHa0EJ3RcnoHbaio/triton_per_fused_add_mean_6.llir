; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = and i32 %10, 31, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %13, !dbg !13
  %17 = or disjoint i32 %9, %14, !dbg !13
  %18 = shl i32 %10, 2, !dbg !14
  %19 = and i32 %18, 60, !dbg !14
  %20 = shl i32 %15, 6, !dbg !15
  %21 = shl i32 %16, 6, !dbg !15
  %22 = or disjoint i32 %20, %19, !dbg !16
  %23 = or disjoint i32 %21, %19, !dbg !16
  %24 = sext i32 %22 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = sext i32 %23 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !20
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !21
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !22
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !22
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !22
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !22
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !22
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !23
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !24
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !24
  %74 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !18
  %75 = insertelement <2 x i32> %74, i32 %30, i64 1, !dbg !18
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !18
  %77 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !20
  %78 = insertelement <2 x i32> %77, i32 %42, i64 1, !dbg !20
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !20
  %80 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !22
  %81 = insertelement <2 x i32> %80, i32 %54, i64 1, !dbg !22
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !22
  %83 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !24
  %84 = insertelement <2 x i32> %83, i32 %66, i64 1, !dbg !24
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !24
  %86 = fadd <2 x float> %76, zeroinitializer, !dbg !25
  %87 = fadd <2 x float> %86, %79, !dbg !26
  %88 = fadd <2 x float> %87, %82, !dbg !27
  %89 = fadd <2 x float> %88, %85, !dbg !28
  %90 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !18
  %91 = insertelement <2 x i32> %90, i32 %31, i64 1, !dbg !18
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !18
  %93 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !20
  %94 = insertelement <2 x i32> %93, i32 %43, i64 1, !dbg !20
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !20
  %96 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !22
  %97 = insertelement <2 x i32> %96, i32 %55, i64 1, !dbg !22
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !22
  %99 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !24
  %100 = insertelement <2 x i32> %99, i32 %67, i64 1, !dbg !24
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !24
  %102 = fadd <2 x float> %92, zeroinitializer, !dbg !25
  %103 = fadd <2 x float> %102, %95, !dbg !26
  %104 = fadd <2 x float> %103, %98, !dbg !27
  %105 = fadd <2 x float> %104, %101, !dbg !28
  %106 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !18
  %107 = insertelement <2 x i32> %106, i32 %35, i64 1, !dbg !18
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !18
  %109 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !20
  %110 = insertelement <2 x i32> %109, i32 %47, i64 1, !dbg !20
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !20
  %112 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !22
  %113 = insertelement <2 x i32> %112, i32 %59, i64 1, !dbg !22
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !22
  %115 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !24
  %116 = insertelement <2 x i32> %115, i32 %71, i64 1, !dbg !24
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !24
  %118 = fadd <2 x float> %108, zeroinitializer, !dbg !25
  %119 = fadd <2 x float> %118, %111, !dbg !26
  %120 = fadd <2 x float> %119, %114, !dbg !27
  %121 = fadd <2 x float> %120, %117, !dbg !28
  %122 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !18
  %123 = insertelement <2 x i32> %122, i32 %36, i64 1, !dbg !18
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !18
  %125 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !20
  %126 = insertelement <2 x i32> %125, i32 %48, i64 1, !dbg !20
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !20
  %128 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !22
  %129 = insertelement <2 x i32> %128, i32 %60, i64 1, !dbg !22
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !22
  %131 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !24
  %132 = insertelement <2 x i32> %131, i32 %72, i64 1, !dbg !24
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !24
  %134 = fadd <2 x float> %124, zeroinitializer, !dbg !25
  %135 = fadd <2 x float> %134, %127, !dbg !26
  %136 = fadd <2 x float> %135, %130, !dbg !27
  %137 = fadd <2 x float> %136, %133, !dbg !28
  %shift = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %138 = fadd <2 x float> %89, %shift, !dbg !29
  %shift2 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %139 = fadd <2 x float> %shift2, %138, !dbg !29
  %140 = fadd <2 x float> %105, %139, !dbg !29
  %141 = extractelement <2 x float> %140, i64 0, !dbg !29
  %shift3 = shufflevector <2 x float> %121, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %142 = fadd <2 x float> %121, %shift3, !dbg !29
  %shift4 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %143 = fadd <2 x float> %shift4, %142, !dbg !29
  %144 = fadd <2 x float> %137, %143, !dbg !29
  %145 = extractelement <2 x float> %144, i64 0, !dbg !29
  %146 = bitcast float %141 to i32, !dbg !34
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !34
  %148 = bitcast i32 %147 to float, !dbg !34
  %149 = fadd float %141, %148, !dbg !29
  %150 = bitcast float %149 to i32, !dbg !34
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !34
  %152 = bitcast i32 %151 to float, !dbg !34
  %153 = fadd float %149, %152, !dbg !29
  %154 = bitcast float %153 to i32, !dbg !34
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = fadd float %153, %156, !dbg !29
  %158 = bitcast float %157 to i32, !dbg !34
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !34
  %160 = bitcast i32 %159 to float, !dbg !34
  %161 = fadd float %157, %160, !dbg !29
  %162 = bitcast float %145 to i32, !dbg !34
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !34
  %164 = bitcast i32 %163 to float, !dbg !34
  %165 = fadd float %145, %164, !dbg !29
  %166 = bitcast float %165 to i32, !dbg !34
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !34
  %168 = bitcast i32 %167 to float, !dbg !34
  %169 = fadd float %165, %168, !dbg !29
  %170 = bitcast float %169 to i32, !dbg !34
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !34
  %172 = bitcast i32 %171 to float, !dbg !34
  %173 = fadd float %169, %172, !dbg !29
  %174 = bitcast float %173 to i32, !dbg !34
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !34
  %176 = bitcast i32 %175 to float, !dbg !34
  %177 = fadd float %173, %176, !dbg !29
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %179 = bitcast float %161 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #3, !dbg !35
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %181 = bitcast float %177 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !35
  %183 = load i32, ptr addrspace(3) %182, align 4, !dbg !35
  %184 = sext i32 %17 to i64, !dbg !36
  %185 = getelementptr float, ptr addrspace(1) %4, i64 %184, !dbg !36
  %186 = and i32 %10, 224, !dbg !37
  %187 = icmp eq i32 %186, 0, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %185, i1 %187) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c37qj7dmeimpnleur3hhuqlmk5reqyfbchgdzei3c7gzlojatxyh.py", directory: "inductor_cache/37")
!4 = !{ptr @triton_per_fused_add_mean_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_6", linkageName: "triton_per_fused_add_mean_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 38, scope: !7)
!16 = !DILocation(line: 31, column: 35, scope: !7)
!17 = !DILocation(line: 31, column: 30, scope: !7)
!18 = !DILocation(line: 31, column: 43, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 43, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 41, column: 25, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 42, column: 25, scope: !7)
!37 = !DILocation(line: 42, column: 37, scope: !7)
!38 = !DILocation(line: 42, column: 4, scope: !7)
