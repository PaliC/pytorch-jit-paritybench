; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp5 < 225\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__softmax_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 5, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = lshr i32 %8, 4, !dbg !14
  %.lobit = and i32 %9, 1, !dbg !14
  %10 = and i32 %8, 32, !dbg !14
  %11 = lshr exact i32 %10, 4, !dbg !14
  %12 = or disjoint i32 %.lobit, %11, !dbg !14
  %13 = and i32 %9, 4, !dbg !14
  %14 = or disjoint i32 %12, %13, !dbg !14
  %15 = and i32 %9, 8, !dbg !14
  %16 = or disjoint i32 %14, %15, !dbg !14
  %17 = or disjoint i32 %7, %16, !dbg !15
  %18 = or i32 %17, 16, !dbg !15
  %19 = icmp slt i32 %17, 256, !dbg !16
  %20 = icmp slt i32 %18, 256, !dbg !16
  %21 = shl i32 %8, 2, !dbg !17
  %22 = and i32 %21, 60, !dbg !17
  %23 = or disjoint i32 %22, 2, !dbg !17
  %24 = srem i32 %17, 64, !dbg !18
  %25 = srem i32 %18, 64, !dbg !18
  %26 = shl i32 %17, 6, !dbg !19
  %27 = shl i32 %18, 6, !dbg !19
  %28 = or disjoint i32 %26, %22, !dbg !20
  %29 = or disjoint i32 %27, %22, !dbg !20
  %30 = sext i32 %28 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #4, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #4, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %44 = shl i32 %8, 7, !dbg !22
  %45 = and i32 %44, 1920, !dbg !22
  %46 = or disjoint i32 %12, %45, !dbg !22
  %47 = or disjoint i32 %46, %13, !dbg !22
  %48 = or disjoint i32 %47, %15, !dbg !22
  %49 = and i32 %8, 255, !dbg !22
  %50 = lshr exact i32 %45, 5, !dbg !22
  %51 = add nuw nsw i32 %48, %50, !dbg !22
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !22
  %53 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !22
  %54 = xor i32 %48, 32, !dbg !22
  %55 = lshr i32 %54, 5, !dbg !22
  %56 = add nuw nsw i32 %55, %54, !dbg !22
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %56, !dbg !22
  %58 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #4, !dbg !22
  %59 = xor i32 %48, 64, !dbg !22
  %60 = lshr i32 %59, 5, !dbg !22
  %61 = add nuw nsw i32 %60, %59, !dbg !22
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %61, !dbg !22
  %63 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #4, !dbg !22
  %64 = xor i32 %48, 96, !dbg !22
  %65 = lshr i32 %64, 5, !dbg !22
  %66 = add nuw nsw i32 %65, %64, !dbg !22
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66, !dbg !22
  %68 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #4, !dbg !22
  %69 = xor i32 %48, 16, !dbg !22
  %70 = add nuw nsw i32 %69, %50, !dbg !22
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !22
  %72 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #4, !dbg !22
  %73 = xor i32 %48, 48, !dbg !22
  %74 = lshr i32 %73, 5, !dbg !22
  %75 = add nuw nsw i32 %74, %73, !dbg !22
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %75, !dbg !22
  %77 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #4, !dbg !22
  %78 = xor i32 %48, 80, !dbg !22
  %79 = lshr i32 %78, 5, !dbg !22
  %80 = add nuw nsw i32 %79, %78, !dbg !22
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !22
  %82 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !22
  %83 = xor i32 %48, 112, !dbg !22
  %84 = lshr i32 %83, 5, !dbg !22
  %85 = add nuw nsw i32 %84, %83, !dbg !22
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !22
  %87 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %88 = lshr i32 %49, 5, !dbg !22
  %89 = add nuw nsw i32 %88, %49, !dbg !22
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %89, !dbg !22
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !22
  %92 = or disjoint i32 %49, 256, !dbg !22
  %93 = lshr i32 %92, 5, !dbg !22
  %94 = add nuw nsw i32 %93, %92, !dbg !22
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %94, !dbg !22
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !22
  %97 = or disjoint i32 %49, 512, !dbg !22
  %98 = lshr i32 %97, 5, !dbg !22
  %99 = add nuw nsw i32 %98, %97, !dbg !22
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99, !dbg !22
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !22
  %102 = or disjoint i32 %49, 768, !dbg !22
  %103 = lshr i32 %102, 5, !dbg !22
  %104 = add nuw nsw i32 %103, %102, !dbg !22
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !22
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !22
  %107 = or disjoint i32 %49, 1024, !dbg !22
  %108 = lshr i32 %107, 5, !dbg !22
  %109 = add nuw nsw i32 %108, %107, !dbg !22
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !22
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !22
  %112 = or disjoint i32 %49, 1280, !dbg !22
  %113 = lshr i32 %112, 5, !dbg !22
  %114 = add nuw nsw i32 %113, %112, !dbg !22
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !22
  %116 = load float, ptr addrspace(3) %115, align 4, !dbg !22
  %117 = or disjoint i32 %49, 1536, !dbg !22
  %118 = lshr i32 %117, 5, !dbg !22
  %119 = add nuw nsw i32 %118, %117, !dbg !22
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !22
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !22
  %122 = or disjoint i32 %49, 1792, !dbg !22
  %123 = lshr i32 %122, 5, !dbg !22
  %124 = add nuw nsw i32 %123, %122, !dbg !22
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !22
  %126 = load float, ptr addrspace(3) %125, align 4, !dbg !22
  %127 = shl nsw i32 %24, 6, !dbg !23
  %128 = shl nsw i32 %25, 6, !dbg !23
  %129 = or disjoint i32 %127, %22, !dbg !24
  %130 = or disjoint i32 %127, %23, !dbg !24
  %131 = or disjoint i32 %128, %22, !dbg !24
  %132 = or disjoint i32 %128, %23, !dbg !24
  %133 = sext i32 %129 to i64, !dbg !25
  %134 = getelementptr i64, ptr addrspace(1) %1, i64 %133, !dbg !25
  %135 = sext i32 %130 to i64, !dbg !25
  %136 = getelementptr i64, ptr addrspace(1) %1, i64 %135, !dbg !25
  %137 = sext i32 %131 to i64, !dbg !25
  %138 = getelementptr i64, ptr addrspace(1) %1, i64 %137, !dbg !25
  %139 = sext i32 %132 to i64, !dbg !25
  %140 = getelementptr i64, ptr addrspace(1) %1, i64 %139, !dbg !25
  %141 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %134, i1 %19, i1 %19, i1 %19) #4, !dbg !26
  %142 = extractvalue { i64, i64 } %141, 0, !dbg !26
  %143 = extractvalue { i64, i64 } %141, 1, !dbg !26
  %144 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %136, i1 %19, i1 %19, i1 %19) #4, !dbg !26
  %145 = extractvalue { i64, i64 } %144, 0, !dbg !26
  %146 = extractvalue { i64, i64 } %144, 1, !dbg !26
  %147 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %138, i1 %20, i1 %20, i1 %20) #4, !dbg !26
  %148 = extractvalue { i64, i64 } %147, 0, !dbg !26
  %149 = extractvalue { i64, i64 } %147, 1, !dbg !26
  %150 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %140, i1 %20, i1 %20, i1 %20) #4, !dbg !26
  %151 = extractvalue { i64, i64 } %150, 0, !dbg !26
  %152 = extractvalue { i64, i64 } %150, 1, !dbg !26
  %153 = insertelement <4 x i64> poison, i64 %142, i64 0, !dbg !27
  %154 = insertelement <4 x i64> %153, i64 %143, i64 1, !dbg !27
  %155 = insertelement <4 x i64> %154, i64 %145, i64 2, !dbg !27
  %156 = insertelement <4 x i64> %155, i64 %146, i64 3, !dbg !27
  %157 = add <4 x i64> %156, splat (i64 225), !dbg !27
  %158 = icmp slt <4 x i64> %156, zeroinitializer, !dbg !28
  %159 = select <4 x i1> %158, <4 x i64> %157, <4 x i64> %156, !dbg !29
  %160 = icmp ugt <4 x i64> %159, splat (i64 224), !dbg !30
  %161 = insertelement <4 x i64> poison, i64 %148, i64 0, !dbg !27
  %162 = insertelement <4 x i64> %161, i64 %149, i64 1, !dbg !27
  %163 = insertelement <4 x i64> %162, i64 %151, i64 2, !dbg !27
  %164 = insertelement <4 x i64> %163, i64 %152, i64 3, !dbg !27
  %165 = add <4 x i64> %164, splat (i64 225), !dbg !27
  %166 = icmp slt <4 x i64> %164, zeroinitializer, !dbg !28
  %167 = select <4 x i1> %166, <4 x i64> %165, <4 x i64> %164, !dbg !29
  %168 = icmp ugt <4 x i64> %167, splat (i64 224), !dbg !30
  %169 = bitcast <4 x i1> %160 to i4, !dbg !31
  %170 = icmp ne i4 %169, 0, !dbg !31
  %171 = and i1 %19, %170, !dbg !31
  %172 = bitcast <4 x i1> %168 to i4, !dbg !31
  %173 = icmp ne i4 %172, 0, !dbg !31
  %174 = and i1 %20, %173, !dbg !31
  %175 = or i1 %171, %174, !dbg !31
  br i1 %175, label %176, label %177, !dbg !31

176:                                              ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 38, ptr nonnull @assertFunc_0, i64 1), !dbg !31
  unreachable, !dbg !31

177:                                              ; preds = %5
  %178 = and i32 %8, 31, !dbg !14
  %179 = or disjoint i32 %7, %178, !dbg !15
  %180 = icmp slt i32 %179, 256, !dbg !16
  %181 = lshr i32 %8, 5, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %182 = extractelement <4 x i64> %159, i64 0, !dbg !32
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !32
  %184 = extractelement <4 x i64> %159, i64 1, !dbg !32
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !32
  %186 = extractelement <4 x i64> %159, i64 2, !dbg !32
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !32
  %188 = extractelement <4 x i64> %159, i64 3, !dbg !32
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !32
  %190 = extractelement <4 x i64> %167, i64 0, !dbg !32
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !32
  %192 = extractelement <4 x i64> %167, i64 1, !dbg !32
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !32
  %194 = extractelement <4 x i64> %167, i64 2, !dbg !32
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !32
  %196 = extractelement <4 x i64> %167, i64 3, !dbg !32
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %198 = ptrtoint ptr addrspace(1) %183 to i64, !dbg !33
  %199 = ptrtoint ptr addrspace(1) %185 to i64, !dbg !33
  %200 = ptrtoint ptr addrspace(1) %187 to i64, !dbg !33
  %201 = ptrtoint ptr addrspace(1) %189 to i64, !dbg !33
  %202 = ptrtoint ptr addrspace(1) %191 to i64, !dbg !33
  %203 = ptrtoint ptr addrspace(1) %193 to i64, !dbg !33
  %204 = ptrtoint ptr addrspace(1) %195 to i64, !dbg !33
  %205 = ptrtoint ptr addrspace(1) %197 to i64, !dbg !33
  %206 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %51, !dbg !33
  %207 = insertelement <1 x i64> poison, i64 %198, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %206, <1 x i64> %207, i1 true) #4, !dbg !33
  %208 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %56, !dbg !33
  %209 = insertelement <1 x i64> poison, i64 %199, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %208, <1 x i64> %209, i1 true) #4, !dbg !33
  %210 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %61, !dbg !33
  %211 = insertelement <1 x i64> poison, i64 %200, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %210, <1 x i64> %211, i1 true) #4, !dbg !33
  %212 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %66, !dbg !33
  %213 = insertelement <1 x i64> poison, i64 %201, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %212, <1 x i64> %213, i1 true) #4, !dbg !33
  %214 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %70, !dbg !33
  %215 = insertelement <1 x i64> poison, i64 %202, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %214, <1 x i64> %215, i1 true) #4, !dbg !33
  %216 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %75, !dbg !33
  %217 = insertelement <1 x i64> poison, i64 %203, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %216, <1 x i64> %217, i1 true) #4, !dbg !33
  %218 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %80, !dbg !33
  %219 = insertelement <1 x i64> poison, i64 %204, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %218, <1 x i64> %219, i1 true) #4, !dbg !33
  %220 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %85, !dbg !33
  %221 = insertelement <1 x i64> poison, i64 %205, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %220, <1 x i64> %221, i1 true) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %222 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %89, !dbg !33
  %223 = load i64, ptr addrspace(3) %222, align 8, !dbg !33
  %224 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %94, !dbg !33
  %225 = load i64, ptr addrspace(3) %224, align 8, !dbg !33
  %226 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %99, !dbg !33
  %227 = load i64, ptr addrspace(3) %226, align 8, !dbg !33
  %228 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %104, !dbg !33
  %229 = load i64, ptr addrspace(3) %228, align 8, !dbg !33
  %230 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %109, !dbg !33
  %231 = load i64, ptr addrspace(3) %230, align 8, !dbg !33
  %232 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %114, !dbg !33
  %233 = load i64, ptr addrspace(3) %232, align 8, !dbg !33
  %234 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %119, !dbg !33
  %235 = load i64, ptr addrspace(3) %234, align 8, !dbg !33
  %236 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %124, !dbg !33
  %237 = load i64, ptr addrspace(3) %236, align 8, !dbg !33
  %238 = inttoptr i64 %223 to ptr addrspace(1), !dbg !33
  %239 = inttoptr i64 %225 to ptr addrspace(1), !dbg !33
  %240 = inttoptr i64 %227 to ptr addrspace(1), !dbg !33
  %241 = inttoptr i64 %229 to ptr addrspace(1), !dbg !33
  %242 = inttoptr i64 %231 to ptr addrspace(1), !dbg !33
  %243 = inttoptr i64 %233 to ptr addrspace(1), !dbg !33
  %244 = inttoptr i64 %235 to ptr addrspace(1), !dbg !33
  %245 = inttoptr i64 %237 to ptr addrspace(1), !dbg !33
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %180) #4, !dbg !33
  %247 = bitcast i32 %246 to float, !dbg !33
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %180) #4, !dbg !33
  %249 = bitcast i32 %248 to float, !dbg !33
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %180) #4, !dbg !33
  %251 = bitcast i32 %250 to float, !dbg !33
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %180) #4, !dbg !33
  %253 = bitcast i32 %252 to float, !dbg !33
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %180) #4, !dbg !33
  %255 = bitcast i32 %254 to float, !dbg !33
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %180) #4, !dbg !33
  %257 = bitcast i32 %256 to float, !dbg !33
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %180) #4, !dbg !33
  %259 = bitcast i32 %258 to float, !dbg !33
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %180) #4, !dbg !33
  %261 = bitcast i32 %260 to float, !dbg !33
  %262 = fadd float %91, %247, !dbg !34
  %263 = fadd float %96, %249, !dbg !34
  %264 = fadd float %101, %251, !dbg !34
  %265 = fadd float %106, %253, !dbg !34
  %266 = fadd float %111, %255, !dbg !34
  %267 = fadd float %116, %257, !dbg !34
  %268 = fadd float %121, %259, !dbg !34
  %269 = fadd float %126, %261, !dbg !34
  %270 = select i1 %180, float %262, float 0xFFF0000000000000, !dbg !35
  %271 = select i1 %180, float %263, float 0xFFF0000000000000, !dbg !35
  %272 = select i1 %180, float %264, float 0xFFF0000000000000, !dbg !35
  %273 = select i1 %180, float %265, float 0xFFF0000000000000, !dbg !35
  %274 = select i1 %180, float %266, float 0xFFF0000000000000, !dbg !35
  %275 = select i1 %180, float %267, float 0xFFF0000000000000, !dbg !35
  %276 = select i1 %180, float %268, float 0xFFF0000000000000, !dbg !35
  %277 = select i1 %180, float %269, float 0xFFF0000000000000, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %278 = fcmp ogt float %270, %271, !dbg !40
  %279 = fcmp uno float %270, 0.000000e+00, !dbg !42
  %280 = or i1 %279, %278, !dbg !43
  %281 = select i1 %280, float %270, float %271, !dbg !44
  %282 = fcmp ogt float %281, %272, !dbg !40
  %283 = fcmp uno float %281, 0.000000e+00, !dbg !42
  %284 = or i1 %282, %283, !dbg !43
  %285 = select i1 %284, float %281, float %272, !dbg !44
  %286 = fcmp ogt float %285, %273, !dbg !40
  %287 = fcmp uno float %285, 0.000000e+00, !dbg !42
  %288 = or i1 %286, %287, !dbg !43
  %289 = select i1 %288, float %285, float %273, !dbg !44
  %290 = fcmp ogt float %289, %274, !dbg !40
  %291 = fcmp uno float %289, 0.000000e+00, !dbg !42
  %292 = or i1 %290, %291, !dbg !43
  %293 = select i1 %292, float %289, float %274, !dbg !44
  %294 = fcmp ogt float %293, %275, !dbg !40
  %295 = fcmp uno float %293, 0.000000e+00, !dbg !42
  %296 = or i1 %294, %295, !dbg !43
  %297 = select i1 %296, float %293, float %275, !dbg !44
  %298 = fcmp ogt float %297, %276, !dbg !40
  %299 = fcmp uno float %297, 0.000000e+00, !dbg !42
  %300 = or i1 %298, %299, !dbg !43
  %301 = select i1 %300, float %297, float %276, !dbg !44
  %302 = fcmp ogt float %301, %277, !dbg !40
  %303 = fcmp uno float %301, 0.000000e+00, !dbg !42
  %304 = or i1 %302, %303, !dbg !43
  %305 = select i1 %304, float %301, float %277, !dbg !44
  %306 = and i32 %181, 7, !dbg !36
  %307 = shl nuw nsw i32 %178, 3, !dbg !36
  %308 = or disjoint i32 %307, %306, !dbg !36
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %308, !dbg !36
  %310 = bitcast float %305 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %311 = icmp slt i32 %8, 256, !dbg !36
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !36
  %313 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %312, i1 %311) #4, !dbg !36
  %314 = bitcast i32 %313 to float, !dbg !36
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 4, i32 31), !dbg !36
  %316 = bitcast i32 %315 to float, !dbg !36
  %317 = fcmp ogt float %314, %316, !dbg !40
  %318 = fcmp uno float %314, 0.000000e+00, !dbg !42
  %319 = or i1 %318, %317, !dbg !43
  %320 = select i1 %319, float %314, float %316, !dbg !44
  %321 = bitcast float %320 to i32, !dbg !36
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 2, i32 31), !dbg !36
  %323 = bitcast i32 %322 to float, !dbg !36
  %324 = fcmp ogt float %320, %323, !dbg !40
  %325 = fcmp uno float %320, 0.000000e+00, !dbg !42
  %326 = or i1 %324, %325, !dbg !43
  %327 = select i1 %326, float %320, float %323, !dbg !44
  %328 = bitcast float %327 to i32, !dbg !36
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 1, i32 31), !dbg !36
  %330 = bitcast i32 %329 to float, !dbg !36
  %331 = fcmp ogt float %327, %330, !dbg !40
  %332 = fcmp uno float %327, 0.000000e+00, !dbg !42
  %333 = or i1 %331, %332, !dbg !43
  %334 = and i32 %8, 7, !dbg !36
  %335 = icmp eq i32 %334, 0, !dbg !36
  %336 = and i1 %311, %335, !dbg !36
  %337 = select i1 %333, i32 %328, i32 %329, !dbg !44
  %338 = insertelement <1 x i32> poison, i32 %337, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %338, i1 %336) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %307, !dbg !36
  %340 = load float, ptr addrspace(3) %339, align 16, !dbg !36
  %341 = fsub float %262, %340, !dbg !45
  %342 = fsub float %263, %340, !dbg !45
  %343 = fsub float %264, %340, !dbg !45
  %344 = fsub float %265, %340, !dbg !45
  %345 = fsub float %266, %340, !dbg !45
  %346 = fsub float %267, %340, !dbg !45
  %347 = fsub float %268, %340, !dbg !45
  %348 = fsub float %269, %340, !dbg !45
  %349 = fmul float %341, 0x3FF7154760000000, !dbg !46
  %350 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %349) #4, !dbg !46
  %351 = fmul float %342, 0x3FF7154760000000, !dbg !46
  %352 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %351) #4, !dbg !46
  %353 = fmul float %343, 0x3FF7154760000000, !dbg !46
  %354 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %353) #4, !dbg !46
  %355 = fmul float %344, 0x3FF7154760000000, !dbg !46
  %356 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %355) #4, !dbg !46
  %357 = fmul float %345, 0x3FF7154760000000, !dbg !46
  %358 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %357) #4, !dbg !46
  %359 = fmul float %346, 0x3FF7154760000000, !dbg !46
  %360 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %359) #4, !dbg !46
  %361 = fmul float %347, 0x3FF7154760000000, !dbg !46
  %362 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %361) #4, !dbg !46
  %363 = fmul float %348, 0x3FF7154760000000, !dbg !46
  %364 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %363) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %365 = fadd float %350, %352, !dbg !51
  %366 = fadd float %365, %354, !dbg !51
  %367 = fadd float %366, %356, !dbg !51
  %368 = fadd float %367, %358, !dbg !51
  %369 = fadd float %368, %360, !dbg !51
  %370 = fadd float %369, %362, !dbg !51
  %371 = fadd float %370, %364, !dbg !51
  %372 = bitcast float %371 to i32, !dbg !47
  %373 = select i1 %180, i32 %372, i32 0, !dbg !51
  %374 = insertelement <1 x i32> poison, i32 %373, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %374, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %375 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %312, i1 %311) #4, !dbg !47
  %376 = bitcast i32 %375 to float, !dbg !47
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 4, i32 31), !dbg !47
  %378 = bitcast i32 %377 to float, !dbg !47
  %379 = fadd float %376, %378, !dbg !51
  %380 = bitcast float %379 to i32, !dbg !47
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 2, i32 31), !dbg !47
  %382 = bitcast i32 %381 to float, !dbg !47
  %383 = fadd float %379, %382, !dbg !51
  %384 = bitcast float %383 to i32, !dbg !47
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 1, i32 31), !dbg !47
  %386 = bitcast i32 %385 to float, !dbg !47
  %387 = fadd float %383, %386, !dbg !51
  %388 = bitcast float %387 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %388, i1 %336) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %389 = load float, ptr addrspace(3) %339, align 16, !dbg !47
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float %389) #4, !dbg !53
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %389) #4, !dbg !53
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %389) #4, !dbg !53
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %389) #4, !dbg !53
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %358, float %389) #4, !dbg !53
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %360, float %389) #4, !dbg !53
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %389) #4, !dbg !53
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %389) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %398 = shl i32 %8, 6, !dbg !54
  %399 = and i32 %398, 1984, !dbg !54
  %.lobit20 = lshr exact i32 %10, 5, !dbg !54
  %400 = and i32 %181, 6, !dbg !54
  %401 = or disjoint i32 %.lobit20, %400, !dbg !54
  %402 = or disjoint i32 %401, %399, !dbg !54
  %403 = and i32 %21, 1020, !dbg !54
  %404 = lshr exact i32 %399, 2, !dbg !54
  %405 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %404, !dbg !54
  %406 = getelementptr float, ptr addrspace(3) %405, i32 %402, !dbg !54
  %407 = bitcast float %390 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 true) #4, !dbg !54
  %408 = or disjoint i32 %402, 8, !dbg !54
  %409 = getelementptr float, ptr addrspace(3) %405, i32 %408, !dbg !54
  %410 = bitcast float %391 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 true) #4, !dbg !54
  %411 = or disjoint i32 %402, 16, !dbg !54
  %412 = getelementptr float, ptr addrspace(3) %405, i32 %411, !dbg !54
  %413 = bitcast float %392 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 true) #4, !dbg !54
  %414 = or disjoint i32 %402, 24, !dbg !54
  %415 = getelementptr float, ptr addrspace(3) %405, i32 %414, !dbg !54
  %416 = bitcast float %393 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 true) #4, !dbg !54
  %417 = or disjoint i32 %402, 32, !dbg !54
  %418 = getelementptr float, ptr addrspace(3) %405, i32 %417, !dbg !54
  %419 = bitcast float %394 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #4, !dbg !54
  %420 = or disjoint i32 %402, 40, !dbg !54
  %421 = getelementptr float, ptr addrspace(3) %405, i32 %420, !dbg !54
  %422 = bitcast float %395 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %422, i1 true) #4, !dbg !54
  %423 = or disjoint i32 %402, 48, !dbg !54
  %424 = getelementptr float, ptr addrspace(3) %405, i32 %423, !dbg !54
  %425 = bitcast float %396 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 true) #4, !dbg !54
  %426 = or disjoint i32 %402, 56, !dbg !54
  %427 = getelementptr float, ptr addrspace(3) %405, i32 %426, !dbg !54
  %428 = bitcast float %397 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %428, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %429 = lshr i32 %21, 4, !dbg !54
  %430 = and i32 %429, 60, !dbg !54
  %431 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %430, !dbg !54
  %432 = getelementptr inbounds float, ptr addrspace(3) %431, i32 %403, !dbg !54
  %433 = or disjoint i32 %403, 1024, !dbg !54
  %434 = lshr i32 %433, 4, !dbg !54
  %435 = and i32 %434, 124, !dbg !54
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %435, !dbg !54
  %437 = getelementptr inbounds float, ptr addrspace(3) %436, i32 %433, !dbg !54
  %438 = load <4 x i32>, ptr addrspace(3) %437, align 16, !dbg !54
  %.extract = load i32, ptr addrspace(3) %432, align 16, !dbg !54
  %439 = getelementptr inbounds i8, ptr addrspace(3) %432, i32 4, !dbg !54
  %.extract29 = load i32, ptr addrspace(3) %439, align 4, !dbg !54
  %440 = getelementptr inbounds i8, ptr addrspace(3) %432, i32 8, !dbg !54
  %.extract30 = load i32, ptr addrspace(3) %440, align 8, !dbg !54
  %441 = getelementptr inbounds i8, ptr addrspace(3) %432, i32 12, !dbg !54
  %.extract31 = load i32, ptr addrspace(3) %441, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %31, i1 %19) #4, !dbg !54
  %.extract32 = extractelement <4 x i32> %438, i64 0, !dbg !54
  %.extract33 = extractelement <4 x i32> %438, i64 1, !dbg !54
  %.extract34 = extractelement <4 x i32> %438, i64 2, !dbg !54
  %.extract35 = extractelement <4 x i32> %438, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract32, i32 %.extract33, i32 %.extract34, i32 %.extract35, ptr addrspace(1) %33, i1 %20) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py", directory: "inductor_cache/h6")
!4 = !{ptr @triton_per_fused__softmax_add_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_4", linkageName: "triton_per_fused__softmax_add_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 34, scope: !11)
!18 = !DILocation(line: 31, column: 19, scope: !11)
!19 = !DILocation(line: 32, column: 42, scope: !11)
!20 = !DILocation(line: 32, column: 39, scope: !11)
!21 = !DILocation(line: 32, column: 34, scope: !11)
!22 = !DILocation(line: 32, column: 47, scope: !11)
!23 = !DILocation(line: 33, column: 38, scope: !11)
!24 = !DILocation(line: 33, column: 35, scope: !11)
!25 = !DILocation(line: 33, column: 30, scope: !11)
!26 = !DILocation(line: 33, column: 43, scope: !11)
!27 = !DILocation(line: 35, column: 18, scope: !11)
!28 = !DILocation(line: 36, column: 18, scope: !11)
!29 = !DILocation(line: 37, column: 32, scope: !11)
!30 = !DILocation(line: 38, column: 37, scope: !11)
!31 = !DILocation(line: 38, column: 62, scope: !11)
!32 = !DILocation(line: 39, column: 30, scope: !11)
!33 = !DILocation(line: 39, column: 37, scope: !11)
!34 = !DILocation(line: 40, column: 18, scope: !11)
!35 = !DILocation(line: 42, column: 34, scope: !11)
!36 = !DILocation(line: 131, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !11, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 43, column: 39, scope: !11)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !39)
!43 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !39)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !39)
!45 = !DILocation(line: 44, column: 19, scope: !11)
!46 = !DILocation(line: 45, column: 24, scope: !11)
!47 = !DILocation(line: 267, column: 36, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !11, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = !DILocation(line: 48, column: 26, scope: !11)
!51 = !DILocation(line: 256, column: 15, scope: !52, inlinedAt: !50)
!52 = distinct !DILexicalBlockFile(scope: !48, file: !49, discriminator: 0)
!53 = !DILocation(line: 49, column: 20, scope: !11)
!54 = !DILocation(line: 50, column: 48, scope: !11)
!55 = !DILocation(line: 50, column: 4, scope: !11)
