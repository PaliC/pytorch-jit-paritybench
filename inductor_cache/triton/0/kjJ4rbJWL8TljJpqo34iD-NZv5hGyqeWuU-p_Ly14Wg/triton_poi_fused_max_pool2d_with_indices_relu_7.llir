; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %17 = sdiv i32 %.frozen, 256, !dbg !14
  %18 = mul i32 %17, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %14, 256, !dbg !15
  %20 = srem i32 %17, 12, !dbg !16
  %21 = sdiv i32 %13, 3072, !dbg !17
  %22 = srem i32 %21, 12, !dbg !18
  %23 = sdiv i32 %13, 36864, !dbg !19
  %24 = shl nsw i32 %20, 9, !dbg !20
  %25 = mul nsw i32 %22, 12800, !dbg !21
  %26 = mul i32 %23, 160000, !dbg !22
  %27 = add i32 %24, %26, !dbg !23
  %28 = add i32 %27, %.decomposed, !dbg !24
  %29 = add i32 %28, %25, !dbg !25
  %30 = add i32 %27, %19, !dbg !24
  %31 = add i32 %30, %25, !dbg !25
  %32 = sext i32 %29 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !26
  %34 = sext i32 %31 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !27
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !27
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !27
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %46 = add i32 %27, 256, !dbg !28
  %47 = add i32 %46, %.decomposed, !dbg !29
  %48 = add i32 %47, %25, !dbg !30
  %49 = add i32 %46, %19, !dbg !29
  %50 = add i32 %49, %25, !dbg !30
  %51 = sext i32 %48 to i64, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !31
  %53 = sext i32 %50 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !31
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !32
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !32
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !32
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !32
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !32
  %65 = add i32 %27, 512, !dbg !33
  %66 = add i32 %65, %.decomposed, !dbg !34
  %67 = add i32 %66, %25, !dbg !35
  %68 = add i32 %65, %19, !dbg !34
  %69 = add i32 %68, %25, !dbg !35
  %70 = sext i32 %67 to i64, !dbg !36
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !36
  %72 = sext i32 %69 to i64, !dbg !36
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !36
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #2, !dbg !37
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !37
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !37
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !37
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !37
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #2, !dbg !37
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !37
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !37
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !37
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !37
  %84 = add i32 %27, 6400, !dbg !38
  %85 = add i32 %84, %.decomposed, !dbg !39
  %86 = add i32 %85, %25, !dbg !40
  %87 = add i32 %84, %19, !dbg !39
  %88 = add i32 %87, %25, !dbg !40
  %89 = sext i32 %86 to i64, !dbg !41
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !41
  %91 = sext i32 %88 to i64, !dbg !41
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !41
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #2, !dbg !42
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !42
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !42
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !42
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !42
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !42
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !42
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !42
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !42
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !42
  %103 = add i32 %27, 6656, !dbg !43
  %104 = add i32 %103, %.decomposed, !dbg !44
  %105 = add i32 %104, %25, !dbg !45
  %106 = add i32 %103, %19, !dbg !44
  %107 = add i32 %106, %25, !dbg !45
  %108 = sext i32 %105 to i64, !dbg !46
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !46
  %110 = sext i32 %107 to i64, !dbg !46
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !46
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #2, !dbg !47
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !47
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !47
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !47
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !47
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #2, !dbg !47
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !47
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !47
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !47
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !47
  %122 = add i32 %27, 6912, !dbg !48
  %123 = add i32 %122, %.decomposed, !dbg !49
  %124 = add i32 %123, %25, !dbg !50
  %125 = add i32 %122, %19, !dbg !49
  %126 = add i32 %125, %25, !dbg !50
  %127 = sext i32 %124 to i64, !dbg !51
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !51
  %129 = sext i32 %126 to i64, !dbg !51
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !51
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 true) #2, !dbg !52
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !52
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !52
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !52
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !52
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !52
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !52
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !52
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !52
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !52
  %141 = add i32 %27, 12800, !dbg !53
  %142 = add i32 %141, %.decomposed, !dbg !54
  %143 = add i32 %142, %25, !dbg !55
  %144 = add i32 %141, %19, !dbg !54
  %145 = add i32 %144, %25, !dbg !55
  %146 = sext i32 %143 to i64, !dbg !56
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !56
  %148 = sext i32 %145 to i64, !dbg !56
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !56
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 true) #2, !dbg !57
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !57
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !57
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !57
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !57
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 true) #2, !dbg !57
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !57
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !57
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !57
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !57
  %160 = add i32 %27, 13056, !dbg !58
  %161 = add i32 %160, %.decomposed, !dbg !59
  %162 = add i32 %161, %25, !dbg !60
  %163 = add i32 %160, %19, !dbg !59
  %164 = add i32 %163, %25, !dbg !60
  %165 = sext i32 %162 to i64, !dbg !61
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !61
  %167 = sext i32 %164 to i64, !dbg !61
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !61
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %166, i1 true) #2, !dbg !62
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !62
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !62
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !62
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !62
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 true) #2, !dbg !62
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !62
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !62
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !62
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !62
  %179 = add i32 %27, 13312, !dbg !63
  %180 = add i32 %179, %.decomposed, !dbg !64
  %181 = add i32 %180, %25, !dbg !65
  %182 = add i32 %179, %19, !dbg !64
  %183 = add i32 %182, %25, !dbg !65
  %184 = sext i32 %181 to i64, !dbg !66
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !66
  %186 = sext i32 %183 to i64, !dbg !66
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !66
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 true) #2, !dbg !67
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !67
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !67
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !67
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !67
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 true) #2, !dbg !67
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !67
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !67
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !67
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !67
  %198 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !27
  %199 = insertelement <4 x i32> %198, i32 %38, i64 1, !dbg !27
  %200 = insertelement <4 x i32> %199, i32 %39, i64 2, !dbg !27
  %201 = insertelement <4 x i32> %200, i32 %40, i64 3, !dbg !27
  %202 = bitcast <4 x i32> %201 to <4 x float>, !dbg !27
  %203 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !32
  %204 = insertelement <4 x i32> %203, i32 %57, i64 1, !dbg !32
  %205 = insertelement <4 x i32> %204, i32 %58, i64 2, !dbg !32
  %206 = insertelement <4 x i32> %205, i32 %59, i64 3, !dbg !32
  %207 = bitcast <4 x i32> %206 to <4 x float>, !dbg !32
  %208 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !37
  %209 = insertelement <4 x i32> %208, i32 %76, i64 1, !dbg !37
  %210 = insertelement <4 x i32> %209, i32 %77, i64 2, !dbg !37
  %211 = insertelement <4 x i32> %210, i32 %78, i64 3, !dbg !37
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !37
  %213 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !42
  %214 = insertelement <4 x i32> %213, i32 %95, i64 1, !dbg !42
  %215 = insertelement <4 x i32> %214, i32 %96, i64 2, !dbg !42
  %216 = insertelement <4 x i32> %215, i32 %97, i64 3, !dbg !42
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !42
  %218 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !47
  %219 = insertelement <4 x i32> %218, i32 %114, i64 1, !dbg !47
  %220 = insertelement <4 x i32> %219, i32 %115, i64 2, !dbg !47
  %221 = insertelement <4 x i32> %220, i32 %116, i64 3, !dbg !47
  %222 = bitcast <4 x i32> %221 to <4 x float>, !dbg !47
  %223 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !52
  %224 = insertelement <4 x i32> %223, i32 %133, i64 1, !dbg !52
  %225 = insertelement <4 x i32> %224, i32 %134, i64 2, !dbg !52
  %226 = insertelement <4 x i32> %225, i32 %135, i64 3, !dbg !52
  %227 = bitcast <4 x i32> %226 to <4 x float>, !dbg !52
  %228 = insertelement <4 x i32> poison, i32 %151, i64 0, !dbg !57
  %229 = insertelement <4 x i32> %228, i32 %152, i64 1, !dbg !57
  %230 = insertelement <4 x i32> %229, i32 %153, i64 2, !dbg !57
  %231 = insertelement <4 x i32> %230, i32 %154, i64 3, !dbg !57
  %232 = bitcast <4 x i32> %231 to <4 x float>, !dbg !57
  %233 = insertelement <4 x i32> poison, i32 %170, i64 0, !dbg !62
  %234 = insertelement <4 x i32> %233, i32 %171, i64 1, !dbg !62
  %235 = insertelement <4 x i32> %234, i32 %172, i64 2, !dbg !62
  %236 = insertelement <4 x i32> %235, i32 %173, i64 3, !dbg !62
  %237 = bitcast <4 x i32> %236 to <4 x float>, !dbg !62
  %238 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !67
  %239 = insertelement <4 x i32> %238, i32 %190, i64 1, !dbg !67
  %240 = insertelement <4 x i32> %239, i32 %191, i64 2, !dbg !67
  %241 = insertelement <4 x i32> %240, i32 %192, i64 3, !dbg !67
  %242 = bitcast <4 x i32> %241 to <4 x float>, !dbg !67
  %243 = fcmp ogt <4 x float> %207, %202, !dbg !68
  %244 = fcmp uno <4 x float> %207, zeroinitializer, !dbg !72
  %245 = or <4 x i1> %243, %244, !dbg !73
  %.v = select <4 x i1> %245, <4 x i32> %206, <4 x i32> %201, !dbg !74
  %246 = bitcast <4 x i32> %.v to <4 x float>, !dbg !74
  %247 = fcmp olt <4 x float> %246, %212, !dbg !75
  %248 = fcmp uno <4 x float> %212, zeroinitializer, !dbg !77
  %249 = or <4 x i1> %248, %247, !dbg !78
  %.v15 = select <4 x i1> %249, <4 x i32> %211, <4 x i32> %.v, !dbg !79
  %250 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !79
  %251 = fcmp olt <4 x float> %250, %217, !dbg !80
  %252 = fcmp uno <4 x float> %217, zeroinitializer, !dbg !82
  %253 = or <4 x i1> %252, %251, !dbg !83
  %.v16 = select <4 x i1> %253, <4 x i32> %216, <4 x i32> %.v15, !dbg !84
  %254 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !84
  %255 = fcmp olt <4 x float> %254, %222, !dbg !85
  %256 = fcmp uno <4 x float> %222, zeroinitializer, !dbg !87
  %257 = or <4 x i1> %256, %255, !dbg !88
  %.v17 = select <4 x i1> %257, <4 x i32> %221, <4 x i32> %.v16, !dbg !89
  %258 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !89
  %259 = fcmp olt <4 x float> %258, %227, !dbg !90
  %260 = fcmp uno <4 x float> %227, zeroinitializer, !dbg !92
  %261 = or <4 x i1> %260, %259, !dbg !93
  %.v18 = select <4 x i1> %261, <4 x i32> %226, <4 x i32> %.v17, !dbg !94
  %262 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !94
  %263 = fcmp olt <4 x float> %262, %232, !dbg !95
  %264 = fcmp uno <4 x float> %232, zeroinitializer, !dbg !97
  %265 = or <4 x i1> %264, %263, !dbg !98
  %.v19 = select <4 x i1> %265, <4 x i32> %231, <4 x i32> %.v18, !dbg !99
  %266 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !99
  %267 = fcmp olt <4 x float> %266, %237, !dbg !100
  %268 = fcmp uno <4 x float> %237, zeroinitializer, !dbg !102
  %269 = or <4 x i1> %268, %267, !dbg !103
  %.v20 = select <4 x i1> %269, <4 x i32> %236, <4 x i32> %.v19, !dbg !104
  %270 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !104
  %271 = fcmp olt <4 x float> %270, %242, !dbg !105
  %272 = zext <4 x i1> %243 to <4 x i8>, !dbg !107
  %273 = select <4 x i1> %247, <4 x i8> splat (i8 2), <4 x i8> %272, !dbg !108
  %274 = select <4 x i1> %251, <4 x i8> splat (i8 3), <4 x i8> %273, !dbg !109
  %275 = select <4 x i1> %255, <4 x i8> splat (i8 4), <4 x i8> %274, !dbg !110
  %276 = select <4 x i1> %259, <4 x i8> splat (i8 5), <4 x i8> %275, !dbg !111
  %277 = select <4 x i1> %263, <4 x i8> splat (i8 6), <4 x i8> %276, !dbg !112
  %278 = select <4 x i1> %267, <4 x i8> splat (i8 7), <4 x i8> %277, !dbg !113
  %279 = select <4 x i1> %271, <4 x i8> splat (i8 8), <4 x i8> %278, !dbg !114
  %280 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !27
  %281 = insertelement <4 x i32> %280, i32 %43, i64 1, !dbg !27
  %282 = insertelement <4 x i32> %281, i32 %44, i64 2, !dbg !27
  %283 = insertelement <4 x i32> %282, i32 %45, i64 3, !dbg !27
  %284 = bitcast <4 x i32> %283 to <4 x float>, !dbg !27
  %285 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !32
  %286 = insertelement <4 x i32> %285, i32 %62, i64 1, !dbg !32
  %287 = insertelement <4 x i32> %286, i32 %63, i64 2, !dbg !32
  %288 = insertelement <4 x i32> %287, i32 %64, i64 3, !dbg !32
  %289 = bitcast <4 x i32> %288 to <4 x float>, !dbg !32
  %290 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !37
  %291 = insertelement <4 x i32> %290, i32 %81, i64 1, !dbg !37
  %292 = insertelement <4 x i32> %291, i32 %82, i64 2, !dbg !37
  %293 = insertelement <4 x i32> %292, i32 %83, i64 3, !dbg !37
  %294 = bitcast <4 x i32> %293 to <4 x float>, !dbg !37
  %295 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !42
  %296 = insertelement <4 x i32> %295, i32 %100, i64 1, !dbg !42
  %297 = insertelement <4 x i32> %296, i32 %101, i64 2, !dbg !42
  %298 = insertelement <4 x i32> %297, i32 %102, i64 3, !dbg !42
  %299 = bitcast <4 x i32> %298 to <4 x float>, !dbg !42
  %300 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !47
  %301 = insertelement <4 x i32> %300, i32 %119, i64 1, !dbg !47
  %302 = insertelement <4 x i32> %301, i32 %120, i64 2, !dbg !47
  %303 = insertelement <4 x i32> %302, i32 %121, i64 3, !dbg !47
  %304 = bitcast <4 x i32> %303 to <4 x float>, !dbg !47
  %305 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !52
  %306 = insertelement <4 x i32> %305, i32 %138, i64 1, !dbg !52
  %307 = insertelement <4 x i32> %306, i32 %139, i64 2, !dbg !52
  %308 = insertelement <4 x i32> %307, i32 %140, i64 3, !dbg !52
  %309 = bitcast <4 x i32> %308 to <4 x float>, !dbg !52
  %310 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !57
  %311 = insertelement <4 x i32> %310, i32 %157, i64 1, !dbg !57
  %312 = insertelement <4 x i32> %311, i32 %158, i64 2, !dbg !57
  %313 = insertelement <4 x i32> %312, i32 %159, i64 3, !dbg !57
  %314 = bitcast <4 x i32> %313 to <4 x float>, !dbg !57
  %315 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !62
  %316 = insertelement <4 x i32> %315, i32 %176, i64 1, !dbg !62
  %317 = insertelement <4 x i32> %316, i32 %177, i64 2, !dbg !62
  %318 = insertelement <4 x i32> %317, i32 %178, i64 3, !dbg !62
  %319 = bitcast <4 x i32> %318 to <4 x float>, !dbg !62
  %320 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !67
  %321 = insertelement <4 x i32> %320, i32 %195, i64 1, !dbg !67
  %322 = insertelement <4 x i32> %321, i32 %196, i64 2, !dbg !67
  %323 = insertelement <4 x i32> %322, i32 %197, i64 3, !dbg !67
  %324 = bitcast <4 x i32> %323 to <4 x float>, !dbg !67
  %325 = fcmp ogt <4 x float> %289, %284, !dbg !68
  %326 = fcmp uno <4 x float> %289, zeroinitializer, !dbg !72
  %327 = or <4 x i1> %325, %326, !dbg !73
  %.v21 = select <4 x i1> %327, <4 x i32> %288, <4 x i32> %283, !dbg !74
  %328 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !74
  %329 = fcmp olt <4 x float> %328, %294, !dbg !75
  %330 = fcmp uno <4 x float> %294, zeroinitializer, !dbg !77
  %331 = or <4 x i1> %330, %329, !dbg !78
  %.v22 = select <4 x i1> %331, <4 x i32> %293, <4 x i32> %.v21, !dbg !79
  %332 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !79
  %333 = fcmp olt <4 x float> %332, %299, !dbg !80
  %334 = fcmp uno <4 x float> %299, zeroinitializer, !dbg !82
  %335 = or <4 x i1> %334, %333, !dbg !83
  %.v23 = select <4 x i1> %335, <4 x i32> %298, <4 x i32> %.v22, !dbg !84
  %336 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !84
  %337 = fcmp olt <4 x float> %336, %304, !dbg !85
  %338 = fcmp uno <4 x float> %304, zeroinitializer, !dbg !87
  %339 = or <4 x i1> %338, %337, !dbg !88
  %.v24 = select <4 x i1> %339, <4 x i32> %303, <4 x i32> %.v23, !dbg !89
  %340 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !89
  %341 = fcmp olt <4 x float> %340, %309, !dbg !90
  %342 = fcmp uno <4 x float> %309, zeroinitializer, !dbg !92
  %343 = or <4 x i1> %342, %341, !dbg !93
  %.v25 = select <4 x i1> %343, <4 x i32> %308, <4 x i32> %.v24, !dbg !94
  %344 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !94
  %345 = fcmp olt <4 x float> %344, %314, !dbg !95
  %346 = fcmp uno <4 x float> %314, zeroinitializer, !dbg !97
  %347 = or <4 x i1> %346, %345, !dbg !98
  %.v26 = select <4 x i1> %347, <4 x i32> %313, <4 x i32> %.v25, !dbg !99
  %348 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !99
  %349 = fcmp olt <4 x float> %348, %319, !dbg !100
  %350 = fcmp uno <4 x float> %319, zeroinitializer, !dbg !102
  %351 = or <4 x i1> %350, %349, !dbg !103
  %.v27 = select <4 x i1> %351, <4 x i32> %318, <4 x i32> %.v26, !dbg !104
  %352 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !104
  %353 = fcmp olt <4 x float> %352, %324, !dbg !105
  %354 = zext <4 x i1> %325 to <4 x i8>, !dbg !107
  %355 = select <4 x i1> %329, <4 x i8> splat (i8 2), <4 x i8> %354, !dbg !108
  %356 = select <4 x i1> %333, <4 x i8> splat (i8 3), <4 x i8> %355, !dbg !109
  %357 = select <4 x i1> %337, <4 x i8> splat (i8 4), <4 x i8> %356, !dbg !110
  %358 = select <4 x i1> %341, <4 x i8> splat (i8 5), <4 x i8> %357, !dbg !111
  %359 = select <4 x i1> %345, <4 x i8> splat (i8 6), <4 x i8> %358, !dbg !112
  %360 = select <4 x i1> %349, <4 x i8> splat (i8 7), <4 x i8> %359, !dbg !113
  %361 = select <4 x i1> %353, <4 x i8> splat (i8 8), <4 x i8> %360, !dbg !114
  %362 = shufflevector <4 x float> %324, <4 x float> %242, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !115
  %363 = fcmp uno <8 x float> %362, zeroinitializer, !dbg !115
  %364 = shufflevector <4 x i1> %353, <4 x i1> %271, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !116
  %365 = or <8 x i1> %363, %364, !dbg !116
  %366 = shufflevector <4 x float> %352, <4 x float> %270, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !117
  %367 = select <8 x i1> %365, <8 x float> %362, <8 x float> %366, !dbg !117
  %368 = fcmp olt <8 x float> %367, zeroinitializer, !dbg !118
  %369 = extractelement <8 x i1> %368, i64 7, !dbg !120
  %370 = extractelement <8 x i1> %368, i64 6, !dbg !120
  %371 = extractelement <8 x i1> %368, i64 5, !dbg !120
  %372 = extractelement <8 x i1> %368, i64 4, !dbg !120
  %373 = extractelement <8 x i1> %368, i64 3, !dbg !120
  %374 = extractelement <8 x i1> %368, i64 2, !dbg !120
  %375 = extractelement <8 x i1> %368, i64 1, !dbg !120
  %376 = extractelement <8 x i1> %368, i64 0, !dbg !120
  %377 = sext i32 %13 to i64, !dbg !121
  %378 = getelementptr i8, ptr addrspace(1) %2, i64 %377, !dbg !121
  %379 = bitcast <4 x i8> %279 to i32, !dbg !122
  %380 = bitcast <4 x i8> %361 to i32, !dbg !122
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %379, i32 %380, ptr addrspace(1) %378, i1 true) #2, !dbg !122
  %381 = sext i32 %15 to i64, !dbg !123
  %382 = getelementptr float, ptr addrspace(1) %0, i64 %381, !dbg !123
  %383 = sext i32 %16 to i64, !dbg !123
  %384 = getelementptr float, ptr addrspace(1) %0, i64 %383, !dbg !123
  %385 = zext nneg i32 %9 to i64, !dbg !124
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %385, !dbg !124
  %bc = bitcast <8 x float> %367 to <8 x i32>, !dbg !124
  %387 = extractelement <8 x i32> %bc, i64 7, !dbg !124
  %388 = select i1 %369, i32 0, i32 %387, !dbg !120
  %bc28 = bitcast <8 x float> %367 to <8 x i32>, !dbg !124
  %389 = extractelement <8 x i32> %bc28, i64 6, !dbg !124
  %390 = select i1 %370, i32 0, i32 %389, !dbg !120
  %bc29 = bitcast <8 x float> %367 to <8 x i32>, !dbg !124
  %391 = extractelement <8 x i32> %bc29, i64 5, !dbg !124
  %392 = select i1 %371, i32 0, i32 %391, !dbg !120
  %bc30 = bitcast <8 x float> %367 to <8 x i32>, !dbg !124
  %393 = extractelement <8 x i32> %bc30, i64 4, !dbg !124
  %394 = select i1 %372, i32 0, i32 %393, !dbg !120
  %bc31 = bitcast <8 x float> %367 to <8 x i32>, !dbg !124
  %395 = extractelement <8 x i32> %bc31, i64 3, !dbg !124
  %396 = select i1 %373, i32 0, i32 %395, !dbg !120
  %bc32 = bitcast <8 x float> %367 to <8 x i32>, !dbg !124
  %397 = extractelement <8 x i32> %bc32, i64 2, !dbg !124
  %398 = select i1 %374, i32 0, i32 %397, !dbg !120
  %bc33 = bitcast <8 x float> %367 to <8 x i32>, !dbg !124
  %399 = extractelement <8 x i32> %bc33, i64 1, !dbg !124
  %400 = select i1 %375, i32 0, i32 %399, !dbg !120
  %bc34 = bitcast <8 x float> %367 to <8 x i32>, !dbg !124
  %401 = extractelement <8 x i32> %bc34, i64 0, !dbg !124
  %402 = select i1 %376, i32 0, i32 %401, !dbg !120
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %386, i32 %388, i32 %390, i32 %392, i32 %394, i1 true) #2, !dbg !124
  %403 = getelementptr inbounds i8, ptr addrspace(3) %386, i64 16, !dbg !124
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %403, i32 %396, i32 %398, i32 %400, i32 %402, i1 true) #2, !dbg !124
  tail call void @llvm.nvvm.barrier0(), !dbg !124
  %404 = zext nneg i32 %11 to i64, !dbg !124
  %405 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %404, !dbg !124
  %406 = zext nneg i32 %12 to i64, !dbg !124
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %406, !dbg !124
  %408 = load <4 x i32>, ptr addrspace(3) %407, align 16, !dbg !124
  %.extract = load i32, ptr addrspace(3) %405, align 16, !dbg !124
  %409 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 4, !dbg !124
  %.extract8 = load i32, ptr addrspace(3) %409, align 4, !dbg !124
  %410 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 8, !dbg !124
  %.extract9 = load i32, ptr addrspace(3) %410, align 8, !dbg !124
  %411 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 12, !dbg !124
  %.extract10 = load i32, ptr addrspace(3) %411, align 4, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %382, i1 true) #2, !dbg !124
  %.extract11 = extractelement <4 x i32> %408, i64 0, !dbg !124
  %.extract12 = extractelement <4 x i32> %408, i64 1, !dbg !124
  %.extract13 = extractelement <4 x i32> %408, i64 2, !dbg !124
  %.extract14 = extractelement <4 x i32> %408, i64 3, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %384, i1 true) #2, !dbg !124
  ret void, !dbg !125
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqfqmkollefin2foti2vrbw7au76p52rs4thxqqfk5geryknxpbp.py", directory: "inductor_cache/qf")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 50, scope: !7)
!22 = !DILocation(line: 29, column: 62, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 29, column: 44, scope: !7)
!25 = !DILocation(line: 29, column: 55, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 67, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 30, column: 50, scope: !7)
!30 = !DILocation(line: 30, column: 61, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 73, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 31, column: 50, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 73, scope: !7)
!38 = !DILocation(line: 32, column: 42, scope: !7)
!39 = !DILocation(line: 32, column: 51, scope: !7)
!40 = !DILocation(line: 32, column: 62, scope: !7)
!41 = !DILocation(line: 32, column: 30, scope: !7)
!42 = !DILocation(line: 32, column: 74, scope: !7)
!43 = !DILocation(line: 33, column: 42, scope: !7)
!44 = !DILocation(line: 33, column: 51, scope: !7)
!45 = !DILocation(line: 33, column: 62, scope: !7)
!46 = !DILocation(line: 33, column: 30, scope: !7)
!47 = !DILocation(line: 33, column: 74, scope: !7)
!48 = !DILocation(line: 34, column: 42, scope: !7)
!49 = !DILocation(line: 34, column: 51, scope: !7)
!50 = !DILocation(line: 34, column: 62, scope: !7)
!51 = !DILocation(line: 34, column: 30, scope: !7)
!52 = !DILocation(line: 34, column: 74, scope: !7)
!53 = !DILocation(line: 35, column: 44, scope: !7)
!54 = !DILocation(line: 35, column: 53, scope: !7)
!55 = !DILocation(line: 35, column: 64, scope: !7)
!56 = !DILocation(line: 35, column: 31, scope: !7)
!57 = !DILocation(line: 35, column: 76, scope: !7)
!58 = !DILocation(line: 36, column: 44, scope: !7)
!59 = !DILocation(line: 36, column: 53, scope: !7)
!60 = !DILocation(line: 36, column: 64, scope: !7)
!61 = !DILocation(line: 36, column: 31, scope: !7)
!62 = !DILocation(line: 36, column: 76, scope: !7)
!63 = !DILocation(line: 37, column: 44, scope: !7)
!64 = !DILocation(line: 37, column: 53, scope: !7)
!65 = !DILocation(line: 37, column: 64, scope: !7)
!66 = !DILocation(line: 37, column: 31, scope: !7)
!67 = !DILocation(line: 37, column: 76, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !71)
!69 = distinct !DILexicalBlockFile(scope: !7, file: !70, discriminator: 0)
!70 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!71 = !DILocation(line: 38, column: 40, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !69, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !69, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !71)
!75 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !76)
!76 = !DILocation(line: 39, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !69, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !69, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !81)
!81 = !DILocation(line: 40, column: 40, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !69, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !69, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !86)
!86 = !DILocation(line: 41, column: 40, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !69, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !69, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !91)
!91 = !DILocation(line: 42, column: 41, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !69, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !69, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !96)
!96 = !DILocation(line: 43, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !69, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !69, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !101)
!101 = !DILocation(line: 44, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !69, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !69, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !106)
!106 = !DILocation(line: 45, column: 42, scope: !7)
!107 = !DILocation(line: 49, column: 35, scope: !7)
!108 = !DILocation(line: 52, column: 35, scope: !7)
!109 = !DILocation(line: 55, column: 35, scope: !7)
!110 = !DILocation(line: 58, column: 35, scope: !7)
!111 = !DILocation(line: 61, column: 35, scope: !7)
!112 = !DILocation(line: 64, column: 35, scope: !7)
!113 = !DILocation(line: 67, column: 35, scope: !7)
!114 = !DILocation(line: 70, column: 35, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !69, inlinedAt: !106)
!116 = !DILocation(line: 120, column: 16, scope: !69, inlinedAt: !106)
!117 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !106)
!118 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !119)
!119 = !DILocation(line: 72, column: 42, scope: !7)
!120 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !119)
!121 = !DILocation(line: 73, column: 25, scope: !7)
!122 = !DILocation(line: 73, column: 37, scope: !7)
!123 = !DILocation(line: 74, column: 28, scope: !7)
!124 = !DILocation(line: 74, column: 40, scope: !7)
!125 = !DILocation(line: 74, column: 4, scope: !7)
