; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_pow_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 256, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %14 = sdiv i32 %.frozen, 4, !dbg !15
  %15 = mul i32 %14, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = srem i32 %12, 4, !dbg !16
  %17 = srem i32 %14, 16, !dbg !17
  %18 = sdiv i32 %11, 64, !dbg !18
  %19 = sext i32 %.decomposed to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %13) #1, !dbg !20
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !20
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !20
  %24 = shl nsw i32 %18, 6, !dbg !21
  %25 = add i32 %17, %24, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #1, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #1, !dbg !24
  %30 = shl nsw i32 %.decomposed, 2, !dbg !25
  %31 = shl nsw i32 %16, 2, !dbg !25
  %32 = sext i32 %30 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !26
  %34 = sext i32 %31 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %13) #1, !dbg !27
  %38 = add i32 %25, 16, !dbg !28
  %39 = sext i32 %38 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %13) #1, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %13) #1, !dbg !30
  %43 = or disjoint i32 %30, 1, !dbg !31
  %44 = or disjoint i32 %31, 1, !dbg !31
  %45 = sext i32 %43 to i64, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !32
  %47 = sext i32 %44 to i64, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %13) #1, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %13) #1, !dbg !33
  %51 = add i32 %25, 32, !dbg !34
  %52 = sext i32 %51 to i64, !dbg !35
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %13) #1, !dbg !36
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %13) #1, !dbg !36
  %56 = or disjoint i32 %30, 2, !dbg !37
  %57 = or disjoint i32 %31, 2, !dbg !37
  %58 = sext i32 %56 to i64, !dbg !38
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !38
  %60 = sext i32 %57 to i64, !dbg !38
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !38
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %13) #1, !dbg !39
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !39
  %64 = add i32 %25, 48, !dbg !40
  %65 = sext i32 %64 to i64, !dbg !41
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !41
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %13) #1, !dbg !42
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %13) #1, !dbg !42
  %69 = or disjoint i32 %30, 3, !dbg !43
  %70 = or disjoint i32 %31, 3, !dbg !43
  %71 = sext i32 %69 to i64, !dbg !44
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !44
  %73 = sext i32 %70 to i64, !dbg !44
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !44
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %13) #1, !dbg !45
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %13) #1, !dbg !45
  %77 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !24
  %78 = insertelement <2 x i32> %77, i32 %41, i64 1, !dbg !24
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !24
  %80 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !27
  %81 = insertelement <2 x i32> %80, i32 %49, i64 1, !dbg !27
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !27
  %83 = fsub <2 x float> %79, %82, !dbg !46
  %84 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !47
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !47
  %86 = shufflevector <2 x float> %85, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %87 = fmul <2 x float> %83, %86, !dbg !47
  %88 = fmul <2 x float> %87, %87, !dbg !48
  %89 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !24
  %90 = insertelement <2 x i32> %89, i32 %42, i64 1, !dbg !24
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !24
  %92 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !27
  %93 = insertelement <2 x i32> %92, i32 %50, i64 1, !dbg !27
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !27
  %95 = fsub <2 x float> %91, %94, !dbg !46
  %96 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !47
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !47
  %98 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %99 = fmul <2 x float> %95, %98, !dbg !47
  %100 = fmul <2 x float> %99, %99, !dbg !48
  %shift = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %101 = fadd <2 x float> %88, %shift, !dbg !49
  %shift1 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %102 = fadd <2 x float> %100, %shift1, !dbg !49
  %103 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !36
  %104 = insertelement <2 x i32> %103, i32 %67, i64 1, !dbg !36
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !36
  %106 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !39
  %107 = insertelement <2 x i32> %106, i32 %75, i64 1, !dbg !39
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !39
  %109 = fsub <2 x float> %105, %108, !dbg !50
  %110 = fmul <2 x float> %109, %86, !dbg !51
  %111 = fmul <2 x float> %110, %110, !dbg !52
  %112 = fadd <2 x float> %101, %111, !dbg !53
  %113 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !36
  %114 = insertelement <2 x i32> %113, i32 %68, i64 1, !dbg !36
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !36
  %116 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !39
  %117 = insertelement <2 x i32> %116, i32 %76, i64 1, !dbg !39
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !39
  %119 = fsub <2 x float> %115, %118, !dbg !50
  %120 = fmul <2 x float> %119, %98, !dbg !51
  %121 = fmul <2 x float> %120, %120, !dbg !52
  %122 = fadd <2 x float> %102, %121, !dbg !53
  %shift2 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %123 = fadd <2 x float> %112, %shift2, !dbg !54
  %shift3 = shufflevector <2 x float> %121, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %124 = fadd <2 x float> %122, %shift3, !dbg !54
  %125 = sext i32 %11 to i64, !dbg !55
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %125, !dbg !55
  %bc = bitcast <2 x float> %123 to <2 x i32>, !dbg !56
  %127 = extractelement <2 x i32> %bc, i64 0, !dbg !56
  %bc4 = bitcast <2 x float> %124 to <2 x i32>, !dbg !56
  %128 = extractelement <2 x i32> %bc4, i64 0, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 %13) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctztbjgfeaf2txm5zxareijkho7cgpj6imk7kh2iqiicx3mxxnrn.py", directory: "inductor_cache/tz")
!4 = !{ptr @triton_poi_fused_mul_pow_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_pow_sub_sum_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_pow_sub_sum_0", linkageName: "triton_poi_fused_mul_pow_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 38, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 32, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 37, scope: !7)
!28 = !DILocation(line: 31, column: 40, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 48, scope: !7)
!31 = !DILocation(line: 32, column: 34, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 41, scope: !7)
!34 = !DILocation(line: 33, column: 41, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 49, scope: !7)
!37 = !DILocation(line: 34, column: 35, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 42, scope: !7)
!40 = !DILocation(line: 35, column: 41, scope: !7)
!41 = !DILocation(line: 35, column: 31, scope: !7)
!42 = !DILocation(line: 35, column: 49, scope: !7)
!43 = !DILocation(line: 36, column: 35, scope: !7)
!44 = !DILocation(line: 36, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 42, scope: !7)
!46 = !DILocation(line: 37, column: 18, scope: !7)
!47 = !DILocation(line: 38, column: 18, scope: !7)
!48 = !DILocation(line: 39, column: 18, scope: !7)
!49 = !DILocation(line: 43, column: 19, scope: !7)
!50 = !DILocation(line: 44, column: 20, scope: !7)
!51 = !DILocation(line: 45, column: 19, scope: !7)
!52 = !DILocation(line: 46, column: 20, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 51, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 52, column: 37, scope: !7)
!57 = !DILocation(line: 52, column: 4, scope: !7)
