; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 10, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 2, !dbg !12
  %21 = and i32 %20, 508, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = or disjoint i32 %22, 512, !dbg !13
  %24 = icmp slt i32 %22, 99328, !dbg !14
  %25 = icmp slt i32 %23, 99328, !dbg !14
  %26 = srem i32 %22, 16, !dbg !15
  %.frozen = freeze i32 %22, !dbg !16
  %27 = sdiv i32 %.frozen, 24832, !dbg !16
  %.frozen107 = freeze i32 %23, !dbg !16
  %28 = sdiv i32 %.frozen107, 24832, !dbg !16
  %29 = mul i32 %27, 24832, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %29, !dbg !17
  %30 = mul i32 %28, 24832, !dbg !17
  %srem1.decomposed = sub i32 %.frozen107, %30, !dbg !17
  %31 = mul nsw i32 %27, 24064, !dbg !18
  %32 = mul nsw i32 %28, 24064, !dbg !18
  %33 = add nsw i32 %31, %srem.decomposed, !dbg !19
  %34 = add nsw i32 %32, %srem1.decomposed, !dbg !19
  %35 = sext i32 %33 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = sext i32 %34 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = mul nsw i32 %27, 16768, !dbg !21
  %40 = mul nsw i32 %28, 16768, !dbg !21
  %41 = add nsw i32 %39, %srem.decomposed, !dbg !22
  %42 = add nsw i32 %40, %srem1.decomposed, !dbg !22
  %43 = sext i32 %41 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !23
  %45 = sext i32 %42 to i64, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !24
  %49 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !25
  %50 = insertelement <2 x i32> %49, i32 %22, i64 1, !dbg !25
  %51 = sdiv <2 x i32> %50, splat (i32 16), !dbg !25
  %52 = srem <2 x i32> %51, splat (i32 1552), !dbg !26
  %53 = extractelement <2 x i32> %52, i64 1, !dbg !27
  %54 = sext i32 %53 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !28
  %56 = extractelement <2 x i32> %52, i64 0, !dbg !27
  %57 = sext i32 %56 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %25) #3, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %25) #3, !dbg !29
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %25) #3, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %25) #3, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !30
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %24) #3, !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %24) #3, !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %24) #3, !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %24) #3, !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %25) #3, !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %25) #3, !dbg !31
  %80 = bitcast i32 %79 to float, !dbg !31
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %25) #3, !dbg !31
  %82 = bitcast i32 %81 to float, !dbg !31
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %25) #3, !dbg !31
  %84 = bitcast i32 %83 to float, !dbg !31
  %85 = getelementptr float, ptr addrspace(1) %6, i64 %54, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %24) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %24) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %24) #3, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %24) #3, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %25) #3, !dbg !33
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %25) #3, !dbg !33
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %25) #3, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %25) #3, !dbg !33
  %95 = getelementptr float, ptr addrspace(1) %7, i64 %54, !dbg !34
  %96 = getelementptr float, ptr addrspace(1) %7, i64 %57, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %24) #3, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %24) #3, !dbg !35
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %24) #3, !dbg !35
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %24) #3, !dbg !35
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %25) #3, !dbg !35
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %25) #3, !dbg !35
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %25) #3, !dbg !35
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %25) #3, !dbg !35
  %105 = getelementptr float, ptr addrspace(1) %8, i64 %54, !dbg !36
  %106 = getelementptr float, ptr addrspace(1) %8, i64 %57, !dbg !36
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %24) #3, !dbg !37
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %24) #3, !dbg !37
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %24) #3, !dbg !37
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %24) #3, !dbg !37
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %25) #3, !dbg !37
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %25) #3, !dbg !37
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %25) #3, !dbg !37
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %25) #3, !dbg !37
  %115 = getelementptr float, ptr addrspace(1) %9, i64 %54, !dbg !38
  %116 = getelementptr float, ptr addrspace(1) %9, i64 %57, !dbg !38
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %24) #3, !dbg !39
  %118 = bitcast i32 %117 to float, !dbg !39
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %24) #3, !dbg !39
  %120 = bitcast i32 %119 to float, !dbg !39
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %24) #3, !dbg !39
  %122 = bitcast i32 %121 to float, !dbg !39
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %24) #3, !dbg !39
  %124 = bitcast i32 %123 to float, !dbg !39
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %25) #3, !dbg !39
  %126 = bitcast i32 %125 to float, !dbg !39
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %25) #3, !dbg !39
  %128 = bitcast i32 %127 to float, !dbg !39
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %25) #3, !dbg !39
  %130 = bitcast i32 %129 to float, !dbg !39
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %25) #3, !dbg !39
  %132 = bitcast i32 %131 to float, !dbg !39
  %133 = getelementptr float, ptr addrspace(1) %10, i64 %54, !dbg !40
  %134 = getelementptr float, ptr addrspace(1) %10, i64 %57, !dbg !40
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %24) #3, !dbg !41
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %24) #3, !dbg !41
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %24) #3, !dbg !41
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %24) #3, !dbg !41
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %25) #3, !dbg !41
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %25) #3, !dbg !41
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %25) #3, !dbg !41
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %25) #3, !dbg !41
  %143 = getelementptr float, ptr addrspace(1) %11, i64 %54, !dbg !42
  %144 = getelementptr float, ptr addrspace(1) %11, i64 %57, !dbg !42
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %24) #3, !dbg !43
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %24) #3, !dbg !43
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %24) #3, !dbg !43
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %24) #3, !dbg !43
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %25) #3, !dbg !43
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %25) #3, !dbg !43
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %25) #3, !dbg !43
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %25) #3, !dbg !43
  %153 = icmp slt <2 x i32> %52, splat (i32 1024), !dbg !44
  %154 = extractelement <2 x i1> %153, i64 1, !dbg !45
  %155 = and i1 %24, %154, !dbg !45
  %156 = extractelement <2 x i1> %153, i64 0, !dbg !45
  %157 = and i1 %25, %156, !dbg !45
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #3, !dbg !46
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #3, !dbg !46
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #3, !dbg !47
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #3, !dbg !47
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #3, !dbg !48
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #3, !dbg !48
  %164 = add nsw <2 x i32> %52, splat (i32 -1024), !dbg !49
  %165 = extractelement <2 x i32> %164, i64 1, !dbg !50
  %166 = icmp ult i32 %165, 480, !dbg !50
  %167 = extractelement <2 x i32> %164, i64 0, !dbg !50
  %168 = icmp ult i32 %167, 480, !dbg !50
  %169 = shl nsw i32 %53, 4, !dbg !27
  %170 = shl nsw i32 %56, 4, !dbg !27
  %171 = add nsw i32 %26, -16384, !dbg !27
  %172 = add nsw i32 %171, %31, !dbg !51
  %173 = add nsw i32 %172, %169, !dbg !52
  %174 = add nsw i32 %171, %32, !dbg !51
  %175 = add nsw i32 %174, %170, !dbg !52
  %176 = sext i32 %173 to i64, !dbg !53
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %176, !dbg !53
  %178 = sext i32 %175 to i64, !dbg !53
  %179 = getelementptr float, ptr addrspace(1) %3, i64 %178, !dbg !53
  %180 = and i1 %24, %166, !dbg !54
  %181 = and i1 %25, %168, !dbg !54
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !55
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %181, i32 0, i1 %181, i32 0, i1 %181, i32 0, i1 %181, i32 0, i1 %181) #3, !dbg !55
  %184 = add nsw i32 %53, -1504, !dbg !56
  %185 = icmp ult i32 %184, 24, !dbg !56
  %186 = add nsw i32 %56, -1504, !dbg !56
  %187 = icmp ult i32 %186, 24, !dbg !56
  %188 = add nsw i32 %26, 16384, !dbg !57
  %189 = add nsw i32 %39, %188, !dbg !58
  %190 = add nsw i32 %189, -24064, !dbg !59
  %191 = add nsw i32 %190, %169, !dbg !60
  %192 = add nsw i32 %40, %188, !dbg !58
  %193 = add nsw i32 %192, -24064, !dbg !59
  %194 = add nsw i32 %193, %170, !dbg !60
  %195 = sext i32 %191 to i64, !dbg !61
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !61
  %197 = sext i32 %194 to i64, !dbg !61
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !61
  %199 = and i1 %24, %185, !dbg !62
  %200 = and i1 %25, %187, !dbg !62
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199) #3, !dbg !63
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %200, i32 0, i1 %200, i32 0, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #3, !dbg !63
  %203 = icmp sgt i32 %53, 1527, !dbg !64
  %204 = icmp sgt i32 %56, 1527, !dbg !64
  %205 = add nsw i32 %189, -24448, !dbg !65
  %206 = add nsw i32 %205, %169, !dbg !66
  %207 = add nsw i32 %192, -24448, !dbg !65
  %208 = add nsw i32 %207, %170, !dbg !66
  %209 = sext i32 %206 to i64, !dbg !67
  %210 = getelementptr float, ptr addrspace(1) %2, i64 %209, !dbg !67
  %211 = sext i32 %208 to i64, !dbg !67
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %211, !dbg !67
  %213 = and i1 %24, %203, !dbg !68
  %214 = and i1 %25, %204, !dbg !68
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %210, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #3, !dbg !69
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %212, i1 %214, i32 0, i1 %214, i32 0, i1 %214, i32 0, i1 %214, i32 0, i1 %214) #3, !dbg !69
  %217 = fadd float %70, 0x3F50624DE0000000, !dbg !70
  %218 = fadd float %72, 0x3F50624DE0000000, !dbg !70
  %219 = fadd float %74, 0x3F50624DE0000000, !dbg !70
  %220 = fadd float %76, 0x3F50624DE0000000, !dbg !70
  %221 = fadd float %78, 0x3F50624DE0000000, !dbg !70
  %222 = fadd float %80, 0x3F50624DE0000000, !dbg !70
  %223 = fadd float %82, 0x3F50624DE0000000, !dbg !70
  %224 = fadd float %84, 0x3F50624DE0000000, !dbg !70
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i = icmp eq i32 %225, 0, !dbg !71
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i = icmp eq i32 %226, 0, !dbg !71
  br i1 %.not.i, label %232, label %227, !dbg !71

227:                                              ; preds = %16
  br i1 %.not1.i, label %230, label %228, !dbg !71

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

232:                                              ; preds = %16
  br i1 %.not1.i, label %235, label %233, !dbg !71

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

__nv_sqrtf.exit:                                  ; preds = %228, %230, %233, %235
  %.0.i = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !71
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i9 = icmp eq i32 %237, 0, !dbg !71
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i12 = icmp eq i32 %238, 0, !dbg !71
  br i1 %.not.i9, label %244, label %239, !dbg !71

239:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %242, label %240, !dbg !71

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !71
  br label %__nv_sqrtf.exit13, !dbg !71

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !71
  br label %__nv_sqrtf.exit13, !dbg !71

244:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %247, label %245, !dbg !71

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !71
  br label %__nv_sqrtf.exit13, !dbg !71

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !71
  br label %__nv_sqrtf.exit13, !dbg !71

__nv_sqrtf.exit13:                                ; preds = %240, %242, %245, %247
  %.0.i11 = phi float [ %241, %240 ], [ %243, %242 ], [ %246, %245 ], [ %248, %247 ], !dbg !71
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i14 = icmp eq i32 %249, 0, !dbg !71
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i17 = icmp eq i32 %250, 0, !dbg !71
  br i1 %.not.i14, label %256, label %251, !dbg !71

251:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %254, label %252, !dbg !71

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #3, !dbg !71
  br label %__nv_sqrtf.exit18, !dbg !71

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #3, !dbg !71
  br label %__nv_sqrtf.exit18, !dbg !71

256:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %259, label %257, !dbg !71

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #3, !dbg !71
  br label %__nv_sqrtf.exit18, !dbg !71

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #3, !dbg !71
  br label %__nv_sqrtf.exit18, !dbg !71

__nv_sqrtf.exit18:                                ; preds = %252, %254, %257, %259
  %.0.i16 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !71
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i19 = icmp eq i32 %261, 0, !dbg !71
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i22 = icmp eq i32 %262, 0, !dbg !71
  br i1 %.not.i19, label %268, label %263, !dbg !71

263:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %266, label %264, !dbg !71

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !71
  br label %__nv_sqrtf.exit23, !dbg !71

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !71
  br label %__nv_sqrtf.exit23, !dbg !71

268:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %271, label %269, !dbg !71

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !71
  br label %__nv_sqrtf.exit23, !dbg !71

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !71
  br label %__nv_sqrtf.exit23, !dbg !71

__nv_sqrtf.exit23:                                ; preds = %264, %266, %269, %271
  %.0.i21 = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !71
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i24 = icmp eq i32 %273, 0, !dbg !71
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i27 = icmp eq i32 %274, 0, !dbg !71
  br i1 %.not.i24, label %280, label %275, !dbg !71

275:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %278, label %276, !dbg !71

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !71
  br label %__nv_sqrtf.exit28, !dbg !71

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !71
  br label %__nv_sqrtf.exit28, !dbg !71

280:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %283, label %281, !dbg !71

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !71
  br label %__nv_sqrtf.exit28, !dbg !71

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !71
  br label %__nv_sqrtf.exit28, !dbg !71

__nv_sqrtf.exit28:                                ; preds = %276, %278, %281, %283
  %.0.i26 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !71
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i29 = icmp eq i32 %285, 0, !dbg !71
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i32 = icmp eq i32 %286, 0, !dbg !71
  br i1 %.not.i29, label %292, label %287, !dbg !71

287:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %290, label %288, !dbg !71

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !71
  br label %__nv_sqrtf.exit33, !dbg !71

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !71
  br label %__nv_sqrtf.exit33, !dbg !71

292:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %295, label %293, !dbg !71

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !71
  br label %__nv_sqrtf.exit33, !dbg !71

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !71
  br label %__nv_sqrtf.exit33, !dbg !71

__nv_sqrtf.exit33:                                ; preds = %288, %290, %293, %295
  %.0.i31 = phi float [ %289, %288 ], [ %291, %290 ], [ %294, %293 ], [ %296, %295 ], !dbg !71
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i34 = icmp eq i32 %297, 0, !dbg !71
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i37 = icmp eq i32 %298, 0, !dbg !71
  br i1 %.not.i34, label %304, label %299, !dbg !71

299:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %302, label %300, !dbg !71

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !71
  br label %__nv_sqrtf.exit38, !dbg !71

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !71
  br label %__nv_sqrtf.exit38, !dbg !71

304:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %307, label %305, !dbg !71

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !71
  br label %__nv_sqrtf.exit38, !dbg !71

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !71
  br label %__nv_sqrtf.exit38, !dbg !71

__nv_sqrtf.exit38:                                ; preds = %300, %302, %305, %307
  %.0.i36 = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !71
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i39 = icmp eq i32 %309, 0, !dbg !71
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i42 = icmp eq i32 %310, 0, !dbg !71
  br i1 %.not.i39, label %316, label %311, !dbg !71

311:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %314, label %312, !dbg !71

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !71
  br label %__nv_sqrtf.exit43, !dbg !71

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !71
  br label %__nv_sqrtf.exit43, !dbg !71

316:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %319, label %317, !dbg !71

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !71
  br label %__nv_sqrtf.exit43, !dbg !71

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !71
  br label %__nv_sqrtf.exit43, !dbg !71

__nv_sqrtf.exit43:                                ; preds = %312, %314, %317, %319
  %.0.i41 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !71
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !72
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !72
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !72
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #3, !dbg !72
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #3, !dbg !72
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #3, !dbg !72
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #3, !dbg !72
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #3, !dbg !72
  %329 = fadd float %118, 0x3F50624DE0000000, !dbg !73
  %330 = fadd float %120, 0x3F50624DE0000000, !dbg !73
  %331 = fadd float %122, 0x3F50624DE0000000, !dbg !73
  %332 = fadd float %124, 0x3F50624DE0000000, !dbg !73
  %333 = fadd float %126, 0x3F50624DE0000000, !dbg !73
  %334 = fadd float %128, 0x3F50624DE0000000, !dbg !73
  %335 = fadd float %130, 0x3F50624DE0000000, !dbg !73
  %336 = fadd float %132, 0x3F50624DE0000000, !dbg !73
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i44 = icmp eq i32 %337, 0, !dbg !74
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i47 = icmp eq i32 %338, 0, !dbg !74
  br i1 %.not.i44, label %344, label %339, !dbg !74

339:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %342, label %340, !dbg !74

340:                                              ; preds = %339
  %341 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %329) #3, !dbg !74
  br label %__nv_sqrtf.exit48, !dbg !74

342:                                              ; preds = %339
  %343 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %329) #3, !dbg !74
  br label %__nv_sqrtf.exit48, !dbg !74

344:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %347, label %345, !dbg !74

345:                                              ; preds = %344
  %346 = tail call float @llvm.nvvm.sqrt.rn.f(float %329) #3, !dbg !74
  br label %__nv_sqrtf.exit48, !dbg !74

347:                                              ; preds = %344
  %348 = tail call float @llvm.nvvm.sqrt.approx.f(float %329) #3, !dbg !74
  br label %__nv_sqrtf.exit48, !dbg !74

__nv_sqrtf.exit48:                                ; preds = %340, %342, %345, %347
  %.0.i46 = phi float [ %341, %340 ], [ %343, %342 ], [ %346, %345 ], [ %348, %347 ], !dbg !74
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i49 = icmp eq i32 %349, 0, !dbg !74
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i52 = icmp eq i32 %350, 0, !dbg !74
  br i1 %.not.i49, label %356, label %351, !dbg !74

351:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %354, label %352, !dbg !74

352:                                              ; preds = %351
  %353 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %330) #3, !dbg !74
  br label %__nv_sqrtf.exit53, !dbg !74

354:                                              ; preds = %351
  %355 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %330) #3, !dbg !74
  br label %__nv_sqrtf.exit53, !dbg !74

356:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %359, label %357, !dbg !74

357:                                              ; preds = %356
  %358 = tail call float @llvm.nvvm.sqrt.rn.f(float %330) #3, !dbg !74
  br label %__nv_sqrtf.exit53, !dbg !74

359:                                              ; preds = %356
  %360 = tail call float @llvm.nvvm.sqrt.approx.f(float %330) #3, !dbg !74
  br label %__nv_sqrtf.exit53, !dbg !74

__nv_sqrtf.exit53:                                ; preds = %352, %354, %357, %359
  %.0.i51 = phi float [ %353, %352 ], [ %355, %354 ], [ %358, %357 ], [ %360, %359 ], !dbg !74
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i54 = icmp eq i32 %361, 0, !dbg !74
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i57 = icmp eq i32 %362, 0, !dbg !74
  br i1 %.not.i54, label %368, label %363, !dbg !74

363:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %366, label %364, !dbg !74

364:                                              ; preds = %363
  %365 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #3, !dbg !74
  br label %__nv_sqrtf.exit58, !dbg !74

366:                                              ; preds = %363
  %367 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #3, !dbg !74
  br label %__nv_sqrtf.exit58, !dbg !74

368:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %371, label %369, !dbg !74

369:                                              ; preds = %368
  %370 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #3, !dbg !74
  br label %__nv_sqrtf.exit58, !dbg !74

371:                                              ; preds = %368
  %372 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #3, !dbg !74
  br label %__nv_sqrtf.exit58, !dbg !74

__nv_sqrtf.exit58:                                ; preds = %364, %366, %369, %371
  %.0.i56 = phi float [ %365, %364 ], [ %367, %366 ], [ %370, %369 ], [ %372, %371 ], !dbg !74
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i59 = icmp eq i32 %373, 0, !dbg !74
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i62 = icmp eq i32 %374, 0, !dbg !74
  br i1 %.not.i59, label %380, label %375, !dbg !74

375:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %378, label %376, !dbg !74

376:                                              ; preds = %375
  %377 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #3, !dbg !74
  br label %__nv_sqrtf.exit63, !dbg !74

378:                                              ; preds = %375
  %379 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #3, !dbg !74
  br label %__nv_sqrtf.exit63, !dbg !74

380:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %383, label %381, !dbg !74

381:                                              ; preds = %380
  %382 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #3, !dbg !74
  br label %__nv_sqrtf.exit63, !dbg !74

383:                                              ; preds = %380
  %384 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #3, !dbg !74
  br label %__nv_sqrtf.exit63, !dbg !74

__nv_sqrtf.exit63:                                ; preds = %376, %378, %381, %383
  %.0.i61 = phi float [ %377, %376 ], [ %379, %378 ], [ %382, %381 ], [ %384, %383 ], !dbg !74
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i64 = icmp eq i32 %385, 0, !dbg !74
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i67 = icmp eq i32 %386, 0, !dbg !74
  br i1 %.not.i64, label %392, label %387, !dbg !74

387:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %390, label %388, !dbg !74

388:                                              ; preds = %387
  %389 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #3, !dbg !74
  br label %__nv_sqrtf.exit68, !dbg !74

390:                                              ; preds = %387
  %391 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #3, !dbg !74
  br label %__nv_sqrtf.exit68, !dbg !74

392:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %395, label %393, !dbg !74

393:                                              ; preds = %392
  %394 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #3, !dbg !74
  br label %__nv_sqrtf.exit68, !dbg !74

395:                                              ; preds = %392
  %396 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #3, !dbg !74
  br label %__nv_sqrtf.exit68, !dbg !74

__nv_sqrtf.exit68:                                ; preds = %388, %390, %393, %395
  %.0.i66 = phi float [ %389, %388 ], [ %391, %390 ], [ %394, %393 ], [ %396, %395 ], !dbg !74
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i69 = icmp eq i32 %397, 0, !dbg !74
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i72 = icmp eq i32 %398, 0, !dbg !74
  br i1 %.not.i69, label %404, label %399, !dbg !74

399:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %402, label %400, !dbg !74

400:                                              ; preds = %399
  %401 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %334) #3, !dbg !74
  br label %__nv_sqrtf.exit73, !dbg !74

402:                                              ; preds = %399
  %403 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %334) #3, !dbg !74
  br label %__nv_sqrtf.exit73, !dbg !74

404:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %407, label %405, !dbg !74

405:                                              ; preds = %404
  %406 = tail call float @llvm.nvvm.sqrt.rn.f(float %334) #3, !dbg !74
  br label %__nv_sqrtf.exit73, !dbg !74

407:                                              ; preds = %404
  %408 = tail call float @llvm.nvvm.sqrt.approx.f(float %334) #3, !dbg !74
  br label %__nv_sqrtf.exit73, !dbg !74

__nv_sqrtf.exit73:                                ; preds = %400, %402, %405, %407
  %.0.i71 = phi float [ %401, %400 ], [ %403, %402 ], [ %406, %405 ], [ %408, %407 ], !dbg !74
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i74 = icmp eq i32 %409, 0, !dbg !74
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i77 = icmp eq i32 %410, 0, !dbg !74
  br i1 %.not.i74, label %416, label %411, !dbg !74

411:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %414, label %412, !dbg !74

412:                                              ; preds = %411
  %413 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %335) #3, !dbg !74
  br label %__nv_sqrtf.exit78, !dbg !74

414:                                              ; preds = %411
  %415 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %335) #3, !dbg !74
  br label %__nv_sqrtf.exit78, !dbg !74

416:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %419, label %417, !dbg !74

417:                                              ; preds = %416
  %418 = tail call float @llvm.nvvm.sqrt.rn.f(float %335) #3, !dbg !74
  br label %__nv_sqrtf.exit78, !dbg !74

419:                                              ; preds = %416
  %420 = tail call float @llvm.nvvm.sqrt.approx.f(float %335) #3, !dbg !74
  br label %__nv_sqrtf.exit78, !dbg !74

__nv_sqrtf.exit78:                                ; preds = %412, %414, %417, %419
  %.0.i76 = phi float [ %413, %412 ], [ %415, %414 ], [ %418, %417 ], [ %420, %419 ], !dbg !74
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i79 = icmp eq i32 %421, 0, !dbg !74
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i82 = icmp eq i32 %422, 0, !dbg !74
  br i1 %.not.i79, label %428, label %423, !dbg !74

423:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %426, label %424, !dbg !74

424:                                              ; preds = %423
  %425 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %336) #3, !dbg !74
  br label %__nv_sqrtf.exit83, !dbg !74

426:                                              ; preds = %423
  %427 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %336) #3, !dbg !74
  br label %__nv_sqrtf.exit83, !dbg !74

428:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %431, label %429, !dbg !74

429:                                              ; preds = %428
  %430 = tail call float @llvm.nvvm.sqrt.rn.f(float %336) #3, !dbg !74
  br label %__nv_sqrtf.exit83, !dbg !74

431:                                              ; preds = %428
  %432 = tail call float @llvm.nvvm.sqrt.approx.f(float %336) #3, !dbg !74
  br label %__nv_sqrtf.exit83, !dbg !74

__nv_sqrtf.exit83:                                ; preds = %424, %426, %429, %431
  %.0.i81 = phi float [ %425, %424 ], [ %427, %426 ], [ %430, %429 ], [ %432, %431 ], !dbg !74
  %433 = shufflevector <2 x i1> %153, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !44
  %434 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !46
  %435 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !47
  %436 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !48
  %437 = icmp slt <2 x i32> %52, splat (i32 1528), !dbg !75
  %438 = shufflevector <2 x i1> %437, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !75
  %439 = icmp ult <2 x i32> %164, splat (i32 504), !dbg !49
  %440 = shufflevector <2 x i1> %439, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !49
  %441 = icmp slt <2 x i32> %52, splat (i32 1504), !dbg !76
  %442 = shufflevector <2 x i1> %441, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !76
  %443 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !55
  %444 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !63
  %445 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !69
  %446 = insertelement <16 x i32> poison, i32 %114, i64 0, !dbg !37
  %447 = insertelement <16 x i32> %446, i32 %113, i64 1, !dbg !37
  %448 = insertelement <16 x i32> %447, i32 %112, i64 2, !dbg !37
  %449 = insertelement <16 x i32> %448, i32 %111, i64 3, !dbg !37
  %450 = insertelement <16 x i32> %449, i32 %110, i64 4, !dbg !37
  %451 = insertelement <16 x i32> %450, i32 %109, i64 5, !dbg !37
  %452 = insertelement <16 x i32> %451, i32 %108, i64 6, !dbg !37
  %453 = insertelement <16 x i32> %452, i32 %107, i64 7, !dbg !37
  %454 = insertelement <16 x i32> %453, i32 %66, i64 8, !dbg !37
  %455 = insertelement <16 x i32> %454, i32 %65, i64 9, !dbg !37
  %456 = insertelement <16 x i32> %455, i32 %64, i64 10, !dbg !37
  %457 = insertelement <16 x i32> %456, i32 %63, i64 11, !dbg !37
  %458 = insertelement <16 x i32> %457, i32 %62, i64 12, !dbg !37
  %459 = insertelement <16 x i32> %458, i32 %61, i64 13, !dbg !37
  %460 = insertelement <16 x i32> %459, i32 %60, i64 14, !dbg !37
  %461 = insertelement <16 x i32> %460, i32 %59, i64 15, !dbg !37
  %462 = bitcast <16 x i32> %461 to <16 x float>, !dbg !37
  %463 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !46
  %464 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !47
  %465 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !48
  %466 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !55
  %467 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !63
  %468 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !69
  %469 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !46
  %470 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !47
  %471 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !48
  %472 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !55
  %473 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !63
  %474 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !69
  %475 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !46
  %476 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !47
  %477 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !48
  %478 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !55
  %479 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !63
  %480 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !69
  %481 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !46
  %482 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !47
  %483 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !48
  %484 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !55
  %485 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !63
  %486 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !69
  %487 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !46
  %488 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !47
  %489 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !48
  %490 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !55
  %491 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !63
  %492 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !69
  %493 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !46
  %494 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !47
  %495 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !48
  %496 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !55
  %497 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !63
  %498 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !69
  %499 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !46
  %500 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !47
  %501 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !48
  %502 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !55
  %503 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !63
  %504 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !69
  %505 = insertelement <16 x i32> poison, i32 %142, i64 0, !dbg !41
  %506 = insertelement <16 x i32> %505, i32 %141, i64 1, !dbg !41
  %507 = insertelement <16 x i32> %506, i32 %140, i64 2, !dbg !41
  %508 = insertelement <16 x i32> %507, i32 %139, i64 3, !dbg !41
  %509 = insertelement <16 x i32> %508, i32 %138, i64 4, !dbg !41
  %510 = insertelement <16 x i32> %509, i32 %137, i64 5, !dbg !41
  %511 = insertelement <16 x i32> %510, i32 %136, i64 6, !dbg !41
  %512 = insertelement <16 x i32> %511, i32 %135, i64 7, !dbg !41
  %513 = insertelement <16 x i32> %512, i32 %94, i64 8, !dbg !41
  %514 = insertelement <16 x i32> %513, i32 %93, i64 9, !dbg !41
  %515 = insertelement <16 x i32> %514, i32 %92, i64 10, !dbg !41
  %516 = insertelement <16 x i32> %515, i32 %91, i64 11, !dbg !41
  %517 = insertelement <16 x i32> %516, i32 %90, i64 12, !dbg !41
  %518 = insertelement <16 x i32> %517, i32 %89, i64 13, !dbg !41
  %519 = insertelement <16 x i32> %518, i32 %88, i64 14, !dbg !41
  %520 = insertelement <16 x i32> %519, i32 %87, i64 15, !dbg !41
  %521 = bitcast <16 x i32> %520 to <16 x float>, !dbg !41
  %522 = insertelement <16 x i32> poison, i32 %152, i64 0, !dbg !43
  %523 = insertelement <16 x i32> %522, i32 %151, i64 1, !dbg !43
  %524 = insertelement <16 x i32> %523, i32 %150, i64 2, !dbg !43
  %525 = insertelement <16 x i32> %524, i32 %149, i64 3, !dbg !43
  %526 = insertelement <16 x i32> %525, i32 %148, i64 4, !dbg !43
  %527 = insertelement <16 x i32> %526, i32 %147, i64 5, !dbg !43
  %528 = insertelement <16 x i32> %527, i32 %146, i64 6, !dbg !43
  %529 = insertelement <16 x i32> %528, i32 %145, i64 7, !dbg !43
  %530 = insertelement <16 x i32> %529, i32 %104, i64 8, !dbg !43
  %531 = insertelement <16 x i32> %530, i32 %103, i64 9, !dbg !43
  %532 = insertelement <16 x i32> %531, i32 %102, i64 10, !dbg !43
  %533 = insertelement <16 x i32> %532, i32 %101, i64 11, !dbg !43
  %534 = insertelement <16 x i32> %533, i32 %100, i64 12, !dbg !43
  %535 = insertelement <16 x i32> %534, i32 %99, i64 13, !dbg !43
  %536 = insertelement <16 x i32> %535, i32 %98, i64 14, !dbg !43
  %537 = insertelement <16 x i32> %536, i32 %97, i64 15, !dbg !43
  %538 = bitcast <16 x i32> %537 to <16 x float>, !dbg !43
  %539 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i46) #3, !dbg !77
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i51) #3, !dbg !77
  %541 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i56) #3, !dbg !77
  %542 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i61) #3, !dbg !77
  %543 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i66) #3, !dbg !77
  %544 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i71) #3, !dbg !77
  %545 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i76) #3, !dbg !77
  %546 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i81) #3, !dbg !77
  %547 = insertelement <8 x i32> poison, i32 %434, i64 0, !dbg !46
  %548 = insertelement <8 x i32> %547, i32 %463, i64 1, !dbg !46
  %549 = insertelement <8 x i32> %548, i32 %469, i64 2, !dbg !46
  %550 = insertelement <8 x i32> %549, i32 %475, i64 3, !dbg !46
  %551 = insertelement <8 x i32> %550, i32 %481, i64 4, !dbg !46
  %552 = insertelement <8 x i32> %551, i32 %487, i64 5, !dbg !46
  %553 = insertelement <8 x i32> %552, i32 %493, i64 6, !dbg !46
  %554 = insertelement <8 x i32> %553, i32 %499, i64 7, !dbg !46
  %555 = bitcast <8 x i32> %554 to <8 x float>, !dbg !46
  %556 = insertelement <8 x i32> poison, i32 %435, i64 0, !dbg !47
  %557 = insertelement <8 x i32> %556, i32 %464, i64 1, !dbg !47
  %558 = insertelement <8 x i32> %557, i32 %470, i64 2, !dbg !47
  %559 = insertelement <8 x i32> %558, i32 %476, i64 3, !dbg !47
  %560 = insertelement <8 x i32> %559, i32 %482, i64 4, !dbg !47
  %561 = insertelement <8 x i32> %560, i32 %488, i64 5, !dbg !47
  %562 = insertelement <8 x i32> %561, i32 %494, i64 6, !dbg !47
  %563 = insertelement <8 x i32> %562, i32 %500, i64 7, !dbg !47
  %564 = bitcast <8 x i32> %563 to <8 x float>, !dbg !47
  %565 = fadd <8 x float> %555, %564, !dbg !78
  %566 = insertelement <8 x i32> poison, i32 %436, i64 0, !dbg !48
  %567 = insertelement <8 x i32> %566, i32 %465, i64 1, !dbg !48
  %568 = insertelement <8 x i32> %567, i32 %471, i64 2, !dbg !48
  %569 = insertelement <8 x i32> %568, i32 %477, i64 3, !dbg !48
  %570 = insertelement <8 x i32> %569, i32 %483, i64 4, !dbg !48
  %571 = insertelement <8 x i32> %570, i32 %489, i64 5, !dbg !48
  %572 = insertelement <8 x i32> %571, i32 %495, i64 6, !dbg !48
  %573 = insertelement <8 x i32> %572, i32 %501, i64 7, !dbg !48
  %574 = bitcast <8 x i32> %573 to <8 x float>, !dbg !48
  %575 = fadd <8 x float> %565, %574, !dbg !79
  %576 = insertelement <8 x i32> poison, i32 %443, i64 0, !dbg !80
  %577 = insertelement <8 x i32> %576, i32 %466, i64 1, !dbg !80
  %578 = insertelement <8 x i32> %577, i32 %472, i64 2, !dbg !80
  %579 = insertelement <8 x i32> %578, i32 %478, i64 3, !dbg !80
  %580 = insertelement <8 x i32> %579, i32 %484, i64 4, !dbg !80
  %581 = insertelement <8 x i32> %580, i32 %490, i64 5, !dbg !80
  %582 = insertelement <8 x i32> %581, i32 %496, i64 6, !dbg !80
  %583 = insertelement <8 x i32> %582, i32 %502, i64 7, !dbg !80
  %584 = insertelement <8 x i32> poison, i32 %444, i64 0, !dbg !80
  %585 = insertelement <8 x i32> %584, i32 %467, i64 1, !dbg !80
  %586 = insertelement <8 x i32> %585, i32 %473, i64 2, !dbg !80
  %587 = insertelement <8 x i32> %586, i32 %479, i64 3, !dbg !80
  %588 = insertelement <8 x i32> %587, i32 %485, i64 4, !dbg !80
  %589 = insertelement <8 x i32> %588, i32 %491, i64 5, !dbg !80
  %590 = insertelement <8 x i32> %589, i32 %497, i64 6, !dbg !80
  %591 = insertelement <8 x i32> %590, i32 %503, i64 7, !dbg !80
  %592 = select <8 x i1> %442, <8 x i32> %583, <8 x i32> %591, !dbg !80
  %593 = bitcast <8 x i32> %592 to <8 x float>, !dbg !80
  %594 = select <8 x i1> %440, <8 x float> %593, <8 x float> zeroinitializer, !dbg !81
  %595 = insertelement <8 x i32> poison, i32 %445, i64 0, !dbg !69
  %596 = insertelement <8 x i32> %595, i32 %468, i64 1, !dbg !69
  %597 = insertelement <8 x i32> %596, i32 %474, i64 2, !dbg !69
  %598 = insertelement <8 x i32> %597, i32 %480, i64 3, !dbg !69
  %599 = insertelement <8 x i32> %598, i32 %486, i64 4, !dbg !69
  %600 = insertelement <8 x i32> %599, i32 %492, i64 5, !dbg !69
  %601 = insertelement <8 x i32> %600, i32 %498, i64 6, !dbg !69
  %602 = insertelement <8 x i32> %601, i32 %504, i64 7, !dbg !69
  %603 = bitcast <8 x i32> %602 to <8 x float>, !dbg !69
  %604 = select <8 x i1> %438, <8 x float> %594, <8 x float> %603, !dbg !82
  %605 = select <8 x i1> %433, <8 x float> %575, <8 x float> %604, !dbg !83
  %606 = shufflevector <8 x float> %605, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !83
  %607 = fsub <16 x float> %606, %462, !dbg !84
  %608 = insertelement <16 x float> poison, float %546, i64 0, !dbg !85
  %609 = insertelement <16 x float> %608, float %545, i64 1, !dbg !85
  %610 = insertelement <16 x float> %609, float %544, i64 2, !dbg !85
  %611 = insertelement <16 x float> %610, float %543, i64 3, !dbg !85
  %612 = insertelement <16 x float> %611, float %542, i64 4, !dbg !85
  %613 = insertelement <16 x float> %612, float %541, i64 5, !dbg !85
  %614 = insertelement <16 x float> %613, float %540, i64 6, !dbg !85
  %615 = insertelement <16 x float> %614, float %539, i64 7, !dbg !85
  %616 = insertelement <16 x float> %615, float %328, i64 8, !dbg !85
  %617 = insertelement <16 x float> %616, float %327, i64 9, !dbg !85
  %618 = insertelement <16 x float> %617, float %326, i64 10, !dbg !85
  %619 = insertelement <16 x float> %618, float %325, i64 11, !dbg !85
  %620 = insertelement <16 x float> %619, float %324, i64 12, !dbg !85
  %621 = insertelement <16 x float> %620, float %323, i64 13, !dbg !85
  %622 = insertelement <16 x float> %621, float %322, i64 14, !dbg !85
  %623 = insertelement <16 x float> %622, float %321, i64 15, !dbg !85
  %624 = fmul <16 x float> %607, %623, !dbg !85
  %625 = fmul <16 x float> %624, %521, !dbg !86
  %626 = fadd <16 x float> %625, %538, !dbg !87
  %627 = fcmp olt <16 x float> %626, zeroinitializer, !dbg !88
  %628 = extractelement <16 x i1> %627, i64 8, !dbg !92
  %629 = extractelement <16 x i1> %627, i64 9, !dbg !92
  %630 = extractelement <16 x i1> %627, i64 10, !dbg !92
  %631 = extractelement <16 x i1> %627, i64 11, !dbg !92
  %632 = extractelement <16 x i1> %627, i64 12, !dbg !92
  %633 = extractelement <16 x i1> %627, i64 13, !dbg !92
  %634 = extractelement <16 x i1> %627, i64 14, !dbg !92
  %635 = extractelement <16 x i1> %627, i64 15, !dbg !92
  %636 = extractelement <16 x i1> %627, i64 7, !dbg !94
  %637 = extractelement <16 x i1> %627, i64 6, !dbg !94
  %638 = extractelement <16 x i1> %627, i64 5, !dbg !94
  %639 = extractelement <16 x i1> %627, i64 4, !dbg !94
  %640 = extractelement <16 x i1> %627, i64 3, !dbg !94
  %641 = extractelement <16 x i1> %627, i64 2, !dbg !94
  %642 = extractelement <16 x i1> %627, i64 1, !dbg !94
  %643 = extractelement <16 x i1> %627, i64 0, !dbg !94
  %644 = sext i32 %22 to i64, !dbg !95
  %645 = getelementptr float, ptr addrspace(1) %12, i64 %644, !dbg !95
  %646 = sext i32 %23 to i64, !dbg !95
  %647 = getelementptr float, ptr addrspace(1) %12, i64 %646, !dbg !95
  %bc = bitcast <8 x float> %605 to <8 x i32>, !dbg !96
  %648 = extractelement <8 x i32> %bc, i64 7, !dbg !96
  %bc84 = bitcast <8 x float> %605 to <8 x i32>, !dbg !96
  %649 = extractelement <8 x i32> %bc84, i64 6, !dbg !96
  %bc85 = bitcast <8 x float> %605 to <8 x i32>, !dbg !96
  %650 = extractelement <8 x i32> %bc85, i64 5, !dbg !96
  %bc86 = bitcast <8 x float> %605 to <8 x i32>, !dbg !96
  %651 = extractelement <8 x i32> %bc86, i64 4, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %648, i32 %649, i32 %650, i32 %651, ptr addrspace(1) %645, i1 %24) #3, !dbg !96
  %bc87 = bitcast <8 x float> %605 to <8 x i32>, !dbg !96
  %652 = extractelement <8 x i32> %bc87, i64 3, !dbg !96
  %bc88 = bitcast <8 x float> %605 to <8 x i32>, !dbg !96
  %653 = extractelement <8 x i32> %bc88, i64 2, !dbg !96
  %bc89 = bitcast <8 x float> %605 to <8 x i32>, !dbg !96
  %654 = extractelement <8 x i32> %bc89, i64 1, !dbg !96
  %bc90 = bitcast <8 x float> %605 to <8 x i32>, !dbg !96
  %655 = extractelement <8 x i32> %bc90, i64 0, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %652, i32 %653, i32 %654, i32 %655, ptr addrspace(1) %647, i1 %25) #3, !dbg !96
  %656 = getelementptr float, ptr addrspace(1) %13, i64 %644, !dbg !97
  %657 = getelementptr float, ptr addrspace(1) %13, i64 %646, !dbg !97
  %bc91 = bitcast <16 x float> %626 to <16 x i32>, !dbg !98
  %658 = extractelement <16 x i32> %bc91, i64 15, !dbg !98
  %659 = select i1 %635, i32 0, i32 %658, !dbg !92
  %bc92 = bitcast <16 x float> %626 to <16 x i32>, !dbg !98
  %660 = extractelement <16 x i32> %bc92, i64 14, !dbg !98
  %661 = select i1 %634, i32 0, i32 %660, !dbg !92
  %bc93 = bitcast <16 x float> %626 to <16 x i32>, !dbg !98
  %662 = extractelement <16 x i32> %bc93, i64 13, !dbg !98
  %663 = select i1 %633, i32 0, i32 %662, !dbg !92
  %bc94 = bitcast <16 x float> %626 to <16 x i32>, !dbg !98
  %664 = extractelement <16 x i32> %bc94, i64 12, !dbg !98
  %665 = select i1 %632, i32 0, i32 %664, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %659, i32 %661, i32 %663, i32 %665, ptr addrspace(1) %656, i1 %24) #3, !dbg !98
  %bc95 = bitcast <16 x float> %626 to <16 x i32>, !dbg !98
  %666 = extractelement <16 x i32> %bc95, i64 11, !dbg !98
  %667 = select i1 %631, i32 0, i32 %666, !dbg !92
  %bc96 = bitcast <16 x float> %626 to <16 x i32>, !dbg !98
  %668 = extractelement <16 x i32> %bc96, i64 10, !dbg !98
  %669 = select i1 %630, i32 0, i32 %668, !dbg !92
  %bc97 = bitcast <16 x float> %626 to <16 x i32>, !dbg !98
  %670 = extractelement <16 x i32> %bc97, i64 9, !dbg !98
  %671 = select i1 %629, i32 0, i32 %670, !dbg !92
  %bc98 = bitcast <16 x float> %626 to <16 x i32>, !dbg !98
  %672 = extractelement <16 x i32> %bc98, i64 8, !dbg !98
  %673 = select i1 %628, i32 0, i32 %672, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %667, i32 %669, i32 %671, i32 %673, ptr addrspace(1) %657, i1 %25) #3, !dbg !98
  %674 = getelementptr float, ptr addrspace(1) %14, i64 %644, !dbg !99
  %675 = getelementptr float, ptr addrspace(1) %14, i64 %646, !dbg !99
  %bc99 = bitcast <16 x float> %626 to <16 x i32>, !dbg !100
  %676 = extractelement <16 x i32> %bc99, i64 7, !dbg !100
  %677 = select i1 %636, i32 0, i32 %676, !dbg !94
  %bc100 = bitcast <16 x float> %626 to <16 x i32>, !dbg !100
  %678 = extractelement <16 x i32> %bc100, i64 6, !dbg !100
  %679 = select i1 %637, i32 0, i32 %678, !dbg !94
  %bc101 = bitcast <16 x float> %626 to <16 x i32>, !dbg !100
  %680 = extractelement <16 x i32> %bc101, i64 5, !dbg !100
  %681 = select i1 %638, i32 0, i32 %680, !dbg !94
  %bc102 = bitcast <16 x float> %626 to <16 x i32>, !dbg !100
  %682 = extractelement <16 x i32> %bc102, i64 4, !dbg !100
  %683 = select i1 %639, i32 0, i32 %682, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %677, i32 %679, i32 %681, i32 %683, ptr addrspace(1) %674, i1 %24) #3, !dbg !100
  %bc103 = bitcast <16 x float> %626 to <16 x i32>, !dbg !100
  %684 = extractelement <16 x i32> %bc103, i64 3, !dbg !100
  %685 = select i1 %640, i32 0, i32 %684, !dbg !94
  %bc104 = bitcast <16 x float> %626 to <16 x i32>, !dbg !100
  %686 = extractelement <16 x i32> %bc104, i64 2, !dbg !100
  %687 = select i1 %641, i32 0, i32 %686, !dbg !94
  %bc105 = bitcast <16 x float> %626 to <16 x i32>, !dbg !100
  %688 = extractelement <16 x i32> %bc105, i64 1, !dbg !100
  %689 = select i1 %642, i32 0, i32 %688, !dbg !94
  %bc106 = bitcast <16 x float> %626 to <16 x i32>, !dbg !100
  %690 = extractelement <16 x i32> %bc106, i64 0, !dbg !100
  %691 = select i1 %643, i32 0, i32 %690, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %685, i32 %687, i32 %689, i32 %691, ptr addrspace(1) %675, i1 %25) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp3oz5bdfnkm4qy7p3ggq7cu6bqcxzko67y2c2hueyeen3fxoleh.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 41, column: 35, scope: !7)
!18 = !DILocation(line: 41, column: 51, scope: !7)
!19 = !DILocation(line: 41, column: 45, scope: !7)
!20 = !DILocation(line: 41, column: 30, scope: !7)
!21 = !DILocation(line: 42, column: 51, scope: !7)
!22 = !DILocation(line: 42, column: 45, scope: !7)
!23 = !DILocation(line: 42, column: 30, scope: !7)
!24 = !DILocation(line: 44, column: 30, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 27, scope: !7)
!27 = !DILocation(line: 63, column: 40, scope: !7)
!28 = !DILocation(line: 28, column: 31, scope: !7)
!29 = !DILocation(line: 28, column: 36, scope: !7)
!30 = !DILocation(line: 29, column: 31, scope: !7)
!31 = !DILocation(line: 29, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 31, scope: !7)
!33 = !DILocation(line: 30, column: 36, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 36, scope: !7)
!36 = !DILocation(line: 32, column: 31, scope: !7)
!37 = !DILocation(line: 32, column: 36, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 32, scope: !7)
!41 = !DILocation(line: 34, column: 37, scope: !7)
!42 = !DILocation(line: 35, column: 32, scope: !7)
!43 = !DILocation(line: 35, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 41, column: 63, scope: !7)
!46 = !DILocation(line: 41, column: 56, scope: !7)
!47 = !DILocation(line: 42, column: 56, scope: !7)
!48 = !DILocation(line: 44, column: 56, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 62, column: 20, scope: !7)
!51 = !DILocation(line: 63, column: 36, scope: !7)
!52 = !DILocation(line: 63, column: 56, scope: !7)
!53 = !DILocation(line: 63, column: 31, scope: !7)
!54 = !DILocation(line: 63, column: 75, scope: !7)
!55 = !DILocation(line: 63, column: 67, scope: !7)
!56 = !DILocation(line: 67, column: 20, scope: !7)
!57 = !DILocation(line: 68, column: 39, scope: !7)
!58 = !DILocation(line: 68, column: 48, scope: !7)
!59 = !DILocation(line: 68, column: 44, scope: !7)
!60 = !DILocation(line: 68, column: 75, scope: !7)
!61 = !DILocation(line: 68, column: 31, scope: !7)
!62 = !DILocation(line: 68, column: 94, scope: !7)
!63 = !DILocation(line: 68, column: 86, scope: !7)
!64 = !DILocation(line: 72, column: 21, scope: !7)
!65 = !DILocation(line: 76, column: 44, scope: !7)
!66 = !DILocation(line: 76, column: 75, scope: !7)
!67 = !DILocation(line: 76, column: 31, scope: !7)
!68 = !DILocation(line: 76, column: 94, scope: !7)
!69 = !DILocation(line: 76, column: 86, scope: !7)
!70 = !DILocation(line: 83, column: 20, scope: !7)
!71 = !DILocation(line: 84, column: 27, scope: !7)
!72 = !DILocation(line: 86, column: 20, scope: !7)
!73 = !DILocation(line: 95, column: 20, scope: !7)
!74 = !DILocation(line: 96, column: 27, scope: !7)
!75 = !DILocation(line: 55, column: 20, scope: !7)
!76 = !DILocation(line: 61, column: 20, scope: !7)
!77 = !DILocation(line: 97, column: 20, scope: !7)
!78 = !DILocation(line: 43, column: 18, scope: !7)
!79 = !DILocation(line: 45, column: 18, scope: !7)
!80 = !DILocation(line: 69, column: 35, scope: !7)
!81 = !DILocation(line: 71, column: 35, scope: !7)
!82 = !DILocation(line: 77, column: 35, scope: !7)
!83 = !DILocation(line: 0, scope: !7)
!84 = !DILocation(line: 94, column: 20, scope: !7)
!85 = !DILocation(line: 99, column: 20, scope: !7)
!86 = !DILocation(line: 100, column: 20, scope: !7)
!87 = !DILocation(line: 101, column: 20, scope: !7)
!88 = !DILocation(line: 118, column: 15, scope: !89, inlinedAt: !91)
!89 = distinct !DILexicalBlockFile(scope: !7, file: !90, discriminator: 0)
!90 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!91 = !DILocation(line: 102, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !89, inlinedAt: !93)
!93 = !DILocation(line: 93, column: 42, scope: !7)
!94 = !DILocation(line: 121, column: 29, scope: !89, inlinedAt: !91)
!95 = !DILocation(line: 103, column: 25, scope: !7)
!96 = !DILocation(line: 103, column: 37, scope: !7)
!97 = !DILocation(line: 104, column: 25, scope: !7)
!98 = !DILocation(line: 104, column: 37, scope: !7)
!99 = !DILocation(line: 105, column: 25, scope: !7)
!100 = !DILocation(line: 105, column: 37, scope: !7)
!101 = !DILocation(line: 105, column: 4, scope: !7)
