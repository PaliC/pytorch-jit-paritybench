; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = and i32 %11, 7, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 8, !dbg !14
  %17 = shl i32 %11, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen, 2, !dbg !16
  %20 = mul i32 %19, 2, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = shl nsw i32 %.decomposed, 4, !dbg !18
  %22 = or disjoint i32 %21, %18, !dbg !19
  %23 = shl i32 %19, 6, !dbg !20
  %24 = add i32 %22, %23, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !23
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !23
  %30 = bitcast i32 %28 to float, !dbg !23
  %31 = bitcast i32 %29 to float, !dbg !23
  %32 = sext i32 %.decomposed to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #5, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #5, !dbg !27
  %39 = fadd float %30, %31, !dbg !28
  %40 = select i1 %16, float %39, float 0.000000e+00, !dbg !28
  %41 = bitcast float %40 to i32, !dbg !33
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !33
  %43 = bitcast i32 %42 to float, !dbg !33
  %44 = fadd float %40, %43, !dbg !28
  %45 = bitcast float %44 to i32, !dbg !33
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !33
  %47 = bitcast i32 %46 to float, !dbg !33
  %48 = fadd float %44, %47, !dbg !28
  %49 = bitcast float %48 to i32, !dbg !33
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !33
  %51 = bitcast i32 %50 to float, !dbg !33
  %52 = fadd float %48, %51, !dbg !28
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 1.600000e+01) #5, !dbg !34
  %54 = fsub float %30, %53, !dbg !35
  %55 = fsub float %31, %53, !dbg !35
  %56 = fmul float %54, %54, !dbg !36
  %57 = fmul float %55, %55, !dbg !36
  %58 = fadd float %56, %57, !dbg !37
  %59 = select i1 %16, float %58, float 0.000000e+00, !dbg !37
  %60 = bitcast float %59 to i32, !dbg !39
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !39
  %62 = bitcast i32 %61 to float, !dbg !39
  %63 = fadd float %59, %62, !dbg !37
  %64 = bitcast float %63 to i32, !dbg !39
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !39
  %66 = bitcast i32 %65 to float, !dbg !39
  %67 = fadd float %63, %66, !dbg !37
  %68 = bitcast float %67 to i32, !dbg !39
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !39
  %70 = bitcast i32 %69 to float, !dbg !39
  %71 = fadd float %67, %70, !dbg !37
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !40
  %73 = bitcast float %71 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !40
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !40
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.600000e+01) #5, !dbg !41
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 1.600000e+01) #5, !dbg !41
  %78 = fadd float %76, 0x3EE4F8B580000000, !dbg !42
  %79 = fadd float %77, 0x3EE4F8B580000000, !dbg !42
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %80, 0, !dbg !40
  br i1 %.not.i, label %83, label %81, !dbg !40

81:                                               ; preds = %8
  %82 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %78), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

83:                                               ; preds = %8
  %84 = tail call float @llvm.nvvm.rsqrt.approx.f(float %78), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %81, %83
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], !dbg !40
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i4 = icmp eq i32 %86, 0, !dbg !40
  br i1 %.not.i4, label %89, label %87, !dbg !40

87:                                               ; preds = %__nv_rsqrtf.exit
  %88 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %79), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

89:                                               ; preds = %__nv_rsqrtf.exit
  %90 = tail call float @llvm.nvvm.rsqrt.approx.f(float %79), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

__nv_rsqrtf.exit6:                                ; preds = %87, %89
  %.0.i5 = phi float [ %88, %87 ], [ %90, %89 ], !dbg !40
  %91 = bitcast i32 %38 to float, !dbg !27
  %92 = bitcast i32 %35 to float, !dbg !25
  %93 = or disjoint i32 %10, %14, !dbg !13
  %94 = icmp slt i32 %93, 8, !dbg !14
  %95 = fmul float %54, %.0.i5, !dbg !43
  %96 = fmul float %55, %.0.i5, !dbg !43
  %97 = fmul float %95, %92, !dbg !44
  %98 = fmul float %96, %92, !dbg !44
  %99 = fadd float %97, %91, !dbg !45
  %100 = fadd float %98, %91, !dbg !45
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !46
  %102 = bitcast float %99 to i32, !dbg !47
  %103 = bitcast float %100 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %103, ptr addrspace(1) %101, i1 %16) #5, !dbg !47
  %104 = shl i32 %15, 4, !dbg !48
  %105 = or disjoint i32 %104, %18, !dbg !49
  %106 = sext i32 %105 to i64, !dbg !50
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %106, !dbg !50
  %108 = bitcast float %54 to i32, !dbg !51
  %109 = bitcast float %55 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %108, i32 %109, ptr addrspace(1) %107, i1 %16) #5, !dbg !51
  %110 = sext i32 %93 to i64, !dbg !52
  %111 = getelementptr float, ptr addrspace(1) %5, i64 %110, !dbg !52
  %112 = and i32 %11, 56, !dbg !53
  %113 = icmp eq i32 %112, 0, !dbg !53
  %114 = bitcast float %.0.i to i32, !dbg !53
  %115 = and i1 %113, %94, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %111, i1 %115) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz75qdz474qd7jknn4tmk5v4hgtrxkyxbekvwn7jku6h3wqfgfbi.py", directory: "inductor_cache/z7")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0", linkageName: "triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 55, scope: !7)
!21 = !DILocation(line: 33, column: 51, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 66, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 41, column: 24, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !38)
!38 = !DILocation(line: 49, column: 26, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !38)
!40 = !DILocation(line: 55, column: 28, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 60, column: 25, scope: !7)
!47 = !DILocation(line: 60, column: 53, scope: !7)
!48 = !DILocation(line: 61, column: 33, scope: !7)
!49 = !DILocation(line: 61, column: 30, scope: !7)
!50 = !DILocation(line: 61, column: 25, scope: !7)
!51 = !DILocation(line: 61, column: 45, scope: !7)
!52 = !DILocation(line: 62, column: 25, scope: !7)
!53 = !DILocation(line: 62, column: 37, scope: !7)
!54 = !DILocation(line: 62, column: 4, scope: !7)
