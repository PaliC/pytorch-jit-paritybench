; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 5120, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 1280, !dbg !15
  %16 = mul i32 %15, 1280, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = mul i32 %15, 5120, !dbg !17
  %18 = add i32 %17, %.decomposed, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %14) #3, !dbg !20
  %22 = sext i32 %.decomposed to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %14) #3, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !23
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %14) #3, !dbg !24
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !24
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !24
  %29 = bitcast i32 %27 to float, !dbg !24
  %30 = bitcast i32 %28 to float, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !25
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %14) #3, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !27
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %14) #3, !dbg !28
  %35 = add i32 %18, 1280, !dbg !29
  %36 = sext i32 %35 to i64, !dbg !30
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !30
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %14) #3, !dbg !31
  %39 = add i32 %18, 2560, !dbg !32
  %40 = sext i32 %39 to i64, !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !33
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %14) #3, !dbg !34
  %43 = add i32 %18, 3840, !dbg !35
  %44 = sext i32 %43 to i64, !dbg !36
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !36
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %14) #3, !dbg !37
  %47 = fadd float %29, 0x3EE4F8B580000000, !dbg !38
  %48 = fadd float %30, 0x3EE4F8B580000000, !dbg !38
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %49, 0, !dbg !39
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %50, 0, !dbg !39
  br i1 %.not.i, label %56, label %51, !dbg !39

51:                                               ; preds = %7
  br i1 %.not1.i, label %54, label %52, !dbg !39

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

56:                                               ; preds = %7
  br i1 %.not1.i, label %59, label %57, !dbg !39

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !39
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i8 = icmp eq i32 %61, 0, !dbg !39
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i11 = icmp eq i32 %62, 0, !dbg !39
  br i1 %.not.i8, label %68, label %63, !dbg !39

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %66, label %64, !dbg !39

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit12, !dbg !39

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit12, !dbg !39

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %71, label %69, !dbg !39

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit12, !dbg !39

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit12, !dbg !39

__nv_sqrtf.exit12:                                ; preds = %64, %66, %69, %71
  %.0.i10 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !39
  %73 = extractvalue { i32, i32 } %21, 1, !dbg !20
  %74 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %75 = extractvalue { i32, i32 } %21, 0, !dbg !20
  %76 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %77 = extractvalue { i32, i32 } %46, 1, !dbg !37
  %78 = extractvalue { i32, i32 } %46, 0, !dbg !37
  %79 = extractvalue { i32, i32 } %42, 1, !dbg !34
  %80 = extractvalue { i32, i32 } %42, 0, !dbg !34
  %81 = extractvalue { i32, i32 } %38, 1, !dbg !31
  %82 = extractvalue { i32, i32 } %38, 0, !dbg !31
  %83 = extractvalue { i32, i32 } %34, 1, !dbg !28
  %84 = extractvalue { i32, i32 } %34, 0, !dbg !28
  %85 = extractvalue { i32, i32 } %32, 1, !dbg !26
  %86 = extractvalue { i32, i32 } %32, 0, !dbg !26
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !40
  %89 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !20
  %90 = insertelement <2 x i32> %89, i32 %82, i64 1, !dbg !20
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !20
  %92 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !41
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !41
  %94 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %95 = fsub <2 x float> %91, %94, !dbg !41
  %96 = insertelement <2 x float> poison, float %87, i64 0, !dbg !42
  %97 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  %98 = fmul <2 x float> %95, %97, !dbg !42
  %99 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !43
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !43
  %101 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %102 = fmul <2 x float> %98, %101, !dbg !43
  %103 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !44
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !44
  %105 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %106 = fadd <2 x float> %102, %105, !dbg !44
  %107 = fcmp ole <2 x float> %106, zeroinitializer, !dbg !45
  %108 = select <2 x i1> %107, <2 x float> zeroinitializer, <2 x float> %106, !dbg !45
  %109 = fcmp olt <2 x float> %108, splat (float 6.000000e+00), !dbg !49
  %110 = fcmp uno <2 x float> %108, zeroinitializer, !dbg !51
  %111 = or <2 x i1> %109, %110, !dbg !52
  %112 = select <2 x i1> %111, <2 x float> %108, <2 x float> splat (float 6.000000e+00), !dbg !53
  %113 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !20
  %114 = insertelement <2 x i32> %113, i32 %81, i64 1, !dbg !20
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !20
  %116 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !41
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !41
  %118 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %119 = fsub <2 x float> %115, %118, !dbg !41
  %120 = insertelement <2 x float> poison, float %88, i64 0, !dbg !42
  %121 = shufflevector <2 x float> %120, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  %122 = fmul <2 x float> %119, %121, !dbg !42
  %123 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !43
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !43
  %125 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %126 = fmul <2 x float> %122, %125, !dbg !43
  %127 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !44
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !44
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %130 = fadd <2 x float> %126, %129, !dbg !44
  %131 = fcmp ole <2 x float> %130, zeroinitializer, !dbg !45
  %132 = select <2 x i1> %131, <2 x float> zeroinitializer, <2 x float> %130, !dbg !45
  %133 = fcmp olt <2 x float> %132, splat (float 6.000000e+00), !dbg !49
  %134 = fcmp uno <2 x float> %132, zeroinitializer, !dbg !51
  %135 = or <2 x i1> %133, %134, !dbg !52
  %136 = select <2 x i1> %135, <2 x float> %132, <2 x float> splat (float 6.000000e+00), !dbg !53
  %shift = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %137 = fadd <2 x float> %112, %shift, !dbg !54
  %138 = extractelement <2 x float> %137, i64 0, !dbg !54
  %shift13 = shufflevector <2 x float> %136, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %139 = fadd <2 x float> %136, %shift13, !dbg !54
  %140 = extractelement <2 x float> %139, i64 0, !dbg !54
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 2.000000e+00) #3, !dbg !55
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.000000e+00) #3, !dbg !55
  %143 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !34
  %144 = insertelement <2 x i32> %143, i32 %78, i64 1, !dbg !34
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !34
  %146 = fsub <2 x float> %145, %94, !dbg !56
  %147 = fmul <2 x float> %146, %97, !dbg !57
  %148 = fmul <2 x float> %147, %101, !dbg !58
  %149 = fadd <2 x float> %148, %105, !dbg !59
  %150 = fcmp ole <2 x float> %149, zeroinitializer, !dbg !60
  %151 = select <2 x i1> %150, <2 x float> zeroinitializer, <2 x float> %149, !dbg !60
  %152 = fcmp olt <2 x float> %151, splat (float 6.000000e+00), !dbg !62
  %153 = fcmp uno <2 x float> %151, zeroinitializer, !dbg !64
  %154 = or <2 x i1> %152, %153, !dbg !65
  %155 = select <2 x i1> %154, <2 x float> %151, <2 x float> splat (float 6.000000e+00), !dbg !66
  %156 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !34
  %157 = insertelement <2 x i32> %156, i32 %77, i64 1, !dbg !34
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !34
  %159 = fsub <2 x float> %158, %118, !dbg !56
  %160 = fmul <2 x float> %159, %121, !dbg !57
  %161 = fmul <2 x float> %160, %125, !dbg !58
  %162 = fadd <2 x float> %161, %129, !dbg !59
  %163 = fcmp ole <2 x float> %162, zeroinitializer, !dbg !60
  %164 = select <2 x i1> %163, <2 x float> zeroinitializer, <2 x float> %162, !dbg !60
  %165 = fcmp olt <2 x float> %164, splat (float 6.000000e+00), !dbg !62
  %166 = fcmp uno <2 x float> %164, zeroinitializer, !dbg !64
  %167 = or <2 x i1> %165, %166, !dbg !65
  %168 = select <2 x i1> %167, <2 x float> %164, <2 x float> splat (float 6.000000e+00), !dbg !66
  %shift14 = shufflevector <2 x float> %155, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !67
  %169 = fadd <2 x float> %155, %shift14, !dbg !67
  %170 = extractelement <2 x float> %169, i64 0, !dbg !67
  %shift15 = shufflevector <2 x float> %168, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !67
  %171 = fadd <2 x float> %168, %shift15, !dbg !67
  %172 = extractelement <2 x float> %171, i64 0, !dbg !67
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float 2.000000e+00) #3, !dbg !68
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float 2.000000e+00) #3, !dbg !68
  %175 = fadd float %141, %173, !dbg !69
  %176 = fadd float %142, %174, !dbg !69
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 2.000000e+00) #3, !dbg !70
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 2.000000e+00) #3, !dbg !70
  %179 = sext i32 %13 to i64, !dbg !71
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %179, !dbg !71
  %181 = bitcast float %177 to i32, !dbg !72
  %182 = bitcast float %178 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %181, i32 %182, ptr addrspace(1) %180, i1 %14) #3, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4bz3olagc5bcwkedobysufbhlts6uj34nxe7i42i3q6tnnlgk5i.py", directory: "inductor_cache/4b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 43, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 53, scope: !7)
!32 = !DILocation(line: 33, column: 43, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 53, scope: !7)
!35 = !DILocation(line: 34, column: 43, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 53, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 26, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 35, column: 18, scope: !7)
!42 = !DILocation(line: 43, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 47, column: 42, scope: !7)
!49 = !DILocation(line: 110, column: 15, scope: !46, inlinedAt: !50)
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !46, inlinedAt: !50)
!52 = !DILocation(line: 112, column: 16, scope: !46, inlinedAt: !50)
!53 = !DILocation(line: 113, column: 29, scope: !46, inlinedAt: !50)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !61)
!61 = !DILocation(line: 63, column: 42, scope: !7)
!62 = !DILocation(line: 110, column: 15, scope: !46, inlinedAt: !63)
!63 = !DILocation(line: 64, column: 42, scope: !7)
!64 = !DILocation(line: 112, column: 21, scope: !46, inlinedAt: !63)
!65 = !DILocation(line: 112, column: 16, scope: !46, inlinedAt: !63)
!66 = !DILocation(line: 113, column: 29, scope: !46, inlinedAt: !63)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 75, column: 25, scope: !7)
!72 = !DILocation(line: 75, column: 37, scope: !7)
!73 = !DILocation(line: 75, column: 4, scope: !7)
