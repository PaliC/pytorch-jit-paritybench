; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = lshr i32 %10, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %10, 7, !dbg !12
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = or disjoint i32 %9, %15, !dbg !13
  %18 = icmp slt i32 %17, 64, !dbg !14
  %19 = icmp slt i32 %16, 64, !dbg !14
  %20 = shl i32 %10, 2, !dbg !15
  %21 = and i32 %20, 60, !dbg !15
  %22 = srem i32 %17, 16, !dbg !16
  %23 = shl i32 %16, 6, !dbg !17
  %24 = or disjoint i32 %23, %21, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %32 = shl i32 %10, 5, !dbg !20
  %33 = and i32 %32, 480, !dbg !20
  %34 = or disjoint i32 %33, %14, !dbg !20
  %35 = and i32 %10, 127, !dbg !20
  %36 = lshr exact i32 %33, 1, !dbg !20
  %37 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %36, !dbg !20
  %38 = getelementptr inbounds float, ptr addrspace(3) %37, i32 %34, !dbg !20
  %39 = insertelement <1 x i32> poison, i32 %28, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %39, i1 true) #5, !dbg !20
  %40 = or disjoint i32 %34, 8, !dbg !20
  %41 = lshr i32 %40, 3, !dbg !20
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %41, !dbg !20
  %43 = getelementptr inbounds float, ptr addrspace(3) %42, i32 %40, !dbg !20
  %44 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #5, !dbg !20
  %45 = or disjoint i32 %34, 16, !dbg !20
  %46 = lshr i32 %45, 3, !dbg !20
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %46, !dbg !20
  %48 = getelementptr inbounds float, ptr addrspace(3) %47, i32 %45, !dbg !20
  %49 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #5, !dbg !20
  %50 = or disjoint i32 %34, 24, !dbg !20
  %51 = lshr i32 %50, 3, !dbg !20
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !20
  %53 = getelementptr inbounds float, ptr addrspace(3) %52, i32 %50, !dbg !20
  %54 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %55 = lshr i32 %35, 3, !dbg !20
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %55, !dbg !20
  %57 = getelementptr inbounds float, ptr addrspace(3) %56, i32 %35, !dbg !20
  %58 = load float, ptr addrspace(3) %57, align 4, !dbg !20
  %59 = or disjoint i32 %35, 128, !dbg !20
  %60 = lshr i32 %59, 3, !dbg !20
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60, !dbg !20
  %62 = getelementptr inbounds float, ptr addrspace(3) %61, i32 %59, !dbg !20
  %63 = load float, ptr addrspace(3) %62, align 4, !dbg !20
  %64 = or disjoint i32 %35, 256, !dbg !20
  %65 = lshr i32 %64, 3, !dbg !20
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !20
  %67 = getelementptr inbounds float, ptr addrspace(3) %66, i32 %64, !dbg !20
  %68 = load float, ptr addrspace(3) %67, align 4, !dbg !20
  %69 = or disjoint i32 %35, 384, !dbg !20
  %70 = lshr i32 %69, 3, !dbg !20
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !20
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %69, !dbg !20
  %73 = load float, ptr addrspace(3) %72, align 4, !dbg !20
  %74 = shl nsw i32 %22, 2, !dbg !21
  %75 = or disjoint i32 %74, 1, !dbg !22
  %76 = or disjoint i32 %74, 2, !dbg !22
  %77 = or disjoint i32 %74, 3, !dbg !22
  %78 = sext i32 %74 to i64, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !23
  %80 = sext i32 %75 to i64, !dbg !23
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !23
  %82 = sext i32 %76 to i64, !dbg !23
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !23
  %84 = sext i32 %77 to i64, !dbg !23
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !23
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %89 = bitcast i32 %88 to float, !dbg !24
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %91 = bitcast i32 %90 to float, !dbg !24
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %93 = bitcast i32 %92 to float, !dbg !24
  %94 = fadd float %58, %87, !dbg !25
  %95 = fadd float %63, %89, !dbg !25
  %96 = fadd float %68, %91, !dbg !25
  %97 = fadd float %73, %93, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %98 = fadd float %94, %95, !dbg !30
  %99 = fadd float %98, %96, !dbg !30
  %100 = fadd float %99, %97, !dbg !30
  %101 = select i1 %18, float %100, float 0.000000e+00, !dbg !30
  %102 = bitcast float %101 to i32, !dbg !26
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !26
  %104 = bitcast i32 %103 to float, !dbg !26
  %105 = fadd float %101, %104, !dbg !30
  %106 = bitcast float %105 to i32, !dbg !26
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = fadd float %105, %108, !dbg !30
  %110 = icmp samesign ult i32 %11, 8, !dbg !26
  %111 = and i32 %12, 3, !dbg !26
  %112 = shl nuw nsw i32 %15, 2, !dbg !26
  %113 = or disjoint i32 %112, %111, !dbg !26
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !26
  %115 = bitcast float %109 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %110) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %116 = icmp slt i32 %10, 32, !dbg !26
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %117, i1 %116) #5, !dbg !26
  %119 = bitcast i32 %118 to float, !dbg !26
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = fadd float %119, %121, !dbg !30
  %123 = bitcast float %122 to i32, !dbg !26
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !26
  %125 = bitcast i32 %124 to float, !dbg !26
  %126 = fadd float %122, %125, !dbg !30
  %127 = and i32 %10, 3, !dbg !26
  %128 = icmp eq i32 %127, 0, !dbg !26
  %129 = and i1 %116, %128, !dbg !26
  %130 = bitcast float %126 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %130, i1 %129) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !26
  %132 = load float, ptr addrspace(3) %131, align 16, !dbg !26
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float 6.400000e+01) #5, !dbg !32
  %134 = fsub float %94, %133, !dbg !33
  %135 = fsub float %95, %133, !dbg !33
  %136 = fsub float %96, %133, !dbg !33
  %137 = fsub float %97, %133, !dbg !33
  %138 = fmul float %134, %134, !dbg !34
  %139 = fmul float %135, %135, !dbg !34
  %140 = fmul float %136, %136, !dbg !34
  %141 = fmul float %137, %137, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %142 = fadd float %138, %139, !dbg !37
  %143 = fadd float %140, %142, !dbg !37
  %144 = fadd float %141, %143, !dbg !37
  %145 = select i1 %18, float %144, float 0.000000e+00, !dbg !37
  %146 = bitcast float %145 to i32, !dbg !35
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 16, i32 31), !dbg !35
  %148 = bitcast i32 %147 to float, !dbg !35
  %149 = fadd float %145, %148, !dbg !37
  %150 = bitcast float %149 to i32, !dbg !35
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !35
  %152 = bitcast i32 %151 to float, !dbg !35
  %153 = fadd float %149, %152, !dbg !37
  %154 = bitcast float %153 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %154, i1 %110) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %155 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %117, i1 %116) #5, !dbg !35
  %156 = bitcast i32 %155 to float, !dbg !35
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !35
  %158 = bitcast i32 %157 to float, !dbg !35
  %159 = fadd float %156, %158, !dbg !37
  %160 = bitcast float %159 to i32, !dbg !35
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !35
  %162 = bitcast i32 %161 to float, !dbg !35
  %163 = fadd float %159, %162, !dbg !37
  %164 = bitcast float %163 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %164, i1 %129) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %165 = load float, ptr addrspace(3) %131, align 16, !dbg !35
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 6.400000e+01) #5, !dbg !38
  %167 = fadd float %166, 0x3EE4F8B580000000, !dbg !39
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %168, 0, !dbg !40
  br i1 %.not.i, label %171, label %169, !dbg !40

169:                                              ; preds = %7
  %170 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %167), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

171:                                              ; preds = %7
  %172 = tail call float @llvm.nvvm.rsqrt.approx.f(float %167), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %169, %171
  %.0.i = phi float [ %170, %169 ], [ %172, %171 ], !dbg !40
  %173 = lshr i32 %11, 3, !dbg !26
  %174 = lshr i32 %10, 3, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %175 = shl i32 %10, 6, !dbg !41
  %176 = and i32 %175, 448, !dbg !41
  %177 = and i32 %174, 15, !dbg !41
  %178 = or disjoint i32 %177, %176, !dbg !41
  %179 = and i32 %20, 508, !dbg !41
  %180 = lshr exact i32 %176, 2, !dbg !41
  %181 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %180, !dbg !41
  %182 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %178, !dbg !41
  %183 = bitcast float %94 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #5, !dbg !41
  %184 = or disjoint i32 %178, 16, !dbg !41
  %185 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %184, !dbg !41
  %186 = bitcast float %95 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #5, !dbg !41
  %187 = or disjoint i32 %178, 32, !dbg !41
  %188 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %187, !dbg !41
  %189 = bitcast float %96 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #5, !dbg !41
  %190 = or disjoint i32 %178, 48, !dbg !41
  %191 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %190, !dbg !41
  %192 = bitcast float %97 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %193 = lshr i32 %20, 4, !dbg !41
  %194 = and i32 %193, 28, !dbg !41
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !41
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %179, !dbg !41
  %.extract = load i32, ptr addrspace(3) %196, align 16, !dbg !41
  %197 = getelementptr inbounds i8, ptr addrspace(3) %196, i32 4, !dbg !41
  %.extract7 = load i32, ptr addrspace(3) %197, align 4, !dbg !41
  %198 = getelementptr inbounds i8, ptr addrspace(3) %196, i32 8, !dbg !41
  %.extract8 = load i32, ptr addrspace(3) %198, align 8, !dbg !41
  %199 = getelementptr inbounds i8, ptr addrspace(3) %196, i32 12, !dbg !41
  %.extract9 = load i32, ptr addrspace(3) %199, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %26, i1 %19) #5, !dbg !41
  %200 = sext i32 %17 to i64, !dbg !42
  %201 = getelementptr float, ptr addrspace(1) %4, i64 %200, !dbg !42
  %202 = shl nuw nsw i32 %111, 2, !dbg !43
  %203 = or disjoint i32 %202, %173, !dbg !43
  %204 = icmp eq i32 %203, 0, !dbg !43
  %205 = bitcast float %.0.i to i32, !dbg !43
  %206 = and i1 %204, %18, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %201, i1 %206) #5, !dbg !43
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %200, !dbg !44
  %208 = bitcast float %133 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %207, i1 %206) #5, !dbg !45
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %200, !dbg !46
  %210 = bitcast float %165 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %209, i1 %206) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfgwodrczjtkt6ozwusst6lk2ym33u3ruljnr6onqxbkcoozlrz7.py", directory: "inductor_cache/fg")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_0", linkageName: "triton_per_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 42, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 34, column: 37, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 40, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 28, scope: !7)
!41 = !DILocation(line: 54, column: 47, scope: !7)
!42 = !DILocation(line: 55, column: 25, scope: !7)
!43 = !DILocation(line: 55, column: 37, scope: !7)
!44 = !DILocation(line: 56, column: 25, scope: !7)
!45 = !DILocation(line: 56, column: 37, scope: !7)
!46 = !DILocation(line: 57, column: 25, scope: !7)
!47 = !DILocation(line: 57, column: 37, scope: !7)
!48 = !DILocation(line: 57, column: 4, scope: !7)
