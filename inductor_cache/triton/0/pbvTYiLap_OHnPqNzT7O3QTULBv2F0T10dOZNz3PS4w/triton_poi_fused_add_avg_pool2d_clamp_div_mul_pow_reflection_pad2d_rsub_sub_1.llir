; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 256, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %14 = sdiv i32 %.frozen, 4, !dbg !15
  %15 = mul i32 %14, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = srem i32 %12, 4, !dbg !16
  %17 = srem i32 %14, 4, !dbg !17
  %.frozen3 = freeze i32 %11, !dbg !18
  %18 = sdiv i32 %.frozen3, 16, !dbg !18
  %19 = mul nsw i32 %17, 6, !dbg !19
  %20 = mul i32 %18, 36, !dbg !20
  %21 = add i32 %19, %20, !dbg !21
  %22 = add i32 %21, %.decomposed, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !23
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %13) #1, !dbg !24
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !24
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !24
  %28 = bitcast i32 %26 to float, !dbg !24
  %29 = bitcast i32 %27 to float, !dbg !24
  %30 = or disjoint i32 %21, 1, !dbg !25
  %31 = add i32 %30, %.decomposed, !dbg !26
  %32 = add i32 %30, %16, !dbg !26
  %33 = sext i32 %31 to i64, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !27
  %35 = sext i32 %32 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %13) #1, !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = add i32 %21, 2, !dbg !29
  %42 = add i32 %41, %.decomposed, !dbg !30
  %43 = sext i32 %42 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !31
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %13) #1, !dbg !32
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !32
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !32
  %48 = bitcast i32 %46 to float, !dbg !32
  %49 = bitcast i32 %47 to float, !dbg !32
  %50 = add i32 %21, 6, !dbg !33
  %51 = add i32 %50, %.decomposed, !dbg !34
  %52 = sext i32 %51 to i64, !dbg !35
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !35
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %13) #1, !dbg !36
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !36
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !36
  %57 = bitcast i32 %55 to float, !dbg !36
  %58 = bitcast i32 %56 to float, !dbg !36
  %59 = add i32 %21, 7, !dbg !37
  %60 = add i32 %59, %.decomposed, !dbg !38
  %61 = add i32 %59, %16, !dbg !38
  %62 = sext i32 %60 to i64, !dbg !39
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !39
  %64 = sext i32 %61 to i64, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %13) #1, !dbg !40
  %67 = bitcast i32 %66 to float, !dbg !40
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %13) #1, !dbg !40
  %69 = bitcast i32 %68 to float, !dbg !40
  %70 = add i32 %21, 8, !dbg !41
  %71 = add i32 %70, %.decomposed, !dbg !42
  %72 = sext i32 %71 to i64, !dbg !43
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !43
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %13) #1, !dbg !44
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !44
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !44
  %77 = bitcast i32 %75 to float, !dbg !44
  %78 = bitcast i32 %76 to float, !dbg !44
  %79 = add i32 %21, 12, !dbg !45
  %80 = add i32 %79, %.decomposed, !dbg !46
  %81 = sext i32 %80 to i64, !dbg !47
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !47
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %13) #1, !dbg !48
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !48
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !48
  %86 = bitcast i32 %84 to float, !dbg !48
  %87 = bitcast i32 %85 to float, !dbg !48
  %88 = add i32 %21, 13, !dbg !49
  %89 = add i32 %88, %.decomposed, !dbg !50
  %90 = add i32 %88, %16, !dbg !50
  %91 = sext i32 %89 to i64, !dbg !51
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !51
  %93 = sext i32 %90 to i64, !dbg !51
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !51
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %13) #1, !dbg !52
  %96 = bitcast i32 %95 to float, !dbg !52
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %13) #1, !dbg !52
  %98 = bitcast i32 %97 to float, !dbg !52
  %99 = add i32 %21, 14, !dbg !53
  %100 = add i32 %99, %.decomposed, !dbg !54
  %101 = sext i32 %100 to i64, !dbg !55
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !55
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %102, i1 %13) #1, !dbg !56
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !56
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !56
  %106 = bitcast i32 %104 to float, !dbg !56
  %107 = bitcast i32 %105 to float, !dbg !56
  %108 = add nsw i32 %.decomposed, -1, !dbg !57
  %109 = add nsw i32 %16, -1, !dbg !57
  %110 = tail call i32 @llvm.abs.i32(i32 %108, i1 true), !dbg !58
  %111 = tail call i32 @llvm.abs.i32(i32 %109, i1 true), !dbg !58
  %112 = add nsw i32 %110, -3, !dbg !59
  %113 = add nsw i32 %111, -3, !dbg !59
  %114 = tail call i32 @llvm.abs.i32(i32 %112, i1 true), !dbg !60
  %115 = tail call i32 @llvm.abs.i32(i32 %113, i1 true), !dbg !60
  %116 = sub nuw nsw i32 15, %114, !dbg !61
  %117 = sub nuw nsw i32 15, %115, !dbg !61
  %118 = add nsw i32 %17, -1, !dbg !62
  %119 = tail call i32 @llvm.abs.i32(i32 %118, i1 true), !dbg !63
  %120 = add nsw i32 %119, -3, !dbg !64
  %121 = tail call i32 @llvm.abs.i32(i32 %120, i1 true), !dbg !65
  %122 = shl nsw i32 %18, 4, !dbg !66
  %123 = shl nuw nsw i32 %121, 2, !dbg !67
  %124 = sub i32 %122, %123, !dbg !67
  %125 = add i32 %124, %116, !dbg !68
  %126 = add i32 %124, %117, !dbg !68
  %127 = sext i32 %125 to i64, !dbg !69
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !69
  %129 = sext i32 %126 to i64, !dbg !69
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !69
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %13) #1, !dbg !70
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %13) #1, !dbg !70
  %133 = add nsw i32 %.decomposed, 12, !dbg !71
  %134 = add nsw i32 %16, 12, !dbg !71
  %135 = add i32 %124, %133, !dbg !72
  %136 = add i32 %124, %134, !dbg !72
  %137 = sext i32 %135 to i64, !dbg !73
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !73
  %139 = sext i32 %136 to i64, !dbg !73
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !73
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %13) #1, !dbg !74
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %13) #1, !dbg !74
  %143 = add nsw i32 %.decomposed, -2, !dbg !75
  %144 = add nsw i32 %16, -2, !dbg !75
  %145 = tail call i32 @llvm.abs.i32(i32 %143, i1 true), !dbg !76
  %146 = tail call i32 @llvm.abs.i32(i32 %144, i1 true), !dbg !76
  %147 = sub nuw nsw i32 15, %145, !dbg !77
  %148 = sub nuw nsw i32 15, %146, !dbg !77
  %149 = add i32 %124, %147, !dbg !78
  %150 = add i32 %124, %148, !dbg !78
  %151 = sext i32 %149 to i64, !dbg !79
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !79
  %153 = sext i32 %150 to i64, !dbg !79
  %154 = getelementptr float, ptr addrspace(1) %2, i64 %153, !dbg !79
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %13) #1, !dbg !80
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %13) #1, !dbg !80
  %.neg = shl nsw i32 %17, 2, !dbg !81
  %157 = add nsw i32 %.neg, -12, !dbg !81
  %158 = add i32 %157, %122, !dbg !82
  %159 = add i32 %158, %116, !dbg !83
  %160 = add i32 %158, %117, !dbg !83
  %161 = sext i32 %159 to i64, !dbg !84
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !84
  %163 = sext i32 %160 to i64, !dbg !84
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %163, !dbg !84
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %13) #1, !dbg !85
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %13) #1, !dbg !85
  %167 = mul i32 %18, 16, !dbg !86
  %srem.decomposed = sub i32 %.frozen3, %167, !dbg !86
  %168 = add i32 %122, %srem.decomposed, !dbg !87
  %169 = add i32 %122, %16, !dbg !86
  %170 = add i32 %169, %.neg, !dbg !87
  %171 = sext i32 %168 to i64, !dbg !88
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !88
  %173 = sext i32 %170 to i64, !dbg !88
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !88
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %13) #1, !dbg !89
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %13) #1, !dbg !89
  %177 = add i32 %158, %147, !dbg !90
  %178 = add i32 %158, %148, !dbg !90
  %179 = sext i32 %177 to i64, !dbg !91
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !91
  %181 = sext i32 %178 to i64, !dbg !91
  %182 = getelementptr float, ptr addrspace(1) %2, i64 %181, !dbg !91
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %13) #1, !dbg !92
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %13) #1, !dbg !92
  %185 = add nsw i32 %17, -2, !dbg !93
  %186 = tail call i32 @llvm.abs.i32(i32 %185, i1 true), !dbg !94
  %187 = shl nuw nsw i32 %186, 2, !dbg !95
  %188 = sub i32 %122, %187, !dbg !95
  %189 = add i32 %188, %116, !dbg !96
  %190 = add i32 %188, %117, !dbg !96
  %191 = sext i32 %189 to i64, !dbg !97
  %192 = getelementptr float, ptr addrspace(1) %2, i64 %191, !dbg !97
  %193 = sext i32 %190 to i64, !dbg !97
  %194 = getelementptr float, ptr addrspace(1) %2, i64 %193, !dbg !97
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %13) #1, !dbg !98
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 %13) #1, !dbg !98
  %197 = add i32 %188, %133, !dbg !99
  %198 = add i32 %188, %134, !dbg !99
  %199 = sext i32 %197 to i64, !dbg !100
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !100
  %201 = sext i32 %198 to i64, !dbg !100
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %201, !dbg !100
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %13) #1, !dbg !101
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %13) #1, !dbg !101
  %205 = add i32 %188, %147, !dbg !102
  %206 = add i32 %188, %148, !dbg !102
  %207 = sext i32 %205 to i64, !dbg !103
  %208 = getelementptr float, ptr addrspace(1) %2, i64 %207, !dbg !103
  %209 = sext i32 %206 to i64, !dbg !103
  %210 = getelementptr float, ptr addrspace(1) %2, i64 %209, !dbg !103
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %13) #1, !dbg !104
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 %13) #1, !dbg !104
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !105
  %214 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !105
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %13) #1, !dbg !106
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 %13) #1, !dbg !106
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !107
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !107
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %13) #1, !dbg !108
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %13) #1, !dbg !108
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !109
  %222 = getelementptr float, ptr addrspace(1) %3, i64 %153, !dbg !109
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %13) #1, !dbg !110
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 %13) #1, !dbg !110
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %161, !dbg !111
  %226 = getelementptr float, ptr addrspace(1) %3, i64 %163, !dbg !111
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %13) #1, !dbg !112
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 %13) #1, !dbg !112
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !113
  %230 = getelementptr float, ptr addrspace(1) %3, i64 %173, !dbg !113
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %13) #1, !dbg !114
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %13) #1, !dbg !114
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %179, !dbg !115
  %234 = getelementptr float, ptr addrspace(1) %3, i64 %181, !dbg !115
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %13) #1, !dbg !116
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %13) #1, !dbg !116
  %237 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !117
  %238 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !117
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 %13) #1, !dbg !118
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %13) #1, !dbg !118
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %199, !dbg !119
  %242 = getelementptr float, ptr addrspace(1) %3, i64 %201, !dbg !119
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %13) #1, !dbg !120
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %13) #1, !dbg !120
  %245 = getelementptr float, ptr addrspace(1) %3, i64 %207, !dbg !121
  %246 = getelementptr float, ptr addrspace(1) %3, i64 %209, !dbg !121
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #1, !dbg !122
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %13) #1, !dbg !122
  %249 = fadd float %38, %28, !dbg !123
  %250 = fadd float %29, %40, !dbg !123
  %251 = fadd float %249, %48, !dbg !124
  %252 = fadd float %250, %49, !dbg !124
  %253 = fadd float %251, %57, !dbg !125
  %254 = fadd float %252, %58, !dbg !125
  %255 = fadd float %253, %67, !dbg !126
  %256 = fadd float %254, %69, !dbg !126
  %257 = fadd float %255, %77, !dbg !127
  %258 = fadd float %256, %78, !dbg !127
  %259 = fadd float %257, %86, !dbg !128
  %260 = fadd float %258, %87, !dbg !128
  %261 = fadd float %259, %96, !dbg !129
  %262 = fadd float %260, %98, !dbg !129
  %263 = fadd float %261, %106, !dbg !130
  %264 = fadd float %262, %107, !dbg !130
  %265 = fmul float %263, 0x3FBC71C720000000, !dbg !131
  %266 = fmul float %264, 0x3FBC71C720000000, !dbg !131
  %267 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !70
  %268 = insertelement <2 x i32> %267, i32 %215, i64 1, !dbg !70
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !70
  %270 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !74
  %271 = insertelement <2 x i32> %270, i32 %219, i64 1, !dbg !74
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !74
  %273 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !80
  %274 = insertelement <2 x i32> %273, i32 %223, i64 1, !dbg !80
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !80
  %276 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !85
  %277 = insertelement <2 x i32> %276, i32 %227, i64 1, !dbg !85
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !85
  %279 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !89
  %280 = insertelement <2 x i32> %279, i32 %231, i64 1, !dbg !89
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !89
  %282 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !92
  %283 = insertelement <2 x i32> %282, i32 %235, i64 1, !dbg !92
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !92
  %285 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !98
  %286 = insertelement <2 x i32> %285, i32 %239, i64 1, !dbg !98
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !98
  %288 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !101
  %289 = insertelement <2 x i32> %288, i32 %243, i64 1, !dbg !101
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !101
  %291 = insertelement <2 x i32> poison, i32 %211, i64 0, !dbg !104
  %292 = insertelement <2 x i32> %291, i32 %247, i64 1, !dbg !104
  %293 = bitcast <2 x i32> %292 to <2 x float>, !dbg !104
  %294 = fadd <2 x float> %269, %272, !dbg !132
  %295 = fadd <2 x float> %294, %275, !dbg !133
  %296 = fadd <2 x float> %295, %278, !dbg !134
  %297 = fadd <2 x float> %296, %281, !dbg !135
  %298 = fadd <2 x float> %297, %284, !dbg !136
  %299 = fadd <2 x float> %298, %287, !dbg !137
  %300 = fadd <2 x float> %299, %290, !dbg !138
  %301 = fadd <2 x float> %300, %293, !dbg !139
  %302 = fmul <2 x float> %301, splat (float 0x3FBC71C720000000), !dbg !140
  %303 = fmul <2 x float> %269, %269, !dbg !141
  %304 = fmul <2 x float> %272, %272, !dbg !142
  %305 = fadd <2 x float> %303, %304, !dbg !143
  %306 = fmul <2 x float> %275, %275, !dbg !144
  %307 = fadd <2 x float> %305, %306, !dbg !145
  %308 = fmul <2 x float> %278, %278, !dbg !146
  %309 = fadd <2 x float> %307, %308, !dbg !147
  %310 = fmul <2 x float> %281, %281, !dbg !148
  %311 = fadd <2 x float> %309, %310, !dbg !149
  %312 = fmul <2 x float> %284, %284, !dbg !150
  %313 = fadd <2 x float> %311, %312, !dbg !151
  %314 = fmul <2 x float> %287, %287, !dbg !152
  %315 = fadd <2 x float> %313, %314, !dbg !153
  %316 = fmul <2 x float> %290, %290, !dbg !154
  %317 = fadd <2 x float> %315, %316, !dbg !155
  %318 = fmul <2 x float> %293, %293, !dbg !156
  %319 = fadd <2 x float> %317, %318, !dbg !157
  %320 = fmul <2 x float> %319, splat (float 0x3FBC71C720000000), !dbg !158
  %321 = extractelement <2 x float> %302, i64 0, !dbg !159
  %322 = fmul float %321, 2.000000e+00, !dbg !160
  %323 = extractelement <2 x float> %302, i64 1, !dbg !159
  %324 = fmul float %322, %323, !dbg !161
  %325 = fadd float %324, 0x3F1A36E2E0000000, !dbg !162
  %326 = fmul float %321, %323, !dbg !159
  %327 = fsub float %265, %326, !dbg !163
  %328 = fmul float %327, 2.000000e+00, !dbg !164
  %329 = fadd float %328, 0x3F4D7DBF40000000, !dbg !165
  %330 = fmul float %325, %329, !dbg !166
  %331 = fmul <2 x float> %302, %302, !dbg !167
  %332 = fsub <2 x float> %320, %331, !dbg !168
  %333 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !70
  %334 = insertelement <2 x i32> %333, i32 %216, i64 1, !dbg !70
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !70
  %336 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !74
  %337 = insertelement <2 x i32> %336, i32 %220, i64 1, !dbg !74
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !74
  %339 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !80
  %340 = insertelement <2 x i32> %339, i32 %224, i64 1, !dbg !80
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !80
  %342 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !85
  %343 = insertelement <2 x i32> %342, i32 %228, i64 1, !dbg !85
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !85
  %345 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !89
  %346 = insertelement <2 x i32> %345, i32 %232, i64 1, !dbg !89
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !89
  %348 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !92
  %349 = insertelement <2 x i32> %348, i32 %236, i64 1, !dbg !92
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !92
  %351 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !98
  %352 = insertelement <2 x i32> %351, i32 %240, i64 1, !dbg !98
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !98
  %354 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !101
  %355 = insertelement <2 x i32> %354, i32 %244, i64 1, !dbg !101
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !101
  %357 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !104
  %358 = insertelement <2 x i32> %357, i32 %248, i64 1, !dbg !104
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !104
  %360 = fadd <2 x float> %335, %338, !dbg !132
  %361 = fadd <2 x float> %360, %341, !dbg !133
  %362 = fadd <2 x float> %361, %344, !dbg !134
  %363 = fadd <2 x float> %362, %347, !dbg !135
  %364 = fadd <2 x float> %363, %350, !dbg !136
  %365 = fadd <2 x float> %364, %353, !dbg !137
  %366 = fadd <2 x float> %365, %356, !dbg !138
  %367 = fadd <2 x float> %366, %359, !dbg !139
  %368 = fmul <2 x float> %367, splat (float 0x3FBC71C720000000), !dbg !140
  %369 = fmul <2 x float> %335, %335, !dbg !141
  %370 = fmul <2 x float> %338, %338, !dbg !142
  %371 = fadd <2 x float> %369, %370, !dbg !143
  %372 = fmul <2 x float> %341, %341, !dbg !144
  %373 = fadd <2 x float> %371, %372, !dbg !145
  %374 = fmul <2 x float> %344, %344, !dbg !146
  %375 = fadd <2 x float> %373, %374, !dbg !147
  %376 = fmul <2 x float> %347, %347, !dbg !148
  %377 = fadd <2 x float> %375, %376, !dbg !149
  %378 = fmul <2 x float> %350, %350, !dbg !150
  %379 = fadd <2 x float> %377, %378, !dbg !151
  %380 = fmul <2 x float> %353, %353, !dbg !152
  %381 = fadd <2 x float> %379, %380, !dbg !153
  %382 = fmul <2 x float> %356, %356, !dbg !154
  %383 = fadd <2 x float> %381, %382, !dbg !155
  %384 = fmul <2 x float> %359, %359, !dbg !156
  %385 = fadd <2 x float> %383, %384, !dbg !157
  %386 = fmul <2 x float> %385, splat (float 0x3FBC71C720000000), !dbg !158
  %387 = extractelement <2 x float> %368, i64 0, !dbg !159
  %388 = fmul float %387, 2.000000e+00, !dbg !160
  %389 = extractelement <2 x float> %368, i64 1, !dbg !159
  %390 = fmul float %388, %389, !dbg !161
  %391 = fadd float %390, 0x3F1A36E2E0000000, !dbg !162
  %392 = fmul float %387, %389, !dbg !159
  %393 = fsub float %266, %392, !dbg !163
  %394 = fmul float %393, 2.000000e+00, !dbg !164
  %395 = fadd float %394, 0x3F4D7DBF40000000, !dbg !165
  %396 = fmul float %391, %395, !dbg !166
  %397 = fmul <2 x float> %368, %368, !dbg !167
  %398 = fsub <2 x float> %386, %397, !dbg !168
  %399 = shufflevector <2 x float> %331, <2 x float> %332, <2 x i32> <i32 0, i32 2>, !dbg !169
  %400 = shufflevector <2 x float> %331, <2 x float> %332, <2 x i32> <i32 1, i32 3>, !dbg !169
  %401 = fadd <2 x float> %399, %400, !dbg !169
  %402 = fadd <2 x float> %401, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !170
  %403 = shufflevector <2 x float> %397, <2 x float> %398, <2 x i32> <i32 0, i32 2>, !dbg !169
  %404 = shufflevector <2 x float> %397, <2 x float> %398, <2 x i32> <i32 1, i32 3>, !dbg !169
  %405 = fadd <2 x float> %403, %404, !dbg !169
  %406 = fadd <2 x float> %405, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !170
  %shift = shufflevector <2 x float> %402, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !171
  %407 = fmul <2 x float> %402, %shift, !dbg !171
  %408 = extractelement <2 x float> %407, i64 0, !dbg !171
  %shift2 = shufflevector <2 x float> %406, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !171
  %409 = fmul <2 x float> %406, %shift2, !dbg !171
  %410 = extractelement <2 x float> %409, i64 0, !dbg !171
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %408) #1, !dbg !172
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %396, float %410) #1, !dbg !172
  %413 = fsub float 1.000000e+00, %411, !dbg !173
  %414 = fsub float 1.000000e+00, %412, !dbg !173
  %415 = fmul float %413, 5.000000e-01, !dbg !174
  %416 = fmul float %414, 5.000000e-01, !dbg !174
  %.inv = fcmp ole float %415, 0.000000e+00, !dbg !175
  %417 = select i1 %.inv, float 0.000000e+00, float %415, !dbg !175
  %.inv1 = fcmp ole float %416, 0.000000e+00, !dbg !175
  %418 = select i1 %.inv1, float 0.000000e+00, float %416, !dbg !175
  %419 = fcmp olt float %417, 1.000000e+00, !dbg !179
  %420 = fcmp olt float %418, 1.000000e+00, !dbg !179
  %421 = fcmp uno float %417, 0.000000e+00, !dbg !181
  %422 = fcmp uno float %418, 0.000000e+00, !dbg !181
  %423 = or i1 %419, %421, !dbg !182
  %424 = or i1 %420, %422, !dbg !182
  %425 = sext i32 %11 to i64, !dbg !183
  %426 = getelementptr float, ptr addrspace(1) %0, i64 %425, !dbg !183
  %427 = bitcast float %417 to i32, !dbg !184
  %428 = select i1 %423, i32 %427, i32 1065353216, !dbg !185
  %429 = bitcast float %418 to i32, !dbg !184
  %430 = select i1 %424, i32 %429, i32 1065353216, !dbg !185
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %428, i32 %430, ptr addrspace(1) %426, i1 %13) #1, !dbg !184
  ret void, !dbg !186
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2cx6m6xlmyqioemzympxtsutt5ayqupefunxwn2bg5u6w6yftrk.py", directory: "inductor_cache/2c")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1", linkageName: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 42, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 50, scope: !7)
!25 = !DILocation(line: 29, column: 39, scope: !7)
!26 = !DILocation(line: 29, column: 46, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 54, scope: !7)
!29 = !DILocation(line: 30, column: 39, scope: !7)
!30 = !DILocation(line: 30, column: 46, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 54, scope: !7)
!33 = !DILocation(line: 31, column: 39, scope: !7)
!34 = !DILocation(line: 31, column: 46, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 54, scope: !7)
!37 = !DILocation(line: 32, column: 39, scope: !7)
!38 = !DILocation(line: 32, column: 46, scope: !7)
!39 = !DILocation(line: 32, column: 30, scope: !7)
!40 = !DILocation(line: 32, column: 54, scope: !7)
!41 = !DILocation(line: 33, column: 39, scope: !7)
!42 = !DILocation(line: 33, column: 46, scope: !7)
!43 = !DILocation(line: 33, column: 30, scope: !7)
!44 = !DILocation(line: 33, column: 54, scope: !7)
!45 = !DILocation(line: 34, column: 41, scope: !7)
!46 = !DILocation(line: 34, column: 48, scope: !7)
!47 = !DILocation(line: 34, column: 31, scope: !7)
!48 = !DILocation(line: 34, column: 56, scope: !7)
!49 = !DILocation(line: 35, column: 41, scope: !7)
!50 = !DILocation(line: 35, column: 48, scope: !7)
!51 = !DILocation(line: 35, column: 31, scope: !7)
!52 = !DILocation(line: 35, column: 56, scope: !7)
!53 = !DILocation(line: 36, column: 41, scope: !7)
!54 = !DILocation(line: 36, column: 48, scope: !7)
!55 = !DILocation(line: 36, column: 31, scope: !7)
!56 = !DILocation(line: 36, column: 56, scope: !7)
!57 = !DILocation(line: 37, column: 80, scope: !7)
!58 = !DILocation(line: 37, column: 73, scope: !7)
!59 = !DILocation(line: 37, column: 61, scope: !7)
!60 = !DILocation(line: 37, column: 54, scope: !7)
!61 = !DILocation(line: 37, column: 37, scope: !7)
!62 = !DILocation(line: 37, column: 132, scope: !7)
!63 = !DILocation(line: 37, column: 125, scope: !7)
!64 = !DILocation(line: 37, column: 113, scope: !7)
!65 = !DILocation(line: 37, column: 106, scope: !7)
!66 = !DILocation(line: 37, column: 143, scope: !7)
!67 = !DILocation(line: 37, column: 89, scope: !7)
!68 = !DILocation(line: 37, column: 140, scope: !7)
!69 = !DILocation(line: 37, column: 31, scope: !7)
!70 = !DILocation(line: 37, column: 148, scope: !7)
!71 = !DILocation(line: 38, column: 37, scope: !7)
!72 = !DILocation(line: 38, column: 120, scope: !7)
!73 = !DILocation(line: 38, column: 31, scope: !7)
!74 = !DILocation(line: 38, column: 128, scope: !7)
!75 = !DILocation(line: 39, column: 61, scope: !7)
!76 = !DILocation(line: 39, column: 54, scope: !7)
!77 = !DILocation(line: 39, column: 37, scope: !7)
!78 = !DILocation(line: 39, column: 120, scope: !7)
!79 = !DILocation(line: 39, column: 31, scope: !7)
!80 = !DILocation(line: 39, column: 128, scope: !7)
!81 = !DILocation(line: 40, column: 94, scope: !7)
!82 = !DILocation(line: 40, column: 89, scope: !7)
!83 = !DILocation(line: 40, column: 120, scope: !7)
!84 = !DILocation(line: 40, column: 31, scope: !7)
!85 = !DILocation(line: 40, column: 128, scope: !7)
!86 = !DILocation(line: 41, column: 69, scope: !7)
!87 = !DILocation(line: 41, column: 100, scope: !7)
!88 = !DILocation(line: 41, column: 31, scope: !7)
!89 = !DILocation(line: 41, column: 108, scope: !7)
!90 = !DILocation(line: 42, column: 100, scope: !7)
!91 = !DILocation(line: 42, column: 31, scope: !7)
!92 = !DILocation(line: 42, column: 108, scope: !7)
!93 = !DILocation(line: 43, column: 113, scope: !7)
!94 = !DILocation(line: 43, column: 106, scope: !7)
!95 = !DILocation(line: 43, column: 89, scope: !7)
!96 = !DILocation(line: 43, column: 120, scope: !7)
!97 = !DILocation(line: 43, column: 31, scope: !7)
!98 = !DILocation(line: 43, column: 128, scope: !7)
!99 = !DILocation(line: 44, column: 100, scope: !7)
!100 = !DILocation(line: 44, column: 31, scope: !7)
!101 = !DILocation(line: 44, column: 108, scope: !7)
!102 = !DILocation(line: 45, column: 100, scope: !7)
!103 = !DILocation(line: 45, column: 31, scope: !7)
!104 = !DILocation(line: 45, column: 108, scope: !7)
!105 = !DILocation(line: 46, column: 31, scope: !7)
!106 = !DILocation(line: 46, column: 148, scope: !7)
!107 = !DILocation(line: 47, column: 31, scope: !7)
!108 = !DILocation(line: 47, column: 128, scope: !7)
!109 = !DILocation(line: 48, column: 31, scope: !7)
!110 = !DILocation(line: 48, column: 128, scope: !7)
!111 = !DILocation(line: 49, column: 31, scope: !7)
!112 = !DILocation(line: 49, column: 128, scope: !7)
!113 = !DILocation(line: 50, column: 31, scope: !7)
!114 = !DILocation(line: 50, column: 108, scope: !7)
!115 = !DILocation(line: 51, column: 31, scope: !7)
!116 = !DILocation(line: 51, column: 108, scope: !7)
!117 = !DILocation(line: 52, column: 31, scope: !7)
!118 = !DILocation(line: 52, column: 128, scope: !7)
!119 = !DILocation(line: 53, column: 31, scope: !7)
!120 = !DILocation(line: 53, column: 108, scope: !7)
!121 = !DILocation(line: 54, column: 31, scope: !7)
!122 = !DILocation(line: 54, column: 108, scope: !7)
!123 = !DILocation(line: 55, column: 18, scope: !7)
!124 = !DILocation(line: 56, column: 18, scope: !7)
!125 = !DILocation(line: 57, column: 18, scope: !7)
!126 = !DILocation(line: 58, column: 18, scope: !7)
!127 = !DILocation(line: 59, column: 19, scope: !7)
!128 = !DILocation(line: 60, column: 20, scope: !7)
!129 = !DILocation(line: 61, column: 20, scope: !7)
!130 = !DILocation(line: 62, column: 20, scope: !7)
!131 = !DILocation(line: 64, column: 20, scope: !7)
!132 = !DILocation(line: 65, column: 20, scope: !7)
!133 = !DILocation(line: 66, column: 20, scope: !7)
!134 = !DILocation(line: 67, column: 20, scope: !7)
!135 = !DILocation(line: 68, column: 20, scope: !7)
!136 = !DILocation(line: 69, column: 20, scope: !7)
!137 = !DILocation(line: 70, column: 20, scope: !7)
!138 = !DILocation(line: 71, column: 20, scope: !7)
!139 = !DILocation(line: 72, column: 20, scope: !7)
!140 = !DILocation(line: 73, column: 20, scope: !7)
!141 = !DILocation(line: 74, column: 20, scope: !7)
!142 = !DILocation(line: 75, column: 20, scope: !7)
!143 = !DILocation(line: 76, column: 20, scope: !7)
!144 = !DILocation(line: 77, column: 20, scope: !7)
!145 = !DILocation(line: 78, column: 20, scope: !7)
!146 = !DILocation(line: 79, column: 20, scope: !7)
!147 = !DILocation(line: 80, column: 20, scope: !7)
!148 = !DILocation(line: 81, column: 20, scope: !7)
!149 = !DILocation(line: 82, column: 20, scope: !7)
!150 = !DILocation(line: 83, column: 20, scope: !7)
!151 = !DILocation(line: 84, column: 20, scope: !7)
!152 = !DILocation(line: 85, column: 20, scope: !7)
!153 = !DILocation(line: 86, column: 20, scope: !7)
!154 = !DILocation(line: 87, column: 20, scope: !7)
!155 = !DILocation(line: 88, column: 20, scope: !7)
!156 = !DILocation(line: 89, column: 20, scope: !7)
!157 = !DILocation(line: 90, column: 20, scope: !7)
!158 = !DILocation(line: 91, column: 20, scope: !7)
!159 = !DILocation(line: 124, column: 20, scope: !7)
!160 = !DILocation(line: 120, column: 20, scope: !7)
!161 = !DILocation(line: 121, column: 20, scope: !7)
!162 = !DILocation(line: 123, column: 20, scope: !7)
!163 = !DILocation(line: 125, column: 20, scope: !7)
!164 = !DILocation(line: 126, column: 20, scope: !7)
!165 = !DILocation(line: 128, column: 21, scope: !7)
!166 = !DILocation(line: 129, column: 21, scope: !7)
!167 = !DILocation(line: 130, column: 21, scope: !7)
!168 = !DILocation(line: 134, column: 21, scope: !7)
!169 = !DILocation(line: 132, column: 22, scope: !7)
!170 = !DILocation(line: 133, column: 22, scope: !7)
!171 = !DILocation(line: 138, column: 22, scope: !7)
!172 = !DILocation(line: 139, column: 22, scope: !7)
!173 = !DILocation(line: 141, column: 22, scope: !7)
!174 = !DILocation(line: 143, column: 22, scope: !7)
!175 = !DILocation(line: 121, column: 29, scope: !176, inlinedAt: !178)
!176 = distinct !DILexicalBlockFile(scope: !7, file: !177, discriminator: 0)
!177 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!178 = !DILocation(line: 145, column: 44, scope: !7)
!179 = !DILocation(line: 110, column: 15, scope: !176, inlinedAt: !180)
!180 = !DILocation(line: 146, column: 44, scope: !7)
!181 = !DILocation(line: 112, column: 21, scope: !176, inlinedAt: !180)
!182 = !DILocation(line: 112, column: 16, scope: !176, inlinedAt: !180)
!183 = !DILocation(line: 147, column: 28, scope: !7)
!184 = !DILocation(line: 147, column: 41, scope: !7)
!185 = !DILocation(line: 113, column: 29, scope: !176, inlinedAt: !180)
!186 = !DILocation(line: 147, column: 4, scope: !7)
