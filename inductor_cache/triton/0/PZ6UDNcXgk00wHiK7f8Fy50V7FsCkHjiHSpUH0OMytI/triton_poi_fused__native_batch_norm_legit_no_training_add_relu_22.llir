; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = srem i32 %17, 64, !dbg !14
  %19 = sext i32 %17 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !21
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !23
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !24
  %30 = sext i32 %18 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !27
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !28
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !28
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !28
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !28
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !28
  %39 = bitcast i32 %35 to float, !dbg !28
  %40 = bitcast i32 %36 to float, !dbg !28
  %41 = bitcast i32 %37 to float, !dbg !28
  %42 = bitcast i32 %38 to float, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !29
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !31
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !32
  %47 = fadd float %39, 0x3EE4F8B580000000, !dbg !33
  %48 = fadd float %40, 0x3EE4F8B580000000, !dbg !33
  %49 = fadd float %41, 0x3EE4F8B580000000, !dbg !33
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !33
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %51, 0, !dbg !34
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %52, 0, !dbg !34
  br i1 %.not.i, label %58, label %53, !dbg !34

53:                                               ; preds = %11
  br i1 %.not1.i, label %56, label %54, !dbg !34

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

58:                                               ; preds = %11
  br i1 %.not1.i, label %61, label %59, !dbg !34

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %54, %56, %59, %61
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !34
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i1 = icmp eq i32 %63, 0, !dbg !34
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i4 = icmp eq i32 %64, 0, !dbg !34
  br i1 %.not.i1, label %70, label %65, !dbg !34

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !34

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !34

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %66, %68, %71, %73
  %.0.i3 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !34
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i6 = icmp eq i32 %75, 0, !dbg !34
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i9 = icmp eq i32 %76, 0, !dbg !34
  br i1 %.not.i6, label %82, label %77, !dbg !34

77:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %80, label %78, !dbg !34

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

82:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %85, label %83, !dbg !34

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

__nv_sqrtf.exit10:                                ; preds = %78, %80, %83, %85
  %.0.i8 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !34
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i11 = icmp eq i32 %87, 0, !dbg !34
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i14 = icmp eq i32 %88, 0, !dbg !34
  br i1 %.not.i11, label %94, label %89, !dbg !34

89:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %92, label %90, !dbg !34

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

94:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %97, label %95, !dbg !34

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

__nv_sqrtf.exit15:                                ; preds = %90, %92, %95, %97
  %.0.i13 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !22
  %100 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !24
  %101 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !20
  %102 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !18
  %103 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %104 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !22
  %106 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !24
  %107 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !20
  %108 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !18
  %109 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %110 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !22
  %112 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !24
  %113 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !20
  %114 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !18
  %115 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %116 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !22
  %118 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !20
  %120 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !18
  %121 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %122 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !32
  %124 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !30
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !35
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !35
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !35
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !35
  %135 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !22
  %136 = insertelement <4 x i32> %135, i32 %105, i64 1, !dbg !22
  %137 = insertelement <4 x i32> %136, i32 %111, i64 2, !dbg !22
  %138 = insertelement <4 x i32> %137, i32 %117, i64 3, !dbg !22
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !22
  %140 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !24
  %141 = insertelement <4 x i32> %140, i32 %106, i64 1, !dbg !24
  %142 = insertelement <4 x i32> %141, i32 %112, i64 2, !dbg !24
  %143 = insertelement <4 x i32> %142, i32 %118, i64 3, !dbg !24
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !24
  %145 = fadd <4 x float> %139, %144, !dbg !36
  %146 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !20
  %147 = insertelement <4 x i32> %146, i32 %107, i64 1, !dbg !20
  %148 = insertelement <4 x i32> %147, i32 %113, i64 2, !dbg !20
  %149 = insertelement <4 x i32> %148, i32 %119, i64 3, !dbg !20
  %150 = bitcast <4 x i32> %149 to <4 x float>, !dbg !20
  %151 = fadd <4 x float> %145, %150, !dbg !37
  %152 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !18
  %153 = insertelement <4 x i32> %152, i32 %108, i64 1, !dbg !18
  %154 = insertelement <4 x i32> %153, i32 %114, i64 2, !dbg !18
  %155 = insertelement <4 x i32> %154, i32 %120, i64 3, !dbg !18
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !18
  %157 = fadd <4 x float> %151, %156, !dbg !38
  %158 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !16
  %159 = insertelement <4 x i32> %158, i32 %109, i64 1, !dbg !16
  %160 = insertelement <4 x i32> %159, i32 %115, i64 2, !dbg !16
  %161 = insertelement <4 x i32> %160, i32 %121, i64 3, !dbg !16
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !16
  %163 = fadd <4 x float> %157, %162, !dbg !39
  %164 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !26
  %165 = insertelement <4 x i32> %164, i32 %110, i64 1, !dbg !26
  %166 = insertelement <4 x i32> %165, i32 %116, i64 2, !dbg !26
  %167 = insertelement <4 x i32> %166, i32 %122, i64 3, !dbg !26
  %168 = bitcast <4 x i32> %167 to <4 x float>, !dbg !26
  %169 = fsub <4 x float> %163, %168, !dbg !40
  %170 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !32
  %171 = insertelement <4 x i32> %170, i32 %124, i64 1, !dbg !32
  %172 = insertelement <4 x i32> %171, i32 %125, i64 2, !dbg !32
  %173 = insertelement <4 x i32> %172, i32 %126, i64 3, !dbg !32
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !32
  %175 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !30
  %176 = insertelement <4 x i32> %175, i32 %128, i64 1, !dbg !30
  %177 = insertelement <4 x i32> %176, i32 %129, i64 2, !dbg !30
  %178 = insertelement <4 x i32> %177, i32 %130, i64 3, !dbg !30
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !30
  %180 = insertelement <4 x float> poison, float %134, i64 0, !dbg !41
  %181 = insertelement <4 x float> %180, float %133, i64 1, !dbg !41
  %182 = insertelement <4 x float> %181, float %132, i64 2, !dbg !41
  %183 = insertelement <4 x float> %182, float %131, i64 3, !dbg !41
  %184 = fmul <4 x float> %169, %183, !dbg !41
  %185 = fmul <4 x float> %184, %179, !dbg !42
  %186 = fadd <4 x float> %185, %174, !dbg !43
  %187 = fcmp olt <4 x float> %186, zeroinitializer, !dbg !44
  %188 = extractelement <4 x i1> %187, i64 3, !dbg !48
  %189 = extractelement <4 x i1> %187, i64 2, !dbg !48
  %190 = extractelement <4 x i1> %187, i64 1, !dbg !48
  %191 = extractelement <4 x i1> %187, i64 0, !dbg !48
  %bc = bitcast <4 x float> %163 to <4 x i32>, !dbg !49
  %192 = extractelement <4 x i32> %bc, i64 3, !dbg !49
  %bc16 = bitcast <4 x float> %163 to <4 x i32>, !dbg !49
  %193 = extractelement <4 x i32> %bc16, i64 2, !dbg !49
  %bc17 = bitcast <4 x float> %163 to <4 x i32>, !dbg !49
  %194 = extractelement <4 x i32> %bc17, i64 1, !dbg !49
  %bc18 = bitcast <4 x float> %163 to <4 x i32>, !dbg !49
  %195 = extractelement <4 x i32> %bc18, i64 0, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %20, i1 true) #3, !dbg !49
  %196 = getelementptr float, ptr addrspace(1) %9, i64 %19, !dbg !50
  %bc19 = bitcast <4 x float> %186 to <4 x i32>, !dbg !51
  %197 = extractelement <4 x i32> %bc19, i64 3, !dbg !51
  %198 = select i1 %188, i32 0, i32 %197, !dbg !48
  %bc20 = bitcast <4 x float> %186 to <4 x i32>, !dbg !51
  %199 = extractelement <4 x i32> %bc20, i64 2, !dbg !51
  %200 = select i1 %189, i32 0, i32 %199, !dbg !48
  %bc21 = bitcast <4 x float> %186 to <4 x i32>, !dbg !51
  %201 = extractelement <4 x i32> %bc21, i64 1, !dbg !51
  %202 = select i1 %190, i32 0, i32 %201, !dbg !48
  %bc22 = bitcast <4 x float> %186 to <4 x i32>, !dbg !51
  %203 = extractelement <4 x i32> %bc22, i64 0, !dbg !51
  %204 = select i1 %191, i32 0, i32 %203, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %200, i32 %202, i32 %204, ptr addrspace(1) %196, i1 true) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csndf27xthaiq3uai7ro7lozgfxrf4wnuovqzv6qpacnnsvnxihy.py", directory: "inductor_cache/sn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 27, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 52, column: 39, scope: !7)
!50 = !DILocation(line: 53, column: 25, scope: !7)
!51 = !DILocation(line: 53, column: 37, scope: !7)
!52 = !DILocation(line: 53, column: 4, scope: !7)
