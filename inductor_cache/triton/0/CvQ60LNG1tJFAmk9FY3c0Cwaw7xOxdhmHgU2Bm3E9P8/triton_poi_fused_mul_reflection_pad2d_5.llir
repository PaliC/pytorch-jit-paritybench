; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_reflection_pad2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %.lobit = and i32 %10, 1, !dbg !12
  %11 = shl i32 %9, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %8, %.lobit, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 4, !dbg !13
  %16 = or disjoint i32 %13, 6, !dbg !13
  %17 = or disjoint i32 %13, 8, !dbg !13
  %18 = or disjoint i32 %13, 10, !dbg !13
  %19 = or disjoint i32 %13, 12, !dbg !13
  %20 = or disjoint i32 %13, 14, !dbg !13
  %21 = or disjoint i32 %8, %12, !dbg !13
  %22 = icmp slt i32 %13, 16, !dbg !14
  %23 = icmp slt i32 %14, 16, !dbg !14
  %24 = icmp slt i32 %15, 16, !dbg !14
  %25 = icmp slt i32 %16, 16, !dbg !14
  %26 = icmp slt i32 %17, 16, !dbg !14
  %27 = icmp slt i32 %18, 16, !dbg !14
  %28 = icmp slt i32 %19, 16, !dbg !14
  %29 = icmp slt i32 %20, 16, !dbg !14
  %30 = icmp slt i32 %21, 16, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 6, !dbg !16
  %33 = and i32 %9, 63, !dbg !17
  %34 = lshr i32 %9, 2, !dbg !17
  %35 = and i32 %34, 31, !dbg !17
  %36 = or disjoint i32 %32, %33, !dbg !18
  %37 = or disjoint i32 %32, %35, !dbg !18
  %38 = or disjoint i32 %37, 32, !dbg !18
  %39 = icmp slt i32 %36, 100, !dbg !19
  %40 = icmp slt i32 %37, 100, !dbg !19
  %41 = icmp slt i32 %38, 100, !dbg !19
  %.frozen = freeze i32 %36, !dbg !20
  %42 = sdiv i32 %.frozen, 10, !dbg !20
  %43 = mul i32 %42, 10, !dbg !21
  %.decomposed = sub i32 %.frozen, %43, !dbg !21
  %44 = ashr exact i32 %21, 2, !dbg !22
  %45 = add nsw i32 %.decomposed, -3, !dbg !23
  %46 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !24
  %47 = add nsw i32 %46, -3, !dbg !25
  %48 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !26
  %49 = add nsw i32 %42, -3, !dbg !27
  %50 = tail call i32 @llvm.abs.i32(i32 %49, i1 true), !dbg !28
  %51 = add nsw i32 %50, -3, !dbg !29
  %52 = tail call i32 @llvm.abs.i32(i32 %51, i1 true), !dbg !30
  %53 = mul nsw i32 %52, -4, !dbg !31
  %reass.sub = sub nsw i32 %53, %48, !dbg !32
  %54 = add nsw i32 %reass.sub, 15, !dbg !32
  %55 = shl i32 %13, 4, !dbg !33
  %56 = shl i32 %14, 4, !dbg !33
  %57 = shl i32 %15, 4, !dbg !33
  %58 = shl i32 %16, 4, !dbg !33
  %59 = shl i32 %17, 4, !dbg !33
  %60 = shl i32 %18, 4, !dbg !33
  %61 = shl i32 %19, 4, !dbg !33
  %62 = shl i32 %20, 4, !dbg !33
  %63 = add i32 %54, %55, !dbg !34
  %64 = add i32 %54, %56, !dbg !34
  %65 = add i32 %54, %57, !dbg !34
  %66 = add i32 %54, %58, !dbg !34
  %67 = add i32 %54, %59, !dbg !34
  %68 = add i32 %54, %60, !dbg !34
  %69 = add i32 %54, %61, !dbg !34
  %70 = add i32 %54, %62, !dbg !34
  %71 = sext i32 %63 to i64, !dbg !35
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !35
  %73 = sext i32 %64 to i64, !dbg !35
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !35
  %75 = sext i32 %65 to i64, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !35
  %77 = sext i32 %66 to i64, !dbg !35
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !35
  %79 = sext i32 %67 to i64, !dbg !35
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !35
  %81 = sext i32 %68 to i64, !dbg !35
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !35
  %83 = sext i32 %69 to i64, !dbg !35
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !35
  %85 = sext i32 %70 to i64, !dbg !35
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !35
  %87 = and i1 %22, %39, !dbg !36
  %88 = and i1 %23, %39, !dbg !36
  %89 = and i1 %24, %39, !dbg !36
  %90 = and i1 %25, %39, !dbg !36
  %91 = and i1 %26, %39, !dbg !36
  %92 = and i1 %27, %39, !dbg !36
  %93 = and i1 %28, %39, !dbg !36
  %94 = and i1 %29, %39, !dbg !36
  %95 = and i1 %30, %40, !dbg !36
  %96 = and i1 %41, %30, !dbg !36
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %87) #2, !dbg !37
  %98 = bitcast i32 %97 to float, !dbg !37
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %88) #2, !dbg !37
  %100 = bitcast i32 %99 to float, !dbg !37
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %89) #2, !dbg !37
  %102 = bitcast i32 %101 to float, !dbg !37
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %90) #2, !dbg !37
  %104 = bitcast i32 %103 to float, !dbg !37
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %91) #2, !dbg !37
  %106 = bitcast i32 %105 to float, !dbg !37
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %92) #2, !dbg !37
  %108 = bitcast i32 %107 to float, !dbg !37
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %93) #2, !dbg !37
  %110 = bitcast i32 %109 to float, !dbg !37
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %94) #2, !dbg !37
  %112 = bitcast i32 %111 to float, !dbg !37
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !38
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !38
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !38
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !38
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !38
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !38
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !38
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !38
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %87) #2, !dbg !39
  %122 = bitcast i32 %121 to float, !dbg !39
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %88) #2, !dbg !39
  %124 = bitcast i32 %123 to float, !dbg !39
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %89) #2, !dbg !39
  %126 = bitcast i32 %125 to float, !dbg !39
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %90) #2, !dbg !39
  %128 = bitcast i32 %127 to float, !dbg !39
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %91) #2, !dbg !39
  %130 = bitcast i32 %129 to float, !dbg !39
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %92) #2, !dbg !39
  %132 = bitcast i32 %131 to float, !dbg !39
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %93) #2, !dbg !39
  %134 = bitcast i32 %133 to float, !dbg !39
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %94) #2, !dbg !39
  %136 = bitcast i32 %135 to float, !dbg !39
  %137 = fmul float %98, %122, !dbg !40
  %138 = fmul float %100, %124, !dbg !40
  %139 = fmul float %102, %126, !dbg !40
  %140 = fmul float %104, %128, !dbg !40
  %141 = fmul float %106, %130, !dbg !40
  %142 = fmul float %108, %132, !dbg !40
  %143 = fmul float %110, %134, !dbg !40
  %144 = fmul float %112, %136, !dbg !40
  %145 = shl i32 %37, 2, !dbg !41
  %146 = shl i32 %38, 2, !dbg !41
  %147 = mul i32 %44, 400, !dbg !42
  %148 = add i32 %145, %147, !dbg !43
  %149 = add i32 %147, %146, !dbg !43
  %150 = sext i32 %148 to i64, !dbg !44
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !44
  %152 = sext i32 %149 to i64, !dbg !44
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !44
  %154 = shl i32 %9, 4, !dbg !45
  %155 = and i32 %154, 1008, !dbg !45
  %156 = or disjoint i32 %155, %.lobit, !dbg !45
  %157 = and i32 %11, 508, !dbg !45
  %158 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %155, !dbg !45
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !45
  %160 = bitcast float %137 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !45
  %161 = or disjoint i32 %156, 2, !dbg !45
  %162 = getelementptr float, ptr addrspace(3) %158, i32 %161, !dbg !45
  %163 = bitcast float %138 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !45
  %164 = or disjoint i32 %156, 4, !dbg !45
  %165 = getelementptr float, ptr addrspace(3) %158, i32 %164, !dbg !45
  %166 = bitcast float %139 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !45
  %167 = or disjoint i32 %156, 6, !dbg !45
  %168 = getelementptr float, ptr addrspace(3) %158, i32 %167, !dbg !45
  %169 = bitcast float %140 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !45
  %170 = or disjoint i32 %156, 8, !dbg !45
  %171 = getelementptr float, ptr addrspace(3) %158, i32 %170, !dbg !45
  %172 = bitcast float %141 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !45
  %173 = or disjoint i32 %156, 10, !dbg !45
  %174 = getelementptr float, ptr addrspace(3) %158, i32 %173, !dbg !45
  %175 = bitcast float %142 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !45
  %176 = or disjoint i32 %156, 12, !dbg !45
  %177 = getelementptr float, ptr addrspace(3) %158, i32 %176, !dbg !45
  %178 = bitcast float %143 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !45
  %179 = or disjoint i32 %156, 14, !dbg !45
  %180 = getelementptr float, ptr addrspace(3) %158, i32 %179, !dbg !45
  %181 = bitcast float %144 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %182 = and i32 %9, 124, !dbg !45
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !45
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %157, !dbg !45
  %185 = or disjoint i32 %157, 512, !dbg !45
  %186 = lshr exact i32 %185, 2, !dbg !45
  %187 = and i32 %186, 252, !dbg !45
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !45
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %185, !dbg !45
  %190 = load <4 x i32>, ptr addrspace(3) %189, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %184, align 16, !dbg !45
  %191 = getelementptr inbounds i8, ptr addrspace(3) %184, i32 4, !dbg !45
  %.extract12 = load i32, ptr addrspace(3) %191, align 4, !dbg !45
  %192 = getelementptr inbounds i8, ptr addrspace(3) %184, i32 8, !dbg !45
  %.extract13 = load i32, ptr addrspace(3) %192, align 8, !dbg !45
  %193 = getelementptr inbounds i8, ptr addrspace(3) %184, i32 12, !dbg !45
  %.extract14 = load i32, ptr addrspace(3) %193, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %151, i1 %95) #2, !dbg !45
  %.extract15 = extractelement <4 x i32> %190, i64 0, !dbg !45
  %.extract16 = extractelement <4 x i32> %190, i64 1, !dbg !45
  %.extract17 = extractelement <4 x i32> %190, i64 2, !dbg !45
  %.extract18 = extractelement <4 x i32> %190, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %153, i1 %96) #2, !dbg !45
  %194 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !46
  %195 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %196 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %196, i1 true) #2, !dbg !47
  %197 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %197, i1 true) #2, !dbg !47
  %198 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %198, i1 true) #2, !dbg !47
  %199 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %199, i1 true) #2, !dbg !47
  %200 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %200, i1 true) #2, !dbg !47
  %201 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %201, i1 true) #2, !dbg !47
  %202 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %202, i1 true) #2, !dbg !47
  %203 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %203, i1 true) #2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %204 = load <4 x i32>, ptr addrspace(3) %189, align 16, !dbg !47
  %.extract26 = load i32, ptr addrspace(3) %184, align 16, !dbg !47
  %.extract27 = load i32, ptr addrspace(3) %191, align 4, !dbg !47
  %.extract28 = load i32, ptr addrspace(3) %192, align 8, !dbg !47
  %.extract29 = load i32, ptr addrspace(3) %193, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %194, i1 %95) #2, !dbg !47
  %.extract30 = extractelement <4 x i32> %204, i64 0, !dbg !47
  %.extract31 = extractelement <4 x i32> %204, i64 1, !dbg !47
  %.extract32 = extractelement <4 x i32> %204, i64 2, !dbg !47
  %.extract33 = extractelement <4 x i32> %204, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %195, i1 %96) #2, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccz3syobdwf2qjusl7u5yxorsohclzq4rey7ak7wndcwtjxivziu.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_poi_fused_mul_reflection_pad2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_reflection_pad2d_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_reflection_pad2d_5", linkageName: "triton_poi_fused_mul_reflection_pad2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 79, scope: !7)
!24 = !DILocation(line: 34, column: 72, scope: !7)
!25 = !DILocation(line: 34, column: 60, scope: !7)
!26 = !DILocation(line: 34, column: 53, scope: !7)
!27 = !DILocation(line: 34, column: 131, scope: !7)
!28 = !DILocation(line: 34, column: 124, scope: !7)
!29 = !DILocation(line: 34, column: 112, scope: !7)
!30 = !DILocation(line: 34, column: 105, scope: !7)
!31 = !DILocation(line: 34, column: 93, scope: !7)
!32 = !DILocation(line: 34, column: 88, scope: !7)
!33 = !DILocation(line: 34, column: 142, scope: !7)
!34 = !DILocation(line: 34, column: 139, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 155, scope: !7)
!37 = !DILocation(line: 34, column: 147, scope: !7)
!38 = !DILocation(line: 35, column: 30, scope: !7)
!39 = !DILocation(line: 35, column: 147, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 37, column: 32, scope: !7)
!42 = !DILocation(line: 37, column: 41, scope: !7)
!43 = !DILocation(line: 37, column: 37, scope: !7)
!44 = !DILocation(line: 37, column: 25, scope: !7)
!45 = !DILocation(line: 37, column: 52, scope: !7)
!46 = !DILocation(line: 38, column: 25, scope: !7)
!47 = !DILocation(line: 38, column: 52, scope: !7)
!48 = !DILocation(line: 38, column: 4, scope: !7)
