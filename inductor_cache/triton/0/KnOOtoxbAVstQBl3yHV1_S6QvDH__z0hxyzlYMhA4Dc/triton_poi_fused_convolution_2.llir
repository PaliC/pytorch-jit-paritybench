; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %11, 8, !dbg !12
  %14 = or disjoint i32 %11, 12, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 8, !dbg !15
  %22 = lshr i32 %8, 2, !dbg !16
  %23 = and i32 %22, 63, !dbg !16
  %24 = or disjoint i32 %23, 64, !dbg !16
  %25 = or disjoint i32 %23, 128, !dbg !16
  %26 = or disjoint i32 %23, 192, !dbg !16
  %27 = and i32 %9, 252, !dbg !16
  %28 = or disjoint i32 %21, %23, !dbg !17
  %29 = or disjoint i32 %21, %24, !dbg !17
  %30 = or disjoint i32 %21, %25, !dbg !17
  %31 = or disjoint i32 %21, %26, !dbg !17
  %32 = or disjoint i32 %21, %27, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %33 = sdiv i32 %.frozen, 256, !dbg !18
  %34 = mul i32 %33, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %34, !dbg !19
  %35 = shl i32 %28, 8, !dbg !20
  %36 = shl i32 %29, 8, !dbg !20
  %37 = shl i32 %30, 8, !dbg !20
  %38 = shl i32 %31, 8, !dbg !20
  %39 = shl i32 %33, 20, !dbg !21
  %40 = add i32 %39, %.decomposed, !dbg !22
  %41 = add i32 %40, %35, !dbg !23
  %42 = add i32 %40, %36, !dbg !23
  %43 = add i32 %40, %37, !dbg !23
  %44 = add i32 %40, %38, !dbg !23
  %45 = sext i32 %41 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %42 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %43 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %44 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = bitcast i32 %74 to float, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = bitcast i32 %83 to float, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = sext i32 %.decomposed to i64, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !26
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #2, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !27
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !27
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !27
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !27
  %96 = bitcast i32 %92 to float, !dbg !27
  %97 = bitcast i32 %93 to float, !dbg !27
  %98 = bitcast i32 %94 to float, !dbg !27
  %99 = bitcast i32 %95 to float, !dbg !27
  %100 = fadd float %58, %96, !dbg !28
  %101 = fadd float %59, %97, !dbg !28
  %102 = fadd float %60, %98, !dbg !28
  %103 = fadd float %61, %99, !dbg !28
  %104 = fadd float %67, %96, !dbg !28
  %105 = fadd float %68, %97, !dbg !28
  %106 = fadd float %69, %98, !dbg !28
  %107 = fadd float %70, %99, !dbg !28
  %108 = fadd float %76, %96, !dbg !28
  %109 = fadd float %77, %97, !dbg !28
  %110 = fadd float %78, %98, !dbg !28
  %111 = fadd float %79, %99, !dbg !28
  %112 = fadd float %85, %96, !dbg !28
  %113 = fadd float %86, %97, !dbg !28
  %114 = fadd float %87, %98, !dbg !28
  %115 = fadd float %88, %99, !dbg !28
  %116 = shl i32 %16, 12, !dbg !29
  %117 = shl i32 %17, 12, !dbg !29
  %118 = shl i32 %18, 12, !dbg !29
  %119 = shl i32 %19, 12, !dbg !29
  %120 = add i32 %32, %116, !dbg !30
  %121 = add i32 %32, %117, !dbg !30
  %122 = add i32 %32, %118, !dbg !30
  %123 = add i32 %32, %119, !dbg !30
  %124 = sext i32 %120 to i64, !dbg !31
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !31
  %126 = sext i32 %121 to i64, !dbg !31
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !31
  %128 = sext i32 %122 to i64, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !31
  %130 = sext i32 %123 to i64, !dbg !31
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !31
  %132 = shl i32 %8, 10, !dbg !32
  %133 = and i32 %132, 3072, !dbg !32
  %134 = or disjoint i32 %133, %23, !dbg !32
  %135 = and i32 %9, 1020, !dbg !32
  %136 = lshr exact i32 %133, 6, !dbg !32
  %137 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %136, !dbg !32
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %134, !dbg !32
  %139 = bitcast float %100 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !32
  %140 = or disjoint i32 %134, 256, !dbg !32
  %141 = lshr i32 %140, 8, !dbg !32
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !32
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !32
  %144 = bitcast float %101 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !32
  %145 = or disjoint i32 %134, 512, !dbg !32
  %146 = lshr i32 %145, 8, !dbg !32
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !32
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !32
  %149 = bitcast float %102 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !32
  %150 = or disjoint i32 %134, 768, !dbg !32
  %151 = lshr i32 %150, 8, !dbg !32
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !32
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %150, !dbg !32
  %154 = bitcast float %103 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !32
  %155 = or disjoint i32 %134, 64, !dbg !32
  %156 = getelementptr float, ptr addrspace(3) %137, i32 %155, !dbg !32
  %157 = bitcast float %104 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !32
  %158 = or disjoint i32 %134, 320, !dbg !32
  %159 = lshr i32 %158, 8, !dbg !32
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !32
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !32
  %162 = bitcast float %105 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !32
  %163 = or disjoint i32 %134, 576, !dbg !32
  %164 = lshr i32 %163, 8, !dbg !32
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !32
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %163, !dbg !32
  %167 = bitcast float %106 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !32
  %168 = or disjoint i32 %134, 832, !dbg !32
  %169 = lshr i32 %168, 8, !dbg !32
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !32
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %168, !dbg !32
  %172 = bitcast float %107 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !32
  %173 = or disjoint i32 %134, 128, !dbg !32
  %174 = getelementptr float, ptr addrspace(3) %137, i32 %173, !dbg !32
  %175 = bitcast float %108 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !32
  %176 = or disjoint i32 %134, 384, !dbg !32
  %177 = lshr i32 %176, 8, !dbg !32
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !32
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !32
  %180 = bitcast float %109 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !32
  %181 = or disjoint i32 %134, 640, !dbg !32
  %182 = lshr i32 %181, 8, !dbg !32
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !32
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %181, !dbg !32
  %185 = bitcast float %110 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !32
  %186 = or disjoint i32 %134, 896, !dbg !32
  %187 = lshr i32 %186, 8, !dbg !32
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !32
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %186, !dbg !32
  %190 = bitcast float %111 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !32
  %191 = or disjoint i32 %134, 192, !dbg !32
  %192 = getelementptr float, ptr addrspace(3) %137, i32 %191, !dbg !32
  %193 = bitcast float %112 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !32
  %194 = or disjoint i32 %134, 448, !dbg !32
  %195 = lshr i32 %194, 8, !dbg !32
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !32
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %194, !dbg !32
  %198 = bitcast float %113 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !32
  %199 = or disjoint i32 %134, 704, !dbg !32
  %200 = lshr i32 %199, 8, !dbg !32
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !32
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !32
  %203 = bitcast float %114 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !32
  %204 = or disjoint i32 %134, 960, !dbg !32
  %205 = lshr i32 %204, 8, !dbg !32
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !32
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %204, !dbg !32
  %208 = bitcast float %115 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %209 = lshr i32 %135, 8, !dbg !32
  %210 = or disjoint i32 %209, %135, !dbg !32
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !32
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !32
  %213 = or disjoint i32 %135, 1, !dbg !32
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !32
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %213, !dbg !32
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !32
  %217 = or disjoint i32 %135, 2, !dbg !32
  %218 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %217, !dbg !32
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !32
  %220 = or disjoint i32 %135, 3, !dbg !32
  %221 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %220, !dbg !32
  %222 = load i32, ptr addrspace(3) %221, align 4, !dbg !32
  %223 = or disjoint i32 %135, 1024, !dbg !32
  %224 = lshr i32 %223, 8, !dbg !32
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !32
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %223, !dbg !32
  %227 = load i32, ptr addrspace(3) %226, align 4, !dbg !32
  %228 = or disjoint i32 %135, 1025, !dbg !32
  %229 = lshr i32 %228, 8, !dbg !32
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !32
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %228, !dbg !32
  %232 = load i32, ptr addrspace(3) %231, align 4, !dbg !32
  %233 = or disjoint i32 %135, 1026, !dbg !32
  %234 = lshr i32 %233, 8, !dbg !32
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !32
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %233, !dbg !32
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !32
  %238 = or disjoint i32 %135, 1027, !dbg !32
  %239 = lshr i32 %238, 8, !dbg !32
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !32
  %241 = getelementptr inbounds float, ptr addrspace(3) %240, i32 %238, !dbg !32
  %242 = load i32, ptr addrspace(3) %241, align 4, !dbg !32
  %243 = or disjoint i32 %135, 2048, !dbg !32
  %244 = lshr i32 %243, 8, !dbg !32
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !32
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %243, !dbg !32
  %247 = load i32, ptr addrspace(3) %246, align 4, !dbg !32
  %248 = or disjoint i32 %135, 2049, !dbg !32
  %249 = lshr i32 %248, 8, !dbg !32
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !32
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %248, !dbg !32
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !32
  %253 = or disjoint i32 %135, 2050, !dbg !32
  %254 = lshr i32 %253, 8, !dbg !32
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !32
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %253, !dbg !32
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !32
  %258 = or disjoint i32 %135, 2051, !dbg !32
  %259 = lshr i32 %258, 8, !dbg !32
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !32
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %258, !dbg !32
  %262 = load i32, ptr addrspace(3) %261, align 4, !dbg !32
  %263 = or disjoint i32 %135, 3072, !dbg !32
  %264 = lshr i32 %263, 8, !dbg !32
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !32
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %263, !dbg !32
  %267 = load i32, ptr addrspace(3) %266, align 4, !dbg !32
  %268 = or disjoint i32 %135, 3073, !dbg !32
  %269 = lshr i32 %268, 8, !dbg !32
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !32
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %268, !dbg !32
  %272 = load i32, ptr addrspace(3) %271, align 4, !dbg !32
  %273 = or disjoint i32 %135, 3074, !dbg !32
  %274 = lshr i32 %273, 8, !dbg !32
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !32
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %273, !dbg !32
  %277 = load i32, ptr addrspace(3) %276, align 4, !dbg !32
  %278 = or disjoint i32 %135, 3075, !dbg !32
  %279 = lshr i32 %278, 8, !dbg !32
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !32
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %278, !dbg !32
  %282 = load i32, ptr addrspace(3) %281, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %212, i32 %216, i32 %219, i32 %222, ptr addrspace(1) %125, i1 true) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %227, i32 %232, i32 %237, i32 %242, ptr addrspace(1) %127, i1 true) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %247, i32 %252, i32 %257, i32 %262, ptr addrspace(1) %129, i1 true) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %272, i32 %277, i32 %282, ptr addrspace(1) %131, i1 true) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crbgxxbe4gipc7e23jtxwua55srfmdpppcqiabflolf2bokj35ui.py", directory: "inductor_cache/rb")
!4 = !{ptr @triton_poi_fused_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_2", linkageName: "triton_poi_fused_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 46, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
