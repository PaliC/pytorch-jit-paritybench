; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_pixel_shuffle_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = and i32 %7, 127, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %12, 128, !dbg !13
  %14 = or disjoint i32 %12, 256, !dbg !13
  %15 = or disjoint i32 %12, 384, !dbg !13
  %16 = icmp slt i32 %11, 512, !dbg !14
  %17 = icmp slt i32 %12, 512, !dbg !14
  %18 = icmp slt i32 %13, 512, !dbg !14
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 1, !dbg !16
  %23 = or disjoint i32 %22, 1, !dbg !17
  %24 = icmp slt i32 %22, 2, !dbg !18
  %25 = icmp slt i32 %23, 2, !dbg !18
  %26 = ashr exact i32 %11, 2, !dbg !19
  %27 = srem i32 %26, 2, !dbg !20
  %28 = sdiv i32 %11, 8, !dbg !21
  %29 = srem i32 %28, 4, !dbg !22
  %30 = sdiv i32 %11, 32, !dbg !23
  %31 = shl nsw i32 %29, 2, !dbg !24
  %32 = shl i32 %21, 5, !dbg !25
  %33 = shl i32 %23, 4, !dbg !25
  %34 = shl nsw i32 %27, 5, !dbg !26
  %35 = shl i32 %30, 6, !dbg !27
  %36 = add i32 %31, %35, !dbg !28
  %37 = add i32 %36, %32, !dbg !29
  %38 = add i32 %37, %34, !dbg !30
  %39 = add i32 %36, %33, !dbg !29
  %40 = add i32 %39, %34, !dbg !30
  %41 = sext i32 %38 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = sext i32 %40 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !31
  %45 = and i1 %24, %16, !dbg !32
  %46 = and i1 %16, %25, !dbg !32
  %47 = and i1 %24, %17, !dbg !32
  %48 = and i1 %18, %24, !dbg !32
  %49 = and i1 %19, %24, !dbg !32
  %50 = and i1 %20, %24, !dbg !32
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %45) #2, !dbg !33
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !33
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !33
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !33
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !33
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %46) #2, !dbg !33
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !33
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !33
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !33
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !33
  %61 = add i32 %12, %21, !dbg !34
  %62 = shl i32 %61, 1, !dbg !34
  %63 = add i32 %21, %13, !dbg !34
  %64 = shl i32 %63, 1, !dbg !34
  %65 = add i32 %21, %14, !dbg !34
  %66 = shl i32 %65, 1, !dbg !34
  %67 = add i32 %21, %15, !dbg !34
  %68 = shl i32 %67, 1, !dbg !34
  %69 = sext i32 %62 to i64, !dbg !35
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !35
  %71 = sext i32 %64 to i64, !dbg !35
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !35
  %73 = sext i32 %66 to i64, !dbg !35
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !35
  %75 = sext i32 %68 to i64, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !35
  %77 = shl i32 %7, 3, !dbg !36
  %78 = and i32 %77, 1016, !dbg !36
  %79 = shl i32 %7, 1, !dbg !36
  %80 = and i32 %79, 254, !dbg !36
  %81 = lshr exact i32 %78, 1, !dbg !36
  %82 = add nuw nsw i32 %81, %78, !dbg !36
  %83 = zext nneg i32 %82 to i64, !dbg !36
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %83, !dbg !36
  %85 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !36
  %86 = or disjoint i32 %78, 2, !dbg !36
  %87 = lshr exact i32 %86, 1, !dbg !36
  %88 = add nuw nsw i32 %87, %86, !dbg !36
  %89 = zext nneg i32 %88 to i64, !dbg !36
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %89, !dbg !36
  %91 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !36
  %92 = or disjoint i32 %78, 4, !dbg !36
  %93 = lshr exact i32 %92, 1, !dbg !36
  %94 = add nuw nsw i32 %93, %92, !dbg !36
  %95 = zext nneg i32 %94 to i64, !dbg !36
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %95, !dbg !36
  %97 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !36
  %98 = or disjoint i32 %78, 6, !dbg !36
  %99 = lshr exact i32 %98, 1, !dbg !36
  %100 = add nuw nsw i32 %99, %98, !dbg !36
  %101 = zext nneg i32 %100 to i64, !dbg !36
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %101, !dbg !36
  %103 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !36
  %104 = or disjoint i32 %78, 1, !dbg !36
  %105 = add nuw nsw i32 %104, %81, !dbg !36
  %106 = zext nneg i32 %105 to i64, !dbg !36
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !36
  %108 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !36
  %109 = or disjoint i32 %78, 3, !dbg !36
  %110 = lshr i32 %109, 1, !dbg !36
  %111 = add nuw nsw i32 %110, %109, !dbg !36
  %112 = zext nneg i32 %111 to i64, !dbg !36
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !36
  %114 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !36
  %115 = or disjoint i32 %78, 5, !dbg !36
  %116 = lshr i32 %115, 1, !dbg !36
  %117 = add nuw nsw i32 %116, %115, !dbg !36
  %118 = zext nneg i32 %117 to i64, !dbg !36
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !36
  %120 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !36
  %121 = or disjoint i32 %78, 7, !dbg !36
  %122 = lshr i32 %121, 1, !dbg !36
  %123 = add nuw nsw i32 %122, %121, !dbg !36
  %124 = zext nneg i32 %123 to i64, !dbg !36
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !36
  %126 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %127 = lshr exact i32 %80, 1, !dbg !36
  %128 = add nuw nsw i32 %127, %80, !dbg !36
  %129 = zext nneg i32 %128 to i64, !dbg !36
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !36
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !36
  %132 = or disjoint i32 %80, 1, !dbg !36
  %133 = add nuw nsw i32 %132, %127, !dbg !36
  %134 = zext nneg i32 %133 to i64, !dbg !36
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !36
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !36
  %137 = or disjoint i32 %80, 256, !dbg !36
  %138 = lshr exact i32 %137, 1, !dbg !36
  %139 = add nuw nsw i32 %138, %137, !dbg !36
  %140 = zext nneg i32 %139 to i64, !dbg !36
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !36
  %142 = load i32, ptr addrspace(3) %141, align 4, !dbg !36
  %143 = or disjoint i32 %80, 257, !dbg !36
  %144 = lshr i32 %143, 1, !dbg !36
  %145 = add nuw nsw i32 %144, %143, !dbg !36
  %146 = zext nneg i32 %145 to i64, !dbg !36
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !36
  %148 = load i32, ptr addrspace(3) %147, align 4, !dbg !36
  %149 = or disjoint i32 %80, 512, !dbg !36
  %150 = lshr exact i32 %149, 1, !dbg !36
  %151 = add nuw nsw i32 %150, %149, !dbg !36
  %152 = zext nneg i32 %151 to i64, !dbg !36
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !36
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !36
  %155 = or disjoint i32 %80, 513, !dbg !36
  %156 = lshr i32 %155, 1, !dbg !36
  %157 = add nuw nsw i32 %156, %155, !dbg !36
  %158 = zext nneg i32 %157 to i64, !dbg !36
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !36
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !36
  %161 = or disjoint i32 %80, 768, !dbg !36
  %162 = lshr exact i32 %161, 1, !dbg !36
  %163 = add nuw nsw i32 %162, %161, !dbg !36
  %164 = zext nneg i32 %163 to i64, !dbg !36
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !36
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !36
  %167 = or disjoint i32 %80, 769, !dbg !36
  %168 = lshr i32 %167, 1, !dbg !36
  %169 = add nuw nsw i32 %168, %167, !dbg !36
  %170 = zext nneg i32 %169 to i64, !dbg !36
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %170, !dbg !36
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %136, ptr addrspace(1) %70, i1 %47) #2, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %148, ptr addrspace(1) %72, i1 %48) #2, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %160, ptr addrspace(1) %74, i1 %49) #2, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %172, ptr addrspace(1) %76, i1 %50) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4rrtbop5ru5tm4jvr4zaw2ijejxqcg6navnolhdpl5rxmu4kn6u.py", directory: "inductor_cache/4r")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_1", linkageName: "triton_poi_fused_pixel_shuffle_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 26, scope: !7)
!21 = !DILocation(line: 31, column: 21, scope: !7)
!22 = !DILocation(line: 31, column: 26, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 45, scope: !7)
!26 = !DILocation(line: 34, column: 53, scope: !7)
!27 = !DILocation(line: 34, column: 61, scope: !7)
!28 = !DILocation(line: 34, column: 42, scope: !7)
!29 = !DILocation(line: 34, column: 50, scope: !7)
!30 = !DILocation(line: 34, column: 58, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 74, scope: !7)
!33 = !DILocation(line: 34, column: 66, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 25, scope: !7)
!36 = !DILocation(line: 35, column: 43, scope: !7)
!37 = !DILocation(line: 35, column: 4, scope: !7)
