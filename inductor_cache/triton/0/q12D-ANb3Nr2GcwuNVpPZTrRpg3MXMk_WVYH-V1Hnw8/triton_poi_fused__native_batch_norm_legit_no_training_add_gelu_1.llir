; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_gelu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %16 = sdiv i32 %14, 16, !dbg !15
  %17 = srem i32 %16, 4, !dbg !16
  %18 = sext i32 %14 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %15) #3, !dbg !18
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !18
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !18
  %23 = bitcast i32 %21 to float, !dbg !18
  %24 = bitcast i32 %22 to float, !dbg !18
  %25 = sext i32 %17 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #3, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #3, !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %15) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %15) #3, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #3, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #3, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #3, !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #3, !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !27
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %15) #3, !dbg !28
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !28
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !28
  %50 = bitcast i32 %48 to float, !dbg !28
  %51 = bitcast i32 %49 to float, !dbg !28
  %52 = fsub float %23, %28, !dbg !29
  %53 = fsub float %24, %30, !dbg !29
  %54 = fadd float %33, 0x3EE4F8B580000000, !dbg !30
  %55 = fadd float %35, 0x3EE4F8B580000000, !dbg !30
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %56, 0, !dbg !31
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %57, 0, !dbg !31
  br i1 %.not.i, label %63, label %58, !dbg !31

58:                                               ; preds = %8
  br i1 %.not1.i, label %61, label %59, !dbg !31

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !31

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !31
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %68, 0, !dbg !31
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %69, 0, !dbg !31
  br i1 %.not.i1, label %75, label %70, !dbg !31

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !31

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !31

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %71, %73, %76, %78
  %.0.i3 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !31
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %82 = fmul float %52, %80, !dbg !33
  %83 = fmul float %53, %81, !dbg !33
  %84 = fmul float %82, %38, !dbg !34
  %85 = fmul float %83, %40, !dbg !34
  %86 = fadd float %84, %43, !dbg !35
  %87 = fadd float %85, %45, !dbg !35
  %88 = fadd float %86, %50, !dbg !36
  %89 = fadd float %87, %51, !dbg !36
  %90 = fmul float %88, 0x3FE6A09E60000000, !dbg !37
  %91 = fmul float %89, 0x3FE6A09E60000000, !dbg !37
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i6 = icmp eq i32 %92, 0, !dbg !38
  %93 = tail call float @llvm.nvvm.fabs.ftz.f(float %90) #3, !dbg !38
  %94 = tail call float @llvm.nvvm.fabs.f(float %90) #3, !dbg !38
  %.0.i7 = select i1 %.not.i6, float %94, float %93, !dbg !38
  %95 = fcmp oge float %.0.i7, 0x3FF00C1FC0000000, !dbg !38
  br i1 %95, label %__nv_fabsf.exit1.i, label %97, !dbg !38

__nv_fabsf.exit1.i:                               ; preds = %__nv_sqrtf.exit5
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not1.i9 = icmp eq i32 %96, 0, !dbg !38
  %.01.i = select i1 %.not1.i9, float %94, float %93, !dbg !38
  br label %__internal_fmad.exit.i, !dbg !38

97:                                               ; preds = %__nv_sqrtf.exit5
  %98 = fmul float %90, %90, !dbg !38
  br label %__internal_fmad.exit.i, !dbg !38

__internal_fmad.exit.i:                           ; preds = %97, %__nv_fabsf.exit1.i
  %99 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %97 ], !dbg !38
  %100 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %97 ], !dbg !38
  %101 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %97 ], !dbg !38
  %102 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %97 ], !dbg !38
  %103 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %97 ], !dbg !38
  %104 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %97 ], !dbg !38
  %105 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %97 ], !dbg !38
  %106 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %98, %97 ], !dbg !38
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not2.i8 = icmp eq i32 %107, 0, !dbg !38
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %105, float %106, float %104) #3, !dbg !38
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %105, float %106, float %104) #3, !dbg !38
  %.02.i = select i1 %.not2.i8, float %109, float %108, !dbg !38
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not3.i = icmp eq i32 %110, 0, !dbg !38
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %106, float %103) #3, !dbg !38
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %106, float %103) #3, !dbg !38
  %.03.i = select i1 %.not3.i, float %112, float %111, !dbg !38
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not4.i = icmp eq i32 %113, 0, !dbg !38
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %106, float %102) #3, !dbg !38
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %106, float %102) #3, !dbg !38
  %.04.i = select i1 %.not4.i, float %115, float %114, !dbg !38
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not5.i = icmp eq i32 %116, 0, !dbg !38
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %106, float %101) #3, !dbg !38
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %106, float %101) #3, !dbg !38
  %.05.i = select i1 %.not5.i, float %118, float %117, !dbg !38
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not6.i = icmp eq i32 %119, 0, !dbg !38
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %106, float %100) #3, !dbg !38
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %106, float %100) #3, !dbg !38
  %.06.i = select i1 %.not6.i, float %121, float %120, !dbg !38
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not7.i = icmp eq i32 %122, 0, !dbg !38
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %106, float %99) #3, !dbg !38
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %106, float %99) #3, !dbg !38
  %.07.i = select i1 %.not7.i, float %124, float %123, !dbg !38
  %125 = fneg float %106, !dbg !38
  %126 = select i1 %95, float %125, float %90, !dbg !38
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not8.i = icmp eq i32 %127, 0, !dbg !38
  %128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %126, float %126) #3, !dbg !38
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %126, float %126) #3, !dbg !38
  %.08.i = select i1 %.not8.i, float %129, float %128, !dbg !38
  br i1 %95, label %130, label %__nv_erff.exit, !dbg !38

130:                                              ; preds = %__internal_fmad.exit.i
  %131 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #3, !dbg !38
  %132 = fsub float 1.000000e+00, %131, !dbg !38
  %133 = bitcast float %132 to i32, !dbg !38
  %134 = bitcast float %90 to i32, !dbg !38
  %135 = and i32 %134, -2147483648, !dbg !38
  %136 = or i32 %135, %133, !dbg !38
  %137 = bitcast i32 %136 to float, !dbg !38
  br label %__nv_erff.exit, !dbg !38

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %130
  %r.0.i = phi float [ %137, %130 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !38
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i10 = icmp eq i32 %138, 0, !dbg !38
  %139 = tail call float @llvm.nvvm.fabs.ftz.f(float %91) #3, !dbg !38
  %140 = tail call float @llvm.nvvm.fabs.f(float %91) #3, !dbg !38
  %.0.i11 = select i1 %.not.i10, float %140, float %139, !dbg !38
  %141 = fcmp oge float %.0.i11, 0x3FF00C1FC0000000, !dbg !38
  br i1 %141, label %__nv_fabsf.exit1.i28, label %143, !dbg !38

__nv_fabsf.exit1.i28:                             ; preds = %__nv_erff.exit
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not1.i29 = icmp eq i32 %142, 0, !dbg !38
  %.01.i30 = select i1 %.not1.i29, float %140, float %139, !dbg !38
  br label %__internal_fmad.exit.i12, !dbg !38

143:                                              ; preds = %__nv_erff.exit
  %144 = fmul float %91, %91, !dbg !38
  br label %__internal_fmad.exit.i12, !dbg !38

__internal_fmad.exit.i12:                         ; preds = %143, %__nv_fabsf.exit1.i28
  %145 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i28 ], [ 0x3FC06EBA60000000, %143 ], !dbg !38
  %146 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i28 ], [ 0xBFD8127580000000, %143 ], !dbg !38
  %147 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i28 ], [ 0x3FBCE315E0000000, %143 ], !dbg !38
  %148 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i28 ], [ 0xBF9B837CE0000000, %143 ], !dbg !38
  %149 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i28 ], [ 0x3F755ABD40000000, %143 ], !dbg !38
  %150 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i28 ], [ 0xBF4AE9A400000000, %143 ], !dbg !38
  %151 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i28 ], [ 0x3F163D2D40000000, %143 ], !dbg !38
  %152 = phi float [ %.01.i30, %__nv_fabsf.exit1.i28 ], [ %144, %143 ], !dbg !38
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not2.i13 = icmp eq i32 %153, 0, !dbg !38
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %151, float %152, float %150) #3, !dbg !38
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %151, float %152, float %150) #3, !dbg !38
  %.02.i14 = select i1 %.not2.i13, float %155, float %154, !dbg !38
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not3.i15 = icmp eq i32 %156, 0, !dbg !38
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i14, float %152, float %149) #3, !dbg !38
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i14, float %152, float %149) #3, !dbg !38
  %.03.i16 = select i1 %.not3.i15, float %158, float %157, !dbg !38
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not4.i17 = icmp eq i32 %159, 0, !dbg !38
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i16, float %152, float %148) #3, !dbg !38
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i16, float %152, float %148) #3, !dbg !38
  %.04.i18 = select i1 %.not4.i17, float %161, float %160, !dbg !38
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not5.i19 = icmp eq i32 %162, 0, !dbg !38
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %152, float %147) #3, !dbg !38
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %152, float %147) #3, !dbg !38
  %.05.i20 = select i1 %.not5.i19, float %164, float %163, !dbg !38
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not6.i21 = icmp eq i32 %165, 0, !dbg !38
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i20, float %152, float %146) #3, !dbg !38
  %167 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i20, float %152, float %146) #3, !dbg !38
  %.06.i22 = select i1 %.not6.i21, float %167, float %166, !dbg !38
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not7.i23 = icmp eq i32 %168, 0, !dbg !38
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i22, float %152, float %145) #3, !dbg !38
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i22, float %152, float %145) #3, !dbg !38
  %.07.i24 = select i1 %.not7.i23, float %170, float %169, !dbg !38
  %171 = fneg float %152, !dbg !38
  %172 = select i1 %141, float %171, float %91, !dbg !38
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not8.i25 = icmp eq i32 %173, 0, !dbg !38
  %174 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i24, float %172, float %172) #3, !dbg !38
  %175 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i24, float %172, float %172) #3, !dbg !38
  %.08.i26 = select i1 %.not8.i25, float %175, float %174, !dbg !38
  br i1 %141, label %176, label %__nv_erff.exit31, !dbg !38

176:                                              ; preds = %__internal_fmad.exit.i12
  %177 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i26) #3, !dbg !38
  %178 = fsub float 1.000000e+00, %177, !dbg !38
  %179 = bitcast float %178 to i32, !dbg !38
  %180 = bitcast float %91 to i32, !dbg !38
  %181 = and i32 %180, -2147483648, !dbg !38
  %182 = or i32 %181, %179, !dbg !38
  %183 = bitcast i32 %182 to float, !dbg !38
  br label %__nv_erff.exit31, !dbg !38

__nv_erff.exit31:                                 ; preds = %__internal_fmad.exit.i12, %176
  %r.0.i27 = phi float [ %183, %176 ], [ %.08.i26, %__internal_fmad.exit.i12 ], !dbg !38
  %184 = fmul float %89, 5.000000e-01, !dbg !39
  %185 = fmul float %88, 5.000000e-01, !dbg !39
  %186 = fadd float %r.0.i, 1.000000e+00, !dbg !40
  %187 = fadd float %r.0.i27, 1.000000e+00, !dbg !40
  %188 = fmul float %185, %186, !dbg !41
  %189 = fmul float %184, %187, !dbg !41
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !42
  %191 = bitcast float %188 to i32, !dbg !43
  %192 = bitcast float %189 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %191, i32 %192, ptr addrspace(1) %190, i1 %15) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cua3rh5plvjtk6yd6v64swfzy5wrmeutyfvthaxahlrrcyzzmc2o.py", directory: "inductor_cache/ua")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_gelu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_gelu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_gelu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_gelu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 26, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 19, scope: !7)
!34 = !DILocation(line: 41, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 26, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 28, scope: !7)
!43 = !DILocation(line: 51, column: 40, scope: !7)
!44 = !DILocation(line: 51, column: 4, scope: !7)
