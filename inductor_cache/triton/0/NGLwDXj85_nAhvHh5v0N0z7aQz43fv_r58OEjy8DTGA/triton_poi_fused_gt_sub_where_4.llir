; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/73/c73asmxrt4db3q4atzvqwi3j5t7cneemjvognzk77zksrdi23qa6.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_gt_sub_where_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %7 = shl i32 %6, 2, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 3, !dbg !14
  %10 = or disjoint i32 %7, %9, !dbg !15
  %11 = icmp slt i32 %10, 4, !dbg !16
  %12 = sext i32 %10 to i64, !dbg !17
  %13 = getelementptr i64, ptr addrspace(1) %0, i64 %12, !dbg !17
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #3, !dbg !18
  %15 = lshr i64 %14, 61, !dbg !19
  %16 = and i64 %15, 4, !dbg !19
  %17 = add i64 %16, %14, !dbg !19
  %18 = icmp ugt i64 %17, 3, !dbg !20
  %.not1 = and i1 %11, %18, !dbg !21
  br i1 %.not1, label %19, label %20, !dbg !21

19:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 30, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  unreachable, !dbg !21

20:                                               ; preds = %5
  %21 = and i32 %8, 28, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %22 = shl i32 %10, 2, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %24, i64 %23, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #3, !dbg !25
  %27 = bitcast i32 %26 to float, !dbg !25
  %28 = fcmp ogt float %27, 0x3FD6666660000000, !dbg !26
  %29 = fadd float %27, 0xBFD6666660000000, !dbg !27
  %30 = select i1 %28, float %29, float %27, !dbg !28
  %31 = getelementptr i1, ptr addrspace(1) %2, i64 %12, !dbg !29
  %32 = zext i1 %28 to i8, !dbg !30
  %33 = icmp eq i32 %21, 0, !dbg !30
  %34 = and i1 %33, %11, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %32, ptr addrspace(1) %31, i1 %34) #3, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %12, !dbg !31
  %36 = bitcast float %30 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %36, ptr addrspace(1) %35, i1 %34) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c73asmxrt4db3q4atzvqwi3j5t7cneemjvognzk77zksrdi23qa6.py", directory: "inductor_cache/73")
!4 = !{ptr @triton_poi_fused_gt_sub_where_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_gt_sub_where_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_gt_sub_where_4", linkageName: "triton_poi_fused_gt_sub_where_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 30, scope: !11)
!18 = !DILocation(line: 25, column: 35, scope: !11)
!19 = !DILocation(line: 29, column: 32, scope: !11)
!20 = !DILocation(line: 30, column: 37, scope: !11)
!21 = !DILocation(line: 30, column: 60, scope: !11)
!22 = !DILocation(line: 31, column: 39, scope: !11)
!23 = !DILocation(line: 31, column: 37, scope: !11)
!24 = !DILocation(line: 31, column: 30, scope: !11)
!25 = !DILocation(line: 31, column: 44, scope: !11)
!26 = !DILocation(line: 33, column: 18, scope: !11)
!27 = !DILocation(line: 34, column: 18, scope: !11)
!28 = !DILocation(line: 35, column: 33, scope: !11)
!29 = !DILocation(line: 36, column: 25, scope: !11)
!30 = !DILocation(line: 36, column: 36, scope: !11)
!31 = !DILocation(line: 37, column: 25, scope: !11)
!32 = !DILocation(line: 37, column: 37, scope: !11)
!33 = !DILocation(line: 37, column: 4, scope: !11)
