; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_index_put_lift_fresh_linalg_vector_norm_mean_pow_rsub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 3, !dbg !11
  %7 = shl i32 %5, 4, !dbg !12
  %8 = and i32 %7, 192, !dbg !12
  %9 = or disjoint i32 %8, %6, !dbg !13
  %10 = zext nneg i32 %9 to i64, !dbg !14
  %11 = getelementptr float, ptr addrspace(1) %0, i64 %10, !dbg !14
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !15
  %13 = bitcast i32 %12 to float, !dbg !15
  %14 = or disjoint i32 %9, 16, !dbg !16
  %15 = zext nneg i32 %14 to i64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !17
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #4, !dbg !18
  %18 = bitcast i32 %17 to float, !dbg !18
  %19 = or disjoint i32 %9, 32, !dbg !19
  %20 = zext nneg i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !21
  %23 = bitcast i32 %22 to float, !dbg !21
  %24 = or disjoint i32 %9, 48, !dbg !22
  %25 = zext nneg i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = or disjoint i32 %9, 4, !dbg !25
  %30 = zext nneg i32 %29 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = or disjoint i32 %9, 20, !dbg !28
  %35 = zext nneg i32 %34 to i64, !dbg !29
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = or disjoint i32 %9, 36, !dbg !31
  %40 = zext nneg i32 %39 to i64, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !32
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !33
  %43 = bitcast i32 %42 to float, !dbg !33
  %44 = or disjoint i32 %9, 52, !dbg !34
  %45 = zext nneg i32 %44 to i64, !dbg !35
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !35
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #4, !dbg !36
  %48 = bitcast i32 %47 to float, !dbg !36
  %49 = or disjoint i32 %9, 8, !dbg !37
  %50 = zext nneg i32 %49 to i64, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !38
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !39
  %53 = bitcast i32 %52 to float, !dbg !39
  %54 = or disjoint i32 %9, 24, !dbg !40
  %55 = zext nneg i32 %54 to i64, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !41
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !42
  %58 = bitcast i32 %57 to float, !dbg !42
  %59 = or disjoint i32 %9, 40, !dbg !43
  %60 = zext nneg i32 %59 to i64, !dbg !44
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !44
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !45
  %63 = bitcast i32 %62 to float, !dbg !45
  %64 = or disjoint i32 %9, 56, !dbg !46
  %65 = zext nneg i32 %64 to i64, !dbg !47
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !47
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !48
  %68 = bitcast i32 %67 to float, !dbg !48
  %69 = or disjoint i32 %9, 12, !dbg !49
  %70 = zext nneg i32 %69 to i64, !dbg !50
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !50
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !51
  %73 = bitcast i32 %72 to float, !dbg !51
  %74 = or disjoint i32 %9, 28, !dbg !52
  %75 = zext nneg i32 %74 to i64, !dbg !53
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !53
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #4, !dbg !54
  %78 = bitcast i32 %77 to float, !dbg !54
  %79 = or disjoint i32 %9, 44, !dbg !55
  %80 = zext nneg i32 %79 to i64, !dbg !56
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !56
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #4, !dbg !57
  %83 = bitcast i32 %82 to float, !dbg !57
  %84 = or disjoint i32 %9, 60, !dbg !58
  %85 = zext nneg i32 %84 to i64, !dbg !59
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !59
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #4, !dbg !60
  %88 = bitcast i32 %87 to float, !dbg !60
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !61
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #4, !dbg !62
  %91 = bitcast i32 %90 to float, !dbg !62
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !63
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #4, !dbg !64
  %94 = bitcast i32 %93 to float, !dbg !64
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !65
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #4, !dbg !66
  %97 = bitcast i32 %96 to float, !dbg !66
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !67
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #4, !dbg !68
  %100 = bitcast i32 %99 to float, !dbg !68
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !69
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #4, !dbg !70
  %103 = bitcast i32 %102 to float, !dbg !70
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !71
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #4, !dbg !72
  %106 = bitcast i32 %105 to float, !dbg !72
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !73
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #4, !dbg !74
  %109 = bitcast i32 %108 to float, !dbg !74
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !75
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #4, !dbg !76
  %112 = bitcast i32 %111 to float, !dbg !76
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !77
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #4, !dbg !78
  %115 = bitcast i32 %114 to float, !dbg !78
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !79
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #4, !dbg !80
  %118 = bitcast i32 %117 to float, !dbg !80
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !81
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #4, !dbg !82
  %121 = bitcast i32 %120 to float, !dbg !82
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !83
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #4, !dbg !84
  %124 = bitcast i32 %123 to float, !dbg !84
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !85
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #4, !dbg !86
  %127 = bitcast i32 %126 to float, !dbg !86
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !87
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #4, !dbg !88
  %130 = bitcast i32 %129 to float, !dbg !88
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !89
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #4, !dbg !90
  %133 = bitcast i32 %132 to float, !dbg !90
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !91
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #4, !dbg !92
  %136 = bitcast i32 %135 to float, !dbg !92
  %137 = fadd float %13, %18, !dbg !93
  %138 = fadd float %137, %23, !dbg !94
  %139 = fadd float %138, %28, !dbg !95
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 4.000000e+00) #4, !dbg !96
  %141 = fmul float %140, %140, !dbg !97
  %142 = fadd float %33, %38, !dbg !98
  %143 = fadd float %142, %43, !dbg !99
  %144 = fadd float %143, %48, !dbg !100
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float 4.000000e+00) #4, !dbg !101
  %146 = fmul float %145, %145, !dbg !102
  %147 = fadd float %141, %146, !dbg !103
  %148 = fadd float %53, %58, !dbg !104
  %149 = fadd float %148, %63, !dbg !105
  %150 = fadd float %149, %68, !dbg !106
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 4.000000e+00) #4, !dbg !107
  %152 = fmul float %151, %151, !dbg !108
  %153 = fadd float %147, %152, !dbg !109
  %154 = fadd float %73, %78, !dbg !110
  %155 = fadd float %154, %83, !dbg !111
  %156 = fadd float %155, %88, !dbg !112
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 4.000000e+00) #4, !dbg !113
  %158 = fmul float %157, %157, !dbg !114
  %159 = fadd float %153, %158, !dbg !115
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !116
  %.not.i = icmp eq i32 %160, 0, !dbg !116
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !116
  %.not1.i = icmp eq i32 %161, 0, !dbg !116
  br i1 %.not.i, label %167, label %162, !dbg !116

162:                                              ; preds = %4
  br i1 %.not1.i, label %165, label %163, !dbg !116

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #4, !dbg !116
  br label %__nv_sqrtf.exit, !dbg !116

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #4, !dbg !116
  br label %__nv_sqrtf.exit, !dbg !116

167:                                              ; preds = %4
  br i1 %.not1.i, label %170, label %168, !dbg !116

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #4, !dbg !116
  br label %__nv_sqrtf.exit, !dbg !116

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #4, !dbg !116
  br label %__nv_sqrtf.exit, !dbg !116

__nv_sqrtf.exit:                                  ; preds = %163, %165, %168, %170
  %.0.i = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !116
  %172 = fadd float %91, %94, !dbg !117
  %173 = fadd float %172, %97, !dbg !118
  %174 = fadd float %173, %100, !dbg !119
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float 4.000000e+00) #4, !dbg !120
  %176 = fmul float %175, %175, !dbg !121
  %177 = fadd float %103, %106, !dbg !122
  %178 = fadd float %177, %109, !dbg !123
  %179 = fadd float %178, %112, !dbg !124
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float 4.000000e+00) #4, !dbg !125
  %181 = fmul float %180, %180, !dbg !126
  %182 = fadd float %176, %181, !dbg !127
  %183 = fadd float %115, %118, !dbg !128
  %184 = fadd float %183, %121, !dbg !129
  %185 = fadd float %184, %124, !dbg !130
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float 4.000000e+00) #4, !dbg !131
  %187 = fmul float %186, %186, !dbg !132
  %188 = fadd float %182, %187, !dbg !133
  %189 = fadd float %127, %130, !dbg !134
  %190 = fadd float %189, %133, !dbg !135
  %191 = fadd float %190, %136, !dbg !136
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float 4.000000e+00) #4, !dbg !137
  %193 = fmul float %192, %192, !dbg !138
  %194 = fadd float %188, %193, !dbg !139
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !140
  %.not.i1 = icmp eq i32 %195, 0, !dbg !140
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !140
  %.not1.i4 = icmp eq i32 %196, 0, !dbg !140
  br i1 %.not.i1, label %202, label %197, !dbg !140

197:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %200, label %198, !dbg !140

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #4, !dbg !140
  br label %__nv_sqrtf.exit5, !dbg !140

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #4, !dbg !140
  br label %__nv_sqrtf.exit5, !dbg !140

202:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %205, label %203, !dbg !140

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #4, !dbg !140
  br label %__nv_sqrtf.exit5, !dbg !140

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #4, !dbg !140
  br label %__nv_sqrtf.exit5, !dbg !140

__nv_sqrtf.exit5:                                 ; preds = %198, %200, %203, %205
  %.0.i3 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !140
  %207 = fsub float 4.000000e+00, %.0.i, !dbg !141
  %208 = fcmp olt float %207, 0.000000e+00, !dbg !142
  %209 = select i1 %208, float 0.000000e+00, float %207, !dbg !143
  %210 = fadd float %209, %.0.i3, !dbg !144
  %211 = fmul float %210, %210, !dbg !145
  %212 = bitcast float %211 to i32, !dbg !146
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 8, i32 31), !dbg !146
  %214 = bitcast i32 %213 to float, !dbg !146
  %215 = fadd float %211, %214, !dbg !150
  %216 = bitcast float %215 to i32, !dbg !146
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !146
  %218 = bitcast i32 %217 to float, !dbg !146
  %219 = fadd float %215, %218, !dbg !150
  %220 = bitcast float %219 to i32, !dbg !146
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 2, i32 31), !dbg !146
  %222 = bitcast i32 %221 to float, !dbg !146
  %223 = fadd float %219, %222, !dbg !150
  %224 = bitcast float %223 to i32, !dbg !146
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !146
  %226 = bitcast i32 %225 to float, !dbg !146
  %227 = fadd float %223, %226, !dbg !150
  %228 = and i32 %5, 63, !dbg !152
  %229 = icmp eq i32 %228, 0, !dbg !152
  %230 = bitcast float %227 to i32, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %230, ptr addrspace(1) %2, i1 %229) #4, !dbg !152
  ret void, !dbg !153
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cytstzv6lfzr5d77mxh24lzxtskyr4i3awdbirvabogkvngt4q4f.py", directory: "inductor_cache/yt")
!4 = !{ptr @triton_per_fused_add_index_put_lift_fresh_linalg_vector_norm_mean_pow_rsub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_index_put_lift_fresh_linalg_vector_norm_mean_pow_rsub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_index_put_lift_fresh_linalg_vector_norm_mean_pow_rsub_0", linkageName: "triton_per_fused_add_index_put_lift_fresh_linalg_vector_norm_mean_pow_rsub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 32, column: 38, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 43, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 34, column: 40, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 48, scope: !7)
!22 = !DILocation(line: 35, column: 40, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 48, scope: !7)
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 48, scope: !7)
!28 = !DILocation(line: 37, column: 41, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 49, scope: !7)
!31 = !DILocation(line: 38, column: 41, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 49, scope: !7)
!34 = !DILocation(line: 39, column: 41, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 49, scope: !7)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 31, scope: !7)
!39 = !DILocation(line: 40, column: 48, scope: !7)
!40 = !DILocation(line: 41, column: 41, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 49, scope: !7)
!43 = !DILocation(line: 42, column: 41, scope: !7)
!44 = !DILocation(line: 42, column: 31, scope: !7)
!45 = !DILocation(line: 42, column: 49, scope: !7)
!46 = !DILocation(line: 43, column: 41, scope: !7)
!47 = !DILocation(line: 43, column: 31, scope: !7)
!48 = !DILocation(line: 43, column: 49, scope: !7)
!49 = !DILocation(line: 44, column: 41, scope: !7)
!50 = !DILocation(line: 44, column: 31, scope: !7)
!51 = !DILocation(line: 44, column: 49, scope: !7)
!52 = !DILocation(line: 45, column: 41, scope: !7)
!53 = !DILocation(line: 45, column: 31, scope: !7)
!54 = !DILocation(line: 45, column: 49, scope: !7)
!55 = !DILocation(line: 46, column: 41, scope: !7)
!56 = !DILocation(line: 46, column: 31, scope: !7)
!57 = !DILocation(line: 46, column: 49, scope: !7)
!58 = !DILocation(line: 47, column: 41, scope: !7)
!59 = !DILocation(line: 47, column: 31, scope: !7)
!60 = !DILocation(line: 47, column: 49, scope: !7)
!61 = !DILocation(line: 48, column: 31, scope: !7)
!62 = !DILocation(line: 48, column: 44, scope: !7)
!63 = !DILocation(line: 49, column: 31, scope: !7)
!64 = !DILocation(line: 49, column: 49, scope: !7)
!65 = !DILocation(line: 50, column: 31, scope: !7)
!66 = !DILocation(line: 50, column: 49, scope: !7)
!67 = !DILocation(line: 51, column: 31, scope: !7)
!68 = !DILocation(line: 51, column: 49, scope: !7)
!69 = !DILocation(line: 52, column: 31, scope: !7)
!70 = !DILocation(line: 52, column: 48, scope: !7)
!71 = !DILocation(line: 53, column: 31, scope: !7)
!72 = !DILocation(line: 53, column: 49, scope: !7)
!73 = !DILocation(line: 54, column: 31, scope: !7)
!74 = !DILocation(line: 54, column: 49, scope: !7)
!75 = !DILocation(line: 55, column: 31, scope: !7)
!76 = !DILocation(line: 55, column: 49, scope: !7)
!77 = !DILocation(line: 56, column: 31, scope: !7)
!78 = !DILocation(line: 56, column: 48, scope: !7)
!79 = !DILocation(line: 57, column: 31, scope: !7)
!80 = !DILocation(line: 57, column: 49, scope: !7)
!81 = !DILocation(line: 58, column: 31, scope: !7)
!82 = !DILocation(line: 58, column: 49, scope: !7)
!83 = !DILocation(line: 59, column: 31, scope: !7)
!84 = !DILocation(line: 59, column: 49, scope: !7)
!85 = !DILocation(line: 60, column: 31, scope: !7)
!86 = !DILocation(line: 60, column: 49, scope: !7)
!87 = !DILocation(line: 61, column: 31, scope: !7)
!88 = !DILocation(line: 61, column: 49, scope: !7)
!89 = !DILocation(line: 62, column: 31, scope: !7)
!90 = !DILocation(line: 62, column: 49, scope: !7)
!91 = !DILocation(line: 63, column: 31, scope: !7)
!92 = !DILocation(line: 63, column: 49, scope: !7)
!93 = !DILocation(line: 64, column: 18, scope: !7)
!94 = !DILocation(line: 65, column: 18, scope: !7)
!95 = !DILocation(line: 66, column: 18, scope: !7)
!96 = !DILocation(line: 68, column: 18, scope: !7)
!97 = !DILocation(line: 69, column: 18, scope: !7)
!98 = !DILocation(line: 70, column: 20, scope: !7)
!99 = !DILocation(line: 71, column: 20, scope: !7)
!100 = !DILocation(line: 72, column: 20, scope: !7)
!101 = !DILocation(line: 73, column: 20, scope: !7)
!102 = !DILocation(line: 74, column: 20, scope: !7)
!103 = !DILocation(line: 75, column: 19, scope: !7)
!104 = !DILocation(line: 76, column: 20, scope: !7)
!105 = !DILocation(line: 77, column: 20, scope: !7)
!106 = !DILocation(line: 78, column: 20, scope: !7)
!107 = !DILocation(line: 79, column: 20, scope: !7)
!108 = !DILocation(line: 80, column: 20, scope: !7)
!109 = !DILocation(line: 81, column: 20, scope: !7)
!110 = !DILocation(line: 82, column: 20, scope: !7)
!111 = !DILocation(line: 83, column: 20, scope: !7)
!112 = !DILocation(line: 84, column: 20, scope: !7)
!113 = !DILocation(line: 85, column: 20, scope: !7)
!114 = !DILocation(line: 86, column: 20, scope: !7)
!115 = !DILocation(line: 87, column: 20, scope: !7)
!116 = !DILocation(line: 88, column: 27, scope: !7)
!117 = !DILocation(line: 93, column: 20, scope: !7)
!118 = !DILocation(line: 94, column: 20, scope: !7)
!119 = !DILocation(line: 95, column: 20, scope: !7)
!120 = !DILocation(line: 96, column: 20, scope: !7)
!121 = !DILocation(line: 97, column: 20, scope: !7)
!122 = !DILocation(line: 98, column: 20, scope: !7)
!123 = !DILocation(line: 99, column: 20, scope: !7)
!124 = !DILocation(line: 100, column: 20, scope: !7)
!125 = !DILocation(line: 101, column: 20, scope: !7)
!126 = !DILocation(line: 102, column: 20, scope: !7)
!127 = !DILocation(line: 103, column: 20, scope: !7)
!128 = !DILocation(line: 104, column: 20, scope: !7)
!129 = !DILocation(line: 105, column: 20, scope: !7)
!130 = !DILocation(line: 106, column: 20, scope: !7)
!131 = !DILocation(line: 107, column: 20, scope: !7)
!132 = !DILocation(line: 108, column: 20, scope: !7)
!133 = !DILocation(line: 109, column: 20, scope: !7)
!134 = !DILocation(line: 110, column: 20, scope: !7)
!135 = !DILocation(line: 111, column: 20, scope: !7)
!136 = !DILocation(line: 112, column: 20, scope: !7)
!137 = !DILocation(line: 113, column: 20, scope: !7)
!138 = !DILocation(line: 114, column: 20, scope: !7)
!139 = !DILocation(line: 115, column: 20, scope: !7)
!140 = !DILocation(line: 116, column: 27, scope: !7)
!141 = !DILocation(line: 89, column: 19, scope: !7)
!142 = !DILocation(line: 91, column: 20, scope: !7)
!143 = !DILocation(line: 92, column: 35, scope: !7)
!144 = !DILocation(line: 117, column: 20, scope: !7)
!145 = !DILocation(line: 118, column: 20, scope: !7)
!146 = !DILocation(line: 267, column: 36, scope: !147, inlinedAt: !149)
!147 = distinct !DILexicalBlockFile(scope: !7, file: !148, discriminator: 0)
!148 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!149 = !DILocation(line: 120, column: 26, scope: !7)
!150 = !DILocation(line: 256, column: 15, scope: !151, inlinedAt: !149)
!151 = distinct !DILexicalBlockFile(scope: !147, file: !148, discriminator: 0)
!152 = !DILocation(line: 121, column: 68, scope: !7)
!153 = !DILocation(line: 121, column: 4, scope: !7)
