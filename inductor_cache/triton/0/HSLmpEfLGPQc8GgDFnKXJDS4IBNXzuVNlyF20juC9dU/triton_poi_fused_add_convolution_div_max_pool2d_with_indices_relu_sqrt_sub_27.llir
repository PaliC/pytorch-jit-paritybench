; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = and i32 %9, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %12, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = icmp slt i32 %17, 16, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %19 = sdiv i32 %.frozen, 512, !dbg !16
  %20 = mul i32 %19, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = sdiv i32 %15, 512, !dbg !16
  %22 = sdiv i32 %16, 512, !dbg !16
  %23 = shl i32 %17, 9, !dbg !18
  %24 = add i32 %.decomposed, %23, !dbg !19
  %25 = shl i32 %19, 13, !dbg !20
  %26 = add i32 %24, %25, !dbg !21
  %27 = sext i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %18) #4, !dbg !23
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !23
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !23
  %32 = bitcast i32 %30 to float, !dbg !23
  %33 = bitcast i32 %31 to float, !dbg !23
  %34 = sext i32 %.decomposed to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !25
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %39 = bitcast i32 %37 to float, !dbg !25
  %40 = bitcast i32 %38 to float, !dbg !25
  %41 = shl nsw i32 %21, 4, !dbg !26
  %42 = shl nsw i32 %22, 4, !dbg !26
  %43 = add i32 %41, %17, !dbg !27
  %44 = add i32 %42, %17, !dbg !27
  %45 = sext i32 %43 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !28
  %47 = sext i32 %44 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #4, !dbg !29
  %50 = bitcast i32 %49 to float, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %18) #4, !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = fadd float %32, %39, !dbg !30
  %54 = fadd float %33, %40, !dbg !30
  %55 = fcmp olt float %53, 0.000000e+00, !dbg !31
  %56 = fcmp olt float %54, 0.000000e+00, !dbg !31
  %57 = select i1 %55, float 0.000000e+00, float %53, !dbg !35
  %58 = select i1 %56, float 0.000000e+00, float %54, !dbg !35
  %.idx = shl nuw nsw i32 %11, 3, !dbg !35
  %59 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !35
  %60 = bitcast float %57 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #4, !dbg !35
  %61 = shl nuw nsw i32 %11, 1, !dbg !35
  %62 = or disjoint i32 %61, 2, !dbg !35
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !35
  %64 = bitcast float %58 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %.idx1 = shl nuw nsw i32 %12, 3, !dbg !35
  %65 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !35
  %66 = load float, ptr addrspace(3) %65, align 8, !dbg !35
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !35
  %67 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !35
  %68 = load float, ptr addrspace(3) %67, align 8, !dbg !35
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %69, 0, !dbg !36
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %70, 0, !dbg !36
  br i1 %.not.i, label %76, label %71, !dbg !36

71:                                               ; preds = %6
  br i1 %.not1.i, label %74, label %72, !dbg !36

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

76:                                               ; preds = %6
  br i1 %.not1.i, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !36
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i3 = icmp eq i32 %81, 0, !dbg !36
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i6 = icmp eq i32 %82, 0, !dbg !36
  br i1 %.not.i3, label %88, label %83, !dbg !36

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

__nv_sqrtf.exit7:                                 ; preds = %84, %86, %89, %91
  %.0.i5 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !36
  %93 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !37
  %94 = fadd float %.0.i5, 0x3DDB7CDFE0000000, !dbg !37
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %93) #4, !dbg !38
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %94) #4, !dbg !38
  %97 = shl i32 %15, 4, !dbg !39
  %98 = shl i32 %16, 4, !dbg !39
  %99 = add i32 %97, %17, !dbg !40
  %100 = add i32 %98, %17, !dbg !40
  %101 = sext i32 %99 to i64, !dbg !41
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !41
  %103 = sext i32 %100 to i64, !dbg !41
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !41
  %105 = bitcast float %95 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %102, i1 %18) #4, !dbg !42
  %106 = bitcast float %96 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %104, i1 %18) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5mifbgakz566ok727nnv5bs5mtq7t4wjqyjnrjvbuexlm72gafo.py", directory: "inductor_cache/5m")
!4 = !{ptr @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27", linkageName: "triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 54, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 38, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 43, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 37, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 38, column: 26, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 33, scope: !7)
!40 = !DILocation(line: 42, column: 30, scope: !7)
!41 = !DILocation(line: 42, column: 25, scope: !7)
!42 = !DILocation(line: 42, column: 44, scope: !7)
!43 = !DILocation(line: 42, column: 4, scope: !7)
