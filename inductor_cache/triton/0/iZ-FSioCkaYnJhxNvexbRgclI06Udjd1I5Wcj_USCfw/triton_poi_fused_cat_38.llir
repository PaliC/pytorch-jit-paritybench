; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = sdiv i32 %18, 1024, !dbg !14
  %20 = srem i32 %19, 576, !dbg !15
  %.frozen9 = freeze i32 %18, !dbg !16
  %21 = sdiv i32 %.frozen9, 589824, !dbg !16
  %.frozen = freeze i32 %18, !dbg !17
  %22 = sdiv i32 %.frozen, 32, !dbg !17
  %23 = srem i32 %22, 32, !dbg !18
  %24 = mul i32 %22, 32, !dbg !19
  %.decomposed = sub i32 %.frozen, %24, !dbg !19
  %25 = icmp slt i32 %20, 64, !dbg !20
  %26 = mul i32 %21, 589824, !dbg !21
  %srem.decomposed = sub i32 %.frozen9, %26, !dbg !21
  %27 = shl nsw i32 %21, 16, !dbg !22
  %28 = add nsw i32 %27, %srem.decomposed, !dbg !23
  %29 = sext i32 %28 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !25
  %32 = and i32 %20, -64, !dbg !26
  %33 = icmp eq i32 %32, 64, !dbg !26
  %34 = add nsw i32 %srem.decomposed, -65536, !dbg !27
  %35 = add nsw i32 %34, %27, !dbg !28
  %36 = sext i32 %35 to i64, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !29
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !30
  %39 = icmp eq i32 %32, 128, !dbg !31
  %40 = add nsw i32 %srem.decomposed, -131072, !dbg !32
  %41 = add nsw i32 %40, %27, !dbg !33
  %42 = sext i32 %41 to i64, !dbg !34
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !34
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !35
  %45 = add nsw i32 %20, -192, !dbg !36
  %46 = icmp ult i32 %45, 128, !dbg !36
  %47 = shl nsw i32 %21, 17, !dbg !37
  %48 = add nsw i32 %srem.decomposed, -196608, !dbg !38
  %49 = add nsw i32 %48, %47, !dbg !39
  %50 = sext i32 %49 to i64, !dbg !40
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !40
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !41
  %53 = icmp sgt i32 %20, 319, !dbg !42
  %54 = sext i32 %23 to i64, !dbg !43
  %55 = getelementptr i64, ptr addrspace(1) %4, i64 %54, !dbg !43
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %55, i1 %53, i1 %53) #3, !dbg !44
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %55, i1 %53, i1 %53) #3, !dbg !44
  %58 = lshr i64 %56, 59, !dbg !45
  %59 = and i64 %58, 16, !dbg !45
  %60 = add i64 %59, %56, !dbg !45
  %61 = sext i32 %.decomposed to i64, !dbg !46
  %62 = getelementptr i64, ptr addrspace(1) %4, i64 %61, !dbg !46
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %62, i1 %53, i1 %53, i1 %53) #3, !dbg !47
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !47
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !47
  %66 = lshr i64 %64, 59, !dbg !48
  %67 = and i64 %66, 16, !dbg !48
  %68 = lshr i64 %65, 59, !dbg !48
  %69 = and i64 %68, 16, !dbg !48
  %70 = shl i64 %60, 4, !dbg !49
  %71 = add nsw i32 %20, -320, !dbg !50
  %72 = shl nsw i32 %71, 8, !dbg !51
  %73 = sext i32 %72 to i64, !dbg !52
  %74 = sext i32 %27 to i64, !dbg !53
  %75 = getelementptr float, ptr addrspace(1) %5, i64 %64, !dbg !54
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %67, !dbg !54
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %70, !dbg !54
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %73, !dbg !54
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %74, !dbg !54
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !54
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %69, !dbg !54
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %70, !dbg !54
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %73, !dbg !54
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %74, !dbg !54
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %53, i32 0, i1 %53) #3, !dbg !55
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %53, i32 0, i1 %53) #3, !dbg !55
  %87 = sext i32 %71 to i64, !dbg !56
  %88 = getelementptr float, ptr addrspace(1) %6, i64 %87, !dbg !56
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %53, i32 0, i1 %53) #3, !dbg !57
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %53, i32 0, i1 %53) #3, !dbg !57
  %91 = getelementptr float, ptr addrspace(1) %7, i64 %87, !dbg !58
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %53, i32 0, i1 %53) #3, !dbg !59
  %93 = bitcast i32 %92 to float, !dbg !59
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %53, i32 0, i1 %53) #3, !dbg !59
  %95 = bitcast i32 %94 to float, !dbg !59
  %96 = fadd float %93, 0x3EE4F8B580000000, !dbg !60
  %97 = fadd float %95, 0x3EE4F8B580000000, !dbg !60
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i = icmp eq i32 %98, 0, !dbg !61
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i = icmp eq i32 %99, 0, !dbg !61
  br i1 %.not.i, label %105, label %100, !dbg !61

100:                                              ; preds = %12
  br i1 %.not1.i, label %103, label %101, !dbg !61

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

105:                                              ; preds = %12
  br i1 %.not1.i, label %108, label %106, !dbg !61

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %101, %103, %106, %108
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !61
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i1 = icmp eq i32 %110, 0, !dbg !61
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i4 = icmp eq i32 %111, 0, !dbg !61
  br i1 %.not.i1, label %117, label %112, !dbg !61

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !61

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %120, label %118, !dbg !61

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

__nv_sqrtf.exit5:                                 ; preds = %113, %115, %118, %120
  %.0.i3 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !61
  %122 = bitcast i32 %86 to float, !dbg !55
  %123 = bitcast i32 %90 to float, !dbg !57
  %124 = fsub float %122, %123, !dbg !62
  %125 = bitcast i32 %85 to float, !dbg !55
  %126 = bitcast i32 %89 to float, !dbg !57
  %127 = fsub float %125, %126, !dbg !62
  %128 = extractvalue { i32, i32 } %52, 1, !dbg !41
  %129 = extractvalue { i32, i32 } %52, 0, !dbg !41
  %130 = extractvalue { i32, i32 } %44, 1, !dbg !35
  %131 = extractvalue { i32, i32 } %44, 0, !dbg !35
  %132 = extractvalue { i32, i32 } %38, 1, !dbg !30
  %133 = extractvalue { i32, i32 } %38, 0, !dbg !30
  %134 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %135 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !63
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !63
  %138 = fmul float %127, %136, !dbg !64
  %139 = fmul float %124, %137, !dbg !64
  %140 = getelementptr float, ptr addrspace(1) %8, i64 %87, !dbg !65
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %53, i32 0, i1 %53) #3, !dbg !66
  %142 = bitcast i32 %141 to float, !dbg !66
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %53, i32 0, i1 %53) #3, !dbg !66
  %144 = bitcast i32 %143 to float, !dbg !66
  %145 = fmul float %138, %142, !dbg !67
  %146 = fmul float %139, %144, !dbg !67
  %147 = getelementptr float, ptr addrspace(1) %9, i64 %87, !dbg !68
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %53, i32 0, i1 %53) #3, !dbg !69
  %149 = bitcast i32 %148 to float, !dbg !69
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %53, i32 0, i1 %53) #3, !dbg !69
  %151 = bitcast i32 %150 to float, !dbg !69
  %152 = fadd float %145, %149, !dbg !70
  %153 = fadd float %146, %151, !dbg !70
  %154 = fcmp olt float %152, 0.000000e+00, !dbg !71
  %155 = fcmp olt float %153, 0.000000e+00, !dbg !71
  %156 = select i1 %154, float 0.000000e+00, float %152, !dbg !75
  %157 = select i1 %155, float 0.000000e+00, float %153, !dbg !75
  %158 = sext i32 %18 to i64, !dbg !76
  %159 = getelementptr float, ptr addrspace(1) %10, i64 %158, !dbg !76
  %160 = bitcast float %156 to i32, !dbg !77
  %161 = select i1 %53, i32 %160, i32 0, !dbg !78
  %162 = select i1 %46, i32 %129, i32 %161, !dbg !79
  %163 = select i1 %39, i32 %131, i32 %162, !dbg !80
  %164 = select i1 %33, i32 %133, i32 %163, !dbg !81
  %165 = select i1 %25, i32 %135, i32 %164, !dbg !82
  %166 = bitcast float %157 to i32, !dbg !77
  %167 = select i1 %53, i32 %166, i32 0, !dbg !78
  %168 = select i1 %46, i32 %128, i32 %167, !dbg !79
  %169 = select i1 %39, i32 %130, i32 %168, !dbg !80
  %170 = select i1 %33, i32 %132, i32 %169, !dbg !81
  %171 = select i1 %25, i32 %134, i32 %170, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %171, ptr addrspace(1) %159, i1 true) #3, !dbg !77
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgqmizeac2xltiwhjelb52jyy7pujdt5adaaxmuigp44knihnmbh.py", directory: "inductor_cache/gq")
!4 = !{ptr @triton_poi_fused_cat_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_38, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_38", linkageName: "triton_poi_fused_cat_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 53, scope: !7)
!23 = !DILocation(line: 35, column: 47, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 58, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 36, scope: !7)
!28 = !DILocation(line: 40, column: 56, scope: !7)
!29 = !DILocation(line: 40, column: 31, scope: !7)
!30 = !DILocation(line: 40, column: 67, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 45, column: 57, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 68, scope: !7)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 50, column: 64, scope: !7)
!38 = !DILocation(line: 50, column: 36, scope: !7)
!39 = !DILocation(line: 50, column: 57, scope: !7)
!40 = !DILocation(line: 50, column: 31, scope: !7)
!41 = !DILocation(line: 50, column: 69, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 31, scope: !7)
!44 = !DILocation(line: 54, column: 36, scope: !7)
!45 = !DILocation(line: 58, column: 35, scope: !7)
!46 = !DILocation(line: 59, column: 31, scope: !7)
!47 = !DILocation(line: 59, column: 36, scope: !7)
!48 = !DILocation(line: 62, column: 35, scope: !7)
!49 = !DILocation(line: 63, column: 42, scope: !7)
!50 = !DILocation(line: 63, column: 64, scope: !7)
!51 = !DILocation(line: 63, column: 55, scope: !7)
!52 = !DILocation(line: 63, column: 50, scope: !7)
!53 = !DILocation(line: 63, column: 70, scope: !7)
!54 = !DILocation(line: 63, column: 31, scope: !7)
!55 = !DILocation(line: 63, column: 81, scope: !7)
!56 = !DILocation(line: 64, column: 31, scope: !7)
!57 = !DILocation(line: 64, column: 45, scope: !7)
!58 = !DILocation(line: 66, column: 31, scope: !7)
!59 = !DILocation(line: 66, column: 45, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 69, column: 27, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 74, column: 20, scope: !7)
!65 = !DILocation(line: 75, column: 31, scope: !7)
!66 = !DILocation(line: 75, column: 45, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 77, column: 31, scope: !7)
!69 = !DILocation(line: 77, column: 45, scope: !7)
!70 = !DILocation(line: 78, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 80, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 87, column: 25, scope: !7)
!77 = !DILocation(line: 87, column: 37, scope: !7)
!78 = !DILocation(line: 82, column: 35, scope: !7)
!79 = !DILocation(line: 83, column: 35, scope: !7)
!80 = !DILocation(line: 84, column: 35, scope: !7)
!81 = !DILocation(line: 85, column: 34, scope: !7)
!82 = !DILocation(line: 86, column: 33, scope: !7)
!83 = !DILocation(line: 87, column: 4, scope: !7)
