; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 2, !dbg !13
  %17 = or disjoint i32 %15, 512, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = sdiv i32 %17, 64, !dbg !14
  %20 = srem i32 %18, 64, !dbg !15
  %21 = srem i32 %19, 64, !dbg !15
  %22 = mul i32 %18, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = srem i32 %16, 64, !dbg !16
  %24 = sdiv i32 %15, 4096, !dbg !17
  %25 = sdiv i32 %17, 4096, !dbg !17
  %26 = srem i32 %24, 19, !dbg !18
  %27 = srem i32 %25, 19, !dbg !18
  %28 = sdiv i32 %15, 77824, !dbg !19
  %29 = sdiv i32 %17, 77824, !dbg !19
  %30 = sext i32 %20 to i64, !dbg !20
  %31 = getelementptr i64, ptr addrspace(1) %1, i64 %30, !dbg !20
  %32 = sext i32 %21 to i64, !dbg !20
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !20
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %42 = sext i32 %.decomposed to i64, !dbg !22
  %43 = getelementptr i64, ptr addrspace(1) %2, i64 %42, !dbg !22
  %44 = sext i32 %23 to i64, !dbg !22
  %45 = getelementptr i64, ptr addrspace(1) %2, i64 %44, !dbg !22
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !23
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !23
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !23
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !23
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !23
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !23
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !23
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !23
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !23
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !23
  %58 = getelementptr i64, ptr addrspace(1) %4, i64 %42, !dbg !24
  %59 = getelementptr i64, ptr addrspace(1) %4, i64 %44, !dbg !24
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !25
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !25
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !25
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !25
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !25
  %66 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %67 = extractvalue { i64, i64 } %66, 0, !dbg !25
  %68 = extractvalue { i64, i64 } %66, 1, !dbg !25
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !25
  %70 = extractvalue { i64, i64 } %69, 0, !dbg !25
  %71 = extractvalue { i64, i64 } %69, 1, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !27
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !27
  %83 = getelementptr i64, ptr addrspace(1) %6, i64 %30, !dbg !28
  %84 = getelementptr i64, ptr addrspace(1) %6, i64 %32, !dbg !28
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !29
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !29
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !29
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !31
  %110 = bitcast i32 %109 to float, !dbg !31
  %111 = lshr i64 %34, 60, !dbg !32
  %112 = and i64 %111, 8, !dbg !32
  %113 = add i64 %112, %34, !dbg !32
  %114 = lshr i64 %38, 60, !dbg !32
  %115 = and i64 %114, 8, !dbg !32
  %116 = add i64 %115, %38, !dbg !32
  %117 = lshr i64 %47, 60, !dbg !33
  %118 = and i64 %117, 8, !dbg !33
  %119 = add i64 %118, %47, !dbg !33
  %120 = lshr i64 %48, 60, !dbg !33
  %121 = and i64 %120, 8, !dbg !33
  %122 = add i64 %121, %48, !dbg !33
  %123 = lshr i64 %50, 60, !dbg !33
  %124 = and i64 %123, 8, !dbg !33
  %125 = add i64 %124, %50, !dbg !33
  %126 = lshr i64 %51, 60, !dbg !33
  %127 = and i64 %126, 8, !dbg !33
  %128 = add i64 %127, %51, !dbg !33
  %129 = lshr i64 %53, 60, !dbg !33
  %130 = and i64 %129, 8, !dbg !33
  %131 = add i64 %130, %53, !dbg !33
  %132 = lshr i64 %54, 60, !dbg !33
  %133 = and i64 %132, 8, !dbg !33
  %134 = add i64 %133, %54, !dbg !33
  %135 = lshr i64 %56, 60, !dbg !33
  %136 = and i64 %135, 8, !dbg !33
  %137 = add i64 %136, %56, !dbg !33
  %138 = lshr i64 %57, 60, !dbg !33
  %139 = and i64 %138, 8, !dbg !33
  %140 = add i64 %139, %57, !dbg !33
  %141 = sext i32 %26 to i64, !dbg !34
  %142 = sext i32 %27 to i64, !dbg !34
  %143 = mul i64 %113, 152, !dbg !35
  %144 = mul i64 %116, 152, !dbg !35
  %145 = mul nsw i32 %28, 1216, !dbg !36
  %146 = mul nsw i32 %29, 1216, !dbg !36
  %147 = sext i32 %145 to i64, !dbg !37
  %148 = sext i32 %146 to i64, !dbg !37
  %.idx = mul i64 %119, 76, !dbg !38
  %149 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !38
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %141, !dbg !38
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %143, !dbg !38
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %147, !dbg !38
  %.idx1 = mul i64 %122, 76, !dbg !38
  %153 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !38
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %141, !dbg !38
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %143, !dbg !38
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %147, !dbg !38
  %.idx2 = mul i64 %125, 76, !dbg !38
  %157 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx2, !dbg !38
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %141, !dbg !38
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %143, !dbg !38
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %147, !dbg !38
  %.idx3 = mul i64 %128, 76, !dbg !38
  %161 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx3, !dbg !38
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %141, !dbg !38
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %143, !dbg !38
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %147, !dbg !38
  %.idx4 = mul i64 %131, 76, !dbg !38
  %165 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx4, !dbg !38
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %142, !dbg !38
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %144, !dbg !38
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %148, !dbg !38
  %.idx5 = mul i64 %134, 76, !dbg !38
  %169 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !38
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %142, !dbg !38
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %144, !dbg !38
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %148, !dbg !38
  %.idx6 = mul i64 %137, 76, !dbg !38
  %173 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx6, !dbg !38
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %142, !dbg !38
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %144, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %148, !dbg !38
  %.idx7 = mul i64 %140, 76, !dbg !38
  %177 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx7, !dbg !38
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %142, !dbg !38
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %144, !dbg !38
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %148, !dbg !38
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #1, !dbg !39
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !39
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #1, !dbg !39
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #1, !dbg !39
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !39
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #1, !dbg !39
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #1, !dbg !39
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #1, !dbg !39
  %189 = lshr i64 %61, 60, !dbg !40
  %190 = and i64 %189, 8, !dbg !40
  %191 = add i64 %190, %61, !dbg !40
  %192 = lshr i64 %62, 60, !dbg !40
  %193 = and i64 %192, 8, !dbg !40
  %194 = add i64 %193, %62, !dbg !40
  %195 = lshr i64 %64, 60, !dbg !40
  %196 = and i64 %195, 8, !dbg !40
  %197 = add i64 %196, %64, !dbg !40
  %198 = lshr i64 %65, 60, !dbg !40
  %199 = and i64 %198, 8, !dbg !40
  %200 = add i64 %199, %65, !dbg !40
  %201 = lshr i64 %67, 60, !dbg !40
  %202 = and i64 %201, 8, !dbg !40
  %203 = add i64 %202, %67, !dbg !40
  %204 = lshr i64 %68, 60, !dbg !40
  %205 = and i64 %204, 8, !dbg !40
  %206 = add i64 %205, %68, !dbg !40
  %207 = lshr i64 %70, 60, !dbg !40
  %208 = and i64 %207, 8, !dbg !40
  %209 = add i64 %208, %70, !dbg !40
  %210 = lshr i64 %71, 60, !dbg !40
  %211 = and i64 %210, 8, !dbg !40
  %212 = add i64 %211, %71, !dbg !40
  %.idx8 = mul i64 %191, 76, !dbg !41
  %213 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx8, !dbg !41
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %141, !dbg !41
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %143, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %147, !dbg !41
  %.idx9 = mul i64 %194, 76, !dbg !41
  %217 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx9, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %141, !dbg !41
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %143, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %147, !dbg !41
  %.idx10 = mul i64 %197, 76, !dbg !41
  %221 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx10, !dbg !41
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %141, !dbg !41
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %143, !dbg !41
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %147, !dbg !41
  %.idx11 = mul i64 %200, 76, !dbg !41
  %225 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx11, !dbg !41
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %141, !dbg !41
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %143, !dbg !41
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %147, !dbg !41
  %.idx12 = mul i64 %203, 76, !dbg !41
  %229 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx12, !dbg !41
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %142, !dbg !41
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %144, !dbg !41
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %148, !dbg !41
  %.idx13 = mul i64 %206, 76, !dbg !41
  %233 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx13, !dbg !41
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %142, !dbg !41
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %144, !dbg !41
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %148, !dbg !41
  %.idx14 = mul i64 %209, 76, !dbg !41
  %237 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx14, !dbg !41
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %142, !dbg !41
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %144, !dbg !41
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %148, !dbg !41
  %.idx15 = mul i64 %212, 76, !dbg !41
  %241 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx15, !dbg !41
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %142, !dbg !41
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %144, !dbg !41
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %148, !dbg !41
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #1, !dbg !42
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !42
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #1, !dbg !42
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #1, !dbg !42
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #1, !dbg !42
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #1, !dbg !42
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #1, !dbg !42
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !42
  %253 = lshr i64 %85, 60, !dbg !43
  %254 = and i64 %253, 8, !dbg !43
  %255 = add i64 %254, %85, !dbg !43
  %256 = lshr i64 %89, 60, !dbg !43
  %257 = and i64 %256, 8, !dbg !43
  %258 = add i64 %257, %89, !dbg !43
  %259 = mul i64 %255, 152, !dbg !44
  %260 = mul i64 %258, 152, !dbg !44
  %261 = getelementptr float, ptr addrspace(1) %150, i64 %259, !dbg !45
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %147, !dbg !45
  %263 = getelementptr float, ptr addrspace(1) %154, i64 %259, !dbg !45
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %147, !dbg !45
  %265 = getelementptr float, ptr addrspace(1) %158, i64 %259, !dbg !45
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %147, !dbg !45
  %267 = getelementptr float, ptr addrspace(1) %162, i64 %259, !dbg !45
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %147, !dbg !45
  %269 = getelementptr float, ptr addrspace(1) %166, i64 %260, !dbg !45
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %148, !dbg !45
  %271 = getelementptr float, ptr addrspace(1) %170, i64 %260, !dbg !45
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %148, !dbg !45
  %273 = getelementptr float, ptr addrspace(1) %174, i64 %260, !dbg !45
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %148, !dbg !45
  %275 = getelementptr float, ptr addrspace(1) %178, i64 %260, !dbg !45
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %148, !dbg !45
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #1, !dbg !46
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #1, !dbg !46
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #1, !dbg !46
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !46
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !46
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !46
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #1, !dbg !46
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !46
  %285 = getelementptr float, ptr addrspace(1) %214, i64 %259, !dbg !47
  %286 = getelementptr float, ptr addrspace(1) %285, i64 %147, !dbg !47
  %287 = getelementptr float, ptr addrspace(1) %218, i64 %259, !dbg !47
  %288 = getelementptr float, ptr addrspace(1) %287, i64 %147, !dbg !47
  %289 = getelementptr float, ptr addrspace(1) %222, i64 %259, !dbg !47
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %147, !dbg !47
  %291 = getelementptr float, ptr addrspace(1) %226, i64 %259, !dbg !47
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %147, !dbg !47
  %293 = getelementptr float, ptr addrspace(1) %230, i64 %260, !dbg !47
  %294 = getelementptr float, ptr addrspace(1) %293, i64 %148, !dbg !47
  %295 = getelementptr float, ptr addrspace(1) %234, i64 %260, !dbg !47
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %148, !dbg !47
  %297 = getelementptr float, ptr addrspace(1) %238, i64 %260, !dbg !47
  %298 = getelementptr float, ptr addrspace(1) %297, i64 %148, !dbg !47
  %299 = getelementptr float, ptr addrspace(1) %242, i64 %260, !dbg !47
  %300 = getelementptr float, ptr addrspace(1) %299, i64 %148, !dbg !47
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #1, !dbg !48
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !48
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !48
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #1, !dbg !48
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #1, !dbg !48
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 true) #1, !dbg !48
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #1, !dbg !48
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #1, !dbg !48
  %309 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !46
  %310 = insertelement <2 x i32> %309, i32 %181, i64 1, !dbg !46
  %311 = bitcast <2 x i32> %310 to <2 x float>, !dbg !46
  %312 = insertelement <2 x i32> poison, i32 %301, i64 0, !dbg !48
  %313 = insertelement <2 x i32> %312, i32 %245, i64 1, !dbg !48
  %314 = bitcast <2 x i32> %313 to <2 x float>, !dbg !48
  %315 = fsub <2 x float> %314, %311, !dbg !49
  %316 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !50
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !50
  %318 = shufflevector <2 x float> %317, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %319 = fmul <2 x float> %315, %318, !dbg !50
  %320 = fadd <2 x float> %319, %311, !dbg !51
  %321 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !46
  %322 = insertelement <2 x i32> %321, i32 %182, i64 1, !dbg !46
  %323 = bitcast <2 x i32> %322 to <2 x float>, !dbg !46
  %324 = insertelement <2 x i32> poison, i32 %302, i64 0, !dbg !48
  %325 = insertelement <2 x i32> %324, i32 %246, i64 1, !dbg !48
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !48
  %327 = fsub <2 x float> %326, %323, !dbg !49
  %328 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !50
  %329 = bitcast <2 x i32> %328 to <2 x float>, !dbg !50
  %330 = shufflevector <2 x float> %329, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %331 = fmul <2 x float> %327, %330, !dbg !50
  %332 = fadd <2 x float> %331, %323, !dbg !51
  %333 = insertelement <2 x i32> poison, i32 %279, i64 0, !dbg !46
  %334 = insertelement <2 x i32> %333, i32 %183, i64 1, !dbg !46
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !46
  %336 = insertelement <2 x i32> poison, i32 %303, i64 0, !dbg !48
  %337 = insertelement <2 x i32> %336, i32 %247, i64 1, !dbg !48
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !48
  %339 = fsub <2 x float> %338, %335, !dbg !49
  %340 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !50
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !50
  %342 = shufflevector <2 x float> %341, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %343 = fmul <2 x float> %339, %342, !dbg !50
  %344 = fadd <2 x float> %343, %335, !dbg !51
  %345 = insertelement <2 x i32> poison, i32 %280, i64 0, !dbg !46
  %346 = insertelement <2 x i32> %345, i32 %184, i64 1, !dbg !46
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !46
  %348 = insertelement <2 x i32> poison, i32 %304, i64 0, !dbg !48
  %349 = insertelement <2 x i32> %348, i32 %248, i64 1, !dbg !48
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !48
  %351 = fsub <2 x float> %350, %347, !dbg !49
  %352 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !50
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !50
  %354 = shufflevector <2 x float> %353, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %355 = fmul <2 x float> %351, %354, !dbg !50
  %356 = fadd <2 x float> %355, %347, !dbg !51
  %357 = insertelement <2 x i32> poison, i32 %281, i64 0, !dbg !46
  %358 = insertelement <2 x i32> %357, i32 %185, i64 1, !dbg !46
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !46
  %360 = insertelement <2 x i32> poison, i32 %305, i64 0, !dbg !48
  %361 = insertelement <2 x i32> %360, i32 %249, i64 1, !dbg !48
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !48
  %363 = fsub <2 x float> %362, %359, !dbg !49
  %364 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !50
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !50
  %366 = shufflevector <2 x float> %365, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %367 = fmul <2 x float> %363, %366, !dbg !50
  %368 = fadd <2 x float> %367, %359, !dbg !51
  %369 = insertelement <2 x i32> poison, i32 %282, i64 0, !dbg !46
  %370 = insertelement <2 x i32> %369, i32 %186, i64 1, !dbg !46
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !46
  %372 = insertelement <2 x i32> poison, i32 %306, i64 0, !dbg !48
  %373 = insertelement <2 x i32> %372, i32 %250, i64 1, !dbg !48
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !48
  %375 = fsub <2 x float> %374, %371, !dbg !49
  %376 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !50
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !50
  %378 = shufflevector <2 x float> %377, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %379 = fmul <2 x float> %375, %378, !dbg !50
  %380 = fadd <2 x float> %379, %371, !dbg !51
  %381 = insertelement <2 x i32> poison, i32 %283, i64 0, !dbg !46
  %382 = insertelement <2 x i32> %381, i32 %187, i64 1, !dbg !46
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !46
  %384 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !48
  %385 = insertelement <2 x i32> %384, i32 %251, i64 1, !dbg !48
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !48
  %387 = fsub <2 x float> %386, %383, !dbg !49
  %388 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !50
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !50
  %390 = shufflevector <2 x float> %389, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %391 = fmul <2 x float> %387, %390, !dbg !50
  %392 = fadd <2 x float> %391, %383, !dbg !51
  %393 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !46
  %394 = insertelement <2 x i32> %393, i32 %188, i64 1, !dbg !46
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !46
  %396 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !48
  %397 = insertelement <2 x i32> %396, i32 %252, i64 1, !dbg !48
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !48
  %399 = fsub <2 x float> %398, %395, !dbg !49
  %400 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !50
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !50
  %402 = shufflevector <2 x float> %401, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %403 = fmul <2 x float> %399, %402, !dbg !50
  %404 = fadd <2 x float> %403, %395, !dbg !51
  %405 = extractelement <2 x float> %320, i64 0, !dbg !52
  %406 = extractelement <2 x float> %320, i64 1, !dbg !53
  %407 = fsub float %405, %406, !dbg !52
  %408 = extractelement <2 x float> %332, i64 0, !dbg !52
  %409 = extractelement <2 x float> %332, i64 1, !dbg !53
  %410 = fsub float %408, %409, !dbg !52
  %411 = extractelement <2 x float> %344, i64 0, !dbg !52
  %412 = extractelement <2 x float> %344, i64 1, !dbg !53
  %413 = fsub float %411, %412, !dbg !52
  %414 = extractelement <2 x float> %356, i64 0, !dbg !52
  %415 = extractelement <2 x float> %356, i64 1, !dbg !53
  %416 = fsub float %414, %415, !dbg !52
  %417 = extractelement <2 x float> %368, i64 0, !dbg !52
  %418 = extractelement <2 x float> %368, i64 1, !dbg !53
  %419 = fsub float %417, %418, !dbg !52
  %420 = extractelement <2 x float> %380, i64 0, !dbg !52
  %421 = extractelement <2 x float> %380, i64 1, !dbg !53
  %422 = fsub float %420, %421, !dbg !52
  %423 = extractelement <2 x float> %392, i64 0, !dbg !52
  %424 = extractelement <2 x float> %392, i64 1, !dbg !53
  %425 = fsub float %423, %424, !dbg !52
  %426 = extractelement <2 x float> %404, i64 0, !dbg !52
  %427 = extractelement <2 x float> %404, i64 1, !dbg !53
  %428 = fsub float %426, %427, !dbg !52
  %429 = fmul float %407, %96, !dbg !54
  %430 = fmul float %410, %98, !dbg !54
  %431 = fmul float %413, %100, !dbg !54
  %432 = fmul float %416, %102, !dbg !54
  %433 = fmul float %419, %104, !dbg !54
  %434 = fmul float %422, %106, !dbg !54
  %435 = fmul float %425, %108, !dbg !54
  %436 = fmul float %428, %110, !dbg !54
  %437 = fadd float %406, %429, !dbg !53
  %438 = fadd float %409, %430, !dbg !53
  %439 = fadd float %412, %431, !dbg !53
  %440 = fadd float %415, %432, !dbg !53
  %441 = fadd float %418, %433, !dbg !53
  %442 = fadd float %421, %434, !dbg !53
  %443 = fadd float %424, %435, !dbg !53
  %444 = fadd float %427, %436, !dbg !53
  %445 = sext i32 %15 to i64, !dbg !55
  %446 = getelementptr float, ptr addrspace(1) %0, i64 %445, !dbg !55
  %447 = sext i32 %17 to i64, !dbg !55
  %448 = getelementptr float, ptr addrspace(1) %0, i64 %447, !dbg !55
  %449 = bitcast float %437 to i32, !dbg !56
  %450 = bitcast float %438 to i32, !dbg !56
  %451 = bitcast float %439 to i32, !dbg !56
  %452 = bitcast float %440 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %449, i32 %450, i32 %451, i32 %452, ptr addrspace(1) %446, i1 true) #1, !dbg !56
  %453 = bitcast float %441 to i32, !dbg !56
  %454 = bitcast float %442 to i32, !dbg !56
  %455 = bitcast float %443 to i32, !dbg !56
  %456 = bitcast float %444 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %453, i32 %454, i32 %455, i32 %456, ptr addrspace(1) %448, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cza5t2drcvhkblj3bpt4mizlnjr5jddeexe44vu54o7csmvxxexc.py", directory: "inductor_cache/za")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_34", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 35, scope: !7)
!35 = !DILocation(line: 42, column: 49, scope: !7)
!36 = !DILocation(line: 42, column: 61, scope: !7)
!37 = !DILocation(line: 42, column: 56, scope: !7)
!38 = !DILocation(line: 42, column: 30, scope: !7)
!39 = !DILocation(line: 42, column: 66, scope: !7)
!40 = !DILocation(line: 45, column: 35, scope: !7)
!41 = !DILocation(line: 46, column: 31, scope: !7)
!42 = !DILocation(line: 46, column: 68, scope: !7)
!43 = !DILocation(line: 52, column: 35, scope: !7)
!44 = !DILocation(line: 53, column: 50, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 68, scope: !7)
!47 = !DILocation(line: 54, column: 31, scope: !7)
!48 = !DILocation(line: 54, column: 69, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 28, scope: !7)
!56 = !DILocation(line: 61, column: 40, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
