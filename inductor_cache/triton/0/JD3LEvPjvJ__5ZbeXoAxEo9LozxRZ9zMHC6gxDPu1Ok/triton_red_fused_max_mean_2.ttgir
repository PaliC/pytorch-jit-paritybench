#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":19:0)
#loc1 = loc(unknown)
#loc30 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":41:25)
#loc34 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":42:38)
#loc46 = loc(callsite(#loc1 at #loc30))
#loc49 = loc(callsite(#loc1 at #loc34))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_max_mean_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<64x8xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<128000> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<128000> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<1000> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1000> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<128> : tensor<1x8xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_1 : tensor<64x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_2 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc7)
    %14 = arith.remsi %8, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc8)
    %15 = arith.divsi %8, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc9)
    %16 = tt.broadcast %14 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc10)
    %17 = arith.muli %15, %cst_1 : tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.broadcast %17 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc12)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc13)
    %20 = tt.broadcast %10 : tensor<64x1xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc14)
    %21:2 = scf.for %arg5 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg6 = %cst, %arg7 = %cst_0) -> (tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>)  : i32 {
      %32 = tt.splat %arg5 : i32 -> tensor<1x8xi32, #blocked> loc(#loc16)
      %33 = arith.addi %32, %13 : tensor<1x8xi32, #blocked> loc(#loc16)
      %34 = arith.cmpi slt, %33, %cst_5 : tensor<1x8xi32, #blocked> loc(#loc17)
      %35 = arith.muli %33, %cst_4 : tensor<1x8xi32, #blocked> loc(#loc18)
      %36 = tt.broadcast %35 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc10)
      %37 = arith.addi %16, %36 : tensor<64x8xi32, #blocked> loc(#loc10)
      %38 = arith.addi %37, %18 : tensor<64x8xi32, #blocked> loc(#loc12)
      %39 = tt.addptr %19, %38 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc13)
      %40 = tt.broadcast %34 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc14)
      %41 = arith.andi %40, %20 : tensor<64x8xi1, #blocked> loc(#loc14)
      %42 = tt.load %39, %41, %cst evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc19)
      %43 = arith.addf %arg6, %42 : tensor<64x8xf32, #blocked> loc(#loc20)
      %44 = arith.select %41, %43, %arg6 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc21)
      %45 = arith.cmpf ogt, %arg7, %42 : tensor<64x8xf32, #blocked> loc(#loc41)
      %46 = arith.cmpf une, %arg7, %arg7 : tensor<64x8xf32, #blocked> loc(#loc42)
      %47 = arith.ori %45, %46 : tensor<64x8xi1, #blocked> loc(#loc43)
      %48 = arith.select %47, %arg7, %42 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc44)
      %49 = arith.select %41, %48, %arg7 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc27)
      scf.yield %44, %49 : tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked> loc(#loc28)
    } loc(#loc15)
    %22 = "tt.reduce"(%21#0) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc30)), %arg6: f32 loc(callsite(#loc1 at #loc30))):
      %32 = arith.addf %arg5, %arg6 : f32 loc(#loc54)
      tt.reduce.return %32 : f32 loc(#loc45)
    }) : (tensor<64x8xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc45)
    %23 = triton_gpu.convert_layout %22 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc32)
    %24 = tt.expand_dims %23 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc32)
    %25 = "tt.reduce"(%21#1) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc34)), %arg6: f32 loc(callsite(#loc1 at #loc34))):
      %32 = arith.cmpf ogt, %arg5, %arg6 : f32 loc(#loc55)
      %33 = arith.cmpf une, %arg5, %arg5 : f32 loc(#loc56)
      %34 = arith.ori %32, %33 : i1 loc(#loc57)
      %35 = arith.select %34, %arg5, %arg6 : f32 loc(#loc58)
      tt.reduce.return %35 : f32 loc(#loc48)
    }) : (tensor<64x8xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc48)
    %26 = triton_gpu.convert_layout %25 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc35)
    %27 = tt.expand_dims %26 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc35)
    %28 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %29 = tt.addptr %28, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc36)
    tt.store %29, %24, %11 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc37)
    %30 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %31 = tt.addptr %30, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc38)
    tt.store %31, %27, %11 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":22:28)
#loc3 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":22:33)
#loc4 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":23:44)
#loc5 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":23:23)
#loc6 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":24:21)
#loc7 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":25:33)
#loc8 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":26:19)
#loc9 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":27:19)
#loc10 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":35:39)
#loc11 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":35:56)
#loc12 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":35:49)
#loc13 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":35:34)
#loc14 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":35:69)
#loc15 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":31:36)
#loc16 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":32:27)
#loc17 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":33:25)
#loc18 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":35:44)
#loc19 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":35:61)
#loc20 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":37:23)
#loc21 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":38:46)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc23 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":39:45)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc27 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":40:46)
#loc28 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":40:8)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc32 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":41:28)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc35 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":42:41)
#loc36 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":43:25)
#loc37 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":43:36)
#loc38 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":44:25)
#loc39 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":44:36)
#loc40 = loc("inductor_cache/2m/c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py":44:4)
#loc41 = loc(callsite(#loc22 at #loc23))
#loc42 = loc(callsite(#loc24 at #loc23))
#loc43 = loc(callsite(#loc25 at #loc23))
#loc44 = loc(callsite(#loc26 at #loc23))
#loc45 = loc(callsite(#loc29 at #loc30))
#loc47 = loc(callsite(#loc31 at #loc29))
#loc48 = loc(callsite(#loc33 at #loc34))
#loc50 = loc(callsite(#loc22 at #loc33))
#loc51 = loc(callsite(#loc24 at #loc33))
#loc52 = loc(callsite(#loc25 at #loc33))
#loc53 = loc(callsite(#loc26 at #loc33))
#loc54 = loc(callsite(#loc47 at #loc30))
#loc55 = loc(callsite(#loc50 at #loc34))
#loc56 = loc(callsite(#loc51 at #loc34))
#loc57 = loc(callsite(#loc52 at #loc34))
#loc58 = loc(callsite(#loc53 at #loc34))
