; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_max_mean_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 128000, !dbg !14
  %13 = lshr i32 %8, 4, !dbg !15
  %14 = and i32 %13, 7, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %15 = sdiv i32 %.frozen, 1000, !dbg !16
  %16 = mul i32 %15, 1000, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = mul i32 %15, 128000, !dbg !18
  %18 = add i32 %17, %.decomposed
  %19 = insertelement <4 x i1> poison, i1 %12, i64 0, !dbg !19
  %20 = shufflevector <4 x i1> %19, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !19
  br label %21, !dbg !20

21:                                               ; preds = %5, %21
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %21 ]
  %22 = phi <4 x float> [ splat (float 0xFFF0000000000000), %5 ], [ %46, %21 ]
  %23 = phi <4 x float> [ zeroinitializer, %5 ], [ %42, %21 ]
  %24 = trunc i64 %indvars.iv to i32, !dbg !21
  %25 = or disjoint i32 %14, %24, !dbg !21
  %26 = mul i32 %25, 1000, !dbg !21
  %27 = add i32 %18, %26, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = fcmp uno <4 x float> %22, zeroinitializer, !dbg !24
  %36 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !23
  %37 = insertelement <4 x i32> %36, i32 %33, i64 1, !dbg !23
  %38 = insertelement <4 x i32> %37, i32 %32, i64 2, !dbg !23
  %39 = insertelement <4 x i32> %38, i32 %31, i64 3, !dbg !23
  %40 = bitcast <4 x i32> %39 to <4 x float>, !dbg !23
  %41 = fadd <4 x float> %23, %40, !dbg !28
  %42 = select <4 x i1> %20, <4 x float> %41, <4 x float> %23, !dbg !29
  %43 = fcmp ogt <4 x float> %22, %40, !dbg !30
  %44 = or <4 x i1> %35, %43, !dbg !31
  %45 = select <4 x i1> %44, <4 x float> %22, <4 x float> %40, !dbg !32
  %46 = select <4 x i1> %20, <4 x float> %45, <4 x float> %22, !dbg !19
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !20
  %47 = icmp samesign ult i64 %indvars.iv, 120, !dbg !20
  br i1 %47, label %21, label %48, !dbg !20

48:                                               ; preds = %21
  %49 = lshr i32 %8, 5, !dbg !12
  %50 = and i32 %8, 63, !dbg !12
  %51 = or disjoint i32 %7, %50, !dbg !13
  %52 = icmp slt i32 %51, 128000, !dbg !14
  %53 = and i32 %8, 16, !dbg !12
  %54 = extractelement <4 x float> %42, i64 3, !dbg !33
  %55 = bitcast float %54 to i32, !dbg !33
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 16, i32 31), !dbg !33
  %57 = bitcast i32 %56 to float, !dbg !33
  %58 = fadd float %54, %57, !dbg !37
  %59 = extractelement <4 x float> %42, i64 2, !dbg !33
  %60 = bitcast float %59 to i32, !dbg !33
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !33
  %62 = bitcast i32 %61 to float, !dbg !33
  %63 = fadd float %59, %62, !dbg !37
  %64 = extractelement <4 x float> %42, i64 1, !dbg !33
  %65 = bitcast float %64 to i32, !dbg !33
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !33
  %67 = bitcast i32 %66 to float, !dbg !33
  %68 = fadd float %64, %67, !dbg !37
  %69 = extractelement <4 x float> %42, i64 0, !dbg !33
  %70 = bitcast float %69 to i32, !dbg !33
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !33
  %72 = bitcast i32 %71 to float, !dbg !33
  %73 = fadd float %69, %72, !dbg !37
  %74 = icmp eq i32 %53, 0, !dbg !33
  %75 = and i32 %49, 3, !dbg !33
  %76 = shl nuw nsw i32 %10, 2, !dbg !33
  %77 = or disjoint i32 %76, %75, !dbg !33
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !33
  %79 = bitcast float %58 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 %74) #3, !dbg !33
  %80 = or disjoint i32 %76, 4, !dbg !33
  %81 = or disjoint i32 %80, %75, !dbg !33
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !33
  %83 = bitcast float %63 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 %74) #3, !dbg !33
  %84 = or disjoint i32 %76, 8, !dbg !33
  %85 = or disjoint i32 %84, %75, !dbg !33
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !33
  %87 = bitcast float %68 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %74) #3, !dbg !33
  %88 = or disjoint i32 %76, 12, !dbg !33
  %89 = or disjoint i32 %88, %75, !dbg !33
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !33
  %91 = bitcast float %73 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 %74) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %92 = icmp slt i32 %8, 256, !dbg !33
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !33
  %94 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %93, i1 %92) #3, !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  %98 = fadd float %95, %97, !dbg !37
  %99 = bitcast float %98 to i32, !dbg !33
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = fadd float %98, %101, !dbg !37
  %103 = and i32 %8, 3, !dbg !33
  %104 = icmp eq i32 %103, 0, !dbg !33
  %105 = and i1 %92, %104, !dbg !33
  %106 = bitcast float %102 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %106, i1 %105) #3, !dbg !33
  %107 = getelementptr i8, ptr addrspace(3) %93, i32 512, !dbg !33
  %108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %107, i1 %92) #3, !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = fadd float %109, %111, !dbg !37
  %113 = bitcast float %112 to i32, !dbg !33
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = fadd float %112, %115, !dbg !37
  %117 = bitcast float %116 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %117, i1 %105) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !33
  %119 = load i32, ptr addrspace(3) %118, align 16, !dbg !33
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !33
  %121 = load i32, ptr addrspace(3) %120, align 16, !dbg !33
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !33
  %123 = load i32, ptr addrspace(3) %122, align 16, !dbg !33
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !33
  %125 = load i32, ptr addrspace(3) %124, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !39
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %126, i32 %119, i32 %121, i32 %123, i32 %125, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !39
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %129 = extractelement <4 x float> %46, i64 3, !dbg !40
  %130 = bitcast float %129 to i32, !dbg !40
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !40
  %132 = fcmp uno float %129, 0.000000e+00, !dbg !42
  %133 = extractelement <4 x float> %46, i64 2, !dbg !40
  %134 = bitcast float %133 to i32, !dbg !40
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 16, i32 31), !dbg !40
  %136 = fcmp uno float %133, 0.000000e+00, !dbg !42
  %137 = extractelement <4 x float> %46, i64 1, !dbg !40
  %138 = bitcast float %137 to i32, !dbg !40
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 16, i32 31), !dbg !40
  %140 = fcmp uno float %137, 0.000000e+00, !dbg !42
  %141 = extractelement <4 x float> %46, i64 0, !dbg !40
  %142 = bitcast float %141 to i32, !dbg !40
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !40
  %144 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !40
  %145 = insertelement <4 x i32> %144, i32 %139, i64 1, !dbg !40
  %146 = insertelement <4 x i32> %145, i32 %135, i64 2, !dbg !40
  %147 = insertelement <4 x i32> %146, i32 %131, i64 3, !dbg !40
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !40
  %149 = fcmp ogt <4 x float> %46, %148, !dbg !44
  %150 = extractelement <4 x i1> %149, i64 3, !dbg !45
  %151 = or i1 %132, %150, !dbg !45
  %152 = extractelement <4 x i1> %149, i64 2, !dbg !45
  %153 = or i1 %136, %152, !dbg !45
  %154 = extractelement <4 x i1> %149, i64 1, !dbg !45
  %155 = or i1 %140, %154, !dbg !45
  %156 = fcmp uno float %141, 0.000000e+00, !dbg !42
  %157 = extractelement <4 x i1> %149, i64 0, !dbg !45
  %158 = or i1 %156, %157, !dbg !45
  %159 = select i1 %151, i32 %130, i32 %131, !dbg !46
  %160 = insertelement <1 x i32> poison, i32 %159, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %160, i1 %74) #3, !dbg !40
  %161 = select i1 %153, i32 %134, i32 %135, !dbg !46
  %162 = insertelement <1 x i32> poison, i32 %161, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %162, i1 %74) #3, !dbg !40
  %163 = select i1 %155, i32 %138, i32 %139, !dbg !46
  %164 = insertelement <1 x i32> poison, i32 %163, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %164, i1 %74) #3, !dbg !40
  %165 = select i1 %158, i32 %142, i32 %143, !dbg !46
  %166 = insertelement <1 x i32> poison, i32 %165, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %166, i1 %74) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %167 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %93, i1 %92) #3, !dbg !40
  %168 = bitcast i32 %167 to float, !dbg !40
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !40
  %170 = bitcast i32 %169 to float, !dbg !40
  %171 = fcmp ogt float %168, %170, !dbg !44
  %172 = fcmp uno float %168, 0.000000e+00, !dbg !42
  %173 = or i1 %172, %171, !dbg !45
  %174 = select i1 %173, float %168, float %170, !dbg !46
  %175 = bitcast float %174 to i32, !dbg !40
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !40
  %177 = bitcast i32 %176 to float, !dbg !40
  %178 = fcmp ogt float %174, %177, !dbg !44
  %179 = fcmp uno float %174, 0.000000e+00, !dbg !42
  %180 = or i1 %178, %179, !dbg !45
  %181 = select i1 %180, i32 %175, i32 %176, !dbg !46
  %182 = insertelement <1 x i32> poison, i32 %181, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %182, i1 %105) #3, !dbg !40
  %183 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %107, i1 %92) #3, !dbg !40
  %184 = bitcast i32 %183 to float, !dbg !40
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !40
  %186 = bitcast i32 %185 to float, !dbg !40
  %187 = fcmp ogt float %184, %186, !dbg !44
  %188 = fcmp uno float %184, 0.000000e+00, !dbg !42
  %189 = or i1 %188, %187, !dbg !45
  %190 = select i1 %189, float %184, float %186, !dbg !46
  %191 = bitcast float %190 to i32, !dbg !40
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !40
  %193 = bitcast i32 %192 to float, !dbg !40
  %194 = fcmp ogt float %190, %193, !dbg !44
  %195 = fcmp uno float %190, 0.000000e+00, !dbg !42
  %196 = or i1 %194, %195, !dbg !45
  %197 = select i1 %196, i32 %191, i32 %192, !dbg !46
  %198 = insertelement <1 x i32> poison, i32 %197, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %198, i1 %105) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %199 = load i32, ptr addrspace(3) %118, align 16, !dbg !40
  %200 = load i32, ptr addrspace(3) %120, align 16, !dbg !40
  %201 = load i32, ptr addrspace(3) %122, align 16, !dbg !40
  %202 = load i32, ptr addrspace(3) %124, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %126, i32 %199, i32 %200, i32 %201, i32 %202, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %203 = load i32, ptr addrspace(3) %127, align 4, !dbg !47
  %204 = sext i32 %51 to i64, !dbg !48
  %205 = getelementptr float, ptr addrspace(1) %1, i64 %204, !dbg !48
  %206 = and i32 %8, 64, !dbg !49
  %207 = icmp eq i32 %206, 0, !dbg !49
  %208 = and i1 %207, %52, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %205, i1 %208) #3, !dbg !49
  %209 = getelementptr float, ptr addrspace(1) %2, i64 %204, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, ptr addrspace(1) %209, i1 %208) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2mf7fdw75zgwarlon2dli27qjvsx2lxcao27qrpfhxlonomdzug.py", directory: "inductor_cache/2m")
!4 = !{ptr @triton_red_fused_max_mean_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_max_mean_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_max_mean_2", linkageName: "triton_red_fused_max_mean_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 56, scope: !7)
!19 = !DILocation(line: 40, column: 46, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 35, column: 49, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 61, scope: !7)
!24 = !DILocation(line: 120, column: 21, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 39, column: 45, scope: !7)
!28 = !DILocation(line: 37, column: 23, scope: !7)
!29 = !DILocation(line: 38, column: 46, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 120, column: 16, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = !DILocation(line: 41, column: 25, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 41, column: 28, scope: !7)
!40 = !DILocation(line: 131, column: 29, scope: !25, inlinedAt: !41)
!41 = !DILocation(line: 42, column: 38, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!44 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 42, column: 41, scope: !7)
!48 = !DILocation(line: 43, column: 25, scope: !7)
!49 = !DILocation(line: 43, column: 36, scope: !7)
!50 = !DILocation(line: 44, column: 25, scope: !7)
!51 = !DILocation(line: 44, column: 36, scope: !7)
!52 = !DILocation(line: 44, column: 4, scope: !7)
