; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp46 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp38 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp17 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_1 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp9 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !11 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = or disjoint i32 %12, 128, !dbg !12
  %15 = or disjoint i32 %12, 192, !dbg !12
  %16 = shl i32 %11, 2, !dbg !12
  %17 = and i32 %16, 252, !dbg !12
  %18 = lshr i32 %12, 4, !dbg !13
  %19 = lshr i32 %13, 4, !dbg !13
  %20 = lshr i32 %14, 4, !dbg !13
  %21 = lshr i32 %15, 4, !dbg !13
  %22 = and i32 %11, 3, !dbg !14
  %23 = zext nneg i32 %18 to i64, !dbg !15
  %24 = getelementptr i64, ptr addrspace(1) %2, i64 %23, !dbg !15
  %25 = zext nneg i32 %19 to i64, !dbg !15
  %26 = getelementptr i64, ptr addrspace(1) %2, i64 %25, !dbg !15
  %27 = zext nneg i32 %20 to i64, !dbg !15
  %28 = getelementptr i64, ptr addrspace(1) %2, i64 %27, !dbg !15
  %29 = zext nneg i32 %21 to i64, !dbg !15
  %30 = getelementptr i64, ptr addrspace(1) %2, i64 %29, !dbg !15
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %24, i1 true, i1 true) #5, !dbg !16
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %26, i1 true, i1 true) #5, !dbg !16
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 true, i1 true) #5, !dbg !16
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 true, i1 true) #5, !dbg !16
  %35 = zext nneg i32 %17 to i64, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !17
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !18
  %42 = shl nuw nsw i32 %17, 1, !dbg !18
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %42, !dbg !18
  %44 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #5, !dbg !18
  %45 = or disjoint i32 %42, 2, !dbg !18
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %45, !dbg !18
  %47 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #5, !dbg !18
  %48 = or disjoint i32 %42, 4, !dbg !18
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48, !dbg !18
  %50 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #5, !dbg !18
  %51 = or disjoint i32 %42, 6, !dbg !18
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !18
  %53 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %54 = shl nuw nsw i32 %12, 1, !dbg !18
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !18
  %56 = load float, ptr addrspace(3) %55, align 8, !dbg !18
  %57 = shl nuw nsw i32 %13, 1, !dbg !18
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %57, !dbg !18
  %59 = load float, ptr addrspace(3) %58, align 8, !dbg !18
  %60 = shl nuw nsw i32 %14, 1, !dbg !18
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60, !dbg !18
  %62 = load float, ptr addrspace(3) %61, align 8, !dbg !18
  %63 = shl nuw nsw i32 %15, 1, !dbg !18
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !18
  %65 = load float, ptr addrspace(3) %64, align 8, !dbg !18
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !19
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %72 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %72, i1 true) #5, !dbg !20
  %73 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %73, i1 true) #5, !dbg !20
  %74 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %74, i1 true) #5, !dbg !20
  %75 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %75, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %76 = load float, ptr addrspace(3) %55, align 8, !dbg !20
  %77 = load float, ptr addrspace(3) %58, align 8, !dbg !20
  %78 = load float, ptr addrspace(3) %61, align 8, !dbg !20
  %79 = load float, ptr addrspace(3) %64, align 8, !dbg !20
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !21
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !22
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !22
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !22
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !22
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %86 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %86, i1 true) #5, !dbg !22
  %87 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %87, i1 true) #5, !dbg !22
  %88 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %88, i1 true) #5, !dbg !22
  %89 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %89, i1 true) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %90 = load float, ptr addrspace(3) %55, align 8, !dbg !22
  %91 = load float, ptr addrspace(3) %58, align 8, !dbg !22
  %92 = load float, ptr addrspace(3) %61, align 8, !dbg !22
  %93 = load float, ptr addrspace(3) %64, align 8, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !23
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !24
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !24
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !24
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !24
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %100 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %100, i1 true) #5, !dbg !24
  %101 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %101, i1 true) #5, !dbg !24
  %102 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %102, i1 true) #5, !dbg !24
  %103 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %103, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %104 = load float, ptr addrspace(3) %55, align 8, !dbg !24
  %105 = load float, ptr addrspace(3) %58, align 8, !dbg !24
  %106 = load float, ptr addrspace(3) %61, align 8, !dbg !24
  %107 = load float, ptr addrspace(3) %64, align 8, !dbg !24
  %108 = insertelement <4 x i64> poison, i64 %32, i64 0, !dbg !25
  %109 = insertelement <4 x i64> %108, i64 %31, i64 1, !dbg !25
  %110 = insertelement <4 x i64> %109, i64 %33, i64 2, !dbg !25
  %111 = insertelement <4 x i64> %110, i64 %34, i64 3, !dbg !25
  %112 = lshr <4 x i64> %111, splat (i64 61), !dbg !25
  %113 = and <4 x i64> %112, splat (i64 4), !dbg !25
  %114 = add <4 x i64> %113, %111, !dbg !25
  %115 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %114), !dbg !26
  %.not = icmp ult i64 %115, 4, !dbg !26
  br i1 %.not, label %117, label %116, !dbg !26

116:                                              ; preds = %10
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 46, ptr nonnull @assertFunc_0, i64 1), !dbg !26
  unreachable, !dbg !26

117:                                              ; preds = %10
  %118 = lshr i32 %11, 2, !dbg !27
  %119 = and i32 %118, 3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %120 = extractelement <4 x i64> %114, i64 1, !dbg !29
  %121 = shl i64 %120, 2, !dbg !29
  %122 = extractelement <4 x i64> %114, i64 0, !dbg !29
  %123 = shl i64 %122, 2, !dbg !29
  %124 = extractelement <4 x i64> %114, i64 2, !dbg !29
  %125 = shl i64 %124, 2, !dbg !29
  %126 = extractelement <4 x i64> %114, i64 3, !dbg !29
  %127 = shl nuw nsw i64 %126, 2, !dbg !29
  %128 = zext nneg i32 %119 to i64, !dbg !30
  %129 = or disjoint i64 %121, %128, !dbg !30
  %130 = or disjoint i64 %123, %128, !dbg !30
  %131 = or disjoint i64 %125, %128, !dbg !30
  %132 = or disjoint i64 %127, %128, !dbg !31
  %133 = or disjoint i64 %132, 48, !dbg !31
  %134 = getelementptr i64, ptr addrspace(1) %3, i64 %129, !dbg !32
  %135 = getelementptr i64, ptr addrspace(1) %3, i64 %130, !dbg !32
  %136 = getelementptr i8, ptr addrspace(1) %135, i64 128, !dbg !32
  %137 = getelementptr i64, ptr addrspace(1) %3, i64 %131, !dbg !32
  %138 = getelementptr i8, ptr addrspace(1) %137, i64 256, !dbg !32
  %139 = getelementptr i64, ptr addrspace(1) %3, i64 %133, !dbg !32
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %134, i1 true, i1 true) #5, !dbg !33
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %136, i1 true, i1 true) #5, !dbg !33
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %138, i1 true, i1 true) #5, !dbg !33
  %143 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %139, i1 true, i1 true) #5, !dbg !33
  %144 = insertelement <4 x i64> poison, i64 %141, i64 0, !dbg !34
  %145 = insertelement <4 x i64> %144, i64 %140, i64 1, !dbg !34
  %146 = insertelement <4 x i64> %145, i64 %142, i64 2, !dbg !34
  %147 = insertelement <4 x i64> %146, i64 %143, i64 3, !dbg !34
  %148 = lshr <4 x i64> %147, splat (i64 61), !dbg !34
  %149 = and <4 x i64> %148, splat (i64 4), !dbg !34
  %150 = add <4 x i64> %149, %147, !dbg !34
  %151 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %150), !dbg !35
  %.not1 = icmp ult i64 %151, 4, !dbg !35
  br i1 %.not1, label %153, label %152, !dbg !35

152:                                              ; preds = %117
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 51, ptr nonnull @assertFunc_1, i64 1), !dbg !35
  unreachable, !dbg !35

153:                                              ; preds = %117
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %154 = lshr i32 %16, 4, !dbg !36
  %155 = and i32 %154, 12, !dbg !36
  %156 = zext nneg i32 %155 to i64, !dbg !37
  %157 = or disjoint i64 %126, 12, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %4, i64 %120, !dbg !38
  %159 = getelementptr float, ptr addrspace(1) %4, i64 %122, !dbg !38
  %160 = getelementptr i8, ptr addrspace(1) %159, i64 16, !dbg !38
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %124, !dbg !38
  %162 = getelementptr i8, ptr addrspace(1) %161, i64 32, !dbg !38
  %163 = getelementptr float, ptr addrspace(1) %4, i64 %157, !dbg !38
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 true, i32 0, i1 true) #5, !dbg !39
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 true, i32 0, i1 true) #5, !dbg !39
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 true, i32 0, i1 true) #5, !dbg !39
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 true, i32 0, i1 true) #5, !dbg !39
  %168 = extractelement <4 x i64> %150, i64 3, !dbg !40
  %169 = or disjoint i64 %168, 12, !dbg !40
  %170 = extractelement <4 x i64> %150, i64 1, !dbg !41
  %171 = getelementptr float, ptr addrspace(1) %4, i64 %170, !dbg !41
  %172 = extractelement <4 x i64> %150, i64 0, !dbg !41
  %173 = getelementptr float, ptr addrspace(1) %4, i64 %172, !dbg !41
  %174 = getelementptr i8, ptr addrspace(1) %173, i64 16, !dbg !41
  %175 = extractelement <4 x i64> %150, i64 2, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %175, !dbg !41
  %177 = getelementptr i8, ptr addrspace(1) %176, i64 32, !dbg !41
  %178 = getelementptr float, ptr addrspace(1) %4, i64 %169, !dbg !41
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 true, i32 0, i1 true) #5, !dbg !42
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 true, i32 0, i1 true) #5, !dbg !42
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 true, i32 0, i1 true) #5, !dbg !42
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 true, i32 0, i1 true) #5, !dbg !42
  %183 = zext nneg i32 %22 to i64, !dbg !43
  %184 = or disjoint i64 %121, %183, !dbg !43
  %185 = or disjoint i64 %123, %183, !dbg !43
  %186 = or disjoint i64 %125, %183, !dbg !43
  %187 = or disjoint i64 %127, %183, !dbg !44
  %188 = or disjoint i64 %187, 48, !dbg !44
  %189 = getelementptr i64, ptr addrspace(1) %3, i64 %184, !dbg !45
  %190 = getelementptr i64, ptr addrspace(1) %3, i64 %185, !dbg !45
  %191 = getelementptr i8, ptr addrspace(1) %190, i64 128, !dbg !45
  %192 = getelementptr i64, ptr addrspace(1) %3, i64 %186, !dbg !45
  %193 = getelementptr i8, ptr addrspace(1) %192, i64 256, !dbg !45
  %194 = getelementptr i64, ptr addrspace(1) %3, i64 %188, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %195 = ptrtoint ptr addrspace(1) %189 to i64, !dbg !46
  %196 = ptrtoint ptr addrspace(1) %191 to i64, !dbg !46
  %197 = ptrtoint ptr addrspace(1) %193 to i64, !dbg !46
  %198 = ptrtoint ptr addrspace(1) %194 to i64, !dbg !46
  %199 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %12, !dbg !46
  %200 = insertelement <1 x i64> poison, i64 %195, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %199, <1 x i64> %200, i1 true) #5, !dbg !46
  %201 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %13, !dbg !46
  %202 = insertelement <1 x i64> poison, i64 %196, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %201, <1 x i64> %202, i1 true) #5, !dbg !46
  %203 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %14, !dbg !46
  %204 = insertelement <1 x i64> poison, i64 %197, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %203, <1 x i64> %204, i1 true) #5, !dbg !46
  %205 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %15, !dbg !46
  %206 = insertelement <1 x i64> poison, i64 %198, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %205, <1 x i64> %206, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %207 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %17, !dbg !46
  %208 = load i64, ptr addrspace(3) %207, align 16, !dbg !46
  %209 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 16, !dbg !46
  %210 = load i64, ptr addrspace(3) %209, align 16, !dbg !46
  %211 = inttoptr i64 %208 to ptr addrspace(1), !dbg !46
  %212 = inttoptr i64 %210 to ptr addrspace(1), !dbg !46
  %213 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %211, i1 true, i1 true, i1 true) #5, !dbg !46
  %214 = extractvalue { i64, i64 } %213, 0, !dbg !46
  %215 = extractvalue { i64, i64 } %213, 1, !dbg !46
  %216 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %212, i1 true, i1 true, i1 true) #5, !dbg !46
  %217 = extractvalue { i64, i64 } %216, 0, !dbg !46
  %218 = extractvalue { i64, i64 } %216, 1, !dbg !46
  %219 = insertelement <4 x i64> poison, i64 %214, i64 0, !dbg !47
  %220 = insertelement <4 x i64> %219, i64 %215, i64 1, !dbg !47
  %221 = insertelement <4 x i64> %220, i64 %217, i64 2, !dbg !47
  %222 = insertelement <4 x i64> %221, i64 %218, i64 3, !dbg !47
  %223 = lshr <4 x i64> %222, splat (i64 61), !dbg !47
  %224 = and <4 x i64> %223, splat (i64 4), !dbg !47
  %225 = add <4 x i64> %224, %222, !dbg !47
  %226 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %225), !dbg !48
  %.not2 = icmp ult i64 %226, 4, !dbg !48
  br i1 %.not2, label %228, label %227, !dbg !48

227:                                              ; preds = %153
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 59, ptr nonnull @assertFunc_2, i64 1), !dbg !48
  unreachable, !dbg !48

228:                                              ; preds = %153
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %229 = extractelement <4 x i64> %225, i64 3, !dbg !49
  %230 = or disjoint i64 %229, %156, !dbg !49
  %231 = extractelement <4 x i64> %225, i64 0, !dbg !50
  %232 = getelementptr float, ptr addrspace(1) %4, i64 %231, !dbg !50
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %156, !dbg !50
  %234 = extractelement <4 x i64> %225, i64 1, !dbg !50
  %235 = getelementptr float, ptr addrspace(1) %4, i64 %234, !dbg !50
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %156, !dbg !50
  %237 = extractelement <4 x i64> %225, i64 2, !dbg !50
  %238 = getelementptr float, ptr addrspace(1) %4, i64 %237, !dbg !50
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %156, !dbg !50
  %240 = getelementptr float, ptr addrspace(1) %4, i64 %230, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %241 = ptrtoint ptr addrspace(1) %233 to i64, !dbg !51
  %242 = ptrtoint ptr addrspace(1) %236 to i64, !dbg !51
  %243 = ptrtoint ptr addrspace(1) %239 to i64, !dbg !51
  %244 = ptrtoint ptr addrspace(1) %240 to i64, !dbg !51
  %245 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %42, !dbg !51
  %246 = insertelement <1 x i64> poison, i64 %241, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %245, <1 x i64> %246, i1 true) #5, !dbg !51
  %247 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %45, !dbg !51
  %248 = insertelement <1 x i64> poison, i64 %242, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %247, <1 x i64> %248, i1 true) #5, !dbg !51
  %249 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %48, !dbg !51
  %250 = insertelement <1 x i64> poison, i64 %243, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %249, <1 x i64> %250, i1 true) #5, !dbg !51
  %251 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %51, !dbg !51
  %252 = insertelement <1 x i64> poison, i64 %244, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %251, <1 x i64> %252, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %253 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %54, !dbg !51
  %254 = load i64, ptr addrspace(3) %253, align 16, !dbg !51
  %255 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %57, !dbg !51
  %256 = load i64, ptr addrspace(3) %255, align 16, !dbg !51
  %257 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %60, !dbg !51
  %258 = load i64, ptr addrspace(3) %257, align 16, !dbg !51
  %259 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %63, !dbg !51
  %260 = load i64, ptr addrspace(3) %259, align 16, !dbg !51
  %261 = inttoptr i64 %254 to ptr addrspace(1), !dbg !51
  %262 = inttoptr i64 %256 to ptr addrspace(1), !dbg !51
  %263 = inttoptr i64 %258 to ptr addrspace(1), !dbg !51
  %264 = inttoptr i64 %260 to ptr addrspace(1), !dbg !51
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 true, i32 0, i1 true) #5, !dbg !51
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 true, i32 0, i1 true) #5, !dbg !51
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %263, i1 true, i32 0, i1 true) #5, !dbg !51
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 true, i32 0, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %269 = add i64 %123, 16, !dbg !53
  %270 = add i64 %125, 32, !dbg !53
  %271 = or disjoint i64 %127, 48, !dbg !53
  %272 = or disjoint i64 %269, %128, !dbg !54
  %273 = or disjoint i64 %270, %128, !dbg !54
  %274 = or disjoint i64 %271, %128, !dbg !54
  %275 = getelementptr i64, ptr addrspace(1) %3, i64 %272, !dbg !55
  %276 = getelementptr i64, ptr addrspace(1) %3, i64 %273, !dbg !55
  %277 = getelementptr i64, ptr addrspace(1) %3, i64 %274, !dbg !55
  %278 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %134, i1 true, i1 true) #5, !dbg !56
  %279 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %275, i1 true, i1 true) #5, !dbg !56
  %280 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %276, i1 true, i1 true) #5, !dbg !56
  %281 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %277, i1 true, i1 true) #5, !dbg !56
  %282 = insertelement <4 x i64> poison, i64 %279, i64 0, !dbg !57
  %283 = insertelement <4 x i64> %282, i64 %278, i64 1, !dbg !57
  %284 = insertelement <4 x i64> %283, i64 %280, i64 2, !dbg !57
  %285 = insertelement <4 x i64> %284, i64 %281, i64 3, !dbg !57
  %286 = lshr <4 x i64> %285, splat (i64 61), !dbg !57
  %287 = and <4 x i64> %286, splat (i64 4), !dbg !57
  %288 = add <4 x i64> %287, %285, !dbg !57
  %289 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %288), !dbg !58
  %.not3 = icmp ult i64 %289, 4, !dbg !58
  br i1 %.not3, label %291, label %290, !dbg !58

290:                                              ; preds = %228
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 76, ptr nonnull @assertFunc_4, i64 1), !dbg !58
  unreachable, !dbg !58

291:                                              ; preds = %228
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 true, i32 0, i1 true) #5, !dbg !59
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 true, i32 0, i1 true) #5, !dbg !59
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 true, i32 0, i1 true) #5, !dbg !59
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 true, i32 0, i1 true) #5, !dbg !59
  %296 = extractelement <4 x i64> %288, i64 3, !dbg !60
  %297 = or disjoint i64 %296, 12, !dbg !60
  %298 = extractelement <4 x i64> %288, i64 1, !dbg !61
  %299 = getelementptr float, ptr addrspace(1) %4, i64 %298, !dbg !61
  %300 = extractelement <4 x i64> %288, i64 0, !dbg !61
  %301 = getelementptr float, ptr addrspace(1) %4, i64 %300, !dbg !61
  %302 = getelementptr i8, ptr addrspace(1) %301, i64 16, !dbg !61
  %303 = extractelement <4 x i64> %288, i64 2, !dbg !61
  %304 = getelementptr float, ptr addrspace(1) %4, i64 %303, !dbg !61
  %305 = getelementptr i8, ptr addrspace(1) %304, i64 32, !dbg !61
  %306 = getelementptr float, ptr addrspace(1) %4, i64 %297, !dbg !61
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 true, i32 0, i1 true) #5, !dbg !62
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 true, i32 0, i1 true) #5, !dbg !62
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 true, i32 0, i1 true) #5, !dbg !62
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %306, i1 true, i32 0, i1 true) #5, !dbg !62
  %311 = or disjoint i64 %269, %183, !dbg !63
  %312 = or disjoint i64 %270, %183, !dbg !63
  %313 = or disjoint i64 %271, %183, !dbg !63
  %314 = getelementptr i64, ptr addrspace(1) %3, i64 %311, !dbg !64
  %315 = getelementptr i64, ptr addrspace(1) %3, i64 %312, !dbg !64
  %316 = getelementptr i64, ptr addrspace(1) %3, i64 %313, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %317 = ptrtoint ptr addrspace(1) %314 to i64, !dbg !65
  %318 = ptrtoint ptr addrspace(1) %315 to i64, !dbg !65
  %319 = ptrtoint ptr addrspace(1) %316 to i64, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %199, <1 x i64> %200, i1 true) #5, !dbg !65
  %320 = insertelement <1 x i64> poison, i64 %317, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %201, <1 x i64> %320, i1 true) #5, !dbg !65
  %321 = insertelement <1 x i64> poison, i64 %318, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %203, <1 x i64> %321, i1 true) #5, !dbg !65
  %322 = insertelement <1 x i64> poison, i64 %319, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %205, <1 x i64> %322, i1 true) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %323 = load i64, ptr addrspace(3) %207, align 16, !dbg !65
  %324 = load i64, ptr addrspace(3) %209, align 16, !dbg !65
  %325 = inttoptr i64 %323 to ptr addrspace(1), !dbg !65
  %326 = inttoptr i64 %324 to ptr addrspace(1), !dbg !65
  %327 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %325, i1 true, i1 true, i1 true) #5, !dbg !65
  %328 = extractvalue { i64, i64 } %327, 0, !dbg !65
  %329 = extractvalue { i64, i64 } %327, 1, !dbg !65
  %330 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %326, i1 true, i1 true, i1 true) #5, !dbg !65
  %331 = extractvalue { i64, i64 } %330, 0, !dbg !65
  %332 = extractvalue { i64, i64 } %330, 1, !dbg !65
  %333 = insertelement <4 x i64> poison, i64 %328, i64 0, !dbg !66
  %334 = insertelement <4 x i64> %333, i64 %329, i64 1, !dbg !66
  %335 = insertelement <4 x i64> %334, i64 %331, i64 2, !dbg !66
  %336 = insertelement <4 x i64> %335, i64 %332, i64 3, !dbg !66
  %337 = lshr <4 x i64> %336, splat (i64 61), !dbg !66
  %338 = and <4 x i64> %337, splat (i64 4), !dbg !66
  %339 = add <4 x i64> %338, %336, !dbg !66
  %340 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %339), !dbg !67
  %.not4 = icmp ult i64 %340, 4, !dbg !67
  br i1 %.not4, label %342, label %341, !dbg !67

341:                                              ; preds = %291
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 84, ptr nonnull @assertFunc_5, i64 1), !dbg !67
  unreachable, !dbg !67

342:                                              ; preds = %291
  %343 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !42
  %344 = insertelement <2 x i32> %343, i32 %295, i64 1, !dbg !42
  %345 = bitcast <2 x i32> %344 to <2 x float>, !dbg !42
  %346 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !39
  %347 = insertelement <2 x i32> %346, i32 %310, i64 1, !dbg !39
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !39
  %349 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !42
  %350 = insertelement <2 x i32> %349, i32 %294, i64 1, !dbg !42
  %351 = bitcast <2 x i32> %350 to <2 x float>, !dbg !42
  %352 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !39
  %353 = insertelement <2 x i32> %352, i32 %309, i64 1, !dbg !39
  %354 = bitcast <2 x i32> %353 to <2 x float>, !dbg !39
  %355 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !62
  %356 = insertelement <2 x i32> %355, i32 %293, i64 1, !dbg !62
  %357 = bitcast <2 x i32> %356 to <2 x float>, !dbg !62
  %358 = insertelement <2 x i32> poison, i32 %292, i64 0, !dbg !59
  %359 = insertelement <2 x i32> %358, i32 %308, i64 1, !dbg !59
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !59
  %361 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !42
  %362 = insertelement <2 x i32> %361, i32 %165, i64 1, !dbg !42
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !42
  %364 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !39
  %365 = insertelement <2 x i32> %364, i32 %180, i64 1, !dbg !39
  %366 = bitcast <2 x i32> %365 to <2 x float>, !dbg !39
  %367 = insertelement <2 x i32> poison, i32 %265, i64 0, !dbg !51
  %368 = insertelement <2 x i32> %367, i32 %266, i64 1, !dbg !51
  %369 = bitcast <2 x i32> %368 to <2 x float>, !dbg !51
  %370 = lshr i32 %11, 5, !dbg !12
  %371 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %372 = extractelement <4 x i64> %339, i64 3, !dbg !68
  %373 = or disjoint i64 %372, %156, !dbg !68
  %374 = extractelement <4 x i64> %339, i64 0, !dbg !69
  %375 = getelementptr float, ptr addrspace(1) %4, i64 %374, !dbg !69
  %376 = getelementptr float, ptr addrspace(1) %375, i64 %156, !dbg !69
  %377 = extractelement <4 x i64> %339, i64 1, !dbg !69
  %378 = getelementptr float, ptr addrspace(1) %4, i64 %377, !dbg !69
  %379 = getelementptr float, ptr addrspace(1) %378, i64 %156, !dbg !69
  %380 = extractelement <4 x i64> %339, i64 2, !dbg !69
  %381 = getelementptr float, ptr addrspace(1) %4, i64 %380, !dbg !69
  %382 = getelementptr float, ptr addrspace(1) %381, i64 %156, !dbg !69
  %383 = getelementptr float, ptr addrspace(1) %4, i64 %373, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %384 = ptrtoint ptr addrspace(1) %376 to i64, !dbg !70
  %385 = ptrtoint ptr addrspace(1) %379 to i64, !dbg !70
  %386 = ptrtoint ptr addrspace(1) %382 to i64, !dbg !70
  %387 = ptrtoint ptr addrspace(1) %383 to i64, !dbg !70
  %388 = insertelement <1 x i64> poison, i64 %384, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %245, <1 x i64> %388, i1 true) #5, !dbg !70
  %389 = insertelement <1 x i64> poison, i64 %385, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %247, <1 x i64> %389, i1 true) #5, !dbg !70
  %390 = insertelement <1 x i64> poison, i64 %386, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %249, <1 x i64> %390, i1 true) #5, !dbg !70
  %391 = insertelement <1 x i64> poison, i64 %387, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %251, <1 x i64> %391, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %392 = load i64, ptr addrspace(3) %253, align 16, !dbg !70
  %393 = load i64, ptr addrspace(3) %255, align 16, !dbg !70
  %394 = load i64, ptr addrspace(3) %257, align 16, !dbg !70
  %395 = load i64, ptr addrspace(3) %259, align 16, !dbg !70
  %396 = inttoptr i64 %392 to ptr addrspace(1), !dbg !70
  %397 = inttoptr i64 %393 to ptr addrspace(1), !dbg !70
  %398 = inttoptr i64 %394 to ptr addrspace(1), !dbg !70
  %399 = inttoptr i64 %395 to ptr addrspace(1), !dbg !70
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 true, i32 0, i1 true) #5, !dbg !70
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %397, i1 true, i32 0, i1 true) #5, !dbg !70
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %398, i1 true, i32 0, i1 true) #5, !dbg !70
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %399, i1 true, i32 0, i1 true) #5, !dbg !70
  %404 = fadd <2 x float> %351, %354, !dbg !71
  %405 = insertelement <2 x i32> poison, i32 %267, i64 0, !dbg !51
  %406 = insertelement <2 x i32> %405, i32 %402, i64 1, !dbg !51
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !51
  %408 = shufflevector <2 x float> %354, <2 x float> %351, <2 x i32> <i32 0, i32 3>, !dbg !72
  %409 = fadd <2 x float> %408, %407, !dbg !72
  %410 = fmul <2 x float> %404, %409, !dbg !73
  %411 = fcmp oeq <2 x float> %410, splat (float 4.000000e+00), !dbg !74
  %412 = uitofp <2 x i1> %411 to <2 x float>, !dbg !75
  %413 = insertelement <2 x float> poison, float %62, i64 0, !dbg !76
  %414 = insertelement <2 x float> %413, float %106, i64 1, !dbg !76
  %415 = fmul <2 x float> %414, %412, !dbg !76
  %416 = insertelement <2 x float> poison, float %78, i64 0, !dbg !77
  %417 = insertelement <2 x float> %416, float %92, i64 1, !dbg !77
  %418 = fmul <2 x float> %417, %415, !dbg !77
  %419 = fadd <2 x float> %345, %348, !dbg !71
  %420 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !51
  %421 = insertelement <2 x i32> %420, i32 %403, i64 1, !dbg !51
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !51
  %423 = shufflevector <2 x float> %348, <2 x float> %345, <2 x i32> <i32 0, i32 3>, !dbg !72
  %424 = fadd <2 x float> %423, %422, !dbg !72
  %425 = fmul <2 x float> %419, %424, !dbg !73
  %426 = fcmp oeq <2 x float> %425, splat (float 4.000000e+00), !dbg !74
  %427 = uitofp <2 x i1> %426 to <2 x float>, !dbg !75
  %428 = insertelement <2 x float> poison, float %65, i64 0, !dbg !76
  %429 = insertelement <2 x float> %428, float %107, i64 1, !dbg !76
  %430 = fmul <2 x float> %429, %427, !dbg !76
  %431 = insertelement <2 x float> poison, float %79, i64 0, !dbg !77
  %432 = insertelement <2 x float> %431, float %93, i64 1, !dbg !77
  %433 = fmul <2 x float> %432, %430, !dbg !77
  %shift = shufflevector <2 x float> %418, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !78
  %434 = fsub <2 x float> %418, %shift, !dbg !78
  %435 = extractelement <2 x float> %434, i64 0, !dbg !78
  %shift5 = shufflevector <2 x float> %433, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !78
  %436 = fsub <2 x float> %433, %shift5, !dbg !78
  %437 = extractelement <2 x float> %436, i64 0, !dbg !78
  %438 = tail call float @llvm.fabs.f32(float %435), !dbg !79
  %439 = tail call float @llvm.fabs.f32(float %437), !dbg !79
  %440 = fcmp olt float %438, 1.000000e+00, !dbg !80
  %441 = fcmp olt float %439, 1.000000e+00, !dbg !80
  %442 = fmul float %435, %435, !dbg !81
  %443 = fmul float %437, %437, !dbg !81
  %444 = fmul float %442, 5.000000e-01, !dbg !82
  %445 = fmul float %443, 5.000000e-01, !dbg !82
  %446 = fadd float %438, -5.000000e-01, !dbg !83
  %447 = fadd float %439, -5.000000e-01, !dbg !83
  %448 = fadd <2 x float> %357, %360, !dbg !84
  %449 = fadd <2 x float> %363, %366, !dbg !71
  %450 = shufflevector <2 x float> %366, <2 x float> %363, <2 x i32> <i32 0, i32 3>, !dbg !72
  %451 = fadd <2 x float> %450, %369, !dbg !72
  %452 = fmul <2 x float> %449, %451, !dbg !73
  %453 = fcmp oeq <2 x float> %452, splat (float 4.000000e+00), !dbg !74
  %454 = uitofp <2 x i1> %453 to <2 x float>, !dbg !75
  %455 = insertelement <2 x float> poison, float %56, i64 0, !dbg !76
  %456 = insertelement <2 x float> %455, float %59, i64 1, !dbg !76
  %457 = fmul <2 x float> %456, %454, !dbg !76
  %458 = insertelement <2 x float> poison, float %76, i64 0, !dbg !77
  %459 = insertelement <2 x float> %458, float %77, i64 1, !dbg !77
  %460 = fmul <2 x float> %459, %457, !dbg !77
  %461 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !70
  %462 = insertelement <2 x i32> %461, i32 %401, i64 1, !dbg !70
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !70
  %464 = shufflevector <2 x float> %360, <2 x float> %357, <2 x i32> <i32 0, i32 3>, !dbg !85
  %465 = fadd <2 x float> %464, %463, !dbg !85
  %466 = fmul <2 x float> %448, %465, !dbg !86
  %467 = fcmp oeq <2 x float> %466, splat (float 4.000000e+00), !dbg !87
  %468 = uitofp <2 x i1> %467 to <2 x float>, !dbg !88
  %469 = insertelement <2 x float> poison, float %104, i64 0, !dbg !89
  %470 = insertelement <2 x float> %469, float %105, i64 1, !dbg !89
  %471 = fmul <2 x float> %470, %468, !dbg !89
  %472 = insertelement <2 x float> poison, float %90, i64 0, !dbg !90
  %473 = insertelement <2 x float> %472, float %91, i64 1, !dbg !90
  %474 = fmul <2 x float> %473, %471, !dbg !90
  %475 = fsub <2 x float> %460, %474, !dbg !78
  %476 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %475), !dbg !79
  %477 = fcmp olt <2 x float> %476, splat (float 1.000000e+00), !dbg !80
  %478 = fmul <2 x float> %475, %475, !dbg !81
  %479 = fmul <2 x float> %478, splat (float 5.000000e-01), !dbg !82
  %480 = fadd <2 x float> %476, splat (float -5.000000e-01), !dbg !83
  %481 = fadd <2 x float> %479, zeroinitializer, !dbg !91
  %482 = select <2 x i1> %477, <2 x float> %481, <2 x float> %480, !dbg !92
  %483 = fadd float %444, 0.000000e+00, !dbg !91
  %484 = select i1 %440, float %483, float %446, !dbg !92
  %485 = fadd float %445, 0.000000e+00, !dbg !91
  %486 = select i1 %441, float %485, float %447, !dbg !92
  %487 = fadd <2 x float> %457, zeroinitializer, !dbg !93
  %488 = extractelement <2 x float> %415, i64 0, !dbg !93
  %489 = fadd float %488, 0.000000e+00, !dbg !93
  %490 = extractelement <2 x float> %430, i64 0, !dbg !93
  %491 = fadd float %490, 0.000000e+00, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %shift6 = shufflevector <2 x float> %482, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !98
  %492 = fadd <2 x float> %482, %shift6, !dbg !98
  %493 = extractelement <2 x float> %492, i64 0, !dbg !98
  %494 = fadd float %493, %484, !dbg !98
  %495 = fadd float %494, %486, !dbg !98
  %496 = bitcast float %495 to i32, !dbg !94
  %497 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %496, i32 16, i32 31), !dbg !94
  %498 = bitcast i32 %497 to float, !dbg !94
  %499 = fadd float %495, %498, !dbg !98
  %500 = bitcast float %499 to i32, !dbg !94
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 8, i32 31), !dbg !94
  %502 = bitcast i32 %501 to float, !dbg !94
  %503 = fadd float %499, %502, !dbg !98
  %504 = bitcast float %503 to i32, !dbg !94
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 4, i32 31), !dbg !94
  %506 = bitcast i32 %505 to float, !dbg !94
  %507 = fadd float %503, %506, !dbg !98
  %508 = bitcast float %507 to i32, !dbg !94
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 2, i32 31), !dbg !94
  %510 = bitcast i32 %509 to float, !dbg !94
  %511 = fadd float %507, %510, !dbg !98
  %512 = bitcast float %511 to i32, !dbg !94
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 1, i32 31), !dbg !94
  %514 = bitcast i32 %513 to float, !dbg !94
  %515 = fadd float %511, %514, !dbg !98
  %516 = icmp eq i32 %371, 0, !dbg !94
  %517 = and i32 %370, 1, !dbg !94
  %518 = getelementptr float, ptr addrspace(3) @global_smem, i32 %517, !dbg !94
  %519 = bitcast float %515 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, <1 x i32> %519, i1 %516) #5, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %520 = icmp slt i32 %11, 2, !dbg !94
  %521 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !94
  %522 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %521, i1 %520) #5, !dbg !94
  %523 = bitcast i32 %522 to float, !dbg !94
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 1, i32 31), !dbg !94
  %525 = bitcast i32 %524 to float, !dbg !94
  %526 = fadd float %523, %525, !dbg !98
  %527 = and i32 %11, 1, !dbg !94
  %528 = icmp eq i32 %527, 0, !dbg !94
  %529 = and i1 %520, %528, !dbg !94
  %530 = bitcast float %526 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %521, <1 x i32> %530, i1 %529) #5, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %531 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %shift7 = shufflevector <2 x float> %487, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !102
  %532 = fadd <2 x float> %487, %shift7, !dbg !102
  %533 = extractelement <2 x float> %532, i64 0, !dbg !102
  %534 = fadd float %533, %489, !dbg !102
  %535 = fadd float %534, %491, !dbg !102
  %536 = bitcast float %535 to i32, !dbg !100
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 16, i32 31), !dbg !100
  %538 = bitcast i32 %537 to float, !dbg !100
  %539 = fadd float %535, %538, !dbg !102
  %540 = bitcast float %539 to i32, !dbg !100
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 8, i32 31), !dbg !100
  %542 = bitcast i32 %541 to float, !dbg !100
  %543 = fadd float %539, %542, !dbg !102
  %544 = bitcast float %543 to i32, !dbg !100
  %545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 4, i32 31), !dbg !100
  %546 = bitcast i32 %545 to float, !dbg !100
  %547 = fadd float %543, %546, !dbg !102
  %548 = bitcast float %547 to i32, !dbg !100
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 2, i32 31), !dbg !100
  %550 = bitcast i32 %549 to float, !dbg !100
  %551 = fadd float %547, %550, !dbg !102
  %552 = bitcast float %551 to i32, !dbg !100
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 1, i32 31), !dbg !100
  %554 = bitcast i32 %553 to float, !dbg !100
  %555 = fadd float %551, %554, !dbg !102
  %556 = bitcast float %555 to <1 x i32>, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, <1 x i32> %556, i1 %516) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %557 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %521, i1 %520) #5, !dbg !100
  %558 = bitcast i32 %557 to float, !dbg !100
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 1, i32 31), !dbg !100
  %560 = bitcast i32 %559 to float, !dbg !100
  %561 = fadd float %558, %560, !dbg !102
  %562 = bitcast float %561 to <1 x i32>, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %521, <1 x i32> %562, i1 %529) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %563 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !100
  %564 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #5, !dbg !103
  %565 = bitcast i32 %564 to float, !dbg !103
  %566 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #5, !dbg !104
  %567 = bitcast i32 %566 to float, !dbg !104
  %568 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %565, float %567) #5, !dbg !105
  %569 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %531, float %563) #5, !dbg !106
  %570 = fadd float %568, %569, !dbg !107
  tail call void @llvm.nvvm.barrier0(), !dbg !108
  %571 = icmp eq i32 %12, 0, !dbg !109
  %572 = bitcast float %570 to i32, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %572, ptr addrspace(1) %1, i1 %571) #5, !dbg !109
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py", directory: "inductor_cache/7c")
!4 = !{ptr @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11", linkageName: "triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 25, column: 33, scope: !11)
!13 = !DILocation(line: 31, column: 23, scope: !11)
!14 = !DILocation(line: 34, column: 23, scope: !11)
!15 = !DILocation(line: 36, column: 34, scope: !11)
!16 = !DILocation(line: 36, column: 39, scope: !11)
!17 = !DILocation(line: 37, column: 35, scope: !11)
!18 = !DILocation(line: 37, column: 40, scope: !11)
!19 = !DILocation(line: 38, column: 39, scope: !11)
!20 = !DILocation(line: 38, column: 44, scope: !11)
!21 = !DILocation(line: 39, column: 35, scope: !11)
!22 = !DILocation(line: 39, column: 40, scope: !11)
!23 = !DILocation(line: 41, column: 35, scope: !11)
!24 = !DILocation(line: 41, column: 40, scope: !11)
!25 = !DILocation(line: 45, column: 36, scope: !11)
!26 = !DILocation(line: 46, column: 64, scope: !11)
!27 = !DILocation(line: 32, column: 25, scope: !11)
!28 = !DILocation(line: 32, column: 30, scope: !11)
!29 = !DILocation(line: 47, column: 41, scope: !11)
!30 = !DILocation(line: 47, column: 39, scope: !11)
!31 = !DILocation(line: 47, column: 48, scope: !11)
!32 = !DILocation(line: 47, column: 34, scope: !11)
!33 = !DILocation(line: 47, column: 56, scope: !11)
!34 = !DILocation(line: 50, column: 36, scope: !11)
!35 = !DILocation(line: 51, column: 64, scope: !11)
!36 = !DILocation(line: 52, column: 44, scope: !11)
!37 = !DILocation(line: 52, column: 42, scope: !11)
!38 = !DILocation(line: 52, column: 35, scope: !11)
!39 = !DILocation(line: 52, column: 49, scope: !11)
!40 = !DILocation(line: 53, column: 42, scope: !11)
!41 = !DILocation(line: 53, column: 35, scope: !11)
!42 = !DILocation(line: 53, column: 49, scope: !11)
!43 = !DILocation(line: 55, column: 40, scope: !11)
!44 = !DILocation(line: 55, column: 49, scope: !11)
!45 = !DILocation(line: 55, column: 35, scope: !11)
!46 = !DILocation(line: 55, column: 57, scope: !11)
!47 = !DILocation(line: 58, column: 39, scope: !11)
!48 = !DILocation(line: 59, column: 66, scope: !11)
!49 = !DILocation(line: 60, column: 43, scope: !11)
!50 = !DILocation(line: 60, column: 35, scope: !11)
!51 = !DILocation(line: 60, column: 50, scope: !11)
!52 = !DILocation(line: 71, column: 66, scope: !11)
!53 = !DILocation(line: 72, column: 45, scope: !11)
!54 = !DILocation(line: 72, column: 63, scope: !11)
!55 = !DILocation(line: 72, column: 35, scope: !11)
!56 = !DILocation(line: 72, column: 81, scope: !11)
!57 = !DILocation(line: 75, column: 39, scope: !11)
!58 = !DILocation(line: 76, column: 66, scope: !11)
!59 = !DILocation(line: 77, column: 58, scope: !11)
!60 = !DILocation(line: 78, column: 43, scope: !11)
!61 = !DILocation(line: 78, column: 35, scope: !11)
!62 = !DILocation(line: 78, column: 58, scope: !11)
!63 = !DILocation(line: 80, column: 63, scope: !11)
!64 = !DILocation(line: 80, column: 35, scope: !11)
!65 = !DILocation(line: 80, column: 74, scope: !11)
!66 = !DILocation(line: 83, column: 39, scope: !11)
!67 = !DILocation(line: 84, column: 66, scope: !11)
!68 = !DILocation(line: 85, column: 43, scope: !11)
!69 = !DILocation(line: 85, column: 35, scope: !11)
!70 = !DILocation(line: 85, column: 58, scope: !11)
!71 = !DILocation(line: 54, column: 24, scope: !11)
!72 = !DILocation(line: 61, column: 24, scope: !11)
!73 = !DILocation(line: 62, column: 24, scope: !11)
!74 = !DILocation(line: 64, column: 25, scope: !11)
!75 = !DILocation(line: 65, column: 25, scope: !11)
!76 = !DILocation(line: 66, column: 24, scope: !11)
!77 = !DILocation(line: 67, column: 24, scope: !11)
!78 = !DILocation(line: 92, column: 24, scope: !11)
!79 = !DILocation(line: 93, column: 28, scope: !11)
!80 = !DILocation(line: 95, column: 24, scope: !11)
!81 = !DILocation(line: 96, column: 24, scope: !11)
!82 = !DILocation(line: 98, column: 24, scope: !11)
!83 = !DILocation(line: 100, column: 24, scope: !11)
!84 = !DILocation(line: 79, column: 24, scope: !11)
!85 = !DILocation(line: 86, column: 24, scope: !11)
!86 = !DILocation(line: 87, column: 24, scope: !11)
!87 = !DILocation(line: 88, column: 25, scope: !11)
!88 = !DILocation(line: 89, column: 25, scope: !11)
!89 = !DILocation(line: 90, column: 24, scope: !11)
!90 = !DILocation(line: 91, column: 24, scope: !11)
!91 = !DILocation(line: 103, column: 25, scope: !11)
!92 = !DILocation(line: 101, column: 39, scope: !11)
!93 = !DILocation(line: 106, column: 25, scope: !11)
!94 = !DILocation(line: 267, column: 36, scope: !95, inlinedAt: !97)
!95 = distinct !DILexicalBlockFile(scope: !11, file: !96, discriminator: 0)
!96 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!97 = !DILocation(line: 108, column: 27, scope: !11)
!98 = !DILocation(line: 256, column: 15, scope: !99, inlinedAt: !97)
!99 = distinct !DILexicalBlockFile(scope: !95, file: !96, discriminator: 0)
!100 = !DILocation(line: 267, column: 36, scope: !95, inlinedAt: !101)
!101 = !DILocation(line: 109, column: 27, scope: !11)
!102 = !DILocation(line: 256, column: 15, scope: !99, inlinedAt: !101)
!103 = !DILocation(line: 110, column: 20, scope: !11)
!104 = !DILocation(line: 112, column: 20, scope: !11)
!105 = !DILocation(line: 114, column: 20, scope: !11)
!106 = !DILocation(line: 115, column: 20, scope: !11)
!107 = !DILocation(line: 116, column: 20, scope: !11)
!108 = !DILocation(line: 117, column: 4, scope: !11)
!109 = !DILocation(line: 118, column: 71, scope: !11)
!110 = !DILocation(line: 118, column: 4, scope: !11)
