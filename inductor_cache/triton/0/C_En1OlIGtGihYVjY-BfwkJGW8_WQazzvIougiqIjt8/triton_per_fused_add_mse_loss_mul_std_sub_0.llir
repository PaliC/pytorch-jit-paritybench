; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mse_loss_mul_std_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #5, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %24 = insertelement <2 x i32> %23, i32 %14, i64 1, !dbg !12
  %25 = bitcast <2 x i32> %24 to <2 x float>, !dbg !12
  %26 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !14
  %27 = insertelement <2 x i32> %26, i32 %20, i64 1, !dbg !14
  %28 = bitcast <2 x i32> %27 to <2 x float>, !dbg !14
  %29 = fsub <2 x float> %25, %28, !dbg !15
  %30 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !12
  %31 = insertelement <2 x i32> %30, i32 %15, i64 1, !dbg !12
  %32 = bitcast <2 x i32> %31 to <2 x float>, !dbg !12
  %33 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !14
  %34 = insertelement <2 x i32> %33, i32 %21, i64 1, !dbg !14
  %35 = bitcast <2 x i32> %34 to <2 x float>, !dbg !14
  %36 = fsub <2 x float> %32, %35, !dbg !15
  %37 = extractelement <2 x float> %29, i64 0, !dbg !16
  %38 = fmul float %37, %37, !dbg !17
  %39 = extractelement <2 x float> %29, i64 1, !dbg !16
  %40 = fmul float %39, %39, !dbg !17
  %41 = extractelement <2 x float> %36, i64 1, !dbg !16
  %42 = fmul float %41, %41, !dbg !17
  %43 = extractelement <2 x float> %36, i64 0, !dbg !16
  %44 = fmul float %43, %43, !dbg !17
  %45 = fadd float %38, %40, !dbg !18
  %46 = fadd float %42, %45, !dbg !18
  %47 = fadd float %44, %46, !dbg !18
  %48 = bitcast float %47 to i32, !dbg !23
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 16, i32 31), !dbg !23
  %50 = bitcast i32 %49 to float, !dbg !23
  %51 = fadd float %47, %50, !dbg !18
  %52 = bitcast float %51 to i32, !dbg !23
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 8, i32 31), !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = fadd float %51, %54, !dbg !18
  %56 = bitcast float %55 to i32, !dbg !23
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 4, i32 31), !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = fadd float %55, %58, !dbg !18
  %60 = bitcast float %59 to i32, !dbg !23
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 2, i32 31), !dbg !23
  %62 = bitcast i32 %61 to float, !dbg !23
  %63 = fadd float %59, %62, !dbg !18
  %64 = bitcast float %63 to i32, !dbg !23
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = fadd float %63, %66, !dbg !18
  %68 = icmp eq i32 %6, 0, !dbg !23
  %69 = and i32 %7, 1, !dbg !23
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !23
  %71 = bitcast float %67 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 %68) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %72 = icmp slt i32 %5, 2, !dbg !23
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !23
  %74 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %73, i1 %72) #5, !dbg !23
  %75 = bitcast i32 %74 to float, !dbg !23
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !23
  %77 = bitcast i32 %76 to float, !dbg !23
  %78 = fadd float %75, %77, !dbg !18
  %79 = and i32 %5, 1, !dbg !23
  %80 = icmp eq i32 %79, 0, !dbg !23
  %81 = and i1 %72, %80, !dbg !23
  %82 = bitcast float %78 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %82, i1 %81) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %83 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %84 = fadd float %83, 0.000000e+00, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %85 = fadd float %37, %39, !dbg !30
  %86 = fadd float %41, %85, !dbg !30
  %87 = fadd float %43, %86, !dbg !30
  %88 = bitcast float %87 to i32, !dbg !28
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !28
  %90 = bitcast i32 %89 to float, !dbg !28
  %91 = fadd float %87, %90, !dbg !30
  %92 = bitcast float %91 to i32, !dbg !28
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !28
  %94 = bitcast i32 %93 to float, !dbg !28
  %95 = fadd float %91, %94, !dbg !30
  %96 = bitcast float %95 to i32, !dbg !28
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !28
  %98 = bitcast i32 %97 to float, !dbg !28
  %99 = fadd float %95, %98, !dbg !30
  %100 = bitcast float %99 to i32, !dbg !28
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !28
  %102 = bitcast i32 %101 to float, !dbg !28
  %103 = fadd float %99, %102, !dbg !30
  %104 = bitcast float %103 to i32, !dbg !28
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !28
  %106 = bitcast i32 %105 to float, !dbg !28
  %107 = fadd float %103, %106, !dbg !30
  %108 = bitcast float %107 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %108, i1 %68) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %73, i1 %72) #5, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = fadd float %110, %112, !dbg !30
  %114 = bitcast float %113 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %114, i1 %81) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %115 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %116 = fadd float %115, 0.000000e+00, !dbg !31
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float 2.560000e+02) #5, !dbg !33
  %118 = fsub float %37, %117, !dbg !16
  %119 = fsub float %39, %117, !dbg !16
  %120 = fsub float %41, %117, !dbg !16
  %121 = fsub float %43, %117, !dbg !16
  %122 = fmul float %118, %118, !dbg !34
  %123 = fmul float %119, %119, !dbg !34
  %124 = fmul float %120, %120, !dbg !34
  %125 = fmul float %121, %121, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %126 = fadd float %122, %123, !dbg !37
  %127 = fadd float %124, %126, !dbg !37
  %128 = fadd float %125, %127, !dbg !37
  %129 = bitcast float %128 to i32, !dbg !35
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 16, i32 31), !dbg !35
  %131 = bitcast i32 %130 to float, !dbg !35
  %132 = fadd float %128, %131, !dbg !37
  %133 = bitcast float %132 to i32, !dbg !35
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 8, i32 31), !dbg !35
  %135 = bitcast i32 %134 to float, !dbg !35
  %136 = fadd float %132, %135, !dbg !37
  %137 = bitcast float %136 to i32, !dbg !35
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 4, i32 31), !dbg !35
  %139 = bitcast i32 %138 to float, !dbg !35
  %140 = fadd float %136, %139, !dbg !37
  %141 = bitcast float %140 to i32, !dbg !35
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !35
  %143 = bitcast i32 %142 to float, !dbg !35
  %144 = fadd float %140, %143, !dbg !37
  %145 = bitcast float %144 to i32, !dbg !35
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !35
  %147 = bitcast i32 %146 to float, !dbg !35
  %148 = fadd float %144, %147, !dbg !37
  %149 = bitcast float %148 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %149, i1 %68) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %150 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %73, i1 %72) #5, !dbg !35
  %151 = bitcast i32 %150 to float, !dbg !35
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !35
  %153 = bitcast i32 %152 to float, !dbg !35
  %154 = fadd float %151, %153, !dbg !37
  %155 = bitcast float %154 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %155, i1 %81) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %156 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %157 = fadd float %156, 0.000000e+00, !dbg !38
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 2.560000e+02) #5, !dbg !40
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 2.550000e+02) #5, !dbg !41
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %160, 0, !dbg !42
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i = icmp eq i32 %161, 0, !dbg !42
  br i1 %.not.i, label %167, label %162, !dbg !42

162:                                              ; preds = %4
  br i1 %.not1.i, label %165, label %163, !dbg !42

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

167:                                              ; preds = %4
  br i1 %.not1.i, label %170, label %168, !dbg !42

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %163, %165, %168, %170
  %.0.i = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !42
  %172 = fmul float %.0.i, 0.000000e+00, !dbg !43
  %173 = fadd float %158, %172, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %urem = and i32 %5, 63, !dbg !46
  %174 = icmp eq i32 %urem, 0, !dbg !46
  %175 = bitcast float %173 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %0, i1 %174) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu3pkbc7efwojztcb5zomtjofdpymdigeydvqkumeouqp7mjtens.py", directory: "inductor_cache/u3")
!4 = !{ptr @triton_per_fused_add_mse_loss_mul_std_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mse_loss_mul_std_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mse_loss_mul_std_sub_0", linkageName: "triton_per_fused_add_mse_loss_mul_std_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 43, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 18, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 36, column: 57, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !22)
!24 = !DILocation(line: 73, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 36, column: 44, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !29)
!29 = !DILocation(line: 39, column: 58, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !29)
!31 = !DILocation(line: 73, column: 15, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 39, column: 45, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !36)
!36 = !DILocation(line: 46, column: 59, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !36)
!38 = !DILocation(line: 73, column: 15, scope: !25, inlinedAt: !39)
!39 = !DILocation(line: 46, column: 45, scope: !7)
!40 = !DILocation(line: 48, column: 19, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 27, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 4, scope: !7)
!46 = !DILocation(line: 56, column: 63, scope: !7)
!47 = !DILocation(line: 56, column: 4, scope: !7)
