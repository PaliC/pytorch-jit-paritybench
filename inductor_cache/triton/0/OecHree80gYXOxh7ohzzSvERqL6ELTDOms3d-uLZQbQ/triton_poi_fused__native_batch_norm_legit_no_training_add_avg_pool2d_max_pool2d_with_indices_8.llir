; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %19 = icmp slt i32 %17, 11264, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %20 = sdiv i32 %.frozen, 11, !dbg !15
  %21 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !16
  %22 = insertelement <2 x i32> %21, i32 %18, i64 1, !dbg !16
  %23 = sdiv <2 x i32> %22, <i32 176, i32 11>, !dbg !16
  %24 = srem i32 %20, 16, !dbg !17
  %25 = srem <2 x i32> %23, splat (i32 16), !dbg !18
  %26 = mul i32 %20, 11, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = srem i32 %18, 11, !dbg !19
  %28 = sdiv i32 %17, 2816, !dbg !20
  %29 = sext i32 %17 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %19) #3, !dbg !22
  %32 = sext i32 %.decomposed to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !23
  %34 = sext i32 %27 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %19) #3, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %19) #3, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #3, !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %19) #3, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %19) #3, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %19) #3, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %19) #3, !dbg !30
  %52 = extractelement <2 x i32> %25, i64 0, !dbg !31
  %53 = shl nsw i32 %52, 1, !dbg !32
  %54 = add nsw i32 %53, -1, !dbg !33
  %55 = icmp sgt i32 %52, 0, !dbg !34
  %56 = shl nsw i32 %24, 1, !dbg !35
  %57 = extractelement <2 x i32> %25, i64 1, !dbg !36
  %58 = shl nsw i32 %57, 1, !dbg !35
  %59 = add nsw i32 %56, -1, !dbg !37
  %60 = add nsw i32 %58, -1, !dbg !37
  %61 = icmp sgt i32 %24, 0, !dbg !38
  %62 = icmp sgt i32 %57, 0, !dbg !38
  %63 = and i1 %55, %61, !dbg !39
  %64 = and i1 %62, %55, !dbg !39
  %65 = mul nsw i32 %24, 22, !dbg !40
  %66 = mul nsw i32 %57, 22, !dbg !40
  %67 = mul nsw i32 %52, 682, !dbg !41
  %68 = mul i32 %28, 10571, !dbg !42
  %69 = add i32 %67, %68, !dbg !43
  %70 = add i32 %69, -352, !dbg !44
  %71 = add i32 %70, %.decomposed, !dbg !45
  %72 = add i32 %71, %65, !dbg !46
  %73 = add i32 %70, %27, !dbg !45
  %74 = add i32 %73, %66, !dbg !46
  %75 = sext i32 %72 to i64, !dbg !47
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !47
  %77 = sext i32 %74 to i64, !dbg !47
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !47
  %79 = and i1 %19, %63, !dbg !48
  %80 = and i1 %19, %64, !dbg !48
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %79, i32 -8388608, i1 %79) #3, !dbg !49
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %80, i32 -8388608, i1 %80) #3, !dbg !49
  %83 = icmp sgt i32 %24, -1, !dbg !50
  %84 = icmp sgt i32 %57, -1, !dbg !50
  %85 = and i1 %55, %83, !dbg !51
  %86 = and i1 %84, %55, !dbg !51
  %87 = add i32 %69, -341, !dbg !52
  %88 = add i32 %87, %.decomposed, !dbg !53
  %89 = add i32 %88, %65, !dbg !54
  %90 = add i32 %87, %27, !dbg !53
  %91 = add i32 %90, %66, !dbg !54
  %92 = sext i32 %89 to i64, !dbg !55
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !55
  %94 = sext i32 %91 to i64, !dbg !55
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !55
  %96 = and i1 %19, %85, !dbg !56
  %97 = and i1 %19, %86, !dbg !56
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %96, i32 -8388608, i1 %96) #3, !dbg !57
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %97, i32 -8388608, i1 %97) #3, !dbg !57
  %100 = or disjoint i32 %56, 1, !dbg !58
  %101 = or disjoint i32 %58, 1, !dbg !58
  %102 = icmp slt i32 %100, 31, !dbg !59
  %103 = icmp slt i32 %101, 31, !dbg !59
  %104 = and i1 %83, %102, !dbg !60
  %105 = and i1 %84, %103, !dbg !60
  %106 = and i1 %55, %104, !dbg !61
  %107 = and i1 %105, %55, !dbg !61
  %108 = add i32 %69, -330, !dbg !62
  %109 = add i32 %108, %.decomposed, !dbg !63
  %110 = add i32 %109, %65, !dbg !64
  %111 = add i32 %108, %27, !dbg !63
  %112 = add i32 %111, %66, !dbg !64
  %113 = sext i32 %110 to i64, !dbg !65
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !65
  %115 = sext i32 %112 to i64, !dbg !65
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !65
  %117 = and i1 %19, %106, !dbg !66
  %118 = and i1 %19, %107, !dbg !66
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %117, i32 -8388608, i1 %117) #3, !dbg !67
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %118, i32 -8388608, i1 %118) #3, !dbg !67
  %121 = icmp sgt i32 %52, -1, !dbg !68
  %122 = and i1 %121, %61, !dbg !69
  %123 = and i1 %62, %121, !dbg !69
  %124 = add i32 %69, -11, !dbg !70
  %125 = add i32 %124, %.decomposed, !dbg !71
  %126 = add i32 %125, %65, !dbg !72
  %127 = add i32 %124, %27, !dbg !71
  %128 = add i32 %127, %66, !dbg !72
  %129 = sext i32 %126 to i64, !dbg !73
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !73
  %131 = sext i32 %128 to i64, !dbg !73
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !73
  %133 = and i1 %19, %122, !dbg !74
  %134 = and i1 %19, %123, !dbg !74
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %133, i32 -8388608, i1 %133) #3, !dbg !75
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %134, i32 -8388608, i1 %134) #3, !dbg !75
  %137 = or i32 %52, %24, !dbg !76
  %138 = icmp sgt i32 %137, -1, !dbg !76
  %139 = or i32 %52, %57, !dbg !76
  %140 = icmp sgt i32 %139, -1, !dbg !76
  %141 = add i32 %69, %.decomposed, !dbg !77
  %142 = add i32 %141, %65, !dbg !78
  %143 = add i32 %69, %27, !dbg !77
  %144 = add i32 %143, %66, !dbg !78
  %145 = sext i32 %142 to i64, !dbg !79
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !79
  %147 = sext i32 %144 to i64, !dbg !79
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !79
  %149 = and i1 %19, %138, !dbg !80
  %150 = and i1 %19, %140, !dbg !80
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %149, i32 -8388608, i1 %149) #3, !dbg !81
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %150, i32 -8388608, i1 %150) #3, !dbg !81
  %153 = and i1 %121, %104, !dbg !82
  %154 = and i1 %105, %121, !dbg !82
  %155 = add i32 %69, 11, !dbg !83
  %156 = add i32 %155, %.decomposed, !dbg !84
  %157 = add i32 %156, %65, !dbg !85
  %158 = add i32 %155, %27, !dbg !84
  %159 = add i32 %158, %66, !dbg !85
  %160 = sext i32 %157 to i64, !dbg !86
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !86
  %162 = sext i32 %159 to i64, !dbg !86
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !86
  %164 = and i1 %19, %153, !dbg !87
  %165 = and i1 %19, %154, !dbg !87
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %164, i32 -8388608, i1 %164) #3, !dbg !88
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %165, i32 -8388608, i1 %165) #3, !dbg !88
  %168 = or disjoint i32 %53, 1, !dbg !89
  %169 = icmp slt i32 %168, 31, !dbg !90
  %170 = and i1 %121, %169, !dbg !91
  %171 = and i1 %61, %170, !dbg !92
  %172 = and i1 %62, %170, !dbg !92
  %173 = add i32 %69, 330, !dbg !93
  %174 = add i32 %173, %.decomposed, !dbg !94
  %175 = add i32 %174, %65, !dbg !95
  %176 = add i32 %173, %27, !dbg !94
  %177 = add i32 %176, %66, !dbg !95
  %178 = sext i32 %175 to i64, !dbg !96
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !96
  %180 = sext i32 %177 to i64, !dbg !96
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !96
  %182 = and i1 %19, %171, !dbg !97
  %183 = and i1 %19, %172, !dbg !97
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %182, i32 -8388608, i1 %182) #3, !dbg !98
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %183, i32 -8388608, i1 %183) #3, !dbg !98
  %186 = and i1 %83, %170, !dbg !99
  %187 = and i1 %84, %170, !dbg !99
  %188 = add i32 %69, 341, !dbg !100
  %189 = add i32 %188, %.decomposed, !dbg !101
  %190 = add i32 %189, %65, !dbg !102
  %191 = add i32 %188, %27, !dbg !101
  %192 = add i32 %191, %66, !dbg !102
  %193 = sext i32 %190 to i64, !dbg !103
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !103
  %195 = sext i32 %192 to i64, !dbg !103
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !103
  %197 = and i1 %19, %186, !dbg !104
  %198 = and i1 %19, %187, !dbg !104
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %197, i32 -8388608, i1 %197) #3, !dbg !105
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %198, i32 -8388608, i1 %198) #3, !dbg !105
  %201 = and i1 %170, %104, !dbg !106
  %202 = and i1 %105, %170, !dbg !106
  %203 = add i32 %69, 352, !dbg !107
  %204 = add i32 %203, %.decomposed, !dbg !108
  %205 = add i32 %204, %65, !dbg !109
  %206 = add i32 %203, %27, !dbg !108
  %207 = add i32 %206, %66, !dbg !109
  %208 = sext i32 %205 to i64, !dbg !110
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !110
  %210 = sext i32 %207 to i64, !dbg !110
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !110
  %212 = and i1 %19, %201, !dbg !111
  %213 = and i1 %19, %202, !dbg !111
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %212, i32 -8388608, i1 %212) #3, !dbg !112
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %213, i32 -8388608, i1 %213) #3, !dbg !112
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %79, i32 0, i1 %79) #3, !dbg !113
  %217 = bitcast i32 %216 to float, !dbg !113
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %80, i32 0, i1 %80) #3, !dbg !113
  %219 = bitcast i32 %218 to float, !dbg !113
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %96, i32 0, i1 %96) #3, !dbg !114
  %221 = bitcast i32 %220 to float, !dbg !114
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %97, i32 0, i1 %97) #3, !dbg !114
  %223 = bitcast i32 %222 to float, !dbg !114
  %224 = fadd float %217, %221, !dbg !115
  %225 = fadd float %219, %223, !dbg !115
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %117, i32 0, i1 %117) #3, !dbg !116
  %227 = bitcast i32 %226 to float, !dbg !116
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %118, i32 0, i1 %118) #3, !dbg !116
  %229 = bitcast i32 %228 to float, !dbg !116
  %230 = fadd float %224, %227, !dbg !117
  %231 = fadd float %225, %229, !dbg !117
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %133, i32 0, i1 %133) #3, !dbg !118
  %233 = bitcast i32 %232 to float, !dbg !118
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %134, i32 0, i1 %134) #3, !dbg !118
  %235 = bitcast i32 %234 to float, !dbg !118
  %236 = fadd float %230, %233, !dbg !119
  %237 = fadd float %231, %235, !dbg !119
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %149, i32 0, i1 %149) #3, !dbg !120
  %239 = bitcast i32 %238 to float, !dbg !120
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %150, i32 0, i1 %150) #3, !dbg !120
  %241 = bitcast i32 %240 to float, !dbg !120
  %242 = fadd float %236, %239, !dbg !121
  %243 = fadd float %237, %241, !dbg !121
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %164, i32 0, i1 %164) #3, !dbg !122
  %245 = bitcast i32 %244 to float, !dbg !122
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %165, i32 0, i1 %165) #3, !dbg !122
  %247 = bitcast i32 %246 to float, !dbg !122
  %248 = fadd float %242, %245, !dbg !123
  %249 = fadd float %243, %247, !dbg !123
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %182, i32 0, i1 %182) #3, !dbg !124
  %251 = bitcast i32 %250 to float, !dbg !124
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %183, i32 0, i1 %183) #3, !dbg !124
  %253 = bitcast i32 %252 to float, !dbg !124
  %254 = fadd float %248, %251, !dbg !125
  %255 = fadd float %249, %253, !dbg !125
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %197, i32 0, i1 %197) #3, !dbg !126
  %257 = bitcast i32 %256 to float, !dbg !126
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %198, i32 0, i1 %198) #3, !dbg !126
  %259 = bitcast i32 %258 to float, !dbg !126
  %260 = fadd float %254, %257, !dbg !127
  %261 = fadd float %255, %259, !dbg !127
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %212, i32 0, i1 %212) #3, !dbg !128
  %263 = bitcast i32 %262 to float, !dbg !128
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %213, i32 0, i1 %213) #3, !dbg !128
  %265 = bitcast i32 %264 to float, !dbg !128
  %266 = fadd float %260, %263, !dbg !129
  %267 = fadd float %261, %265, !dbg !129
  %268 = select i1 %61, i32 %59, i32 0, !dbg !130
  %269 = select i1 %62, i32 %60, i32 0, !dbg !130
  %270 = select i1 %55, i32 %54, i32 0, !dbg !131
  %271 = add nsw i32 %56, 2, !dbg !132
  %272 = add nsw i32 %58, 2, !dbg !132
  %273 = icmp sgt i32 %24, 14, !dbg !133
  %274 = icmp sgt i32 %57, 14, !dbg !133
  %275 = select i1 %273, i32 31, i32 0, !dbg !134
  %276 = select i1 %274, i32 31, i32 0, !dbg !134
  %277 = icmp slt i32 %24, 15, !dbg !36
  %278 = icmp slt i32 %57, 15, !dbg !36
  %279 = select i1 %277, i32 %271, i32 0, !dbg !135
  %280 = select i1 %278, i32 %272, i32 0, !dbg !135
  %281 = add nsw i32 %279, %275, !dbg !136
  %282 = add nsw i32 %280, %276, !dbg !136
  %283 = add nsw i32 %53, 2, !dbg !137
  %284 = icmp sgt i32 %52, 14, !dbg !138
  %285 = select i1 %284, i32 31, i32 0, !dbg !139
  %286 = icmp slt i32 %52, 15, !dbg !31
  %287 = select i1 %286, i32 %283, i32 0, !dbg !140
  %288 = add nsw i32 %287, %285, !dbg !141
  %reass.add = sub nsw i32 %288, %270
  %reass.mul = mul nsw i32 %reass.add, %281
  %reass.add9 = sub nsw i32 %270, %288
  %reass.mul10 = mul nsw i32 %reass.add9, %268
  %289 = add nsw i32 %reass.mul10, %reass.mul, !dbg !142
  %reass.mul8 = mul nsw i32 %reass.add, %282
  %reass.mul12 = mul nsw i32 %reass.add9, %269
  %290 = add nsw i32 %reass.mul12, %reass.mul8, !dbg !142
  %291 = sitofp i32 %289 to float, !dbg !143
  %292 = sitofp i32 %290 to float, !dbg !143
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %291) #3, !dbg !143
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %292) #3, !dbg !143
  %295 = fadd float %41, 0x3F50624DE0000000, !dbg !144
  %296 = fadd float %43, 0x3F50624DE0000000, !dbg !144
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !145
  %.not.i = icmp eq i32 %297, 0, !dbg !145
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !145
  %.not1.i = icmp eq i32 %298, 0, !dbg !145
  br i1 %.not.i, label %304, label %299, !dbg !145

299:                                              ; preds = %11
  br i1 %.not1.i, label %302, label %300, !dbg !145

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %295) #3, !dbg !145
  br label %__nv_sqrtf.exit, !dbg !145

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %295) #3, !dbg !145
  br label %__nv_sqrtf.exit, !dbg !145

304:                                              ; preds = %11
  br i1 %.not1.i, label %307, label %305, !dbg !145

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %295) #3, !dbg !145
  br label %__nv_sqrtf.exit, !dbg !145

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %295) #3, !dbg !145
  br label %__nv_sqrtf.exit, !dbg !145

__nv_sqrtf.exit:                                  ; preds = %300, %302, %305, %307
  %.0.i = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !145
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !145
  %.not.i1 = icmp eq i32 %309, 0, !dbg !145
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !145
  %.not1.i4 = icmp eq i32 %310, 0, !dbg !145
  br i1 %.not.i1, label %316, label %311, !dbg !145

311:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %314, label %312, !dbg !145

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %296) #3, !dbg !145
  br label %__nv_sqrtf.exit5, !dbg !145

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %296) #3, !dbg !145
  br label %__nv_sqrtf.exit5, !dbg !145

316:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %319, label %317, !dbg !145

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %296) #3, !dbg !145
  br label %__nv_sqrtf.exit5, !dbg !145

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %296) #3, !dbg !145
  br label %__nv_sqrtf.exit5, !dbg !145

__nv_sqrtf.exit5:                                 ; preds = %312, %314, %317, %319
  %.0.i3 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !145
  %321 = extractvalue { i32, i32 } %31, 1, !dbg !22
  %322 = bitcast i32 %321 to float, !dbg !22
  %323 = bitcast i32 %37 to float, !dbg !24
  %324 = fsub float %322, %323, !dbg !146
  %325 = extractvalue { i32, i32 } %31, 0, !dbg !22
  %326 = bitcast i32 %325 to float, !dbg !22
  %327 = bitcast i32 %36 to float, !dbg !24
  %328 = fsub float %326, %327, !dbg !146
  %329 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !57
  %330 = insertelement <2 x i32> %329, i32 %99, i64 1, !dbg !57
  %331 = bitcast <2 x i32> %330 to <2 x float>, !dbg !57
  %332 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !49
  %333 = insertelement <2 x i32> %332, i32 %82, i64 1, !dbg !49
  %334 = bitcast <2 x i32> %333 to <2 x float>, !dbg !49
  %335 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !67
  %336 = insertelement <2 x i32> %335, i32 %120, i64 1, !dbg !67
  %337 = bitcast <2 x i32> %336 to <2 x float>, !dbg !67
  %338 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !75
  %339 = insertelement <2 x i32> %338, i32 %136, i64 1, !dbg !75
  %340 = bitcast <2 x i32> %339 to <2 x float>, !dbg !75
  %341 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !81
  %342 = insertelement <2 x i32> %341, i32 %152, i64 1, !dbg !81
  %343 = bitcast <2 x i32> %342 to <2 x float>, !dbg !81
  %344 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !88
  %345 = insertelement <2 x i32> %344, i32 %167, i64 1, !dbg !88
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !88
  %347 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !98
  %348 = insertelement <2 x i32> %347, i32 %185, i64 1, !dbg !98
  %349 = bitcast <2 x i32> %348 to <2 x float>, !dbg !98
  %350 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !105
  %351 = insertelement <2 x i32> %350, i32 %200, i64 1, !dbg !105
  %352 = bitcast <2 x i32> %351 to <2 x float>, !dbg !105
  %353 = insertelement <2 x i32> poison, i32 %214, i64 0, !dbg !112
  %354 = insertelement <2 x i32> %353, i32 %215, i64 1, !dbg !112
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !112
  %356 = fcmp uno <2 x float> %343, zeroinitializer, !dbg !147
  %357 = fcmp ogt <2 x float> %331, %334, !dbg !151
  %358 = fcmp uno <2 x float> %331, zeroinitializer, !dbg !153
  %359 = or <2 x i1> %357, %358, !dbg !154
  %.v = select <2 x i1> %359, <2 x i32> %330, <2 x i32> %333, !dbg !155
  %360 = bitcast <2 x i32> %.v to <2 x float>, !dbg !155
  %361 = fcmp olt <2 x float> %360, %337, !dbg !156
  %362 = fcmp uno <2 x float> %337, zeroinitializer, !dbg !158
  %363 = or <2 x i1> %362, %361, !dbg !159
  %.v13 = select <2 x i1> %363, <2 x i32> %336, <2 x i32> %.v, !dbg !160
  %364 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !160
  %365 = fcmp olt <2 x float> %364, %340, !dbg !161
  %366 = fcmp uno <2 x float> %340, zeroinitializer, !dbg !163
  %367 = or <2 x i1> %366, %365, !dbg !164
  %.v14 = select <2 x i1> %367, <2 x i32> %339, <2 x i32> %.v13, !dbg !165
  %368 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !165
  %369 = fcmp olt <2 x float> %368, %343, !dbg !166
  %370 = or <2 x i1> %356, %369, !dbg !167
  %.v15 = select <2 x i1> %370, <2 x i32> %342, <2 x i32> %.v14, !dbg !168
  %371 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !168
  %372 = fcmp olt <2 x float> %371, %346, !dbg !169
  %373 = fcmp uno <2 x float> %346, zeroinitializer, !dbg !171
  %374 = or <2 x i1> %373, %372, !dbg !172
  %.v16 = select <2 x i1> %374, <2 x i32> %345, <2 x i32> %.v15, !dbg !173
  %375 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !173
  %376 = fcmp olt <2 x float> %375, %349, !dbg !174
  %377 = fcmp uno <2 x float> %349, zeroinitializer, !dbg !176
  %378 = or <2 x i1> %377, %376, !dbg !177
  %.v17 = select <2 x i1> %378, <2 x i32> %348, <2 x i32> %.v16, !dbg !178
  %379 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !178
  %380 = fcmp olt <2 x float> %379, %352, !dbg !179
  %381 = fcmp uno <2 x float> %352, zeroinitializer, !dbg !181
  %382 = or <2 x i1> %381, %380, !dbg !182
  %.v18 = select <2 x i1> %382, <2 x i32> %351, <2 x i32> %.v17, !dbg !183
  %383 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !183
  %384 = fcmp olt <2 x float> %383, %355, !dbg !184
  %385 = zext <2 x i1> %357 to <2 x i8>, !dbg !186
  %386 = select <2 x i1> %361, <2 x i8> splat (i8 2), <2 x i8> %385, !dbg !187
  %387 = select <2 x i1> %365, <2 x i8> splat (i8 3), <2 x i8> %386, !dbg !188
  %388 = select <2 x i1> %369, <2 x i8> splat (i8 4), <2 x i8> %387, !dbg !189
  %389 = select <2 x i1> %372, <2 x i8> splat (i8 5), <2 x i8> %388, !dbg !190
  %390 = select <2 x i1> %376, <2 x i8> splat (i8 6), <2 x i8> %389, !dbg !191
  %391 = select <2 x i1> %380, <2 x i8> splat (i8 7), <2 x i8> %390, !dbg !192
  %392 = select <2 x i1> %384, <2 x i8> splat (i8 8), <2 x i8> %391, !dbg !193
  %393 = bitcast i32 %215 to float, !dbg !194
  %394 = fcmp uno float %393, 0.000000e+00, !dbg !194
  %395 = extractelement <2 x i1> %384, i64 1, !dbg !195
  %396 = or i1 %394, %395, !dbg !195
  %397 = extractelement <2 x float> %383, i64 1, !dbg !196
  %398 = select i1 %396, float %393, float %397, !dbg !196
  %399 = bitcast i32 %214 to float, !dbg !194
  %400 = fcmp uno float %399, 0.000000e+00, !dbg !194
  %401 = extractelement <2 x i1> %384, i64 0, !dbg !195
  %402 = or i1 %400, %401, !dbg !195
  %403 = extractelement <2 x float> %383, i64 0, !dbg !196
  %404 = select i1 %402, float %399, float %403, !dbg !196
  %405 = bitcast i32 %51 to float, !dbg !30
  %406 = bitcast i32 %50 to float, !dbg !30
  %407 = bitcast i32 %47 to float, !dbg !28
  %408 = bitcast i32 %46 to float, !dbg !28
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !197
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !197
  %411 = fmul float %328, %409, !dbg !198
  %412 = fmul float %324, %410, !dbg !198
  %413 = fmul float %411, %408, !dbg !199
  %414 = fmul float %412, %407, !dbg !199
  %415 = fadd float %413, %406, !dbg !200
  %416 = fadd float %414, %405, !dbg !200
  %417 = fadd float %404, %415, !dbg !201
  %418 = fadd float %398, %416, !dbg !201
  %419 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !202
  %420 = bitcast float %404 to i32, !dbg !203
  %421 = bitcast float %398 to i32, !dbg !203
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %420, i32 %421, ptr addrspace(1) %419, i1 %19) #3, !dbg !203
  %422 = getelementptr i8, ptr addrspace(1) %7, i64 %29, !dbg !204
  %423 = bitcast <2 x i8> %392 to i16, !dbg !205
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %423, ptr addrspace(1) %422, i1 %19) #3, !dbg !205
  %424 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !206
  %425 = bitcast float %293 to i32, !dbg !207
  %426 = bitcast float %294 to i32, !dbg !207
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %425, i32 %426, ptr addrspace(1) %424, i1 %19) #3, !dbg !207
  %427 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !208
  %428 = bitcast float %417 to i32, !dbg !209
  %429 = bitcast float %418 to i32, !dbg !209
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %428, i32 %429, ptr addrspace(1) %427, i1 %19) #3, !dbg !209
  ret void, !dbg !210
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbncnqw23r5hbwvqewofq3a2omwvpbvzo7fjrzlw3k3c3f4j6mzs.py", directory: "inductor_cache/bn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 24, column: 28, scope: !7)
!19 = !DILocation(line: 26, column: 19, scope: !7)
!20 = !DILocation(line: 27, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 32, scope: !7)
!28 = !DILocation(line: 32, column: 37, scope: !7)
!29 = !DILocation(line: 33, column: 32, scope: !7)
!30 = !DILocation(line: 33, column: 37, scope: !7)
!31 = !DILocation(line: 128, column: 280, scope: !7)
!32 = !DILocation(line: 34, column: 20, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 128, column: 215, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 48, scope: !7)
!41 = !DILocation(line: 45, column: 57, scope: !7)
!42 = !DILocation(line: 45, column: 68, scope: !7)
!43 = !DILocation(line: 45, column: 40, scope: !7)
!44 = !DILocation(line: 45, column: 45, scope: !7)
!45 = !DILocation(line: 45, column: 53, scope: !7)
!46 = !DILocation(line: 45, column: 62, scope: !7)
!47 = !DILocation(line: 45, column: 31, scope: !7)
!48 = !DILocation(line: 45, column: 81, scope: !7)
!49 = !DILocation(line: 45, column: 73, scope: !7)
!50 = !DILocation(line: 47, column: 21, scope: !7)
!51 = !DILocation(line: 50, column: 19, scope: !7)
!52 = !DILocation(line: 51, column: 45, scope: !7)
!53 = !DILocation(line: 51, column: 53, scope: !7)
!54 = !DILocation(line: 51, column: 62, scope: !7)
!55 = !DILocation(line: 51, column: 31, scope: !7)
!56 = !DILocation(line: 51, column: 81, scope: !7)
!57 = !DILocation(line: 51, column: 73, scope: !7)
!58 = !DILocation(line: 53, column: 16, scope: !7)
!59 = !DILocation(line: 55, column: 20, scope: !7)
!60 = !DILocation(line: 56, column: 20, scope: !7)
!61 = !DILocation(line: 57, column: 19, scope: !7)
!62 = !DILocation(line: 58, column: 45, scope: !7)
!63 = !DILocation(line: 58, column: 53, scope: !7)
!64 = !DILocation(line: 58, column: 62, scope: !7)
!65 = !DILocation(line: 58, column: 31, scope: !7)
!66 = !DILocation(line: 58, column: 81, scope: !7)
!67 = !DILocation(line: 58, column: 73, scope: !7)
!68 = !DILocation(line: 61, column: 21, scope: !7)
!69 = !DILocation(line: 64, column: 20, scope: !7)
!70 = !DILocation(line: 65, column: 44, scope: !7)
!71 = !DILocation(line: 65, column: 52, scope: !7)
!72 = !DILocation(line: 65, column: 61, scope: !7)
!73 = !DILocation(line: 65, column: 31, scope: !7)
!74 = !DILocation(line: 65, column: 80, scope: !7)
!75 = !DILocation(line: 65, column: 72, scope: !7)
!76 = !DILocation(line: 67, column: 20, scope: !7)
!77 = !DILocation(line: 68, column: 44, scope: !7)
!78 = !DILocation(line: 68, column: 53, scope: !7)
!79 = !DILocation(line: 68, column: 31, scope: !7)
!80 = !DILocation(line: 68, column: 72, scope: !7)
!81 = !DILocation(line: 68, column: 64, scope: !7)
!82 = !DILocation(line: 70, column: 20, scope: !7)
!83 = !DILocation(line: 71, column: 41, scope: !7)
!84 = !DILocation(line: 71, column: 49, scope: !7)
!85 = !DILocation(line: 71, column: 58, scope: !7)
!86 = !DILocation(line: 71, column: 31, scope: !7)
!87 = !DILocation(line: 71, column: 77, scope: !7)
!88 = !DILocation(line: 71, column: 69, scope: !7)
!89 = !DILocation(line: 73, column: 16, scope: !7)
!90 = !DILocation(line: 75, column: 20, scope: !7)
!91 = !DILocation(line: 76, column: 20, scope: !7)
!92 = !DILocation(line: 77, column: 20, scope: !7)
!93 = !DILocation(line: 78, column: 42, scope: !7)
!94 = !DILocation(line: 78, column: 50, scope: !7)
!95 = !DILocation(line: 78, column: 59, scope: !7)
!96 = !DILocation(line: 78, column: 31, scope: !7)
!97 = !DILocation(line: 78, column: 78, scope: !7)
!98 = !DILocation(line: 78, column: 70, scope: !7)
!99 = !DILocation(line: 80, column: 20, scope: !7)
!100 = !DILocation(line: 81, column: 42, scope: !7)
!101 = !DILocation(line: 81, column: 50, scope: !7)
!102 = !DILocation(line: 81, column: 59, scope: !7)
!103 = !DILocation(line: 81, column: 31, scope: !7)
!104 = !DILocation(line: 81, column: 78, scope: !7)
!105 = !DILocation(line: 81, column: 70, scope: !7)
!106 = !DILocation(line: 83, column: 20, scope: !7)
!107 = !DILocation(line: 84, column: 42, scope: !7)
!108 = !DILocation(line: 84, column: 50, scope: !7)
!109 = !DILocation(line: 84, column: 59, scope: !7)
!110 = !DILocation(line: 84, column: 31, scope: !7)
!111 = !DILocation(line: 84, column: 78, scope: !7)
!112 = !DILocation(line: 84, column: 70, scope: !7)
!113 = !DILocation(line: 111, column: 73, scope: !7)
!114 = !DILocation(line: 112, column: 73, scope: !7)
!115 = !DILocation(line: 113, column: 20, scope: !7)
!116 = !DILocation(line: 114, column: 73, scope: !7)
!117 = !DILocation(line: 115, column: 20, scope: !7)
!118 = !DILocation(line: 116, column: 72, scope: !7)
!119 = !DILocation(line: 117, column: 20, scope: !7)
!120 = !DILocation(line: 118, column: 64, scope: !7)
!121 = !DILocation(line: 119, column: 20, scope: !7)
!122 = !DILocation(line: 120, column: 69, scope: !7)
!123 = !DILocation(line: 121, column: 20, scope: !7)
!124 = !DILocation(line: 122, column: 70, scope: !7)
!125 = !DILocation(line: 123, column: 20, scope: !7)
!126 = !DILocation(line: 124, column: 70, scope: !7)
!127 = !DILocation(line: 125, column: 20, scope: !7)
!128 = !DILocation(line: 126, column: 70, scope: !7)
!129 = !DILocation(line: 127, column: 20, scope: !7)
!130 = !DILocation(line: 128, column: 61, scope: !7)
!131 = !DILocation(line: 128, column: 132, scope: !7)
!132 = !DILocation(line: 128, column: 178, scope: !7)
!133 = !DILocation(line: 128, column: 174, scope: !7)
!134 = !DILocation(line: 128, column: 165, scope: !7)
!135 = !DILocation(line: 128, column: 201, scope: !7)
!136 = !DILocation(line: 128, column: 187, scope: !7)
!137 = !DILocation(line: 128, column: 243, scope: !7)
!138 = !DILocation(line: 128, column: 239, scope: !7)
!139 = !DILocation(line: 128, column: 230, scope: !7)
!140 = !DILocation(line: 128, column: 266, scope: !7)
!141 = !DILocation(line: 128, column: 252, scope: !7)
!142 = !DILocation(line: 128, column: 434, scope: !7)
!143 = !DILocation(line: 129, column: 20, scope: !7)
!144 = !DILocation(line: 132, column: 21, scope: !7)
!145 = !DILocation(line: 133, column: 28, scope: !7)
!146 = !DILocation(line: 130, column: 20, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !148, inlinedAt: !150)
!148 = distinct !DILexicalBlockFile(scope: !7, file: !149, discriminator: 0)
!149 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!150 = !DILocation(line: 69, column: 42, scope: !7)
!151 = !DILocation(line: 118, column: 15, scope: !148, inlinedAt: !152)
!152 = !DILocation(line: 52, column: 42, scope: !7)
!153 = !DILocation(line: 120, column: 21, scope: !148, inlinedAt: !152)
!154 = !DILocation(line: 120, column: 16, scope: !148, inlinedAt: !152)
!155 = !DILocation(line: 121, column: 29, scope: !148, inlinedAt: !152)
!156 = !DILocation(line: 118, column: 15, scope: !148, inlinedAt: !157)
!157 = !DILocation(line: 59, column: 42, scope: !7)
!158 = !DILocation(line: 120, column: 21, scope: !148, inlinedAt: !157)
!159 = !DILocation(line: 120, column: 16, scope: !148, inlinedAt: !157)
!160 = !DILocation(line: 121, column: 29, scope: !148, inlinedAt: !157)
!161 = !DILocation(line: 118, column: 15, scope: !148, inlinedAt: !162)
!162 = !DILocation(line: 66, column: 42, scope: !7)
!163 = !DILocation(line: 120, column: 21, scope: !148, inlinedAt: !162)
!164 = !DILocation(line: 120, column: 16, scope: !148, inlinedAt: !162)
!165 = !DILocation(line: 121, column: 29, scope: !148, inlinedAt: !162)
!166 = !DILocation(line: 118, column: 15, scope: !148, inlinedAt: !150)
!167 = !DILocation(line: 120, column: 16, scope: !148, inlinedAt: !150)
!168 = !DILocation(line: 121, column: 29, scope: !148, inlinedAt: !150)
!169 = !DILocation(line: 118, column: 15, scope: !148, inlinedAt: !170)
!170 = !DILocation(line: 72, column: 42, scope: !7)
!171 = !DILocation(line: 120, column: 21, scope: !148, inlinedAt: !170)
!172 = !DILocation(line: 120, column: 16, scope: !148, inlinedAt: !170)
!173 = !DILocation(line: 121, column: 29, scope: !148, inlinedAt: !170)
!174 = !DILocation(line: 118, column: 15, scope: !148, inlinedAt: !175)
!175 = !DILocation(line: 79, column: 42, scope: !7)
!176 = !DILocation(line: 120, column: 21, scope: !148, inlinedAt: !175)
!177 = !DILocation(line: 120, column: 16, scope: !148, inlinedAt: !175)
!178 = !DILocation(line: 121, column: 29, scope: !148, inlinedAt: !175)
!179 = !DILocation(line: 118, column: 15, scope: !148, inlinedAt: !180)
!180 = !DILocation(line: 82, column: 42, scope: !7)
!181 = !DILocation(line: 120, column: 21, scope: !148, inlinedAt: !180)
!182 = !DILocation(line: 120, column: 16, scope: !148, inlinedAt: !180)
!183 = !DILocation(line: 121, column: 29, scope: !148, inlinedAt: !180)
!184 = !DILocation(line: 118, column: 15, scope: !148, inlinedAt: !185)
!185 = !DILocation(line: 85, column: 42, scope: !7)
!186 = !DILocation(line: 89, column: 35, scope: !7)
!187 = !DILocation(line: 92, column: 35, scope: !7)
!188 = !DILocation(line: 95, column: 35, scope: !7)
!189 = !DILocation(line: 98, column: 35, scope: !7)
!190 = !DILocation(line: 101, column: 35, scope: !7)
!191 = !DILocation(line: 104, column: 35, scope: !7)
!192 = !DILocation(line: 107, column: 35, scope: !7)
!193 = !DILocation(line: 110, column: 35, scope: !7)
!194 = !DILocation(line: 120, column: 21, scope: !148, inlinedAt: !185)
!195 = !DILocation(line: 120, column: 16, scope: !148, inlinedAt: !185)
!196 = !DILocation(line: 121, column: 29, scope: !148, inlinedAt: !185)
!197 = !DILocation(line: 135, column: 22, scope: !7)
!198 = !DILocation(line: 138, column: 21, scope: !7)
!199 = !DILocation(line: 139, column: 22, scope: !7)
!200 = !DILocation(line: 140, column: 22, scope: !7)
!201 = !DILocation(line: 141, column: 21, scope: !7)
!202 = !DILocation(line: 142, column: 25, scope: !7)
!203 = !DILocation(line: 142, column: 37, scope: !7)
!204 = !DILocation(line: 143, column: 25, scope: !7)
!205 = !DILocation(line: 143, column: 37, scope: !7)
!206 = !DILocation(line: 144, column: 25, scope: !7)
!207 = !DILocation(line: 144, column: 37, scope: !7)
!208 = !DILocation(line: 145, column: 25, scope: !7)
!209 = !DILocation(line: 145, column: 38, scope: !7)
!210 = !DILocation(line: 145, column: 4, scope: !7)
