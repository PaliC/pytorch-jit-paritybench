; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_pow_sub_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 24, !dbg !12
  %11 = and i32 %9, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 8, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 2, !dbg !15
  %15 = mul i32 %14, 2, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = shl i32 %14, 2, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %13) #1, !dbg !19
  %20 = shl nsw i32 %.decomposed, 2, !dbg !20
  %21 = shl i32 %14, 4, !dbg !21
  %22 = add i32 %20, %21, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %13) #1, !dbg !24
  %26 = or disjoint i32 %16, 1, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %13) #1, !dbg !27
  %30 = or disjoint i32 %20, 1, !dbg !28
  %31 = add i32 %30, %21, !dbg !29
  %32 = sext i32 %31 to i64, !dbg !30
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !30
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !31
  %35 = or disjoint i32 %16, 2, !dbg !32
  %36 = sext i32 %35 to i64, !dbg !33
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !33
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #1, !dbg !34
  %39 = or disjoint i32 %20, 2, !dbg !35
  %40 = add i32 %39, %21, !dbg !36
  %41 = sext i32 %40 to i64, !dbg !37
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !37
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %13) #1, !dbg !38
  %44 = or disjoint i32 %16, 3, !dbg !39
  %45 = sext i32 %44 to i64, !dbg !40
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !40
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %13) #1, !dbg !41
  %48 = or disjoint i32 %20, 3, !dbg !42
  %49 = add i32 %48, %21, !dbg !43
  %50 = sext i32 %49 to i64, !dbg !44
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !44
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %13) #1, !dbg !45
  %53 = shl i32 %12, 2, !dbg !46
  %54 = sext i32 %53 to i64, !dbg !47
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !47
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %13) #1, !dbg !48
  %57 = or disjoint i32 %53, 1, !dbg !49
  %58 = sext i32 %57 to i64, !dbg !50
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !50
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %13) #1, !dbg !51
  %61 = or disjoint i32 %53, 2, !dbg !52
  %62 = sext i32 %61 to i64, !dbg !53
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !53
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %13) #1, !dbg !54
  %65 = or disjoint i32 %53, 3, !dbg !55
  %66 = sext i32 %65 to i64, !dbg !56
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !56
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %13) #1, !dbg !57
  %69 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !48
  %70 = insertelement <2 x i32> %69, i32 %25, i64 1, !dbg !48
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !48
  %72 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !51
  %73 = insertelement <2 x i32> %72, i32 %34, i64 1, !dbg !51
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !51
  %75 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !54
  %76 = insertelement <2 x i32> %75, i32 %43, i64 1, !dbg !54
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !54
  %78 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !57
  %79 = insertelement <2 x i32> %78, i32 %52, i64 1, !dbg !57
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !57
  %81 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !58
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !58
  %83 = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %84 = fmul <2 x float> %83, %71, !dbg !58
  %85 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !59
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !59
  %87 = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %88 = fmul <2 x float> %87, %74, !dbg !59
  %89 = fadd <2 x float> %84, %88, !dbg !60
  %90 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !61
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !61
  %92 = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %93 = fmul <2 x float> %92, %77, !dbg !61
  %94 = fadd <2 x float> %89, %93, !dbg !62
  %95 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !63
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !63
  %97 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %98 = fmul <2 x float> %97, %80, !dbg !63
  %99 = fadd <2 x float> %94, %98, !dbg !64
  %100 = extractelement <2 x float> %99, i64 1, !dbg !65
  %101 = fmul float %100, %100, !dbg !66
  %102 = extractelement <2 x float> %99, i64 0, !dbg !67
  %103 = fsub float %102, %101, !dbg !67
  %104 = sext i32 %12 to i64, !dbg !68
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !68
  %106 = icmp eq i32 %10, 0, !dbg !65
  %107 = bitcast float %100 to i32, !dbg !65
  %108 = and i1 %106, %13, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %105, i1 %108) #1, !dbg !65
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %104, !dbg !69
  %110 = bitcast float %103 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %109, i1 %108) #1, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfn5wzjj5f3tnfrcen2vfk3pcdb2rpobor2kqqosujnfati4otaf.py", directory: "inductor_cache/fn")
!4 = !{ptr @triton_poi_fused_mul_pow_sub_sum_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_pow_sub_sum_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_pow_sub_sum_5", linkageName: "triton_poi_fused_mul_pow_sub_sum_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 32, scope: !7)
!21 = !DILocation(line: 28, column: 40, scope: !7)
!22 = !DILocation(line: 28, column: 37, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 45, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 34, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 49, scope: !7)
!32 = !DILocation(line: 31, column: 34, scope: !7)
!33 = !DILocation(line: 31, column: 30, scope: !7)
!34 = !DILocation(line: 31, column: 41, scope: !7)
!35 = !DILocation(line: 32, column: 34, scope: !7)
!36 = !DILocation(line: 32, column: 41, scope: !7)
!37 = !DILocation(line: 32, column: 30, scope: !7)
!38 = !DILocation(line: 32, column: 49, scope: !7)
!39 = !DILocation(line: 33, column: 35, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 42, scope: !7)
!42 = !DILocation(line: 34, column: 35, scope: !7)
!43 = !DILocation(line: 34, column: 42, scope: !7)
!44 = !DILocation(line: 34, column: 31, scope: !7)
!45 = !DILocation(line: 34, column: 50, scope: !7)
!46 = !DILocation(line: 35, column: 33, scope: !7)
!47 = !DILocation(line: 35, column: 31, scope: !7)
!48 = !DILocation(line: 35, column: 38, scope: !7)
!49 = !DILocation(line: 36, column: 35, scope: !7)
!50 = !DILocation(line: 36, column: 31, scope: !7)
!51 = !DILocation(line: 36, column: 42, scope: !7)
!52 = !DILocation(line: 37, column: 35, scope: !7)
!53 = !DILocation(line: 37, column: 31, scope: !7)
!54 = !DILocation(line: 37, column: 42, scope: !7)
!55 = !DILocation(line: 38, column: 35, scope: !7)
!56 = !DILocation(line: 38, column: 31, scope: !7)
!57 = !DILocation(line: 38, column: 42, scope: !7)
!58 = !DILocation(line: 46, column: 19, scope: !7)
!59 = !DILocation(line: 47, column: 19, scope: !7)
!60 = !DILocation(line: 48, column: 20, scope: !7)
!61 = !DILocation(line: 49, column: 19, scope: !7)
!62 = !DILocation(line: 50, column: 20, scope: !7)
!63 = !DILocation(line: 51, column: 20, scope: !7)
!64 = !DILocation(line: 52, column: 20, scope: !7)
!65 = !DILocation(line: 55, column: 37, scope: !7)
!66 = !DILocation(line: 53, column: 20, scope: !7)
!67 = !DILocation(line: 54, column: 20, scope: !7)
!68 = !DILocation(line: 55, column: 25, scope: !7)
!69 = !DILocation(line: 56, column: 25, scope: !7)
!70 = !DILocation(line: 56, column: 37, scope: !7)
!71 = !DILocation(line: 56, column: 4, scope: !7)
