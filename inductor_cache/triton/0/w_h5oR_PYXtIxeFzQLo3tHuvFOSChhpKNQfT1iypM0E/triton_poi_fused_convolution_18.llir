; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %13, !dbg !16
  %20 = or disjoint i32 %18, %10, !dbg !16
  %21 = or disjoint i32 %18, %11, !dbg !16
  %22 = icmp slt i32 %19, 64, !dbg !17
  %23 = icmp slt i32 %20, 64, !dbg !17
  %24 = icmp slt i32 %21, 64, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %25 = sdiv i32 %.frozen, 512, !dbg !18
  %26 = mul i32 %25, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %14, 6, !dbg !20
  %28 = shl i32 %15, 6, !dbg !20
  %29 = add i32 %19, %27, !dbg !21
  %30 = add i32 %19, %28, !dbg !21
  %31 = sext i32 %29 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = sext i32 %30 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %22) #2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !23
  %45 = shl i32 %20, 9, !dbg !24
  %46 = shl i32 %21, 9, !dbg !24
  %47 = shl i32 %25, 15, !dbg !25
  %48 = add i32 %47, %.decomposed, !dbg !26
  %49 = add i32 %48, %45, !dbg !27
  %50 = add i32 %48, %46, !dbg !27
  %51 = sext i32 %49 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !28
  %53 = sext i32 %50 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !28
  %55 = shl i32 %8, 7, !dbg !29
  %56 = and i32 %55, 896, !dbg !29
  %57 = or disjoint i32 %56, %10, !dbg !29
  %58 = and i32 %12, 508, !dbg !29
  %59 = lshr exact i32 %56, 1, !dbg !29
  %60 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %59, !dbg !29
  %61 = getelementptr float, ptr addrspace(3) %60, i32 %57, !dbg !29
  %62 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !29
  %63 = or disjoint i32 %57, 32, !dbg !29
  %64 = lshr i32 %63, 3, !dbg !29
  %65 = and i32 %64, 116, !dbg !29
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !29
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %63, !dbg !29
  %68 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !29
  %69 = or disjoint i32 %57, 64, !dbg !29
  %70 = lshr i32 %69, 3, !dbg !29
  %71 = and i32 %70, 120, !dbg !29
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !29
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %69, !dbg !29
  %74 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !29
  %75 = or disjoint i32 %57, 96, !dbg !29
  %76 = lshr i32 %75, 3, !dbg !29
  %77 = and i32 %76, 124, !dbg !29
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !29
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %75, !dbg !29
  %80 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !29
  %81 = or disjoint i32 %57, 16, !dbg !29
  %82 = getelementptr float, ptr addrspace(3) %60, i32 %81, !dbg !29
  %83 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !29
  %84 = or disjoint i32 %57, 48, !dbg !29
  %85 = lshr i32 %84, 3, !dbg !29
  %86 = and i32 %85, 116, !dbg !29
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !29
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %84, !dbg !29
  %89 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !29
  %90 = or disjoint i32 %57, 80, !dbg !29
  %91 = lshr i32 %90, 3, !dbg !29
  %92 = and i32 %91, 120, !dbg !29
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !29
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %90, !dbg !29
  %95 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !29
  %96 = or disjoint i32 %57, 112, !dbg !29
  %97 = lshr i32 %96, 3, !dbg !29
  %98 = and i32 %97, 124, !dbg !29
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !29
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %96, !dbg !29
  %101 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %102 = lshr i32 %12, 3, !dbg !29
  %103 = and i32 %102, 60, !dbg !29
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !29
  %105 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %58, !dbg !29
  %106 = or disjoint i32 %58, 512, !dbg !29
  %107 = lshr i32 %106, 3, !dbg !29
  %108 = and i32 %107, 124, !dbg !29
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %108, !dbg !29
  %110 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %106, !dbg !29
  %111 = load <4 x i32>, ptr addrspace(3) %110, align 16, !dbg !29
  %.extract = load i32, ptr addrspace(3) %105, align 16, !dbg !29
  %112 = getelementptr inbounds i8, ptr addrspace(3) %105, i32 4, !dbg !29
  %.extract8 = load i32, ptr addrspace(3) %112, align 4, !dbg !29
  %113 = getelementptr inbounds i8, ptr addrspace(3) %105, i32 8, !dbg !29
  %.extract9 = load i32, ptr addrspace(3) %113, align 8, !dbg !29
  %114 = getelementptr inbounds i8, ptr addrspace(3) %105, i32 12, !dbg !29
  %.extract10 = load i32, ptr addrspace(3) %114, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %52, i1 %23) #2, !dbg !29
  %.extract11 = extractelement <4 x i32> %111, i64 0, !dbg !29
  %.extract12 = extractelement <4 x i32> %111, i64 1, !dbg !29
  %.extract13 = extractelement <4 x i32> %111, i64 2, !dbg !29
  %.extract14 = extractelement <4 x i32> %111, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %54, i1 %24) #2, !dbg !29
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !30
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %115, i1 %23) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %116, i1 %24) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cndbq7ecd6mmkloyzpsaes6itpndoucck6wlistxivsixpyluskw.py", directory: "inductor_cache/nd")
!4 = !{ptr @triton_poi_fused_convolution_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_18", linkageName: "triton_poi_fused_convolution_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 45, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 39, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 56, scope: !7)
!30 = !DILocation(line: 34, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 56, scope: !7)
!32 = !DILocation(line: 34, column: 4, scope: !7)
