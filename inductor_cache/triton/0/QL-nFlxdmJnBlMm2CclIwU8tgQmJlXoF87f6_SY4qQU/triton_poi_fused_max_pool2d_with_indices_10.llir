; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 784, !dbg !14
  %16 = icmp slt i32 %14, 784, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 6, !dbg !16
  %19 = and i32 %11, 60, !dbg !17
  %20 = lshr i32 %8, 1, !dbg !17
  %21 = and i32 %20, 63, !dbg !17
  %22 = or disjoint i32 %18, %19, !dbg !18
  %23 = or disjoint i32 %18, %21, !dbg !18
  %24 = icmp slt i32 %22, 64, !dbg !19
  %25 = icmp slt i32 %23, 64, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %26 = sdiv i32 %.frozen, 14, !dbg !20
  %27 = mul i32 %26, 14, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = srem i32 %26, 14, !dbg !22
  %29 = sdiv i32 %13, 196, !dbg !23
  %.frozen16 = freeze i32 %14, !dbg !23
  %30 = sdiv i32 %.frozen16, 196, !dbg !23
  %31 = mul i32 %30, 196, !dbg !24
  %.decomposed17 = sub i32 %.frozen16, %31, !dbg !24
  %32 = shl nsw i32 %.decomposed, 7, !dbg !25
  %33 = add i32 %32, %22, !dbg !26
  %34 = mul nsw i32 %28, 3712, !dbg !27
  %35 = mul i32 %29, 53824, !dbg !28
  %36 = add i32 %33, %35, !dbg !29
  %37 = add i32 %36, %34, !dbg !30
  %38 = sext i32 %37 to i64, !dbg !31
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !31
  %40 = and i1 %15, %24, !dbg !32
  %41 = and i1 %16, %25, !dbg !32
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %40) #2, !dbg !33
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !33
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !33
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !33
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !33
  %47 = add i32 %33, 64, !dbg !34
  %48 = add i32 %47, %35, !dbg !35
  %49 = add i32 %48, %34, !dbg !36
  %50 = sext i32 %49 to i64, !dbg !37
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !37
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %40) #2, !dbg !38
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !38
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !38
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !38
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !38
  %57 = add i32 %33, 128, !dbg !39
  %58 = add i32 %57, %35, !dbg !40
  %59 = add i32 %58, %34, !dbg !41
  %60 = sext i32 %59 to i64, !dbg !42
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !42
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %40) #2, !dbg !43
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !43
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !43
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !43
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !43
  %67 = add i32 %33, 1856, !dbg !44
  %68 = add i32 %67, %35, !dbg !45
  %69 = add i32 %68, %34, !dbg !46
  %70 = sext i32 %69 to i64, !dbg !47
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !47
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %40) #2, !dbg !48
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !48
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !48
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !48
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !48
  %77 = add i32 %33, 1920, !dbg !49
  %78 = add i32 %77, %35, !dbg !50
  %79 = add i32 %78, %34, !dbg !51
  %80 = sext i32 %79 to i64, !dbg !52
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !52
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %40) #2, !dbg !53
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !53
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !53
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !53
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !53
  %87 = add i32 %33, 1984, !dbg !54
  %88 = add i32 %87, %35, !dbg !55
  %89 = add i32 %88, %34, !dbg !56
  %90 = sext i32 %89 to i64, !dbg !57
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !57
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 %40) #2, !dbg !58
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !58
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !58
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !58
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !58
  %97 = add i32 %33, 3712, !dbg !59
  %98 = add i32 %97, %35, !dbg !60
  %99 = add i32 %98, %34, !dbg !61
  %100 = sext i32 %99 to i64, !dbg !62
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !62
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %40) #2, !dbg !63
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !63
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !63
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !63
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !63
  %107 = add i32 %33, 3776, !dbg !64
  %108 = add i32 %107, %35, !dbg !65
  %109 = add i32 %108, %34, !dbg !66
  %110 = sext i32 %109 to i64, !dbg !67
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !67
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %40) #2, !dbg !68
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !68
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !68
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !68
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !68
  %117 = add i32 %33, 3840, !dbg !69
  %118 = add i32 %117, %35, !dbg !70
  %119 = add i32 %118, %34, !dbg !71
  %120 = sext i32 %119 to i64, !dbg !72
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !72
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %40) #2, !dbg !73
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !73
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !73
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !73
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !73
  %127 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !33
  %128 = insertelement <4 x i32> %127, i32 %44, i64 1, !dbg !33
  %129 = insertelement <4 x i32> %128, i32 %45, i64 2, !dbg !33
  %130 = insertelement <4 x i32> %129, i32 %46, i64 3, !dbg !33
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !33
  %132 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !38
  %133 = insertelement <4 x i32> %132, i32 %54, i64 1, !dbg !38
  %134 = insertelement <4 x i32> %133, i32 %55, i64 2, !dbg !38
  %135 = insertelement <4 x i32> %134, i32 %56, i64 3, !dbg !38
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !38
  %137 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !43
  %138 = insertelement <4 x i32> %137, i32 %64, i64 1, !dbg !43
  %139 = insertelement <4 x i32> %138, i32 %65, i64 2, !dbg !43
  %140 = insertelement <4 x i32> %139, i32 %66, i64 3, !dbg !43
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !43
  %142 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !48
  %143 = insertelement <4 x i32> %142, i32 %74, i64 1, !dbg !48
  %144 = insertelement <4 x i32> %143, i32 %75, i64 2, !dbg !48
  %145 = insertelement <4 x i32> %144, i32 %76, i64 3, !dbg !48
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !48
  %147 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !53
  %148 = insertelement <4 x i32> %147, i32 %84, i64 1, !dbg !53
  %149 = insertelement <4 x i32> %148, i32 %85, i64 2, !dbg !53
  %150 = insertelement <4 x i32> %149, i32 %86, i64 3, !dbg !53
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !53
  %152 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !58
  %153 = insertelement <4 x i32> %152, i32 %94, i64 1, !dbg !58
  %154 = insertelement <4 x i32> %153, i32 %95, i64 2, !dbg !58
  %155 = insertelement <4 x i32> %154, i32 %96, i64 3, !dbg !58
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !58
  %157 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !63
  %158 = insertelement <4 x i32> %157, i32 %104, i64 1, !dbg !63
  %159 = insertelement <4 x i32> %158, i32 %105, i64 2, !dbg !63
  %160 = insertelement <4 x i32> %159, i32 %106, i64 3, !dbg !63
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !63
  %162 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !68
  %163 = insertelement <4 x i32> %162, i32 %114, i64 1, !dbg !68
  %164 = insertelement <4 x i32> %163, i32 %115, i64 2, !dbg !68
  %165 = insertelement <4 x i32> %164, i32 %116, i64 3, !dbg !68
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !68
  %167 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !73
  %168 = insertelement <4 x i32> %167, i32 %124, i64 1, !dbg !73
  %169 = insertelement <4 x i32> %168, i32 %125, i64 2, !dbg !73
  %170 = insertelement <4 x i32> %169, i32 %126, i64 3, !dbg !73
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !73
  %172 = fcmp ogt <4 x float> %136, %131, !dbg !74
  %173 = fcmp uno <4 x float> %136, zeroinitializer, !dbg !78
  %174 = or <4 x i1> %172, %173, !dbg !79
  %.v = select <4 x i1> %174, <4 x i32> %135, <4 x i32> %130, !dbg !80
  %175 = bitcast <4 x i32> %.v to <4 x float>, !dbg !80
  %176 = fcmp olt <4 x float> %175, %141, !dbg !81
  %177 = fcmp uno <4 x float> %141, zeroinitializer, !dbg !83
  %178 = or <4 x i1> %177, %176, !dbg !84
  %.v10 = select <4 x i1> %178, <4 x i32> %140, <4 x i32> %.v, !dbg !85
  %179 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !85
  %180 = fcmp olt <4 x float> %179, %146, !dbg !86
  %181 = fcmp uno <4 x float> %146, zeroinitializer, !dbg !88
  %182 = or <4 x i1> %181, %180, !dbg !89
  %.v11 = select <4 x i1> %182, <4 x i32> %145, <4 x i32> %.v10, !dbg !90
  %183 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !90
  %184 = fcmp olt <4 x float> %183, %151, !dbg !91
  %185 = fcmp uno <4 x float> %151, zeroinitializer, !dbg !93
  %186 = or <4 x i1> %185, %184, !dbg !94
  %.v12 = select <4 x i1> %186, <4 x i32> %150, <4 x i32> %.v11, !dbg !95
  %187 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !95
  %188 = fcmp olt <4 x float> %187, %156, !dbg !96
  %189 = fcmp uno <4 x float> %156, zeroinitializer, !dbg !98
  %190 = or <4 x i1> %189, %188, !dbg !99
  %.v13 = select <4 x i1> %190, <4 x i32> %155, <4 x i32> %.v12, !dbg !100
  %191 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !100
  %192 = fcmp olt <4 x float> %191, %161, !dbg !101
  %193 = fcmp uno <4 x float> %161, zeroinitializer, !dbg !103
  %194 = or <4 x i1> %193, %192, !dbg !104
  %.v14 = select <4 x i1> %194, <4 x i32> %160, <4 x i32> %.v13, !dbg !105
  %195 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !105
  %196 = fcmp olt <4 x float> %195, %166, !dbg !106
  %197 = fcmp uno <4 x float> %166, zeroinitializer, !dbg !108
  %198 = or <4 x i1> %197, %196, !dbg !109
  %.v15 = select <4 x i1> %198, <4 x i32> %165, <4 x i32> %.v14, !dbg !110
  %199 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !110
  %200 = fcmp olt <4 x float> %199, %171, !dbg !111
  %201 = fcmp uno <4 x float> %171, zeroinitializer, !dbg !113
  %202 = or <4 x i1> %201, %200, !dbg !114
  %203 = extractelement <4 x i1> %202, i64 0, !dbg !114
  %204 = or <4 x i1> %201, %200, !dbg !114
  %205 = extractelement <4 x i1> %204, i64 1, !dbg !114
  %206 = or <4 x i1> %201, %200, !dbg !114
  %207 = extractelement <4 x i1> %206, i64 2, !dbg !114
  %208 = or <4 x i1> %201, %200, !dbg !114
  %209 = extractelement <4 x i1> %208, i64 3, !dbg !114
  %210 = zext <4 x i1> %172 to <4 x i8>, !dbg !115
  %211 = select <4 x i1> %176, <4 x i8> splat (i8 2), <4 x i8> %210, !dbg !116
  %212 = select <4 x i1> %180, <4 x i8> splat (i8 3), <4 x i8> %211, !dbg !117
  %213 = select <4 x i1> %184, <4 x i8> splat (i8 4), <4 x i8> %212, !dbg !118
  %214 = select <4 x i1> %188, <4 x i8> splat (i8 5), <4 x i8> %213, !dbg !119
  %215 = select <4 x i1> %192, <4 x i8> splat (i8 6), <4 x i8> %214, !dbg !120
  %216 = select <4 x i1> %196, <4 x i8> splat (i8 7), <4 x i8> %215, !dbg !121
  %217 = select <4 x i1> %200, <4 x i8> splat (i8 8), <4 x i8> %216, !dbg !122
  %218 = mul i32 %23, 196, !dbg !123
  %219 = add i32 %218, %.decomposed17, !dbg !124
  %220 = mul i32 %30, 31360, !dbg !125
  %221 = add i32 %219, %220, !dbg !126
  %222 = sext i32 %221 to i64, !dbg !127
  %223 = getelementptr float, ptr addrspace(1) %1, i64 %222, !dbg !127
  %224 = shl i32 %8, 5, !dbg !128
  %225 = and i32 %224, 480, !dbg !128
  %226 = or disjoint i32 %225, %10, !dbg !128
  %227 = and i32 %11, 508, !dbg !128
  %228 = lshr exact i32 %225, 1, !dbg !128
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !128
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %226, !dbg !128
  %231 = extractelement <4 x i32> %.v15, i64 0, !dbg !128
  %232 = select i1 %203, i32 %123, i32 %231, !dbg !129
  %233 = insertelement <1 x i32> poison, i32 %232, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %233, i1 true) #2, !dbg !128
  %234 = or disjoint i32 %226, 8, !dbg !128
  %235 = lshr i32 %234, 1, !dbg !128
  %236 = and i32 %235, 244, !dbg !128
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !128
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %234, !dbg !128
  %239 = extractelement <4 x i32> %.v15, i64 1, !dbg !128
  %240 = select i1 %205, i32 %124, i32 %239, !dbg !129
  %241 = insertelement <1 x i32> poison, i32 %240, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %241, i1 true) #2, !dbg !128
  %242 = or disjoint i32 %226, 16, !dbg !128
  %243 = lshr i32 %242, 1, !dbg !128
  %244 = and i32 %243, 248, !dbg !128
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %244, !dbg !128
  %246 = getelementptr float, ptr addrspace(3) %245, i32 %242, !dbg !128
  %247 = extractelement <4 x i32> %.v15, i64 2, !dbg !128
  %248 = select i1 %207, i32 %125, i32 %247, !dbg !129
  %249 = insertelement <1 x i32> poison, i32 %248, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %249, i1 true) #2, !dbg !128
  %250 = or disjoint i32 %226, 24, !dbg !128
  %251 = lshr i32 %250, 1, !dbg !128
  %252 = and i32 %251, 252, !dbg !128
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !128
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %250, !dbg !128
  %255 = extractelement <4 x i32> %.v15, i64 3, !dbg !128
  %256 = select i1 %209, i32 %126, i32 %255, !dbg !129
  %257 = insertelement <1 x i32> poison, i32 %256, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %257, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %258 = lshr exact i32 %11, 1, !dbg !128
  %259 = and i32 %258, 252, !dbg !128
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !128
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %227, !dbg !128
  %.extract = load i32, ptr addrspace(3) %261, align 16, !dbg !128
  %262 = getelementptr inbounds i8, ptr addrspace(3) %261, i32 4, !dbg !128
  %.extract7 = load i32, ptr addrspace(3) %262, align 4, !dbg !128
  %263 = getelementptr inbounds i8, ptr addrspace(3) %261, i32 8, !dbg !128
  %.extract8 = load i32, ptr addrspace(3) %263, align 8, !dbg !128
  %264 = getelementptr inbounds i8, ptr addrspace(3) %261, i32 12, !dbg !128
  %.extract9 = load i32, ptr addrspace(3) %264, align 4, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %223, i1 %41) #2, !dbg !128
  %265 = shl i32 %13, 6, !dbg !130
  %266 = add i32 %22, %265, !dbg !131
  %267 = sext i32 %266 to i64, !dbg !132
  %268 = getelementptr i8, ptr addrspace(1) %2, i64 %267, !dbg !132
  %269 = bitcast <4 x i8> %217 to i32, !dbg !133
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %269, ptr addrspace(1) %268, i1 %40) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c36b57f7vyhwycfpvila4qhuh2zkdksbwxjmj7zdg3qsrg5pac46.py", directory: "inductor_cache/36")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 27, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 49, scope: !7)
!28 = !DILocation(line: 34, column: 60, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 73, scope: !7)
!33 = !DILocation(line: 34, column: 65, scope: !7)
!34 = !DILocation(line: 35, column: 40, scope: !7)
!35 = !DILocation(line: 35, column: 49, scope: !7)
!36 = !DILocation(line: 35, column: 59, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 70, scope: !7)
!39 = !DILocation(line: 36, column: 41, scope: !7)
!40 = !DILocation(line: 36, column: 50, scope: !7)
!41 = !DILocation(line: 36, column: 60, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 71, scope: !7)
!44 = !DILocation(line: 37, column: 42, scope: !7)
!45 = !DILocation(line: 37, column: 51, scope: !7)
!46 = !DILocation(line: 37, column: 61, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 72, scope: !7)
!49 = !DILocation(line: 38, column: 42, scope: !7)
!50 = !DILocation(line: 38, column: 51, scope: !7)
!51 = !DILocation(line: 38, column: 61, scope: !7)
!52 = !DILocation(line: 38, column: 30, scope: !7)
!53 = !DILocation(line: 38, column: 72, scope: !7)
!54 = !DILocation(line: 39, column: 42, scope: !7)
!55 = !DILocation(line: 39, column: 51, scope: !7)
!56 = !DILocation(line: 39, column: 61, scope: !7)
!57 = !DILocation(line: 39, column: 30, scope: !7)
!58 = !DILocation(line: 39, column: 72, scope: !7)
!59 = !DILocation(line: 40, column: 43, scope: !7)
!60 = !DILocation(line: 40, column: 52, scope: !7)
!61 = !DILocation(line: 40, column: 62, scope: !7)
!62 = !DILocation(line: 40, column: 31, scope: !7)
!63 = !DILocation(line: 40, column: 73, scope: !7)
!64 = !DILocation(line: 41, column: 43, scope: !7)
!65 = !DILocation(line: 41, column: 52, scope: !7)
!66 = !DILocation(line: 41, column: 62, scope: !7)
!67 = !DILocation(line: 41, column: 31, scope: !7)
!68 = !DILocation(line: 41, column: 73, scope: !7)
!69 = !DILocation(line: 42, column: 43, scope: !7)
!70 = !DILocation(line: 42, column: 52, scope: !7)
!71 = !DILocation(line: 42, column: 62, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 73, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 44, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 45, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 46, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 47, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 48, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 49, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 50, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!115 = !DILocation(line: 54, column: 35, scope: !7)
!116 = !DILocation(line: 57, column: 35, scope: !7)
!117 = !DILocation(line: 60, column: 35, scope: !7)
!118 = !DILocation(line: 63, column: 35, scope: !7)
!119 = !DILocation(line: 66, column: 35, scope: !7)
!120 = !DILocation(line: 69, column: 35, scope: !7)
!121 = !DILocation(line: 72, column: 35, scope: !7)
!122 = !DILocation(line: 75, column: 35, scope: !7)
!123 = !DILocation(line: 76, column: 34, scope: !7)
!124 = !DILocation(line: 76, column: 30, scope: !7)
!125 = !DILocation(line: 76, column: 45, scope: !7)
!126 = !DILocation(line: 76, column: 39, scope: !7)
!127 = !DILocation(line: 76, column: 25, scope: !7)
!128 = !DILocation(line: 76, column: 57, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!130 = !DILocation(line: 77, column: 33, scope: !7)
!131 = !DILocation(line: 77, column: 30, scope: !7)
!132 = !DILocation(line: 77, column: 25, scope: !7)
!133 = !DILocation(line: 77, column: 45, scope: !7)
!134 = !DILocation(line: 77, column: 4, scope: !7)
