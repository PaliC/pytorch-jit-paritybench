; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 2, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = and i32 %14, 64, !dbg !12
  %18 = lshr exact i32 %17, 2, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = and i32 %14, 128, !dbg !12
  %21 = lshr exact i32 %20, 2, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !12
  %23 = or disjoint i32 %22, 64, !dbg !12
  %24 = or disjoint i32 %22, 128, !dbg !12
  %25 = or disjoint i32 %22, 192, !dbg !12
  %26 = shl i32 %14, 2, !dbg !12
  %27 = and i32 %26, 12, !dbg !12
  %28 = and i32 %26, 252, !dbg !12
  %29 = and i32 %14, 255, !dbg !12
  %30 = or disjoint i32 %13, %22, !dbg !13
  %31 = or disjoint i32 %13, %23, !dbg !13
  %32 = or disjoint i32 %13, %24, !dbg !13
  %33 = or disjoint i32 %13, %25, !dbg !13
  %34 = or disjoint i32 %13, %28, !dbg !13
  %35 = or disjoint i32 %13, %29, !dbg !13
  %36 = icmp slt i32 %30, 512, !dbg !14
  %37 = icmp slt i32 %31, 512, !dbg !14
  %38 = icmp slt i32 %32, 512, !dbg !14
  %39 = icmp slt i32 %33, 512, !dbg !14
  %40 = icmp slt i32 %34, 512, !dbg !14
  %41 = icmp slt i32 %35, 512, !dbg !14
  %42 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %43 = shl i32 %42, 4, !dbg !16
  %.lobit2 = lshr exact i32 %17, 6, !dbg !17
  %44 = lshr exact i32 %20, 6, !dbg !17
  %45 = or disjoint i32 %.lobit2, %44, !dbg !17
  %46 = or disjoint i32 %43, %45, !dbg !18
  %47 = or disjoint i32 %46, 4, !dbg !18
  %48 = or disjoint i32 %46, 8, !dbg !18
  %49 = or disjoint i32 %46, 12, !dbg !18
  %50 = or disjoint i32 %43, %27, !dbg !18
  %51 = icmp slt i32 %46, 16, !dbg !19
  %52 = icmp slt i32 %47, 16, !dbg !19
  %53 = icmp slt i32 %48, 16, !dbg !19
  %54 = icmp slt i32 %49, 16, !dbg !19
  %55 = icmp slt i32 %50, 16, !dbg !19
  %.frozen = freeze i32 %46, !dbg !20
  %56 = sdiv i32 %.frozen, 4, !dbg !20
  %57 = sdiv i32 %47, 4, !dbg !20
  %58 = sdiv i32 %48, 4, !dbg !20
  %59 = sdiv i32 %49, 4, !dbg !20
  %60 = mul i32 %56, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %60, !dbg !21
  %.frozen42 = freeze i32 %34, !dbg !22
  %61 = sdiv i32 %.frozen42, 128, !dbg !22
  %62 = mul i32 %61, 128, !dbg !23
  %.decomposed43 = sub i32 %.frozen42, %62, !dbg !23
  %63 = srem i32 %35, 128, !dbg !23
  %64 = sext i32 %56 to i64, !dbg !24
  %65 = getelementptr i64, ptr addrspace(1) %0, i64 %64, !dbg !24
  %66 = sext i32 %57 to i64, !dbg !24
  %67 = getelementptr i64, ptr addrspace(1) %0, i64 %66, !dbg !24
  %68 = sext i32 %58 to i64, !dbg !24
  %69 = getelementptr i64, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = sext i32 %59 to i64, !dbg !24
  %71 = getelementptr i64, ptr addrspace(1) %0, i64 %70, !dbg !24
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %51) #4, !dbg !25
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %51) #4, !dbg !25
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %51) #4, !dbg !25
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %51) #4, !dbg !25
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %52) #4, !dbg !25
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %52) #4, !dbg !25
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %52) #4, !dbg !25
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %52) #4, !dbg !25
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %53) #4, !dbg !25
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %53) #4, !dbg !25
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %53) #4, !dbg !25
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %53) #4, !dbg !25
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %54) #4, !dbg !25
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %54) #4, !dbg !25
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %54) #4, !dbg !25
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %54) #4, !dbg !25
  %88 = sext i32 %.decomposed to i64, !dbg !26
  %89 = getelementptr i64, ptr addrspace(1) %0, i64 %88, !dbg !26
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %51) #4, !dbg !27
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %51) #4, !dbg !27
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %51) #4, !dbg !27
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %51) #4, !dbg !27
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %52) #4, !dbg !27
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %52) #4, !dbg !27
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %52) #4, !dbg !27
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %52) #4, !dbg !27
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %53) #4, !dbg !27
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %53) #4, !dbg !27
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %53) #4, !dbg !27
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %53) #4, !dbg !27
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %54) #4, !dbg !27
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %54) #4, !dbg !27
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %54) #4, !dbg !27
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %54) #4, !dbg !27
  %106 = sext i32 %63 to i64, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %41) #4, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !30
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %41) #4, !dbg !31
  %111 = bitcast i32 %110 to float, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %106, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %41) #4, !dbg !33
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %106, !dbg !34
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %41) #4, !dbg !35
  %116 = shl i32 %30, 4, !dbg !36
  %117 = shl i32 %31, 4, !dbg !36
  %118 = shl i32 %32, 4, !dbg !36
  %119 = shl i32 %33, 4, !dbg !36
  %120 = add i32 %50, %116, !dbg !37
  %121 = add i32 %50, %117, !dbg !37
  %122 = add i32 %50, %118, !dbg !37
  %123 = add i32 %50, %119, !dbg !37
  %124 = sext i32 %120 to i64, !dbg !38
  %125 = getelementptr float, ptr addrspace(1) %6, i64 %124, !dbg !38
  %126 = sext i32 %121 to i64, !dbg !38
  %127 = getelementptr float, ptr addrspace(1) %6, i64 %126, !dbg !38
  %128 = sext i32 %122 to i64, !dbg !38
  %129 = getelementptr float, ptr addrspace(1) %6, i64 %128, !dbg !38
  %130 = sext i32 %123 to i64, !dbg !38
  %131 = getelementptr float, ptr addrspace(1) %6, i64 %130, !dbg !38
  %132 = and i1 %36, %55, !dbg !39
  %133 = and i1 %37, %55, !dbg !39
  %134 = and i1 %38, %55, !dbg !39
  %135 = and i1 %39, %55, !dbg !39
  %136 = and i1 %40, %51, !dbg !39
  %137 = and i1 %52, %40, !dbg !39
  %138 = and i1 %53, %40, !dbg !39
  %139 = and i1 %54, %40, !dbg !39
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %132) #4, !dbg !40
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !40
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !40
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !40
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !40
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %133) #4, !dbg !40
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !40
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !40
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !40
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !40
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %134) #4, !dbg !40
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !40
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !40
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !40
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !40
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %135) #4, !dbg !40
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !40
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !40
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !40
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !40
  %160 = shl i32 %14, 10, !dbg !40
  %161 = and i32 %160, 3072, !dbg !40
  %162 = and i32 %15, 15, !dbg !40
  %163 = or disjoint i32 %162, %161, !dbg !40
  %164 = or disjoint i32 %18, %163, !dbg !40
  %165 = or disjoint i32 %164, %21, !dbg !40
  %166 = and i32 %26, 1020, !dbg !40
  %167 = lshr exact i32 %161, 4, !dbg !40
  %168 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %167, !dbg !40
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %165, !dbg !40
  %170 = insertelement <1 x i32> poison, i32 %141, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #4, !dbg !40
  %171 = or disjoint i32 %165, 256, !dbg !40
  %172 = lshr i32 %171, 6, !dbg !40
  %173 = and i32 %172, 67108860, !dbg !40
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !40
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %171, !dbg !40
  %176 = insertelement <1 x i32> poison, i32 %142, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #4, !dbg !40
  %177 = or disjoint i32 %165, 512, !dbg !40
  %178 = lshr i32 %177, 6, !dbg !40
  %179 = and i32 %178, 67108860, !dbg !40
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !40
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %177, !dbg !40
  %182 = insertelement <1 x i32> poison, i32 %143, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #4, !dbg !40
  %183 = or disjoint i32 %165, 768, !dbg !40
  %184 = lshr i32 %183, 6, !dbg !40
  %185 = and i32 %184, 67108860, !dbg !40
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !40
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %183, !dbg !40
  %188 = insertelement <1 x i32> poison, i32 %144, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #4, !dbg !40
  %189 = or disjoint i32 %165, 64, !dbg !40
  %190 = getelementptr float, ptr addrspace(3) %168, i32 %189, !dbg !40
  %191 = insertelement <1 x i32> poison, i32 %146, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #4, !dbg !40
  %192 = or disjoint i32 %165, 320, !dbg !40
  %193 = lshr i32 %192, 6, !dbg !40
  %194 = and i32 %193, 67108860, !dbg !40
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !40
  %196 = getelementptr float, ptr addrspace(3) %195, i32 %192, !dbg !40
  %197 = insertelement <1 x i32> poison, i32 %147, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #4, !dbg !40
  %198 = or disjoint i32 %165, 576, !dbg !40
  %199 = lshr i32 %198, 6, !dbg !40
  %200 = and i32 %199, 67108860, !dbg !40
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !40
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %198, !dbg !40
  %203 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #4, !dbg !40
  %204 = or disjoint i32 %165, 832, !dbg !40
  %205 = lshr i32 %204, 6, !dbg !40
  %206 = and i32 %205, 67108860, !dbg !40
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %206, !dbg !40
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %204, !dbg !40
  %209 = insertelement <1 x i32> poison, i32 %149, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #4, !dbg !40
  %210 = or disjoint i32 %165, 128, !dbg !40
  %211 = getelementptr float, ptr addrspace(3) %168, i32 %210, !dbg !40
  %212 = insertelement <1 x i32> poison, i32 %151, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #4, !dbg !40
  %213 = or disjoint i32 %165, 384, !dbg !40
  %214 = lshr i32 %213, 6, !dbg !40
  %215 = and i32 %214, 67108860, !dbg !40
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !40
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %213, !dbg !40
  %218 = insertelement <1 x i32> poison, i32 %152, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #4, !dbg !40
  %219 = or disjoint i32 %165, 640, !dbg !40
  %220 = lshr i32 %219, 6, !dbg !40
  %221 = and i32 %220, 67108860, !dbg !40
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !40
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %219, !dbg !40
  %224 = insertelement <1 x i32> poison, i32 %153, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !40
  %225 = or disjoint i32 %165, 896, !dbg !40
  %226 = lshr i32 %225, 6, !dbg !40
  %227 = and i32 %226, 67108860, !dbg !40
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %227, !dbg !40
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %225, !dbg !40
  %230 = insertelement <1 x i32> poison, i32 %154, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #4, !dbg !40
  %231 = or disjoint i32 %165, 192, !dbg !40
  %232 = getelementptr float, ptr addrspace(3) %168, i32 %231, !dbg !40
  %233 = insertelement <1 x i32> poison, i32 %156, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !40
  %234 = or disjoint i32 %165, 448, !dbg !40
  %235 = lshr i32 %234, 6, !dbg !40
  %236 = and i32 %235, 67108860, !dbg !40
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !40
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %234, !dbg !40
  %239 = insertelement <1 x i32> poison, i32 %157, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !40
  %240 = or disjoint i32 %165, 704, !dbg !40
  %241 = lshr i32 %240, 6, !dbg !40
  %242 = and i32 %241, 67108860, !dbg !40
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !40
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %240, !dbg !40
  %245 = insertelement <1 x i32> poison, i32 %158, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !40
  %246 = or disjoint i32 %165, 960, !dbg !40
  %247 = lshr i32 %246, 6, !dbg !40
  %248 = and i32 %247, 67108860, !dbg !40
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %248, !dbg !40
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %246, !dbg !40
  %251 = insertelement <1 x i32> poison, i32 %159, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %252 = lshr i32 %26, 6, !dbg !40
  %253 = and i32 %252, 12, !dbg !40
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !40
  %255 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %166, !dbg !40
  %256 = load <4 x float>, ptr addrspace(3) %255, align 16, !dbg !40
  %257 = or disjoint i32 %166, 1024, !dbg !40
  %258 = lshr i32 %257, 6, !dbg !40
  %259 = and i32 %258, 28, !dbg !40
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !40
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %257, !dbg !40
  %262 = load <4 x float>, ptr addrspace(3) %261, align 16, !dbg !40
  %263 = or disjoint i32 %166, 2048, !dbg !40
  %264 = lshr i32 %263, 6, !dbg !40
  %265 = and i32 %264, 44, !dbg !40
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !40
  %267 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %263, !dbg !40
  %268 = load <4 x float>, ptr addrspace(3) %267, align 16, !dbg !40
  %269 = or disjoint i32 %166, 3072, !dbg !40
  %270 = lshr i32 %269, 6, !dbg !40
  %271 = and i32 %270, 60, !dbg !40
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !40
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %269, !dbg !40
  %274 = load <4 x float>, ptr addrspace(3) %273, align 16, !dbg !40
  %275 = lshr i64 %75, 61, !dbg !41
  %276 = and i64 %275, 4, !dbg !41
  %277 = add i64 %276, %75, !dbg !41
  %278 = lshr i64 %79, 61, !dbg !41
  %279 = and i64 %278, 4, !dbg !41
  %280 = add i64 %279, %79, !dbg !41
  %281 = lshr i64 %83, 61, !dbg !41
  %282 = and i64 %281, 4, !dbg !41
  %283 = add i64 %282, %83, !dbg !41
  %284 = lshr i64 %87, 61, !dbg !41
  %285 = and i64 %284, 4, !dbg !41
  %286 = add i64 %285, %87, !dbg !41
  %287 = lshr i64 %93, 61, !dbg !42
  %288 = and i64 %287, 4, !dbg !42
  %289 = add i64 %288, %93, !dbg !42
  %290 = lshr i64 %97, 61, !dbg !42
  %291 = and i64 %290, 4, !dbg !42
  %292 = add i64 %291, %97, !dbg !42
  %293 = lshr i64 %101, 61, !dbg !42
  %294 = and i64 %293, 4, !dbg !42
  %295 = add i64 %294, %101, !dbg !42
  %296 = lshr i64 %105, 61, !dbg !42
  %297 = and i64 %296, 4, !dbg !42
  %298 = add i64 %297, %105, !dbg !42
  %299 = sext i32 %.decomposed43 to i64, !dbg !43
  %300 = shl i32 %61, 11, !dbg !44
  %301 = sext i32 %300 to i64, !dbg !45
  %.idx = shl i64 %289, 9, !dbg !46
  %302 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !46
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %299, !dbg !46
  %.idx19 = shl i64 %277, 11, !dbg !46
  %304 = getelementptr i8, ptr addrspace(1) %303, i64 %.idx19, !dbg !46
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %301, !dbg !46
  %.idx20 = shl i64 %292, 9, !dbg !46
  %306 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx20, !dbg !46
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %299, !dbg !46
  %.idx21 = shl i64 %280, 11, !dbg !46
  %308 = getelementptr i8, ptr addrspace(1) %307, i64 %.idx21, !dbg !46
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %301, !dbg !46
  %.idx22 = shl i64 %295, 9, !dbg !46
  %310 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx22, !dbg !46
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %299, !dbg !46
  %.idx23 = shl i64 %283, 11, !dbg !46
  %312 = getelementptr i8, ptr addrspace(1) %311, i64 %.idx23, !dbg !46
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %301, !dbg !46
  %.idx24 = shl i64 %298, 9, !dbg !46
  %314 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx24, !dbg !46
  %315 = getelementptr float, ptr addrspace(1) %314, i64 %299, !dbg !46
  %.idx25 = shl i64 %286, 11, !dbg !46
  %316 = getelementptr i8, ptr addrspace(1) %315, i64 %.idx25, !dbg !46
  %317 = getelementptr float, ptr addrspace(1) %316, i64 %301, !dbg !46
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %305, i1 %136) #4, !dbg !47
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %309, i1 %137) #4, !dbg !47
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %313, i1 %138) #4, !dbg !47
  %321 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %317, i1 %139) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %29, !dbg !48
  %323 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %28, !dbg !48
  %325 = load <4 x float>, ptr addrspace(3) %324, align 16, !dbg !48
  %326 = fadd float %111, 0x3EE4F8B580000000, !dbg !49
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i = icmp eq i32 %327, 0, !dbg !50
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i = icmp eq i32 %328, 0, !dbg !50
  br i1 %.not.i, label %334, label %329, !dbg !50

329:                                              ; preds = %11
  br i1 %.not1.i, label %332, label %330, !dbg !50

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %326) #4, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %326) #4, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

334:                                              ; preds = %11
  br i1 %.not1.i, label %337, label %335, !dbg !50

335:                                              ; preds = %334
  %336 = tail call float @llvm.nvvm.sqrt.rn.f(float %326) #4, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

337:                                              ; preds = %334
  %338 = tail call float @llvm.nvvm.sqrt.approx.f(float %326) #4, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %330, %332, %335, %337
  %.0.i = phi float [ %331, %330 ], [ %333, %332 ], [ %336, %335 ], [ %338, %337 ], !dbg !50
  %339 = extractvalue { i32, i32, i32, i32 } %321, 3, !dbg !47
  %340 = shufflevector <4 x float> %325, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !48
  %341 = extractvalue { i32, i32, i32, i32 } %321, 2, !dbg !47
  %342 = extractvalue { i32, i32, i32, i32 } %321, 1, !dbg !47
  %343 = extractvalue { i32, i32, i32, i32 } %321, 0, !dbg !47
  %344 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !47
  %345 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !47
  %346 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !47
  %347 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !47
  %348 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !47
  %349 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !47
  %350 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !47
  %351 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !47
  %352 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !47
  %353 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !47
  %354 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !47
  %355 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !47
  %356 = extractelement <4 x float> %274, i64 3, !dbg !40
  %357 = extractelement <4 x float> %274, i64 2, !dbg !40
  %358 = extractelement <4 x float> %274, i64 1, !dbg !40
  %359 = extractelement <4 x float> %274, i64 0, !dbg !40
  %360 = extractelement <4 x float> %268, i64 3, !dbg !40
  %361 = extractelement <4 x float> %268, i64 2, !dbg !40
  %362 = extractelement <4 x float> %268, i64 1, !dbg !40
  %363 = extractelement <4 x float> %268, i64 0, !dbg !40
  %364 = extractelement <4 x float> %262, i64 3, !dbg !40
  %365 = extractelement <4 x float> %262, i64 2, !dbg !40
  %366 = extractelement <4 x float> %262, i64 1, !dbg !40
  %367 = extractelement <4 x float> %262, i64 0, !dbg !40
  %368 = extractelement <4 x float> %256, i64 3, !dbg !40
  %369 = extractelement <4 x float> %256, i64 2, !dbg !40
  %370 = extractelement <4 x float> %256, i64 1, !dbg !40
  %371 = extractelement <4 x float> %256, i64 0, !dbg !40
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %373 = bitcast float %372 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %373, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %374 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !53
  %375 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !54
  %376 = insertelement <16 x i32> poison, i32 %343, i64 0, !dbg !47
  %377 = insertelement <16 x i32> %376, i32 %342, i64 1, !dbg !47
  %378 = insertelement <16 x i32> %377, i32 %341, i64 2, !dbg !47
  %379 = insertelement <16 x i32> %378, i32 %339, i64 3, !dbg !47
  %380 = insertelement <16 x i32> %379, i32 %347, i64 4, !dbg !47
  %381 = insertelement <16 x i32> %380, i32 %346, i64 5, !dbg !47
  %382 = insertelement <16 x i32> %381, i32 %345, i64 6, !dbg !47
  %383 = insertelement <16 x i32> %382, i32 %344, i64 7, !dbg !47
  %384 = insertelement <16 x i32> %383, i32 %351, i64 8, !dbg !47
  %385 = insertelement <16 x i32> %384, i32 %350, i64 9, !dbg !47
  %386 = insertelement <16 x i32> %385, i32 %349, i64 10, !dbg !47
  %387 = insertelement <16 x i32> %386, i32 %348, i64 11, !dbg !47
  %388 = insertelement <16 x i32> %387, i32 %355, i64 12, !dbg !47
  %389 = insertelement <16 x i32> %388, i32 %354, i64 13, !dbg !47
  %390 = insertelement <16 x i32> %389, i32 %353, i64 14, !dbg !47
  %391 = insertelement <16 x i32> %390, i32 %352, i64 15, !dbg !47
  %392 = bitcast <16 x i32> %391 to <16 x float>, !dbg !47
  %393 = fsub <16 x float> %392, %340, !dbg !48
  %394 = load <4 x float>, ptr addrspace(3) %324, align 16, !dbg !52
  %395 = shufflevector <4 x float> %394, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !52
  %396 = fmul <16 x float> %393, %395, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %374, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %397 = load <4 x float>, ptr addrspace(3) %324, align 16, !dbg !53
  %398 = shufflevector <4 x float> %397, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %399 = fmul <16 x float> %396, %398, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %375, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %400 = load <4 x float>, ptr addrspace(3) %324, align 16, !dbg !54
  %401 = shufflevector <4 x float> %400, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !54
  %402 = fadd <16 x float> %399, %401, !dbg !54
  %403 = fcmp olt <16 x float> %402, zeroinitializer, !dbg !55
  %404 = extractelement <16 x i1> %403, i64 12, !dbg !59
  %405 = extractelement <16 x float> %402, i64 12, !dbg !59
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !59
  %407 = extractelement <16 x i1> %403, i64 13, !dbg !59
  %408 = extractelement <16 x float> %402, i64 13, !dbg !59
  %409 = select i1 %407, float 0.000000e+00, float %408, !dbg !59
  %410 = extractelement <16 x i1> %403, i64 14, !dbg !59
  %411 = extractelement <16 x float> %402, i64 14, !dbg !59
  %412 = select i1 %410, float 0.000000e+00, float %411, !dbg !59
  %413 = extractelement <16 x i1> %403, i64 15, !dbg !59
  %414 = extractelement <16 x float> %402, i64 15, !dbg !59
  %415 = select i1 %413, float 0.000000e+00, float %414, !dbg !59
  %416 = extractelement <16 x i1> %403, i64 8, !dbg !59
  %417 = extractelement <16 x float> %402, i64 8, !dbg !59
  %418 = select i1 %416, float 0.000000e+00, float %417, !dbg !59
  %419 = extractelement <16 x i1> %403, i64 9, !dbg !59
  %420 = extractelement <16 x float> %402, i64 9, !dbg !59
  %421 = select i1 %419, float 0.000000e+00, float %420, !dbg !59
  %422 = extractelement <16 x i1> %403, i64 10, !dbg !59
  %423 = extractelement <16 x float> %402, i64 10, !dbg !59
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !59
  %425 = extractelement <16 x i1> %403, i64 11, !dbg !59
  %426 = extractelement <16 x float> %402, i64 11, !dbg !59
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !59
  %428 = extractelement <16 x i1> %403, i64 4, !dbg !59
  %429 = extractelement <16 x float> %402, i64 4, !dbg !59
  %430 = select i1 %428, float 0.000000e+00, float %429, !dbg !59
  %431 = extractelement <16 x i1> %403, i64 5, !dbg !59
  %432 = extractelement <16 x float> %402, i64 5, !dbg !59
  %433 = select i1 %431, float 0.000000e+00, float %432, !dbg !59
  %434 = extractelement <16 x i1> %403, i64 6, !dbg !59
  %435 = extractelement <16 x float> %402, i64 6, !dbg !59
  %436 = select i1 %434, float 0.000000e+00, float %435, !dbg !59
  %437 = extractelement <16 x i1> %403, i64 7, !dbg !59
  %438 = extractelement <16 x float> %402, i64 7, !dbg !59
  %439 = select i1 %437, float 0.000000e+00, float %438, !dbg !59
  %440 = extractelement <16 x i1> %403, i64 0, !dbg !59
  %441 = extractelement <16 x float> %402, i64 0, !dbg !59
  %442 = select i1 %440, float 0.000000e+00, float %441, !dbg !59
  %443 = extractelement <16 x i1> %403, i64 1, !dbg !59
  %444 = extractelement <16 x float> %402, i64 1, !dbg !59
  %445 = select i1 %443, float 0.000000e+00, float %444, !dbg !59
  %446 = extractelement <16 x i1> %403, i64 2, !dbg !59
  %447 = extractelement <16 x float> %402, i64 2, !dbg !59
  %448 = select i1 %446, float 0.000000e+00, float %447, !dbg !59
  %449 = extractelement <16 x i1> %403, i64 3, !dbg !59
  %450 = extractelement <16 x float> %402, i64 3, !dbg !59
  %451 = select i1 %449, float 0.000000e+00, float %450, !dbg !59
  %452 = fadd float %371, %406, !dbg !60
  %453 = fadd float %370, %409, !dbg !60
  %454 = fadd float %369, %412, !dbg !60
  %455 = fadd float %368, %415, !dbg !60
  %456 = fadd float %367, %418, !dbg !60
  %457 = fadd float %366, %421, !dbg !60
  %458 = fadd float %365, %424, !dbg !60
  %459 = fadd float %364, %427, !dbg !60
  %460 = fadd float %363, %430, !dbg !60
  %461 = fadd float %362, %433, !dbg !60
  %462 = fadd float %361, %436, !dbg !60
  %463 = fadd float %360, %439, !dbg !60
  %464 = fadd float %359, %442, !dbg !60
  %465 = fadd float %358, %445, !dbg !60
  %466 = fadd float %357, %448, !dbg !60
  %467 = fadd float %356, %451, !dbg !60
  %468 = getelementptr float, ptr addrspace(1) %7, i64 %124, !dbg !61
  %469 = getelementptr float, ptr addrspace(1) %7, i64 %126, !dbg !61
  %470 = getelementptr float, ptr addrspace(1) %7, i64 %128, !dbg !61
  %471 = getelementptr float, ptr addrspace(1) %7, i64 %130, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %472 = shl i32 %14, 6, !dbg !62
  %473 = and i32 %472, 4032, !dbg !62
  %474 = or disjoint i32 %473, %.lobit2, !dbg !62
  %475 = or disjoint i32 %474, %44, !dbg !62
  %476 = lshr exact i32 %473, 2, !dbg !62
  %477 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %476, !dbg !62
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %475, !dbg !62
  %479 = bitcast float %406 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #4, !dbg !62
  %480 = or disjoint i32 %475, 16, !dbg !62
  %481 = lshr i32 %480, 4, !dbg !62
  %482 = getelementptr float, ptr addrspace(3) @global_smem, i32 %481, !dbg !62
  %483 = getelementptr float, ptr addrspace(3) %482, i32 %480, !dbg !62
  %484 = bitcast float %409 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %484, i1 true) #4, !dbg !62
  %485 = or disjoint i32 %475, 32, !dbg !62
  %486 = lshr i32 %485, 4, !dbg !62
  %487 = getelementptr float, ptr addrspace(3) @global_smem, i32 %486, !dbg !62
  %488 = getelementptr float, ptr addrspace(3) %487, i32 %485, !dbg !62
  %489 = bitcast float %412 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %489, i1 true) #4, !dbg !62
  %490 = or disjoint i32 %475, 48, !dbg !62
  %491 = lshr i32 %490, 4, !dbg !62
  %492 = getelementptr float, ptr addrspace(3) @global_smem, i32 %491, !dbg !62
  %493 = getelementptr float, ptr addrspace(3) %492, i32 %490, !dbg !62
  %494 = bitcast float %415 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %494, i1 true) #4, !dbg !62
  %495 = or disjoint i32 %475, 4, !dbg !62
  %496 = getelementptr float, ptr addrspace(3) %477, i32 %495, !dbg !62
  %497 = bitcast float %418 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %497, i1 true) #4, !dbg !62
  %498 = or disjoint i32 %475, 20, !dbg !62
  %499 = lshr i32 %498, 4, !dbg !62
  %500 = getelementptr float, ptr addrspace(3) @global_smem, i32 %499, !dbg !62
  %501 = getelementptr float, ptr addrspace(3) %500, i32 %498, !dbg !62
  %502 = bitcast float %421 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %501, <1 x i32> %502, i1 true) #4, !dbg !62
  %503 = or disjoint i32 %475, 36, !dbg !62
  %504 = lshr i32 %503, 4, !dbg !62
  %505 = getelementptr float, ptr addrspace(3) @global_smem, i32 %504, !dbg !62
  %506 = getelementptr float, ptr addrspace(3) %505, i32 %503, !dbg !62
  %507 = bitcast float %424 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %507, i1 true) #4, !dbg !62
  %508 = or disjoint i32 %475, 52, !dbg !62
  %509 = lshr i32 %508, 4, !dbg !62
  %510 = getelementptr float, ptr addrspace(3) @global_smem, i32 %509, !dbg !62
  %511 = getelementptr float, ptr addrspace(3) %510, i32 %508, !dbg !62
  %512 = bitcast float %427 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %512, i1 true) #4, !dbg !62
  %513 = or disjoint i32 %475, 8, !dbg !62
  %514 = getelementptr float, ptr addrspace(3) %477, i32 %513, !dbg !62
  %515 = bitcast float %430 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %514, <1 x i32> %515, i1 true) #4, !dbg !62
  %516 = or disjoint i32 %475, 24, !dbg !62
  %517 = lshr i32 %516, 4, !dbg !62
  %518 = getelementptr float, ptr addrspace(3) @global_smem, i32 %517, !dbg !62
  %519 = getelementptr float, ptr addrspace(3) %518, i32 %516, !dbg !62
  %520 = bitcast float %433 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %520, i1 true) #4, !dbg !62
  %521 = or disjoint i32 %475, 40, !dbg !62
  %522 = lshr i32 %521, 4, !dbg !62
  %523 = getelementptr float, ptr addrspace(3) @global_smem, i32 %522, !dbg !62
  %524 = getelementptr float, ptr addrspace(3) %523, i32 %521, !dbg !62
  %525 = bitcast float %436 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %524, <1 x i32> %525, i1 true) #4, !dbg !62
  %526 = or disjoint i32 %475, 56, !dbg !62
  %527 = lshr i32 %526, 4, !dbg !62
  %528 = getelementptr float, ptr addrspace(3) @global_smem, i32 %527, !dbg !62
  %529 = getelementptr float, ptr addrspace(3) %528, i32 %526, !dbg !62
  %530 = bitcast float %439 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %529, <1 x i32> %530, i1 true) #4, !dbg !62
  %531 = or disjoint i32 %475, 12, !dbg !62
  %532 = getelementptr float, ptr addrspace(3) %477, i32 %531, !dbg !62
  %533 = bitcast float %442 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %532, <1 x i32> %533, i1 true) #4, !dbg !62
  %534 = or disjoint i32 %475, 28, !dbg !62
  %535 = lshr i32 %534, 4, !dbg !62
  %536 = getelementptr float, ptr addrspace(3) @global_smem, i32 %535, !dbg !62
  %537 = getelementptr float, ptr addrspace(3) %536, i32 %534, !dbg !62
  %538 = bitcast float %445 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %538, i1 true) #4, !dbg !62
  %539 = or disjoint i32 %475, 44, !dbg !62
  %540 = lshr i32 %539, 4, !dbg !62
  %541 = getelementptr float, ptr addrspace(3) @global_smem, i32 %540, !dbg !62
  %542 = getelementptr float, ptr addrspace(3) %541, i32 %539, !dbg !62
  %543 = bitcast float %448 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %542, <1 x i32> %543, i1 true) #4, !dbg !62
  %544 = or disjoint i32 %475, 60, !dbg !62
  %545 = lshr i32 %544, 4, !dbg !62
  %546 = getelementptr float, ptr addrspace(3) @global_smem, i32 %545, !dbg !62
  %547 = getelementptr float, ptr addrspace(3) %546, i32 %544, !dbg !62
  %548 = bitcast float %451 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %547, <1 x i32> %548, i1 true) #4, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %549 = lshr i32 %166, 4, !dbg !62
  %550 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %549, !dbg !62
  %551 = getelementptr inbounds float, ptr addrspace(3) %550, i32 %166, !dbg !62
  %552 = load i32, ptr addrspace(3) %551, align 4, !dbg !62
  %553 = or disjoint i32 %166, 1, !dbg !62
  %554 = getelementptr inbounds float, ptr addrspace(3) %550, i32 %553, !dbg !62
  %555 = load i32, ptr addrspace(3) %554, align 4, !dbg !62
  %556 = or disjoint i32 %166, 2, !dbg !62
  %557 = getelementptr inbounds float, ptr addrspace(3) %550, i32 %556, !dbg !62
  %558 = load i32, ptr addrspace(3) %557, align 4, !dbg !62
  %559 = or disjoint i32 %166, 3, !dbg !62
  %560 = getelementptr inbounds float, ptr addrspace(3) %550, i32 %559, !dbg !62
  %561 = load i32, ptr addrspace(3) %560, align 4, !dbg !62
  %562 = lshr i32 %257, 4, !dbg !62
  %563 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %562, !dbg !62
  %564 = getelementptr inbounds float, ptr addrspace(3) %563, i32 %257, !dbg !62
  %565 = load i32, ptr addrspace(3) %564, align 4, !dbg !62
  %566 = or disjoint i32 %166, 1025, !dbg !62
  %567 = lshr i32 %566, 4, !dbg !62
  %568 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %567, !dbg !62
  %569 = getelementptr inbounds float, ptr addrspace(3) %568, i32 %566, !dbg !62
  %570 = load i32, ptr addrspace(3) %569, align 4, !dbg !62
  %571 = or disjoint i32 %166, 1026, !dbg !62
  %572 = lshr i32 %571, 4, !dbg !62
  %573 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %572, !dbg !62
  %574 = getelementptr inbounds float, ptr addrspace(3) %573, i32 %571, !dbg !62
  %575 = load i32, ptr addrspace(3) %574, align 4, !dbg !62
  %576 = or disjoint i32 %166, 1027, !dbg !62
  %577 = lshr i32 %576, 4, !dbg !62
  %578 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %577, !dbg !62
  %579 = getelementptr inbounds float, ptr addrspace(3) %578, i32 %576, !dbg !62
  %580 = load i32, ptr addrspace(3) %579, align 4, !dbg !62
  %581 = lshr i32 %263, 4, !dbg !62
  %582 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %581, !dbg !62
  %583 = getelementptr inbounds float, ptr addrspace(3) %582, i32 %263, !dbg !62
  %584 = load i32, ptr addrspace(3) %583, align 4, !dbg !62
  %585 = or disjoint i32 %166, 2049, !dbg !62
  %586 = lshr i32 %585, 4, !dbg !62
  %587 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %586, !dbg !62
  %588 = getelementptr inbounds float, ptr addrspace(3) %587, i32 %585, !dbg !62
  %589 = load i32, ptr addrspace(3) %588, align 4, !dbg !62
  %590 = or disjoint i32 %166, 2050, !dbg !62
  %591 = lshr i32 %590, 4, !dbg !62
  %592 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %591, !dbg !62
  %593 = getelementptr inbounds float, ptr addrspace(3) %592, i32 %590, !dbg !62
  %594 = load i32, ptr addrspace(3) %593, align 4, !dbg !62
  %595 = or disjoint i32 %166, 2051, !dbg !62
  %596 = lshr i32 %595, 4, !dbg !62
  %597 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %596, !dbg !62
  %598 = getelementptr inbounds float, ptr addrspace(3) %597, i32 %595, !dbg !62
  %599 = load i32, ptr addrspace(3) %598, align 4, !dbg !62
  %600 = lshr i32 %269, 4, !dbg !62
  %601 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %600, !dbg !62
  %602 = getelementptr inbounds float, ptr addrspace(3) %601, i32 %269, !dbg !62
  %603 = load i32, ptr addrspace(3) %602, align 4, !dbg !62
  %604 = or disjoint i32 %166, 3073, !dbg !62
  %605 = lshr i32 %604, 4, !dbg !62
  %606 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %605, !dbg !62
  %607 = getelementptr inbounds float, ptr addrspace(3) %606, i32 %604, !dbg !62
  %608 = load i32, ptr addrspace(3) %607, align 4, !dbg !62
  %609 = or disjoint i32 %166, 3074, !dbg !62
  %610 = lshr i32 %609, 4, !dbg !62
  %611 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %610, !dbg !62
  %612 = getelementptr inbounds float, ptr addrspace(3) %611, i32 %609, !dbg !62
  %613 = load i32, ptr addrspace(3) %612, align 4, !dbg !62
  %614 = or disjoint i32 %166, 3075, !dbg !62
  %615 = lshr i32 %614, 4, !dbg !62
  %616 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %615, !dbg !62
  %617 = getelementptr inbounds float, ptr addrspace(3) %616, i32 %614, !dbg !62
  %618 = load i32, ptr addrspace(3) %617, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %552, i32 %555, i32 %558, i32 %561, ptr addrspace(1) %468, i1 %132) #4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %565, i32 %570, i32 %575, i32 %580, ptr addrspace(1) %469, i1 %133) #4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %584, i32 %589, i32 %594, i32 %599, ptr addrspace(1) %470, i1 %134) #4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %603, i32 %608, i32 %613, i32 %618, ptr addrspace(1) %471, i1 %135) #4, !dbg !62
  %619 = shl i32 %46, 7, !dbg !63
  %620 = shl i32 %47, 7, !dbg !63
  %621 = shl i32 %48, 7, !dbg !63
  %622 = shl i32 %49, 7, !dbg !63
  %623 = add i32 %619, %.decomposed43, !dbg !64
  %624 = add i32 %623, %300, !dbg !65
  %625 = add i32 %300, %.decomposed43, !dbg !64
  %626 = add i32 %625, %620, !dbg !65
  %627 = add i32 %625, %621, !dbg !65
  %628 = add i32 %625, %622, !dbg !65
  %629 = sext i32 %624 to i64, !dbg !66
  %630 = getelementptr float, ptr addrspace(1) %8, i64 %629, !dbg !66
  %631 = sext i32 %626 to i64, !dbg !66
  %632 = getelementptr float, ptr addrspace(1) %8, i64 %631, !dbg !66
  %633 = sext i32 %627 to i64, !dbg !66
  %634 = getelementptr float, ptr addrspace(1) %8, i64 %633, !dbg !66
  %635 = sext i32 %628 to i64, !dbg !66
  %636 = getelementptr float, ptr addrspace(1) %8, i64 %635, !dbg !66
  %637 = bitcast float %452 to i32, !dbg !67
  %638 = bitcast float %453 to i32, !dbg !67
  %639 = bitcast float %454 to i32, !dbg !67
  %640 = bitcast float %455 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %637, i32 %638, i32 %639, i32 %640, ptr addrspace(1) %630, i1 %136) #4, !dbg !67
  %641 = bitcast float %456 to i32, !dbg !67
  %642 = bitcast float %457 to i32, !dbg !67
  %643 = bitcast float %458 to i32, !dbg !67
  %644 = bitcast float %459 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %641, i32 %642, i32 %643, i32 %644, ptr addrspace(1) %632, i1 %137) #4, !dbg !67
  %645 = bitcast float %460 to i32, !dbg !67
  %646 = bitcast float %461 to i32, !dbg !67
  %647 = bitcast float %462 to i32, !dbg !67
  %648 = bitcast float %463 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %645, i32 %646, i32 %647, i32 %648, ptr addrspace(1) %634, i1 %138) #4, !dbg !67
  %649 = bitcast float %464 to i32, !dbg !67
  %650 = bitcast float %465 to i32, !dbg !67
  %651 = bitcast float %466 to i32, !dbg !67
  %652 = bitcast float %467 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %649, i32 %650, i32 %651, i32 %652, ptr addrspace(1) %636, i1 %139) #4, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbm65p4dyc2lwasdlfcily27avpivtj5opnjqhnspf5a2ppsdkpn.py", directory: "inductor_cache/bm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 30, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 36, scope: !7)
!36 = !DILocation(line: 40, column: 39, scope: !7)
!37 = !DILocation(line: 40, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 31, scope: !7)
!39 = !DILocation(line: 40, column: 52, scope: !7)
!40 = !DILocation(line: 40, column: 44, scope: !7)
!41 = !DILocation(line: 44, column: 32, scope: !7)
!42 = !DILocation(line: 47, column: 32, scope: !7)
!43 = !DILocation(line: 48, column: 35, scope: !7)
!44 = !DILocation(line: 48, column: 62, scope: !7)
!45 = !DILocation(line: 48, column: 57, scope: !7)
!46 = !DILocation(line: 48, column: 30, scope: !7)
!47 = !DILocation(line: 48, column: 67, scope: !7)
!48 = !DILocation(line: 49, column: 19, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 27, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 20, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 61, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 25, scope: !7)
!62 = !DILocation(line: 63, column: 45, scope: !7)
!63 = !DILocation(line: 64, column: 34, scope: !7)
!64 = !DILocation(line: 64, column: 30, scope: !7)
!65 = !DILocation(line: 64, column: 39, scope: !7)
!66 = !DILocation(line: 64, column: 25, scope: !7)
!67 = !DILocation(line: 64, column: 56, scope: !7)
!68 = !DILocation(line: 64, column: 4, scope: !7)
