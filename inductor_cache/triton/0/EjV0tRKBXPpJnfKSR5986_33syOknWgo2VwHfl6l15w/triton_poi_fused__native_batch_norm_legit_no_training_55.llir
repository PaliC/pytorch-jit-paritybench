; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_55(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 1020, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 1280, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 2, !dbg !16
  %18 = or disjoint i32 %17, 1, !dbg !17
  %19 = or disjoint i32 %17, 2, !dbg !17
  %20 = or disjoint i32 %17, 3, !dbg !17
  %21 = icmp slt i32 %17, 4, !dbg !18
  %22 = icmp slt i32 %18, 4, !dbg !18
  %23 = icmp slt i32 %19, 4, !dbg !18
  %24 = icmp slt i32 %20, 4, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %25 = sdiv i32 %.frozen, 320, !dbg !19
  %26 = mul i32 %25, 320, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = mul i32 %16, 1280, !dbg !21
  %28 = mul i32 %18, 320, !dbg !21
  %29 = mul i32 %19, 320, !dbg !21
  %30 = mul i32 %20, 320, !dbg !21
  %31 = mul i32 %25, 1280, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %32, %27, !dbg !24
  %34 = add i32 %32, %28, !dbg !24
  %35 = add i32 %32, %29, !dbg !24
  %36 = add i32 %32, %30, !dbg !24
  %37 = sext i32 %33 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %34 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = sext i32 %35 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %36 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = and i1 %21, %15, !dbg !26
  %46 = and i1 %15, %22, !dbg !26
  %47 = and i1 %15, %23, !dbg !26
  %48 = and i1 %15, %24, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %45) #4, !dbg !27
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %46) #4, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %47) #4, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %48) #4, !dbg !27
  %53 = sext i32 %.decomposed to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %15) #4, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !30
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %15) #4, !dbg !31
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !31
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !31
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !31
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !31
  %62 = bitcast i32 %58 to float, !dbg !31
  %63 = bitcast i32 %59 to float, !dbg !31
  %64 = bitcast i32 %60 to float, !dbg !31
  %65 = bitcast i32 %61 to float, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %15) #4, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !34
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %15) #4, !dbg !35
  %70 = fadd float %62, 0x3EE4F8B580000000, !dbg !36
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !36
  %72 = fadd float %64, 0x3EE4F8B580000000, !dbg !36
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %74, 0, !dbg !37
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %75, 0, !dbg !37
  br i1 %.not.i, label %81, label %76, !dbg !37

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !37

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !37

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !37
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %86, 0, !dbg !37
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !37
  br i1 %.not.i1, label %93, label %88, !dbg !37

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !37

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !37

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !37
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %98, 0, !dbg !37
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !37
  br i1 %.not.i6, label %105, label %100, !dbg !37

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !37

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !37

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !37
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %110, 0, !dbg !37
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %111, 0, !dbg !37
  br i1 %.not.i11, label %117, label %112, !dbg !37

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !37

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !37

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %113, %115, %118, %120
  %.0.i13 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !37
  %122 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !29
  %125 = bitcast i32 %124 to float, !dbg !29
  %126 = fsub float %123, %125, !dbg !38
  %127 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %128 = bitcast i32 %127 to float, !dbg !27
  %129 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !29
  %130 = bitcast i32 %129 to float, !dbg !29
  %131 = fsub float %128, %130, !dbg !38
  %132 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %133 = bitcast i32 %132 to float, !dbg !27
  %134 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !29
  %135 = bitcast i32 %134 to float, !dbg !29
  %136 = fsub float %133, %135, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %138 = bitcast i32 %137 to float, !dbg !27
  %139 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !29
  %140 = bitcast i32 %139 to float, !dbg !29
  %141 = fsub float %138, %140, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %143 = bitcast i32 %142 to float, !dbg !27
  %144 = fsub float %143, %125, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %146 = bitcast i32 %145 to float, !dbg !27
  %147 = fsub float %146, %130, !dbg !38
  %148 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %149 = bitcast i32 %148 to float, !dbg !27
  %150 = fsub float %149, %135, !dbg !38
  %151 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %152 = bitcast i32 %151 to float, !dbg !27
  %153 = fsub float %152, %140, !dbg !38
  %154 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %155 = bitcast i32 %154 to float, !dbg !27
  %156 = fsub float %155, %125, !dbg !38
  %157 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %158 = bitcast i32 %157 to float, !dbg !27
  %159 = fsub float %158, %130, !dbg !38
  %160 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %161 = bitcast i32 %160 to float, !dbg !27
  %162 = fsub float %161, %135, !dbg !38
  %163 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %164 = bitcast i32 %163 to float, !dbg !27
  %165 = fsub float %164, %140, !dbg !38
  %166 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %167 = bitcast i32 %166 to float, !dbg !27
  %168 = fsub float %167, %125, !dbg !38
  %169 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %170 = bitcast i32 %169 to float, !dbg !27
  %171 = fsub float %170, %130, !dbg !38
  %172 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %173 = bitcast i32 %172 to float, !dbg !27
  %174 = fsub float %173, %135, !dbg !38
  %175 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %176 = bitcast i32 %175 to float, !dbg !27
  %177 = fsub float %176, %140, !dbg !38
  %178 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !35
  %179 = bitcast i32 %178 to float, !dbg !35
  %180 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !35
  %181 = bitcast i32 %180 to float, !dbg !35
  %182 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !35
  %183 = bitcast i32 %182 to float, !dbg !35
  %184 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !35
  %185 = bitcast i32 %184 to float, !dbg !35
  %186 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !33
  %187 = bitcast i32 %186 to float, !dbg !33
  %188 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !33
  %189 = bitcast i32 %188 to float, !dbg !33
  %190 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !33
  %191 = bitcast i32 %190 to float, !dbg !33
  %192 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !33
  %193 = bitcast i32 %192 to float, !dbg !33
  %194 = and i32 %11, 255, !dbg !12
  %195 = or disjoint i32 %194, %10, !dbg !13
  %196 = or disjoint i32 %195, 768, !dbg !13
  %197 = icmp slt i32 %196, 1280, !dbg !14
  %198 = and i1 %21, %197, !dbg !26
  %199 = or disjoint i32 %195, 512, !dbg !13
  %200 = icmp slt i32 %199, 1280, !dbg !14
  %201 = and i1 %21, %200, !dbg !26
  %202 = or disjoint i32 %195, 256, !dbg !13
  %203 = icmp slt i32 %202, 1280, !dbg !14
  %204 = and i1 %21, %203, !dbg !26
  %205 = icmp slt i32 %195, 1280, !dbg !14
  %206 = and i1 %21, %205, !dbg !26
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !39
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !39
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %211 = fmul float %177, %207, !dbg !40
  %212 = fmul float %174, %208, !dbg !40
  %213 = fmul float %171, %209, !dbg !40
  %214 = fmul float %168, %210, !dbg !40
  %215 = fmul float %165, %207, !dbg !40
  %216 = fmul float %162, %208, !dbg !40
  %217 = fmul float %159, %209, !dbg !40
  %218 = fmul float %156, %210, !dbg !40
  %219 = fmul float %153, %207, !dbg !40
  %220 = fmul float %150, %208, !dbg !40
  %221 = fmul float %147, %209, !dbg !40
  %222 = fmul float %144, %210, !dbg !40
  %223 = fmul float %141, %207, !dbg !40
  %224 = fmul float %136, %208, !dbg !40
  %225 = fmul float %131, %209, !dbg !40
  %226 = fmul float %126, %210, !dbg !40
  %227 = fmul float %211, %193, !dbg !41
  %228 = fmul float %212, %191, !dbg !41
  %229 = fmul float %213, %189, !dbg !41
  %230 = fmul float %214, %187, !dbg !41
  %231 = fmul float %215, %193, !dbg !41
  %232 = fmul float %216, %191, !dbg !41
  %233 = fmul float %217, %189, !dbg !41
  %234 = fmul float %218, %187, !dbg !41
  %235 = fmul float %219, %193, !dbg !41
  %236 = fmul float %220, %191, !dbg !41
  %237 = fmul float %221, %189, !dbg !41
  %238 = fmul float %222, %187, !dbg !41
  %239 = fmul float %223, %193, !dbg !41
  %240 = fmul float %224, %191, !dbg !41
  %241 = fmul float %225, %189, !dbg !41
  %242 = fmul float %226, %187, !dbg !41
  %243 = fadd float %227, %185, !dbg !42
  %244 = fadd float %228, %183, !dbg !42
  %245 = fadd float %229, %181, !dbg !42
  %246 = fadd float %230, %179, !dbg !42
  %247 = fadd float %231, %185, !dbg !42
  %248 = fadd float %232, %183, !dbg !42
  %249 = fadd float %233, %181, !dbg !42
  %250 = fadd float %234, %179, !dbg !42
  %251 = fadd float %235, %185, !dbg !42
  %252 = fadd float %236, %183, !dbg !42
  %253 = fadd float %237, %181, !dbg !42
  %254 = fadd float %238, %179, !dbg !42
  %255 = fadd float %239, %185, !dbg !42
  %256 = fadd float %240, %183, !dbg !42
  %257 = fadd float %241, %181, !dbg !42
  %258 = fadd float %242, %179, !dbg !42
  %259 = add i32 %195, %16, !dbg !43
  %260 = shl i32 %259, 2, !dbg !43
  %261 = add i32 %202, %16, !dbg !43
  %262 = shl i32 %261, 2, !dbg !43
  %263 = add i32 %199, %16, !dbg !43
  %264 = shl i32 %263, 2, !dbg !43
  %265 = add i32 %196, %16, !dbg !43
  %266 = shl i32 %265, 2, !dbg !43
  %267 = sext i32 %260 to i64, !dbg !44
  %268 = getelementptr float, ptr addrspace(1) %5, i64 %267, !dbg !44
  %269 = sext i32 %262 to i64, !dbg !44
  %270 = getelementptr float, ptr addrspace(1) %5, i64 %269, !dbg !44
  %271 = sext i32 %264 to i64, !dbg !44
  %272 = getelementptr float, ptr addrspace(1) %5, i64 %271, !dbg !44
  %273 = sext i32 %266 to i64, !dbg !44
  %274 = getelementptr float, ptr addrspace(1) %5, i64 %273, !dbg !44
  %275 = shl i32 %11, 4, !dbg !45
  %276 = and i32 %275, 4080, !dbg !45
  %277 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %276, !dbg !45
  %278 = getelementptr float, ptr addrspace(3) %277, i32 %276, !dbg !45
  %279 = bitcast float %243 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !45
  %280 = or disjoint i32 %276, 4, !dbg !45
  %281 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %280, !dbg !45
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %280, !dbg !45
  %283 = bitcast float %244 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !45
  %284 = or disjoint i32 %276, 8, !dbg !45
  %285 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %284, !dbg !45
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %284, !dbg !45
  %287 = bitcast float %245 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !45
  %288 = or disjoint i32 %276, 12, !dbg !45
  %289 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %288, !dbg !45
  %290 = getelementptr float, ptr addrspace(3) %289, i32 %288, !dbg !45
  %291 = bitcast float %246 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #4, !dbg !45
  %292 = or disjoint i32 %276, 1, !dbg !45
  %293 = getelementptr float, ptr addrspace(3) %277, i32 %292, !dbg !45
  %294 = bitcast float %247 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #4, !dbg !45
  %295 = or disjoint i32 %276, 5, !dbg !45
  %296 = lshr i32 %295, 2, !dbg !45
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !45
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %295, !dbg !45
  %299 = bitcast float %248 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !45
  %300 = or disjoint i32 %276, 9, !dbg !45
  %301 = lshr i32 %300, 2, !dbg !45
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %301, !dbg !45
  %303 = getelementptr float, ptr addrspace(3) %302, i32 %300, !dbg !45
  %304 = bitcast float %249 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !45
  %305 = or disjoint i32 %276, 13, !dbg !45
  %306 = lshr i32 %305, 2, !dbg !45
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i32 %306, !dbg !45
  %308 = getelementptr float, ptr addrspace(3) %307, i32 %305, !dbg !45
  %309 = bitcast float %250 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #4, !dbg !45
  %310 = or disjoint i32 %276, 2, !dbg !45
  %311 = getelementptr float, ptr addrspace(3) %277, i32 %310, !dbg !45
  %312 = bitcast float %251 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !45
  %313 = or disjoint i32 %276, 6, !dbg !45
  %314 = lshr i32 %313, 2, !dbg !45
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i32 %314, !dbg !45
  %316 = getelementptr float, ptr addrspace(3) %315, i32 %313, !dbg !45
  %317 = bitcast float %252 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #4, !dbg !45
  %318 = or disjoint i32 %276, 10, !dbg !45
  %319 = lshr i32 %318, 2, !dbg !45
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i32 %319, !dbg !45
  %321 = getelementptr float, ptr addrspace(3) %320, i32 %318, !dbg !45
  %322 = bitcast float %253 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !45
  %323 = or disjoint i32 %276, 14, !dbg !45
  %324 = lshr i32 %323, 2, !dbg !45
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i32 %324, !dbg !45
  %326 = getelementptr float, ptr addrspace(3) %325, i32 %323, !dbg !45
  %327 = bitcast float %254 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #4, !dbg !45
  %328 = or disjoint i32 %276, 3, !dbg !45
  %329 = getelementptr float, ptr addrspace(3) %277, i32 %328, !dbg !45
  %330 = bitcast float %255 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !45
  %331 = or disjoint i32 %276, 7, !dbg !45
  %332 = lshr i32 %331, 2, !dbg !45
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !45
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %331, !dbg !45
  %335 = bitcast float %256 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !45
  %336 = or disjoint i32 %276, 11, !dbg !45
  %337 = lshr i32 %336, 2, !dbg !45
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !45
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !45
  %340 = bitcast float %257 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !45
  %341 = or disjoint i32 %276, 15, !dbg !45
  %342 = lshr i32 %341, 2, !dbg !45
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %342, !dbg !45
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %341, !dbg !45
  %345 = bitcast float %258 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %346 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !45
  %347 = getelementptr inbounds float, ptr addrspace(3) %346, i32 %13, !dbg !45
  %348 = load i32, ptr addrspace(3) %347, align 4, !dbg !45
  %349 = or disjoint i32 %13, 1, !dbg !45
  %350 = getelementptr inbounds float, ptr addrspace(3) %346, i32 %349, !dbg !45
  %351 = load i32, ptr addrspace(3) %350, align 4, !dbg !45
  %352 = or disjoint i32 %13, 2, !dbg !45
  %353 = getelementptr inbounds float, ptr addrspace(3) %346, i32 %352, !dbg !45
  %354 = load i32, ptr addrspace(3) %353, align 4, !dbg !45
  %355 = or disjoint i32 %13, 3, !dbg !45
  %356 = getelementptr inbounds float, ptr addrspace(3) %346, i32 %355, !dbg !45
  %357 = load i32, ptr addrspace(3) %356, align 4, !dbg !45
  %358 = or disjoint i32 %13, 1024, !dbg !45
  %359 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %358, !dbg !45
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %358, !dbg !45
  %361 = load i32, ptr addrspace(3) %360, align 4, !dbg !45
  %362 = or disjoint i32 %13, 1025, !dbg !45
  %363 = lshr i32 %362, 2, !dbg !45
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %363, !dbg !45
  %365 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %362, !dbg !45
  %366 = load i32, ptr addrspace(3) %365, align 4, !dbg !45
  %367 = or disjoint i32 %13, 1026, !dbg !45
  %368 = lshr i32 %367, 2, !dbg !45
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %368, !dbg !45
  %370 = getelementptr inbounds float, ptr addrspace(3) %369, i32 %367, !dbg !45
  %371 = load i32, ptr addrspace(3) %370, align 4, !dbg !45
  %372 = or disjoint i32 %13, 1027, !dbg !45
  %373 = lshr i32 %372, 2, !dbg !45
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %373, !dbg !45
  %375 = getelementptr inbounds float, ptr addrspace(3) %374, i32 %372, !dbg !45
  %376 = load i32, ptr addrspace(3) %375, align 4, !dbg !45
  %377 = or disjoint i32 %13, 2048, !dbg !45
  %378 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %377, !dbg !45
  %379 = getelementptr inbounds float, ptr addrspace(3) %378, i32 %377, !dbg !45
  %380 = load i32, ptr addrspace(3) %379, align 4, !dbg !45
  %381 = or disjoint i32 %13, 2049, !dbg !45
  %382 = lshr i32 %381, 2, !dbg !45
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %382, !dbg !45
  %384 = getelementptr inbounds float, ptr addrspace(3) %383, i32 %381, !dbg !45
  %385 = load i32, ptr addrspace(3) %384, align 4, !dbg !45
  %386 = or disjoint i32 %13, 2050, !dbg !45
  %387 = lshr i32 %386, 2, !dbg !45
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %387, !dbg !45
  %389 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %386, !dbg !45
  %390 = load i32, ptr addrspace(3) %389, align 4, !dbg !45
  %391 = or disjoint i32 %13, 2051, !dbg !45
  %392 = lshr i32 %391, 2, !dbg !45
  %393 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %392, !dbg !45
  %394 = getelementptr inbounds float, ptr addrspace(3) %393, i32 %391, !dbg !45
  %395 = load i32, ptr addrspace(3) %394, align 4, !dbg !45
  %396 = or disjoint i32 %13, 3072, !dbg !45
  %397 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %396, !dbg !45
  %398 = getelementptr inbounds float, ptr addrspace(3) %397, i32 %396, !dbg !45
  %399 = load i32, ptr addrspace(3) %398, align 4, !dbg !45
  %400 = or disjoint i32 %13, 3073, !dbg !45
  %401 = lshr i32 %400, 2, !dbg !45
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %401, !dbg !45
  %403 = getelementptr inbounds float, ptr addrspace(3) %402, i32 %400, !dbg !45
  %404 = load i32, ptr addrspace(3) %403, align 4, !dbg !45
  %405 = or disjoint i32 %13, 3074, !dbg !45
  %406 = lshr i32 %405, 2, !dbg !45
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %406, !dbg !45
  %408 = getelementptr inbounds float, ptr addrspace(3) %407, i32 %405, !dbg !45
  %409 = load i32, ptr addrspace(3) %408, align 4, !dbg !45
  %410 = or disjoint i32 %13, 3075, !dbg !45
  %411 = lshr i32 %410, 2, !dbg !45
  %412 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %411, !dbg !45
  %413 = getelementptr inbounds float, ptr addrspace(3) %412, i32 %410, !dbg !45
  %414 = load i32, ptr addrspace(3) %413, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %348, i32 %351, i32 %354, i32 %357, ptr addrspace(1) %268, i1 %206) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %361, i32 %366, i32 %371, i32 %376, ptr addrspace(1) %270, i1 %204) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %380, i32 %385, i32 %390, i32 %395, ptr addrspace(1) %272, i1 %201) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %399, i32 %404, i32 %409, i32 %414, ptr addrspace(1) %274, i1 %198) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyziowyzk3loer6xdhnnyzyubl77q2qyluwylpjligrmgkx6cvcx.py", directory: "inductor_cache/yz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_55, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_55, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_55", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_55", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 30, scope: !7)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 44, scope: !7)
!46 = !DILocation(line: 48, column: 4, scope: !7)
