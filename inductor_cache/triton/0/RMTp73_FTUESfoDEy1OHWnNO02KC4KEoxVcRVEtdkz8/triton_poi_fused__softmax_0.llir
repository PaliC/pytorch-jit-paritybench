; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = or disjoint i32 %8, 128, !dbg !13
  %10 = or disjoint i32 %8, 256, !dbg !13
  %11 = or disjoint i32 %8, 384, !dbg !13
  %12 = or disjoint i32 %8, 512, !dbg !13
  %13 = or disjoint i32 %8, 640, !dbg !13
  %14 = or disjoint i32 %8, 768, !dbg !13
  %15 = or disjoint i32 %8, 896, !dbg !13
  %16 = icmp slt i32 %8, 424000, !dbg !14
  %17 = icmp slt i32 %9, 424000, !dbg !14
  %18 = icmp slt i32 %10, 424000, !dbg !14
  %19 = icmp slt i32 %11, 424000, !dbg !14
  %20 = icmp slt i32 %12, 424000, !dbg !14
  %21 = icmp slt i32 %13, 424000, !dbg !14
  %22 = icmp slt i32 %14, 424000, !dbg !14
  %23 = icmp slt i32 %15, 424000, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %24 = sdiv i32 %.frozen, 6625, !dbg !15
  %25 = mul i32 %24, 6625, !dbg !16
  %.decomposed = sub i32 %.frozen, %25, !dbg !16
  %.frozen1 = freeze i32 %9, !dbg !15
  %26 = sdiv i32 %.frozen1, 6625, !dbg !15
  %27 = mul i32 %26, 6625, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %27, !dbg !16
  %.frozen3 = freeze i32 %10, !dbg !15
  %28 = sdiv i32 %.frozen3, 6625, !dbg !15
  %29 = mul i32 %28, 6625, !dbg !16
  %.decomposed4 = sub i32 %.frozen3, %29, !dbg !16
  %.frozen5 = freeze i32 %11, !dbg !15
  %30 = sdiv i32 %.frozen5, 6625, !dbg !15
  %31 = mul i32 %30, 6625, !dbg !16
  %.decomposed6 = sub i32 %.frozen5, %31, !dbg !16
  %.frozen7 = freeze i32 %12, !dbg !15
  %32 = sdiv i32 %.frozen7, 6625, !dbg !15
  %33 = mul i32 %32, 6625, !dbg !16
  %.decomposed8 = sub i32 %.frozen7, %33, !dbg !16
  %.frozen9 = freeze i32 %13, !dbg !15
  %34 = sdiv i32 %.frozen9, 6625, !dbg !15
  %35 = mul i32 %34, 6625, !dbg !16
  %.decomposed10 = sub i32 %.frozen9, %35, !dbg !16
  %.frozen11 = freeze i32 %14, !dbg !15
  %36 = sdiv i32 %.frozen11, 6625, !dbg !15
  %37 = mul i32 %36, 6625, !dbg !16
  %.decomposed12 = sub i32 %.frozen11, %37, !dbg !16
  %.frozen13 = freeze i32 %15, !dbg !15
  %38 = sdiv i32 %.frozen13, 6625, !dbg !15
  %39 = mul i32 %38, 6625, !dbg !16
  %.decomposed14 = sub i32 %.frozen13, %39, !dbg !16
  %40 = sdiv i32 %8, 26500, !dbg !17
  %41 = sdiv i32 %9, 26500, !dbg !17
  %42 = sdiv i32 %10, 26500, !dbg !17
  %43 = sdiv i32 %11, 26500, !dbg !17
  %44 = sdiv i32 %12, 26500, !dbg !17
  %45 = sdiv i32 %13, 26500, !dbg !17
  %46 = sdiv i32 %14, 26500, !dbg !17
  %47 = sdiv i32 %15, 26500, !dbg !17
  %48 = mul i32 %24, 6656, !dbg !18
  %49 = mul i32 %26, 6656, !dbg !18
  %50 = mul i32 %28, 6656, !dbg !18
  %51 = mul i32 %30, 6656, !dbg !18
  %52 = mul i32 %32, 6656, !dbg !18
  %53 = mul i32 %34, 6656, !dbg !18
  %54 = mul i32 %36, 6656, !dbg !18
  %55 = mul i32 %38, 6656, !dbg !18
  %56 = add i32 %48, %.decomposed, !dbg !19
  %57 = add i32 %49, %.decomposed2, !dbg !19
  %58 = add i32 %50, %.decomposed4, !dbg !19
  %59 = add i32 %51, %.decomposed6, !dbg !19
  %60 = add i32 %52, %.decomposed8, !dbg !19
  %61 = add i32 %53, %.decomposed10, !dbg !19
  %62 = add i32 %54, %.decomposed12, !dbg !19
  %63 = add i32 %55, %.decomposed14, !dbg !19
  %64 = sext i32 %56 to i64, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !20
  %66 = sext i32 %57 to i64, !dbg !20
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !20
  %68 = sext i32 %58 to i64, !dbg !20
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !20
  %70 = sext i32 %59 to i64, !dbg !20
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !20
  %72 = sext i32 %60 to i64, !dbg !20
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !20
  %74 = sext i32 %61 to i64, !dbg !20
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !20
  %76 = sext i32 %62 to i64, !dbg !20
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !20
  %78 = sext i32 %63 to i64, !dbg !20
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !20
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %16) #1, !dbg !21
  %81 = bitcast i32 %80 to float, !dbg !21
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #1, !dbg !21
  %83 = bitcast i32 %82 to float, !dbg !21
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #1, !dbg !21
  %85 = bitcast i32 %84 to float, !dbg !21
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %19) #1, !dbg !21
  %87 = bitcast i32 %86 to float, !dbg !21
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %20) #1, !dbg !21
  %89 = bitcast i32 %88 to float, !dbg !21
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %21) #1, !dbg !21
  %91 = bitcast i32 %90 to float, !dbg !21
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %22) #1, !dbg !21
  %93 = bitcast i32 %92 to float, !dbg !21
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %23) #1, !dbg !21
  %95 = bitcast i32 %94 to float, !dbg !21
  %96 = mul i32 %40, 26624, !dbg !22
  %97 = mul i32 %41, 26624, !dbg !22
  %98 = mul i32 %42, 26624, !dbg !22
  %99 = mul i32 %43, 26624, !dbg !22
  %100 = mul i32 %44, 26624, !dbg !22
  %101 = mul i32 %45, 26624, !dbg !22
  %102 = mul i32 %46, 26624, !dbg !22
  %103 = mul i32 %47, 26624, !dbg !22
  %104 = add i32 %96, %.decomposed, !dbg !23
  %105 = add i32 %97, %.decomposed2, !dbg !23
  %106 = add i32 %98, %.decomposed4, !dbg !23
  %107 = add i32 %99, %.decomposed6, !dbg !23
  %108 = add i32 %100, %.decomposed8, !dbg !23
  %109 = add i32 %101, %.decomposed10, !dbg !23
  %110 = add i32 %102, %.decomposed12, !dbg !23
  %111 = add i32 %103, %.decomposed14, !dbg !23
  %112 = sext i32 %104 to i64, !dbg !24
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !24
  %114 = sext i32 %105 to i64, !dbg !24
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !24
  %116 = sext i32 %106 to i64, !dbg !24
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !24
  %118 = sext i32 %107 to i64, !dbg !24
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !24
  %120 = sext i32 %108 to i64, !dbg !24
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !24
  %122 = sext i32 %109 to i64, !dbg !24
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !24
  %124 = sext i32 %110 to i64, !dbg !24
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !24
  %126 = sext i32 %111 to i64, !dbg !24
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !24
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %16) #1, !dbg !25
  %129 = bitcast i32 %128 to float, !dbg !25
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %17) #1, !dbg !25
  %131 = bitcast i32 %130 to float, !dbg !25
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %18) #1, !dbg !25
  %133 = bitcast i32 %132 to float, !dbg !25
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %19) #1, !dbg !25
  %135 = bitcast i32 %134 to float, !dbg !25
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %20) #1, !dbg !25
  %137 = bitcast i32 %136 to float, !dbg !25
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %21) #1, !dbg !25
  %139 = bitcast i32 %138 to float, !dbg !25
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %22) #1, !dbg !25
  %141 = bitcast i32 %140 to float, !dbg !25
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %23) #1, !dbg !25
  %143 = bitcast i32 %142 to float, !dbg !25
  %144 = add i32 %104, 6656, !dbg !26
  %145 = add i32 %105, 6656, !dbg !26
  %146 = add i32 %106, 6656, !dbg !26
  %147 = add i32 %107, 6656, !dbg !26
  %148 = add i32 %108, 6656, !dbg !26
  %149 = add i32 %109, 6656, !dbg !26
  %150 = add i32 %110, 6656, !dbg !26
  %151 = add i32 %111, 6656, !dbg !26
  %152 = sext i32 %144 to i64, !dbg !27
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !27
  %154 = sext i32 %145 to i64, !dbg !27
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !27
  %156 = sext i32 %146 to i64, !dbg !27
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !27
  %158 = sext i32 %147 to i64, !dbg !27
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !27
  %160 = sext i32 %148 to i64, !dbg !27
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !27
  %162 = sext i32 %149 to i64, !dbg !27
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !27
  %164 = sext i32 %150 to i64, !dbg !27
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !27
  %166 = sext i32 %151 to i64, !dbg !27
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !27
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %16) #1, !dbg !28
  %169 = bitcast i32 %168 to float, !dbg !28
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %17) #1, !dbg !28
  %171 = bitcast i32 %170 to float, !dbg !28
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %18) #1, !dbg !28
  %173 = bitcast i32 %172 to float, !dbg !28
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %19) #1, !dbg !28
  %175 = bitcast i32 %174 to float, !dbg !28
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %20) #1, !dbg !28
  %177 = bitcast i32 %176 to float, !dbg !28
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %21) #1, !dbg !28
  %179 = bitcast i32 %178 to float, !dbg !28
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %22) #1, !dbg !28
  %181 = bitcast i32 %180 to float, !dbg !28
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %23) #1, !dbg !28
  %183 = bitcast i32 %182 to float, !dbg !28
  %184 = add i32 %104, 13312, !dbg !29
  %185 = add i32 %105, 13312, !dbg !29
  %186 = add i32 %106, 13312, !dbg !29
  %187 = add i32 %107, 13312, !dbg !29
  %188 = add i32 %108, 13312, !dbg !29
  %189 = add i32 %109, 13312, !dbg !29
  %190 = add i32 %110, 13312, !dbg !29
  %191 = add i32 %111, 13312, !dbg !29
  %192 = sext i32 %184 to i64, !dbg !30
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !30
  %194 = sext i32 %185 to i64, !dbg !30
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !30
  %196 = sext i32 %186 to i64, !dbg !30
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !30
  %198 = sext i32 %187 to i64, !dbg !30
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !30
  %200 = sext i32 %188 to i64, !dbg !30
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !30
  %202 = sext i32 %189 to i64, !dbg !30
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !30
  %204 = sext i32 %190 to i64, !dbg !30
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !30
  %206 = sext i32 %191 to i64, !dbg !30
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !30
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %16) #1, !dbg !31
  %209 = bitcast i32 %208 to float, !dbg !31
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %17) #1, !dbg !31
  %211 = bitcast i32 %210 to float, !dbg !31
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %18) #1, !dbg !31
  %213 = bitcast i32 %212 to float, !dbg !31
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %19) #1, !dbg !31
  %215 = bitcast i32 %214 to float, !dbg !31
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %20) #1, !dbg !31
  %217 = bitcast i32 %216 to float, !dbg !31
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %21) #1, !dbg !31
  %219 = bitcast i32 %218 to float, !dbg !31
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %22) #1, !dbg !31
  %221 = bitcast i32 %220 to float, !dbg !31
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %23) #1, !dbg !31
  %223 = bitcast i32 %222 to float, !dbg !31
  %224 = add i32 %104, 19968, !dbg !32
  %225 = add i32 %105, 19968, !dbg !32
  %226 = add i32 %106, 19968, !dbg !32
  %227 = add i32 %107, 19968, !dbg !32
  %228 = add i32 %108, 19968, !dbg !32
  %229 = add i32 %109, 19968, !dbg !32
  %230 = add i32 %110, 19968, !dbg !32
  %231 = add i32 %111, 19968, !dbg !32
  %232 = sext i32 %224 to i64, !dbg !33
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !33
  %234 = sext i32 %225 to i64, !dbg !33
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !33
  %236 = sext i32 %226 to i64, !dbg !33
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !33
  %238 = sext i32 %227 to i64, !dbg !33
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !33
  %240 = sext i32 %228 to i64, !dbg !33
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !33
  %242 = sext i32 %229 to i64, !dbg !33
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !33
  %244 = sext i32 %230 to i64, !dbg !33
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !33
  %246 = sext i32 %231 to i64, !dbg !33
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !33
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %16) #1, !dbg !34
  %249 = bitcast i32 %248 to float, !dbg !34
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %17) #1, !dbg !34
  %251 = bitcast i32 %250 to float, !dbg !34
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 %18) #1, !dbg !34
  %253 = bitcast i32 %252 to float, !dbg !34
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %19) #1, !dbg !34
  %255 = bitcast i32 %254 to float, !dbg !34
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %20) #1, !dbg !34
  %257 = bitcast i32 %256 to float, !dbg !34
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %21) #1, !dbg !34
  %259 = bitcast i32 %258 to float, !dbg !34
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %22) #1, !dbg !34
  %261 = bitcast i32 %260 to float, !dbg !34
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %23) #1, !dbg !34
  %263 = bitcast i32 %262 to float, !dbg !34
  %264 = fcmp ogt float %129, %169, !dbg !35
  %265 = fcmp ogt float %131, %171, !dbg !35
  %266 = fcmp ogt float %133, %173, !dbg !35
  %267 = fcmp ogt float %135, %175, !dbg !35
  %268 = fcmp ogt float %137, %177, !dbg !35
  %269 = fcmp ogt float %139, %179, !dbg !35
  %270 = fcmp ogt float %141, %181, !dbg !35
  %271 = fcmp ogt float %143, %183, !dbg !35
  %272 = fcmp uno float %129, 0.000000e+00, !dbg !39
  %273 = fcmp uno float %131, 0.000000e+00, !dbg !39
  %274 = fcmp uno float %133, 0.000000e+00, !dbg !39
  %275 = fcmp uno float %135, 0.000000e+00, !dbg !39
  %276 = fcmp uno float %137, 0.000000e+00, !dbg !39
  %277 = fcmp uno float %139, 0.000000e+00, !dbg !39
  %278 = fcmp uno float %141, 0.000000e+00, !dbg !39
  %279 = fcmp uno float %143, 0.000000e+00, !dbg !39
  %280 = or i1 %272, %264, !dbg !40
  %281 = or i1 %273, %265, !dbg !40
  %282 = or i1 %274, %266, !dbg !40
  %283 = or i1 %275, %267, !dbg !40
  %284 = or i1 %276, %268, !dbg !40
  %285 = or i1 %277, %269, !dbg !40
  %286 = or i1 %278, %270, !dbg !40
  %287 = or i1 %279, %271, !dbg !40
  %288 = select i1 %280, float %129, float %169, !dbg !41
  %289 = select i1 %281, float %131, float %171, !dbg !41
  %290 = select i1 %282, float %133, float %173, !dbg !41
  %291 = select i1 %283, float %135, float %175, !dbg !41
  %292 = select i1 %284, float %137, float %177, !dbg !41
  %293 = select i1 %285, float %139, float %179, !dbg !41
  %294 = select i1 %286, float %141, float %181, !dbg !41
  %295 = select i1 %287, float %143, float %183, !dbg !41
  %296 = fcmp ogt float %288, %209, !dbg !42
  %297 = fcmp ogt float %289, %211, !dbg !42
  %298 = fcmp ogt float %290, %213, !dbg !42
  %299 = fcmp ogt float %291, %215, !dbg !42
  %300 = fcmp ogt float %292, %217, !dbg !42
  %301 = fcmp ogt float %293, %219, !dbg !42
  %302 = fcmp ogt float %294, %221, !dbg !42
  %303 = fcmp ogt float %295, %223, !dbg !42
  %304 = fcmp uno float %288, 0.000000e+00, !dbg !44
  %305 = fcmp uno float %289, 0.000000e+00, !dbg !44
  %306 = fcmp uno float %290, 0.000000e+00, !dbg !44
  %307 = fcmp uno float %291, 0.000000e+00, !dbg !44
  %308 = fcmp uno float %292, 0.000000e+00, !dbg !44
  %309 = fcmp uno float %293, 0.000000e+00, !dbg !44
  %310 = fcmp uno float %294, 0.000000e+00, !dbg !44
  %311 = fcmp uno float %295, 0.000000e+00, !dbg !44
  %312 = or i1 %304, %296, !dbg !45
  %313 = or i1 %305, %297, !dbg !45
  %314 = or i1 %306, %298, !dbg !45
  %315 = or i1 %307, %299, !dbg !45
  %316 = or i1 %308, %300, !dbg !45
  %317 = or i1 %309, %301, !dbg !45
  %318 = or i1 %310, %302, !dbg !45
  %319 = or i1 %311, %303, !dbg !45
  %320 = select i1 %312, float %288, float %209, !dbg !46
  %321 = select i1 %313, float %289, float %211, !dbg !46
  %322 = select i1 %314, float %290, float %213, !dbg !46
  %323 = select i1 %315, float %291, float %215, !dbg !46
  %324 = select i1 %316, float %292, float %217, !dbg !46
  %325 = select i1 %317, float %293, float %219, !dbg !46
  %326 = select i1 %318, float %294, float %221, !dbg !46
  %327 = select i1 %319, float %295, float %223, !dbg !46
  %328 = fcmp ogt float %320, %249, !dbg !47
  %329 = fcmp ogt float %321, %251, !dbg !47
  %330 = fcmp ogt float %322, %253, !dbg !47
  %331 = fcmp ogt float %323, %255, !dbg !47
  %332 = fcmp ogt float %324, %257, !dbg !47
  %333 = fcmp ogt float %325, %259, !dbg !47
  %334 = fcmp ogt float %326, %261, !dbg !47
  %335 = fcmp ogt float %327, %263, !dbg !47
  %336 = fcmp uno float %320, 0.000000e+00, !dbg !49
  %337 = fcmp uno float %321, 0.000000e+00, !dbg !49
  %338 = fcmp uno float %322, 0.000000e+00, !dbg !49
  %339 = fcmp uno float %323, 0.000000e+00, !dbg !49
  %340 = fcmp uno float %324, 0.000000e+00, !dbg !49
  %341 = fcmp uno float %325, 0.000000e+00, !dbg !49
  %342 = fcmp uno float %326, 0.000000e+00, !dbg !49
  %343 = fcmp uno float %327, 0.000000e+00, !dbg !49
  %344 = or i1 %336, %328, !dbg !50
  %345 = or i1 %337, %329, !dbg !50
  %346 = or i1 %338, %330, !dbg !50
  %347 = or i1 %339, %331, !dbg !50
  %348 = or i1 %340, %332, !dbg !50
  %349 = or i1 %341, %333, !dbg !50
  %350 = or i1 %342, %334, !dbg !50
  %351 = or i1 %343, %335, !dbg !50
  %352 = select i1 %344, float %320, float %249, !dbg !51
  %353 = select i1 %345, float %321, float %251, !dbg !51
  %354 = select i1 %346, float %322, float %253, !dbg !51
  %355 = select i1 %347, float %323, float %255, !dbg !51
  %356 = select i1 %348, float %324, float %257, !dbg !51
  %357 = select i1 %349, float %325, float %259, !dbg !51
  %358 = select i1 %350, float %326, float %261, !dbg !51
  %359 = select i1 %351, float %327, float %263, !dbg !51
  %360 = fsub float %81, %352, !dbg !52
  %361 = fsub float %83, %353, !dbg !52
  %362 = fsub float %85, %354, !dbg !52
  %363 = fsub float %87, %355, !dbg !52
  %364 = fsub float %89, %356, !dbg !52
  %365 = fsub float %91, %357, !dbg !52
  %366 = fsub float %93, %358, !dbg !52
  %367 = fsub float %95, %359, !dbg !52
  %368 = fmul float %360, 0x3FF7154760000000, !dbg !53
  %369 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %368) #1, !dbg !53
  %370 = fmul float %361, 0x3FF7154760000000, !dbg !53
  %371 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %370) #1, !dbg !53
  %372 = fmul float %362, 0x3FF7154760000000, !dbg !53
  %373 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %372) #1, !dbg !53
  %374 = fmul float %363, 0x3FF7154760000000, !dbg !53
  %375 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %374) #1, !dbg !53
  %376 = fmul float %364, 0x3FF7154760000000, !dbg !53
  %377 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %376) #1, !dbg !53
  %378 = fmul float %365, 0x3FF7154760000000, !dbg !53
  %379 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %378) #1, !dbg !53
  %380 = fmul float %366, 0x3FF7154760000000, !dbg !53
  %381 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %380) #1, !dbg !53
  %382 = fmul float %367, 0x3FF7154760000000, !dbg !53
  %383 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %382) #1, !dbg !53
  %384 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !54
  %385 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !54
  %386 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !54
  %387 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !54
  %388 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !54
  %389 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !54
  %390 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !54
  %391 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !54
  %392 = bitcast float %369 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %384, i1 %16) #1, !dbg !55
  %393 = bitcast float %371 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %393, ptr addrspace(1) %385, i1 %17) #1, !dbg !55
  %394 = bitcast float %373 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %386, i1 %18) #1, !dbg !55
  %395 = bitcast float %375 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %395, ptr addrspace(1) %387, i1 %19) #1, !dbg !55
  %396 = bitcast float %377 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %396, ptr addrspace(1) %388, i1 %20) #1, !dbg !55
  %397 = bitcast float %379 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %397, ptr addrspace(1) %389, i1 %21) #1, !dbg !55
  %398 = bitcast float %381 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %398, ptr addrspace(1) %390, i1 %22) #1, !dbg !55
  %399 = bitcast float %383 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %399, ptr addrspace(1) %391, i1 %23) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp6dczcsxrxvptoxdgvnf7rqyqliognqh62hjjao632ot6npu6ic.py", directory: "inductor_cache/p6")
!4 = !{ptr @triton_poi_fused__softmax_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_0", linkageName: "triton_poi_fused__softmax_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 40, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 35, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 46, scope: !7)
!26 = !DILocation(line: 29, column: 42, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 53, scope: !7)
!29 = !DILocation(line: 30, column: 43, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 54, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 30, scope: !7)
!34 = !DILocation(line: 31, column: 54, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 32, column: 40, scope: !7)
!39 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !43)
!43 = !DILocation(line: 33, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !43)
!47 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !48)
!48 = !DILocation(line: 34, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !48)
!52 = !DILocation(line: 35, column: 18, scope: !7)
!53 = !DILocation(line: 36, column: 23, scope: !7)
!54 = !DILocation(line: 37, column: 25, scope: !7)
!55 = !DILocation(line: 37, column: 46, scope: !7)
!56 = !DILocation(line: 37, column: 4, scope: !7)
