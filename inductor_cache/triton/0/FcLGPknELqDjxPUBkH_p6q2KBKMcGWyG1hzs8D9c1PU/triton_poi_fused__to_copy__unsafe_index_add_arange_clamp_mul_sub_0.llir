; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = or disjoint i32 %9, 128, !dbg !13
  %11 = or disjoint i32 %9, 256, !dbg !13
  %12 = or disjoint i32 %9, 384, !dbg !13
  %13 = insertelement <4 x i32> poison, i32 %9, i64 0, !dbg !13
  %14 = shufflevector <4 x i32> %13, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %15 = or disjoint <4 x i32> %14, <i32 896, i32 768, i32 640, i32 512>, !dbg !13
  %16 = icmp slt i32 %9, 1072812, !dbg !14
  %17 = icmp slt i32 %10, 1072812, !dbg !14
  %18 = icmp slt i32 %11, 1072812, !dbg !14
  %19 = icmp slt i32 %12, 1072812, !dbg !14
  %20 = extractelement <4 x i32> %15, i64 3, !dbg !14
  %21 = icmp slt i32 %20, 1072812, !dbg !14
  %22 = extractelement <4 x i32> %15, i64 2, !dbg !14
  %23 = icmp slt i32 %22, 1072812, !dbg !14
  %24 = extractelement <4 x i32> %15, i64 1, !dbg !14
  %25 = icmp slt i32 %24, 1072812, !dbg !14
  %26 = extractelement <4 x i32> %15, i64 0, !dbg !14
  %27 = icmp slt i32 %26, 1072812, !dbg !14
  %28 = shufflevector <4 x i32> %15, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !15
  %29 = insertelement <8 x i32> %28, i32 %12, i64 4, !dbg !15
  %30 = insertelement <8 x i32> %29, i32 %11, i64 5, !dbg !15
  %31 = insertelement <8 x i32> %30, i32 %10, i64 6, !dbg !15
  %32 = insertelement <8 x i32> %31, i32 %9, i64 7, !dbg !15
  %33 = sdiv <8 x i32> %32, splat (i32 299), !dbg !15
  %34 = shufflevector <8 x i32> %32, <8 x i32> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 4, i32 5, i32 6, i32 7>, !dbg !16
  %35 = shufflevector <8 x i32> %33, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !16
  %36 = shufflevector <16 x i32> %35, <16 x i32> %34, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 28, i32 29, i32 30, i32 31>, !dbg !16
  %37 = shufflevector <4 x i32> %15, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !16
  %38 = shufflevector <16 x i32> %36, <16 x i32> %37, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 12, i32 13, i32 14, i32 15>, !dbg !16
  %39 = srem <16 x i32> %38, splat (i32 299), !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %40 = sdiv i32 %.frozen, 89401, !dbg !17
  %.frozen8 = freeze i32 %10, !dbg !17
  %41 = sdiv i32 %.frozen8, 89401, !dbg !17
  %.frozen10 = freeze i32 %11, !dbg !17
  %42 = sdiv i32 %.frozen10, 89401, !dbg !17
  %.frozen12 = freeze i32 %12, !dbg !17
  %43 = sdiv i32 %.frozen12, 89401, !dbg !17
  %.frozen14 = freeze i32 %20, !dbg !17
  %44 = sdiv i32 %.frozen14, 89401, !dbg !17
  %.frozen16 = freeze i32 %22, !dbg !17
  %45 = sdiv i32 %.frozen16, 89401, !dbg !17
  %.frozen18 = freeze i32 %24, !dbg !17
  %46 = sdiv i32 %.frozen18, 89401, !dbg !17
  %.frozen20 = freeze i32 %26, !dbg !17
  %47 = sdiv i32 %.frozen20, 89401, !dbg !17
  %48 = mul i32 %40, 89401, !dbg !18
  %.decomposed = sub i32 %.frozen, %48, !dbg !18
  %49 = mul i32 %41, 89401, !dbg !18
  %.decomposed9 = sub i32 %.frozen8, %49, !dbg !18
  %50 = mul i32 %42, 89401, !dbg !18
  %.decomposed11 = sub i32 %.frozen10, %50, !dbg !18
  %51 = mul i32 %43, 89401, !dbg !18
  %.decomposed13 = sub i32 %.frozen12, %51, !dbg !18
  %52 = mul i32 %44, 89401, !dbg !18
  %.decomposed15 = sub i32 %.frozen14, %52, !dbg !18
  %53 = mul i32 %45, 89401, !dbg !18
  %.decomposed17 = sub i32 %.frozen16, %53, !dbg !18
  %54 = mul i32 %46, 89401, !dbg !18
  %.decomposed19 = sub i32 %.frozen18, %54, !dbg !18
  %55 = mul i32 %47, 89401, !dbg !18
  %.decomposed21 = sub i32 %.frozen20, %55, !dbg !18
  %56 = sitofp <16 x i32> %39 to <16 x float>, !dbg !19
  %57 = fadd <16 x float> %56, splat (float 5.000000e-01), !dbg !20
  %58 = fmul <16 x float> %57, splat (float 0x3F8B65E2E0000000), !dbg !21
  %59 = fadd <16 x float> %58, splat (float -5.000000e-01), !dbg !22
  %60 = fcmp ogt <16 x float> %59, zeroinitializer, !dbg !23
  %61 = select <16 x i1> %60, <16 x float> %59, <16 x float> zeroinitializer, !dbg !27
  %62 = fptosi <16 x float> %61 to <16 x i32>, !dbg !28
  %63 = extractelement <16 x i32> %62, i64 7, !dbg !29
  %64 = tail call i32 @llvm.smin.i32(i32 %63, i32 2), !dbg !30
  %narrow = add nsw i32 %64, 1, !dbg !30
  %65 = sext i32 %narrow to i64, !dbg !30
  %66 = extractelement <16 x i32> %62, i64 6, !dbg !29
  %67 = tail call i32 @llvm.smin.i32(i32 %66, i32 2), !dbg !30
  %narrow1 = add nsw i32 %67, 1, !dbg !30
  %68 = sext i32 %narrow1 to i64, !dbg !30
  %69 = extractelement <16 x i32> %62, i64 5, !dbg !29
  %70 = tail call i32 @llvm.smin.i32(i32 %69, i32 2), !dbg !30
  %narrow2 = add nsw i32 %70, 1, !dbg !30
  %71 = sext i32 %narrow2 to i64, !dbg !30
  %72 = extractelement <16 x i32> %62, i64 4, !dbg !29
  %73 = tail call i32 @llvm.smin.i32(i32 %72, i32 2), !dbg !30
  %narrow3 = add nsw i32 %73, 1, !dbg !30
  %74 = sext i32 %narrow3 to i64, !dbg !30
  %75 = extractelement <16 x i32> %62, i64 3, !dbg !29
  %76 = tail call i32 @llvm.smin.i32(i32 %75, i32 2), !dbg !30
  %narrow4 = add nsw i32 %76, 1, !dbg !30
  %77 = sext i32 %narrow4 to i64, !dbg !30
  %78 = extractelement <16 x i32> %62, i64 2, !dbg !29
  %79 = tail call i32 @llvm.smin.i32(i32 %78, i32 2), !dbg !30
  %narrow5 = add nsw i32 %79, 1, !dbg !30
  %80 = sext i32 %narrow5 to i64, !dbg !30
  %81 = extractelement <16 x i32> %62, i64 1, !dbg !29
  %82 = tail call i32 @llvm.smin.i32(i32 %81, i32 2), !dbg !30
  %narrow6 = add nsw i32 %82, 1, !dbg !30
  %83 = sext i32 %narrow6 to i64, !dbg !30
  %84 = extractelement <16 x i32> %62, i64 0, !dbg !29
  %85 = tail call i32 @llvm.smin.i32(i32 %84, i32 2), !dbg !30
  %narrow7 = add nsw i32 %85, 1, !dbg !30
  %86 = sext i32 %narrow7 to i64, !dbg !30
  %87 = extractelement <16 x i32> %62, i64 15, !dbg !32
  %88 = sext i32 %87 to i64, !dbg !33
  %89 = extractelement <16 x i32> %62, i64 14, !dbg !32
  %90 = sext i32 %89 to i64, !dbg !33
  %91 = extractelement <16 x i32> %62, i64 13, !dbg !32
  %92 = sext i32 %91 to i64, !dbg !33
  %93 = extractelement <16 x i32> %62, i64 12, !dbg !32
  %94 = sext i32 %93 to i64, !dbg !33
  %95 = extractelement <16 x i32> %62, i64 11, !dbg !32
  %96 = sext i32 %95 to i64, !dbg !33
  %97 = extractelement <16 x i32> %62, i64 10, !dbg !32
  %98 = sext i32 %97 to i64, !dbg !33
  %99 = extractelement <16 x i32> %62, i64 9, !dbg !32
  %100 = sext i32 %99 to i64, !dbg !33
  %101 = extractelement <16 x i32> %62, i64 8, !dbg !32
  %102 = sext i32 %101 to i64, !dbg !33
  %103 = tail call i64 @llvm.smin.i64(i64 %88, i64 2), !dbg !34
  %104 = tail call i64 @llvm.smin.i64(i64 %90, i64 2), !dbg !34
  %105 = tail call i64 @llvm.smin.i64(i64 %92, i64 2), !dbg !34
  %106 = tail call i64 @llvm.smin.i64(i64 %94, i64 2), !dbg !34
  %107 = tail call i64 @llvm.smin.i64(i64 %96, i64 2), !dbg !34
  %108 = tail call i64 @llvm.smin.i64(i64 %98, i64 2), !dbg !34
  %109 = tail call i64 @llvm.smin.i64(i64 %100, i64 2), !dbg !34
  %110 = tail call i64 @llvm.smin.i64(i64 %102, i64 2), !dbg !34
  %111 = shl nsw i64 %65, 2, !dbg !36
  %112 = shl nsw i64 %68, 2, !dbg !36
  %113 = shl nsw i64 %71, 2, !dbg !36
  %114 = shl nsw i64 %74, 2, !dbg !36
  %115 = shl nsw i64 %77, 2, !dbg !36
  %116 = shl nsw i64 %80, 2, !dbg !36
  %117 = shl nsw i64 %83, 2, !dbg !36
  %118 = shl nsw i64 %86, 2, !dbg !36
  %119 = shl nsw i32 %40, 4, !dbg !37
  %120 = shl nsw i32 %41, 4, !dbg !37
  %121 = shl nsw i32 %42, 4, !dbg !37
  %122 = shl nsw i32 %43, 4, !dbg !37
  %123 = shl nsw i32 %44, 4, !dbg !37
  %124 = shl nsw i32 %45, 4, !dbg !37
  %125 = shl nsw i32 %46, 4, !dbg !37
  %126 = shl nsw i32 %47, 4, !dbg !37
  %127 = sext i32 %119 to i64, !dbg !38
  %128 = sext i32 %120 to i64, !dbg !38
  %129 = sext i32 %121 to i64, !dbg !38
  %130 = sext i32 %122 to i64, !dbg !38
  %131 = sext i32 %123 to i64, !dbg !38
  %132 = sext i32 %124 to i64, !dbg !38
  %133 = sext i32 %125 to i64, !dbg !38
  %134 = sext i32 %126 to i64, !dbg !38
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !39
  %136 = getelementptr i8, ptr addrspace(1) %135, i64 4, !dbg !39
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %111, !dbg !39
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %127, !dbg !39
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !39
  %140 = getelementptr i8, ptr addrspace(1) %139, i64 4, !dbg !39
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %112, !dbg !39
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %128, !dbg !39
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !39
  %144 = getelementptr i8, ptr addrspace(1) %143, i64 4, !dbg !39
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %113, !dbg !39
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %129, !dbg !39
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !39
  %148 = getelementptr i8, ptr addrspace(1) %147, i64 4, !dbg !39
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %114, !dbg !39
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %130, !dbg !39
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !39
  %152 = getelementptr i8, ptr addrspace(1) %151, i64 4, !dbg !39
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %115, !dbg !39
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %131, !dbg !39
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !39
  %156 = getelementptr i8, ptr addrspace(1) %155, i64 4, !dbg !39
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %116, !dbg !39
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %132, !dbg !39
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !39
  %160 = getelementptr i8, ptr addrspace(1) %159, i64 4, !dbg !39
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %117, !dbg !39
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %133, !dbg !39
  %163 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !39
  %164 = getelementptr i8, ptr addrspace(1) %163, i64 4, !dbg !39
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %118, !dbg !39
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %134, !dbg !39
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %16) #2, !dbg !40
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %17) #2, !dbg !40
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %18) #2, !dbg !40
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %19) #2, !dbg !40
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %21) #2, !dbg !40
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %23) #2, !dbg !40
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %25) #2, !dbg !40
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %27) #2, !dbg !40
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %88, !dbg !41
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %127, !dbg !41
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !41
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %90, !dbg !41
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %128, !dbg !41
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !41
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %92, !dbg !41
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %129, !dbg !41
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !41
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %94, !dbg !41
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %130, !dbg !41
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !41
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %96, !dbg !41
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %131, !dbg !41
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !41
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %98, !dbg !41
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %132, !dbg !41
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !41
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %100, !dbg !41
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %133, !dbg !41
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !41
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %102, !dbg !41
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %134, !dbg !41
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %16) #2, !dbg !42
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %17) #2, !dbg !42
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %18) #2, !dbg !42
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %19) #2, !dbg !42
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %21) #2, !dbg !42
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %23) #2, !dbg !42
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %25) #2, !dbg !42
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %27) #2, !dbg !42
  %207 = sitofp <16 x i32> %62 to <16 x float>, !dbg !43
  %208 = fsub <16 x float> %61, %207, !dbg !44
  %209 = fcmp ogt <16 x float> %208, zeroinitializer, !dbg !45
  %210 = select <16 x i1> %209, <16 x float> %208, <16 x float> zeroinitializer, !dbg !47
  %211 = fcmp olt <16 x float> %210, splat (float 1.000000e+00), !dbg !48
  %212 = extractelement <16 x i1> %211, i64 15, !dbg !50
  %213 = extractelement <16 x float> %210, i64 15, !dbg !50
  %214 = select i1 %212, float %213, float 1.000000e+00, !dbg !50
  %215 = extractelement <16 x i1> %211, i64 14, !dbg !50
  %216 = extractelement <16 x float> %210, i64 14, !dbg !50
  %217 = select i1 %215, float %216, float 1.000000e+00, !dbg !50
  %218 = extractelement <16 x i1> %211, i64 13, !dbg !50
  %219 = extractelement <16 x float> %210, i64 13, !dbg !50
  %220 = select i1 %218, float %219, float 1.000000e+00, !dbg !50
  %221 = extractelement <16 x i1> %211, i64 12, !dbg !50
  %222 = extractelement <16 x float> %210, i64 12, !dbg !50
  %223 = select i1 %221, float %222, float 1.000000e+00, !dbg !50
  %224 = extractelement <16 x i1> %211, i64 11, !dbg !50
  %225 = extractelement <16 x float> %210, i64 11, !dbg !50
  %226 = select i1 %224, float %225, float 1.000000e+00, !dbg !50
  %227 = extractelement <16 x i1> %211, i64 10, !dbg !50
  %228 = extractelement <16 x float> %210, i64 10, !dbg !50
  %229 = select i1 %227, float %228, float 1.000000e+00, !dbg !50
  %230 = extractelement <16 x i1> %211, i64 9, !dbg !50
  %231 = extractelement <16 x float> %210, i64 9, !dbg !50
  %232 = select i1 %230, float %231, float 1.000000e+00, !dbg !50
  %233 = extractelement <16 x i1> %211, i64 8, !dbg !50
  %234 = extractelement <16 x float> %210, i64 8, !dbg !50
  %235 = select i1 %233, float %234, float 1.000000e+00, !dbg !50
  %236 = shl i32 %63, 2, !dbg !29
  %237 = shl i32 %66, 2, !dbg !29
  %238 = shl i32 %69, 2, !dbg !29
  %239 = shl i32 %72, 2, !dbg !29
  %240 = shl i32 %75, 2, !dbg !29
  %241 = shl i32 %78, 2, !dbg !29
  %242 = shl i32 %81, 2, !dbg !29
  %243 = shl i32 %84, 2, !dbg !29
  %244 = add i32 %119, %87, !dbg !32
  %245 = add i32 %244, %236, !dbg !52
  %246 = add i32 %120, %89, !dbg !32
  %247 = add i32 %246, %237, !dbg !52
  %248 = add i32 %121, %91, !dbg !32
  %249 = add i32 %248, %238, !dbg !52
  %250 = add i32 %122, %93, !dbg !32
  %251 = add i32 %250, %239, !dbg !52
  %252 = add i32 %123, %95, !dbg !32
  %253 = add i32 %252, %240, !dbg !52
  %254 = add i32 %124, %97, !dbg !32
  %255 = add i32 %254, %241, !dbg !52
  %256 = add i32 %125, %99, !dbg !32
  %257 = add i32 %256, %242, !dbg !52
  %258 = add i32 %126, %101, !dbg !32
  %259 = add i32 %258, %243, !dbg !52
  %260 = sext i32 %245 to i64, !dbg !53
  %261 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !53
  %262 = sext i32 %247 to i64, !dbg !53
  %263 = getelementptr float, ptr addrspace(1) %1, i64 %262, !dbg !53
  %264 = sext i32 %249 to i64, !dbg !53
  %265 = getelementptr float, ptr addrspace(1) %1, i64 %264, !dbg !53
  %266 = sext i32 %251 to i64, !dbg !53
  %267 = getelementptr float, ptr addrspace(1) %1, i64 %266, !dbg !53
  %268 = sext i32 %253 to i64, !dbg !53
  %269 = getelementptr float, ptr addrspace(1) %1, i64 %268, !dbg !53
  %270 = sext i32 %255 to i64, !dbg !53
  %271 = getelementptr float, ptr addrspace(1) %1, i64 %270, !dbg !53
  %272 = sext i32 %257 to i64, !dbg !53
  %273 = getelementptr float, ptr addrspace(1) %1, i64 %272, !dbg !53
  %274 = sext i32 %259 to i64, !dbg !53
  %275 = getelementptr float, ptr addrspace(1) %1, i64 %274, !dbg !53
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 %16) #2, !dbg !54
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %17) #2, !dbg !54
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %18) #2, !dbg !54
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %19) #2, !dbg !54
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %21) #2, !dbg !54
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %23) #2, !dbg !54
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %25) #2, !dbg !54
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %27) #2, !dbg !54
  %284 = sext i32 %236 to i64, !dbg !55
  %285 = sext i32 %237 to i64, !dbg !55
  %286 = sext i32 %238 to i64, !dbg !55
  %287 = sext i32 %239 to i64, !dbg !55
  %288 = sext i32 %240 to i64, !dbg !55
  %289 = sext i32 %241 to i64, !dbg !55
  %290 = sext i32 %242 to i64, !dbg !55
  %291 = sext i32 %243 to i64, !dbg !55
  %292 = getelementptr float, ptr addrspace(1) %136, i64 %284, !dbg !56
  %293 = getelementptr float, ptr addrspace(1) %292, i64 %127, !dbg !56
  %294 = getelementptr float, ptr addrspace(1) %140, i64 %285, !dbg !56
  %295 = getelementptr float, ptr addrspace(1) %294, i64 %128, !dbg !56
  %296 = getelementptr float, ptr addrspace(1) %144, i64 %286, !dbg !56
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %129, !dbg !56
  %298 = getelementptr float, ptr addrspace(1) %148, i64 %287, !dbg !56
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %130, !dbg !56
  %300 = getelementptr float, ptr addrspace(1) %152, i64 %288, !dbg !56
  %301 = getelementptr float, ptr addrspace(1) %300, i64 %131, !dbg !56
  %302 = getelementptr float, ptr addrspace(1) %156, i64 %289, !dbg !56
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %132, !dbg !56
  %304 = getelementptr float, ptr addrspace(1) %160, i64 %290, !dbg !56
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %133, !dbg !56
  %306 = getelementptr float, ptr addrspace(1) %164, i64 %291, !dbg !56
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %134, !dbg !56
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %16) #2, !dbg !57
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %17) #2, !dbg !57
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %18) #2, !dbg !57
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 %19) #2, !dbg !57
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 %21) #2, !dbg !57
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 %23) #2, !dbg !57
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 %25) #2, !dbg !57
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 %27) #2, !dbg !57
  %316 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !42
  %317 = insertelement <2 x i32> %316, i32 %276, i64 1, !dbg !42
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !42
  %319 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !40
  %320 = insertelement <2 x i32> %319, i32 %308, i64 1, !dbg !40
  %321 = bitcast <2 x i32> %320 to <2 x float>, !dbg !40
  %322 = fsub <2 x float> %321, %318, !dbg !58
  %323 = insertelement <2 x float> poison, float %214, i64 0, !dbg !59
  %324 = shufflevector <2 x float> %323, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %325 = fmul <2 x float> %322, %324, !dbg !59
  %326 = fadd <2 x float> %325, %318, !dbg !60
  %327 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !42
  %328 = insertelement <2 x i32> %327, i32 %277, i64 1, !dbg !42
  %329 = bitcast <2 x i32> %328 to <2 x float>, !dbg !42
  %330 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !40
  %331 = insertelement <2 x i32> %330, i32 %309, i64 1, !dbg !40
  %332 = bitcast <2 x i32> %331 to <2 x float>, !dbg !40
  %333 = fsub <2 x float> %332, %329, !dbg !58
  %334 = insertelement <2 x float> poison, float %217, i64 0, !dbg !59
  %335 = shufflevector <2 x float> %334, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %336 = fmul <2 x float> %335, %333, !dbg !59
  %337 = fadd <2 x float> %336, %329, !dbg !60
  %338 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !42
  %339 = insertelement <2 x i32> %338, i32 %278, i64 1, !dbg !42
  %340 = bitcast <2 x i32> %339 to <2 x float>, !dbg !42
  %341 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !40
  %342 = insertelement <2 x i32> %341, i32 %310, i64 1, !dbg !40
  %343 = bitcast <2 x i32> %342 to <2 x float>, !dbg !40
  %344 = fsub <2 x float> %343, %340, !dbg !58
  %345 = insertelement <2 x float> poison, float %220, i64 0, !dbg !59
  %346 = shufflevector <2 x float> %345, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %347 = fmul <2 x float> %346, %344, !dbg !59
  %348 = fadd <2 x float> %347, %340, !dbg !60
  %349 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !42
  %350 = insertelement <2 x i32> %349, i32 %279, i64 1, !dbg !42
  %351 = bitcast <2 x i32> %350 to <2 x float>, !dbg !42
  %352 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !40
  %353 = insertelement <2 x i32> %352, i32 %311, i64 1, !dbg !40
  %354 = bitcast <2 x i32> %353 to <2 x float>, !dbg !40
  %355 = fsub <2 x float> %354, %351, !dbg !58
  %356 = insertelement <2 x float> poison, float %223, i64 0, !dbg !59
  %357 = shufflevector <2 x float> %356, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %358 = fmul <2 x float> %357, %355, !dbg !59
  %359 = fadd <2 x float> %358, %351, !dbg !60
  %360 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !42
  %361 = insertelement <2 x i32> %360, i32 %280, i64 1, !dbg !42
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !42
  %363 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !40
  %364 = insertelement <2 x i32> %363, i32 %312, i64 1, !dbg !40
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !40
  %366 = fsub <2 x float> %365, %362, !dbg !58
  %367 = insertelement <2 x float> poison, float %226, i64 0, !dbg !59
  %368 = shufflevector <2 x float> %367, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %369 = fmul <2 x float> %368, %366, !dbg !59
  %370 = fadd <2 x float> %369, %362, !dbg !60
  %371 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !42
  %372 = insertelement <2 x i32> %371, i32 %281, i64 1, !dbg !42
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !42
  %374 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !40
  %375 = insertelement <2 x i32> %374, i32 %313, i64 1, !dbg !40
  %376 = bitcast <2 x i32> %375 to <2 x float>, !dbg !40
  %377 = fsub <2 x float> %376, %373, !dbg !58
  %378 = insertelement <2 x float> poison, float %229, i64 0, !dbg !59
  %379 = shufflevector <2 x float> %378, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %380 = fmul <2 x float> %379, %377, !dbg !59
  %381 = fadd <2 x float> %380, %373, !dbg !60
  %382 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !42
  %383 = insertelement <2 x i32> %382, i32 %282, i64 1, !dbg !42
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !42
  %385 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !40
  %386 = insertelement <2 x i32> %385, i32 %314, i64 1, !dbg !40
  %387 = bitcast <2 x i32> %386 to <2 x float>, !dbg !40
  %388 = fsub <2 x float> %387, %384, !dbg !58
  %389 = insertelement <2 x float> poison, float %232, i64 0, !dbg !59
  %390 = shufflevector <2 x float> %389, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %391 = fmul <2 x float> %390, %388, !dbg !59
  %392 = fadd <2 x float> %391, %384, !dbg !60
  %393 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !42
  %394 = insertelement <2 x i32> %393, i32 %283, i64 1, !dbg !42
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !42
  %396 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !40
  %397 = insertelement <2 x i32> %396, i32 %315, i64 1, !dbg !40
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !40
  %399 = fsub <2 x float> %398, %395, !dbg !58
  %400 = insertelement <2 x float> poison, float %235, i64 0, !dbg !59
  %401 = shufflevector <2 x float> %400, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %402 = fmul <2 x float> %401, %399, !dbg !59
  %403 = fadd <2 x float> %402, %395, !dbg !60
  %404 = extractelement <2 x float> %326, i64 0, !dbg !61
  %405 = extractelement <2 x float> %326, i64 1, !dbg !62
  %406 = fsub float %404, %405, !dbg !61
  %407 = extractelement <2 x float> %337, i64 0, !dbg !61
  %408 = extractelement <2 x float> %337, i64 1, !dbg !62
  %409 = fsub float %407, %408, !dbg !61
  %410 = extractelement <2 x float> %348, i64 0, !dbg !61
  %411 = extractelement <2 x float> %348, i64 1, !dbg !62
  %412 = fsub float %410, %411, !dbg !61
  %413 = extractelement <2 x float> %359, i64 0, !dbg !61
  %414 = extractelement <2 x float> %359, i64 1, !dbg !62
  %415 = fsub float %413, %414, !dbg !61
  %416 = extractelement <2 x float> %370, i64 0, !dbg !61
  %417 = extractelement <2 x float> %370, i64 1, !dbg !62
  %418 = fsub float %416, %417, !dbg !61
  %419 = extractelement <2 x float> %381, i64 0, !dbg !61
  %420 = extractelement <2 x float> %381, i64 1, !dbg !62
  %421 = fsub float %419, %420, !dbg !61
  %422 = extractelement <2 x float> %392, i64 0, !dbg !61
  %423 = extractelement <2 x float> %392, i64 1, !dbg !62
  %424 = fsub float %422, %423, !dbg !61
  %425 = extractelement <2 x float> %403, i64 0, !dbg !61
  %426 = extractelement <2 x float> %403, i64 1, !dbg !62
  %427 = fsub float %425, %426, !dbg !61
  %428 = extractelement <16 x i1> %211, i64 7, !dbg !63
  %429 = extractelement <16 x float> %210, i64 7, !dbg !63
  %430 = select i1 %428, float %429, float 1.000000e+00, !dbg !63
  %431 = extractelement <16 x i1> %211, i64 6, !dbg !63
  %432 = extractelement <16 x float> %210, i64 6, !dbg !63
  %433 = select i1 %431, float %432, float 1.000000e+00, !dbg !63
  %434 = extractelement <16 x i1> %211, i64 5, !dbg !63
  %435 = extractelement <16 x float> %210, i64 5, !dbg !63
  %436 = select i1 %434, float %435, float 1.000000e+00, !dbg !63
  %437 = extractelement <16 x i1> %211, i64 4, !dbg !63
  %438 = extractelement <16 x float> %210, i64 4, !dbg !63
  %439 = select i1 %437, float %438, float 1.000000e+00, !dbg !63
  %440 = extractelement <16 x i1> %211, i64 3, !dbg !63
  %441 = extractelement <16 x float> %210, i64 3, !dbg !63
  %442 = select i1 %440, float %441, float 1.000000e+00, !dbg !63
  %443 = extractelement <16 x i1> %211, i64 2, !dbg !63
  %444 = extractelement <16 x float> %210, i64 2, !dbg !63
  %445 = select i1 %443, float %444, float 1.000000e+00, !dbg !63
  %446 = extractelement <16 x i1> %211, i64 1, !dbg !63
  %447 = extractelement <16 x float> %210, i64 1, !dbg !63
  %448 = select i1 %446, float %447, float 1.000000e+00, !dbg !63
  %449 = extractelement <16 x i1> %211, i64 0, !dbg !63
  %450 = extractelement <16 x float> %210, i64 0, !dbg !63
  %451 = select i1 %449, float %450, float 1.000000e+00, !dbg !63
  %452 = fmul float %430, %406, !dbg !64
  %453 = fmul float %433, %409, !dbg !64
  %454 = fmul float %436, %412, !dbg !64
  %455 = fmul float %439, %415, !dbg !64
  %456 = fmul float %442, %418, !dbg !64
  %457 = fmul float %445, %421, !dbg !64
  %458 = fmul float %448, %424, !dbg !64
  %459 = fmul float %451, %427, !dbg !64
  %460 = mul i32 %40, 89408, !dbg !65
  %461 = mul i32 %41, 89408, !dbg !65
  %462 = mul i32 %42, 89408, !dbg !65
  %463 = mul i32 %43, 89408, !dbg !65
  %464 = mul i32 %44, 89408, !dbg !65
  %465 = mul i32 %45, 89408, !dbg !65
  %466 = mul i32 %46, 89408, !dbg !65
  %467 = mul i32 %47, 89408, !dbg !65
  %468 = add i32 %460, %.decomposed, !dbg !66
  %469 = add i32 %461, %.decomposed9, !dbg !66
  %470 = add i32 %462, %.decomposed11, !dbg !66
  %471 = add i32 %463, %.decomposed13, !dbg !66
  %472 = add i32 %464, %.decomposed15, !dbg !66
  %473 = add i32 %465, %.decomposed17, !dbg !66
  %474 = add i32 %466, %.decomposed19, !dbg !66
  %475 = add i32 %467, %.decomposed21, !dbg !66
  %476 = sext i32 %468 to i64, !dbg !67
  %477 = getelementptr float, ptr addrspace(1) %2, i64 %476, !dbg !67
  %478 = sext i32 %469 to i64, !dbg !67
  %479 = getelementptr float, ptr addrspace(1) %2, i64 %478, !dbg !67
  %480 = sext i32 %470 to i64, !dbg !67
  %481 = getelementptr float, ptr addrspace(1) %2, i64 %480, !dbg !67
  %482 = sext i32 %471 to i64, !dbg !67
  %483 = getelementptr float, ptr addrspace(1) %2, i64 %482, !dbg !67
  %484 = sext i32 %472 to i64, !dbg !67
  %485 = getelementptr float, ptr addrspace(1) %2, i64 %484, !dbg !67
  %486 = sext i32 %473 to i64, !dbg !67
  %487 = getelementptr float, ptr addrspace(1) %2, i64 %486, !dbg !67
  %488 = sext i32 %474 to i64, !dbg !67
  %489 = getelementptr float, ptr addrspace(1) %2, i64 %488, !dbg !67
  %490 = sext i32 %475 to i64, !dbg !67
  %491 = getelementptr float, ptr addrspace(1) %2, i64 %490, !dbg !67
  %492 = bitcast float %405 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %492, ptr addrspace(1) %477, i1 %16) #2, !dbg !62
  %493 = bitcast float %408 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %493, ptr addrspace(1) %479, i1 %17) #2, !dbg !62
  %494 = bitcast float %411 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %494, ptr addrspace(1) %481, i1 %18) #2, !dbg !62
  %495 = bitcast float %414 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %495, ptr addrspace(1) %483, i1 %19) #2, !dbg !62
  %496 = bitcast float %417 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %496, ptr addrspace(1) %485, i1 %21) #2, !dbg !62
  %497 = bitcast float %420 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %497, ptr addrspace(1) %487, i1 %23) #2, !dbg !62
  %498 = bitcast float %423 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %498, ptr addrspace(1) %489, i1 %25) #2, !dbg !62
  %499 = bitcast float %426 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %499, ptr addrspace(1) %491, i1 %27) #2, !dbg !62
  %500 = getelementptr float, ptr addrspace(1) %0, i64 %476, !dbg !68
  %501 = getelementptr float, ptr addrspace(1) %0, i64 %478, !dbg !68
  %502 = getelementptr float, ptr addrspace(1) %0, i64 %480, !dbg !68
  %503 = getelementptr float, ptr addrspace(1) %0, i64 %482, !dbg !68
  %504 = getelementptr float, ptr addrspace(1) %0, i64 %484, !dbg !68
  %505 = getelementptr float, ptr addrspace(1) %0, i64 %486, !dbg !68
  %506 = getelementptr float, ptr addrspace(1) %0, i64 %488, !dbg !68
  %507 = getelementptr float, ptr addrspace(1) %0, i64 %490, !dbg !68
  %508 = bitcast float %452 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %508, ptr addrspace(1) %500, i1 %16) #2, !dbg !69
  %509 = bitcast float %453 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %509, ptr addrspace(1) %501, i1 %17) #2, !dbg !69
  %510 = bitcast float %454 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %510, ptr addrspace(1) %502, i1 %18) #2, !dbg !69
  %511 = bitcast float %455 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %511, ptr addrspace(1) %503, i1 %19) #2, !dbg !69
  %512 = bitcast float %456 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %512, ptr addrspace(1) %504, i1 %21) #2, !dbg !69
  %513 = bitcast float %457 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %513, ptr addrspace(1) %505, i1 %23) #2, !dbg !69
  %514 = bitcast float %458 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %514, ptr addrspace(1) %506, i1 %25) #2, !dbg !69
  %515 = bitcast float %459 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %515, ptr addrspace(1) %507, i1 %27) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep7ej7hzso2tnojotha7k7ykoj4dawnil6tpgag46j2sycqq7j4.py", directory: "inductor_cache/ep")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 18, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 36, column: 40, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 37, column: 19, scope: !7)
!29 = !DILocation(line: 60, column: 41, scope: !7)
!30 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !31)
!31 = !DILocation(line: 41, column: 42, scope: !7)
!32 = !DILocation(line: 60, column: 39, scope: !7)
!33 = !DILocation(line: 49, column: 20, scope: !7)
!34 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !35)
!35 = !DILocation(line: 50, column: 42, scope: !7)
!36 = !DILocation(line: 51, column: 41, scope: !7)
!37 = !DILocation(line: 51, column: 52, scope: !7)
!38 = !DILocation(line: 51, column: 49, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 57, scope: !7)
!41 = !DILocation(line: 52, column: 31, scope: !7)
!42 = !DILocation(line: 52, column: 57, scope: !7)
!43 = !DILocation(line: 67, column: 20, scope: !7)
!44 = !DILocation(line: 68, column: 19, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !46)
!46 = !DILocation(line: 69, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !46)
!48 = !DILocation(line: 110, column: 15, scope: !24, inlinedAt: !49)
!49 = !DILocation(line: 70, column: 42, scope: !7)
!50 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !51)
!51 = !DILocation(line: 58, column: 42, scope: !7)
!52 = !DILocation(line: 60, column: 48, scope: !7)
!53 = !DILocation(line: 60, column: 31, scope: !7)
!54 = !DILocation(line: 60, column: 56, scope: !7)
!55 = !DILocation(line: 61, column: 39, scope: !7)
!56 = !DILocation(line: 61, column: 31, scope: !7)
!57 = !DILocation(line: 61, column: 56, scope: !7)
!58 = !DILocation(line: 53, column: 20, scope: !7)
!59 = !DILocation(line: 59, column: 20, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 20, scope: !7)
!62 = !DILocation(line: 72, column: 48, scope: !7)
!63 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !49)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 72, column: 36, scope: !7)
!66 = !DILocation(line: 72, column: 30, scope: !7)
!67 = !DILocation(line: 72, column: 25, scope: !7)
!68 = !DILocation(line: 73, column: 28, scope: !7)
!69 = !DILocation(line: 73, column: 51, scope: !7)
!70 = !DILocation(line: 73, column: 4, scope: !7)
