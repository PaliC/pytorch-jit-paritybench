; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mean_pow_sqrt_sub_29(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 16, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = lshr i32 %7, 5, !dbg !12
  %12 = and i32 %7, 63, !dbg !12
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = icmp slt i32 %13, 64, !dbg !14
  %15 = lshr i32 %7, 4, !dbg !15
  %16 = and i32 %15, 3, !dbg !15
  %17 = icmp ne i32 %16, 3, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %18 = sdiv i32 %.frozen, 16, !dbg !17
  %19 = mul i32 %18, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = shl nuw nsw i32 %16, 4, !dbg !19
  %21 = add nsw i32 %.decomposed, %20, !dbg !20
  %22 = mul i32 %18, 48, !dbg !21
  %23 = add i32 %21, %22, !dbg !22
  %24 = sext i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %26 = and i1 %17, %14, !dbg !24
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #5, !dbg !25
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !25
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !25
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !25
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !25
  %32 = bitcast i32 %28 to float, !dbg !25
  %33 = bitcast i32 %29 to float, !dbg !25
  %34 = bitcast i32 %30 to float, !dbg !25
  %35 = bitcast i32 %31 to float, !dbg !25
  %36 = select i1 %26, float %32, float 0.000000e+00, !dbg !26
  %37 = select i1 %26, float %33, float 0.000000e+00, !dbg !26
  %38 = select i1 %26, float %34, float 0.000000e+00, !dbg !26
  %39 = select i1 %26, float %35, float 0.000000e+00, !dbg !26
  %40 = bitcast float %36 to i32, !dbg !27
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 16, i32 31), !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = fadd float %36, %42, !dbg !31
  %44 = bitcast float %37 to i32, !dbg !27
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = fadd float %37, %46, !dbg !31
  %48 = bitcast float %38 to i32, !dbg !27
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 16, i32 31), !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = fadd float %38, %50, !dbg !31
  %52 = bitcast float %39 to i32, !dbg !27
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !27
  %54 = bitcast i32 %53 to float, !dbg !27
  %55 = fadd float %39, %54, !dbg !31
  %56 = icmp eq i32 %8, 0, !dbg !27
  %57 = and i32 %11, 1, !dbg !27
  %58 = shl nuw nsw i32 %10, 1, !dbg !27
  %59 = or disjoint i32 %58, %57, !dbg !27
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !27
  %61 = bitcast float %43 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 %56) #5, !dbg !27
  %62 = or disjoint i32 %58, 2, !dbg !27
  %63 = or disjoint i32 %62, %57, !dbg !27
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !27
  %65 = bitcast float %47 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 %56) #5, !dbg !27
  %66 = or disjoint i32 %58, 4, !dbg !27
  %67 = or disjoint i32 %66, %57, !dbg !27
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !27
  %69 = bitcast float %51 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 %56) #5, !dbg !27
  %70 = or disjoint i32 %58, 6, !dbg !27
  %71 = or disjoint i32 %70, %57, !dbg !27
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !27
  %73 = bitcast float %55 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 %56) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %74 = icmp slt i32 %7, 128, !dbg !27
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !27
  %76 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %74) #5, !dbg !27
  %77 = bitcast i32 %76 to float, !dbg !27
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = fadd float %77, %79, !dbg !31
  %81 = and i32 %7, 1, !dbg !27
  %82 = icmp eq i32 %81, 0, !dbg !27
  %83 = and i1 %74, %82, !dbg !27
  %84 = bitcast float %80 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %84, i1 %83) #5, !dbg !27
  %85 = getelementptr i8, ptr addrspace(3) %75, i32 256, !dbg !27
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %74) #5, !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = fadd float %87, %89, !dbg !31
  %91 = bitcast float %90 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %91, i1 %83) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !27
  %93 = load i32, ptr addrspace(3) %92, align 16, !dbg !27
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !27
  %95 = load i32, ptr addrspace(3) %94, align 8, !dbg !27
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !27
  %97 = load i32, ptr addrspace(3) %96, align 16, !dbg !27
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !27
  %99 = load i32, ptr addrspace(3) %98, align 8, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !33
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %100, i32 %93, i32 %95, i32 %97, i32 %99, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !33
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !33
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 3.840000e+02) #5, !dbg !34
  %104 = fadd float %103, 0x3EB0C6F7A0000000, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i = icmp eq i32 %105, 0, !dbg !33
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i = icmp eq i32 %106, 0, !dbg !33
  br i1 %.not.i, label %112, label %107, !dbg !33

107:                                              ; preds = %4
  br i1 %.not1.i, label %110, label %108, !dbg !33

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

112:                                              ; preds = %4
  br i1 %.not1.i, label %115, label %113, !dbg !33

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %108, %110, %113, %115
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !33
  %117 = or disjoint i32 %6, %12, !dbg !13
  %118 = icmp slt i32 %117, 64, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %119 = sext i32 %117 to i64, !dbg !37
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !37
  %121 = bitcast float %.0.i to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %120, i1 %118) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "conwtrbhoeldgwl7cnpxym46ijcye2kndh3l3jluyrnmsshpovlx.py", directory: "inductor_cache/on")
!4 = !{ptr @triton_per_fused_add_mean_pow_sqrt_sub_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_pow_sqrt_sub_29, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_pow_sqrt_sub_29", linkageName: "triton_per_fused_add_mean_pow_sqrt_sub_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 38, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 33, column: 51, scope: !7)
!26 = !DILocation(line: 35, column: 41, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 36, column: 24, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 41, column: 26, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 4, scope: !7)
!37 = !DILocation(line: 43, column: 28, scope: !7)
!38 = !DILocation(line: 43, column: 39, scope: !7)
!39 = !DILocation(line: 43, column: 4, scope: !7)
