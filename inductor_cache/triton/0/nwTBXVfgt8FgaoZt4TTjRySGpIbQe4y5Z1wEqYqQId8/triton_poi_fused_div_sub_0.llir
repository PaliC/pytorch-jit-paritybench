; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = icmp slt i32 %7, 12, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %10 = shl i32 %9, 9, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = shl i32 %11, 2, !dbg !14
  %13 = and i32 %12, 508, !dbg !14
  %14 = and i32 %11, 127, !dbg !14
  %15 = or disjoint i32 %14, 128, !dbg !14
  %16 = or disjoint i32 %14, 256, !dbg !14
  %17 = or disjoint i32 %14, 384, !dbg !14
  %18 = or disjoint i32 %10, %14, !dbg !15
  %19 = or disjoint i32 %10, %15, !dbg !15
  %20 = or disjoint i32 %10, %16, !dbg !15
  %21 = or disjoint i32 %10, %17, !dbg !15
  %.frozen = freeze i32 %7, !dbg !16
  %22 = sdiv i32 %.frozen, 3, !dbg !16
  %23 = mul i32 %22, 3, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = shl i32 %7, 12, !dbg !18
  %25 = or disjoint i32 %24, %13, !dbg !15
  %26 = add i32 %25, %10, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %8) #2, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = bitcast i32 %32 to float, !dbg !21
  %37 = bitcast i32 %33 to float, !dbg !21
  %38 = sext i32 %.decomposed to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %8) #2, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %8) #2, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %8) #2, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %8) #2, !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %8) #2, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %8) #2, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %8) #2, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %8) #2, !dbg !25
  %50 = bitcast i32 %49 to float, !dbg !25
  %51 = fsub float %34, %44, !dbg !26
  %52 = fsub float %35, %44, !dbg !26
  %53 = fsub float %36, %44, !dbg !26
  %54 = fsub float %37, %44, !dbg !26
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float %50) #2, !dbg !27
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %50) #2, !dbg !27
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %50) #2, !dbg !27
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %50) #2, !dbg !27
  %59 = mul i32 %18, 3, !dbg !28
  %60 = mul i32 %19, 3, !dbg !28
  %61 = mul i32 %20, 3, !dbg !28
  %62 = mul i32 %21, 3, !dbg !28
  %63 = mul i32 %22, 12288, !dbg !29
  %64 = add i32 %63, %.decomposed, !dbg !30
  %65 = add i32 %64, %59, !dbg !31
  %66 = add i32 %64, %60, !dbg !31
  %67 = add i32 %64, %61, !dbg !31
  %68 = add i32 %64, %62, !dbg !31
  %69 = sext i32 %65 to i64, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !32
  %71 = sext i32 %66 to i64, !dbg !32
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !32
  %73 = sext i32 %67 to i64, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !32
  %75 = sext i32 %68 to i64, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !32
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !33
  %78 = bitcast float %55 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !33
  %79 = or disjoint i32 %13, 1, !dbg !33
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79, !dbg !33
  %81 = bitcast float %56 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !33
  %82 = or disjoint i32 %13, 2, !dbg !33
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !33
  %84 = bitcast float %57 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !33
  %85 = or disjoint i32 %13, 3, !dbg !33
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !33
  %87 = bitcast float %58 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !33
  %89 = load i32, ptr addrspace(3) %88, align 4, !dbg !33
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !33
  %91 = load i32, ptr addrspace(3) %90, align 4, !dbg !33
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !33
  %93 = load i32, ptr addrspace(3) %92, align 4, !dbg !33
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !33
  %95 = load i32, ptr addrspace(3) %94, align 4, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %70, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %72, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %74, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %76, i1 %8) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjinjftyj4vr27gktnr3bxxgmoyqf7yjxg64icpa6u4t4kmrecti.py", directory: "inductor_cache/ji")
!4 = !{ptr @triton_poi_fused_div_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_sub_0", linkageName: "triton_poi_fused_div_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 32, scope: !7)
!29 = !DILocation(line: 37, column: 43, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 37, scope: !7)
!32 = !DILocation(line: 37, column: 25, scope: !7)
!33 = !DILocation(line: 37, column: 54, scope: !7)
!34 = !DILocation(line: 37, column: 4, scope: !7)
