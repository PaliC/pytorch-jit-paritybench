; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_143(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %21 = sdiv i32 %.frozen, 4096, !dbg !14
  %22 = srem i32 %21, 6, !dbg !15
  %23 = mul i32 %21, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = sdiv i32 %20, 24576, !dbg !17
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !18
  %26 = bitcast i32 %25 to float, !dbg !18
  %27 = icmp slt i32 %22, 1, !dbg !19
  %28 = shl nsw i32 %24, 12, !dbg !20
  %29 = add nsw i32 %28, %.decomposed, !dbg !21
  %30 = sext i32 %29 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #1, !dbg !23
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !23
  %35 = bitcast i32 %33 to float, !dbg !23
  %36 = bitcast i32 %34 to float, !dbg !23
  %37 = fadd float %26, %35, !dbg !24
  %38 = fadd float %26, %36, !dbg !24
  %39 = icmp eq i32 %22, 1, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !26
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !27
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !27
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !27
  %44 = bitcast i32 %42 to float, !dbg !27
  %45 = bitcast i32 %43 to float, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !28
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !29
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !29
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !29
  %50 = bitcast i32 %48 to float, !dbg !29
  %51 = bitcast i32 %49 to float, !dbg !29
  %52 = fadd float %44, %50, !dbg !30
  %53 = fadd float %45, %51, !dbg !30
  %54 = icmp eq i32 %22, 2, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !32
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !33
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !33
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !33
  %59 = bitcast i32 %57 to float, !dbg !33
  %60 = bitcast i32 %58 to float, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !34
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !35
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !35
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !35
  %65 = bitcast i32 %63 to float, !dbg !35
  %66 = bitcast i32 %64 to float, !dbg !35
  %67 = fadd float %59, %65, !dbg !36
  %68 = fadd float %60, %66, !dbg !36
  %69 = icmp eq i32 %22, 3, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !38
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #1, !dbg !39
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !39
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !39
  %74 = bitcast i32 %72 to float, !dbg !39
  %75 = bitcast i32 %73 to float, !dbg !39
  %76 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !40
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #1, !dbg !41
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !41
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !41
  %80 = bitcast i32 %78 to float, !dbg !41
  %81 = bitcast i32 %79 to float, !dbg !41
  %82 = fadd float %74, %80, !dbg !42
  %83 = fadd float %75, %81, !dbg !42
  %84 = icmp eq i32 %22, 4, !dbg !43
  %85 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !44
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #1, !dbg !45
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !45
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !45
  %89 = bitcast i32 %87 to float, !dbg !45
  %90 = bitcast i32 %88 to float, !dbg !45
  %91 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !46
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %91, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #1, !dbg !47
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !47
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !47
  %95 = bitcast i32 %93 to float, !dbg !47
  %96 = bitcast i32 %94 to float, !dbg !47
  %97 = fadd float %89, %95, !dbg !48
  %98 = fadd float %90, %96, !dbg !48
  %99 = icmp sgt i32 %22, 4, !dbg !49
  %100 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !50
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #1, !dbg !51
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !51
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !51
  %104 = bitcast i32 %102 to float, !dbg !51
  %105 = bitcast i32 %103 to float, !dbg !51
  %106 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !52
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %106, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #1, !dbg !53
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !53
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !53
  %110 = bitcast i32 %108 to float, !dbg !53
  %111 = bitcast i32 %109 to float, !dbg !53
  %112 = fadd float %104, %110, !dbg !54
  %113 = fadd float %105, %111, !dbg !54
  %114 = select i1 %99, float %112, float 0.000000e+00, !dbg !55
  %115 = select i1 %99, float %113, float 0.000000e+00, !dbg !55
  %116 = select i1 %84, float %97, float %114, !dbg !56
  %117 = select i1 %84, float %98, float %115, !dbg !56
  %118 = select i1 %69, float %82, float %116, !dbg !56
  %119 = select i1 %69, float %83, float %117, !dbg !56
  %120 = select i1 %54, float %67, float %118, !dbg !56
  %121 = select i1 %54, float %68, float %119, !dbg !56
  %122 = select i1 %39, float %52, float %120, !dbg !56
  %123 = select i1 %39, float %53, float %121, !dbg !56
  %124 = select i1 %27, float %37, float %122, !dbg !56
  %125 = select i1 %27, float %38, float %123, !dbg !56
  %126 = sext i32 %20 to i64, !dbg !57
  %127 = getelementptr float, ptr addrspace(1) %12, i64 %126, !dbg !57
  %128 = bitcast float %124 to i32, !dbg !58
  %129 = bitcast float %125 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %129, ptr addrspace(1) %127, i1 true) #1, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czmn6ukgqexhvpesia2wbhwypul5uhsnm5mucipdtos56jy5nxpm.py", directory: "inductor_cache/zm")
!4 = !{ptr @triton_poi_fused_cat_143, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_143, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_143", linkageName: "triton_poi_fused_cat_143", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 18, scope: !7)
!20 = !DILocation(line: 35, column: 40, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 45, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 42, column: 20, scope: !7)
!26 = !DILocation(line: 43, column: 31, scope: !7)
!27 = !DILocation(line: 43, column: 46, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 46, scope: !7)
!30 = !DILocation(line: 45, column: 20, scope: !7)
!31 = !DILocation(line: 51, column: 20, scope: !7)
!32 = !DILocation(line: 52, column: 31, scope: !7)
!33 = !DILocation(line: 52, column: 46, scope: !7)
!34 = !DILocation(line: 53, column: 31, scope: !7)
!35 = !DILocation(line: 53, column: 46, scope: !7)
!36 = !DILocation(line: 54, column: 20, scope: !7)
!37 = !DILocation(line: 60, column: 20, scope: !7)
!38 = !DILocation(line: 61, column: 31, scope: !7)
!39 = !DILocation(line: 61, column: 46, scope: !7)
!40 = !DILocation(line: 62, column: 31, scope: !7)
!41 = !DILocation(line: 62, column: 46, scope: !7)
!42 = !DILocation(line: 63, column: 20, scope: !7)
!43 = !DILocation(line: 69, column: 20, scope: !7)
!44 = !DILocation(line: 70, column: 31, scope: !7)
!45 = !DILocation(line: 70, column: 46, scope: !7)
!46 = !DILocation(line: 71, column: 31, scope: !7)
!47 = !DILocation(line: 71, column: 46, scope: !7)
!48 = !DILocation(line: 72, column: 20, scope: !7)
!49 = !DILocation(line: 75, column: 20, scope: !7)
!50 = !DILocation(line: 78, column: 32, scope: !7)
!51 = !DILocation(line: 78, column: 47, scope: !7)
!52 = !DILocation(line: 79, column: 32, scope: !7)
!53 = !DILocation(line: 79, column: 47, scope: !7)
!54 = !DILocation(line: 80, column: 20, scope: !7)
!55 = !DILocation(line: 82, column: 35, scope: !7)
!56 = !DILocation(line: 0, scope: !7)
!57 = !DILocation(line: 88, column: 25, scope: !7)
!58 = !DILocation(line: 88, column: 37, scope: !7)
!59 = !DILocation(line: 88, column: 4, scope: !7)
