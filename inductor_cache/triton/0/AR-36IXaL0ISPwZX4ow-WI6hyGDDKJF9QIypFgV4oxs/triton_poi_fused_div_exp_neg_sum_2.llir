; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_div_exp_neg_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = srem i32 %9, 16, !dbg !15
  %12 = sdiv i32 %9, 64, !dbg !16
  %13 = sext i32 %9 to i64, !dbg !17
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !17
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 %10) #1, !dbg !18
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !18
  %17 = extractvalue { i32, i32 } %15, 1, !dbg !18
  %18 = bitcast i32 %16 to float, !dbg !18
  %19 = bitcast i32 %17 to float, !dbg !18
  %20 = shl nsw i32 %12, 6, !dbg !19
  %21 = add i32 %20, %11, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %10) #1, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = add i32 %21, 16, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %10) #1, !dbg !25
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = add i32 %21, 32, !dbg !26
  %38 = sext i32 %37 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %10) #1, !dbg !28
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %43 = bitcast i32 %41 to float, !dbg !28
  %44 = bitcast i32 %42 to float, !dbg !28
  %45 = add i32 %21, 48, !dbg !29
  %46 = sext i32 %45 to i64, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !30
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %10) #1, !dbg !31
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !31
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !31
  %51 = bitcast i32 %49 to float, !dbg !31
  %52 = bitcast i32 %50 to float, !dbg !31
  %53 = fsub float 0.000000e+00, %18, !dbg !32
  %54 = fsub float 0.000000e+00, %19, !dbg !32
  %55 = fmul float %53, 1.000000e+01, !dbg !33
  %56 = fmul float %54, 1.000000e+01, !dbg !33
  %57 = fmul float %55, 0x3FF7154760000000, !dbg !34
  %58 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %57) #1, !dbg !34
  %59 = fmul float %56, 0x3FF7154760000000, !dbg !34
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #1, !dbg !34
  %61 = fsub float 0.000000e+00, %27, !dbg !35
  %62 = fsub float 0.000000e+00, %28, !dbg !35
  %63 = fmul float %61, 1.000000e+01, !dbg !36
  %64 = fmul float %62, 1.000000e+01, !dbg !36
  %65 = fmul float %63, 0x3FF7154760000000, !dbg !37
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #1, !dbg !37
  %67 = fmul float %64, 0x3FF7154760000000, !dbg !37
  %68 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %67) #1, !dbg !37
  %69 = fsub float 0.000000e+00, %35, !dbg !38
  %70 = fsub float 0.000000e+00, %36, !dbg !38
  %71 = fmul float %69, 1.000000e+01, !dbg !39
  %72 = fmul float %70, 1.000000e+01, !dbg !39
  %73 = fmul float %71, 0x3FF7154760000000, !dbg !40
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #1, !dbg !40
  %75 = fmul float %72, 0x3FF7154760000000, !dbg !40
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !40
  %77 = fadd float %66, %74, !dbg !41
  %78 = fadd float %68, %76, !dbg !41
  %79 = fsub float 0.000000e+00, %43, !dbg !42
  %80 = fsub float 0.000000e+00, %44, !dbg !42
  %81 = fmul float %79, 1.000000e+01, !dbg !43
  %82 = fmul float %80, 1.000000e+01, !dbg !43
  %83 = fmul float %81, 0x3FF7154760000000, !dbg !44
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !44
  %85 = fmul float %82, 0x3FF7154760000000, !dbg !44
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !44
  %87 = fadd float %77, %84, !dbg !45
  %88 = fadd float %78, %86, !dbg !45
  %89 = fsub float 0.000000e+00, %51, !dbg !46
  %90 = fsub float 0.000000e+00, %52, !dbg !46
  %91 = fmul float %89, 1.000000e+01, !dbg !47
  %92 = fmul float %90, 1.000000e+01, !dbg !47
  %93 = fmul float %91, 0x3FF7154760000000, !dbg !48
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #1, !dbg !48
  %95 = fmul float %92, 0x3FF7154760000000, !dbg !48
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %95) #1, !dbg !48
  %97 = fadd float %87, %94, !dbg !49
  %98 = fadd float %88, %96, !dbg !49
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %97) #1, !dbg !50
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %98) #1, !dbg !50
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !51
  %102 = bitcast float %99 to i32, !dbg !52
  %103 = bitcast float %100 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %103, ptr addrspace(1) %101, i1 %10) #1, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm2vwwblc5k43xikfawrr6sh5jw4x2aemqoiek5nfbqpccfblgz2.py", directory: "inductor_cache/m2")
!4 = !{ptr @triton_poi_fused_div_exp_neg_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_exp_neg_sum_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_exp_neg_sum_2", linkageName: "triton_poi_fused_div_exp_neg_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 49, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 49, scope: !7)
!32 = !DILocation(line: 32, column: 12, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 35, column: 23, scope: !7)
!35 = !DILocation(line: 36, column: 12, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 23, scope: !7)
!38 = !DILocation(line: 39, column: 13, scope: !7)
!39 = !DILocation(line: 40, column: 20, scope: !7)
!40 = !DILocation(line: 41, column: 24, scope: !7)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 13, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 24, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 13, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 24, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 19, scope: !7)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 52, column: 37, scope: !7)
!53 = !DILocation(line: 52, column: 4, scope: !7)
