; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 128, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 2044, !dbg !12
  %13 = and i32 %10, 511, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %13, 1024, !dbg !12
  %16 = or disjoint i32 %13, 1536, !dbg !12
  %17 = srem i32 %8, 32, !dbg !13
  %18 = shl i32 %8, 12, !dbg !14
  %19 = shl nsw i32 %17, 2, !dbg !15
  %20 = or disjoint i32 %18, %12
  %21 = shl nuw nsw i32 %12, 1
  %22 = zext nneg i32 %21 to i64
  %23 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %22
  %24 = or disjoint i32 %21, 2
  %25 = zext nneg i32 %24 to i64
  %26 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %25
  %27 = or disjoint i32 %21, 4
  %28 = zext nneg i32 %27 to i64
  %29 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %28
  %30 = or disjoint i32 %21, 6
  %31 = zext nneg i32 %30 to i64
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %31
  %33 = shl nuw nsw i32 %13, 1
  %34 = zext nneg i32 %33 to i64
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %34
  %36 = shl nuw nsw i32 %14, 1
  %37 = zext nneg i32 %36 to i64
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %37
  %39 = shl nuw nsw i32 %15, 1
  %40 = zext nneg i32 %39 to i64
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %40
  %42 = shl nuw nsw i32 %16, 1
  %43 = zext nneg i32 %42 to i64
  %44 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %43
  %45 = zext nneg i32 %13 to i64
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %45
  %47 = zext nneg i32 %14 to i64
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %47
  %49 = zext nneg i32 %15 to i64
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49
  %51 = zext nneg i32 %16 to i64
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %51
  %53 = zext nneg i32 %12 to i64
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53
  %55 = sext i32 %20 to i64, !dbg !16
  %56 = sext i32 %19 to i64, !dbg !16
  %57 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 4
  %58 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 8
  %59 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 12
  %invariant.op = or i64 %56, 1, !dbg !16
  br label %60, !dbg !16

60:                                               ; preds = %7, %._crit_edge
  %61 = phi i1 [ true, %7 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %7 ], [ 2048, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %7 ], [ %172, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %7 ], [ %173, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %7 ], [ %174, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %7 ], [ %175, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %7 ], [ %168, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %7 ], [ %169, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %7 ], [ %170, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %7 ], [ %171, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %7 ], [ %164, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %7 ], [ %165, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %7 ], [ %166, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %7 ], [ %167, %._crit_edge ]
  %74 = lshr exact i64 %indvars.iv, 10, !dbg !17
  %75 = or disjoint i64 %indvars.iv, %55, !dbg !18
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !19
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !20
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !20
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !20
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !20
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %82 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> %82, i1 true) #5, !dbg !20
  %83 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %83, i1 true) #5, !dbg !20
  %84 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %84, i1 true) #5, !dbg !20
  %85 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %85, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %86 = load float, ptr addrspace(3) %35, align 8, !dbg !20
  %87 = load float, ptr addrspace(3) %38, align 8, !dbg !20
  %88 = load float, ptr addrspace(3) %41, align 8, !dbg !20
  %89 = load float, ptr addrspace(3) %44, align 8, !dbg !20
  %90 = or disjoint i64 %74, %56, !dbg !21
  %.reass = or i64 %74, %invariant.op
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %.reass, !dbg !22
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %9, i32 0, i1 %9) #5, !dbg !23
  %94 = bitcast i32 %93 to float, !dbg !23
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %9, i32 0, i1 %9) #5, !dbg !23
  %96 = bitcast i32 %95 to float, !dbg !23
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %9, i32 0, i1 %9) #5, !dbg !23
  %98 = bitcast i32 %97 to float, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %9, i32 0, i1 %9) #5, !dbg !23
  %100 = bitcast i32 %99 to float, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !24
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !25
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !25
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !25
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !25
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !25
  %107 = bitcast i32 %103 to float, !dbg !25
  %108 = bitcast i32 %104 to float, !dbg !25
  %109 = bitcast i32 %105 to float, !dbg !25
  %110 = bitcast i32 %106 to float, !dbg !25
  %111 = fadd float %86, %94, !dbg !26
  %112 = fadd float %87, %96, !dbg !26
  %113 = fadd float %88, %98, !dbg !26
  %114 = fadd float %89, %100, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %115 = bitcast float %111 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %115, i1 true) #5, !dbg !26
  %116 = bitcast float %112 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %116, i1 true) #5, !dbg !26
  %117 = bitcast float %113 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %117, i1 true) #5, !dbg !26
  %118 = bitcast float %114 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %118, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %119 = load float, ptr addrspace(3) %54, align 16, !dbg !26
  %120 = load float, ptr addrspace(3) %57, align 4, !dbg !26
  %121 = load float, ptr addrspace(3) %58, align 8, !dbg !26
  %122 = load float, ptr addrspace(3) %59, align 4, !dbg !26
  %123 = fadd float %119, %107, !dbg !27
  %124 = fadd float %120, %108, !dbg !27
  %125 = fadd float %121, %109, !dbg !27
  %126 = fadd float %122, %110, !dbg !27
  br i1 %61, label %._crit_edge, label %127, !dbg !28

127:                                              ; preds = %60
  %128 = fsub float %123, %70, !dbg !32
  %129 = fsub float %124, %71, !dbg !32
  %130 = fsub float %125, %72, !dbg !32
  %131 = fsub float %126, %73, !dbg !32
  %132 = fadd float %62, 1.000000e+00, !dbg !33
  %133 = fadd float %63, 1.000000e+00, !dbg !33
  %134 = fadd float %64, 1.000000e+00, !dbg !33
  %135 = fadd float %65, 1.000000e+00, !dbg !33
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %132) #5, !dbg !34
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %133) #5, !dbg !34
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %134) #5, !dbg !34
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %135) #5, !dbg !34
  %140 = fadd float %70, %136, !dbg !35
  %141 = fadd float %71, %137, !dbg !35
  %142 = fadd float %72, %138, !dbg !35
  %143 = fadd float %73, %139, !dbg !35
  %144 = fsub float %123, %140, !dbg !36
  %145 = fsub float %124, %141, !dbg !36
  %146 = fsub float %125, %142, !dbg !36
  %147 = fsub float %126, %143, !dbg !36
  %148 = fmul float %128, %144, !dbg !37
  %149 = fmul float %129, %145, !dbg !37
  %150 = fmul float %130, %146, !dbg !37
  %151 = fmul float %131, %147, !dbg !37
  %152 = fadd float %66, %148, !dbg !38
  %153 = fadd float %67, %149, !dbg !38
  %154 = fadd float %68, %150, !dbg !38
  %155 = fadd float %69, %151, !dbg !38
  br label %._crit_edge, !dbg !28

._crit_edge:                                      ; preds = %60, %127
  %156 = phi float [ %152, %127 ], [ 0.000000e+00, %60 ], !dbg !31
  %157 = phi float [ %153, %127 ], [ 0.000000e+00, %60 ], !dbg !31
  %158 = phi float [ %154, %127 ], [ 0.000000e+00, %60 ], !dbg !31
  %159 = phi float [ %155, %127 ], [ 0.000000e+00, %60 ], !dbg !31
  %.pn10 = phi float [ %140, %127 ], [ %123, %60 ]
  %.pn8 = phi float [ %141, %127 ], [ %124, %60 ]
  %.pn6 = phi float [ %142, %127 ], [ %125, %60 ]
  %.pn4 = phi float [ %143, %127 ], [ %126, %60 ]
  %160 = phi float [ %132, %127 ], [ 1.000000e+00, %60 ], !dbg !31
  %161 = phi float [ %133, %127 ], [ 1.000000e+00, %60 ], !dbg !31
  %162 = phi float [ %134, %127 ], [ 1.000000e+00, %60 ], !dbg !31
  %163 = phi float [ %135, %127 ], [ 1.000000e+00, %60 ], !dbg !31
  %164 = select i1 %9, float %.pn10, float %70, !dbg !39
  %165 = select i1 %9, float %.pn8, float %71, !dbg !39
  %166 = select i1 %9, float %.pn6, float %72, !dbg !39
  %167 = select i1 %9, float %.pn4, float %73, !dbg !39
  %168 = select i1 %9, float %156, float %66, !dbg !40
  %169 = select i1 %9, float %157, float %67, !dbg !40
  %170 = select i1 %9, float %158, float %68, !dbg !40
  %171 = select i1 %9, float %159, float %69, !dbg !40
  %172 = select i1 %9, float %160, float %62, !dbg !41
  %173 = select i1 %9, float %161, float %63, !dbg !41
  %174 = select i1 %9, float %162, float %64, !dbg !41
  %175 = select i1 %9, float %163, float %65, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %115, i1 true) #5, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %116, i1 true) #5, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %117, i1 true) #5, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %118, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %.extract = load i32, ptr addrspace(3) %54, align 16, !dbg !42
  %.extract15 = load i32, ptr addrspace(3) %57, align 4, !dbg !42
  %.extract16 = load i32, ptr addrspace(3) %58, align 8, !dbg !42
  %.extract17 = load i32, ptr addrspace(3) %59, align 4, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %76, i1 %9) #5, !dbg !42
  br i1 %61, label %60, label %176, !dbg !16

176:                                              ; preds = %._crit_edge
  %177 = lshr i32 %10, 5, !dbg !12
  %178 = and i32 %10, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %179 = fsub float %165, %164, !dbg !45
  %180 = fadd float %172, %173, !dbg !47
  %181 = fcmp oeq float %180, 0.000000e+00, !dbg !48
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %180) #5, !dbg !49
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !50
  %184 = fmul float %179, %183, !dbg !51
  %185 = fadd float %164, %184, !dbg !52
  %186 = fadd float %168, %169, !dbg !53
  %187 = fmul float %179, %179, !dbg !54
  %188 = fmul float %187, %172, !dbg !55
  %189 = fmul float %188, %183, !dbg !56
  %190 = fadd float %186, %189, !dbg !57
  %191 = fsub float %166, %185, !dbg !45
  %192 = fadd float %174, %180, !dbg !47
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !48
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %192) #5, !dbg !49
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !50
  %196 = fmul float %195, %191, !dbg !51
  %197 = fadd float %185, %196, !dbg !52
  %198 = fadd float %170, %190, !dbg !53
  %199 = fmul float %191, %191, !dbg !54
  %200 = fmul float %180, %199, !dbg !55
  %201 = fmul float %195, %200, !dbg !56
  %202 = fadd float %198, %201, !dbg !57
  %203 = fsub float %167, %197, !dbg !45
  %204 = fadd float %175, %192, !dbg !47
  %205 = fcmp oeq float %204, 0.000000e+00, !dbg !48
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %204) #5, !dbg !49
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !50
  %208 = fmul float %207, %203, !dbg !51
  %209 = fadd float %197, %208, !dbg !52
  %210 = fadd float %171, %202, !dbg !53
  %211 = fmul float %203, %203, !dbg !54
  %212 = fmul float %192, %211, !dbg !55
  %213 = fmul float %207, %212, !dbg !56
  %214 = fadd float %210, %213, !dbg !57
  %215 = bitcast float %209 to i32, !dbg !43
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !43
  %217 = bitcast i32 %216 to float, !dbg !43
  %218 = bitcast float %214 to i32, !dbg !43
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 16, i32 31), !dbg !43
  %220 = bitcast i32 %219 to float, !dbg !43
  %221 = bitcast float %204 to i32, !dbg !43
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 16, i32 31), !dbg !43
  %223 = bitcast i32 %222 to float, !dbg !43
  %224 = fsub float %217, %209, !dbg !45
  %225 = fadd float %204, %223, !dbg !47
  %226 = fcmp oeq float %225, 0.000000e+00, !dbg !48
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %225) #5, !dbg !49
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !50
  %229 = fmul float %228, %224, !dbg !51
  %230 = fadd float %209, %229, !dbg !52
  %231 = fadd float %214, %220, !dbg !53
  %232 = fmul float %224, %224, !dbg !54
  %233 = fmul float %204, %232, !dbg !55
  %234 = fmul float %228, %233, !dbg !56
  %235 = fadd float %231, %234, !dbg !57
  %236 = bitcast float %230 to i32, !dbg !43
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !43
  %238 = bitcast i32 %237 to float, !dbg !43
  %239 = bitcast float %235 to i32, !dbg !43
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !43
  %241 = bitcast i32 %240 to float, !dbg !43
  %242 = bitcast float %225 to i32, !dbg !43
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !43
  %244 = bitcast i32 %243 to float, !dbg !43
  %245 = fsub float %238, %230, !dbg !45
  %246 = fadd float %225, %244, !dbg !47
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !48
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %246) #5, !dbg !49
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !50
  %250 = fmul float %245, %249, !dbg !51
  %251 = fadd float %230, %250, !dbg !52
  %252 = fadd float %235, %241, !dbg !53
  %253 = fmul float %245, %245, !dbg !54
  %254 = fmul float %225, %253, !dbg !55
  %255 = fmul float %249, %254, !dbg !56
  %256 = fadd float %252, %255, !dbg !57
  %257 = bitcast float %251 to i32, !dbg !43
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !43
  %259 = bitcast i32 %258 to float, !dbg !43
  %260 = bitcast float %256 to i32, !dbg !43
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !43
  %262 = bitcast i32 %261 to float, !dbg !43
  %263 = bitcast float %246 to i32, !dbg !43
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !43
  %265 = bitcast i32 %264 to float, !dbg !43
  %266 = fsub float %259, %251, !dbg !45
  %267 = fadd float %246, %265, !dbg !47
  %268 = fcmp oeq float %267, 0.000000e+00, !dbg !48
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %267) #5, !dbg !49
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !50
  %271 = fmul float %266, %270, !dbg !51
  %272 = fadd float %251, %271, !dbg !52
  %273 = fadd float %256, %262, !dbg !53
  %274 = fmul float %266, %266, !dbg !54
  %275 = fmul float %246, %274, !dbg !55
  %276 = fmul float %270, %275, !dbg !56
  %277 = fadd float %273, %276, !dbg !57
  %278 = bitcast float %272 to i32, !dbg !43
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !43
  %280 = bitcast i32 %279 to float, !dbg !43
  %281 = bitcast float %277 to i32, !dbg !43
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !43
  %283 = bitcast i32 %282 to float, !dbg !43
  %284 = bitcast float %267 to i32, !dbg !43
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !43
  %286 = bitcast i32 %285 to float, !dbg !43
  %287 = fsub float %280, %272, !dbg !45
  %288 = fadd float %267, %286, !dbg !47
  %289 = fcmp oeq float %288, 0.000000e+00, !dbg !48
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %288) #5, !dbg !49
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !50
  %292 = fmul float %287, %291, !dbg !51
  %293 = fadd float %272, %292, !dbg !52
  %294 = fadd float %277, %283, !dbg !53
  %295 = fmul float %287, %287, !dbg !54
  %296 = fmul float %267, %295, !dbg !55
  %297 = fmul float %291, %296, !dbg !56
  %298 = fadd float %294, %297, !dbg !57
  %299 = bitcast float %293 to i32, !dbg !43
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !43
  %301 = bitcast i32 %300 to float, !dbg !43
  %302 = bitcast float %298 to i32, !dbg !43
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !43
  %304 = bitcast i32 %303 to float, !dbg !43
  %305 = bitcast float %288 to i32, !dbg !43
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !43
  %307 = bitcast i32 %306 to float, !dbg !43
  %308 = fsub float %301, %293, !dbg !45
  %309 = fadd float %288, %307, !dbg !47
  %310 = fcmp oeq float %309, 0.000000e+00, !dbg !48
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %309) #5, !dbg !49
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !50
  %313 = fmul float %308, %312, !dbg !51
  %314 = fadd float %293, %313, !dbg !52
  %315 = fadd float %298, %304, !dbg !53
  %316 = fmul float %308, %308, !dbg !54
  %317 = fmul float %288, %316, !dbg !55
  %318 = fmul float %312, %317, !dbg !56
  %319 = fadd float %315, %318, !dbg !57
  %320 = icmp eq i32 %178, 0, !dbg !43
  %321 = and i32 %177, 15, !dbg !43
  %322 = zext nneg i32 %321 to i64, !dbg !43
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %322, !dbg !43
  %324 = bitcast float %314 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 %320) #5, !dbg !43
  %325 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %322, !dbg !43
  %326 = bitcast float %319 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 %320) #5, !dbg !43
  %327 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %322, !dbg !43
  %328 = bitcast float %309 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 %320) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %329 = icmp slt i32 %10, 16, !dbg !43
  %330 = sext i32 %10 to i64, !dbg !43
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330, !dbg !43
  %332 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %331, i1 %329) #5, !dbg !43
  %333 = bitcast i32 %332 to float, !dbg !43
  %334 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %330, !dbg !43
  %335 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %334, i1 %329) #5, !dbg !43
  %336 = bitcast i32 %335 to float, !dbg !43
  %337 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %330, !dbg !43
  %338 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %337, i1 %329) #5, !dbg !43
  %339 = bitcast i32 %338 to float, !dbg !43
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 8, i32 31), !dbg !43
  %341 = bitcast i32 %340 to float, !dbg !43
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 8, i32 31), !dbg !43
  %343 = bitcast i32 %342 to float, !dbg !43
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 8, i32 31), !dbg !43
  %345 = bitcast i32 %344 to float, !dbg !43
  %346 = fsub float %341, %333, !dbg !45
  %347 = fadd float %339, %345, !dbg !47
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !48
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %345, float %347) #5, !dbg !49
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !50
  %351 = fmul float %346, %350, !dbg !51
  %352 = fadd float %351, %333, !dbg !52
  %353 = fadd float %336, %343, !dbg !53
  %354 = fmul float %346, %346, !dbg !54
  %355 = fmul float %354, %339, !dbg !55
  %356 = fmul float %355, %350, !dbg !56
  %357 = fadd float %353, %356, !dbg !57
  %358 = bitcast float %352 to i32, !dbg !43
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 4, i32 31), !dbg !43
  %360 = bitcast i32 %359 to float, !dbg !43
  %361 = bitcast float %357 to i32, !dbg !43
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 4, i32 31), !dbg !43
  %363 = bitcast i32 %362 to float, !dbg !43
  %364 = bitcast float %347 to i32, !dbg !43
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 4, i32 31), !dbg !43
  %366 = bitcast i32 %365 to float, !dbg !43
  %367 = fsub float %360, %352, !dbg !45
  %368 = fadd float %347, %366, !dbg !47
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !48
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %368) #5, !dbg !49
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !50
  %372 = fmul float %367, %371, !dbg !51
  %373 = fadd float %352, %372, !dbg !52
  %374 = fadd float %357, %363, !dbg !53
  %375 = fmul float %367, %367, !dbg !54
  %376 = fmul float %347, %375, !dbg !55
  %377 = fmul float %371, %376, !dbg !56
  %378 = fadd float %374, %377, !dbg !57
  %379 = bitcast float %373 to i32, !dbg !43
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 2, i32 31), !dbg !43
  %381 = bitcast i32 %380 to float, !dbg !43
  %382 = bitcast float %378 to i32, !dbg !43
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 2, i32 31), !dbg !43
  %384 = bitcast i32 %383 to float, !dbg !43
  %385 = bitcast float %368 to i32, !dbg !43
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 2, i32 31), !dbg !43
  %387 = bitcast i32 %386 to float, !dbg !43
  %388 = fsub float %381, %373, !dbg !45
  %389 = fadd float %368, %387, !dbg !47
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !48
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float %389) #5, !dbg !49
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !50
  %393 = fmul float %388, %392, !dbg !51
  %394 = fadd float %373, %393, !dbg !52
  %395 = fadd float %378, %384, !dbg !53
  %396 = fmul float %388, %388, !dbg !54
  %397 = fmul float %368, %396, !dbg !55
  %398 = fmul float %392, %397, !dbg !56
  %399 = fadd float %395, %398, !dbg !57
  %400 = bitcast float %394 to i32, !dbg !43
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 1, i32 31), !dbg !43
  %402 = bitcast i32 %401 to float, !dbg !43
  %403 = bitcast float %399 to i32, !dbg !43
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 1, i32 31), !dbg !43
  %405 = bitcast i32 %404 to float, !dbg !43
  %406 = bitcast float %389 to i32, !dbg !43
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 1, i32 31), !dbg !43
  %408 = bitcast i32 %407 to float, !dbg !43
  %409 = fsub float %402, %394, !dbg !45
  %410 = fadd float %389, %408, !dbg !47
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !48
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %408, float %410) #5, !dbg !49
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !50
  %414 = fmul float %409, %413, !dbg !51
  %415 = fadd float %394, %414, !dbg !52
  %416 = fadd float %399, %405, !dbg !53
  %417 = fmul float %409, %409, !dbg !54
  %418 = fmul float %389, %417, !dbg !55
  %419 = fmul float %413, %418, !dbg !56
  %420 = fadd float %416, %419, !dbg !57
  %421 = and i32 %10, 15, !dbg !43
  %422 = icmp eq i32 %421, 0, !dbg !43
  %423 = and i1 %329, %422, !dbg !43
  %424 = bitcast float %415 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %424, i1 %423) #5, !dbg !43
  %425 = bitcast float %420 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %425, i1 %423) #5, !dbg !43
  %426 = bitcast float %410 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %426, i1 %423) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %427 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %428 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !43
  %429 = sext i32 %8 to i64, !dbg !58
  %430 = getelementptr float, ptr addrspace(1) %4, i64 %429, !dbg !58
  %431 = icmp eq i32 %13, 0, !dbg !59
  %432 = and i1 %431, %9, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %427, ptr addrspace(1) %430, i1 %432) #5, !dbg !59
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float 4.096000e+03) #5, !dbg !60
  %434 = fadd float %433, 0x3EB0C6F7A0000000, !dbg !61
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i = icmp eq i32 %435, 0, !dbg !62
  br i1 %.not.i, label %438, label %436, !dbg !62

436:                                              ; preds = %176
  %437 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %434), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

438:                                              ; preds = %176
  %439 = tail call float @llvm.nvvm.rsqrt.approx.f(float %434), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

__nv_rsqrtf.exit:                                 ; preds = %436, %438
  %.0.i = phi float [ %437, %436 ], [ %439, %438 ], !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %440 = getelementptr float, ptr addrspace(1) %1, i64 %429, !dbg !64
  %441 = bitcast float %.0.i to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %441, ptr addrspace(1) %440, i1 %432) #5, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py", directory: "inductor_cache/qd")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_8, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_8", linkageName: "triton_red_fused_convolution_native_group_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 41, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 43, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 53, scope: !7)
!21 = !DILocation(line: 37, column: 39, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 46, scope: !7)
!24 = !DILocation(line: 38, column: 34, scope: !7)
!25 = !DILocation(line: 38, column: 49, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 40, column: 22, scope: !7)
!28 = !DILocation(line: 178, column: 7, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 43, column: 51, scope: !7)
!32 = !DILocation(line: 183, column: 24, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 184, column: 30, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 185, column: 34, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 185, column: 26, scope: !29, inlinedAt: !31)
!36 = !DILocation(line: 186, column: 39, scope: !29, inlinedAt: !31)
!37 = !DILocation(line: 186, column: 31, scope: !29, inlinedAt: !31)
!38 = !DILocation(line: 186, column: 22, scope: !29, inlinedAt: !31)
!39 = !DILocation(line: 45, column: 60, scope: !7)
!40 = !DILocation(line: 46, column: 56, scope: !7)
!41 = !DILocation(line: 47, column: 64, scope: !7)
!42 = !DILocation(line: 48, column: 53, scope: !7)
!43 = !DILocation(line: 204, column: 46, scope: !29, inlinedAt: !44)
!44 = !DILocation(line: 50, column: 41, scope: !7)
!45 = !DILocation(line: 192, column: 21, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!47 = !DILocation(line: 193, column: 28, scope: !46, inlinedAt: !44)
!48 = !DILocation(line: 194, column: 39, scope: !46, inlinedAt: !44)
!49 = !DILocation(line: 194, column: 60, scope: !46, inlinedAt: !44)
!50 = !DILocation(line: 194, column: 49, scope: !46, inlinedAt: !44)
!51 = !DILocation(line: 196, column: 25, scope: !46, inlinedAt: !44)
!52 = !DILocation(line: 196, column: 17, scope: !46, inlinedAt: !44)
!53 = !DILocation(line: 197, column: 15, scope: !46, inlinedAt: !44)
!54 = !DILocation(line: 197, column: 30, scope: !46, inlinedAt: !44)
!55 = !DILocation(line: 197, column: 38, scope: !46, inlinedAt: !44)
!56 = !DILocation(line: 197, column: 49, scope: !46, inlinedAt: !44)
!57 = !DILocation(line: 197, column: 22, scope: !46, inlinedAt: !44)
!58 = !DILocation(line: 55, column: 25, scope: !7)
!59 = !DILocation(line: 55, column: 36, scope: !7)
!60 = !DILocation(line: 57, column: 19, scope: !7)
!61 = !DILocation(line: 59, column: 20, scope: !7)
!62 = !DILocation(line: 60, column: 28, scope: !7)
!63 = !DILocation(line: 61, column: 4, scope: !7)
!64 = !DILocation(line: 62, column: 28, scope: !7)
!65 = !DILocation(line: 62, column: 40, scope: !7)
!66 = !DILocation(line: 62, column: 4, scope: !7)
