#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":19:0)
#loc1 = loc(unknown)
#loc40 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":50:41)
#loc74 = loc(callsite(#loc1 at #loc40))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_convolution_native_group_norm_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<1024> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<9.99999997E-7> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x2048xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %0, %c32_i32 : i32 loc(#loc5)
    %7 = arith.muli %0, %c4096_i32 : i32 loc(#loc6)
    %8 = tt.splat %7 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked1> loc(#loc9)
    %12 = arith.muli %6, %c4_i32 : i32 loc(#loc10)
    %13 = tt.splat %12 : i32 -> tensor<1x2048xi32, #blocked1> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %15 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc13)
    %16:3 = scf.for %arg7 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg8 = %cst, %arg9 = %cst, %arg10 = %cst) -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>)  : i32 {
      %30 = tt.splat %arg7 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc15)
      %31 = tt.splat %arg7 : i32 -> tensor<1x2048xi32, #blocked1> loc(#loc15)
      %32 = arith.addi %30, %4 : tensor<1x2048xi32, #blocked> loc(#loc15)
      %33 = arith.addi %31, %5 : tensor<1x2048xi32, #blocked1> loc(#loc15)
      %34 = arith.cmpi slt, %32, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc16)
      %35 = arith.cmpi slt, %33, %cst_3 : tensor<1x2048xi32, #blocked1> loc(#loc16)
      %36 = arith.divsi %33, %cst_4 : tensor<1x2048xi32, #blocked1> loc(#loc17)
      %37 = arith.addi %32, %8 : tensor<1x2048xi32, #blocked> loc(#loc7)
      %38 = tt.addptr %9, %37 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc8)
      %39 = arith.andi %34, %10 : tensor<1x2048xi1, #blocked> loc(#loc9)
      %40 = arith.andi %35, %11 : tensor<1x2048xi1, #blocked1> loc(#loc9)
      %41 = tt.load %38, %39, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc18)
      %42 = triton_gpu.convert_layout %41 : tensor<1x2048xf32, #blocked> -> tensor<1x2048xf32, #blocked1> loc(#loc18)
      %43 = arith.addi %36, %13 : tensor<1x2048xi32, #blocked1> loc(#loc11)
      %44 = tt.addptr %14, %43 : tensor<1x2048x!tt.ptr<f32>, #blocked1>, tensor<1x2048xi32, #blocked1> loc(#loc12)
      %45 = tt.load %44, %40, %cst_1 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc19)
      %46 = tt.addptr %15, %37 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc13)
      %47 = tt.load %46, %39, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc20)
      %48 = arith.addf %42, %45 : tensor<1x2048xf32, #blocked1> loc(#loc21)
      %49 = triton_gpu.convert_layout %48 {fastmath = #arith.fastmath<none>} : tensor<1x2048xf32, #blocked1> -> tensor<1x2048xf32, #blocked> loc(#loc21)
      %50 = arith.addf %47, %49 : tensor<1x2048xf32, #blocked> loc(#loc22)
      %51 = arith.cmpi eq, %arg7, %c0_i32 : i32 loc(#loc23)
      %52:3 = scf.if %51 -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) {
        scf.yield %cst, %50, %cst_5 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc65)
      } else {
        %57 = arith.subf %50, %arg8 : tensor<1x2048xf32, #blocked> loc(#loc66)
        %58 = arith.addf %arg10, %cst_5 : tensor<1x2048xf32, #blocked> loc(#loc67)
        %59 = arith.divf %57, %58 : tensor<1x2048xf32, #blocked> loc(#loc68)
        %60 = arith.addf %arg8, %59 : tensor<1x2048xf32, #blocked> loc(#loc69)
        %61 = arith.subf %50, %60 : tensor<1x2048xf32, #blocked> loc(#loc70)
        %62 = arith.mulf %57, %61 : tensor<1x2048xf32, #blocked> loc(#loc71)
        %63 = arith.addf %arg9, %62 : tensor<1x2048xf32, #blocked> loc(#loc72)
        scf.yield %63, %60, %58 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc72)
      } loc(#loc64)
      %53 = arith.select %39, %52#1, %arg8 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc34)
      %54 = arith.select %39, %52#0, %arg9 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc35)
      %55 = arith.select %39, %52#2, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc36)
      %56 = triton_gpu.convert_layout %48 : tensor<1x2048xf32, #blocked1> -> tensor<1x2048xf32, #blocked> loc(#loc37)
      tt.store %38, %56, %39 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc37)
      scf.yield %53, %54, %55 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc38)
    } loc(#loc14)
    %17:3 = "tt.reduce"(%16#0, %16#1, %16#2) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc40)), %arg8: f32 loc(callsite(#loc1 at #loc40)), %arg9: f32 loc(callsite(#loc1 at #loc40)), %arg10: f32 loc(callsite(#loc1 at #loc40)), %arg11: f32 loc(callsite(#loc1 at #loc40)), %arg12: f32 loc(callsite(#loc1 at #loc40))):
      %30 = arith.subf %arg10, %arg7 : f32 loc(#loc87)
      %31 = arith.addf %arg9, %arg12 : f32 loc(#loc88)
      %32 = arith.cmpf oeq, %31, %cst_0 : f32 loc(#loc89)
      %33 = arith.divf %arg12, %31 : f32 loc(#loc90)
      %34 = arith.select %32, %cst_0, %33 : f32 loc(#loc91)
      %35 = arith.mulf %30, %34 : f32 loc(#loc92)
      %36 = arith.addf %arg7, %35 : f32 loc(#loc93)
      %37 = arith.addf %arg8, %arg11 : f32 loc(#loc94)
      %38 = arith.mulf %30, %30 : f32 loc(#loc95)
      %39 = arith.mulf %38, %arg9 : f32 loc(#loc96)
      %40 = arith.mulf %39, %34 : f32 loc(#loc97)
      %41 = arith.addf %37, %40 : f32 loc(#loc98)
      tt.reduce.return %36, %41, %31 : f32, f32, f32 loc(#loc73)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc73)
    %18 = triton_gpu.convert_layout %17#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc53)
    %19 = tt.expand_dims %18 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc53)
    %20 = triton_gpu.convert_layout %17#1 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc54)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc55)
    %22 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc56)
    %23 = tt.splat %22 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc57)
    %24 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc57)
    tt.store %23, %19, %24 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc57)
    %25 = arith.divf %21, %cst_7 : tensor<1x1xf32, #blocked1> loc(#loc58)
    %26 = arith.addf %25, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc59)
    %27 = tt.extern_elementwise %26 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc54)
    gpu.barrier loc(#loc60)
    %28 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc61)
    %29 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc62)
    tt.store %29, %27, %24 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":22:28)
#loc3 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":24:21)
#loc4 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":25:33)
#loc5 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":27:19)
#loc6 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":36:48)
#loc7 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":36:43)
#loc8 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":36:38)
#loc9 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":36:61)
#loc10 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":37:41)
#loc11 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":37:39)
#loc12 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":37:34)
#loc13 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":38:34)
#loc14 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":31:36)
#loc15 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":32:27)
#loc16 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":33:25)
#loc17 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":35:23)
#loc18 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":36:53)
#loc19 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":37:46)
#loc20 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":38:49)
#loc21 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":39:22)
#loc22 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":40:22)
#loc23 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":43:62)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc25 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":43:51)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc34 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":45:60)
#loc35 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":46:56)
#loc36 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":47:64)
#loc37 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":48:53)
#loc38 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":48:8)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc53 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":52:20)
#loc54 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":60:28)
#loc55 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":53:20)
#loc56 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":55:25)
#loc57 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":55:36)
#loc58 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":57:19)
#loc59 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":59:20)
#loc60 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":61:4)
#loc61 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":62:28)
#loc62 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":62:40)
#loc63 = loc("inductor_cache/qd/cqdnculvfa4e3cbtfnmk5usn4qqap5i4z673d2gwpe6yc4bbwjtr.py":62:4)
#loc64 = loc(callsite(#loc24 at #loc25))
#loc65 = loc(callsite(#loc26 at #loc25))
#loc66 = loc(callsite(#loc27 at #loc25))
#loc67 = loc(callsite(#loc28 at #loc25))
#loc68 = loc(callsite(#loc29 at #loc25))
#loc69 = loc(callsite(#loc30 at #loc25))
#loc70 = loc(callsite(#loc31 at #loc25))
#loc71 = loc(callsite(#loc32 at #loc25))
#loc72 = loc(callsite(#loc33 at #loc25))
#loc73 = loc(callsite(#loc39 at #loc40))
#loc75 = loc(callsite(#loc41 at #loc39))
#loc76 = loc(callsite(#loc42 at #loc39))
#loc77 = loc(callsite(#loc43 at #loc39))
#loc78 = loc(callsite(#loc44 at #loc39))
#loc79 = loc(callsite(#loc45 at #loc39))
#loc80 = loc(callsite(#loc46 at #loc39))
#loc81 = loc(callsite(#loc47 at #loc39))
#loc82 = loc(callsite(#loc48 at #loc39))
#loc83 = loc(callsite(#loc49 at #loc39))
#loc84 = loc(callsite(#loc50 at #loc39))
#loc85 = loc(callsite(#loc51 at #loc39))
#loc86 = loc(callsite(#loc52 at #loc39))
#loc87 = loc(callsite(#loc75 at #loc40))
#loc88 = loc(callsite(#loc76 at #loc40))
#loc89 = loc(callsite(#loc77 at #loc40))
#loc90 = loc(callsite(#loc78 at #loc40))
#loc91 = loc(callsite(#loc79 at #loc40))
#loc92 = loc(callsite(#loc80 at #loc40))
#loc93 = loc(callsite(#loc81 at #loc40))
#loc94 = loc(callsite(#loc82 at #loc40))
#loc95 = loc(callsite(#loc83 at #loc40))
#loc96 = loc(callsite(#loc84 at #loc40))
#loc97 = loc(callsite(#loc85 at #loc40))
#loc98 = loc(callsite(#loc86 at #loc40))
