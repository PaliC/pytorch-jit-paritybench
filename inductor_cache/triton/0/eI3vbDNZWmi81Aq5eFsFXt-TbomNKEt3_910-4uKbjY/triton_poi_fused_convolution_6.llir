; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 1, !dbg !14
  %14 = or disjoint i32 %12, 2, !dbg !14
  %15 = or disjoint i32 %12, 3, !dbg !14
  %16 = or disjoint i32 %12, 513, !dbg !14
  %17 = or disjoint i32 %12, 514, !dbg !14
  %18 = or disjoint i32 %12, 515, !dbg !14
  %19 = and i32 %10, 127, !dbg !14
  %20 = or disjoint i32 %19, 128, !dbg !14
  %21 = or disjoint i32 %19, 256, !dbg !14
  %22 = or disjoint i32 %19, 384, !dbg !14
  %23 = or disjoint i32 %19, 512, !dbg !14
  %24 = or disjoint i32 %19, 640, !dbg !14
  %25 = or disjoint i32 %19, 768, !dbg !14
  %26 = or disjoint i32 %19, 896, !dbg !14
  %27 = or disjoint i32 %9, %12, !dbg !15
  %28 = or disjoint i32 %9, %13, !dbg !15
  %29 = or disjoint i32 %9, %14, !dbg !15
  %30 = or disjoint i32 %9, %15, !dbg !15
  %31 = or disjoint i32 %27, 512, !dbg !15
  %32 = or disjoint i32 %9, %16, !dbg !15
  %33 = or disjoint i32 %9, %17, !dbg !15
  %34 = or disjoint i32 %9, %18, !dbg !15
  %35 = or disjoint i32 %9, %19, !dbg !15
  %36 = or disjoint i32 %9, %20, !dbg !15
  %37 = or disjoint i32 %9, %21, !dbg !15
  %38 = or disjoint i32 %9, %22, !dbg !15
  %39 = or disjoint i32 %9, %23, !dbg !15
  %40 = or disjoint i32 %9, %24, !dbg !15
  %41 = or disjoint i32 %9, %25, !dbg !15
  %42 = or disjoint i32 %9, %26, !dbg !15
  %.frozen = freeze i32 %6, !dbg !16
  %43 = sdiv i32 %.frozen, 64, !dbg !16
  %44 = mul i32 %43, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %44, !dbg !17
  %45 = shl i32 %27, 6, !dbg !18
  %46 = shl i32 %28, 6, !dbg !18
  %47 = shl i32 %29, 6, !dbg !18
  %48 = shl i32 %30, 6, !dbg !18
  %49 = shl i32 %31, 6, !dbg !18
  %50 = shl i32 %32, 6, !dbg !18
  %51 = shl i32 %33, 6, !dbg !18
  %52 = shl i32 %34, 6, !dbg !18
  %53 = shl i32 %35, 6, !dbg !18
  %54 = shl i32 %36, 6, !dbg !18
  %55 = shl i32 %37, 6, !dbg !18
  %56 = shl i32 %38, 6, !dbg !18
  %57 = shl i32 %39, 6, !dbg !18
  %58 = shl i32 %40, 6, !dbg !18
  %59 = shl i32 %41, 6, !dbg !18
  %60 = shl i32 %42, 6, !dbg !18
  %61 = shl i32 %43, 18, !dbg !19
  %62 = add i32 %61, %.decomposed, !dbg !20
  %63 = add i32 %62, %45, !dbg !21
  %64 = add i32 %62, %46, !dbg !21
  %65 = add i32 %62, %47, !dbg !21
  %66 = add i32 %62, %48, !dbg !21
  %67 = add i32 %62, %49, !dbg !21
  %68 = add i32 %62, %50, !dbg !21
  %69 = add i32 %62, %51, !dbg !21
  %70 = add i32 %62, %52, !dbg !21
  %71 = add i32 %62, %53, !dbg !21
  %72 = add i32 %62, %54, !dbg !21
  %73 = add i32 %62, %55, !dbg !21
  %74 = add i32 %62, %56, !dbg !21
  %75 = add i32 %62, %57, !dbg !21
  %76 = add i32 %62, %58, !dbg !21
  %77 = add i32 %62, %59, !dbg !21
  %78 = add i32 %62, %60, !dbg !21
  %79 = sext i32 %63 to i64, !dbg !22
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !22
  %81 = sext i32 %64 to i64, !dbg !22
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !22
  %83 = sext i32 %65 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !22
  %85 = sext i32 %66 to i64, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !22
  %87 = sext i32 %67 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !22
  %89 = sext i32 %68 to i64, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !22
  %91 = sext i32 %69 to i64, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !22
  %93 = sext i32 %70 to i64, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %7) #2, !dbg !23
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %7) #2, !dbg !23
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %7) #2, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %7) #2, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %7) #2, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %7) #2, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %7) #2, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %7) #2, !dbg !23
  %103 = shl i32 %6, 12, !dbg !24
  %104 = add i32 %27, %103, !dbg !25
  %105 = add i32 %103, %31, !dbg !25
  %106 = sext i32 %104 to i64, !dbg !26
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !26
  %108 = sext i32 %105 to i64, !dbg !26
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %96, i32 %97, i32 %98, ptr addrspace(1) %107, i1 %7) #2, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %99, i32 %100, i32 %101, i32 %102, ptr addrspace(1) %109, i1 %7) #2, !dbg !27
  %110 = sext i32 %71 to i64, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !28
  %112 = sext i32 %72 to i64, !dbg !28
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !28
  %114 = sext i32 %73 to i64, !dbg !28
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !28
  %116 = sext i32 %74 to i64, !dbg !28
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !28
  %118 = sext i32 %75 to i64, !dbg !28
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !28
  %120 = sext i32 %76 to i64, !dbg !28
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !28
  %122 = sext i32 %77 to i64, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !28
  %124 = sext i32 %78 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !28
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !29
  %127 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !29
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %129 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !29
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !29
  %131 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !29
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !29
  %133 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !29
  %135 = load i32, ptr addrspace(3) %134, align 4, !dbg !29
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !29
  %137 = load i32, ptr addrspace(3) %136, align 4, !dbg !29
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !29
  %139 = load i32, ptr addrspace(3) %138, align 4, !dbg !29
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !29
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %142 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %142, i1 true) #2, !dbg !29
  %143 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %143, i1 true) #2, !dbg !29
  %144 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %144, i1 true) #2, !dbg !29
  %145 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %145, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %146 = load i32, ptr addrspace(3) %134, align 4, !dbg !29
  %147 = load i32, ptr addrspace(3) %136, align 4, !dbg !29
  %148 = load i32, ptr addrspace(3) %138, align 4, !dbg !29
  %149 = load i32, ptr addrspace(3) %140, align 4, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %111, i1 %7) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %113, i1 %7) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %115, i1 %7) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %117, i1 %7) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %119, i1 %7) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %121, i1 %7) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %123, i1 %7) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %125, i1 %7) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpszzrez4pflvtdfu6ka6fr3qa4lae7adgucrrospbxrvogsa2or.py", directory: "inductor_cache/ps")
!4 = !{ptr @triton_poi_fused_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_6", linkageName: "triton_poi_fused_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 50, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 25, scope: !7)
!27 = !DILocation(line: 33, column: 46, scope: !7)
!28 = !DILocation(line: 34, column: 25, scope: !7)
!29 = !DILocation(line: 34, column: 56, scope: !7)
!30 = !DILocation(line: 34, column: 4, scope: !7)
