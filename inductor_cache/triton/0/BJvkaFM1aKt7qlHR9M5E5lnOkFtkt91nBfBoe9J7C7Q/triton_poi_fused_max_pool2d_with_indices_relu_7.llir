; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = icmp slt i32 %15, 784, !dbg !14
  %21 = icmp slt i32 %16, 784, !dbg !14
  %22 = icmp slt i32 %17, 784, !dbg !14
  %23 = icmp slt i32 %18, 784, !dbg !14
  %24 = icmp slt i32 %19, 784, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = icmp slt i32 %25, 64, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %27 = sdiv i32 %.frozen, 14, !dbg !17
  %28 = mul i32 %27, 14, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %.frozen9 = freeze i32 %16, !dbg !17
  %29 = sdiv i32 %.frozen9, 14, !dbg !17
  %30 = mul i32 %29, 14, !dbg !18
  %.decomposed10 = sub i32 %.frozen9, %30, !dbg !18
  %.frozen11 = freeze i32 %17, !dbg !17
  %31 = sdiv i32 %.frozen11, 14, !dbg !17
  %32 = mul i32 %31, 14, !dbg !18
  %.decomposed12 = sub i32 %.frozen11, %32, !dbg !18
  %.frozen13 = freeze i32 %18, !dbg !17
  %33 = sdiv i32 %.frozen13, 14, !dbg !17
  %34 = mul i32 %33, 14, !dbg !18
  %.decomposed14 = sub i32 %.frozen13, %34, !dbg !18
  %.frozen15 = freeze i32 %19, !dbg !19
  %35 = sdiv i32 %.frozen15, 196, !dbg !19
  %36 = mul i32 %35, 196, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %36, !dbg !20
  %37 = shl nsw i32 %.decomposed, 7, !dbg !21
  %38 = shl nsw i32 %.decomposed10, 7, !dbg !21
  %39 = shl nsw i32 %.decomposed12, 7, !dbg !21
  %40 = shl nsw i32 %.decomposed14, 7, !dbg !21
  %41 = mul i32 %27, 3584, !dbg !22
  %42 = mul i32 %29, 3584, !dbg !22
  %43 = mul i32 %31, 3584, !dbg !22
  %44 = mul i32 %33, 3584, !dbg !22
  %45 = add i32 %41, %37, !dbg !23
  %46 = add i32 %45, %25, !dbg !24
  %47 = add i32 %42, %38, !dbg !23
  %48 = add i32 %47, %25, !dbg !24
  %49 = add i32 %43, %39, !dbg !23
  %50 = add i32 %49, %25, !dbg !24
  %51 = add i32 %44, %40, !dbg !23
  %52 = add i32 %51, %25, !dbg !24
  %53 = sext i32 %46 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = sext i32 %48 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !25
  %57 = sext i32 %50 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !25
  %59 = sext i32 %52 to i64, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !25
  %61 = and i1 %26, %20, !dbg !26
  %62 = and i1 %26, %21, !dbg !26
  %63 = and i1 %26, %22, !dbg !26
  %64 = and i1 %26, %23, !dbg !26
  %65 = and i1 %26, %24, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %61) #2, !dbg !27
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %62) #2, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %63) #2, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %64) #2, !dbg !27
  %70 = add i32 %25, 64, !dbg !28
  %71 = add i32 %45, %70, !dbg !29
  %72 = add i32 %47, %70, !dbg !29
  %73 = add i32 %49, %70, !dbg !29
  %74 = add i32 %51, %70, !dbg !29
  %75 = sext i32 %71 to i64, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !30
  %77 = sext i32 %72 to i64, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !30
  %79 = sext i32 %73 to i64, !dbg !30
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !30
  %81 = sext i32 %74 to i64, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !30
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %61) #2, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %62) #2, !dbg !31
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %63) #2, !dbg !31
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %64) #2, !dbg !31
  %87 = add i32 %25, 1792, !dbg !32
  %88 = add i32 %45, %87, !dbg !33
  %89 = add i32 %47, %87, !dbg !33
  %90 = add i32 %49, %87, !dbg !33
  %91 = add i32 %51, %87, !dbg !33
  %92 = sext i32 %88 to i64, !dbg !34
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !34
  %94 = sext i32 %89 to i64, !dbg !34
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !34
  %96 = sext i32 %90 to i64, !dbg !34
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !34
  %98 = sext i32 %91 to i64, !dbg !34
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !34
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %61) #2, !dbg !35
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %62) #2, !dbg !35
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %63) #2, !dbg !35
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %64) #2, !dbg !35
  %104 = add i32 %25, 1856, !dbg !36
  %105 = add i32 %45, %104, !dbg !37
  %106 = add i32 %47, %104, !dbg !37
  %107 = add i32 %49, %104, !dbg !37
  %108 = add i32 %51, %104, !dbg !37
  %109 = sext i32 %105 to i64, !dbg !38
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !38
  %111 = sext i32 %106 to i64, !dbg !38
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !38
  %113 = sext i32 %107 to i64, !dbg !38
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !38
  %115 = sext i32 %108 to i64, !dbg !38
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !38
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %61) #2, !dbg !39
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %62) #2, !dbg !39
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %63) #2, !dbg !39
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %64) #2, !dbg !39
  %121 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !27
  %122 = insertelement <4 x i32> %121, i32 %68, i64 1, !dbg !27
  %123 = insertelement <4 x i32> %122, i32 %67, i64 2, !dbg !27
  %124 = insertelement <4 x i32> %123, i32 %66, i64 3, !dbg !27
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !27
  %126 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !31
  %127 = insertelement <4 x i32> %126, i32 %85, i64 1, !dbg !31
  %128 = insertelement <4 x i32> %127, i32 %84, i64 2, !dbg !31
  %129 = insertelement <4 x i32> %128, i32 %83, i64 3, !dbg !31
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !31
  %131 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !35
  %132 = insertelement <4 x i32> %131, i32 %102, i64 1, !dbg !35
  %133 = insertelement <4 x i32> %132, i32 %101, i64 2, !dbg !35
  %134 = insertelement <4 x i32> %133, i32 %100, i64 3, !dbg !35
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !35
  %136 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !39
  %137 = insertelement <4 x i32> %136, i32 %119, i64 1, !dbg !39
  %138 = insertelement <4 x i32> %137, i32 %118, i64 2, !dbg !39
  %139 = insertelement <4 x i32> %138, i32 %117, i64 3, !dbg !39
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !39
  %141 = fcmp ogt <4 x float> %130, %125, !dbg !40
  %142 = extractelement <4 x i1> %141, i64 3, !dbg !41
  %143 = zext i1 %142 to i8, !dbg !41
  %144 = extractelement <4 x i1> %141, i64 2, !dbg !41
  %145 = zext i1 %144 to i8, !dbg !41
  %146 = extractelement <4 x i1> %141, i64 1, !dbg !41
  %147 = zext i1 %146 to i8, !dbg !41
  %148 = extractelement <4 x i1> %141, i64 0, !dbg !41
  %149 = zext i1 %148 to i8, !dbg !41
  %150 = fcmp uno <4 x float> %130, zeroinitializer, !dbg !42
  %151 = or <4 x i1> %141, %150, !dbg !46
  %.v = select <4 x i1> %151, <4 x i32> %129, <4 x i32> %124, !dbg !47
  %152 = bitcast <4 x i32> %.v to <4 x float>, !dbg !47
  %153 = fcmp olt <4 x float> %152, %135, !dbg !48
  %154 = extractelement <4 x i1> %153, i64 3, !dbg !49
  %155 = select i1 %154, i8 2, i8 %143, !dbg !49
  %156 = extractelement <4 x i1> %153, i64 2, !dbg !49
  %157 = select i1 %156, i8 2, i8 %145, !dbg !49
  %158 = extractelement <4 x i1> %153, i64 1, !dbg !49
  %159 = select i1 %158, i8 2, i8 %147, !dbg !49
  %160 = extractelement <4 x i1> %153, i64 0, !dbg !49
  %161 = select i1 %160, i8 2, i8 %149, !dbg !49
  %162 = fcmp uno <4 x float> %135, zeroinitializer, !dbg !50
  %163 = or <4 x i1> %153, %162, !dbg !52
  %.v7 = select <4 x i1> %163, <4 x i32> %134, <4 x i32> %.v, !dbg !53
  %164 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !53
  %165 = fcmp olt <4 x float> %164, %140, !dbg !54
  %166 = extractelement <4 x i1> %165, i64 3, !dbg !55
  %167 = select i1 %166, i8 3, i8 %155, !dbg !55
  %168 = extractelement <4 x i1> %165, i64 2, !dbg !55
  %169 = select i1 %168, i8 3, i8 %157, !dbg !55
  %170 = extractelement <4 x i1> %165, i64 1, !dbg !55
  %171 = select i1 %170, i8 3, i8 %159, !dbg !55
  %172 = extractelement <4 x i1> %165, i64 0, !dbg !55
  %173 = select i1 %172, i8 3, i8 %161, !dbg !55
  %174 = fcmp uno <4 x float> %140, zeroinitializer, !dbg !56
  %175 = or <4 x i1> %165, %174, !dbg !58
  %.v8 = select <4 x i1> %175, <4 x i32> %139, <4 x i32> %.v7, !dbg !59
  %176 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !59
  %177 = fcmp olt <4 x float> %176, zeroinitializer, !dbg !60
  %178 = extractelement <4 x i1> %177, i64 3, !dbg !62
  %179 = extractelement <4 x float> %176, i64 3, !dbg !62
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !62
  %181 = extractelement <4 x i1> %177, i64 2, !dbg !62
  %182 = extractelement <4 x float> %176, i64 2, !dbg !62
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !62
  %184 = extractelement <4 x i1> %177, i64 1, !dbg !62
  %185 = extractelement <4 x float> %176, i64 1, !dbg !62
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !62
  %187 = extractelement <4 x i1> %177, i64 0, !dbg !62
  %188 = extractelement <4 x float> %176, i64 0, !dbg !62
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !62
  %190 = shl i32 %15, 6, !dbg !63
  %191 = shl i32 %16, 6, !dbg !63
  %192 = shl i32 %17, 6, !dbg !63
  %193 = shl i32 %18, 6, !dbg !63
  %194 = add i32 %190, %25, !dbg !64
  %195 = add i32 %191, %25, !dbg !64
  %196 = add i32 %192, %25, !dbg !64
  %197 = add i32 %193, %25, !dbg !64
  %198 = sext i32 %194 to i64, !dbg !65
  %199 = getelementptr i8, ptr addrspace(1) %1, i64 %198, !dbg !65
  %200 = sext i32 %195 to i64, !dbg !65
  %201 = getelementptr i8, ptr addrspace(1) %1, i64 %200, !dbg !65
  %202 = sext i32 %196 to i64, !dbg !65
  %203 = getelementptr i8, ptr addrspace(1) %1, i64 %202, !dbg !65
  %204 = sext i32 %197 to i64, !dbg !65
  %205 = getelementptr i8, ptr addrspace(1) %1, i64 %204, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %167, ptr addrspace(1) %199, i1 %61) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %169, ptr addrspace(1) %201, i1 %62) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %171, ptr addrspace(1) %203, i1 %63) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %173, ptr addrspace(1) %205, i1 %64) #2, !dbg !66
  %206 = mul i32 %25, 196, !dbg !67
  %207 = add i32 %.decomposed16, %206, !dbg !68
  %208 = mul i32 %35, 12544, !dbg !69
  %209 = add i32 %207, %208, !dbg !70
  %210 = sext i32 %209 to i64, !dbg !71
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %210, !dbg !71
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !72
  %213 = bitcast float %180 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !72
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !72
  %215 = bitcast float %183 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !72
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !72
  %217 = bitcast float %186 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !72
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !72
  %219 = bitcast float %189 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !72
  %.extract = load i32, ptr addrspace(3) %220, align 16, !dbg !72
  %221 = getelementptr inbounds i8, ptr addrspace(3) %220, i32 4, !dbg !72
  %.extract4 = load i32, ptr addrspace(3) %221, align 4, !dbg !72
  %222 = getelementptr inbounds i8, ptr addrspace(3) %220, i32 8, !dbg !72
  %.extract5 = load i32, ptr addrspace(3) %222, align 8, !dbg !72
  %223 = getelementptr inbounds i8, ptr addrspace(3) %220, i32 12, !dbg !72
  %.extract6 = load i32, ptr addrspace(3) %223, align 4, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %211, i1 %65) #2, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdyhrp4t2kxpjbmmpk3riujudyxfsk2phaotj7nw5cefgsu26a4u.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 49, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 44, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 62, scope: !7)
!27 = !DILocation(line: 34, column: 54, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 49, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 59, scope: !7)
!32 = !DILocation(line: 36, column: 37, scope: !7)
!33 = !DILocation(line: 36, column: 51, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 61, scope: !7)
!36 = !DILocation(line: 37, column: 38, scope: !7)
!37 = !DILocation(line: 37, column: 52, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 62, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 32, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 42, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 43, column: 18, scope: !7)
!49 = !DILocation(line: 45, column: 33, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !51)
!51 = !DILocation(line: 46, column: 41, scope: !7)
!52 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !51)
!53 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !51)
!54 = !DILocation(line: 47, column: 20, scope: !7)
!55 = !DILocation(line: 49, column: 35, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !57)
!57 = !DILocation(line: 50, column: 42, scope: !7)
!58 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !57)
!59 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !57)
!60 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !61)
!61 = !DILocation(line: 52, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !61)
!63 = !DILocation(line: 53, column: 33, scope: !7)
!64 = !DILocation(line: 53, column: 30, scope: !7)
!65 = !DILocation(line: 53, column: 25, scope: !7)
!66 = !DILocation(line: 53, column: 45, scope: !7)
!67 = !DILocation(line: 54, column: 34, scope: !7)
!68 = !DILocation(line: 54, column: 30, scope: !7)
!69 = !DILocation(line: 54, column: 45, scope: !7)
!70 = !DILocation(line: 54, column: 39, scope: !7)
!71 = !DILocation(line: 54, column: 25, scope: !7)
!72 = !DILocation(line: 54, column: 57, scope: !7)
!73 = !DILocation(line: 54, column: 4, scope: !7)
