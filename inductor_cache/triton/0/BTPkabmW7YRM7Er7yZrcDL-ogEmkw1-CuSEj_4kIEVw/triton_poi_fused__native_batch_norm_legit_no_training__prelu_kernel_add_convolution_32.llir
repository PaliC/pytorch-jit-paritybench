; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = or disjoint i32 %16, 128, !dbg !12
  %18 = or disjoint i32 %16, 256, !dbg !12
  %19 = or disjoint i32 %16, 384, !dbg !12
  %20 = or disjoint i32 %14, %16, !dbg !13
  %21 = or disjoint i32 %14, %17, !dbg !13
  %22 = or disjoint i32 %14, %18, !dbg !13
  %23 = or disjoint i32 %14, %19, !dbg !13
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %25 = icmp slt i32 %24, 16, !dbg !15
  %26 = shl i32 %20, 4, !dbg !16
  %27 = shl i32 %21, 4, !dbg !16
  %28 = shl i32 %22, 4, !dbg !16
  %29 = shl i32 %23, 4, !dbg !16
  %30 = add i32 %26, %24, !dbg !17
  %31 = add i32 %27, %24, !dbg !17
  %32 = add i32 %28, %24, !dbg !17
  %33 = add i32 %29, %24, !dbg !17
  %34 = sext i32 %30 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !18
  %36 = sext i32 %31 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = sext i32 %32 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = sext i32 %33 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %25) #4, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %25) #4, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %25) #4, !dbg !19
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %25) #4, !dbg !19
  %46 = sext i32 %24 to i64, !dbg !20
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !20
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %25) #4, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %25) #4, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %25) #4, !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %25) #4, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %25) #4, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !30
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %25) #4, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #4, !dbg !31
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %25) #4, !dbg !31
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %25) #4, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #4, !dbg !32
  %67 = fadd float %53, 0x3EE4F8B580000000, !dbg !33
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %68, 0, !dbg !34
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %69, 0, !dbg !34
  br i1 %.not.i, label %75, label %70, !dbg !34

70:                                               ; preds = %12
  br i1 %.not1.i, label %73, label %71, !dbg !34

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

75:                                               ; preds = %12
  br i1 %.not1.i, label %78, label %76, !dbg !34

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !34
  %80 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !19
  %81 = insertelement <4 x i32> %80, i32 %44, i64 1, !dbg !19
  %82 = insertelement <4 x i32> %81, i32 %43, i64 2, !dbg !19
  %83 = insertelement <4 x i32> %82, i32 %42, i64 3, !dbg !19
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !19
  %85 = bitcast i32 %66 to float, !dbg !32
  %86 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !31
  %87 = insertelement <4 x i32> %86, i32 %64, i64 1, !dbg !31
  %88 = insertelement <4 x i32> %87, i32 %63, i64 2, !dbg !31
  %89 = insertelement <4 x i32> %88, i32 %62, i64 3, !dbg !31
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !31
  %91 = shl i32 %15, 2, !dbg !12
  %92 = and i32 %91, 508, !dbg !12
  %93 = or disjoint i32 %14, %92, !dbg !13
  %.frozen = freeze i32 %93, !dbg !35
  %94 = sdiv i32 %.frozen, 1024, !dbg !35
  %95 = mul i32 %94, 1024, !dbg !36
  %.decomposed = sub i32 %.frozen, %95, !dbg !36
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %97 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !38
  %98 = bitcast <4 x i32> %97 to <4 x float>, !dbg !38
  %99 = shufflevector <4 x float> %98, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %100 = fadd <4 x float> %99, %84, !dbg !38
  %101 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !39
  %102 = bitcast <4 x i32> %101 to <4 x float>, !dbg !39
  %103 = shufflevector <4 x float> %102, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !39
  %104 = fsub <4 x float> %100, %103, !dbg !39
  %105 = insertelement <4 x float> poison, float %96, i64 0, !dbg !40
  %106 = shufflevector <4 x float> %105, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %107 = fmul <4 x float> %104, %106, !dbg !40
  %108 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !41
  %109 = bitcast <4 x i32> %108 to <4 x float>, !dbg !41
  %110 = shufflevector <4 x float> %109, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !41
  %111 = fmul <4 x float> %107, %110, !dbg !41
  %112 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !42
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !42
  %114 = shufflevector <4 x float> %113, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !42
  %115 = fadd <4 x float> %111, %114, !dbg !42
  %116 = fadd <4 x float> %115, %90, !dbg !43
  %117 = fcmp ogt <4 x float> %116, zeroinitializer, !dbg !44
  %118 = extractelement <4 x float> %116, i64 3, !dbg !45
  %119 = fmul float %118, %85, !dbg !46
  %120 = extractelement <4 x float> %116, i64 2, !dbg !45
  %121 = fmul float %120, %85, !dbg !46
  %122 = extractelement <4 x float> %116, i64 1, !dbg !45
  %123 = fmul float %122, %85, !dbg !46
  %124 = extractelement <4 x float> %116, i64 0, !dbg !45
  %125 = fmul float %124, %85, !dbg !46
  %126 = extractelement <4 x i1> %117, i64 3, !dbg !47
  %127 = select i1 %126, float %118, float %119, !dbg !47
  %128 = extractelement <4 x i1> %117, i64 2, !dbg !47
  %129 = select i1 %128, float %120, float %121, !dbg !47
  %130 = extractelement <4 x i1> %117, i64 1, !dbg !47
  %131 = select i1 %130, float %122, float %123, !dbg !47
  %132 = extractelement <4 x i1> %117, i64 0, !dbg !47
  %133 = select i1 %132, float %124, float %125, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %bc = bitcast <4 x float> %100 to <4 x i32>, !dbg !49
  %134 = extractelement <4 x i32> %bc, i64 3, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %35, i1 %25) #4, !dbg !49
  %bc7 = bitcast <4 x float> %100 to <4 x i32>, !dbg !49
  %135 = extractelement <4 x i32> %bc7, i64 2, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %37, i1 %25) #4, !dbg !49
  %bc8 = bitcast <4 x float> %100 to <4 x i32>, !dbg !49
  %136 = extractelement <4 x i32> %bc8, i64 1, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %39, i1 %25) #4, !dbg !49
  %bc9 = bitcast <4 x float> %100 to <4 x i32>, !dbg !49
  %137 = extractelement <4 x i32> %bc9, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %41, i1 %25) #4, !dbg !49
  %138 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !50
  %139 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !50
  %140 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !50
  %141 = getelementptr float, ptr addrspace(1) %8, i64 %40, !dbg !50
  %142 = bitcast float %118 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %138, i1 %25) #4, !dbg !45
  %143 = bitcast float %120 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %139, i1 %25) #4, !dbg !45
  %144 = bitcast float %122 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %140, i1 %25) #4, !dbg !45
  %145 = bitcast float %124 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %141, i1 %25) #4, !dbg !45
  %146 = shl i32 %24, 10, !dbg !51
  %147 = add i32 %.decomposed, %146, !dbg !52
  %148 = shl i32 %94, 14, !dbg !53
  %149 = add i32 %147, %148, !dbg !54
  %150 = sext i32 %149 to i64, !dbg !55
  %151 = getelementptr float, ptr addrspace(1) %9, i64 %150, !dbg !55
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !56
  %153 = bitcast float %127 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #4, !dbg !56
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !56
  %155 = bitcast float %129 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #4, !dbg !56
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !56
  %157 = bitcast float %131 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #4, !dbg !56
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !56
  %159 = bitcast float %133 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !56
  %.extract = load i32, ptr addrspace(3) %160, align 16, !dbg !56
  %161 = getelementptr inbounds i8, ptr addrspace(3) %160, i32 4, !dbg !56
  %.extract4 = load i32, ptr addrspace(3) %161, align 4, !dbg !56
  %162 = getelementptr inbounds i8, ptr addrspace(3) %160, i32 8, !dbg !56
  %.extract5 = load i32, ptr addrspace(3) %162, align 8, !dbg !56
  %163 = getelementptr inbounds i8, ptr addrspace(3) %160, i32 12, !dbg !56
  %.extract6 = load i32, ptr addrspace(3) %163, align 4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %151, i1 %25) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfqt4pmzsz6crjntf63rptlcqidr5wxw62teq4xaps3knv2ujq7j.py", directory: "inductor_cache/fq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 42, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 44, scope: !7)
!32 = !DILocation(line: 39, column: 20, scope: !7)
!33 = !DILocation(line: 44, column: 18, scope: !7)
!34 = !DILocation(line: 45, column: 26, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 19, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 45, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 35, scope: !7)
!48 = !DILocation(line: 58, column: 4, scope: !7)
!49 = !DILocation(line: 59, column: 47, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 61, column: 35, scope: !7)
!52 = !DILocation(line: 61, column: 30, scope: !7)
!53 = !DILocation(line: 61, column: 46, scope: !7)
!54 = !DILocation(line: 61, column: 40, scope: !7)
!55 = !DILocation(line: 61, column: 25, scope: !7)
!56 = !DILocation(line: 61, column: 58, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
