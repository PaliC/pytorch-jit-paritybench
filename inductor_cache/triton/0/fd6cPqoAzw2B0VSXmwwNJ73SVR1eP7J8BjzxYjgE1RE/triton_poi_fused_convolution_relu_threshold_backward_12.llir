; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 56, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %13, 8, !dbg !12
  %15 = or disjoint i32 %13, 16, !dbg !12
  %16 = or disjoint i32 %13, 24, !dbg !12
  %17 = or disjoint i32 %13, 32, !dbg !12
  %18 = or disjoint i32 %13, 40, !dbg !12
  %19 = or disjoint i32 %13, 48, !dbg !12
  %20 = or disjoint i32 %13, 56, !dbg !12
  %21 = or disjoint i32 %8, %11, !dbg !13
  %22 = or disjoint i32 %21, 4, !dbg !13
  %23 = or disjoint i32 %8, %13, !dbg !13
  %24 = or disjoint i32 %8, %14, !dbg !13
  %25 = or disjoint i32 %8, %15, !dbg !13
  %26 = or disjoint i32 %8, %16, !dbg !13
  %27 = or disjoint i32 %8, %17, !dbg !13
  %28 = or disjoint i32 %8, %18, !dbg !13
  %29 = or disjoint i32 %8, %19, !dbg !13
  %30 = or disjoint i32 %8, %20, !dbg !13
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %32 = shl i32 %31, 4, !dbg !15
  %33 = lshr i32 %9, 3, !dbg !16
  %34 = and i32 %33, 15, !dbg !16
  %35 = and i32 %9, 15, !dbg !16
  %36 = or disjoint i32 %32, %34, !dbg !17
  %37 = or disjoint i32 %32, %35, !dbg !17
  %38 = icmp slt i32 %36, 9, !dbg !18
  %39 = icmp slt i32 %37, 9, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %40 = sdiv i32 %.frozen, 256, !dbg !19
  %41 = mul i32 %40, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %41, !dbg !20
  %42 = srem i32 %22, 256, !dbg !20
  %43 = shl i32 %36, 8, !dbg !21
  %44 = mul i32 %40, 2304, !dbg !22
  %45 = add i32 %44, %43, !dbg !23
  %46 = add i32 %45, %.decomposed, !dbg !24
  %47 = add i32 %45, %42, !dbg !24
  %48 = sext i32 %46 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %47 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %38) #2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %38) #2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %62 = sext i32 %.decomposed to i64, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !27
  %64 = sext i32 %42 to i64, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #2, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %76 = mul i32 %23, 9, !dbg !29
  %77 = mul i32 %24, 9, !dbg !29
  %78 = mul i32 %25, 9, !dbg !29
  %79 = mul i32 %26, 9, !dbg !29
  %80 = mul i32 %27, 9, !dbg !29
  %81 = mul i32 %28, 9, !dbg !29
  %82 = mul i32 %29, 9, !dbg !29
  %83 = mul i32 %30, 9, !dbg !29
  %84 = add i32 %37, %76, !dbg !30
  %85 = add i32 %37, %77, !dbg !30
  %86 = add i32 %37, %78, !dbg !30
  %87 = add i32 %37, %79, !dbg !30
  %88 = add i32 %37, %80, !dbg !30
  %89 = add i32 %37, %81, !dbg !30
  %90 = add i32 %37, %82, !dbg !30
  %91 = add i32 %37, %83, !dbg !30
  %92 = sext i32 %84 to i64, !dbg !31
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !31
  %94 = sext i32 %85 to i64, !dbg !31
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !31
  %96 = sext i32 %86 to i64, !dbg !31
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !31
  %98 = sext i32 %87 to i64, !dbg !31
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !31
  %100 = sext i32 %88 to i64, !dbg !31
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !31
  %102 = sext i32 %89 to i64, !dbg !31
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !31
  %104 = sext i32 %90 to i64, !dbg !31
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !31
  %106 = sext i32 %91 to i64, !dbg !31
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !31
  %108 = shl i32 %9, 7, !dbg !32
  %109 = and i32 %108, 896, !dbg !32
  %110 = or disjoint i32 %109, %34, !dbg !32
  %111 = and i32 %9, 127, !dbg !32
  %112 = lshr exact i32 %109, 4, !dbg !32
  %113 = add nuw nsw i32 %112, %110, !dbg !32
  %114 = zext nneg i32 %113 to i64, !dbg !32
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !32
  %116 = or disjoint i32 %110, 16, !dbg !32
  %117 = lshr i32 %116, 4, !dbg !32
  %118 = add nuw nsw i32 %117, %116, !dbg !32
  %119 = zext nneg i32 %118 to i64, !dbg !32
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !32
  %121 = or disjoint i32 %110, 32, !dbg !32
  %122 = lshr i32 %121, 4, !dbg !32
  %123 = add nuw nsw i32 %122, %121, !dbg !32
  %124 = zext nneg i32 %123 to i64, !dbg !32
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !32
  %126 = or disjoint i32 %110, 48, !dbg !32
  %127 = lshr i32 %126, 4, !dbg !32
  %128 = add nuw nsw i32 %127, %126, !dbg !32
  %129 = zext nneg i32 %128 to i64, !dbg !32
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !32
  %131 = or disjoint i32 %110, 64, !dbg !32
  %132 = lshr i32 %131, 4, !dbg !32
  %133 = add nuw nsw i32 %132, %131, !dbg !32
  %134 = zext nneg i32 %133 to i64, !dbg !32
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !32
  %136 = or disjoint i32 %110, 80, !dbg !32
  %137 = lshr i32 %136, 4, !dbg !32
  %138 = add nuw nsw i32 %137, %136, !dbg !32
  %139 = zext nneg i32 %138 to i64, !dbg !32
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !32
  %141 = or disjoint i32 %110, 96, !dbg !32
  %142 = lshr i32 %141, 4, !dbg !32
  %143 = add nuw nsw i32 %142, %141, !dbg !32
  %144 = zext nneg i32 %143 to i64, !dbg !32
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !32
  %146 = or disjoint i32 %110, 112, !dbg !32
  %147 = lshr i32 %146, 4, !dbg !32
  %148 = add nuw nsw i32 %147, %146, !dbg !32
  %149 = zext nneg i32 %148 to i64, !dbg !32
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %149, !dbg !32
  %151 = lshr i32 %111, 4, !dbg !32
  %152 = add nuw nsw i32 %151, %111, !dbg !32
  %153 = zext nneg i32 %152 to i64, !dbg !32
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %153, !dbg !32
  %155 = or disjoint i32 %111, 128, !dbg !32
  %156 = lshr i32 %155, 4, !dbg !32
  %157 = add nuw nsw i32 %156, %155, !dbg !32
  %158 = zext nneg i32 %157 to i64, !dbg !32
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !32
  %160 = or disjoint i32 %111, 256, !dbg !32
  %161 = lshr i32 %160, 4, !dbg !32
  %162 = add nuw nsw i32 %161, %160, !dbg !32
  %163 = zext nneg i32 %162 to i64, !dbg !32
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %163, !dbg !32
  %165 = or disjoint i32 %111, 384, !dbg !32
  %166 = lshr i32 %165, 4, !dbg !32
  %167 = add nuw nsw i32 %166, %165, !dbg !32
  %168 = zext nneg i32 %167 to i64, !dbg !32
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %168, !dbg !32
  %170 = or disjoint i32 %111, 512, !dbg !32
  %171 = lshr i32 %170, 4, !dbg !32
  %172 = add nuw nsw i32 %171, %170, !dbg !32
  %173 = zext nneg i32 %172 to i64, !dbg !32
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %173, !dbg !32
  %175 = or disjoint i32 %111, 640, !dbg !32
  %176 = lshr i32 %175, 4, !dbg !32
  %177 = add nuw nsw i32 %176, %175, !dbg !32
  %178 = zext nneg i32 %177 to i64, !dbg !32
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %178, !dbg !32
  %180 = or disjoint i32 %111, 768, !dbg !32
  %181 = lshr i32 %180, 4, !dbg !32
  %182 = add nuw nsw i32 %181, %180, !dbg !32
  %183 = zext nneg i32 %182 to i64, !dbg !32
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %183, !dbg !32
  %185 = or disjoint i32 %111, 896, !dbg !32
  %186 = lshr i32 %185, 4, !dbg !32
  %187 = add nuw nsw i32 %186, %185, !dbg !32
  %188 = zext nneg i32 %187 to i64, !dbg !32
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %188, !dbg !32
  %190 = getelementptr i1, ptr addrspace(1) %3, i64 %48, !dbg !33
  %191 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !26
  %192 = insertelement <4 x i32> %191, i32 %54, i64 1, !dbg !26
  %193 = insertelement <4 x i32> %192, i32 %55, i64 2, !dbg !26
  %194 = insertelement <4 x i32> %193, i32 %56, i64 3, !dbg !26
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !26
  %196 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !28
  %197 = insertelement <4 x i32> %196, i32 %68, i64 1, !dbg !28
  %198 = insertelement <4 x i32> %197, i32 %69, i64 2, !dbg !28
  %199 = insertelement <4 x i32> %198, i32 %70, i64 3, !dbg !28
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !28
  %201 = fadd <4 x float> %195, %200, !dbg !34
  %202 = fcmp olt <4 x float> %201, zeroinitializer, !dbg !35
  %203 = select <4 x i1> %202, <4 x float> zeroinitializer, <4 x float> %201, !dbg !39
  %204 = fcmp ole <4 x float> %203, zeroinitializer, !dbg !40
  %205 = extractelement <4 x float> %203, i64 0, !dbg !32
  %206 = bitcast float %205 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %206, i1 true) #2, !dbg !32
  %207 = extractelement <4 x float> %203, i64 1, !dbg !32
  %208 = bitcast float %207 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %208, i1 true) #2, !dbg !32
  %209 = extractelement <4 x float> %203, i64 2, !dbg !32
  %210 = bitcast float %209 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %210, i1 true) #2, !dbg !32
  %211 = extractelement <4 x float> %203, i64 3, !dbg !32
  %212 = bitcast float %211 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %212, i1 true) #2, !dbg !32
  %213 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !26
  %214 = insertelement <4 x i32> %213, i32 %59, i64 1, !dbg !26
  %215 = insertelement <4 x i32> %214, i32 %60, i64 2, !dbg !26
  %216 = insertelement <4 x i32> %215, i32 %61, i64 3, !dbg !26
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !26
  %218 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !28
  %219 = insertelement <4 x i32> %218, i32 %73, i64 1, !dbg !28
  %220 = insertelement <4 x i32> %219, i32 %74, i64 2, !dbg !28
  %221 = insertelement <4 x i32> %220, i32 %75, i64 3, !dbg !28
  %222 = bitcast <4 x i32> %221 to <4 x float>, !dbg !28
  %223 = fadd <4 x float> %217, %222, !dbg !34
  %224 = fcmp olt <4 x float> %223, zeroinitializer, !dbg !35
  %225 = select <4 x i1> %224, <4 x float> zeroinitializer, <4 x float> %223, !dbg !39
  %226 = fcmp ole <4 x float> %225, zeroinitializer, !dbg !40
  %227 = extractelement <4 x float> %225, i64 0, !dbg !32
  %228 = bitcast float %227 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %228, i1 true) #2, !dbg !32
  %229 = extractelement <4 x float> %225, i64 1, !dbg !32
  %230 = bitcast float %229 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %230, i1 true) #2, !dbg !32
  %231 = extractelement <4 x float> %225, i64 2, !dbg !32
  %232 = bitcast float %231 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %232, i1 true) #2, !dbg !32
  %233 = extractelement <4 x float> %225, i64 3, !dbg !32
  %234 = bitcast float %233 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %234, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %235 = load i32, ptr addrspace(3) %154, align 4, !dbg !32
  %236 = load i32, ptr addrspace(3) %159, align 4, !dbg !32
  %237 = load i32, ptr addrspace(3) %164, align 4, !dbg !32
  %238 = load i32, ptr addrspace(3) %169, align 4, !dbg !32
  %239 = load i32, ptr addrspace(3) %174, align 4, !dbg !32
  %240 = load i32, ptr addrspace(3) %179, align 4, !dbg !32
  %241 = load i32, ptr addrspace(3) %184, align 4, !dbg !32
  %242 = load i32, ptr addrspace(3) %189, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %235, ptr addrspace(1) %93, i1 %39) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %236, ptr addrspace(1) %95, i1 %39) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %237, ptr addrspace(1) %97, i1 %39) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %238, ptr addrspace(1) %99, i1 %39) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %239, ptr addrspace(1) %101, i1 %39) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %240, ptr addrspace(1) %103, i1 %39) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %105, i1 %39) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %242, ptr addrspace(1) %107, i1 %39) #2, !dbg !32
  %243 = zext <4 x i1> %204 to <4 x i8>, !dbg !41
  %244 = bitcast <4 x i8> %243 to i32, !dbg !41
  %245 = zext <4 x i1> %226 to <4 x i8>, !dbg !41
  %246 = bitcast <4 x i8> %245 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %244, i32 %246, ptr addrspace(1) %190, i1 %38) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdvdquyhqlj5ir4aq5kytckh6jh5lwld37cycetfwuod46vf4miv.py", directory: "inductor_cache/dv")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_12", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 32, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 25, scope: !7)
!32 = !DILocation(line: 39, column: 43, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 40, column: 55, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
