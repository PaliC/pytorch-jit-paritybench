; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 513, !dbg !13
  %20 = or disjoint i32 %14, 514, !dbg !13
  %21 = or disjoint i32 %14, 515, !dbg !13
  %22 = icmp slt i32 %14, 134144, !dbg !14
  %23 = icmp slt i32 %18, 134144, !dbg !14
  %24 = srem i32 %14, 131, !dbg !15
  %25 = srem i32 %15, 131, !dbg !15
  %26 = srem i32 %16, 131, !dbg !15
  %27 = srem i32 %17, 131, !dbg !15
  %28 = srem i32 %18, 131, !dbg !15
  %29 = srem i32 %19, 131, !dbg !15
  %30 = srem i32 %20, 131, !dbg !15
  %31 = srem i32 %21, 131, !dbg !15
  %32 = sext i32 %14 to i64, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !16
  %34 = sext i32 %18 to i64, !dbg !16
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !16
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %22) #3, !dbg !17
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #3, !dbg !17
  %38 = sext i32 %24 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !18
  %40 = sext i32 %25 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !18
  %42 = sext i32 %26 to i64, !dbg !18
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !18
  %44 = sext i32 %27 to i64, !dbg !18
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !18
  %46 = sext i32 %28 to i64, !dbg !18
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !18
  %48 = sext i32 %29 to i64, !dbg !18
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !18
  %50 = sext i32 %30 to i64, !dbg !18
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !18
  %52 = sext i32 %31 to i64, !dbg !18
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !18
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #3, !dbg !19
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %22) #3, !dbg !19
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %22) #3, !dbg !19
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %22) #3, !dbg !19
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %23) #3, !dbg !19
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %23) #3, !dbg !19
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #3, !dbg !19
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %23) #3, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !20
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !20
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !20
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !20
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !20
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #3, !dbg !21
  %71 = bitcast i32 %70 to float, !dbg !21
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %22) #3, !dbg !21
  %73 = bitcast i32 %72 to float, !dbg !21
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %22) #3, !dbg !21
  %75 = bitcast i32 %74 to float, !dbg !21
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !21
  %77 = bitcast i32 %76 to float, !dbg !21
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !21
  %79 = bitcast i32 %78 to float, !dbg !21
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %23) #3, !dbg !21
  %81 = bitcast i32 %80 to float, !dbg !21
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %23) #3, !dbg !21
  %83 = bitcast i32 %82 to float, !dbg !21
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %23) #3, !dbg !21
  %85 = bitcast i32 %84 to float, !dbg !21
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !22
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !22
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !22
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !22
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %22) #3, !dbg !23
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %22) #3, !dbg !23
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !23
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %22) #3, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %23) #3, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %23) #3, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %23) #3, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %23) #3, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !24
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !24
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !24
  %105 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !24
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !24
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !24
  %108 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !24
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !24
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %22) #3, !dbg !25
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %22) #3, !dbg !25
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %22) #3, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %22) #3, !dbg !25
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %23) #3, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #3, !dbg !25
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %23) #3, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %23) #3, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !26
  %119 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !26
  %120 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !26
  %123 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !26
  %124 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !26
  %125 = getelementptr float, ptr addrspace(1) %6, i64 %52, !dbg !26
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #3, !dbg !27
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %22) #3, !dbg !27
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %22) #3, !dbg !27
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %22) #3, !dbg !27
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %23) #3, !dbg !27
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %23) #3, !dbg !27
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %23) #3, !dbg !27
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %23) #3, !dbg !27
  %134 = fadd float %71, 0x3EE4F8B580000000, !dbg !28
  %135 = fadd float %73, 0x3EE4F8B580000000, !dbg !28
  %136 = fadd float %75, 0x3EE4F8B580000000, !dbg !28
  %137 = fadd float %77, 0x3EE4F8B580000000, !dbg !28
  %138 = fadd float %79, 0x3EE4F8B580000000, !dbg !28
  %139 = fadd float %81, 0x3EE4F8B580000000, !dbg !28
  %140 = fadd float %83, 0x3EE4F8B580000000, !dbg !28
  %141 = fadd float %85, 0x3EE4F8B580000000, !dbg !28
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %142, 0, !dbg !29
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %143, 0, !dbg !29
  br i1 %.not.i, label %149, label %144, !dbg !29

144:                                              ; preds = %8
  br i1 %.not1.i, label %147, label %145, !dbg !29

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

149:                                              ; preds = %8
  br i1 %.not1.i, label %152, label %150, !dbg !29

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %145, %147, %150, %152
  %.0.i = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !29
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %154, 0, !dbg !29
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %155, 0, !dbg !29
  br i1 %.not.i1, label %161, label %156, !dbg !29

156:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %159, label %157, !dbg !29

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

161:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %164, label %162, !dbg !29

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %157, %159, %162, %164
  %.0.i3 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !29
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %166, 0, !dbg !29
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %167, 0, !dbg !29
  br i1 %.not.i6, label %173, label %168, !dbg !29

168:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %171, label %169, !dbg !29

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

173:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %176, label %174, !dbg !29

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %169, %171, %174, %176
  %.0.i8 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !29
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %178, 0, !dbg !29
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %179, 0, !dbg !29
  br i1 %.not.i11, label %185, label %180, !dbg !29

180:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %183, label %181, !dbg !29

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

185:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %188, label %186, !dbg !29

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %181, %183, %186, %188
  %.0.i13 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !29
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %190, 0, !dbg !29
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %191, 0, !dbg !29
  br i1 %.not.i16, label %197, label %192, !dbg !29

192:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %195, label %193, !dbg !29

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

197:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %200, label %198, !dbg !29

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %193, %195, %198, %200
  %.0.i18 = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !29
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %202, 0, !dbg !29
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %203, 0, !dbg !29
  br i1 %.not.i21, label %209, label %204, !dbg !29

204:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %207, label %205, !dbg !29

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

209:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %212, label %210, !dbg !29

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %205, %207, %210, %212
  %.0.i23 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !29
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %214, 0, !dbg !29
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %215, 0, !dbg !29
  br i1 %.not.i26, label %221, label %216, !dbg !29

216:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %219, label %217, !dbg !29

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

221:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %224, label %222, !dbg !29

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %217, %219, %222, %224
  %.0.i28 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !29
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %226, 0, !dbg !29
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %227, 0, !dbg !29
  br i1 %.not.i31, label %233, label %228, !dbg !29

228:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %231, label %229, !dbg !29

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

233:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %236, label %234, !dbg !29

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %229, %231, %234, %236
  %.0.i33 = phi float [ %230, %229 ], [ %232, %231 ], [ %235, %234 ], [ %237, %236 ], !dbg !29
  %238 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !17
  %239 = insertelement <8 x i32> poison, i32 %61, i64 0, !dbg !19
  %240 = insertelement <8 x i32> %239, i32 %60, i64 1, !dbg !19
  %241 = insertelement <8 x i32> %240, i32 %59, i64 2, !dbg !19
  %242 = insertelement <8 x i32> %241, i32 %58, i64 3, !dbg !19
  %243 = insertelement <8 x i32> %242, i32 %57, i64 4, !dbg !19
  %244 = insertelement <8 x i32> %243, i32 %56, i64 5, !dbg !19
  %245 = insertelement <8 x i32> %244, i32 %55, i64 6, !dbg !19
  %246 = insertelement <8 x i32> %245, i32 %54, i64 7, !dbg !19
  %247 = bitcast <8 x i32> %246 to <8 x float>, !dbg !19
  %248 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !17
  %249 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !17
  %250 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !17
  %251 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !17
  %252 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !17
  %253 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !17
  %254 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !17
  %255 = bitcast i32 %133 to float, !dbg !27
  %256 = bitcast i32 %132 to float, !dbg !27
  %257 = bitcast i32 %131 to float, !dbg !27
  %258 = bitcast i32 %130 to float, !dbg !27
  %259 = bitcast i32 %129 to float, !dbg !27
  %260 = bitcast i32 %128 to float, !dbg !27
  %261 = bitcast i32 %127 to float, !dbg !27
  %262 = bitcast i32 %126 to float, !dbg !27
  %263 = insertelement <8 x i32> poison, i32 %117, i64 0, !dbg !25
  %264 = insertelement <8 x i32> %263, i32 %116, i64 1, !dbg !25
  %265 = insertelement <8 x i32> %264, i32 %115, i64 2, !dbg !25
  %266 = insertelement <8 x i32> %265, i32 %114, i64 3, !dbg !25
  %267 = insertelement <8 x i32> %266, i32 %113, i64 4, !dbg !25
  %268 = insertelement <8 x i32> %267, i32 %112, i64 5, !dbg !25
  %269 = insertelement <8 x i32> %268, i32 %111, i64 6, !dbg !25
  %270 = insertelement <8 x i32> %269, i32 %110, i64 7, !dbg !25
  %271 = bitcast <8 x i32> %270 to <8 x float>, !dbg !25
  %272 = insertelement <8 x i32> poison, i32 %101, i64 0, !dbg !23
  %273 = insertelement <8 x i32> %272, i32 %100, i64 1, !dbg !23
  %274 = insertelement <8 x i32> %273, i32 %99, i64 2, !dbg !23
  %275 = insertelement <8 x i32> %274, i32 %98, i64 3, !dbg !23
  %276 = insertelement <8 x i32> %275, i32 %97, i64 4, !dbg !23
  %277 = insertelement <8 x i32> %276, i32 %96, i64 5, !dbg !23
  %278 = insertelement <8 x i32> %277, i32 %95, i64 6, !dbg !23
  %279 = insertelement <8 x i32> %278, i32 %94, i64 7, !dbg !23
  %280 = bitcast <8 x i32> %279 to <8 x float>, !dbg !23
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !30
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !30
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !30
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !30
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !30
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !30
  %289 = insertelement <8 x i32> poison, i32 %238, i64 0, !dbg !17
  %290 = insertelement <8 x i32> %289, i32 %248, i64 1, !dbg !17
  %291 = insertelement <8 x i32> %290, i32 %249, i64 2, !dbg !17
  %292 = insertelement <8 x i32> %291, i32 %250, i64 3, !dbg !17
  %293 = insertelement <8 x i32> %292, i32 %251, i64 4, !dbg !17
  %294 = insertelement <8 x i32> %293, i32 %252, i64 5, !dbg !17
  %295 = insertelement <8 x i32> %294, i32 %253, i64 6, !dbg !17
  %296 = insertelement <8 x i32> %295, i32 %254, i64 7, !dbg !17
  %297 = bitcast <8 x i32> %296 to <8 x float>, !dbg !17
  %298 = fsub <8 x float> %297, %247, !dbg !31
  %299 = insertelement <8 x float> poison, float %288, i64 0, !dbg !32
  %300 = insertelement <8 x float> %299, float %287, i64 1, !dbg !32
  %301 = insertelement <8 x float> %300, float %286, i64 2, !dbg !32
  %302 = insertelement <8 x float> %301, float %285, i64 3, !dbg !32
  %303 = insertelement <8 x float> %302, float %284, i64 4, !dbg !32
  %304 = insertelement <8 x float> %303, float %283, i64 5, !dbg !32
  %305 = insertelement <8 x float> %304, float %282, i64 6, !dbg !32
  %306 = insertelement <8 x float> %305, float %281, i64 7, !dbg !32
  %307 = fmul <8 x float> %298, %306, !dbg !32
  %308 = fmul <8 x float> %307, %280, !dbg !33
  %309 = fadd <8 x float> %308, %271, !dbg !34
  %310 = fcmp ogt <8 x float> %309, zeroinitializer, !dbg !35
  %311 = extractelement <8 x float> %309, i64 7, !dbg !36
  %312 = fmul float %311, %262, !dbg !37
  %313 = extractelement <8 x float> %309, i64 6, !dbg !36
  %314 = fmul float %313, %261, !dbg !37
  %315 = extractelement <8 x float> %309, i64 5, !dbg !36
  %316 = fmul float %315, %260, !dbg !37
  %317 = extractelement <8 x float> %309, i64 4, !dbg !36
  %318 = fmul float %317, %259, !dbg !37
  %319 = extractelement <8 x float> %309, i64 3, !dbg !36
  %320 = fmul float %319, %258, !dbg !37
  %321 = extractelement <8 x float> %309, i64 2, !dbg !36
  %322 = fmul float %321, %257, !dbg !37
  %323 = extractelement <8 x float> %309, i64 1, !dbg !36
  %324 = fmul float %323, %256, !dbg !37
  %325 = extractelement <8 x float> %309, i64 0, !dbg !36
  %326 = fmul float %325, %255, !dbg !37
  %327 = extractelement <8 x i1> %310, i64 7, !dbg !36
  %328 = select i1 %327, float %311, float %312, !dbg !36
  %329 = extractelement <8 x i1> %310, i64 6, !dbg !36
  %330 = select i1 %329, float %313, float %314, !dbg !36
  %331 = extractelement <8 x i1> %310, i64 5, !dbg !36
  %332 = select i1 %331, float %315, float %316, !dbg !36
  %333 = extractelement <8 x i1> %310, i64 4, !dbg !36
  %334 = select i1 %333, float %317, float %318, !dbg !36
  %335 = extractelement <8 x i1> %310, i64 3, !dbg !36
  %336 = select i1 %335, float %319, float %320, !dbg !36
  %337 = extractelement <8 x i1> %310, i64 2, !dbg !36
  %338 = select i1 %337, float %321, float %322, !dbg !36
  %339 = extractelement <8 x i1> %310, i64 1, !dbg !36
  %340 = select i1 %339, float %323, float %324, !dbg !36
  %341 = extractelement <8 x i1> %310, i64 0, !dbg !36
  %342 = select i1 %341, float %325, float %326, !dbg !36
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !38
  %344 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !38
  %345 = bitcast float %328 to i32, !dbg !39
  %346 = bitcast float %330 to i32, !dbg !39
  %347 = bitcast float %332 to i32, !dbg !39
  %348 = bitcast float %334 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %345, i32 %346, i32 %347, i32 %348, ptr addrspace(1) %343, i1 %22) #3, !dbg !39
  %349 = bitcast float %336 to i32, !dbg !39
  %350 = bitcast float %338 to i32, !dbg !39
  %351 = bitcast float %340 to i32, !dbg !39
  %352 = bitcast float %342 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %350, i32 %351, i32 %352, ptr addrspace(1) %344, i1 %23) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnqppyh5gllr2vgykzb7imht3vxmc6d74qvf3xpko2bjjsr5euua.py", directory: "inductor_cache/nq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 26, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 35, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 28, scope: !7)
!39 = !DILocation(line: 47, column: 40, scope: !7)
!40 = !DILocation(line: 47, column: 4, scope: !7)
