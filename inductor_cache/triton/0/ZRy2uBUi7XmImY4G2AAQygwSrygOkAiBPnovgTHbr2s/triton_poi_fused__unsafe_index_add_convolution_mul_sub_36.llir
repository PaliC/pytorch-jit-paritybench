; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %20 = sdiv i32 %.frozen, 16, !dbg !14
  %21 = sdiv i32 %19, 16, !dbg !14
  %22 = srem i32 %20, 16, !dbg !15
  %23 = srem i32 %21, 16, !dbg !15
  %24 = mul i32 %20, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %18, 16, !dbg !16
  %26 = sdiv i32 %17, 256, !dbg !17
  %27 = sdiv i32 %19, 256, !dbg !17
  %28 = srem i32 %26, 128, !dbg !18
  %29 = srem i32 %27, 128, !dbg !18
  %30 = sext i32 %22 to i64, !dbg !19
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %23 to i64, !dbg !19
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %42 = sext i32 %.decomposed to i64, !dbg !21
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !21
  %44 = sext i32 %25 to i64, !dbg !21
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !21
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !22
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !22
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !22
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !22
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !22
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !22
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !22
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !22
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !22
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !22
  %58 = sext i32 %28 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !23
  %60 = sext i32 %29 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %70 = getelementptr i64, ptr addrspace(1) %4, i64 %42, !dbg !25
  %71 = getelementptr i64, ptr addrspace(1) %4, i64 %44, !dbg !25
  %72 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !26
  %73 = extractvalue { i64, i64 } %72, 0, !dbg !26
  %74 = extractvalue { i64, i64 } %72, 1, !dbg !26
  %75 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !26
  %76 = extractvalue { i64, i64 } %75, 0, !dbg !26
  %77 = extractvalue { i64, i64 } %75, 1, !dbg !26
  %78 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !26
  %79 = extractvalue { i64, i64 } %78, 0, !dbg !26
  %80 = extractvalue { i64, i64 } %78, 1, !dbg !26
  %81 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !26
  %82 = extractvalue { i64, i64 } %81, 0, !dbg !26
  %83 = extractvalue { i64, i64 } %81, 1, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !27
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !28
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !28
  %95 = getelementptr i64, ptr addrspace(1) %6, i64 %30, !dbg !29
  %96 = getelementptr i64, ptr addrspace(1) %6, i64 %32, !dbg !29
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %105 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %118 = bitcast i32 %117 to float, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = lshr i64 %34, 62, !dbg !33
  %124 = and i64 %123, 2, !dbg !33
  %125 = add i64 %124, %34, !dbg !33
  %126 = lshr i64 %38, 62, !dbg !33
  %127 = and i64 %126, 2, !dbg !33
  %128 = add i64 %127, %38, !dbg !33
  %129 = lshr i64 %47, 62, !dbg !34
  %130 = and i64 %129, 2, !dbg !34
  %131 = lshr i64 %48, 62, !dbg !34
  %132 = and i64 %131, 2, !dbg !34
  %133 = lshr i64 %50, 62, !dbg !34
  %134 = and i64 %133, 2, !dbg !34
  %135 = lshr i64 %51, 62, !dbg !34
  %136 = and i64 %135, 2, !dbg !34
  %137 = lshr i64 %53, 62, !dbg !34
  %138 = and i64 %137, 2, !dbg !34
  %139 = lshr i64 %54, 62, !dbg !34
  %140 = and i64 %139, 2, !dbg !34
  %141 = lshr i64 %56, 62, !dbg !34
  %142 = and i64 %141, 2, !dbg !34
  %143 = lshr i64 %57, 62, !dbg !34
  %144 = and i64 %143, 2, !dbg !34
  %145 = shl i64 %125, 1, !dbg !35
  %146 = shl i64 %128, 1, !dbg !35
  %147 = shl nsw i32 %26, 2, !dbg !36
  %148 = shl nsw i32 %27, 2, !dbg !36
  %149 = sext i32 %147 to i64, !dbg !37
  %150 = sext i32 %148 to i64, !dbg !37
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !38
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %130, !dbg !38
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %145, !dbg !38
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %149, !dbg !38
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !38
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %132, !dbg !38
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %145, !dbg !38
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %149, !dbg !38
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !38
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %134, !dbg !38
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %145, !dbg !38
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %149, !dbg !38
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !38
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %136, !dbg !38
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %145, !dbg !38
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %149, !dbg !38
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !38
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %138, !dbg !38
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %146, !dbg !38
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %150, !dbg !38
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !38
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %140, !dbg !38
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %146, !dbg !38
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %150, !dbg !38
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %142, !dbg !38
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %146, !dbg !38
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %150, !dbg !38
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !38
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %144, !dbg !38
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %146, !dbg !38
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %150, !dbg !38
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !39
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !39
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !39
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !39
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !39
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #1, !dbg !39
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #1, !dbg !39
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !39
  %191 = lshr i64 %73, 62, !dbg !40
  %192 = and i64 %191, 2, !dbg !40
  %193 = lshr i64 %74, 62, !dbg !40
  %194 = and i64 %193, 2, !dbg !40
  %195 = lshr i64 %76, 62, !dbg !40
  %196 = and i64 %195, 2, !dbg !40
  %197 = lshr i64 %77, 62, !dbg !40
  %198 = and i64 %197, 2, !dbg !40
  %199 = lshr i64 %79, 62, !dbg !40
  %200 = and i64 %199, 2, !dbg !40
  %201 = lshr i64 %80, 62, !dbg !40
  %202 = and i64 %201, 2, !dbg !40
  %203 = lshr i64 %82, 62, !dbg !40
  %204 = and i64 %203, 2, !dbg !40
  %205 = lshr i64 %83, 62, !dbg !40
  %206 = and i64 %205, 2, !dbg !40
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !41
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %192, !dbg !41
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %145, !dbg !41
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %149, !dbg !41
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !41
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %194, !dbg !41
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %145, !dbg !41
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %149, !dbg !41
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %196, !dbg !41
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %145, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %149, !dbg !41
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %198, !dbg !41
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %145, !dbg !41
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %149, !dbg !41
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !41
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %200, !dbg !41
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %146, !dbg !41
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %150, !dbg !41
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !41
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %202, !dbg !41
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %146, !dbg !41
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %150, !dbg !41
  %231 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !41
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %204, !dbg !41
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %146, !dbg !41
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %150, !dbg !41
  %235 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !41
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %206, !dbg !41
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %146, !dbg !41
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %150, !dbg !41
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #1, !dbg !42
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #1, !dbg !42
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !42
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !42
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !42
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #1, !dbg !42
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #1, !dbg !42
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #1, !dbg !42
  %247 = lshr i64 %97, 62, !dbg !43
  %248 = and i64 %247, 2, !dbg !43
  %249 = add i64 %248, %97, !dbg !43
  %250 = lshr i64 %101, 62, !dbg !43
  %251 = and i64 %250, 2, !dbg !43
  %252 = add i64 %251, %101, !dbg !43
  %253 = shl i64 %249, 1, !dbg !44
  %254 = shl i64 %252, 1, !dbg !44
  %255 = getelementptr float, ptr addrspace(1) %152, i64 %253, !dbg !45
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %149, !dbg !45
  %257 = getelementptr float, ptr addrspace(1) %156, i64 %253, !dbg !45
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %149, !dbg !45
  %259 = getelementptr float, ptr addrspace(1) %160, i64 %253, !dbg !45
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %149, !dbg !45
  %261 = getelementptr float, ptr addrspace(1) %164, i64 %253, !dbg !45
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %149, !dbg !45
  %263 = getelementptr float, ptr addrspace(1) %168, i64 %254, !dbg !45
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %150, !dbg !45
  %265 = getelementptr float, ptr addrspace(1) %172, i64 %254, !dbg !45
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %150, !dbg !45
  %267 = getelementptr float, ptr addrspace(1) %176, i64 %254, !dbg !45
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %150, !dbg !45
  %269 = getelementptr float, ptr addrspace(1) %180, i64 %254, !dbg !45
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %150, !dbg !45
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #1, !dbg !46
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #1, !dbg !46
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 true) #1, !dbg !46
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #1, !dbg !46
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #1, !dbg !46
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #1, !dbg !46
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !46
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !46
  %279 = getelementptr float, ptr addrspace(1) %208, i64 %253, !dbg !47
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %149, !dbg !47
  %281 = getelementptr float, ptr addrspace(1) %212, i64 %253, !dbg !47
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %149, !dbg !47
  %283 = getelementptr float, ptr addrspace(1) %216, i64 %253, !dbg !47
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %149, !dbg !47
  %285 = getelementptr float, ptr addrspace(1) %220, i64 %253, !dbg !47
  %286 = getelementptr float, ptr addrspace(1) %285, i64 %149, !dbg !47
  %287 = getelementptr float, ptr addrspace(1) %224, i64 %254, !dbg !47
  %288 = getelementptr float, ptr addrspace(1) %287, i64 %150, !dbg !47
  %289 = getelementptr float, ptr addrspace(1) %228, i64 %254, !dbg !47
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %150, !dbg !47
  %291 = getelementptr float, ptr addrspace(1) %232, i64 %254, !dbg !47
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %150, !dbg !47
  %293 = getelementptr float, ptr addrspace(1) %236, i64 %254, !dbg !47
  %294 = getelementptr float, ptr addrspace(1) %293, i64 %150, !dbg !47
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #1, !dbg !48
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #1, !dbg !48
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #1, !dbg !48
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #1, !dbg !48
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !48
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !48
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #1, !dbg !48
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #1, !dbg !48
  %303 = insertelement <2 x i32> poison, i32 %271, i64 0, !dbg !46
  %304 = insertelement <2 x i32> %303, i32 %183, i64 1, !dbg !46
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !46
  %306 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !49
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !49
  %308 = shufflevector <2 x float> %307, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %309 = fadd <2 x float> %308, %305, !dbg !49
  %310 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !48
  %311 = insertelement <2 x i32> %310, i32 %239, i64 1, !dbg !48
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !48
  %313 = fadd <2 x float> %308, %312, !dbg !50
  %314 = fsub <2 x float> %313, %309, !dbg !51
  %315 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !52
  %316 = bitcast <2 x i32> %315 to <2 x float>, !dbg !52
  %317 = shufflevector <2 x float> %316, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %318 = fmul <2 x float> %314, %317, !dbg !52
  %319 = fadd <2 x float> %309, %318, !dbg !53
  %320 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !46
  %321 = insertelement <2 x i32> %320, i32 %184, i64 1, !dbg !46
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !46
  %323 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !49
  %324 = bitcast <2 x i32> %323 to <2 x float>, !dbg !49
  %325 = shufflevector <2 x float> %324, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %326 = fadd <2 x float> %325, %322, !dbg !49
  %327 = insertelement <2 x i32> poison, i32 %296, i64 0, !dbg !48
  %328 = insertelement <2 x i32> %327, i32 %240, i64 1, !dbg !48
  %329 = bitcast <2 x i32> %328 to <2 x float>, !dbg !48
  %330 = fadd <2 x float> %325, %329, !dbg !50
  %331 = fsub <2 x float> %330, %326, !dbg !51
  %332 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !52
  %333 = bitcast <2 x i32> %332 to <2 x float>, !dbg !52
  %334 = shufflevector <2 x float> %333, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %335 = fmul <2 x float> %331, %334, !dbg !52
  %336 = fadd <2 x float> %326, %335, !dbg !53
  %337 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !46
  %338 = insertelement <2 x i32> %337, i32 %185, i64 1, !dbg !46
  %339 = bitcast <2 x i32> %338 to <2 x float>, !dbg !46
  %340 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !49
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !49
  %342 = shufflevector <2 x float> %341, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %343 = fadd <2 x float> %342, %339, !dbg !49
  %344 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !48
  %345 = insertelement <2 x i32> %344, i32 %241, i64 1, !dbg !48
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !48
  %347 = fadd <2 x float> %342, %346, !dbg !50
  %348 = fsub <2 x float> %347, %343, !dbg !51
  %349 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !52
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !52
  %351 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %352 = fmul <2 x float> %348, %351, !dbg !52
  %353 = fadd <2 x float> %343, %352, !dbg !53
  %354 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !46
  %355 = insertelement <2 x i32> %354, i32 %186, i64 1, !dbg !46
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !46
  %357 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !49
  %358 = bitcast <2 x i32> %357 to <2 x float>, !dbg !49
  %359 = shufflevector <2 x float> %358, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %360 = fadd <2 x float> %359, %356, !dbg !49
  %361 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !48
  %362 = insertelement <2 x i32> %361, i32 %242, i64 1, !dbg !48
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !48
  %364 = fadd <2 x float> %359, %363, !dbg !50
  %365 = fsub <2 x float> %364, %360, !dbg !51
  %366 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !52
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !52
  %368 = shufflevector <2 x float> %367, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %369 = fmul <2 x float> %365, %368, !dbg !52
  %370 = fadd <2 x float> %360, %369, !dbg !53
  %371 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !46
  %372 = insertelement <2 x i32> %371, i32 %187, i64 1, !dbg !46
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !46
  %374 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !49
  %375 = bitcast <2 x i32> %374 to <2 x float>, !dbg !49
  %376 = shufflevector <2 x float> %375, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %377 = fadd <2 x float> %376, %373, !dbg !49
  %378 = insertelement <2 x i32> poison, i32 %299, i64 0, !dbg !48
  %379 = insertelement <2 x i32> %378, i32 %243, i64 1, !dbg !48
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !48
  %381 = fadd <2 x float> %376, %380, !dbg !50
  %382 = fsub <2 x float> %381, %377, !dbg !51
  %383 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !52
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !52
  %385 = shufflevector <2 x float> %384, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %386 = fmul <2 x float> %382, %385, !dbg !52
  %387 = fadd <2 x float> %377, %386, !dbg !53
  %388 = insertelement <2 x i32> poison, i32 %276, i64 0, !dbg !46
  %389 = insertelement <2 x i32> %388, i32 %188, i64 1, !dbg !46
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !46
  %391 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !49
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !49
  %393 = shufflevector <2 x float> %392, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %394 = fadd <2 x float> %393, %390, !dbg !49
  %395 = insertelement <2 x i32> poison, i32 %300, i64 0, !dbg !48
  %396 = insertelement <2 x i32> %395, i32 %244, i64 1, !dbg !48
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !48
  %398 = fadd <2 x float> %393, %397, !dbg !50
  %399 = fsub <2 x float> %398, %394, !dbg !51
  %400 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !52
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !52
  %402 = shufflevector <2 x float> %401, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %403 = fmul <2 x float> %399, %402, !dbg !52
  %404 = fadd <2 x float> %394, %403, !dbg !53
  %405 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !46
  %406 = insertelement <2 x i32> %405, i32 %189, i64 1, !dbg !46
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !46
  %408 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !49
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !49
  %410 = shufflevector <2 x float> %409, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %411 = fadd <2 x float> %410, %407, !dbg !49
  %412 = insertelement <2 x i32> poison, i32 %301, i64 0, !dbg !48
  %413 = insertelement <2 x i32> %412, i32 %245, i64 1, !dbg !48
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !48
  %415 = fadd <2 x float> %410, %414, !dbg !50
  %416 = fsub <2 x float> %415, %411, !dbg !51
  %417 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !52
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !52
  %419 = shufflevector <2 x float> %418, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %420 = fmul <2 x float> %416, %419, !dbg !52
  %421 = fadd <2 x float> %411, %420, !dbg !53
  %422 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !46
  %423 = insertelement <2 x i32> %422, i32 %190, i64 1, !dbg !46
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !46
  %425 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !49
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !49
  %427 = shufflevector <2 x float> %426, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %428 = fadd <2 x float> %427, %424, !dbg !49
  %429 = insertelement <2 x i32> poison, i32 %302, i64 0, !dbg !48
  %430 = insertelement <2 x i32> %429, i32 %246, i64 1, !dbg !48
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !48
  %432 = fadd <2 x float> %427, %431, !dbg !50
  %433 = fsub <2 x float> %432, %428, !dbg !51
  %434 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !52
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !52
  %436 = shufflevector <2 x float> %435, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %437 = fmul <2 x float> %433, %436, !dbg !52
  %438 = fadd <2 x float> %428, %437, !dbg !53
  %439 = extractelement <2 x float> %319, i64 0, !dbg !54
  %440 = extractelement <2 x float> %319, i64 1, !dbg !55
  %441 = fsub float %439, %440, !dbg !54
  %442 = extractelement <2 x float> %336, i64 0, !dbg !54
  %443 = extractelement <2 x float> %336, i64 1, !dbg !55
  %444 = fsub float %442, %443, !dbg !54
  %445 = extractelement <2 x float> %353, i64 0, !dbg !54
  %446 = extractelement <2 x float> %353, i64 1, !dbg !55
  %447 = fsub float %445, %446, !dbg !54
  %448 = extractelement <2 x float> %370, i64 0, !dbg !54
  %449 = extractelement <2 x float> %370, i64 1, !dbg !55
  %450 = fsub float %448, %449, !dbg !54
  %451 = extractelement <2 x float> %387, i64 0, !dbg !54
  %452 = extractelement <2 x float> %387, i64 1, !dbg !55
  %453 = fsub float %451, %452, !dbg !54
  %454 = extractelement <2 x float> %404, i64 0, !dbg !54
  %455 = extractelement <2 x float> %404, i64 1, !dbg !55
  %456 = fsub float %454, %455, !dbg !54
  %457 = extractelement <2 x float> %421, i64 0, !dbg !54
  %458 = extractelement <2 x float> %421, i64 1, !dbg !55
  %459 = fsub float %457, %458, !dbg !54
  %460 = extractelement <2 x float> %438, i64 0, !dbg !54
  %461 = extractelement <2 x float> %438, i64 1, !dbg !55
  %462 = fsub float %460, %461, !dbg !54
  %463 = fmul float %441, %108, !dbg !56
  %464 = fmul float %444, %110, !dbg !56
  %465 = fmul float %447, %112, !dbg !56
  %466 = fmul float %450, %114, !dbg !56
  %467 = fmul float %453, %116, !dbg !56
  %468 = fmul float %456, %118, !dbg !56
  %469 = fmul float %459, %120, !dbg !56
  %470 = fmul float %462, %122, !dbg !56
  %471 = sext i32 %17 to i64, !dbg !57
  %472 = getelementptr float, ptr addrspace(1) %8, i64 %471, !dbg !57
  %473 = sext i32 %19 to i64, !dbg !57
  %474 = getelementptr float, ptr addrspace(1) %8, i64 %473, !dbg !57
  %475 = bitcast float %440 to i32, !dbg !55
  %476 = bitcast float %443 to i32, !dbg !55
  %477 = bitcast float %446 to i32, !dbg !55
  %478 = bitcast float %449 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %475, i32 %476, i32 %477, i32 %478, ptr addrspace(1) %472, i1 true) #1, !dbg !55
  %479 = bitcast float %452 to i32, !dbg !55
  %480 = bitcast float %455 to i32, !dbg !55
  %481 = bitcast float %458 to i32, !dbg !55
  %482 = bitcast float %461 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %479, i32 %480, i32 %481, i32 %482, ptr addrspace(1) %474, i1 true) #1, !dbg !55
  %483 = getelementptr float, ptr addrspace(1) %9, i64 %471, !dbg !58
  %484 = getelementptr float, ptr addrspace(1) %9, i64 %473, !dbg !58
  %485 = bitcast float %463 to i32, !dbg !59
  %486 = bitcast float %464 to i32, !dbg !59
  %487 = bitcast float %465 to i32, !dbg !59
  %488 = bitcast float %466 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %485, i32 %486, i32 %487, i32 %488, ptr addrspace(1) %483, i1 true) #1, !dbg !59
  %489 = bitcast float %467 to i32, !dbg !59
  %490 = bitcast float %468 to i32, !dbg !59
  %491 = bitcast float %469 to i32, !dbg !59
  %492 = bitcast float %470 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %489, i32 %490, i32 %491, i32 %492, ptr addrspace(1) %484, i1 true) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4icm37776t7toajqsxwvjeyucjtblbc2dlvmcfdpgbvb4cmuc3g.py", directory: "inductor_cache/4i")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_36", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 32, scope: !7)
!35 = !DILocation(line: 43, column: 39, scope: !7)
!36 = !DILocation(line: 43, column: 48, scope: !7)
!37 = !DILocation(line: 43, column: 46, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 53, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 48, column: 31, scope: !7)
!42 = !DILocation(line: 48, column: 55, scope: !7)
!43 = !DILocation(line: 55, column: 35, scope: !7)
!44 = !DILocation(line: 56, column: 40, scope: !7)
!45 = !DILocation(line: 56, column: 31, scope: !7)
!46 = !DILocation(line: 56, column: 55, scope: !7)
!47 = !DILocation(line: 58, column: 31, scope: !7)
!48 = !DILocation(line: 58, column: 56, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 37, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 25, scope: !7)
!58 = !DILocation(line: 66, column: 25, scope: !7)
!59 = !DILocation(line: 66, column: 37, scope: !7)
!60 = !DILocation(line: 66, column: 4, scope: !7)
