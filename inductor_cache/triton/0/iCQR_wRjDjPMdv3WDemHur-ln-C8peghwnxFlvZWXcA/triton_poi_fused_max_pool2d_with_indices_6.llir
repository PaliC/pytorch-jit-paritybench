; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = srem i32 %9, 48, !dbg !14
  %11 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %12 = shufflevector <2 x i32> %11, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %13 = sdiv <2 x i32> %12, <i32 384, i32 48>, !dbg !15
  %14 = srem <2 x i32> %13, splat (i32 8), !dbg !16
  %15 = extractelement <2 x i32> %14, i64 0, !dbg !17
  %16 = icmp sgt i32 %15, 0, !dbg !18
  %17 = icmp sgt <2 x i32> %14, <i32 -1, i32 0>, !dbg !19
  %18 = extractelement <2 x i1> %17, i64 1, !dbg !20
  %19 = and i1 %16, %18, !dbg !20
  %20 = extractelement <2 x i32> %14, i64 1, !dbg !17
  %21 = mul nsw i32 %20, 96, !dbg !21
  %22 = extractelement <2 x i32> %13, i64 0, !dbg !22
  %23 = mul i32 %22, 1536, !dbg !22
  %24 = add i32 %23, %10, !dbg !23
  %25 = add i32 %24, -816, !dbg !24
  %26 = add i32 %25, %21, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %19, i32 -8388608, i1 %19) #1, !dbg !27
  %30 = bitcast i32 %29 to float, !dbg !27
  %31 = icmp sgt i32 %20, -1, !dbg !28
  %32 = and i1 %16, %31, !dbg !29
  %33 = add i32 %24, -768, !dbg !30
  %34 = add i32 %33, %21, !dbg !31
  %35 = sext i32 %34 to i64, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !32
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %32, i32 -8388608, i1 %32) #1, !dbg !33
  %38 = bitcast i32 %37 to float, !dbg !33
  %39 = fcmp ogt float %38, %30, !dbg !34
  %40 = fcmp uno float %38, 0.000000e+00, !dbg !38
  %41 = or i1 %39, %40, !dbg !39
  %42 = select i1 %41, float %38, float %30, !dbg !40
  %43 = add i32 %24, -720, !dbg !41
  %44 = add i32 %43, %21, !dbg !42
  %45 = sext i32 %44 to i64, !dbg !43
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !43
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %32, i32 -8388608, i1 %32) #1, !dbg !44
  %48 = bitcast i32 %47 to float, !dbg !44
  %49 = fcmp olt float %42, %48, !dbg !45
  %50 = fcmp uno float %48, 0.000000e+00, !dbg !47
  %51 = or i1 %50, %49, !dbg !48
  %52 = select i1 %51, float %48, float %42, !dbg !49
  %53 = extractelement <2 x i1> %17, i64 0, !dbg !50
  %54 = and i1 %53, %18, !dbg !50
  %55 = add i32 %24, -48, !dbg !51
  %56 = add i32 %55, %21, !dbg !52
  %57 = sext i32 %56 to i64, !dbg !53
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !53
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %54, i32 -8388608, i1 %54) #1, !dbg !54
  %60 = bitcast i32 %59 to float, !dbg !54
  %61 = fcmp olt float %52, %60, !dbg !55
  %62 = fcmp uno float %60, 0.000000e+00, !dbg !57
  %63 = or i1 %62, %61, !dbg !58
  %64 = select i1 %63, float %60, float %52, !dbg !59
  %65 = or i32 %15, %20, !dbg !17
  %66 = icmp sgt i32 %65, -1, !dbg !17
  %67 = add i32 %24, %21, !dbg !60
  %68 = sext i32 %67 to i64, !dbg !61
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !61
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %66, i32 -8388608, i1 %66) #1, !dbg !62
  %71 = bitcast i32 %70 to float, !dbg !62
  %72 = fcmp olt float %64, %71, !dbg !63
  %73 = fcmp uno float %71, 0.000000e+00, !dbg !65
  %74 = or i1 %73, %72, !dbg !66
  %75 = select i1 %74, float %71, float %64, !dbg !67
  %76 = add i32 %24, 48, !dbg !68
  %77 = add i32 %76, %21, !dbg !69
  %78 = sext i32 %77 to i64, !dbg !70
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !70
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %66, i32 -8388608, i1 %66) #1, !dbg !71
  %81 = bitcast i32 %80 to float, !dbg !71
  %82 = fcmp olt float %75, %81, !dbg !72
  %83 = fcmp uno float %81, 0.000000e+00, !dbg !74
  %84 = or i1 %83, %82, !dbg !75
  %85 = select i1 %84, float %81, float %75, !dbg !76
  %86 = add i32 %24, 720, !dbg !77
  %87 = add i32 %86, %21, !dbg !78
  %88 = sext i32 %87 to i64, !dbg !79
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !79
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %54, i32 -8388608, i1 %54) #1, !dbg !80
  %91 = bitcast i32 %90 to float, !dbg !80
  %92 = fcmp olt float %85, %91, !dbg !81
  %93 = fcmp uno float %91, 0.000000e+00, !dbg !83
  %94 = or i1 %93, %92, !dbg !84
  %95 = select i1 %94, float %91, float %85, !dbg !85
  %96 = add i32 %24, 768, !dbg !86
  %97 = add i32 %96, %21, !dbg !87
  %98 = sext i32 %97 to i64, !dbg !88
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !88
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %66, i32 -8388608, i1 %66) #1, !dbg !89
  %101 = bitcast i32 %100 to float, !dbg !89
  %102 = fcmp olt float %95, %101, !dbg !90
  %103 = fcmp uno float %101, 0.000000e+00, !dbg !92
  %104 = or i1 %103, %102, !dbg !93
  %105 = select i1 %104, float %101, float %95, !dbg !94
  %106 = add i32 %24, 816, !dbg !95
  %107 = add i32 %106, %21, !dbg !96
  %108 = sext i32 %107 to i64, !dbg !97
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !97
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %66, i32 -8388608, i1 %66) #1, !dbg !98
  %111 = bitcast i32 %110 to float, !dbg !98
  %112 = fcmp olt float %105, %111, !dbg !99
  %113 = fcmp uno float %111, 0.000000e+00, !dbg !101
  %114 = or i1 %113, %112, !dbg !102
  %115 = zext i1 %39 to i8, !dbg !103
  %116 = select i1 %49, i8 2, i8 %115, !dbg !104
  %117 = select i1 %61, i8 3, i8 %116, !dbg !105
  %118 = select i1 %72, i8 4, i8 %117, !dbg !106
  %119 = select i1 %82, i8 5, i8 %118, !dbg !107
  %120 = select i1 %92, i8 6, i8 %119, !dbg !108
  %121 = select i1 %102, i8 7, i8 %120, !dbg !109
  %122 = select i1 %112, i8 8, i8 %121, !dbg !110
  %123 = sext i32 %9 to i64, !dbg !111
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !111
  %125 = bitcast float %105 to i32, !dbg !112
  %126 = select i1 %114, i32 %110, i32 %125, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %124, i1 true) #1, !dbg !112
  %127 = getelementptr i8, ptr addrspace(1) %2, i64 %123, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %122, ptr addrspace(1) %127, i1 true) #1, !dbg !115
  ret void, !dbg !116
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cowq4knojwyxos2g2efynffjdbvaqa4o4goucrjq5u6ywu62tv3r.py", directory: "inductor_cache/ow")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 62, column: 20, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 56, column: 21, scope: !7)
!20 = !DILocation(line: 39, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 48, scope: !7)
!22 = !DILocation(line: 40, column: 58, scope: !7)
!23 = !DILocation(line: 40, column: 40, scope: !7)
!24 = !DILocation(line: 40, column: 45, scope: !7)
!25 = !DILocation(line: 40, column: 53, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 63, scope: !7)
!28 = !DILocation(line: 42, column: 21, scope: !7)
!29 = !DILocation(line: 45, column: 19, scope: !7)
!30 = !DILocation(line: 46, column: 45, scope: !7)
!31 = !DILocation(line: 46, column: 53, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 63, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 47, column: 42, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 53, column: 45, scope: !7)
!42 = !DILocation(line: 53, column: 53, scope: !7)
!43 = !DILocation(line: 53, column: 31, scope: !7)
!44 = !DILocation(line: 53, column: 63, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !46)
!46 = !DILocation(line: 54, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !46)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 44, scope: !7)
!52 = !DILocation(line: 60, column: 52, scope: !7)
!53 = !DILocation(line: 60, column: 31, scope: !7)
!54 = !DILocation(line: 60, column: 62, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !56)
!56 = !DILocation(line: 61, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !56)
!60 = !DILocation(line: 63, column: 44, scope: !7)
!61 = !DILocation(line: 63, column: 31, scope: !7)
!62 = !DILocation(line: 63, column: 54, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !64)
!64 = !DILocation(line: 64, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !64)
!68 = !DILocation(line: 66, column: 41, scope: !7)
!69 = !DILocation(line: 66, column: 49, scope: !7)
!70 = !DILocation(line: 66, column: 31, scope: !7)
!71 = !DILocation(line: 66, column: 59, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !73)
!73 = !DILocation(line: 67, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !73)
!77 = !DILocation(line: 73, column: 42, scope: !7)
!78 = !DILocation(line: 73, column: 50, scope: !7)
!79 = !DILocation(line: 73, column: 31, scope: !7)
!80 = !DILocation(line: 73, column: 60, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !82)
!82 = !DILocation(line: 74, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !82)
!86 = !DILocation(line: 76, column: 42, scope: !7)
!87 = !DILocation(line: 76, column: 50, scope: !7)
!88 = !DILocation(line: 76, column: 31, scope: !7)
!89 = !DILocation(line: 76, column: 60, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !91)
!91 = !DILocation(line: 77, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !91)
!95 = !DILocation(line: 79, column: 42, scope: !7)
!96 = !DILocation(line: 79, column: 50, scope: !7)
!97 = !DILocation(line: 79, column: 31, scope: !7)
!98 = !DILocation(line: 79, column: 60, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !100)
!103 = !DILocation(line: 84, column: 35, scope: !7)
!104 = !DILocation(line: 87, column: 35, scope: !7)
!105 = !DILocation(line: 90, column: 35, scope: !7)
!106 = !DILocation(line: 93, column: 35, scope: !7)
!107 = !DILocation(line: 96, column: 35, scope: !7)
!108 = !DILocation(line: 99, column: 35, scope: !7)
!109 = !DILocation(line: 102, column: 35, scope: !7)
!110 = !DILocation(line: 105, column: 35, scope: !7)
!111 = !DILocation(line: 106, column: 25, scope: !7)
!112 = !DILocation(line: 106, column: 37, scope: !7)
!113 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !100)
!114 = !DILocation(line: 107, column: 25, scope: !7)
!115 = !DILocation(line: 107, column: 37, scope: !7)
!116 = !DILocation(line: 107, column: 4, scope: !7)
