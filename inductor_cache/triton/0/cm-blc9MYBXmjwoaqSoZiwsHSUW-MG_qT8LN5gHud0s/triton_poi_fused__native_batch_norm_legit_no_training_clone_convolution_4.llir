; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 16, !dbg !13
  %17 = icmp slt i32 %15, 40, !dbg !14
  %18 = icmp slt i32 %16, 40, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = shl i32 %12, 2, !dbg !17
  %22 = and i32 %21, 28, !dbg !17
  %23 = or disjoint i32 %20, %22, !dbg !18
  %24 = icmp slt i32 %23, 128, !dbg !19
  %25 = shl i32 %15, 7, !dbg !20
  %26 = shl i32 %16, 7, !dbg !20
  %27 = add i32 %23, %25, !dbg !21
  %28 = add i32 %23, %26, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = and i1 %17, %24, !dbg !23
  %34 = and i1 %18, %24, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !24
  %37 = sext i32 %23 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %24) #4, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !29
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !30
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !30
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !30
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !30
  %48 = bitcast i32 %44 to float, !dbg !30
  %49 = bitcast i32 %45 to float, !dbg !30
  %50 = bitcast i32 %46 to float, !dbg !30
  %51 = bitcast i32 %47 to float, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !31
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %24) #4, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !33
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %24) #4, !dbg !34
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !35
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %60, 0, !dbg !36
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %61, 0, !dbg !36
  br i1 %.not.i, label %67, label %62, !dbg !36

62:                                               ; preds = %9
  br i1 %.not1.i, label %65, label %63, !dbg !36

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

67:                                               ; preds = %9
  br i1 %.not1.i, label %70, label %68, !dbg !36

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !36
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i17 = icmp eq i32 %72, 0, !dbg !36
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i20 = icmp eq i32 %73, 0, !dbg !36
  br i1 %.not.i17, label %79, label %74, !dbg !36

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %77, label %75, !dbg !36

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %82, label %80, !dbg !36

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

__nv_sqrtf.exit21:                                ; preds = %75, %77, %80, %82
  %.0.i19 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !36
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i22 = icmp eq i32 %84, 0, !dbg !36
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i25 = icmp eq i32 %85, 0, !dbg !36
  br i1 %.not.i22, label %91, label %86, !dbg !36

86:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %89, label %87, !dbg !36

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

91:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %94, label %92, !dbg !36

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

__nv_sqrtf.exit26:                                ; preds = %87, %89, %92, %94
  %.0.i24 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !36
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i27 = icmp eq i32 %96, 0, !dbg !36
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i30 = icmp eq i32 %97, 0, !dbg !36
  br i1 %.not.i27, label %103, label %98, !dbg !36

98:                                               ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %101, label %99, !dbg !36

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

103:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %106, label %104, !dbg !36

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

__nv_sqrtf.exit31:                                ; preds = %99, %101, %104, %106
  %.0.i29 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !36
  %108 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %109 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %112 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %116 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %119 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %121 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %122 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %123 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %124 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !32
  %132 = lshr i32 %12, 4, !dbg !17
  %133 = and i32 %132, 7, !dbg !17
  %134 = or disjoint i32 %133, %20, !dbg !18
  %135 = or disjoint i32 %134, 24, !dbg !18
  %136 = icmp slt i32 %135, 128, !dbg !19
  %137 = shl i32 %12, 1, !dbg !12
  %138 = and i32 %137, 30, !dbg !12
  %139 = or disjoint i32 %11, %138, !dbg !13
  %140 = icmp slt i32 %139, 40, !dbg !14
  %141 = and i1 %140, %136, !dbg !23
  %142 = or disjoint i32 %134, 16, !dbg !18
  %143 = icmp slt i32 %142, 128, !dbg !19
  %144 = and i1 %140, %143, !dbg !23
  %145 = or disjoint i32 %134, 8, !dbg !18
  %146 = icmp slt i32 %145, 128, !dbg !19
  %147 = and i1 %140, %146, !dbg !23
  %148 = icmp slt i32 %134, 128, !dbg !19
  %149 = and i1 %140, %148, !dbg !23
  %.frozen = freeze i32 %139, !dbg !37
  %150 = sdiv i32 %.frozen, 10, !dbg !37
  %151 = mul i32 %150, 10, !dbg !38
  %.decomposed = sub i32 %.frozen, %151, !dbg !38
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #4, !dbg !39
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #4, !dbg !39
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #4, !dbg !39
  %156 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !26
  %157 = insertelement <4 x i32> %156, i32 %112, i64 1, !dbg !26
  %158 = insertelement <4 x i32> %157, i32 %115, i64 2, !dbg !26
  %159 = insertelement <4 x i32> %158, i32 %118, i64 3, !dbg !26
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !26
  %161 = shufflevector <4 x float> %160, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !26
  %162 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !28
  %163 = insertelement <4 x i32> %162, i32 %113, i64 1, !dbg !28
  %164 = insertelement <4 x i32> %163, i32 %116, i64 2, !dbg !28
  %165 = insertelement <4 x i32> %164, i32 %119, i64 3, !dbg !28
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !28
  %167 = shufflevector <4 x float> %166, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %168 = insertelement <8 x i32> poison, i32 %108, i64 0, !dbg !24
  %169 = insertelement <8 x i32> %168, i32 %111, i64 1, !dbg !24
  %170 = insertelement <8 x i32> %169, i32 %114, i64 2, !dbg !24
  %171 = insertelement <8 x i32> %170, i32 %117, i64 3, !dbg !24
  %172 = insertelement <8 x i32> %171, i32 %120, i64 4, !dbg !24
  %173 = insertelement <8 x i32> %172, i32 %121, i64 5, !dbg !24
  %174 = insertelement <8 x i32> %173, i32 %122, i64 6, !dbg !24
  %175 = insertelement <8 x i32> %174, i32 %123, i64 7, !dbg !24
  %176 = bitcast <8 x i32> %175 to <8 x float>, !dbg !24
  %177 = fadd <8 x float> %161, %176, !dbg !40
  %178 = fsub <8 x float> %177, %167, !dbg !41
  %179 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !34
  %180 = insertelement <4 x i32> %179, i32 %125, i64 1, !dbg !34
  %181 = insertelement <4 x i32> %180, i32 %126, i64 2, !dbg !34
  %182 = insertelement <4 x i32> %181, i32 %127, i64 3, !dbg !34
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !34
  %184 = shufflevector <4 x float> %183, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %185 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !32
  %186 = insertelement <4 x i32> %185, i32 %129, i64 1, !dbg !32
  %187 = insertelement <4 x i32> %186, i32 %130, i64 2, !dbg !32
  %188 = insertelement <4 x i32> %187, i32 %131, i64 3, !dbg !32
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !32
  %190 = shufflevector <4 x float> %189, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %191 = insertelement <8 x float> poison, float %155, i64 0, !dbg !42
  %192 = insertelement <8 x float> %191, float %154, i64 1, !dbg !42
  %193 = insertelement <8 x float> %192, float %153, i64 2, !dbg !42
  %194 = insertelement <8 x float> %193, float %152, i64 3, !dbg !42
  %195 = shufflevector <8 x float> %194, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !42
  %196 = fmul <8 x float> %178, %195, !dbg !42
  %197 = fmul <8 x float> %196, %190, !dbg !43
  %198 = fadd <8 x float> %197, %184, !dbg !44
  %199 = fcmp ogt <8 x float> %198, zeroinitializer, !dbg !45
  %200 = extractelement <8 x float> %198, i64 7, !dbg !46
  %201 = fmul float %200, 0x3F847AE140000000, !dbg !47
  %202 = extractelement <8 x float> %198, i64 6, !dbg !46
  %203 = fmul float %202, 0x3F847AE140000000, !dbg !47
  %204 = extractelement <8 x float> %198, i64 5, !dbg !46
  %205 = fmul float %204, 0x3F847AE140000000, !dbg !47
  %206 = extractelement <8 x float> %198, i64 4, !dbg !46
  %207 = fmul float %206, 0x3F847AE140000000, !dbg !47
  %208 = extractelement <8 x float> %198, i64 3, !dbg !46
  %209 = fmul float %208, 0x3F847AE140000000, !dbg !47
  %210 = extractelement <8 x float> %198, i64 2, !dbg !46
  %211 = fmul float %210, 0x3F847AE140000000, !dbg !47
  %212 = extractelement <8 x float> %198, i64 1, !dbg !46
  %213 = fmul float %212, 0x3F847AE140000000, !dbg !47
  %214 = extractelement <8 x float> %198, i64 0, !dbg !46
  %215 = fmul float %214, 0x3F847AE140000000, !dbg !47
  %216 = extractelement <8 x i1> %199, i64 7, !dbg !46
  %217 = select i1 %216, float %200, float %201, !dbg !46
  %218 = extractelement <8 x i1> %199, i64 6, !dbg !46
  %219 = select i1 %218, float %202, float %203, !dbg !46
  %220 = extractelement <8 x i1> %199, i64 5, !dbg !46
  %221 = select i1 %220, float %204, float %205, !dbg !46
  %222 = extractelement <8 x i1> %199, i64 4, !dbg !46
  %223 = select i1 %222, float %206, float %207, !dbg !46
  %224 = extractelement <8 x i1> %199, i64 3, !dbg !46
  %225 = select i1 %224, float %208, float %209, !dbg !46
  %226 = extractelement <8 x i1> %199, i64 2, !dbg !46
  %227 = select i1 %226, float %210, float %211, !dbg !46
  %228 = extractelement <8 x i1> %199, i64 1, !dbg !46
  %229 = select i1 %228, float %212, float %213, !dbg !46
  %230 = extractelement <8 x i1> %199, i64 0, !dbg !46
  %231 = select i1 %230, float %214, float %215, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %bc = bitcast <8 x float> %177 to <8 x i32>, !dbg !49
  %232 = extractelement <8 x i32> %bc, i64 7, !dbg !49
  %bc32 = bitcast <8 x float> %177 to <8 x i32>, !dbg !49
  %233 = extractelement <8 x i32> %bc32, i64 6, !dbg !49
  %bc33 = bitcast <8 x float> %177 to <8 x i32>, !dbg !49
  %234 = extractelement <8 x i32> %bc33, i64 5, !dbg !49
  %bc34 = bitcast <8 x float> %177 to <8 x i32>, !dbg !49
  %235 = extractelement <8 x i32> %bc34, i64 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %233, i32 %234, i32 %235, ptr addrspace(1) %30, i1 %33) #4, !dbg !49
  %bc35 = bitcast <8 x float> %177 to <8 x i32>, !dbg !49
  %236 = extractelement <8 x i32> %bc35, i64 3, !dbg !49
  %bc36 = bitcast <8 x float> %177 to <8 x i32>, !dbg !49
  %237 = extractelement <8 x i32> %bc36, i64 2, !dbg !49
  %bc37 = bitcast <8 x float> %177 to <8 x i32>, !dbg !49
  %238 = extractelement <8 x i32> %bc37, i64 1, !dbg !49
  %bc38 = bitcast <8 x float> %177 to <8 x i32>, !dbg !49
  %239 = extractelement <8 x i32> %bc38, i64 0, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %236, i32 %237, i32 %238, i32 %239, ptr addrspace(1) %32, i1 %34) #4, !dbg !49
  %240 = mul i32 %134, 10, !dbg !50
  %241 = mul i32 %145, 10, !dbg !50
  %242 = mul i32 %142, 10, !dbg !50
  %243 = mul i32 %135, 10, !dbg !50
  %244 = mul i32 %150, 1280, !dbg !51
  %245 = add i32 %244, %.decomposed, !dbg !52
  %246 = add i32 %245, %240, !dbg !53
  %247 = add i32 %245, %241, !dbg !53
  %248 = add i32 %245, %242, !dbg !53
  %249 = add i32 %245, %243, !dbg !53
  %250 = sext i32 %246 to i64, !dbg !54
  %251 = getelementptr float, ptr addrspace(1) %6, i64 %250, !dbg !54
  %252 = sext i32 %247 to i64, !dbg !54
  %253 = getelementptr float, ptr addrspace(1) %6, i64 %252, !dbg !54
  %254 = sext i32 %248 to i64, !dbg !54
  %255 = getelementptr float, ptr addrspace(1) %6, i64 %254, !dbg !54
  %256 = sext i32 %249 to i64, !dbg !54
  %257 = getelementptr float, ptr addrspace(1) %6, i64 %256, !dbg !54
  %258 = shl i32 %12, 7, !dbg !55
  %259 = and i32 %258, 896, !dbg !55
  %260 = or disjoint i32 %259, %14, !dbg !55
  %261 = and i32 %137, 254, !dbg !55
  %262 = lshr exact i32 %259, 2, !dbg !55
  %263 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %262, !dbg !55
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %260, !dbg !55
  %265 = bitcast float %217 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !55
  %266 = or disjoint i32 %260, 32, !dbg !55
  %267 = lshr i32 %266, 4, !dbg !55
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !55
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %266, !dbg !55
  %270 = bitcast float %219 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !55
  %271 = or disjoint i32 %260, 64, !dbg !55
  %272 = lshr i32 %271, 4, !dbg !55
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !55
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %271, !dbg !55
  %275 = bitcast float %221 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !55
  %276 = or disjoint i32 %260, 96, !dbg !55
  %277 = lshr i32 %276, 4, !dbg !55
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !55
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %276, !dbg !55
  %280 = bitcast float %223 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !55
  %281 = or disjoint i32 %260, 16, !dbg !55
  %282 = getelementptr float, ptr addrspace(3) %263, i32 %281, !dbg !55
  %283 = bitcast float %225 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !55
  %284 = or disjoint i32 %260, 48, !dbg !55
  %285 = lshr i32 %284, 4, !dbg !55
  %286 = and i32 %285, 58, !dbg !55
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %286, !dbg !55
  %288 = getelementptr float, ptr addrspace(3) %287, i32 %284, !dbg !55
  %289 = bitcast float %227 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !55
  %290 = or disjoint i32 %260, 80, !dbg !55
  %291 = lshr i32 %290, 4, !dbg !55
  %292 = and i32 %291, 60, !dbg !55
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !55
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %290, !dbg !55
  %295 = bitcast float %229 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !55
  %296 = or disjoint i32 %260, 112, !dbg !55
  %297 = lshr i32 %296, 4, !dbg !55
  %298 = and i32 %297, 62, !dbg !55
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i32 %298, !dbg !55
  %300 = getelementptr float, ptr addrspace(3) %299, i32 %296, !dbg !55
  %301 = bitcast float %231 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %302 = lshr i32 %137, 4, !dbg !55
  %303 = and i32 %302, 14, !dbg !55
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !55
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %261, !dbg !55
  %306 = or disjoint i32 %261, 256, !dbg !55
  %307 = lshr i32 %306, 4, !dbg !55
  %308 = and i32 %307, 30, !dbg !55
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !55
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %306, !dbg !55
  %311 = load <2 x i32>, ptr addrspace(3) %310, align 8, !dbg !55
  %312 = or disjoint i32 %261, 512, !dbg !55
  %313 = lshr i32 %312, 4, !dbg !55
  %314 = and i32 %313, 46, !dbg !55
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !55
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %312, !dbg !55
  %317 = load <2 x i32>, ptr addrspace(3) %316, align 8, !dbg !55
  %318 = or disjoint i32 %261, 768, !dbg !55
  %319 = lshr i32 %318, 4, !dbg !55
  %320 = and i32 %319, 62, !dbg !55
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !55
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %318, !dbg !55
  %323 = load <2 x i32>, ptr addrspace(3) %322, align 8, !dbg !55
  %.extract = load i32, ptr addrspace(3) %305, align 8, !dbg !55
  %324 = getelementptr inbounds i8, ptr addrspace(3) %305, i32 4, !dbg !55
  %.extract10 = load i32, ptr addrspace(3) %324, align 4, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract10, ptr addrspace(1) %251, i1 %149) #4, !dbg !55
  %.extract11 = extractelement <2 x i32> %311, i64 0, !dbg !55
  %.extract12 = extractelement <2 x i32> %311, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %253, i1 %147) #4, !dbg !55
  %.extract13 = extractelement <2 x i32> %317, i64 0, !dbg !55
  %.extract14 = extractelement <2 x i32> %317, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %255, i1 %144) #4, !dbg !55
  %.extract15 = extractelement <2 x i32> %323, i64 0, !dbg !55
  %.extract16 = extractelement <2 x i32> %323, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract15, i32 %.extract16, ptr addrspace(1) %257, i1 %141) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cexirvayyidh3f3ue7vbycwrx2zqfuk3afjxgkri6tkplldvblxy.py", directory: "inductor_cache/ex")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 26, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
!49 = !DILocation(line: 56, column: 48, scope: !7)
!50 = !DILocation(line: 57, column: 33, scope: !7)
!51 = !DILocation(line: 57, column: 43, scope: !7)
!52 = !DILocation(line: 57, column: 30, scope: !7)
!53 = !DILocation(line: 57, column: 38, scope: !7)
!54 = !DILocation(line: 57, column: 25, scope: !7)
!55 = !DILocation(line: 57, column: 55, scope: !7)
!56 = !DILocation(line: 57, column: 4, scope: !7)
