#loc = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":19:0)
#loc1 = loc(unknown)
#loc18 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":34:24)
#loc27 = loc(callsite(#loc1 at #loc18))
module {
  tt.func public @triton_per_fused_mean_25(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":19:0), %arg3: i32 loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<2.500000e+01> : tensor<128x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x32xf32> loc(#loc1)
    %cst_1 = arith.constant dense<25> : tensor<128x1xi32> loc(#loc1)
    %cst_2 = arith.constant dense<25> : tensor<1x32xi32> loc(#loc1)
    %cst_3 = arith.constant dense<6144> : tensor<128x1xi32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<128x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<128x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_3 : tensor<128x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc9)
    %9 = arith.cmpi slt, %8, %cst_2 : tensor<1x32xi32> loc(#loc10)
    %10 = arith.muli %5, %cst_1 : tensor<128x1xi32> loc(#loc11)
    %11 = tt.broadcast %8 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc12)
    %12 = tt.broadcast %10 : tensor<128x1xi32> -> tensor<128x32xi32> loc(#loc12)
    %13 = arith.addi %11, %12 : tensor<128x32xi32> loc(#loc12)
    %14 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x32x!tt.ptr<f32>> loc(#loc13)
    %15 = tt.addptr %14, %13 : tensor<128x32x!tt.ptr<f32>>, tensor<128x32xi32> loc(#loc13)
    %16 = tt.broadcast %9 : tensor<1x32xi1> -> tensor<128x32xi1> loc(#loc14)
    %17 = tt.broadcast %6 : tensor<128x1xi1> -> tensor<128x32xi1> loc(#loc14)
    %18 = arith.andi %16, %17 : tensor<128x32xi1> loc(#loc14)
    %19 = tt.load %15, %18, %cst_0 : tensor<128x32x!tt.ptr<f32>> loc(#loc15)
    %20 = arith.select %18, %19, %cst_0 : tensor<128x32xi1>, tensor<128x32xf32> loc(#loc16)
    %21 = "tt.reduce"(%20) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc18)), %arg5: f32 loc(callsite(#loc1 at #loc18))):
      %26 = arith.addf %arg4, %arg5 : f32 loc(#loc29)
      tt.reduce.return %26 : f32 loc(#loc26)
    }) : (tensor<128x32xf32>) -> tensor<128xf32> loc(#loc26)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32> loc(#loc20)
    %23 = arith.divf %22, %cst : tensor<128x1xf32> loc(#loc21)
    gpu.barrier loc(#loc22)
    %24 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>> loc(#loc23)
    %25 = tt.addptr %24, %5 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc23)
    tt.store %25, %23, %6 : tensor<128x1x!tt.ptr<f32>> loc(#loc24)
    tt.return loc(#loc25)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":23:28)
#loc3 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":23:33)
#loc4 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":24:36)
#loc5 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":24:44)
#loc6 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":24:23)
#loc7 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":25:21)
#loc8 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":26:26)
#loc9 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":26:34)
#loc10 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":28:21)
#loc11 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":31:38)
#loc12 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":31:35)
#loc13 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":31:30)
#loc14 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":31:51)
#loc15 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":31:43)
#loc16 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":33:41)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":34:27)
#loc21 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":36:18)
#loc22 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":37:4)
#loc23 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":38:28)
#loc24 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":38:39)
#loc25 = loc("inductor_cache/gy/cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py":38:4)
#loc26 = loc(callsite(#loc17 at #loc18))
#loc28 = loc(callsite(#loc19 at #loc17))
#loc29 = loc(callsite(#loc28 at #loc18))
