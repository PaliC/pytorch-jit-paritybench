; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = sdiv i32 %18, 1024, !dbg !14
  %20 = srem i32 %19, 64, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %24 = sdiv i32 %18, 2048, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = sext i32 %20 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !30
  %46 = bitcast i32 %45 to float, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !33
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !34
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float 2.048000e+03) #3, !dbg !35
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float 2.048000e+03) #3, !dbg !35
  %57 = fadd float %55, 0x3EE4F8B580000000, !dbg !36
  %58 = fadd float %56, 0x3EE4F8B580000000, !dbg !36
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %59, 0, !dbg !37
  br i1 %.not.i, label %62, label %60, !dbg !37

60:                                               ; preds = %12
  %61 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %57), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

62:                                               ; preds = %12
  %63 = tail call float @llvm.nvvm.rsqrt.approx.f(float %57), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %60, %62
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], !dbg !37
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %64, 0, !dbg !37
  br i1 %.not.i1, label %67, label %65, !dbg !37

65:                                               ; preds = %__nv_rsqrtf.exit
  %66 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %58), !dbg !37
  br label %__nv_rsqrtf.exit3, !dbg !37

67:                                               ; preds = %__nv_rsqrtf.exit
  %68 = tail call float @llvm.nvvm.rsqrt.approx.f(float %58), !dbg !37
  br label %__nv_rsqrtf.exit3, !dbg !37

__nv_rsqrtf.exit3:                                ; preds = %65, %67
  %.0.i2 = phi float [ %66, %65 ], [ %68, %67 ], !dbg !37
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 2.048000e+03) #3, !dbg !38
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 2.048000e+03) #3, !dbg !38
  %71 = fadd float %69, 0x3EE4F8B580000000, !dbg !39
  %72 = fadd float %70, 0x3EE4F8B580000000, !dbg !39
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i4 = icmp eq i32 %73, 0, !dbg !40
  br i1 %.not.i4, label %76, label %74, !dbg !40

74:                                               ; preds = %__nv_rsqrtf.exit3
  %75 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %71), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

76:                                               ; preds = %__nv_rsqrtf.exit3
  %77 = tail call float @llvm.nvvm.rsqrt.approx.f(float %71), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

__nv_rsqrtf.exit6:                                ; preds = %74, %76
  %.0.i5 = phi float [ %75, %74 ], [ %77, %76 ], !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i7 = icmp eq i32 %78, 0, !dbg !40
  br i1 %.not.i7, label %81, label %79, !dbg !40

79:                                               ; preds = %__nv_rsqrtf.exit6
  %80 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %72), !dbg !40
  br label %__nv_rsqrtf.exit9, !dbg !40

81:                                               ; preds = %__nv_rsqrtf.exit6
  %82 = tail call float @llvm.nvvm.rsqrt.approx.f(float %72), !dbg !40
  br label %__nv_rsqrtf.exit9, !dbg !40

__nv_rsqrtf.exit9:                                ; preds = %79, %81
  %.0.i8 = phi float [ %80, %79 ], [ %82, %81 ], !dbg !40
  %83 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %84 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !28
  %85 = insertelement <4 x i32> %84, i32 %42, i64 1, !dbg !28
  %86 = insertelement <4 x i32> %85, i32 %27, i64 2, !dbg !28
  %87 = insertelement <4 x i32> %86, i32 %28, i64 3, !dbg !28
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !28
  %89 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %90 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !32
  %91 = insertelement <4 x i32> %90, i32 %50, i64 1, !dbg !32
  %92 = insertelement <4 x i32> %91, i32 %36, i64 2, !dbg !32
  %93 = insertelement <4 x i32> %92, i32 %37, i64 3, !dbg !32
  %94 = bitcast <4 x i32> %93 to <4 x float>, !dbg !32
  %95 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !34
  %96 = insertelement <4 x i32> %95, i32 %53, i64 1, !dbg !34
  %97 = insertelement <4 x i32> %96, i32 %39, i64 2, !dbg !34
  %98 = insertelement <4 x i32> %97, i32 %40, i64 3, !dbg !34
  %99 = bitcast <4 x i32> %98 to <4 x float>, !dbg !34
  %100 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !17
  %101 = insertelement <2 x i32> %100, i32 %89, i64 1, !dbg !17
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !17
  %103 = shufflevector <2 x float> %102, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>, !dbg !17
  %104 = fsub <4 x float> %103, %88, !dbg !41
  %105 = insertelement <4 x float> poison, float %.0.i8, i64 0, !dbg !42
  %106 = insertelement <4 x float> %105, float %.0.i5, i64 1, !dbg !42
  %107 = insertelement <4 x float> %106, float %.0.i, i64 2, !dbg !42
  %108 = insertelement <4 x float> %107, float %.0.i2, i64 3, !dbg !42
  %109 = fmul <4 x float> %104, %108, !dbg !42
  %110 = fmul <4 x float> %109, %94, !dbg !43
  %111 = fadd <4 x float> %110, %99, !dbg !44
  %112 = fcmp olt <4 x float> %111, zeroinitializer, !dbg !45
  %113 = extractelement <4 x i1> %112, i64 3, !dbg !49
  %114 = extractelement <4 x i1> %112, i64 2, !dbg !49
  %115 = extractelement <4 x i1> %112, i64 1, !dbg !51
  %116 = extractelement <4 x i1> %112, i64 0, !dbg !51
  %117 = getelementptr float, ptr addrspace(1) %9, i64 %21, !dbg !52
  %bc = bitcast <4 x float> %111 to <4 x i32>, !dbg !53
  %118 = extractelement <4 x i32> %bc, i64 2, !dbg !53
  %119 = select i1 %114, i32 0, i32 %118, !dbg !49
  %bc10 = bitcast <4 x float> %111 to <4 x i32>, !dbg !53
  %120 = extractelement <4 x i32> %bc10, i64 3, !dbg !53
  %121 = select i1 %113, i32 0, i32 %120, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %119, i32 %121, ptr addrspace(1) %117, i1 true) #3, !dbg !53
  %122 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !54
  %bc11 = bitcast <4 x float> %111 to <4 x i32>, !dbg !55
  %123 = extractelement <4 x i32> %bc11, i64 1, !dbg !55
  %124 = select i1 %115, i32 0, i32 %123, !dbg !51
  %bc12 = bitcast <4 x float> %111 to <4 x i32>, !dbg !55
  %125 = extractelement <4 x i32> %bc12, i64 0, !dbg !55
  %126 = select i1 %116, i32 0, i32 %125, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %126, ptr addrspace(1) %122, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckbbvxqyjulwlktbkvhqggmani3l6wigesrncoj43z3am4thxhkc.py", directory: "inductor_cache/kb")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_2", linkageName: "triton_poi_fused_native_group_norm_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 41, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 41, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 27, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 28, scope: !7)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 54, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !50)
!50 = !DILocation(line: 46, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 55, column: 25, scope: !7)
!53 = !DILocation(line: 55, column: 37, scope: !7)
!54 = !DILocation(line: 56, column: 25, scope: !7)
!55 = !DILocation(line: 56, column: 37, scope: !7)
!56 = !DILocation(line: 56, column: 4, scope: !7)
