; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_clone_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = lshr i32 %7, 2, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %10 = shl i32 %7, 2, !dbg !13
  %11 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !14
  %12 = insertelement <2 x i32> %11, i32 %6, i64 1, !dbg !14
  %13 = shl <2 x i32> %12, <i32 4, i32 6>, !dbg !14
  %14 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !13
  %15 = insertelement <2 x i32> %14, i32 %8, i64 1, !dbg !13
  %16 = and <2 x i32> %15, <i32 12, i32 31>, !dbg !13
  %17 = or disjoint <2 x i32> %13, %16, !dbg !15
  %18 = extractelement <2 x i32> %17, i64 1, !dbg !16
  %19 = or disjoint i32 %18, 32, !dbg !16
  %20 = icmp slt i32 %18, 44, !dbg !17
  %21 = icmp slt i32 %19, 44, !dbg !17
  %22 = extractelement <2 x i32> %17, i64 0, !dbg !18
  %23 = icmp slt i32 %22, 16, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %24 = sdiv i32 %.frozen, 11, !dbg !19
  %25 = mul i32 %24, 11, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %.frozen1 = freeze i32 %19, !dbg !19
  %26 = sdiv i32 %.frozen1, 11, !dbg !19
  %27 = mul i32 %26, 11, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %27, !dbg !20
  %28 = mul i32 %22, 11, !dbg !21
  %29 = add i32 %28, 11, !dbg !21
  %30 = add i32 %28, 22, !dbg !21
  %31 = add i32 %28, 33, !dbg !21
  %32 = mul i32 %24, 176, !dbg !22
  %33 = mul i32 %26, 176, !dbg !22
  %34 = add i32 %32, %.decomposed, !dbg !23
  %35 = add i32 %34, %28, !dbg !24
  %36 = add i32 %34, %29, !dbg !24
  %37 = add i32 %34, %30, !dbg !24
  %38 = add i32 %34, %31, !dbg !24
  %39 = add i32 %33, %.decomposed2, !dbg !23
  %40 = add i32 %39, %28, !dbg !24
  %41 = add i32 %39, %29, !dbg !24
  %42 = add i32 %39, %30, !dbg !24
  %43 = add i32 %39, %31, !dbg !24
  %44 = sext i32 %35 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %36 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %37 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %38 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %40 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = sext i32 %41 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = sext i32 %42 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = sext i32 %43 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = and i1 %20, %23, !dbg !26
  %61 = and i1 %21, %23, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %60) #1, !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %60) #1, !dbg !27
  %65 = bitcast i32 %64 to float, !dbg !27
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %60) #1, !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %60) #1, !dbg !27
  %69 = bitcast i32 %68 to float, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %61) #1, !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %61) #1, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %61) #1, !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %61) #1, !dbg !27
  %77 = bitcast i32 %76 to float, !dbg !27
  %78 = sext i32 %.decomposed to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !28
  %80 = sext i32 %.decomposed2 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #1, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #1, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #1, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #1, !dbg !29
  %86 = bitcast i32 %85 to float, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = fadd float %63, %86, !dbg !30
  %93 = fadd float %65, %86, !dbg !30
  %94 = fadd float %67, %86, !dbg !30
  %95 = fadd float %69, %86, !dbg !30
  %96 = fadd float %71, %91, !dbg !30
  %97 = fadd float %73, %91, !dbg !30
  %98 = fadd float %75, %91, !dbg !30
  %99 = fadd float %77, %91, !dbg !30
  %100 = shl i32 %18, 4, !dbg !31
  %101 = shl i32 %19, 4, !dbg !31
  %102 = add i32 %22, %100, !dbg !32
  %103 = add i32 %22, %101, !dbg !32
  %104 = sext i32 %102 to i64, !dbg !33
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !33
  %106 = sext i32 %103 to i64, !dbg !33
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !33
  %108 = bitcast float %92 to i32, !dbg !34
  %109 = bitcast float %93 to i32, !dbg !34
  %110 = bitcast float %94 to i32, !dbg !34
  %111 = bitcast float %95 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %108, i32 %109, i32 %110, i32 %111, ptr addrspace(1) %105, i1 %60) #1, !dbg !34
  %112 = bitcast float %96 to i32, !dbg !34
  %113 = bitcast float %97 to i32, !dbg !34
  %114 = bitcast float %98 to i32, !dbg !34
  %115 = bitcast float %99 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %112, i32 %113, i32 %114, i32 %115, ptr addrspace(1) %107, i1 %61) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "camnyhhhqe3e6v6pnn5jgcjnmolhroc2vvhupprmsyls36v2ssyq.py", directory: "inductor_cache/am")
!4 = !{ptr @triton_poi_fused_clone_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_0", linkageName: "triton_poi_fused_clone_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 44, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 23, column: 23, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 60, scope: !7)
!27 = !DILocation(line: 32, column: 52, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 33, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 25, scope: !7)
!34 = !DILocation(line: 35, column: 44, scope: !7)
!35 = !DILocation(line: 35, column: 4, scope: !7)
