#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":42:39)
#loc29 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":48:26)
#loc41 = loc(callsite(#loc1 at #loc19))
#loc47 = loc(callsite(#loc1 at #loc29))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__softmax_convolution_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<1x16xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %4 = arith.divsi %0, %c16_i32 : i32 loc(#loc5)
    %5 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc6)
    %6 = tt.splat %5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %8 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %9 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc7)
    %10 = tt.load %6, %8 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %11 = tt.load %7, %9 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc8)
    %13 = tt.load %12 : !tt.ptr<f32> loc(#loc9)
    %14 = tt.splat %13 : f32 -> tensor<1x1xf32, #blocked> loc(#loc10)
    %15 = tt.splat %13 : f32 -> tensor<1x1xf32, #blocked1> loc(#loc10)
    %16 = arith.muli %4, %c16_i32 : i32 loc(#loc11)
    %17 = tt.splat %16 : i32 -> tensor<1x16xi32, #blocked> loc(#loc12)
    %18 = arith.addi %3, %17 : tensor<1x16xi32, #blocked> loc(#loc12)
    %19 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc13)
    %20 = tt.addptr %19, %18 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc13)
    %21 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc14)
    %22 = tt.load %20, %21, %cst evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc14)
    %23 = arith.addf %10, %14 : tensor<1x1xf32, #blocked> loc(#loc15)
    %24 = arith.addf %11, %15 : tensor<1x1xf32, #blocked1> loc(#loc15)
    %25 = tt.broadcast %23 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc16)
    %26 = arith.mulf %25, %22 : tensor<1x16xf32, #blocked> loc(#loc16)
    %27 = arith.select %21, %26, %cst_0 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc17)
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc19)), %arg7: f32 loc(callsite(#loc1 at #loc19))):
      %43 = arith.cmpf ogt, %arg6, %arg7 : f32 loc(#loc49)
      %44 = arith.cmpf une, %arg6, %arg6 : f32 loc(#loc50)
      %45 = arith.ori %43, %44 : i1 loc(#loc51)
      %46 = arith.select %45, %arg6, %arg7 : f32 loc(#loc52)
      tt.reduce.return %46 : f32 loc(#loc40)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc40)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc24)
    %30 = tt.broadcast %29 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc25)
    %31 = arith.subf %26, %30 : tensor<1x16xf32, #blocked> loc(#loc25)
    %32 = math.exp %31 : tensor<1x16xf32, #blocked> loc(#loc26)
    %33 = arith.select %21, %32, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc27)
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc29)), %arg7: f32 loc(callsite(#loc1 at #loc29))):
      %43 = arith.addf %arg6, %arg7 : f32 loc(#loc53)
      tt.reduce.return %43 : f32 loc(#loc46)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc31)
    %36 = tt.broadcast %35 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc32)
    %37 = arith.divf %32, %36 : tensor<1x16xf32, #blocked> loc(#loc32)
    gpu.barrier loc(#loc33)
    tt.store %7, %24, %9 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %38 = arith.muli %0, %c16_i32 : i32 loc(#loc35)
    %39 = tt.splat %38 : i32 -> tensor<1x16xi32, #blocked> loc(#loc36)
    %40 = arith.addi %3, %39 : tensor<1x16xi32, #blocked> loc(#loc36)
    %41 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc37)
    %42 = tt.addptr %41, %40 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc37)
    tt.store %42, %37, %21 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc38)
    tt.return loc(#loc39)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":23:28)
#loc3 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":25:21)
#loc4 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":26:34)
#loc5 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":31:19)
#loc6 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":32:34)
#loc7 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":32:39)
#loc8 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":33:30)
#loc9 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":33:19)
#loc10 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":34:33)
#loc11 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":35:38)
#loc12 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":35:35)
#loc13 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":35:30)
#loc14 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":35:43)
#loc15 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":36:18)
#loc16 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":37:18)
#loc17 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":41:34)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc24 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":42:42)
#loc25 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":43:19)
#loc26 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":45:24)
#loc27 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":47:35)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc31 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":48:29)
#loc32 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":49:20)
#loc33 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":50:4)
#loc34 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":51:39)
#loc35 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:33)
#loc36 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:30)
#loc37 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:25)
#loc38 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:45)
#loc39 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:4)
#loc40 = loc(callsite(#loc18 at #loc19))
#loc42 = loc(callsite(#loc20 at #loc18))
#loc43 = loc(callsite(#loc21 at #loc18))
#loc44 = loc(callsite(#loc22 at #loc18))
#loc45 = loc(callsite(#loc23 at #loc18))
#loc46 = loc(callsite(#loc28 at #loc29))
#loc48 = loc(callsite(#loc30 at #loc28))
#loc49 = loc(callsite(#loc42 at #loc19))
#loc50 = loc(callsite(#loc43 at #loc19))
#loc51 = loc(callsite(#loc44 at #loc19))
#loc52 = loc(callsite(#loc45 at #loc19))
#loc53 = loc(callsite(#loc48 at #loc29))
