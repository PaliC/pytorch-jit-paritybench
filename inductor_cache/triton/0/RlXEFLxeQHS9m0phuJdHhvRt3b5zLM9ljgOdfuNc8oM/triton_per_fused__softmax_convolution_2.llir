; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 64, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = sdiv i32 %7, 16, !dbg !13
  %12 = sext i32 %7 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %8) #3, !dbg !15
  %15 = bitcast i32 %14 to float, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %8) #3, !dbg !15
  %17 = bitcast i32 %16 to float, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = shl nsw i32 %11, 4, !dbg !17
  %21 = or disjoint i32 %20, %10, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %8, i32 0, i1 %8) #3, !dbg !20
  %25 = bitcast i32 %24 to float, !dbg !20
  %26 = fadd float %15, %19, !dbg !21
  %27 = fadd float %17, %19, !dbg !21
  %28 = fmul float %26, %25, !dbg !22
  %29 = select i1 %8, float %28, float 0xFFF0000000000000, !dbg !23
  %30 = bitcast float %29 to i32, !dbg !24
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 8, i32 31), !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = fcmp ogt float %29, %32, !dbg !28
  %34 = fcmp uno float %29, 0.000000e+00, !dbg !30
  %35 = or i1 %33, %34, !dbg !31
  %36 = select i1 %35, float %29, float %32, !dbg !32
  %37 = bitcast float %36 to i32, !dbg !24
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 4, i32 31), !dbg !24
  %39 = bitcast i32 %38 to float, !dbg !24
  %40 = fcmp ogt float %36, %39, !dbg !28
  %41 = fcmp uno float %36, 0.000000e+00, !dbg !30
  %42 = or i1 %40, %41, !dbg !31
  %43 = select i1 %42, float %36, float %39, !dbg !32
  %44 = bitcast float %43 to i32, !dbg !24
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = fcmp ogt float %43, %46, !dbg !28
  %48 = fcmp uno float %43, 0.000000e+00, !dbg !30
  %49 = or i1 %47, %48, !dbg !31
  %50 = select i1 %49, float %43, float %46, !dbg !32
  %51 = bitcast float %50 to i32, !dbg !24
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = fcmp ogt float %50, %53, !dbg !28
  %55 = fcmp uno float %50, 0.000000e+00, !dbg !30
  %56 = or i1 %54, %55, !dbg !31
  %57 = select i1 %56, float %50, float %53, !dbg !32
  %58 = fsub float %28, %57, !dbg !33
  %59 = fmul float %58, 0x3FF7154760000000, !dbg !34
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #3, !dbg !34
  %61 = select i1 %8, float %60, float 0.000000e+00, !dbg !35
  %62 = bitcast float %61 to i32, !dbg !36
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !36
  %64 = bitcast i32 %63 to float, !dbg !36
  %65 = fadd float %61, %64, !dbg !40
  %66 = bitcast float %65 to i32, !dbg !36
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = fadd float %65, %68, !dbg !40
  %70 = bitcast float %69 to i32, !dbg !36
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !36
  %72 = bitcast i32 %71 to float, !dbg !36
  %73 = fadd float %69, %72, !dbg !40
  %74 = bitcast float %73 to i32, !dbg !36
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !36
  %76 = bitcast i32 %75 to float, !dbg !36
  %77 = fadd float %73, %76, !dbg !40
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %77) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %urem = and i32 %9, 63, !dbg !44
  %79 = icmp eq i32 %urem, 0, !dbg !44
  %80 = bitcast float %27 to i32, !dbg !44
  %81 = and i1 %79, %8, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %13, i1 %81) #3, !dbg !44
  %82 = shl i32 %7, 4, !dbg !45
  %83 = or disjoint i32 %82, %10, !dbg !46
  %84 = sext i32 %83 to i64, !dbg !47
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !47
  %86 = and i32 %9, 48, !dbg !48
  %87 = icmp eq i32 %86, 0, !dbg !48
  %88 = bitcast float %78 to i32, !dbg !48
  %89 = and i1 %87, %8, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %85, i1 %89) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py", directory: "inductor_cache/6u")
!4 = !{ptr @triton_per_fused__softmax_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_convolution_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_convolution_2", linkageName: "triton_per_fused__softmax_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 33, column: 19, scope: !7)
!17 = !DILocation(line: 35, column: 38, scope: !7)
!18 = !DILocation(line: 35, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 30, scope: !7)
!20 = !DILocation(line: 35, column: 43, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 41, column: 34, scope: !7)
!24 = !DILocation(line: 131, column: 29, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 42, column: 39, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !27)
!31 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !27)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !27)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 24, scope: !7)
!35 = !DILocation(line: 47, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 48, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 4, scope: !7)
!44 = !DILocation(line: 51, column: 39, scope: !7)
!45 = !DILocation(line: 52, column: 33, scope: !7)
!46 = !DILocation(line: 52, column: 30, scope: !7)
!47 = !DILocation(line: 52, column: 25, scope: !7)
!48 = !DILocation(line: 52, column: 45, scope: !7)
!49 = !DILocation(line: 52, column: 4, scope: !7)
