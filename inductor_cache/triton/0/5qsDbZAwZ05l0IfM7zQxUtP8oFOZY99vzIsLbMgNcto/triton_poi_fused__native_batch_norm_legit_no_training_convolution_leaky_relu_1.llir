; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = shl i32 %12, 2, !dbg !12
  %17 = and i32 %16, 28, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = icmp slt i32 %19, 64, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 5, !dbg !16
  %24 = or disjoint i32 %23, %17, !dbg !17
  %25 = icmp slt i32 %24, 256, !dbg !18
  %26 = shl i32 %18, 8, !dbg !19
  %27 = shl i32 %19, 8, !dbg !19
  %28 = add i32 %24, %26, !dbg !20
  %29 = add i32 %24, %27, !dbg !20
  %30 = sext i32 %28 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = and i1 %20, %25, !dbg !22
  %35 = and i1 %21, %25, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %34) #4, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %35) #4, !dbg !23
  %38 = sext i32 %24 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %25) #4, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %25) #4, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !28
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %25) #4, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !29
  %49 = bitcast i32 %45 to float, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !30
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %25) #4, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !32
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %25) #4, !dbg !33
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !34
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !34
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %61, 0, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %62, 0, !dbg !35
  br i1 %.not.i, label %68, label %63, !dbg !35

63:                                               ; preds = %9
  br i1 %.not1.i, label %66, label %64, !dbg !35

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

68:                                               ; preds = %9
  br i1 %.not1.i, label %71, label %69, !dbg !35

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !35
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i15 = icmp eq i32 %73, 0, !dbg !35
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i18 = icmp eq i32 %74, 0, !dbg !35
  br i1 %.not.i15, label %80, label %75, !dbg !35

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %78, label %76, !dbg !35

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %83, label %81, !dbg !35

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

__nv_sqrtf.exit19:                                ; preds = %76, %78, %81, %83
  %.0.i17 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !35
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i20 = icmp eq i32 %85, 0, !dbg !35
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i23 = icmp eq i32 %86, 0, !dbg !35
  br i1 %.not.i20, label %92, label %87, !dbg !35

87:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %90, label %88, !dbg !35

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

92:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %95, label %93, !dbg !35

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

__nv_sqrtf.exit24:                                ; preds = %88, %90, %93, %95
  %.0.i22 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !35
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i25 = icmp eq i32 %97, 0, !dbg !35
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i28 = icmp eq i32 %98, 0, !dbg !35
  br i1 %.not.i25, label %104, label %99, !dbg !35

99:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %102, label %100, !dbg !35

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

104:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %107, label %105, !dbg !35

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

__nv_sqrtf.exit29:                                ; preds = %100, %102, %105, %107
  %.0.i27 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !35
  %109 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %110 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %111 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %113 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %116 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %119 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %120 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %121 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %122 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %123 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %124 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %125 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !31
  %132 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !31
  %133 = or disjoint i32 %23, %15, !dbg !17
  %134 = icmp slt i32 %133, 256, !dbg !18
  %135 = or disjoint i32 %11, %17, !dbg !13
  %136 = icmp slt i32 %135, 64, !dbg !14
  %137 = and i1 %136, %134, !dbg !22
  %138 = or disjoint i32 %23, %14, !dbg !17
  %139 = icmp slt i32 %138, 256, !dbg !18
  %140 = and i1 %136, %139, !dbg !22
  %.frozen = freeze i32 %135, !dbg !36
  %141 = sdiv i32 %.frozen, 16, !dbg !36
  %142 = mul i32 %141, 16, !dbg !37
  %.decomposed = sub i32 %.frozen, %142, !dbg !37
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !38
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !38
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !38
  %147 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !25
  %148 = insertelement <4 x i32> %147, i32 %113, i64 1, !dbg !25
  %149 = insertelement <4 x i32> %148, i32 %116, i64 2, !dbg !25
  %150 = insertelement <4 x i32> %149, i32 %119, i64 3, !dbg !25
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !25
  %152 = shufflevector <4 x float> %151, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %153 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !27
  %154 = insertelement <4 x i32> %153, i32 %114, i64 1, !dbg !27
  %155 = insertelement <4 x i32> %154, i32 %117, i64 2, !dbg !27
  %156 = insertelement <4 x i32> %155, i32 %120, i64 3, !dbg !27
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !27
  %158 = shufflevector <4 x float> %157, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %159 = insertelement <8 x i32> poison, i32 %109, i64 0, !dbg !23
  %160 = insertelement <8 x i32> %159, i32 %112, i64 1, !dbg !23
  %161 = insertelement <8 x i32> %160, i32 %115, i64 2, !dbg !23
  %162 = insertelement <8 x i32> %161, i32 %118, i64 3, !dbg !23
  %163 = insertelement <8 x i32> %162, i32 %121, i64 4, !dbg !23
  %164 = insertelement <8 x i32> %163, i32 %122, i64 5, !dbg !23
  %165 = insertelement <8 x i32> %164, i32 %123, i64 6, !dbg !23
  %166 = insertelement <8 x i32> %165, i32 %124, i64 7, !dbg !23
  %167 = bitcast <8 x i32> %166 to <8 x float>, !dbg !23
  %168 = fadd <8 x float> %152, %167, !dbg !39
  %169 = fsub <8 x float> %168, %158, !dbg !40
  %170 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !33
  %171 = insertelement <4 x i32> %170, i32 %126, i64 1, !dbg !33
  %172 = insertelement <4 x i32> %171, i32 %127, i64 2, !dbg !33
  %173 = insertelement <4 x i32> %172, i32 %128, i64 3, !dbg !33
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !33
  %175 = shufflevector <4 x float> %174, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %176 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !31
  %177 = insertelement <4 x i32> %176, i32 %130, i64 1, !dbg !31
  %178 = insertelement <4 x i32> %177, i32 %131, i64 2, !dbg !31
  %179 = insertelement <4 x i32> %178, i32 %132, i64 3, !dbg !31
  %180 = bitcast <4 x i32> %179 to <4 x float>, !dbg !31
  %181 = shufflevector <4 x float> %180, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %182 = insertelement <8 x float> poison, float %146, i64 0, !dbg !41
  %183 = insertelement <8 x float> %182, float %145, i64 1, !dbg !41
  %184 = insertelement <8 x float> %183, float %144, i64 2, !dbg !41
  %185 = insertelement <8 x float> %184, float %143, i64 3, !dbg !41
  %186 = shufflevector <8 x float> %185, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %187 = fmul <8 x float> %169, %186, !dbg !41
  %188 = fmul <8 x float> %187, %181, !dbg !42
  %189 = fadd <8 x float> %188, %175, !dbg !43
  %190 = fcmp ogt <8 x float> %189, zeroinitializer, !dbg !44
  %191 = extractelement <8 x float> %189, i64 7, !dbg !45
  %192 = fmul float %191, 0x3FC99999A0000000, !dbg !46
  %193 = extractelement <8 x float> %189, i64 6, !dbg !45
  %194 = fmul float %193, 0x3FC99999A0000000, !dbg !46
  %195 = extractelement <8 x float> %189, i64 5, !dbg !45
  %196 = fmul float %195, 0x3FC99999A0000000, !dbg !46
  %197 = extractelement <8 x float> %189, i64 4, !dbg !45
  %198 = fmul float %197, 0x3FC99999A0000000, !dbg !46
  %199 = extractelement <8 x float> %189, i64 3, !dbg !45
  %200 = fmul float %199, 0x3FC99999A0000000, !dbg !46
  %201 = extractelement <8 x float> %189, i64 2, !dbg !45
  %202 = fmul float %201, 0x3FC99999A0000000, !dbg !46
  %203 = extractelement <8 x float> %189, i64 1, !dbg !45
  %204 = fmul float %203, 0x3FC99999A0000000, !dbg !46
  %205 = extractelement <8 x float> %189, i64 0, !dbg !45
  %206 = fmul float %205, 0x3FC99999A0000000, !dbg !46
  %207 = extractelement <8 x i1> %190, i64 7, !dbg !45
  %208 = select i1 %207, float %191, float %192, !dbg !45
  %209 = extractelement <8 x i1> %190, i64 6, !dbg !45
  %210 = select i1 %209, float %193, float %194, !dbg !45
  %211 = extractelement <8 x i1> %190, i64 5, !dbg !45
  %212 = select i1 %211, float %195, float %196, !dbg !45
  %213 = extractelement <8 x i1> %190, i64 4, !dbg !45
  %214 = select i1 %213, float %197, float %198, !dbg !45
  %215 = extractelement <8 x i1> %190, i64 3, !dbg !45
  %216 = select i1 %215, float %199, float %200, !dbg !45
  %217 = extractelement <8 x i1> %190, i64 2, !dbg !45
  %218 = select i1 %217, float %201, float %202, !dbg !45
  %219 = extractelement <8 x i1> %190, i64 1, !dbg !45
  %220 = select i1 %219, float %203, float %204, !dbg !45
  %221 = extractelement <8 x i1> %190, i64 0, !dbg !45
  %222 = select i1 %221, float %205, float %206, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %bc = bitcast <8 x float> %168 to <8 x i32>, !dbg !48
  %223 = extractelement <8 x i32> %bc, i64 7, !dbg !48
  %bc30 = bitcast <8 x float> %168 to <8 x i32>, !dbg !48
  %224 = extractelement <8 x i32> %bc30, i64 6, !dbg !48
  %bc31 = bitcast <8 x float> %168 to <8 x i32>, !dbg !48
  %225 = extractelement <8 x i32> %bc31, i64 5, !dbg !48
  %bc32 = bitcast <8 x float> %168 to <8 x i32>, !dbg !48
  %226 = extractelement <8 x i32> %bc32, i64 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %223, i32 %224, i32 %225, i32 %226, ptr addrspace(1) %31, i1 %34) #4, !dbg !48
  %bc33 = bitcast <8 x float> %168 to <8 x i32>, !dbg !48
  %227 = extractelement <8 x i32> %bc33, i64 3, !dbg !48
  %bc34 = bitcast <8 x float> %168 to <8 x i32>, !dbg !48
  %228 = extractelement <8 x i32> %bc34, i64 2, !dbg !48
  %bc35 = bitcast <8 x float> %168 to <8 x i32>, !dbg !48
  %229 = extractelement <8 x i32> %bc35, i64 1, !dbg !48
  %bc36 = bitcast <8 x float> %168 to <8 x i32>, !dbg !48
  %230 = extractelement <8 x i32> %bc36, i64 0, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %227, i32 %228, i32 %229, i32 %230, ptr addrspace(1) %33, i1 %35) #4, !dbg !48
  %231 = shl i32 %138, 4, !dbg !49
  %232 = shl i32 %133, 4, !dbg !49
  %233 = shl i32 %141, 12, !dbg !50
  %234 = add i32 %233, %.decomposed, !dbg !51
  %235 = add i32 %234, %231, !dbg !52
  %236 = add i32 %234, %232, !dbg !52
  %237 = sext i32 %235 to i64, !dbg !53
  %238 = getelementptr float, ptr addrspace(1) %6, i64 %237, !dbg !53
  %239 = sext i32 %236 to i64, !dbg !53
  %240 = getelementptr float, ptr addrspace(1) %6, i64 %239, !dbg !53
  %241 = shl i32 %12, 7, !dbg !54
  %242 = and i32 %241, 896, !dbg !54
  %243 = or disjoint i32 %242, %14, !dbg !54
  %244 = and i32 %16, 508, !dbg !54
  %245 = lshr exact i32 %242, 1, !dbg !54
  %246 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %245, !dbg !54
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %243, !dbg !54
  %248 = bitcast float %208 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !54
  %249 = or disjoint i32 %243, 32, !dbg !54
  %250 = lshr i32 %249, 3, !dbg !54
  %251 = and i32 %250, 116, !dbg !54
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !54
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %249, !dbg !54
  %254 = bitcast float %210 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !54
  %255 = or disjoint i32 %243, 64, !dbg !54
  %256 = lshr i32 %255, 3, !dbg !54
  %257 = and i32 %256, 120, !dbg !54
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !54
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %255, !dbg !54
  %260 = bitcast float %212 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !54
  %261 = or disjoint i32 %243, 96, !dbg !54
  %262 = lshr i32 %261, 3, !dbg !54
  %263 = and i32 %262, 124, !dbg !54
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !54
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %261, !dbg !54
  %266 = bitcast float %214 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !54
  %267 = or disjoint i32 %243, 16, !dbg !54
  %268 = getelementptr float, ptr addrspace(3) %246, i32 %267, !dbg !54
  %269 = bitcast float %216 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !54
  %270 = or disjoint i32 %243, 48, !dbg !54
  %271 = lshr i32 %270, 3, !dbg !54
  %272 = and i32 %271, 116, !dbg !54
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !54
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %270, !dbg !54
  %275 = bitcast float %218 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !54
  %276 = or disjoint i32 %243, 80, !dbg !54
  %277 = lshr i32 %276, 3, !dbg !54
  %278 = and i32 %277, 120, !dbg !54
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !54
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %276, !dbg !54
  %281 = bitcast float %220 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !54
  %282 = or disjoint i32 %243, 112, !dbg !54
  %283 = lshr i32 %282, 3, !dbg !54
  %284 = and i32 %283, 124, !dbg !54
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !54
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %282, !dbg !54
  %287 = bitcast float %222 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %288 = lshr i32 %16, 3, !dbg !54
  %289 = and i32 %288, 60, !dbg !54
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !54
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %244, !dbg !54
  %292 = or disjoint i32 %244, 512, !dbg !54
  %293 = lshr i32 %292, 3, !dbg !54
  %294 = and i32 %293, 124, !dbg !54
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !54
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %292, !dbg !54
  %297 = load <4 x i32>, ptr addrspace(3) %296, align 16, !dbg !54
  %.extract = load i32, ptr addrspace(3) %291, align 16, !dbg !54
  %298 = getelementptr inbounds i8, ptr addrspace(3) %291, i32 4, !dbg !54
  %.extract8 = load i32, ptr addrspace(3) %298, align 4, !dbg !54
  %299 = getelementptr inbounds i8, ptr addrspace(3) %291, i32 8, !dbg !54
  %.extract9 = load i32, ptr addrspace(3) %299, align 8, !dbg !54
  %300 = getelementptr inbounds i8, ptr addrspace(3) %291, i32 12, !dbg !54
  %.extract10 = load i32, ptr addrspace(3) %300, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %238, i1 %140) #4, !dbg !54
  %.extract11 = extractelement <4 x i32> %297, i64 0, !dbg !54
  %.extract12 = extractelement <4 x i32> %297, i64 1, !dbg !54
  %.extract13 = extractelement <4 x i32> %297, i64 2, !dbg !54
  %.extract14 = extractelement <4 x i32> %297, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %240, i1 %137) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2innfelhkdx5brpzizufs3l4bdnjdo25vvxgqlmua67aru33vdu.py", directory: "inductor_cache/2i")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 56, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 26, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 35, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 4, scope: !7)
!48 = !DILocation(line: 56, column: 48, scope: !7)
!49 = !DILocation(line: 57, column: 33, scope: !7)
!50 = !DILocation(line: 57, column: 43, scope: !7)
!51 = !DILocation(line: 57, column: 30, scope: !7)
!52 = !DILocation(line: 57, column: 38, scope: !7)
!53 = !DILocation(line: 57, column: 25, scope: !7)
!54 = !DILocation(line: 57, column: 55, scope: !7)
!55 = !DILocation(line: 57, column: 4, scope: !7)
