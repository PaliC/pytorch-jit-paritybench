; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 3, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = icmp slt i32 %16, 16, !dbg !14
  %21 = icmp slt i32 %17, 16, !dbg !14
  %22 = icmp slt i32 %18, 16, !dbg !14
  %23 = icmp slt i32 %19, 16, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = and i32 %15, 252, !dbg !17
  %27 = and i32 %12, 255, !dbg !17
  %28 = or disjoint i32 %25, %26, !dbg !18
  %29 = or disjoint i32 %25, %27, !dbg !18
  %30 = icmp slt i32 %28, 1024, !dbg !19
  %31 = icmp slt i32 %29, 1024, !dbg !19
  %32 = shl i32 %16, 10, !dbg !20
  %33 = shl i32 %17, 10, !dbg !20
  %34 = shl i32 %18, 10, !dbg !20
  %35 = shl i32 %19, 10, !dbg !20
  %36 = add i32 %28, %32, !dbg !21
  %37 = add i32 %28, %33, !dbg !21
  %38 = add i32 %28, %34, !dbg !21
  %39 = add i32 %28, %35, !dbg !21
  %40 = sext i32 %36 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %37 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %38 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = sext i32 %39 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = and i1 %20, %30, !dbg !23
  %49 = and i1 %21, %30, !dbg !23
  %50 = and i1 %22, %30, !dbg !23
  %51 = and i1 %23, %30, !dbg !23
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = and i32 %15, 1020, !dbg !24
  %73 = lshr i32 %72, 8, !dbg !24
  %74 = or disjoint i32 %73, %72, !dbg !24
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74, !dbg !24
  %76 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #4, !dbg !24
  %77 = or disjoint i32 %72, 1, !dbg !24
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !24
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %77, !dbg !24
  %80 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #4, !dbg !24
  %81 = or disjoint i32 %72, 2, !dbg !24
  %82 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %81, !dbg !24
  %83 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #4, !dbg !24
  %84 = or disjoint i32 %72, 3, !dbg !24
  %85 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %84, !dbg !24
  %86 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !24
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %89 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 1028, !dbg !24
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %91 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 2056, !dbg !24
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %93 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 3084, !dbg !24
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %95 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %95, i1 true) #4, !dbg !24
  %96 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %96, i1 true) #4, !dbg !24
  %97 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %97, i1 true) #4, !dbg !24
  %98 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %98, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %99 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %100 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %101 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %102 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %103 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %103, i1 true) #4, !dbg !24
  %104 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %104, i1 true) #4, !dbg !24
  %105 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %105, i1 true) #4, !dbg !24
  %106 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %106, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %107 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %108 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %109 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %110 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %111 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %111, i1 true) #4, !dbg !24
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %112, i1 true) #4, !dbg !24
  %113 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %113, i1 true) #4, !dbg !24
  %114 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %114, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %115 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %116 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %117 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %118 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  %119 = sext i32 %29 to i64, !dbg !25
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !25
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %31) #4, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %31) #4, !dbg !28
  %124 = bitcast i32 %123 to float, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !29
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %31) #4, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !31
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %31) #4, !dbg !32
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !33
  %132 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !33
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %48) #4, !dbg !34
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %49) #4, !dbg !34
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %50) #4, !dbg !34
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 %51) #4, !dbg !34
  %137 = fadd float %124, 0x3EE4F8B580000000, !dbg !35
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %138, 0, !dbg !36
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %139, 0, !dbg !36
  br i1 %.not.i, label %145, label %140, !dbg !36

140:                                              ; preds = %9
  br i1 %.not1.i, label %143, label %141, !dbg !36

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

145:                                              ; preds = %9
  br i1 %.not1.i, label %148, label %146, !dbg !36

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %141, %143, %146, %148
  %.0.i = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !36
  %150 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !34
  %151 = bitcast i32 %150 to float, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !34
  %153 = bitcast i32 %152 to float, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !34
  %155 = bitcast i32 %154 to float, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !34
  %157 = bitcast i32 %156 to float, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !34
  %159 = bitcast i32 %158 to float, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !34
  %161 = bitcast i32 %160 to float, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !34
  %163 = bitcast i32 %162 to float, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !34
  %165 = bitcast i32 %164 to float, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !34
  %167 = bitcast i32 %166 to float, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !34
  %169 = bitcast i32 %168 to float, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !34
  %171 = bitcast i32 %170 to float, !dbg !34
  %172 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !34
  %173 = bitcast i32 %172 to float, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !34
  %175 = bitcast i32 %174 to float, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !34
  %177 = bitcast i32 %176 to float, !dbg !34
  %178 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !34
  %179 = bitcast i32 %178 to float, !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !34
  %181 = bitcast i32 %180 to float, !dbg !34
  %182 = lshr i32 %12, 2, !dbg !17
  %183 = and i32 %182, 63, !dbg !17
  %184 = or disjoint i32 %183, %25, !dbg !18
  %185 = or disjoint i32 %184, 192, !dbg !18
  %186 = icmp slt i32 %185, 1024, !dbg !19
  %187 = and i32 %15, 12, !dbg !12
  %188 = or disjoint i32 %11, %187, !dbg !13
  %189 = icmp slt i32 %188, 16, !dbg !14
  %190 = and i1 %189, %186, !dbg !23
  %191 = or disjoint i32 %184, 128, !dbg !18
  %192 = icmp slt i32 %191, 1024, !dbg !19
  %193 = and i1 %189, %192, !dbg !23
  %194 = or disjoint i32 %184, 64, !dbg !18
  %195 = icmp slt i32 %194, 1024, !dbg !19
  %196 = and i1 %189, %195, !dbg !23
  %197 = icmp slt i32 %184, 1024, !dbg !19
  %198 = and i1 %189, %197, !dbg !23
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %200 = insertelement <16 x float> poison, float %118, i64 0, !dbg !38
  %201 = insertelement <16 x float> %200, float %117, i64 1, !dbg !38
  %202 = insertelement <16 x float> %201, float %116, i64 2, !dbg !38
  %203 = insertelement <16 x float> %202, float %115, i64 3, !dbg !38
  %204 = insertelement <16 x float> %203, float %110, i64 4, !dbg !38
  %205 = insertelement <16 x float> %204, float %109, i64 5, !dbg !38
  %206 = insertelement <16 x float> %205, float %108, i64 6, !dbg !38
  %207 = insertelement <16 x float> %206, float %107, i64 7, !dbg !38
  %208 = insertelement <16 x float> %207, float %102, i64 8, !dbg !38
  %209 = insertelement <16 x float> %208, float %101, i64 9, !dbg !38
  %210 = insertelement <16 x float> %209, float %100, i64 10, !dbg !38
  %211 = insertelement <16 x float> %210, float %99, i64 11, !dbg !38
  %212 = insertelement <16 x float> %211, float %94, i64 12, !dbg !38
  %213 = insertelement <16 x float> %212, float %92, i64 13, !dbg !38
  %214 = insertelement <16 x float> %213, float %90, i64 14, !dbg !38
  %215 = insertelement <16 x float> %214, float %88, i64 15, !dbg !38
  %216 = insertelement <16 x i32> poison, i32 %121, i64 0, !dbg !38
  %217 = bitcast <16 x i32> %216 to <16 x float>, !dbg !38
  %218 = shufflevector <16 x float> %217, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %219 = fsub <16 x float> %215, %218, !dbg !38
  %220 = insertelement <16 x float> poison, float %199, i64 0, !dbg !39
  %221 = shufflevector <16 x float> %220, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %222 = fmul <16 x float> %219, %221, !dbg !39
  %223 = insertelement <16 x i32> poison, i32 %126, i64 0, !dbg !40
  %224 = bitcast <16 x i32> %223 to <16 x float>, !dbg !40
  %225 = shufflevector <16 x float> %224, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %226 = fmul <16 x float> %222, %225, !dbg !40
  %227 = insertelement <16 x i32> poison, i32 %128, i64 0, !dbg !41
  %228 = bitcast <16 x i32> %227 to <16 x float>, !dbg !41
  %229 = shufflevector <16 x float> %228, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %230 = fadd <16 x float> %226, %229, !dbg !41
  %231 = fcmp ogt <16 x float> %230, zeroinitializer, !dbg !42
  %232 = extractelement <16 x float> %230, i64 15, !dbg !43
  %233 = fmul float %232, 0x3FB99999A0000000, !dbg !44
  %234 = extractelement <16 x float> %230, i64 14, !dbg !43
  %235 = fmul float %234, 0x3FB99999A0000000, !dbg !44
  %236 = extractelement <16 x float> %230, i64 13, !dbg !43
  %237 = fmul float %236, 0x3FB99999A0000000, !dbg !44
  %238 = extractelement <16 x float> %230, i64 12, !dbg !43
  %239 = fmul float %238, 0x3FB99999A0000000, !dbg !44
  %240 = extractelement <16 x float> %230, i64 11, !dbg !43
  %241 = fmul float %240, 0x3FB99999A0000000, !dbg !44
  %242 = extractelement <16 x float> %230, i64 10, !dbg !43
  %243 = fmul float %242, 0x3FB99999A0000000, !dbg !44
  %244 = extractelement <16 x float> %230, i64 9, !dbg !43
  %245 = fmul float %244, 0x3FB99999A0000000, !dbg !44
  %246 = extractelement <16 x float> %230, i64 8, !dbg !43
  %247 = fmul float %246, 0x3FB99999A0000000, !dbg !44
  %248 = extractelement <16 x float> %230, i64 7, !dbg !43
  %249 = fmul float %248, 0x3FB99999A0000000, !dbg !44
  %250 = extractelement <16 x float> %230, i64 6, !dbg !43
  %251 = fmul float %250, 0x3FB99999A0000000, !dbg !44
  %252 = extractelement <16 x float> %230, i64 5, !dbg !43
  %253 = fmul float %252, 0x3FB99999A0000000, !dbg !44
  %254 = extractelement <16 x float> %230, i64 4, !dbg !43
  %255 = fmul float %254, 0x3FB99999A0000000, !dbg !44
  %256 = extractelement <16 x float> %230, i64 3, !dbg !43
  %257 = fmul float %256, 0x3FB99999A0000000, !dbg !44
  %258 = extractelement <16 x float> %230, i64 2, !dbg !43
  %259 = fmul float %258, 0x3FB99999A0000000, !dbg !44
  %260 = extractelement <16 x float> %230, i64 1, !dbg !43
  %261 = fmul float %260, 0x3FB99999A0000000, !dbg !44
  %262 = extractelement <16 x float> %230, i64 0, !dbg !43
  %263 = fmul float %262, 0x3FB99999A0000000, !dbg !44
  %264 = extractelement <16 x i1> %231, i64 15, !dbg !43
  %265 = select i1 %264, float %232, float %233, !dbg !43
  %266 = extractelement <16 x i1> %231, i64 14, !dbg !43
  %267 = select i1 %266, float %234, float %235, !dbg !43
  %268 = extractelement <16 x i1> %231, i64 13, !dbg !43
  %269 = select i1 %268, float %236, float %237, !dbg !43
  %270 = extractelement <16 x i1> %231, i64 12, !dbg !43
  %271 = select i1 %270, float %238, float %239, !dbg !43
  %272 = extractelement <16 x i1> %231, i64 11, !dbg !43
  %273 = select i1 %272, float %240, float %241, !dbg !43
  %274 = extractelement <16 x i1> %231, i64 10, !dbg !43
  %275 = select i1 %274, float %242, float %243, !dbg !43
  %276 = extractelement <16 x i1> %231, i64 9, !dbg !43
  %277 = select i1 %276, float %244, float %245, !dbg !43
  %278 = extractelement <16 x i1> %231, i64 8, !dbg !43
  %279 = select i1 %278, float %246, float %247, !dbg !43
  %280 = extractelement <16 x i1> %231, i64 7, !dbg !43
  %281 = select i1 %280, float %248, float %249, !dbg !43
  %282 = extractelement <16 x i1> %231, i64 6, !dbg !43
  %283 = select i1 %282, float %250, float %251, !dbg !43
  %284 = extractelement <16 x i1> %231, i64 5, !dbg !43
  %285 = select i1 %284, float %252, float %253, !dbg !43
  %286 = extractelement <16 x i1> %231, i64 4, !dbg !43
  %287 = select i1 %286, float %254, float %255, !dbg !43
  %288 = extractelement <16 x i1> %231, i64 3, !dbg !43
  %289 = select i1 %288, float %256, float %257, !dbg !43
  %290 = extractelement <16 x i1> %231, i64 2, !dbg !43
  %291 = select i1 %290, float %258, float %259, !dbg !43
  %292 = extractelement <16 x i1> %231, i64 1, !dbg !43
  %293 = select i1 %292, float %260, float %261, !dbg !43
  %294 = extractelement <16 x i1> %231, i64 0, !dbg !43
  %295 = select i1 %294, float %262, float %263, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %296 = bitcast float %265 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %296, i1 true) #4, !dbg !43
  %297 = bitcast float %267 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %297, i1 true) #4, !dbg !43
  %298 = bitcast float %269 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %298, i1 true) #4, !dbg !43
  %299 = bitcast float %271 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %299, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %300 = load float, ptr addrspace(3) %75, align 4, !dbg !43
  %301 = load float, ptr addrspace(3) %79, align 4, !dbg !43
  %302 = load float, ptr addrspace(3) %82, align 4, !dbg !43
  %303 = load float, ptr addrspace(3) %85, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %304 = bitcast float %273 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %304, i1 true) #4, !dbg !43
  %305 = bitcast float %275 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %305, i1 true) #4, !dbg !43
  %306 = bitcast float %277 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %306, i1 true) #4, !dbg !43
  %307 = bitcast float %279 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %307, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %308 = load float, ptr addrspace(3) %75, align 4, !dbg !43
  %309 = load float, ptr addrspace(3) %79, align 4, !dbg !43
  %310 = load float, ptr addrspace(3) %82, align 4, !dbg !43
  %311 = load float, ptr addrspace(3) %85, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %312 = bitcast float %281 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %312, i1 true) #4, !dbg !43
  %313 = bitcast float %283 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %313, i1 true) #4, !dbg !43
  %314 = bitcast float %285 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %314, i1 true) #4, !dbg !43
  %315 = bitcast float %287 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %315, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %316 = load float, ptr addrspace(3) %75, align 4, !dbg !43
  %317 = load float, ptr addrspace(3) %79, align 4, !dbg !43
  %318 = load float, ptr addrspace(3) %82, align 4, !dbg !43
  %319 = load float, ptr addrspace(3) %85, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %320 = bitcast float %289 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %320, i1 true) #4, !dbg !43
  %321 = bitcast float %291 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %321, i1 true) #4, !dbg !43
  %322 = bitcast float %293 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %322, i1 true) #4, !dbg !43
  %323 = bitcast float %295 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %323, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %324 = load float, ptr addrspace(3) %75, align 4, !dbg !43
  %325 = load float, ptr addrspace(3) %79, align 4, !dbg !43
  %326 = load float, ptr addrspace(3) %82, align 4, !dbg !43
  %327 = load float, ptr addrspace(3) %85, align 4, !dbg !43
  %328 = fadd float %300, %181, !dbg !45
  %329 = fadd float %301, %179, !dbg !45
  %330 = fadd float %302, %177, !dbg !45
  %331 = fadd float %303, %175, !dbg !45
  %332 = fadd float %308, %173, !dbg !45
  %333 = fadd float %309, %171, !dbg !45
  %334 = fadd float %310, %169, !dbg !45
  %335 = fadd float %311, %167, !dbg !45
  %336 = fadd float %316, %165, !dbg !45
  %337 = fadd float %317, %163, !dbg !45
  %338 = fadd float %318, %161, !dbg !45
  %339 = fadd float %319, %159, !dbg !45
  %340 = fadd float %324, %157, !dbg !45
  %341 = fadd float %325, %155, !dbg !45
  %342 = fadd float %326, %153, !dbg !45
  %343 = fadd float %327, %151, !dbg !45
  %344 = shl i32 %184, 2, !dbg !46
  %345 = shl i32 %194, 2, !dbg !46
  %346 = shl i32 %191, 2, !dbg !46
  %347 = shl i32 %185, 2, !dbg !46
  %348 = shl i32 %188, 10, !dbg !47
  %349 = add i32 %344, %348, !dbg !48
  %350 = add i32 %345, %348, !dbg !48
  %351 = add i32 %346, %348, !dbg !48
  %352 = add i32 %347, %348, !dbg !48
  %353 = sext i32 %349 to i64, !dbg !49
  %354 = getelementptr float, ptr addrspace(1) %6, i64 %353, !dbg !49
  %355 = sext i32 %350 to i64, !dbg !49
  %356 = getelementptr float, ptr addrspace(1) %6, i64 %355, !dbg !49
  %357 = sext i32 %351 to i64, !dbg !49
  %358 = getelementptr float, ptr addrspace(1) %6, i64 %357, !dbg !49
  %359 = sext i32 %352 to i64, !dbg !49
  %360 = getelementptr float, ptr addrspace(1) %6, i64 %359, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %361 = shl i32 %12, 6, !dbg !50
  %362 = and i32 %361, 4032, !dbg !50
  %363 = or disjoint i32 %362, %14, !dbg !50
  %364 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %362, !dbg !50
  %365 = getelementptr float, ptr addrspace(3) %364, i32 %363, !dbg !50
  %366 = bitcast float %328 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %366, i1 true) #4, !dbg !50
  %367 = or disjoint i32 %363, 16, !dbg !50
  %368 = lshr i32 %367, 2, !dbg !50
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i32 %368, !dbg !50
  %370 = getelementptr float, ptr addrspace(3) %369, i32 %367, !dbg !50
  %371 = bitcast float %329 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %370, <1 x i32> %371, i1 true) #4, !dbg !50
  %372 = or disjoint i32 %363, 32, !dbg !50
  %373 = lshr i32 %372, 2, !dbg !50
  %374 = getelementptr float, ptr addrspace(3) @global_smem, i32 %373, !dbg !50
  %375 = getelementptr float, ptr addrspace(3) %374, i32 %372, !dbg !50
  %376 = bitcast float %330 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 true) #4, !dbg !50
  %377 = or disjoint i32 %363, 48, !dbg !50
  %378 = lshr i32 %377, 2, !dbg !50
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i32 %378, !dbg !50
  %380 = getelementptr float, ptr addrspace(3) %379, i32 %377, !dbg !50
  %381 = bitcast float %331 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 true) #4, !dbg !50
  %382 = or disjoint i32 %363, 4, !dbg !50
  %383 = getelementptr float, ptr addrspace(3) %364, i32 %382, !dbg !50
  %384 = bitcast float %332 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #4, !dbg !50
  %385 = or disjoint i32 %363, 20, !dbg !50
  %386 = lshr i32 %385, 2, !dbg !50
  %387 = and i32 %386, 1012, !dbg !50
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i32 %387, !dbg !50
  %389 = getelementptr float, ptr addrspace(3) %388, i32 %385, !dbg !50
  %390 = bitcast float %333 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !50
  %391 = or disjoint i32 %363, 36, !dbg !50
  %392 = lshr i32 %391, 2, !dbg !50
  %393 = and i32 %392, 1016, !dbg !50
  %394 = getelementptr float, ptr addrspace(3) @global_smem, i32 %393, !dbg !50
  %395 = getelementptr float, ptr addrspace(3) %394, i32 %391, !dbg !50
  %396 = bitcast float %334 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %396, i1 true) #4, !dbg !50
  %397 = or disjoint i32 %363, 52, !dbg !50
  %398 = lshr i32 %397, 2, !dbg !50
  %399 = and i32 %398, 1020, !dbg !50
  %400 = getelementptr float, ptr addrspace(3) @global_smem, i32 %399, !dbg !50
  %401 = getelementptr float, ptr addrspace(3) %400, i32 %397, !dbg !50
  %402 = bitcast float %335 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #4, !dbg !50
  %403 = or disjoint i32 %363, 8, !dbg !50
  %404 = getelementptr float, ptr addrspace(3) %364, i32 %403, !dbg !50
  %405 = bitcast float %336 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #4, !dbg !50
  %406 = or disjoint i32 %363, 24, !dbg !50
  %407 = lshr i32 %406, 2, !dbg !50
  %408 = and i32 %407, 1012, !dbg !50
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i32 %408, !dbg !50
  %410 = getelementptr float, ptr addrspace(3) %409, i32 %406, !dbg !50
  %411 = bitcast float %337 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #4, !dbg !50
  %412 = or disjoint i32 %363, 40, !dbg !50
  %413 = lshr i32 %412, 2, !dbg !50
  %414 = and i32 %413, 1016, !dbg !50
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i32 %414, !dbg !50
  %416 = getelementptr float, ptr addrspace(3) %415, i32 %412, !dbg !50
  %417 = bitcast float %338 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %417, i1 true) #4, !dbg !50
  %418 = or disjoint i32 %363, 56, !dbg !50
  %419 = lshr i32 %418, 2, !dbg !50
  %420 = and i32 %419, 1020, !dbg !50
  %421 = getelementptr float, ptr addrspace(3) @global_smem, i32 %420, !dbg !50
  %422 = getelementptr float, ptr addrspace(3) %421, i32 %418, !dbg !50
  %423 = bitcast float %339 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #4, !dbg !50
  %424 = or disjoint i32 %363, 12, !dbg !50
  %425 = getelementptr float, ptr addrspace(3) %364, i32 %424, !dbg !50
  %426 = bitcast float %340 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %425, <1 x i32> %426, i1 true) #4, !dbg !50
  %427 = or disjoint i32 %363, 28, !dbg !50
  %428 = lshr i32 %427, 2, !dbg !50
  %429 = and i32 %428, 1012, !dbg !50
  %430 = getelementptr float, ptr addrspace(3) @global_smem, i32 %429, !dbg !50
  %431 = getelementptr float, ptr addrspace(3) %430, i32 %427, !dbg !50
  %432 = bitcast float %341 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %432, i1 true) #4, !dbg !50
  %433 = or disjoint i32 %363, 44, !dbg !50
  %434 = lshr i32 %433, 2, !dbg !50
  %435 = and i32 %434, 1016, !dbg !50
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i32 %435, !dbg !50
  %437 = getelementptr float, ptr addrspace(3) %436, i32 %433, !dbg !50
  %438 = bitcast float %342 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #4, !dbg !50
  %439 = or disjoint i32 %363, 60, !dbg !50
  %440 = lshr i32 %439, 2, !dbg !50
  %441 = and i32 %440, 1020, !dbg !50
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %441, !dbg !50
  %443 = getelementptr float, ptr addrspace(3) %442, i32 %439, !dbg !50
  %444 = bitcast float %343 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %445 = and i32 %12, 252, !dbg !50
  %446 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %445, !dbg !50
  %447 = getelementptr inbounds float, ptr addrspace(3) %446, i32 %72, !dbg !50
  %448 = or disjoint i32 %72, 1024, !dbg !50
  %449 = lshr exact i32 %448, 2, !dbg !50
  %450 = and i32 %449, 508, !dbg !50
  %451 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %450, !dbg !50
  %452 = getelementptr inbounds float, ptr addrspace(3) %451, i32 %448, !dbg !50
  %453 = load <4 x i32>, ptr addrspace(3) %452, align 16, !dbg !50
  %454 = or disjoint i32 %72, 2048, !dbg !50
  %455 = lshr exact i32 %454, 2, !dbg !50
  %456 = and i32 %455, 764, !dbg !50
  %457 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %456, !dbg !50
  %458 = getelementptr inbounds float, ptr addrspace(3) %457, i32 %454, !dbg !50
  %459 = load <4 x i32>, ptr addrspace(3) %458, align 16, !dbg !50
  %460 = or disjoint i32 %72, 3072, !dbg !50
  %461 = lshr exact i32 %460, 2, !dbg !50
  %462 = and i32 %461, 1020, !dbg !50
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %462, !dbg !50
  %464 = getelementptr inbounds float, ptr addrspace(3) %463, i32 %460, !dbg !50
  %465 = load <4 x i32>, ptr addrspace(3) %464, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %447, align 16, !dbg !50
  %466 = getelementptr inbounds i8, ptr addrspace(3) %447, i32 4, !dbg !50
  %.extract20 = load i32, ptr addrspace(3) %466, align 4, !dbg !50
  %467 = getelementptr inbounds i8, ptr addrspace(3) %447, i32 8, !dbg !50
  %.extract21 = load i32, ptr addrspace(3) %467, align 8, !dbg !50
  %468 = getelementptr inbounds i8, ptr addrspace(3) %447, i32 12, !dbg !50
  %.extract22 = load i32, ptr addrspace(3) %468, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %354, i1 %198) #4, !dbg !50
  %.extract23 = extractelement <4 x i32> %453, i64 0, !dbg !50
  %.extract24 = extractelement <4 x i32> %453, i64 1, !dbg !50
  %.extract25 = extractelement <4 x i32> %453, i64 2, !dbg !50
  %.extract26 = extractelement <4 x i32> %453, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %356, i1 %196) #4, !dbg !50
  %.extract27 = extractelement <4 x i32> %459, i64 0, !dbg !50
  %.extract28 = extractelement <4 x i32> %459, i64 1, !dbg !50
  %.extract29 = extractelement <4 x i32> %459, i64 2, !dbg !50
  %.extract30 = extractelement <4 x i32> %459, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %358, i1 %193) #4, !dbg !50
  %.extract31 = extractelement <4 x i32> %465, i64 0, !dbg !50
  %.extract32 = extractelement <4 x i32> %465, i64 1, !dbg !50
  %.extract33 = extractelement <4 x i32> %465, i64 2, !dbg !50
  %.extract34 = extractelement <4 x i32> %465, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %360, i1 %190) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjbrjo77mymvbhl54s7auw2bnaydty4tuqihkvchqefzzue6oor3.py", directory: "inductor_cache/jb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_30, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_30", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 46, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 35, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 32, scope: !7)
!47 = !DILocation(line: 55, column: 42, scope: !7)
!48 = !DILocation(line: 55, column: 37, scope: !7)
!49 = !DILocation(line: 55, column: 25, scope: !7)
!50 = !DILocation(line: 55, column: 54, scope: !7)
!51 = !DILocation(line: 55, column: 4, scope: !7)
