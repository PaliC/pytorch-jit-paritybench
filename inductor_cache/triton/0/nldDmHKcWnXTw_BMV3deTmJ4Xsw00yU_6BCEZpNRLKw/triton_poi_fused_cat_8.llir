; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 256, !dbg !14
  %14 = srem i32 %13, 24, !dbg !15
  %15 = mul i32 %13, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %.frozen1 = freeze i32 %12, !dbg !17
  %16 = sdiv i32 %.frozen1, 6144, !dbg !17
  %17 = icmp slt i32 %14, 6, !dbg !18
  %18 = mul i32 %16, 6144, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %18, !dbg !19
  %19 = mul nsw i32 %16, 1536, !dbg !20
  %20 = add nsw i32 %19, %srem.decomposed, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #1, !dbg !23
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !23
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !23
  %26 = add nsw i32 %14, -6, !dbg !24
  %27 = icmp ult i32 %26, 6, !dbg !24
  %28 = shl nsw i32 %14, 8, !dbg !25
  %29 = add nsw i32 %19, %.decomposed, !dbg !25
  %30 = add nsw i32 %29, -1536, !dbg !26
  %31 = add nsw i32 %30, %28, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !28
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #1, !dbg !29
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !29
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !29
  %37 = bitcast i32 %35 to float, !dbg !29
  %38 = bitcast i32 %36 to float, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !30
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #1, !dbg !31
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !31
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !31
  %43 = bitcast i32 %41 to float, !dbg !31
  %44 = bitcast i32 %42 to float, !dbg !31
  %45 = fadd float %37, %43, !dbg !32
  %46 = fadd float %38, %44, !dbg !32
  %47 = add nsw i32 %14, -12, !dbg !33
  %48 = icmp ult i32 %47, 6, !dbg !33
  %49 = add nsw i32 %29, -3072, !dbg !34
  %50 = add nsw i32 %49, %28, !dbg !35
  %51 = sext i32 %50 to i64, !dbg !36
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !36
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #1, !dbg !37
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !37
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !37
  %56 = bitcast i32 %54 to float, !dbg !37
  %57 = bitcast i32 %55 to float, !dbg !37
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !38
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #1, !dbg !39
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !39
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !39
  %62 = bitcast i32 %60 to float, !dbg !39
  %63 = bitcast i32 %61 to float, !dbg !39
  %64 = fadd float %56, %62, !dbg !40
  %65 = fadd float %57, %63, !dbg !40
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !41
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #1, !dbg !42
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !42
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !42
  %70 = bitcast i32 %68 to float, !dbg !42
  %71 = bitcast i32 %69 to float, !dbg !42
  %72 = fadd float %64, %70, !dbg !43
  %73 = fadd float %65, %71, !dbg !43
  %74 = icmp sgt i32 %14, 17, !dbg !44
  %75 = add nsw i32 %29, -4608, !dbg !45
  %76 = add nsw i32 %75, %28, !dbg !46
  %77 = sext i32 %76 to i64, !dbg !47
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !47
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %78, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !48
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !48
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !48
  %82 = bitcast i32 %80 to float, !dbg !48
  %83 = bitcast i32 %81 to float, !dbg !48
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !49
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !50
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !50
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !50
  %88 = bitcast i32 %86 to float, !dbg !50
  %89 = bitcast i32 %87 to float, !dbg !50
  %90 = fadd float %82, %88, !dbg !51
  %91 = fadd float %83, %89, !dbg !51
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !52
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %92, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !53
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !53
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !53
  %96 = bitcast i32 %94 to float, !dbg !53
  %97 = bitcast i32 %95 to float, !dbg !53
  %98 = fadd float %90, %96, !dbg !54
  %99 = fadd float %91, %97, !dbg !54
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %77, !dbg !55
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !56
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !56
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !56
  %104 = bitcast i32 %102 to float, !dbg !56
  %105 = bitcast i32 %103 to float, !dbg !56
  %106 = fadd float %98, %104, !dbg !57
  %107 = fadd float %99, %105, !dbg !57
  %108 = select i1 %74, float %106, float 0.000000e+00, !dbg !58
  %109 = select i1 %74, float %107, float 0.000000e+00, !dbg !58
  %110 = select i1 %48, float %72, float %108, !dbg !59
  %111 = select i1 %48, float %73, float %109, !dbg !59
  %112 = select i1 %27, float %45, float %110, !dbg !59
  %113 = select i1 %27, float %46, float %111, !dbg !59
  %114 = sext i32 %12 to i64, !dbg !60
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %114, !dbg !60
  %116 = bitcast float %112 to i32, !dbg !61
  %117 = select i1 %17, i32 %24, i32 %116, !dbg !62
  %118 = bitcast float %113 to i32, !dbg !61
  %119 = select i1 %17, i32 %25, i32 %118, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %119, ptr addrspace(1) %115, i1 true) #1, !dbg !61
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co6krfcvwji4sprki6d4a5rof4hf37uz5dqqzqd2tzqys7wsralc.py", directory: "inductor_cache/o6")
!4 = !{ptr @triton_poi_fused_cat_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_8", linkageName: "triton_poi_fused_cat_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 41, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 54, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 64, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 64, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 55, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 65, scope: !7)
!38 = !DILocation(line: 48, column: 31, scope: !7)
!39 = !DILocation(line: 48, column: 65, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 65, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 36, scope: !7)
!46 = !DILocation(line: 57, column: 55, scope: !7)
!47 = !DILocation(line: 57, column: 31, scope: !7)
!48 = !DILocation(line: 57, column: 65, scope: !7)
!49 = !DILocation(line: 58, column: 31, scope: !7)
!50 = !DILocation(line: 58, column: 65, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 31, scope: !7)
!53 = !DILocation(line: 60, column: 65, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 31, scope: !7)
!56 = !DILocation(line: 62, column: 65, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 35, scope: !7)
!59 = !DILocation(line: 0, scope: !7)
!60 = !DILocation(line: 69, column: 25, scope: !7)
!61 = !DILocation(line: 69, column: 37, scope: !7)
!62 = !DILocation(line: 68, column: 33, scope: !7)
!63 = !DILocation(line: 69, column: 4, scope: !7)
