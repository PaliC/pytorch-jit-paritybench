; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 2048, !dbg !14
  %16 = mul i32 %15, 2048, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = shl i32 %11, 8, !dbg !16
  %18 = and i32 %17, 63488, !dbg !16
  %19 = shl i32 %15, 17, !dbg !17
  %20 = add i32 %19, %.decomposed, !dbg !18
  %21 = add i32 %20, %18, !dbg !19
  %22 = add i32 %20, 65536, !dbg !18
  %23 = add nuw i32 %22, %18, !dbg !19
  %24 = sext i32 %21 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = sext i32 %23 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !21
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !21
  %30 = sext i32 %.decomposed to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !24
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !25
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !25
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !25
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !25
  %39 = bitcast i32 %35 to float, !dbg !25
  %40 = bitcast i32 %36 to float, !dbg !25
  %41 = bitcast i32 %37 to float, !dbg !25
  %42 = bitcast i32 %38 to float, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #5, !dbg !29
  %47 = fadd float %39, 0x3EE4F8B580000000, !dbg !30
  %48 = fadd float %40, 0x3EE4F8B580000000, !dbg !30
  %49 = fadd float %41, 0x3EE4F8B580000000, !dbg !30
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !30
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %51, 0, !dbg !31
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %52, 0, !dbg !31
  br i1 %.not.i, label %58, label %53, !dbg !31

53:                                               ; preds = %8
  br i1 %.not1.i, label %56, label %54, !dbg !31

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

58:                                               ; preds = %8
  br i1 %.not1.i, label %61, label %59, !dbg !31

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %54, %56, %59, %61
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !31
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i1 = icmp eq i32 %63, 0, !dbg !31
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i4 = icmp eq i32 %64, 0, !dbg !31
  br i1 %.not.i1, label %70, label %65, !dbg !31

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !31

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !31

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %66, %68, %71, %73
  %.0.i3 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !31
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i6 = icmp eq i32 %75, 0, !dbg !31
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i9 = icmp eq i32 %76, 0, !dbg !31
  br i1 %.not.i6, label %82, label %77, !dbg !31

77:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %80, label %78, !dbg !31

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

82:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %85, label %83, !dbg !31

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %78, %80, %83, %85
  %.0.i8 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !31
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i11 = icmp eq i32 %87, 0, !dbg !31
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i14 = icmp eq i32 %88, 0, !dbg !31
  br i1 %.not.i11, label %94, label %89, !dbg !31

89:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %92, label %90, !dbg !31

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

94:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %97, label %95, !dbg !31

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %90, %92, %95, %97
  %.0.i13 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !31
  %99 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !21
  %100 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %101 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !21
  %102 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %103 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !21
  %104 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %105 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !21
  %106 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %107 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %108 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %109 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %110 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %111 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !29
  %112 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !29
  %113 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !29
  %114 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !29
  %115 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %119 = lshr i32 %11, 5, !dbg !32
  %120 = and i32 %11, 31, !dbg !12
  %121 = or disjoint i32 %10, %120, !dbg !13
  %122 = and i32 %11, 24, !dbg !12
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !33
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !33
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #5, !dbg !33
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !33
  %127 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !23
  %128 = insertelement <4 x i32> %127, i32 %102, i64 1, !dbg !23
  %129 = insertelement <4 x i32> %128, i32 %104, i64 2, !dbg !23
  %130 = insertelement <4 x i32> %129, i32 %106, i64 3, !dbg !23
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !23
  %132 = shufflevector <4 x float> %131, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %133 = insertelement <8 x i32> poison, i32 %99, i64 0, !dbg !21
  %134 = insertelement <8 x i32> %133, i32 %101, i64 1, !dbg !21
  %135 = insertelement <8 x i32> %134, i32 %103, i64 2, !dbg !21
  %136 = insertelement <8 x i32> %135, i32 %105, i64 3, !dbg !21
  %137 = insertelement <8 x i32> %136, i32 %107, i64 4, !dbg !21
  %138 = insertelement <8 x i32> %137, i32 %108, i64 5, !dbg !21
  %139 = insertelement <8 x i32> %138, i32 %109, i64 6, !dbg !21
  %140 = insertelement <8 x i32> %139, i32 %110, i64 7, !dbg !21
  %141 = bitcast <8 x i32> %140 to <8 x float>, !dbg !21
  %142 = fsub <8 x float> %141, %132, !dbg !34
  %143 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !29
  %144 = insertelement <4 x i32> %143, i32 %112, i64 1, !dbg !29
  %145 = insertelement <4 x i32> %144, i32 %113, i64 2, !dbg !29
  %146 = insertelement <4 x i32> %145, i32 %114, i64 3, !dbg !29
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !29
  %148 = shufflevector <4 x float> %147, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %149 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !27
  %150 = insertelement <4 x i32> %149, i32 %116, i64 1, !dbg !27
  %151 = insertelement <4 x i32> %150, i32 %117, i64 2, !dbg !27
  %152 = insertelement <4 x i32> %151, i32 %118, i64 3, !dbg !27
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !27
  %154 = shufflevector <4 x float> %153, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %155 = insertelement <8 x float> poison, float %126, i64 0, !dbg !35
  %156 = insertelement <8 x float> %155, float %125, i64 1, !dbg !35
  %157 = insertelement <8 x float> %156, float %124, i64 2, !dbg !35
  %158 = insertelement <8 x float> %157, float %123, i64 3, !dbg !35
  %159 = shufflevector <8 x float> %158, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %160 = fmul <8 x float> %142, %159, !dbg !35
  %161 = fmul <8 x float> %160, %154, !dbg !36
  %162 = fadd <8 x float> %161, %148, !dbg !37
  %163 = fcmp olt <8 x float> %162, zeroinitializer, !dbg !38
  %164 = extractelement <8 x i1> %163, i64 7, !dbg !42
  %165 = extractelement <8 x float> %162, i64 7, !dbg !42
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !42
  %167 = extractelement <8 x i1> %163, i64 6, !dbg !42
  %168 = extractelement <8 x float> %162, i64 6, !dbg !42
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !42
  %170 = extractelement <8 x i1> %163, i64 5, !dbg !42
  %171 = extractelement <8 x float> %162, i64 5, !dbg !42
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !42
  %173 = extractelement <8 x i1> %163, i64 4, !dbg !42
  %174 = extractelement <8 x float> %162, i64 4, !dbg !42
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !42
  %176 = extractelement <8 x i1> %163, i64 3, !dbg !42
  %177 = extractelement <8 x float> %162, i64 3, !dbg !42
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !42
  %179 = extractelement <8 x i1> %163, i64 2, !dbg !42
  %180 = extractelement <8 x float> %162, i64 2, !dbg !42
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !42
  %182 = extractelement <8 x i1> %163, i64 1, !dbg !42
  %183 = extractelement <8 x float> %162, i64 1, !dbg !42
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !42
  %185 = extractelement <8 x i1> %163, i64 0, !dbg !42
  %186 = extractelement <8 x float> %162, i64 0, !dbg !42
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !42
  %188 = fadd float %166, %178, !dbg !43
  %189 = fadd float %169, %181, !dbg !43
  %190 = fadd float %172, %184, !dbg !43
  %191 = fadd float %175, %187, !dbg !43
  %192 = bitcast float %188 to i32, !dbg !48
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 16, i32 31), !dbg !48
  %194 = bitcast i32 %193 to float, !dbg !48
  %195 = fadd float %188, %194, !dbg !43
  %196 = bitcast float %195 to i32, !dbg !48
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 8, i32 31), !dbg !48
  %198 = bitcast i32 %197 to float, !dbg !48
  %199 = fadd float %195, %198, !dbg !43
  %200 = bitcast float %189 to i32, !dbg !48
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 16, i32 31), !dbg !48
  %202 = bitcast i32 %201 to float, !dbg !48
  %203 = fadd float %189, %202, !dbg !43
  %204 = bitcast float %203 to i32, !dbg !48
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !48
  %206 = bitcast i32 %205 to float, !dbg !48
  %207 = fadd float %203, %206, !dbg !43
  %208 = bitcast float %190 to i32, !dbg !48
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 16, i32 31), !dbg !48
  %210 = bitcast i32 %209 to float, !dbg !48
  %211 = fadd float %190, %210, !dbg !43
  %212 = bitcast float %211 to i32, !dbg !48
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 8, i32 31), !dbg !48
  %214 = bitcast i32 %213 to float, !dbg !48
  %215 = fadd float %211, %214, !dbg !43
  %216 = bitcast float %191 to i32, !dbg !48
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 16, i32 31), !dbg !48
  %218 = bitcast i32 %217 to float, !dbg !48
  %219 = fadd float %191, %218, !dbg !43
  %220 = bitcast float %219 to i32, !dbg !48
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !48
  %222 = bitcast i32 %221 to float, !dbg !48
  %223 = fadd float %219, %222, !dbg !43
  %224 = icmp eq i32 %122, 0, !dbg !48
  %225 = and i32 %119, 7, !dbg !48
  %226 = shl nuw nsw i32 %13, 3, !dbg !48
  %227 = or disjoint i32 %226, %225, !dbg !48
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %227, !dbg !48
  %229 = bitcast float %199 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 %224) #5, !dbg !48
  %230 = or disjoint i32 %226, 8, !dbg !48
  %231 = or disjoint i32 %230, %225, !dbg !48
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %231, !dbg !48
  %233 = bitcast float %207 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 %224) #5, !dbg !48
  %234 = or disjoint i32 %226, 16, !dbg !48
  %235 = or disjoint i32 %234, %225, !dbg !48
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !48
  %237 = bitcast float %215 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 %224) #5, !dbg !48
  %238 = or disjoint i32 %226, 24, !dbg !48
  %239 = or disjoint i32 %238, %225, !dbg !48
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !48
  %241 = bitcast float %223 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 %224) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %242 = icmp slt i32 %11, 256, !dbg !48
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !48
  %244 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %243, i1 %242) #5, !dbg !48
  %245 = bitcast i32 %244 to float, !dbg !48
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !48
  %247 = bitcast i32 %246 to float, !dbg !48
  %248 = fadd float %245, %247, !dbg !43
  %249 = bitcast float %248 to i32, !dbg !48
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !48
  %251 = bitcast i32 %250 to float, !dbg !48
  %252 = fadd float %248, %251, !dbg !43
  %253 = bitcast float %252 to i32, !dbg !48
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 1, i32 31), !dbg !48
  %255 = bitcast i32 %254 to float, !dbg !48
  %256 = fadd float %252, %255, !dbg !43
  %257 = and i32 %11, 7, !dbg !48
  %258 = icmp eq i32 %257, 0, !dbg !48
  %259 = and i1 %242, %258, !dbg !48
  %260 = bitcast float %256 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %260, i1 %259) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !48
  %262 = load i32, ptr addrspace(3) %261, align 16, !dbg !48
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !48
  %264 = load i32, ptr addrspace(3) %263, align 16, !dbg !48
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !48
  %266 = load i32, ptr addrspace(3) %265, align 16, !dbg !48
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !48
  %268 = load i32, ptr addrspace(3) %267, align 16, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %269, i32 %262, i32 %264, i32 %266, i32 %268, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !49
  %271 = load float, ptr addrspace(3) %270, align 4, !dbg !49
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %271, float 6.400000e+01) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %273 = sext i32 %121 to i64, !dbg !51
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !51
  %275 = icmp eq i32 %225, 0, !dbg !52
  %276 = bitcast float %272 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %276, ptr addrspace(1) %274, i1 %275) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckkkurkfd2lbz5plqrns4n7zezfgeta6kkmmh7cxuk4gfwoxh6h6.py", directory: "inductor_cache/kk")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_17", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 52, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 57, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 26, column: 34, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 46, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 50, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!47 = !DILocation(line: 52, column: 26, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 4, scope: !7)
!51 = !DILocation(line: 56, column: 28, scope: !7)
!52 = !DILocation(line: 56, column: 40, scope: !7)
!53 = !DILocation(line: 56, column: 4, scope: !7)
