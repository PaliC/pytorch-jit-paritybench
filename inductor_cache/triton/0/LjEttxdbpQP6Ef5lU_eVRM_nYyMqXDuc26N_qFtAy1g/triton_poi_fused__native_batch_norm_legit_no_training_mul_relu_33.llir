; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 1024, !dbg !14
  %17 = sdiv i32 %15, 1024, !dbg !14
  %18 = srem i32 %16, 64, !dbg !15
  %19 = srem i32 %17, 64, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %26 = sext i32 %16 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = sext i32 %17 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %31 = bitcast i32 %30 to float, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %33 = bitcast i32 %32 to float, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %35 = bitcast i32 %34 to float, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %37 = bitcast i32 %36 to float, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %39 = bitcast i32 %38 to float, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %41 = bitcast i32 %40 to float, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %43 = bitcast i32 %42 to float, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %45 = bitcast i32 %44 to float, !dbg !19
  %46 = sext i32 %18 to i64, !dbg !20
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !20
  %48 = sext i32 %19 to i64, !dbg !20
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !20
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !21
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !23
  %63 = bitcast i32 %62 to float, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !23
  %67 = bitcast i32 %66 to float, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !23
  %69 = bitcast i32 %68 to float, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !23
  %71 = bitcast i32 %70 to float, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !23
  %73 = bitcast i32 %72 to float, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !23
  %75 = bitcast i32 %74 to float, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !26
  %87 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !27
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !27
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !27
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !27
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !27
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !27
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !27
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !27
  %96 = fsub float 0.000000e+00, %31, !dbg !28
  %97 = fsub float 0.000000e+00, %33, !dbg !28
  %98 = fsub float 0.000000e+00, %35, !dbg !28
  %99 = fsub float 0.000000e+00, %37, !dbg !28
  %100 = fsub float 0.000000e+00, %39, !dbg !28
  %101 = fsub float 0.000000e+00, %41, !dbg !28
  %102 = fsub float 0.000000e+00, %43, !dbg !28
  %103 = fsub float 0.000000e+00, %45, !dbg !28
  %104 = fmul float %96, 0x3FF7154760000000, !dbg !32
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #3, !dbg !32
  %106 = fmul float %97, 0x3FF7154760000000, !dbg !32
  %107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %106) #3, !dbg !32
  %108 = fmul float %98, 0x3FF7154760000000, !dbg !32
  %109 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %108) #3, !dbg !32
  %110 = fmul float %99, 0x3FF7154760000000, !dbg !32
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #3, !dbg !32
  %112 = fmul float %100, 0x3FF7154760000000, !dbg !32
  %113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #3, !dbg !32
  %114 = fmul float %101, 0x3FF7154760000000, !dbg !32
  %115 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %114) #3, !dbg !32
  %116 = fmul float %102, 0x3FF7154760000000, !dbg !32
  %117 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %116) #3, !dbg !32
  %118 = fmul float %103, 0x3FF7154760000000, !dbg !32
  %119 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %118) #3, !dbg !32
  %120 = fadd float %105, 1.000000e+00, !dbg !33
  %121 = fadd float %107, 1.000000e+00, !dbg !33
  %122 = fadd float %109, 1.000000e+00, !dbg !33
  %123 = fadd float %111, 1.000000e+00, !dbg !33
  %124 = fadd float %113, 1.000000e+00, !dbg !33
  %125 = fadd float %115, 1.000000e+00, !dbg !33
  %126 = fadd float %117, 1.000000e+00, !dbg !33
  %127 = fadd float %119, 1.000000e+00, !dbg !33
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %120) #3, !dbg !34
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %121) #3, !dbg !34
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %122) #3, !dbg !34
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %123) #3, !dbg !34
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %124) #3, !dbg !34
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %125) #3, !dbg !34
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %126) #3, !dbg !34
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %127) #3, !dbg !34
  %136 = fadd float %61, 0x3EE4F8B580000000, !dbg !35
  %137 = fadd float %63, 0x3EE4F8B580000000, !dbg !35
  %138 = fadd float %65, 0x3EE4F8B580000000, !dbg !35
  %139 = fadd float %67, 0x3EE4F8B580000000, !dbg !35
  %140 = fadd float %69, 0x3EE4F8B580000000, !dbg !35
  %141 = fadd float %71, 0x3EE4F8B580000000, !dbg !35
  %142 = fadd float %73, 0x3EE4F8B580000000, !dbg !35
  %143 = fadd float %75, 0x3EE4F8B580000000, !dbg !35
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %144, 0, !dbg !36
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %145, 0, !dbg !36
  br i1 %.not.i, label %151, label %146, !dbg !36

146:                                              ; preds = %8
  br i1 %.not1.i, label %149, label %147, !dbg !36

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

151:                                              ; preds = %8
  br i1 %.not1.i, label %154, label %152, !dbg !36

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %147, %149, %152, %154
  %.0.i = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !36
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %156, 0, !dbg !36
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %157, 0, !dbg !36
  br i1 %.not.i1, label %163, label %158, !dbg !36

158:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %161, label %159, !dbg !36

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

163:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %166, label %164, !dbg !36

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %159, %161, %164, %166
  %.0.i3 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !36
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %168, 0, !dbg !36
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %169, 0, !dbg !36
  br i1 %.not.i6, label %175, label %170, !dbg !36

170:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %173, label %171, !dbg !36

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

175:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %178, label %176, !dbg !36

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %171, %173, %176, %178
  %.0.i8 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !36
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %180, 0, !dbg !36
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %181, 0, !dbg !36
  br i1 %.not.i11, label %187, label %182, !dbg !36

182:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %185, label %183, !dbg !36

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

187:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %190, label %188, !dbg !36

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %183, %185, %188, %190
  %.0.i13 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !36
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i16 = icmp eq i32 %192, 0, !dbg !36
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i19 = icmp eq i32 %193, 0, !dbg !36
  br i1 %.not.i16, label %199, label %194, !dbg !36

194:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %197, label %195, !dbg !36

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

199:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %202, label %200, !dbg !36

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %195, %197, %200, %202
  %.0.i18 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !36
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i21 = icmp eq i32 %204, 0, !dbg !36
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i24 = icmp eq i32 %205, 0, !dbg !36
  br i1 %.not.i21, label %211, label %206, !dbg !36

206:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %209, label %207, !dbg !36

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

211:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %214, label %212, !dbg !36

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

__nv_sqrtf.exit25:                                ; preds = %207, %209, %212, %214
  %.0.i23 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !36
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i26 = icmp eq i32 %216, 0, !dbg !36
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i29 = icmp eq i32 %217, 0, !dbg !36
  br i1 %.not.i26, label %223, label %218, !dbg !36

218:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %221, label %219, !dbg !36

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

223:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %226, label %224, !dbg !36

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

__nv_sqrtf.exit30:                                ; preds = %219, %221, %224, %226
  %.0.i28 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !36
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i31 = icmp eq i32 %228, 0, !dbg !36
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i34 = icmp eq i32 %229, 0, !dbg !36
  br i1 %.not.i31, label %235, label %230, !dbg !36

230:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %233, label %231, !dbg !36

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

235:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %238, label %236, !dbg !36

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

__nv_sqrtf.exit35:                                ; preds = %231, %233, %236, %238
  %.0.i33 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !36
  %240 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %241 = insertelement <8 x i32> poison, i32 %57, i64 0, !dbg !21
  %242 = insertelement <8 x i32> %241, i32 %56, i64 1, !dbg !21
  %243 = insertelement <8 x i32> %242, i32 %55, i64 2, !dbg !21
  %244 = insertelement <8 x i32> %243, i32 %54, i64 3, !dbg !21
  %245 = insertelement <8 x i32> %244, i32 %53, i64 4, !dbg !21
  %246 = insertelement <8 x i32> %245, i32 %52, i64 5, !dbg !21
  %247 = insertelement <8 x i32> %246, i32 %51, i64 6, !dbg !21
  %248 = insertelement <8 x i32> %247, i32 %50, i64 7, !dbg !21
  %249 = bitcast <8 x i32> %248 to <8 x float>, !dbg !21
  %250 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %251 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %252 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %253 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %254 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %255 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %256 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %257 = insertelement <8 x i32> poison, i32 %95, i64 0, !dbg !27
  %258 = insertelement <8 x i32> %257, i32 %94, i64 1, !dbg !27
  %259 = insertelement <8 x i32> %258, i32 %93, i64 2, !dbg !27
  %260 = insertelement <8 x i32> %259, i32 %92, i64 3, !dbg !27
  %261 = insertelement <8 x i32> %260, i32 %91, i64 4, !dbg !27
  %262 = insertelement <8 x i32> %261, i32 %90, i64 5, !dbg !27
  %263 = insertelement <8 x i32> %262, i32 %89, i64 6, !dbg !27
  %264 = insertelement <8 x i32> %263, i32 %88, i64 7, !dbg !27
  %265 = bitcast <8 x i32> %264 to <8 x float>, !dbg !27
  %266 = insertelement <8 x i32> poison, i32 %85, i64 0, !dbg !25
  %267 = insertelement <8 x i32> %266, i32 %84, i64 1, !dbg !25
  %268 = insertelement <8 x i32> %267, i32 %83, i64 2, !dbg !25
  %269 = insertelement <8 x i32> %268, i32 %82, i64 3, !dbg !25
  %270 = insertelement <8 x i32> %269, i32 %81, i64 4, !dbg !25
  %271 = insertelement <8 x i32> %270, i32 %80, i64 5, !dbg !25
  %272 = insertelement <8 x i32> %271, i32 %79, i64 6, !dbg !25
  %273 = insertelement <8 x i32> %272, i32 %78, i64 7, !dbg !25
  %274 = bitcast <8 x i32> %273 to <8 x float>, !dbg !25
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %283 = insertelement <8 x i32> poison, i32 %240, i64 0, !dbg !17
  %284 = insertelement <8 x i32> %283, i32 %250, i64 1, !dbg !17
  %285 = insertelement <8 x i32> %284, i32 %251, i64 2, !dbg !17
  %286 = insertelement <8 x i32> %285, i32 %252, i64 3, !dbg !17
  %287 = insertelement <8 x i32> %286, i32 %253, i64 4, !dbg !17
  %288 = insertelement <8 x i32> %287, i32 %254, i64 5, !dbg !17
  %289 = insertelement <8 x i32> %288, i32 %255, i64 6, !dbg !17
  %290 = insertelement <8 x i32> %289, i32 %256, i64 7, !dbg !17
  %291 = bitcast <8 x i32> %290 to <8 x float>, !dbg !17
  %292 = insertelement <8 x float> poison, float %135, i64 0, !dbg !38
  %293 = insertelement <8 x float> %292, float %134, i64 1, !dbg !38
  %294 = insertelement <8 x float> %293, float %133, i64 2, !dbg !38
  %295 = insertelement <8 x float> %294, float %132, i64 3, !dbg !38
  %296 = insertelement <8 x float> %295, float %131, i64 4, !dbg !38
  %297 = insertelement <8 x float> %296, float %130, i64 5, !dbg !38
  %298 = insertelement <8 x float> %297, float %129, i64 6, !dbg !38
  %299 = insertelement <8 x float> %298, float %128, i64 7, !dbg !38
  %300 = fmul <8 x float> %299, %291, !dbg !38
  %301 = fsub <8 x float> %300, %249, !dbg !39
  %302 = insertelement <8 x float> poison, float %282, i64 0, !dbg !40
  %303 = insertelement <8 x float> %302, float %281, i64 1, !dbg !40
  %304 = insertelement <8 x float> %303, float %280, i64 2, !dbg !40
  %305 = insertelement <8 x float> %304, float %279, i64 3, !dbg !40
  %306 = insertelement <8 x float> %305, float %278, i64 4, !dbg !40
  %307 = insertelement <8 x float> %306, float %277, i64 5, !dbg !40
  %308 = insertelement <8 x float> %307, float %276, i64 6, !dbg !40
  %309 = insertelement <8 x float> %308, float %275, i64 7, !dbg !40
  %310 = fmul <8 x float> %301, %309, !dbg !40
  %311 = fmul <8 x float> %310, %274, !dbg !41
  %312 = fadd <8 x float> %311, %265, !dbg !42
  %313 = fcmp olt <8 x float> %312, zeroinitializer, !dbg !43
  %314 = extractelement <8 x i1> %313, i64 7, !dbg !47
  %315 = extractelement <8 x i1> %313, i64 6, !dbg !47
  %316 = extractelement <8 x i1> %313, i64 5, !dbg !47
  %317 = extractelement <8 x i1> %313, i64 4, !dbg !47
  %318 = extractelement <8 x i1> %313, i64 3, !dbg !47
  %319 = extractelement <8 x i1> %313, i64 2, !dbg !47
  %320 = extractelement <8 x i1> %313, i64 1, !dbg !47
  %321 = extractelement <8 x i1> %313, i64 0, !dbg !47
  %bc = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %322 = extractelement <8 x i32> %bc, i64 7, !dbg !48
  %bc36 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %323 = extractelement <8 x i32> %bc36, i64 6, !dbg !48
  %bc37 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %324 = extractelement <8 x i32> %bc37, i64 5, !dbg !48
  %bc38 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %325 = extractelement <8 x i32> %bc38, i64 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %322, i32 %323, i32 %324, i32 %325, ptr addrspace(1) %21, i1 true) #3, !dbg !48
  %bc39 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %326 = extractelement <8 x i32> %bc39, i64 3, !dbg !48
  %bc40 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %327 = extractelement <8 x i32> %bc40, i64 2, !dbg !48
  %bc41 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %328 = extractelement <8 x i32> %bc41, i64 1, !dbg !48
  %bc42 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %329 = extractelement <8 x i32> %bc42, i64 0, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %326, i32 %327, i32 %328, i32 %329, ptr addrspace(1) %23, i1 true) #3, !dbg !48
  %330 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !49
  %331 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !49
  %bc43 = bitcast <8 x float> %312 to <8 x i32>, !dbg !50
  %332 = extractelement <8 x i32> %bc43, i64 7, !dbg !50
  %333 = select i1 %314, i32 0, i32 %332, !dbg !47
  %bc44 = bitcast <8 x float> %312 to <8 x i32>, !dbg !50
  %334 = extractelement <8 x i32> %bc44, i64 6, !dbg !50
  %335 = select i1 %315, i32 0, i32 %334, !dbg !47
  %bc45 = bitcast <8 x float> %312 to <8 x i32>, !dbg !50
  %336 = extractelement <8 x i32> %bc45, i64 5, !dbg !50
  %337 = select i1 %316, i32 0, i32 %336, !dbg !47
  %bc46 = bitcast <8 x float> %312 to <8 x i32>, !dbg !50
  %338 = extractelement <8 x i32> %bc46, i64 4, !dbg !50
  %339 = select i1 %317, i32 0, i32 %338, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %335, i32 %337, i32 %339, ptr addrspace(1) %330, i1 true) #3, !dbg !50
  %bc47 = bitcast <8 x float> %312 to <8 x i32>, !dbg !50
  %340 = extractelement <8 x i32> %bc47, i64 3, !dbg !50
  %341 = select i1 %318, i32 0, i32 %340, !dbg !47
  %bc48 = bitcast <8 x float> %312 to <8 x i32>, !dbg !50
  %342 = extractelement <8 x i32> %bc48, i64 2, !dbg !50
  %343 = select i1 %319, i32 0, i32 %342, !dbg !47
  %bc49 = bitcast <8 x float> %312 to <8 x i32>, !dbg !50
  %344 = extractelement <8 x i32> %bc49, i64 1, !dbg !50
  %345 = select i1 %320, i32 0, i32 %344, !dbg !47
  %bc50 = bitcast <8 x float> %312 to <8 x i32>, !dbg !50
  %346 = extractelement <8 x i32> %bc50, i64 0, !dbg !50
  %347 = select i1 %321, i32 0, i32 %346, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %341, i32 %343, i32 %345, i32 %347, ptr addrspace(1) %331, i1 true) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crraezompnmfrzfqlxfp2qbsxi6abgumhejcwwwb3r5dj6wbe5gs.py", directory: "inductor_cache/rr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_33", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 33, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 26, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 34, column: 18, scope: !7)
!39 = !DILocation(line: 35, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 47, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 48, column: 39, scope: !7)
!49 = !DILocation(line: 49, column: 25, scope: !7)
!50 = !DILocation(line: 49, column: 37, scope: !7)
!51 = !DILocation(line: 49, column: 4, scope: !7)
