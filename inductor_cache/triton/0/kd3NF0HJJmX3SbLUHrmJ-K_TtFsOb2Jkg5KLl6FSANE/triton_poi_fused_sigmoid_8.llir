; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_sigmoid_8(ptr addrspace(1) %0, i32 %1) local_unnamed_addr !dbg !7 {
  %3 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %4 = shl i32 %3, 9, !dbg !11
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %6 = shl i32 %5, 2, !dbg !12
  %7 = and i32 %6, 508, !dbg !12
  %8 = or disjoint i32 %4, %7, !dbg !13
  %9 = sext i32 %8 to i64, !dbg !14
  %10 = getelementptr float, ptr addrspace(1) %0, i64 %9, !dbg !14
  %11 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %10, i1 true) #1, !dbg !15
  %12 = extractvalue { i32, i32, i32, i32 } %11, 0, !dbg !15
  %13 = extractvalue { i32, i32, i32, i32 } %11, 1, !dbg !15
  %14 = extractvalue { i32, i32, i32, i32 } %11, 2, !dbg !15
  %15 = extractvalue { i32, i32, i32, i32 } %11, 3, !dbg !15
  %16 = bitcast i32 %12 to float, !dbg !15
  %17 = bitcast i32 %13 to float, !dbg !15
  %18 = bitcast i32 %14 to float, !dbg !15
  %19 = bitcast i32 %15 to float, !dbg !15
  %20 = fsub float 0.000000e+00, %16, !dbg !16
  %21 = fsub float 0.000000e+00, %17, !dbg !16
  %22 = fsub float 0.000000e+00, %18, !dbg !16
  %23 = fsub float 0.000000e+00, %19, !dbg !16
  %24 = fmul float %20, 0x3FF7154760000000, !dbg !20
  %25 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %24) #1, !dbg !20
  %26 = fmul float %21, 0x3FF7154760000000, !dbg !20
  %27 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %26) #1, !dbg !20
  %28 = fmul float %22, 0x3FF7154760000000, !dbg !20
  %29 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %28) #1, !dbg !20
  %30 = fmul float %23, 0x3FF7154760000000, !dbg !20
  %31 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %30) #1, !dbg !20
  %32 = fadd float %25, 1.000000e+00, !dbg !21
  %33 = fadd float %27, 1.000000e+00, !dbg !21
  %34 = fadd float %29, 1.000000e+00, !dbg !21
  %35 = fadd float %31, 1.000000e+00, !dbg !21
  %36 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %32) #1, !dbg !22
  %37 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %33) #1, !dbg !22
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %34) #1, !dbg !22
  %39 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %35) #1, !dbg !22
  %40 = bitcast float %36 to i32, !dbg !23
  %41 = bitcast float %37 to i32, !dbg !23
  %42 = bitcast float %38 to i32, !dbg !23
  %43 = bitcast float %39 to i32, !dbg !23
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %40, i32 %41, i32 %42, i32 %43, ptr addrspace(1) %10, i1 true) #1, !dbg !23
  ret void, !dbg !24
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4x7a5be5zoxnyetirkwdseobqdmnogupsyyzqq3mxowffr2bxxu.py", directory: "inductor_cache/4x")
!4 = !{ptr @triton_poi_fused_sigmoid_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_sigmoid_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_sigmoid_8", linkageName: "triton_poi_fused_sigmoid_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 25, column: 39, scope: !7)
!16 = !DILocation(line: 47, column: 30, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!18 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!19 = !DILocation(line: 26, column: 22, scope: !7)
!20 = !DILocation(line: 47, column: 29, scope: !17, inlinedAt: !19)
!21 = !DILocation(line: 47, column: 20, scope: !17, inlinedAt: !19)
!22 = !DILocation(line: 47, column: 16, scope: !17, inlinedAt: !19)
!23 = !DILocation(line: 27, column: 39, scope: !7)
!24 = !DILocation(line: 27, column: 4, scope: !7)
