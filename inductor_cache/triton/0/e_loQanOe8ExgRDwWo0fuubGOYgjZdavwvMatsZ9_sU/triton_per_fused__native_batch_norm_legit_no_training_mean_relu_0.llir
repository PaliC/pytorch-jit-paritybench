; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %16 = shl i32 %11, 1, !dbg !15
  %17 = and i32 %16, 14, !dbg !15
  %18 = srem i32 %14, 64, !dbg !16
  %19 = shl i32 %14, 4, !dbg !17
  %20 = or disjoint i32 %19, %17, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !19
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !20
  %24 = sext i32 %18 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %15) #5, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %15) #5, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %15) #5, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %15) #5, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %15) #5, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %15) #5, !dbg !28
  %38 = fadd float %31, 0x3EE4F8B580000000, !dbg !29
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i1 = icmp eq i32 %41, 0, !dbg !30
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i4 = icmp eq i32 %42, 0, !dbg !30
  br i1 %.not.i1, label %48, label %43, !dbg !30

43:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %46, label %44, !dbg !30

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #5, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #5, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

48:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %51, label %49, !dbg !30

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #5, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #5, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %44, %46, %49, %51
  %.0.i3 = phi float [ %45, %44 ], [ %47, %46 ], [ %50, %49 ], [ %52, %51 ], !dbg !30
  %53 = extractvalue { i32, i32 } %23, 1, !dbg !20
  %54 = bitcast i32 %53 to float, !dbg !20
  %55 = bitcast i32 %27 to float, !dbg !22
  %56 = fsub float %54, %55, !dbg !31
  %57 = extractvalue { i32, i32 } %23, 0, !dbg !20
  %58 = bitcast i32 %57 to float, !dbg !20
  %59 = fsub float %58, %55, !dbg !31
  %60 = bitcast i32 %37 to float, !dbg !28
  %61 = bitcast i32 %34 to float, !dbg !26
  %62 = and i32 %11, 7, !dbg !12
  %63 = or disjoint i32 %10, %62, !dbg !13
  %64 = icmp slt i32 %63, 256, !dbg !14
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !32
  %66 = fmul float %59, %65, !dbg !33
  %67 = fmul float %56, %65, !dbg !33
  %68 = fmul float %66, %61, !dbg !34
  %69 = fmul float %67, %61, !dbg !34
  %70 = fadd float %68, %60, !dbg !35
  %71 = fadd float %69, %60, !dbg !35
  %72 = fcmp olt float %70, 0.000000e+00, !dbg !36
  %73 = fcmp olt float %71, 0.000000e+00, !dbg !36
  %74 = select i1 %72, float 0.000000e+00, float %70, !dbg !40
  %75 = select i1 %73, float 0.000000e+00, float %71, !dbg !40
  %76 = fadd float %74, %75, !dbg !41
  %77 = select i1 %15, float %76, float 0.000000e+00, !dbg !41
  %78 = bitcast float %77 to i32, !dbg !46
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !46
  %80 = bitcast i32 %79 to float, !dbg !46
  %81 = fadd float %77, %80, !dbg !41
  %82 = bitcast float %81 to i32, !dbg !46
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !46
  %84 = bitcast i32 %83 to float, !dbg !46
  %85 = fadd float %81, %84, !dbg !41
  %86 = bitcast float %85 to i32, !dbg !46
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !46
  %88 = bitcast i32 %87 to float, !dbg !46
  %89 = fadd float %85, %88, !dbg !41
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !47
  %91 = bitcast float %89 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !47
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !47
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 1.600000e+01) #5, !dbg !47
  %95 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !48
  %96 = bitcast float %74 to i32, !dbg !49
  %97 = bitcast float %75 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %96, i32 %97, ptr addrspace(1) %95, i1 %15) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %98 = sext i32 %63 to i64, !dbg !51
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !51
  %100 = and i32 %11, 56, !dbg !52
  %101 = icmp eq i32 %100, 0, !dbg !52
  %102 = bitcast float %94 to i32, !dbg !52
  %103 = and i1 %101, %64, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %99, i1 %103) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crjpf54ftccapmv2t6ez4tzpz4qhb22rgeznkuxqq22zcbv56evp.py", directory: "inductor_cache/rj")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_0", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 26, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 49, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !45)
!42 = distinct !DILexicalBlockFile(scope: !44, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!45 = !DILocation(line: 52, column: 26, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !45)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 25, scope: !7)
!49 = !DILocation(line: 55, column: 45, scope: !7)
!50 = !DILocation(line: 56, column: 4, scope: !7)
!51 = !DILocation(line: 57, column: 28, scope: !7)
!52 = !DILocation(line: 57, column: 40, scope: !7)
!53 = !DILocation(line: 57, column: 4, scope: !7)
