; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_div_mul_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 60, !dbg !10
  %10 = and i32 %8, 252, !dbg !10
  %11 = zext nneg i32 %10 to i64, !dbg !11
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !11
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = bitcast i32 %17 to float, !dbg !12
  %22 = zext nneg i32 %9 to i64, !dbg !13
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !13
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !14
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !14
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !14
  %29 = bitcast i32 %25 to float, !dbg !14
  %30 = bitcast i32 %26 to float, !dbg !14
  %31 = bitcast i32 %27 to float, !dbg !14
  %32 = bitcast i32 %28 to float, !dbg !14
  %33 = or disjoint i32 %9, 64, !dbg !15
  %34 = zext nneg i32 %33 to i64, !dbg !16
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !16
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !17
  %41 = bitcast i32 %37 to float, !dbg !17
  %42 = bitcast i32 %38 to float, !dbg !17
  %43 = bitcast i32 %39 to float, !dbg !17
  %44 = bitcast i32 %40 to float, !dbg !17
  %45 = or disjoint i32 %9, 128, !dbg !18
  %46 = zext nneg i32 %45 to i64, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !19
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !20
  %53 = bitcast i32 %49 to float, !dbg !20
  %54 = bitcast i32 %50 to float, !dbg !20
  %55 = bitcast i32 %51 to float, !dbg !20
  %56 = bitcast i32 %52 to float, !dbg !20
  %57 = or disjoint i32 %9, 192, !dbg !21
  %58 = zext nneg i32 %57 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !22
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !24
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !25
  %75 = bitcast i32 %71 to float, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = bitcast i32 %74 to float, !dbg !25
  %79 = fadd float %29, %41, !dbg !26
  %80 = fadd float %30, %42, !dbg !26
  %81 = fadd float %31, %43, !dbg !26
  %82 = fadd float %32, %44, !dbg !26
  %83 = fadd float %79, %53, !dbg !27
  %84 = fadd float %80, %54, !dbg !27
  %85 = fadd float %81, %55, !dbg !27
  %86 = fadd float %82, %56, !dbg !27
  %87 = fadd float %83, %65, !dbg !28
  %88 = fadd float %84, %66, !dbg !28
  %89 = fadd float %85, %67, !dbg !28
  %90 = fadd float %86, %68, !dbg !28
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %18, float %87) #3, !dbg !29
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %19, float %88) #3, !dbg !29
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %20, float %89) #3, !dbg !29
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %21, float %90) #3, !dbg !29
  %95 = fmul float %91, %75, !dbg !30
  %96 = fmul float %92, %76, !dbg !30
  %97 = fmul float %93, %77, !dbg !30
  %98 = fmul float %94, %78, !dbg !30
  %99 = fadd float %95, %96, !dbg !31
  %100 = fadd float %99, %97, !dbg !31
  %101 = fadd float %100, %98, !dbg !31
  %102 = bitcast float %101 to i32, !dbg !36
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !36
  %104 = bitcast i32 %103 to float, !dbg !36
  %105 = fadd float %101, %104, !dbg !31
  %106 = bitcast float %105 to i32, !dbg !36
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !36
  %108 = bitcast i32 %107 to float, !dbg !36
  %109 = fadd float %105, %108, !dbg !31
  %110 = bitcast float %109 to i32, !dbg !36
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !36
  %112 = bitcast i32 %111 to float, !dbg !36
  %113 = fadd float %109, %112, !dbg !31
  %114 = bitcast float %113 to i32, !dbg !36
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !36
  %116 = bitcast i32 %115 to float, !dbg !36
  %117 = fadd float %113, %116, !dbg !31
  %118 = bitcast float %117 to i32, !dbg !36
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !36
  %120 = bitcast i32 %119 to float, !dbg !36
  %121 = fadd float %117, %120, !dbg !31
  %122 = icmp eq i32 %6, 0, !dbg !36
  %123 = and i32 %7, 1, !dbg !36
  %124 = zext nneg i32 %123 to i64, !dbg !36
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i64 %124, !dbg !36
  %126 = bitcast float %121 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 %122) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %127 = icmp slt i32 %5, 2, !dbg !36
  %128 = sext i32 %5 to i64, !dbg !36
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !36
  %130 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %129, i1 %127) #3, !dbg !36
  %131 = bitcast i32 %130 to float, !dbg !36
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !36
  %133 = bitcast i32 %132 to float, !dbg !36
  %134 = fadd float %131, %133, !dbg !31
  %135 = and i32 %5, 1, !dbg !36
  %136 = icmp eq i32 %135, 0, !dbg !36
  %137 = and i1 %127, %136, !dbg !36
  %138 = bitcast float %134 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %138, i1 %137) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %139 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %140 = fadd float %139, 0.000000e+00, !dbg !37
  %141 = fmul float %140, 0x3F50624DE0000000, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %urem = and i32 %5, 63, !dbg !43
  %142 = icmp eq i32 %urem, 0, !dbg !43
  %143 = bitcast float %141 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %0, i1 %142) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxwyp66uo5pu3jr3ejiofdhzy5a2vtzjh24knemgqtjmob22i36k.py", directory: "inductor_cache/xw")
!4 = !{ptr @triton_per_fused_div_mul_sum_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_mul_sum_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_mul_sum_4", linkageName: "triton_per_fused_div_mul_sum_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 32, column: 30, scope: !7)
!12 = !DILocation(line: 32, column: 35, scope: !7)
!13 = !DILocation(line: 33, column: 30, scope: !7)
!14 = !DILocation(line: 33, column: 35, scope: !7)
!15 = !DILocation(line: 34, column: 35, scope: !7)
!16 = !DILocation(line: 34, column: 30, scope: !7)
!17 = !DILocation(line: 34, column: 40, scope: !7)
!18 = !DILocation(line: 35, column: 36, scope: !7)
!19 = !DILocation(line: 35, column: 30, scope: !7)
!20 = !DILocation(line: 35, column: 41, scope: !7)
!21 = !DILocation(line: 36, column: 36, scope: !7)
!22 = !DILocation(line: 36, column: 30, scope: !7)
!23 = !DILocation(line: 36, column: 41, scope: !7)
!24 = !DILocation(line: 37, column: 30, scope: !7)
!25 = !DILocation(line: 37, column: 35, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 18, scope: !7)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 44, column: 59, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 73, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 44, column: 45, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 4, scope: !7)
!43 = !DILocation(line: 48, column: 63, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
