; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_67(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 16896, !dbg !14
  %11 = add i32 %9, -3168, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = add i32 %9, -2112, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = add i32 %9, -1056, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = sext i32 %9 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = add i32 %9, 1056, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = add i32 %9, 2112, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = add i32 %9, 3168, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !28
  %32 = shufflevector <2 x i32> %31, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !28
  %33 = sdiv <2 x i32> %32, <i32 1056, i32 2112>, !dbg !28
  %34 = srem <2 x i32> %33, splat (i32 2), !dbg !29
  %35 = icmp sgt <2 x i32> %34, zeroinitializer, !dbg !30
  %36 = extractelement <2 x i1> %35, i64 0, !dbg !31
  %37 = extractelement <2 x i1> %35, i64 1, !dbg !31
  %38 = and i1 %37, %36, !dbg !31
  %39 = and i1 %10, %38, !dbg !32
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %13, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !33
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !33
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !33
  %43 = bitcast i32 %41 to float, !dbg !33
  %44 = bitcast i32 %42 to float, !dbg !33
  %45 = extractelement <2 x i32> %34, i64 0, !dbg !34
  %46 = icmp sgt i32 %45, -1, !dbg !35
  %47 = and i1 %37, %46, !dbg !36
  %48 = and i1 %10, %47, !dbg !37
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #1, !dbg !38
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !38
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !38
  %52 = bitcast i32 %50 to float, !dbg !38
  %53 = bitcast i32 %51 to float, !dbg !38
  %54 = fadd float %43, %52, !dbg !39
  %55 = fadd float %44, %53, !dbg !39
  %56 = icmp slt i32 %45, 1, !dbg !40
  %57 = and i1 %37, %56, !dbg !41
  %58 = and i1 %10, %57, !dbg !42
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #1, !dbg !43
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !43
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !43
  %62 = bitcast i32 %60 to float, !dbg !43
  %63 = bitcast i32 %61 to float, !dbg !43
  %64 = fadd float %54, %62, !dbg !44
  %65 = fadd float %55, %63, !dbg !44
  %66 = extractelement <2 x i32> %34, i64 1, !dbg !34
  %67 = icmp sgt i32 %66, -1, !dbg !45
  %68 = and i1 %67, %36, !dbg !46
  %69 = and i1 %10, %68, !dbg !47
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #1, !dbg !48
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !48
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !48
  %73 = bitcast i32 %71 to float, !dbg !48
  %74 = bitcast i32 %72 to float, !dbg !48
  %75 = fadd float %64, %73, !dbg !49
  %76 = fadd float %65, %74, !dbg !49
  %77 = or i32 %66, %45, !dbg !50
  %78 = icmp sgt i32 %77, -1, !dbg !50
  %79 = and i1 %10, %78, !dbg !51
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #1, !dbg !52
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !52
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !52
  %83 = bitcast i32 %81 to float, !dbg !52
  %84 = bitcast i32 %82 to float, !dbg !52
  %85 = fadd float %75, %83, !dbg !53
  %86 = fadd float %76, %84, !dbg !53
  %87 = and i1 %67, %56, !dbg !54
  %88 = and i1 %10, %87, !dbg !55
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #1, !dbg !56
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !56
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !56
  %92 = bitcast i32 %90 to float, !dbg !56
  %93 = bitcast i32 %91 to float, !dbg !56
  %94 = fadd float %85, %92, !dbg !57
  %95 = fadd float %86, %93, !dbg !57
  %96 = icmp slt i32 %66, 1, !dbg !58
  %97 = and i1 %96, %36, !dbg !59
  %98 = and i1 %10, %97, !dbg !60
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !61
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !61
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !61
  %102 = bitcast i32 %100 to float, !dbg !61
  %103 = bitcast i32 %101 to float, !dbg !61
  %104 = fadd float %94, %102, !dbg !62
  %105 = fadd float %95, %103, !dbg !62
  %106 = and i1 %96, %46, !dbg !63
  %107 = and i1 %10, %106, !dbg !64
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #1, !dbg !65
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !65
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !65
  %111 = bitcast i32 %109 to float, !dbg !65
  %112 = bitcast i32 %110 to float, !dbg !65
  %113 = fadd float %104, %111, !dbg !66
  %114 = fadd float %105, %112, !dbg !66
  %115 = and i1 %96, %56, !dbg !67
  %116 = and i1 %10, %115, !dbg !68
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #1, !dbg !69
  %118 = extractvalue { i32, i32 } %117, 0, !dbg !69
  %119 = extractvalue { i32, i32 } %117, 1, !dbg !69
  %120 = bitcast i32 %118 to float, !dbg !69
  %121 = bitcast i32 %119 to float, !dbg !69
  %122 = fadd float %113, %120, !dbg !70
  %123 = fadd float %114, %121, !dbg !70
  %124 = mul nsw i32 %45, %66, !dbg !71
  %125 = add nsw <2 x i32> %34, splat (i32 2), !dbg !72
  %126 = select <2 x i1> %35, <2 x i32> splat (i32 3), <2 x i32> %125, !dbg !73
  %127 = extractelement <2 x i32> %126, i64 0, !dbg !74
  %128 = extractelement <2 x i32> %126, i64 1, !dbg !75
  %129 = mul nuw nsw i32 %127, %128, !dbg !76
  %130 = shufflevector <2 x i32> %34, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !75
  %131 = mul nsw <2 x i32> %126, %130, !dbg !75
  %shift = shufflevector <2 x i32> %131, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %132 = add nsw <2 x i32> %shift, %131
  %reass.add = extractelement <2 x i32> %132, i64 0
  %133 = add nsw i32 %66, %45, !dbg !34
  %reass.sub7 = sub nsw i32 %124, %133, !dbg !34
  %134 = add nsw i32 %reass.sub7, 1, !dbg !34
  %135 = add nsw i32 %134, %127, !dbg !74
  %136 = add nsw i32 %135, %128, !dbg !75
  %137 = add nuw nsw i32 %136, %129, !dbg !77
  %138 = sub nsw i32 %137, %reass.add, !dbg !78
  %139 = sitofp i32 %138 to float, !dbg !79
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %139) #1, !dbg !79
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %139) #1, !dbg !79
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !80
  %143 = bitcast float %140 to i32, !dbg !81
  %144 = bitcast float %141 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %144, ptr addrspace(1) %142, i1 %10) #1, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cijoficr42gwd4jrpknchdglgndnkwjhd7g3c3h2axzztqly5tia.py", directory: "inductor_cache/ij")
!4 = !{ptr @triton_poi_fused_avg_pool2d_67, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_67, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_67", linkageName: "triton_poi_fused_avg_pool2d_67", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 41, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 41, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 41, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 61, column: 31, scope: !7)
!22 = !DILocation(line: 64, column: 38, scope: !7)
!23 = !DILocation(line: 64, column: 31, scope: !7)
!24 = !DILocation(line: 74, column: 38, scope: !7)
!25 = !DILocation(line: 74, column: 31, scope: !7)
!26 = !DILocation(line: 77, column: 38, scope: !7)
!27 = !DILocation(line: 77, column: 31, scope: !7)
!28 = !DILocation(line: 24, column: 21, scope: !7)
!29 = !DILocation(line: 24, column: 29, scope: !7)
!30 = !DILocation(line: 29, column: 19, scope: !7)
!31 = !DILocation(line: 37, column: 19, scope: !7)
!32 = !DILocation(line: 38, column: 54, scope: !7)
!33 = !DILocation(line: 38, column: 46, scope: !7)
!34 = !DILocation(line: 79, column: 40, scope: !7)
!35 = !DILocation(line: 40, column: 21, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 54, scope: !7)
!38 = !DILocation(line: 44, column: 46, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 54, scope: !7)
!43 = !DILocation(line: 51, column: 46, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 21, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 54, scope: !7)
!48 = !DILocation(line: 58, column: 46, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 44, scope: !7)
!52 = !DILocation(line: 61, column: 36, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 51, scope: !7)
!56 = !DILocation(line: 64, column: 43, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 70, column: 20, scope: !7)
!60 = !DILocation(line: 71, column: 51, scope: !7)
!61 = !DILocation(line: 71, column: 43, scope: !7)
!62 = !DILocation(line: 72, column: 20, scope: !7)
!63 = !DILocation(line: 73, column: 20, scope: !7)
!64 = !DILocation(line: 74, column: 51, scope: !7)
!65 = !DILocation(line: 74, column: 43, scope: !7)
!66 = !DILocation(line: 75, column: 20, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 77, column: 51, scope: !7)
!69 = !DILocation(line: 77, column: 43, scope: !7)
!70 = !DILocation(line: 78, column: 20, scope: !7)
!71 = !DILocation(line: 79, column: 43, scope: !7)
!72 = !DILocation(line: 79, column: 124, scope: !7)
!73 = !DILocation(line: 79, column: 131, scope: !7)
!74 = !DILocation(line: 79, column: 48, scope: !7)
!75 = !DILocation(line: 79, column: 231, scope: !7)
!76 = !DILocation(line: 79, column: 105, scope: !7)
!77 = !DILocation(line: 79, column: 299, scope: !7)
!78 = !DILocation(line: 79, column: 357, scope: !7)
!79 = !DILocation(line: 80, column: 20, scope: !7)
!80 = !DILocation(line: 81, column: 25, scope: !7)
!81 = !DILocation(line: 81, column: 37, scope: !7)
!82 = !DILocation(line: 81, column: 4, scope: !7)
