; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %12, !dbg !16
  %20 = or disjoint i32 %18, %13, !dbg !16
  %21 = or disjoint i32 %18, %10, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %22 = sdiv i32 %.frozen, 256, !dbg !17
  %23 = mul i32 %22, 256, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %24 = shl i32 %19, 8, !dbg !19
  %25 = shl i32 %20, 8, !dbg !19
  %26 = shl i32 %22, 20, !dbg !20
  %27 = add i32 %26, %.decomposed, !dbg !21
  %28 = add i32 %27, %24, !dbg !22
  %29 = add i32 %27, %25, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #2, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %39 = bitcast i32 %35 to float, !dbg !24
  %40 = bitcast i32 %36 to float, !dbg !24
  %41 = bitcast i32 %37 to float, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = sext i32 %.decomposed to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !25
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = bitcast i32 %57 to float, !dbg !26
  %62 = bitcast i32 %58 to float, !dbg !26
  %63 = fadd float %39, %59, !dbg !27
  %64 = fadd float %40, %60, !dbg !27
  %65 = fadd float %41, %61, !dbg !27
  %66 = fadd float %42, %62, !dbg !27
  %67 = fadd float %48, %59, !dbg !27
  %68 = fadd float %49, %60, !dbg !27
  %69 = fadd float %50, %61, !dbg !27
  %70 = fadd float %51, %62, !dbg !27
  %71 = shl i32 %15, 12, !dbg !28
  %72 = shl i32 %16, 12, !dbg !28
  %73 = add i32 %21, %71, !dbg !29
  %74 = add i32 %21, %72, !dbg !29
  %75 = sext i32 %73 to i64, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !30
  %77 = sext i32 %74 to i64, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !30
  %79 = shl i32 %8, 7, !dbg !31
  %80 = and i32 %79, 896, !dbg !31
  %81 = or disjoint i32 %80, %12, !dbg !31
  %82 = and i32 %9, 508, !dbg !31
  %83 = lshr exact i32 %80, 3, !dbg !31
  %84 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %83, !dbg !31
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %81, !dbg !31
  %86 = bitcast float %63 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !31
  %87 = or disjoint i32 %81, 32, !dbg !31
  %88 = lshr i32 %87, 5, !dbg !31
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !31
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !31
  %91 = bitcast float %64 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !31
  %92 = or disjoint i32 %81, 64, !dbg !31
  %93 = lshr i32 %92, 5, !dbg !31
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !31
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92, !dbg !31
  %96 = bitcast float %65 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !31
  %97 = or disjoint i32 %81, 96, !dbg !31
  %98 = lshr i32 %97, 5, !dbg !31
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !31
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !31
  %101 = bitcast float %66 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !31
  %102 = or disjoint i32 %81, 16, !dbg !31
  %103 = getelementptr float, ptr addrspace(3) %84, i32 %102, !dbg !31
  %104 = bitcast float %67 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !31
  %105 = or disjoint i32 %81, 48, !dbg !31
  %106 = lshr i32 %105, 5, !dbg !31
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !31
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !31
  %109 = bitcast float %68 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !31
  %110 = or disjoint i32 %81, 80, !dbg !31
  %111 = lshr i32 %110, 5, !dbg !31
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !31
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !31
  %114 = bitcast float %69 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !31
  %115 = or disjoint i32 %81, 112, !dbg !31
  %116 = lshr i32 %115, 5, !dbg !31
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !31
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !31
  %119 = bitcast float %70 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %120 = lshr i32 %82, 5, !dbg !31
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !31
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %82, !dbg !31
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !31
  %124 = or disjoint i32 %82, 1, !dbg !31
  %125 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %124, !dbg !31
  %126 = load i32, ptr addrspace(3) %125, align 4, !dbg !31
  %127 = or disjoint i32 %82, 2, !dbg !31
  %128 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %127, !dbg !31
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !31
  %130 = or disjoint i32 %82, 3, !dbg !31
  %131 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %130, !dbg !31
  %132 = load i32, ptr addrspace(3) %131, align 4, !dbg !31
  %133 = or disjoint i32 %82, 512, !dbg !31
  %134 = lshr i32 %133, 5, !dbg !31
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !31
  %136 = getelementptr inbounds float, ptr addrspace(3) %135, i32 %133, !dbg !31
  %137 = load i32, ptr addrspace(3) %136, align 4, !dbg !31
  %138 = or disjoint i32 %82, 513, !dbg !31
  %139 = lshr i32 %138, 5, !dbg !31
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !31
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %138, !dbg !31
  %142 = load i32, ptr addrspace(3) %141, align 4, !dbg !31
  %143 = or disjoint i32 %82, 514, !dbg !31
  %144 = lshr i32 %143, 5, !dbg !31
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !31
  %146 = getelementptr inbounds float, ptr addrspace(3) %145, i32 %143, !dbg !31
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !31
  %148 = or disjoint i32 %82, 515, !dbg !31
  %149 = lshr i32 %148, 5, !dbg !31
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %149, !dbg !31
  %151 = getelementptr inbounds float, ptr addrspace(3) %150, i32 %148, !dbg !31
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %123, i32 %126, i32 %129, i32 %132, ptr addrspace(1) %76, i1 true) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %137, i32 %142, i32 %147, i32 %152, ptr addrspace(1) %78, i1 true) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crbgxxbe4gipc7e23jtxwua55srfmdpppcqiabflolf2bokj35ui.py", directory: "inductor_cache/rb")
!4 = !{ptr @triton_poi_fused_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_2", linkageName: "triton_poi_fused_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 57, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 46, scope: !7)
!32 = !DILocation(line: 35, column: 4, scope: !7)
