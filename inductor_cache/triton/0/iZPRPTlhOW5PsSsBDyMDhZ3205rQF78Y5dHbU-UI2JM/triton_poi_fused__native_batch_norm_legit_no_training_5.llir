; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 384, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 1, !dbg !16
  %18 = or disjoint i32 %17, 1, !dbg !17
  %19 = icmp slt i32 %17, 256, !dbg !18
  %20 = icmp slt i32 %18, 256, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %21 = sdiv i32 %.frozen, 96, !dbg !19
  %22 = mul i32 %21, 96, !dbg !20
  %.decomposed = sub i32 %.frozen, %22, !dbg !20
  %23 = mul i32 %16, 192, !dbg !21
  %24 = mul i32 %18, 96, !dbg !21
  %25 = mul i32 %21, 24576, !dbg !22
  %26 = add i32 %25, %.decomposed, !dbg !23
  %27 = add i32 %26, %23, !dbg !24
  %28 = add i32 %26, %24, !dbg !24
  %29 = sext i32 %27 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = sext i32 %28 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = and i1 %19, %15, !dbg !26
  %34 = and i1 %15, %20, !dbg !26
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !27
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !27
  %37 = sext i32 %.decomposed to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !28
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !30
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %15) #4, !dbg !31
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !31
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !31
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !31
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !31
  %46 = bitcast i32 %42 to float, !dbg !31
  %47 = bitcast i32 %43 to float, !dbg !31
  %48 = bitcast i32 %44 to float, !dbg !31
  %49 = bitcast i32 %45 to float, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !32
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %15) #4, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !34
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %15) #4, !dbg !35
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !36
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !36
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !36
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !36
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %58, 0, !dbg !37
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %59, 0, !dbg !37
  br i1 %.not.i, label %65, label %60, !dbg !37

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !37

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

65:                                               ; preds = %8
  br i1 %.not1.i, label %68, label %66, !dbg !37

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !37
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %70, 0, !dbg !37
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %71, 0, !dbg !37
  br i1 %.not.i1, label %77, label %72, !dbg !37

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !37

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !37

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %73, %75, %78, %80
  %.0.i3 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !37
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %82, 0, !dbg !37
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %83, 0, !dbg !37
  br i1 %.not.i6, label %89, label %84, !dbg !37

84:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %87, label %85, !dbg !37

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !37

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %85, %87, %90, %92
  %.0.i8 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !37
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %94, 0, !dbg !37
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %95, 0, !dbg !37
  br i1 %.not.i11, label %101, label %96, !dbg !37

96:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %99, label %97, !dbg !37

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !37

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %97, %99, %102, %104
  %.0.i13 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !37
  %106 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !27
  %107 = bitcast i32 %106 to float, !dbg !27
  %108 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = fsub float %107, %109, !dbg !38
  %111 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !27
  %112 = bitcast i32 %111 to float, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = fsub float %112, %114, !dbg !38
  %116 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fsub float %117, %119, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = fsub float %122, %124, !dbg !38
  %126 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = fsub float %127, %109, !dbg !38
  %129 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !27
  %130 = bitcast i32 %129 to float, !dbg !27
  %131 = fsub float %130, %114, !dbg !38
  %132 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !27
  %133 = bitcast i32 %132 to float, !dbg !27
  %134 = fsub float %133, %119, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !27
  %136 = bitcast i32 %135 to float, !dbg !27
  %137 = fsub float %136, %124, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !35
  %139 = bitcast i32 %138 to float, !dbg !35
  %140 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !35
  %141 = bitcast i32 %140 to float, !dbg !35
  %142 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !35
  %143 = bitcast i32 %142 to float, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !35
  %145 = bitcast i32 %144 to float, !dbg !35
  %146 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !33
  %147 = bitcast i32 %146 to float, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !33
  %149 = bitcast i32 %148 to float, !dbg !33
  %150 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !33
  %151 = bitcast i32 %150 to float, !dbg !33
  %152 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !33
  %153 = bitcast i32 %152 to float, !dbg !33
  %154 = and i32 %11, 127, !dbg !12
  %155 = or disjoint i32 %154, %10, !dbg !13
  %156 = icmp slt i32 %10, 0, !dbg !14
  %157 = and i1 %19, %156, !dbg !26
  %158 = or disjoint i32 %155, 256, !dbg !13
  %159 = icmp slt i32 %158, 384, !dbg !14
  %160 = and i1 %19, %159, !dbg !26
  %161 = or disjoint i32 %155, 128, !dbg !13
  %162 = icmp slt i32 %161, 384, !dbg !14
  %163 = and i1 %19, %162, !dbg !26
  %164 = icmp slt i32 %155, 384, !dbg !14
  %165 = and i1 %19, %164, !dbg !26
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !39
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !39
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %170 = fmul float %137, %166, !dbg !40
  %171 = fmul float %134, %167, !dbg !40
  %172 = fmul float %131, %168, !dbg !40
  %173 = fmul float %128, %169, !dbg !40
  %174 = fmul float %125, %166, !dbg !40
  %175 = fmul float %120, %167, !dbg !40
  %176 = fmul float %115, %168, !dbg !40
  %177 = fmul float %110, %169, !dbg !40
  %178 = fmul float %170, %153, !dbg !41
  %179 = fmul float %171, %151, !dbg !41
  %180 = fmul float %172, %149, !dbg !41
  %181 = fmul float %173, %147, !dbg !41
  %182 = fmul float %174, %153, !dbg !41
  %183 = fmul float %175, %151, !dbg !41
  %184 = fmul float %176, %149, !dbg !41
  %185 = fmul float %177, %147, !dbg !41
  %186 = fadd float %178, %145, !dbg !42
  %187 = fadd float %179, %143, !dbg !42
  %188 = fadd float %180, %141, !dbg !42
  %189 = fadd float %181, %139, !dbg !42
  %190 = fadd float %182, %145, !dbg !42
  %191 = fadd float %183, %143, !dbg !42
  %192 = fadd float %184, %141, !dbg !42
  %193 = fadd float %185, %139, !dbg !42
  %194 = shl i32 %155, 8, !dbg !43
  %195 = shl i32 %161, 8, !dbg !43
  %196 = shl i32 %158, 8, !dbg !43
  %197 = or disjoint i32 %194, 98304, !dbg !43
  %198 = add i32 %194, %17, !dbg !44
  %199 = add i32 %195, %17, !dbg !44
  %200 = add i32 %196, %17, !dbg !44
  %201 = add i32 %197, %17, !dbg !44
  %202 = sext i32 %198 to i64, !dbg !45
  %203 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !45
  %204 = sext i32 %199 to i64, !dbg !45
  %205 = getelementptr float, ptr addrspace(1) %5, i64 %204, !dbg !45
  %206 = sext i32 %200 to i64, !dbg !45
  %207 = getelementptr float, ptr addrspace(1) %5, i64 %206, !dbg !45
  %208 = sext i32 %201 to i64, !dbg !45
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !45
  %210 = shl i32 %11, 3, !dbg !46
  %211 = and i32 %210, 1016, !dbg !46
  %212 = shl i32 %11, 1, !dbg !46
  %213 = and i32 %212, 254, !dbg !46
  %214 = lshr exact i32 %211, 1, !dbg !46
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %214, !dbg !46
  %216 = getelementptr inbounds float, ptr addrspace(3) %215, i32 %211, !dbg !46
  %217 = bitcast float %186 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #4, !dbg !46
  %218 = or disjoint i32 %211, 2, !dbg !46
  %219 = lshr exact i32 %218, 1, !dbg !46
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %219, !dbg !46
  %221 = getelementptr inbounds float, ptr addrspace(3) %220, i32 %218, !dbg !46
  %222 = bitcast float %187 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #4, !dbg !46
  %223 = or disjoint i32 %211, 4, !dbg !46
  %224 = lshr exact i32 %223, 1, !dbg !46
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !46
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %223, !dbg !46
  %227 = bitcast float %188 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !46
  %228 = or disjoint i32 %211, 6, !dbg !46
  %229 = lshr exact i32 %228, 1, !dbg !46
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !46
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %228, !dbg !46
  %232 = bitcast float %189 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !46
  %233 = or disjoint i32 %211, 1, !dbg !46
  %234 = getelementptr inbounds float, ptr addrspace(3) %215, i32 %233, !dbg !46
  %235 = bitcast float %190 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !46
  %236 = or disjoint i32 %211, 3, !dbg !46
  %237 = lshr i32 %236, 1, !dbg !46
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !46
  %239 = getelementptr inbounds float, ptr addrspace(3) %238, i32 %236, !dbg !46
  %240 = bitcast float %191 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #4, !dbg !46
  %241 = or disjoint i32 %211, 5, !dbg !46
  %242 = lshr i32 %241, 1, !dbg !46
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !46
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %241, !dbg !46
  %245 = bitcast float %192 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !46
  %246 = or disjoint i32 %211, 7, !dbg !46
  %247 = lshr i32 %246, 1, !dbg !46
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %247, !dbg !46
  %249 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %246, !dbg !46
  %250 = bitcast float %193 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %251 = lshr exact i32 %213, 1, !dbg !46
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !46
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %213, !dbg !46
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !46
  %255 = or disjoint i32 %213, 1, !dbg !46
  %256 = getelementptr float, ptr addrspace(3) %252, i32 %255, !dbg !46
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !46
  %258 = or disjoint i32 %213, 256, !dbg !46
  %259 = lshr exact i32 %258, 1, !dbg !46
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %259, !dbg !46
  %261 = getelementptr float, ptr addrspace(3) %260, i32 %258, !dbg !46
  %262 = load i32, ptr addrspace(3) %261, align 4, !dbg !46
  %263 = or disjoint i32 %213, 257, !dbg !46
  %264 = lshr i32 %263, 1, !dbg !46
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %264, !dbg !46
  %266 = getelementptr float, ptr addrspace(3) %265, i32 %263, !dbg !46
  %267 = load i32, ptr addrspace(3) %266, align 4, !dbg !46
  %268 = or disjoint i32 %213, 512, !dbg !46
  %269 = lshr exact i32 %268, 1, !dbg !46
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !46
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %268, !dbg !46
  %272 = load i32, ptr addrspace(3) %271, align 4, !dbg !46
  %273 = or disjoint i32 %213, 513, !dbg !46
  %274 = lshr i32 %273, 1, !dbg !46
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !46
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %273, !dbg !46
  %277 = load i32, ptr addrspace(3) %276, align 4, !dbg !46
  %278 = or disjoint i32 %213, 768, !dbg !46
  %279 = lshr exact i32 %278, 1, !dbg !46
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !46
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %278, !dbg !46
  %282 = load i32, ptr addrspace(3) %281, align 4, !dbg !46
  %283 = or disjoint i32 %213, 769, !dbg !46
  %284 = lshr i32 %283, 1, !dbg !46
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !46
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %283, !dbg !46
  %287 = load i32, ptr addrspace(3) %286, align 4, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %254, i32 %257, ptr addrspace(1) %203, i1 %165) #4, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %262, i32 %267, ptr addrspace(1) %205, i1 %163) #4, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %272, i32 %277, ptr addrspace(1) %207, i1 %160) #4, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %282, i32 %287, ptr addrspace(1) %209, i1 %157) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckxfvyzn67hlwwbubzlkkg63vysoxhni54impbogxh2ddxejbzpt.py", directory: "inductor_cache/kx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 34, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 46, scope: !7)
!47 = !DILocation(line: 48, column: 4, scope: !7)
