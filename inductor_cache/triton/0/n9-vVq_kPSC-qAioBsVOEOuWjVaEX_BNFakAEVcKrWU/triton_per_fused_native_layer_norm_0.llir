; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = lshr i32 %10, 5, !dbg !11
  %13 = shl i32 %10, 2, !dbg !11
  %14 = and i32 %13, 508, !dbg !11
  %15 = icmp samesign ult i32 %14, 384, !dbg !12
  %16 = mul i32 %9, 384, !dbg !13
  %17 = add i32 %16, %14, !dbg !14
  %18 = sext i32 %17 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = bitcast i32 %24 to float, !dbg !16
  %29 = zext nneg i32 %14 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !17
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !20
  %34 = fadd float %25, %26, !dbg !21
  %35 = fadd float %34, %27, !dbg !21
  %36 = fadd float %35, %28, !dbg !21
  %37 = select i1 %15, float %36, float 0.000000e+00, !dbg !21
  %38 = bitcast float %37 to i32, !dbg !26
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 16, i32 31), !dbg !26
  %40 = bitcast i32 %39 to float, !dbg !26
  %41 = fadd float %37, %40, !dbg !21
  %42 = bitcast float %41 to i32, !dbg !26
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !26
  %44 = bitcast i32 %43 to float, !dbg !26
  %45 = fadd float %41, %44, !dbg !21
  %46 = bitcast float %45 to i32, !dbg !26
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = fadd float %45, %48, !dbg !21
  %50 = bitcast float %49 to i32, !dbg !26
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !26
  %52 = bitcast i32 %51 to float, !dbg !26
  %53 = fadd float %49, %52, !dbg !21
  %54 = bitcast float %53 to i32, !dbg !26
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !26
  %56 = bitcast i32 %55 to float, !dbg !26
  %57 = fadd float %53, %56, !dbg !21
  %58 = icmp eq i32 %11, 0, !dbg !26
  %59 = and i32 %12, 3, !dbg !26
  %60 = zext nneg i32 %59 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !26
  %62 = bitcast float %57 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 %58) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %63 = icmp slt i32 %10, 4, !dbg !26
  %64 = sext i32 %10 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i64 %64, !dbg !26
  %66 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %65, i1 %63) #5, !dbg !26
  %67 = bitcast i32 %66 to float, !dbg !26
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !26
  %69 = bitcast i32 %68 to float, !dbg !26
  %70 = fadd float %67, %69, !dbg !21
  %71 = bitcast float %70 to i32, !dbg !26
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !26
  %73 = bitcast i32 %72 to float, !dbg !26
  %74 = fadd float %70, %73, !dbg !21
  %75 = and i32 %10, 3, !dbg !26
  %76 = icmp eq i32 %75, 0, !dbg !26
  %77 = and i1 %63, %76, !dbg !26
  %78 = bitcast float %74 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %78, i1 %77) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %79 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %80 = fadd float %79, 0.000000e+00, !dbg !27
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 3.840000e+02) #5, !dbg !31
  %82 = fsub float %25, %81, !dbg !32
  %83 = fsub float %26, %81, !dbg !32
  %84 = fsub float %27, %81, !dbg !32
  %85 = fsub float %28, %81, !dbg !32
  %86 = fmul float %82, %82, !dbg !33
  %87 = fmul float %83, %83, !dbg !33
  %88 = fmul float %84, %84, !dbg !33
  %89 = fmul float %85, %85, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %90 = fadd float %86, %87, !dbg !36
  %91 = fadd float %88, %90, !dbg !36
  %92 = fadd float %89, %91, !dbg !36
  %93 = select i1 %15, float %92, float 0.000000e+00, !dbg !36
  %94 = bitcast float %93 to i32, !dbg !34
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !34
  %96 = bitcast i32 %95 to float, !dbg !34
  %97 = fadd float %93, %96, !dbg !36
  %98 = bitcast float %97 to i32, !dbg !34
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !34
  %100 = bitcast i32 %99 to float, !dbg !34
  %101 = fadd float %97, %100, !dbg !36
  %102 = bitcast float %101 to i32, !dbg !34
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !34
  %104 = bitcast i32 %103 to float, !dbg !34
  %105 = fadd float %101, %104, !dbg !36
  %106 = bitcast float %105 to i32, !dbg !34
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = fadd float %105, %108, !dbg !36
  %110 = bitcast float %109 to i32, !dbg !34
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = fadd float %109, %112, !dbg !36
  %114 = bitcast float %113 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %114, i1 %58) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %115 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %65, i1 %63) #5, !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !34
  %118 = bitcast i32 %117 to float, !dbg !34
  %119 = fadd float %116, %118, !dbg !36
  %120 = bitcast float %119 to i32, !dbg !34
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !34
  %122 = bitcast i32 %121 to float, !dbg !34
  %123 = fadd float %119, %122, !dbg !36
  %124 = bitcast float %123 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %124, i1 %77) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %125 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %126 = fadd float %125, 0.000000e+00, !dbg !37
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 3.840000e+02) #5, !dbg !39
  %128 = fadd float %127, 0x3EE4F8B580000000, !dbg !40
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %129, 0, !dbg !41
  br i1 %.not.i, label %132, label %130, !dbg !41

130:                                              ; preds = %8
  %131 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %128), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

132:                                              ; preds = %8
  %133 = tail call float @llvm.nvvm.rsqrt.approx.f(float %128), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %130, %132
  %.0.i = phi float [ %131, %130 ], [ %133, %132 ], !dbg !41
  %134 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %135 = bitcast i32 %134 to float, !dbg !20
  %136 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %137 = bitcast i32 %136 to float, !dbg !20
  %138 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %139 = bitcast i32 %138 to float, !dbg !20
  %140 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %141 = bitcast i32 %140 to float, !dbg !20
  %142 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %143 = bitcast i32 %142 to float, !dbg !18
  %144 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %145 = bitcast i32 %144 to float, !dbg !18
  %146 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %147 = bitcast i32 %146 to float, !dbg !18
  %148 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %149 = bitcast i32 %148 to float, !dbg !18
  %150 = fmul float %82, %.0.i, !dbg !42
  %151 = fmul float %83, %.0.i, !dbg !42
  %152 = fmul float %84, %.0.i, !dbg !42
  %153 = fmul float %85, %.0.i, !dbg !42
  %154 = fmul float %150, %149, !dbg !43
  %155 = fmul float %151, %147, !dbg !43
  %156 = fmul float %152, %145, !dbg !43
  %157 = fmul float %153, %143, !dbg !43
  %158 = fadd float %154, %141, !dbg !44
  %159 = fadd float %155, %139, !dbg !44
  %160 = fadd float %156, %137, !dbg !44
  %161 = fadd float %157, %135, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %162 = sext i32 %9 to i64, !dbg !46
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !46
  %urem = and i32 %10, 127, !dbg !47
  %164 = icmp eq i32 %urem, 0, !dbg !47
  %165 = bitcast float %.0.i to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %163, i1 %164) #5, !dbg !47
  %166 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !48
  %167 = bitcast float %158 to i32, !dbg !49
  %168 = bitcast float %159 to i32, !dbg !49
  %169 = bitcast float %160 to i32, !dbg !49
  %170 = bitcast float %161 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %166, i1 %15) #5, !dbg !49
  %171 = getelementptr float, ptr addrspace(1) %4, i64 %162, !dbg !50
  %172 = bitcast float %81 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %171, i1 %164) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cykars5hvde4dapa43zxv5cue236drt34o2yzsa3wa2o46swestr.py", directory: "inductor_cache/yk")
!4 = !{ptr @triton_per_fused_native_layer_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_layer_norm_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_layer_norm_0", linkageName: "triton_per_fused_native_layer_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 31, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 31, scope: !7)
!20 = !DILocation(line: 34, column: 36, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 39, column: 57, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 39, column: 44, scope: !7)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !35)
!35 = !DILocation(line: 47, column: 59, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !35)
!37 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 47, column: 45, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 28, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 4, scope: !7)
!46 = !DILocation(line: 58, column: 28, scope: !7)
!47 = !DILocation(line: 58, column: 40, scope: !7)
!48 = !DILocation(line: 59, column: 25, scope: !7)
!49 = !DILocation(line: 59, column: 46, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 37, scope: !7)
!52 = !DILocation(line: 60, column: 4, scope: !7)
