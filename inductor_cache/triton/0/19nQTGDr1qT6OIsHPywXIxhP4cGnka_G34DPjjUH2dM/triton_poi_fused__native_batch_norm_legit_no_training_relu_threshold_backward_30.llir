; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 248, !dbg !12
  %15 = shl i32 %12, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = or disjoint i32 %11, %16, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 2, !dbg !15
  %.lobit2 = lshr i32 %12, 5, !dbg !16
  %22 = and i32 %.lobit2, 3, !dbg !16
  %23 = or disjoint i32 %21, %22, !dbg !17
  %24 = icmp slt i32 %23, 4, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %25 = sdiv i32 %.frozen, 1280, !dbg !19
  %26 = mul i32 %25, 1280, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = srem i32 %18, 1280, !dbg !20
  %28 = srem i32 %19, 1280, !dbg !20
  %29 = mul i32 %23, 1280, !dbg !21
  %30 = mul i32 %25, 5120, !dbg !22
  %31 = add i32 %30, %29, !dbg !23
  %32 = add i32 %31, %.decomposed, !dbg !24
  %33 = add i32 %31, %27, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %24) #4, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %24) #4, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = and i32 %13, 1016, !dbg !26
  %49 = lshr i32 %13, 5, !dbg !26
  %50 = and i32 %49, 24, !dbg !26
  %51 = add nuw nsw i32 %50, %48, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %52, i32 %39, i32 %40, i32 %41, i32 %42, i1 true) #4, !dbg !26
  %53 = getelementptr inbounds i8, ptr addrspace(3) %52, i32 16, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %53, i32 %44, i32 %45, i32 %46, i32 %47, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !26
  %55 = load <2 x float>, ptr addrspace(3) %54, align 8, !dbg !26
  %56 = add nuw nsw i32 %16, 264, !dbg !26
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %56, !dbg !26
  %58 = load <2 x float>, ptr addrspace(3) %57, align 8, !dbg !26
  %59 = add nuw nsw i32 %16, 528, !dbg !26
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %59, !dbg !26
  %61 = load <2 x float>, ptr addrspace(3) %60, align 8, !dbg !26
  %62 = add nuw nsw i32 %16, 792, !dbg !26
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !26
  %64 = load <2 x float>, ptr addrspace(3) %63, align 8, !dbg !26
  %65 = sext i32 %28 to i64, !dbg !27
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !27
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !28
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !29
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #4, !dbg !30
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !30
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !30
  %72 = bitcast i32 %70 to float, !dbg !30
  %73 = bitcast i32 %71 to float, !dbg !30
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !31
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 true) #4, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !33
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #4, !dbg !34
  %78 = fadd float %72, 0x3EE4F8B580000000, !dbg !35
  %79 = fadd float %73, 0x3EE4F8B580000000, !dbg !35
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %80, 0, !dbg !36
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %81, 0, !dbg !36
  br i1 %.not.i, label %87, label %82, !dbg !36

82:                                               ; preds = %9
  br i1 %.not1.i, label %85, label %83, !dbg !36

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

87:                                               ; preds = %9
  br i1 %.not1.i, label %90, label %88, !dbg !36

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !36
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i10 = icmp eq i32 %92, 0, !dbg !36
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i13 = icmp eq i32 %93, 0, !dbg !36
  br i1 %.not.i10, label %99, label %94, !dbg !36

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %97, label %95, !dbg !36

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit14, !dbg !36

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit14, !dbg !36

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %102, label %100, !dbg !36

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit14, !dbg !36

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit14, !dbg !36

__nv_sqrtf.exit14:                                ; preds = %95, %97, %100, %102
  %.0.i12 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !36
  %104 = extractvalue { i32, i32 } %67, 1, !dbg !28
  %105 = extractvalue { i32, i32 } %67, 0, !dbg !28
  %106 = extractelement <2 x float> %58, i64 1, !dbg !26
  %107 = extractelement <2 x float> %58, i64 0, !dbg !26
  %108 = extractelement <2 x float> %55, i64 1, !dbg !26
  %109 = extractelement <2 x float> %55, i64 0, !dbg !26
  %110 = extractvalue { i32, i32 } %77, 1, !dbg !34
  %111 = extractvalue { i32, i32 } %77, 0, !dbg !34
  %112 = extractvalue { i32, i32 } %75, 1, !dbg !32
  %113 = extractvalue { i32, i32 } %75, 0, !dbg !32
  %114 = icmp slt i32 %21, 4, !dbg !18
  %115 = and i32 %12, 127, !dbg !12
  %116 = or disjoint i32 %115, 128, !dbg !12
  %117 = or disjoint i32 %11, %116, !dbg !13
  %118 = or disjoint i32 %11, %115, !dbg !13
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !37
  %121 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !28
  %122 = insertelement <2 x i32> %121, i32 %105, i64 1, !dbg !28
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !28
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %125 = shufflevector <2 x float> %64, <2 x float> %61, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %126 = insertelement <8 x float> %125, float %106, i64 4, !dbg !38
  %127 = insertelement <8 x float> %126, float %107, i64 5, !dbg !38
  %128 = insertelement <8 x float> %127, float %108, i64 6, !dbg !38
  %129 = insertelement <8 x float> %128, float %109, i64 7, !dbg !38
  %130 = fsub <8 x float> %129, %124, !dbg !38
  %131 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !34
  %132 = insertelement <2 x i32> %131, i32 %111, i64 1, !dbg !34
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !34
  %134 = shufflevector <2 x float> %133, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %135 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !32
  %136 = insertelement <2 x i32> %135, i32 %113, i64 1, !dbg !32
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !32
  %138 = shufflevector <2 x float> %137, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %139 = insertelement <8 x float> poison, float %120, i64 0, !dbg !39
  %140 = insertelement <8 x float> %139, float %119, i64 1, !dbg !39
  %141 = shufflevector <8 x float> %140, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !39
  %142 = fmul <8 x float> %130, %141, !dbg !39
  %143 = fmul <8 x float> %142, %138, !dbg !40
  %144 = fadd <8 x float> %143, %134, !dbg !41
  %145 = fcmp olt <8 x float> %144, zeroinitializer, !dbg !42
  %146 = select <8 x i1> %145, <8 x float> zeroinitializer, <8 x float> %144, !dbg !46
  %147 = fcmp ole <8 x float> %146, zeroinitializer, !dbg !47
  %148 = add i32 %118, %20, !dbg !48
  %149 = shl i32 %148, 2, !dbg !48
  %150 = add i32 %117, %20, !dbg !48
  %151 = shl i32 %150, 2, !dbg !48
  %152 = sext i32 %149 to i64, !dbg !49
  %153 = getelementptr float, ptr addrspace(1) %5, i64 %152, !dbg !49
  %154 = sext i32 %151 to i64, !dbg !49
  %155 = getelementptr float, ptr addrspace(1) %5, i64 %154, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %156 = shl i32 %12, 2, !dbg !50
  %157 = and i32 %156, 508, !dbg !50
  %158 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %48, !dbg !50
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %48, !dbg !50
  %160 = extractelement <8 x float> %146, i64 7, !dbg !50
  %161 = bitcast float %160 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %161, i1 true) #4, !dbg !50
  %162 = or disjoint i32 %48, 4, !dbg !50
  %163 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %162, !dbg !50
  %164 = getelementptr inbounds float, ptr addrspace(3) %163, i32 %162, !dbg !50
  %165 = extractelement <8 x float> %146, i64 6, !dbg !50
  %166 = bitcast float %165 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %166, i1 true) #4, !dbg !50
  %167 = or disjoint i32 %48, 1, !dbg !50
  %168 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %167, !dbg !50
  %169 = extractelement <8 x float> %146, i64 5, !dbg !50
  %170 = bitcast float %169 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %170, i1 true) #4, !dbg !50
  %171 = or disjoint i32 %48, 5, !dbg !50
  %172 = lshr i32 %171, 2, !dbg !50
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !50
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %171, !dbg !50
  %175 = extractelement <8 x float> %146, i64 4, !dbg !50
  %176 = bitcast float %175 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %176, i1 true) #4, !dbg !50
  %177 = or disjoint i32 %48, 2, !dbg !50
  %178 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %177, !dbg !50
  %179 = extractelement <8 x float> %146, i64 3, !dbg !50
  %180 = bitcast float %179 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %180, i1 true) #4, !dbg !50
  %181 = or disjoint i32 %48, 6, !dbg !50
  %182 = lshr i32 %181, 2, !dbg !50
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !50
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %181, !dbg !50
  %185 = extractelement <8 x float> %146, i64 2, !dbg !50
  %186 = bitcast float %185 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %186, i1 true) #4, !dbg !50
  %187 = or disjoint i32 %48, 3, !dbg !50
  %188 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %187, !dbg !50
  %189 = extractelement <8 x float> %146, i64 1, !dbg !50
  %190 = bitcast float %189 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %190, i1 true) #4, !dbg !50
  %191 = or disjoint i32 %48, 7, !dbg !50
  %192 = lshr i32 %191, 2, !dbg !50
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %192, !dbg !50
  %194 = getelementptr inbounds float, ptr addrspace(3) %193, i32 %191, !dbg !50
  %195 = extractelement <8 x float> %146, i64 0, !dbg !50
  %196 = bitcast float %195 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %196, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %197 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %157, !dbg !50
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %157, !dbg !50
  %199 = load i32, ptr addrspace(3) %198, align 4, !dbg !50
  %200 = or disjoint i32 %157, 1, !dbg !50
  %201 = getelementptr float, ptr addrspace(3) %197, i32 %200, !dbg !50
  %202 = load i32, ptr addrspace(3) %201, align 4, !dbg !50
  %203 = or disjoint i32 %157, 2, !dbg !50
  %204 = getelementptr float, ptr addrspace(3) %197, i32 %203, !dbg !50
  %205 = load i32, ptr addrspace(3) %204, align 4, !dbg !50
  %206 = or disjoint i32 %157, 3, !dbg !50
  %207 = getelementptr float, ptr addrspace(3) %197, i32 %206, !dbg !50
  %208 = load i32, ptr addrspace(3) %207, align 4, !dbg !50
  %209 = or disjoint i32 %157, 512, !dbg !50
  %210 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %209, !dbg !50
  %211 = getelementptr float, ptr addrspace(3) %210, i32 %209, !dbg !50
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !50
  %213 = or disjoint i32 %157, 513, !dbg !50
  %214 = lshr i32 %213, 2, !dbg !50
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !50
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %213, !dbg !50
  %217 = load i32, ptr addrspace(3) %216, align 4, !dbg !50
  %218 = or disjoint i32 %157, 514, !dbg !50
  %219 = lshr i32 %218, 2, !dbg !50
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !50
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %218, !dbg !50
  %222 = load i32, ptr addrspace(3) %221, align 4, !dbg !50
  %223 = or disjoint i32 %157, 515, !dbg !50
  %224 = lshr i32 %223, 2, !dbg !50
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !50
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %223, !dbg !50
  %227 = load i32, ptr addrspace(3) %226, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %199, i32 %202, i32 %205, i32 %208, ptr addrspace(1) %153, i1 %114) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %212, i32 %217, i32 %222, i32 %227, ptr addrspace(1) %155, i1 %114) #4, !dbg !50
  %228 = getelementptr i1, ptr addrspace(1) %6, i64 %34, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %229 = extractelement <8 x i1> %147, i64 7, !dbg !52
  %230 = zext i1 %229 to i8, !dbg !52
  %231 = extractelement <8 x i1> %147, i64 6, !dbg !52
  %232 = zext i1 %231 to i8, !dbg !52
  %233 = extractelement <8 x i1> %147, i64 5, !dbg !52
  %234 = zext i1 %233 to i8, !dbg !52
  %235 = extractelement <8 x i1> %147, i64 4, !dbg !52
  %236 = zext i1 %235 to i8, !dbg !52
  %237 = extractelement <8 x i1> %147, i64 3, !dbg !52
  %238 = zext i1 %237 to i8, !dbg !52
  %239 = extractelement <8 x i1> %147, i64 2, !dbg !52
  %240 = zext i1 %239 to i8, !dbg !52
  %241 = extractelement <8 x i1> %147, i64 1, !dbg !52
  %242 = zext i1 %241 to i8, !dbg !52
  %243 = extractelement <8 x i1> %147, i64 0, !dbg !52
  %244 = zext i1 %243 to i8, !dbg !52
  %245 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %245, i8 %230, i8 %232, i1 true) #4, !dbg !52
  %246 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %56, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %246, i8 %234, i8 %236, i1 true) #4, !dbg !52
  %247 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %59, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %247, i8 %238, i8 %240, i1 true) #4, !dbg !52
  %248 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %62, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %248, i8 %242, i8 %244, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %249 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %51, !dbg !52
  %250 = load <2 x i32>, ptr addrspace(3) %249, align 8, !dbg !52
  %251 = bitcast <2 x i32> %250 to <64 x i1>, !dbg !52
  %252 = extractelement <64 x i1> %251, i64 24, !dbg !52
  %253 = extractelement <64 x i1> %251, i64 56, !dbg !52
  %254 = bitcast <2 x i32> %250 to <8 x i8>, !dbg !52
  %255 = extractelement <8 x i8> %254, i64 0, !dbg !52
  %256 = and i8 %255, 1, !dbg !52
  %257 = shufflevector <8 x i8> %254, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !52
  %258 = and <2 x i8> %257, splat (i8 1), !dbg !52
  %259 = zext i1 %252 to i8, !dbg !52
  %260 = extractelement <8 x i8> %254, i64 4, !dbg !52
  %261 = and i8 %260, 1, !dbg !52
  %262 = shufflevector <8 x i8> %254, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !52
  %263 = and <2 x i8> %262, splat (i8 1), !dbg !52
  %264 = zext i1 %253 to i8, !dbg !52
  %265 = insertelement <4 x i8> poison, i8 %256, i64 0, !dbg !52
  %266 = shufflevector <2 x i8> %258, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %267 = shufflevector <4 x i8> %265, <4 x i8> %266, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %268 = insertelement <4 x i8> %267, i8 %259, i64 3, !dbg !52
  %269 = bitcast <4 x i8> %268 to i32, !dbg !52
  %270 = insertelement <4 x i8> poison, i8 %261, i64 0, !dbg !52
  %271 = shufflevector <2 x i8> %263, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %272 = shufflevector <4 x i8> %270, <4 x i8> %271, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %273 = insertelement <4 x i8> %272, i8 %264, i64 3, !dbg !52
  %274 = bitcast <4 x i8> %273 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %269, i32 %274, ptr addrspace(1) %228, i1 %24) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce4hl6k742n2fqtrumgutnt75am5ug26k62iscguhngvtywccusa.py", directory: "inductor_cache/e4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_30", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 51, column: 21, scope: !7)
!48 = !DILocation(line: 52, column: 30, scope: !7)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 44, scope: !7)
!51 = !DILocation(line: 53, column: 25, scope: !7)
!52 = !DILocation(line: 53, column: 57, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
