; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 6, !dbg !15
  %17 = shl i32 %8, 4, !dbg !16
  %18 = and i32 %17, 48, !dbg !16
  %19 = lshr i32 %8, 4, !dbg !16
  %20 = and i32 %19, 15, !dbg !16
  %21 = or disjoint i32 %16, %18, !dbg !17
  %22 = or disjoint i32 %21, 4, !dbg !17
  %23 = or disjoint i32 %21, 8, !dbg !17
  %24 = or disjoint i32 %21, 12, !dbg !17
  %25 = or disjoint i32 %16, %20, !dbg !17
  %26 = or disjoint i32 %25, 16, !dbg !17
  %27 = or disjoint i32 %25, 32, !dbg !17
  %28 = or disjoint i32 %25, 48, !dbg !17
  %29 = icmp slt i32 %21, 256, !dbg !18
  %30 = icmp slt i32 %25, 256, !dbg !18
  %31 = icmp slt i32 %26, 256, !dbg !18
  %32 = icmp slt i32 %27, 256, !dbg !18
  %33 = icmp slt i32 %28, 256, !dbg !18
  %34 = sdiv i32 %13, 16, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %35 = sdiv i32 %.frozen, 256, !dbg !20
  %36 = mul i32 %35, 256, !dbg !21
  %.decomposed = sub i32 %.frozen, %36, !dbg !21
  %37 = shl i32 %34, 14, !dbg !22
  %38 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !23
  %39 = insertelement <2 x i32> %38, i32 %34, i64 1, !dbg !23
  %40 = srem <2 x i32> %39, splat (i32 16), !dbg !23
  %41 = extractelement <2 x i32> %40, i64 1, !dbg !24
  %42 = icmp sgt i32 %41, 0, !dbg !25
  %43 = icmp sgt <2 x i32> %40, <i32 0, i32 -1>, !dbg !26
  %44 = extractelement <2 x i1> %43, i64 0, !dbg !27
  %45 = and i1 %44, %42, !dbg !27
  %46 = extractelement <2 x i32> %40, i64 0, !dbg !24
  %47 = shl nsw i32 %46, 9, !dbg !28
  %48 = add i32 %37, %47, !dbg !29
  %49 = add i32 %48, -8448, !dbg !30
  %50 = add i32 %49, %21, !dbg !31
  %51 = add i32 %49, %22, !dbg !31
  %52 = add i32 %49, %23, !dbg !31
  %53 = add i32 %49, %24, !dbg !31
  %54 = sext i32 %50 to i64, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !32
  %56 = sext i32 %51 to i64, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !32
  %58 = sext i32 %52 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !32
  %60 = sext i32 %53 to i64, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !32
  %62 = and i1 %29, %45, !dbg !33
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62) #2, !dbg !34
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !34
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !34
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !34
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !34
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62) #2, !dbg !34
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !34
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !34
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !34
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !34
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62) #2, !dbg !34
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !34
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !34
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !34
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !34
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62) #2, !dbg !34
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !34
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !34
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !34
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !34
  %83 = icmp sgt i32 %46, -1, !dbg !35
  %84 = and i1 %83, %42, !dbg !36
  %85 = add i32 %48, -8192, !dbg !37
  %86 = add i32 %85, %21, !dbg !38
  %87 = add i32 %85, %22, !dbg !38
  %88 = add i32 %85, %23, !dbg !38
  %89 = add i32 %85, %24, !dbg !38
  %90 = sext i32 %86 to i64, !dbg !39
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !39
  %92 = sext i32 %87 to i64, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !39
  %94 = sext i32 %88 to i64, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !39
  %96 = sext i32 %89 to i64, !dbg !39
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !39
  %98 = and i1 %29, %84, !dbg !40
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !41
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !41
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !41
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !41
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !41
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !41
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !41
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !41
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !41
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !41
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !41
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !41
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !41
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !41
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !41
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !41
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !41
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !41
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !41
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !41
  %119 = add i32 %48, -7936, !dbg !42
  %120 = add i32 %119, %21, !dbg !43
  %121 = add i32 %119, %22, !dbg !43
  %122 = add i32 %119, %23, !dbg !43
  %123 = add i32 %119, %24, !dbg !43
  %124 = sext i32 %120 to i64, !dbg !44
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !44
  %126 = sext i32 %121 to i64, !dbg !44
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !44
  %128 = sext i32 %122 to i64, !dbg !44
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !44
  %130 = sext i32 %123 to i64, !dbg !44
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !44
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !45
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !45
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !45
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !45
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !45
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !45
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !45
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !45
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !45
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !45
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !45
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !45
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !45
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !45
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !45
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !45
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !45
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !45
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !45
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !45
  %152 = extractelement <2 x i1> %43, i64 1, !dbg !46
  %153 = and i1 %44, %152, !dbg !46
  %154 = add i32 %48, -256, !dbg !47
  %155 = add i32 %154, %21, !dbg !48
  %156 = add i32 %154, %22, !dbg !48
  %157 = add i32 %154, %23, !dbg !48
  %158 = add i32 %154, %24, !dbg !48
  %159 = sext i32 %155 to i64, !dbg !49
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !49
  %161 = sext i32 %156 to i64, !dbg !49
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !49
  %163 = sext i32 %157 to i64, !dbg !49
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !49
  %165 = sext i32 %158 to i64, !dbg !49
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !49
  %167 = and i1 %29, %153, !dbg !50
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167) #2, !dbg !51
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !51
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !51
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !51
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !51
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167) #2, !dbg !51
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !51
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !51
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !51
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !51
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %164, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167) #2, !dbg !51
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !51
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !51
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !51
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !51
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %166, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167) #2, !dbg !51
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !51
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !51
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !51
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !51
  %188 = or i32 %41, %46, !dbg !24
  %189 = icmp sgt i32 %188, -1, !dbg !24
  %190 = add i32 %48, %21, !dbg !52
  %191 = add i32 %48, %22, !dbg !52
  %192 = add i32 %48, %23, !dbg !52
  %193 = add i32 %48, %24, !dbg !52
  %194 = sext i32 %190 to i64, !dbg !53
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !53
  %196 = sext i32 %191 to i64, !dbg !53
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !53
  %198 = sext i32 %192 to i64, !dbg !53
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !53
  %200 = sext i32 %193 to i64, !dbg !53
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !53
  %202 = and i1 %29, %189, !dbg !54
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !55
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !55
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !55
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !55
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !55
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !55
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !55
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !55
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !55
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !55
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !55
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !55
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !55
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !55
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !55
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !55
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !55
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !55
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !55
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !55
  %223 = or disjoint i32 %48, 256, !dbg !56
  %224 = add i32 %223, %21, !dbg !57
  %225 = add i32 %223, %22, !dbg !57
  %226 = add i32 %223, %23, !dbg !57
  %227 = add i32 %223, %24, !dbg !57
  %228 = sext i32 %224 to i64, !dbg !58
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !58
  %230 = sext i32 %225 to i64, !dbg !58
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !58
  %232 = sext i32 %226 to i64, !dbg !58
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !58
  %234 = sext i32 %227 to i64, !dbg !58
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !58
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %229, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !59
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !59
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !59
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !59
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !59
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %231, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !59
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !59
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !59
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !59
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !59
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %233, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !59
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !59
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !59
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !59
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !59
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %235, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !59
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !59
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !59
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !59
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !59
  %256 = add i32 %48, 7936, !dbg !60
  %257 = add i32 %256, %21, !dbg !61
  %258 = add i32 %256, %22, !dbg !61
  %259 = add i32 %256, %23, !dbg !61
  %260 = add i32 %256, %24, !dbg !61
  %261 = sext i32 %257 to i64, !dbg !62
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !62
  %263 = sext i32 %258 to i64, !dbg !62
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !62
  %265 = sext i32 %259 to i64, !dbg !62
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !62
  %267 = sext i32 %260 to i64, !dbg !62
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !62
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %262, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167) #2, !dbg !63
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !63
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !63
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !63
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !63
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %264, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167) #2, !dbg !63
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !63
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !63
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !63
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !63
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %266, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167) #2, !dbg !63
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !63
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !63
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !63
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !63
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %268, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167) #2, !dbg !63
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !63
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !63
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !63
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !63
  %289 = add i32 %48, 8192, !dbg !64
  %290 = add i32 %289, %21, !dbg !65
  %291 = add i32 %289, %22, !dbg !65
  %292 = add i32 %289, %23, !dbg !65
  %293 = add i32 %289, %24, !dbg !65
  %294 = sext i32 %290 to i64, !dbg !66
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %294, !dbg !66
  %296 = sext i32 %291 to i64, !dbg !66
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %296, !dbg !66
  %298 = sext i32 %292 to i64, !dbg !66
  %299 = getelementptr float, ptr addrspace(1) %0, i64 %298, !dbg !66
  %300 = sext i32 %293 to i64, !dbg !66
  %301 = getelementptr float, ptr addrspace(1) %0, i64 %300, !dbg !66
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %295, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !67
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !67
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !67
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !67
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !67
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %297, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !67
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !67
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !67
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !67
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !67
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %299, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !67
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !67
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !67
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !67
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !67
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %301, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !67
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !67
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !67
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !67
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !67
  %322 = add i32 %48, 8448, !dbg !68
  %323 = add i32 %322, %21, !dbg !69
  %324 = add i32 %322, %22, !dbg !69
  %325 = add i32 %322, %23, !dbg !69
  %326 = add i32 %322, %24, !dbg !69
  %327 = sext i32 %323 to i64, !dbg !70
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !70
  %329 = sext i32 %324 to i64, !dbg !70
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !70
  %331 = sext i32 %325 to i64, !dbg !70
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !70
  %333 = sext i32 %326 to i64, !dbg !70
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !70
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %328, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !71
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !71
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !71
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !71
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !71
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %330, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !71
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !71
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !71
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !71
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !71
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %332, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !71
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !71
  %347 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !71
  %348 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !71
  %349 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !71
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %334, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #2, !dbg !71
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !71
  %352 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !71
  %353 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !71
  %354 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !71
  %355 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !34
  %356 = insertelement <4 x i32> %355, i32 %65, i64 1, !dbg !34
  %357 = insertelement <4 x i32> %356, i32 %66, i64 2, !dbg !34
  %358 = insertelement <4 x i32> %357, i32 %67, i64 3, !dbg !34
  %359 = bitcast <4 x i32> %358 to <4 x float>, !dbg !34
  %360 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !41
  %361 = insertelement <4 x i32> %360, i32 %101, i64 1, !dbg !41
  %362 = insertelement <4 x i32> %361, i32 %102, i64 2, !dbg !41
  %363 = insertelement <4 x i32> %362, i32 %103, i64 3, !dbg !41
  %364 = bitcast <4 x i32> %363 to <4 x float>, !dbg !41
  %365 = fcmp ogt <4 x float> %364, %359, !dbg !72
  %366 = fcmp uno <4 x float> %364, zeroinitializer, !dbg !76
  %367 = or <4 x i1> %365, %366, !dbg !77
  %.v = select <4 x i1> %367, <4 x i32> %363, <4 x i32> %358, !dbg !78
  %368 = bitcast <4 x i32> %.v to <4 x float>, !dbg !78
  %369 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !45
  %370 = insertelement <4 x i32> %369, i32 %134, i64 1, !dbg !45
  %371 = insertelement <4 x i32> %370, i32 %135, i64 2, !dbg !45
  %372 = insertelement <4 x i32> %371, i32 %136, i64 3, !dbg !45
  %373 = bitcast <4 x i32> %372 to <4 x float>, !dbg !45
  %374 = fcmp olt <4 x float> %368, %373, !dbg !79
  %375 = fcmp uno <4 x float> %373, zeroinitializer, !dbg !81
  %376 = or <4 x i1> %374, %375, !dbg !82
  %.v33 = select <4 x i1> %376, <4 x i32> %372, <4 x i32> %.v, !dbg !83
  %377 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !83
  %378 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !51
  %379 = insertelement <4 x i32> %378, i32 %170, i64 1, !dbg !51
  %380 = insertelement <4 x i32> %379, i32 %171, i64 2, !dbg !51
  %381 = insertelement <4 x i32> %380, i32 %172, i64 3, !dbg !51
  %382 = bitcast <4 x i32> %381 to <4 x float>, !dbg !51
  %383 = fcmp olt <4 x float> %377, %382, !dbg !84
  %384 = fcmp uno <4 x float> %382, zeroinitializer, !dbg !86
  %385 = or <4 x i1> %383, %384, !dbg !87
  %.v34 = select <4 x i1> %385, <4 x i32> %381, <4 x i32> %.v33, !dbg !88
  %386 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !88
  %387 = insertelement <4 x i32> poison, i32 %204, i64 0, !dbg !55
  %388 = insertelement <4 x i32> %387, i32 %205, i64 1, !dbg !55
  %389 = insertelement <4 x i32> %388, i32 %206, i64 2, !dbg !55
  %390 = insertelement <4 x i32> %389, i32 %207, i64 3, !dbg !55
  %391 = bitcast <4 x i32> %390 to <4 x float>, !dbg !55
  %392 = fcmp olt <4 x float> %386, %391, !dbg !89
  %393 = fcmp uno <4 x float> %391, zeroinitializer, !dbg !91
  %394 = or <4 x i1> %392, %393, !dbg !92
  %.v35 = select <4 x i1> %394, <4 x i32> %390, <4 x i32> %.v34, !dbg !93
  %395 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !93
  %396 = insertelement <4 x i32> poison, i32 %237, i64 0, !dbg !59
  %397 = insertelement <4 x i32> %396, i32 %238, i64 1, !dbg !59
  %398 = insertelement <4 x i32> %397, i32 %239, i64 2, !dbg !59
  %399 = insertelement <4 x i32> %398, i32 %240, i64 3, !dbg !59
  %400 = bitcast <4 x i32> %399 to <4 x float>, !dbg !59
  %401 = fcmp olt <4 x float> %395, %400, !dbg !94
  %402 = fcmp uno <4 x float> %400, zeroinitializer, !dbg !96
  %403 = or <4 x i1> %401, %402, !dbg !97
  %.v36 = select <4 x i1> %403, <4 x i32> %399, <4 x i32> %.v35, !dbg !98
  %404 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !98
  %405 = insertelement <4 x i32> poison, i32 %270, i64 0, !dbg !63
  %406 = insertelement <4 x i32> %405, i32 %271, i64 1, !dbg !63
  %407 = insertelement <4 x i32> %406, i32 %272, i64 2, !dbg !63
  %408 = insertelement <4 x i32> %407, i32 %273, i64 3, !dbg !63
  %409 = bitcast <4 x i32> %408 to <4 x float>, !dbg !63
  %410 = fcmp olt <4 x float> %404, %409, !dbg !99
  %411 = fcmp uno <4 x float> %409, zeroinitializer, !dbg !101
  %412 = or <4 x i1> %410, %411, !dbg !102
  %.v37 = select <4 x i1> %412, <4 x i32> %408, <4 x i32> %.v36, !dbg !103
  %413 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !103
  %414 = insertelement <4 x i32> poison, i32 %303, i64 0, !dbg !67
  %415 = insertelement <4 x i32> %414, i32 %304, i64 1, !dbg !67
  %416 = insertelement <4 x i32> %415, i32 %305, i64 2, !dbg !67
  %417 = insertelement <4 x i32> %416, i32 %306, i64 3, !dbg !67
  %418 = bitcast <4 x i32> %417 to <4 x float>, !dbg !67
  %419 = fcmp olt <4 x float> %413, %418, !dbg !104
  %420 = fcmp uno <4 x float> %418, zeroinitializer, !dbg !106
  %421 = or <4 x i1> %419, %420, !dbg !107
  %.v38 = select <4 x i1> %421, <4 x i32> %417, <4 x i32> %.v37, !dbg !108
  %422 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !108
  %423 = insertelement <4 x i32> poison, i32 %336, i64 0, !dbg !71
  %424 = insertelement <4 x i32> %423, i32 %337, i64 1, !dbg !71
  %425 = insertelement <4 x i32> %424, i32 %338, i64 2, !dbg !71
  %426 = insertelement <4 x i32> %425, i32 %339, i64 3, !dbg !71
  %427 = bitcast <4 x i32> %426 to <4 x float>, !dbg !71
  %428 = fcmp olt <4 x float> %422, %427, !dbg !109
  %429 = bitcast i32 %336 to float, !dbg !111
  %430 = fcmp uno float %429, 0.000000e+00, !dbg !111
  %431 = bitcast i32 %337 to float, !dbg !111
  %432 = fcmp uno float %431, 0.000000e+00, !dbg !111
  %433 = bitcast i32 %338 to float, !dbg !111
  %434 = fcmp uno float %433, 0.000000e+00, !dbg !111
  %435 = bitcast i32 %339 to float, !dbg !111
  %436 = fcmp uno float %435, 0.000000e+00, !dbg !111
  %437 = extractelement <4 x i1> %428, i64 0, !dbg !112
  %438 = or i1 %437, %430, !dbg !112
  %439 = extractelement <4 x i1> %428, i64 1, !dbg !112
  %440 = or i1 %439, %432, !dbg !112
  %441 = extractelement <4 x i1> %428, i64 2, !dbg !112
  %442 = or i1 %441, %434, !dbg !112
  %443 = extractelement <4 x i1> %428, i64 3, !dbg !112
  %444 = or i1 %443, %436, !dbg !112
  %445 = zext <4 x i1> %365 to <4 x i8>, !dbg !113
  %446 = select <4 x i1> %374, <4 x i8> splat (i8 2), <4 x i8> %445, !dbg !114
  %447 = select <4 x i1> %383, <4 x i8> splat (i8 3), <4 x i8> %446, !dbg !115
  %448 = select <4 x i1> %392, <4 x i8> splat (i8 4), <4 x i8> %447, !dbg !116
  %449 = select <4 x i1> %401, <4 x i8> splat (i8 5), <4 x i8> %448, !dbg !117
  %450 = select <4 x i1> %410, <4 x i8> splat (i8 6), <4 x i8> %449, !dbg !118
  %451 = select <4 x i1> %419, <4 x i8> splat (i8 7), <4 x i8> %450, !dbg !119
  %452 = select <4 x i1> %428, <4 x i8> splat (i8 8), <4 x i8> %451, !dbg !120
  %453 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !34
  %454 = insertelement <4 x i32> %453, i32 %70, i64 1, !dbg !34
  %455 = insertelement <4 x i32> %454, i32 %71, i64 2, !dbg !34
  %456 = insertelement <4 x i32> %455, i32 %72, i64 3, !dbg !34
  %457 = bitcast <4 x i32> %456 to <4 x float>, !dbg !34
  %458 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !41
  %459 = insertelement <4 x i32> %458, i32 %106, i64 1, !dbg !41
  %460 = insertelement <4 x i32> %459, i32 %107, i64 2, !dbg !41
  %461 = insertelement <4 x i32> %460, i32 %108, i64 3, !dbg !41
  %462 = bitcast <4 x i32> %461 to <4 x float>, !dbg !41
  %463 = fcmp ogt <4 x float> %462, %457, !dbg !72
  %464 = fcmp uno <4 x float> %462, zeroinitializer, !dbg !76
  %465 = or <4 x i1> %463, %464, !dbg !77
  %.v39 = select <4 x i1> %465, <4 x i32> %461, <4 x i32> %456, !dbg !78
  %466 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !78
  %467 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !45
  %468 = insertelement <4 x i32> %467, i32 %139, i64 1, !dbg !45
  %469 = insertelement <4 x i32> %468, i32 %140, i64 2, !dbg !45
  %470 = insertelement <4 x i32> %469, i32 %141, i64 3, !dbg !45
  %471 = bitcast <4 x i32> %470 to <4 x float>, !dbg !45
  %472 = fcmp olt <4 x float> %466, %471, !dbg !79
  %473 = fcmp uno <4 x float> %471, zeroinitializer, !dbg !81
  %474 = or <4 x i1> %472, %473, !dbg !82
  %.v40 = select <4 x i1> %474, <4 x i32> %470, <4 x i32> %.v39, !dbg !83
  %475 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !83
  %476 = insertelement <4 x i32> poison, i32 %174, i64 0, !dbg !51
  %477 = insertelement <4 x i32> %476, i32 %175, i64 1, !dbg !51
  %478 = insertelement <4 x i32> %477, i32 %176, i64 2, !dbg !51
  %479 = insertelement <4 x i32> %478, i32 %177, i64 3, !dbg !51
  %480 = bitcast <4 x i32> %479 to <4 x float>, !dbg !51
  %481 = fcmp olt <4 x float> %475, %480, !dbg !84
  %482 = fcmp uno <4 x float> %480, zeroinitializer, !dbg !86
  %483 = or <4 x i1> %481, %482, !dbg !87
  %.v41 = select <4 x i1> %483, <4 x i32> %479, <4 x i32> %.v40, !dbg !88
  %484 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !88
  %485 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !55
  %486 = insertelement <4 x i32> %485, i32 %210, i64 1, !dbg !55
  %487 = insertelement <4 x i32> %486, i32 %211, i64 2, !dbg !55
  %488 = insertelement <4 x i32> %487, i32 %212, i64 3, !dbg !55
  %489 = bitcast <4 x i32> %488 to <4 x float>, !dbg !55
  %490 = fcmp olt <4 x float> %484, %489, !dbg !89
  %491 = fcmp uno <4 x float> %489, zeroinitializer, !dbg !91
  %492 = or <4 x i1> %490, %491, !dbg !92
  %.v42 = select <4 x i1> %492, <4 x i32> %488, <4 x i32> %.v41, !dbg !93
  %493 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !93
  %494 = insertelement <4 x i32> poison, i32 %242, i64 0, !dbg !59
  %495 = insertelement <4 x i32> %494, i32 %243, i64 1, !dbg !59
  %496 = insertelement <4 x i32> %495, i32 %244, i64 2, !dbg !59
  %497 = insertelement <4 x i32> %496, i32 %245, i64 3, !dbg !59
  %498 = bitcast <4 x i32> %497 to <4 x float>, !dbg !59
  %499 = fcmp olt <4 x float> %493, %498, !dbg !94
  %500 = fcmp uno <4 x float> %498, zeroinitializer, !dbg !96
  %501 = or <4 x i1> %499, %500, !dbg !97
  %.v43 = select <4 x i1> %501, <4 x i32> %497, <4 x i32> %.v42, !dbg !98
  %502 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !98
  %503 = insertelement <4 x i32> poison, i32 %275, i64 0, !dbg !63
  %504 = insertelement <4 x i32> %503, i32 %276, i64 1, !dbg !63
  %505 = insertelement <4 x i32> %504, i32 %277, i64 2, !dbg !63
  %506 = insertelement <4 x i32> %505, i32 %278, i64 3, !dbg !63
  %507 = bitcast <4 x i32> %506 to <4 x float>, !dbg !63
  %508 = fcmp olt <4 x float> %502, %507, !dbg !99
  %509 = fcmp uno <4 x float> %507, zeroinitializer, !dbg !101
  %510 = or <4 x i1> %508, %509, !dbg !102
  %.v44 = select <4 x i1> %510, <4 x i32> %506, <4 x i32> %.v43, !dbg !103
  %511 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !103
  %512 = insertelement <4 x i32> poison, i32 %308, i64 0, !dbg !67
  %513 = insertelement <4 x i32> %512, i32 %309, i64 1, !dbg !67
  %514 = insertelement <4 x i32> %513, i32 %310, i64 2, !dbg !67
  %515 = insertelement <4 x i32> %514, i32 %311, i64 3, !dbg !67
  %516 = bitcast <4 x i32> %515 to <4 x float>, !dbg !67
  %517 = fcmp olt <4 x float> %511, %516, !dbg !104
  %518 = fcmp uno <4 x float> %516, zeroinitializer, !dbg !106
  %519 = or <4 x i1> %517, %518, !dbg !107
  %.v45 = select <4 x i1> %519, <4 x i32> %515, <4 x i32> %.v44, !dbg !108
  %520 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !108
  %521 = insertelement <4 x i32> poison, i32 %341, i64 0, !dbg !71
  %522 = insertelement <4 x i32> %521, i32 %342, i64 1, !dbg !71
  %523 = insertelement <4 x i32> %522, i32 %343, i64 2, !dbg !71
  %524 = insertelement <4 x i32> %523, i32 %344, i64 3, !dbg !71
  %525 = bitcast <4 x i32> %524 to <4 x float>, !dbg !71
  %526 = fcmp olt <4 x float> %520, %525, !dbg !109
  %527 = bitcast i32 %341 to float, !dbg !111
  %528 = fcmp uno float %527, 0.000000e+00, !dbg !111
  %529 = bitcast i32 %342 to float, !dbg !111
  %530 = fcmp uno float %529, 0.000000e+00, !dbg !111
  %531 = bitcast i32 %343 to float, !dbg !111
  %532 = fcmp uno float %531, 0.000000e+00, !dbg !111
  %533 = bitcast i32 %344 to float, !dbg !111
  %534 = fcmp uno float %533, 0.000000e+00, !dbg !111
  %535 = extractelement <4 x i1> %526, i64 0, !dbg !112
  %536 = or i1 %535, %528, !dbg !112
  %537 = extractelement <4 x i1> %526, i64 1, !dbg !112
  %538 = or i1 %537, %530, !dbg !112
  %539 = extractelement <4 x i1> %526, i64 2, !dbg !112
  %540 = or i1 %539, %532, !dbg !112
  %541 = extractelement <4 x i1> %526, i64 3, !dbg !112
  %542 = or i1 %541, %534, !dbg !112
  %543 = zext <4 x i1> %463 to <4 x i8>, !dbg !113
  %544 = select <4 x i1> %472, <4 x i8> splat (i8 2), <4 x i8> %543, !dbg !114
  %545 = select <4 x i1> %481, <4 x i8> splat (i8 3), <4 x i8> %544, !dbg !115
  %546 = select <4 x i1> %490, <4 x i8> splat (i8 4), <4 x i8> %545, !dbg !116
  %547 = select <4 x i1> %499, <4 x i8> splat (i8 5), <4 x i8> %546, !dbg !117
  %548 = select <4 x i1> %508, <4 x i8> splat (i8 6), <4 x i8> %547, !dbg !118
  %549 = select <4 x i1> %517, <4 x i8> splat (i8 7), <4 x i8> %548, !dbg !119
  %550 = select <4 x i1> %526, <4 x i8> splat (i8 8), <4 x i8> %549, !dbg !120
  %551 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !34
  %552 = insertelement <4 x i32> %551, i32 %75, i64 1, !dbg !34
  %553 = insertelement <4 x i32> %552, i32 %76, i64 2, !dbg !34
  %554 = insertelement <4 x i32> %553, i32 %77, i64 3, !dbg !34
  %555 = bitcast <4 x i32> %554 to <4 x float>, !dbg !34
  %556 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !41
  %557 = insertelement <4 x i32> %556, i32 %111, i64 1, !dbg !41
  %558 = insertelement <4 x i32> %557, i32 %112, i64 2, !dbg !41
  %559 = insertelement <4 x i32> %558, i32 %113, i64 3, !dbg !41
  %560 = bitcast <4 x i32> %559 to <4 x float>, !dbg !41
  %561 = fcmp ogt <4 x float> %560, %555, !dbg !72
  %562 = fcmp uno <4 x float> %560, zeroinitializer, !dbg !76
  %563 = or <4 x i1> %561, %562, !dbg !77
  %.v46 = select <4 x i1> %563, <4 x i32> %559, <4 x i32> %554, !dbg !78
  %564 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !78
  %565 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !45
  %566 = insertelement <4 x i32> %565, i32 %144, i64 1, !dbg !45
  %567 = insertelement <4 x i32> %566, i32 %145, i64 2, !dbg !45
  %568 = insertelement <4 x i32> %567, i32 %146, i64 3, !dbg !45
  %569 = bitcast <4 x i32> %568 to <4 x float>, !dbg !45
  %570 = fcmp olt <4 x float> %564, %569, !dbg !79
  %571 = fcmp uno <4 x float> %569, zeroinitializer, !dbg !81
  %572 = or <4 x i1> %570, %571, !dbg !82
  %.v47 = select <4 x i1> %572, <4 x i32> %568, <4 x i32> %.v46, !dbg !83
  %573 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !83
  %574 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !51
  %575 = insertelement <4 x i32> %574, i32 %180, i64 1, !dbg !51
  %576 = insertelement <4 x i32> %575, i32 %181, i64 2, !dbg !51
  %577 = insertelement <4 x i32> %576, i32 %182, i64 3, !dbg !51
  %578 = bitcast <4 x i32> %577 to <4 x float>, !dbg !51
  %579 = fcmp olt <4 x float> %573, %578, !dbg !84
  %580 = fcmp uno <4 x float> %578, zeroinitializer, !dbg !86
  %581 = or <4 x i1> %579, %580, !dbg !87
  %.v48 = select <4 x i1> %581, <4 x i32> %577, <4 x i32> %.v47, !dbg !88
  %582 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !88
  %583 = insertelement <4 x i32> poison, i32 %214, i64 0, !dbg !55
  %584 = insertelement <4 x i32> %583, i32 %215, i64 1, !dbg !55
  %585 = insertelement <4 x i32> %584, i32 %216, i64 2, !dbg !55
  %586 = insertelement <4 x i32> %585, i32 %217, i64 3, !dbg !55
  %587 = bitcast <4 x i32> %586 to <4 x float>, !dbg !55
  %588 = fcmp olt <4 x float> %582, %587, !dbg !89
  %589 = fcmp uno <4 x float> %587, zeroinitializer, !dbg !91
  %590 = or <4 x i1> %588, %589, !dbg !92
  %.v49 = select <4 x i1> %590, <4 x i32> %586, <4 x i32> %.v48, !dbg !93
  %591 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !93
  %592 = insertelement <4 x i32> poison, i32 %247, i64 0, !dbg !59
  %593 = insertelement <4 x i32> %592, i32 %248, i64 1, !dbg !59
  %594 = insertelement <4 x i32> %593, i32 %249, i64 2, !dbg !59
  %595 = insertelement <4 x i32> %594, i32 %250, i64 3, !dbg !59
  %596 = bitcast <4 x i32> %595 to <4 x float>, !dbg !59
  %597 = fcmp olt <4 x float> %591, %596, !dbg !94
  %598 = fcmp uno <4 x float> %596, zeroinitializer, !dbg !96
  %599 = or <4 x i1> %597, %598, !dbg !97
  %.v50 = select <4 x i1> %599, <4 x i32> %595, <4 x i32> %.v49, !dbg !98
  %600 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !98
  %601 = insertelement <4 x i32> poison, i32 %280, i64 0, !dbg !63
  %602 = insertelement <4 x i32> %601, i32 %281, i64 1, !dbg !63
  %603 = insertelement <4 x i32> %602, i32 %282, i64 2, !dbg !63
  %604 = insertelement <4 x i32> %603, i32 %283, i64 3, !dbg !63
  %605 = bitcast <4 x i32> %604 to <4 x float>, !dbg !63
  %606 = fcmp olt <4 x float> %600, %605, !dbg !99
  %607 = fcmp uno <4 x float> %605, zeroinitializer, !dbg !101
  %608 = or <4 x i1> %606, %607, !dbg !102
  %.v51 = select <4 x i1> %608, <4 x i32> %604, <4 x i32> %.v50, !dbg !103
  %609 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !103
  %610 = insertelement <4 x i32> poison, i32 %313, i64 0, !dbg !67
  %611 = insertelement <4 x i32> %610, i32 %314, i64 1, !dbg !67
  %612 = insertelement <4 x i32> %611, i32 %315, i64 2, !dbg !67
  %613 = insertelement <4 x i32> %612, i32 %316, i64 3, !dbg !67
  %614 = bitcast <4 x i32> %613 to <4 x float>, !dbg !67
  %615 = fcmp olt <4 x float> %609, %614, !dbg !104
  %616 = fcmp uno <4 x float> %614, zeroinitializer, !dbg !106
  %617 = or <4 x i1> %615, %616, !dbg !107
  %.v52 = select <4 x i1> %617, <4 x i32> %613, <4 x i32> %.v51, !dbg !108
  %618 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !108
  %619 = insertelement <4 x i32> poison, i32 %346, i64 0, !dbg !71
  %620 = insertelement <4 x i32> %619, i32 %347, i64 1, !dbg !71
  %621 = insertelement <4 x i32> %620, i32 %348, i64 2, !dbg !71
  %622 = insertelement <4 x i32> %621, i32 %349, i64 3, !dbg !71
  %623 = bitcast <4 x i32> %622 to <4 x float>, !dbg !71
  %624 = fcmp olt <4 x float> %618, %623, !dbg !109
  %625 = bitcast i32 %346 to float, !dbg !111
  %626 = fcmp uno float %625, 0.000000e+00, !dbg !111
  %627 = bitcast i32 %347 to float, !dbg !111
  %628 = fcmp uno float %627, 0.000000e+00, !dbg !111
  %629 = bitcast i32 %348 to float, !dbg !111
  %630 = fcmp uno float %629, 0.000000e+00, !dbg !111
  %631 = bitcast i32 %349 to float, !dbg !111
  %632 = fcmp uno float %631, 0.000000e+00, !dbg !111
  %633 = extractelement <4 x i1> %624, i64 0, !dbg !112
  %634 = or i1 %633, %626, !dbg !112
  %635 = extractelement <4 x i1> %624, i64 1, !dbg !112
  %636 = or i1 %635, %628, !dbg !112
  %637 = extractelement <4 x i1> %624, i64 2, !dbg !112
  %638 = or i1 %637, %630, !dbg !112
  %639 = extractelement <4 x i1> %624, i64 3, !dbg !112
  %640 = or i1 %639, %632, !dbg !112
  %641 = zext <4 x i1> %561 to <4 x i8>, !dbg !113
  %642 = select <4 x i1> %570, <4 x i8> splat (i8 2), <4 x i8> %641, !dbg !114
  %643 = select <4 x i1> %579, <4 x i8> splat (i8 3), <4 x i8> %642, !dbg !115
  %644 = select <4 x i1> %588, <4 x i8> splat (i8 4), <4 x i8> %643, !dbg !116
  %645 = select <4 x i1> %597, <4 x i8> splat (i8 5), <4 x i8> %644, !dbg !117
  %646 = select <4 x i1> %606, <4 x i8> splat (i8 6), <4 x i8> %645, !dbg !118
  %647 = select <4 x i1> %615, <4 x i8> splat (i8 7), <4 x i8> %646, !dbg !119
  %648 = select <4 x i1> %624, <4 x i8> splat (i8 8), <4 x i8> %647, !dbg !120
  %649 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !34
  %650 = insertelement <4 x i32> %649, i32 %80, i64 1, !dbg !34
  %651 = insertelement <4 x i32> %650, i32 %81, i64 2, !dbg !34
  %652 = insertelement <4 x i32> %651, i32 %82, i64 3, !dbg !34
  %653 = bitcast <4 x i32> %652 to <4 x float>, !dbg !34
  %654 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !41
  %655 = insertelement <4 x i32> %654, i32 %116, i64 1, !dbg !41
  %656 = insertelement <4 x i32> %655, i32 %117, i64 2, !dbg !41
  %657 = insertelement <4 x i32> %656, i32 %118, i64 3, !dbg !41
  %658 = bitcast <4 x i32> %657 to <4 x float>, !dbg !41
  %659 = fcmp ogt <4 x float> %658, %653, !dbg !72
  %660 = fcmp uno <4 x float> %658, zeroinitializer, !dbg !76
  %661 = or <4 x i1> %659, %660, !dbg !77
  %.v53 = select <4 x i1> %661, <4 x i32> %657, <4 x i32> %652, !dbg !78
  %662 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !78
  %663 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !45
  %664 = insertelement <4 x i32> %663, i32 %149, i64 1, !dbg !45
  %665 = insertelement <4 x i32> %664, i32 %150, i64 2, !dbg !45
  %666 = insertelement <4 x i32> %665, i32 %151, i64 3, !dbg !45
  %667 = bitcast <4 x i32> %666 to <4 x float>, !dbg !45
  %668 = fcmp olt <4 x float> %662, %667, !dbg !79
  %669 = fcmp uno <4 x float> %667, zeroinitializer, !dbg !81
  %670 = or <4 x i1> %668, %669, !dbg !82
  %.v54 = select <4 x i1> %670, <4 x i32> %666, <4 x i32> %.v53, !dbg !83
  %671 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !83
  %672 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !51
  %673 = insertelement <4 x i32> %672, i32 %185, i64 1, !dbg !51
  %674 = insertelement <4 x i32> %673, i32 %186, i64 2, !dbg !51
  %675 = insertelement <4 x i32> %674, i32 %187, i64 3, !dbg !51
  %676 = bitcast <4 x i32> %675 to <4 x float>, !dbg !51
  %677 = fcmp olt <4 x float> %671, %676, !dbg !84
  %678 = fcmp uno <4 x float> %676, zeroinitializer, !dbg !86
  %679 = or <4 x i1> %677, %678, !dbg !87
  %.v55 = select <4 x i1> %679, <4 x i32> %675, <4 x i32> %.v54, !dbg !88
  %680 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !88
  %681 = insertelement <4 x i32> poison, i32 %219, i64 0, !dbg !55
  %682 = insertelement <4 x i32> %681, i32 %220, i64 1, !dbg !55
  %683 = insertelement <4 x i32> %682, i32 %221, i64 2, !dbg !55
  %684 = insertelement <4 x i32> %683, i32 %222, i64 3, !dbg !55
  %685 = bitcast <4 x i32> %684 to <4 x float>, !dbg !55
  %686 = fcmp olt <4 x float> %680, %685, !dbg !89
  %687 = fcmp uno <4 x float> %685, zeroinitializer, !dbg !91
  %688 = or <4 x i1> %686, %687, !dbg !92
  %.v56 = select <4 x i1> %688, <4 x i32> %684, <4 x i32> %.v55, !dbg !93
  %689 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !93
  %690 = insertelement <4 x i32> poison, i32 %252, i64 0, !dbg !59
  %691 = insertelement <4 x i32> %690, i32 %253, i64 1, !dbg !59
  %692 = insertelement <4 x i32> %691, i32 %254, i64 2, !dbg !59
  %693 = insertelement <4 x i32> %692, i32 %255, i64 3, !dbg !59
  %694 = bitcast <4 x i32> %693 to <4 x float>, !dbg !59
  %695 = fcmp olt <4 x float> %689, %694, !dbg !94
  %696 = fcmp uno <4 x float> %694, zeroinitializer, !dbg !96
  %697 = or <4 x i1> %695, %696, !dbg !97
  %.v57 = select <4 x i1> %697, <4 x i32> %693, <4 x i32> %.v56, !dbg !98
  %698 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !98
  %699 = insertelement <4 x i32> poison, i32 %285, i64 0, !dbg !63
  %700 = insertelement <4 x i32> %699, i32 %286, i64 1, !dbg !63
  %701 = insertelement <4 x i32> %700, i32 %287, i64 2, !dbg !63
  %702 = insertelement <4 x i32> %701, i32 %288, i64 3, !dbg !63
  %703 = bitcast <4 x i32> %702 to <4 x float>, !dbg !63
  %704 = fcmp olt <4 x float> %698, %703, !dbg !99
  %705 = fcmp uno <4 x float> %703, zeroinitializer, !dbg !101
  %706 = or <4 x i1> %704, %705, !dbg !102
  %.v58 = select <4 x i1> %706, <4 x i32> %702, <4 x i32> %.v57, !dbg !103
  %707 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !103
  %708 = insertelement <4 x i32> poison, i32 %318, i64 0, !dbg !67
  %709 = insertelement <4 x i32> %708, i32 %319, i64 1, !dbg !67
  %710 = insertelement <4 x i32> %709, i32 %320, i64 2, !dbg !67
  %711 = insertelement <4 x i32> %710, i32 %321, i64 3, !dbg !67
  %712 = bitcast <4 x i32> %711 to <4 x float>, !dbg !67
  %713 = fcmp olt <4 x float> %707, %712, !dbg !104
  %714 = fcmp uno <4 x float> %712, zeroinitializer, !dbg !106
  %715 = or <4 x i1> %713, %714, !dbg !107
  %.v59 = select <4 x i1> %715, <4 x i32> %711, <4 x i32> %.v58, !dbg !108
  %716 = bitcast <4 x i32> %.v59 to <4 x float>, !dbg !108
  %717 = insertelement <4 x i32> poison, i32 %351, i64 0, !dbg !71
  %718 = insertelement <4 x i32> %717, i32 %352, i64 1, !dbg !71
  %719 = insertelement <4 x i32> %718, i32 %353, i64 2, !dbg !71
  %720 = insertelement <4 x i32> %719, i32 %354, i64 3, !dbg !71
  %721 = bitcast <4 x i32> %720 to <4 x float>, !dbg !71
  %722 = fcmp olt <4 x float> %716, %721, !dbg !109
  %723 = bitcast i32 %351 to float, !dbg !111
  %724 = fcmp uno float %723, 0.000000e+00, !dbg !111
  %725 = bitcast i32 %352 to float, !dbg !111
  %726 = fcmp uno float %725, 0.000000e+00, !dbg !111
  %727 = bitcast i32 %353 to float, !dbg !111
  %728 = fcmp uno float %727, 0.000000e+00, !dbg !111
  %729 = bitcast i32 %354 to float, !dbg !111
  %730 = fcmp uno float %729, 0.000000e+00, !dbg !111
  %731 = extractelement <4 x i1> %722, i64 0, !dbg !112
  %732 = or i1 %731, %724, !dbg !112
  %733 = extractelement <4 x i1> %722, i64 1, !dbg !112
  %734 = or i1 %733, %726, !dbg !112
  %735 = extractelement <4 x i1> %722, i64 2, !dbg !112
  %736 = or i1 %735, %728, !dbg !112
  %737 = extractelement <4 x i1> %722, i64 3, !dbg !112
  %738 = or i1 %737, %730, !dbg !112
  %739 = zext <4 x i1> %659 to <4 x i8>, !dbg !113
  %740 = select <4 x i1> %668, <4 x i8> splat (i8 2), <4 x i8> %739, !dbg !114
  %741 = select <4 x i1> %677, <4 x i8> splat (i8 3), <4 x i8> %740, !dbg !115
  %742 = select <4 x i1> %686, <4 x i8> splat (i8 4), <4 x i8> %741, !dbg !116
  %743 = select <4 x i1> %695, <4 x i8> splat (i8 5), <4 x i8> %742, !dbg !117
  %744 = select <4 x i1> %704, <4 x i8> splat (i8 6), <4 x i8> %743, !dbg !118
  %745 = select <4 x i1> %713, <4 x i8> splat (i8 7), <4 x i8> %744, !dbg !119
  %746 = select <4 x i1> %722, <4 x i8> splat (i8 8), <4 x i8> %745, !dbg !120
  %747 = shl i32 %25, 8, !dbg !121
  %748 = shl i32 %26, 8, !dbg !121
  %749 = shl i32 %27, 8, !dbg !121
  %750 = shl i32 %28, 8, !dbg !121
  %751 = shl i32 %35, 16, !dbg !122
  %752 = add i32 %751, %.decomposed, !dbg !123
  %753 = add i32 %752, %747, !dbg !124
  %754 = add i32 %752, %748, !dbg !124
  %755 = add i32 %752, %749, !dbg !124
  %756 = add i32 %752, %750, !dbg !124
  %757 = sext i32 %753 to i64, !dbg !125
  %758 = getelementptr float, ptr addrspace(1) %1, i64 %757, !dbg !125
  %759 = sext i32 %754 to i64, !dbg !125
  %760 = getelementptr float, ptr addrspace(1) %1, i64 %759, !dbg !125
  %761 = sext i32 %755 to i64, !dbg !125
  %762 = getelementptr float, ptr addrspace(1) %1, i64 %761, !dbg !125
  %763 = sext i32 %756 to i64, !dbg !125
  %764 = getelementptr float, ptr addrspace(1) %1, i64 %763, !dbg !125
  %765 = shl i32 %8, 10, !dbg !126
  %766 = and i32 %765, 3072, !dbg !126
  %767 = or disjoint i32 %766, %10, !dbg !126
  %768 = and i32 %11, 1020, !dbg !126
  %769 = lshr exact i32 %766, 2, !dbg !126
  %770 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %769, !dbg !126
  %771 = getelementptr float, ptr addrspace(3) %770, i32 %767, !dbg !126
  %772 = extractelement <4 x i32> %.v38, i64 0, !dbg !126
  %773 = select i1 %438, i32 %336, i32 %772, !dbg !127
  %774 = insertelement <1 x i32> poison, i32 %773, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %771, <1 x i32> %774, i1 true) #2, !dbg !126
  %775 = or disjoint i32 %767, 64, !dbg !126
  %776 = lshr i32 %775, 4, !dbg !126
  %777 = and i32 %776, 196, !dbg !126
  %778 = getelementptr float, ptr addrspace(3) @global_smem, i32 %777, !dbg !126
  %779 = getelementptr float, ptr addrspace(3) %778, i32 %775, !dbg !126
  %780 = extractelement <4 x i32> %.v38, i64 1, !dbg !126
  %781 = select i1 %440, i32 %337, i32 %780, !dbg !127
  %782 = insertelement <1 x i32> poison, i32 %781, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %779, <1 x i32> %782, i1 true) #2, !dbg !126
  %783 = or disjoint i32 %767, 128, !dbg !126
  %784 = lshr i32 %783, 4, !dbg !126
  %785 = and i32 %784, 200, !dbg !126
  %786 = getelementptr float, ptr addrspace(3) @global_smem, i32 %785, !dbg !126
  %787 = getelementptr float, ptr addrspace(3) %786, i32 %783, !dbg !126
  %788 = extractelement <4 x i32> %.v38, i64 2, !dbg !126
  %789 = select i1 %442, i32 %338, i32 %788, !dbg !127
  %790 = insertelement <1 x i32> poison, i32 %789, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %787, <1 x i32> %790, i1 true) #2, !dbg !126
  %791 = or disjoint i32 %767, 192, !dbg !126
  %792 = lshr i32 %791, 4, !dbg !126
  %793 = and i32 %792, 204, !dbg !126
  %794 = getelementptr float, ptr addrspace(3) @global_smem, i32 %793, !dbg !126
  %795 = getelementptr float, ptr addrspace(3) %794, i32 %791, !dbg !126
  %796 = extractelement <4 x i32> %.v38, i64 3, !dbg !126
  %797 = select i1 %444, i32 %339, i32 %796, !dbg !127
  %798 = insertelement <1 x i32> poison, i32 %797, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %795, <1 x i32> %798, i1 true) #2, !dbg !126
  %799 = or disjoint i32 %767, 256, !dbg !126
  %800 = lshr i32 %799, 4, !dbg !126
  %801 = and i32 %800, 208, !dbg !126
  %802 = getelementptr float, ptr addrspace(3) @global_smem, i32 %801, !dbg !126
  %803 = getelementptr float, ptr addrspace(3) %802, i32 %799, !dbg !126
  %804 = extractelement <4 x i32> %.v45, i64 0, !dbg !126
  %805 = select i1 %536, i32 %341, i32 %804, !dbg !127
  %806 = insertelement <1 x i32> poison, i32 %805, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %803, <1 x i32> %806, i1 true) #2, !dbg !126
  %807 = or disjoint i32 %767, 320, !dbg !126
  %808 = lshr i32 %807, 4, !dbg !126
  %809 = and i32 %808, 212, !dbg !126
  %810 = getelementptr float, ptr addrspace(3) @global_smem, i32 %809, !dbg !126
  %811 = getelementptr float, ptr addrspace(3) %810, i32 %807, !dbg !126
  %812 = extractelement <4 x i32> %.v45, i64 1, !dbg !126
  %813 = select i1 %538, i32 %342, i32 %812, !dbg !127
  %814 = insertelement <1 x i32> poison, i32 %813, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %811, <1 x i32> %814, i1 true) #2, !dbg !126
  %815 = or disjoint i32 %767, 384, !dbg !126
  %816 = lshr i32 %815, 4, !dbg !126
  %817 = and i32 %816, 216, !dbg !126
  %818 = getelementptr float, ptr addrspace(3) @global_smem, i32 %817, !dbg !126
  %819 = getelementptr float, ptr addrspace(3) %818, i32 %815, !dbg !126
  %820 = extractelement <4 x i32> %.v45, i64 2, !dbg !126
  %821 = select i1 %540, i32 %343, i32 %820, !dbg !127
  %822 = insertelement <1 x i32> poison, i32 %821, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %819, <1 x i32> %822, i1 true) #2, !dbg !126
  %823 = or disjoint i32 %767, 448, !dbg !126
  %824 = lshr i32 %823, 4, !dbg !126
  %825 = and i32 %824, 220, !dbg !126
  %826 = getelementptr float, ptr addrspace(3) @global_smem, i32 %825, !dbg !126
  %827 = getelementptr float, ptr addrspace(3) %826, i32 %823, !dbg !126
  %828 = extractelement <4 x i32> %.v45, i64 3, !dbg !126
  %829 = select i1 %542, i32 %344, i32 %828, !dbg !127
  %830 = insertelement <1 x i32> poison, i32 %829, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %827, <1 x i32> %830, i1 true) #2, !dbg !126
  %831 = or disjoint i32 %767, 512, !dbg !126
  %832 = lshr i32 %831, 4, !dbg !126
  %833 = and i32 %832, 224, !dbg !126
  %834 = getelementptr float, ptr addrspace(3) @global_smem, i32 %833, !dbg !126
  %835 = getelementptr float, ptr addrspace(3) %834, i32 %831, !dbg !126
  %836 = extractelement <4 x i32> %.v52, i64 0, !dbg !126
  %837 = select i1 %634, i32 %346, i32 %836, !dbg !127
  %838 = insertelement <1 x i32> poison, i32 %837, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %835, <1 x i32> %838, i1 true) #2, !dbg !126
  %839 = or disjoint i32 %767, 576, !dbg !126
  %840 = lshr i32 %839, 4, !dbg !126
  %841 = and i32 %840, 228, !dbg !126
  %842 = getelementptr float, ptr addrspace(3) @global_smem, i32 %841, !dbg !126
  %843 = getelementptr float, ptr addrspace(3) %842, i32 %839, !dbg !126
  %844 = extractelement <4 x i32> %.v52, i64 1, !dbg !126
  %845 = select i1 %636, i32 %347, i32 %844, !dbg !127
  %846 = insertelement <1 x i32> poison, i32 %845, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %843, <1 x i32> %846, i1 true) #2, !dbg !126
  %847 = or disjoint i32 %767, 640, !dbg !126
  %848 = lshr i32 %847, 4, !dbg !126
  %849 = and i32 %848, 232, !dbg !126
  %850 = getelementptr float, ptr addrspace(3) @global_smem, i32 %849, !dbg !126
  %851 = getelementptr float, ptr addrspace(3) %850, i32 %847, !dbg !126
  %852 = extractelement <4 x i32> %.v52, i64 2, !dbg !126
  %853 = select i1 %638, i32 %348, i32 %852, !dbg !127
  %854 = insertelement <1 x i32> poison, i32 %853, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %851, <1 x i32> %854, i1 true) #2, !dbg !126
  %855 = or disjoint i32 %767, 704, !dbg !126
  %856 = lshr i32 %855, 4, !dbg !126
  %857 = and i32 %856, 236, !dbg !126
  %858 = getelementptr float, ptr addrspace(3) @global_smem, i32 %857, !dbg !126
  %859 = getelementptr float, ptr addrspace(3) %858, i32 %855, !dbg !126
  %860 = extractelement <4 x i32> %.v52, i64 3, !dbg !126
  %861 = select i1 %640, i32 %349, i32 %860, !dbg !127
  %862 = insertelement <1 x i32> poison, i32 %861, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %859, <1 x i32> %862, i1 true) #2, !dbg !126
  %863 = or disjoint i32 %767, 768, !dbg !126
  %864 = lshr i32 %863, 4, !dbg !126
  %865 = and i32 %864, 240, !dbg !126
  %866 = getelementptr float, ptr addrspace(3) @global_smem, i32 %865, !dbg !126
  %867 = getelementptr float, ptr addrspace(3) %866, i32 %863, !dbg !126
  %868 = extractelement <4 x i32> %.v59, i64 0, !dbg !126
  %869 = select i1 %732, i32 %351, i32 %868, !dbg !127
  %870 = insertelement <1 x i32> poison, i32 %869, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %867, <1 x i32> %870, i1 true) #2, !dbg !126
  %871 = or disjoint i32 %767, 832, !dbg !126
  %872 = lshr i32 %871, 4, !dbg !126
  %873 = and i32 %872, 244, !dbg !126
  %874 = getelementptr float, ptr addrspace(3) @global_smem, i32 %873, !dbg !126
  %875 = getelementptr float, ptr addrspace(3) %874, i32 %871, !dbg !126
  %876 = extractelement <4 x i32> %.v59, i64 1, !dbg !126
  %877 = select i1 %734, i32 %352, i32 %876, !dbg !127
  %878 = insertelement <1 x i32> poison, i32 %877, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %875, <1 x i32> %878, i1 true) #2, !dbg !126
  %879 = or disjoint i32 %767, 896, !dbg !126
  %880 = lshr i32 %879, 4, !dbg !126
  %881 = and i32 %880, 248, !dbg !126
  %882 = getelementptr float, ptr addrspace(3) @global_smem, i32 %881, !dbg !126
  %883 = getelementptr float, ptr addrspace(3) %882, i32 %879, !dbg !126
  %884 = extractelement <4 x i32> %.v59, i64 2, !dbg !126
  %885 = select i1 %736, i32 %353, i32 %884, !dbg !127
  %886 = insertelement <1 x i32> poison, i32 %885, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %883, <1 x i32> %886, i1 true) #2, !dbg !126
  %887 = or disjoint i32 %767, 960, !dbg !126
  %888 = lshr i32 %887, 4, !dbg !126
  %889 = and i32 %888, 252, !dbg !126
  %890 = getelementptr float, ptr addrspace(3) @global_smem, i32 %889, !dbg !126
  %891 = getelementptr float, ptr addrspace(3) %890, i32 %887, !dbg !126
  %892 = extractelement <4 x i32> %.v59, i64 3, !dbg !126
  %893 = select i1 %738, i32 %354, i32 %892, !dbg !127
  %894 = insertelement <1 x i32> poison, i32 %893, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %891, <1 x i32> %894, i1 true) #2, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %895 = lshr i32 %11, 4, !dbg !126
  %896 = and i32 %895, 60, !dbg !126
  %897 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %896, !dbg !126
  %898 = getelementptr inbounds float, ptr addrspace(3) %897, i32 %768, !dbg !126
  %899 = or disjoint i32 %768, 1024, !dbg !126
  %900 = lshr i32 %899, 4, !dbg !126
  %901 = and i32 %900, 124, !dbg !126
  %902 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %901, !dbg !126
  %903 = getelementptr inbounds float, ptr addrspace(3) %902, i32 %899, !dbg !126
  %904 = load <4 x i32>, ptr addrspace(3) %903, align 16, !dbg !126
  %905 = or disjoint i32 %768, 2048, !dbg !126
  %906 = lshr i32 %905, 4, !dbg !126
  %907 = and i32 %906, 188, !dbg !126
  %908 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %907, !dbg !126
  %909 = getelementptr inbounds float, ptr addrspace(3) %908, i32 %905, !dbg !126
  %910 = load <4 x i32>, ptr addrspace(3) %909, align 16, !dbg !126
  %911 = or disjoint i32 %768, 3072, !dbg !126
  %912 = lshr i32 %911, 4, !dbg !126
  %913 = and i32 %912, 252, !dbg !126
  %914 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %913, !dbg !126
  %915 = getelementptr inbounds float, ptr addrspace(3) %914, i32 %911, !dbg !126
  %916 = load <4 x i32>, ptr addrspace(3) %915, align 16, !dbg !126
  %.extract = load i32, ptr addrspace(3) %898, align 16, !dbg !126
  %917 = getelementptr inbounds i8, ptr addrspace(3) %898, i32 4, !dbg !126
  %.extract18 = load i32, ptr addrspace(3) %917, align 4, !dbg !126
  %918 = getelementptr inbounds i8, ptr addrspace(3) %898, i32 8, !dbg !126
  %.extract19 = load i32, ptr addrspace(3) %918, align 8, !dbg !126
  %919 = getelementptr inbounds i8, ptr addrspace(3) %898, i32 12, !dbg !126
  %.extract20 = load i32, ptr addrspace(3) %919, align 4, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %758, i1 %30) #2, !dbg !126
  %.extract21 = extractelement <4 x i32> %904, i64 0, !dbg !126
  %.extract22 = extractelement <4 x i32> %904, i64 1, !dbg !126
  %.extract23 = extractelement <4 x i32> %904, i64 2, !dbg !126
  %.extract24 = extractelement <4 x i32> %904, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %760, i1 %31) #2, !dbg !126
  %.extract25 = extractelement <4 x i32> %910, i64 0, !dbg !126
  %.extract26 = extractelement <4 x i32> %910, i64 1, !dbg !126
  %.extract27 = extractelement <4 x i32> %910, i64 2, !dbg !126
  %.extract28 = extractelement <4 x i32> %910, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %762, i1 %32) #2, !dbg !126
  %.extract29 = extractelement <4 x i32> %916, i64 0, !dbg !126
  %.extract30 = extractelement <4 x i32> %916, i64 1, !dbg !126
  %.extract31 = extractelement <4 x i32> %916, i64 2, !dbg !126
  %.extract32 = extractelement <4 x i32> %916, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %764, i1 %33) #2, !dbg !126
  %920 = shl i32 %13, 8, !dbg !128
  %921 = add i32 %21, %920, !dbg !129
  %922 = sext i32 %921 to i64, !dbg !130
  %923 = getelementptr i8, ptr addrspace(1) %2, i64 %922, !dbg !130
  %924 = bitcast <4 x i8> %452 to i32, !dbg !131
  %925 = bitcast <4 x i8> %550 to i32, !dbg !131
  %926 = bitcast <4 x i8> %648 to i32, !dbg !131
  %927 = bitcast <4 x i8> %746 to i32, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %924, i32 %925, i32 %926, i32 %927, ptr addrspace(1) %923, i1 %29) #2, !dbg !131
  ret void, !dbg !132
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpsnyigawne76v35tq3wghwofeyslbf5kqpftb4qnxvmn2l3sn66.py", directory: "inductor_cache/ps")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 46, column: 61, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 68, column: 20, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 42, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 50, scope: !7)
!29 = !DILocation(line: 46, column: 41, scope: !7)
!30 = !DILocation(line: 46, column: 46, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 74, scope: !7)
!34 = !DILocation(line: 46, column: 66, scope: !7)
!35 = !DILocation(line: 48, column: 21, scope: !7)
!36 = !DILocation(line: 51, column: 19, scope: !7)
!37 = !DILocation(line: 52, column: 46, scope: !7)
!38 = !DILocation(line: 52, column: 55, scope: !7)
!39 = !DILocation(line: 52, column: 31, scope: !7)
!40 = !DILocation(line: 52, column: 74, scope: !7)
!41 = !DILocation(line: 52, column: 66, scope: !7)
!42 = !DILocation(line: 59, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 55, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 66, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 45, scope: !7)
!48 = !DILocation(line: 66, column: 54, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 73, scope: !7)
!51 = !DILocation(line: 66, column: 65, scope: !7)
!52 = !DILocation(line: 69, column: 45, scope: !7)
!53 = !DILocation(line: 69, column: 31, scope: !7)
!54 = !DILocation(line: 69, column: 64, scope: !7)
!55 = !DILocation(line: 69, column: 56, scope: !7)
!56 = !DILocation(line: 72, column: 42, scope: !7)
!57 = !DILocation(line: 72, column: 51, scope: !7)
!58 = !DILocation(line: 72, column: 31, scope: !7)
!59 = !DILocation(line: 72, column: 62, scope: !7)
!60 = !DILocation(line: 79, column: 43, scope: !7)
!61 = !DILocation(line: 79, column: 52, scope: !7)
!62 = !DILocation(line: 79, column: 31, scope: !7)
!63 = !DILocation(line: 79, column: 63, scope: !7)
!64 = !DILocation(line: 82, column: 43, scope: !7)
!65 = !DILocation(line: 82, column: 52, scope: !7)
!66 = !DILocation(line: 82, column: 31, scope: !7)
!67 = !DILocation(line: 82, column: 63, scope: !7)
!68 = !DILocation(line: 85, column: 43, scope: !7)
!69 = !DILocation(line: 85, column: 52, scope: !7)
!70 = !DILocation(line: 85, column: 31, scope: !7)
!71 = !DILocation(line: 85, column: 63, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 53, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !80)
!80 = !DILocation(line: 60, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !85)
!85 = !DILocation(line: 67, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !90)
!90 = !DILocation(line: 70, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !95)
!95 = !DILocation(line: 73, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !105)
!105 = !DILocation(line: 83, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !110)
!110 = !DILocation(line: 86, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !110)
!113 = !DILocation(line: 90, column: 35, scope: !7)
!114 = !DILocation(line: 93, column: 35, scope: !7)
!115 = !DILocation(line: 96, column: 35, scope: !7)
!116 = !DILocation(line: 99, column: 35, scope: !7)
!117 = !DILocation(line: 102, column: 35, scope: !7)
!118 = !DILocation(line: 105, column: 35, scope: !7)
!119 = !DILocation(line: 108, column: 35, scope: !7)
!120 = !DILocation(line: 111, column: 35, scope: !7)
!121 = !DILocation(line: 112, column: 34, scope: !7)
!122 = !DILocation(line: 112, column: 45, scope: !7)
!123 = !DILocation(line: 112, column: 30, scope: !7)
!124 = !DILocation(line: 112, column: 39, scope: !7)
!125 = !DILocation(line: 112, column: 25, scope: !7)
!126 = !DILocation(line: 112, column: 57, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !110)
!128 = !DILocation(line: 113, column: 34, scope: !7)
!129 = !DILocation(line: 113, column: 30, scope: !7)
!130 = !DILocation(line: 113, column: 25, scope: !7)
!131 = !DILocation(line: 113, column: 46, scope: !7)
!132 = !DILocation(line: 113, column: 4, scope: !7)
