; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 7, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !13
  %18 = icmp slt i32 %17, 256, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen, 64, !dbg !15
  %20 = srem i32 %17, 16, !dbg !16
  %21 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %22 = shufflevector <2 x i32> %21, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %23 = sdiv <2 x i32> %22, <i32 16, i32 4>, !dbg !17
  %24 = srem <2 x i32> %23, splat (i32 4), !dbg !18
  %25 = srem i32 %17, 4, !dbg !19
  %26 = sext i32 %17 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %18) #3, !dbg !23
  %31 = bitcast i32 %30 to float, !dbg !23
  %32 = extractelement <2 x i32> %24, i64 0, !dbg !24
  %33 = sext i32 %32 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %18) #3, !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #3, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !31
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !32
  %43 = icmp slt i32 %32, 2, !dbg !33
  %44 = mul i32 %19, 64, !dbg !34
  %srem.decomposed = sub i32 %.frozen, %44, !dbg !34
  %45 = shl nsw i32 %19, 6, !dbg !35
  %46 = add i32 %45, %srem.decomposed, !dbg !36
  %47 = sext i32 %46 to i64, !dbg !37
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !37
  %49 = and i1 %18, %43, !dbg !38
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %49, i32 0, i1 %49) #3, !dbg !39
  %51 = bitcast i32 %50 to float, !dbg !39
  %52 = shl nsw i32 %32, 2, !dbg !24
  %53 = extractelement <2 x i32> %24, i64 1, !dbg !40
  %54 = add nsw i32 %52, %53, !dbg !40
  %55 = sext i32 %54 to i64, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !41
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %49, i32 0, i1 %49) #3, !dbg !42
  %58 = bitcast i32 %57 to float, !dbg !42
  %59 = fadd float %51, %58, !dbg !43
  %60 = icmp sgt i32 %32, 1, !dbg !44
  %61 = add nsw i32 %20, 32, !dbg !45
  %62 = add nsw i32 %32, -2, !dbg !46
  %63 = shl nsw i32 %62, 4, !dbg !47
  %64 = add nsw i32 %61, %45, !dbg !48
  %65 = add i32 %64, %63, !dbg !49
  %66 = sext i32 %65 to i64, !dbg !50
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !50
  %68 = and i1 %18, %60, !dbg !51
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %68, i32 0, i1 %68) #3, !dbg !52
  %70 = bitcast i32 %69 to float, !dbg !52
  %71 = shl nsw i32 %62, 2, !dbg !53
  %72 = add nsw i32 %71, %25, !dbg !54
  %73 = sext i32 %72 to i64, !dbg !55
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !55
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %68, i32 0, i1 %68) #3, !dbg !56
  %76 = bitcast i32 %75 to float, !dbg !56
  %77 = fadd float %70, %76, !dbg !57
  %78 = select i1 %43, float %59, float %77, !dbg !58
  %79 = fcmp oge float %78, 0.000000e+00, !dbg !59
  %80 = select i1 %79, float 1.000000e+00, float -1.000000e+00, !dbg !60
  %81 = fmul float %80, %31, !dbg !61
  %82 = fsub float %81, %81, !dbg !62
  %83 = fmul float %78, %80, !dbg !63
  %84 = fmul float %83, %82, !dbg !64
  %85 = fmul float %84, 0x3FF7154760000000, !dbg !65
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #3, !dbg !65
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %86) #3, !dbg !66
  %88 = fadd float %38, 0x3EE4F8B580000000, !dbg !67
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %89, 0, !dbg !68
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %90, 0, !dbg !68
  br i1 %.not.i, label %96, label %91, !dbg !68

91:                                               ; preds = %12
  br i1 %.not1.i, label %94, label %92, !dbg !68

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

96:                                               ; preds = %12
  br i1 %.not1.i, label %99, label %97, !dbg !68

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %92, %94, %97, %99
  %.0.i = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !68
  %101 = bitcast i32 %28 to float, !dbg !21
  %102 = fmul float %87, %101, !dbg !69
  %103 = bitcast i32 %35 to float, !dbg !26
  %104 = fsub float %102, %103, !dbg !70
  %105 = bitcast i32 %42 to float, !dbg !32
  %106 = bitcast i32 %40 to float, !dbg !30
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !71
  %108 = fmul float %104, %107, !dbg !72
  %109 = fmul float %108, %106, !dbg !73
  %110 = fadd float %109, %105, !dbg !74
  %111 = fcmp olt float %110, 0.000000e+00, !dbg !75
  %112 = select i1 %111, float 0.000000e+00, float %110, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %28, ptr addrspace(1) %27, i1 %18) #3, !dbg !80
  %113 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !81
  %114 = bitcast float %78 to i32, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %113, i1 %18) #3, !dbg !82
  %115 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !83
  %116 = bitcast float %112 to i32, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %115, i1 %18) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgtbae4rn723exxeisoye6dozlyex7cbus6iidkcxzkocley2phs.py", directory: "inductor_cache/gt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 34, scope: !7)
!21 = !DILocation(line: 30, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 42, column: 38, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 35, scope: !7)
!35 = !DILocation(line: 41, column: 48, scope: !7)
!36 = !DILocation(line: 41, column: 45, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 60, scope: !7)
!39 = !DILocation(line: 41, column: 53, scope: !7)
!40 = !DILocation(line: 42, column: 35, scope: !7)
!41 = !DILocation(line: 42, column: 30, scope: !7)
!42 = !DILocation(line: 42, column: 44, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 36, scope: !7)
!46 = !DILocation(line: 49, column: 52, scope: !7)
!47 = !DILocation(line: 49, column: 45, scope: !7)
!48 = !DILocation(line: 49, column: 41, scope: !7)
!49 = !DILocation(line: 49, column: 58, scope: !7)
!50 = !DILocation(line: 49, column: 31, scope: !7)
!51 = !DILocation(line: 49, column: 74, scope: !7)
!52 = !DILocation(line: 49, column: 66, scope: !7)
!53 = !DILocation(line: 50, column: 39, scope: !7)
!54 = !DILocation(line: 50, column: 36, scope: !7)
!55 = !DILocation(line: 50, column: 31, scope: !7)
!56 = !DILocation(line: 50, column: 52, scope: !7)
!57 = !DILocation(line: 51, column: 20, scope: !7)
!58 = !DILocation(line: 0, scope: !7)
!59 = !DILocation(line: 56, column: 21, scope: !7)
!60 = !DILocation(line: 59, column: 35, scope: !7)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 20, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 24, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 27, scope: !7)
!69 = !DILocation(line: 66, column: 20, scope: !7)
!70 = !DILocation(line: 67, column: 20, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 20, scope: !7)
!73 = !DILocation(line: 75, column: 20, scope: !7)
!74 = !DILocation(line: 76, column: 20, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlockFile(scope: !7, file: !77, discriminator: 0)
!77 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!78 = !DILocation(line: 78, column: 42, scope: !7)
!79 = !DILocation(line: 121, column: 29, scope: !76, inlinedAt: !78)
!80 = !DILocation(line: 79, column: 39, scope: !7)
!81 = !DILocation(line: 80, column: 25, scope: !7)
!82 = !DILocation(line: 80, column: 37, scope: !7)
!83 = !DILocation(line: 81, column: 25, scope: !7)
!84 = !DILocation(line: 81, column: 37, scope: !7)
!85 = !DILocation(line: 81, column: 4, scope: !7)
