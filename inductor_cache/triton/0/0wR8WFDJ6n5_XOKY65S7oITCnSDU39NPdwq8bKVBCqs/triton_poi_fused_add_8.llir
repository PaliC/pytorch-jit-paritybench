; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit40 = lshr i32 %11, 6, !dbg !12
  %12 = and i32 %.lobit40, 3, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 12, !dbg !12
  %15 = or disjoint i32 %10, %12, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = or disjoint i32 %10, %14, !dbg !13
  %20 = icmp slt i32 %15, 384, !dbg !14
  %21 = icmp slt i32 %16, 384, !dbg !14
  %22 = icmp slt i32 %17, 384, !dbg !14
  %23 = icmp slt i32 %18, 384, !dbg !14
  %24 = icmp slt i32 %19, 384, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %26 = shl i32 %25, 8, !dbg !16
  %27 = and i32 %13, 252, !dbg !17
  %28 = lshr i32 %11, 2, !dbg !17
  %29 = and i32 %28, 15, !dbg !17
  %30 = lshr i32 %11, 2, !dbg !17
  %31 = and i32 %30, 16, !dbg !17
  %32 = lshr i32 %11, 2, !dbg !17
  %33 = and i32 %32, 32, !dbg !17
  %34 = or disjoint i32 %31, %29, !dbg !17
  %35 = or disjoint i32 %34, %33, !dbg !17
  %36 = or disjoint i32 %26, %27, !dbg !18
  %37 = or disjoint i32 %36, 1, !dbg !18
  %38 = or disjoint i32 %36, 2, !dbg !18
  %39 = or disjoint i32 %36, 3, !dbg !18
  %40 = or disjoint i32 %26, %35, !dbg !18
  %41 = or disjoint i32 %40, 64, !dbg !18
  %42 = or disjoint i32 %40, 128, !dbg !18
  %43 = or disjoint i32 %40, 192, !dbg !18
  %44 = icmp slt i32 %36, 256, !dbg !19
  %45 = icmp slt i32 %40, 256, !dbg !19
  %46 = icmp slt i32 %41, 256, !dbg !19
  %47 = icmp slt i32 %42, 256, !dbg !19
  %48 = icmp slt i32 %43, 256, !dbg !19
  %49 = srem i32 %16, 96, !dbg !20
  %50 = srem i32 %17, 96, !dbg !20
  %51 = srem i32 %18, 96, !dbg !20
  %.frozen = freeze i32 %19, !dbg !21
  %52 = sdiv i32 %.frozen, 96, !dbg !21
  %53 = mul i32 %52, 96, !dbg !20
  %.decomposed = sub i32 %.frozen, %53, !dbg !20
  %.frozen41 = freeze i32 %36, !dbg !22
  %54 = sdiv i32 %.frozen41, 16, !dbg !22
  %55 = mul i32 %54, 16, !dbg !23
  %.decomposed42 = sub i32 %.frozen41, %55, !dbg !23
  %56 = srem i32 %37, 16, !dbg !23
  %57 = srem i32 %38, 16, !dbg !23
  %58 = srem i32 %39, 16, !dbg !23
  %.frozen43 = freeze i32 %40, !dbg !22
  %59 = sdiv i32 %.frozen43, 16, !dbg !22
  %60 = mul i32 %59, 16, !dbg !23
  %.decomposed44 = sub i32 %.frozen43, %60, !dbg !23
  %61 = sdiv i32 %41, 16, !dbg !22
  %62 = sdiv i32 %42, 16, !dbg !22
  %63 = sdiv i32 %43, 16, !dbg !22
  %64 = shl i32 %15, 8, !dbg !24
  %65 = shl i32 %16, 8, !dbg !24
  %66 = shl i32 %17, 8, !dbg !24
  %67 = shl i32 %18, 8, !dbg !24
  %68 = add i32 %36, %64, !dbg !25
  %69 = add i32 %36, %65, !dbg !25
  %70 = add i32 %36, %66, !dbg !25
  %71 = add i32 %36, %67, !dbg !25
  %72 = sext i32 %68 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = sext i32 %69 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = sext i32 %70 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !26
  %78 = sext i32 %71 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !26
  %80 = and i1 %20, %44, !dbg !27
  %81 = and i1 %21, %44, !dbg !27
  %82 = and i1 %22, %44, !dbg !27
  %83 = and i1 %23, %44, !dbg !27
  %84 = and i1 %24, %45, !dbg !27
  %85 = and i1 %46, %24, !dbg !27
  %86 = and i1 %47, %24, !dbg !27
  %87 = and i1 %48, %24, !dbg !27
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %80) #3, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %93 = bitcast i32 %89 to float, !dbg !28
  %94 = bitcast i32 %90 to float, !dbg !28
  %95 = bitcast i32 %91 to float, !dbg !28
  %96 = bitcast i32 %92 to float, !dbg !28
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %81) #3, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !28
  %102 = bitcast i32 %98 to float, !dbg !28
  %103 = bitcast i32 %99 to float, !dbg !28
  %104 = bitcast i32 %100 to float, !dbg !28
  %105 = bitcast i32 %101 to float, !dbg !28
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %82) #3, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !28
  %111 = bitcast i32 %107 to float, !dbg !28
  %112 = bitcast i32 %108 to float, !dbg !28
  %113 = bitcast i32 %109 to float, !dbg !28
  %114 = bitcast i32 %110 to float, !dbg !28
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %83) #3, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !28
  %120 = bitcast i32 %116 to float, !dbg !28
  %121 = bitcast i32 %117 to float, !dbg !28
  %122 = bitcast i32 %118 to float, !dbg !28
  %123 = bitcast i32 %119 to float, !dbg !28
  %124 = sext i32 %49 to i64, !dbg !29
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !29
  %126 = sext i32 %50 to i64, !dbg !29
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !29
  %128 = sext i32 %51 to i64, !dbg !29
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !29
  %130 = shl nsw i32 %49, 8, !dbg !30
  %131 = shl nsw i32 %50, 8, !dbg !30
  %132 = shl nsw i32 %51, 8, !dbg !30
  %133 = add i32 %36, %130, !dbg !31
  %134 = add i32 %36, %131, !dbg !31
  %135 = add i32 %36, %132, !dbg !31
  %136 = sext i32 %133 to i64, !dbg !32
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !32
  %138 = sext i32 %134 to i64, !dbg !32
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !32
  %140 = sext i32 %135 to i64, !dbg !32
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !32
  %142 = srem i32 %59, 8, !dbg !33
  %143 = srem i32 %61, 8, !dbg !33
  %144 = srem i32 %62, 8, !dbg !33
  %145 = srem i32 %63, 8, !dbg !33
  %146 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !33
  %147 = insertelement <2 x i32> %146, i32 %15, i64 1, !dbg !33
  %148 = srem <2 x i32> %147, <i32 8, i32 96>, !dbg !33
  %149 = extractelement <2 x i32> %148, i64 1, !dbg !30
  %150 = sext i32 %149 to i64, !dbg !29
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !29
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %20) #3, !dbg !34
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %20) #3, !dbg !34
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %20) #3, !dbg !34
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %20) #3, !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %21) #3, !dbg !34
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %21) #3, !dbg !34
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %21) #3, !dbg !34
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %21) #3, !dbg !34
  %161 = bitcast i32 %160 to float, !dbg !34
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %22) #3, !dbg !34
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %22) #3, !dbg !34
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %22) #3, !dbg !34
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %22) #3, !dbg !34
  %166 = bitcast i32 %165 to float, !dbg !34
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %23) #3, !dbg !34
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %23) #3, !dbg !34
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %23) #3, !dbg !34
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %23) #3, !dbg !34
  %171 = bitcast i32 %170 to float, !dbg !34
  %172 = shl nsw i32 %149, 8, !dbg !30
  %173 = add i32 %172, %36, !dbg !31
  %174 = sext i32 %173 to i64, !dbg !32
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !32
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %80) #3, !dbg !35
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !35
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !35
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !35
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !35
  %181 = bitcast i32 %177 to float, !dbg !35
  %182 = bitcast i32 %178 to float, !dbg !35
  %183 = bitcast i32 %179 to float, !dbg !35
  %184 = bitcast i32 %180 to float, !dbg !35
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %81) #3, !dbg !35
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !35
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !35
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !35
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !35
  %190 = bitcast i32 %186 to float, !dbg !35
  %191 = bitcast i32 %187 to float, !dbg !35
  %192 = bitcast i32 %188 to float, !dbg !35
  %193 = bitcast i32 %189 to float, !dbg !35
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %82) #3, !dbg !35
  %195 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !35
  %196 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !35
  %197 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !35
  %198 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !35
  %199 = bitcast i32 %195 to float, !dbg !35
  %200 = bitcast i32 %196 to float, !dbg !35
  %201 = bitcast i32 %197 to float, !dbg !35
  %202 = bitcast i32 %198 to float, !dbg !35
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %83) #3, !dbg !35
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !35
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !35
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !35
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !35
  %208 = bitcast i32 %204 to float, !dbg !35
  %209 = bitcast i32 %205 to float, !dbg !35
  %210 = bitcast i32 %206 to float, !dbg !35
  %211 = bitcast i32 %207 to float, !dbg !35
  %212 = shl nsw <2 x i32> %148, <i32 3, i32 6>, !dbg !36
  %213 = shl nsw i32 %49, 6, !dbg !37
  %214 = shl nsw i32 %50, 6, !dbg !37
  %215 = shl nsw i32 %51, 6, !dbg !37
  %216 = extractelement <2 x i32> %212, i64 0, !dbg !38
  %217 = extractelement <2 x i32> %212, i64 1, !dbg !38
  %218 = add nsw i32 %216, %217, !dbg !38
  %219 = add nsw i32 %216, %213, !dbg !38
  %220 = add nsw i32 %216, %214, !dbg !38
  %221 = add nsw i32 %216, %215, !dbg !38
  %.lhs.trunc = trunc nsw i32 %.decomposed42 to i8, !dbg !39
  %222 = srem i8 %.lhs.trunc, 8, !dbg !39
  %.sext = sext i8 %222 to i32, !dbg !39
  %.lhs.trunc18 = trunc nsw i32 %56 to i8, !dbg !39
  %223 = srem i8 %.lhs.trunc18, 8, !dbg !39
  %.sext19 = sext i8 %223 to i32, !dbg !39
  %.lhs.trunc20 = trunc nsw i32 %57 to i8, !dbg !39
  %224 = srem i8 %.lhs.trunc20, 8, !dbg !39
  %.sext21 = sext i8 %224 to i32, !dbg !39
  %.lhs.trunc22 = trunc nsw i32 %58 to i8, !dbg !39
  %225 = srem i8 %.lhs.trunc22, 8, !dbg !39
  %.sext23 = sext i8 %225 to i32, !dbg !39
  %.lhs.trunc24 = trunc nsw i32 %.decomposed44 to i8, !dbg !39
  %226 = sdiv i8 %.lhs.trunc24, 8, !dbg !40
  %227 = mul i8 %226, 8, !dbg !39
  %.decomposed45 = sub i8 %.lhs.trunc24, %227, !dbg !39
  %228 = add nsw i32 %218, %.sext, !dbg !41
  %229 = add nsw i32 %218, %.sext19, !dbg !41
  %230 = add nsw i32 %218, %.sext21, !dbg !41
  %231 = add nsw i32 %218, %.sext23, !dbg !41
  %232 = add nsw i32 %219, %.sext, !dbg !41
  %233 = add nsw i32 %219, %.sext19, !dbg !41
  %234 = add nsw i32 %219, %.sext21, !dbg !41
  %235 = add nsw i32 %219, %.sext23, !dbg !41
  %236 = add nsw i32 %220, %.sext, !dbg !41
  %237 = add nsw i32 %220, %.sext19, !dbg !41
  %238 = add nsw i32 %220, %.sext21, !dbg !41
  %239 = add nsw i32 %220, %.sext23, !dbg !41
  %240 = add nsw i32 %221, %.sext, !dbg !41
  %241 = add nsw i32 %221, %.sext19, !dbg !41
  %242 = add nsw i32 %221, %.sext21, !dbg !41
  %243 = add nsw i32 %221, %.sext23, !dbg !41
  %244 = sext i32 %228 to i64, !dbg !42
  %245 = getelementptr float, ptr addrspace(1) %3, i64 %244, !dbg !42
  %246 = sext i32 %229 to i64, !dbg !42
  %247 = getelementptr float, ptr addrspace(1) %3, i64 %246, !dbg !42
  %248 = sext i32 %230 to i64, !dbg !42
  %249 = getelementptr float, ptr addrspace(1) %3, i64 %248, !dbg !42
  %250 = sext i32 %231 to i64, !dbg !42
  %251 = getelementptr float, ptr addrspace(1) %3, i64 %250, !dbg !42
  %252 = sext i32 %232 to i64, !dbg !42
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %252, !dbg !42
  %254 = sext i32 %233 to i64, !dbg !42
  %255 = getelementptr float, ptr addrspace(1) %3, i64 %254, !dbg !42
  %256 = sext i32 %234 to i64, !dbg !42
  %257 = getelementptr float, ptr addrspace(1) %3, i64 %256, !dbg !42
  %258 = sext i32 %235 to i64, !dbg !42
  %259 = getelementptr float, ptr addrspace(1) %3, i64 %258, !dbg !42
  %260 = sext i32 %236 to i64, !dbg !42
  %261 = getelementptr float, ptr addrspace(1) %3, i64 %260, !dbg !42
  %262 = sext i32 %237 to i64, !dbg !42
  %263 = getelementptr float, ptr addrspace(1) %3, i64 %262, !dbg !42
  %264 = sext i32 %238 to i64, !dbg !42
  %265 = getelementptr float, ptr addrspace(1) %3, i64 %264, !dbg !42
  %266 = sext i32 %239 to i64, !dbg !42
  %267 = getelementptr float, ptr addrspace(1) %3, i64 %266, !dbg !42
  %268 = sext i32 %240 to i64, !dbg !42
  %269 = getelementptr float, ptr addrspace(1) %3, i64 %268, !dbg !42
  %270 = sext i32 %241 to i64, !dbg !42
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %270, !dbg !42
  %272 = sext i32 %242 to i64, !dbg !42
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %272, !dbg !42
  %274 = sext i32 %243 to i64, !dbg !42
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %274, !dbg !42
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %80) #3, !dbg !43
  %277 = bitcast i32 %276 to float, !dbg !43
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %80) #3, !dbg !43
  %279 = bitcast i32 %278 to float, !dbg !43
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %80) #3, !dbg !43
  %281 = bitcast i32 %280 to float, !dbg !43
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %80) #3, !dbg !43
  %283 = bitcast i32 %282 to float, !dbg !43
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %81) #3, !dbg !43
  %285 = bitcast i32 %284 to float, !dbg !43
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %81) #3, !dbg !43
  %287 = bitcast i32 %286 to float, !dbg !43
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %81) #3, !dbg !43
  %289 = bitcast i32 %288 to float, !dbg !43
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 %81) #3, !dbg !43
  %291 = bitcast i32 %290 to float, !dbg !43
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 %82) #3, !dbg !43
  %293 = bitcast i32 %292 to float, !dbg !43
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %82) #3, !dbg !43
  %295 = bitcast i32 %294 to float, !dbg !43
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %82) #3, !dbg !43
  %297 = bitcast i32 %296 to float, !dbg !43
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %82) #3, !dbg !43
  %299 = bitcast i32 %298 to float, !dbg !43
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %83) #3, !dbg !43
  %301 = bitcast i32 %300 to float, !dbg !43
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %83) #3, !dbg !43
  %303 = bitcast i32 %302 to float, !dbg !43
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %83) #3, !dbg !43
  %305 = bitcast i32 %304 to float, !dbg !43
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %83) #3, !dbg !43
  %307 = bitcast i32 %306 to float, !dbg !43
  %308 = mul nsw i32 %143, 768, !dbg !44
  %309 = mul nsw i32 %144, 768, !dbg !44
  %310 = mul nsw i32 %145, 768, !dbg !44
  %311 = insertelement <2 x i8> poison, i8 %.decomposed45, i64 0, !dbg !39
  %312 = insertelement <2 x i8> %311, i8 %226, i64 1, !dbg !39
  %313 = sdiv i32 %40, 128, !dbg !45
  %314 = sdiv i32 %41, 128, !dbg !45
  %315 = sdiv i32 %42, 128, !dbg !45
  %316 = sdiv i32 %43, 128, !dbg !45
  %317 = insertelement <4 x i32> poison, i32 %313, i64 0, !dbg !46
  %318 = insertelement <4 x i32> %317, i32 %142, i64 1, !dbg !46
  %319 = sext <2 x i8> %312 to <2 x i32>, !dbg !46
  %320 = shufflevector <2 x i32> %319, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !46
  %321 = shufflevector <4 x i32> %318, <4 x i32> %320, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !46
  %322 = mul <4 x i32> %321, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !46
  %323 = mul i32 %314, 12288, !dbg !46
  %324 = mul i32 %315, 12288, !dbg !46
  %325 = mul i32 %316, 12288, !dbg !46
  %326 = mul i32 %52, 24576, !dbg !47
  %327 = add i32 %326, %.decomposed, !dbg !48
  %328 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %322), !dbg !49
  %op.rdx = add i32 %328, %327, !dbg !50
  %329 = add i32 %327, %323, !dbg !50
  %330 = add i32 %329, %308, !dbg !51
  %331 = extractelement <4 x i32> %322, i64 2, !dbg !52
  %332 = add i32 %330, %331, !dbg !52
  %333 = extractelement <4 x i32> %322, i64 3, !dbg !49
  %334 = add i32 %332, %333, !dbg !49
  %335 = add i32 %327, %324, !dbg !50
  %336 = add i32 %335, %309, !dbg !51
  %337 = add i32 %336, %331, !dbg !52
  %338 = add i32 %337, %333, !dbg !49
  %339 = add i32 %327, %325, !dbg !50
  %340 = add i32 %339, %310, !dbg !51
  %341 = add i32 %340, %331, !dbg !52
  %342 = add i32 %341, %333, !dbg !49
  %343 = sext i32 %op.rdx to i64, !dbg !53
  %344 = getelementptr float, ptr addrspace(1) %4, i64 %343, !dbg !53
  %345 = sext i32 %334 to i64, !dbg !53
  %346 = getelementptr float, ptr addrspace(1) %4, i64 %345, !dbg !53
  %347 = sext i32 %338 to i64, !dbg !53
  %348 = getelementptr float, ptr addrspace(1) %4, i64 %347, !dbg !53
  %349 = sext i32 %342 to i64, !dbg !53
  %350 = getelementptr float, ptr addrspace(1) %4, i64 %349, !dbg !53
  %351 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %344, i1 %84) #3, !dbg !54
  %352 = extractvalue { i32, i32, i32, i32 } %351, 0, !dbg !54
  %353 = extractvalue { i32, i32, i32, i32 } %351, 1, !dbg !54
  %354 = extractvalue { i32, i32, i32, i32 } %351, 2, !dbg !54
  %355 = extractvalue { i32, i32, i32, i32 } %351, 3, !dbg !54
  %356 = bitcast i32 %352 to float, !dbg !54
  %357 = bitcast i32 %353 to float, !dbg !54
  %358 = bitcast i32 %354 to float, !dbg !54
  %359 = bitcast i32 %355 to float, !dbg !54
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %346, i1 %85) #3, !dbg !54
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !54
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !54
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !54
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !54
  %365 = bitcast i32 %361 to float, !dbg !54
  %366 = bitcast i32 %362 to float, !dbg !54
  %367 = bitcast i32 %363 to float, !dbg !54
  %368 = bitcast i32 %364 to float, !dbg !54
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %348, i1 %86) #3, !dbg !54
  %370 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !54
  %371 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !54
  %372 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !54
  %373 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !54
  %374 = bitcast i32 %370 to float, !dbg !54
  %375 = bitcast i32 %371 to float, !dbg !54
  %376 = bitcast i32 %372 to float, !dbg !54
  %377 = bitcast i32 %373 to float, !dbg !54
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %350, i1 %87) #3, !dbg !54
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !54
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !54
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !54
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !54
  %383 = bitcast i32 %379 to float, !dbg !54
  %384 = bitcast i32 %380 to float, !dbg !54
  %385 = bitcast i32 %381 to float, !dbg !54
  %386 = bitcast i32 %382 to float, !dbg !54
  %387 = sext i32 %.decomposed to i64, !dbg !55
  %388 = getelementptr float, ptr addrspace(1) %5, i64 %387, !dbg !55
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %388, i1 %24) #3, !dbg !56
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !56
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !56
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !56
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !56
  %394 = bitcast i32 %390 to float, !dbg !56
  %395 = bitcast i32 %391 to float, !dbg !56
  %396 = bitcast i32 %392 to float, !dbg !56
  %397 = bitcast i32 %393 to float, !dbg !56
  %398 = fadd float %93, %156, !dbg !57
  %399 = fadd float %94, %156, !dbg !57
  %400 = fadd float %95, %156, !dbg !57
  %401 = fadd float %96, %156, !dbg !57
  %402 = fadd float %102, %161, !dbg !57
  %403 = fadd float %103, %161, !dbg !57
  %404 = fadd float %104, %161, !dbg !57
  %405 = fadd float %105, %161, !dbg !57
  %406 = fadd float %111, %166, !dbg !57
  %407 = fadd float %112, %166, !dbg !57
  %408 = fadd float %113, %166, !dbg !57
  %409 = fadd float %114, %166, !dbg !57
  %410 = fadd float %120, %171, !dbg !57
  %411 = fadd float %121, %171, !dbg !57
  %412 = fadd float %122, %171, !dbg !57
  %413 = fadd float %123, %171, !dbg !57
  %414 = fadd float %181, %277, !dbg !58
  %415 = fadd float %182, %279, !dbg !58
  %416 = fadd float %183, %281, !dbg !58
  %417 = fadd float %184, %283, !dbg !58
  %418 = fadd float %190, %285, !dbg !58
  %419 = fadd float %191, %287, !dbg !58
  %420 = fadd float %192, %289, !dbg !58
  %421 = fadd float %193, %291, !dbg !58
  %422 = fadd float %199, %293, !dbg !58
  %423 = fadd float %200, %295, !dbg !58
  %424 = fadd float %201, %297, !dbg !58
  %425 = fadd float %202, %299, !dbg !58
  %426 = fadd float %208, %301, !dbg !58
  %427 = fadd float %209, %303, !dbg !58
  %428 = fadd float %210, %305, !dbg !58
  %429 = fadd float %211, %307, !dbg !58
  %430 = fadd float %398, %414, !dbg !59
  %431 = fadd float %399, %415, !dbg !59
  %432 = fadd float %400, %416, !dbg !59
  %433 = fadd float %401, %417, !dbg !59
  %434 = fadd float %402, %418, !dbg !59
  %435 = fadd float %403, %419, !dbg !59
  %436 = fadd float %404, %420, !dbg !59
  %437 = fadd float %405, %421, !dbg !59
  %438 = fadd float %406, %422, !dbg !59
  %439 = fadd float %407, %423, !dbg !59
  %440 = fadd float %408, %424, !dbg !59
  %441 = fadd float %409, %425, !dbg !59
  %442 = fadd float %410, %426, !dbg !59
  %443 = fadd float %411, %427, !dbg !59
  %444 = fadd float %412, %428, !dbg !59
  %445 = fadd float %413, %429, !dbg !59
  %446 = shl i32 %11, 6, !dbg !59
  %447 = and i32 %446, 4032, !dbg !59
  %448 = or disjoint i32 %12, %447, !dbg !59
  %449 = and i32 %13, 1020, !dbg !59
  %450 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %447, !dbg !59
  %451 = getelementptr inbounds float, ptr addrspace(3) %450, i32 %448, !dbg !59
  %452 = bitcast float %430 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %451, <1 x i32> %452, i1 true) #3, !dbg !59
  %453 = or disjoint i32 %448, 16, !dbg !59
  %454 = lshr i32 %453, 2, !dbg !59
  %455 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %454, !dbg !59
  %456 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %453, !dbg !59
  %457 = bitcast float %431 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %457, i1 true) #3, !dbg !59
  %458 = or disjoint i32 %448, 32, !dbg !59
  %459 = lshr i32 %458, 2, !dbg !59
  %460 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %459, !dbg !59
  %461 = getelementptr inbounds float, ptr addrspace(3) %460, i32 %458, !dbg !59
  %462 = bitcast float %432 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %462, i1 true) #3, !dbg !59
  %463 = or disjoint i32 %448, 48, !dbg !59
  %464 = lshr i32 %463, 2, !dbg !59
  %465 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %464, !dbg !59
  %466 = getelementptr inbounds float, ptr addrspace(3) %465, i32 %463, !dbg !59
  %467 = bitcast float %433 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %467, i1 true) #3, !dbg !59
  %468 = or disjoint i32 %448, 4, !dbg !59
  %469 = getelementptr inbounds float, ptr addrspace(3) %450, i32 %468, !dbg !59
  %470 = bitcast float %434 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %470, i1 true) #3, !dbg !59
  %471 = or disjoint i32 %448, 20, !dbg !59
  %472 = lshr i32 %471, 2, !dbg !59
  %473 = and i32 %472, 1012, !dbg !59
  %474 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %473, !dbg !59
  %475 = getelementptr inbounds float, ptr addrspace(3) %474, i32 %471, !dbg !59
  %476 = bitcast float %435 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %476, i1 true) #3, !dbg !59
  %477 = or disjoint i32 %448, 36, !dbg !59
  %478 = lshr i32 %477, 2, !dbg !59
  %479 = and i32 %478, 1016, !dbg !59
  %480 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %479, !dbg !59
  %481 = getelementptr inbounds float, ptr addrspace(3) %480, i32 %477, !dbg !59
  %482 = bitcast float %436 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %481, <1 x i32> %482, i1 true) #3, !dbg !59
  %483 = or disjoint i32 %448, 52, !dbg !59
  %484 = lshr i32 %483, 2, !dbg !59
  %485 = and i32 %484, 1020, !dbg !59
  %486 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %485, !dbg !59
  %487 = getelementptr inbounds float, ptr addrspace(3) %486, i32 %483, !dbg !59
  %488 = bitcast float %437 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %488, i1 true) #3, !dbg !59
  %489 = or disjoint i32 %448, 8, !dbg !59
  %490 = getelementptr inbounds float, ptr addrspace(3) %450, i32 %489, !dbg !59
  %491 = bitcast float %438 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %491, i1 true) #3, !dbg !59
  %492 = or disjoint i32 %448, 24, !dbg !59
  %493 = lshr i32 %492, 2, !dbg !59
  %494 = and i32 %493, 1012, !dbg !59
  %495 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %494, !dbg !59
  %496 = getelementptr inbounds float, ptr addrspace(3) %495, i32 %492, !dbg !59
  %497 = bitcast float %439 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %497, i1 true) #3, !dbg !59
  %498 = or disjoint i32 %448, 40, !dbg !59
  %499 = lshr i32 %498, 2, !dbg !59
  %500 = and i32 %499, 1016, !dbg !59
  %501 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %500, !dbg !59
  %502 = getelementptr inbounds float, ptr addrspace(3) %501, i32 %498, !dbg !59
  %503 = bitcast float %440 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %502, <1 x i32> %503, i1 true) #3, !dbg !59
  %504 = or disjoint i32 %448, 56, !dbg !59
  %505 = lshr i32 %504, 2, !dbg !59
  %506 = and i32 %505, 1020, !dbg !59
  %507 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %506, !dbg !59
  %508 = getelementptr inbounds float, ptr addrspace(3) %507, i32 %504, !dbg !59
  %509 = bitcast float %441 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %508, <1 x i32> %509, i1 true) #3, !dbg !59
  %510 = or disjoint i32 %448, 12, !dbg !59
  %511 = getelementptr inbounds float, ptr addrspace(3) %450, i32 %510, !dbg !59
  %512 = bitcast float %442 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %512, i1 true) #3, !dbg !59
  %513 = or disjoint i32 %448, 28, !dbg !59
  %514 = lshr i32 %513, 2, !dbg !59
  %515 = and i32 %514, 1012, !dbg !59
  %516 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %515, !dbg !59
  %517 = getelementptr inbounds float, ptr addrspace(3) %516, i32 %513, !dbg !59
  %518 = bitcast float %443 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %517, <1 x i32> %518, i1 true) #3, !dbg !59
  %519 = or disjoint i32 %448, 44, !dbg !59
  %520 = lshr i32 %519, 2, !dbg !59
  %521 = and i32 %520, 1016, !dbg !59
  %522 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %521, !dbg !59
  %523 = getelementptr inbounds float, ptr addrspace(3) %522, i32 %519, !dbg !59
  %524 = bitcast float %444 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %523, <1 x i32> %524, i1 true) #3, !dbg !59
  %525 = or disjoint i32 %448, 60, !dbg !59
  %526 = lshr i32 %525, 2, !dbg !59
  %527 = and i32 %526, 1020, !dbg !59
  %528 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %527, !dbg !59
  %529 = getelementptr inbounds float, ptr addrspace(3) %528, i32 %525, !dbg !59
  %530 = bitcast float %445 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %529, <1 x i32> %530, i1 true) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %531 = and i32 %11, 252, !dbg !59
  %532 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %531, !dbg !59
  %533 = getelementptr inbounds float, ptr addrspace(3) %532, i32 %449, !dbg !59
  %534 = load float, ptr addrspace(3) %533, align 16, !dbg !59
  %535 = getelementptr inbounds i8, ptr addrspace(3) %533, i32 4, !dbg !59
  %536 = load float, ptr addrspace(3) %535, align 4, !dbg !59
  %537 = getelementptr inbounds i8, ptr addrspace(3) %533, i32 8, !dbg !59
  %538 = load float, ptr addrspace(3) %537, align 8, !dbg !59
  %539 = getelementptr inbounds i8, ptr addrspace(3) %533, i32 12, !dbg !59
  %540 = load float, ptr addrspace(3) %539, align 4, !dbg !59
  %541 = or disjoint i32 %449, 1024, !dbg !59
  %542 = lshr exact i32 %541, 2, !dbg !59
  %543 = and i32 %542, 508, !dbg !59
  %544 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %543, !dbg !59
  %545 = getelementptr inbounds float, ptr addrspace(3) %544, i32 %541, !dbg !59
  %546 = load float, ptr addrspace(3) %545, align 16, !dbg !59
  %547 = getelementptr inbounds i8, ptr addrspace(3) %545, i32 4, !dbg !59
  %548 = load float, ptr addrspace(3) %547, align 4, !dbg !59
  %549 = getelementptr inbounds i8, ptr addrspace(3) %545, i32 8, !dbg !59
  %550 = load float, ptr addrspace(3) %549, align 8, !dbg !59
  %551 = getelementptr inbounds i8, ptr addrspace(3) %545, i32 12, !dbg !59
  %552 = load float, ptr addrspace(3) %551, align 4, !dbg !59
  %553 = or disjoint i32 %449, 2048, !dbg !59
  %554 = lshr exact i32 %553, 2, !dbg !59
  %555 = and i32 %554, 764, !dbg !59
  %556 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %555, !dbg !59
  %557 = getelementptr inbounds float, ptr addrspace(3) %556, i32 %553, !dbg !59
  %558 = load float, ptr addrspace(3) %557, align 16, !dbg !59
  %559 = getelementptr inbounds i8, ptr addrspace(3) %557, i32 4, !dbg !59
  %560 = load float, ptr addrspace(3) %559, align 4, !dbg !59
  %561 = getelementptr inbounds i8, ptr addrspace(3) %557, i32 8, !dbg !59
  %562 = load float, ptr addrspace(3) %561, align 8, !dbg !59
  %563 = getelementptr inbounds i8, ptr addrspace(3) %557, i32 12, !dbg !59
  %564 = load float, ptr addrspace(3) %563, align 4, !dbg !59
  %565 = or disjoint i32 %449, 3072, !dbg !59
  %566 = lshr exact i32 %565, 2, !dbg !59
  %567 = and i32 %566, 1020, !dbg !59
  %568 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %567, !dbg !59
  %569 = getelementptr inbounds float, ptr addrspace(3) %568, i32 %565, !dbg !59
  %570 = load float, ptr addrspace(3) %569, align 16, !dbg !59
  %571 = getelementptr inbounds i8, ptr addrspace(3) %569, i32 4, !dbg !59
  %572 = load float, ptr addrspace(3) %571, align 4, !dbg !59
  %573 = getelementptr inbounds i8, ptr addrspace(3) %569, i32 8, !dbg !59
  %574 = load float, ptr addrspace(3) %573, align 8, !dbg !59
  %575 = getelementptr inbounds i8, ptr addrspace(3) %569, i32 12, !dbg !59
  %576 = load float, ptr addrspace(3) %575, align 4, !dbg !59
  %577 = fadd float %356, %394, !dbg !60
  %578 = fadd float %357, %395, !dbg !60
  %579 = fadd float %358, %396, !dbg !60
  %580 = fadd float %359, %397, !dbg !60
  %581 = fadd float %365, %394, !dbg !60
  %582 = fadd float %366, %395, !dbg !60
  %583 = fadd float %367, %396, !dbg !60
  %584 = fadd float %368, %397, !dbg !60
  %585 = fadd float %374, %394, !dbg !60
  %586 = fadd float %375, %395, !dbg !60
  %587 = fadd float %376, %396, !dbg !60
  %588 = fadd float %377, %397, !dbg !60
  %589 = fadd float %383, %394, !dbg !60
  %590 = fadd float %384, %395, !dbg !60
  %591 = fadd float %385, %396, !dbg !60
  %592 = fadd float %386, %397, !dbg !60
  %593 = fadd float %577, %534, !dbg !61
  %594 = fadd float %578, %536, !dbg !61
  %595 = fadd float %579, %538, !dbg !61
  %596 = fadd float %580, %540, !dbg !61
  %597 = fadd float %581, %546, !dbg !61
  %598 = fadd float %582, %548, !dbg !61
  %599 = fadd float %583, %550, !dbg !61
  %600 = fadd float %584, %552, !dbg !61
  %601 = fadd float %585, %558, !dbg !61
  %602 = fadd float %586, %560, !dbg !61
  %603 = fadd float %587, %562, !dbg !61
  %604 = fadd float %588, %564, !dbg !61
  %605 = fadd float %589, %570, !dbg !61
  %606 = fadd float %590, %572, !dbg !61
  %607 = fadd float %591, %574, !dbg !61
  %608 = fadd float %592, %576, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %609 = shl i32 %11, 10, !dbg !63
  %610 = and i32 %609, 3072, !dbg !63
  %611 = or disjoint i32 %35, %610, !dbg !63
  %612 = lshr exact i32 %610, 6, !dbg !63
  %613 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %612, !dbg !63
  %614 = getelementptr float, ptr addrspace(3) %613, i32 %611, !dbg !63
  %615 = bitcast float %593 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %614, <1 x i32> %615, i1 true) #3, !dbg !63
  %616 = or disjoint i32 %611, 256, !dbg !63
  %617 = lshr i32 %616, 8, !dbg !63
  %618 = getelementptr float, ptr addrspace(3) @global_smem, i32 %617, !dbg !63
  %619 = getelementptr float, ptr addrspace(3) %618, i32 %616, !dbg !63
  %620 = bitcast float %594 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %619, <1 x i32> %620, i1 true) #3, !dbg !63
  %621 = or disjoint i32 %611, 512, !dbg !63
  %622 = lshr i32 %621, 8, !dbg !63
  %623 = getelementptr float, ptr addrspace(3) @global_smem, i32 %622, !dbg !63
  %624 = getelementptr float, ptr addrspace(3) %623, i32 %621, !dbg !63
  %625 = bitcast float %595 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %624, <1 x i32> %625, i1 true) #3, !dbg !63
  %626 = or disjoint i32 %611, 768, !dbg !63
  %627 = lshr i32 %626, 8, !dbg !63
  %628 = getelementptr float, ptr addrspace(3) @global_smem, i32 %627, !dbg !63
  %629 = getelementptr float, ptr addrspace(3) %628, i32 %626, !dbg !63
  %630 = bitcast float %596 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %629, <1 x i32> %630, i1 true) #3, !dbg !63
  %631 = or disjoint i32 %611, 64, !dbg !63
  %632 = getelementptr float, ptr addrspace(3) %613, i32 %631, !dbg !63
  %633 = bitcast float %597 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %633, i1 true) #3, !dbg !63
  %634 = or disjoint i32 %611, 320, !dbg !63
  %635 = lshr i32 %634, 8, !dbg !63
  %636 = getelementptr float, ptr addrspace(3) @global_smem, i32 %635, !dbg !63
  %637 = getelementptr float, ptr addrspace(3) %636, i32 %634, !dbg !63
  %638 = bitcast float %598 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %637, <1 x i32> %638, i1 true) #3, !dbg !63
  %639 = or disjoint i32 %611, 576, !dbg !63
  %640 = lshr i32 %639, 8, !dbg !63
  %641 = getelementptr float, ptr addrspace(3) @global_smem, i32 %640, !dbg !63
  %642 = getelementptr float, ptr addrspace(3) %641, i32 %639, !dbg !63
  %643 = bitcast float %599 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %642, <1 x i32> %643, i1 true) #3, !dbg !63
  %644 = or disjoint i32 %611, 832, !dbg !63
  %645 = lshr i32 %644, 8, !dbg !63
  %646 = getelementptr float, ptr addrspace(3) @global_smem, i32 %645, !dbg !63
  %647 = getelementptr float, ptr addrspace(3) %646, i32 %644, !dbg !63
  %648 = bitcast float %600 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %648, i1 true) #3, !dbg !63
  %649 = or disjoint i32 %611, 128, !dbg !63
  %650 = getelementptr float, ptr addrspace(3) %613, i32 %649, !dbg !63
  %651 = bitcast float %601 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %650, <1 x i32> %651, i1 true) #3, !dbg !63
  %652 = or disjoint i32 %611, 384, !dbg !63
  %653 = lshr i32 %652, 8, !dbg !63
  %654 = getelementptr float, ptr addrspace(3) @global_smem, i32 %653, !dbg !63
  %655 = getelementptr float, ptr addrspace(3) %654, i32 %652, !dbg !63
  %656 = bitcast float %602 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %655, <1 x i32> %656, i1 true) #3, !dbg !63
  %657 = or disjoint i32 %611, 640, !dbg !63
  %658 = lshr i32 %657, 8, !dbg !63
  %659 = getelementptr float, ptr addrspace(3) @global_smem, i32 %658, !dbg !63
  %660 = getelementptr float, ptr addrspace(3) %659, i32 %657, !dbg !63
  %661 = bitcast float %603 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %660, <1 x i32> %661, i1 true) #3, !dbg !63
  %662 = or disjoint i32 %611, 896, !dbg !63
  %663 = lshr i32 %662, 8, !dbg !63
  %664 = getelementptr float, ptr addrspace(3) @global_smem, i32 %663, !dbg !63
  %665 = getelementptr float, ptr addrspace(3) %664, i32 %662, !dbg !63
  %666 = bitcast float %604 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %665, <1 x i32> %666, i1 true) #3, !dbg !63
  %667 = or disjoint i32 %611, 192, !dbg !63
  %668 = getelementptr float, ptr addrspace(3) %613, i32 %667, !dbg !63
  %669 = bitcast float %605 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %668, <1 x i32> %669, i1 true) #3, !dbg !63
  %670 = or disjoint i32 %611, 448, !dbg !63
  %671 = lshr i32 %670, 8, !dbg !63
  %672 = getelementptr float, ptr addrspace(3) @global_smem, i32 %671, !dbg !63
  %673 = getelementptr float, ptr addrspace(3) %672, i32 %670, !dbg !63
  %674 = bitcast float %606 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %673, <1 x i32> %674, i1 true) #3, !dbg !63
  %675 = or disjoint i32 %611, 704, !dbg !63
  %676 = lshr i32 %675, 8, !dbg !63
  %677 = getelementptr float, ptr addrspace(3) @global_smem, i32 %676, !dbg !63
  %678 = getelementptr float, ptr addrspace(3) %677, i32 %675, !dbg !63
  %679 = bitcast float %607 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %678, <1 x i32> %679, i1 true) #3, !dbg !63
  %680 = or disjoint i32 %611, 960, !dbg !63
  %681 = lshr i32 %680, 8, !dbg !63
  %682 = getelementptr float, ptr addrspace(3) @global_smem, i32 %681, !dbg !63
  %683 = getelementptr float, ptr addrspace(3) %682, i32 %680, !dbg !63
  %684 = bitcast float %608 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %683, <1 x i32> %684, i1 true) #3, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %685 = lshr i32 %449, 8, !dbg !63
  %686 = or disjoint i32 %685, %449, !dbg !63
  %687 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %686, !dbg !63
  %688 = load i32, ptr addrspace(3) %687, align 4, !dbg !63
  %689 = or disjoint i32 %449, 1, !dbg !63
  %690 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %685, !dbg !63
  %691 = getelementptr inbounds float, ptr addrspace(3) %690, i32 %689, !dbg !63
  %692 = load i32, ptr addrspace(3) %691, align 4, !dbg !63
  %693 = or disjoint i32 %449, 2, !dbg !63
  %694 = getelementptr inbounds float, ptr addrspace(3) %690, i32 %693, !dbg !63
  %695 = load i32, ptr addrspace(3) %694, align 4, !dbg !63
  %696 = or disjoint i32 %449, 3, !dbg !63
  %697 = getelementptr inbounds float, ptr addrspace(3) %690, i32 %696, !dbg !63
  %698 = load i32, ptr addrspace(3) %697, align 4, !dbg !63
  %699 = lshr i32 %541, 8, !dbg !63
  %700 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %699, !dbg !63
  %701 = getelementptr inbounds float, ptr addrspace(3) %700, i32 %541, !dbg !63
  %702 = load i32, ptr addrspace(3) %701, align 4, !dbg !63
  %703 = or disjoint i32 %449, 1025, !dbg !63
  %704 = lshr i32 %703, 8, !dbg !63
  %705 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %704, !dbg !63
  %706 = getelementptr inbounds float, ptr addrspace(3) %705, i32 %703, !dbg !63
  %707 = load i32, ptr addrspace(3) %706, align 4, !dbg !63
  %708 = or disjoint i32 %449, 1026, !dbg !63
  %709 = lshr i32 %708, 8, !dbg !63
  %710 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %709, !dbg !63
  %711 = getelementptr inbounds float, ptr addrspace(3) %710, i32 %708, !dbg !63
  %712 = load i32, ptr addrspace(3) %711, align 4, !dbg !63
  %713 = or disjoint i32 %449, 1027, !dbg !63
  %714 = lshr i32 %713, 8, !dbg !63
  %715 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %714, !dbg !63
  %716 = getelementptr inbounds float, ptr addrspace(3) %715, i32 %713, !dbg !63
  %717 = load i32, ptr addrspace(3) %716, align 4, !dbg !63
  %718 = lshr i32 %553, 8, !dbg !63
  %719 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %718, !dbg !63
  %720 = getelementptr inbounds float, ptr addrspace(3) %719, i32 %553, !dbg !63
  %721 = load i32, ptr addrspace(3) %720, align 4, !dbg !63
  %722 = or disjoint i32 %449, 2049, !dbg !63
  %723 = lshr i32 %722, 8, !dbg !63
  %724 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %723, !dbg !63
  %725 = getelementptr inbounds float, ptr addrspace(3) %724, i32 %722, !dbg !63
  %726 = load i32, ptr addrspace(3) %725, align 4, !dbg !63
  %727 = or disjoint i32 %449, 2050, !dbg !63
  %728 = lshr i32 %727, 8, !dbg !63
  %729 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %728, !dbg !63
  %730 = getelementptr inbounds float, ptr addrspace(3) %729, i32 %727, !dbg !63
  %731 = load i32, ptr addrspace(3) %730, align 4, !dbg !63
  %732 = or disjoint i32 %449, 2051, !dbg !63
  %733 = lshr i32 %732, 8, !dbg !63
  %734 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %733, !dbg !63
  %735 = getelementptr inbounds float, ptr addrspace(3) %734, i32 %732, !dbg !63
  %736 = load i32, ptr addrspace(3) %735, align 4, !dbg !63
  %737 = lshr i32 %565, 8, !dbg !63
  %738 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %737, !dbg !63
  %739 = getelementptr inbounds float, ptr addrspace(3) %738, i32 %565, !dbg !63
  %740 = load i32, ptr addrspace(3) %739, align 4, !dbg !63
  %741 = or disjoint i32 %449, 3073, !dbg !63
  %742 = lshr i32 %741, 8, !dbg !63
  %743 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %742, !dbg !63
  %744 = getelementptr inbounds float, ptr addrspace(3) %743, i32 %741, !dbg !63
  %745 = load i32, ptr addrspace(3) %744, align 4, !dbg !63
  %746 = or disjoint i32 %449, 3074, !dbg !63
  %747 = lshr i32 %746, 8, !dbg !63
  %748 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %747, !dbg !63
  %749 = getelementptr inbounds float, ptr addrspace(3) %748, i32 %746, !dbg !63
  %750 = load i32, ptr addrspace(3) %749, align 4, !dbg !63
  %751 = or disjoint i32 %449, 3075, !dbg !63
  %752 = lshr i32 %751, 8, !dbg !63
  %753 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %752, !dbg !63
  %754 = getelementptr inbounds float, ptr addrspace(3) %753, i32 %751, !dbg !63
  %755 = load i32, ptr addrspace(3) %754, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %688, i32 %692, i32 %695, i32 %698, ptr addrspace(1) %73, i1 %80) #3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %702, i32 %707, i32 %712, i32 %717, ptr addrspace(1) %75, i1 %81) #3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %721, i32 %726, i32 %731, i32 %736, ptr addrspace(1) %77, i1 %82) #3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %740, i32 %745, i32 %750, i32 %755, ptr addrspace(1) %79, i1 %83) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2saqzgkixge2ceyzt36gpl54middaeipgy6tvhhngrgdks4pnis.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_8", linkageName: "triton_poi_fused_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 34, scope: !7)
!27 = !DILocation(line: 34, column: 56, scope: !7)
!28 = !DILocation(line: 34, column: 48, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 39, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 39, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 44, scope: !7)
!36 = !DILocation(line: 37, column: 34, scope: !7)
!37 = !DILocation(line: 37, column: 48, scope: !7)
!38 = !DILocation(line: 37, column: 45, scope: !7)
!39 = !DILocation(line: 37, column: 60, scope: !7)
!40 = !DILocation(line: 38, column: 80, scope: !7)
!41 = !DILocation(line: 37, column: 55, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 66, scope: !7)
!44 = !DILocation(line: 38, column: 57, scope: !7)
!45 = !DILocation(line: 38, column: 98, scope: !7)
!46 = !DILocation(line: 38, column: 92, scope: !7)
!47 = !DILocation(line: 38, column: 109, scope: !7)
!48 = !DILocation(line: 38, column: 35, scope: !7)
!49 = !DILocation(line: 38, column: 103, scope: !7)
!50 = !DILocation(line: 38, column: 51, scope: !7)
!51 = !DILocation(line: 38, column: 68, scope: !7)
!52 = !DILocation(line: 38, column: 85, scope: !7)
!53 = !DILocation(line: 38, column: 30, scope: !7)
!54 = !DILocation(line: 38, column: 114, scope: !7)
!55 = !DILocation(line: 39, column: 30, scope: !7)
!56 = !DILocation(line: 39, column: 35, scope: !7)
!57 = !DILocation(line: 40, column: 18, scope: !7)
!58 = !DILocation(line: 41, column: 18, scope: !7)
!59 = !DILocation(line: 42, column: 18, scope: !7)
!60 = !DILocation(line: 43, column: 18, scope: !7)
!61 = !DILocation(line: 44, column: 19, scope: !7)
!62 = !DILocation(line: 45, column: 4, scope: !7)
!63 = !DILocation(line: 46, column: 49, scope: !7)
!64 = !DILocation(line: 46, column: 4, scope: !7)
