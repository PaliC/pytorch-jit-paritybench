; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %21 = shl i32 %20, 8, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = shl i32 %22, 1, !dbg !12
  %24 = and i32 %23, 254, !dbg !12
  %25 = or disjoint i32 %21, %24, !dbg !13
  %26 = icmp slt i32 %25, 3136, !dbg !14
  %.frozen = freeze i32 %25, !dbg !15
  %27 = sdiv i32 %.frozen, 14, !dbg !15
  %28 = srem i32 %27, 14, !dbg !16
  %29 = mul i32 %27, 14, !dbg !17
  %.decomposed = sub i32 %.frozen, %29, !dbg !17
  %30 = sdiv i32 %25, 196, !dbg !18
  %31 = srem i32 %30, 4, !dbg !19
  %32 = sext i32 %25 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %26) #3, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !22
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %26) #3, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !24
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %26) #3, !dbg !25
  %39 = sext i32 %28 to i64, !dbg !26
  %40 = getelementptr i64, ptr addrspace(1) %3, i64 %39, !dbg !26
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %26) #3, !dbg !27
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %26) #3, !dbg !27
  %43 = sext i32 %.decomposed to i64, !dbg !28
  %44 = getelementptr i64, ptr addrspace(1) %4, i64 %43, !dbg !28
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 %26) #3, !dbg !29
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !29
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !29
  %48 = getelementptr i64, ptr addrspace(1) %8, i64 %39, !dbg !30
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %26) #3, !dbg !31
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %26) #3, !dbg !31
  %51 = getelementptr i64, ptr addrspace(1) %9, i64 %43, !dbg !32
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %51, i1 %26) #3, !dbg !33
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !33
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %10, i64 %43, !dbg !34
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %26) #3, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %11, i64 %39, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #3, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #3, !dbg !37
  %60 = sext i32 %31 to i64, !dbg !38
  %61 = getelementptr float, ptr addrspace(1) %12, i64 %60, !dbg !38
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %26) #3, !dbg !39
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %26) #3, !dbg !39
  %64 = getelementptr float, ptr addrspace(1) %13, i64 %60, !dbg !40
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %26) #3, !dbg !41
  %66 = bitcast i32 %65 to float, !dbg !41
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %26) #3, !dbg !41
  %68 = bitcast i32 %67 to float, !dbg !41
  %69 = getelementptr float, ptr addrspace(1) %14, i64 %60, !dbg !42
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %26) #3, !dbg !43
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %26) #3, !dbg !43
  %72 = getelementptr float, ptr addrspace(1) %15, i64 %60, !dbg !44
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %26) #3, !dbg !45
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %26) #3, !dbg !45
  %75 = add i64 %41, 7, !dbg !46
  %76 = icmp slt i64 %41, 0, !dbg !47
  %77 = select i1 %76, i64 %75, i64 %41, !dbg !48
  %78 = add i64 %46, 7, !dbg !49
  %79 = add i64 %47, 7, !dbg !49
  %80 = icmp slt i64 %46, 0, !dbg !50
  %81 = icmp slt i64 %47, 0, !dbg !50
  %82 = select i1 %80, i64 %78, i64 %46, !dbg !51
  %83 = select i1 %81, i64 %79, i64 %47, !dbg !51
  %84 = mul i64 %77, 7, !dbg !52
  %85 = mul nsw i32 %30, 49, !dbg !53
  %86 = sext i32 %85 to i64, !dbg !54
  %87 = add i64 %84, %86, !dbg !55
  %88 = add i64 %87, %82, !dbg !54
  %89 = add i64 %87, %83, !dbg !54
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %88, !dbg !56
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %89, !dbg !56
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %26) #3, !dbg !57
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %26) #3, !dbg !57
  %94 = getelementptr float, ptr addrspace(1) %6, i64 %88, !dbg !58
  %95 = getelementptr float, ptr addrspace(1) %6, i64 %89, !dbg !58
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %26) #3, !dbg !59
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %26) #3, !dbg !59
  %98 = getelementptr float, ptr addrspace(1) %7, i64 %88, !dbg !60
  %99 = getelementptr float, ptr addrspace(1) %7, i64 %89, !dbg !60
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %26) #3, !dbg !61
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %26) #3, !dbg !61
  %102 = add i64 %49, 7, !dbg !62
  %103 = icmp slt i64 %49, 0, !dbg !63
  %104 = select i1 %103, i64 %102, i64 %49, !dbg !64
  %105 = mul i64 %104, 7, !dbg !65
  %106 = add i64 %105, %86, !dbg !66
  %107 = add i64 %106, %82, !dbg !67
  %108 = add i64 %106, %83, !dbg !67
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %107, !dbg !68
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %108, !dbg !68
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %26) #3, !dbg !69
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %26) #3, !dbg !69
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %107, !dbg !70
  %114 = getelementptr float, ptr addrspace(1) %6, i64 %108, !dbg !70
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %26) #3, !dbg !71
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %26) #3, !dbg !71
  %117 = getelementptr float, ptr addrspace(1) %7, i64 %107, !dbg !72
  %118 = getelementptr float, ptr addrspace(1) %7, i64 %108, !dbg !72
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %26) #3, !dbg !73
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %26) #3, !dbg !73
  %121 = add i64 %53, 7, !dbg !74
  %122 = add i64 %54, 7, !dbg !74
  %123 = icmp slt i64 %53, 0, !dbg !75
  %124 = icmp slt i64 %54, 0, !dbg !75
  %125 = select i1 %123, i64 %121, i64 %53, !dbg !76
  %126 = select i1 %124, i64 %122, i64 %54, !dbg !76
  %127 = add i64 %106, %125, !dbg !77
  %128 = add i64 %106, %126, !dbg !77
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %127, !dbg !78
  %130 = getelementptr float, ptr addrspace(1) %5, i64 %128, !dbg !78
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %26) #3, !dbg !79
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %26) #3, !dbg !79
  %133 = getelementptr float, ptr addrspace(1) %6, i64 %127, !dbg !80
  %134 = getelementptr float, ptr addrspace(1) %6, i64 %128, !dbg !80
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %26) #3, !dbg !81
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %26) #3, !dbg !81
  %137 = getelementptr float, ptr addrspace(1) %7, i64 %127, !dbg !82
  %138 = getelementptr float, ptr addrspace(1) %7, i64 %128, !dbg !82
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %26) #3, !dbg !83
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %26) #3, !dbg !83
  %141 = add i64 %87, %125, !dbg !84
  %142 = add i64 %87, %126, !dbg !84
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %141, !dbg !85
  %144 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !85
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %26) #3, !dbg !86
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %26) #3, !dbg !86
  %147 = getelementptr float, ptr addrspace(1) %6, i64 %141, !dbg !87
  %148 = getelementptr float, ptr addrspace(1) %6, i64 %142, !dbg !87
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %26) #3, !dbg !88
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %26) #3, !dbg !88
  %151 = getelementptr float, ptr addrspace(1) %7, i64 %141, !dbg !89
  %152 = getelementptr float, ptr addrspace(1) %7, i64 %142, !dbg !89
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %26) #3, !dbg !90
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %26) #3, !dbg !90
  %155 = fadd float %66, 0x3EE4F8B580000000, !dbg !91
  %156 = fadd float %68, 0x3EE4F8B580000000, !dbg !91
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i = icmp eq i32 %157, 0, !dbg !92
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i = icmp eq i32 %158, 0, !dbg !92
  br i1 %.not.i, label %164, label %159, !dbg !92

159:                                              ; preds = %19
  br i1 %.not1.i, label %162, label %160, !dbg !92

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !92
  br label %__nv_sqrtf.exit, !dbg !92

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !92
  br label %__nv_sqrtf.exit, !dbg !92

164:                                              ; preds = %19
  br i1 %.not1.i, label %167, label %165, !dbg !92

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !92
  br label %__nv_sqrtf.exit, !dbg !92

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !92
  br label %__nv_sqrtf.exit, !dbg !92

__nv_sqrtf.exit:                                  ; preds = %160, %162, %165, %167
  %.0.i = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !92
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i1 = icmp eq i32 %169, 0, !dbg !92
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i4 = icmp eq i32 %170, 0, !dbg !92
  br i1 %.not.i1, label %176, label %171, !dbg !92

171:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %174, label %172, !dbg !92

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !92
  br label %__nv_sqrtf.exit5, !dbg !92

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !92
  br label %__nv_sqrtf.exit5, !dbg !92

176:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %179, label %177, !dbg !92

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !92
  br label %__nv_sqrtf.exit5, !dbg !92

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !92
  br label %__nv_sqrtf.exit5, !dbg !92

__nv_sqrtf.exit5:                                 ; preds = %172, %174, %177, %179
  %.0.i3 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !92
  %181 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !59
  %182 = insertelement <2 x i32> %181, i32 %116, i64 1, !dbg !59
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !59
  %184 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !61
  %185 = insertelement <2 x i32> %184, i32 %120, i64 1, !dbg !61
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !61
  %187 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !57
  %188 = insertelement <2 x i32> %187, i32 %112, i64 1, !dbg !57
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !57
  %190 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !88
  %191 = insertelement <2 x i32> %190, i32 %136, i64 1, !dbg !88
  %192 = bitcast <2 x i32> %191 to <2 x float>, !dbg !88
  %193 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !90
  %194 = insertelement <2 x i32> %193, i32 %140, i64 1, !dbg !90
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !90
  %196 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !86
  %197 = insertelement <2 x i32> %196, i32 %132, i64 1, !dbg !86
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !86
  %199 = extractvalue { i32, i32 } %56, 1, !dbg !35
  %200 = fadd <2 x float> %183, %186, !dbg !93
  %201 = fadd <2 x float> %200, %189, !dbg !94
  %202 = fadd <2 x float> %192, %195, !dbg !95
  %203 = fadd <2 x float> %202, %198, !dbg !96
  %204 = fsub <2 x float> %203, %201, !dbg !97
  %205 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !98
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !98
  %207 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !98
  %208 = fmul <2 x float> %204, %207, !dbg !98
  %209 = fadd <2 x float> %201, %208, !dbg !99
  %210 = extractelement <2 x float> %209, i64 0, !dbg !100
  %211 = extractelement <2 x float> %209, i64 1, !dbg !101
  %212 = fsub float %210, %211, !dbg !100
  %213 = bitcast i32 %59 to float, !dbg !37
  %214 = fmul float %212, %213, !dbg !102
  %215 = fadd float %211, %214, !dbg !101
  %216 = extractvalue { i32, i32 } %36, 1, !dbg !23
  %217 = bitcast i32 %216 to float, !dbg !23
  %218 = extractvalue { i32, i32 } %38, 1, !dbg !25
  %219 = bitcast i32 %218 to float, !dbg !25
  %220 = fadd float %217, %219, !dbg !103
  %221 = extractvalue { i32, i32 } %34, 1, !dbg !21
  %222 = bitcast i32 %221 to float, !dbg !21
  %223 = fadd float %220, %222, !dbg !104
  %224 = fadd float %223, %215, !dbg !105
  %225 = bitcast i32 %63 to float, !dbg !39
  %226 = fsub float %224, %225, !dbg !106
  %227 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !59
  %228 = insertelement <2 x i32> %227, i32 %115, i64 1, !dbg !59
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !59
  %230 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !61
  %231 = insertelement <2 x i32> %230, i32 %119, i64 1, !dbg !61
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !61
  %233 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !57
  %234 = insertelement <2 x i32> %233, i32 %111, i64 1, !dbg !57
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !57
  %236 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !88
  %237 = insertelement <2 x i32> %236, i32 %135, i64 1, !dbg !88
  %238 = bitcast <2 x i32> %237 to <2 x float>, !dbg !88
  %239 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !90
  %240 = insertelement <2 x i32> %239, i32 %139, i64 1, !dbg !90
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !90
  %242 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !86
  %243 = insertelement <2 x i32> %242, i32 %131, i64 1, !dbg !86
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !86
  %245 = extractvalue { i32, i32 } %56, 0, !dbg !35
  %246 = fadd <2 x float> %229, %232, !dbg !93
  %247 = fadd <2 x float> %246, %235, !dbg !94
  %248 = fadd <2 x float> %238, %241, !dbg !95
  %249 = fadd <2 x float> %248, %244, !dbg !96
  %250 = fsub <2 x float> %249, %247, !dbg !97
  %251 = insertelement <2 x i32> poison, i32 %245, i64 0, !dbg !98
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !98
  %253 = shufflevector <2 x float> %252, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !98
  %254 = fmul <2 x float> %250, %253, !dbg !98
  %255 = fadd <2 x float> %247, %254, !dbg !99
  %256 = extractelement <2 x float> %255, i64 0, !dbg !100
  %257 = extractelement <2 x float> %255, i64 1, !dbg !101
  %258 = fsub float %256, %257, !dbg !100
  %259 = bitcast i32 %58 to float, !dbg !37
  %260 = fmul float %258, %259, !dbg !102
  %261 = fadd float %257, %260, !dbg !101
  %262 = extractvalue { i32, i32 } %36, 0, !dbg !23
  %263 = bitcast i32 %262 to float, !dbg !23
  %264 = extractvalue { i32, i32 } %38, 0, !dbg !25
  %265 = bitcast i32 %264 to float, !dbg !25
  %266 = fadd float %263, %265, !dbg !103
  %267 = extractvalue { i32, i32 } %34, 0, !dbg !21
  %268 = bitcast i32 %267 to float, !dbg !21
  %269 = fadd float %266, %268, !dbg !104
  %270 = fadd float %269, %261, !dbg !105
  %271 = bitcast i32 %62 to float, !dbg !39
  %272 = fsub float %270, %271, !dbg !106
  %273 = bitcast i32 %74 to float, !dbg !45
  %274 = bitcast i32 %73 to float, !dbg !45
  %275 = bitcast i32 %71 to float, !dbg !43
  %276 = bitcast i32 %70 to float, !dbg !43
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !107
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !107
  %279 = fmul float %272, %277, !dbg !108
  %280 = fmul float %226, %278, !dbg !108
  %281 = fmul float %279, %276, !dbg !109
  %282 = fmul float %280, %275, !dbg !109
  %283 = fadd float %281, %274, !dbg !110
  %284 = fadd float %282, %273, !dbg !110
  %285 = fcmp olt float %283, 0.000000e+00, !dbg !111
  %286 = fcmp olt float %284, 0.000000e+00, !dbg !111
  %287 = select i1 %285, float 0.000000e+00, float %283, !dbg !115
  %288 = select i1 %286, float 0.000000e+00, float %284, !dbg !115
  %289 = bitcast float %269 to i32, !dbg !116
  %290 = bitcast float %223 to i32, !dbg !116
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %289, i32 %290, ptr addrspace(1) %33, i1 %26) #3, !dbg !116
  %291 = getelementptr float, ptr addrspace(1) %16, i64 %32, !dbg !117
  %292 = bitcast float %287 to i32, !dbg !118
  %293 = bitcast float %288 to i32, !dbg !118
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %292, i32 %293, ptr addrspace(1) %291, i1 %26) #3, !dbg !118
  %294 = getelementptr float, ptr addrspace(1) %17, i64 %32, !dbg !119
  %295 = bitcast float %272 to i32, !dbg !120
  %296 = bitcast float %226 to i32, !dbg !120
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %295, i32 %296, ptr addrspace(1) %294, i1 %26) #3, !dbg !120
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnveygaltxg3jfaamtv5iml7cngqn5rkxdfgz7plpqvfaeyak7dc.py", directory: "inductor_cache/nv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 28, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 39, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 32, scope: !7)
!37 = !DILocation(line: 37, column: 37, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 45, column: 18, scope: !7)
!47 = !DILocation(line: 46, column: 18, scope: !7)
!48 = !DILocation(line: 47, column: 32, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 35, scope: !7)
!52 = !DILocation(line: 51, column: 41, scope: !7)
!53 = !DILocation(line: 51, column: 51, scope: !7)
!54 = !DILocation(line: 51, column: 48, scope: !7)
!55 = !DILocation(line: 51, column: 39, scope: !7)
!56 = !DILocation(line: 51, column: 31, scope: !7)
!57 = !DILocation(line: 51, column: 56, scope: !7)
!58 = !DILocation(line: 52, column: 31, scope: !7)
!59 = !DILocation(line: 52, column: 56, scope: !7)
!60 = !DILocation(line: 53, column: 31, scope: !7)
!61 = !DILocation(line: 53, column: 56, scope: !7)
!62 = !DILocation(line: 56, column: 20, scope: !7)
!63 = !DILocation(line: 57, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 35, scope: !7)
!65 = !DILocation(line: 59, column: 41, scope: !7)
!66 = !DILocation(line: 59, column: 39, scope: !7)
!67 = !DILocation(line: 59, column: 49, scope: !7)
!68 = !DILocation(line: 59, column: 31, scope: !7)
!69 = !DILocation(line: 59, column: 57, scope: !7)
!70 = !DILocation(line: 60, column: 31, scope: !7)
!71 = !DILocation(line: 60, column: 57, scope: !7)
!72 = !DILocation(line: 61, column: 31, scope: !7)
!73 = !DILocation(line: 61, column: 57, scope: !7)
!74 = !DILocation(line: 64, column: 20, scope: !7)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 66, column: 35, scope: !7)
!77 = !DILocation(line: 67, column: 49, scope: !7)
!78 = !DILocation(line: 67, column: 31, scope: !7)
!79 = !DILocation(line: 67, column: 57, scope: !7)
!80 = !DILocation(line: 68, column: 31, scope: !7)
!81 = !DILocation(line: 68, column: 57, scope: !7)
!82 = !DILocation(line: 69, column: 31, scope: !7)
!83 = !DILocation(line: 69, column: 57, scope: !7)
!84 = !DILocation(line: 75, column: 48, scope: !7)
!85 = !DILocation(line: 75, column: 31, scope: !7)
!86 = !DILocation(line: 75, column: 56, scope: !7)
!87 = !DILocation(line: 76, column: 31, scope: !7)
!88 = !DILocation(line: 76, column: 56, scope: !7)
!89 = !DILocation(line: 77, column: 31, scope: !7)
!90 = !DILocation(line: 77, column: 56, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 90, column: 27, scope: !7)
!93 = !DILocation(line: 54, column: 20, scope: !7)
!94 = !DILocation(line: 55, column: 20, scope: !7)
!95 = !DILocation(line: 78, column: 20, scope: !7)
!96 = !DILocation(line: 79, column: 20, scope: !7)
!97 = !DILocation(line: 80, column: 20, scope: !7)
!98 = !DILocation(line: 81, column: 20, scope: !7)
!99 = !DILocation(line: 82, column: 20, scope: !7)
!100 = !DILocation(line: 83, column: 20, scope: !7)
!101 = !DILocation(line: 85, column: 20, scope: !7)
!102 = !DILocation(line: 84, column: 20, scope: !7)
!103 = !DILocation(line: 42, column: 18, scope: !7)
!104 = !DILocation(line: 43, column: 18, scope: !7)
!105 = !DILocation(line: 86, column: 20, scope: !7)
!106 = !DILocation(line: 87, column: 20, scope: !7)
!107 = !DILocation(line: 92, column: 20, scope: !7)
!108 = !DILocation(line: 95, column: 20, scope: !7)
!109 = !DILocation(line: 96, column: 20, scope: !7)
!110 = !DILocation(line: 97, column: 20, scope: !7)
!111 = !DILocation(line: 118, column: 15, scope: !112, inlinedAt: !114)
!112 = distinct !DILexicalBlockFile(scope: !7, file: !113, discriminator: 0)
!113 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!114 = !DILocation(line: 99, column: 42, scope: !7)
!115 = !DILocation(line: 121, column: 29, scope: !112, inlinedAt: !114)
!116 = !DILocation(line: 100, column: 39, scope: !7)
!117 = !DILocation(line: 101, column: 25, scope: !7)
!118 = !DILocation(line: 101, column: 37, scope: !7)
!119 = !DILocation(line: 102, column: 25, scope: !7)
!120 = !DILocation(line: 102, column: 37, scope: !7)
!121 = !DILocation(line: 102, column: 4, scope: !7)
