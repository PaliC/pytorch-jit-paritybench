; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = icmp slt i32 %14, 39936, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %19 = sdiv i32 %.frozen, 64, !dbg !15
  %20 = srem i32 %19, 156, !dbg !16
  %21 = mul i32 %19, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = srem i32 %15, 64, !dbg !17
  %23 = srem i32 %16, 64, !dbg !17
  %24 = srem i32 %17, 64, !dbg !17
  %.frozen19 = freeze i32 %14, !dbg !18
  %25 = sdiv i32 %.frozen19, 9984, !dbg !18
  %26 = mul i32 %25, 9984, !dbg !19
  %.decomposed20 = sub i32 %.frozen19, %26, !dbg !19
  %27 = icmp slt i32 %20, 104, !dbg !20
  %28 = mul nsw i32 %25, 6656, !dbg !21
  %29 = add nsw i32 %28, %.decomposed20, !dbg !22
  %30 = sext i32 %29 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = and i1 %18, %27, !dbg !24
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #3, !dbg !25
  %34 = icmp sgt i32 %20, 103, !dbg !26
  %35 = mul nsw i32 %.decomposed, 52, !dbg !27
  %36 = mul nsw i32 %22, 52, !dbg !27
  %37 = mul nsw i32 %23, 52, !dbg !27
  %38 = mul nsw i32 %24, 52, !dbg !27
  %39 = mul nsw i32 %25, 3328, !dbg !28
  %40 = add nsw i32 %20, -104, !dbg !29
  %41 = add nsw i32 %40, %39, !dbg !30
  %42 = add nsw i32 %41, %35, !dbg !31
  %43 = add nsw i32 %41, %36, !dbg !31
  %44 = add nsw i32 %41, %37, !dbg !31
  %45 = add nsw i32 %41, %38, !dbg !31
  %46 = sext i32 %42 to i64, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !32
  %48 = sext i32 %43 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !32
  %50 = sext i32 %44 to i64, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !32
  %52 = sext i32 %45 to i64, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !32
  %54 = and i1 %18, %34, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %54, i32 0, i1 %54) #3, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %54, i32 0, i1 %54) #3, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %54, i32 0, i1 %54) #3, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54) #3, !dbg !34
  %59 = sext i32 %40 to i64, !dbg !35
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !35
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %54, i32 0, i1 %54) #3, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %54, i32 0, i1 %54) #3, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %54, i32 0, i1 %54) #3, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %54, i32 0, i1 %54) #3, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %54, i32 0, i1 %54) #3, !dbg !38
  %67 = bitcast i32 %66 to float, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %54, i32 0, i1 %54) #3, !dbg !38
  %69 = bitcast i32 %68 to float, !dbg !38
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %54, i32 0, i1 %54) #3, !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %54, i32 0, i1 %54) #3, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = fadd float %67, 0x3EE4F8B580000000, !dbg !39
  %75 = fadd float %69, 0x3EE4F8B580000000, !dbg !39
  %76 = fadd float %71, 0x3EE4F8B580000000, !dbg !39
  %77 = fadd float %73, 0x3EE4F8B580000000, !dbg !39
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %78, 0, !dbg !40
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %79, 0, !dbg !40
  br i1 %.not.i, label %85, label %80, !dbg !40

80:                                               ; preds = %8
  br i1 %.not1.i, label %83, label %81, !dbg !40

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

85:                                               ; preds = %8
  br i1 %.not1.i, label %88, label %86, !dbg !40

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !40
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %90, 0, !dbg !40
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %91, 0, !dbg !40
  br i1 %.not.i1, label %97, label %92, !dbg !40

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !40

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !40

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %93, %95, %98, %100
  %.0.i3 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !40
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %102, 0, !dbg !40
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %103, 0, !dbg !40
  br i1 %.not.i6, label %109, label %104, !dbg !40

104:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %107, label %105, !dbg !40

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

109:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %112, label %110, !dbg !40

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %105, %107, %110, %112
  %.0.i8 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !40
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %114, 0, !dbg !40
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i14 = icmp eq i32 %115, 0, !dbg !40
  br i1 %.not.i11, label %121, label %116, !dbg !40

116:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %119, label %117, !dbg !40

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

121:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %124, label %122, !dbg !40

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %117, %119, %122, %124
  %.0.i13 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !40
  %126 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !34
  %127 = insertelement <4 x i32> %126, i32 %57, i64 1, !dbg !34
  %128 = insertelement <4 x i32> %127, i32 %56, i64 2, !dbg !34
  %129 = insertelement <4 x i32> %128, i32 %55, i64 3, !dbg !34
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !34
  %131 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !36
  %132 = insertelement <4 x i32> %131, i32 %63, i64 1, !dbg !36
  %133 = insertelement <4 x i32> %132, i32 %62, i64 2, !dbg !36
  %134 = insertelement <4 x i32> %133, i32 %61, i64 3, !dbg !36
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !25
  %138 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !25
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %144 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !42
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %54, i32 0, i1 %54) #3, !dbg !43
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %54, i32 0, i1 %54) #3, !dbg !43
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %54, i32 0, i1 %54) #3, !dbg !43
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %54, i32 0, i1 %54) #3, !dbg !43
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !44
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %54, i32 0, i1 %54) #3, !dbg !45
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %54, i32 0, i1 %54) #3, !dbg !45
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %54, i32 0, i1 %54) #3, !dbg !45
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %54, i32 0, i1 %54) #3, !dbg !45
  %154 = fsub <4 x float> %130, %135, !dbg !46
  %155 = insertelement <4 x float> poison, float %143, i64 0, !dbg !47
  %156 = insertelement <4 x float> %155, float %142, i64 1, !dbg !47
  %157 = insertelement <4 x float> %156, float %141, i64 2, !dbg !47
  %158 = insertelement <4 x float> %157, float %140, i64 3, !dbg !47
  %159 = fmul <4 x float> %154, %158, !dbg !47
  %160 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !43
  %161 = insertelement <4 x i32> %160, i32 %147, i64 1, !dbg !43
  %162 = insertelement <4 x i32> %161, i32 %146, i64 2, !dbg !43
  %163 = insertelement <4 x i32> %162, i32 %145, i64 3, !dbg !43
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !43
  %165 = fmul <4 x float> %159, %164, !dbg !48
  %166 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !45
  %167 = insertelement <4 x i32> %166, i32 %152, i64 1, !dbg !45
  %168 = insertelement <4 x i32> %167, i32 %151, i64 2, !dbg !45
  %169 = insertelement <4 x i32> %168, i32 %150, i64 3, !dbg !45
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !45
  %171 = fadd <4 x float> %165, %170, !dbg !49
  %172 = fcmp olt <4 x float> %171, zeroinitializer, !dbg !50
  %173 = extractelement <4 x i1> %172, i64 3, !dbg !54
  %174 = extractelement <4 x i1> %172, i64 2, !dbg !54
  %175 = extractelement <4 x i1> %172, i64 1, !dbg !54
  %176 = extractelement <4 x i1> %172, i64 0, !dbg !54
  %177 = mul i32 %25, 13312, !dbg !55
  %178 = add i32 %177, %.decomposed20, !dbg !56
  %179 = sext i32 %178 to i64, !dbg !57
  %180 = getelementptr float, ptr addrspace(1) %6, i64 %179, !dbg !57
  %bc = bitcast <4 x float> %171 to <4 x i32>, !dbg !58
  %181 = extractelement <4 x i32> %bc, i64 3, !dbg !58
  %182 = select i1 %173, i32 0, i32 %181, !dbg !54
  %183 = select i1 %27, i32 %139, i32 %182, !dbg !59
  %bc16 = bitcast <4 x float> %171 to <4 x i32>, !dbg !58
  %184 = extractelement <4 x i32> %bc16, i64 2, !dbg !58
  %185 = select i1 %174, i32 0, i32 %184, !dbg !54
  %186 = select i1 %27, i32 %138, i32 %185, !dbg !59
  %bc17 = bitcast <4 x float> %171 to <4 x i32>, !dbg !58
  %187 = extractelement <4 x i32> %bc17, i64 1, !dbg !58
  %188 = select i1 %175, i32 0, i32 %187, !dbg !54
  %189 = select i1 %27, i32 %137, i32 %188, !dbg !59
  %bc18 = bitcast <4 x float> %171 to <4 x i32>, !dbg !58
  %190 = extractelement <4 x i32> %bc18, i64 0, !dbg !58
  %191 = select i1 %176, i32 0, i32 %190, !dbg !54
  %192 = select i1 %27, i32 %136, i32 %191, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %183, i32 %186, i32 %189, i32 %192, ptr addrspace(1) %180, i1 %18) #3, !dbg !58
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3rsir6jdzge4pxroedd6hpib42tewvtx654sgn7qbxwhnornesb.py", directory: "inductor_cache/3r")
!4 = !{ptr @triton_poi_fused_cat_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_27", linkageName: "triton_poi_fused_cat_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 33, column: 50, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 62, scope: !7)
!25 = !DILocation(line: 33, column: 55, scope: !7)
!26 = !DILocation(line: 34, column: 19, scope: !7)
!27 = !DILocation(line: 37, column: 33, scope: !7)
!28 = !DILocation(line: 37, column: 43, scope: !7)
!29 = !DILocation(line: 37, column: 58, scope: !7)
!30 = !DILocation(line: 37, column: 38, scope: !7)
!31 = !DILocation(line: 37, column: 49, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 71, scope: !7)
!34 = !DILocation(line: 37, column: 64, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 45, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 45, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 43, column: 27, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 31, scope: !7)
!43 = !DILocation(line: 49, column: 45, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 45, scope: !7)
!46 = !DILocation(line: 39, column: 19, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 54, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 58, column: 36, scope: !7)
!56 = !DILocation(line: 58, column: 30, scope: !7)
!57 = !DILocation(line: 58, column: 25, scope: !7)
!58 = !DILocation(line: 58, column: 48, scope: !7)
!59 = !DILocation(line: 57, column: 33, scope: !7)
!60 = !DILocation(line: 58, column: 4, scope: !7)
