; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 512, !dbg !14
  %14 = and i32 %10, 127, !dbg !14
  %15 = or disjoint i32 %14, 128, !dbg !14
  %16 = or disjoint i32 %14, 256, !dbg !14
  %17 = or disjoint i32 %14, 384, !dbg !14
  %18 = or disjoint i32 %14, 512, !dbg !14
  %19 = or disjoint i32 %14, 640, !dbg !14
  %20 = or disjoint i32 %14, 768, !dbg !14
  %21 = or disjoint i32 %14, 896, !dbg !14
  %22 = or disjoint i32 %9, %14, !dbg !15
  %23 = or disjoint i32 %9, %15, !dbg !15
  %24 = or disjoint i32 %9, %16, !dbg !15
  %25 = or disjoint i32 %9, %17, !dbg !15
  %26 = or disjoint i32 %9, %18, !dbg !15
  %27 = or disjoint i32 %9, %19, !dbg !15
  %28 = or disjoint i32 %9, %20, !dbg !15
  %29 = or disjoint i32 %9, %21, !dbg !15
  %.frozen = freeze i32 %6, !dbg !16
  %30 = sdiv i32 %.frozen, 64, !dbg !16
  %31 = mul i32 %30, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %32 = shl i32 %6, 12, !dbg !18
  %33 = or disjoint i32 %32, %12, !dbg !15
  %34 = add i32 %33, %9, !dbg !19
  %35 = or disjoint i32 %32, %13, !dbg !15
  %36 = add i32 %35, %9, !dbg !19
  %37 = sext i32 %34 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = sext i32 %36 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !20
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %7) #2, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !21
  %46 = bitcast i32 %42 to float, !dbg !21
  %47 = bitcast i32 %43 to float, !dbg !21
  %48 = bitcast i32 %44 to float, !dbg !21
  %49 = bitcast i32 %45 to float, !dbg !21
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %7) #2, !dbg !21
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !21
  %55 = bitcast i32 %51 to float, !dbg !21
  %56 = bitcast i32 %52 to float, !dbg !21
  %57 = bitcast i32 %53 to float, !dbg !21
  %58 = bitcast i32 %54 to float, !dbg !21
  %59 = sext i32 %.decomposed to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %7) #2, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %7) #2, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %7) #2, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %7) #2, !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = fadd float %46, %65, !dbg !24
  %67 = fadd float %47, %65, !dbg !24
  %68 = fadd float %48, %65, !dbg !24
  %69 = fadd float %49, %65, !dbg !24
  %70 = fadd float %55, %65, !dbg !24
  %71 = fadd float %56, %65, !dbg !24
  %72 = fadd float %57, %65, !dbg !24
  %73 = fadd float %58, %65, !dbg !24
  %74 = shl i32 %22, 6, !dbg !25
  %75 = shl i32 %23, 6, !dbg !25
  %76 = shl i32 %24, 6, !dbg !25
  %77 = shl i32 %25, 6, !dbg !25
  %78 = shl i32 %26, 6, !dbg !25
  %79 = shl i32 %27, 6, !dbg !25
  %80 = shl i32 %28, 6, !dbg !25
  %81 = shl i32 %29, 6, !dbg !25
  %82 = shl i32 %30, 18, !dbg !26
  %83 = add i32 %82, %.decomposed, !dbg !27
  %84 = add i32 %83, %74, !dbg !28
  %85 = add i32 %83, %75, !dbg !28
  %86 = add i32 %83, %76, !dbg !28
  %87 = add i32 %83, %77, !dbg !28
  %88 = add i32 %83, %78, !dbg !28
  %89 = add i32 %83, %79, !dbg !28
  %90 = add i32 %83, %80, !dbg !28
  %91 = add i32 %83, %81, !dbg !28
  %92 = sext i32 %84 to i64, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !29
  %94 = sext i32 %85 to i64, !dbg !29
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !29
  %96 = sext i32 %86 to i64, !dbg !29
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !29
  %98 = sext i32 %87 to i64, !dbg !29
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !29
  %100 = sext i32 %88 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !29
  %102 = sext i32 %89 to i64, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !29
  %104 = sext i32 %90 to i64, !dbg !29
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !29
  %106 = sext i32 %91 to i64, !dbg !29
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !29
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %109 = bitcast float %66 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !30
  %110 = or disjoint i32 %12, 1, !dbg !30
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !30
  %112 = bitcast float %67 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !30
  %113 = or disjoint i32 %12, 2, !dbg !30
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !30
  %115 = bitcast float %68 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !30
  %116 = or disjoint i32 %12, 3, !dbg !30
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !30
  %118 = bitcast float %69 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !30
  %120 = load i32, ptr addrspace(3) %119, align 4, !dbg !30
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !30
  %122 = load i32, ptr addrspace(3) %121, align 4, !dbg !30
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !30
  %124 = load i32, ptr addrspace(3) %123, align 4, !dbg !30
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !30
  %126 = load i32, ptr addrspace(3) %125, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %127 = bitcast float %70 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %127, i1 true) #2, !dbg !30
  %128 = bitcast float %71 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %128, i1 true) #2, !dbg !30
  %129 = bitcast float %72 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %129, i1 true) #2, !dbg !30
  %130 = bitcast float %73 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %130, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %131 = load i32, ptr addrspace(3) %119, align 4, !dbg !30
  %132 = load i32, ptr addrspace(3) %121, align 4, !dbg !30
  %133 = load i32, ptr addrspace(3) %123, align 4, !dbg !30
  %134 = load i32, ptr addrspace(3) %125, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %93, i1 %7) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %95, i1 %7) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %97, i1 %7) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %99, i1 %7) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %101, i1 %7) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %103, i1 %7) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %105, i1 %7) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %107, i1 %7) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj3f34kuzcsdf5wrus2ko7ymaqrxzmkehzpxwn2hggee42g3mhtn.py", directory: "inductor_cache/j3")
!4 = !{ptr @triton_poi_fused_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_6", linkageName: "triton_poi_fused_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 35, column: 33, scope: !7)
!26 = !DILocation(line: 35, column: 45, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 38, scope: !7)
!29 = !DILocation(line: 35, column: 25, scope: !7)
!30 = !DILocation(line: 35, column: 56, scope: !7)
!31 = !DILocation(line: 35, column: 4, scope: !7)
