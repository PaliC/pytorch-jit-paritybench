; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 64, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 5, !dbg !16
  %19 = and i32 %14, 30, !dbg !17
  %20 = or disjoint i32 %18, %19, !dbg !18
  %21 = icmp slt i32 %20, 32, !dbg !19
  %22 = shl i32 %15, 5, !dbg !20
  %23 = add i32 %20, %22, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = and i1 %16, %21, !dbg !23
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %26) #4, !dbg !24
  %28 = sext i32 %20 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !25
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %21) #4, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !27
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %21) #4, !dbg !28
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !28
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !28
  %35 = bitcast i32 %33 to float, !dbg !28
  %36 = bitcast i32 %34 to float, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !29
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %21) #4, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !31
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %21) #4, !dbg !32
  %41 = fadd float %35, 0x3F50624DE0000000, !dbg !33
  %42 = fadd float %36, 0x3F50624DE0000000, !dbg !33
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %43, 0, !dbg !34
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %44, 0, !dbg !34
  br i1 %.not.i, label %50, label %45, !dbg !34

45:                                               ; preds = %8
  br i1 %.not1.i, label %48, label %46, !dbg !34

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

50:                                               ; preds = %8
  br i1 %.not1.i, label %53, label %51, !dbg !34

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !34
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i6 = icmp eq i32 %55, 0, !dbg !34
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i9 = icmp eq i32 %56, 0, !dbg !34
  br i1 %.not.i6, label %62, label %57, !dbg !34

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %60, label %58, !dbg !34

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %65, label %63, !dbg !34

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

__nv_sqrtf.exit10:                                ; preds = %58, %60, %63, %65
  %.0.i8 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !34
  %67 = extractvalue { i32, i32 } %27, 1, !dbg !24
  %68 = bitcast i32 %67 to float, !dbg !24
  %69 = extractvalue { i32, i32 } %30, 1, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = fsub float %68, %70, !dbg !35
  %72 = extractvalue { i32, i32 } %27, 0, !dbg !24
  %73 = bitcast i32 %72 to float, !dbg !24
  %74 = extractvalue { i32, i32 } %30, 0, !dbg !26
  %75 = bitcast i32 %74 to float, !dbg !26
  %76 = fsub float %73, %75, !dbg !35
  %77 = extractvalue { i32, i32 } %40, 1, !dbg !32
  %78 = bitcast i32 %77 to float, !dbg !32
  %79 = extractvalue { i32, i32 } %40, 0, !dbg !32
  %80 = bitcast i32 %79 to float, !dbg !32
  %81 = extractvalue { i32, i32 } %38, 1, !dbg !30
  %82 = bitcast i32 %81 to float, !dbg !30
  %83 = extractvalue { i32, i32 } %38, 0, !dbg !30
  %84 = bitcast i32 %83 to float, !dbg !30
  %85 = lshr i32 %11, 2, !dbg !17
  %86 = and i32 %85, 31, !dbg !17
  %87 = or disjoint i32 %18, %86, !dbg !18
  %88 = icmp slt i32 %87, 32, !dbg !19
  %89 = and i32 %14, 6, !dbg !12
  %90 = or disjoint i32 %10, %89, !dbg !13
  %91 = icmp slt i32 %90, 64, !dbg !14
  %92 = and i1 %91, %88, !dbg !23
  %.frozen = freeze i32 %90, !dbg !36
  %93 = sdiv i32 %.frozen, 16, !dbg !36
  %94 = mul i32 %93, 16, !dbg !37
  %.decomposed = sub i32 %.frozen, %94, !dbg !37
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !38
  %97 = fmul float %76, %95, !dbg !39
  %98 = fmul float %71, %96, !dbg !39
  %99 = fmul float %97, %84, !dbg !40
  %100 = fmul float %98, %82, !dbg !40
  %101 = fadd float %99, %80, !dbg !41
  %102 = fadd float %100, %78, !dbg !41
  %103 = fsub float 0.000000e+00, %101, !dbg !42
  %104 = fsub float 0.000000e+00, %102, !dbg !42
  %105 = fmul float %103, 0x3FF7154760000000, !dbg !46
  %106 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %105) #4, !dbg !46
  %107 = fmul float %104, 0x3FF7154760000000, !dbg !46
  %108 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %107) #4, !dbg !46
  %109 = fadd float %106, 1.000000e+00, !dbg !47
  %110 = fadd float %108, 1.000000e+00, !dbg !47
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %109) #4, !dbg !48
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %110) #4, !dbg !48
  %113 = fmul float %101, %111, !dbg !49
  %114 = fmul float %102, %112, !dbg !49
  %115 = shl i32 %87, 4, !dbg !50
  %116 = add i32 %115, %.decomposed, !dbg !51
  %117 = shl i32 %93, 9, !dbg !52
  %118 = add i32 %116, %117, !dbg !53
  %119 = sext i32 %118 to i64, !dbg !54
  %120 = getelementptr float, ptr addrspace(1) %5, i64 %119, !dbg !54
  %121 = shl i32 %11, 4, !dbg !55
  %122 = and i32 %121, 240, !dbg !55
  %123 = or disjoint i32 %122, %13, !dbg !55
  %124 = and i32 %14, 254, !dbg !55
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %122, !dbg !55
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !55
  %127 = bitcast float %113 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #4, !dbg !55
  %128 = or disjoint i32 %123, 8, !dbg !55
  %129 = lshr i32 %128, 2, !dbg !55
  %130 = and i32 %129, 62, !dbg !55
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !55
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %128, !dbg !55
  %133 = bitcast float %114 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %134 = lshr i32 %14, 2, !dbg !55
  %135 = and i32 %134, 62, !dbg !55
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !55
  %137 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %124, !dbg !55
  %.extract = load i32, ptr addrspace(3) %137, align 8, !dbg !55
  %138 = getelementptr inbounds i8, ptr addrspace(3) %137, i32 4, !dbg !55
  %.extract5 = load i32, ptr addrspace(3) %138, align 4, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %120, i1 %92) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs24hrms5crncrzk4ythzl3657r64c3ky7j6sf7qipe46fs5ghpm.py", directory: "inductor_cache/s2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 48, column: 23, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 33, scope: !7)
!51 = !DILocation(line: 50, column: 30, scope: !7)
!52 = !DILocation(line: 50, column: 42, scope: !7)
!53 = !DILocation(line: 50, column: 38, scope: !7)
!54 = !DILocation(line: 50, column: 25, scope: !7)
!55 = !DILocation(line: 50, column: 54, scope: !7)
!56 = !DILocation(line: 50, column: 4, scope: !7)
