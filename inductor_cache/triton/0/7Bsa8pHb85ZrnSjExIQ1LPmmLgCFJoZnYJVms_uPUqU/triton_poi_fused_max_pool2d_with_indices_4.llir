; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %17 = shl i32 %16, 5, !dbg !15
  %18 = or disjoint i32 %17, %12, !dbg !16
  %19 = or disjoint i32 %17, %9, !dbg !16
  %20 = or disjoint i32 %17, %10, !dbg !16
  %21 = icmp slt i32 %18, 96, !dbg !17
  %22 = icmp slt i32 %19, 96, !dbg !17
  %23 = icmp slt i32 %20, 96, !dbg !17
  %24 = sdiv i32 %13, 32, !dbg !18
  %25 = sdiv i32 %14, 32, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %26 = sdiv i32 %.frozen, 1024, !dbg !19
  %27 = mul i32 %26, 1024, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = add i32 %18, -6240, !dbg !21
  %29 = mul i32 %24, 12288, !dbg !22
  %30 = mul i32 %25, 12288, !dbg !22
  %31 = add i32 %18, -6144, !dbg !23
  %32 = add i32 %18, -6048, !dbg !24
  %33 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !25
  %34 = insertelement <2 x i32> %33, i32 %24, i64 1, !dbg !25
  %35 = srem <2 x i32> %34, splat (i32 32), !dbg !25
  %36 = extractelement <2 x i32> %35, i64 1, !dbg !26
  %37 = icmp sgt i32 %36, 0, !dbg !27
  %38 = icmp sgt <2 x i32> %35, <i32 0, i32 -1>, !dbg !28
  %39 = extractelement <2 x i1> %38, i64 0, !dbg !29
  %40 = and i1 %39, %37, !dbg !29
  %41 = extractelement <2 x i32> %35, i64 0, !dbg !26
  %42 = mul nsw i32 %41, 192, !dbg !30
  %43 = add i32 %29, %42, !dbg !31
  %44 = add i32 %43, %28, !dbg !32
  %45 = sext i32 %44 to i64, !dbg !33
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !33
  %47 = and i1 %21, %40, !dbg !34
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 -8388608, i1 %47, i32 -8388608, i1 %47, i32 -8388608, i1 %47, i32 -8388608, i1 %47) #2, !dbg !35
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !35
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !35
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !35
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !35
  %53 = bitcast i32 %49 to float, !dbg !35
  %54 = bitcast i32 %50 to float, !dbg !35
  %55 = bitcast i32 %51 to float, !dbg !35
  %56 = bitcast i32 %52 to float, !dbg !35
  %57 = icmp sgt i32 %41, -1, !dbg !36
  %58 = and i1 %57, %37, !dbg !37
  %59 = add i32 %43, %31, !dbg !38
  %60 = sext i32 %59 to i64, !dbg !39
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !39
  %62 = and i1 %21, %58, !dbg !40
  %63 = add i32 %43, %32, !dbg !41
  %64 = sext i32 %63 to i64, !dbg !42
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !42
  %66 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !25
  %67 = insertelement <2 x i32> %66, i32 %25, i64 1, !dbg !25
  %68 = srem <2 x i32> %67, splat (i32 32), !dbg !25
  %69 = extractelement <2 x i32> %68, i64 1, !dbg !26
  %70 = icmp sgt i32 %69, 0, !dbg !27
  %71 = icmp sgt <2 x i32> %68, <i32 0, i32 -1>, !dbg !28
  %72 = extractelement <2 x i1> %71, i64 0, !dbg !29
  %73 = and i1 %72, %70, !dbg !29
  %74 = extractelement <2 x i32> %68, i64 0, !dbg !26
  %75 = mul nsw i32 %74, 192, !dbg !30
  %76 = add i32 %30, %75, !dbg !31
  %77 = add i32 %76, %28, !dbg !32
  %78 = sext i32 %77 to i64, !dbg !33
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !33
  %80 = and i1 %21, %73, !dbg !34
  %81 = icmp sgt i32 %74, -1, !dbg !36
  %82 = and i1 %81, %70, !dbg !37
  %83 = add i32 %76, %31, !dbg !38
  %84 = sext i32 %83 to i64, !dbg !39
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !39
  %86 = and i1 %21, %82, !dbg !40
  %87 = add i32 %76, %32, !dbg !41
  %88 = sext i32 %87 to i64, !dbg !42
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !42
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #2, !dbg !35
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !35
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !35
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !35
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !35
  %95 = bitcast i32 %91 to float, !dbg !35
  %96 = bitcast i32 %92 to float, !dbg !35
  %97 = bitcast i32 %93 to float, !dbg !35
  %98 = bitcast i32 %94 to float, !dbg !35
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62) #2, !dbg !43
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !43
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !43
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !43
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !43
  %104 = bitcast i32 %100 to float, !dbg !43
  %105 = bitcast i32 %101 to float, !dbg !43
  %106 = bitcast i32 %102 to float, !dbg !43
  %107 = bitcast i32 %103 to float, !dbg !43
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86) #2, !dbg !43
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !43
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !43
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !43
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !43
  %113 = bitcast i32 %109 to float, !dbg !43
  %114 = bitcast i32 %110 to float, !dbg !43
  %115 = bitcast i32 %111 to float, !dbg !43
  %116 = bitcast i32 %112 to float, !dbg !43
  %117 = fcmp ogt float %104, %53, !dbg !44
  %118 = fcmp ogt float %105, %54, !dbg !44
  %119 = fcmp ogt float %106, %55, !dbg !44
  %120 = fcmp ogt float %107, %56, !dbg !44
  %121 = fcmp ogt float %113, %95, !dbg !44
  %122 = fcmp ogt float %114, %96, !dbg !44
  %123 = fcmp ogt float %115, %97, !dbg !44
  %124 = fcmp ogt float %116, %98, !dbg !44
  %125 = fcmp uno float %104, 0.000000e+00, !dbg !48
  %126 = fcmp uno float %105, 0.000000e+00, !dbg !48
  %127 = fcmp uno float %106, 0.000000e+00, !dbg !48
  %128 = fcmp uno float %107, 0.000000e+00, !dbg !48
  %129 = fcmp uno float %113, 0.000000e+00, !dbg !48
  %130 = fcmp uno float %114, 0.000000e+00, !dbg !48
  %131 = fcmp uno float %115, 0.000000e+00, !dbg !48
  %132 = fcmp uno float %116, 0.000000e+00, !dbg !48
  %133 = or i1 %117, %125, !dbg !49
  %134 = or i1 %118, %126, !dbg !49
  %135 = or i1 %119, %127, !dbg !49
  %136 = or i1 %120, %128, !dbg !49
  %137 = or i1 %121, %129, !dbg !49
  %138 = or i1 %122, %130, !dbg !49
  %139 = or i1 %123, %131, !dbg !49
  %140 = or i1 %124, %132, !dbg !49
  %141 = select i1 %133, float %104, float %53, !dbg !50
  %142 = select i1 %134, float %105, float %54, !dbg !50
  %143 = select i1 %135, float %106, float %55, !dbg !50
  %144 = select i1 %136, float %107, float %56, !dbg !50
  %145 = select i1 %137, float %113, float %95, !dbg !50
  %146 = select i1 %138, float %114, float %96, !dbg !50
  %147 = select i1 %139, float %115, float %97, !dbg !50
  %148 = select i1 %140, float %116, float %98, !dbg !50
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62) #2, !dbg !51
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !51
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !51
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !51
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !51
  %154 = bitcast i32 %150 to float, !dbg !51
  %155 = bitcast i32 %151 to float, !dbg !51
  %156 = bitcast i32 %152 to float, !dbg !51
  %157 = bitcast i32 %153 to float, !dbg !51
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86) #2, !dbg !51
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !51
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !51
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !51
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !51
  %163 = bitcast i32 %159 to float, !dbg !51
  %164 = bitcast i32 %160 to float, !dbg !51
  %165 = bitcast i32 %161 to float, !dbg !51
  %166 = bitcast i32 %162 to float, !dbg !51
  %167 = fcmp olt float %141, %154, !dbg !52
  %168 = fcmp olt float %142, %155, !dbg !52
  %169 = fcmp olt float %143, %156, !dbg !52
  %170 = fcmp olt float %144, %157, !dbg !52
  %171 = fcmp olt float %145, %163, !dbg !52
  %172 = fcmp olt float %146, %164, !dbg !52
  %173 = fcmp olt float %147, %165, !dbg !52
  %174 = fcmp olt float %148, %166, !dbg !52
  %175 = fcmp uno float %154, 0.000000e+00, !dbg !54
  %176 = fcmp uno float %155, 0.000000e+00, !dbg !54
  %177 = fcmp uno float %156, 0.000000e+00, !dbg !54
  %178 = fcmp uno float %157, 0.000000e+00, !dbg !54
  %179 = fcmp uno float %163, 0.000000e+00, !dbg !54
  %180 = fcmp uno float %164, 0.000000e+00, !dbg !54
  %181 = fcmp uno float %165, 0.000000e+00, !dbg !54
  %182 = fcmp uno float %166, 0.000000e+00, !dbg !54
  %183 = or i1 %175, %167, !dbg !55
  %184 = or i1 %176, %168, !dbg !55
  %185 = or i1 %177, %169, !dbg !55
  %186 = or i1 %178, %170, !dbg !55
  %187 = or i1 %179, %171, !dbg !55
  %188 = or i1 %180, %172, !dbg !55
  %189 = or i1 %181, %173, !dbg !55
  %190 = or i1 %182, %174, !dbg !55
  %191 = select i1 %183, float %154, float %141, !dbg !56
  %192 = select i1 %184, float %155, float %142, !dbg !56
  %193 = select i1 %185, float %156, float %143, !dbg !56
  %194 = select i1 %186, float %157, float %144, !dbg !56
  %195 = select i1 %187, float %163, float %145, !dbg !56
  %196 = select i1 %188, float %164, float %146, !dbg !56
  %197 = select i1 %189, float %165, float %147, !dbg !56
  %198 = select i1 %190, float %166, float %148, !dbg !56
  %199 = extractelement <2 x i1> %38, i64 1, !dbg !57
  %200 = and i1 %39, %199, !dbg !57
  %201 = extractelement <2 x i1> %71, i64 1, !dbg !57
  %202 = and i1 %72, %201, !dbg !57
  %203 = add i32 %18, -96, !dbg !58
  %204 = add i32 %43, %203, !dbg !59
  %205 = add i32 %76, %203, !dbg !59
  %206 = sext i32 %204 to i64, !dbg !60
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !60
  %208 = sext i32 %205 to i64, !dbg !60
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !60
  %210 = and i1 %21, %200, !dbg !61
  %211 = and i1 %21, %202, !dbg !61
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %207, i1 %210, i32 -8388608, i1 %210, i32 -8388608, i1 %210, i32 -8388608, i1 %210, i32 -8388608, i1 %210) #2, !dbg !62
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !62
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !62
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !62
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !62
  %217 = bitcast i32 %213 to float, !dbg !62
  %218 = bitcast i32 %214 to float, !dbg !62
  %219 = bitcast i32 %215 to float, !dbg !62
  %220 = bitcast i32 %216 to float, !dbg !62
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %209, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211) #2, !dbg !62
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !62
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !62
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !62
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !62
  %226 = bitcast i32 %222 to float, !dbg !62
  %227 = bitcast i32 %223 to float, !dbg !62
  %228 = bitcast i32 %224 to float, !dbg !62
  %229 = bitcast i32 %225 to float, !dbg !62
  %230 = fcmp olt float %191, %217, !dbg !63
  %231 = fcmp olt float %192, %218, !dbg !63
  %232 = fcmp olt float %193, %219, !dbg !63
  %233 = fcmp olt float %194, %220, !dbg !63
  %234 = fcmp olt float %195, %226, !dbg !63
  %235 = fcmp olt float %196, %227, !dbg !63
  %236 = fcmp olt float %197, %228, !dbg !63
  %237 = fcmp olt float %198, %229, !dbg !63
  %238 = fcmp uno float %217, 0.000000e+00, !dbg !65
  %239 = fcmp uno float %218, 0.000000e+00, !dbg !65
  %240 = fcmp uno float %219, 0.000000e+00, !dbg !65
  %241 = fcmp uno float %220, 0.000000e+00, !dbg !65
  %242 = fcmp uno float %226, 0.000000e+00, !dbg !65
  %243 = fcmp uno float %227, 0.000000e+00, !dbg !65
  %244 = fcmp uno float %228, 0.000000e+00, !dbg !65
  %245 = fcmp uno float %229, 0.000000e+00, !dbg !65
  %246 = or i1 %238, %230, !dbg !66
  %247 = or i1 %239, %231, !dbg !66
  %248 = or i1 %240, %232, !dbg !66
  %249 = or i1 %241, %233, !dbg !66
  %250 = or i1 %242, %234, !dbg !66
  %251 = or i1 %243, %235, !dbg !66
  %252 = or i1 %244, %236, !dbg !66
  %253 = or i1 %245, %237, !dbg !66
  %254 = select i1 %246, float %217, float %191, !dbg !67
  %255 = select i1 %247, float %218, float %192, !dbg !67
  %256 = select i1 %248, float %219, float %193, !dbg !67
  %257 = select i1 %249, float %220, float %194, !dbg !67
  %258 = select i1 %250, float %226, float %195, !dbg !67
  %259 = select i1 %251, float %227, float %196, !dbg !67
  %260 = select i1 %252, float %228, float %197, !dbg !67
  %261 = select i1 %253, float %229, float %198, !dbg !67
  %262 = or i32 %36, %41, !dbg !26
  %263 = icmp sgt i32 %262, -1, !dbg !26
  %264 = or i32 %69, %74, !dbg !26
  %265 = icmp sgt i32 %264, -1, !dbg !26
  %266 = add i32 %43, %18, !dbg !68
  %267 = add i32 %76, %18, !dbg !68
  %268 = sext i32 %266 to i64, !dbg !69
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !69
  %270 = sext i32 %267 to i64, !dbg !69
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !69
  %272 = and i1 %21, %263, !dbg !70
  %273 = and i1 %21, %265, !dbg !70
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %269, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272) #2, !dbg !71
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !71
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !71
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !71
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !71
  %279 = bitcast i32 %275 to float, !dbg !71
  %280 = bitcast i32 %276 to float, !dbg !71
  %281 = bitcast i32 %277 to float, !dbg !71
  %282 = bitcast i32 %278 to float, !dbg !71
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %271, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !71
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !71
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !71
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !71
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !71
  %288 = bitcast i32 %284 to float, !dbg !71
  %289 = bitcast i32 %285 to float, !dbg !71
  %290 = bitcast i32 %286 to float, !dbg !71
  %291 = bitcast i32 %287 to float, !dbg !71
  %292 = fcmp olt float %254, %279, !dbg !72
  %293 = fcmp olt float %255, %280, !dbg !72
  %294 = fcmp olt float %256, %281, !dbg !72
  %295 = fcmp olt float %257, %282, !dbg !72
  %296 = fcmp olt float %258, %288, !dbg !72
  %297 = fcmp olt float %259, %289, !dbg !72
  %298 = fcmp olt float %260, %290, !dbg !72
  %299 = fcmp olt float %261, %291, !dbg !72
  %300 = fcmp uno float %279, 0.000000e+00, !dbg !74
  %301 = fcmp uno float %280, 0.000000e+00, !dbg !74
  %302 = fcmp uno float %281, 0.000000e+00, !dbg !74
  %303 = fcmp uno float %282, 0.000000e+00, !dbg !74
  %304 = fcmp uno float %288, 0.000000e+00, !dbg !74
  %305 = fcmp uno float %289, 0.000000e+00, !dbg !74
  %306 = fcmp uno float %290, 0.000000e+00, !dbg !74
  %307 = fcmp uno float %291, 0.000000e+00, !dbg !74
  %308 = or i1 %300, %292, !dbg !75
  %309 = or i1 %301, %293, !dbg !75
  %310 = or i1 %302, %294, !dbg !75
  %311 = or i1 %303, %295, !dbg !75
  %312 = or i1 %304, %296, !dbg !75
  %313 = or i1 %305, %297, !dbg !75
  %314 = or i1 %306, %298, !dbg !75
  %315 = or i1 %307, %299, !dbg !75
  %316 = select i1 %308, float %279, float %254, !dbg !76
  %317 = select i1 %309, float %280, float %255, !dbg !76
  %318 = select i1 %310, float %281, float %256, !dbg !76
  %319 = select i1 %311, float %282, float %257, !dbg !76
  %320 = select i1 %312, float %288, float %258, !dbg !76
  %321 = select i1 %313, float %289, float %259, !dbg !76
  %322 = select i1 %314, float %290, float %260, !dbg !76
  %323 = select i1 %315, float %291, float %261, !dbg !76
  %324 = add i32 %18, 96, !dbg !77
  %325 = add i32 %43, %324, !dbg !78
  %326 = add i32 %76, %324, !dbg !78
  %327 = sext i32 %325 to i64, !dbg !79
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !79
  %329 = sext i32 %326 to i64, !dbg !79
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !79
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %328, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272) #2, !dbg !80
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !80
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !80
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !80
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !80
  %336 = bitcast i32 %332 to float, !dbg !80
  %337 = bitcast i32 %333 to float, !dbg !80
  %338 = bitcast i32 %334 to float, !dbg !80
  %339 = bitcast i32 %335 to float, !dbg !80
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %330, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !80
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !80
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !80
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !80
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !80
  %345 = bitcast i32 %341 to float, !dbg !80
  %346 = bitcast i32 %342 to float, !dbg !80
  %347 = bitcast i32 %343 to float, !dbg !80
  %348 = bitcast i32 %344 to float, !dbg !80
  %349 = fcmp olt float %316, %336, !dbg !81
  %350 = fcmp olt float %317, %337, !dbg !81
  %351 = fcmp olt float %318, %338, !dbg !81
  %352 = fcmp olt float %319, %339, !dbg !81
  %353 = fcmp olt float %320, %345, !dbg !81
  %354 = fcmp olt float %321, %346, !dbg !81
  %355 = fcmp olt float %322, %347, !dbg !81
  %356 = fcmp olt float %323, %348, !dbg !81
  %357 = fcmp uno float %336, 0.000000e+00, !dbg !83
  %358 = fcmp uno float %337, 0.000000e+00, !dbg !83
  %359 = fcmp uno float %338, 0.000000e+00, !dbg !83
  %360 = fcmp uno float %339, 0.000000e+00, !dbg !83
  %361 = fcmp uno float %345, 0.000000e+00, !dbg !83
  %362 = fcmp uno float %346, 0.000000e+00, !dbg !83
  %363 = fcmp uno float %347, 0.000000e+00, !dbg !83
  %364 = fcmp uno float %348, 0.000000e+00, !dbg !83
  %365 = or i1 %357, %349, !dbg !84
  %366 = or i1 %358, %350, !dbg !84
  %367 = or i1 %359, %351, !dbg !84
  %368 = or i1 %360, %352, !dbg !84
  %369 = or i1 %361, %353, !dbg !84
  %370 = or i1 %362, %354, !dbg !84
  %371 = or i1 %363, %355, !dbg !84
  %372 = or i1 %364, %356, !dbg !84
  %373 = select i1 %365, float %336, float %316, !dbg !85
  %374 = select i1 %366, float %337, float %317, !dbg !85
  %375 = select i1 %367, float %338, float %318, !dbg !85
  %376 = select i1 %368, float %339, float %319, !dbg !85
  %377 = select i1 %369, float %345, float %320, !dbg !85
  %378 = select i1 %370, float %346, float %321, !dbg !85
  %379 = select i1 %371, float %347, float %322, !dbg !85
  %380 = select i1 %372, float %348, float %323, !dbg !85
  %381 = add i32 %18, 6048, !dbg !86
  %382 = add i32 %43, %381, !dbg !87
  %383 = add i32 %76, %381, !dbg !87
  %384 = sext i32 %382 to i64, !dbg !88
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %384, !dbg !88
  %386 = sext i32 %383 to i64, !dbg !88
  %387 = getelementptr float, ptr addrspace(1) %0, i64 %386, !dbg !88
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %385, i1 %210, i32 -8388608, i1 %210, i32 -8388608, i1 %210, i32 -8388608, i1 %210, i32 -8388608, i1 %210) #2, !dbg !89
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !89
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !89
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !89
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !89
  %393 = bitcast i32 %389 to float, !dbg !89
  %394 = bitcast i32 %390 to float, !dbg !89
  %395 = bitcast i32 %391 to float, !dbg !89
  %396 = bitcast i32 %392 to float, !dbg !89
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %387, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211) #2, !dbg !89
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !89
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !89
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !89
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !89
  %402 = bitcast i32 %398 to float, !dbg !89
  %403 = bitcast i32 %399 to float, !dbg !89
  %404 = bitcast i32 %400 to float, !dbg !89
  %405 = bitcast i32 %401 to float, !dbg !89
  %406 = fcmp olt float %373, %393, !dbg !90
  %407 = fcmp olt float %374, %394, !dbg !90
  %408 = fcmp olt float %375, %395, !dbg !90
  %409 = fcmp olt float %376, %396, !dbg !90
  %410 = fcmp olt float %377, %402, !dbg !90
  %411 = fcmp olt float %378, %403, !dbg !90
  %412 = fcmp olt float %379, %404, !dbg !90
  %413 = fcmp olt float %380, %405, !dbg !90
  %414 = fcmp uno float %393, 0.000000e+00, !dbg !92
  %415 = fcmp uno float %394, 0.000000e+00, !dbg !92
  %416 = fcmp uno float %395, 0.000000e+00, !dbg !92
  %417 = fcmp uno float %396, 0.000000e+00, !dbg !92
  %418 = fcmp uno float %402, 0.000000e+00, !dbg !92
  %419 = fcmp uno float %403, 0.000000e+00, !dbg !92
  %420 = fcmp uno float %404, 0.000000e+00, !dbg !92
  %421 = fcmp uno float %405, 0.000000e+00, !dbg !92
  %422 = or i1 %414, %406, !dbg !93
  %423 = or i1 %415, %407, !dbg !93
  %424 = or i1 %416, %408, !dbg !93
  %425 = or i1 %417, %409, !dbg !93
  %426 = or i1 %418, %410, !dbg !93
  %427 = or i1 %419, %411, !dbg !93
  %428 = or i1 %420, %412, !dbg !93
  %429 = or i1 %421, %413, !dbg !93
  %430 = select i1 %422, float %393, float %373, !dbg !94
  %431 = select i1 %423, float %394, float %374, !dbg !94
  %432 = select i1 %424, float %395, float %375, !dbg !94
  %433 = select i1 %425, float %396, float %376, !dbg !94
  %434 = select i1 %426, float %402, float %377, !dbg !94
  %435 = select i1 %427, float %403, float %378, !dbg !94
  %436 = select i1 %428, float %404, float %379, !dbg !94
  %437 = select i1 %429, float %405, float %380, !dbg !94
  %438 = add i32 %18, 6144, !dbg !95
  %439 = add i32 %43, %438, !dbg !96
  %440 = add i32 %76, %438, !dbg !96
  %441 = sext i32 %439 to i64, !dbg !97
  %442 = getelementptr float, ptr addrspace(1) %0, i64 %441, !dbg !97
  %443 = sext i32 %440 to i64, !dbg !97
  %444 = getelementptr float, ptr addrspace(1) %0, i64 %443, !dbg !97
  %445 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %442, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272) #2, !dbg !98
  %446 = extractvalue { i32, i32, i32, i32 } %445, 0, !dbg !98
  %447 = extractvalue { i32, i32, i32, i32 } %445, 1, !dbg !98
  %448 = extractvalue { i32, i32, i32, i32 } %445, 2, !dbg !98
  %449 = extractvalue { i32, i32, i32, i32 } %445, 3, !dbg !98
  %450 = bitcast i32 %446 to float, !dbg !98
  %451 = bitcast i32 %447 to float, !dbg !98
  %452 = bitcast i32 %448 to float, !dbg !98
  %453 = bitcast i32 %449 to float, !dbg !98
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %444, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !98
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !98
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !98
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !98
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !98
  %459 = bitcast i32 %455 to float, !dbg !98
  %460 = bitcast i32 %456 to float, !dbg !98
  %461 = bitcast i32 %457 to float, !dbg !98
  %462 = bitcast i32 %458 to float, !dbg !98
  %463 = fcmp olt float %430, %450, !dbg !99
  %464 = fcmp olt float %431, %451, !dbg !99
  %465 = fcmp olt float %432, %452, !dbg !99
  %466 = fcmp olt float %433, %453, !dbg !99
  %467 = fcmp olt float %434, %459, !dbg !99
  %468 = fcmp olt float %435, %460, !dbg !99
  %469 = fcmp olt float %436, %461, !dbg !99
  %470 = fcmp olt float %437, %462, !dbg !99
  %471 = fcmp uno float %450, 0.000000e+00, !dbg !101
  %472 = fcmp uno float %451, 0.000000e+00, !dbg !101
  %473 = fcmp uno float %452, 0.000000e+00, !dbg !101
  %474 = fcmp uno float %453, 0.000000e+00, !dbg !101
  %475 = fcmp uno float %459, 0.000000e+00, !dbg !101
  %476 = fcmp uno float %460, 0.000000e+00, !dbg !101
  %477 = fcmp uno float %461, 0.000000e+00, !dbg !101
  %478 = fcmp uno float %462, 0.000000e+00, !dbg !101
  %479 = or i1 %471, %463, !dbg !102
  %480 = or i1 %472, %464, !dbg !102
  %481 = or i1 %473, %465, !dbg !102
  %482 = or i1 %474, %466, !dbg !102
  %483 = or i1 %475, %467, !dbg !102
  %484 = or i1 %476, %468, !dbg !102
  %485 = or i1 %477, %469, !dbg !102
  %486 = or i1 %478, %470, !dbg !102
  %487 = select i1 %479, float %450, float %430, !dbg !103
  %488 = select i1 %480, float %451, float %431, !dbg !103
  %489 = select i1 %481, float %452, float %432, !dbg !103
  %490 = select i1 %482, float %453, float %433, !dbg !103
  %491 = select i1 %483, float %459, float %434, !dbg !103
  %492 = select i1 %484, float %460, float %435, !dbg !103
  %493 = select i1 %485, float %461, float %436, !dbg !103
  %494 = select i1 %486, float %462, float %437, !dbg !103
  %495 = add i32 %18, 6240, !dbg !104
  %496 = add i32 %43, %495, !dbg !105
  %497 = add i32 %76, %495, !dbg !105
  %498 = sext i32 %496 to i64, !dbg !106
  %499 = getelementptr float, ptr addrspace(1) %0, i64 %498, !dbg !106
  %500 = sext i32 %497 to i64, !dbg !106
  %501 = getelementptr float, ptr addrspace(1) %0, i64 %500, !dbg !106
  %502 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %499, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272, i32 -8388608, i1 %272) #2, !dbg !107
  %503 = extractvalue { i32, i32, i32, i32 } %502, 0, !dbg !107
  %504 = extractvalue { i32, i32, i32, i32 } %502, 1, !dbg !107
  %505 = extractvalue { i32, i32, i32, i32 } %502, 2, !dbg !107
  %506 = extractvalue { i32, i32, i32, i32 } %502, 3, !dbg !107
  %507 = bitcast i32 %503 to float, !dbg !107
  %508 = bitcast i32 %504 to float, !dbg !107
  %509 = bitcast i32 %505 to float, !dbg !107
  %510 = bitcast i32 %506 to float, !dbg !107
  %511 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %501, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !107
  %512 = extractvalue { i32, i32, i32, i32 } %511, 0, !dbg !107
  %513 = extractvalue { i32, i32, i32, i32 } %511, 1, !dbg !107
  %514 = extractvalue { i32, i32, i32, i32 } %511, 2, !dbg !107
  %515 = extractvalue { i32, i32, i32, i32 } %511, 3, !dbg !107
  %516 = bitcast i32 %512 to float, !dbg !107
  %517 = bitcast i32 %513 to float, !dbg !107
  %518 = bitcast i32 %514 to float, !dbg !107
  %519 = bitcast i32 %515 to float, !dbg !107
  %520 = fcmp olt float %487, %507, !dbg !108
  %521 = fcmp olt float %488, %508, !dbg !108
  %522 = fcmp olt float %489, %509, !dbg !108
  %523 = fcmp olt float %490, %510, !dbg !108
  %524 = fcmp olt float %491, %516, !dbg !108
  %525 = fcmp olt float %492, %517, !dbg !108
  %526 = fcmp olt float %493, %518, !dbg !108
  %527 = fcmp olt float %494, %519, !dbg !108
  %528 = fcmp uno float %507, 0.000000e+00, !dbg !110
  %529 = fcmp uno float %508, 0.000000e+00, !dbg !110
  %530 = fcmp uno float %509, 0.000000e+00, !dbg !110
  %531 = fcmp uno float %510, 0.000000e+00, !dbg !110
  %532 = fcmp uno float %516, 0.000000e+00, !dbg !110
  %533 = fcmp uno float %517, 0.000000e+00, !dbg !110
  %534 = fcmp uno float %518, 0.000000e+00, !dbg !110
  %535 = fcmp uno float %519, 0.000000e+00, !dbg !110
  %536 = or i1 %528, %520, !dbg !111
  %537 = or i1 %529, %521, !dbg !111
  %538 = or i1 %530, %522, !dbg !111
  %539 = or i1 %531, %523, !dbg !111
  %540 = or i1 %532, %524, !dbg !111
  %541 = or i1 %533, %525, !dbg !111
  %542 = or i1 %534, %526, !dbg !111
  %543 = or i1 %535, %527, !dbg !111
  %544 = shl i32 %19, 10, !dbg !112
  %545 = shl i32 %20, 10, !dbg !112
  %546 = shl i32 %26, 18, !dbg !113
  %547 = add i32 %546, %.decomposed, !dbg !114
  %548 = add i32 %547, %544, !dbg !115
  %549 = add i32 %547, %545, !dbg !115
  %550 = sext i32 %548 to i64, !dbg !116
  %551 = getelementptr float, ptr addrspace(1) %1, i64 %550, !dbg !116
  %552 = sext i32 %549 to i64, !dbg !116
  %553 = getelementptr float, ptr addrspace(1) %1, i64 %552, !dbg !116
  %554 = shl i32 %7, 7, !dbg !117
  %555 = and i32 %554, 896, !dbg !117
  %556 = or disjoint i32 %555, %9, !dbg !117
  %557 = and i32 %11, 508, !dbg !117
  %558 = lshr exact i32 %555, 1, !dbg !117
  %559 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %558, !dbg !117
  %560 = getelementptr float, ptr addrspace(3) %559, i32 %556, !dbg !117
  %561 = bitcast float %487 to i32, !dbg !117
  %562 = select i1 %536, i32 %503, i32 %561, !dbg !118
  %563 = insertelement <1 x i32> poison, i32 %562, i64 0, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %560, <1 x i32> %563, i1 true) #2, !dbg !117
  %564 = or disjoint i32 %556, 32, !dbg !117
  %565 = lshr i32 %564, 3, !dbg !117
  %566 = and i32 %565, 116, !dbg !117
  %567 = getelementptr float, ptr addrspace(3) @global_smem, i32 %566, !dbg !117
  %568 = getelementptr float, ptr addrspace(3) %567, i32 %564, !dbg !117
  %569 = bitcast float %488 to i32, !dbg !117
  %570 = select i1 %537, i32 %504, i32 %569, !dbg !118
  %571 = insertelement <1 x i32> poison, i32 %570, i64 0, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %568, <1 x i32> %571, i1 true) #2, !dbg !117
  %572 = or disjoint i32 %556, 64, !dbg !117
  %573 = lshr i32 %572, 3, !dbg !117
  %574 = and i32 %573, 120, !dbg !117
  %575 = getelementptr float, ptr addrspace(3) @global_smem, i32 %574, !dbg !117
  %576 = getelementptr float, ptr addrspace(3) %575, i32 %572, !dbg !117
  %577 = bitcast float %489 to i32, !dbg !117
  %578 = select i1 %538, i32 %505, i32 %577, !dbg !118
  %579 = insertelement <1 x i32> poison, i32 %578, i64 0, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %579, i1 true) #2, !dbg !117
  %580 = or disjoint i32 %556, 96, !dbg !117
  %581 = lshr i32 %580, 3, !dbg !117
  %582 = and i32 %581, 124, !dbg !117
  %583 = getelementptr float, ptr addrspace(3) @global_smem, i32 %582, !dbg !117
  %584 = getelementptr float, ptr addrspace(3) %583, i32 %580, !dbg !117
  %585 = bitcast float %490 to i32, !dbg !117
  %586 = select i1 %539, i32 %506, i32 %585, !dbg !118
  %587 = insertelement <1 x i32> poison, i32 %586, i64 0, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %584, <1 x i32> %587, i1 true) #2, !dbg !117
  %588 = or disjoint i32 %556, 16, !dbg !117
  %589 = getelementptr float, ptr addrspace(3) %559, i32 %588, !dbg !117
  %590 = bitcast float %491 to i32, !dbg !117
  %591 = select i1 %540, i32 %512, i32 %590, !dbg !118
  %592 = insertelement <1 x i32> poison, i32 %591, i64 0, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %589, <1 x i32> %592, i1 true) #2, !dbg !117
  %593 = or disjoint i32 %556, 48, !dbg !117
  %594 = lshr i32 %593, 3, !dbg !117
  %595 = and i32 %594, 116, !dbg !117
  %596 = getelementptr float, ptr addrspace(3) @global_smem, i32 %595, !dbg !117
  %597 = getelementptr float, ptr addrspace(3) %596, i32 %593, !dbg !117
  %598 = bitcast float %492 to i32, !dbg !117
  %599 = select i1 %541, i32 %513, i32 %598, !dbg !118
  %600 = insertelement <1 x i32> poison, i32 %599, i64 0, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %597, <1 x i32> %600, i1 true) #2, !dbg !117
  %601 = or disjoint i32 %556, 80, !dbg !117
  %602 = lshr i32 %601, 3, !dbg !117
  %603 = and i32 %602, 120, !dbg !117
  %604 = getelementptr float, ptr addrspace(3) @global_smem, i32 %603, !dbg !117
  %605 = getelementptr float, ptr addrspace(3) %604, i32 %601, !dbg !117
  %606 = bitcast float %493 to i32, !dbg !117
  %607 = select i1 %542, i32 %514, i32 %606, !dbg !118
  %608 = insertelement <1 x i32> poison, i32 %607, i64 0, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %605, <1 x i32> %608, i1 true) #2, !dbg !117
  %609 = or disjoint i32 %556, 112, !dbg !117
  %610 = lshr i32 %609, 3, !dbg !117
  %611 = and i32 %610, 124, !dbg !117
  %612 = getelementptr float, ptr addrspace(3) @global_smem, i32 %611, !dbg !117
  %613 = getelementptr float, ptr addrspace(3) %612, i32 %609, !dbg !117
  %614 = bitcast float %494 to i32, !dbg !117
  %615 = select i1 %543, i32 %515, i32 %614, !dbg !118
  %616 = insertelement <1 x i32> poison, i32 %615, i64 0, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %613, <1 x i32> %616, i1 true) #2, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  %617 = lshr i32 %11, 3, !dbg !117
  %618 = and i32 %617, 60, !dbg !117
  %619 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %618, !dbg !117
  %620 = getelementptr inbounds float, ptr addrspace(3) %619, i32 %557, !dbg !117
  %621 = or disjoint i32 %557, 512, !dbg !117
  %622 = lshr i32 %621, 3, !dbg !117
  %623 = and i32 %622, 124, !dbg !117
  %624 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %623, !dbg !117
  %625 = getelementptr inbounds float, ptr addrspace(3) %624, i32 %621, !dbg !117
  %626 = load <4 x i32>, ptr addrspace(3) %625, align 16, !dbg !117
  %.extract = load i32, ptr addrspace(3) %620, align 16, !dbg !117
  %627 = getelementptr inbounds i8, ptr addrspace(3) %620, i32 4, !dbg !117
  %.extract8 = load i32, ptr addrspace(3) %627, align 4, !dbg !117
  %628 = getelementptr inbounds i8, ptr addrspace(3) %620, i32 8, !dbg !117
  %.extract9 = load i32, ptr addrspace(3) %628, align 8, !dbg !117
  %629 = getelementptr inbounds i8, ptr addrspace(3) %620, i32 12, !dbg !117
  %.extract10 = load i32, ptr addrspace(3) %629, align 4, !dbg !117
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %551, i1 %22) #2, !dbg !117
  %.extract11 = extractelement <4 x i32> %626, i64 0, !dbg !117
  %.extract12 = extractelement <4 x i32> %626, i64 1, !dbg !117
  %.extract13 = extractelement <4 x i32> %626, i64 2, !dbg !117
  %.extract14 = extractelement <4 x i32> %626, i64 3, !dbg !117
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %553, i1 %23) #2, !dbg !117
  ret void, !dbg !119
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c73o3kgtns3rcorno43znhwavm7z3afptrcn4hpfj6ocabpmrmib.py", directory: "inductor_cache/73")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_4", linkageName: "triton_poi_fused_max_pool2d_with_indices_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 45, column: 41, scope: !7)
!22 = !DILocation(line: 45, column: 61, scope: !7)
!23 = !DILocation(line: 51, column: 41, scope: !7)
!24 = !DILocation(line: 58, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 19, scope: !7)
!26 = !DILocation(line: 67, column: 20, scope: !7)
!27 = !DILocation(line: 36, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 50, scope: !7)
!31 = !DILocation(line: 45, column: 46, scope: !7)
!32 = !DILocation(line: 45, column: 55, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 74, scope: !7)
!35 = !DILocation(line: 45, column: 66, scope: !7)
!36 = !DILocation(line: 47, column: 21, scope: !7)
!37 = !DILocation(line: 50, column: 19, scope: !7)
!38 = !DILocation(line: 51, column: 55, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 74, scope: !7)
!41 = !DILocation(line: 58, column: 55, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 66, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 52, column: 42, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 58, column: 66, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !53)
!53 = !DILocation(line: 59, column: 42, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !53)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 39, scope: !7)
!59 = !DILocation(line: 65, column: 53, scope: !7)
!60 = !DILocation(line: 65, column: 31, scope: !7)
!61 = !DILocation(line: 65, column: 72, scope: !7)
!62 = !DILocation(line: 65, column: 64, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !64)
!64 = !DILocation(line: 66, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !64)
!68 = !DILocation(line: 68, column: 45, scope: !7)
!69 = !DILocation(line: 68, column: 31, scope: !7)
!70 = !DILocation(line: 68, column: 64, scope: !7)
!71 = !DILocation(line: 68, column: 56, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !73)
!73 = !DILocation(line: 69, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !73)
!77 = !DILocation(line: 71, column: 36, scope: !7)
!78 = !DILocation(line: 71, column: 50, scope: !7)
!79 = !DILocation(line: 71, column: 31, scope: !7)
!80 = !DILocation(line: 71, column: 61, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !82)
!82 = !DILocation(line: 72, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !82)
!86 = !DILocation(line: 78, column: 38, scope: !7)
!87 = !DILocation(line: 78, column: 52, scope: !7)
!88 = !DILocation(line: 78, column: 31, scope: !7)
!89 = !DILocation(line: 78, column: 63, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !91)
!91 = !DILocation(line: 79, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !91)
!95 = !DILocation(line: 81, column: 38, scope: !7)
!96 = !DILocation(line: 81, column: 52, scope: !7)
!97 = !DILocation(line: 81, column: 31, scope: !7)
!98 = !DILocation(line: 81, column: 63, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !100)
!100 = !DILocation(line: 82, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !100)
!104 = !DILocation(line: 84, column: 38, scope: !7)
!105 = !DILocation(line: 84, column: 52, scope: !7)
!106 = !DILocation(line: 84, column: 31, scope: !7)
!107 = !DILocation(line: 84, column: 63, scope: !7)
!108 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !109)
!109 = !DILocation(line: 85, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !109)
!112 = !DILocation(line: 86, column: 35, scope: !7)
!113 = !DILocation(line: 86, column: 47, scope: !7)
!114 = !DILocation(line: 86, column: 30, scope: !7)
!115 = !DILocation(line: 86, column: 40, scope: !7)
!116 = !DILocation(line: 86, column: 25, scope: !7)
!117 = !DILocation(line: 86, column: 59, scope: !7)
!118 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !109)
!119 = !DILocation(line: 86, column: 4, scope: !7)
