; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %13, 512, !dbg !14
  %15 = lshr i32 %8, 5, !dbg !15
  %16 = shl i32 %8, 4, !dbg !16
  %17 = and i32 %16, 3968, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %18 = sdiv i32 %.frozen, 128, !dbg !17
  %19 = shl i32 %18, 13, !dbg !18
  %20 = or disjoint i32 %17, %19, !dbg !19
  %21 = mul i32 %18, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %21, !dbg !20
  %22 = add nsw i32 %.decomposed, %17, !dbg !19
  %23 = add i32 %22, %19, !dbg !21
  %24 = add nsw i32 %.decomposed, 4096, !dbg !19
  %25 = add i32 %24, %20, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !22
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = fadd float %35, %44, !dbg !24
  %49 = select i1 %14, float %48, float 0.000000e+00, !dbg !24
  %50 = fadd float %36, %45, !dbg !24
  %51 = select i1 %14, float %50, float 0.000000e+00, !dbg !24
  %52 = fadd float %37, %46, !dbg !24
  %53 = select i1 %14, float %52, float 0.000000e+00, !dbg !24
  %54 = fadd float %38, %47, !dbg !24
  %55 = select i1 %14, float %54, float 0.000000e+00, !dbg !24
  %56 = bitcast float %49 to i32, !dbg !29
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 16, i32 31), !dbg !29
  %58 = bitcast i32 %57 to float, !dbg !29
  %59 = fadd float %49, %58, !dbg !24
  %60 = bitcast float %59 to i32, !dbg !29
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !29
  %62 = bitcast i32 %61 to float, !dbg !29
  %63 = fadd float %59, %62, !dbg !24
  %64 = bitcast float %51 to i32, !dbg !29
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = fadd float %51, %66, !dbg !24
  %68 = bitcast float %67 to i32, !dbg !29
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = fadd float %67, %70, !dbg !24
  %72 = bitcast float %53 to i32, !dbg !29
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = fadd float %53, %74, !dbg !24
  %76 = bitcast float %75 to i32, !dbg !29
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !29
  %78 = bitcast i32 %77 to float, !dbg !29
  %79 = fadd float %75, %78, !dbg !24
  %80 = bitcast float %55 to i32, !dbg !29
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !29
  %82 = bitcast i32 %81 to float, !dbg !29
  %83 = fadd float %55, %82, !dbg !24
  %84 = bitcast float %83 to i32, !dbg !29
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !29
  %86 = bitcast i32 %85 to float, !dbg !29
  %87 = fadd float %83, %86, !dbg !24
  %88 = icmp eq i32 %9, 0, !dbg !29
  %89 = and i32 %15, 7, !dbg !29
  %90 = shl nuw nsw i32 %11, 3, !dbg !29
  %91 = or disjoint i32 %90, %89, !dbg !29
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !29
  %93 = bitcast float %63 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %88) #5, !dbg !29
  %94 = or disjoint i32 %90, 8, !dbg !29
  %95 = or disjoint i32 %94, %89, !dbg !29
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !29
  %97 = bitcast float %71 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 %88) #5, !dbg !29
  %98 = or disjoint i32 %90, 16, !dbg !29
  %99 = or disjoint i32 %98, %89, !dbg !29
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !29
  %101 = bitcast float %79 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 %88) #5, !dbg !29
  %102 = or disjoint i32 %90, 24, !dbg !29
  %103 = or disjoint i32 %102, %89, !dbg !29
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !29
  %105 = bitcast float %87 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 %88) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %106 = icmp slt i32 %8, 256, !dbg !29
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !29
  %108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %107, i1 %106) #5, !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = fadd float %109, %111, !dbg !24
  %113 = bitcast float %112 to i32, !dbg !29
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = fadd float %112, %115, !dbg !24
  %117 = bitcast float %116 to i32, !dbg !29
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fadd float %116, %119, !dbg !24
  %121 = and i32 %8, 7, !dbg !29
  %122 = icmp eq i32 %121, 0, !dbg !29
  %123 = and i1 %106, %122, !dbg !29
  %124 = bitcast float %120 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %124, i1 %123) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !29
  %126 = load float, ptr addrspace(3) %125, align 16, !dbg !29
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !29
  %128 = load float, ptr addrspace(3) %127, align 16, !dbg !29
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !29
  %130 = load float, ptr addrspace(3) %129, align 16, !dbg !29
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !29
  %132 = load float, ptr addrspace(3) %131, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %134 = bitcast float %126 to i32, !dbg !30
  %135 = bitcast float %128 to i32, !dbg !30
  %136 = bitcast float %130 to i32, !dbg !30
  %137 = bitcast float %132 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %133, i32 %134, i32 %135, i32 %136, i32 %137, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %139 = load float, ptr addrspace(3) %138, align 4, !dbg !30
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 6.400000e+01) #5, !dbg !30
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 6.400000e+01) #5, !dbg !30
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float 6.400000e+01) #5, !dbg !30
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float 6.400000e+01) #5, !dbg !30
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float 6.400000e+01) #5, !dbg !30
  %145 = fsub float %35, %141, !dbg !31
  %146 = fsub float %36, %142, !dbg !31
  %147 = fsub float %37, %143, !dbg !31
  %148 = fsub float %38, %144, !dbg !31
  %149 = fsub float %44, %141, !dbg !31
  %150 = fsub float %45, %142, !dbg !31
  %151 = fsub float %46, %143, !dbg !31
  %152 = fsub float %47, %144, !dbg !31
  %153 = fmul float %145, %145, !dbg !32
  %154 = fmul float %146, %146, !dbg !32
  %155 = fmul float %147, %147, !dbg !32
  %156 = fmul float %148, %148, !dbg !32
  %157 = fmul float %149, %149, !dbg !32
  %158 = fmul float %150, %150, !dbg !32
  %159 = fmul float %151, %151, !dbg !32
  %160 = fmul float %152, %152, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %161 = fadd float %153, %157, !dbg !35
  %162 = select i1 %14, float %161, float 0.000000e+00, !dbg !35
  %163 = fadd float %154, %158, !dbg !35
  %164 = select i1 %14, float %163, float 0.000000e+00, !dbg !35
  %165 = fadd float %155, %159, !dbg !35
  %166 = select i1 %14, float %165, float 0.000000e+00, !dbg !35
  %167 = fadd float %156, %160, !dbg !35
  %168 = select i1 %14, float %167, float 0.000000e+00, !dbg !35
  %169 = bitcast float %162 to i32, !dbg !33
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 16, i32 31), !dbg !33
  %171 = bitcast i32 %170 to float, !dbg !33
  %172 = fadd float %162, %171, !dbg !35
  %173 = bitcast float %172 to i32, !dbg !33
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !33
  %175 = bitcast i32 %174 to float, !dbg !33
  %176 = fadd float %172, %175, !dbg !35
  %177 = bitcast float %164 to i32, !dbg !33
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !33
  %179 = bitcast i32 %178 to float, !dbg !33
  %180 = fadd float %164, %179, !dbg !35
  %181 = bitcast float %180 to i32, !dbg !33
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !33
  %183 = bitcast i32 %182 to float, !dbg !33
  %184 = fadd float %180, %183, !dbg !35
  %185 = bitcast float %166 to i32, !dbg !33
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 16, i32 31), !dbg !33
  %187 = bitcast i32 %186 to float, !dbg !33
  %188 = fadd float %166, %187, !dbg !35
  %189 = bitcast float %188 to i32, !dbg !33
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !33
  %191 = bitcast i32 %190 to float, !dbg !33
  %192 = fadd float %188, %191, !dbg !35
  %193 = bitcast float %168 to i32, !dbg !33
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 16, i32 31), !dbg !33
  %195 = bitcast i32 %194 to float, !dbg !33
  %196 = fadd float %168, %195, !dbg !35
  %197 = bitcast float %196 to i32, !dbg !33
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 8, i32 31), !dbg !33
  %199 = bitcast i32 %198 to float, !dbg !33
  %200 = fadd float %196, %199, !dbg !35
  %201 = bitcast float %176 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %201, i1 %88) #5, !dbg !33
  %202 = bitcast float %184 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %202, i1 %88) #5, !dbg !33
  %203 = bitcast float %192 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %203, i1 %88) #5, !dbg !33
  %204 = bitcast float %200 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %204, i1 %88) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %205 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %107, i1 %106) #5, !dbg !33
  %206 = bitcast i32 %205 to float, !dbg !33
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 4, i32 31), !dbg !33
  %208 = bitcast i32 %207 to float, !dbg !33
  %209 = fadd float %206, %208, !dbg !35
  %210 = bitcast float %209 to i32, !dbg !33
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !33
  %212 = bitcast i32 %211 to float, !dbg !33
  %213 = fadd float %209, %212, !dbg !35
  %214 = bitcast float %213 to i32, !dbg !33
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !33
  %216 = bitcast i32 %215 to float, !dbg !33
  %217 = fadd float %213, %216, !dbg !35
  %218 = bitcast float %217 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %218, i1 %123) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %219 = load i32, ptr addrspace(3) %125, align 16, !dbg !33
  %220 = load i32, ptr addrspace(3) %127, align 16, !dbg !33
  %221 = load i32, ptr addrspace(3) %129, align 16, !dbg !33
  %222 = load i32, ptr addrspace(3) %131, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %133, i32 %219, i32 %220, i32 %221, i32 %222, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %223 = load float, ptr addrspace(3) %138, align 4, !dbg !36
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float 6.400000e+01) #5, !dbg !37
  %225 = fadd float %224, 0x3EE4F8B580000000, !dbg !38
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %226, 0, !dbg !36
  br i1 %.not.i, label %229, label %227, !dbg !36

227:                                              ; preds = %5
  %228 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %225), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

229:                                              ; preds = %5
  %230 = tail call float @llvm.nvvm.rsqrt.approx.f(float %225), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %227, %229
  %.0.i = phi float [ %228, %227 ], [ %230, %229 ], !dbg !36
  %231 = or disjoint i32 %7, %12, !dbg !13
  %232 = icmp slt i32 %231, 512, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %233 = sext i32 %231 to i64, !dbg !40
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !40
  %235 = icmp eq i32 %89, 0, !dbg !41
  %236 = bitcast float %.0.i to i32, !dbg !41
  %237 = and i1 %235, %232, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %236, ptr addrspace(1) %234, i1 %237) #5, !dbg !41
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !42
  %239 = bitcast float %140 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %239, ptr addrspace(1) %238, i1 %237) #5, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdtowktg3jlqifd7up5nrmemcxra3zod2esq42z7msagpm2nddbq.py", directory: "inductor_cache/dt")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_28, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_28", linkageName: "triton_per_fused__native_batch_norm_legit_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 45, scope: !7)
!19 = !DILocation(line: 31, column: 39, scope: !7)
!20 = !DILocation(line: 31, column: 65, scope: !7)
!21 = !DILocation(line: 31, column: 60, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 73, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!34 = !DILocation(line: 44, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!36 = !DILocation(line: 49, column: 28, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 4, scope: !7)
!40 = !DILocation(line: 51, column: 28, scope: !7)
!41 = !DILocation(line: 51, column: 40, scope: !7)
!42 = !DILocation(line: 52, column: 25, scope: !7)
!43 = !DILocation(line: 52, column: 37, scope: !7)
!44 = !DILocation(line: 52, column: 4, scope: !7)
