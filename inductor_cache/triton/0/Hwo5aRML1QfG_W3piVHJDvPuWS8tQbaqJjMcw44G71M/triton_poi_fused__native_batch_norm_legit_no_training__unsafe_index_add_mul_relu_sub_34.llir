; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, i32 %29) local_unnamed_addr !dbg !7 {
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %32 = shl i32 %31, 8, !dbg !11
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %34 = shl i32 %33, 1, !dbg !12
  %35 = and i32 %34, 254, !dbg !12
  %36 = or disjoint i32 %32, %35, !dbg !13
  %37 = icmp slt i32 %36, 18432, !dbg !14
  %38 = sdiv i32 %36, 256, !dbg !15
  %39 = srem i32 %38, 18, !dbg !16
  %.frozen = freeze i32 %36, !dbg !17
  %40 = sdiv i32 %.frozen, 16, !dbg !17
  %41 = srem i32 %40, 16, !dbg !18
  %42 = mul i32 %40, 16, !dbg !19
  %.decomposed = sub i32 %.frozen, %42, !dbg !19
  %43 = sext i32 %36 to i64, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !20
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %37) #3, !dbg !21
  %46 = sext i32 %39 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %37) #3, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %37) #3, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %37) #3, !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %37) #3, !dbg !25
  %54 = bitcast i32 %53 to float, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %37) #3, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %37) #3, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %37) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %37) #3, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !30
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %37) #3, !dbg !31
  %63 = sext i32 %41 to i64, !dbg !32
  %64 = getelementptr i64, ptr addrspace(1) %7, i64 %63, !dbg !32
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %37) #3, !dbg !33
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %37) #3, !dbg !33
  %67 = sext i32 %.decomposed to i64, !dbg !34
  %68 = getelementptr i64, ptr addrspace(1) %8, i64 %67, !dbg !34
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %68, i1 %37) #3, !dbg !35
  %70 = getelementptr i64, ptr addrspace(1) %10, i64 %67, !dbg !36
  %71 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %70, i1 %37) #3, !dbg !37
  %72 = getelementptr float, ptr addrspace(1) %11, i64 %67, !dbg !38
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %37) #3, !dbg !39
  %74 = getelementptr i64, ptr addrspace(1) %12, i64 %63, !dbg !40
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 %37) #3, !dbg !41
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 %37) #3, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %13, i64 %63, !dbg !42
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %37) #3, !dbg !43
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %37) #3, !dbg !43
  %80 = getelementptr i64, ptr addrspace(1) %14, i64 %63, !dbg !44
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 %37) #3, !dbg !45
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 %37) #3, !dbg !45
  %83 = getelementptr i64, ptr addrspace(1) %15, i64 %67, !dbg !46
  %84 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %83, i1 %37) #3, !dbg !47
  %85 = getelementptr i64, ptr addrspace(1) %17, i64 %67, !dbg !48
  %86 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %85, i1 %37) #3, !dbg !49
  %87 = getelementptr float, ptr addrspace(1) %18, i64 %67, !dbg !50
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 %37) #3, !dbg !51
  %89 = getelementptr i64, ptr addrspace(1) %19, i64 %63, !dbg !52
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %37) #3, !dbg !53
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %37) #3, !dbg !53
  %92 = getelementptr float, ptr addrspace(1) %20, i64 %63, !dbg !54
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %37) #3, !dbg !55
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %37) #3, !dbg !55
  %95 = getelementptr i64, ptr addrspace(1) %21, i64 %63, !dbg !56
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 %37) #3, !dbg !57
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 %37) #3, !dbg !57
  %98 = getelementptr i64, ptr addrspace(1) %22, i64 %67, !dbg !58
  %99 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %98, i1 %37) #3, !dbg !59
  %100 = getelementptr i64, ptr addrspace(1) %24, i64 %67, !dbg !60
  %101 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %100, i1 %37) #3, !dbg !61
  %102 = getelementptr float, ptr addrspace(1) %25, i64 %67, !dbg !62
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %102, i1 %37) #3, !dbg !63
  %104 = getelementptr i64, ptr addrspace(1) %26, i64 %63, !dbg !64
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %104, i1 %37) #3, !dbg !65
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %104, i1 %37) #3, !dbg !65
  %107 = getelementptr float, ptr addrspace(1) %27, i64 %63, !dbg !66
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %37) #3, !dbg !67
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %37) #3, !dbg !67
  %110 = fadd float %52, 0x3EE4F8B580000000, !dbg !68
  %111 = fadd float %54, 0x3EE4F8B580000000, !dbg !68
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i = icmp eq i32 %112, 0, !dbg !69
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i = icmp eq i32 %113, 0, !dbg !69
  br i1 %.not.i, label %119, label %114, !dbg !69

114:                                              ; preds = %30
  br i1 %.not1.i, label %117, label %115, !dbg !69

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

119:                                              ; preds = %30
  br i1 %.not1.i, label %122, label %120, !dbg !69

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

__nv_sqrtf.exit:                                  ; preds = %115, %117, %120, %122
  %.0.i = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !69
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i1 = icmp eq i32 %124, 0, !dbg !69
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i4 = icmp eq i32 %125, 0, !dbg !69
  br i1 %.not.i1, label %131, label %126, !dbg !69

126:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %129, label %127, !dbg !69

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

131:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %134, label %132, !dbg !69

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

__nv_sqrtf.exit5:                                 ; preds = %127, %129, %132, %134
  %.0.i3 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !69
  %136 = extractvalue { i32, i32 } %45, 1, !dbg !21
  %137 = bitcast i32 %136 to float, !dbg !21
  %138 = bitcast i32 %49 to float, !dbg !23
  %139 = fsub float %137, %138, !dbg !70
  %140 = extractvalue { i32, i32 } %45, 0, !dbg !21
  %141 = bitcast i32 %140 to float, !dbg !21
  %142 = bitcast i32 %48 to float, !dbg !23
  %143 = fsub float %141, %142, !dbg !70
  %144 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !55
  %145 = insertelement <2 x i32> %144, i32 %109, i64 1, !dbg !55
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !55
  %147 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !55
  %148 = insertelement <2 x i32> %147, i32 %108, i64 1, !dbg !55
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !55
  %150 = extractvalue { i32, i32 } %103, 1, !dbg !63
  %151 = extractvalue { i32, i32 } %103, 0, !dbg !63
  %152 = extractvalue { i64, i64 } %101, 1, !dbg !61
  %153 = extractvalue { i64, i64 } %101, 0, !dbg !61
  %154 = extractvalue { i64, i64 } %99, 1, !dbg !59
  %155 = extractvalue { i64, i64 } %99, 0, !dbg !59
  %156 = extractvalue { i32, i32 } %88, 1, !dbg !51
  %157 = extractvalue { i32, i32 } %88, 0, !dbg !51
  %158 = extractvalue { i64, i64 } %86, 1, !dbg !49
  %159 = extractvalue { i64, i64 } %86, 0, !dbg !49
  %160 = extractvalue { i64, i64 } %84, 1, !dbg !47
  %161 = extractvalue { i64, i64 } %84, 0, !dbg !47
  %162 = bitcast i32 %79 to float, !dbg !43
  %163 = bitcast i32 %78 to float, !dbg !43
  %164 = extractvalue { i32, i32 } %73, 1, !dbg !39
  %165 = extractvalue { i32, i32 } %73, 0, !dbg !39
  %166 = extractvalue { i64, i64 } %71, 1, !dbg !37
  %167 = extractvalue { i64, i64 } %71, 0, !dbg !37
  %168 = extractvalue { i64, i64 } %69, 1, !dbg !35
  %169 = extractvalue { i64, i64 } %69, 0, !dbg !35
  %170 = extractvalue { i32, i32 } %62, 1, !dbg !31
  %171 = bitcast i32 %170 to float, !dbg !31
  %172 = extractvalue { i32, i32 } %62, 0, !dbg !31
  %173 = bitcast i32 %172 to float, !dbg !31
  %174 = bitcast i32 %60 to float, !dbg !29
  %175 = bitcast i32 %59 to float, !dbg !29
  %176 = bitcast i32 %57 to float, !dbg !27
  %177 = bitcast i32 %56 to float, !dbg !27
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !71
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !71
  %180 = fmul float %143, %178, !dbg !72
  %181 = fmul float %139, %179, !dbg !72
  %182 = fmul float %180, %177, !dbg !73
  %183 = fmul float %181, %176, !dbg !73
  %184 = fadd float %182, %175, !dbg !74
  %185 = fadd float %183, %174, !dbg !74
  %186 = fadd float %184, %173, !dbg !75
  %187 = fadd float %185, %171, !dbg !75
  %188 = fcmp olt float %186, 0.000000e+00, !dbg !76
  %189 = fcmp olt float %187, 0.000000e+00, !dbg !76
  %190 = select i1 %188, float 0.000000e+00, float %186, !dbg !80
  %191 = select i1 %189, float 0.000000e+00, float %187, !dbg !80
  %192 = lshr i64 %65, 60, !dbg !81
  %193 = and i64 %192, 8, !dbg !81
  %194 = add i64 %193, %65, !dbg !81
  %195 = lshr i64 %169, 60, !dbg !82
  %196 = and i64 %195, 8, !dbg !82
  %197 = lshr i64 %168, 60, !dbg !82
  %198 = and i64 %197, 8, !dbg !82
  %199 = shl i64 %194, 3, !dbg !83
  %200 = shl nsw i32 %38, 6, !dbg !84
  %201 = sext i32 %200 to i64, !dbg !85
  %202 = getelementptr float, ptr addrspace(1) %9, i64 %169, !dbg !86
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %196, !dbg !86
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %199, !dbg !86
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %201, !dbg !86
  %206 = getelementptr float, ptr addrspace(1) %9, i64 %168, !dbg !86
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %198, !dbg !86
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %199, !dbg !86
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %201, !dbg !86
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %37) #3, !dbg !87
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %37) #3, !dbg !87
  %212 = lshr i64 %167, 60, !dbg !88
  %213 = and i64 %212, 8, !dbg !88
  %214 = lshr i64 %166, 60, !dbg !88
  %215 = and i64 %214, 8, !dbg !88
  %216 = getelementptr float, ptr addrspace(1) %9, i64 %167, !dbg !89
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %213, !dbg !89
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %199, !dbg !89
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %201, !dbg !89
  %220 = getelementptr float, ptr addrspace(1) %9, i64 %166, !dbg !89
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %215, !dbg !89
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %199, !dbg !89
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %201, !dbg !89
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %37) #3, !dbg !90
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %37) #3, !dbg !90
  %226 = fadd float %190, 0.000000e+00, !dbg !91
  %227 = fadd float %191, 0.000000e+00, !dbg !91
  %228 = lshr i64 %75, 60, !dbg !92
  %229 = and i64 %228, 8, !dbg !92
  %230 = add i64 %229, %75, !dbg !92
  %231 = shl i64 %230, 3, !dbg !93
  %232 = getelementptr float, ptr addrspace(1) %203, i64 %231, !dbg !94
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %201, !dbg !94
  %234 = getelementptr float, ptr addrspace(1) %207, i64 %231, !dbg !94
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %201, !dbg !94
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %37) #3, !dbg !95
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %37) #3, !dbg !95
  %238 = getelementptr float, ptr addrspace(1) %217, i64 %231, !dbg !96
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %201, !dbg !96
  %240 = getelementptr float, ptr addrspace(1) %221, i64 %231, !dbg !96
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %201, !dbg !96
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %37) #3, !dbg !97
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %37) #3, !dbg !97
  %244 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !95
  %245 = insertelement <2 x i32> %244, i32 %210, i64 1, !dbg !95
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !95
  %247 = insertelement <2 x i32> poison, i32 %242, i64 0, !dbg !97
  %248 = insertelement <2 x i32> %247, i32 %224, i64 1, !dbg !97
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !97
  %250 = fsub <2 x float> %249, %246, !dbg !98
  %251 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !99
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !99
  %253 = shufflevector <2 x float> %252, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %254 = fmul <2 x float> %250, %253, !dbg !99
  %255 = fadd <2 x float> %254, %246, !dbg !100
  %256 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !95
  %257 = insertelement <2 x i32> %256, i32 %211, i64 1, !dbg !95
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !95
  %259 = insertelement <2 x i32> poison, i32 %243, i64 0, !dbg !97
  %260 = insertelement <2 x i32> %259, i32 %225, i64 1, !dbg !97
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !97
  %262 = fsub <2 x float> %261, %258, !dbg !98
  %263 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !99
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !99
  %265 = shufflevector <2 x float> %264, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %266 = fmul <2 x float> %262, %265, !dbg !99
  %267 = fadd <2 x float> %266, %258, !dbg !100
  %268 = extractelement <2 x float> %255, i64 0, !dbg !101
  %269 = extractelement <2 x float> %255, i64 1, !dbg !102
  %270 = fsub float %268, %269, !dbg !101
  %271 = extractelement <2 x float> %267, i64 0, !dbg !101
  %272 = extractelement <2 x float> %267, i64 1, !dbg !102
  %273 = fsub float %271, %272, !dbg !101
  %274 = fmul float %270, %163, !dbg !103
  %275 = fmul float %273, %162, !dbg !103
  %276 = fadd float %269, %274, !dbg !102
  %277 = fadd float %272, %275, !dbg !102
  %278 = fadd float %226, %276, !dbg !104
  %279 = fadd float %227, %277, !dbg !104
  %280 = lshr i64 %81, 61, !dbg !105
  %281 = and i64 %280, 4, !dbg !105
  %282 = add i64 %281, %81, !dbg !105
  %283 = lshr i64 %161, 61, !dbg !106
  %284 = and i64 %283, 4, !dbg !106
  %285 = lshr i64 %160, 61, !dbg !106
  %286 = and i64 %285, 4, !dbg !106
  %287 = shl i64 %282, 2, !dbg !107
  %288 = shl nsw i32 %38, 4, !dbg !108
  %289 = sext i32 %288 to i64, !dbg !109
  %290 = getelementptr float, ptr addrspace(1) %16, i64 %161, !dbg !110
  %291 = getelementptr float, ptr addrspace(1) %290, i64 %284, !dbg !110
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %287, !dbg !110
  %293 = getelementptr float, ptr addrspace(1) %292, i64 %289, !dbg !110
  %294 = getelementptr float, ptr addrspace(1) %16, i64 %160, !dbg !110
  %295 = getelementptr float, ptr addrspace(1) %294, i64 %286, !dbg !110
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %287, !dbg !110
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %289, !dbg !110
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %37) #3, !dbg !111
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %37) #3, !dbg !111
  %300 = lshr i64 %159, 61, !dbg !112
  %301 = and i64 %300, 4, !dbg !112
  %302 = lshr i64 %158, 61, !dbg !112
  %303 = and i64 %302, 4, !dbg !112
  %304 = getelementptr float, ptr addrspace(1) %16, i64 %159, !dbg !113
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %301, !dbg !113
  %306 = getelementptr float, ptr addrspace(1) %305, i64 %287, !dbg !113
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %289, !dbg !113
  %308 = getelementptr float, ptr addrspace(1) %16, i64 %158, !dbg !113
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %303, !dbg !113
  %310 = getelementptr float, ptr addrspace(1) %309, i64 %287, !dbg !113
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %289, !dbg !113
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 %37) #3, !dbg !114
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 %37) #3, !dbg !114
  %314 = lshr i64 %90, 61, !dbg !115
  %315 = and i64 %314, 4, !dbg !115
  %316 = add i64 %315, %90, !dbg !115
  %317 = shl i64 %316, 2, !dbg !116
  %318 = getelementptr float, ptr addrspace(1) %291, i64 %317, !dbg !117
  %319 = getelementptr float, ptr addrspace(1) %318, i64 %289, !dbg !117
  %320 = getelementptr float, ptr addrspace(1) %295, i64 %317, !dbg !117
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %289, !dbg !117
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 %37) #3, !dbg !118
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %37) #3, !dbg !118
  %324 = getelementptr float, ptr addrspace(1) %305, i64 %317, !dbg !119
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %289, !dbg !119
  %326 = getelementptr float, ptr addrspace(1) %309, i64 %317, !dbg !119
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %289, !dbg !119
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %37) #3, !dbg !120
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %37) #3, !dbg !120
  %330 = lshr i64 %96, 62, !dbg !121
  %331 = and i64 %330, 2, !dbg !121
  %332 = add i64 %331, %96, !dbg !121
  %333 = lshr i64 %155, 62, !dbg !122
  %334 = and i64 %333, 2, !dbg !122
  %335 = lshr i64 %154, 62, !dbg !122
  %336 = and i64 %335, 2, !dbg !122
  %337 = shl i64 %332, 1, !dbg !123
  %338 = shl nsw i32 %38, 2, !dbg !124
  %339 = sext i32 %338 to i64, !dbg !125
  %340 = getelementptr float, ptr addrspace(1) %23, i64 %155, !dbg !126
  %341 = getelementptr float, ptr addrspace(1) %340, i64 %334, !dbg !126
  %342 = getelementptr float, ptr addrspace(1) %341, i64 %337, !dbg !126
  %343 = getelementptr float, ptr addrspace(1) %342, i64 %339, !dbg !126
  %344 = getelementptr float, ptr addrspace(1) %23, i64 %154, !dbg !126
  %345 = getelementptr float, ptr addrspace(1) %344, i64 %336, !dbg !126
  %346 = getelementptr float, ptr addrspace(1) %345, i64 %337, !dbg !126
  %347 = getelementptr float, ptr addrspace(1) %346, i64 %339, !dbg !126
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %343, i1 %37) #3, !dbg !127
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %347, i1 %37) #3, !dbg !127
  %350 = lshr i64 %153, 62, !dbg !128
  %351 = and i64 %350, 2, !dbg !128
  %352 = lshr i64 %152, 62, !dbg !128
  %353 = and i64 %352, 2, !dbg !128
  %354 = getelementptr float, ptr addrspace(1) %23, i64 %153, !dbg !129
  %355 = getelementptr float, ptr addrspace(1) %354, i64 %351, !dbg !129
  %356 = getelementptr float, ptr addrspace(1) %355, i64 %337, !dbg !129
  %357 = getelementptr float, ptr addrspace(1) %356, i64 %339, !dbg !129
  %358 = getelementptr float, ptr addrspace(1) %23, i64 %152, !dbg !129
  %359 = getelementptr float, ptr addrspace(1) %358, i64 %353, !dbg !129
  %360 = getelementptr float, ptr addrspace(1) %359, i64 %337, !dbg !129
  %361 = getelementptr float, ptr addrspace(1) %360, i64 %339, !dbg !129
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 %37) #3, !dbg !130
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %37) #3, !dbg !130
  %364 = lshr i64 %105, 62, !dbg !131
  %365 = and i64 %364, 2, !dbg !131
  %366 = add i64 %365, %105, !dbg !131
  %367 = shl i64 %366, 1, !dbg !132
  %368 = getelementptr float, ptr addrspace(1) %341, i64 %367, !dbg !133
  %369 = getelementptr float, ptr addrspace(1) %368, i64 %339, !dbg !133
  %370 = getelementptr float, ptr addrspace(1) %345, i64 %367, !dbg !133
  %371 = getelementptr float, ptr addrspace(1) %370, i64 %339, !dbg !133
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 %37) #3, !dbg !134
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %371, i1 %37) #3, !dbg !134
  %374 = getelementptr float, ptr addrspace(1) %355, i64 %367, !dbg !135
  %375 = getelementptr float, ptr addrspace(1) %374, i64 %339, !dbg !135
  %376 = getelementptr float, ptr addrspace(1) %359, i64 %367, !dbg !135
  %377 = getelementptr float, ptr addrspace(1) %376, i64 %339, !dbg !135
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 %37) #3, !dbg !136
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 %37) #3, !dbg !136
  %380 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !51
  %381 = insertelement <2 x i32> %380, i32 %151, i64 1, !dbg !51
  %382 = bitcast <2 x i32> %381 to <2 x float>, !dbg !51
  %383 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !111
  %384 = insertelement <2 x i32> %383, i32 %348, i64 1, !dbg !111
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !111
  %386 = insertelement <2 x i32> poison, i32 %312, i64 0, !dbg !114
  %387 = insertelement <2 x i32> %386, i32 %362, i64 1, !dbg !114
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !114
  %389 = fsub <2 x float> %388, %385, !dbg !137
  %390 = fmul <2 x float> %389, %382, !dbg !138
  %391 = fadd <2 x float> %390, %385, !dbg !139
  %392 = insertelement <2 x i32> poison, i32 %322, i64 0, !dbg !118
  %393 = insertelement <2 x i32> %392, i32 %372, i64 1, !dbg !118
  %394 = bitcast <2 x i32> %393 to <2 x float>, !dbg !118
  %395 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !120
  %396 = insertelement <2 x i32> %395, i32 %378, i64 1, !dbg !120
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !120
  %398 = fsub <2 x float> %397, %394, !dbg !140
  %399 = fmul <2 x float> %398, %382, !dbg !141
  %400 = fadd <2 x float> %399, %394, !dbg !142
  %401 = fsub <2 x float> %400, %391, !dbg !143
  %402 = fmul <2 x float> %401, %149, !dbg !144
  %403 = fadd <2 x float> %391, %402, !dbg !145
  %404 = extractelement <2 x float> %403, i64 0, !dbg !146
  %405 = fadd float %278, %404, !dbg !146
  %406 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !51
  %407 = insertelement <2 x i32> %406, i32 %150, i64 1, !dbg !51
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !51
  %409 = insertelement <2 x i32> poison, i32 %299, i64 0, !dbg !111
  %410 = insertelement <2 x i32> %409, i32 %349, i64 1, !dbg !111
  %411 = bitcast <2 x i32> %410 to <2 x float>, !dbg !111
  %412 = insertelement <2 x i32> poison, i32 %313, i64 0, !dbg !114
  %413 = insertelement <2 x i32> %412, i32 %363, i64 1, !dbg !114
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !114
  %415 = fsub <2 x float> %414, %411, !dbg !137
  %416 = fmul <2 x float> %415, %408, !dbg !138
  %417 = fadd <2 x float> %416, %411, !dbg !139
  %418 = insertelement <2 x i32> poison, i32 %323, i64 0, !dbg !118
  %419 = insertelement <2 x i32> %418, i32 %373, i64 1, !dbg !118
  %420 = bitcast <2 x i32> %419 to <2 x float>, !dbg !118
  %421 = insertelement <2 x i32> poison, i32 %329, i64 0, !dbg !120
  %422 = insertelement <2 x i32> %421, i32 %379, i64 1, !dbg !120
  %423 = bitcast <2 x i32> %422 to <2 x float>, !dbg !120
  %424 = fsub <2 x float> %423, %420, !dbg !140
  %425 = fmul <2 x float> %424, %408, !dbg !141
  %426 = fadd <2 x float> %425, %420, !dbg !142
  %427 = fsub <2 x float> %426, %417, !dbg !143
  %428 = fmul <2 x float> %427, %146, !dbg !144
  %429 = fadd <2 x float> %417, %428, !dbg !145
  %430 = extractelement <2 x float> %429, i64 0, !dbg !146
  %431 = fadd float %279, %430, !dbg !146
  %432 = extractelement <2 x float> %403, i64 1, !dbg !147
  %433 = fadd float %405, %432, !dbg !147
  %434 = extractelement <2 x float> %429, i64 1, !dbg !147
  %435 = fadd float %431, %434, !dbg !147
  %436 = fcmp olt float %433, 0.000000e+00, !dbg !148
  %437 = fcmp olt float %435, 0.000000e+00, !dbg !148
  %438 = select i1 %436, float 0.000000e+00, float %433, !dbg !150
  %439 = select i1 %437, float 0.000000e+00, float %435, !dbg !150
  %440 = getelementptr float, ptr addrspace(1) %28, i64 %43, !dbg !151
  %441 = bitcast float %190 to i32, !dbg !152
  %442 = bitcast float %191 to i32, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %441, i32 %442, ptr addrspace(1) %440, i1 %37) #3, !dbg !152
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !153
  %444 = bitcast float %438 to i32, !dbg !154
  %445 = bitcast float %439 to i32, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %444, i32 %445, ptr addrspace(1) %443, i1 %37) #3, !dbg !154
  ret void, !dbg !155
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crt4snuunpaic5hzxfx6vf72ahvhuh7a6kpi2ej4iakvcw62k7yg.py", directory: "inductor_cache/rt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_34", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 32, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 32, scope: !7)
!51 = !DILocation(line: 44, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 32, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 46, column: 32, scope: !7)
!55 = !DILocation(line: 46, column: 37, scope: !7)
!56 = !DILocation(line: 47, column: 32, scope: !7)
!57 = !DILocation(line: 47, column: 37, scope: !7)
!58 = !DILocation(line: 48, column: 32, scope: !7)
!59 = !DILocation(line: 48, column: 37, scope: !7)
!60 = !DILocation(line: 49, column: 32, scope: !7)
!61 = !DILocation(line: 49, column: 37, scope: !7)
!62 = !DILocation(line: 50, column: 33, scope: !7)
!63 = !DILocation(line: 50, column: 38, scope: !7)
!64 = !DILocation(line: 51, column: 33, scope: !7)
!65 = !DILocation(line: 51, column: 38, scope: !7)
!66 = !DILocation(line: 52, column: 33, scope: !7)
!67 = !DILocation(line: 52, column: 38, scope: !7)
!68 = !DILocation(line: 55, column: 18, scope: !7)
!69 = !DILocation(line: 56, column: 26, scope: !7)
!70 = !DILocation(line: 53, column: 18, scope: !7)
!71 = !DILocation(line: 58, column: 18, scope: !7)
!72 = !DILocation(line: 61, column: 19, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 63, column: 20, scope: !7)
!75 = !DILocation(line: 64, column: 20, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !79)
!77 = distinct !DILexicalBlockFile(scope: !7, file: !78, discriminator: 0)
!78 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!79 = !DILocation(line: 66, column: 42, scope: !7)
!80 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !79)
!81 = !DILocation(line: 70, column: 35, scope: !7)
!82 = !DILocation(line: 73, column: 35, scope: !7)
!83 = !DILocation(line: 74, column: 41, scope: !7)
!84 = !DILocation(line: 74, column: 52, scope: !7)
!85 = !DILocation(line: 74, column: 49, scope: !7)
!86 = !DILocation(line: 74, column: 31, scope: !7)
!87 = !DILocation(line: 74, column: 57, scope: !7)
!88 = !DILocation(line: 77, column: 35, scope: !7)
!89 = !DILocation(line: 78, column: 31, scope: !7)
!90 = !DILocation(line: 78, column: 57, scope: !7)
!91 = !DILocation(line: 83, column: 20, scope: !7)
!92 = !DILocation(line: 86, column: 35, scope: !7)
!93 = !DILocation(line: 87, column: 41, scope: !7)
!94 = !DILocation(line: 87, column: 31, scope: !7)
!95 = !DILocation(line: 87, column: 57, scope: !7)
!96 = !DILocation(line: 88, column: 31, scope: !7)
!97 = !DILocation(line: 88, column: 57, scope: !7)
!98 = !DILocation(line: 89, column: 20, scope: !7)
!99 = !DILocation(line: 90, column: 20, scope: !7)
!100 = !DILocation(line: 91, column: 20, scope: !7)
!101 = !DILocation(line: 92, column: 20, scope: !7)
!102 = !DILocation(line: 94, column: 20, scope: !7)
!103 = !DILocation(line: 93, column: 20, scope: !7)
!104 = !DILocation(line: 95, column: 20, scope: !7)
!105 = !DILocation(line: 99, column: 35, scope: !7)
!106 = !DILocation(line: 102, column: 35, scope: !7)
!107 = !DILocation(line: 103, column: 42, scope: !7)
!108 = !DILocation(line: 103, column: 53, scope: !7)
!109 = !DILocation(line: 103, column: 50, scope: !7)
!110 = !DILocation(line: 103, column: 32, scope: !7)
!111 = !DILocation(line: 103, column: 58, scope: !7)
!112 = !DILocation(line: 106, column: 35, scope: !7)
!113 = !DILocation(line: 107, column: 32, scope: !7)
!114 = !DILocation(line: 107, column: 58, scope: !7)
!115 = !DILocation(line: 113, column: 35, scope: !7)
!116 = !DILocation(line: 114, column: 42, scope: !7)
!117 = !DILocation(line: 114, column: 32, scope: !7)
!118 = !DILocation(line: 114, column: 58, scope: !7)
!119 = !DILocation(line: 115, column: 32, scope: !7)
!120 = !DILocation(line: 115, column: 58, scope: !7)
!121 = !DILocation(line: 126, column: 35, scope: !7)
!122 = !DILocation(line: 129, column: 35, scope: !7)
!123 = !DILocation(line: 130, column: 42, scope: !7)
!124 = !DILocation(line: 130, column: 52, scope: !7)
!125 = !DILocation(line: 130, column: 50, scope: !7)
!126 = !DILocation(line: 130, column: 32, scope: !7)
!127 = !DILocation(line: 130, column: 57, scope: !7)
!128 = !DILocation(line: 133, column: 37, scope: !7)
!129 = !DILocation(line: 134, column: 33, scope: !7)
!130 = !DILocation(line: 134, column: 59, scope: !7)
!131 = !DILocation(line: 140, column: 38, scope: !7)
!132 = !DILocation(line: 141, column: 43, scope: !7)
!133 = !DILocation(line: 141, column: 33, scope: !7)
!134 = !DILocation(line: 141, column: 59, scope: !7)
!135 = !DILocation(line: 142, column: 33, scope: !7)
!136 = !DILocation(line: 142, column: 60, scope: !7)
!137 = !DILocation(line: 108, column: 20, scope: !7)
!138 = !DILocation(line: 109, column: 20, scope: !7)
!139 = !DILocation(line: 110, column: 20, scope: !7)
!140 = !DILocation(line: 116, column: 20, scope: !7)
!141 = !DILocation(line: 117, column: 20, scope: !7)
!142 = !DILocation(line: 118, column: 20, scope: !7)
!143 = !DILocation(line: 119, column: 20, scope: !7)
!144 = !DILocation(line: 120, column: 20, scope: !7)
!145 = !DILocation(line: 121, column: 20, scope: !7)
!146 = !DILocation(line: 122, column: 20, scope: !7)
!147 = !DILocation(line: 149, column: 21, scope: !7)
!148 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !149)
!149 = !DILocation(line: 150, column: 43, scope: !7)
!150 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !149)
!151 = !DILocation(line: 151, column: 25, scope: !7)
!152 = !DILocation(line: 151, column: 37, scope: !7)
!153 = !DILocation(line: 152, column: 28, scope: !7)
!154 = !DILocation(line: 152, column: 41, scope: !7)
!155 = !DILocation(line: 152, column: 4, scope: !7)
