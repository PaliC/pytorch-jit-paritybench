; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %.lobit3 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %.lobit3, 3, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %11, 16, !dbg !13
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = icmp slt i32 %11, 100, !dbg !14
  %22 = icmp slt i32 %12, 100, !dbg !14
  %23 = icmp slt i32 %13, 100, !dbg !14
  %24 = icmp slt i32 %14, 100, !dbg !14
  %25 = icmp slt i32 %15, 100, !dbg !14
  %26 = icmp slt i32 %16, 100, !dbg !14
  %27 = icmp slt i32 %17, 100, !dbg !14
  %28 = icmp slt i32 %18, 100, !dbg !14
  %29 = icmp slt i32 %19, 100, !dbg !14
  %30 = icmp slt i32 %20, 100, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 5, !dbg !16
  %33 = shl i32 %7, 2, !dbg !17
  %34 = and i32 %33, 28, !dbg !17
  %35 = and i32 %7, 31, !dbg !17
  %36 = or disjoint i32 %32, %34, !dbg !18
  %37 = or disjoint i32 %32, %35, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %38 = sdiv i32 %.frozen, 25, !dbg !19
  %39 = mul i32 %38, 25, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %.frozen4 = freeze i32 %14, !dbg !19
  %40 = sdiv i32 %.frozen4, 25, !dbg !19
  %41 = mul i32 %40, 25, !dbg !20
  %.decomposed5 = sub i32 %.frozen4, %41, !dbg !20
  %.frozen6 = freeze i32 %15, !dbg !19
  %42 = sdiv i32 %.frozen6, 25, !dbg !19
  %43 = mul i32 %42, 25, !dbg !20
  %.decomposed7 = sub i32 %.frozen6, %43, !dbg !20
  %.frozen8 = freeze i32 %16, !dbg !19
  %44 = sdiv i32 %.frozen8, 25, !dbg !19
  %45 = mul i32 %44, 25, !dbg !20
  %.decomposed9 = sub i32 %.frozen8, %45, !dbg !20
  %.frozen10 = freeze i32 %17, !dbg !19
  %46 = sdiv i32 %.frozen10, 25, !dbg !19
  %47 = mul i32 %46, 25, !dbg !20
  %.decomposed11 = sub i32 %.frozen10, %47, !dbg !20
  %.frozen12 = freeze i32 %18, !dbg !19
  %48 = sdiv i32 %.frozen12, 25, !dbg !19
  %49 = mul i32 %48, 25, !dbg !20
  %.decomposed13 = sub i32 %.frozen12, %49, !dbg !20
  %.frozen14 = freeze i32 %19, !dbg !19
  %50 = sdiv i32 %.frozen14, 25, !dbg !19
  %51 = mul i32 %50, 25, !dbg !20
  %.decomposed15 = sub i32 %.frozen14, %51, !dbg !20
  %.frozen16 = freeze i32 %20, !dbg !19
  %52 = sdiv i32 %.frozen16, 25, !dbg !19
  %53 = mul i32 %52, 25, !dbg !20
  %.decomposed17 = sub i32 %.frozen16, %53, !dbg !20
  %54 = shl i32 %11, 12, !dbg !21
  %55 = shl i32 %12, 12, !dbg !21
  %56 = add i32 %36, %54, !dbg !22
  %57 = add i32 %36, %55, !dbg !22
  %58 = sext i32 %56 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %57 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %21) #2, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %22) #2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = mul i32 %37, 25, !dbg !25
  %73 = add i32 %72, %.decomposed, !dbg !26
  %74 = mul i32 %38, 102400, !dbg !27
  %75 = mul i32 %40, 102400, !dbg !27
  %76 = mul i32 %42, 102400, !dbg !27
  %77 = mul i32 %44, 102400, !dbg !27
  %78 = mul i32 %46, 102400, !dbg !27
  %79 = mul i32 %48, 102400, !dbg !27
  %80 = mul i32 %50, 102400, !dbg !27
  %81 = mul i32 %52, 102400, !dbg !27
  %82 = add i32 %73, %74, !dbg !28
  %83 = add i32 %75, %.decomposed5, !dbg !26
  %84 = add i32 %83, %72, !dbg !28
  %85 = add i32 %76, %.decomposed7, !dbg !26
  %86 = add i32 %85, %72, !dbg !28
  %87 = add i32 %77, %.decomposed9, !dbg !26
  %88 = add i32 %87, %72, !dbg !28
  %89 = add i32 %78, %.decomposed11, !dbg !26
  %90 = add i32 %89, %72, !dbg !28
  %91 = add i32 %79, %.decomposed13, !dbg !26
  %92 = add i32 %91, %72, !dbg !28
  %93 = add i32 %80, %.decomposed15, !dbg !26
  %94 = add i32 %93, %72, !dbg !28
  %95 = add i32 %81, %.decomposed17, !dbg !26
  %96 = add i32 %95, %72, !dbg !28
  %97 = sext i32 %82 to i64, !dbg !29
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !29
  %99 = sext i32 %84 to i64, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !29
  %101 = sext i32 %86 to i64, !dbg !29
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !29
  %103 = sext i32 %88 to i64, !dbg !29
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !29
  %105 = sext i32 %90 to i64, !dbg !29
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !29
  %107 = sext i32 %92 to i64, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !29
  %109 = sext i32 %94 to i64, !dbg !29
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !29
  %111 = sext i32 %96 to i64, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !29
  %113 = and i32 %33, 508, !dbg !30
  %114 = and i32 %7, 127, !dbg !30
  %115 = lshr i32 %33, 5, !dbg !30
  %116 = and i32 %115, 15, !dbg !30
  %117 = add nuw nsw i32 %116, %113, !dbg !30
  %118 = zext nneg i32 %117 to i64, !dbg !30
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !30
  %120 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !30
  %121 = or disjoint i32 %113, 1, !dbg !30
  %122 = add nuw nsw i32 %121, %116, !dbg !30
  %123 = zext nneg i32 %122 to i64, !dbg !30
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !30
  %125 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !30
  %126 = or disjoint i32 %113, 2, !dbg !30
  %127 = add nuw nsw i32 %126, %116, !dbg !30
  %128 = zext nneg i32 %127 to i64, !dbg !30
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %128, !dbg !30
  %130 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !30
  %131 = or disjoint i32 %113, 3, !dbg !30
  %132 = add nuw nsw i32 %131, %116, !dbg !30
  %133 = zext nneg i32 %132 to i64, !dbg !30
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %133, !dbg !30
  %135 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %136 = lshr i32 %114, 5, !dbg !30
  %137 = add nuw nsw i32 %136, %114, !dbg !30
  %138 = zext nneg i32 %137 to i64, !dbg !30
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !30
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !30
  %141 = or disjoint i32 %114, 128, !dbg !30
  %142 = lshr i32 %141, 5, !dbg !30
  %143 = add nuw nsw i32 %142, %141, !dbg !30
  %144 = zext nneg i32 %143 to i64, !dbg !30
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !30
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !30
  %147 = or disjoint i32 %114, 256, !dbg !30
  %148 = lshr i32 %147, 5, !dbg !30
  %149 = add nuw nsw i32 %148, %147, !dbg !30
  %150 = zext nneg i32 %149 to i64, !dbg !30
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !30
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !30
  %153 = or disjoint i32 %114, 384, !dbg !30
  %154 = lshr i32 %153, 5, !dbg !30
  %155 = add nuw nsw i32 %154, %153, !dbg !30
  %156 = zext nneg i32 %155 to i64, !dbg !30
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %156, !dbg !30
  %158 = load i32, ptr addrspace(3) %157, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %159 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %159, i1 true) #2, !dbg !30
  %160 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %160, i1 true) #2, !dbg !30
  %161 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %161, i1 true) #2, !dbg !30
  %162 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %162, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %163 = load i32, ptr addrspace(3) %139, align 4, !dbg !30
  %164 = load i32, ptr addrspace(3) %145, align 4, !dbg !30
  %165 = load i32, ptr addrspace(3) %151, align 4, !dbg !30
  %166 = load i32, ptr addrspace(3) %157, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %98, i1 %23) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %100, i1 %24) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %102, i1 %25) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %104, i1 %26) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %106, i1 %27) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %108, i1 %28) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %110, i1 %29) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %112, i1 %30) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnto76x7xvtly7rt3io466bx3kuvd66olumg7tlxuis5bdw67c4l.py", directory: "inductor_cache/nt")
!4 = !{ptr @triton_poi_fused_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_1", linkageName: "triton_poi_fused_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 33, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 45, scope: !7)
!28 = !DILocation(line: 33, column: 38, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 56, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
