; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_reflection_pad2d_relu_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 513, !dbg !13
  %20 = or disjoint i32 %14, 514, !dbg !13
  %21 = or disjoint i32 %14, 515, !dbg !13
  %22 = icmp slt i32 %14, 1115136, !dbg !14
  %23 = icmp slt i32 %18, 1115136, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %24 = sdiv i32 %.frozen, 66, !dbg !15
  %.frozen15 = freeze i32 %16, !dbg !15
  %25 = sdiv i32 %.frozen15, 66, !dbg !15
  %.frozen17 = freeze i32 %18, !dbg !15
  %26 = sdiv i32 %.frozen17, 66, !dbg !15
  %.frozen19 = freeze i32 %20, !dbg !15
  %27 = sdiv i32 %.frozen19, 66, !dbg !15
  %28 = srem i32 %24, 66, !dbg !16
  %29 = srem i32 %25, 66, !dbg !16
  %30 = srem i32 %26, 66, !dbg !16
  %31 = srem i32 %27, 66, !dbg !16
  %32 = mul i32 %24, 66, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = srem i32 %15, 66, !dbg !17
  %34 = mul i32 %25, 66, !dbg !17
  %.decomposed16 = sub i32 %.frozen15, %34, !dbg !17
  %35 = srem i32 %17, 66, !dbg !17
  %36 = mul i32 %26, 66, !dbg !17
  %.decomposed18 = sub i32 %.frozen17, %36, !dbg !17
  %37 = srem i32 %19, 66, !dbg !17
  %38 = mul i32 %27, 66, !dbg !17
  %.decomposed20 = sub i32 %.frozen19, %38, !dbg !17
  %39 = srem i32 %21, 66, !dbg !17
  %40 = sdiv i32 %14, 4356, !dbg !18
  %41 = sdiv i32 %18, 4356, !dbg !18
  %42 = add nsw i32 %28, -1, !dbg !19
  %43 = add nsw i32 %29, -1, !dbg !19
  %44 = add nsw i32 %30, -1, !dbg !19
  %45 = add nsw i32 %31, -1, !dbg !19
  %46 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !20
  %47 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !20
  %48 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !20
  %49 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !20
  %50 = add nsw i32 %46, -63, !dbg !21
  %51 = add nsw i32 %47, -63, !dbg !21
  %52 = add nsw i32 %48, -63, !dbg !21
  %53 = add nsw i32 %49, -63, !dbg !21
  %54 = tail call i32 @llvm.abs.i32(i32 %50, i1 true), !dbg !22
  %55 = tail call i32 @llvm.abs.i32(i32 %51, i1 true), !dbg !22
  %56 = tail call i32 @llvm.abs.i32(i32 %52, i1 true), !dbg !22
  %57 = tail call i32 @llvm.abs.i32(i32 %53, i1 true), !dbg !22
  %58 = sub nuw nsw i32 63, %54, !dbg !23
  %59 = sub nuw nsw i32 63, %55, !dbg !23
  %60 = sub nuw nsw i32 63, %56, !dbg !23
  %61 = sub nuw nsw i32 63, %57, !dbg !23
  %62 = zext nneg i32 %58 to i64, !dbg !24
  %63 = getelementptr i64, ptr addrspace(1) %0, i64 %62, !dbg !24
  %64 = zext nneg i32 %59 to i64, !dbg !24
  %65 = getelementptr i64, ptr addrspace(1) %0, i64 %64, !dbg !24
  %66 = zext nneg i32 %60 to i64, !dbg !24
  %67 = getelementptr i64, ptr addrspace(1) %0, i64 %66, !dbg !24
  %68 = zext nneg i32 %61 to i64, !dbg !24
  %69 = getelementptr i64, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 %22) #1, !dbg !25
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 %22) #1, !dbg !25
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %22) #1, !dbg !25
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %22) #1, !dbg !25
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %23) #1, !dbg !25
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %23) #1, !dbg !25
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %23) #1, !dbg !25
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %23) #1, !dbg !25
  %78 = add nsw i32 %.decomposed, -1, !dbg !26
  %79 = add nsw i32 %33, -1, !dbg !26
  %80 = add nsw i32 %.decomposed16, -1, !dbg !26
  %81 = add nsw i32 %35, -1, !dbg !26
  %82 = add nsw i32 %.decomposed18, -1, !dbg !26
  %83 = add nsw i32 %37, -1, !dbg !26
  %84 = add nsw i32 %.decomposed20, -1, !dbg !26
  %85 = add nsw i32 %39, -1, !dbg !26
  %86 = tail call i32 @llvm.abs.i32(i32 %78, i1 true), !dbg !27
  %87 = tail call i32 @llvm.abs.i32(i32 %79, i1 true), !dbg !27
  %88 = tail call i32 @llvm.abs.i32(i32 %80, i1 true), !dbg !27
  %89 = tail call i32 @llvm.abs.i32(i32 %81, i1 true), !dbg !27
  %90 = tail call i32 @llvm.abs.i32(i32 %82, i1 true), !dbg !27
  %91 = tail call i32 @llvm.abs.i32(i32 %83, i1 true), !dbg !27
  %92 = tail call i32 @llvm.abs.i32(i32 %84, i1 true), !dbg !27
  %93 = tail call i32 @llvm.abs.i32(i32 %85, i1 true), !dbg !27
  %94 = add nsw i32 %86, -63, !dbg !28
  %95 = add nsw i32 %87, -63, !dbg !28
  %96 = add nsw i32 %88, -63, !dbg !28
  %97 = add nsw i32 %89, -63, !dbg !28
  %98 = add nsw i32 %90, -63, !dbg !28
  %99 = add nsw i32 %91, -63, !dbg !28
  %100 = add nsw i32 %92, -63, !dbg !28
  %101 = add nsw i32 %93, -63, !dbg !28
  %102 = tail call i32 @llvm.abs.i32(i32 %94, i1 true), !dbg !29
  %103 = tail call i32 @llvm.abs.i32(i32 %95, i1 true), !dbg !29
  %104 = tail call i32 @llvm.abs.i32(i32 %96, i1 true), !dbg !29
  %105 = tail call i32 @llvm.abs.i32(i32 %97, i1 true), !dbg !29
  %106 = tail call i32 @llvm.abs.i32(i32 %98, i1 true), !dbg !29
  %107 = tail call i32 @llvm.abs.i32(i32 %99, i1 true), !dbg !29
  %108 = tail call i32 @llvm.abs.i32(i32 %100, i1 true), !dbg !29
  %109 = tail call i32 @llvm.abs.i32(i32 %101, i1 true), !dbg !29
  %110 = sub nuw nsw i32 63, %102, !dbg !30
  %111 = sub nuw nsw i32 63, %103, !dbg !30
  %112 = sub nuw nsw i32 63, %104, !dbg !30
  %113 = sub nuw nsw i32 63, %105, !dbg !30
  %114 = sub nuw nsw i32 63, %106, !dbg !30
  %115 = sub nuw nsw i32 63, %107, !dbg !30
  %116 = sub nuw nsw i32 63, %108, !dbg !30
  %117 = sub nuw nsw i32 63, %109, !dbg !30
  %118 = zext nneg i32 %110 to i64, !dbg !31
  %119 = getelementptr i64, ptr addrspace(1) %0, i64 %118, !dbg !31
  %120 = zext nneg i32 %111 to i64, !dbg !31
  %121 = getelementptr i64, ptr addrspace(1) %0, i64 %120, !dbg !31
  %122 = zext nneg i32 %112 to i64, !dbg !31
  %123 = getelementptr i64, ptr addrspace(1) %0, i64 %122, !dbg !31
  %124 = zext nneg i32 %113 to i64, !dbg !31
  %125 = getelementptr i64, ptr addrspace(1) %0, i64 %124, !dbg !31
  %126 = zext nneg i32 %114 to i64, !dbg !31
  %127 = getelementptr i64, ptr addrspace(1) %0, i64 %126, !dbg !31
  %128 = zext nneg i32 %115 to i64, !dbg !31
  %129 = getelementptr i64, ptr addrspace(1) %0, i64 %128, !dbg !31
  %130 = zext nneg i32 %116 to i64, !dbg !31
  %131 = getelementptr i64, ptr addrspace(1) %0, i64 %130, !dbg !31
  %132 = zext nneg i32 %117 to i64, !dbg !31
  %133 = getelementptr i64, ptr addrspace(1) %0, i64 %132, !dbg !31
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %22) #1, !dbg !32
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %121, i1 %22) #1, !dbg !32
  %136 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %123, i1 %22) #1, !dbg !32
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %125, i1 %22) #1, !dbg !32
  %138 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 %23) #1, !dbg !32
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %129, i1 %23) #1, !dbg !32
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %131, i1 %23) #1, !dbg !32
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %133, i1 %23) #1, !dbg !32
  %142 = sext i32 %40 to i64, !dbg !33
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !33
  %144 = sext i32 %41 to i64, !dbg !33
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !33
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %22) #1, !dbg !34
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %22) #1, !dbg !34
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %22) #1, !dbg !34
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %22) #1, !dbg !34
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %23) #1, !dbg !34
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %23) #1, !dbg !34
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %23) #1, !dbg !34
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %23) #1, !dbg !34
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %142, !dbg !35
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !35
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %22) #1, !dbg !36
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %22) #1, !dbg !36
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %22) #1, !dbg !36
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %22) #1, !dbg !36
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %23) #1, !dbg !36
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %23) #1, !dbg !36
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %23) #1, !dbg !36
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %23) #1, !dbg !36
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %142, !dbg !37
  %165 = getelementptr float, ptr addrspace(1) %4, i64 %144, !dbg !37
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %22) #1, !dbg !38
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %22) #1, !dbg !38
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %22) #1, !dbg !38
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %22) #1, !dbg !38
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %23) #1, !dbg !38
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %23) #1, !dbg !38
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %23) #1, !dbg !38
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %23) #1, !dbg !38
  %174 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !39
  %175 = getelementptr float, ptr addrspace(1) %5, i64 %144, !dbg !39
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %22) #1, !dbg !40
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %22) #1, !dbg !40
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %22) #1, !dbg !40
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %22) #1, !dbg !40
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %23) #1, !dbg !40
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %23) #1, !dbg !40
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %23) #1, !dbg !40
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %23) #1, !dbg !40
  %184 = lshr i64 %70, 58, !dbg !41
  %185 = and i64 %184, 32, !dbg !41
  %186 = add i64 %185, %70, !dbg !41
  %187 = lshr i64 %71, 58, !dbg !41
  %188 = and i64 %187, 32, !dbg !41
  %189 = add i64 %188, %71, !dbg !41
  %190 = lshr i64 %72, 58, !dbg !41
  %191 = and i64 %190, 32, !dbg !41
  %192 = add i64 %191, %72, !dbg !41
  %193 = lshr i64 %73, 58, !dbg !41
  %194 = and i64 %193, 32, !dbg !41
  %195 = add i64 %194, %73, !dbg !41
  %196 = lshr i64 %74, 58, !dbg !41
  %197 = and i64 %196, 32, !dbg !41
  %198 = add i64 %197, %74, !dbg !41
  %199 = lshr i64 %75, 58, !dbg !41
  %200 = and i64 %199, 32, !dbg !41
  %201 = add i64 %200, %75, !dbg !41
  %202 = lshr i64 %76, 58, !dbg !41
  %203 = and i64 %202, 32, !dbg !41
  %204 = add i64 %203, %76, !dbg !41
  %205 = lshr i64 %77, 58, !dbg !41
  %206 = and i64 %205, 32, !dbg !41
  %207 = add i64 %206, %77, !dbg !41
  %208 = lshr i64 %134, 58, !dbg !42
  %209 = and i64 %208, 32, !dbg !42
  %210 = lshr i64 %135, 58, !dbg !42
  %211 = and i64 %210, 32, !dbg !42
  %212 = lshr i64 %136, 58, !dbg !42
  %213 = and i64 %212, 32, !dbg !42
  %214 = lshr i64 %137, 58, !dbg !42
  %215 = and i64 %214, 32, !dbg !42
  %216 = lshr i64 %138, 58, !dbg !42
  %217 = and i64 %216, 32, !dbg !42
  %218 = lshr i64 %139, 58, !dbg !42
  %219 = and i64 %218, 32, !dbg !42
  %220 = lshr i64 %140, 58, !dbg !42
  %221 = and i64 %220, 32, !dbg !42
  %222 = lshr i64 %141, 58, !dbg !42
  %223 = and i64 %222, 32, !dbg !42
  %224 = shl nsw i32 %40, 10, !dbg !43
  %225 = shl nsw i32 %41, 10, !dbg !43
  %226 = sext i32 %224 to i64, !dbg !44
  %227 = sext i32 %225 to i64, !dbg !44
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !45
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %209, !dbg !45
  %.idx = shl i64 %186, 7, !dbg !45
  %230 = getelementptr i8, ptr addrspace(1) %229, i64 %.idx, !dbg !45
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %226, !dbg !45
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !45
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %211, !dbg !45
  %.idx1 = shl i64 %189, 7, !dbg !45
  %234 = getelementptr i8, ptr addrspace(1) %233, i64 %.idx1, !dbg !45
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %226, !dbg !45
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !45
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %213, !dbg !45
  %.idx2 = shl i64 %192, 7, !dbg !45
  %238 = getelementptr i8, ptr addrspace(1) %237, i64 %.idx2, !dbg !45
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %226, !dbg !45
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !45
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %215, !dbg !45
  %.idx3 = shl i64 %195, 7, !dbg !45
  %242 = getelementptr i8, ptr addrspace(1) %241, i64 %.idx3, !dbg !45
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %226, !dbg !45
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !45
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %217, !dbg !45
  %.idx4 = shl i64 %198, 7, !dbg !45
  %246 = getelementptr i8, ptr addrspace(1) %245, i64 %.idx4, !dbg !45
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %227, !dbg !45
  %248 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !45
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %219, !dbg !45
  %.idx5 = shl i64 %201, 7, !dbg !45
  %250 = getelementptr i8, ptr addrspace(1) %249, i64 %.idx5, !dbg !45
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %227, !dbg !45
  %252 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !45
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %221, !dbg !45
  %.idx6 = shl i64 %204, 7, !dbg !45
  %254 = getelementptr i8, ptr addrspace(1) %253, i64 %.idx6, !dbg !45
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %227, !dbg !45
  %256 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !45
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %223, !dbg !45
  %.idx7 = shl i64 %207, 7, !dbg !45
  %258 = getelementptr i8, ptr addrspace(1) %257, i64 %.idx7, !dbg !45
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %227, !dbg !45
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %22) #1, !dbg !46
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %22) #1, !dbg !46
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %22) #1, !dbg !46
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %22) #1, !dbg !46
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %23) #1, !dbg !46
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %23) #1, !dbg !46
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %23) #1, !dbg !46
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 %23) #1, !dbg !46
  %268 = insertelement <8 x i32> poison, i32 %153, i64 0, !dbg !34
  %269 = insertelement <8 x i32> %268, i32 %152, i64 1, !dbg !34
  %270 = insertelement <8 x i32> %269, i32 %151, i64 2, !dbg !34
  %271 = insertelement <8 x i32> %270, i32 %150, i64 3, !dbg !34
  %272 = insertelement <8 x i32> %271, i32 %149, i64 4, !dbg !34
  %273 = insertelement <8 x i32> %272, i32 %148, i64 5, !dbg !34
  %274 = insertelement <8 x i32> %273, i32 %147, i64 6, !dbg !34
  %275 = insertelement <8 x i32> %274, i32 %146, i64 7, !dbg !34
  %276 = bitcast <8 x i32> %275 to <8 x float>, !dbg !34
  %277 = insertelement <8 x i32> poison, i32 %163, i64 0, !dbg !36
  %278 = insertelement <8 x i32> %277, i32 %162, i64 1, !dbg !36
  %279 = insertelement <8 x i32> %278, i32 %161, i64 2, !dbg !36
  %280 = insertelement <8 x i32> %279, i32 %160, i64 3, !dbg !36
  %281 = insertelement <8 x i32> %280, i32 %159, i64 4, !dbg !36
  %282 = insertelement <8 x i32> %281, i32 %158, i64 5, !dbg !36
  %283 = insertelement <8 x i32> %282, i32 %157, i64 6, !dbg !36
  %284 = insertelement <8 x i32> %283, i32 %156, i64 7, !dbg !36
  %285 = bitcast <8 x i32> %284 to <8 x float>, !dbg !36
  %286 = insertelement <8 x i32> poison, i32 %173, i64 0, !dbg !38
  %287 = insertelement <8 x i32> %286, i32 %172, i64 1, !dbg !38
  %288 = insertelement <8 x i32> %287, i32 %171, i64 2, !dbg !38
  %289 = insertelement <8 x i32> %288, i32 %170, i64 3, !dbg !38
  %290 = insertelement <8 x i32> %289, i32 %169, i64 4, !dbg !38
  %291 = insertelement <8 x i32> %290, i32 %168, i64 5, !dbg !38
  %292 = insertelement <8 x i32> %291, i32 %167, i64 6, !dbg !38
  %293 = insertelement <8 x i32> %292, i32 %166, i64 7, !dbg !38
  %294 = bitcast <8 x i32> %293 to <8 x float>, !dbg !38
  %295 = insertelement <8 x i32> poison, i32 %183, i64 0, !dbg !40
  %296 = insertelement <8 x i32> %295, i32 %182, i64 1, !dbg !40
  %297 = insertelement <8 x i32> %296, i32 %181, i64 2, !dbg !40
  %298 = insertelement <8 x i32> %297, i32 %180, i64 3, !dbg !40
  %299 = insertelement <8 x i32> %298, i32 %179, i64 4, !dbg !40
  %300 = insertelement <8 x i32> %299, i32 %178, i64 5, !dbg !40
  %301 = insertelement <8 x i32> %300, i32 %177, i64 6, !dbg !40
  %302 = insertelement <8 x i32> %301, i32 %176, i64 7, !dbg !40
  %303 = bitcast <8 x i32> %302 to <8 x float>, !dbg !40
  %304 = insertelement <8 x i32> poison, i32 %267, i64 0, !dbg !46
  %305 = insertelement <8 x i32> %304, i32 %266, i64 1, !dbg !46
  %306 = insertelement <8 x i32> %305, i32 %265, i64 2, !dbg !46
  %307 = insertelement <8 x i32> %306, i32 %264, i64 3, !dbg !46
  %308 = insertelement <8 x i32> %307, i32 %263, i64 4, !dbg !46
  %309 = insertelement <8 x i32> %308, i32 %262, i64 5, !dbg !46
  %310 = insertelement <8 x i32> %309, i32 %261, i64 6, !dbg !46
  %311 = insertelement <8 x i32> %310, i32 %260, i64 7, !dbg !46
  %312 = bitcast <8 x i32> %311 to <8 x float>, !dbg !46
  %313 = fsub <8 x float> %312, %276, !dbg !47
  %314 = fmul <8 x float> %313, %285, !dbg !48
  %315 = fmul <8 x float> %314, %294, !dbg !49
  %316 = fadd <8 x float> %315, %303, !dbg !50
  %317 = fcmp olt <8 x float> %316, zeroinitializer, !dbg !51
  %318 = extractelement <8 x i1> %317, i64 7, !dbg !55
  %319 = extractelement <8 x i1> %317, i64 6, !dbg !55
  %320 = extractelement <8 x i1> %317, i64 5, !dbg !55
  %321 = extractelement <8 x i1> %317, i64 4, !dbg !55
  %322 = extractelement <8 x i1> %317, i64 3, !dbg !55
  %323 = extractelement <8 x i1> %317, i64 2, !dbg !55
  %324 = extractelement <8 x i1> %317, i64 1, !dbg !55
  %325 = extractelement <8 x i1> %317, i64 0, !dbg !55
  %326 = sext i32 %14 to i64, !dbg !56
  %327 = getelementptr float, ptr addrspace(1) %6, i64 %326, !dbg !56
  %328 = sext i32 %18 to i64, !dbg !56
  %329 = getelementptr float, ptr addrspace(1) %6, i64 %328, !dbg !56
  %bc = bitcast <8 x float> %316 to <8 x i32>, !dbg !57
  %330 = extractelement <8 x i32> %bc, i64 7, !dbg !57
  %331 = select i1 %318, i32 0, i32 %330, !dbg !55
  %bc8 = bitcast <8 x float> %316 to <8 x i32>, !dbg !57
  %332 = extractelement <8 x i32> %bc8, i64 6, !dbg !57
  %333 = select i1 %319, i32 0, i32 %332, !dbg !55
  %bc9 = bitcast <8 x float> %316 to <8 x i32>, !dbg !57
  %334 = extractelement <8 x i32> %bc9, i64 5, !dbg !57
  %335 = select i1 %320, i32 0, i32 %334, !dbg !55
  %bc10 = bitcast <8 x float> %316 to <8 x i32>, !dbg !57
  %336 = extractelement <8 x i32> %bc10, i64 4, !dbg !57
  %337 = select i1 %321, i32 0, i32 %336, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %333, i32 %335, i32 %337, ptr addrspace(1) %327, i1 %22) #1, !dbg !57
  %bc11 = bitcast <8 x float> %316 to <8 x i32>, !dbg !57
  %338 = extractelement <8 x i32> %bc11, i64 3, !dbg !57
  %339 = select i1 %322, i32 0, i32 %338, !dbg !55
  %bc12 = bitcast <8 x float> %316 to <8 x i32>, !dbg !57
  %340 = extractelement <8 x i32> %bc12, i64 2, !dbg !57
  %341 = select i1 %323, i32 0, i32 %340, !dbg !55
  %bc13 = bitcast <8 x float> %316 to <8 x i32>, !dbg !57
  %342 = extractelement <8 x i32> %bc13, i64 1, !dbg !57
  %343 = select i1 %324, i32 0, i32 %342, !dbg !55
  %bc14 = bitcast <8 x float> %316 to <8 x i32>, !dbg !57
  %344 = extractelement <8 x i32> %bc14, i64 0, !dbg !57
  %345 = select i1 %325, i32 0, i32 %344, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %341, i32 %343, i32 %345, ptr addrspace(1) %329, i1 %23) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cszysne4tlrfln7aewntm5cvjyy3j4auzbvm24aq3vlv2hdli6vo.py", directory: "inductor_cache/sz")
!4 = !{ptr @triton_poi_fused__unsafe_index_reflection_pad2d_relu_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_reflection_pad2d_relu_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_reflection_pad2d_relu_19", linkageName: "triton_poi_fused__unsafe_index_reflection_pad2d_relu_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 80, scope: !7)
!20 = !DILocation(line: 28, column: 73, scope: !7)
!21 = !DILocation(line: 28, column: 61, scope: !7)
!22 = !DILocation(line: 28, column: 53, scope: !7)
!23 = !DILocation(line: 28, column: 36, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 88, scope: !7)
!26 = !DILocation(line: 29, column: 80, scope: !7)
!27 = !DILocation(line: 29, column: 73, scope: !7)
!28 = !DILocation(line: 29, column: 61, scope: !7)
!29 = !DILocation(line: 29, column: 53, scope: !7)
!30 = !DILocation(line: 29, column: 36, scope: !7)
!31 = !DILocation(line: 29, column: 30, scope: !7)
!32 = !DILocation(line: 29, column: 88, scope: !7)
!33 = !DILocation(line: 30, column: 31, scope: !7)
!34 = !DILocation(line: 30, column: 36, scope: !7)
!35 = !DILocation(line: 31, column: 31, scope: !7)
!36 = !DILocation(line: 31, column: 36, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 36, scope: !7)
!39 = !DILocation(line: 33, column: 31, scope: !7)
!40 = !DILocation(line: 33, column: 36, scope: !7)
!41 = !DILocation(line: 37, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 41, column: 52, scope: !7)
!44 = !DILocation(line: 41, column: 47, scope: !7)
!45 = !DILocation(line: 41, column: 30, scope: !7)
!46 = !DILocation(line: 41, column: 57, scope: !7)
!47 = !DILocation(line: 42, column: 19, scope: !7)
!48 = !DILocation(line: 43, column: 20, scope: !7)
!49 = !DILocation(line: 44, column: 20, scope: !7)
!50 = !DILocation(line: 45, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 47, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 48, column: 25, scope: !7)
!57 = !DILocation(line: 48, column: 37, scope: !7)
!58 = !DILocation(line: 48, column: 4, scope: !7)
