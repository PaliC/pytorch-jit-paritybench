; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %13, !dbg !17
  %23 = or disjoint i32 %21, %10, !dbg !17
  %24 = or disjoint i32 %21, %11, !dbg !17
  %25 = icmp slt i32 %22, 68644, !dbg !18
  %26 = icmp slt i32 %23, 68644, !dbg !18
  %27 = icmp slt i32 %24, 68644, !dbg !18
  %28 = srem i32 %14, 64, !dbg !19
  %29 = srem i32 %15, 64, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %30 = sdiv i32 %.frozen, 64, !dbg !20
  %31 = mul i32 %30, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = mul i32 %14, 68644, !dbg !21
  %33 = mul i32 %15, 68644, !dbg !21
  %34 = add i32 %22, %32, !dbg !22
  %35 = add i32 %22, %33, !dbg !22
  %36 = sext i32 %34 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = sext i32 %35 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = and i1 %17, %25, !dbg !24
  %41 = and i1 %18, %25, !dbg !24
  %42 = and i1 %19, %26, !dbg !24
  %43 = and i1 %19, %27, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !25
  %54 = sext i32 %28 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %56 = sext i32 %29 to i64, !dbg !26
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !27
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !27
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !27
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !27
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !27
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !27
  %66 = insertelement <8 x i32> poison, i32 %53, i64 0, !dbg !25
  %67 = insertelement <8 x i32> %66, i32 %52, i64 1, !dbg !25
  %68 = insertelement <8 x i32> %67, i32 %51, i64 2, !dbg !25
  %69 = insertelement <8 x i32> %68, i32 %50, i64 3, !dbg !25
  %70 = insertelement <8 x i32> %69, i32 %48, i64 4, !dbg !25
  %71 = insertelement <8 x i32> %70, i32 %47, i64 5, !dbg !25
  %72 = insertelement <8 x i32> %71, i32 %46, i64 6, !dbg !25
  %73 = insertelement <8 x i32> %72, i32 %45, i64 7, !dbg !25
  %74 = bitcast <8 x i32> %73 to <8 x float>, !dbg !25
  %75 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !27
  %76 = insertelement <2 x i32> %75, i32 %61, i64 1, !dbg !27
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !27
  %78 = shufflevector <2 x float> %77, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !27
  %79 = fadd <8 x float> %78, %74, !dbg !28
  %80 = fcmp olt <8 x float> %79, zeroinitializer, !dbg !29
  %81 = extractelement <8 x i1> %80, i64 7, !dbg !33
  %82 = extractelement <8 x float> %79, i64 7, !dbg !33
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !33
  %84 = extractelement <8 x i1> %80, i64 6, !dbg !33
  %85 = extractelement <8 x float> %79, i64 6, !dbg !33
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !33
  %87 = extractelement <8 x i1> %80, i64 5, !dbg !33
  %88 = extractelement <8 x float> %79, i64 5, !dbg !33
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !33
  %90 = extractelement <8 x i1> %80, i64 4, !dbg !33
  %91 = extractelement <8 x float> %79, i64 4, !dbg !33
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !33
  %93 = extractelement <8 x i1> %80, i64 3, !dbg !33
  %94 = extractelement <8 x float> %79, i64 3, !dbg !33
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !33
  %96 = extractelement <8 x i1> %80, i64 2, !dbg !33
  %97 = extractelement <8 x float> %79, i64 2, !dbg !33
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !33
  %99 = extractelement <8 x i1> %80, i64 1, !dbg !33
  %100 = extractelement <8 x float> %79, i64 1, !dbg !33
  %101 = select i1 %99, float 0.000000e+00, float %100, !dbg !33
  %102 = extractelement <8 x i1> %80, i64 0, !dbg !33
  %103 = extractelement <8 x float> %79, i64 0, !dbg !33
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !33
  %105 = shl i32 %23, 6, !dbg !34
  %106 = shl i32 %24, 6, !dbg !34
  %107 = mul i32 %30, 4393216, !dbg !35
  %108 = add i32 %107, %.decomposed, !dbg !36
  %109 = add i32 %108, %105, !dbg !37
  %110 = add i32 %108, %106, !dbg !37
  %111 = sext i32 %109 to i64, !dbg !38
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !38
  %113 = sext i32 %110 to i64, !dbg !38
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !38
  %115 = shl i32 %8, 7, !dbg !39
  %116 = and i32 %115, 896, !dbg !39
  %117 = or disjoint i32 %116, %10, !dbg !39
  %118 = and i32 %12, 508, !dbg !39
  %119 = lshr exact i32 %116, 1, !dbg !39
  %120 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %119, !dbg !39
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %117, !dbg !39
  %122 = bitcast float %83 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !39
  %123 = or disjoint i32 %117, 32, !dbg !39
  %124 = lshr i32 %123, 3, !dbg !39
  %125 = and i32 %124, 116, !dbg !39
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !39
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %123, !dbg !39
  %128 = bitcast float %86 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !39
  %129 = or disjoint i32 %117, 64, !dbg !39
  %130 = lshr i32 %129, 3, !dbg !39
  %131 = and i32 %130, 120, !dbg !39
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !39
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %129, !dbg !39
  %134 = bitcast float %89 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !39
  %135 = or disjoint i32 %117, 96, !dbg !39
  %136 = lshr i32 %135, 3, !dbg !39
  %137 = and i32 %136, 124, !dbg !39
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !39
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %135, !dbg !39
  %140 = bitcast float %92 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !39
  %141 = or disjoint i32 %117, 16, !dbg !39
  %142 = getelementptr float, ptr addrspace(3) %120, i32 %141, !dbg !39
  %143 = bitcast float %95 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !39
  %144 = or disjoint i32 %117, 48, !dbg !39
  %145 = lshr i32 %144, 3, !dbg !39
  %146 = and i32 %145, 116, !dbg !39
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !39
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %144, !dbg !39
  %149 = bitcast float %98 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !39
  %150 = or disjoint i32 %117, 80, !dbg !39
  %151 = lshr i32 %150, 3, !dbg !39
  %152 = and i32 %151, 120, !dbg !39
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !39
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %150, !dbg !39
  %155 = bitcast float %101 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !39
  %156 = or disjoint i32 %117, 112, !dbg !39
  %157 = lshr i32 %156, 3, !dbg !39
  %158 = and i32 %157, 124, !dbg !39
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !39
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %156, !dbg !39
  %161 = bitcast float %104 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %162 = lshr i32 %12, 3, !dbg !39
  %163 = and i32 %162, 60, !dbg !39
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !39
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %118, !dbg !39
  %166 = or disjoint i32 %118, 512, !dbg !39
  %167 = lshr i32 %166, 3, !dbg !39
  %168 = and i32 %167, 124, !dbg !39
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !39
  %170 = getelementptr inbounds float, ptr addrspace(3) %169, i32 %166, !dbg !39
  %171 = load <4 x i32>, ptr addrspace(3) %170, align 16, !dbg !39
  %.extract = load i32, ptr addrspace(3) %165, align 16, !dbg !39
  %172 = getelementptr inbounds i8, ptr addrspace(3) %165, i32 4, !dbg !39
  %.extract8 = load i32, ptr addrspace(3) %172, align 4, !dbg !39
  %173 = getelementptr inbounds i8, ptr addrspace(3) %165, i32 8, !dbg !39
  %.extract9 = load i32, ptr addrspace(3) %173, align 8, !dbg !39
  %174 = getelementptr inbounds i8, ptr addrspace(3) %165, i32 12, !dbg !39
  %.extract10 = load i32, ptr addrspace(3) %174, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %112, i1 %42) #2, !dbg !39
  %.extract11 = extractelement <4 x i32> %171, i64 0, !dbg !39
  %.extract12 = extractelement <4 x i32> %171, i64 1, !dbg !39
  %.extract13 = extractelement <4 x i32> %171, i64 2, !dbg !39
  %.extract14 = extractelement <4 x i32> %171, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %114, i1 %43) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_poi_fused_convolution_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_8", linkageName: "triton_poi_fused_convolution_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 41, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 54, scope: !7)
!25 = !DILocation(line: 32, column: 46, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 33, scope: !7)
!35 = !DILocation(line: 37, column: 46, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 38, scope: !7)
!38 = !DILocation(line: 37, column: 25, scope: !7)
!39 = !DILocation(line: 37, column: 57, scope: !7)
!40 = !DILocation(line: 37, column: 4, scope: !7)
