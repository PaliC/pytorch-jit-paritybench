; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_57(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 14, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %14, 16, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 4, !dbg !16
  %18 = or disjoint i32 %17, %12, !dbg !17
  %19 = or disjoint i32 %17, %10, !dbg !17
  %20 = icmp slt i32 %19, 608, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %21 = sdiv i32 %.frozen, 2, !dbg !19
  %22 = srem i32 %21, 2, !dbg !20
  %23 = mul i32 %21, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %23, !dbg !21
  %.frozen9 = freeze i32 %14, !dbg !22
  %24 = sdiv i32 %.frozen9, 4, !dbg !22
  %25 = mul i32 %24, 4, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %25, !dbg !23
  %26 = shl nsw i32 %22, 1, !dbg !24
  %27 = icmp sgt i32 %22, -1, !dbg !25
  %28 = shl nsw i32 %.decomposed, 1, !dbg !26
  %29 = or i32 %22, %.decomposed, !dbg !27
  %30 = icmp sgt i32 %29, -1, !dbg !27
  %31 = mul nsw i32 %.decomposed, 1216, !dbg !28
  %32 = add i32 %31, %18, !dbg !29
  %33 = mul i32 %21, 4864, !dbg !30
  %34 = add i32 %32, %33, !dbg !31
  %35 = sext i32 %34 to i64, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !32
  %37 = add i32 %32, 608, !dbg !33
  %38 = add i32 %37, %33, !dbg !34
  %39 = sext i32 %38 to i64, !dbg !35
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !35
  %41 = add nsw i32 %28, 2, !dbg !36
  %42 = icmp samesign ult i32 %41, 4, !dbg !37
  %43 = and i1 %27, %42, !dbg !38
  %44 = add i32 %32, 1216, !dbg !39
  %45 = add i32 %44, %33, !dbg !40
  %46 = sext i32 %45 to i64, !dbg !41
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !41
  %48 = add i32 %32, 2432, !dbg !42
  %49 = add i32 %48, %33, !dbg !43
  %50 = sext i32 %49 to i64, !dbg !44
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !44
  %52 = add i32 %32, 3040, !dbg !45
  %53 = add i32 %52, %33, !dbg !46
  %54 = sext i32 %53 to i64, !dbg !47
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !47
  %56 = add i32 %32, 3648, !dbg !48
  %57 = add i32 %56, %33, !dbg !49
  %58 = sext i32 %57 to i64, !dbg !50
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !50
  %60 = add nsw i32 %26, 2, !dbg !51
  %61 = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 -1>, i32 %18, i64 0, !dbg !18
  %62 = insertelement <4 x i32> %61, i32 %13, i64 1, !dbg !18
  %63 = insertelement <4 x i32> %62, i32 %60, i64 2, !dbg !18
  %64 = insertelement <4 x i32> <i32 608, i32 16, i32 4, i32 poison>, i32 %.decomposed, i64 3, !dbg !18
  %65 = icmp slt <4 x i32> %63, %64, !dbg !18
  %66 = icmp samesign ult <4 x i32> %63, %64, !dbg !18
  %67 = shufflevector <4 x i1> %65, <4 x i1> %66, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !18
  %68 = extractelement <4 x i1> %65, i64 0, !dbg !52
  %69 = and i1 %68, %30, !dbg !53
  %70 = extractelement <4 x i1> %65, i64 1, !dbg !52
  %71 = and i1 %70, %69, !dbg !54
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #2, !dbg !55
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !55
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !55
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #2, !dbg !56
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !56
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !56
  %78 = and i1 %68, %43, !dbg !57
  %79 = and i1 %70, %78, !dbg !58
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %79, i32 -8388608, i1 %79, i32 -8388608, i1 %79) #2, !dbg !59
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !59
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !59
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #2, !dbg !60
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !60
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !60
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #2, !dbg !61
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !61
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !61
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %79, i32 -8388608, i1 %79, i32 -8388608, i1 %79) #2, !dbg !62
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !62
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !62
  %92 = add i32 %32, 4864, !dbg !63
  %93 = add i32 %92, %33, !dbg !64
  %94 = sext i32 %93 to i64, !dbg !65
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !65
  %96 = bitcast <4 x i1> %67 to i4, !dbg !66
  %97 = icmp eq i4 %96, -1, !dbg !66
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %97, i32 -8388608, i1 %97, i32 -8388608, i1 %97) #2, !dbg !67
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !67
  %100 = extractvalue { i32, i32 } %98, 1, !dbg !67
  %101 = add i32 %32, 5472, !dbg !68
  %102 = add i32 %101, %33, !dbg !69
  %103 = sext i32 %102 to i64, !dbg !70
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !70
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %104, i1 %97, i32 -8388608, i1 %97, i32 -8388608, i1 %97) #2, !dbg !71
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !71
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !71
  %108 = or i32 %60, %41, !dbg !72
  %109 = icmp samesign ult i32 %108, 4, !dbg !72
  %110 = add i32 %32, 6080, !dbg !73
  %111 = add i32 %110, %33, !dbg !74
  %112 = sext i32 %111 to i64, !dbg !75
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !75
  %114 = and i1 %68, %109, !dbg !76
  %115 = and i1 %70, %114, !dbg !77
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %113, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115) #2, !dbg !78
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !78
  %118 = extractvalue { i32, i32 } %116, 1, !dbg !78
  %119 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !55
  %120 = insertelement <2 x i32> %119, i32 %74, i64 1, !dbg !55
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !55
  %122 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !56
  %123 = insertelement <2 x i32> %122, i32 %77, i64 1, !dbg !56
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !56
  %125 = fcmp ogt <2 x float> %124, %121, !dbg !79
  %126 = fcmp uno <2 x float> %124, zeroinitializer, !dbg !83
  %127 = or <2 x i1> %125, %126, !dbg !84
  %.v = select <2 x i1> %127, <2 x i32> %123, <2 x i32> %120, !dbg !85
  %128 = bitcast <2 x i32> %.v to <2 x float>, !dbg !85
  %129 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !59
  %130 = insertelement <2 x i32> %129, i32 %82, i64 1, !dbg !59
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !59
  %132 = fcmp olt <2 x float> %128, %131, !dbg !86
  %133 = fcmp uno <2 x float> %131, zeroinitializer, !dbg !88
  %134 = or <2 x i1> %133, %132, !dbg !89
  %.v3 = select <2 x i1> %134, <2 x i32> %130, <2 x i32> %.v, !dbg !90
  %135 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !90
  %136 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !60
  %137 = insertelement <2 x i32> %136, i32 %85, i64 1, !dbg !60
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !60
  %139 = fcmp olt <2 x float> %135, %138, !dbg !91
  %140 = fcmp uno <2 x float> %138, zeroinitializer, !dbg !93
  %141 = or <2 x i1> %140, %139, !dbg !94
  %.v4 = select <2 x i1> %141, <2 x i32> %137, <2 x i32> %.v3, !dbg !95
  %142 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !95
  %143 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !61
  %144 = insertelement <2 x i32> %143, i32 %88, i64 1, !dbg !61
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !61
  %146 = fcmp olt <2 x float> %142, %145, !dbg !96
  %147 = fcmp uno <2 x float> %145, zeroinitializer, !dbg !98
  %148 = or <2 x i1> %147, %146, !dbg !99
  %.v5 = select <2 x i1> %148, <2 x i32> %144, <2 x i32> %.v4, !dbg !100
  %149 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !100
  %150 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !62
  %151 = insertelement <2 x i32> %150, i32 %91, i64 1, !dbg !62
  %152 = bitcast <2 x i32> %151 to <2 x float>, !dbg !62
  %153 = fcmp olt <2 x float> %149, %152, !dbg !101
  %154 = fcmp uno <2 x float> %152, zeroinitializer, !dbg !103
  %155 = or <2 x i1> %154, %153, !dbg !104
  %.v6 = select <2 x i1> %155, <2 x i32> %151, <2 x i32> %.v5, !dbg !105
  %156 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !105
  %157 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !67
  %158 = insertelement <2 x i32> %157, i32 %100, i64 1, !dbg !67
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !67
  %160 = fcmp olt <2 x float> %156, %159, !dbg !106
  %161 = fcmp uno <2 x float> %159, zeroinitializer, !dbg !108
  %162 = or <2 x i1> %161, %160, !dbg !109
  %.v7 = select <2 x i1> %162, <2 x i32> %158, <2 x i32> %.v6, !dbg !110
  %163 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !110
  %164 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !71
  %165 = insertelement <2 x i32> %164, i32 %107, i64 1, !dbg !71
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !71
  %167 = fcmp olt <2 x float> %163, %166, !dbg !111
  %168 = fcmp uno <2 x float> %166, zeroinitializer, !dbg !113
  %169 = or <2 x i1> %168, %167, !dbg !114
  %.v8 = select <2 x i1> %169, <2 x i32> %165, <2 x i32> %.v7, !dbg !115
  %170 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !115
  %171 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !78
  %172 = insertelement <2 x i32> %171, i32 %118, i64 1, !dbg !78
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !78
  %174 = fcmp olt <2 x float> %170, %173, !dbg !116
  %175 = bitcast i32 %117 to float, !dbg !118
  %176 = fcmp uno float %175, 0.000000e+00, !dbg !118
  %177 = bitcast i32 %118 to float, !dbg !118
  %178 = fcmp uno float %177, 0.000000e+00, !dbg !118
  %179 = extractelement <2 x i1> %174, i64 0, !dbg !119
  %180 = or i1 %176, %179, !dbg !119
  %181 = extractelement <2 x i1> %174, i64 1, !dbg !119
  %182 = or i1 %178, %181, !dbg !119
  %183 = zext <2 x i1> %125 to <2 x i8>, !dbg !120
  %184 = select <2 x i1> %132, <2 x i8> splat (i8 2), <2 x i8> %183, !dbg !121
  %185 = select <2 x i1> %139, <2 x i8> splat (i8 3), <2 x i8> %184, !dbg !122
  %186 = select <2 x i1> %146, <2 x i8> splat (i8 4), <2 x i8> %185, !dbg !123
  %187 = select <2 x i1> %153, <2 x i8> splat (i8 5), <2 x i8> %186, !dbg !124
  %188 = select <2 x i1> %160, <2 x i8> splat (i8 6), <2 x i8> %187, !dbg !125
  %189 = select <2 x i1> %167, <2 x i8> splat (i8 7), <2 x i8> %188, !dbg !126
  %190 = select <2 x i1> %174, <2 x i8> splat (i8 8), <2 x i8> %189, !dbg !127
  %191 = shl i32 %19, 2, !dbg !128
  %192 = add i32 %191, %.decomposed10, !dbg !129
  %193 = mul i32 %24, 4224, !dbg !130
  %194 = add i32 %192, %193, !dbg !131
  %195 = sext i32 %194 to i64, !dbg !132
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !132
  %197 = and i1 %15, %20, !dbg !52
  %198 = and i1 %70, %68, !dbg !52
  %199 = shl i32 %8, 5, !dbg !133
  %200 = and i32 %199, 224, !dbg !133
  %201 = or disjoint i32 %200, %10, !dbg !133
  %202 = and i32 %11, 254, !dbg !133
  %203 = lshr exact i32 %200, 1, !dbg !133
  %204 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %203, !dbg !133
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %201, !dbg !133
  %206 = extractelement <2 x i32> %.v8, i64 0, !dbg !133
  %207 = select i1 %180, i32 %117, i32 %206, !dbg !134
  %208 = insertelement <1 x i32> poison, i32 %207, i64 0, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %208, i1 true) #2, !dbg !133
  %209 = or disjoint i32 %201, 16, !dbg !133
  %210 = lshr i32 %209, 3, !dbg !133
  %211 = and i32 %210, 30, !dbg !133
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %211, !dbg !133
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %209, !dbg !133
  %214 = extractelement <2 x i32> %.v8, i64 1, !dbg !133
  %215 = select i1 %182, i32 %118, i32 %214, !dbg !134
  %216 = insertelement <1 x i32> poison, i32 %215, i64 0, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %216, i1 true) #2, !dbg !133
  tail call void @llvm.nvvm.barrier0(), !dbg !133
  %217 = lshr i32 %11, 3, !dbg !133
  %218 = and i32 %217, 30, !dbg !133
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !133
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %202, !dbg !133
  %.extract = load i32, ptr addrspace(3) %220, align 8, !dbg !133
  %221 = getelementptr inbounds i8, ptr addrspace(3) %220, i32 4, !dbg !133
  %.extract2 = load i32, ptr addrspace(3) %221, align 4, !dbg !133
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %196, i1 %197) #2, !dbg !133
  %222 = mul i32 %13, 608, !dbg !135
  %223 = add i32 %18, %222, !dbg !136
  %224 = sext i32 %223 to i64, !dbg !137
  %225 = getelementptr i8, ptr addrspace(1) %2, i64 %224, !dbg !137
  %226 = bitcast <2 x i8> %190 to i16, !dbg !138
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %226, ptr addrspace(1) %225, i1 %198) #2, !dbg !138
  ret void, !dbg !139
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwonuek22t2v6rax4nudyg44s62kxho6bwvkghuzrfylck5hil5e.py", directory: "inductor_cache/wo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_57, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_57, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_57", linkageName: "triton_poi_fused_max_pool2d_with_indices_57", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 26, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 35, column: 13, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 41, column: 13, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 41, scope: !7)
!29 = !DILocation(line: 46, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 51, scope: !7)
!31 = !DILocation(line: 46, column: 46, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 52, column: 42, scope: !7)
!34 = !DILocation(line: 52, column: 52, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 54, column: 16, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 58, column: 19, scope: !7)
!39 = !DILocation(line: 59, column: 43, scope: !7)
!40 = !DILocation(line: 59, column: 53, scope: !7)
!41 = !DILocation(line: 59, column: 31, scope: !7)
!42 = !DILocation(line: 66, column: 43, scope: !7)
!43 = !DILocation(line: 66, column: 53, scope: !7)
!44 = !DILocation(line: 66, column: 31, scope: !7)
!45 = !DILocation(line: 69, column: 43, scope: !7)
!46 = !DILocation(line: 69, column: 53, scope: !7)
!47 = !DILocation(line: 69, column: 31, scope: !7)
!48 = !DILocation(line: 72, column: 43, scope: !7)
!49 = !DILocation(line: 72, column: 53, scope: !7)
!50 = !DILocation(line: 72, column: 31, scope: !7)
!51 = !DILocation(line: 74, column: 16, scope: !7)
!52 = !DILocation(line: 112, column: 62, scope: !7)
!53 = !DILocation(line: 46, column: 64, scope: !7)
!54 = !DILocation(line: 46, column: 72, scope: !7)
!55 = !DILocation(line: 46, column: 56, scope: !7)
!56 = !DILocation(line: 52, column: 62, scope: !7)
!57 = !DILocation(line: 59, column: 71, scope: !7)
!58 = !DILocation(line: 59, column: 79, scope: !7)
!59 = !DILocation(line: 59, column: 63, scope: !7)
!60 = !DILocation(line: 66, column: 63, scope: !7)
!61 = !DILocation(line: 69, column: 63, scope: !7)
!62 = !DILocation(line: 72, column: 63, scope: !7)
!63 = !DILocation(line: 79, column: 43, scope: !7)
!64 = !DILocation(line: 79, column: 53, scope: !7)
!65 = !DILocation(line: 79, column: 31, scope: !7)
!66 = !DILocation(line: 79, column: 79, scope: !7)
!67 = !DILocation(line: 79, column: 63, scope: !7)
!68 = !DILocation(line: 82, column: 43, scope: !7)
!69 = !DILocation(line: 82, column: 53, scope: !7)
!70 = !DILocation(line: 82, column: 31, scope: !7)
!71 = !DILocation(line: 82, column: 63, scope: !7)
!72 = !DILocation(line: 84, column: 20, scope: !7)
!73 = !DILocation(line: 85, column: 43, scope: !7)
!74 = !DILocation(line: 85, column: 53, scope: !7)
!75 = !DILocation(line: 85, column: 31, scope: !7)
!76 = !DILocation(line: 85, column: 71, scope: !7)
!77 = !DILocation(line: 85, column: 79, scope: !7)
!78 = !DILocation(line: 85, column: 63, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !82)
!80 = distinct !DILexicalBlockFile(scope: !7, file: !81, discriminator: 0)
!81 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!82 = !DILocation(line: 53, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !87)
!87 = !DILocation(line: 60, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !92)
!92 = !DILocation(line: 67, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !97)
!97 = !DILocation(line: 70, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !102)
!102 = !DILocation(line: 73, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !107)
!107 = !DILocation(line: 80, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !112)
!112 = !DILocation(line: 83, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !117)
!117 = !DILocation(line: 86, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !117)
!120 = !DILocation(line: 90, column: 35, scope: !7)
!121 = !DILocation(line: 93, column: 35, scope: !7)
!122 = !DILocation(line: 96, column: 35, scope: !7)
!123 = !DILocation(line: 99, column: 35, scope: !7)
!124 = !DILocation(line: 102, column: 35, scope: !7)
!125 = !DILocation(line: 105, column: 35, scope: !7)
!126 = !DILocation(line: 108, column: 35, scope: !7)
!127 = !DILocation(line: 111, column: 35, scope: !7)
!128 = !DILocation(line: 112, column: 32, scope: !7)
!129 = !DILocation(line: 112, column: 30, scope: !7)
!130 = !DILocation(line: 112, column: 42, scope: !7)
!131 = !DILocation(line: 112, column: 37, scope: !7)
!132 = !DILocation(line: 112, column: 25, scope: !7)
!133 = !DILocation(line: 112, column: 54, scope: !7)
!134 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !117)
!135 = !DILocation(line: 113, column: 34, scope: !7)
!136 = !DILocation(line: 113, column: 30, scope: !7)
!137 = !DILocation(line: 113, column: 25, scope: !7)
!138 = !DILocation(line: 113, column: 46, scope: !7)
!139 = !DILocation(line: 113, column: 4, scope: !7)
