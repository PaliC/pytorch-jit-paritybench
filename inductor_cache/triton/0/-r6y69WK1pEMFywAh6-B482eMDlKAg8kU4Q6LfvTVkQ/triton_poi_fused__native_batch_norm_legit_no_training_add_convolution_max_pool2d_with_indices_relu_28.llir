; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = sdiv i32 %15, 16, !dbg !15
  %19 = srem i32 %18, 4, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %20 = sdiv i32 %.frozen, 4, !dbg !17
  %21 = mul i32 %20, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %21, !dbg !18
  %22 = srem i32 %16, 4, !dbg !18
  %23 = sext i32 %15 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %17) #3, !dbg !20
  %26 = sext i32 %19 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !22
  %30 = shl nsw i32 %.decomposed, 1, !dbg !23
  %31 = shl nsw i32 %22, 1, !dbg !23
  %32 = shl i32 %20, 4, !dbg !24
  %33 = add i32 %30, %32, !dbg !25
  %34 = add i32 %32, %31, !dbg !25
  %35 = sext i32 %33 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !26
  %37 = sext i32 %34 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %17) #3, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #3, !dbg !27
  %41 = or disjoint i32 %33, 1, !dbg !28
  %42 = or disjoint i32 %34, 1, !dbg !28
  %43 = sext i32 %41 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !29
  %45 = sext i32 %42 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %17) #3, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %17) #3, !dbg !30
  %49 = add i32 %33, 8, !dbg !31
  %50 = add i32 %34, 8, !dbg !31
  %51 = sext i32 %49 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !32
  %53 = sext i32 %50 to i64, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %17) #3, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %17) #3, !dbg !33
  %57 = add i32 %33, 9, !dbg !34
  %58 = add i32 %34, 9, !dbg !34
  %59 = sext i32 %57 to i64, !dbg !35
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !35
  %61 = sext i32 %58 to i64, !dbg !35
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %17) #3, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %17) #3, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %17) #3, !dbg !38
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %17) #3, !dbg !38
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !39
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %17) #3, !dbg !40
  %70 = bitcast i32 %69 to float, !dbg !40
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %17) #3, !dbg !40
  %72 = bitcast i32 %71 to float, !dbg !40
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !41
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %17) #3, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %17) #3, !dbg !42
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !43
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %17) #3, !dbg !44
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %17) #3, !dbg !44
  %79 = fadd float %70, 0x3EE4F8B580000000, !dbg !45
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !45
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %81, 0, !dbg !46
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %82, 0, !dbg !46
  br i1 %.not.i, label %88, label %83, !dbg !46

83:                                               ; preds = %9
  br i1 %.not1.i, label %86, label %84, !dbg !46

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

88:                                               ; preds = %9
  br i1 %.not1.i, label %91, label %89, !dbg !46

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !46
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %93, 0, !dbg !46
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !46
  br i1 %.not.i1, label %100, label %95, !dbg !46

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !46

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !46

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !46
  %105 = extractvalue { i32, i32 } %25, 1, !dbg !20
  %106 = bitcast i32 %105 to float, !dbg !20
  %107 = bitcast i32 %29 to float, !dbg !22
  %108 = fadd float %106, %107, !dbg !47
  %109 = bitcast i32 %48 to float, !dbg !30
  %110 = bitcast i32 %40 to float, !dbg !27
  %111 = fcmp ogt float %109, %110, !dbg !48
  %112 = fcmp uno float %109, 0.000000e+00, !dbg !52
  %113 = or i1 %111, %112, !dbg !53
  %114 = select i1 %113, float %109, float %110, !dbg !54
  %115 = bitcast i32 %56 to float, !dbg !33
  %116 = fcmp olt float %114, %115, !dbg !55
  %117 = fcmp uno float %115, 0.000000e+00, !dbg !57
  %118 = or i1 %117, %116, !dbg !58
  %119 = select i1 %118, float %115, float %114, !dbg !59
  %120 = bitcast i32 %64 to float, !dbg !36
  %121 = fcmp olt float %119, %120, !dbg !60
  %122 = fcmp uno float %120, 0.000000e+00, !dbg !62
  %123 = or i1 %122, %121, !dbg !63
  %124 = select i1 %123, float %120, float %119, !dbg !64
  %125 = fadd float %108, %124, !dbg !65
  %126 = bitcast i32 %67 to float, !dbg !38
  %127 = fsub float %125, %126, !dbg !66
  %128 = extractvalue { i32, i32 } %25, 0, !dbg !20
  %129 = bitcast i32 %128 to float, !dbg !20
  %130 = bitcast i32 %28 to float, !dbg !22
  %131 = fadd float %129, %130, !dbg !47
  %132 = bitcast i32 %47 to float, !dbg !30
  %133 = bitcast i32 %39 to float, !dbg !27
  %134 = fcmp ogt float %132, %133, !dbg !48
  %135 = fcmp uno float %132, 0.000000e+00, !dbg !52
  %136 = or i1 %134, %135, !dbg !53
  %137 = select i1 %136, float %132, float %133, !dbg !54
  %138 = bitcast i32 %55 to float, !dbg !33
  %139 = fcmp olt float %137, %138, !dbg !55
  %140 = fcmp uno float %138, 0.000000e+00, !dbg !57
  %141 = or i1 %140, %139, !dbg !58
  %142 = select i1 %141, float %138, float %137, !dbg !59
  %143 = bitcast i32 %63 to float, !dbg !36
  %144 = fcmp olt float %142, %143, !dbg !60
  %145 = fcmp uno float %143, 0.000000e+00, !dbg !62
  %146 = or i1 %145, %144, !dbg !63
  %147 = select i1 %146, float %143, float %142, !dbg !64
  %148 = fadd float %131, %147, !dbg !65
  %149 = bitcast i32 %66 to float, !dbg !38
  %150 = fsub float %148, %149, !dbg !66
  %151 = bitcast i32 %78 to float, !dbg !44
  %152 = bitcast i32 %77 to float, !dbg !44
  %153 = bitcast i32 %75 to float, !dbg !42
  %154 = bitcast i32 %74 to float, !dbg !42
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !67
  %157 = fmul float %150, %155, !dbg !68
  %158 = fmul float %127, %156, !dbg !68
  %159 = fmul float %157, %154, !dbg !69
  %160 = fmul float %158, %153, !dbg !69
  %161 = fadd float %159, %152, !dbg !70
  %162 = fadd float %160, %151, !dbg !70
  %163 = fcmp olt float %161, 0.000000e+00, !dbg !71
  %164 = fcmp olt float %162, 0.000000e+00, !dbg !71
  %165 = select i1 %163, float 0.000000e+00, float %161, !dbg !73
  %166 = select i1 %164, float 0.000000e+00, float %162, !dbg !73
  %167 = bitcast float %148 to i32, !dbg !74
  %168 = bitcast float %125 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %167, i32 %168, ptr addrspace(1) %24, i1 %17) #3, !dbg !74
  %169 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !75
  %170 = bitcast float %165 to i32, !dbg !76
  %171 = bitcast float %166 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %169, i1 %17) #3, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5tc4b2qljduqxv4wyyzoagzlaqjvtuxl6o5hxtf32wuultijdsi.py", directory: "inductor_cache/5t")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 32, scope: !7)
!24 = !DILocation(line: 30, column: 40, scope: !7)
!25 = !DILocation(line: 30, column: 37, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 45, scope: !7)
!28 = !DILocation(line: 31, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 49, scope: !7)
!31 = !DILocation(line: 32, column: 41, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 49, scope: !7)
!34 = !DILocation(line: 33, column: 41, scope: !7)
!35 = !DILocation(line: 33, column: 30, scope: !7)
!36 = !DILocation(line: 33, column: 49, scope: !7)
!37 = !DILocation(line: 34, column: 31, scope: !7)
!38 = !DILocation(line: 34, column: 36, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 36, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 36, scope: !7)
!43 = !DILocation(line: 37, column: 31, scope: !7)
!44 = !DILocation(line: 37, column: 36, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 46, column: 27, scope: !7)
!47 = !DILocation(line: 38, column: 18, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !56)
!60 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !61)
!61 = !DILocation(line: 41, column: 40, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !61)
!65 = !DILocation(line: 42, column: 19, scope: !7)
!66 = !DILocation(line: 43, column: 20, scope: !7)
!67 = !DILocation(line: 48, column: 20, scope: !7)
!68 = !DILocation(line: 51, column: 20, scope: !7)
!69 = !DILocation(line: 52, column: 20, scope: !7)
!70 = !DILocation(line: 53, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !72)
!72 = !DILocation(line: 55, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !72)
!74 = !DILocation(line: 56, column: 40, scope: !7)
!75 = !DILocation(line: 57, column: 25, scope: !7)
!76 = !DILocation(line: 57, column: 37, scope: !7)
!77 = !DILocation(line: 57, column: 4, scope: !7)
