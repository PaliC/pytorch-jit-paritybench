; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = srem i32 %13, 64, !dbg !14
  %18 = srem i32 %14, 64, !dbg !14
  %19 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !15
  %20 = shufflevector <2 x i32> %19, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %21 = sdiv <2 x i32> %20, <i32 4096, i32 64>, !dbg !15
  %22 = srem <2 x i32> %21, splat (i32 64), !dbg !16
  %23 = extractelement <2 x i32> %22, i64 0, !dbg !17
  %24 = icmp sgt i32 %23, 0, !dbg !18
  %25 = icmp sgt <2 x i32> %22, <i32 -1, i32 0>, !dbg !19
  %26 = extractelement <2 x i1> %25, i64 1, !dbg !20
  %27 = and i1 %24, %26, !dbg !20
  %28 = extractelement <2 x i32> %22, i64 1, !dbg !17
  %29 = shl nsw i32 %28, 7, !dbg !21
  %30 = extractelement <2 x i32> %21, i64 0, !dbg !22
  %31 = shl i32 %30, 14, !dbg !22
  %32 = add i32 %29, %31, !dbg !23
  %33 = add i32 %32, -8256, !dbg !24
  %34 = add nsw i32 %33, %17, !dbg !25
  %35 = add nsw i32 %33, %18, !dbg !25
  %36 = sext i32 %34 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = sext i32 %35 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27) #2, !dbg !27
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27) #2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !27
  %50 = icmp sgt i32 %28, -1, !dbg !28
  %51 = and i1 %24, %50, !dbg !29
  %52 = add i32 %32, -8192, !dbg !30
  %53 = add i32 %52, %17, !dbg !31
  %54 = add i32 %52, %18, !dbg !31
  %55 = sext i32 %53 to i64, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !32
  %57 = sext i32 %54 to i64, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !32
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51) #2, !dbg !33
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !33
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !33
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !33
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !33
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51) #2, !dbg !33
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !33
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !33
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !33
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !33
  %69 = add i32 %32, -8128, !dbg !34
  %70 = add nsw i32 %69, %17, !dbg !35
  %71 = add nsw i32 %69, %18, !dbg !35
  %72 = sext i32 %70 to i64, !dbg !36
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !36
  %74 = sext i32 %71 to i64, !dbg !36
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !36
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51) #2, !dbg !37
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !37
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !37
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !37
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !37
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51) #2, !dbg !37
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !37
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !37
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !37
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !37
  %86 = extractelement <2 x i1> %25, i64 0, !dbg !38
  %87 = and i1 %86, %26, !dbg !38
  %88 = add i32 %32, -64, !dbg !39
  %89 = add nsw i32 %88, %17, !dbg !40
  %90 = add nsw i32 %88, %18, !dbg !40
  %91 = sext i32 %89 to i64, !dbg !41
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !41
  %93 = sext i32 %90 to i64, !dbg !41
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !41
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #2, !dbg !42
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !42
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !42
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !42
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !42
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #2, !dbg !42
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !42
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !42
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !42
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !42
  %105 = or i32 %23, %28, !dbg !17
  %106 = icmp sgt i32 %105, -1, !dbg !17
  %107 = add i32 %32, %17, !dbg !43
  %108 = add i32 %32, %18, !dbg !43
  %109 = sext i32 %107 to i64, !dbg !44
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !44
  %111 = sext i32 %108 to i64, !dbg !44
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !44
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #2, !dbg !45
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !45
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !45
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !45
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !45
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #2, !dbg !45
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !45
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !45
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !45
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !45
  %123 = or disjoint i32 %32, 64, !dbg !46
  %124 = add nsw i32 %123, %17, !dbg !47
  %125 = add nsw i32 %123, %18, !dbg !47
  %126 = sext i32 %124 to i64, !dbg !48
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !48
  %128 = sext i32 %125 to i64, !dbg !48
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !48
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #2, !dbg !49
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !49
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !49
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !49
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !49
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #2, !dbg !49
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !49
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !49
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !49
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !49
  %140 = add i32 %32, 8128, !dbg !50
  %141 = add nsw i32 %140, %17, !dbg !51
  %142 = add nsw i32 %140, %18, !dbg !51
  %143 = sext i32 %141 to i64, !dbg !52
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !52
  %145 = sext i32 %142 to i64, !dbg !52
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !52
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #2, !dbg !53
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !53
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !53
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !53
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !53
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #2, !dbg !53
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !53
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !53
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !53
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !53
  %157 = add i32 %32, 8192, !dbg !54
  %158 = add i32 %157, %17, !dbg !55
  %159 = add i32 %157, %18, !dbg !55
  %160 = sext i32 %158 to i64, !dbg !56
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !56
  %162 = sext i32 %159 to i64, !dbg !56
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !56
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #2, !dbg !57
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !57
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !57
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !57
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !57
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %163, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #2, !dbg !57
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !57
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !57
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !57
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !57
  %174 = add i32 %32, 8256, !dbg !58
  %175 = add nsw i32 %174, %17, !dbg !59
  %176 = add nsw i32 %174, %18, !dbg !59
  %177 = sext i32 %175 to i64, !dbg !60
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !60
  %179 = sext i32 %176 to i64, !dbg !60
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !60
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #2, !dbg !61
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !61
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !61
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !61
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !61
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #2, !dbg !61
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !61
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !61
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !61
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !61
  %191 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !27
  %192 = insertelement <4 x i32> %191, i32 %42, i64 1, !dbg !27
  %193 = insertelement <4 x i32> %192, i32 %43, i64 2, !dbg !27
  %194 = insertelement <4 x i32> %193, i32 %44, i64 3, !dbg !27
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !27
  %196 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !33
  %197 = insertelement <4 x i32> %196, i32 %61, i64 1, !dbg !33
  %198 = insertelement <4 x i32> %197, i32 %62, i64 2, !dbg !33
  %199 = insertelement <4 x i32> %198, i32 %63, i64 3, !dbg !33
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !33
  %201 = fcmp ogt <4 x float> %200, %195, !dbg !62
  %202 = fcmp uno <4 x float> %200, zeroinitializer, !dbg !66
  %203 = or <4 x i1> %201, %202, !dbg !67
  %.v = select <4 x i1> %203, <4 x i32> %199, <4 x i32> %194, !dbg !68
  %204 = bitcast <4 x i32> %.v to <4 x float>, !dbg !68
  %205 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !37
  %206 = insertelement <4 x i32> %205, i32 %78, i64 1, !dbg !37
  %207 = insertelement <4 x i32> %206, i32 %79, i64 2, !dbg !37
  %208 = insertelement <4 x i32> %207, i32 %80, i64 3, !dbg !37
  %209 = bitcast <4 x i32> %208 to <4 x float>, !dbg !37
  %210 = fcmp olt <4 x float> %204, %209, !dbg !69
  %211 = fcmp uno <4 x float> %209, zeroinitializer, !dbg !71
  %212 = or <4 x i1> %211, %210, !dbg !72
  %.v15 = select <4 x i1> %212, <4 x i32> %208, <4 x i32> %.v, !dbg !73
  %213 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !73
  %214 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !42
  %215 = insertelement <4 x i32> %214, i32 %97, i64 1, !dbg !42
  %216 = insertelement <4 x i32> %215, i32 %98, i64 2, !dbg !42
  %217 = insertelement <4 x i32> %216, i32 %99, i64 3, !dbg !42
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !42
  %219 = fcmp olt <4 x float> %213, %218, !dbg !74
  %220 = fcmp uno <4 x float> %218, zeroinitializer, !dbg !76
  %221 = or <4 x i1> %220, %219, !dbg !77
  %.v16 = select <4 x i1> %221, <4 x i32> %217, <4 x i32> %.v15, !dbg !78
  %222 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !78
  %223 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !45
  %224 = insertelement <4 x i32> %223, i32 %115, i64 1, !dbg !45
  %225 = insertelement <4 x i32> %224, i32 %116, i64 2, !dbg !45
  %226 = insertelement <4 x i32> %225, i32 %117, i64 3, !dbg !45
  %227 = bitcast <4 x i32> %226 to <4 x float>, !dbg !45
  %228 = fcmp olt <4 x float> %222, %227, !dbg !79
  %229 = fcmp uno <4 x float> %227, zeroinitializer, !dbg !81
  %230 = or <4 x i1> %229, %228, !dbg !82
  %.v17 = select <4 x i1> %230, <4 x i32> %226, <4 x i32> %.v16, !dbg !83
  %231 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !83
  %232 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !49
  %233 = insertelement <4 x i32> %232, i32 %132, i64 1, !dbg !49
  %234 = insertelement <4 x i32> %233, i32 %133, i64 2, !dbg !49
  %235 = insertelement <4 x i32> %234, i32 %134, i64 3, !dbg !49
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !49
  %237 = fcmp olt <4 x float> %231, %236, !dbg !84
  %238 = fcmp uno <4 x float> %236, zeroinitializer, !dbg !86
  %239 = or <4 x i1> %238, %237, !dbg !87
  %.v18 = select <4 x i1> %239, <4 x i32> %235, <4 x i32> %.v17, !dbg !88
  %240 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !88
  %241 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !53
  %242 = insertelement <4 x i32> %241, i32 %149, i64 1, !dbg !53
  %243 = insertelement <4 x i32> %242, i32 %150, i64 2, !dbg !53
  %244 = insertelement <4 x i32> %243, i32 %151, i64 3, !dbg !53
  %245 = bitcast <4 x i32> %244 to <4 x float>, !dbg !53
  %246 = fcmp olt <4 x float> %240, %245, !dbg !89
  %247 = fcmp uno <4 x float> %245, zeroinitializer, !dbg !91
  %248 = or <4 x i1> %247, %246, !dbg !92
  %.v19 = select <4 x i1> %248, <4 x i32> %244, <4 x i32> %.v18, !dbg !93
  %249 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !93
  %250 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !57
  %251 = insertelement <4 x i32> %250, i32 %166, i64 1, !dbg !57
  %252 = insertelement <4 x i32> %251, i32 %167, i64 2, !dbg !57
  %253 = insertelement <4 x i32> %252, i32 %168, i64 3, !dbg !57
  %254 = bitcast <4 x i32> %253 to <4 x float>, !dbg !57
  %255 = fcmp olt <4 x float> %249, %254, !dbg !94
  %256 = fcmp uno <4 x float> %254, zeroinitializer, !dbg !96
  %257 = or <4 x i1> %256, %255, !dbg !97
  %.v20 = select <4 x i1> %257, <4 x i32> %253, <4 x i32> %.v19, !dbg !98
  %258 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !98
  %259 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !61
  %260 = insertelement <4 x i32> %259, i32 %183, i64 1, !dbg !61
  %261 = insertelement <4 x i32> %260, i32 %184, i64 2, !dbg !61
  %262 = insertelement <4 x i32> %261, i32 %185, i64 3, !dbg !61
  %263 = bitcast <4 x i32> %262 to <4 x float>, !dbg !61
  %264 = fcmp olt <4 x float> %258, %263, !dbg !99
  %265 = extractelement <4 x i1> %264, i64 0, !dbg !101
  %266 = extractelement <4 x i1> %264, i64 1, !dbg !101
  %267 = extractelement <4 x i1> %264, i64 2, !dbg !101
  %268 = extractelement <4 x i1> %264, i64 3, !dbg !101
  %269 = zext <4 x i1> %201 to <4 x i8>, !dbg !102
  %270 = select <4 x i1> %210, <4 x i8> splat (i8 2), <4 x i8> %269, !dbg !103
  %271 = select <4 x i1> %219, <4 x i8> splat (i8 3), <4 x i8> %270, !dbg !104
  %272 = select <4 x i1> %228, <4 x i8> splat (i8 4), <4 x i8> %271, !dbg !105
  %273 = select <4 x i1> %237, <4 x i8> splat (i8 5), <4 x i8> %272, !dbg !106
  %274 = select <4 x i1> %246, <4 x i8> splat (i8 6), <4 x i8> %273, !dbg !107
  %275 = select <4 x i1> %255, <4 x i8> splat (i8 7), <4 x i8> %274, !dbg !108
  %276 = select <4 x i1> %264, <4 x i8> splat (i8 8), <4 x i8> %275, !dbg !109
  %277 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !27
  %278 = insertelement <4 x i32> %277, i32 %47, i64 1, !dbg !27
  %279 = insertelement <4 x i32> %278, i32 %48, i64 2, !dbg !27
  %280 = insertelement <4 x i32> %279, i32 %49, i64 3, !dbg !27
  %281 = bitcast <4 x i32> %280 to <4 x float>, !dbg !27
  %282 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !33
  %283 = insertelement <4 x i32> %282, i32 %66, i64 1, !dbg !33
  %284 = insertelement <4 x i32> %283, i32 %67, i64 2, !dbg !33
  %285 = insertelement <4 x i32> %284, i32 %68, i64 3, !dbg !33
  %286 = bitcast <4 x i32> %285 to <4 x float>, !dbg !33
  %287 = fcmp ogt <4 x float> %286, %281, !dbg !62
  %288 = fcmp uno <4 x float> %286, zeroinitializer, !dbg !66
  %289 = or <4 x i1> %287, %288, !dbg !67
  %.v21 = select <4 x i1> %289, <4 x i32> %285, <4 x i32> %280, !dbg !68
  %290 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !68
  %291 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !37
  %292 = insertelement <4 x i32> %291, i32 %83, i64 1, !dbg !37
  %293 = insertelement <4 x i32> %292, i32 %84, i64 2, !dbg !37
  %294 = insertelement <4 x i32> %293, i32 %85, i64 3, !dbg !37
  %295 = bitcast <4 x i32> %294 to <4 x float>, !dbg !37
  %296 = fcmp olt <4 x float> %290, %295, !dbg !69
  %297 = fcmp uno <4 x float> %295, zeroinitializer, !dbg !71
  %298 = or <4 x i1> %297, %296, !dbg !72
  %.v22 = select <4 x i1> %298, <4 x i32> %294, <4 x i32> %.v21, !dbg !73
  %299 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !73
  %300 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !42
  %301 = insertelement <4 x i32> %300, i32 %102, i64 1, !dbg !42
  %302 = insertelement <4 x i32> %301, i32 %103, i64 2, !dbg !42
  %303 = insertelement <4 x i32> %302, i32 %104, i64 3, !dbg !42
  %304 = bitcast <4 x i32> %303 to <4 x float>, !dbg !42
  %305 = fcmp olt <4 x float> %299, %304, !dbg !74
  %306 = fcmp uno <4 x float> %304, zeroinitializer, !dbg !76
  %307 = or <4 x i1> %306, %305, !dbg !77
  %.v23 = select <4 x i1> %307, <4 x i32> %303, <4 x i32> %.v22, !dbg !78
  %308 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !78
  %309 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !45
  %310 = insertelement <4 x i32> %309, i32 %120, i64 1, !dbg !45
  %311 = insertelement <4 x i32> %310, i32 %121, i64 2, !dbg !45
  %312 = insertelement <4 x i32> %311, i32 %122, i64 3, !dbg !45
  %313 = bitcast <4 x i32> %312 to <4 x float>, !dbg !45
  %314 = fcmp olt <4 x float> %308, %313, !dbg !79
  %315 = fcmp uno <4 x float> %313, zeroinitializer, !dbg !81
  %316 = or <4 x i1> %315, %314, !dbg !82
  %.v24 = select <4 x i1> %316, <4 x i32> %312, <4 x i32> %.v23, !dbg !83
  %317 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !83
  %318 = insertelement <4 x i32> poison, i32 %136, i64 0, !dbg !49
  %319 = insertelement <4 x i32> %318, i32 %137, i64 1, !dbg !49
  %320 = insertelement <4 x i32> %319, i32 %138, i64 2, !dbg !49
  %321 = insertelement <4 x i32> %320, i32 %139, i64 3, !dbg !49
  %322 = bitcast <4 x i32> %321 to <4 x float>, !dbg !49
  %323 = fcmp olt <4 x float> %317, %322, !dbg !84
  %324 = fcmp uno <4 x float> %322, zeroinitializer, !dbg !86
  %325 = or <4 x i1> %324, %323, !dbg !87
  %.v25 = select <4 x i1> %325, <4 x i32> %321, <4 x i32> %.v24, !dbg !88
  %326 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !88
  %327 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !53
  %328 = insertelement <4 x i32> %327, i32 %154, i64 1, !dbg !53
  %329 = insertelement <4 x i32> %328, i32 %155, i64 2, !dbg !53
  %330 = insertelement <4 x i32> %329, i32 %156, i64 3, !dbg !53
  %331 = bitcast <4 x i32> %330 to <4 x float>, !dbg !53
  %332 = fcmp olt <4 x float> %326, %331, !dbg !89
  %333 = fcmp uno <4 x float> %331, zeroinitializer, !dbg !91
  %334 = or <4 x i1> %333, %332, !dbg !92
  %.v26 = select <4 x i1> %334, <4 x i32> %330, <4 x i32> %.v25, !dbg !93
  %335 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !93
  %336 = insertelement <4 x i32> poison, i32 %170, i64 0, !dbg !57
  %337 = insertelement <4 x i32> %336, i32 %171, i64 1, !dbg !57
  %338 = insertelement <4 x i32> %337, i32 %172, i64 2, !dbg !57
  %339 = insertelement <4 x i32> %338, i32 %173, i64 3, !dbg !57
  %340 = bitcast <4 x i32> %339 to <4 x float>, !dbg !57
  %341 = fcmp olt <4 x float> %335, %340, !dbg !94
  %342 = fcmp uno <4 x float> %340, zeroinitializer, !dbg !96
  %343 = or <4 x i1> %342, %341, !dbg !97
  %.v27 = select <4 x i1> %343, <4 x i32> %339, <4 x i32> %.v26, !dbg !98
  %344 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !98
  %345 = insertelement <4 x i32> poison, i32 %187, i64 0, !dbg !61
  %346 = insertelement <4 x i32> %345, i32 %188, i64 1, !dbg !61
  %347 = insertelement <4 x i32> %346, i32 %189, i64 2, !dbg !61
  %348 = insertelement <4 x i32> %347, i32 %190, i64 3, !dbg !61
  %349 = bitcast <4 x i32> %348 to <4 x float>, !dbg !61
  %350 = fcmp olt <4 x float> %344, %349, !dbg !99
  %351 = shufflevector <4 x float> %349, <4 x float> %263, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !110
  %352 = fcmp uno <8 x float> %351, zeroinitializer, !dbg !110
  %353 = extractelement <8 x i1> %352, i64 7, !dbg !101
  %354 = or i1 %353, %265, !dbg !101
  %355 = extractelement <8 x i1> %352, i64 6, !dbg !101
  %356 = or i1 %355, %266, !dbg !101
  %357 = extractelement <8 x i1> %352, i64 5, !dbg !101
  %358 = or i1 %357, %267, !dbg !101
  %359 = extractelement <8 x i1> %352, i64 4, !dbg !101
  %360 = or i1 %359, %268, !dbg !101
  %361 = extractelement <4 x i1> %350, i64 0, !dbg !101
  %362 = extractelement <8 x i1> %352, i64 3, !dbg !101
  %363 = or i1 %362, %361, !dbg !101
  %364 = extractelement <4 x i1> %350, i64 1, !dbg !101
  %365 = extractelement <8 x i1> %352, i64 2, !dbg !101
  %366 = or i1 %365, %364, !dbg !101
  %367 = extractelement <4 x i1> %350, i64 2, !dbg !101
  %368 = extractelement <8 x i1> %352, i64 1, !dbg !101
  %369 = or i1 %368, %367, !dbg !101
  %370 = extractelement <4 x i1> %350, i64 3, !dbg !101
  %371 = extractelement <8 x i1> %352, i64 0, !dbg !101
  %372 = or i1 %371, %370, !dbg !101
  %373 = zext <4 x i1> %287 to <4 x i8>, !dbg !102
  %374 = select <4 x i1> %296, <4 x i8> splat (i8 2), <4 x i8> %373, !dbg !103
  %375 = select <4 x i1> %305, <4 x i8> splat (i8 3), <4 x i8> %374, !dbg !104
  %376 = select <4 x i1> %314, <4 x i8> splat (i8 4), <4 x i8> %375, !dbg !105
  %377 = select <4 x i1> %323, <4 x i8> splat (i8 5), <4 x i8> %376, !dbg !106
  %378 = select <4 x i1> %332, <4 x i8> splat (i8 6), <4 x i8> %377, !dbg !107
  %379 = select <4 x i1> %341, <4 x i8> splat (i8 7), <4 x i8> %378, !dbg !108
  %380 = select <4 x i1> %350, <4 x i8> splat (i8 8), <4 x i8> %379, !dbg !109
  %381 = sext i32 %15 to i64, !dbg !111
  %382 = getelementptr float, ptr addrspace(1) %1, i64 %381, !dbg !111
  %383 = sext i32 %16 to i64, !dbg !111
  %384 = getelementptr float, ptr addrspace(1) %1, i64 %383, !dbg !111
  %385 = zext nneg i32 %9 to i64, !dbg !112
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %385, !dbg !112
  %387 = extractelement <4 x i32> %.v20, i64 0, !dbg !112
  %388 = select i1 %354, i32 %182, i32 %387, !dbg !113
  %389 = extractelement <4 x i32> %.v20, i64 1, !dbg !112
  %390 = select i1 %356, i32 %183, i32 %389, !dbg !113
  %391 = extractelement <4 x i32> %.v20, i64 2, !dbg !112
  %392 = select i1 %358, i32 %184, i32 %391, !dbg !113
  %393 = extractelement <4 x i32> %.v20, i64 3, !dbg !112
  %394 = select i1 %360, i32 %185, i32 %393, !dbg !113
  %395 = extractelement <4 x i32> %.v27, i64 0, !dbg !112
  %396 = select i1 %363, i32 %187, i32 %395, !dbg !113
  %397 = extractelement <4 x i32> %.v27, i64 1, !dbg !112
  %398 = select i1 %366, i32 %188, i32 %397, !dbg !113
  %399 = extractelement <4 x i32> %.v27, i64 2, !dbg !112
  %400 = select i1 %369, i32 %189, i32 %399, !dbg !113
  %401 = extractelement <4 x i32> %.v27, i64 3, !dbg !112
  %402 = select i1 %372, i32 %190, i32 %401, !dbg !113
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %386, i32 %388, i32 %390, i32 %392, i32 %394, i1 true) #2, !dbg !112
  %403 = getelementptr inbounds i8, ptr addrspace(3) %386, i64 16, !dbg !112
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %403, i32 %396, i32 %398, i32 %400, i32 %402, i1 true) #2, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %404 = zext nneg i32 %11 to i64, !dbg !112
  %405 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %404, !dbg !112
  %406 = zext nneg i32 %12 to i64, !dbg !112
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %406, !dbg !112
  %408 = load <4 x i32>, ptr addrspace(3) %407, align 16, !dbg !112
  %.extract = load i32, ptr addrspace(3) %405, align 16, !dbg !112
  %409 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 4, !dbg !112
  %.extract8 = load i32, ptr addrspace(3) %409, align 4, !dbg !112
  %410 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 8, !dbg !112
  %.extract9 = load i32, ptr addrspace(3) %410, align 8, !dbg !112
  %411 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 12, !dbg !112
  %.extract10 = load i32, ptr addrspace(3) %411, align 4, !dbg !112
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %382, i1 true) #2, !dbg !112
  %.extract11 = extractelement <4 x i32> %408, i64 0, !dbg !112
  %.extract12 = extractelement <4 x i32> %408, i64 1, !dbg !112
  %.extract13 = extractelement <4 x i32> %408, i64 2, !dbg !112
  %.extract14 = extractelement <4 x i32> %408, i64 3, !dbg !112
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %384, i1 true) #2, !dbg !112
  %412 = sext i32 %13 to i64, !dbg !114
  %413 = getelementptr i8, ptr addrspace(1) %2, i64 %412, !dbg !114
  %414 = bitcast <4 x i8> %276 to i32, !dbg !115
  %415 = bitcast <4 x i8> %380 to i32, !dbg !115
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %414, i32 %415, ptr addrspace(1) %413, i1 true) #2, !dbg !115
  ret void, !dbg !116
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4zv45ep7nj3eymeeb4klzzvdn4tlfcqfbegprmy56hcb7czqrpv.py", directory: "inductor_cache/4z")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_9", linkageName: "triton_poi_fused_max_pool2d_with_indices_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 62, column: 20, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 56, column: 21, scope: !7)
!20 = !DILocation(line: 39, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 50, scope: !7)
!22 = !DILocation(line: 40, column: 61, scope: !7)
!23 = !DILocation(line: 40, column: 41, scope: !7)
!24 = !DILocation(line: 40, column: 46, scope: !7)
!25 = !DILocation(line: 40, column: 55, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 66, scope: !7)
!28 = !DILocation(line: 42, column: 21, scope: !7)
!29 = !DILocation(line: 45, column: 19, scope: !7)
!30 = !DILocation(line: 46, column: 46, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 66, scope: !7)
!34 = !DILocation(line: 53, column: 46, scope: !7)
!35 = !DILocation(line: 53, column: 55, scope: !7)
!36 = !DILocation(line: 53, column: 31, scope: !7)
!37 = !DILocation(line: 53, column: 66, scope: !7)
!38 = !DILocation(line: 59, column: 20, scope: !7)
!39 = !DILocation(line: 60, column: 44, scope: !7)
!40 = !DILocation(line: 60, column: 53, scope: !7)
!41 = !DILocation(line: 60, column: 31, scope: !7)
!42 = !DILocation(line: 60, column: 64, scope: !7)
!43 = !DILocation(line: 63, column: 45, scope: !7)
!44 = !DILocation(line: 63, column: 31, scope: !7)
!45 = !DILocation(line: 63, column: 56, scope: !7)
!46 = !DILocation(line: 66, column: 41, scope: !7)
!47 = !DILocation(line: 66, column: 50, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 61, scope: !7)
!50 = !DILocation(line: 73, column: 43, scope: !7)
!51 = !DILocation(line: 73, column: 52, scope: !7)
!52 = !DILocation(line: 73, column: 31, scope: !7)
!53 = !DILocation(line: 73, column: 63, scope: !7)
!54 = !DILocation(line: 76, column: 43, scope: !7)
!55 = !DILocation(line: 76, column: 52, scope: !7)
!56 = !DILocation(line: 76, column: 31, scope: !7)
!57 = !DILocation(line: 76, column: 63, scope: !7)
!58 = !DILocation(line: 79, column: 43, scope: !7)
!59 = !DILocation(line: 79, column: 52, scope: !7)
!60 = !DILocation(line: 79, column: 31, scope: !7)
!61 = !DILocation(line: 79, column: 63, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!64 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!65 = !DILocation(line: 47, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !65)
!69 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !70)
!70 = !DILocation(line: 54, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !70)
!74 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !75)
!75 = !DILocation(line: 61, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !80)
!80 = !DILocation(line: 64, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !85)
!85 = !DILocation(line: 67, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !90)
!90 = !DILocation(line: 74, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !95)
!95 = !DILocation(line: 77, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 16, scope: !63, inlinedAt: !100)
!102 = !DILocation(line: 84, column: 35, scope: !7)
!103 = !DILocation(line: 87, column: 35, scope: !7)
!104 = !DILocation(line: 90, column: 35, scope: !7)
!105 = !DILocation(line: 93, column: 35, scope: !7)
!106 = !DILocation(line: 96, column: 35, scope: !7)
!107 = !DILocation(line: 99, column: 35, scope: !7)
!108 = !DILocation(line: 102, column: 35, scope: !7)
!109 = !DILocation(line: 105, column: 35, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !63, inlinedAt: !100)
!111 = !DILocation(line: 106, column: 25, scope: !7)
!112 = !DILocation(line: 106, column: 37, scope: !7)
!113 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !100)
!114 = !DILocation(line: 107, column: 25, scope: !7)
!115 = !DILocation(line: 107, column: 37, scope: !7)
!116 = !DILocation(line: 107, column: 4, scope: !7)
