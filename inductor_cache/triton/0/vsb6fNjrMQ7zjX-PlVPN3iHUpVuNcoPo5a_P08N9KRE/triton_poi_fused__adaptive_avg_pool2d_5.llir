; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__adaptive_avg_pool2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 14, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 8, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 16, !dbg !14
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = and i32 %7, 3, !dbg !17
  %.lobit13 = lshr i32 %7, 3, !dbg !17
  %21 = and i32 %.lobit13, 3, !dbg !17
  %22 = or disjoint i32 %19, %20, !dbg !18
  %23 = or disjoint i32 %19, %21, !dbg !18
  %24 = icmp slt i32 %22, 4, !dbg !19
  %25 = icmp slt i32 %23, 4, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %26 = sdiv i32 %.frozen, 2, !dbg !20
  %27 = mul i32 %26, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %.frozen6 = freeze i32 %14, !dbg !22
  %28 = sdiv i32 %.frozen6, 4, !dbg !22
  %29 = mul i32 %28, 4, !dbg !23
  %.decomposed7 = sub i32 %.frozen6, %29, !dbg !23
  %30 = shl nsw i32 %.decomposed, 1, !dbg !24
  %31 = shl i32 %26, 3, !dbg !25
  %32 = add i32 %30, %31, !dbg !26
  %33 = shl i32 %12, 4, !dbg !27
  %34 = shl i32 %13, 4, !dbg !27
  %35 = add i32 %32, %33, !dbg !28
  %36 = add i32 %32, %34, !dbg !28
  %37 = sext i32 %35 to i64, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !29
  %39 = sext i32 %36 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !29
  %41 = and i1 %15, %24, !dbg !30
  %42 = and i1 %16, %24, !dbg !30
  %43 = and i1 %17, %25, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %41) #2, !dbg !31
  %45 = bitcast i32 %44 to float, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %42) #2, !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = or disjoint i32 %30, 1, !dbg !32
  %49 = add i32 %48, %31, !dbg !33
  %50 = add i32 %49, %33, !dbg !34
  %51 = add i32 %49, %34, !dbg !34
  %52 = sext i32 %50 to i64, !dbg !35
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !35
  %54 = sext i32 %51 to i64, !dbg !35
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !35
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %41) #2, !dbg !36
  %57 = bitcast i32 %56 to float, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %42) #2, !dbg !36
  %59 = bitcast i32 %58 to float, !dbg !36
  %60 = add i32 %32, 4, !dbg !37
  %61 = add i32 %60, %33, !dbg !38
  %62 = add i32 %60, %34, !dbg !38
  %63 = sext i32 %61 to i64, !dbg !39
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !39
  %65 = sext i32 %62 to i64, !dbg !39
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !39
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %41) #2, !dbg !40
  %68 = bitcast i32 %67 to float, !dbg !40
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %42) #2, !dbg !40
  %70 = bitcast i32 %69 to float, !dbg !40
  %71 = add i32 %32, 5, !dbg !41
  %72 = add i32 %71, %33, !dbg !42
  %73 = add i32 %71, %34, !dbg !42
  %74 = sext i32 %72 to i64, !dbg !43
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !43
  %76 = sext i32 %73 to i64, !dbg !43
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !43
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %41) #2, !dbg !44
  %79 = bitcast i32 %78 to float, !dbg !44
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %42) #2, !dbg !44
  %81 = bitcast i32 %80 to float, !dbg !44
  %82 = fadd float %45, %57, !dbg !45
  %83 = fadd float %47, %59, !dbg !45
  %84 = fadd float %82, %68, !dbg !46
  %85 = fadd float %83, %70, !dbg !46
  %86 = fadd float %84, %79, !dbg !47
  %87 = fadd float %85, %81, !dbg !47
  %88 = fmul float %86, 2.500000e-01, !dbg !48
  %89 = fmul float %87, 2.500000e-01, !dbg !48
  %90 = shl i32 %23, 2, !dbg !49
  %91 = add i32 %90, %.decomposed7, !dbg !50
  %92 = shl i32 %28, 4, !dbg !51
  %93 = add i32 %91, %92, !dbg !52
  %94 = sext i32 %93 to i64, !dbg !53
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !53
  %96 = shl i32 %7, 4, !dbg !54
  %97 = and i32 %96, 48, !dbg !54
  %98 = or disjoint i32 %97, %9, !dbg !54
  %99 = and i32 %10, 62, !dbg !54
  %100 = lshr exact i32 %97, 1, !dbg !54
  %101 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %100, !dbg !54
  %102 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %98, !dbg !54
  %103 = bitcast float %88 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !54
  %104 = or disjoint i32 %98, 8, !dbg !54
  %105 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %104, !dbg !54
  %106 = bitcast float %89 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %107 = lshr i32 %10, 3, !dbg !54
  %108 = and i32 %107, 6, !dbg !54
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %108, !dbg !54
  %110 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %99, !dbg !54
  %.extract = load i32, ptr addrspace(3) %110, align 8, !dbg !54
  %111 = getelementptr inbounds i8, ptr addrspace(3) %110, i32 4, !dbg !54
  %.extract5 = load i32, ptr addrspace(3) %111, align 4, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %95, i1 %43) #2, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx37nshrgwf3chjo3dpi3i7errw2npgve4w32tcf72pi7ltq7cna.py", directory: "inductor_cache/x3")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_5", linkageName: "triton_poi_fused__adaptive_avg_pool2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 47, scope: !7)
!28 = !DILocation(line: 34, column: 44, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 60, scope: !7)
!31 = !DILocation(line: 34, column: 52, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 48, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 56, scope: !7)
!37 = !DILocation(line: 36, column: 41, scope: !7)
!38 = !DILocation(line: 36, column: 48, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 56, scope: !7)
!41 = !DILocation(line: 37, column: 41, scope: !7)
!42 = !DILocation(line: 37, column: 48, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 56, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 42, column: 18, scope: !7)
!49 = !DILocation(line: 43, column: 32, scope: !7)
!50 = !DILocation(line: 43, column: 30, scope: !7)
!51 = !DILocation(line: 43, column: 40, scope: !7)
!52 = !DILocation(line: 43, column: 37, scope: !7)
!53 = !DILocation(line: 43, column: 25, scope: !7)
!54 = !DILocation(line: 43, column: 51, scope: !7)
!55 = !DILocation(line: 43, column: 4, scope: !7)
