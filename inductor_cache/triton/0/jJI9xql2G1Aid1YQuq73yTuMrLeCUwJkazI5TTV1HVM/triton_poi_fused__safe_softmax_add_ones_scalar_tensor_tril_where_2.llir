; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__safe_softmax_add_ones_scalar_tensor_tril_where_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 64, !dbg !14
  %14 = srem i32 %11, 4, !dbg !15
  %15 = srem i32 %12, 4, !dbg !15
  %16 = shl i32 %11, 2, !dbg !16
  %17 = shl i32 %12, 2, !dbg !16
  %18 = sext i32 %16 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = sext i32 %17 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #1, !dbg !18
  %24 = or disjoint i32 %16, 1, !dbg !19
  %25 = or disjoint i32 %17, 1, !dbg !19
  %26 = sext i32 %24 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = sext i32 %25 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #1, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %13) #1, !dbg !21
  %32 = or disjoint i32 %16, 2, !dbg !22
  %33 = or disjoint i32 %17, 2, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %13) #1, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #1, !dbg !24
  %40 = or disjoint i32 %16, 3, !dbg !25
  %41 = or disjoint i32 %17, 3, !dbg !25
  %42 = sext i32 %40 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = sext i32 %41 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %13) #1, !dbg !27
  %48 = icmp sgt i32 %14, 1, !dbg !28
  %49 = select i1 %48, float 0.000000e+00, float 0xFFF0000000000000, !dbg !29
  %50 = insertelement <4 x i32> poison, i32 %22, i64 0, !dbg !18
  %51 = insertelement <4 x i32> %50, i32 %30, i64 1, !dbg !18
  %52 = insertelement <4 x i32> %51, i32 %38, i64 2, !dbg !18
  %53 = insertelement <4 x i32> %52, i32 %46, i64 3, !dbg !18
  %54 = bitcast <4 x i32> %53 to <4 x float>, !dbg !18
  %55 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !30
  %56 = shufflevector <2 x i32> %55, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !30
  %57 = icmp sgt <2 x i32> %56, <i32 -1, i32 0>, !dbg !30
  %58 = select <2 x i1> %57, <2 x float> zeroinitializer, <2 x float> splat (float 0xFFF0000000000000), !dbg !31
  %59 = insertelement <4 x float> <float poison, float poison, float poison, float 0xFFF0000000000000>, float %49, i64 2, !dbg !32
  %60 = shufflevector <2 x float> %58, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !32
  %61 = shufflevector <4 x float> %60, <4 x float> %59, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !32
  %62 = fadd <4 x float> %61, %54, !dbg !32
  %63 = extractelement <4 x float> %62, i64 0, !dbg !33
  %64 = extractelement <4 x float> %62, i64 1, !dbg !34
  %65 = fcmp ogt float %63, %64, !dbg !35
  %66 = fcmp uno float %63, 0.000000e+00, !dbg !39
  %67 = or i1 %65, %66, !dbg !40
  %68 = select i1 %67, float %63, float %64, !dbg !41
  %69 = extractelement <4 x float> %62, i64 2, !dbg !42
  %70 = fcmp ogt float %68, %69, !dbg !43
  %71 = fcmp uno float %68, 0.000000e+00, !dbg !45
  %72 = or i1 %70, %71, !dbg !46
  %73 = select i1 %72, float %68, float %69, !dbg !47
  %74 = extractelement <4 x float> %62, i64 3, !dbg !48
  %75 = fcmp ogt float %73, %74, !dbg !49
  %76 = fcmp uno float %73, 0.000000e+00, !dbg !51
  %77 = or i1 %75, %76, !dbg !52
  %78 = select i1 %77, float %73, float %74, !dbg !53
  %79 = fsub float %63, %78, !dbg !33
  %80 = fmul float %79, 0x3FF7154760000000, !dbg !54
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #1, !dbg !54
  %82 = fsub float %64, %78, !dbg !34
  %83 = fmul float %82, 0x3FF7154760000000, !dbg !55
  %84 = fsub float %69, %78, !dbg !42
  %85 = fmul float %84, 0x3FF7154760000000, !dbg !56
  %86 = fsub float %74, %78, !dbg !48
  %87 = fmul float %86, 0x3FF7154760000000, !dbg !57
  %88 = fcmp une <4 x float> %62, splat (float 0xFFF0000000000000), !dbg !58
  %89 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !18
  %90 = insertelement <4 x i32> %89, i32 %31, i64 1, !dbg !18
  %91 = insertelement <4 x i32> %90, i32 %39, i64 2, !dbg !18
  %92 = insertelement <4 x i32> %91, i32 %47, i64 3, !dbg !18
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !18
  %94 = insertelement <4 x i32> <i32 poison, i32 3, i32 poison, i32 poison>, i32 %15, i64 0, !dbg !30
  %95 = shufflevector <4 x i32> %94, <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>, !dbg !30
  %96 = insertelement <4 x i32> <i32 -1, i32 0, i32 1, i32 poison>, i32 %15, i64 3, !dbg !30
  %97 = icmp sgt <4 x i32> %95, %96, !dbg !30
  %98 = icmp eq <4 x i32> %95, %96, !dbg !30
  %99 = shufflevector <4 x i1> %97, <4 x i1> %98, <4 x i32> <i32 0, i32 1, i32 2, i32 7>, !dbg !30
  %100 = select <4 x i1> %99, <4 x float> zeroinitializer, <4 x float> splat (float 0xFFF0000000000000), !dbg !31
  %101 = fadd <4 x float> %100, %93, !dbg !32
  %102 = extractelement <4 x float> %101, i64 0, !dbg !33
  %103 = extractelement <4 x float> %101, i64 1, !dbg !34
  %104 = fcmp ogt float %102, %103, !dbg !35
  %105 = fcmp uno float %102, 0.000000e+00, !dbg !39
  %106 = or i1 %105, %104, !dbg !40
  %107 = select i1 %106, float %102, float %103, !dbg !41
  %108 = extractelement <4 x float> %101, i64 2, !dbg !42
  %109 = fcmp ogt float %107, %108, !dbg !43
  %110 = fcmp uno float %107, 0.000000e+00, !dbg !45
  %111 = or i1 %109, %110, !dbg !46
  %112 = select i1 %111, float %107, float %108, !dbg !47
  %113 = extractelement <4 x float> %101, i64 3, !dbg !48
  %114 = fcmp ogt float %112, %113, !dbg !49
  %115 = fcmp uno float %112, 0.000000e+00, !dbg !51
  %116 = or i1 %114, %115, !dbg !52
  %117 = select i1 %116, float %112, float %113, !dbg !53
  %118 = fsub float %102, %117, !dbg !33
  %119 = fmul float %118, 0x3FF7154760000000, !dbg !54
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #1, !dbg !54
  %121 = fsub float %103, %117, !dbg !34
  %122 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !55
  %123 = fmul float %121, 0x3FF7154760000000, !dbg !55
  %124 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %123) #1, !dbg !55
  %125 = fadd float %81, %122, !dbg !59
  %126 = fadd float %120, %124, !dbg !59
  %127 = fsub float %108, %117, !dbg !42
  %128 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !56
  %129 = fmul float %127, 0x3FF7154760000000, !dbg !56
  %130 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %129) #1, !dbg !56
  %131 = fadd float %125, %128, !dbg !60
  %132 = fadd float %126, %130, !dbg !60
  %133 = fsub float %113, %117, !dbg !48
  %134 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #1, !dbg !57
  %135 = fmul float %133, 0x3FF7154760000000, !dbg !57
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #1, !dbg !57
  %137 = fadd float %131, %134, !dbg !61
  %138 = fadd float %132, %136, !dbg !61
  %139 = fcmp une <4 x float> %101, splat (float 0xFFF0000000000000), !dbg !58
  %140 = bitcast <4 x i1> %88 to i4, !dbg !62
  %141 = icmp ne i4 %140, 0, !dbg !62
  %142 = bitcast <4 x i1> %139 to i4, !dbg !62
  %143 = icmp ne i4 %142, 0, !dbg !62
  %144 = sext i32 %11 to i64, !dbg !63
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !63
  %146 = bitcast float %78 to i32, !dbg !64
  %147 = bitcast float %117 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %145, i1 %13) #1, !dbg !64
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !65
  %149 = bitcast float %137 to i32, !dbg !66
  %150 = bitcast float %138 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %149, i32 %150, ptr addrspace(1) %148, i1 %13) #1, !dbg !66
  %151 = getelementptr i1, ptr addrspace(1) %3, i64 %144, !dbg !67
  %152 = insertelement <2 x i1> poison, i1 %141, i64 0, !dbg !68
  %153 = insertelement <2 x i1> %152, i1 %143, i64 1, !dbg !68
  %154 = zext <2 x i1> %153 to <2 x i8>, !dbg !68
  %155 = bitcast <2 x i8> %154 to i16, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %155, ptr addrspace(1) %151, i1 %13) #1, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnkl74nz5qg7yewaptikyxoz5tl3l7okz5jqszrni4ys6wkrnb3d.py", directory: "inductor_cache/nk")
!4 = !{ptr @triton_poi_fused__safe_softmax_add_ones_scalar_tensor_tril_where_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__safe_softmax_add_ones_scalar_tensor_tril_where_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__safe_softmax_add_ones_scalar_tensor_tril_where_2", linkageName: "triton_poi_fused__safe_softmax_add_ones_scalar_tensor_tril_where_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 27, column: 31, scope: !7)
!21 = !DILocation(line: 27, column: 42, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 28, column: 31, scope: !7)
!24 = !DILocation(line: 28, column: 42, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 46, column: 21, scope: !7)
!29 = !DILocation(line: 48, column: 34, scope: !7)
!30 = !DILocation(line: 32, column: 19, scope: !7)
!31 = !DILocation(line: 37, column: 32, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 57, column: 19, scope: !7)
!34 = !DILocation(line: 59, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 44, column: 41, scope: !7)
!39 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 62, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !44)
!44 = !DILocation(line: 50, column: 42, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !44)
!48 = !DILocation(line: 65, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !50)
!50 = !DILocation(line: 56, column: 42, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !50)
!54 = !DILocation(line: 58, column: 24, scope: !7)
!55 = !DILocation(line: 60, column: 24, scope: !7)
!56 = !DILocation(line: 63, column: 24, scope: !7)
!57 = !DILocation(line: 66, column: 24, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 20, scope: !7)
!62 = !DILocation(line: 86, column: 20, scope: !7)
!63 = !DILocation(line: 87, column: 25, scope: !7)
!64 = !DILocation(line: 87, column: 37, scope: !7)
!65 = !DILocation(line: 88, column: 25, scope: !7)
!66 = !DILocation(line: 88, column: 37, scope: !7)
!67 = !DILocation(line: 89, column: 25, scope: !7)
!68 = !DILocation(line: 89, column: 37, scope: !7)
!69 = !DILocation(line: 89, column: 4, scope: !7)
