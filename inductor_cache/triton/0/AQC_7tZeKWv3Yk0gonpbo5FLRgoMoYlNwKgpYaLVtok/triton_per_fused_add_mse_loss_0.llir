; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mse_loss_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = shl i32 %7, 2, !dbg !10
  %11 = and i32 %10, 60, !dbg !10
  %12 = and i32 %10, 252, !dbg !10
  %13 = and i32 %7, 192, !dbg !10
  %14 = zext nneg i32 %12 to i64, !dbg !11
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !11
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !12
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !12
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !12
  %21 = or disjoint i32 %11, %13, !dbg !13
  %22 = zext nneg i32 %21 to i64, !dbg !14
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !14
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !15
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !18
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !19
  %41 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !12
  %42 = insertelement <2 x i32> %41, i32 %18, i64 1, !dbg !12
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !12
  %44 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !15
  %45 = insertelement <2 x i32> %44, i32 %26, i64 1, !dbg !15
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !15
  %47 = fsub <2 x float> %43, %46, !dbg !20
  %48 = fmul <2 x float> %47, %47, !dbg !21
  %49 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !12
  %50 = insertelement <2 x i32> %49, i32 %19, i64 1, !dbg !12
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !12
  %52 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !15
  %53 = insertelement <2 x i32> %52, i32 %27, i64 1, !dbg !15
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !15
  %55 = fsub <2 x float> %51, %54, !dbg !20
  %56 = fmul <2 x float> %55, %55, !dbg !21
  %shift = shufflevector <2 x float> %48, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %57 = fadd <2 x float> %48, %shift, !dbg !22
  %shift1 = shufflevector <2 x float> %56, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %58 = fadd <2 x float> %shift1, %57, !dbg !22
  %59 = fadd <2 x float> %56, %58, !dbg !22
  %60 = extractelement <2 x float> %59, i64 0, !dbg !22
  %61 = bitcast float %60 to i32, !dbg !27
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 16, i32 31), !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = fadd float %60, %63, !dbg !22
  %65 = bitcast float %64 to i32, !dbg !27
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = fadd float %64, %67, !dbg !22
  %69 = bitcast float %68 to i32, !dbg !27
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = fadd float %68, %71, !dbg !22
  %73 = bitcast float %72 to i32, !dbg !27
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = fadd float %72, %75, !dbg !22
  %77 = bitcast float %76 to i32, !dbg !27
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = fadd float %76, %79, !dbg !22
  %81 = icmp eq i32 %8, 0, !dbg !27
  %82 = and i32 %9, 7, !dbg !27
  %83 = zext nneg i32 %82 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i64 %83, !dbg !27
  %85 = bitcast float %80 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 %81) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %86 = icmp slt i32 %7, 8, !dbg !27
  %87 = sext i32 %7 to i64, !dbg !27
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i64 %87, !dbg !27
  %89 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %86) #3, !dbg !27
  %90 = bitcast i32 %89 to float, !dbg !27
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 4, i32 31), !dbg !27
  %92 = bitcast i32 %91 to float, !dbg !27
  %93 = fadd float %90, %92, !dbg !22
  %94 = bitcast float %93 to i32, !dbg !27
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !27
  %96 = bitcast i32 %95 to float, !dbg !27
  %97 = fadd float %93, %96, !dbg !22
  %98 = bitcast float %97 to i32, !dbg !27
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !27
  %100 = bitcast i32 %99 to float, !dbg !27
  %101 = fadd float %97, %100, !dbg !22
  %102 = and i32 %7, 7, !dbg !27
  %103 = icmp eq i32 %102, 0, !dbg !27
  %104 = and i1 %86, %103, !dbg !27
  %105 = bitcast float %101 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %105, i1 %104) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %106 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %107 = fadd float %106, 0.000000e+00, !dbg !28
  %108 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !17
  %109 = insertelement <2 x i32> %108, i32 %32, i64 1, !dbg !17
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !17
  %111 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !19
  %112 = insertelement <2 x i32> %111, i32 %38, i64 1, !dbg !19
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !19
  %114 = fsub <2 x float> %110, %113, !dbg !32
  %115 = fmul <2 x float> %114, %114, !dbg !33
  %116 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !17
  %117 = insertelement <2 x i32> %116, i32 %33, i64 1, !dbg !17
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !17
  %119 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %120 = insertelement <2 x i32> %119, i32 %39, i64 1, !dbg !19
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !19
  %122 = fsub <2 x float> %118, %121, !dbg !32
  %123 = fmul <2 x float> %122, %122, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %shift2 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %124 = fadd <2 x float> %115, %shift2, !dbg !36
  %shift3 = shufflevector <2 x float> %123, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %125 = fadd <2 x float> %shift3, %124, !dbg !36
  %126 = fadd <2 x float> %123, %125, !dbg !36
  %127 = extractelement <2 x float> %126, i64 0, !dbg !36
  %128 = bitcast float %127 to i32, !dbg !34
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !34
  %130 = bitcast i32 %129 to float, !dbg !34
  %131 = fadd float %127, %130, !dbg !36
  %132 = bitcast float %131 to i32, !dbg !34
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 8, i32 31), !dbg !34
  %134 = bitcast i32 %133 to float, !dbg !34
  %135 = fadd float %131, %134, !dbg !36
  %136 = bitcast float %135 to i32, !dbg !34
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !34
  %138 = bitcast i32 %137 to float, !dbg !34
  %139 = fadd float %135, %138, !dbg !36
  %140 = bitcast float %139 to i32, !dbg !34
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !34
  %142 = bitcast i32 %141 to float, !dbg !34
  %143 = fadd float %139, %142, !dbg !36
  %144 = bitcast float %143 to i32, !dbg !34
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !34
  %146 = bitcast i32 %145 to float, !dbg !34
  %147 = fadd float %143, %146, !dbg !36
  %148 = bitcast float %147 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %148, i1 %81) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %149 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %86) #3, !dbg !34
  %150 = bitcast i32 %149 to float, !dbg !34
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 4, i32 31), !dbg !34
  %152 = bitcast i32 %151 to float, !dbg !34
  %153 = fadd float %150, %152, !dbg !36
  %154 = bitcast float %153 to i32, !dbg !34
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = fadd float %153, %156, !dbg !36
  %158 = bitcast float %157 to i32, !dbg !34
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !34
  %160 = bitcast i32 %159 to float, !dbg !34
  %161 = fadd float %157, %160, !dbg !36
  %162 = bitcast float %161 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %162, i1 %104) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %163 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %164 = fadd float %163, 0.000000e+00, !dbg !37
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 1.024000e+03) #3, !dbg !39
  %166 = fadd float %165, 0.000000e+00, !dbg !40
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 1.024000e+03) #3, !dbg !41
  %168 = fadd float %166, %167, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %urem = and i32 %7, 255, !dbg !44
  %169 = icmp eq i32 %urem, 0, !dbg !44
  %170 = bitcast float %168 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %0, i1 %169) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py", directory: "inductor_cache/ms")
!4 = !{ptr @triton_per_fused_add_mse_loss_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mse_loss_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mse_loss_0", linkageName: "triton_per_fused_add_mse_loss_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 33, column: 30, scope: !7)
!12 = !DILocation(line: 33, column: 35, scope: !7)
!13 = !DILocation(line: 34, column: 35, scope: !7)
!14 = !DILocation(line: 34, column: 30, scope: !7)
!15 = !DILocation(line: 34, column: 43, scope: !7)
!16 = !DILocation(line: 35, column: 30, scope: !7)
!17 = !DILocation(line: 35, column: 35, scope: !7)
!18 = !DILocation(line: 36, column: 30, scope: !7)
!19 = !DILocation(line: 36, column: 43, scope: !7)
!20 = !DILocation(line: 37, column: 18, scope: !7)
!21 = !DILocation(line: 38, column: 18, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 40, column: 57, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 40, column: 44, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 19, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !35)
!35 = !DILocation(line: 44, column: 59, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !35)
!37 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 45, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 4, scope: !7)
!44 = !DILocation(line: 52, column: 63, scope: !7)
!45 = !DILocation(line: 52, column: 4, scope: !7)
