#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":40:57)
#loc25 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":44:59)
#loc36 = loc(callsite(#loc1 at #loc19))
#loc40 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_mse_loss_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 1.024000e+03 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<256> : tensor<1024xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc2)
    %1 = arith.remsi %0, %cst_2 : tensor<1024xi32, #blocked> loc(#loc3)
    %2 = arith.remsi %0, %cst_1 : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = arith.divsi %0, %cst_2 : tensor<1024xi32, #blocked> loc(#loc5)
    %4 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc6)
    %5 = tt.addptr %4, %1 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc6)
    %6 = tt.load %5 evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = arith.muli %3, %cst_1 : tensor<1024xi32, #blocked> loc(#loc8)
    %8 = arith.addi %2, %7 : tensor<1024xi32, #blocked> loc(#loc9)
    %9 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %10 = tt.addptr %9, %8 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc10)
    %11 = tt.load %10 evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.addptr %12, %1 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %14 = tt.load %13 evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    %15 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.addptr %15, %8 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc14)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc15)
    %18 = arith.subf %6, %11 : tensor<1024xf32, #blocked> loc(#loc16)
    %19 = arith.mulf %18, %18 : tensor<1024xf32, #blocked> loc(#loc17)
    %20 = "tt.reduce"(%19) <{axis = 0 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc19)), %arg7: f32 loc(callsite(#loc1 at #loc19))):
      %33 = arith.addf %arg6, %arg7 : f32 loc(#loc42)
      tt.reduce.return %33 : f32 loc(#loc35)
    }) : (tensor<1024xf32, #blocked>) -> f32 loc(#loc35)
    %21 = arith.addf %20, %cst_0 : f32 loc(#loc38)
    %22 = arith.subf %14, %17 : tensor<1024xf32, #blocked> loc(#loc23)
    %23 = arith.mulf %22, %22 : tensor<1024xf32, #blocked> loc(#loc24)
    %24 = "tt.reduce"(%23) <{axis = 0 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc25)), %arg7: f32 loc(callsite(#loc1 at #loc25))):
      %33 = arith.addf %arg6, %arg7 : f32 loc(#loc43)
      tt.reduce.return %33 : f32 loc(#loc39)
    }) : (tensor<1024xf32, #blocked>) -> f32 loc(#loc39)
    %25 = arith.addf %24, %cst_0 : f32 loc(#loc41)
    %26 = arith.divf %21, %cst : f32 loc(#loc27)
    %27 = arith.addf %26, %cst_0 : f32 loc(#loc28)
    %28 = arith.divf %25, %cst : f32 loc(#loc29)
    %29 = arith.addf %27, %28 : f32 loc(#loc30)
    %30 = tt.splat %29 : f32 -> tensor<1xf32, #blocked1> loc(#loc30)
    gpu.barrier loc(#loc31)
    %31 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc32)
    %32 = tt.splat %31 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    tt.store %32, %30 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    tt.return loc(#loc34)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":27:26)
#loc3 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":30:19)
#loc4 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":31:19)
#loc5 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":32:19)
#loc6 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":33:30)
#loc7 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":33:35)
#loc8 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":34:38)
#loc9 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":34:35)
#loc10 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":34:30)
#loc11 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":34:43)
#loc12 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":35:30)
#loc13 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":35:35)
#loc14 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":36:30)
#loc15 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":36:43)
#loc16 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":37:18)
#loc17 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":38:18)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc22 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":40:44)
#loc23 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":41:18)
#loc24 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":42:19)
#loc26 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":44:45)
#loc27 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":46:19)
#loc28 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":48:20)
#loc29 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":49:20)
#loc30 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":50:20)
#loc31 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":51:4)
#loc32 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":52:28)
#loc33 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":52:63)
#loc34 = loc("inductor_cache/ms/cmswehxdx5tlwpltozhqi3u6haoj55p5yrhx623subguezqmpvsl.py":52:4)
#loc35 = loc(callsite(#loc18 at #loc19))
#loc37 = loc(callsite(#loc20 at #loc18))
#loc38 = loc(callsite(#loc21 at #loc22))
#loc39 = loc(callsite(#loc18 at #loc25))
#loc41 = loc(callsite(#loc21 at #loc26))
#loc42 = loc(callsite(#loc37 at #loc19))
#loc43 = loc(callsite(#loc37 at #loc25))
