; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 6, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 3, !dbg !12
  %16 = and i32 %15, 56, !dbg !12
  %17 = lshr i32 %14, 2, !dbg !12
  %.lobit = and i32 %17, 1, !dbg !12
  %18 = and i32 %14, 8, !dbg !12
  %19 = lshr exact i32 %18, 2, !dbg !12
  %20 = or disjoint i32 %.lobit, %19, !dbg !12
  %21 = and i32 %14, 16, !dbg !12
  %22 = lshr exact i32 %21, 2, !dbg !12
  %23 = or disjoint i32 %20, %22, !dbg !12
  %24 = and i32 %14, 32, !dbg !12
  %25 = lshr exact i32 %24, 2, !dbg !12
  %26 = or disjoint i32 %23, %25, !dbg !12
  %27 = and i32 %14, 64, !dbg !12
  %28 = lshr exact i32 %27, 2, !dbg !12
  %29 = or disjoint i32 %26, %28, !dbg !12
  %30 = xor i32 %29, 32, !dbg !12
  %31 = shl i32 %14, 2, !dbg !12
  %32 = and i32 %31, 12, !dbg !12
  %33 = or disjoint i32 %13, %16, !dbg !13
  %34 = or disjoint i32 %33, 4, !dbg !13
  %35 = or disjoint i32 %13, %29, !dbg !13
  %36 = add nuw i32 %13, %30, !dbg !13
  %37 = icmp slt i32 %33, 512, !dbg !14
  %38 = icmp slt i32 %35, 512, !dbg !14
  %39 = icmp slt i32 %36, 512, !dbg !14
  %40 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %41 = shl i32 %40, 4, !dbg !16
  %.lobit1 = lshr exact i32 %18, 3, !dbg !17
  %42 = lshr exact i32 %21, 3, !dbg !17
  %43 = or disjoint i32 %.lobit1, %42, !dbg !17
  %44 = lshr exact i32 %24, 3, !dbg !17
  %45 = or disjoint i32 %43, %44, !dbg !17
  %46 = lshr exact i32 %27, 3, !dbg !17
  %47 = or disjoint i32 %45, %46, !dbg !17
  %48 = or disjoint i32 %47, %41, !dbg !18
  %49 = or disjoint i32 %41, %32, !dbg !18
  %50 = icmp slt i32 %48, 16, !dbg !19
  %51 = icmp slt i32 %49, 16, !dbg !19
  %.frozen = freeze i32 %33, !dbg !20
  %52 = sdiv i32 %.frozen, 128, !dbg !20
  %53 = mul i32 %52, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %53, !dbg !21
  %54 = srem i32 %34, 128, !dbg !21
  %55 = shl i32 %48, 7, !dbg !22
  %56 = shl i32 %52, 11, !dbg !23
  %57 = add i32 %56, %55, !dbg !24
  %58 = add i32 %57, %.decomposed, !dbg !25
  %59 = add i32 %57, %54, !dbg !25
  %60 = sext i32 %58 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !26
  %62 = sext i32 %59 to i64, !dbg !26
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !26
  %64 = and i1 %37, %50, !dbg !27
  %65 = and i1 %38, %51, !dbg !27
  %66 = and i1 %39, %51, !dbg !27
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %64) #4, !dbg !28
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %64) #4, !dbg !28
  %69 = sext i32 %.decomposed to i64, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !29
  %71 = sext i32 %54 to i64, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !29
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %37) #4, !dbg !30
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %37) #4, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !31
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !31
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %37) #4, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = bitcast i32 %79 to float, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = bitcast i32 %81 to float, !dbg !32
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %37) #4, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !32
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !32
  %91 = bitcast i32 %87 to float, !dbg !32
  %92 = bitcast i32 %88 to float, !dbg !32
  %93 = bitcast i32 %89 to float, !dbg !32
  %94 = bitcast i32 %90 to float, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !33
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %37) #4, !dbg !34
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %37) #4, !dbg !34
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %69, !dbg !35
  %100 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !35
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %37) #4, !dbg !36
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %37) #4, !dbg !36
  %103 = shl i32 %35, 4, !dbg !37
  %104 = shl i32 %36, 4, !dbg !37
  %105 = add i32 %49, %103, !dbg !38
  %106 = add i32 %49, %104, !dbg !38
  %107 = sext i32 %105 to i64, !dbg !39
  %108 = getelementptr float, ptr addrspace(1) %5, i64 %107, !dbg !39
  %109 = sext i32 %106 to i64, !dbg !39
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %109, !dbg !39
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %65) #4, !dbg !40
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %66) #4, !dbg !40
  %113 = fadd float %82, 0x3EE4F8B580000000, !dbg !41
  %114 = fadd float %83, 0x3EE4F8B580000000, !dbg !41
  %115 = fadd float %84, 0x3EE4F8B580000000, !dbg !41
  %116 = fadd float %85, 0x3EE4F8B580000000, !dbg !41
  %117 = fadd float %91, 0x3EE4F8B580000000, !dbg !41
  %118 = fadd float %92, 0x3EE4F8B580000000, !dbg !41
  %119 = fadd float %93, 0x3EE4F8B580000000, !dbg !41
  %120 = fadd float %94, 0x3EE4F8B580000000, !dbg !41
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %121, 0, !dbg !42
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %122, 0, !dbg !42
  br i1 %.not.i, label %128, label %123, !dbg !42

123:                                              ; preds = %11
  br i1 %.not1.i, label %126, label %124, !dbg !42

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

128:                                              ; preds = %11
  br i1 %.not1.i, label %131, label %129, !dbg !42

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %124, %126, %129, %131
  %.0.i = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !42
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i19 = icmp eq i32 %133, 0, !dbg !42
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i22 = icmp eq i32 %134, 0, !dbg !42
  br i1 %.not.i19, label %140, label %135, !dbg !42

135:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i22, label %138, label %136, !dbg !42

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #4, !dbg !42
  br label %__nv_sqrtf.exit23, !dbg !42

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #4, !dbg !42
  br label %__nv_sqrtf.exit23, !dbg !42

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i22, label %143, label %141, !dbg !42

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #4, !dbg !42
  br label %__nv_sqrtf.exit23, !dbg !42

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #4, !dbg !42
  br label %__nv_sqrtf.exit23, !dbg !42

__nv_sqrtf.exit23:                                ; preds = %136, %138, %141, %143
  %.0.i21 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !42
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i24 = icmp eq i32 %145, 0, !dbg !42
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i27 = icmp eq i32 %146, 0, !dbg !42
  br i1 %.not.i24, label %152, label %147, !dbg !42

147:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %150, label %148, !dbg !42

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #4, !dbg !42
  br label %__nv_sqrtf.exit28, !dbg !42

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #4, !dbg !42
  br label %__nv_sqrtf.exit28, !dbg !42

152:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %155, label %153, !dbg !42

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #4, !dbg !42
  br label %__nv_sqrtf.exit28, !dbg !42

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #4, !dbg !42
  br label %__nv_sqrtf.exit28, !dbg !42

__nv_sqrtf.exit28:                                ; preds = %148, %150, %153, %155
  %.0.i26 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !42
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i29 = icmp eq i32 %157, 0, !dbg !42
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i32 = icmp eq i32 %158, 0, !dbg !42
  br i1 %.not.i29, label %164, label %159, !dbg !42

159:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %162, label %160, !dbg !42

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #4, !dbg !42
  br label %__nv_sqrtf.exit33, !dbg !42

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #4, !dbg !42
  br label %__nv_sqrtf.exit33, !dbg !42

164:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %167, label %165, !dbg !42

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #4, !dbg !42
  br label %__nv_sqrtf.exit33, !dbg !42

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #4, !dbg !42
  br label %__nv_sqrtf.exit33, !dbg !42

__nv_sqrtf.exit33:                                ; preds = %160, %162, %165, %167
  %.0.i31 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !42
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i34 = icmp eq i32 %169, 0, !dbg !42
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i37 = icmp eq i32 %170, 0, !dbg !42
  br i1 %.not.i34, label %176, label %171, !dbg !42

171:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %174, label %172, !dbg !42

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #4, !dbg !42
  br label %__nv_sqrtf.exit38, !dbg !42

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #4, !dbg !42
  br label %__nv_sqrtf.exit38, !dbg !42

176:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %179, label %177, !dbg !42

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #4, !dbg !42
  br label %__nv_sqrtf.exit38, !dbg !42

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #4, !dbg !42
  br label %__nv_sqrtf.exit38, !dbg !42

__nv_sqrtf.exit38:                                ; preds = %172, %174, %177, %179
  %.0.i36 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !42
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i39 = icmp eq i32 %181, 0, !dbg !42
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i42 = icmp eq i32 %182, 0, !dbg !42
  br i1 %.not.i39, label %188, label %183, !dbg !42

183:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %186, label %184, !dbg !42

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #4, !dbg !42
  br label %__nv_sqrtf.exit43, !dbg !42

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #4, !dbg !42
  br label %__nv_sqrtf.exit43, !dbg !42

188:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %191, label %189, !dbg !42

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #4, !dbg !42
  br label %__nv_sqrtf.exit43, !dbg !42

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #4, !dbg !42
  br label %__nv_sqrtf.exit43, !dbg !42

__nv_sqrtf.exit43:                                ; preds = %184, %186, %189, %191
  %.0.i41 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !42
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i44 = icmp eq i32 %193, 0, !dbg !42
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i47 = icmp eq i32 %194, 0, !dbg !42
  br i1 %.not.i44, label %200, label %195, !dbg !42

195:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %198, label %196, !dbg !42

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !42
  br label %__nv_sqrtf.exit48, !dbg !42

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !42
  br label %__nv_sqrtf.exit48, !dbg !42

200:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %203, label %201, !dbg !42

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !42
  br label %__nv_sqrtf.exit48, !dbg !42

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !42
  br label %__nv_sqrtf.exit48, !dbg !42

__nv_sqrtf.exit48:                                ; preds = %196, %198, %201, %203
  %.0.i46 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !42
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i49 = icmp eq i32 %205, 0, !dbg !42
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i52 = icmp eq i32 %206, 0, !dbg !42
  br i1 %.not.i49, label %212, label %207, !dbg !42

207:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %210, label %208, !dbg !42

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !42
  br label %__nv_sqrtf.exit53, !dbg !42

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !42
  br label %__nv_sqrtf.exit53, !dbg !42

212:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %215, label %213, !dbg !42

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !42
  br label %__nv_sqrtf.exit53, !dbg !42

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !42
  br label %__nv_sqrtf.exit53, !dbg !42

__nv_sqrtf.exit53:                                ; preds = %208, %210, %213, %215
  %.0.i51 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !42
  %217 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %218 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %219 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %220 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %221 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %222 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %223 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %224 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %225 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %226 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %227 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %228 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %229 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %230 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %231 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %232 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %233 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !40
  %234 = bitcast i32 %233 to float, !dbg !40
  %235 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !40
  %236 = bitcast i32 %235 to float, !dbg !40
  %237 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !40
  %238 = bitcast i32 %237 to float, !dbg !40
  %239 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !40
  %240 = bitcast i32 %239 to float, !dbg !40
  %241 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !40
  %242 = bitcast i32 %241 to float, !dbg !40
  %243 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !40
  %244 = bitcast i32 %243 to float, !dbg !40
  %245 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !40
  %246 = bitcast i32 %245 to float, !dbg !40
  %247 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !40
  %248 = bitcast i32 %247 to float, !dbg !40
  %249 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !36
  %250 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !36
  %251 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !36
  %252 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !36
  %253 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !36
  %254 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !36
  %255 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !36
  %256 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !36
  %257 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !34
  %258 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !34
  %259 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !34
  %260 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !34
  %261 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !34
  %262 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !34
  %263 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !34
  %264 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !34
  %265 = lshr i32 %14, 4, !dbg !17
  %266 = and i32 %265, 7, !dbg !17
  %267 = or disjoint i32 %266, %41, !dbg !18
  %268 = or disjoint i32 %267, 8, !dbg !18
  %269 = icmp slt i32 %268, 16, !dbg !19
  %270 = and i32 %31, 60, !dbg !12
  %271 = or disjoint i32 %13, %270, !dbg !13
  %272 = icmp slt i32 %271, 512, !dbg !14
  %273 = and i1 %272, %269, !dbg !27
  %274 = icmp slt i32 %267, 16, !dbg !19
  %275 = and i1 %272, %274, !dbg !27
  %.frozen54 = freeze i32 %271, !dbg !20
  %276 = sdiv i32 %.frozen54, 128, !dbg !20
  %277 = mul i32 %276, 128, !dbg !21
  %.decomposed55 = sub i32 %.frozen54, %277, !dbg !21
  %278 = shl i32 %268, 7, !dbg !22
  %279 = shl i32 %276, 11, !dbg !23
  %280 = add i32 %279, %.decomposed55, !dbg !24
  %281 = add i32 %280, %278, !dbg !25
  %282 = shl i32 %267, 7, !dbg !22
  %283 = add i32 %280, %282, !dbg !25
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #4, !dbg !43
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #4, !dbg !43
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #4, !dbg !43
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #4, !dbg !43
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #4, !dbg !43
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i46) #4, !dbg !43
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i51) #4, !dbg !43
  %292 = shl i32 %14, 7, !dbg !44
  %293 = and i32 %292, 896, !dbg !44
  %294 = or disjoint i32 %293, %.lobit1, !dbg !44
  %295 = or disjoint i32 %294, %42, !dbg !44
  %296 = or disjoint i32 %295, %44, !dbg !44
  %297 = or disjoint i32 %296, %46, !dbg !44
  %298 = and i32 %31, 508, !dbg !44
  %299 = lshr exact i32 %293, 4, !dbg !44
  %300 = add nuw nsw i32 %297, %299, !dbg !44
  %301 = zext nneg i32 %300 to i64, !dbg !44
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %301, !dbg !44
  %303 = xor i32 %297, 16, !dbg !44
  %304 = lshr i32 %303, 4, !dbg !44
  %305 = add nuw nsw i32 %304, %303, !dbg !44
  %306 = zext nneg i32 %305 to i64, !dbg !44
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %306, !dbg !44
  %308 = xor i32 %297, 32, !dbg !44
  %309 = lshr i32 %308, 4, !dbg !44
  %310 = add nuw nsw i32 %309, %308, !dbg !44
  %311 = zext nneg i32 %310 to i64, !dbg !44
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %311, !dbg !44
  %313 = xor i32 %297, 48, !dbg !44
  %314 = lshr i32 %313, 4, !dbg !44
  %315 = add nuw nsw i32 %314, %313, !dbg !44
  %316 = zext nneg i32 %315 to i64, !dbg !44
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %316, !dbg !44
  %318 = xor i32 %297, 64, !dbg !44
  %319 = lshr i32 %318, 4, !dbg !44
  %320 = add nuw nsw i32 %319, %318, !dbg !44
  %321 = zext nneg i32 %320 to i64, !dbg !44
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %321, !dbg !44
  %323 = xor i32 %297, 80, !dbg !44
  %324 = lshr i32 %323, 4, !dbg !44
  %325 = add nuw nsw i32 %324, %323, !dbg !44
  %326 = zext nneg i32 %325 to i64, !dbg !44
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %326, !dbg !44
  %328 = xor i32 %297, 96, !dbg !44
  %329 = lshr i32 %328, 4, !dbg !44
  %330 = add nuw nsw i32 %329, %328, !dbg !44
  %331 = zext nneg i32 %330 to i64, !dbg !44
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %331, !dbg !44
  %333 = xor i32 %297, 112, !dbg !44
  %334 = lshr i32 %333, 4, !dbg !44
  %335 = add nuw nsw i32 %334, %333, !dbg !44
  %336 = zext nneg i32 %335 to i64, !dbg !44
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %336, !dbg !44
  %338 = lshr i32 %298, 4, !dbg !44
  %339 = add nuw nsw i32 %338, %298, !dbg !44
  %340 = zext nneg i32 %339 to i64, !dbg !44
  %341 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %340, !dbg !44
  %342 = or disjoint i32 %298, 1, !dbg !44
  %343 = add nuw nsw i32 %342, %338, !dbg !44
  %344 = zext nneg i32 %343 to i64, !dbg !44
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %344, !dbg !44
  %346 = or disjoint i32 %298, 2, !dbg !44
  %347 = add nuw nsw i32 %346, %338, !dbg !44
  %348 = zext nneg i32 %347 to i64, !dbg !44
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %348, !dbg !44
  %350 = or disjoint i32 %298, 3, !dbg !44
  %351 = add nuw nsw i32 %350, %338, !dbg !44
  %352 = zext nneg i32 %351 to i64, !dbg !44
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %352, !dbg !44
  %354 = or disjoint i32 %298, 512, !dbg !44
  %355 = lshr i32 %354, 4, !dbg !44
  %356 = add nuw nsw i32 %355, %354, !dbg !44
  %357 = zext nneg i32 %356 to i64, !dbg !44
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %357, !dbg !44
  %359 = or disjoint i32 %298, 513, !dbg !44
  %360 = lshr i32 %359, 4, !dbg !44
  %361 = add nuw nsw i32 %360, %359, !dbg !44
  %362 = zext nneg i32 %361 to i64, !dbg !44
  %363 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %362, !dbg !44
  %364 = or disjoint i32 %298, 514, !dbg !44
  %365 = lshr i32 %364, 4, !dbg !44
  %366 = add nuw nsw i32 %365, %364, !dbg !44
  %367 = zext nneg i32 %366 to i64, !dbg !44
  %368 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %367, !dbg !44
  %369 = or disjoint i32 %298, 515, !dbg !44
  %370 = lshr i32 %369, 4, !dbg !44
  %371 = add nuw nsw i32 %370, %369, !dbg !44
  %372 = zext nneg i32 %371 to i64, !dbg !44
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %372, !dbg !44
  %374 = getelementptr float, ptr addrspace(1) %6, i64 %107, !dbg !48
  %375 = getelementptr float, ptr addrspace(1) %6, i64 %109, !dbg !48
  %376 = sext i32 %283 to i64, !dbg !49
  %377 = getelementptr float, ptr addrspace(1) %7, i64 %376, !dbg !49
  %378 = sext i32 %281 to i64, !dbg !49
  %379 = getelementptr float, ptr addrspace(1) %7, i64 %378, !dbg !49
  %380 = shl i32 %14, 8, !dbg !50
  %381 = and i32 %380, 768, !dbg !50
  %382 = or disjoint i32 %381, %.lobit, !dbg !50
  %383 = or disjoint i32 %382, %19, !dbg !50
  %384 = or disjoint i32 %383, %22, !dbg !50
  %385 = or disjoint i32 %384, %25, !dbg !50
  %386 = or disjoint i32 %385, %28, !dbg !50
  %387 = lshr exact i32 %381, 4, !dbg !50
  %388 = add nuw nsw i32 %386, %387, !dbg !50
  %389 = zext nneg i32 %388 to i64, !dbg !50
  %390 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %389, !dbg !50
  %391 = xor i32 %386, 64, !dbg !50
  %392 = lshr i32 %391, 4, !dbg !50
  %393 = and i32 %392, 268435452, !dbg !50
  %394 = add nuw nsw i32 %393, %391, !dbg !50
  %395 = zext nneg i32 %394 to i64, !dbg !50
  %396 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %395, !dbg !50
  %397 = xor i32 %386, 128, !dbg !50
  %398 = lshr i32 %397, 4, !dbg !50
  %399 = and i32 %398, 268435452, !dbg !50
  %400 = add nuw nsw i32 %399, %397, !dbg !50
  %401 = zext nneg i32 %400 to i64, !dbg !50
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %401, !dbg !50
  %403 = xor i32 %386, 192, !dbg !50
  %404 = lshr i32 %403, 4, !dbg !50
  %405 = and i32 %404, 268435452, !dbg !50
  %406 = add nuw nsw i32 %405, %403, !dbg !50
  %407 = zext nneg i32 %406 to i64, !dbg !50
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %407, !dbg !50
  %409 = xor i32 %386, 32, !dbg !50
  %410 = add nuw nsw i32 %409, %387, !dbg !50
  %411 = zext nneg i32 %410 to i64, !dbg !50
  %412 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %411, !dbg !50
  %413 = xor i32 %386, 96, !dbg !50
  %414 = lshr i32 %413, 4, !dbg !50
  %415 = and i32 %414, 268435452, !dbg !50
  %416 = add nuw nsw i32 %415, %413, !dbg !50
  %417 = zext nneg i32 %416 to i64, !dbg !50
  %418 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %417, !dbg !50
  %419 = xor i32 %386, 160, !dbg !50
  %420 = lshr i32 %419, 4, !dbg !50
  %421 = and i32 %420, 268435452, !dbg !50
  %422 = add nuw nsw i32 %421, %419, !dbg !50
  %423 = zext nneg i32 %422 to i64, !dbg !50
  %424 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %423, !dbg !50
  %425 = xor i32 %386, 224, !dbg !50
  %426 = lshr i32 %425, 4, !dbg !50
  %427 = and i32 %426, 268435452, !dbg !50
  %428 = add nuw nsw i32 %427, %425, !dbg !50
  %429 = zext nneg i32 %428 to i64, !dbg !50
  %430 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %429, !dbg !50
  %431 = lshr i32 %31, 4, !dbg !50
  %432 = and i32 %431, 28, !dbg !50
  %433 = add nuw nsw i32 %432, %298, !dbg !50
  %434 = zext nneg i32 %433 to i64, !dbg !50
  %435 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %434, !dbg !50
  %436 = and i32 %355, 60, !dbg !50
  %437 = add nuw nsw i32 %436, %354, !dbg !50
  %438 = zext nneg i32 %437 to i64, !dbg !50
  %439 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %438, !dbg !50
  %440 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 4, !dbg !50
  %441 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 8, !dbg !50
  %442 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 12, !dbg !50
  %443 = getelementptr i1, ptr addrspace(1) %8, i64 %60, !dbg !51
  %444 = insertelement <4 x i32> poison, i32 %231, i64 0, !dbg !28
  %445 = insertelement <4 x i32> %444, i32 %229, i64 1, !dbg !28
  %446 = insertelement <4 x i32> %445, i32 %227, i64 2, !dbg !28
  %447 = insertelement <4 x i32> %446, i32 %225, i64 3, !dbg !28
  %448 = bitcast <4 x i32> %447 to <4 x float>, !dbg !28
  %449 = insertelement <4 x i32> poison, i32 %232, i64 0, !dbg !30
  %450 = insertelement <4 x i32> %449, i32 %230, i64 1, !dbg !30
  %451 = insertelement <4 x i32> %450, i32 %228, i64 2, !dbg !30
  %452 = insertelement <4 x i32> %451, i32 %226, i64 3, !dbg !30
  %453 = bitcast <4 x i32> %452 to <4 x float>, !dbg !30
  %454 = fsub <4 x float> %448, %453, !dbg !52
  %455 = insertelement <4 x i32> poison, i32 %256, i64 0, !dbg !36
  %456 = insertelement <4 x i32> %455, i32 %255, i64 1, !dbg !36
  %457 = insertelement <4 x i32> %456, i32 %254, i64 2, !dbg !36
  %458 = insertelement <4 x i32> %457, i32 %253, i64 3, !dbg !36
  %459 = bitcast <4 x i32> %458 to <4 x float>, !dbg !36
  %460 = insertelement <4 x i32> poison, i32 %264, i64 0, !dbg !34
  %461 = insertelement <4 x i32> %460, i32 %263, i64 1, !dbg !34
  %462 = insertelement <4 x i32> %461, i32 %262, i64 2, !dbg !34
  %463 = insertelement <4 x i32> %462, i32 %261, i64 3, !dbg !34
  %464 = bitcast <4 x i32> %463 to <4 x float>, !dbg !34
  %465 = insertelement <4 x float> poison, float %284, i64 0, !dbg !53
  %466 = insertelement <4 x float> %465, float %285, i64 1, !dbg !53
  %467 = insertelement <4 x float> %466, float %286, i64 2, !dbg !53
  %468 = insertelement <4 x float> %467, float %287, i64 3, !dbg !53
  %469 = fmul <4 x float> %454, %468, !dbg !53
  %470 = fmul <4 x float> %469, %464, !dbg !54
  %471 = fadd <4 x float> %470, %459, !dbg !55
  %472 = fcmp olt <4 x float> %471, zeroinitializer, !dbg !56
  %473 = select <4 x i1> %472, <4 x float> zeroinitializer, <4 x float> %471, !dbg !44
  %474 = extractelement <4 x float> %473, i64 0, !dbg !44
  %475 = bitcast float %474 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %475, i1 true) #4, !dbg !44
  %476 = extractelement <4 x float> %473, i64 1, !dbg !44
  %477 = bitcast float %476 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %477, i1 true) #4, !dbg !44
  %478 = extractelement <4 x float> %473, i64 2, !dbg !44
  %479 = bitcast float %478 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %479, i1 true) #4, !dbg !44
  %480 = extractelement <4 x float> %473, i64 3, !dbg !44
  %481 = bitcast float %480 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %481, i1 true) #4, !dbg !44
  %482 = fcmp ole <4 x float> %473, zeroinitializer, !dbg !57
  %483 = insertelement <4 x i32> poison, i32 %223, i64 0, !dbg !28
  %484 = insertelement <4 x i32> %483, i32 %221, i64 1, !dbg !28
  %485 = insertelement <4 x i32> %484, i32 %219, i64 2, !dbg !28
  %486 = insertelement <4 x i32> %485, i32 %217, i64 3, !dbg !28
  %487 = bitcast <4 x i32> %486 to <4 x float>, !dbg !28
  %488 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !30
  %489 = insertelement <4 x i32> %488, i32 %222, i64 1, !dbg !30
  %490 = insertelement <4 x i32> %489, i32 %220, i64 2, !dbg !30
  %491 = insertelement <4 x i32> %490, i32 %218, i64 3, !dbg !30
  %492 = bitcast <4 x i32> %491 to <4 x float>, !dbg !30
  %493 = fsub <4 x float> %487, %492, !dbg !52
  %494 = insertelement <4 x i32> poison, i32 %252, i64 0, !dbg !36
  %495 = insertelement <4 x i32> %494, i32 %251, i64 1, !dbg !36
  %496 = insertelement <4 x i32> %495, i32 %250, i64 2, !dbg !36
  %497 = insertelement <4 x i32> %496, i32 %249, i64 3, !dbg !36
  %498 = bitcast <4 x i32> %497 to <4 x float>, !dbg !36
  %499 = insertelement <4 x i32> poison, i32 %260, i64 0, !dbg !34
  %500 = insertelement <4 x i32> %499, i32 %259, i64 1, !dbg !34
  %501 = insertelement <4 x i32> %500, i32 %258, i64 2, !dbg !34
  %502 = insertelement <4 x i32> %501, i32 %257, i64 3, !dbg !34
  %503 = bitcast <4 x i32> %502 to <4 x float>, !dbg !34
  %504 = insertelement <4 x float> poison, float %288, i64 0, !dbg !53
  %505 = insertelement <4 x float> %504, float %289, i64 1, !dbg !53
  %506 = insertelement <4 x float> %505, float %290, i64 2, !dbg !53
  %507 = insertelement <4 x float> %506, float %291, i64 3, !dbg !53
  %508 = fmul <4 x float> %493, %507, !dbg !53
  %509 = fmul <4 x float> %508, %503, !dbg !54
  %510 = fadd <4 x float> %509, %498, !dbg !55
  %511 = fcmp olt <4 x float> %510, zeroinitializer, !dbg !56
  %512 = select <4 x i1> %511, <4 x float> zeroinitializer, <4 x float> %510, !dbg !44
  %513 = extractelement <4 x float> %512, i64 0, !dbg !44
  %514 = bitcast float %513 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %514, i1 true) #4, !dbg !44
  %515 = extractelement <4 x float> %512, i64 1, !dbg !44
  %516 = bitcast float %515 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %516, i1 true) #4, !dbg !44
  %517 = extractelement <4 x float> %512, i64 2, !dbg !44
  %518 = bitcast float %517 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %518, i1 true) #4, !dbg !44
  %519 = extractelement <4 x float> %512, i64 3, !dbg !44
  %520 = bitcast float %519 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %520, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %521 = load float, ptr addrspace(3) %341, align 4, !dbg !44
  %522 = load float, ptr addrspace(3) %345, align 4, !dbg !44
  %523 = load float, ptr addrspace(3) %349, align 4, !dbg !44
  %524 = load float, ptr addrspace(3) %353, align 4, !dbg !44
  %525 = load float, ptr addrspace(3) %358, align 4, !dbg !44
  %526 = load float, ptr addrspace(3) %363, align 4, !dbg !44
  %527 = load float, ptr addrspace(3) %368, align 4, !dbg !44
  %528 = load float, ptr addrspace(3) %373, align 4, !dbg !44
  %529 = fadd float %521, %248, !dbg !58
  %530 = fadd float %522, %246, !dbg !58
  %531 = fadd float %523, %244, !dbg !58
  %532 = fadd float %524, %242, !dbg !58
  %533 = fadd float %525, %240, !dbg !58
  %534 = fadd float %526, %238, !dbg !58
  %535 = fadd float %527, %236, !dbg !58
  %536 = fadd float %528, %234, !dbg !58
  %537 = fcmp ole <4 x float> %512, zeroinitializer, !dbg !57
  %538 = bitcast float %521 to i32, !dbg !59
  %539 = bitcast float %522 to i32, !dbg !59
  %540 = bitcast float %523 to i32, !dbg !59
  %541 = bitcast float %524 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %538, i32 %539, i32 %540, i32 %541, ptr addrspace(1) %374, i1 %65) #4, !dbg !59
  %542 = bitcast float %525 to i32, !dbg !59
  %543 = bitcast float %526 to i32, !dbg !59
  %544 = bitcast float %527 to i32, !dbg !59
  %545 = bitcast float %528 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %542, i32 %543, i32 %544, i32 %545, ptr addrspace(1) %375, i1 %66) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %546 = bitcast float %529 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %546, i1 true) #4, !dbg !50
  %547 = bitcast float %530 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %547, i1 true) #4, !dbg !50
  %548 = bitcast float %531 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %548, i1 true) #4, !dbg !50
  %549 = bitcast float %532 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %549, i1 true) #4, !dbg !50
  %550 = bitcast float %533 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %550, i1 true) #4, !dbg !50
  %551 = bitcast float %534 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %551, i1 true) #4, !dbg !50
  %552 = bitcast float %535 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %552, i1 true) #4, !dbg !50
  %553 = bitcast float %536 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %553, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %554 = load <4 x i32>, ptr addrspace(3) %439, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %435, align 16, !dbg !50
  %.extract12 = load i32, ptr addrspace(3) %440, align 4, !dbg !50
  %.extract13 = load i32, ptr addrspace(3) %441, align 8, !dbg !50
  %.extract14 = load i32, ptr addrspace(3) %442, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %377, i1 %275) #4, !dbg !50
  %.extract15 = extractelement <4 x i32> %554, i64 0, !dbg !50
  %.extract16 = extractelement <4 x i32> %554, i64 1, !dbg !50
  %.extract17 = extractelement <4 x i32> %554, i64 2, !dbg !50
  %.extract18 = extractelement <4 x i32> %554, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %379, i1 %273) #4, !dbg !50
  %555 = zext <4 x i1> %482 to <4 x i8>, !dbg !60
  %556 = bitcast <4 x i8> %555 to i32, !dbg !60
  %557 = zext <4 x i1> %537 to <4 x i8>, !dbg !60
  %558 = bitcast <4 x i8> %557 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %556, i32 %558, ptr addrspace(1) %443, i1 %64) #4, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3wh7jwrrgf2e26oaawrjabuarzfl3bjeiohmmeb5ipye3bk55o.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 39, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 44, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 26, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 50, column: 42, scope: !7)
!48 = !DILocation(line: 54, column: 25, scope: !7)
!49 = !DILocation(line: 55, column: 25, scope: !7)
!50 = !DILocation(line: 55, column: 56, scope: !7)
!51 = !DILocation(line: 56, column: 25, scope: !7)
!52 = !DILocation(line: 38, column: 18, scope: !7)
!53 = !DILocation(line: 46, column: 19, scope: !7)
!54 = !DILocation(line: 47, column: 20, scope: !7)
!55 = !DILocation(line: 48, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!57 = !DILocation(line: 53, column: 21, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 54, column: 45, scope: !7)
!60 = !DILocation(line: 56, column: 56, scope: !7)
!61 = !DILocation(line: 56, column: 4, scope: !7)
