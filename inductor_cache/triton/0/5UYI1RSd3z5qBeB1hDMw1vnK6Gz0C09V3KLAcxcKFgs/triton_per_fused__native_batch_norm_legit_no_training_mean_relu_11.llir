; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 2048, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 512, !dbg !15
  %17 = mul i32 %16, 512, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = shl i32 %11, 6, !dbg !17
  %19 = and i32 %18, 15872, !dbg !17
  %20 = shl i32 %16, 15, !dbg !18
  %21 = add i32 %20, %.decomposed, !dbg !19
  %22 = add i32 %21, %19, !dbg !20
  %23 = add i32 %21, 16384, !dbg !19
  %24 = add nuw i32 %23, %19, !dbg !20
  %25 = sext i32 %22 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !22
  %31 = sext i32 %.decomposed to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !23
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !26
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !26
  %40 = bitcast i32 %36 to float, !dbg !26
  %41 = bitcast i32 %37 to float, !dbg !26
  %42 = bitcast i32 %38 to float, !dbg !26
  %43 = bitcast i32 %39 to float, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !27
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %15) #5, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !29
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %15) #5, !dbg !30
  %48 = fadd float %40, 0x3EE4F8B580000000, !dbg !31
  %49 = fadd float %41, 0x3EE4F8B580000000, !dbg !31
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !31
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !31
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %52, 0, !dbg !32
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i = icmp eq i32 %53, 0, !dbg !32
  br i1 %.not.i, label %59, label %54, !dbg !32

54:                                               ; preds = %8
  br i1 %.not1.i, label %57, label %55, !dbg !32

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

59:                                               ; preds = %8
  br i1 %.not1.i, label %62, label %60, !dbg !32

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %55, %57, %60, %62
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !32
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i1 = icmp eq i32 %64, 0, !dbg !32
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i4 = icmp eq i32 %65, 0, !dbg !32
  br i1 %.not.i1, label %71, label %66, !dbg !32

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !32

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !32

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %67, %69, %72, %74
  %.0.i3 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !32
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i6 = icmp eq i32 %76, 0, !dbg !32
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i9 = icmp eq i32 %77, 0, !dbg !32
  br i1 %.not.i6, label %83, label %78, !dbg !32

78:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %81, label %79, !dbg !32

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

83:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %86, label %84, !dbg !32

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %79, %81, %84, %86
  %.0.i8 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !32
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i11 = icmp eq i32 %88, 0, !dbg !32
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i14 = icmp eq i32 %89, 0, !dbg !32
  br i1 %.not.i11, label %95, label %90, !dbg !32

90:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %93, label %91, !dbg !32

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

95:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %98, label %96, !dbg !32

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %91, %93, %96, %98
  %.0.i13 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !22
  %101 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !24
  %102 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !22
  %103 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !24
  %104 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !22
  %105 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !24
  %106 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !22
  %107 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !24
  %108 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !22
  %109 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !22
  %110 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !22
  %111 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !22
  %112 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !28
  %120 = lshr i32 %11, 5, !dbg !33
  %121 = and i32 %11, 31, !dbg !12
  %122 = or disjoint i32 %10, %121, !dbg !13
  %123 = icmp slt i32 %122, 2048, !dbg !14
  %124 = and i32 %11, 24, !dbg !12
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !34
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !34
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #5, !dbg !34
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !34
  %129 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !24
  %130 = insertelement <4 x i32> %129, i32 %103, i64 1, !dbg !24
  %131 = insertelement <4 x i32> %130, i32 %105, i64 2, !dbg !24
  %132 = insertelement <4 x i32> %131, i32 %107, i64 3, !dbg !24
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !24
  %134 = shufflevector <4 x float> %133, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !24
  %135 = insertelement <8 x i32> poison, i32 %100, i64 0, !dbg !22
  %136 = insertelement <8 x i32> %135, i32 %102, i64 1, !dbg !22
  %137 = insertelement <8 x i32> %136, i32 %104, i64 2, !dbg !22
  %138 = insertelement <8 x i32> %137, i32 %106, i64 3, !dbg !22
  %139 = insertelement <8 x i32> %138, i32 %108, i64 4, !dbg !22
  %140 = insertelement <8 x i32> %139, i32 %109, i64 5, !dbg !22
  %141 = insertelement <8 x i32> %140, i32 %110, i64 6, !dbg !22
  %142 = insertelement <8 x i32> %141, i32 %111, i64 7, !dbg !22
  %143 = bitcast <8 x i32> %142 to <8 x float>, !dbg !22
  %144 = fsub <8 x float> %143, %134, !dbg !35
  %145 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !30
  %146 = insertelement <4 x i32> %145, i32 %113, i64 1, !dbg !30
  %147 = insertelement <4 x i32> %146, i32 %114, i64 2, !dbg !30
  %148 = insertelement <4 x i32> %147, i32 %115, i64 3, !dbg !30
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !30
  %150 = shufflevector <4 x float> %149, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %151 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !28
  %152 = insertelement <4 x i32> %151, i32 %117, i64 1, !dbg !28
  %153 = insertelement <4 x i32> %152, i32 %118, i64 2, !dbg !28
  %154 = insertelement <4 x i32> %153, i32 %119, i64 3, !dbg !28
  %155 = bitcast <4 x i32> %154 to <4 x float>, !dbg !28
  %156 = shufflevector <4 x float> %155, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %157 = insertelement <8 x float> poison, float %128, i64 0, !dbg !36
  %158 = insertelement <8 x float> %157, float %127, i64 1, !dbg !36
  %159 = insertelement <8 x float> %158, float %126, i64 2, !dbg !36
  %160 = insertelement <8 x float> %159, float %125, i64 3, !dbg !36
  %161 = shufflevector <8 x float> %160, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %162 = fmul <8 x float> %144, %161, !dbg !36
  %163 = fmul <8 x float> %162, %156, !dbg !37
  %164 = fadd <8 x float> %163, %150, !dbg !38
  %165 = fcmp olt <8 x float> %164, zeroinitializer, !dbg !39
  %166 = extractelement <8 x i1> %165, i64 7, !dbg !43
  %167 = extractelement <8 x float> %164, i64 7, !dbg !43
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !43
  %169 = extractelement <8 x i1> %165, i64 6, !dbg !43
  %170 = extractelement <8 x float> %164, i64 6, !dbg !43
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !43
  %172 = extractelement <8 x i1> %165, i64 5, !dbg !43
  %173 = extractelement <8 x float> %164, i64 5, !dbg !43
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !43
  %175 = extractelement <8 x i1> %165, i64 4, !dbg !43
  %176 = extractelement <8 x float> %164, i64 4, !dbg !43
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !43
  %178 = extractelement <8 x i1> %165, i64 3, !dbg !43
  %179 = extractelement <8 x float> %164, i64 3, !dbg !43
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !43
  %181 = extractelement <8 x i1> %165, i64 2, !dbg !43
  %182 = extractelement <8 x float> %164, i64 2, !dbg !43
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !43
  %184 = extractelement <8 x i1> %165, i64 1, !dbg !43
  %185 = extractelement <8 x float> %164, i64 1, !dbg !43
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !43
  %187 = extractelement <8 x i1> %165, i64 0, !dbg !43
  %188 = extractelement <8 x float> %164, i64 0, !dbg !43
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !43
  %190 = fadd float %168, %180, !dbg !44
  %191 = select i1 %15, float %190, float 0.000000e+00, !dbg !44
  %192 = fadd float %171, %183, !dbg !44
  %193 = select i1 %15, float %192, float 0.000000e+00, !dbg !44
  %194 = fadd float %174, %186, !dbg !44
  %195 = select i1 %15, float %194, float 0.000000e+00, !dbg !44
  %196 = fadd float %177, %189, !dbg !44
  %197 = select i1 %15, float %196, float 0.000000e+00, !dbg !44
  %198 = bitcast float %191 to i32, !dbg !49
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !49
  %200 = bitcast i32 %199 to float, !dbg !49
  %201 = fadd float %191, %200, !dbg !44
  %202 = bitcast float %201 to i32, !dbg !49
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 8, i32 31), !dbg !49
  %204 = bitcast i32 %203 to float, !dbg !49
  %205 = fadd float %201, %204, !dbg !44
  %206 = bitcast float %193 to i32, !dbg !49
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 16, i32 31), !dbg !49
  %208 = bitcast i32 %207 to float, !dbg !49
  %209 = fadd float %193, %208, !dbg !44
  %210 = bitcast float %209 to i32, !dbg !49
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !49
  %212 = bitcast i32 %211 to float, !dbg !49
  %213 = fadd float %209, %212, !dbg !44
  %214 = bitcast float %195 to i32, !dbg !49
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 16, i32 31), !dbg !49
  %216 = bitcast i32 %215 to float, !dbg !49
  %217 = fadd float %195, %216, !dbg !44
  %218 = bitcast float %217 to i32, !dbg !49
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 8, i32 31), !dbg !49
  %220 = bitcast i32 %219 to float, !dbg !49
  %221 = fadd float %217, %220, !dbg !44
  %222 = bitcast float %197 to i32, !dbg !49
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 16, i32 31), !dbg !49
  %224 = bitcast i32 %223 to float, !dbg !49
  %225 = fadd float %197, %224, !dbg !44
  %226 = bitcast float %225 to i32, !dbg !49
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !49
  %228 = bitcast i32 %227 to float, !dbg !49
  %229 = fadd float %225, %228, !dbg !44
  %230 = icmp eq i32 %124, 0, !dbg !49
  %231 = and i32 %120, 7, !dbg !49
  %232 = shl nuw nsw i32 %13, 3, !dbg !49
  %233 = or disjoint i32 %232, %231, !dbg !49
  %234 = zext nneg i32 %233 to i64, !dbg !49
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i64 %234, !dbg !49
  %236 = bitcast float %205 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 %230) #5, !dbg !49
  %237 = or disjoint i32 %232, 8, !dbg !49
  %238 = or disjoint i32 %237, %231, !dbg !49
  %239 = zext nneg i32 %238 to i64, !dbg !49
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i64 %239, !dbg !49
  %241 = bitcast float %213 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 %230) #5, !dbg !49
  %242 = or disjoint i32 %232, 16, !dbg !49
  %243 = or disjoint i32 %242, %231, !dbg !49
  %244 = zext nneg i32 %243 to i64, !dbg !49
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i64 %244, !dbg !49
  %246 = bitcast float %221 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 %230) #5, !dbg !49
  %247 = or disjoint i32 %232, 24, !dbg !49
  %248 = or disjoint i32 %247, %231, !dbg !49
  %249 = zext nneg i32 %248 to i64, !dbg !49
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i64 %249, !dbg !49
  %251 = bitcast float %229 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 %230) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %252 = icmp slt i32 %11, 256, !dbg !49
  %253 = sext i32 %11 to i64, !dbg !49
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !49
  %255 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %254, i1 %252) #5, !dbg !49
  %256 = bitcast i32 %255 to float, !dbg !49
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 4, i32 31), !dbg !49
  %258 = bitcast i32 %257 to float, !dbg !49
  %259 = fadd float %256, %258, !dbg !44
  %260 = bitcast float %259 to i32, !dbg !49
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 2, i32 31), !dbg !49
  %262 = bitcast i32 %261 to float, !dbg !49
  %263 = fadd float %259, %262, !dbg !44
  %264 = bitcast float %263 to i32, !dbg !49
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !49
  %266 = bitcast i32 %265 to float, !dbg !49
  %267 = fadd float %263, %266, !dbg !44
  %268 = and i32 %11, 7, !dbg !49
  %269 = icmp eq i32 %268, 0, !dbg !49
  %270 = and i1 %252, %269, !dbg !49
  %271 = bitcast float %267 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %271, i1 %270) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %272 = zext nneg i32 %232 to i64, !dbg !49
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i64 %272, !dbg !49
  %274 = load i32, ptr addrspace(3) %273, align 16, !dbg !49
  %275 = zext nneg i32 %237 to i64, !dbg !49
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i64 %275, !dbg !49
  %277 = load i32, ptr addrspace(3) %276, align 16, !dbg !49
  %278 = zext nneg i32 %242 to i64, !dbg !49
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i64 %278, !dbg !49
  %280 = load i32, ptr addrspace(3) %279, align 16, !dbg !49
  %281 = zext nneg i32 %247 to i64, !dbg !49
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i64 %281, !dbg !49
  %283 = load i32, ptr addrspace(3) %282, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %284 = zext nneg i32 %13 to i64, !dbg !50
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %284, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %285, i32 %274, i32 %277, i32 %280, i32 %283, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %286 = zext nneg i32 %121 to i64, !dbg !50
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %286, !dbg !50
  %288 = load float, ptr addrspace(3) %287, align 4, !dbg !50
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float 6.400000e+01) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %290 = sext i32 %122 to i64, !dbg !52
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %290, !dbg !52
  %292 = icmp eq i32 %231, 0, !dbg !53
  %293 = bitcast float %289 to i32, !dbg !53
  %294 = and i1 %292, %123, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %293, ptr addrspace(1) %291, i1 %294) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cll2tnzj2i5ilgngilq7b34arjoqtwlcsj5bx47p7sjadu3dk5sb.py", directory: "inductor_cache/ll")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_11", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 50, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 55, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 26, scope: !7)
!33 = !DILocation(line: 26, column: 34, scope: !7)
!34 = !DILocation(line: 43, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 50, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !48)
!45 = distinct !DILexicalBlockFile(scope: !47, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!48 = !DILocation(line: 53, column: 26, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !48)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 4, scope: !7)
!52 = !DILocation(line: 57, column: 28, scope: !7)
!53 = !DILocation(line: 57, column: 40, scope: !7)
!54 = !DILocation(line: 57, column: 4, scope: !7)
