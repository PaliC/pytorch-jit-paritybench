; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_relu_threshold_backward_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 9216, !dbg !14
  %15 = sdiv i32 %13, 36, !dbg !15
  %16 = srem i32 %15, 64, !dbg !16
  %17 = sext i32 %13 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %14) #1, !dbg !18
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !18
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !18
  %22 = sext i32 %16 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %14) #1, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %14) #1, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !21
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %14) #1, !dbg !22
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !22
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %14) #1, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %14) #1, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !25
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %14) #1, !dbg !26
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !26
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !26
  %37 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !18
  %38 = insertelement <2 x i32> %37, i32 %28, i64 1, !dbg !18
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !18
  %40 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !20
  %41 = insertelement <2 x i32> %40, i32 %31, i64 1, !dbg !20
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !20
  %43 = fadd <2 x float> %39, %42, !dbg !27
  %44 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %45 = insertelement <2 x i32> %44, i32 %29, i64 1, !dbg !18
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !18
  %47 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !20
  %48 = insertelement <2 x i32> %47, i32 %32, i64 1, !dbg !20
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !20
  %50 = fadd <2 x float> %46, %49, !dbg !27
  %51 = getelementptr i1, ptr addrspace(1) %5, i64 %17, !dbg !28
  %52 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !26
  %53 = insertelement <2 x i32> %52, i32 %36, i64 1, !dbg !26
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !26
  %55 = shufflevector <2 x float> %43, <2 x float> %50, <2 x i32> <i32 1, i32 3>, !dbg !29
  %56 = fadd <2 x float> %55, %54, !dbg !29
  %57 = shufflevector <2 x float> %43, <2 x float> %50, <2 x i32> <i32 0, i32 2>, !dbg !30
  %58 = fadd <2 x float> %57, %56, !dbg !30
  %59 = fcmp olt <2 x float> %58, zeroinitializer, !dbg !31
  %60 = select <2 x i1> %59, <2 x float> zeroinitializer, <2 x float> %58, !dbg !35
  %61 = fcmp ole <2 x float> %60, zeroinitializer, !dbg !36
  %bc = bitcast <2 x float> %60 to <2 x i32>, !dbg !37
  %62 = extractelement <2 x i32> %bc, i64 0, !dbg !37
  %bc1 = bitcast <2 x float> %60 to <2 x i32>, !dbg !37
  %63 = extractelement <2 x i32> %bc1, i64 1, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %62, i32 %63, ptr addrspace(1) %18, i1 %14) #1, !dbg !37
  %64 = zext <2 x i1> %61 to <2 x i8>, !dbg !38
  %65 = bitcast <2 x i8> %64 to i16, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %65, ptr addrspace(1) %51, i1 %14) #1, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6aixe57mn2ajgfbfzn7a5enc32gzzodqe2hgruspmrgsrbiuj4l.py", directory: "inductor_cache/6a")
!4 = !{ptr @triton_poi_fused_add_convolution_relu_threshold_backward_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_relu_threshold_backward_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_relu_threshold_backward_3", linkageName: "triton_poi_fused_add_convolution_relu_threshold_backward_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 36, column: 41, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 38, column: 21, scope: !7)
!37 = !DILocation(line: 39, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 37, scope: !7)
!39 = !DILocation(line: 40, column: 4, scope: !7)
