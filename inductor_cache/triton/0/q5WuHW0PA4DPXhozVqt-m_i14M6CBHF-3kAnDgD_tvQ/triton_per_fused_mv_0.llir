; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 48, !dbg !14
  %16 = icmp slt i32 %14, 48, !dbg !14
  %17 = lshr i32 %8, 5, !dbg !15
  %18 = lshr i32 %8, 3, !dbg !15
  %19 = and i32 %18, 31, !dbg !15
  %20 = or disjoint i32 %19, 32, !dbg !15
  %21 = mul nuw nsw i32 %19, 48, !dbg !16
  %22 = mul nuw nsw i32 %20, 48, !dbg !16
  %23 = add i32 %13, %21, !dbg !17
  %24 = add i32 %13, %22, !dbg !17
  %25 = sext i32 %23 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = sext i32 %24 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = bitcast i32 %32 to float, !dbg !19
  %37 = bitcast i32 %33 to float, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = bitcast i32 %41 to float, !dbg !19
  %46 = bitcast i32 %42 to float, !dbg !19
  %47 = zext nneg i32 %19 to i64, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !20
  %49 = zext nneg i32 %20 to i64, !dbg !20
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !21
  %55 = bitcast i32 %54 to float, !dbg !21
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !21
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !21
  %60 = bitcast i32 %59 to float, !dbg !21
  %61 = fmul float %34, %55, !dbg !22
  %62 = fmul float %35, %55, !dbg !22
  %63 = fmul float %36, %55, !dbg !22
  %64 = fmul float %37, %55, !dbg !22
  %65 = fmul float %43, %60, !dbg !22
  %66 = fmul float %44, %60, !dbg !22
  %67 = fmul float %45, %60, !dbg !22
  %68 = fmul float %46, %60, !dbg !22
  %69 = fadd float %61, %65, !dbg !23
  %70 = select i1 %15, float %69, float 0.000000e+00, !dbg !23
  %71 = fadd float %62, %66, !dbg !23
  %72 = select i1 %15, float %71, float 0.000000e+00, !dbg !23
  %73 = fadd float %63, %67, !dbg !23
  %74 = select i1 %15, float %73, float 0.000000e+00, !dbg !23
  %75 = fadd float %64, %68, !dbg !23
  %76 = select i1 %15, float %75, float 0.000000e+00, !dbg !23
  %77 = bitcast float %70 to i32, !dbg !28
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = fadd float %70, %79, !dbg !23
  %81 = bitcast float %80 to i32, !dbg !28
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !28
  %83 = bitcast i32 %82 to float, !dbg !28
  %84 = fadd float %80, %83, !dbg !23
  %85 = bitcast float %72 to i32, !dbg !28
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 16, i32 31), !dbg !28
  %87 = bitcast i32 %86 to float, !dbg !28
  %88 = fadd float %72, %87, !dbg !23
  %89 = bitcast float %88 to i32, !dbg !28
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 8, i32 31), !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = fadd float %88, %91, !dbg !23
  %93 = bitcast float %74 to i32, !dbg !28
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !28
  %95 = bitcast i32 %94 to float, !dbg !28
  %96 = fadd float %74, %95, !dbg !23
  %97 = bitcast float %96 to i32, !dbg !28
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = fadd float %96, %99, !dbg !23
  %101 = bitcast float %76 to i32, !dbg !28
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 16, i32 31), !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = fadd float %76, %103, !dbg !23
  %105 = bitcast float %104 to i32, !dbg !28
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 8, i32 31), !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = fadd float %104, %107, !dbg !23
  %109 = icmp eq i32 %9, 0, !dbg !28
  %110 = and i32 %17, 7, !dbg !28
  %111 = shl nuw nsw i32 %11, 3, !dbg !28
  %112 = or disjoint i32 %111, %110, !dbg !28
  %113 = zext nneg i32 %112 to i64, !dbg !28
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i64 %113, !dbg !28
  %115 = bitcast float %84 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %109) #3, !dbg !28
  %116 = or disjoint i32 %111, 8, !dbg !28
  %117 = or disjoint i32 %116, %110, !dbg !28
  %118 = zext nneg i32 %117 to i64, !dbg !28
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i64 %118, !dbg !28
  %120 = bitcast float %92 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 %109) #3, !dbg !28
  %121 = or disjoint i32 %111, 16, !dbg !28
  %122 = or disjoint i32 %121, %110, !dbg !28
  %123 = zext nneg i32 %122 to i64, !dbg !28
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i64 %123, !dbg !28
  %125 = bitcast float %100 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 %109) #3, !dbg !28
  %126 = or disjoint i32 %111, 24, !dbg !28
  %127 = or disjoint i32 %126, %110, !dbg !28
  %128 = zext nneg i32 %127 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !28
  %130 = bitcast float %108 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 %109) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %131 = icmp slt i32 %8, 256, !dbg !28
  %132 = sext i32 %8 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i64 %132, !dbg !28
  %134 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %133, i1 %131) #3, !dbg !28
  %135 = bitcast i32 %134 to float, !dbg !28
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !28
  %137 = bitcast i32 %136 to float, !dbg !28
  %138 = fadd float %135, %137, !dbg !23
  %139 = bitcast float %138 to i32, !dbg !28
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !28
  %141 = bitcast i32 %140 to float, !dbg !28
  %142 = fadd float %138, %141, !dbg !23
  %143 = bitcast float %142 to i32, !dbg !28
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !28
  %145 = bitcast i32 %144 to float, !dbg !28
  %146 = fadd float %142, %145, !dbg !23
  %147 = and i32 %8, 7, !dbg !28
  %148 = icmp eq i32 %147, 0, !dbg !28
  %149 = and i1 %131, %148, !dbg !28
  %150 = bitcast float %146 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %150, i1 %149) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %151 = zext nneg i32 %111 to i64, !dbg !28
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i64 %151, !dbg !28
  %153 = load i32, ptr addrspace(3) %152, align 16, !dbg !28
  %154 = zext nneg i32 %116 to i64, !dbg !28
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i64 %154, !dbg !28
  %156 = load i32, ptr addrspace(3) %155, align 16, !dbg !28
  %157 = zext nneg i32 %121 to i64, !dbg !28
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i64 %157, !dbg !28
  %159 = load i32, ptr addrspace(3) %158, align 16, !dbg !28
  %160 = zext nneg i32 %126 to i64, !dbg !28
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i64 %160, !dbg !28
  %162 = load i32, ptr addrspace(3) %161, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %163 = zext nneg i32 %11 to i64, !dbg !29
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %163, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %164, i32 %153, i32 %156, i32 %159, i32 %162, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %165 = zext nneg i32 %12 to i64, !dbg !29
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !29
  %167 = load i32, ptr addrspace(3) %166, align 4, !dbg !29
  %168 = sext i32 %14 to i64, !dbg !30
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !30
  %170 = icmp eq i32 %110, 0, !dbg !31
  %171 = and i1 %170, %16, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %169, i1 %171) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c44dxcxm3ws4vhjk4j5c3khip3vnhch3vxdvpahk7njs63z2q2s3.py", directory: "inductor_cache/44")
!4 = !{ptr @triton_per_fused_mv_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_0", linkageName: "triton_per_fused_mv_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 36, column: 27, scope: !7)
!30 = !DILocation(line: 37, column: 25, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 4, scope: !7)
