; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_13(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 768, !dbg !14
  %12 = sdiv i32 %9, 8, !dbg !15
  %13 = srem i32 %10, 8, !dbg !16
  %14 = shl nsw i32 %13, 1, !dbg !17
  %15 = icmp sgt i32 %13, 0, !dbg !18
  %16 = shl i32 %12, 5, !dbg !19
  %17 = add i32 %16, %14, !dbg !20
  %18 = add i32 %17, -17, !dbg !21
  %19 = sext i32 %18 to i64, !dbg !22
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !22
  %21 = icmp sgt i32 %13, -1, !dbg !23
  %22 = add i32 %17, -16, !dbg !24
  %23 = sext i32 %22 to i64, !dbg !25
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !25
  %25 = add i32 %17, -15, !dbg !26
  %26 = sext i32 %25 to i64, !dbg !27
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !27
  %28 = sext i32 %17 to i64, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !28
  %30 = getelementptr i8, ptr addrspace(1) %29, i64 -4, !dbg !28
  %31 = or disjoint i32 %17, 1, !dbg !29
  %32 = sext i32 %31 to i64, !dbg !30
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !30
  %34 = add i32 %17, 15, !dbg !31
  %35 = sext i32 %34 to i64, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !32
  %37 = add i32 %17, 16, !dbg !33
  %38 = sext i32 %37 to i64, !dbg !34
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !34
  %40 = add i32 %17, 17, !dbg !35
  %41 = sext i32 %40 to i64, !dbg !36
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !36
  %43 = mul nsw i32 %13, -2, !dbg !37
  %44 = add nsw i32 %14, 2, !dbg !38
  %45 = shl nsw i32 %13, 2, !dbg !39
  %46 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %47 = insertelement <2 x i32> %46, i32 %12, i64 1, !dbg !16
  %48 = srem <2 x i32> %47, splat (i32 8), !dbg !16
  %49 = extractelement <2 x i32> %48, i64 1, !dbg !40
  %50 = shl nsw i32 %49, 1, !dbg !41
  %51 = icmp sgt i32 %49, 0, !dbg !42
  %52 = extractelement <2 x i32> %48, i64 0, !dbg !39
  %53 = shl nsw i32 %52, 1, !dbg !17
  %54 = icmp sgt i32 %52, 0, !dbg !18
  %55 = and i1 %54, %51, !dbg !43
  %56 = and i1 %15, %51, !dbg !43
  %57 = add i32 %16, %53, !dbg !20
  %58 = add i32 %57, -17, !dbg !21
  %59 = sext i32 %58 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = and i1 %11, %55, !dbg !44
  %62 = and i1 %11, %56, !dbg !44
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61) #1, !dbg !45
  %64 = bitcast i32 %63 to float, !dbg !45
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %62, i32 0, i1 %62) #1, !dbg !45
  %66 = bitcast i32 %65 to float, !dbg !45
  %67 = icmp sgt i32 %52, -1, !dbg !23
  %68 = and i1 %67, %51, !dbg !46
  %69 = and i1 %21, %51, !dbg !46
  %70 = add i32 %57, -16, !dbg !24
  %71 = sext i32 %70 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = and i1 %11, %68, !dbg !47
  %74 = and i1 %11, %69, !dbg !47
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 0, i1 %73) #1, !dbg !48
  %76 = bitcast i32 %75 to float, !dbg !48
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %74, i32 0, i1 %74) #1, !dbg !48
  %78 = bitcast i32 %77 to float, !dbg !48
  %79 = fadd float %64, %76, !dbg !49
  %80 = fadd float %66, %78, !dbg !49
  %81 = add i32 %57, -15, !dbg !26
  %82 = sext i32 %81 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %73, i32 0, i1 %73) #1, !dbg !50
  %85 = bitcast i32 %84 to float, !dbg !50
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %74, i32 0, i1 %74) #1, !dbg !50
  %87 = bitcast i32 %86 to float, !dbg !50
  %88 = fadd float %79, %85, !dbg !51
  %89 = fadd float %80, %87, !dbg !51
  %90 = icmp sgt i32 %49, -1, !dbg !52
  %91 = and i1 %54, %90, !dbg !53
  %92 = and i1 %15, %90, !dbg !53
  %93 = add i32 %57, -1, !dbg !54
  %94 = sext i32 %93 to i64, !dbg !28
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !28
  %96 = and i1 %11, %91, !dbg !55
  %97 = and i1 %11, %92, !dbg !55
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 0, i1 %96) #1, !dbg !56
  %99 = bitcast i32 %98 to float, !dbg !56
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %97, i32 0, i1 %97) #1, !dbg !56
  %101 = bitcast i32 %100 to float, !dbg !56
  %102 = fadd float %88, %99, !dbg !57
  %103 = fadd float %89, %101, !dbg !57
  %104 = or i32 %49, %52, !dbg !40
  %105 = icmp sgt i32 %104, -1, !dbg !40
  %106 = or i32 %49, %13, !dbg !40
  %107 = icmp sgt i32 %106, -1, !dbg !40
  %108 = sext i32 %57 to i64, !dbg !58
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !58
  %110 = and i1 %11, %105, !dbg !59
  %111 = and i1 %11, %107, !dbg !59
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %110, i32 0, i1 %110) #1, !dbg !60
  %113 = bitcast i32 %112 to float, !dbg !60
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %111, i32 0, i1 %111) #1, !dbg !60
  %115 = bitcast i32 %114 to float, !dbg !60
  %116 = fadd float %102, %113, !dbg !61
  %117 = fadd float %103, %115, !dbg !61
  %118 = or disjoint i32 %57, 1, !dbg !29
  %119 = sext i32 %118 to i64, !dbg !30
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !30
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %110, i32 0, i1 %110) #1, !dbg !62
  %122 = bitcast i32 %121 to float, !dbg !62
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %111, i32 0, i1 %111) #1, !dbg !62
  %124 = bitcast i32 %123 to float, !dbg !62
  %125 = fadd float %116, %122, !dbg !63
  %126 = fadd float %117, %124, !dbg !63
  %127 = add i32 %57, 15, !dbg !31
  %128 = sext i32 %127 to i64, !dbg !32
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !32
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %96, i32 0, i1 %96) #1, !dbg !64
  %131 = bitcast i32 %130 to float, !dbg !64
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %97, i32 0, i1 %97) #1, !dbg !64
  %133 = bitcast i32 %132 to float, !dbg !64
  %134 = fadd float %125, %131, !dbg !65
  %135 = fadd float %126, %133, !dbg !65
  %136 = add i32 %57, 16, !dbg !33
  %137 = sext i32 %136 to i64, !dbg !34
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !34
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %110, i32 0, i1 %110) #1, !dbg !66
  %140 = bitcast i32 %139 to float, !dbg !66
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %111, i32 0, i1 %111) #1, !dbg !66
  %142 = bitcast i32 %141 to float, !dbg !66
  %143 = fadd float %134, %140, !dbg !67
  %144 = fadd float %135, %142, !dbg !67
  %145 = add i32 %57, 17, !dbg !35
  %146 = sext i32 %145 to i64, !dbg !36
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !36
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %110, i32 0, i1 %110) #1, !dbg !68
  %149 = bitcast i32 %148 to float, !dbg !68
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %111, i32 0, i1 %111) #1, !dbg !68
  %151 = bitcast i32 %150 to float, !dbg !68
  %152 = fadd float %143, %149, !dbg !69
  %153 = fadd float %144, %151, !dbg !69
  %154 = mul nsw i32 %49, -2, !dbg !70
  %155 = or disjoint i32 %53, 2, !dbg !38
  %156 = add nsw i32 %50, 2, !dbg !71
  %157 = mul nsw i32 %154, %155, !dbg !72
  %158 = mul nsw i32 %154, %44, !dbg !72
  %159 = shl nsw i32 %52, 2, !dbg !39
  %160 = insertelement <2 x i32> <i32 -2, i32 poison>, i32 %159, i64 1, !dbg !37
  %161 = mul nsw <2 x i32> %160, %48, !dbg !37
  %162 = mul nsw i32 %45, %49, !dbg !73
  %163 = extractelement <2 x i32> %161, i64 0, !dbg !74
  %reass.add = add nsw i32 %155, %163
  %reass.mul = mul nsw i32 %reass.add, %156
  %164 = add nsw i32 %156, %154, !dbg !75
  %165 = or disjoint i32 %164, 1, !dbg !76
  %166 = add nsw i32 %165, %163, !dbg !74
  %167 = extractelement <2 x i32> %161, i64 1, !dbg !77
  %168 = add nsw i32 %166, %167, !dbg !77
  %169 = add i32 %168, %155, !dbg !78
  %170 = add i32 %169, %157, !dbg !79
  %171 = add i32 %170, %reass.mul, !dbg !80
  %reass.add1 = add nsw i32 %44, %43
  %reass.mul2 = mul nsw i32 %156, %reass.add1
  %172 = add nsw i32 %165, %43, !dbg !74
  %173 = add nsw i32 %172, %44, !dbg !77
  %174 = add i32 %173, %162, !dbg !78
  %175 = add i32 %174, %158, !dbg !79
  %176 = add i32 %175, %reass.mul2, !dbg !80
  %177 = sitofp i32 %171 to float, !dbg !81
  %178 = sitofp i32 %176 to float, !dbg !81
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %177) #1, !dbg !81
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %178) #1, !dbg !81
  %181 = sext i32 %9 to i64, !dbg !82
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !82
  %183 = bitcast float %179 to i32, !dbg !83
  %184 = bitcast float %180 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %183, i32 %184, ptr addrspace(1) %182, i1 %11) #1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckq2dyvm2uxn6dzzbz5q3d6dy62hgdmbquqts4ni6purwcyjsj2i.py", directory: "inductor_cache/kq")
!4 = !{ptr @triton_poi_fused_avg_pool2d_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_13", linkageName: "triton_poi_fused_avg_pool2d_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 20, scope: !7)
!18 = !DILocation(line: 35, column: 19, scope: !7)
!19 = !DILocation(line: 39, column: 49, scope: !7)
!20 = !DILocation(line: 39, column: 39, scope: !7)
!21 = !DILocation(line: 39, column: 46, scope: !7)
!22 = !DILocation(line: 39, column: 31, scope: !7)
!23 = !DILocation(line: 41, column: 21, scope: !7)
!24 = !DILocation(line: 45, column: 46, scope: !7)
!25 = !DILocation(line: 45, column: 31, scope: !7)
!26 = !DILocation(line: 52, column: 46, scope: !7)
!27 = !DILocation(line: 52, column: 31, scope: !7)
!28 = !DILocation(line: 59, column: 31, scope: !7)
!29 = !DILocation(line: 65, column: 42, scope: !7)
!30 = !DILocation(line: 65, column: 31, scope: !7)
!31 = !DILocation(line: 72, column: 43, scope: !7)
!32 = !DILocation(line: 72, column: 31, scope: !7)
!33 = !DILocation(line: 75, column: 43, scope: !7)
!34 = !DILocation(line: 75, column: 31, scope: !7)
!35 = !DILocation(line: 78, column: 43, scope: !7)
!36 = !DILocation(line: 78, column: 31, scope: !7)
!37 = !DILocation(line: 80, column: 22, scope: !7)
!38 = !DILocation(line: 80, column: 62, scope: !7)
!39 = !DILocation(line: 80, column: 328, scope: !7)
!40 = !DILocation(line: 61, column: 20, scope: !7)
!41 = !DILocation(line: 28, column: 20, scope: !7)
!42 = !DILocation(line: 30, column: 19, scope: !7)
!43 = !DILocation(line: 38, column: 19, scope: !7)
!44 = !DILocation(line: 39, column: 62, scope: !7)
!45 = !DILocation(line: 39, column: 54, scope: !7)
!46 = !DILocation(line: 44, column: 19, scope: !7)
!47 = !DILocation(line: 45, column: 62, scope: !7)
!48 = !DILocation(line: 45, column: 54, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 54, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 21, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 45, scope: !7)
!55 = !DILocation(line: 59, column: 61, scope: !7)
!56 = !DILocation(line: 59, column: 53, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 31, scope: !7)
!59 = !DILocation(line: 62, column: 54, scope: !7)
!60 = !DILocation(line: 62, column: 46, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 50, scope: !7)
!63 = !DILocation(line: 66, column: 20, scope: !7)
!64 = !DILocation(line: 72, column: 51, scope: !7)
!65 = !DILocation(line: 73, column: 20, scope: !7)
!66 = !DILocation(line: 75, column: 51, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 78, column: 51, scope: !7)
!69 = !DILocation(line: 79, column: 20, scope: !7)
!70 = !DILocation(line: 80, column: 34, scope: !7)
!71 = !DILocation(line: 80, column: 127, scope: !7)
!72 = !DILocation(line: 80, column: 259, scope: !7)
!73 = !DILocation(line: 80, column: 331, scope: !7)
!74 = !DILocation(line: 80, column: 173, scope: !7)
!75 = !DILocation(line: 80, column: 29, scope: !7)
!76 = !DILocation(line: 80, column: 40, scope: !7)
!77 = !DILocation(line: 80, column: 250, scope: !7)
!78 = !DILocation(line: 80, column: 326, scope: !7)
!79 = !DILocation(line: 80, column: 337, scope: !7)
!80 = !DILocation(line: 80, column: 404, scope: !7)
!81 = !DILocation(line: 81, column: 20, scope: !7)
!82 = !DILocation(line: 82, column: 25, scope: !7)
!83 = !DILocation(line: 82, column: 37, scope: !7)
!84 = !DILocation(line: 82, column: 4, scope: !7)
