; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = and i32 %8, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 2, !dbg !15
  %21 = lshr i32 %8, 6, !dbg !16
  %.lobit = and i32 %21, 1, !dbg !16
  %22 = or disjoint i32 %20, %.lobit, !dbg !17
  %23 = or disjoint i32 %22, 2, !dbg !17
  %24 = icmp slt i32 %22, 4, !dbg !18
  %25 = icmp slt i32 %23, 4, !dbg !18
  %26 = icmp slt i32 %20, 4, !dbg !18
  %27 = srem i32 %16, 4, !dbg !19
  %28 = add i32 %22, %15, !dbg !20
  %29 = shl i32 %28, 2, !dbg !20
  %30 = add i32 %15, %23, !dbg !20
  %31 = shl i32 %30, 2, !dbg !20
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = sext i32 %31 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %24) #2, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %25) #2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %46 = shl i32 %8, 4, !dbg !22
  %47 = and i32 %46, 1008, !dbg !22
  %48 = or disjoint i32 %47, %.lobit, !dbg !22
  %49 = and i32 %9, 508, !dbg !22
  %50 = lshr exact i32 %47, 2, !dbg !22
  %51 = add nuw nsw i32 %50, %48, !dbg !22
  %52 = zext nneg i32 %51 to i64, !dbg !22
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52, !dbg !22
  %54 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #2, !dbg !22
  %55 = or disjoint i32 %48, 4, !dbg !22
  %56 = lshr i32 %55, 2, !dbg !22
  %57 = add nuw nsw i32 %56, %55, !dbg !22
  %58 = zext nneg i32 %57 to i64, !dbg !22
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %58, !dbg !22
  %60 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !22
  %61 = or disjoint i32 %48, 8, !dbg !22
  %62 = lshr i32 %61, 2, !dbg !22
  %63 = add nuw nsw i32 %62, %61, !dbg !22
  %64 = zext nneg i32 %63 to i64, !dbg !22
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %64, !dbg !22
  %66 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !22
  %67 = or disjoint i32 %48, 12, !dbg !22
  %68 = lshr i32 %67, 2, !dbg !22
  %69 = add nuw nsw i32 %68, %67, !dbg !22
  %70 = zext nneg i32 %69 to i64, !dbg !22
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %70, !dbg !22
  %72 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !22
  %73 = or disjoint i32 %48, 2, !dbg !22
  %74 = add nuw nsw i32 %73, %50, !dbg !22
  %75 = zext nneg i32 %74 to i64, !dbg !22
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %75, !dbg !22
  %77 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !22
  %78 = or disjoint i32 %48, 6, !dbg !22
  %79 = lshr i32 %78, 2, !dbg !22
  %80 = add nuw nsw i32 %79, %78, !dbg !22
  %81 = zext nneg i32 %80 to i64, !dbg !22
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %81, !dbg !22
  %83 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !22
  %84 = or disjoint i32 %48, 10, !dbg !22
  %85 = lshr i32 %84, 2, !dbg !22
  %86 = add nuw nsw i32 %85, %84, !dbg !22
  %87 = zext nneg i32 %86 to i64, !dbg !22
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %87, !dbg !22
  %89 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !22
  %90 = or disjoint i32 %48, 14, !dbg !22
  %91 = lshr i32 %90, 2, !dbg !22
  %92 = add nuw nsw i32 %91, %90, !dbg !22
  %93 = zext nneg i32 %92 to i64, !dbg !22
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !22
  %95 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %96 = lshr exact i32 %49, 2, !dbg !22
  %97 = add nuw nsw i32 %96, %49, !dbg !22
  %98 = zext nneg i32 %97 to i64, !dbg !22
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %98, !dbg !22
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !22
  %101 = or disjoint i32 %49, 1, !dbg !22
  %102 = add nuw nsw i32 %101, %96, !dbg !22
  %103 = zext nneg i32 %102 to i64, !dbg !22
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !22
  %105 = load float, ptr addrspace(3) %104, align 4, !dbg !22
  %106 = or disjoint i32 %49, 2, !dbg !22
  %107 = add nuw nsw i32 %106, %96, !dbg !22
  %108 = zext nneg i32 %107 to i64, !dbg !22
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %108, !dbg !22
  %110 = load float, ptr addrspace(3) %109, align 4, !dbg !22
  %111 = or disjoint i32 %49, 3, !dbg !22
  %112 = add nuw nsw i32 %111, %96, !dbg !22
  %113 = zext nneg i32 %112 to i64, !dbg !22
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !22
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !22
  %116 = or disjoint i32 %49, 512, !dbg !22
  %117 = lshr exact i32 %116, 2, !dbg !22
  %118 = add nuw nsw i32 %117, %116, !dbg !22
  %119 = zext nneg i32 %118 to i64, !dbg !22
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !22
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !22
  %122 = or disjoint i32 %49, 513, !dbg !22
  %123 = lshr i32 %122, 2, !dbg !22
  %124 = add nuw nsw i32 %123, %122, !dbg !22
  %125 = zext nneg i32 %124 to i64, !dbg !22
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !22
  %127 = load float, ptr addrspace(3) %126, align 4, !dbg !22
  %128 = or disjoint i32 %49, 514, !dbg !22
  %129 = lshr i32 %128, 2, !dbg !22
  %130 = add nuw nsw i32 %129, %128, !dbg !22
  %131 = zext nneg i32 %130 to i64, !dbg !22
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %131, !dbg !22
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !22
  %134 = or disjoint i32 %49, 515, !dbg !22
  %135 = lshr i32 %134, 2, !dbg !22
  %136 = add nuw nsw i32 %135, %134, !dbg !22
  %137 = zext nneg i32 %136 to i64, !dbg !22
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %137, !dbg !22
  %139 = load float, ptr addrspace(3) %138, align 4, !dbg !22
  %140 = sext i32 %27 to i64, !dbg !23
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !23
  %142 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %141, i1 true) #2, !dbg !24
  %143 = extractvalue { i32, i32 } %142, 0, !dbg !24
  %144 = extractvalue { i32, i32 } %142, 1, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %145 = shl nuw nsw i32 %12, 1, !dbg !25
  %146 = zext nneg i32 %145 to i64, !dbg !25
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !25
  %148 = insertelement <1 x i32> poison, i32 %143, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !25
  %149 = or disjoint i32 %145, 2, !dbg !25
  %150 = zext nneg i32 %149 to i64, !dbg !25
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !25
  %152 = insertelement <1 x i32> poison, i32 %144, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %153 = shl nuw nsw i32 %13, 1, !dbg !25
  %154 = zext nneg i32 %153 to i64, !dbg !25
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %154, !dbg !25
  %156 = load float, ptr addrspace(3) %155, align 8, !dbg !25
  %157 = shl nuw nsw i32 %14, 1, !dbg !25
  %158 = zext nneg i32 %157 to i64, !dbg !25
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !25
  %160 = load float, ptr addrspace(3) %159, align 8, !dbg !25
  %161 = fadd float %100, %156, !dbg !25
  %162 = fadd float %105, %156, !dbg !25
  %163 = fadd float %110, %156, !dbg !25
  %164 = fadd float %115, %156, !dbg !25
  %165 = fadd float %121, %160, !dbg !25
  %166 = fadd float %127, %160, !dbg !25
  %167 = fadd float %133, %160, !dbg !25
  %168 = fadd float %139, %160, !dbg !25
  %169 = add i32 %17, %19, !dbg !26
  %170 = shl i32 %169, 2, !dbg !26
  %171 = add i32 %18, %19, !dbg !26
  %172 = shl i32 %171, 2, !dbg !26
  %173 = sext i32 %170 to i64, !dbg !27
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !27
  %175 = sext i32 %172 to i64, !dbg !27
  %176 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !27
  %177 = bitcast float %161 to i32, !dbg !28
  %178 = bitcast float %162 to i32, !dbg !28
  %179 = bitcast float %163 to i32, !dbg !28
  %180 = bitcast float %164 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %178, i32 %179, i32 %180, ptr addrspace(1) %174, i1 %26) #2, !dbg !28
  %181 = bitcast float %165 to i32, !dbg !28
  %182 = bitcast float %166 to i32, !dbg !28
  %183 = bitcast float %167 to i32, !dbg !28
  %184 = bitcast float %168 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %176, i1 %26) #2, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp3cr4li5drh2nlcjy245o6k25sjybkxwpql7xxlaniigi3mdy53.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_poi_fused_clone_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_0", linkageName: "triton_poi_fused_clone_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 42, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 25, scope: !7)
!28 = !DILocation(line: 35, column: 43, scope: !7)
!29 = !DILocation(line: 35, column: 4, scope: !7)
