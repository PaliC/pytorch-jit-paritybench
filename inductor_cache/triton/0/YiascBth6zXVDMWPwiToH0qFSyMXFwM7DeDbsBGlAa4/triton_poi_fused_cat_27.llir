; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %.frozen46 = freeze i32 %14, !dbg !14
  %16 = sdiv i32 %.frozen46, 1024, !dbg !14
  %.frozen45 = freeze i32 %15, !dbg !14
  %17 = sdiv i32 %.frozen45, 1024, !dbg !14
  %18 = srem i32 %16, 39, !dbg !15
  %19 = srem i32 %17, 39, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %20 = sdiv i32 %.frozen, 39936, !dbg !16
  %.frozen44 = freeze i32 %15, !dbg !16
  %21 = sdiv i32 %.frozen44, 39936, !dbg !16
  %22 = icmp slt i32 %18, 20, !dbg !17
  %23 = icmp slt i32 %19, 20, !dbg !17
  %24 = mul i32 %20, 39936, !dbg !18
  %srem.decomposed = sub i32 %.frozen, %24, !dbg !18
  %25 = mul i32 %21, 39936, !dbg !18
  %srem1.decomposed = sub i32 %.frozen44, %25, !dbg !18
  %26 = mul nsw i32 %20, 20480, !dbg !19
  %27 = mul nsw i32 %21, 20480, !dbg !19
  %28 = add nsw i32 %26, %srem.decomposed, !dbg !20
  %29 = add nsw i32 %27, %srem1.decomposed, !dbg !20
  %30 = sext i32 %28 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !22
  %36 = sext i32 %18 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !23
  %38 = sext i32 %19 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %23, i32 0, i1 %23) #3, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %23, i32 0, i1 %23) #3, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %23, i32 0, i1 %23) #3, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %23, i32 0, i1 %23) #3, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !25
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %22, i32 0, i1 %22) #3, !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %22, i32 0, i1 %22) #3, !dbg !26
  %53 = bitcast i32 %52 to float, !dbg !26
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %22, i32 0, i1 %22) #3, !dbg !26
  %55 = bitcast i32 %54 to float, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %22, i32 0, i1 %22) #3, !dbg !26
  %57 = bitcast i32 %56 to float, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %23, i32 0, i1 %23) #3, !dbg !26
  %59 = bitcast i32 %58 to float, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %23, i32 0, i1 %23) #3, !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %23, i32 0, i1 %23) #3, !dbg !26
  %63 = bitcast i32 %62 to float, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %23, i32 0, i1 %23) #3, !dbg !26
  %65 = bitcast i32 %64 to float, !dbg !26
  %66 = fadd float %51, 0x3F50624DE0000000, !dbg !27
  %67 = fadd float %53, 0x3F50624DE0000000, !dbg !27
  %68 = fadd float %55, 0x3F50624DE0000000, !dbg !27
  %69 = fadd float %57, 0x3F50624DE0000000, !dbg !27
  %70 = fadd float %59, 0x3F50624DE0000000, !dbg !27
  %71 = fadd float %61, 0x3F50624DE0000000, !dbg !27
  %72 = fadd float %63, 0x3F50624DE0000000, !dbg !27
  %73 = fadd float %65, 0x3F50624DE0000000, !dbg !27
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %74, 0, !dbg !28
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %75, 0, !dbg !28
  br i1 %.not.i, label %81, label %76, !dbg !28

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !28

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !28

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !28
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i2 = icmp eq i32 %86, 0, !dbg !28
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i5 = icmp eq i32 %87, 0, !dbg !28
  br i1 %.not.i2, label %93, label %88, !dbg !28

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %91, label %89, !dbg !28

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit6, !dbg !28

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit6, !dbg !28

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %96, label %94, !dbg !28

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit6, !dbg !28

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit6, !dbg !28

__nv_sqrtf.exit6:                                 ; preds = %89, %91, %94, %96
  %.0.i4 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i7 = icmp eq i32 %98, 0, !dbg !28
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i10 = icmp eq i32 %99, 0, !dbg !28
  br i1 %.not.i7, label %105, label %100, !dbg !28

100:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %103, label %101, !dbg !28

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit11, !dbg !28

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit11, !dbg !28

105:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %108, label %106, !dbg !28

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit11, !dbg !28

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit11, !dbg !28

__nv_sqrtf.exit11:                                ; preds = %101, %103, %106, %108
  %.0.i9 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !28
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i12 = icmp eq i32 %110, 0, !dbg !28
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i15 = icmp eq i32 %111, 0, !dbg !28
  br i1 %.not.i12, label %117, label %112, !dbg !28

112:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %115, label %113, !dbg !28

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit16, !dbg !28

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit16, !dbg !28

117:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %120, label %118, !dbg !28

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit16, !dbg !28

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit16, !dbg !28

__nv_sqrtf.exit16:                                ; preds = %113, %115, %118, %120
  %.0.i14 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !28
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i17 = icmp eq i32 %122, 0, !dbg !28
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i20 = icmp eq i32 %123, 0, !dbg !28
  br i1 %.not.i17, label %129, label %124, !dbg !28

124:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %127, label %125, !dbg !28

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

129:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %132, label %130, !dbg !28

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

__nv_sqrtf.exit21:                                ; preds = %125, %127, %130, %132
  %.0.i19 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !28
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i22 = icmp eq i32 %134, 0, !dbg !28
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i25 = icmp eq i32 %135, 0, !dbg !28
  br i1 %.not.i22, label %141, label %136, !dbg !28

136:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %139, label %137, !dbg !28

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit26, !dbg !28

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit26, !dbg !28

141:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %144, label %142, !dbg !28

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit26, !dbg !28

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit26, !dbg !28

__nv_sqrtf.exit26:                                ; preds = %137, %139, %142, %144
  %.0.i24 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !28
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i27 = icmp eq i32 %146, 0, !dbg !28
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i30 = icmp eq i32 %147, 0, !dbg !28
  br i1 %.not.i27, label %153, label %148, !dbg !28

148:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %151, label %149, !dbg !28

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit31, !dbg !28

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit31, !dbg !28

153:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %156, label %154, !dbg !28

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit31, !dbg !28

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit31, !dbg !28

__nv_sqrtf.exit31:                                ; preds = %149, %151, %154, %156
  %.0.i29 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !28
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i32 = icmp eq i32 %158, 0, !dbg !28
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i35 = icmp eq i32 %159, 0, !dbg !28
  br i1 %.not.i32, label %165, label %160, !dbg !28

160:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %163, label %161, !dbg !28

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit36, !dbg !28

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit36, !dbg !28

165:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %168, label %166, !dbg !28

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit36, !dbg !28

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit36, !dbg !28

__nv_sqrtf.exit36:                                ; preds = %161, %163, %166, %168
  %.0.i34 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !28
  %170 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %171 = insertelement <8 x i32> poison, i32 %47, i64 0, !dbg !24
  %172 = insertelement <8 x i32> %171, i32 %46, i64 1, !dbg !24
  %173 = insertelement <8 x i32> %172, i32 %45, i64 2, !dbg !24
  %174 = insertelement <8 x i32> %173, i32 %44, i64 3, !dbg !24
  %175 = insertelement <8 x i32> %174, i32 %43, i64 4, !dbg !24
  %176 = insertelement <8 x i32> %175, i32 %42, i64 5, !dbg !24
  %177 = insertelement <8 x i32> %176, i32 %41, i64 6, !dbg !24
  %178 = insertelement <8 x i32> %177, i32 %40, i64 7, !dbg !24
  %179 = bitcast <8 x i32> %178 to <8 x float>, !dbg !24
  %180 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %182 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %184 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %186 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %187 = mul i32 %17, 1024, !dbg !29
  %.decomposed = sub i32 %.frozen45, %187, !dbg !29
  %188 = mul i32 %16, 1024, !dbg !29
  %.decomposed47 = sub i32 %.frozen46, %188, !dbg !29
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !30
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !30
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !30
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !30
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !30
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !30
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !30
  %197 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !31
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !31
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %22, i32 0, i1 %22) #3, !dbg !32
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %22, i32 0, i1 %22) #3, !dbg !32
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %22, i32 0, i1 %22) #3, !dbg !32
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %22, i32 0, i1 %22) #3, !dbg !32
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %23, i32 0, i1 %23) #3, !dbg !32
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %23, i32 0, i1 %23) #3, !dbg !32
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %23, i32 0, i1 %23) #3, !dbg !32
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %23, i32 0, i1 %23) #3, !dbg !32
  %207 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !33
  %208 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !33
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %22, i32 0, i1 %22) #3, !dbg !34
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %22, i32 0, i1 %22) #3, !dbg !34
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %22, i32 0, i1 %22) #3, !dbg !34
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %22, i32 0, i1 %22) #3, !dbg !34
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %23, i32 0, i1 %23) #3, !dbg !34
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %23, i32 0, i1 %23) #3, !dbg !34
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %23, i32 0, i1 %23) #3, !dbg !34
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %23, i32 0, i1 %23) #3, !dbg !34
  %217 = insertelement <8 x i32> poison, i32 %170, i64 0, !dbg !22
  %218 = insertelement <8 x i32> %217, i32 %180, i64 1, !dbg !22
  %219 = insertelement <8 x i32> %218, i32 %181, i64 2, !dbg !22
  %220 = insertelement <8 x i32> %219, i32 %182, i64 3, !dbg !22
  %221 = insertelement <8 x i32> %220, i32 %183, i64 4, !dbg !22
  %222 = insertelement <8 x i32> %221, i32 %184, i64 5, !dbg !22
  %223 = insertelement <8 x i32> %222, i32 %185, i64 6, !dbg !22
  %224 = insertelement <8 x i32> %223, i32 %186, i64 7, !dbg !22
  %225 = bitcast <8 x i32> %224 to <8 x float>, !dbg !22
  %226 = fsub <8 x float> %225, %179, !dbg !35
  %227 = insertelement <8 x float> poison, float %196, i64 0, !dbg !36
  %228 = insertelement <8 x float> %227, float %195, i64 1, !dbg !36
  %229 = insertelement <8 x float> %228, float %194, i64 2, !dbg !36
  %230 = insertelement <8 x float> %229, float %193, i64 3, !dbg !36
  %231 = insertelement <8 x float> %230, float %192, i64 4, !dbg !36
  %232 = insertelement <8 x float> %231, float %191, i64 5, !dbg !36
  %233 = insertelement <8 x float> %232, float %190, i64 6, !dbg !36
  %234 = insertelement <8 x float> %233, float %189, i64 7, !dbg !36
  %235 = fmul <8 x float> %226, %234, !dbg !36
  %236 = insertelement <8 x i32> poison, i32 %206, i64 0, !dbg !32
  %237 = insertelement <8 x i32> %236, i32 %205, i64 1, !dbg !32
  %238 = insertelement <8 x i32> %237, i32 %204, i64 2, !dbg !32
  %239 = insertelement <8 x i32> %238, i32 %203, i64 3, !dbg !32
  %240 = insertelement <8 x i32> %239, i32 %202, i64 4, !dbg !32
  %241 = insertelement <8 x i32> %240, i32 %201, i64 5, !dbg !32
  %242 = insertelement <8 x i32> %241, i32 %200, i64 6, !dbg !32
  %243 = insertelement <8 x i32> %242, i32 %199, i64 7, !dbg !32
  %244 = bitcast <8 x i32> %243 to <8 x float>, !dbg !32
  %245 = fmul <8 x float> %235, %244, !dbg !37
  %246 = insertelement <8 x i32> poison, i32 %216, i64 0, !dbg !34
  %247 = insertelement <8 x i32> %246, i32 %215, i64 1, !dbg !34
  %248 = insertelement <8 x i32> %247, i32 %214, i64 2, !dbg !34
  %249 = insertelement <8 x i32> %248, i32 %213, i64 3, !dbg !34
  %250 = insertelement <8 x i32> %249, i32 %212, i64 4, !dbg !34
  %251 = insertelement <8 x i32> %250, i32 %211, i64 5, !dbg !34
  %252 = insertelement <8 x i32> %251, i32 %210, i64 6, !dbg !34
  %253 = insertelement <8 x i32> %252, i32 %209, i64 7, !dbg !34
  %254 = bitcast <8 x i32> %253 to <8 x float>, !dbg !34
  %255 = fadd <8 x float> %245, %254, !dbg !38
  %256 = fcmp olt <8 x float> %255, zeroinitializer, !dbg !39
  %257 = extractelement <8 x i1> %256, i64 7, !dbg !43
  %258 = extractelement <8 x i1> %256, i64 6, !dbg !43
  %259 = extractelement <8 x i1> %256, i64 5, !dbg !43
  %260 = extractelement <8 x i1> %256, i64 4, !dbg !43
  %261 = extractelement <8 x i1> %256, i64 3, !dbg !43
  %262 = extractelement <8 x i1> %256, i64 2, !dbg !43
  %263 = extractelement <8 x i1> %256, i64 1, !dbg !43
  %264 = extractelement <8 x i1> %256, i64 0, !dbg !43
  %265 = icmp sgt i32 %18, 19, !dbg !44
  %266 = icmp sgt i32 %19, 19, !dbg !44
  %267 = shl nsw i32 %18, 10, !dbg !45
  %268 = shl nsw i32 %19, 10, !dbg !45
  %269 = mul nsw i32 %20, 19456, !dbg !46
  %270 = mul nsw i32 %21, 19456, !dbg !46
  %271 = add nsw i32 %.decomposed47, -20480, !dbg !45
  %272 = add nsw i32 %271, %269, !dbg !47
  %273 = add nsw i32 %272, %267, !dbg !48
  %274 = add nsw i32 %.decomposed, -20480, !dbg !45
  %275 = add nsw i32 %274, %270, !dbg !47
  %276 = add nsw i32 %275, %268, !dbg !48
  %277 = sext i32 %273 to i64, !dbg !49
  %278 = getelementptr float, ptr addrspace(1) %5, i64 %277, !dbg !49
  %279 = sext i32 %276 to i64, !dbg !49
  %280 = getelementptr float, ptr addrspace(1) %5, i64 %279, !dbg !49
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %278, i1 %265, i32 0, i1 %265, i32 0, i1 %265, i32 0, i1 %265, i32 0, i1 %265) #3, !dbg !50
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !50
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !50
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !50
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !50
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %280, i1 %266, i32 0, i1 %266, i32 0, i1 %266, i32 0, i1 %266, i32 0, i1 %266) #3, !dbg !50
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !50
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !50
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !50
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !50
  %291 = sext i32 %14 to i64, !dbg !51
  %292 = getelementptr float, ptr addrspace(1) %6, i64 %291, !dbg !51
  %293 = sext i32 %15 to i64, !dbg !51
  %294 = getelementptr float, ptr addrspace(1) %6, i64 %293, !dbg !51
  %bc = bitcast <8 x float> %255 to <8 x i32>, !dbg !52
  %295 = extractelement <8 x i32> %bc, i64 7, !dbg !52
  %296 = select i1 %257, i32 0, i32 %295, !dbg !43
  %297 = select i1 %22, i32 %296, i32 %282, !dbg !53
  %bc37 = bitcast <8 x float> %255 to <8 x i32>, !dbg !52
  %298 = extractelement <8 x i32> %bc37, i64 6, !dbg !52
  %299 = select i1 %258, i32 0, i32 %298, !dbg !43
  %300 = select i1 %22, i32 %299, i32 %283, !dbg !53
  %bc38 = bitcast <8 x float> %255 to <8 x i32>, !dbg !52
  %301 = extractelement <8 x i32> %bc38, i64 5, !dbg !52
  %302 = select i1 %259, i32 0, i32 %301, !dbg !43
  %303 = select i1 %22, i32 %302, i32 %284, !dbg !53
  %bc39 = bitcast <8 x float> %255 to <8 x i32>, !dbg !52
  %304 = extractelement <8 x i32> %bc39, i64 4, !dbg !52
  %305 = select i1 %260, i32 0, i32 %304, !dbg !43
  %306 = select i1 %22, i32 %305, i32 %285, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %297, i32 %300, i32 %303, i32 %306, ptr addrspace(1) %292, i1 true) #3, !dbg !52
  %bc40 = bitcast <8 x float> %255 to <8 x i32>, !dbg !52
  %307 = extractelement <8 x i32> %bc40, i64 3, !dbg !52
  %308 = select i1 %261, i32 0, i32 %307, !dbg !43
  %309 = select i1 %23, i32 %308, i32 %287, !dbg !53
  %bc41 = bitcast <8 x float> %255 to <8 x i32>, !dbg !52
  %310 = extractelement <8 x i32> %bc41, i64 2, !dbg !52
  %311 = select i1 %262, i32 0, i32 %310, !dbg !43
  %312 = select i1 %23, i32 %311, i32 %288, !dbg !53
  %bc42 = bitcast <8 x float> %255 to <8 x i32>, !dbg !52
  %313 = extractelement <8 x i32> %bc42, i64 1, !dbg !52
  %314 = select i1 %263, i32 0, i32 %313, !dbg !43
  %315 = select i1 %23, i32 %314, i32 %289, !dbg !53
  %bc43 = bitcast <8 x float> %255 to <8 x i32>, !dbg !52
  %316 = extractelement <8 x i32> %bc43, i64 0, !dbg !52
  %317 = select i1 %264, i32 0, i32 %316, !dbg !43
  %318 = select i1 %23, i32 %317, i32 %290, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %309, i32 %312, i32 %315, i32 %318, ptr addrspace(1) %294, i1 true) #3, !dbg !52
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjnhow5aupqrdxiy6djpoh4adqqishkkr46zlficsojhjruent7f.py", directory: "inductor_cache/jn")
!4 = !{ptr @triton_poi_fused_cat_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_27", linkageName: "triton_poi_fused_cat_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 53, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 58, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 38, column: 19, scope: !7)
!28 = !DILocation(line: 39, column: 27, scope: !7)
!29 = !DILocation(line: 25, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 50, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 42, scope: !7)
!46 = !DILocation(line: 56, column: 62, scope: !7)
!47 = !DILocation(line: 56, column: 36, scope: !7)
!48 = !DILocation(line: 56, column: 56, scope: !7)
!49 = !DILocation(line: 56, column: 31, scope: !7)
!50 = !DILocation(line: 56, column: 67, scope: !7)
!51 = !DILocation(line: 58, column: 25, scope: !7)
!52 = !DILocation(line: 58, column: 37, scope: !7)
!53 = !DILocation(line: 0, scope: !7)
!54 = !DILocation(line: 58, column: 4, scope: !7)
