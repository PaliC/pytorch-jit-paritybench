; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 1016, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = and i32 %9, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %13, 256, !dbg !12
  %16 = or disjoint i32 %13, 384, !dbg !12
  %17 = or disjoint i32 %13, 512, !dbg !12
  %18 = or disjoint i32 %13, 640, !dbg !12
  %19 = or disjoint i32 %13, 768, !dbg !12
  %20 = or disjoint i32 %13, 896, !dbg !12
  %21 = or disjoint i32 %8, %11, !dbg !13
  %22 = or disjoint i32 %8, %12, !dbg !13
  %23 = or disjoint i32 %8, %13, !dbg !13
  %24 = or disjoint i32 %8, %14, !dbg !13
  %25 = or disjoint i32 %8, %15, !dbg !13
  %26 = or disjoint i32 %8, %16, !dbg !13
  %27 = or disjoint i32 %8, %17, !dbg !13
  %28 = or disjoint i32 %8, %18, !dbg !13
  %29 = or disjoint i32 %8, %19, !dbg !13
  %30 = or disjoint i32 %8, %20, !dbg !13
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %32 = icmp slt i32 %31, 256, !dbg !15
  %.frozen = freeze i32 %21, !dbg !16
  %33 = sdiv i32 %.frozen, 256, !dbg !16
  %34 = mul i32 %33, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %34, !dbg !17
  %35 = srem i32 %22, 256, !dbg !17
  %36 = shl i32 %31, 8, !dbg !18
  %37 = shl i32 %33, 16, !dbg !19
  %38 = add i32 %37, %36, !dbg !20
  %39 = add i32 %38, %.decomposed, !dbg !21
  %40 = add i32 %38, %35, !dbg !21
  %41 = sext i32 %39 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %40 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %32) #2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %32) #2, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !23
  %55 = sext i32 %.decomposed to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !24
  %57 = sext i32 %35 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !24
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !25
  %69 = shl i32 %23, 8, !dbg !26
  %70 = shl i32 %24, 8, !dbg !26
  %71 = shl i32 %25, 8, !dbg !26
  %72 = shl i32 %26, 8, !dbg !26
  %73 = shl i32 %27, 8, !dbg !26
  %74 = shl i32 %28, 8, !dbg !26
  %75 = shl i32 %29, 8, !dbg !26
  %76 = shl i32 %30, 8, !dbg !26
  %77 = add i32 %69, %31, !dbg !27
  %78 = add i32 %70, %31, !dbg !27
  %79 = add i32 %71, %31, !dbg !27
  %80 = add i32 %72, %31, !dbg !27
  %81 = add i32 %73, %31, !dbg !27
  %82 = add i32 %74, %31, !dbg !27
  %83 = add i32 %75, %31, !dbg !27
  %84 = add i32 %76, %31, !dbg !27
  %85 = sext i32 %77 to i64, !dbg !28
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !28
  %87 = sext i32 %78 to i64, !dbg !28
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !28
  %89 = sext i32 %79 to i64, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !28
  %91 = sext i32 %80 to i64, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !28
  %93 = sext i32 %81 to i64, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !28
  %95 = sext i32 %82 to i64, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !28
  %97 = sext i32 %83 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !28
  %99 = sext i32 %84 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !28
  %.idx = shl nuw nsw i32 %11, 3, !dbg !29
  %101 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !29
  %102 = shl nuw nsw i32 %11, 1, !dbg !29
  %103 = or disjoint i32 %102, 2, !dbg !29
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !29
  %105 = or disjoint i32 %102, 4, !dbg !29
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !29
  %107 = or disjoint i32 %102, 6, !dbg !29
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !29
  %.idx1 = shl nuw nsw i32 %12, 3, !dbg !29
  %109 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !29
  %110 = or disjoint i32 %102, 10, !dbg !29
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !29
  %112 = or disjoint i32 %102, 12, !dbg !29
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !29
  %114 = or disjoint i32 %102, 14, !dbg !29
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !29
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !29
  %116 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !29
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !29
  %117 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !29
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !29
  %118 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !29
  %.idx5 = shl nuw nsw i32 %16, 3, !dbg !29
  %119 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !29
  %.idx6 = shl nuw nsw i32 %17, 3, !dbg !29
  %120 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !29
  %.idx7 = shl nuw nsw i32 %18, 3, !dbg !29
  %121 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !29
  %.idx8 = shl nuw nsw i32 %19, 3, !dbg !29
  %122 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !29
  %.idx9 = shl nuw nsw i32 %20, 3, !dbg !29
  %123 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !29
  %124 = getelementptr i1, ptr addrspace(1) %3, i64 %41, !dbg !30
  %125 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !23
  %126 = insertelement <4 x i32> %125, i32 %47, i64 1, !dbg !23
  %127 = insertelement <4 x i32> %126, i32 %48, i64 2, !dbg !23
  %128 = insertelement <4 x i32> %127, i32 %49, i64 3, !dbg !23
  %129 = bitcast <4 x i32> %128 to <4 x float>, !dbg !23
  %130 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !25
  %131 = insertelement <4 x i32> %130, i32 %61, i64 1, !dbg !25
  %132 = insertelement <4 x i32> %131, i32 %62, i64 2, !dbg !25
  %133 = insertelement <4 x i32> %132, i32 %63, i64 3, !dbg !25
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !25
  %135 = fadd <4 x float> %129, %134, !dbg !31
  %136 = fcmp olt <4 x float> %135, zeroinitializer, !dbg !32
  %137 = select <4 x i1> %136, <4 x float> zeroinitializer, <4 x float> %135, !dbg !36
  %138 = fcmp ole <4 x float> %137, zeroinitializer, !dbg !37
  %139 = extractelement <4 x float> %137, i64 0, !dbg !29
  %140 = bitcast float %139 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %140, i1 true) #2, !dbg !29
  %141 = extractelement <4 x float> %137, i64 1, !dbg !29
  %142 = bitcast float %141 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %142, i1 true) #2, !dbg !29
  %143 = extractelement <4 x float> %137, i64 2, !dbg !29
  %144 = bitcast float %143 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %144, i1 true) #2, !dbg !29
  %145 = extractelement <4 x float> %137, i64 3, !dbg !29
  %146 = bitcast float %145 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %146, i1 true) #2, !dbg !29
  %147 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !23
  %148 = insertelement <4 x i32> %147, i32 %52, i64 1, !dbg !23
  %149 = insertelement <4 x i32> %148, i32 %53, i64 2, !dbg !23
  %150 = insertelement <4 x i32> %149, i32 %54, i64 3, !dbg !23
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !23
  %152 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !25
  %153 = insertelement <4 x i32> %152, i32 %66, i64 1, !dbg !25
  %154 = insertelement <4 x i32> %153, i32 %67, i64 2, !dbg !25
  %155 = insertelement <4 x i32> %154, i32 %68, i64 3, !dbg !25
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !25
  %157 = fadd <4 x float> %151, %156, !dbg !31
  %158 = fcmp olt <4 x float> %157, zeroinitializer, !dbg !32
  %159 = select <4 x i1> %158, <4 x float> zeroinitializer, <4 x float> %157, !dbg !36
  %160 = fcmp ole <4 x float> %159, zeroinitializer, !dbg !37
  %161 = extractelement <4 x float> %159, i64 0, !dbg !29
  %162 = bitcast float %161 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %162, i1 true) #2, !dbg !29
  %163 = extractelement <4 x float> %159, i64 1, !dbg !29
  %164 = bitcast float %163 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %164, i1 true) #2, !dbg !29
  %165 = extractelement <4 x float> %159, i64 2, !dbg !29
  %166 = bitcast float %165 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %166, i1 true) #2, !dbg !29
  %167 = extractelement <4 x float> %159, i64 3, !dbg !29
  %168 = bitcast float %167 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %168, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %169 = load i32, ptr addrspace(3) %116, align 8, !dbg !29
  %170 = load i32, ptr addrspace(3) %117, align 8, !dbg !29
  %171 = load i32, ptr addrspace(3) %118, align 8, !dbg !29
  %172 = load i32, ptr addrspace(3) %119, align 8, !dbg !29
  %173 = load i32, ptr addrspace(3) %120, align 8, !dbg !29
  %174 = load i32, ptr addrspace(3) %121, align 8, !dbg !29
  %175 = load i32, ptr addrspace(3) %122, align 8, !dbg !29
  %176 = load i32, ptr addrspace(3) %123, align 8, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %86, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %88, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %90, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %92, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %94, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %96, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %98, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %100, i1 %32) #2, !dbg !29
  %177 = zext <4 x i1> %138 to <4 x i8>, !dbg !38
  %178 = bitcast <4 x i8> %177 to i32, !dbg !38
  %179 = zext <4 x i1> %160 to <4 x i8>, !dbg !38
  %180 = bitcast <4 x i8> %179 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %180, ptr addrspace(1) %124, i1 %32) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coe5l3k7y6o4xusfk3vwn4yvyx444tvovt7e7bdekr63y6glyhme.py", directory: "inductor_cache/oe")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_12", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 50, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 39, column: 34, scope: !7)
!27 = !DILocation(line: 39, column: 30, scope: !7)
!28 = !DILocation(line: 39, column: 25, scope: !7)
!29 = !DILocation(line: 39, column: 45, scope: !7)
!30 = !DILocation(line: 40, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 38, column: 19, scope: !7)
!38 = !DILocation(line: 40, column: 56, scope: !7)
!39 = !DILocation(line: 40, column: 4, scope: !7)
