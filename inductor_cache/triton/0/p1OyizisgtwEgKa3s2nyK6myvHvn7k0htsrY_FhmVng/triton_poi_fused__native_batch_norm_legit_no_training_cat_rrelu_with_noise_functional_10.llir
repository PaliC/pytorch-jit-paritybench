; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %17 = sdiv i32 %.frozen, 16, !dbg !14
  %18 = mul i32 %17, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %16, 16, !dbg !15
  %20 = srem i32 %17, 32, !dbg !16
  %21 = sdiv i32 %15, 512, !dbg !17
  %22 = sext i32 %.decomposed to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !18
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !20
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !21
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !21
  %29 = bitcast i32 %27 to float, !dbg !21
  %30 = bitcast i32 %28 to float, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !22
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !24
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !25
  %35 = icmp slt i32 %.decomposed, 13, !dbg !26
  %36 = icmp slt i32 %19, 13, !dbg !26
  %37 = mul nsw i32 %17, 13, !dbg !27
  %38 = add nsw i32 %37, %.decomposed, !dbg !28
  %39 = add nsw i32 %37, %19, !dbg !28
  %40 = sext i32 %38 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !29
  %42 = sext i32 %39 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %35, i32 0, i1 %35) #3, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %36, i32 0, i1 %36) #3, !dbg !30
  %46 = icmp sgt i32 %.decomposed, 12, !dbg !31
  %47 = icmp sgt i32 %19, 12, !dbg !31
  %48 = mul nsw i32 %20, 6, !dbg !32
  %49 = mul nsw i32 %21, 384, !dbg !33
  %50 = add nsw i32 %48, %49, !dbg !34
  %51 = add nsw i32 %.decomposed, -13, !dbg !35
  %52 = add nsw i32 %19, -13, !dbg !35
  %53 = add nsw i32 %50, %51, !dbg !36
  %54 = add nsw i32 %50, %52, !dbg !36
  %55 = sext i32 %53 to i64, !dbg !37
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !37
  %57 = sext i32 %54 to i64, !dbg !37
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %46, i32 0, i1 %46) #3, !dbg !38
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %47, i32 0, i1 %47) #3, !dbg !38
  %61 = add nsw i32 %50, 3, !dbg !39
  %62 = add nsw i32 %61, %51, !dbg !40
  %63 = add nsw i32 %61, %52, !dbg !40
  %64 = sext i32 %62 to i64, !dbg !41
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !41
  %66 = sext i32 %63 to i64, !dbg !41
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !41
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %46, i32 0, i1 %46) #3, !dbg !42
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %47, i32 0, i1 %47) #3, !dbg !42
  %70 = add nsw i32 %50, 192, !dbg !43
  %71 = add nsw i32 %70, %51, !dbg !44
  %72 = add nsw i32 %70, %52, !dbg !44
  %73 = sext i32 %71 to i64, !dbg !45
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !45
  %75 = sext i32 %72 to i64, !dbg !45
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !45
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %46, i32 0, i1 %46) #3, !dbg !46
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %47, i32 0, i1 %47) #3, !dbg !46
  %79 = add nsw i32 %50, 195, !dbg !47
  %80 = add nsw i32 %79, %51, !dbg !48
  %81 = add nsw i32 %79, %52, !dbg !48
  %82 = sext i32 %80 to i64, !dbg !49
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !49
  %84 = sext i32 %81 to i64, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !49
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %46, i32 0, i1 %46) #3, !dbg !50
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %47, i32 0, i1 %47) #3, !dbg !50
  %88 = fadd float %29, 0x3EE4F8B580000000, !dbg !51
  %89 = fadd float %30, 0x3EE4F8B580000000, !dbg !51
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i = icmp eq i32 %90, 0, !dbg !52
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i = icmp eq i32 %91, 0, !dbg !52
  br i1 %.not.i, label %97, label %92, !dbg !52

92:                                               ; preds = %9
  br i1 %.not1.i, label %95, label %93, !dbg !52

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

97:                                               ; preds = %9
  br i1 %.not1.i, label %100, label %98, !dbg !52

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

__nv_sqrtf.exit:                                  ; preds = %93, %95, %98, %100
  %.0.i = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !52
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %102, 0, !dbg !52
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i4 = icmp eq i32 %103, 0, !dbg !52
  br i1 %.not.i1, label %109, label %104, !dbg !52

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %107, label %105, !dbg !52

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !52

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

__nv_sqrtf.exit5:                                 ; preds = %105, %107, %110, %112
  %.0.i3 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !52
  %114 = bitcast i32 %45 to float, !dbg !30
  %115 = bitcast i32 %69 to float, !dbg !42
  %116 = bitcast i32 %60 to float, !dbg !38
  %117 = fcmp ogt float %115, %116, !dbg !53
  %118 = fcmp uno float %115, 0.000000e+00, !dbg !57
  %119 = or i1 %117, %118, !dbg !58
  %120 = select i1 %119, float %115, float %116, !dbg !59
  %121 = bitcast i32 %78 to float, !dbg !46
  %122 = fcmp olt float %120, %121, !dbg !60
  %123 = fcmp uno float %121, 0.000000e+00, !dbg !62
  %124 = or i1 %123, %122, !dbg !63
  %125 = select i1 %124, float %121, float %120, !dbg !64
  %126 = bitcast i32 %87 to float, !dbg !50
  %127 = fcmp olt float %125, %126, !dbg !65
  %128 = fcmp uno float %126, 0.000000e+00, !dbg !67
  %129 = or i1 %128, %127, !dbg !68
  %130 = select i1 %129, float %126, float %125, !dbg !69
  %131 = select i1 %36, float %114, float %130, !dbg !70
  %132 = extractvalue { i32, i32 } %24, 1, !dbg !19
  %133 = bitcast i32 %132 to float, !dbg !19
  %134 = fsub float %131, %133, !dbg !71
  %135 = bitcast i32 %44 to float, !dbg !30
  %136 = bitcast i32 %68 to float, !dbg !42
  %137 = bitcast i32 %59 to float, !dbg !38
  %138 = fcmp ogt float %136, %137, !dbg !53
  %139 = fcmp uno float %136, 0.000000e+00, !dbg !57
  %140 = or i1 %138, %139, !dbg !58
  %141 = select i1 %140, float %136, float %137, !dbg !59
  %142 = bitcast i32 %77 to float, !dbg !46
  %143 = fcmp olt float %141, %142, !dbg !60
  %144 = fcmp uno float %142, 0.000000e+00, !dbg !62
  %145 = or i1 %144, %143, !dbg !63
  %146 = select i1 %145, float %142, float %141, !dbg !64
  %147 = bitcast i32 %86 to float, !dbg !50
  %148 = fcmp olt float %146, %147, !dbg !65
  %149 = fcmp uno float %147, 0.000000e+00, !dbg !67
  %150 = or i1 %149, %148, !dbg !68
  %151 = select i1 %150, float %147, float %146, !dbg !69
  %152 = select i1 %35, float %135, float %151, !dbg !70
  %153 = extractvalue { i32, i32 } %24, 0, !dbg !19
  %154 = bitcast i32 %153 to float, !dbg !19
  %155 = fsub float %152, %154, !dbg !71
  %156 = extractvalue { i32, i32 } %34, 1, !dbg !25
  %157 = bitcast i32 %156 to float, !dbg !25
  %158 = extractvalue { i32, i32 } %34, 0, !dbg !25
  %159 = bitcast i32 %158 to float, !dbg !25
  %160 = extractvalue { i32, i32 } %32, 1, !dbg !23
  %161 = bitcast i32 %160 to float, !dbg !23
  %162 = extractvalue { i32, i32 } %32, 0, !dbg !23
  %163 = bitcast i32 %162 to float, !dbg !23
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !72
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !72
  %166 = fmul float %155, %164, !dbg !73
  %167 = fmul float %134, %165, !dbg !73
  %168 = fmul float %166, %163, !dbg !74
  %169 = fmul float %167, %161, !dbg !74
  %170 = fadd float %168, %159, !dbg !75
  %171 = fadd float %169, %157, !dbg !75
  %172 = fcmp ogt float %170, 0.000000e+00, !dbg !76
  %173 = fcmp ogt float %171, 0.000000e+00, !dbg !76
  %174 = fmul float %170, 0x3FCD555560000000, !dbg !77
  %175 = fmul float %171, 0x3FCD555560000000, !dbg !77
  %176 = select i1 %172, float %170, float %174, !dbg !78
  %177 = select i1 %173, float %171, float %175, !dbg !78
  %178 = sext i32 %15 to i64, !dbg !79
  %179 = getelementptr float, ptr addrspace(1) %7, i64 %178, !dbg !79
  %180 = bitcast float %152 to i32, !dbg !80
  %181 = bitcast float %131 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %180, i32 %181, ptr addrspace(1) %179, i1 true) #3, !dbg !80
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !81
  %183 = bitcast float %176 to i32, !dbg !82
  %184 = bitcast float %177 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %183, i32 %184, ptr addrspace(1) %182, i1 true) #3, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "colh2mnjsgodft76d6d4kcv4eaev52ws44riozuoxgkie7zuhz67.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 31, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 33, scope: !7)
!28 = !DILocation(line: 38, column: 39, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 45, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 42, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 41, scope: !7)
!34 = !DILocation(line: 42, column: 37, scope: !7)
!35 = !DILocation(line: 42, column: 55, scope: !7)
!36 = !DILocation(line: 42, column: 47, scope: !7)
!37 = !DILocation(line: 42, column: 30, scope: !7)
!38 = !DILocation(line: 42, column: 61, scope: !7)
!39 = !DILocation(line: 43, column: 42, scope: !7)
!40 = !DILocation(line: 43, column: 52, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 66, scope: !7)
!43 = !DILocation(line: 45, column: 44, scope: !7)
!44 = !DILocation(line: 45, column: 54, scope: !7)
!45 = !DILocation(line: 45, column: 31, scope: !7)
!46 = !DILocation(line: 45, column: 68, scope: !7)
!47 = !DILocation(line: 47, column: 44, scope: !7)
!48 = !DILocation(line: 47, column: 54, scope: !7)
!49 = !DILocation(line: 47, column: 31, scope: !7)
!50 = !DILocation(line: 47, column: 68, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 27, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 44, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!60 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !61)
!61 = !DILocation(line: 46, column: 42, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !61)
!65 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !66)
!66 = !DILocation(line: 48, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !66)
!70 = !DILocation(line: 51, column: 33, scope: !7)
!71 = !DILocation(line: 52, column: 20, scope: !7)
!72 = !DILocation(line: 57, column: 20, scope: !7)
!73 = !DILocation(line: 60, column: 20, scope: !7)
!74 = !DILocation(line: 61, column: 20, scope: !7)
!75 = !DILocation(line: 62, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 66, column: 20, scope: !7)
!78 = !DILocation(line: 67, column: 35, scope: !7)
!79 = !DILocation(line: 68, column: 25, scope: !7)
!80 = !DILocation(line: 68, column: 37, scope: !7)
!81 = !DILocation(line: 69, column: 28, scope: !7)
!82 = !DILocation(line: 69, column: 40, scope: !7)
!83 = !DILocation(line: 69, column: 4, scope: !7)
