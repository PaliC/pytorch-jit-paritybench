; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = icmp slt i32 %13, 69696, !dbg !14
  %16 = icmp slt i32 %14, 69696, !dbg !14
  %17 = insertelement <4 x i32> poison, i32 %14, i64 0, !dbg !15
  %18 = insertelement <4 x i32> %17, i32 %13, i64 1, !dbg !15
  %19 = shufflevector <4 x i32> %18, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !15
  %20 = sdiv <4 x i32> %19, <i32 16, i32 16, i32 528, i32 528>, !dbg !15
  %21 = srem <4 x i32> %20, splat (i32 33), !dbg !16
  %22 = sdiv i32 %13, 17424, !dbg !17
  %23 = sdiv i32 %14, 17424, !dbg !17
  %24 = srem i32 %13, 528, !dbg !18
  %25 = srem i32 %14, 528, !dbg !18
  %26 = srem i32 %13, 16, !dbg !19
  %27 = add nsw <4 x i32> %21, splat (i32 -1), !dbg !20
  %28 = icmp ult <4 x i32> %27, splat (i32 31), !dbg !20
  %shift = shufflevector <4 x i1> %28, <4 x i1> poison, <4 x i32> <i32 poison, i32 3, i32 poison, i32 poison>, !dbg !20
  %29 = and <4 x i1> %shift, %28, !dbg !20
  %30 = extractelement <4 x i1> %29, i64 1, !dbg !20
  %shift36 = shufflevector <4 x i1> %28, <4 x i1> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !20
  %31 = and <4 x i1> %shift36, %28, !dbg !20
  %32 = extractelement <4 x i1> %31, i64 0, !dbg !20
  %33 = add nsw i32 %24, -512, !dbg !21
  %34 = add nsw i32 %25, -512, !dbg !21
  %35 = extractelement <4 x i32> %21, i64 3, !dbg !22
  %36 = mul nsw i32 %35, 496, !dbg !22
  %37 = extractelement <4 x i32> %21, i64 2, !dbg !22
  %38 = mul nsw i32 %37, 496, !dbg !22
  %39 = mul nsw i32 %22, 15376, !dbg !23
  %40 = mul nsw i32 %23, 15376, !dbg !23
  %41 = add nsw i32 %33, %39, !dbg !24
  %42 = add nsw i32 %41, %36, !dbg !25
  %43 = add nsw i32 %34, %40, !dbg !24
  %44 = add nsw i32 %43, %38, !dbg !25
  %45 = sext i32 %42 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %44 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = and i1 %15, %30, !dbg !27
  %50 = and i1 %16, %32, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !28
  %53 = sext i32 %26 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !30
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !31
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !32
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !32
  %63 = bitcast i32 %59 to float, !dbg !32
  %64 = bitcast i32 %60 to float, !dbg !32
  %65 = bitcast i32 %61 to float, !dbg !32
  %66 = bitcast i32 %62 to float, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !32
  %72 = bitcast i32 %68 to float, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = fadd float %63, 0x3EE4F8B580000000, !dbg !33
  %77 = fadd float %64, 0x3EE4F8B580000000, !dbg !33
  %78 = fadd float %65, 0x3EE4F8B580000000, !dbg !33
  %79 = fadd float %66, 0x3EE4F8B580000000, !dbg !33
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !33
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !33
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !33
  %83 = fadd float %75, 0x3EE4F8B580000000, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %84, 0, !dbg !34
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %85, 0, !dbg !34
  br i1 %.not.i, label %91, label %86, !dbg !34

86:                                               ; preds = %7
  br i1 %.not1.i, label %89, label %87, !dbg !34

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

91:                                               ; preds = %7
  br i1 %.not1.i, label %94, label %92, !dbg !34

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !34
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i1 = icmp eq i32 %96, 0, !dbg !34
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i4 = icmp eq i32 %97, 0, !dbg !34
  br i1 %.not.i1, label %103, label %98, !dbg !34

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !34

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !34

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %99, %101, %104, %106
  %.0.i3 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !34
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i6 = icmp eq i32 %108, 0, !dbg !34
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i9 = icmp eq i32 %109, 0, !dbg !34
  br i1 %.not.i6, label %115, label %110, !dbg !34

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !34

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

115:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %118, label %116, !dbg !34

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

__nv_sqrtf.exit10:                                ; preds = %111, %113, %116, %118
  %.0.i8 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !34
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i11 = icmp eq i32 %120, 0, !dbg !34
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i14 = icmp eq i32 %121, 0, !dbg !34
  br i1 %.not.i11, label %127, label %122, !dbg !34

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !34

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

127:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %130, label %128, !dbg !34

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

__nv_sqrtf.exit15:                                ; preds = %123, %125, %128, %130
  %.0.i13 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !34
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i16 = icmp eq i32 %132, 0, !dbg !34
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i19 = icmp eq i32 %133, 0, !dbg !34
  br i1 %.not.i16, label %139, label %134, !dbg !34

134:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %137, label %135, !dbg !34

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

139:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %142, label %140, !dbg !34

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

__nv_sqrtf.exit20:                                ; preds = %135, %137, %140, %142
  %.0.i18 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !34
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i21 = icmp eq i32 %144, 0, !dbg !34
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i24 = icmp eq i32 %145, 0, !dbg !34
  br i1 %.not.i21, label %151, label %146, !dbg !34

146:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %149, label %147, !dbg !34

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

151:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %154, label %152, !dbg !34

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

__nv_sqrtf.exit25:                                ; preds = %147, %149, %152, %154
  %.0.i23 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !34
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i26 = icmp eq i32 %156, 0, !dbg !34
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i29 = icmp eq i32 %157, 0, !dbg !34
  br i1 %.not.i26, label %163, label %158, !dbg !34

158:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %161, label %159, !dbg !34

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

163:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %166, label %164, !dbg !34

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

__nv_sqrtf.exit30:                                ; preds = %159, %161, %164, %166
  %.0.i28 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !34
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i31 = icmp eq i32 %168, 0, !dbg !34
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i34 = icmp eq i32 %169, 0, !dbg !34
  br i1 %.not.i31, label %175, label %170, !dbg !34

170:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %173, label %171, !dbg !34

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

175:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %178, label %176, !dbg !34

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

__nv_sqrtf.exit35:                                ; preds = %171, %173, %176, %178
  %.0.i33 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %181 = bitcast i32 %180 to float, !dbg !28
  %182 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !30
  %183 = bitcast i32 %182 to float, !dbg !30
  %184 = fsub float %181, %183, !dbg !35
  %185 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %186 = bitcast i32 %185 to float, !dbg !28
  %187 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !30
  %188 = bitcast i32 %187 to float, !dbg !30
  %189 = fsub float %186, %188, !dbg !35
  %190 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %191 = bitcast i32 %190 to float, !dbg !28
  %192 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !30
  %193 = bitcast i32 %192 to float, !dbg !30
  %194 = fsub float %191, %193, !dbg !35
  %195 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %196 = bitcast i32 %195 to float, !dbg !28
  %197 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !30
  %198 = bitcast i32 %197 to float, !dbg !30
  %199 = fsub float %196, %198, !dbg !35
  %200 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %201 = bitcast i32 %200 to float, !dbg !28
  %202 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !30
  %203 = bitcast i32 %202 to float, !dbg !30
  %204 = fsub float %201, %203, !dbg !35
  %205 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %206 = bitcast i32 %205 to float, !dbg !28
  %207 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !30
  %208 = bitcast i32 %207 to float, !dbg !30
  %209 = fsub float %206, %208, !dbg !35
  %210 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %211 = bitcast i32 %210 to float, !dbg !28
  %212 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !30
  %213 = bitcast i32 %212 to float, !dbg !30
  %214 = fsub float %211, %213, !dbg !35
  %215 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %216 = bitcast i32 %215 to float, !dbg !28
  %217 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !30
  %218 = bitcast i32 %217 to float, !dbg !30
  %219 = fsub float %216, %218, !dbg !35
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !36
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !36
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !36
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !36
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !36
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !36
  %228 = fmul float %219, %220, !dbg !37
  %229 = fmul float %214, %221, !dbg !37
  %230 = fmul float %209, %222, !dbg !37
  %231 = fmul float %204, %223, !dbg !37
  %232 = fmul float %199, %224, !dbg !37
  %233 = fmul float %194, %225, !dbg !37
  %234 = fmul float %189, %226, !dbg !37
  %235 = fmul float %184, %227, !dbg !37
  %236 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !38
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %236, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !39
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !39
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !39
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !39
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !39
  %242 = bitcast i32 %238 to float, !dbg !39
  %243 = bitcast i32 %239 to float, !dbg !39
  %244 = bitcast i32 %240 to float, !dbg !39
  %245 = bitcast i32 %241 to float, !dbg !39
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %236, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !39
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !39
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !39
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !39
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !39
  %251 = bitcast i32 %247 to float, !dbg !39
  %252 = bitcast i32 %248 to float, !dbg !39
  %253 = bitcast i32 %249 to float, !dbg !39
  %254 = bitcast i32 %250 to float, !dbg !39
  %255 = fmul float %228, %242, !dbg !40
  %256 = fmul float %229, %243, !dbg !40
  %257 = fmul float %230, %244, !dbg !40
  %258 = fmul float %231, %245, !dbg !40
  %259 = fmul float %232, %251, !dbg !40
  %260 = fmul float %233, %252, !dbg !40
  %261 = fmul float %234, %253, !dbg !40
  %262 = fmul float %235, %254, !dbg !40
  %263 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !41
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %263, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !42
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !42
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !42
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !42
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !42
  %269 = bitcast i32 %265 to float, !dbg !42
  %270 = bitcast i32 %266 to float, !dbg !42
  %271 = bitcast i32 %267 to float, !dbg !42
  %272 = bitcast i32 %268 to float, !dbg !42
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %263, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !42
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !42
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !42
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !42
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !42
  %278 = bitcast i32 %274 to float, !dbg !42
  %279 = bitcast i32 %275 to float, !dbg !42
  %280 = bitcast i32 %276 to float, !dbg !42
  %281 = bitcast i32 %277 to float, !dbg !42
  %282 = fadd float %255, %269, !dbg !43
  %283 = fadd float %256, %270, !dbg !43
  %284 = fadd float %257, %271, !dbg !43
  %285 = fadd float %258, %272, !dbg !43
  %286 = fadd float %259, %278, !dbg !43
  %287 = fadd float %260, %279, !dbg !43
  %288 = fadd float %261, %280, !dbg !43
  %289 = fadd float %262, %281, !dbg !43
  %290 = sext i32 %13 to i64, !dbg !44
  %291 = getelementptr float, ptr addrspace(1) %5, i64 %290, !dbg !44
  %292 = sext i32 %14 to i64, !dbg !44
  %293 = getelementptr float, ptr addrspace(1) %5, i64 %292, !dbg !44
  %294 = bitcast float %282 to i32, !dbg !45
  %295 = select i1 %30, i32 %294, i32 0, !dbg !46
  %296 = bitcast float %283 to i32, !dbg !45
  %297 = select i1 %30, i32 %296, i32 0, !dbg !46
  %298 = bitcast float %284 to i32, !dbg !45
  %299 = select i1 %30, i32 %298, i32 0, !dbg !46
  %300 = bitcast float %285 to i32, !dbg !45
  %301 = select i1 %30, i32 %300, i32 0, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %297, i32 %299, i32 %301, ptr addrspace(1) %291, i1 %15) #3, !dbg !45
  %302 = bitcast float %286 to i32, !dbg !45
  %303 = select i1 %32, i32 %302, i32 0, !dbg !46
  %304 = bitcast float %287 to i32, !dbg !45
  %305 = select i1 %32, i32 %304, i32 0, !dbg !46
  %306 = bitcast float %288 to i32, !dbg !45
  %307 = select i1 %32, i32 %306, i32 0, !dbg !46
  %308 = bitcast float %289 to i32, !dbg !45
  %309 = select i1 %32, i32 %308, i32 0, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %303, i32 %305, i32 %307, i32 %309, ptr addrspace(1) %293, i1 %16) #3, !dbg !45
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyoaplqsycp2ujsrort3urcnfcis5boyoo6bn5w65nto6zbrxo7v.py", directory: "inductor_cache/yo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 19, scope: !7)
!21 = !DILocation(line: 41, column: 40, scope: !7)
!22 = !DILocation(line: 41, column: 49, scope: !7)
!23 = !DILocation(line: 41, column: 60, scope: !7)
!24 = !DILocation(line: 41, column: 45, scope: !7)
!25 = !DILocation(line: 41, column: 54, scope: !7)
!26 = !DILocation(line: 41, column: 31, scope: !7)
!27 = !DILocation(line: 41, column: 73, scope: !7)
!28 = !DILocation(line: 41, column: 65, scope: !7)
!29 = !DILocation(line: 42, column: 31, scope: !7)
!30 = !DILocation(line: 42, column: 36, scope: !7)
!31 = !DILocation(line: 44, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 36, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 27, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 31, scope: !7)
!39 = !DILocation(line: 53, column: 36, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 55, column: 31, scope: !7)
!42 = !DILocation(line: 55, column: 36, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 59, column: 25, scope: !7)
!45 = !DILocation(line: 59, column: 37, scope: !7)
!46 = !DILocation(line: 58, column: 35, scope: !7)
!47 = !DILocation(line: 59, column: 4, scope: !7)
