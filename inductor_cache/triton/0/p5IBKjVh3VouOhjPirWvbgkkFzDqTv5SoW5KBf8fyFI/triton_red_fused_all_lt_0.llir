; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_all_lt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = icmp slt i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 2044, !dbg !12
  %10 = shl i32 %5, 13, !dbg !13
  %11 = or disjoint i32 %10, %9
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !16
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !16
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !16
  %19 = or disjoint i64 %12, 2048, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = or disjoint i64 %12, 4096, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = or disjoint i64 %12, 6144, !dbg !17
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !15
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !16
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !16
  %40 = insertelement <16 x i32> poison, i32 %18, i64 0, !dbg !16
  %41 = insertelement <16 x i32> %40, i32 %25, i64 1, !dbg !16
  %42 = insertelement <16 x i32> %41, i32 %32, i64 2, !dbg !16
  %43 = insertelement <16 x i32> %42, i32 %39, i64 3, !dbg !16
  %44 = insertelement <16 x i32> %43, i32 %17, i64 4, !dbg !16
  %45 = insertelement <16 x i32> %44, i32 %24, i64 5, !dbg !16
  %46 = insertelement <16 x i32> %45, i32 %31, i64 6, !dbg !16
  %47 = insertelement <16 x i32> %46, i32 %38, i64 7, !dbg !16
  %48 = insertelement <16 x i32> %47, i32 %15, i64 8, !dbg !16
  %49 = insertelement <16 x i32> %48, i32 %22, i64 9, !dbg !16
  %50 = insertelement <16 x i32> %49, i32 %29, i64 10, !dbg !16
  %51 = insertelement <16 x i32> %50, i32 %36, i64 11, !dbg !16
  %52 = insertelement <16 x i32> %51, i32 %16, i64 12, !dbg !16
  %53 = insertelement <16 x i32> %52, i32 %23, i64 13, !dbg !16
  %54 = insertelement <16 x i32> %53, i32 %30, i64 14, !dbg !16
  %55 = insertelement <16 x i32> %54, i32 %37, i64 15, !dbg !16
  %56 = bitcast <16 x i32> %55 to <16 x float>, !dbg !16
  %57 = fcmp uge <16 x float> %56, zeroinitializer, !dbg !18
  %58 = lshr i32 %7, 5, !dbg !12
  %59 = and i32 %7, 31, !dbg !12
  %60 = bitcast <16 x i1> %57 to i16, !dbg !19
  %61 = icmp ne i16 %60, 0, !dbg !19
  %62 = select i1 %6, i1 %61, i1 false, !dbg !19
  %63 = zext i1 %62 to i32, !dbg !24
  %64 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %63, i32 -1), !dbg !24
  %65 = trunc i32 %64 to i8, !dbg !24
  %66 = icmp eq i32 %59, 0, !dbg !24
  %67 = and i32 %58, 15, !dbg !24
  %68 = zext nneg i32 %67 to i64, !dbg !24
  %69 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %68, !dbg !24
  %70 = insertelement <1 x i8> poison, i8 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %69, <1 x i8> %70, i1 %66) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %71 = icmp slt i32 %7, 16, !dbg !24
  %72 = sext i32 %7 to i64, !dbg !24
  %73 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %72, !dbg !24
  %74 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %73, i1 %71) #3, !dbg !24
  %75 = zext i8 %74 to i32, !dbg !24
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !24
  %77 = trunc i32 %76 to i8, !dbg !24
  %78 = or i8 %74, %77, !dbg !19
  %79 = zext i8 %78 to i32, !dbg !24
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !24
  %81 = trunc i32 %80 to i8, !dbg !24
  %82 = or i8 %78, %81, !dbg !19
  %83 = zext i8 %82 to i32, !dbg !24
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !24
  %85 = trunc i32 %84 to i8, !dbg !24
  %86 = or i8 %82, %85, !dbg !19
  %87 = zext i8 %86 to i32, !dbg !24
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !24
  %89 = trunc i32 %88 to i8, !dbg !24
  %90 = or i8 %86, %89, !dbg !19
  %91 = and i32 %7, 15, !dbg !24
  %92 = icmp eq i32 %91, 0, !dbg !24
  %93 = and i1 %71, %92, !dbg !24
  %94 = insertelement <1 x i8> poison, i8 %90, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %73, <1 x i8> %94, i1 %93) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %95 = load i8, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %96 = icmp ne i8 %95, 0, !dbg !25
  %97 = sext i32 %5 to i64, !dbg !26
  %98 = getelementptr i1, ptr addrspace(1) %1, i64 %97, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %99 = zext i1 %96 to i8, !dbg !27
  %100 = insertelement <1 x i8> poison, i8 %99, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) @global_smem, <1 x i8> %100, i1 true) #3, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) @global_smem, <1 x i8> %100, i1 true) #3, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) @global_smem, <1 x i8> %100, i1 true) #3, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) @global_smem, <1 x i8> %100, i1 true) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %101 = load i8, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %102 = and i8 %101, 1, !dbg !27
  %urem = and i32 %7, 511, !dbg !27
  %103 = icmp eq i32 %urem, 0, !dbg !27
  %104 = and i1 %103, %6, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %102, ptr addrspace(1) %98, i1 %104) #3, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cezkhi7ylx5zqf42uugymjb4hjicz2fmoocxzxbndxhxqekspmco.py", directory: "inductor_cache/ez")
!4 = !{ptr @triton_red_fused_all_lt_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_all_lt_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_all_lt_0", linkageName: "triton_red_fused_all_lt_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 34, column: 22, scope: !7)
!19 = !DILocation(line: 227, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 39, column: 49, scope: !7)
!24 = !DILocation(line: 232, column: 29, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 39, column: 64, scope: !7)
!26 = !DILocation(line: 40, column: 25, scope: !7)
!27 = !DILocation(line: 40, column: 36, scope: !7)
!28 = !DILocation(line: 40, column: 4, scope: !7)
