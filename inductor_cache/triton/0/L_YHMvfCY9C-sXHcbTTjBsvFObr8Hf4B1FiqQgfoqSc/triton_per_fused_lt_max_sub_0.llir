; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_lt_max_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = fcmp ogt float %17, %18, !dbg !13
  %22 = fcmp uno float %17, 0.000000e+00, !dbg !18
  %23 = or i1 %21, %22, !dbg !19
  %24 = select i1 %23, float %17, float %18, !dbg !20
  %25 = fcmp ogt float %24, %19, !dbg !13
  %26 = fcmp uno float %24, 0.000000e+00, !dbg !18
  %27 = or i1 %25, %26, !dbg !19
  %28 = select i1 %27, float %24, float %19, !dbg !20
  %29 = fcmp ogt float %28, %20, !dbg !13
  %30 = fcmp uno float %28, 0.000000e+00, !dbg !18
  %31 = or i1 %29, %30, !dbg !19
  %32 = select i1 %31, float %28, float %20, !dbg !20
  %33 = bitcast float %32 to i32, !dbg !21
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 16, i32 31), !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = fcmp ogt float %32, %35, !dbg !13
  %37 = fcmp uno float %32, 0.000000e+00, !dbg !18
  %38 = or i1 %36, %37, !dbg !19
  %39 = select i1 %38, float %32, float %35, !dbg !20
  %40 = bitcast float %39 to i32, !dbg !21
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = fcmp ogt float %39, %42, !dbg !13
  %44 = fcmp uno float %39, 0.000000e+00, !dbg !18
  %45 = or i1 %43, %44, !dbg !19
  %46 = select i1 %45, float %39, float %42, !dbg !20
  %47 = bitcast float %46 to i32, !dbg !21
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 4, i32 31), !dbg !21
  %49 = bitcast i32 %48 to float, !dbg !21
  %50 = fcmp ogt float %46, %49, !dbg !13
  %51 = fcmp uno float %46, 0.000000e+00, !dbg !18
  %52 = or i1 %50, %51, !dbg !19
  %53 = select i1 %52, float %46, float %49, !dbg !20
  %54 = bitcast float %53 to i32, !dbg !21
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !21
  %56 = bitcast i32 %55 to float, !dbg !21
  %57 = fcmp ogt float %53, %56, !dbg !13
  %58 = fcmp uno float %53, 0.000000e+00, !dbg !18
  %59 = or i1 %57, %58, !dbg !19
  %60 = select i1 %59, float %53, float %56, !dbg !20
  %61 = bitcast float %60 to i32, !dbg !21
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !21
  %63 = bitcast i32 %62 to float, !dbg !21
  %64 = fcmp ogt float %60, %63, !dbg !13
  %65 = fcmp uno float %60, 0.000000e+00, !dbg !18
  %66 = or i1 %64, %65, !dbg !19
  %67 = icmp eq i32 %6, 0, !dbg !21
  %68 = and i32 %7, 1, !dbg !21
  %69 = zext nneg i32 %68 to i64, !dbg !21
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69, !dbg !21
  %71 = select i1 %66, i32 %61, i32 %62, !dbg !20
  %72 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %72, i1 %67) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %73 = icmp slt i32 %5, 2, !dbg !21
  %74 = sext i32 %5 to i64, !dbg !21
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i64 %74, !dbg !21
  %76 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %73) #3, !dbg !21
  %77 = bitcast i32 %76 to float, !dbg !21
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !21
  %79 = bitcast i32 %78 to float, !dbg !21
  %80 = fcmp ogt float %77, %79, !dbg !13
  %81 = fcmp uno float %77, 0.000000e+00, !dbg !18
  %82 = or i1 %81, %80, !dbg !19
  %83 = and i32 %5, 1, !dbg !21
  %84 = icmp eq i32 %83, 0, !dbg !21
  %85 = and i1 %73, %84, !dbg !21
  %86 = select i1 %82, i32 %76, i32 %78, !dbg !20
  %87 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %87, i1 %85) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %88 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %89 = fadd float %88, 0.000000e+00, !dbg !22
  %90 = fadd float %89, -4.000000e+00, !dbg !24
  %91 = fcmp olt float %90, 0.000000e+00, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %urem = and i32 %5, 63, !dbg !27
  %92 = icmp eq i32 %urem, 0, !dbg !27
  %93 = bitcast float %90 to i32, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %0, i1 %92) #3, !dbg !27
  %94 = zext i1 %91 to i8, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %94, ptr addrspace(1) %2, i1 %92) #3, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chb6fdj2oas6inyt2bab4rpnjow3m2akeyv5hkmi7iue23ap6jau.py", directory: "inductor_cache/hb")
!4 = !{ptr @triton_per_fused_lt_max_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_lt_max_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_lt_max_sub_0", linkageName: "triton_per_fused_lt_max_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 118, column: 15, scope: !14, inlinedAt: !17)
!14 = distinct !DILexicalBlockFile(scope: !16, file: !15, discriminator: 0)
!15 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!16 = distinct !DILexicalBlockFile(scope: !7, file: !15, discriminator: 0)
!17 = !DILocation(line: 33, column: 70, scope: !7)
!18 = !DILocation(line: 120, column: 21, scope: !14, inlinedAt: !17)
!19 = !DILocation(line: 120, column: 16, scope: !14, inlinedAt: !17)
!20 = !DILocation(line: 121, column: 29, scope: !14, inlinedAt: !17)
!21 = !DILocation(line: 131, column: 29, scope: !16, inlinedAt: !17)
!22 = !DILocation(line: 73, column: 15, scope: !16, inlinedAt: !23)
!23 = !DILocation(line: 33, column: 44, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 4, scope: !7)
!27 = !DILocation(line: 39, column: 62, scope: !7)
!28 = !DILocation(line: 40, column: 59, scope: !7)
!29 = !DILocation(line: 40, column: 4, scope: !7)
