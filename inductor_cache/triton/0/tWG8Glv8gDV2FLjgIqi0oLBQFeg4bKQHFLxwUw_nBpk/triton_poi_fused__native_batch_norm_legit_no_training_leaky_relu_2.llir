; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = sdiv i32 %13, 64, !dbg !14
  %15 = srem i32 %14, 256, !dbg !15
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !16
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !17
  %19 = sext i32 %15 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %44 = fadd float %27, 0x3EE4F8B580000000, !dbg !26
  %45 = fadd float %29, 0x3EE4F8B580000000, !dbg !26
  %46 = fadd float %31, 0x3EE4F8B580000000, !dbg !26
  %47 = fadd float %33, 0x3EE4F8B580000000, !dbg !26
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %48, 0, !dbg !27
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %49, 0, !dbg !27
  br i1 %.not.i, label %55, label %50, !dbg !27

50:                                               ; preds = %7
  br i1 %.not1.i, label %53, label %51, !dbg !27

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

55:                                               ; preds = %7
  br i1 %.not1.i, label %58, label %56, !dbg !27

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !27
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %60, 0, !dbg !27
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %61, 0, !dbg !27
  br i1 %.not.i1, label %67, label %62, !dbg !27

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !27

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !27

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %63, %65, %68, %70
  %.0.i3 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !27
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i6 = icmp eq i32 %72, 0, !dbg !27
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i9 = icmp eq i32 %73, 0, !dbg !27
  br i1 %.not.i6, label %79, label %74, !dbg !27

74:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %77, label %75, !dbg !27

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

79:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %82, label %80, !dbg !27

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %75, %77, %80, %82
  %.0.i8 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !27
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i11 = icmp eq i32 %84, 0, !dbg !27
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i14 = icmp eq i32 %85, 0, !dbg !27
  br i1 %.not.i11, label %91, label %86, !dbg !27

86:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %89, label %87, !dbg !27

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

91:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %94, label %92, !dbg !27

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %87, %89, %92, %94
  %.0.i13 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !17
  %97 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !19
  %98 = insertelement <4 x i32> %97, i32 %23, i64 1, !dbg !19
  %99 = insertelement <4 x i32> %98, i32 %22, i64 2, !dbg !19
  %100 = insertelement <4 x i32> %99, i32 %21, i64 3, !dbg !19
  %101 = bitcast <4 x i32> %100 to <4 x float>, !dbg !19
  %102 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !17
  %103 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !17
  %104 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !17
  %105 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !25
  %106 = insertelement <4 x i32> %105, i32 %42, i64 1, !dbg !25
  %107 = insertelement <4 x i32> %106, i32 %41, i64 2, !dbg !25
  %108 = insertelement <4 x i32> %107, i32 %40, i64 3, !dbg !25
  %109 = bitcast <4 x i32> %108 to <4 x float>, !dbg !25
  %110 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !23
  %111 = insertelement <4 x i32> %110, i32 %37, i64 1, !dbg !23
  %112 = insertelement <4 x i32> %111, i32 %36, i64 2, !dbg !23
  %113 = insertelement <4 x i32> %112, i32 %35, i64 3, !dbg !23
  %114 = bitcast <4 x i32> %113 to <4 x float>, !dbg !23
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !28
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !28
  %119 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !17
  %120 = insertelement <4 x i32> %119, i32 %102, i64 1, !dbg !17
  %121 = insertelement <4 x i32> %120, i32 %103, i64 2, !dbg !17
  %122 = insertelement <4 x i32> %121, i32 %104, i64 3, !dbg !17
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !17
  %124 = fsub <4 x float> %123, %101, !dbg !29
  %125 = insertelement <4 x float> poison, float %118, i64 0, !dbg !30
  %126 = insertelement <4 x float> %125, float %117, i64 1, !dbg !30
  %127 = insertelement <4 x float> %126, float %116, i64 2, !dbg !30
  %128 = insertelement <4 x float> %127, float %115, i64 3, !dbg !30
  %129 = fmul <4 x float> %124, %128, !dbg !30
  %130 = fmul <4 x float> %129, %114, !dbg !31
  %131 = fadd <4 x float> %130, %109, !dbg !32
  %132 = fcmp ogt <4 x float> %131, zeroinitializer, !dbg !33
  %133 = extractelement <4 x float> %131, i64 3, !dbg !34
  %134 = fmul float %133, 0x3FC99999A0000000, !dbg !35
  %135 = extractelement <4 x float> %131, i64 2, !dbg !34
  %136 = fmul float %135, 0x3FC99999A0000000, !dbg !35
  %137 = extractelement <4 x float> %131, i64 1, !dbg !34
  %138 = fmul float %137, 0x3FC99999A0000000, !dbg !35
  %139 = extractelement <4 x float> %131, i64 0, !dbg !34
  %140 = fmul float %139, 0x3FC99999A0000000, !dbg !35
  %141 = extractelement <4 x i1> %132, i64 3, !dbg !34
  %142 = select i1 %141, float %133, float %134, !dbg !34
  %143 = extractelement <4 x i1> %132, i64 2, !dbg !34
  %144 = select i1 %143, float %135, float %136, !dbg !34
  %145 = extractelement <4 x i1> %132, i64 1, !dbg !34
  %146 = select i1 %145, float %137, float %138, !dbg !34
  %147 = extractelement <4 x i1> %132, i64 0, !dbg !34
  %148 = select i1 %147, float %139, float %140, !dbg !34
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !36
  %150 = bitcast float %142 to i32, !dbg !37
  %151 = bitcast float %144 to i32, !dbg !37
  %152 = bitcast float %146 to i32, !dbg !37
  %153 = bitcast float %148 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %150, i32 %151, i32 %152, i32 %153, ptr addrspace(1) %149, i1 true) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co367ryx2vu3vdtlcsr34hul2xs6tab7yph57kxttywx7h46sysw.py", directory: "inductor_cache/o3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 35, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 28, scope: !7)
!37 = !DILocation(line: 47, column: 40, scope: !7)
!38 = !DILocation(line: 47, column: 4, scope: !7)
