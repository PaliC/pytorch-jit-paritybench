#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":19:0)
#loc1 = loc(unknown)
#loc29 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":43:41)
#loc83 = loc(callsite(#loc1 at #loc29))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__native_batch_norm_legit_cat_16(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c262144_i32 = arith.constant 262144 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<2.000000e-01> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c4096_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc8)
    %8:3 = scf.for %arg6 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg7 = %cst_0, %arg8 = %cst_0, %arg9 = %cst_0) -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>)  : i32 {
      %36 = tt.splat %arg6 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc10)
      %37 = arith.addi %36, %3 : tensor<1x2048xi32, #blocked> loc(#loc10)
      %38 = arith.cmpi slt, %37, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc11)
      %39 = arith.addi %37, %5 : tensor<1x2048xi32, #blocked> loc(#loc6)
      %40 = tt.addptr %6, %39 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc7)
      %41 = arith.andi %38, %7 : tensor<1x2048xi1, #blocked> loc(#loc8)
      %42 = tt.load %40, %41, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc12)
      %43 = arith.cmpi eq, %arg6, %c0_i32 : i32 loc(#loc13)
      %44:3 = scf.if %43 -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) {
        scf.yield %cst_0, %42, %cst_1 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc74)
      } else {
        %48 = arith.subf %42, %arg7 : tensor<1x2048xf32, #blocked> loc(#loc75)
        %49 = arith.addf %arg9, %cst_1 : tensor<1x2048xf32, #blocked> loc(#loc76)
        %50 = arith.divf %48, %49 : tensor<1x2048xf32, #blocked> loc(#loc77)
        %51 = arith.addf %arg7, %50 : tensor<1x2048xf32, #blocked> loc(#loc78)
        %52 = arith.subf %42, %51 : tensor<1x2048xf32, #blocked> loc(#loc79)
        %53 = arith.mulf %48, %52 : tensor<1x2048xf32, #blocked> loc(#loc80)
        %54 = arith.addf %arg8, %53 : tensor<1x2048xf32, #blocked> loc(#loc81)
        scf.yield %54, %51, %49 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc81)
      } loc(#loc73)
      %45 = arith.select %41, %44#1, %arg7 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc24)
      %46 = arith.select %41, %44#0, %arg8 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc25)
      %47 = arith.select %41, %44#2, %arg9 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc26)
      scf.yield %45, %46, %47 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc27)
    } loc(#loc9)
    %9:3 = "tt.reduce"(%8#0, %8#1, %8#2) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc29)), %arg7: f32 loc(callsite(#loc1 at #loc29)), %arg8: f32 loc(callsite(#loc1 at #loc29)), %arg9: f32 loc(callsite(#loc1 at #loc29)), %arg10: f32 loc(callsite(#loc1 at #loc29)), %arg11: f32 loc(callsite(#loc1 at #loc29))):
      %36 = arith.subf %arg9, %arg6 : f32 loc(#loc96)
      %37 = arith.addf %arg8, %arg11 : f32 loc(#loc97)
      %38 = arith.cmpf oeq, %37, %cst_3 : f32 loc(#loc98)
      %39 = arith.divf %arg11, %37 : f32 loc(#loc99)
      %40 = arith.select %38, %cst_3, %39 : f32 loc(#loc100)
      %41 = arith.mulf %36, %40 : f32 loc(#loc101)
      %42 = arith.addf %arg6, %41 : f32 loc(#loc102)
      %43 = arith.addf %arg7, %arg10 : f32 loc(#loc103)
      %44 = arith.mulf %36, %36 : f32 loc(#loc104)
      %45 = arith.mulf %44, %arg8 : f32 loc(#loc105)
      %46 = arith.mulf %45, %40 : f32 loc(#loc106)
      %47 = arith.addf %43, %46 : f32 loc(#loc107)
      tt.reduce.return %42, %47, %37 : f32, f32, f32 loc(#loc82)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc82)
    %10 = triton_gpu.convert_layout %9#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc42)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc42)
    %12 = tt.expand_dims %9#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc42)
    %13 = triton_gpu.convert_layout %9#1 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc43)
    %14 = tt.expand_dims %13 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc44)
    %15 = tt.expand_dims %9#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc44)
    %16 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc45)
    %17 = tt.splat %16 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc46)
    %18 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc46)
    tt.store %17, %11, %18 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc46)
    %19 = arith.divf %14, %cst_7 : tensor<1x1xf32, #blocked1> loc(#loc47)
    %20 = arith.divf %15, %cst : tensor<1x1xf32, #blocked> loc(#loc47)
    %21 = arith.addf %19, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc48)
    %22 = arith.addf %20, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc48)
    %23 = tt.extern_elementwise %21 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc43)
    %24 = tt.extern_elementwise %22 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc43)
    gpu.barrier loc(#loc49)
    %25 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc50)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc51)
    tt.store %26, %23, %18 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc51)
    %27 = arith.remsi %0, %c32_i32 : i32 loc(#loc52)
    %28 = arith.divsi %0, %c32_i32 : i32 loc(#loc53)
    %29 = tt.broadcast %12 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc54)
    %30 = tt.broadcast %24 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc55)
    %31 = arith.muli %27, %c4096_i32 : i32 loc(#loc56)
    %32 = tt.splat %31 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc57)
    %33 = arith.muli %28, %c262144_i32 : i32 loc(#loc58)
    %34 = tt.splat %33 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc59)
    %35 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc60)
    scf.for %arg6 = %c0_i32 to %c4096_i32 step %c2048_i32  : i32 {
      %36 = tt.splat %arg6 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc62)
      %37 = arith.addi %36, %3 : tensor<1x2048xi32, #blocked> loc(#loc62)
      %38 = arith.cmpi slt, %37, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc63)
      %39 = arith.addi %37, %5 : tensor<1x2048xi32, #blocked> loc(#loc64)
      %40 = tt.addptr %6, %39 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc65)
      %41 = arith.andi %38, %7 : tensor<1x2048xi1, #blocked> loc(#loc66)
      %42 = tt.load %40, %41, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc67)
      %43 = arith.subf %42, %29 : tensor<1x2048xf32, #blocked> loc(#loc54)
      %44 = arith.mulf %43, %30 : tensor<1x2048xf32, #blocked> loc(#loc55)
      %45 = arith.cmpf ogt, %44, %cst_0 : tensor<1x2048xf32, #blocked> loc(#loc68)
      %46 = arith.mulf %44, %cst_4 : tensor<1x2048xf32, #blocked> loc(#loc69)
      %47 = arith.select %45, %44, %46 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc70)
      %48 = arith.addi %37, %32 : tensor<1x2048xi32, #blocked> loc(#loc57)
      %49 = arith.addi %48, %34 : tensor<1x2048xi32, #blocked> loc(#loc59)
      %50 = tt.addptr %35, %49 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc60)
      tt.store %50, %47, %41 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc71)
    } loc(#loc61)
    tt.return loc(#loc72)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":22:28)
#loc3 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":24:21)
#loc4 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":25:33)
#loc5 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":34:44)
#loc6 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":34:39)
#loc7 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":34:34)
#loc8 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":34:57)
#loc9 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":30:36)
#loc10 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":31:27)
#loc11 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":32:25)
#loc12 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":34:49)
#loc13 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":37:62)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc15 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":37:51)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc24 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":39:60)
#loc25 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":40:56)
#loc26 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":41:64)
#loc27 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":41:8)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc42 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":45:20)
#loc43 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":53:27)
#loc44 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":46:20)
#loc45 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":48:25)
#loc46 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":48:36)
#loc47 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":50:18)
#loc48 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":52:18)
#loc49 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":54:4)
#loc50 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":55:28)
#loc51 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":55:39)
#loc52 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":56:19)
#loc53 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":57:19)
#loc54 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":63:24)
#loc55 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":64:24)
#loc56 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":70:39)
#loc57 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":70:34)
#loc58 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":70:51)
#loc59 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":70:44)
#loc60 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":70:29)
#loc61 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":58:36)
#loc62 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":59:27)
#loc63 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":60:25)
#loc64 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":62:40)
#loc65 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":62:35)
#loc66 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":62:58)
#loc67 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":62:50)
#loc68 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":66:24)
#loc69 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":68:24)
#loc70 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":69:39)
#loc71 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":70:63)
#loc72 = loc("inductor_cache/2l/c2lo44zf3x2cruowvlqpoif5hb2kzu7yq5yhtp2okrc5rhcx7eb3.py":58:4)
#loc73 = loc(callsite(#loc14 at #loc15))
#loc74 = loc(callsite(#loc16 at #loc15))
#loc75 = loc(callsite(#loc17 at #loc15))
#loc76 = loc(callsite(#loc18 at #loc15))
#loc77 = loc(callsite(#loc19 at #loc15))
#loc78 = loc(callsite(#loc20 at #loc15))
#loc79 = loc(callsite(#loc21 at #loc15))
#loc80 = loc(callsite(#loc22 at #loc15))
#loc81 = loc(callsite(#loc23 at #loc15))
#loc82 = loc(callsite(#loc28 at #loc29))
#loc84 = loc(callsite(#loc30 at #loc28))
#loc85 = loc(callsite(#loc31 at #loc28))
#loc86 = loc(callsite(#loc32 at #loc28))
#loc87 = loc(callsite(#loc33 at #loc28))
#loc88 = loc(callsite(#loc34 at #loc28))
#loc89 = loc(callsite(#loc35 at #loc28))
#loc90 = loc(callsite(#loc36 at #loc28))
#loc91 = loc(callsite(#loc37 at #loc28))
#loc92 = loc(callsite(#loc38 at #loc28))
#loc93 = loc(callsite(#loc39 at #loc28))
#loc94 = loc(callsite(#loc40 at #loc28))
#loc95 = loc(callsite(#loc41 at #loc28))
#loc96 = loc(callsite(#loc84 at #loc29))
#loc97 = loc(callsite(#loc85 at #loc29))
#loc98 = loc(callsite(#loc86 at #loc29))
#loc99 = loc(callsite(#loc87 at #loc29))
#loc100 = loc(callsite(#loc88 at #loc29))
#loc101 = loc(callsite(#loc89 at #loc29))
#loc102 = loc(callsite(#loc90 at #loc29))
#loc103 = loc(callsite(#loc91 at #loc29))
#loc104 = loc(callsite(#loc92 at #loc29))
#loc105 = loc(callsite(#loc93 at #loc29))
#loc106 = loc(callsite(#loc94 at #loc29))
#loc107 = loc(callsite(#loc95 at #loc29))
