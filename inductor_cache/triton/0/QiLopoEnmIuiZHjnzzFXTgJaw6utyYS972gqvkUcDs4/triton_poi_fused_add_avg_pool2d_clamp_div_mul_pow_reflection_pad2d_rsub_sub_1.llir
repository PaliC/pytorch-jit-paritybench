; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 400, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 5, !dbg !15
  %13 = mul i32 %12, 5, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = srem i32 %12, 5, !dbg !17
  %15 = sdiv i32 %10, 25, !dbg !18
  %16 = shl nsw i32 %14, 3, !dbg !19
  %17 = shl i32 %15, 6, !dbg !20
  %18 = add i32 %17, %.decomposed, !dbg !21
  %19 = add i32 %18, %16, !dbg !22
  %20 = sext i32 %19 to i64, !dbg !23
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !23
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %11) #1, !dbg !24
  %23 = bitcast i32 %22 to float, !dbg !24
  %24 = add i32 %18, 1, !dbg !25
  %25 = add i32 %24, %16, !dbg !26
  %26 = sext i32 %25 to i64, !dbg !27
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !27
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !28
  %29 = bitcast i32 %28 to float, !dbg !28
  %30 = add i32 %18, 2, !dbg !29
  %31 = add i32 %30, %16, !dbg !30
  %32 = sext i32 %31 to i64, !dbg !31
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !31
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %11) #1, !dbg !32
  %35 = bitcast i32 %34 to float, !dbg !32
  %36 = add i32 %18, 3, !dbg !33
  %37 = add i32 %36, %16, !dbg !34
  %38 = sext i32 %37 to i64, !dbg !35
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !35
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %11) #1, !dbg !36
  %41 = bitcast i32 %40 to float, !dbg !36
  %42 = add i32 %18, 8, !dbg !37
  %43 = add i32 %42, %16, !dbg !38
  %44 = sext i32 %43 to i64, !dbg !39
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !39
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #1, !dbg !40
  %47 = bitcast i32 %46 to float, !dbg !40
  %48 = add i32 %18, 9, !dbg !41
  %49 = add i32 %48, %16, !dbg !42
  %50 = sext i32 %49 to i64, !dbg !43
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !43
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %11) #1, !dbg !44
  %53 = bitcast i32 %52 to float, !dbg !44
  %54 = add i32 %18, 10, !dbg !45
  %55 = add i32 %54, %16, !dbg !46
  %56 = sext i32 %55 to i64, !dbg !47
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !47
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %11) #1, !dbg !48
  %59 = bitcast i32 %58 to float, !dbg !48
  %60 = add i32 %18, 11, !dbg !49
  %61 = add i32 %60, %16, !dbg !50
  %62 = sext i32 %61 to i64, !dbg !51
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !51
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %11) #1, !dbg !52
  %65 = bitcast i32 %64 to float, !dbg !52
  %66 = add i32 %18, 16, !dbg !53
  %67 = add i32 %66, %16, !dbg !54
  %68 = sext i32 %67 to i64, !dbg !55
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !55
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %11) #1, !dbg !56
  %71 = bitcast i32 %70 to float, !dbg !56
  %72 = add i32 %18, 17, !dbg !57
  %73 = add i32 %72, %16, !dbg !58
  %74 = sext i32 %73 to i64, !dbg !59
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !59
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %11) #1, !dbg !60
  %77 = bitcast i32 %76 to float, !dbg !60
  %78 = add i32 %18, 18, !dbg !61
  %79 = add i32 %78, %16, !dbg !62
  %80 = sext i32 %79 to i64, !dbg !63
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !63
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %11) #1, !dbg !64
  %83 = bitcast i32 %82 to float, !dbg !64
  %84 = add i32 %18, 19, !dbg !65
  %85 = add i32 %84, %16, !dbg !66
  %86 = sext i32 %85 to i64, !dbg !67
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !67
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %11) #1, !dbg !68
  %89 = bitcast i32 %88 to float, !dbg !68
  %90 = add i32 %18, 24, !dbg !69
  %91 = add i32 %90, %16, !dbg !70
  %92 = sext i32 %91 to i64, !dbg !71
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !71
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %11) #1, !dbg !72
  %95 = bitcast i32 %94 to float, !dbg !72
  %96 = add i32 %18, 25, !dbg !73
  %97 = add i32 %96, %16, !dbg !74
  %98 = sext i32 %97 to i64, !dbg !75
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !75
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %11) #1, !dbg !76
  %101 = bitcast i32 %100 to float, !dbg !76
  %102 = add i32 %18, 26, !dbg !77
  %103 = add i32 %102, %16, !dbg !78
  %104 = sext i32 %103 to i64, !dbg !79
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !79
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %11) #1, !dbg !80
  %107 = bitcast i32 %106 to float, !dbg !80
  %108 = add i32 %18, 27, !dbg !81
  %109 = add i32 %108, %16, !dbg !82
  %110 = sext i32 %109 to i64, !dbg !83
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !83
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %11) #1, !dbg !84
  %113 = bitcast i32 %112 to float, !dbg !84
  %114 = add nsw i32 %.decomposed, -2, !dbg !85
  %115 = tail call i32 @llvm.abs.i32(i32 %114, i1 true), !dbg !86
  %116 = add nsw i32 %115, -3, !dbg !87
  %117 = tail call i32 @llvm.abs.i32(i32 %116, i1 true), !dbg !88
  %118 = sub nuw nsw i32 15, %117, !dbg !89
  %119 = add nsw i32 %14, -2, !dbg !90
  %120 = tail call i32 @llvm.abs.i32(i32 %119, i1 true), !dbg !91
  %121 = add nsw i32 %120, -3, !dbg !92
  %122 = tail call i32 @llvm.abs.i32(i32 %121, i1 true), !dbg !93
  %123 = mul nsw i32 %122, -4, !dbg !94
  %124 = shl nsw i32 %15, 4, !dbg !95
  %125 = or disjoint i32 %118, %124, !dbg !96
  %126 = add i32 %125, %123, !dbg !97
  %127 = sext i32 %126 to i64, !dbg !98
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !98
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %11) #1, !dbg !99
  %130 = add nsw i32 %.decomposed, -1, !dbg !100
  %131 = tail call i32 @llvm.abs.i32(i32 %130, i1 true), !dbg !101
  %132 = add nsw i32 %131, -3, !dbg !102
  %133 = tail call i32 @llvm.abs.i32(i32 %132, i1 true), !dbg !103
  %134 = sub nuw nsw i32 15, %133, !dbg !104
  %135 = or disjoint i32 %134, %124, !dbg !105
  %136 = add i32 %135, %123, !dbg !106
  %137 = sext i32 %136 to i64, !dbg !107
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !107
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %11) #1, !dbg !108
  %140 = add nsw i32 %.decomposed, -3, !dbg !109
  %141 = tail call i32 @llvm.abs.i32(i32 %140, i1 true), !dbg !110
  %142 = sub nuw nsw i32 15, %141, !dbg !111
  %143 = or disjoint i32 %142, %124, !dbg !112
  %144 = add i32 %143, %123, !dbg !113
  %145 = sext i32 %144 to i64, !dbg !114
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !114
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %11) #1, !dbg !115
  %148 = sub nuw nsw i32 15, %115, !dbg !116
  %149 = or disjoint i32 %148, %124, !dbg !117
  %150 = add i32 %149, %123, !dbg !118
  %151 = sext i32 %150 to i64, !dbg !119
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !119
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %11) #1, !dbg !120
  %154 = add nsw i32 %14, -1, !dbg !121
  %155 = tail call i32 @llvm.abs.i32(i32 %154, i1 true), !dbg !122
  %156 = add nsw i32 %155, -3, !dbg !123
  %157 = tail call i32 @llvm.abs.i32(i32 %156, i1 true), !dbg !124
  %158 = mul nsw i32 %157, -4, !dbg !125
  %159 = add i32 %125, %158, !dbg !126
  %160 = sext i32 %159 to i64, !dbg !127
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !127
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %11) #1, !dbg !128
  %163 = add i32 %135, %158, !dbg !129
  %164 = sext i32 %163 to i64, !dbg !130
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %164, !dbg !130
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %11) #1, !dbg !131
  %167 = add i32 %143, %158, !dbg !132
  %168 = sext i32 %167 to i64, !dbg !133
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !133
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %11) #1, !dbg !134
  %171 = add i32 %149, %158, !dbg !135
  %172 = sext i32 %171 to i64, !dbg !136
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !136
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %11) #1, !dbg !137
  %175 = add nsw i32 %14, -3, !dbg !138
  %176 = tail call i32 @llvm.abs.i32(i32 %175, i1 true), !dbg !139
  %177 = mul nsw i32 %176, -4, !dbg !140
  %178 = add nsw i32 %177, %124, !dbg !141
  %179 = add nsw i32 %178, %118, !dbg !142
  %180 = sext i32 %179 to i64, !dbg !143
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !143
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %11) #1, !dbg !144
  %183 = add nsw i32 %178, %134, !dbg !145
  %184 = sext i32 %183 to i64, !dbg !146
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !146
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %11) #1, !dbg !147
  %187 = add i32 %143, %177, !dbg !148
  %188 = sext i32 %187 to i64, !dbg !149
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !149
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %11) #1, !dbg !150
  %191 = add i32 %149, %177, !dbg !151
  %192 = sext i32 %191 to i64, !dbg !152
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !152
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %11) #1, !dbg !153
  %195 = mul nsw i32 %120, -4, !dbg !154
  %196 = add nsw i32 %195, %124, !dbg !155
  %197 = add nsw i32 %196, %118, !dbg !156
  %198 = sext i32 %197 to i64, !dbg !157
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %198, !dbg !157
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %11) #1, !dbg !158
  %201 = add nsw i32 %196, %134, !dbg !159
  %202 = sext i32 %201 to i64, !dbg !160
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %202, !dbg !160
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %11) #1, !dbg !161
  %205 = add i32 %143, %195, !dbg !162
  %206 = sext i32 %205 to i64, !dbg !163
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %206, !dbg !163
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %11) #1, !dbg !164
  %209 = add i32 %149, %195, !dbg !165
  %210 = sext i32 %209 to i64, !dbg !166
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %210, !dbg !166
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %11) #1, !dbg !167
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !168
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %11) #1, !dbg !169
  %215 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !170
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %11) #1, !dbg !171
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !172
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %11) #1, !dbg !173
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !174
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %11) #1, !dbg !175
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %160, !dbg !176
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %11) #1, !dbg !177
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %164, !dbg !178
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %11) #1, !dbg !179
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %168, !dbg !180
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %11) #1, !dbg !181
  %227 = getelementptr float, ptr addrspace(1) %3, i64 %172, !dbg !182
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 %11) #1, !dbg !183
  %229 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !137
  %230 = insertelement <2 x i32> %229, i32 %228, i64 1, !dbg !137
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !137
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %180, !dbg !184
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %11) #1, !dbg !185
  %234 = getelementptr float, ptr addrspace(1) %3, i64 %184, !dbg !186
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %11) #1, !dbg !187
  %236 = getelementptr float, ptr addrspace(1) %3, i64 %188, !dbg !188
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %11) #1, !dbg !189
  %238 = getelementptr float, ptr addrspace(1) %3, i64 %192, !dbg !190
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %11) #1, !dbg !191
  %240 = getelementptr float, ptr addrspace(1) %3, i64 %198, !dbg !192
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %11) #1, !dbg !193
  %242 = getelementptr float, ptr addrspace(1) %3, i64 %202, !dbg !194
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %11) #1, !dbg !195
  %244 = getelementptr float, ptr addrspace(1) %3, i64 %206, !dbg !196
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %11) #1, !dbg !197
  %246 = getelementptr float, ptr addrspace(1) %3, i64 %210, !dbg !198
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %11) #1, !dbg !199
  %248 = fadd float %23, %29, !dbg !200
  %249 = fadd float %248, %35, !dbg !201
  %250 = fadd float %249, %41, !dbg !202
  %251 = fadd float %250, %47, !dbg !203
  %252 = fadd float %251, %53, !dbg !204
  %253 = fadd float %252, %59, !dbg !205
  %254 = fadd float %253, %65, !dbg !206
  %255 = fadd float %254, %71, !dbg !207
  %256 = fadd float %255, %77, !dbg !208
  %257 = fadd float %256, %83, !dbg !209
  %258 = fadd float %257, %89, !dbg !210
  %259 = fadd float %258, %95, !dbg !211
  %260 = fadd float %259, %101, !dbg !212
  %261 = fadd float %260, %107, !dbg !213
  %262 = fadd float %261, %113, !dbg !214
  %263 = fmul float %262, 6.250000e-02, !dbg !215
  %264 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !99
  %265 = insertelement <2 x i32> %264, i32 %214, i64 1, !dbg !99
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !99
  %267 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !108
  %268 = insertelement <2 x i32> %267, i32 %216, i64 1, !dbg !108
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !108
  %270 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !115
  %271 = insertelement <2 x i32> %270, i32 %218, i64 1, !dbg !115
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !115
  %273 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !120
  %274 = insertelement <2 x i32> %273, i32 %220, i64 1, !dbg !120
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !120
  %276 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !128
  %277 = insertelement <2 x i32> %276, i32 %222, i64 1, !dbg !128
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !128
  %279 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !131
  %280 = insertelement <2 x i32> %279, i32 %224, i64 1, !dbg !131
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !131
  %282 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !134
  %283 = insertelement <2 x i32> %282, i32 %226, i64 1, !dbg !134
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !134
  %285 = fmul <2 x float> %284, %284, !dbg !216
  %286 = fadd <2 x float> %266, %269, !dbg !217
  %287 = fadd <2 x float> %286, %272, !dbg !218
  %288 = fadd <2 x float> %287, %275, !dbg !219
  %289 = fadd <2 x float> %288, %278, !dbg !220
  %290 = fadd <2 x float> %289, %281, !dbg !221
  %291 = fadd <2 x float> %290, %284, !dbg !222
  %292 = fmul <2 x float> %266, %266, !dbg !223
  %293 = fmul <2 x float> %269, %269, !dbg !224
  %294 = fadd <2 x float> %292, %293, !dbg !225
  %295 = fmul <2 x float> %272, %272, !dbg !226
  %296 = fadd <2 x float> %295, %294, !dbg !227
  %297 = fmul <2 x float> %275, %275, !dbg !228
  %298 = fadd <2 x float> %297, %296, !dbg !229
  %299 = fmul <2 x float> %278, %278, !dbg !230
  %300 = fadd <2 x float> %299, %298, !dbg !231
  %301 = fmul <2 x float> %281, %281, !dbg !232
  %302 = fadd <2 x float> %301, %300, !dbg !233
  %303 = fmul <2 x float> %284, %284, !dbg !234
  %304 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !144
  %305 = insertelement <2 x i32> %304, i32 %233, i64 1, !dbg !144
  %306 = bitcast <2 x i32> %305 to <2 x float>, !dbg !144
  %307 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !147
  %308 = insertelement <2 x i32> %307, i32 %235, i64 1, !dbg !147
  %309 = bitcast <2 x i32> %308 to <2 x float>, !dbg !147
  %310 = insertelement <2 x i32> poison, i32 %190, i64 0, !dbg !150
  %311 = insertelement <2 x i32> %310, i32 %237, i64 1, !dbg !150
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !150
  %313 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !153
  %314 = insertelement <2 x i32> %313, i32 %239, i64 1, !dbg !153
  %315 = bitcast <2 x i32> %314 to <2 x float>, !dbg !153
  %316 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !158
  %317 = insertelement <2 x i32> %316, i32 %241, i64 1, !dbg !158
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !158
  %319 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !161
  %320 = insertelement <2 x i32> %319, i32 %243, i64 1, !dbg !161
  %321 = bitcast <2 x i32> %320 to <2 x float>, !dbg !161
  %322 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !164
  %323 = insertelement <2 x i32> %322, i32 %245, i64 1, !dbg !164
  %324 = bitcast <2 x i32> %323 to <2 x float>, !dbg !164
  %325 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !167
  %326 = insertelement <2 x i32> %325, i32 %247, i64 1, !dbg !167
  %327 = bitcast <2 x i32> %326 to <2 x float>, !dbg !167
  %328 = fadd <2 x float> %291, %231, !dbg !235
  %329 = fadd <2 x float> %328, %306, !dbg !236
  %330 = fadd <2 x float> %329, %309, !dbg !237
  %331 = fadd <2 x float> %330, %312, !dbg !238
  %332 = fadd <2 x float> %331, %315, !dbg !239
  %333 = fadd <2 x float> %332, %318, !dbg !240
  %334 = fadd <2 x float> %333, %321, !dbg !241
  %335 = fadd <2 x float> %334, %324, !dbg !242
  %336 = fadd <2 x float> %335, %327, !dbg !243
  %337 = fmul <2 x float> %336, splat (float 6.250000e-02), !dbg !244
  %338 = shufflevector <2 x float> %285, <2 x float> %303, <2 x i32> <i32 0, i32 3>, !dbg !245
  %339 = fadd <2 x float> %338, %302, !dbg !245
  %340 = fmul <2 x float> %231, %231, !dbg !246
  %341 = fadd <2 x float> %340, %339, !dbg !247
  %342 = fmul <2 x float> %306, %306, !dbg !248
  %343 = fadd <2 x float> %342, %341, !dbg !249
  %344 = fmul <2 x float> %309, %309, !dbg !250
  %345 = fadd <2 x float> %344, %343, !dbg !251
  %346 = fmul <2 x float> %312, %312, !dbg !252
  %347 = fadd <2 x float> %346, %345, !dbg !253
  %348 = fmul <2 x float> %315, %315, !dbg !254
  %349 = fadd <2 x float> %348, %347, !dbg !255
  %350 = fmul <2 x float> %318, %318, !dbg !256
  %351 = fadd <2 x float> %350, %349, !dbg !257
  %352 = fmul <2 x float> %321, %321, !dbg !258
  %353 = fadd <2 x float> %352, %351, !dbg !259
  %354 = fmul <2 x float> %324, %324, !dbg !260
  %355 = fadd <2 x float> %354, %353, !dbg !261
  %356 = fmul <2 x float> %327, %327, !dbg !262
  %357 = fadd <2 x float> %356, %355, !dbg !263
  %358 = fmul <2 x float> %357, splat (float 6.250000e-02), !dbg !264
  %359 = extractelement <2 x float> %337, i64 0, !dbg !265
  %360 = fmul float %359, 2.000000e+00, !dbg !266
  %361 = extractelement <2 x float> %337, i64 1, !dbg !265
  %362 = fmul float %360, %361, !dbg !267
  %363 = fadd float %362, 0x3F1A36E2E0000000, !dbg !268
  %364 = fmul float %359, %361, !dbg !265
  %365 = fsub float %263, %364, !dbg !269
  %366 = fmul float %365, 2.000000e+00, !dbg !270
  %367 = fadd float %366, 0x3F4D7DBF40000000, !dbg !271
  %368 = fmul float %363, %367, !dbg !272
  %369 = fmul <2 x float> %337, %337, !dbg !273
  %370 = fsub <2 x float> %358, %369, !dbg !274
  %371 = shufflevector <2 x float> %369, <2 x float> %370, <2 x i32> <i32 0, i32 2>, !dbg !275
  %372 = shufflevector <2 x float> %369, <2 x float> %370, <2 x i32> <i32 1, i32 3>, !dbg !275
  %373 = fadd <2 x float> %371, %372, !dbg !275
  %374 = fadd <2 x float> %373, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !276
  %shift = shufflevector <2 x float> %374, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !277
  %375 = fmul <2 x float> %374, %shift, !dbg !277
  %376 = extractelement <2 x float> %375, i64 0, !dbg !277
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %376) #1, !dbg !278
  %378 = fsub float 1.000000e+00, %377, !dbg !279
  %379 = fmul float %378, 5.000000e-01, !dbg !280
  %.inv = fcmp ole float %379, 0.000000e+00, !dbg !281
  %380 = select i1 %.inv, float 0.000000e+00, float %379, !dbg !281
  %381 = fcmp olt float %380, 1.000000e+00, !dbg !285
  %382 = fcmp uno float %380, 0.000000e+00, !dbg !287
  %383 = or i1 %381, %382, !dbg !288
  %384 = sext i32 %10 to i64, !dbg !289
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %384, !dbg !289
  %386 = bitcast float %380 to i32, !dbg !290
  %387 = select i1 %383, i32 %386, i32 1065353216, !dbg !291
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %387, ptr addrspace(1) %385, i1 %11) #1, !dbg !290
  ret void, !dbg !292
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cutnjjgp65xpmgyksjyevs5al5yqlmzstv7ufg2aaqsu7hqceidv.py", directory: "inductor_cache/ut")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1", linkageName: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 42, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 50, scope: !7)
!25 = !DILocation(line: 29, column: 39, scope: !7)
!26 = !DILocation(line: 29, column: 46, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 54, scope: !7)
!29 = !DILocation(line: 30, column: 39, scope: !7)
!30 = !DILocation(line: 30, column: 46, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 54, scope: !7)
!33 = !DILocation(line: 31, column: 39, scope: !7)
!34 = !DILocation(line: 31, column: 46, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 54, scope: !7)
!37 = !DILocation(line: 32, column: 39, scope: !7)
!38 = !DILocation(line: 32, column: 46, scope: !7)
!39 = !DILocation(line: 32, column: 30, scope: !7)
!40 = !DILocation(line: 32, column: 54, scope: !7)
!41 = !DILocation(line: 33, column: 39, scope: !7)
!42 = !DILocation(line: 33, column: 46, scope: !7)
!43 = !DILocation(line: 33, column: 30, scope: !7)
!44 = !DILocation(line: 33, column: 54, scope: !7)
!45 = !DILocation(line: 34, column: 41, scope: !7)
!46 = !DILocation(line: 34, column: 48, scope: !7)
!47 = !DILocation(line: 34, column: 31, scope: !7)
!48 = !DILocation(line: 34, column: 56, scope: !7)
!49 = !DILocation(line: 35, column: 41, scope: !7)
!50 = !DILocation(line: 35, column: 48, scope: !7)
!51 = !DILocation(line: 35, column: 31, scope: !7)
!52 = !DILocation(line: 35, column: 56, scope: !7)
!53 = !DILocation(line: 36, column: 41, scope: !7)
!54 = !DILocation(line: 36, column: 48, scope: !7)
!55 = !DILocation(line: 36, column: 31, scope: !7)
!56 = !DILocation(line: 36, column: 56, scope: !7)
!57 = !DILocation(line: 37, column: 41, scope: !7)
!58 = !DILocation(line: 37, column: 48, scope: !7)
!59 = !DILocation(line: 37, column: 31, scope: !7)
!60 = !DILocation(line: 37, column: 56, scope: !7)
!61 = !DILocation(line: 38, column: 41, scope: !7)
!62 = !DILocation(line: 38, column: 48, scope: !7)
!63 = !DILocation(line: 38, column: 31, scope: !7)
!64 = !DILocation(line: 38, column: 56, scope: !7)
!65 = !DILocation(line: 39, column: 41, scope: !7)
!66 = !DILocation(line: 39, column: 48, scope: !7)
!67 = !DILocation(line: 39, column: 31, scope: !7)
!68 = !DILocation(line: 39, column: 56, scope: !7)
!69 = !DILocation(line: 40, column: 41, scope: !7)
!70 = !DILocation(line: 40, column: 48, scope: !7)
!71 = !DILocation(line: 40, column: 31, scope: !7)
!72 = !DILocation(line: 40, column: 56, scope: !7)
!73 = !DILocation(line: 41, column: 41, scope: !7)
!74 = !DILocation(line: 41, column: 48, scope: !7)
!75 = !DILocation(line: 41, column: 31, scope: !7)
!76 = !DILocation(line: 41, column: 56, scope: !7)
!77 = !DILocation(line: 42, column: 41, scope: !7)
!78 = !DILocation(line: 42, column: 48, scope: !7)
!79 = !DILocation(line: 42, column: 31, scope: !7)
!80 = !DILocation(line: 42, column: 56, scope: !7)
!81 = !DILocation(line: 43, column: 41, scope: !7)
!82 = !DILocation(line: 43, column: 48, scope: !7)
!83 = !DILocation(line: 43, column: 31, scope: !7)
!84 = !DILocation(line: 43, column: 56, scope: !7)
!85 = !DILocation(line: 44, column: 80, scope: !7)
!86 = !DILocation(line: 44, column: 73, scope: !7)
!87 = !DILocation(line: 44, column: 61, scope: !7)
!88 = !DILocation(line: 44, column: 54, scope: !7)
!89 = !DILocation(line: 44, column: 37, scope: !7)
!90 = !DILocation(line: 44, column: 132, scope: !7)
!91 = !DILocation(line: 44, column: 125, scope: !7)
!92 = !DILocation(line: 44, column: 113, scope: !7)
!93 = !DILocation(line: 44, column: 106, scope: !7)
!94 = !DILocation(line: 44, column: 94, scope: !7)
!95 = !DILocation(line: 44, column: 143, scope: !7)
!96 = !DILocation(line: 44, column: 89, scope: !7)
!97 = !DILocation(line: 44, column: 140, scope: !7)
!98 = !DILocation(line: 44, column: 31, scope: !7)
!99 = !DILocation(line: 44, column: 148, scope: !7)
!100 = !DILocation(line: 45, column: 80, scope: !7)
!101 = !DILocation(line: 45, column: 73, scope: !7)
!102 = !DILocation(line: 45, column: 61, scope: !7)
!103 = !DILocation(line: 45, column: 54, scope: !7)
!104 = !DILocation(line: 45, column: 37, scope: !7)
!105 = !DILocation(line: 45, column: 89, scope: !7)
!106 = !DILocation(line: 45, column: 140, scope: !7)
!107 = !DILocation(line: 45, column: 31, scope: !7)
!108 = !DILocation(line: 45, column: 148, scope: !7)
!109 = !DILocation(line: 46, column: 61, scope: !7)
!110 = !DILocation(line: 46, column: 54, scope: !7)
!111 = !DILocation(line: 46, column: 37, scope: !7)
!112 = !DILocation(line: 46, column: 69, scope: !7)
!113 = !DILocation(line: 46, column: 120, scope: !7)
!114 = !DILocation(line: 46, column: 31, scope: !7)
!115 = !DILocation(line: 46, column: 128, scope: !7)
!116 = !DILocation(line: 47, column: 37, scope: !7)
!117 = !DILocation(line: 47, column: 69, scope: !7)
!118 = !DILocation(line: 47, column: 120, scope: !7)
!119 = !DILocation(line: 47, column: 31, scope: !7)
!120 = !DILocation(line: 47, column: 128, scope: !7)
!121 = !DILocation(line: 48, column: 132, scope: !7)
!122 = !DILocation(line: 48, column: 125, scope: !7)
!123 = !DILocation(line: 48, column: 113, scope: !7)
!124 = !DILocation(line: 48, column: 106, scope: !7)
!125 = !DILocation(line: 48, column: 94, scope: !7)
!126 = !DILocation(line: 48, column: 140, scope: !7)
!127 = !DILocation(line: 48, column: 31, scope: !7)
!128 = !DILocation(line: 48, column: 148, scope: !7)
!129 = !DILocation(line: 49, column: 140, scope: !7)
!130 = !DILocation(line: 49, column: 31, scope: !7)
!131 = !DILocation(line: 49, column: 148, scope: !7)
!132 = !DILocation(line: 50, column: 120, scope: !7)
!133 = !DILocation(line: 50, column: 31, scope: !7)
!134 = !DILocation(line: 50, column: 128, scope: !7)
!135 = !DILocation(line: 51, column: 120, scope: !7)
!136 = !DILocation(line: 51, column: 31, scope: !7)
!137 = !DILocation(line: 51, column: 128, scope: !7)
!138 = !DILocation(line: 52, column: 113, scope: !7)
!139 = !DILocation(line: 52, column: 106, scope: !7)
!140 = !DILocation(line: 52, column: 94, scope: !7)
!141 = !DILocation(line: 52, column: 89, scope: !7)
!142 = !DILocation(line: 52, column: 120, scope: !7)
!143 = !DILocation(line: 52, column: 31, scope: !7)
!144 = !DILocation(line: 52, column: 128, scope: !7)
!145 = !DILocation(line: 53, column: 120, scope: !7)
!146 = !DILocation(line: 53, column: 31, scope: !7)
!147 = !DILocation(line: 53, column: 128, scope: !7)
!148 = !DILocation(line: 54, column: 100, scope: !7)
!149 = !DILocation(line: 54, column: 31, scope: !7)
!150 = !DILocation(line: 54, column: 108, scope: !7)
!151 = !DILocation(line: 55, column: 100, scope: !7)
!152 = !DILocation(line: 55, column: 31, scope: !7)
!153 = !DILocation(line: 55, column: 108, scope: !7)
!154 = !DILocation(line: 56, column: 94, scope: !7)
!155 = !DILocation(line: 56, column: 89, scope: !7)
!156 = !DILocation(line: 56, column: 120, scope: !7)
!157 = !DILocation(line: 56, column: 31, scope: !7)
!158 = !DILocation(line: 56, column: 128, scope: !7)
!159 = !DILocation(line: 57, column: 120, scope: !7)
!160 = !DILocation(line: 57, column: 31, scope: !7)
!161 = !DILocation(line: 57, column: 128, scope: !7)
!162 = !DILocation(line: 58, column: 100, scope: !7)
!163 = !DILocation(line: 58, column: 31, scope: !7)
!164 = !DILocation(line: 58, column: 108, scope: !7)
!165 = !DILocation(line: 59, column: 100, scope: !7)
!166 = !DILocation(line: 59, column: 31, scope: !7)
!167 = !DILocation(line: 59, column: 108, scope: !7)
!168 = !DILocation(line: 60, column: 31, scope: !7)
!169 = !DILocation(line: 60, column: 148, scope: !7)
!170 = !DILocation(line: 61, column: 31, scope: !7)
!171 = !DILocation(line: 61, column: 148, scope: !7)
!172 = !DILocation(line: 62, column: 32, scope: !7)
!173 = !DILocation(line: 62, column: 129, scope: !7)
!174 = !DILocation(line: 63, column: 32, scope: !7)
!175 = !DILocation(line: 63, column: 129, scope: !7)
!176 = !DILocation(line: 64, column: 32, scope: !7)
!177 = !DILocation(line: 64, column: 149, scope: !7)
!178 = !DILocation(line: 65, column: 32, scope: !7)
!179 = !DILocation(line: 65, column: 149, scope: !7)
!180 = !DILocation(line: 66, column: 32, scope: !7)
!181 = !DILocation(line: 66, column: 129, scope: !7)
!182 = !DILocation(line: 67, column: 32, scope: !7)
!183 = !DILocation(line: 67, column: 129, scope: !7)
!184 = !DILocation(line: 68, column: 32, scope: !7)
!185 = !DILocation(line: 68, column: 129, scope: !7)
!186 = !DILocation(line: 69, column: 32, scope: !7)
!187 = !DILocation(line: 69, column: 129, scope: !7)
!188 = !DILocation(line: 70, column: 32, scope: !7)
!189 = !DILocation(line: 70, column: 109, scope: !7)
!190 = !DILocation(line: 71, column: 32, scope: !7)
!191 = !DILocation(line: 71, column: 109, scope: !7)
!192 = !DILocation(line: 72, column: 32, scope: !7)
!193 = !DILocation(line: 72, column: 129, scope: !7)
!194 = !DILocation(line: 73, column: 32, scope: !7)
!195 = !DILocation(line: 73, column: 129, scope: !7)
!196 = !DILocation(line: 74, column: 32, scope: !7)
!197 = !DILocation(line: 74, column: 109, scope: !7)
!198 = !DILocation(line: 75, column: 32, scope: !7)
!199 = !DILocation(line: 75, column: 109, scope: !7)
!200 = !DILocation(line: 76, column: 18, scope: !7)
!201 = !DILocation(line: 77, column: 18, scope: !7)
!202 = !DILocation(line: 78, column: 18, scope: !7)
!203 = !DILocation(line: 79, column: 18, scope: !7)
!204 = !DILocation(line: 80, column: 19, scope: !7)
!205 = !DILocation(line: 81, column: 20, scope: !7)
!206 = !DILocation(line: 82, column: 20, scope: !7)
!207 = !DILocation(line: 83, column: 20, scope: !7)
!208 = !DILocation(line: 84, column: 20, scope: !7)
!209 = !DILocation(line: 85, column: 20, scope: !7)
!210 = !DILocation(line: 86, column: 20, scope: !7)
!211 = !DILocation(line: 87, column: 20, scope: !7)
!212 = !DILocation(line: 88, column: 20, scope: !7)
!213 = !DILocation(line: 89, column: 20, scope: !7)
!214 = !DILocation(line: 90, column: 20, scope: !7)
!215 = !DILocation(line: 92, column: 20, scope: !7)
!216 = !DILocation(line: 120, column: 20, scope: !7)
!217 = !DILocation(line: 93, column: 20, scope: !7)
!218 = !DILocation(line: 94, column: 20, scope: !7)
!219 = !DILocation(line: 95, column: 20, scope: !7)
!220 = !DILocation(line: 96, column: 20, scope: !7)
!221 = !DILocation(line: 97, column: 20, scope: !7)
!222 = !DILocation(line: 98, column: 20, scope: !7)
!223 = !DILocation(line: 109, column: 20, scope: !7)
!224 = !DILocation(line: 110, column: 20, scope: !7)
!225 = !DILocation(line: 111, column: 20, scope: !7)
!226 = !DILocation(line: 112, column: 20, scope: !7)
!227 = !DILocation(line: 113, column: 20, scope: !7)
!228 = !DILocation(line: 114, column: 20, scope: !7)
!229 = !DILocation(line: 115, column: 20, scope: !7)
!230 = !DILocation(line: 116, column: 20, scope: !7)
!231 = !DILocation(line: 117, column: 20, scope: !7)
!232 = !DILocation(line: 118, column: 20, scope: !7)
!233 = !DILocation(line: 119, column: 20, scope: !7)
!234 = !DILocation(line: 168, column: 22, scope: !7)
!235 = !DILocation(line: 99, column: 20, scope: !7)
!236 = !DILocation(line: 100, column: 20, scope: !7)
!237 = !DILocation(line: 101, column: 20, scope: !7)
!238 = !DILocation(line: 102, column: 20, scope: !7)
!239 = !DILocation(line: 103, column: 20, scope: !7)
!240 = !DILocation(line: 104, column: 20, scope: !7)
!241 = !DILocation(line: 105, column: 20, scope: !7)
!242 = !DILocation(line: 106, column: 20, scope: !7)
!243 = !DILocation(line: 107, column: 20, scope: !7)
!244 = !DILocation(line: 108, column: 20, scope: !7)
!245 = !DILocation(line: 121, column: 20, scope: !7)
!246 = !DILocation(line: 122, column: 20, scope: !7)
!247 = !DILocation(line: 123, column: 20, scope: !7)
!248 = !DILocation(line: 124, column: 20, scope: !7)
!249 = !DILocation(line: 125, column: 20, scope: !7)
!250 = !DILocation(line: 126, column: 20, scope: !7)
!251 = !DILocation(line: 127, column: 20, scope: !7)
!252 = !DILocation(line: 128, column: 20, scope: !7)
!253 = !DILocation(line: 129, column: 20, scope: !7)
!254 = !DILocation(line: 130, column: 20, scope: !7)
!255 = !DILocation(line: 131, column: 20, scope: !7)
!256 = !DILocation(line: 132, column: 20, scope: !7)
!257 = !DILocation(line: 133, column: 20, scope: !7)
!258 = !DILocation(line: 134, column: 20, scope: !7)
!259 = !DILocation(line: 135, column: 20, scope: !7)
!260 = !DILocation(line: 136, column: 20, scope: !7)
!261 = !DILocation(line: 137, column: 20, scope: !7)
!262 = !DILocation(line: 138, column: 20, scope: !7)
!263 = !DILocation(line: 139, column: 20, scope: !7)
!264 = !DILocation(line: 140, column: 20, scope: !7)
!265 = !DILocation(line: 194, column: 21, scope: !7)
!266 = !DILocation(line: 190, column: 21, scope: !7)
!267 = !DILocation(line: 191, column: 22, scope: !7)
!268 = !DILocation(line: 193, column: 22, scope: !7)
!269 = !DILocation(line: 195, column: 21, scope: !7)
!270 = !DILocation(line: 196, column: 22, scope: !7)
!271 = !DILocation(line: 198, column: 22, scope: !7)
!272 = !DILocation(line: 199, column: 22, scope: !7)
!273 = !DILocation(line: 200, column: 21, scope: !7)
!274 = !DILocation(line: 204, column: 21, scope: !7)
!275 = !DILocation(line: 202, column: 22, scope: !7)
!276 = !DILocation(line: 203, column: 22, scope: !7)
!277 = !DILocation(line: 208, column: 22, scope: !7)
!278 = !DILocation(line: 209, column: 22, scope: !7)
!279 = !DILocation(line: 211, column: 22, scope: !7)
!280 = !DILocation(line: 213, column: 22, scope: !7)
!281 = !DILocation(line: 121, column: 29, scope: !282, inlinedAt: !284)
!282 = distinct !DILexicalBlockFile(scope: !7, file: !283, discriminator: 0)
!283 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!284 = !DILocation(line: 215, column: 44, scope: !7)
!285 = !DILocation(line: 110, column: 15, scope: !282, inlinedAt: !286)
!286 = !DILocation(line: 216, column: 44, scope: !7)
!287 = !DILocation(line: 112, column: 21, scope: !282, inlinedAt: !286)
!288 = !DILocation(line: 112, column: 16, scope: !282, inlinedAt: !286)
!289 = !DILocation(line: 217, column: 28, scope: !7)
!290 = !DILocation(line: 217, column: 41, scope: !7)
!291 = !DILocation(line: 113, column: 29, scope: !282, inlinedAt: !286)
!292 = !DILocation(line: 217, column: 4, scope: !7)
