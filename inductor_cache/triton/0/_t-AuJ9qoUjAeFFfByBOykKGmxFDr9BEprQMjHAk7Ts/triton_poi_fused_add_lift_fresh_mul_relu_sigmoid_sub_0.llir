; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_lift_fresh_mul_relu_sigmoid_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 4, !dbg !15
  %16 = mul i32 %15, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl i32 %15, 3, !dbg !17
  %18 = add i32 %17, %.decomposed, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %14) #1, !dbg !20
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !20
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !20
  %24 = bitcast i32 %22 to float, !dbg !20
  %25 = bitcast i32 %23 to float, !dbg !20
  %26 = sext i32 %.decomposed to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %14) #1, !dbg !22
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !22
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !22
  %31 = bitcast i32 %29 to float, !dbg !22
  %32 = bitcast i32 %30 to float, !dbg !22
  %33 = add nsw i32 %.decomposed, 4, !dbg !23
  %34 = add nuw i32 %33, %17, !dbg !24
  %35 = sext i32 %34 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %14) #1, !dbg !26
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %40 = bitcast i32 %38 to float, !dbg !26
  %41 = bitcast i32 %39 to float, !dbg !26
  %42 = zext nneg i32 %33 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !27
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %14) #1, !dbg !28
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !28
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !28
  %47 = bitcast i32 %45 to float, !dbg !28
  %48 = bitcast i32 %46 to float, !dbg !28
  %49 = sext i32 %13 to i64, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !29
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %14) #1, !dbg !30
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !30
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !30
  %54 = bitcast i32 %52 to float, !dbg !30
  %55 = bitcast i32 %53 to float, !dbg !30
  %56 = fadd float %24, %31, !dbg !31
  %57 = fadd float %25, %32, !dbg !31
  %58 = fcmp olt float %56, 0.000000e+00, !dbg !32
  %59 = fcmp olt float %57, 0.000000e+00, !dbg !32
  %60 = select i1 %58, float 0.000000e+00, float %56, !dbg !36
  %61 = select i1 %59, float 0.000000e+00, float %57, !dbg !36
  %62 = fadd float %40, %47, !dbg !37
  %63 = fadd float %41, %48, !dbg !37
  %64 = fsub float 0.000000e+00, %62, !dbg !38
  %65 = fsub float 0.000000e+00, %63, !dbg !38
  %66 = fmul float %64, 0x3FF7154760000000, !dbg !42
  %67 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %66) #1, !dbg !42
  %68 = fmul float %65, 0x3FF7154760000000, !dbg !42
  %69 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %68) #1, !dbg !42
  %70 = fadd float %67, 1.000000e+00, !dbg !43
  %71 = fadd float %69, 1.000000e+00, !dbg !43
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %70) #1, !dbg !44
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %71) #1, !dbg !44
  %74 = fmul float %72, %54, !dbg !45
  %75 = fmul float %73, %55, !dbg !45
  %76 = fsub float 1.000000e+00, %72, !dbg !46
  %77 = fsub float 1.000000e+00, %73, !dbg !46
  %78 = fmul float %60, %76, !dbg !47
  %79 = fmul float %61, %77, !dbg !47
  %80 = fadd float %74, %78, !dbg !48
  %81 = fadd float %75, %79, !dbg !48
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !49
  %83 = bitcast float %60 to i32, !dbg !50
  %84 = bitcast float %61 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %83, i32 %84, ptr addrspace(1) %82, i1 %14) #1, !dbg !50
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !51
  %86 = bitcast float %72 to i32, !dbg !52
  %87 = bitcast float %73 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %86, i32 %87, ptr addrspace(1) %85, i1 %14) #1, !dbg !52
  %88 = getelementptr float, ptr addrspace(1) %5, i64 %49, !dbg !53
  %89 = bitcast float %80 to i32, !dbg !54
  %90 = bitcast float %81 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %89, i32 %90, ptr addrspace(1) %88, i1 %14) #1, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyupnhwuaai4cokjby2ihq7nhup733tt6lqnxqw2jdfbybp2r6f4.py", directory: "inductor_cache/yu")
!4 = !{ptr @triton_poi_fused_add_lift_fresh_mul_relu_sigmoid_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_lift_fresh_mul_relu_sigmoid_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_lift_fresh_mul_relu_sigmoid_sub_0", linkageName: "triton_poi_fused_add_lift_fresh_mul_relu_sigmoid_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 37, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 42, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 34, scope: !7)
!24 = !DILocation(line: 29, column: 39, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 46, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 39, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 34, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 47, column: 30, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = !DILocation(line: 36, column: 22, scope: !7)
!42 = !DILocation(line: 47, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 47, column: 20, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 47, column: 16, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 37, column: 19, scope: !7)
!46 = !DILocation(line: 39, column: 20, scope: !7)
!47 = !DILocation(line: 40, column: 20, scope: !7)
!48 = !DILocation(line: 41, column: 20, scope: !7)
!49 = !DILocation(line: 42, column: 25, scope: !7)
!50 = !DILocation(line: 42, column: 36, scope: !7)
!51 = !DILocation(line: 43, column: 25, scope: !7)
!52 = !DILocation(line: 43, column: 36, scope: !7)
!53 = !DILocation(line: 44, column: 25, scope: !7)
!54 = !DILocation(line: 44, column: 37, scope: !7)
!55 = !DILocation(line: 44, column: 4, scope: !7)
