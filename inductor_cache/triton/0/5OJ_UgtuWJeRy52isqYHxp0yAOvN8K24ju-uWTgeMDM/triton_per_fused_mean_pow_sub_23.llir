; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 512, !dbg !14
  %13 = lshr i32 %8, 5, !dbg !15
  %14 = lshr i32 %8, 3, !dbg !15
  %15 = and i32 %14, 31, !dbg !15
  %16 = or disjoint i32 %15, 32, !dbg !15
  %17 = or disjoint i32 %15, 96, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %18 = sdiv i32 %.frozen, 64, !dbg !16
  %19 = mul i32 %18, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl nuw nsw i32 %15, 9, !dbg !18
  %21 = shl nuw nsw i32 %16, 9, !dbg !18
  %22 = shl nuw nsw i32 %17, 9, !dbg !18
  %23 = and i32 %22, 32256, !dbg !18
  %24 = shl nsw i32 %.decomposed, 7, !dbg !19
  %25 = or disjoint i32 %24, %15, !dbg !20
  %26 = or disjoint i32 %24, %16, !dbg !20
  %27 = or disjoint i32 %25, 64, !dbg !20
  %28 = or disjoint i32 %24, %17, !dbg !20
  %29 = shl i32 %18, 13, !dbg !21
  %30 = add i32 %25, %29, !dbg !22
  %31 = add i32 %26, %29, !dbg !22
  %32 = add i32 %27, %29, !dbg !22
  %33 = add i32 %28, %29, !dbg !22
  %34 = sdiv i32 %30, 32768, !dbg !23
  %35 = sdiv i32 %31, 32768, !dbg !23
  %36 = sdiv i32 %32, 32768, !dbg !23
  %37 = sdiv i32 %33, 32768, !dbg !23
  %38 = shl nsw i32 %34, 15, !dbg !24
  %39 = shl nsw i32 %35, 15, !dbg !24
  %40 = shl nsw i32 %36, 15, !dbg !24
  %41 = shl nsw i32 %37, 15, !dbg !24
  %42 = or disjoint i32 %38, %20, !dbg !25
  %43 = or disjoint i32 %39, %21, !dbg !25
  %44 = or disjoint i32 %40, %20, !dbg !25
  %45 = or disjoint i32 %41, %23, !dbg !25
  %46 = sdiv i32 %30, 64, !dbg !26
  %47 = sdiv i32 %31, 64, !dbg !26
  %48 = sdiv i32 %32, 64, !dbg !26
  %49 = sdiv i32 %33, 64, !dbg !26
  %50 = srem i32 %46, 512, !dbg !27
  %51 = srem i32 %47, 512, !dbg !27
  %52 = srem i32 %48, 512, !dbg !27
  %53 = srem i32 %49, 512, !dbg !27
  %54 = add i32 %42, %50, !dbg !28
  %55 = add nsw i32 %43, %51, !dbg !28
  %56 = add i32 %44, %52, !dbg !28
  %57 = add nsw i32 %45, %53, !dbg !28
  %58 = sext i32 %54 to i64, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !29
  %60 = sext i32 %55 to i64, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !29
  %62 = sext i32 %56 to i64, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !29
  %64 = sext i32 %57 to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %70 = sext i32 %50 to i64, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !31
  %72 = sext i32 %51 to i64, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !31
  %74 = sext i32 %52 to i64, !dbg !31
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !31
  %76 = sext i32 %53 to i64, !dbg !31
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %82 = or disjoint i32 %20, 65536, !dbg !33
  %83 = or disjoint i32 %21, 65536, !dbg !33
  %84 = or disjoint i32 %23, 65536, !dbg !33
  %85 = add i32 %38, %82, !dbg !34
  %86 = add i32 %83, %39, !dbg !34
  %87 = add i32 %40, %82, !dbg !34
  %88 = add i32 %84, %41, !dbg !34
  %89 = add i32 %85, %50, !dbg !35
  %90 = add nsw i32 %86, %51, !dbg !35
  %91 = add i32 %87, %52, !dbg !35
  %92 = add nsw i32 %88, %53, !dbg !35
  %93 = sext i32 %89 to i64, !dbg !36
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !36
  %95 = sext i32 %90 to i64, !dbg !36
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !36
  %97 = sext i32 %91 to i64, !dbg !36
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !36
  %99 = sext i32 %92 to i64, !dbg !36
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !36
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %12, i32 0, i1 %12) #3, !dbg !37
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %12, i32 0, i1 %12) #3, !dbg !37
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %12, i32 0, i1 %12) #3, !dbg !37
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %12, i32 0, i1 %12) #3, !dbg !37
  %105 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !30
  %106 = insertelement <2 x i32> %105, i32 %67, i64 1, !dbg !30
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !30
  %108 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !32
  %109 = insertelement <2 x i32> %108, i32 %79, i64 1, !dbg !32
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !32
  %111 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !37
  %112 = insertelement <2 x i32> %111, i32 %102, i64 1, !dbg !37
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !37
  %114 = fadd <2 x float> %107, %110, !dbg !38
  %115 = fadd <2 x float> %110, %113, !dbg !39
  %116 = fsub <2 x float> %114, %115, !dbg !40
  %117 = fmul <2 x float> %116, %116, !dbg !41
  %118 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !30
  %119 = insertelement <2 x i32> %118, i32 %69, i64 1, !dbg !30
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !30
  %121 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !32
  %122 = insertelement <2 x i32> %121, i32 %81, i64 1, !dbg !32
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !32
  %124 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !37
  %125 = insertelement <2 x i32> %124, i32 %104, i64 1, !dbg !37
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !37
  %127 = fadd <2 x float> %120, %123, !dbg !38
  %128 = fadd <2 x float> %123, %126, !dbg !39
  %129 = fsub <2 x float> %127, %128, !dbg !40
  %130 = fmul <2 x float> %129, %129, !dbg !41
  %shift = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %131 = fadd <2 x float> %117, %shift, !dbg !42
  %132 = fadd <2 x float> %131, %130, !dbg !42
  %shift1 = shufflevector <2 x float> %130, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %133 = fadd <2 x float> %132, %shift1, !dbg !42
  %134 = extractelement <2 x float> %133, i64 0, !dbg !42
  %135 = select i1 %12, float %134, float 0.000000e+00, !dbg !42
  %136 = bitcast float %135 to i32, !dbg !47
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !47
  %138 = bitcast i32 %137 to float, !dbg !47
  %139 = fadd float %135, %138, !dbg !42
  %140 = bitcast float %139 to i32, !dbg !47
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !47
  %142 = bitcast i32 %141 to float, !dbg !47
  %143 = fadd float %139, %142, !dbg !42
  %144 = lshr i32 %9, 3, !dbg !47
  %145 = icmp samesign ult i32 %9, 8, !dbg !47
  %146 = and i32 %13, 7, !dbg !47
  %147 = shl nuw nsw i32 %10, 3, !dbg !47
  %148 = or disjoint i32 %147, %146, !dbg !47
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !47
  %150 = bitcast float %143 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 %145) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %151 = icmp slt i32 %8, 64, !dbg !47
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !47
  %153 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %152, i1 %151) #3, !dbg !47
  %154 = bitcast i32 %153 to float, !dbg !47
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 4, i32 31), !dbg !47
  %156 = bitcast i32 %155 to float, !dbg !47
  %157 = fadd float %154, %156, !dbg !42
  %158 = bitcast float %157 to i32, !dbg !47
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !47
  %160 = bitcast i32 %159 to float, !dbg !47
  %161 = fadd float %157, %160, !dbg !42
  %162 = bitcast float %161 to i32, !dbg !47
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !47
  %164 = bitcast i32 %163 to float, !dbg !47
  %165 = fadd float %161, %164, !dbg !42
  %166 = icmp eq i32 %10, 0, !dbg !47
  %167 = and i1 %151, %166, !dbg !47
  %168 = bitcast float %165 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %168, i1 %167) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !47
  %170 = load i32, ptr addrspace(3) %169, align 16, !dbg !47
  %171 = sext i32 %11 to i64, !dbg !48
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !48
  %173 = shl nuw nsw i32 %146, 2, !dbg !49
  %174 = or disjoint i32 %173, %144, !dbg !49
  %175 = icmp eq i32 %174, 0, !dbg !49
  %176 = and i1 %175, %12, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %172, i1 %176) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccj2bfphtlqytgmy6peisyxga2w52nowpwdwmy3g3tkh2oy5pgme.py", directory: "inductor_cache/cj")
!4 = !{ptr @triton_per_fused_mean_pow_sub_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_23", linkageName: "triton_per_fused_mean_pow_sub_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 65, scope: !7)
!20 = !DILocation(line: 33, column: 61, scope: !7)
!21 = !DILocation(line: 33, column: 75, scope: !7)
!22 = !DILocation(line: 33, column: 70, scope: !7)
!23 = !DILocation(line: 33, column: 82, scope: !7)
!24 = !DILocation(line: 33, column: 55, scope: !7)
!25 = !DILocation(line: 33, column: 48, scope: !7)
!26 = !DILocation(line: 33, column: 121, scope: !7)
!27 = !DILocation(line: 33, column: 127, scope: !7)
!28 = !DILocation(line: 33, column: 93, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 135, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 72, scope: !7)
!33 = !DILocation(line: 35, column: 38, scope: !7)
!34 = !DILocation(line: 35, column: 56, scope: !7)
!35 = !DILocation(line: 35, column: 101, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 143, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!46 = !DILocation(line: 42, column: 25, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !46)
!48 = !DILocation(line: 43, column: 25, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 4, scope: !7)
