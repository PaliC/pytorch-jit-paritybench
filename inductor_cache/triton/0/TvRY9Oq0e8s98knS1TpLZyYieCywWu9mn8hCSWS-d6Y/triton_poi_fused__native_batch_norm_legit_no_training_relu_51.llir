; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_51(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 3328, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = icmp slt i32 %16, 16, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %18 = sdiv i32 %.frozen, 832, !dbg !17
  %19 = mul i32 %18, 832, !dbg !18
  %.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = mul i32 %16, 832, !dbg !19
  %21 = add i32 %.decomposed, %20, !dbg !20
  %22 = mul i32 %18, 13312, !dbg !21
  %23 = add i32 %21, %22, !dbg !22
  %24 = sext i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !23
  %26 = and i1 %17, %15, !dbg !24
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %26) #4, !dbg !25
  %28 = sext i32 %.decomposed to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !26
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %15) #4, !dbg !27
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !28
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %15) #4, !dbg !29
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !29
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !29
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !29
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !29
  %37 = bitcast i32 %33 to float, !dbg !29
  %38 = bitcast i32 %34 to float, !dbg !29
  %39 = bitcast i32 %35 to float, !dbg !29
  %40 = bitcast i32 %36 to float, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !30
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #4, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !32
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #4, !dbg !33
  %45 = fadd float %37, 0x3EE4F8B580000000, !dbg !34
  %46 = fadd float %38, 0x3EE4F8B580000000, !dbg !34
  %47 = fadd float %39, 0x3EE4F8B580000000, !dbg !34
  %48 = fadd float %40, 0x3EE4F8B580000000, !dbg !34
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %49, 0, !dbg !35
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %50, 0, !dbg !35
  br i1 %.not.i, label %56, label %51, !dbg !35

51:                                               ; preds = %8
  br i1 %.not1.i, label %54, label %52, !dbg !35

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !35

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !35
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i5 = icmp eq i32 %61, 0, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i8 = icmp eq i32 %62, 0, !dbg !35
  br i1 %.not.i5, label %68, label %63, !dbg !35

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %66, label %64, !dbg !35

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !35
  br label %__nv_sqrtf.exit9, !dbg !35

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !35
  br label %__nv_sqrtf.exit9, !dbg !35

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %71, label %69, !dbg !35

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !35
  br label %__nv_sqrtf.exit9, !dbg !35

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !35
  br label %__nv_sqrtf.exit9, !dbg !35

__nv_sqrtf.exit9:                                 ; preds = %64, %66, %69, %71
  %.0.i7 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !35
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i10 = icmp eq i32 %73, 0, !dbg !35
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i13 = icmp eq i32 %74, 0, !dbg !35
  br i1 %.not.i10, label %80, label %75, !dbg !35

75:                                               ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %78, label %76, !dbg !35

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

80:                                               ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %83, label %81, !dbg !35

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

__nv_sqrtf.exit14:                                ; preds = %76, %78, %81, %83
  %.0.i12 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !35
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i15 = icmp eq i32 %85, 0, !dbg !35
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i18 = icmp eq i32 %86, 0, !dbg !35
  br i1 %.not.i15, label %92, label %87, !dbg !35

87:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %90, label %88, !dbg !35

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

92:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %95, label %93, !dbg !35

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

__nv_sqrtf.exit19:                                ; preds = %88, %90, %93, %95
  %.0.i17 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !35
  %97 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !27
  %99 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !27
  %101 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !25
  %102 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !27
  %103 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !25
  %104 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !33
  %106 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !33
  %107 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !33
  %108 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !33
  %109 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !31
  %110 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !31
  %111 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !31
  %112 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !31
  %113 = and i32 %11, 127, !dbg !12
  %114 = or disjoint i32 %113, 384, !dbg !12
  %115 = or disjoint i32 %10, %114, !dbg !13
  %116 = icmp slt i32 %115, 3328, !dbg !14
  %117 = and i1 %17, %116, !dbg !24
  %118 = or disjoint i32 %113, 256, !dbg !12
  %119 = or disjoint i32 %10, %118, !dbg !13
  %120 = icmp slt i32 %119, 3328, !dbg !14
  %121 = and i1 %17, %120, !dbg !24
  %122 = or disjoint i32 %113, 128, !dbg !12
  %123 = or disjoint i32 %10, %122, !dbg !13
  %124 = icmp slt i32 %123, 3328, !dbg !14
  %125 = and i1 %17, %124, !dbg !24
  %126 = or disjoint i32 %10, %113, !dbg !13
  %127 = icmp slt i32 %126, 3328, !dbg !14
  %128 = and i1 %17, %127, !dbg !24
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !36
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !36
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !36
  %133 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !25
  %134 = insertelement <4 x i32> %133, i32 %99, i64 1, !dbg !25
  %135 = insertelement <4 x i32> %134, i32 %101, i64 2, !dbg !25
  %136 = insertelement <4 x i32> %135, i32 %103, i64 3, !dbg !25
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !25
  %138 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !27
  %139 = insertelement <4 x i32> %138, i32 %100, i64 1, !dbg !27
  %140 = insertelement <4 x i32> %139, i32 %102, i64 2, !dbg !27
  %141 = insertelement <4 x i32> %140, i32 %104, i64 3, !dbg !27
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !27
  %143 = fsub <4 x float> %137, %142, !dbg !37
  %144 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !33
  %145 = insertelement <4 x i32> %144, i32 %106, i64 1, !dbg !33
  %146 = insertelement <4 x i32> %145, i32 %107, i64 2, !dbg !33
  %147 = insertelement <4 x i32> %146, i32 %108, i64 3, !dbg !33
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !33
  %149 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !31
  %150 = insertelement <4 x i32> %149, i32 %110, i64 1, !dbg !31
  %151 = insertelement <4 x i32> %150, i32 %111, i64 2, !dbg !31
  %152 = insertelement <4 x i32> %151, i32 %112, i64 3, !dbg !31
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !31
  %154 = insertelement <4 x float> poison, float %132, i64 0, !dbg !38
  %155 = insertelement <4 x float> %154, float %131, i64 1, !dbg !38
  %156 = insertelement <4 x float> %155, float %130, i64 2, !dbg !38
  %157 = insertelement <4 x float> %156, float %129, i64 3, !dbg !38
  %158 = fmul <4 x float> %143, %157, !dbg !38
  %159 = fmul <4 x float> %158, %153, !dbg !39
  %160 = fadd <4 x float> %159, %148, !dbg !40
  %161 = fcmp olt <4 x float> %160, zeroinitializer, !dbg !41
  %162 = extractelement <4 x i1> %161, i64 3, !dbg !45
  %163 = extractelement <4 x float> %160, i64 3, !dbg !45
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !45
  %165 = extractelement <4 x i1> %161, i64 2, !dbg !45
  %166 = extractelement <4 x float> %160, i64 2, !dbg !45
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !45
  %168 = extractelement <4 x i1> %161, i64 1, !dbg !45
  %169 = extractelement <4 x float> %160, i64 1, !dbg !45
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !45
  %171 = extractelement <4 x i1> %161, i64 0, !dbg !45
  %172 = extractelement <4 x float> %160, i64 0, !dbg !45
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !45
  %174 = shl i32 %126, 4, !dbg !46
  %175 = shl i32 %123, 4, !dbg !46
  %176 = shl i32 %119, 4, !dbg !46
  %177 = shl i32 %115, 4, !dbg !46
  %178 = add i32 %174, %16, !dbg !47
  %179 = add i32 %175, %16, !dbg !47
  %180 = add i32 %176, %16, !dbg !47
  %181 = add i32 %177, %16, !dbg !47
  %182 = sext i32 %178 to i64, !dbg !48
  %183 = getelementptr float, ptr addrspace(1) %5, i64 %182, !dbg !48
  %184 = sext i32 %179 to i64, !dbg !48
  %185 = getelementptr float, ptr addrspace(1) %5, i64 %184, !dbg !48
  %186 = sext i32 %180 to i64, !dbg !48
  %187 = getelementptr float, ptr addrspace(1) %5, i64 %186, !dbg !48
  %188 = sext i32 %181 to i64, !dbg !48
  %189 = getelementptr float, ptr addrspace(1) %5, i64 %188, !dbg !48
  %.idx = shl nuw nsw i32 %13, 3, !dbg !49
  %190 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !49
  %191 = bitcast float %164 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #4, !dbg !49
  %192 = shl nuw nsw i32 %13, 1, !dbg !49
  %193 = or disjoint i32 %192, 2, !dbg !49
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !49
  %195 = bitcast float %167 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #4, !dbg !49
  %196 = or disjoint i32 %192, 4, !dbg !49
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !49
  %198 = bitcast float %170 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #4, !dbg !49
  %199 = or disjoint i32 %192, 6, !dbg !49
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !49
  %201 = bitcast float %173 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %.idx1 = shl nuw nsw i32 %113, 3, !dbg !49
  %202 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !49
  %203 = load i32, ptr addrspace(3) %202, align 8, !dbg !49
  %.idx2 = shl nuw nsw i32 %122, 3, !dbg !49
  %204 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !49
  %205 = load i32, ptr addrspace(3) %204, align 8, !dbg !49
  %.idx3 = shl nuw nsw i32 %118, 3, !dbg !49
  %206 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !49
  %207 = load i32, ptr addrspace(3) %206, align 8, !dbg !49
  %.idx4 = shl nuw nsw i32 %114, 3, !dbg !49
  %208 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !49
  %209 = load i32, ptr addrspace(3) %208, align 8, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, ptr addrspace(1) %183, i1 %128) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %185, i1 %125) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %187, i1 %121) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %189, i1 %117) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdivtf2bafz7cut7zdbofmvkhmn5gv2b4w4lybubmltqeyuywxab.py", directory: "inductor_cache/di")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_51, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_51, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_51", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_51", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 63, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 33, scope: !7)
!47 = !DILocation(line: 50, column: 30, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 45, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
