; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 8, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 254, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = or disjoint i32 %28, 1, !dbg !13
  %30 = icmp slt i32 %28, 14592, !dbg !14
  %.frozen = freeze i32 %28, !dbg !15
  %31 = sdiv i32 %.frozen, 16, !dbg !15
  %32 = srem i32 %31, 228, !dbg !16
  %33 = mul i32 %31, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %34 = srem i32 %29, 16, !dbg !17
  %35 = sdiv i32 %28, 3648, !dbg !18
  %36 = icmp slt i32 %32, 64, !dbg !19
  %37 = shl nsw i32 %.decomposed, 6, !dbg !20
  %38 = shl nsw i32 %34, 6, !dbg !20
  %39 = shl nsw i32 %35, 10, !dbg !21
  %40 = add nsw i32 %37, %39, !dbg !22
  %41 = add nsw i32 %39, %38, !dbg !22
  %42 = add nsw i32 %40, %32, !dbg !23
  %43 = add nsw i32 %41, %32, !dbg !23
  %44 = sext i32 %42 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %43 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = and i1 %30, %36, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %48, i32 0, i1 %48) #3, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 0, i1 %48) #3, !dbg !26
  %51 = sext i32 %32 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !27
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %48, i32 0, i1 %48) #3, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %48, i32 0, i1 %48) #3, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %48, i32 0, i1 %48) #3, !dbg !30
  %57 = bitcast i32 %56 to float, !dbg !30
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %48, i32 0, i1 %48) #3, !dbg !30
  %59 = bitcast i32 %58 to float, !dbg !30
  %60 = fadd float %57, 0x3F50624DE0000000, !dbg !31
  %61 = fadd float %59, 0x3F50624DE0000000, !dbg !31
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %62, 0, !dbg !32
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %63, 0, !dbg !32
  br i1 %.not.i, label %69, label %64, !dbg !32

64:                                               ; preds = %22
  br i1 %.not1.i, label %67, label %65, !dbg !32

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

69:                                               ; preds = %22
  br i1 %.not1.i, label %72, label %70, !dbg !32

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !32
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %74, 0, !dbg !32
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !32
  br i1 %.not.i1, label %81, label %76, !dbg !32

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !32

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !32

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !32
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !34
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %48, i32 0, i1 %48) #3, !dbg !35
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %48, i32 0, i1 %48) #3, !dbg !35
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !36
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %48, i32 0, i1 %48) #3, !dbg !37
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %48, i32 0, i1 %48) #3, !dbg !37
  %94 = and i32 %32, -64, !dbg !38
  %95 = icmp eq i32 %94, 64, !dbg !38
  %96 = add nsw i32 %32, -64, !dbg !39
  %97 = add nsw i32 %40, %96, !dbg !40
  %98 = add nsw i32 %41, %96, !dbg !40
  %99 = sext i32 %97 to i64, !dbg !41
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %99, !dbg !41
  %101 = sext i32 %98 to i64, !dbg !41
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !41
  %103 = and i1 %30, %95, !dbg !42
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %103, i32 0, i1 %103) #3, !dbg !43
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %103, i32 0, i1 %103) #3, !dbg !43
  %106 = sext i32 %96 to i64, !dbg !44
  %107 = getelementptr float, ptr addrspace(1) %6, i64 %106, !dbg !44
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %103, i32 0, i1 %103) #3, !dbg !45
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %103, i32 0, i1 %103) #3, !dbg !45
  %110 = getelementptr float, ptr addrspace(1) %7, i64 %106, !dbg !46
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %103, i32 0, i1 %103) #3, !dbg !47
  %112 = bitcast i32 %111 to float, !dbg !47
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %103, i32 0, i1 %103) #3, !dbg !47
  %114 = bitcast i32 %113 to float, !dbg !47
  %115 = fadd float %112, 0x3F50624DE0000000, !dbg !48
  %116 = fadd float %114, 0x3F50624DE0000000, !dbg !48
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i6 = icmp eq i32 %117, 0, !dbg !49
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i9 = icmp eq i32 %118, 0, !dbg !49
  br i1 %.not.i6, label %124, label %119, !dbg !49

119:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %122, label %120, !dbg !49

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

124:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %127, label %125, !dbg !49

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

__nv_sqrtf.exit10:                                ; preds = %120, %122, %125, %127
  %.0.i8 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !49
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i11 = icmp eq i32 %129, 0, !dbg !49
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i14 = icmp eq i32 %130, 0, !dbg !49
  br i1 %.not.i11, label %136, label %131, !dbg !49

131:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %134, label %132, !dbg !49

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

136:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %139, label %137, !dbg !49

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

__nv_sqrtf.exit15:                                ; preds = %132, %134, %137, %139
  %.0.i13 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !49
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !50
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !50
  %143 = getelementptr float, ptr addrspace(1) %8, i64 %106, !dbg !51
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %103, i32 0, i1 %103) #3, !dbg !52
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %103, i32 0, i1 %103) #3, !dbg !52
  %146 = getelementptr float, ptr addrspace(1) %9, i64 %106, !dbg !53
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %103, i32 0, i1 %103) #3, !dbg !54
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %103, i32 0, i1 %103) #3, !dbg !54
  %149 = add nsw i32 %32, -128, !dbg !55
  %150 = icmp ult i32 %149, 96, !dbg !55
  %151 = mul nsw i32 %.decomposed, 96, !dbg !56
  %152 = mul nsw i32 %34, 96, !dbg !56
  %153 = mul nsw i32 %35, 1536, !dbg !57
  %154 = add nsw i32 %149, %153, !dbg !58
  %155 = add nsw i32 %154, %151, !dbg !59
  %156 = add nsw i32 %154, %152, !dbg !59
  %157 = sext i32 %155 to i64, !dbg !60
  %158 = getelementptr float, ptr addrspace(1) %10, i64 %157, !dbg !60
  %159 = sext i32 %156 to i64, !dbg !60
  %160 = getelementptr float, ptr addrspace(1) %10, i64 %159, !dbg !60
  %161 = and i1 %30, %150, !dbg !61
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %161, i32 0, i1 %161) #3, !dbg !62
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %161, i32 0, i1 %161) #3, !dbg !62
  %164 = sext i32 %149 to i64, !dbg !63
  %165 = getelementptr float, ptr addrspace(1) %11, i64 %164, !dbg !63
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %161, i32 0, i1 %161) #3, !dbg !64
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %161, i32 0, i1 %161) #3, !dbg !64
  %168 = getelementptr float, ptr addrspace(1) %12, i64 %164, !dbg !65
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %161, i32 0, i1 %161) #3, !dbg !66
  %170 = bitcast i32 %169 to float, !dbg !66
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %161, i32 0, i1 %161) #3, !dbg !66
  %172 = bitcast i32 %171 to float, !dbg !66
  %173 = fadd float %170, 0x3F50624DE0000000, !dbg !67
  %174 = fadd float %172, 0x3F50624DE0000000, !dbg !67
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i16 = icmp eq i32 %175, 0, !dbg !68
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i19 = icmp eq i32 %176, 0, !dbg !68
  br i1 %.not.i16, label %182, label %177, !dbg !68

177:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %180, label %178, !dbg !68

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

182:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %185, label %183, !dbg !68

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

__nv_sqrtf.exit20:                                ; preds = %178, %180, %183, %185
  %.0.i18 = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !68
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i21 = icmp eq i32 %187, 0, !dbg !68
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i24 = icmp eq i32 %188, 0, !dbg !68
  br i1 %.not.i21, label %194, label %189, !dbg !68

189:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %192, label %190, !dbg !68

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

194:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %197, label %195, !dbg !68

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

__nv_sqrtf.exit25:                                ; preds = %190, %192, %195, %197
  %.0.i23 = phi float [ %191, %190 ], [ %193, %192 ], [ %196, %195 ], [ %198, %197 ], !dbg !68
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !69
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !69
  %201 = getelementptr float, ptr addrspace(1) %13, i64 %164, !dbg !70
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %161, i32 0, i1 %161) #3, !dbg !71
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %161, i32 0, i1 %161) #3, !dbg !71
  %204 = getelementptr float, ptr addrspace(1) %14, i64 %164, !dbg !72
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %161, i32 0, i1 %161) #3, !dbg !73
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %161, i32 0, i1 %161) #3, !dbg !73
  %207 = icmp sgt i32 %32, 223, !dbg !74
  %208 = shl nsw i32 %.decomposed, 2, !dbg !75
  %209 = shl nsw i32 %34, 2, !dbg !75
  %210 = shl nsw i32 %35, 6, !dbg !76
  %211 = add nsw i32 %32, -224, !dbg !77
  %212 = add nsw i32 %211, %210, !dbg !78
  %213 = add nsw i32 %212, %208, !dbg !79
  %214 = add nsw i32 %212, %209, !dbg !79
  %215 = sext i32 %213 to i64, !dbg !80
  %216 = getelementptr float, ptr addrspace(1) %15, i64 %215, !dbg !80
  %217 = sext i32 %214 to i64, !dbg !80
  %218 = getelementptr float, ptr addrspace(1) %15, i64 %217, !dbg !80
  %219 = and i1 %30, %207, !dbg !81
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %219, i32 0, i1 %219) #3, !dbg !82
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %219, i32 0, i1 %219) #3, !dbg !82
  %222 = sext i32 %211 to i64, !dbg !83
  %223 = getelementptr float, ptr addrspace(1) %16, i64 %222, !dbg !83
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %219, i32 0, i1 %219) #3, !dbg !84
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %219, i32 0, i1 %219) #3, !dbg !84
  %226 = getelementptr float, ptr addrspace(1) %17, i64 %222, !dbg !85
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %219, i32 0, i1 %219) #3, !dbg !86
  %228 = bitcast i32 %227 to float, !dbg !86
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %219, i32 0, i1 %219) #3, !dbg !86
  %230 = bitcast i32 %229 to float, !dbg !86
  %231 = fadd float %228, 0x3F50624DE0000000, !dbg !87
  %232 = fadd float %230, 0x3F50624DE0000000, !dbg !87
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i26 = icmp eq i32 %233, 0, !dbg !88
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i29 = icmp eq i32 %234, 0, !dbg !88
  br i1 %.not.i26, label %240, label %235, !dbg !88

235:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %238, label %236, !dbg !88

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %231) #3, !dbg !88
  br label %__nv_sqrtf.exit30, !dbg !88

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %231) #3, !dbg !88
  br label %__nv_sqrtf.exit30, !dbg !88

240:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %243, label %241, !dbg !88

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %231) #3, !dbg !88
  br label %__nv_sqrtf.exit30, !dbg !88

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %231) #3, !dbg !88
  br label %__nv_sqrtf.exit30, !dbg !88

__nv_sqrtf.exit30:                                ; preds = %236, %238, %241, %243
  %.0.i28 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !88
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i31 = icmp eq i32 %245, 0, !dbg !88
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i34 = icmp eq i32 %246, 0, !dbg !88
  br i1 %.not.i31, label %252, label %247, !dbg !88

247:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %250, label %248, !dbg !88

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #3, !dbg !88
  br label %__nv_sqrtf.exit35, !dbg !88

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #3, !dbg !88
  br label %__nv_sqrtf.exit35, !dbg !88

252:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %255, label %253, !dbg !88

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #3, !dbg !88
  br label %__nv_sqrtf.exit35, !dbg !88

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #3, !dbg !88
  br label %__nv_sqrtf.exit35, !dbg !88

__nv_sqrtf.exit35:                                ; preds = %248, %250, %253, %255
  %.0.i33 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !88
  %257 = insertelement <8 x i32> poison, i32 %221, i64 0, !dbg !82
  %258 = insertelement <8 x i32> %257, i32 %220, i64 1, !dbg !82
  %259 = insertelement <8 x i32> %258, i32 %49, i64 2, !dbg !82
  %260 = insertelement <8 x i32> %259, i32 %50, i64 3, !dbg !82
  %261 = insertelement <8 x i32> %260, i32 %104, i64 4, !dbg !82
  %262 = insertelement <8 x i32> %261, i32 %105, i64 5, !dbg !82
  %263 = insertelement <8 x i32> %262, i32 %162, i64 6, !dbg !82
  %264 = insertelement <8 x i32> %263, i32 %163, i64 7, !dbg !82
  %265 = bitcast <8 x i32> %264 to <8 x float>, !dbg !82
  %266 = insertelement <8 x i32> poison, i32 %225, i64 0, !dbg !84
  %267 = insertelement <8 x i32> %266, i32 %224, i64 1, !dbg !84
  %268 = insertelement <8 x i32> %267, i32 %53, i64 2, !dbg !84
  %269 = insertelement <8 x i32> %268, i32 %54, i64 3, !dbg !84
  %270 = insertelement <8 x i32> %269, i32 %108, i64 4, !dbg !84
  %271 = insertelement <8 x i32> %270, i32 %109, i64 5, !dbg !84
  %272 = insertelement <8 x i32> %271, i32 %166, i64 6, !dbg !84
  %273 = insertelement <8 x i32> %272, i32 %167, i64 7, !dbg !84
  %274 = bitcast <8 x i32> %273 to <8 x float>, !dbg !84
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !89
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !89
  %277 = getelementptr float, ptr addrspace(1) %18, i64 %222, !dbg !90
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %219, i32 0, i1 %219) #3, !dbg !91
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %219, i32 0, i1 %219) #3, !dbg !91
  %280 = getelementptr float, ptr addrspace(1) %19, i64 %222, !dbg !92
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %219, i32 0, i1 %219) #3, !dbg !93
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %219, i32 0, i1 %219) #3, !dbg !93
  %283 = fsub <8 x float> %265, %274, !dbg !94
  %284 = insertelement <8 x float> poison, float %276, i64 0, !dbg !95
  %285 = insertelement <8 x float> %284, float %275, i64 1, !dbg !95
  %286 = insertelement <8 x float> %285, float %86, i64 2, !dbg !95
  %287 = insertelement <8 x float> %286, float %87, i64 3, !dbg !95
  %288 = insertelement <8 x float> %287, float %141, i64 4, !dbg !95
  %289 = insertelement <8 x float> %288, float %142, i64 5, !dbg !95
  %290 = insertelement <8 x float> %289, float %199, i64 6, !dbg !95
  %291 = insertelement <8 x float> %290, float %200, i64 7, !dbg !95
  %292 = fmul <8 x float> %283, %291, !dbg !95
  %293 = insertelement <8 x i32> poison, i32 %279, i64 0, !dbg !91
  %294 = insertelement <8 x i32> %293, i32 %278, i64 1, !dbg !91
  %295 = insertelement <8 x i32> %294, i32 %89, i64 2, !dbg !91
  %296 = insertelement <8 x i32> %295, i32 %90, i64 3, !dbg !91
  %297 = insertelement <8 x i32> %296, i32 %144, i64 4, !dbg !91
  %298 = insertelement <8 x i32> %297, i32 %145, i64 5, !dbg !91
  %299 = insertelement <8 x i32> %298, i32 %202, i64 6, !dbg !91
  %300 = insertelement <8 x i32> %299, i32 %203, i64 7, !dbg !91
  %301 = bitcast <8 x i32> %300 to <8 x float>, !dbg !91
  %302 = fmul <8 x float> %292, %301, !dbg !96
  %303 = insertelement <8 x i32> poison, i32 %282, i64 0, !dbg !93
  %304 = insertelement <8 x i32> %303, i32 %281, i64 1, !dbg !93
  %305 = insertelement <8 x i32> %304, i32 %92, i64 2, !dbg !93
  %306 = insertelement <8 x i32> %305, i32 %93, i64 3, !dbg !93
  %307 = insertelement <8 x i32> %306, i32 %147, i64 4, !dbg !93
  %308 = insertelement <8 x i32> %307, i32 %148, i64 5, !dbg !93
  %309 = insertelement <8 x i32> %308, i32 %205, i64 6, !dbg !93
  %310 = insertelement <8 x i32> %309, i32 %206, i64 7, !dbg !93
  %311 = bitcast <8 x i32> %310 to <8 x float>, !dbg !93
  %312 = fadd <8 x float> %302, %311, !dbg !97
  %313 = fcmp olt <8 x float> %312, zeroinitializer, !dbg !98
  %314 = extractelement <8 x i1> %313, i64 7, !dbg !102
  %315 = extractelement <8 x float> %312, i64 7, !dbg !102
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !102
  %317 = extractelement <8 x i1> %313, i64 6, !dbg !102
  %318 = extractelement <8 x float> %312, i64 6, !dbg !102
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !102
  %320 = extractelement <8 x i1> %313, i64 5, !dbg !104
  %321 = extractelement <8 x float> %312, i64 5, !dbg !104
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !104
  %323 = extractelement <8 x i1> %313, i64 4, !dbg !104
  %324 = extractelement <8 x float> %312, i64 4, !dbg !104
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !104
  %326 = extractelement <8 x i1> %313, i64 3, !dbg !106
  %327 = extractelement <8 x float> %312, i64 3, !dbg !106
  %328 = select i1 %326, float 0.000000e+00, float %327, !dbg !106
  %329 = extractelement <8 x i1> %313, i64 2, !dbg !106
  %330 = extractelement <8 x float> %312, i64 2, !dbg !106
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !106
  %332 = extractelement <8 x i1> %313, i64 1, !dbg !108
  %333 = extractelement <8 x float> %312, i64 1, !dbg !108
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !108
  %335 = extractelement <8 x i1> %313, i64 0, !dbg !108
  %336 = extractelement <8 x float> %312, i64 0, !dbg !108
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !108
  %338 = select i1 %207, float %334, float 0.000000e+00, !dbg !109
  %339 = select i1 %207, float %337, float 0.000000e+00, !dbg !109
  %340 = select i1 %150, float %319, float %338, !dbg !110
  %341 = select i1 %150, float %316, float %339, !dbg !110
  %342 = select i1 %95, float %325, float %340, !dbg !110
  %343 = select i1 %95, float %322, float %341, !dbg !110
  %344 = select i1 %36, float %331, float %342, !dbg !110
  %345 = select i1 %36, float %328, float %343, !dbg !110
  %346 = sext i32 %28 to i64, !dbg !111
  %347 = getelementptr float, ptr addrspace(1) %20, i64 %346, !dbg !111
  %348 = bitcast float %344 to i32, !dbg !112
  %349 = bitcast float %345 to i32, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %348, i32 %349, ptr addrspace(1) %347, i1 %30) #3, !dbg !112
  ret void, !dbg !113
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cystzg4zou5xmhb227qrshbdofvj5eea2pqfzjwmjibhokuiyqrq.py", directory: "inductor_cache/ys")
!4 = !{ptr @triton_poi_fused_cat_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_8", linkageName: "triton_poi_fused_cat_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 38, scope: !7)
!23 = !DILocation(line: 33, column: 49, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 62, scope: !7)
!26 = !DILocation(line: 33, column: 55, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 56, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 58, scope: !7)
!40 = !DILocation(line: 57, column: 50, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 72, scope: !7)
!43 = !DILocation(line: 57, column: 64, scope: !7)
!44 = !DILocation(line: 58, column: 31, scope: !7)
!45 = !DILocation(line: 58, column: 44, scope: !7)
!46 = !DILocation(line: 60, column: 31, scope: !7)
!47 = !DILocation(line: 60, column: 44, scope: !7)
!48 = !DILocation(line: 62, column: 20, scope: !7)
!49 = !DILocation(line: 63, column: 27, scope: !7)
!50 = !DILocation(line: 65, column: 20, scope: !7)
!51 = !DILocation(line: 69, column: 31, scope: !7)
!52 = !DILocation(line: 69, column: 44, scope: !7)
!53 = !DILocation(line: 71, column: 31, scope: !7)
!54 = !DILocation(line: 71, column: 44, scope: !7)
!55 = !DILocation(line: 80, column: 20, scope: !7)
!56 = !DILocation(line: 81, column: 35, scope: !7)
!57 = !DILocation(line: 81, column: 45, scope: !7)
!58 = !DILocation(line: 81, column: 40, scope: !7)
!59 = !DILocation(line: 81, column: 51, scope: !7)
!60 = !DILocation(line: 81, column: 32, scope: !7)
!61 = !DILocation(line: 81, column: 74, scope: !7)
!62 = !DILocation(line: 81, column: 66, scope: !7)
!63 = !DILocation(line: 82, column: 32, scope: !7)
!64 = !DILocation(line: 82, column: 46, scope: !7)
!65 = !DILocation(line: 84, column: 32, scope: !7)
!66 = !DILocation(line: 84, column: 46, scope: !7)
!67 = !DILocation(line: 86, column: 20, scope: !7)
!68 = !DILocation(line: 87, column: 27, scope: !7)
!69 = !DILocation(line: 89, column: 20, scope: !7)
!70 = !DILocation(line: 93, column: 32, scope: !7)
!71 = !DILocation(line: 93, column: 46, scope: !7)
!72 = !DILocation(line: 95, column: 32, scope: !7)
!73 = !DILocation(line: 95, column: 46, scope: !7)
!74 = !DILocation(line: 101, column: 20, scope: !7)
!75 = !DILocation(line: 104, column: 34, scope: !7)
!76 = !DILocation(line: 104, column: 42, scope: !7)
!77 = !DILocation(line: 104, column: 57, scope: !7)
!78 = !DILocation(line: 104, column: 39, scope: !7)
!79 = !DILocation(line: 104, column: 48, scope: !7)
!80 = !DILocation(line: 104, column: 32, scope: !7)
!81 = !DILocation(line: 104, column: 71, scope: !7)
!82 = !DILocation(line: 104, column: 63, scope: !7)
!83 = !DILocation(line: 105, column: 32, scope: !7)
!84 = !DILocation(line: 105, column: 46, scope: !7)
!85 = !DILocation(line: 107, column: 32, scope: !7)
!86 = !DILocation(line: 107, column: 46, scope: !7)
!87 = !DILocation(line: 109, column: 20, scope: !7)
!88 = !DILocation(line: 110, column: 27, scope: !7)
!89 = !DILocation(line: 112, column: 20, scope: !7)
!90 = !DILocation(line: 116, column: 32, scope: !7)
!91 = !DILocation(line: 116, column: 46, scope: !7)
!92 = !DILocation(line: 118, column: 32, scope: !7)
!93 = !DILocation(line: 118, column: 46, scope: !7)
!94 = !DILocation(line: 106, column: 20, scope: !7)
!95 = !DILocation(line: 115, column: 20, scope: !7)
!96 = !DILocation(line: 117, column: 20, scope: !7)
!97 = !DILocation(line: 119, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlockFile(scope: !7, file: !100, discriminator: 0)
!100 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!101 = !DILocation(line: 121, column: 42, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !103)
!103 = !DILocation(line: 98, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !105)
!105 = !DILocation(line: 74, column: 42, scope: !7)
!106 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !107)
!107 = !DILocation(line: 50, column: 42, scope: !7)
!108 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !101)
!109 = !DILocation(line: 123, column: 35, scope: !7)
!110 = !DILocation(line: 0, scope: !7)
!111 = !DILocation(line: 127, column: 25, scope: !7)
!112 = !DILocation(line: 127, column: 37, scope: !7)
!113 = !DILocation(line: 127, column: 4, scope: !7)
