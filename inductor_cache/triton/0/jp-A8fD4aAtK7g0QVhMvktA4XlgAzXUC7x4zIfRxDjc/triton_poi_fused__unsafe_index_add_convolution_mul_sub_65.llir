; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_65(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 14, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = lshr i32 %14, 3, !dbg !16
  %21 = and i32 %20, 15, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = icmp slt i32 %22, 16, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %24 = sdiv i32 %.frozen, 4, !dbg !19
  %25 = mul i32 %24, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %.frozen2 = freeze i32 %17, !dbg !21
  %26 = sdiv i32 %.frozen2, 512, !dbg !21
  %27 = mul i32 %26, 512, !dbg !22
  %.decomposed3 = sub i32 %.frozen2, %27, !dbg !22
  %28 = sext i32 %24 to i64, !dbg !23
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !23
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %23) #2, !dbg !24
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %23) #2, !dbg !24
  %32 = sext i32 %.decomposed to i64, !dbg !25
  %33 = getelementptr i64, ptr addrspace(1) %2, i64 %32, !dbg !25
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %23) #2, !dbg !26
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %23) #2, !dbg !26
  %36 = getelementptr i64, ptr addrspace(1) %4, i64 %32, !dbg !27
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %23) #2, !dbg !28
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %23) #2, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %23) #2, !dbg !30
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %23) #2, !dbg !30
  %42 = getelementptr i64, ptr addrspace(1) %6, i64 %28, !dbg !31
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %23) #2, !dbg !32
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %23) #2, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !33
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %23) #2, !dbg !34
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %23) #2, !dbg !34
  %48 = bitcast i32 %47 to float, !dbg !34
  %49 = shl i32 %22, 9, !dbg !35
  %50 = add i32 %49, %.decomposed3, !dbg !36
  %51 = shl i32 %26, 13, !dbg !37
  %52 = add i32 %50, %51, !dbg !38
  %53 = sext i32 %52 to i64, !dbg !39
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !39
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %23) #2, !dbg !40
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !40
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !40
  %58 = bitcast i32 %56 to float, !dbg !40
  %59 = bitcast i32 %57 to float, !dbg !40
  %60 = sext i32 %.decomposed3 to i64, !dbg !41
  %61 = getelementptr float, ptr addrspace(1) %8, i64 %60, !dbg !41
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !42
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !42
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !42
  %65 = bitcast i32 %63 to float, !dbg !42
  %66 = bitcast i32 %64 to float, !dbg !42
  %67 = lshr i64 %31, 62, !dbg !43
  %68 = and i64 %67, 2, !dbg !43
  %69 = add i64 %68, %31, !dbg !43
  %70 = lshr i64 %35, 62, !dbg !44
  %71 = and i64 %70, 2, !dbg !44
  %72 = add i64 %71, %35, !dbg !44
  %73 = shl i64 %69, 10, !dbg !45
  %74 = shl i32 %26, 11, !dbg !46
  %75 = sext i32 %74 to i64, !dbg !47
  %.idx = shl i64 %72, 11, !dbg !48
  %76 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !48
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %60, !dbg !48
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %73, !dbg !48
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %75, !dbg !48
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 %23) #2, !dbg !49
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !49
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !49
  %83 = lshr i64 %38, 62, !dbg !50
  %84 = and i64 %83, 2, !dbg !50
  %85 = add i64 %84, %38, !dbg !50
  %.idx1 = shl i64 %85, 11, !dbg !51
  %86 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !51
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %60, !dbg !51
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %73, !dbg !51
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %75, !dbg !51
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %89, i1 %23) #2, !dbg !52
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !52
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !52
  %93 = lshr i64 %44, 62, !dbg !53
  %94 = and i64 %93, 2, !dbg !53
  %95 = add i64 %94, %44, !dbg !53
  %96 = shl i64 %95, 10, !dbg !54
  %97 = getelementptr float, ptr addrspace(1) %77, i64 %96, !dbg !55
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %75, !dbg !55
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %98, i1 %23) #2, !dbg !56
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !56
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !56
  %102 = getelementptr float, ptr addrspace(1) %87, i64 %96, !dbg !57
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %75, !dbg !57
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %103, i1 %23) #2, !dbg !58
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !58
  %106 = extractvalue { i32, i32 } %104, 1, !dbg !58
  %107 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !56
  %108 = insertelement <2 x i32> %107, i32 %81, i64 1, !dbg !56
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !56
  %110 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !58
  %111 = insertelement <2 x i32> %110, i32 %91, i64 1, !dbg !58
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !58
  %113 = fsub <2 x float> %112, %109, !dbg !59
  %114 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !60
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !60
  %116 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %117 = fmul <2 x float> %113, %116, !dbg !60
  %118 = fadd <2 x float> %117, %109, !dbg !61
  %119 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !56
  %120 = insertelement <2 x i32> %119, i32 %82, i64 1, !dbg !56
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !56
  %122 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !58
  %123 = insertelement <2 x i32> %122, i32 %92, i64 1, !dbg !58
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !58
  %125 = fsub <2 x float> %124, %121, !dbg !59
  %126 = fmul <2 x float> %125, %116, !dbg !60
  %127 = fadd <2 x float> %126, %121, !dbg !61
  %128 = extractelement <2 x float> %118, i64 0, !dbg !62
  %129 = extractelement <2 x float> %118, i64 1, !dbg !63
  %130 = fsub float %128, %129, !dbg !62
  %131 = extractelement <2 x float> %127, i64 0, !dbg !62
  %132 = extractelement <2 x float> %127, i64 1, !dbg !63
  %133 = fsub float %131, %132, !dbg !62
  %134 = fmul float %130, %48, !dbg !64
  %135 = fmul float %133, %48, !dbg !64
  %136 = fadd float %129, %134, !dbg !63
  %137 = fadd float %132, %135, !dbg !63
  %138 = fadd float %58, %65, !dbg !65
  %139 = fadd float %59, %66, !dbg !65
  %140 = fadd float %138, %136, !dbg !66
  %141 = fadd float %139, %137, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %142 = bitcast float %140 to i32, !dbg !68
  %143 = bitcast float %141 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %54, i1 %23) #2, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clrwsndfjghripqojrt3ve3jfai4e24t2awmrqh7qtlmgykifzfy.py", directory: "inductor_cache/lr")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_65, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_65, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_65", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_65", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 40, scope: !7)
!37 = !DILocation(line: 40, column: 54, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 59, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 51, scope: !7)
!46 = !DILocation(line: 49, column: 63, scope: !7)
!47 = !DILocation(line: 49, column: 58, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 68, scope: !7)
!50 = !DILocation(line: 52, column: 35, scope: !7)
!51 = !DILocation(line: 53, column: 31, scope: !7)
!52 = !DILocation(line: 53, column: 70, scope: !7)
!53 = !DILocation(line: 59, column: 35, scope: !7)
!54 = !DILocation(line: 60, column: 52, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 70, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 71, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 4, scope: !7)
!68 = !DILocation(line: 71, column: 59, scope: !7)
!69 = !DILocation(line: 71, column: 4, scope: !7)
