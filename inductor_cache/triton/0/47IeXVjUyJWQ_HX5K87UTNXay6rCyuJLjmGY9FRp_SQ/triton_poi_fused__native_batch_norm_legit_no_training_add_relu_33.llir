; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 64, !dbg !14
  %17 = sdiv i32 %15, 64, !dbg !14
  %18 = srem i32 %16, 512, !dbg !15
  %19 = srem i32 %17, 512, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %26 = sext i32 %18 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = sext i32 %19 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %41 = bitcast i32 %40 to float, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %43 = bitcast i32 %42 to float, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %45 = bitcast i32 %44 to float, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %49 = bitcast i32 %48 to float, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %51 = bitcast i32 %50 to float, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %53 = bitcast i32 %52 to float, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %55 = bitcast i32 %54 to float, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %80 = fadd float %41, 0x3EE4F8B580000000, !dbg !28
  %81 = fadd float %43, 0x3EE4F8B580000000, !dbg !28
  %82 = fadd float %45, 0x3EE4F8B580000000, !dbg !28
  %83 = fadd float %47, 0x3EE4F8B580000000, !dbg !28
  %84 = fadd float %49, 0x3EE4F8B580000000, !dbg !28
  %85 = fadd float %51, 0x3EE4F8B580000000, !dbg !28
  %86 = fadd float %53, 0x3EE4F8B580000000, !dbg !28
  %87 = fadd float %55, 0x3EE4F8B580000000, !dbg !28
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %88, 0, !dbg !29
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %89, 0, !dbg !29
  br i1 %.not.i, label %95, label %90, !dbg !29

90:                                               ; preds = %8
  br i1 %.not1.i, label %93, label %91, !dbg !29

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

95:                                               ; preds = %8
  br i1 %.not1.i, label %98, label %96, !dbg !29

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %91, %93, %96, %98
  %.0.i = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !29
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %100, 0, !dbg !29
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %101, 0, !dbg !29
  br i1 %.not.i1, label %107, label %102, !dbg !29

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !29

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %110, label %108, !dbg !29

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %103, %105, %108, %110
  %.0.i3 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !29
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %112, 0, !dbg !29
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %113, 0, !dbg !29
  br i1 %.not.i6, label %119, label %114, !dbg !29

114:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %117, label %115, !dbg !29

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

119:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %122, label %120, !dbg !29

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %115, %117, %120, %122
  %.0.i8 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !29
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %124, 0, !dbg !29
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %125, 0, !dbg !29
  br i1 %.not.i11, label %131, label %126, !dbg !29

126:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %129, label %127, !dbg !29

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

131:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %134, label %132, !dbg !29

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %127, %129, %132, %134
  %.0.i13 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !29
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %136, 0, !dbg !29
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %137, 0, !dbg !29
  br i1 %.not.i16, label %143, label %138, !dbg !29

138:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %141, label %139, !dbg !29

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

143:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %146, label %144, !dbg !29

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %139, %141, %144, %146
  %.0.i18 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !29
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %148, 0, !dbg !29
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %149, 0, !dbg !29
  br i1 %.not.i21, label %155, label %150, !dbg !29

150:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %153, label %151, !dbg !29

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

155:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %158, label %156, !dbg !29

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %151, %153, %156, %158
  %.0.i23 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !29
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %160, 0, !dbg !29
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %161, 0, !dbg !29
  br i1 %.not.i26, label %167, label %162, !dbg !29

162:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %165, label %163, !dbg !29

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

167:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %170, label %168, !dbg !29

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %163, %165, %168, %170
  %.0.i28 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !29
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %172, 0, !dbg !29
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %173, 0, !dbg !29
  br i1 %.not.i31, label %179, label %174, !dbg !29

174:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %177, label %175, !dbg !29

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

179:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %182, label %180, !dbg !29

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %175, %177, %180, %182
  %.0.i33 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !29
  %184 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %185 = insertelement <8 x i32> poison, i32 %37, i64 0, !dbg !19
  %186 = insertelement <8 x i32> %185, i32 %36, i64 1, !dbg !19
  %187 = insertelement <8 x i32> %186, i32 %35, i64 2, !dbg !19
  %188 = insertelement <8 x i32> %187, i32 %34, i64 3, !dbg !19
  %189 = insertelement <8 x i32> %188, i32 %33, i64 4, !dbg !19
  %190 = insertelement <8 x i32> %189, i32 %32, i64 5, !dbg !19
  %191 = insertelement <8 x i32> %190, i32 %31, i64 6, !dbg !19
  %192 = insertelement <8 x i32> %191, i32 %30, i64 7, !dbg !19
  %193 = bitcast <8 x i32> %192 to <8 x float>, !dbg !19
  %194 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %195 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %196 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %197 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %198 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %199 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %200 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %201 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !27
  %202 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !27
  %203 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !27
  %204 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !27
  %205 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !27
  %206 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !27
  %207 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !27
  %208 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !27
  %209 = insertelement <8 x i32> poison, i32 %75, i64 0, !dbg !25
  %210 = insertelement <8 x i32> %209, i32 %74, i64 1, !dbg !25
  %211 = insertelement <8 x i32> %210, i32 %73, i64 2, !dbg !25
  %212 = insertelement <8 x i32> %211, i32 %72, i64 3, !dbg !25
  %213 = insertelement <8 x i32> %212, i32 %71, i64 4, !dbg !25
  %214 = insertelement <8 x i32> %213, i32 %70, i64 5, !dbg !25
  %215 = insertelement <8 x i32> %214, i32 %69, i64 6, !dbg !25
  %216 = insertelement <8 x i32> %215, i32 %68, i64 7, !dbg !25
  %217 = bitcast <8 x i32> %216 to <8 x float>, !dbg !25
  %218 = insertelement <8 x i32> poison, i32 %65, i64 0, !dbg !23
  %219 = insertelement <8 x i32> %218, i32 %64, i64 1, !dbg !23
  %220 = insertelement <8 x i32> %219, i32 %63, i64 2, !dbg !23
  %221 = insertelement <8 x i32> %220, i32 %62, i64 3, !dbg !23
  %222 = insertelement <8 x i32> %221, i32 %61, i64 4, !dbg !23
  %223 = insertelement <8 x i32> %222, i32 %60, i64 5, !dbg !23
  %224 = insertelement <8 x i32> %223, i32 %59, i64 6, !dbg !23
  %225 = insertelement <8 x i32> %224, i32 %58, i64 7, !dbg !23
  %226 = bitcast <8 x i32> %225 to <8 x float>, !dbg !23
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !30
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !30
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !30
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !30
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !30
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !30
  %235 = insertelement <8 x i32> poison, i32 %184, i64 0, !dbg !17
  %236 = insertelement <8 x i32> %235, i32 %194, i64 1, !dbg !17
  %237 = insertelement <8 x i32> %236, i32 %195, i64 2, !dbg !17
  %238 = insertelement <8 x i32> %237, i32 %196, i64 3, !dbg !17
  %239 = insertelement <8 x i32> %238, i32 %197, i64 4, !dbg !17
  %240 = insertelement <8 x i32> %239, i32 %198, i64 5, !dbg !17
  %241 = insertelement <8 x i32> %240, i32 %199, i64 6, !dbg !17
  %242 = insertelement <8 x i32> %241, i32 %200, i64 7, !dbg !17
  %243 = bitcast <8 x i32> %242 to <8 x float>, !dbg !17
  %244 = fsub <8 x float> %243, %193, !dbg !31
  %245 = insertelement <8 x i32> poison, i32 %201, i64 0, !dbg !27
  %246 = insertelement <8 x i32> %245, i32 %202, i64 1, !dbg !27
  %247 = insertelement <8 x i32> %246, i32 %203, i64 2, !dbg !27
  %248 = insertelement <8 x i32> %247, i32 %204, i64 3, !dbg !27
  %249 = insertelement <8 x i32> %248, i32 %205, i64 4, !dbg !27
  %250 = insertelement <8 x i32> %249, i32 %206, i64 5, !dbg !27
  %251 = insertelement <8 x i32> %250, i32 %207, i64 6, !dbg !27
  %252 = insertelement <8 x i32> %251, i32 %208, i64 7, !dbg !27
  %253 = bitcast <8 x i32> %252 to <8 x float>, !dbg !27
  %254 = insertelement <8 x float> poison, float %234, i64 0, !dbg !32
  %255 = insertelement <8 x float> %254, float %233, i64 1, !dbg !32
  %256 = insertelement <8 x float> %255, float %232, i64 2, !dbg !32
  %257 = insertelement <8 x float> %256, float %231, i64 3, !dbg !32
  %258 = insertelement <8 x float> %257, float %230, i64 4, !dbg !32
  %259 = insertelement <8 x float> %258, float %229, i64 5, !dbg !32
  %260 = insertelement <8 x float> %259, float %228, i64 6, !dbg !32
  %261 = insertelement <8 x float> %260, float %227, i64 7, !dbg !32
  %262 = fmul <8 x float> %244, %261, !dbg !32
  %263 = fmul <8 x float> %262, %226, !dbg !33
  %264 = fadd <8 x float> %263, %217, !dbg !34
  %265 = fadd <8 x float> %264, %253, !dbg !35
  %266 = fcmp olt <8 x float> %265, zeroinitializer, !dbg !36
  %267 = extractelement <8 x i1> %266, i64 7, !dbg !40
  %268 = extractelement <8 x i1> %266, i64 6, !dbg !40
  %269 = extractelement <8 x i1> %266, i64 5, !dbg !40
  %270 = extractelement <8 x i1> %266, i64 4, !dbg !40
  %271 = extractelement <8 x i1> %266, i64 3, !dbg !40
  %272 = extractelement <8 x i1> %266, i64 2, !dbg !40
  %273 = extractelement <8 x i1> %266, i64 1, !dbg !40
  %274 = extractelement <8 x i1> %266, i64 0, !dbg !40
  %275 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !41
  %276 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !41
  %bc = bitcast <8 x float> %265 to <8 x i32>, !dbg !42
  %277 = extractelement <8 x i32> %bc, i64 7, !dbg !42
  %278 = select i1 %267, i32 0, i32 %277, !dbg !40
  %bc36 = bitcast <8 x float> %265 to <8 x i32>, !dbg !42
  %279 = extractelement <8 x i32> %bc36, i64 6, !dbg !42
  %280 = select i1 %268, i32 0, i32 %279, !dbg !40
  %bc37 = bitcast <8 x float> %265 to <8 x i32>, !dbg !42
  %281 = extractelement <8 x i32> %bc37, i64 5, !dbg !42
  %282 = select i1 %269, i32 0, i32 %281, !dbg !40
  %bc38 = bitcast <8 x float> %265 to <8 x i32>, !dbg !42
  %283 = extractelement <8 x i32> %bc38, i64 4, !dbg !42
  %284 = select i1 %270, i32 0, i32 %283, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %278, i32 %280, i32 %282, i32 %284, ptr addrspace(1) %275, i1 true) #3, !dbg !42
  %bc39 = bitcast <8 x float> %265 to <8 x i32>, !dbg !42
  %285 = extractelement <8 x i32> %bc39, i64 3, !dbg !42
  %286 = select i1 %271, i32 0, i32 %285, !dbg !40
  %bc40 = bitcast <8 x float> %265 to <8 x i32>, !dbg !42
  %287 = extractelement <8 x i32> %bc40, i64 2, !dbg !42
  %288 = select i1 %272, i32 0, i32 %287, !dbg !40
  %bc41 = bitcast <8 x float> %265 to <8 x i32>, !dbg !42
  %289 = extractelement <8 x i32> %bc41, i64 1, !dbg !42
  %290 = select i1 %273, i32 0, i32 %289, !dbg !40
  %bc42 = bitcast <8 x float> %265 to <8 x i32>, !dbg !42
  %291 = extractelement <8 x i32> %bc42, i64 0, !dbg !42
  %292 = select i1 %274, i32 0, i32 %291, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %288, i32 %290, i32 %292, ptr addrspace(1) %276, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwmtelkgsl6o7sfjnqsm3gpcfpnu46vykdzy4qh6aubzwjtm5xnj.py", directory: "inductor_cache/wm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 26, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 46, column: 25, scope: !7)
!42 = !DILocation(line: 46, column: 37, scope: !7)
!43 = !DILocation(line: 46, column: 4, scope: !7)
