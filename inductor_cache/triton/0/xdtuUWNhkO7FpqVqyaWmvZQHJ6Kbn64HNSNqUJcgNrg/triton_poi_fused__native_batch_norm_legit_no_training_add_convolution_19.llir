; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 2, !dbg !13
  %22 = or disjoint i32 %20, 512, !dbg !13
  %23 = or disjoint i32 %20, 514, !dbg !13
  %24 = icmp slt i32 %20, 71680, !dbg !14
  %25 = icmp slt i32 %22, 71680, !dbg !14
  %26 = srem i32 %20, 70, !dbg !15
  %27 = srem i32 %21, 70, !dbg !15
  %28 = srem i32 %22, 70, !dbg !15
  %29 = srem i32 %23, 70, !dbg !15
  %30 = sext i32 %20 to i64, !dbg !16
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !16
  %32 = sext i32 %22 to i64, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %24) #3, !dbg !17
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %25) #3, !dbg !17
  %36 = sext i32 %26 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !18
  %38 = sext i32 %27 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !18
  %40 = sext i32 %28 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !18
  %42 = sext i32 %29 to i64, !dbg !18
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !18
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %24) #3, !dbg !19
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %24) #3, !dbg !19
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %25) #3, !dbg !19
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %25) #3, !dbg !19
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !20
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !20
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %24) #3, !dbg !21
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %25) #3, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !22
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %24) #3, !dbg !23
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %24) #3, !dbg !23
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %25) #3, !dbg !23
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %25) #3, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !24
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %24) #3, !dbg !25
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %24) #3, !dbg !25
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %25) #3, !dbg !25
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %25) #3, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !26
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %24) #3, !dbg !27
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !27
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !27
  %75 = bitcast i32 %73 to float, !dbg !27
  %76 = bitcast i32 %74 to float, !dbg !27
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %24) #3, !dbg !27
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !27
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !27
  %80 = bitcast i32 %78 to float, !dbg !27
  %81 = bitcast i32 %79 to float, !dbg !27
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %25) #3, !dbg !27
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !27
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !27
  %85 = bitcast i32 %83 to float, !dbg !27
  %86 = bitcast i32 %84 to float, !dbg !27
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 %25) #3, !dbg !27
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !27
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !27
  %90 = bitcast i32 %88 to float, !dbg !27
  %91 = bitcast i32 %89 to float, !dbg !27
  %92 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !28
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !28
  %95 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !28
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %92, i1 %24) #3, !dbg !29
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %93, i1 %24) #3, !dbg !29
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %94, i1 %25) #3, !dbg !29
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %95, i1 %25) #3, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %7, i64 %40, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !30
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %100, i1 %24) #3, !dbg !31
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %101, i1 %24) #3, !dbg !31
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %102, i1 %25) #3, !dbg !31
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %103, i1 %25) #3, !dbg !31
  %108 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %8, i64 %40, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %8, i64 %42, !dbg !32
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %108, i1 %24) #3, !dbg !33
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %109, i1 %24) #3, !dbg !33
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %110, i1 %25) #3, !dbg !33
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %111, i1 %25) #3, !dbg !33
  %116 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !34
  %117 = getelementptr float, ptr addrspace(1) %9, i64 %38, !dbg !34
  %118 = getelementptr float, ptr addrspace(1) %9, i64 %40, !dbg !34
  %119 = getelementptr float, ptr addrspace(1) %9, i64 %42, !dbg !34
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %116, i1 %24) #3, !dbg !35
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !35
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !35
  %123 = bitcast i32 %121 to float, !dbg !35
  %124 = bitcast i32 %122 to float, !dbg !35
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %117, i1 %24) #3, !dbg !35
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !35
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !35
  %128 = bitcast i32 %126 to float, !dbg !35
  %129 = bitcast i32 %127 to float, !dbg !35
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %118, i1 %25) #3, !dbg !35
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !35
  %132 = extractvalue { i32, i32 } %130, 1, !dbg !35
  %133 = bitcast i32 %131 to float, !dbg !35
  %134 = bitcast i32 %132 to float, !dbg !35
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %119, i1 %25) #3, !dbg !35
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !35
  %137 = extractvalue { i32, i32 } %135, 1, !dbg !35
  %138 = bitcast i32 %136 to float, !dbg !35
  %139 = bitcast i32 %137 to float, !dbg !35
  %140 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !36
  %141 = getelementptr float, ptr addrspace(1) %10, i64 %38, !dbg !36
  %142 = getelementptr float, ptr addrspace(1) %10, i64 %40, !dbg !36
  %143 = getelementptr float, ptr addrspace(1) %10, i64 %42, !dbg !36
  %144 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %140, i1 %24) #3, !dbg !37
  %145 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %141, i1 %24) #3, !dbg !37
  %146 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %142, i1 %25) #3, !dbg !37
  %147 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %143, i1 %25) #3, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %11, i64 %36, !dbg !38
  %149 = getelementptr float, ptr addrspace(1) %11, i64 %38, !dbg !38
  %150 = getelementptr float, ptr addrspace(1) %11, i64 %40, !dbg !38
  %151 = getelementptr float, ptr addrspace(1) %11, i64 %42, !dbg !38
  %152 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %148, i1 %24) #3, !dbg !39
  %153 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %149, i1 %24) #3, !dbg !39
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %150, i1 %25) #3, !dbg !39
  %155 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %151, i1 %25) #3, !dbg !39
  %156 = fadd float %75, 0x3EE4F8B580000000, !dbg !40
  %157 = fadd float %76, 0x3EE4F8B580000000, !dbg !40
  %158 = fadd float %80, 0x3EE4F8B580000000, !dbg !40
  %159 = fadd float %81, 0x3EE4F8B580000000, !dbg !40
  %160 = fadd float %85, 0x3EE4F8B580000000, !dbg !40
  %161 = fadd float %86, 0x3EE4F8B580000000, !dbg !40
  %162 = fadd float %90, 0x3EE4F8B580000000, !dbg !40
  %163 = fadd float %91, 0x3EE4F8B580000000, !dbg !40
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %164, 0, !dbg !41
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %165, 0, !dbg !41
  br i1 %.not.i, label %171, label %166, !dbg !41

166:                                              ; preds = %14
  br i1 %.not1.i, label %169, label %167, !dbg !41

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

171:                                              ; preds = %14
  br i1 %.not1.i, label %174, label %172, !dbg !41

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %167, %169, %172, %174
  %.0.i = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !41
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %176, 0, !dbg !41
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %177, 0, !dbg !41
  br i1 %.not.i1, label %183, label %178, !dbg !41

178:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %181, label %179, !dbg !41

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

183:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %186, label %184, !dbg !41

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %179, %181, %184, %186
  %.0.i3 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !41
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i6 = icmp eq i32 %188, 0, !dbg !41
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i9 = icmp eq i32 %189, 0, !dbg !41
  br i1 %.not.i6, label %195, label %190, !dbg !41

190:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %193, label %191, !dbg !41

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

195:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %198, label %196, !dbg !41

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

__nv_sqrtf.exit10:                                ; preds = %191, %193, %196, %198
  %.0.i8 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !41
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i11 = icmp eq i32 %200, 0, !dbg !41
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i14 = icmp eq i32 %201, 0, !dbg !41
  br i1 %.not.i11, label %207, label %202, !dbg !41

202:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %205, label %203, !dbg !41

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

207:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %210, label %208, !dbg !41

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

__nv_sqrtf.exit15:                                ; preds = %203, %205, %208, %210
  %.0.i13 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !41
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i16 = icmp eq i32 %212, 0, !dbg !41
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i19 = icmp eq i32 %213, 0, !dbg !41
  br i1 %.not.i16, label %219, label %214, !dbg !41

214:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %217, label %215, !dbg !41

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #3, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #3, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

219:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %222, label %220, !dbg !41

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #3, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #3, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

__nv_sqrtf.exit20:                                ; preds = %215, %217, %220, %222
  %.0.i18 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !41
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i21 = icmp eq i32 %224, 0, !dbg !41
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i24 = icmp eq i32 %225, 0, !dbg !41
  br i1 %.not.i21, label %231, label %226, !dbg !41

226:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %229, label %227, !dbg !41

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

231:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %234, label %232, !dbg !41

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

__nv_sqrtf.exit25:                                ; preds = %227, %229, %232, %234
  %.0.i23 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !41
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i26 = icmp eq i32 %236, 0, !dbg !41
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i29 = icmp eq i32 %237, 0, !dbg !41
  br i1 %.not.i26, label %243, label %238, !dbg !41

238:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %241, label %239, !dbg !41

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %162) #3, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %162) #3, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

243:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %246, label %244, !dbg !41

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.f(float %162) #3, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.f(float %162) #3, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

__nv_sqrtf.exit30:                                ; preds = %239, %241, %244, %246
  %.0.i28 = phi float [ %240, %239 ], [ %242, %241 ], [ %245, %244 ], [ %247, %246 ], !dbg !41
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i31 = icmp eq i32 %248, 0, !dbg !41
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i34 = icmp eq i32 %249, 0, !dbg !41
  br i1 %.not.i31, label %255, label %250, !dbg !41

250:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %253, label %251, !dbg !41

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #3, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #3, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

255:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %258, label %256, !dbg !41

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #3, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #3, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

__nv_sqrtf.exit35:                                ; preds = %251, %253, %256, %258
  %.0.i33 = phi float [ %252, %251 ], [ %254, %253 ], [ %257, %256 ], [ %259, %258 ], !dbg !41
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !42
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !42
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !42
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !42
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !42
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !42
  %268 = fadd float %123, 0x3EE4F8B580000000, !dbg !43
  %269 = fadd float %124, 0x3EE4F8B580000000, !dbg !43
  %270 = fadd float %128, 0x3EE4F8B580000000, !dbg !43
  %271 = fadd float %129, 0x3EE4F8B580000000, !dbg !43
  %272 = fadd float %133, 0x3EE4F8B580000000, !dbg !43
  %273 = fadd float %134, 0x3EE4F8B580000000, !dbg !43
  %274 = fadd float %138, 0x3EE4F8B580000000, !dbg !43
  %275 = fadd float %139, 0x3EE4F8B580000000, !dbg !43
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i36 = icmp eq i32 %276, 0, !dbg !44
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i39 = icmp eq i32 %277, 0, !dbg !44
  br i1 %.not.i36, label %283, label %278, !dbg !44

278:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %281, label %279, !dbg !44

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %268) #3, !dbg !44
  br label %__nv_sqrtf.exit40, !dbg !44

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %268) #3, !dbg !44
  br label %__nv_sqrtf.exit40, !dbg !44

283:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %286, label %284, !dbg !44

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.f(float %268) #3, !dbg !44
  br label %__nv_sqrtf.exit40, !dbg !44

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.f(float %268) #3, !dbg !44
  br label %__nv_sqrtf.exit40, !dbg !44

__nv_sqrtf.exit40:                                ; preds = %279, %281, %284, %286
  %.0.i38 = phi float [ %280, %279 ], [ %282, %281 ], [ %285, %284 ], [ %287, %286 ], !dbg !44
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i41 = icmp eq i32 %288, 0, !dbg !44
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i44 = icmp eq i32 %289, 0, !dbg !44
  br i1 %.not.i41, label %295, label %290, !dbg !44

290:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %293, label %291, !dbg !44

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %269) #3, !dbg !44
  br label %__nv_sqrtf.exit45, !dbg !44

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %269) #3, !dbg !44
  br label %__nv_sqrtf.exit45, !dbg !44

295:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %298, label %296, !dbg !44

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.f(float %269) #3, !dbg !44
  br label %__nv_sqrtf.exit45, !dbg !44

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.f(float %269) #3, !dbg !44
  br label %__nv_sqrtf.exit45, !dbg !44

__nv_sqrtf.exit45:                                ; preds = %291, %293, %296, %298
  %.0.i43 = phi float [ %292, %291 ], [ %294, %293 ], [ %297, %296 ], [ %299, %298 ], !dbg !44
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i46 = icmp eq i32 %300, 0, !dbg !44
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i49 = icmp eq i32 %301, 0, !dbg !44
  br i1 %.not.i46, label %307, label %302, !dbg !44

302:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %305, label %303, !dbg !44

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %270) #3, !dbg !44
  br label %__nv_sqrtf.exit50, !dbg !44

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %270) #3, !dbg !44
  br label %__nv_sqrtf.exit50, !dbg !44

307:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %310, label %308, !dbg !44

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.f(float %270) #3, !dbg !44
  br label %__nv_sqrtf.exit50, !dbg !44

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.f(float %270) #3, !dbg !44
  br label %__nv_sqrtf.exit50, !dbg !44

__nv_sqrtf.exit50:                                ; preds = %303, %305, %308, %310
  %.0.i48 = phi float [ %304, %303 ], [ %306, %305 ], [ %309, %308 ], [ %311, %310 ], !dbg !44
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i51 = icmp eq i32 %312, 0, !dbg !44
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i54 = icmp eq i32 %313, 0, !dbg !44
  br i1 %.not.i51, label %319, label %314, !dbg !44

314:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %317, label %315, !dbg !44

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %271) #3, !dbg !44
  br label %__nv_sqrtf.exit55, !dbg !44

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %271) #3, !dbg !44
  br label %__nv_sqrtf.exit55, !dbg !44

319:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %322, label %320, !dbg !44

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.f(float %271) #3, !dbg !44
  br label %__nv_sqrtf.exit55, !dbg !44

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.f(float %271) #3, !dbg !44
  br label %__nv_sqrtf.exit55, !dbg !44

__nv_sqrtf.exit55:                                ; preds = %315, %317, %320, %322
  %.0.i53 = phi float [ %316, %315 ], [ %318, %317 ], [ %321, %320 ], [ %323, %322 ], !dbg !44
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i56 = icmp eq i32 %324, 0, !dbg !44
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i59 = icmp eq i32 %325, 0, !dbg !44
  br i1 %.not.i56, label %331, label %326, !dbg !44

326:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %329, label %327, !dbg !44

327:                                              ; preds = %326
  %328 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %272) #3, !dbg !44
  br label %__nv_sqrtf.exit60, !dbg !44

329:                                              ; preds = %326
  %330 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %272) #3, !dbg !44
  br label %__nv_sqrtf.exit60, !dbg !44

331:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %334, label %332, !dbg !44

332:                                              ; preds = %331
  %333 = tail call float @llvm.nvvm.sqrt.rn.f(float %272) #3, !dbg !44
  br label %__nv_sqrtf.exit60, !dbg !44

334:                                              ; preds = %331
  %335 = tail call float @llvm.nvvm.sqrt.approx.f(float %272) #3, !dbg !44
  br label %__nv_sqrtf.exit60, !dbg !44

__nv_sqrtf.exit60:                                ; preds = %327, %329, %332, %334
  %.0.i58 = phi float [ %328, %327 ], [ %330, %329 ], [ %333, %332 ], [ %335, %334 ], !dbg !44
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i61 = icmp eq i32 %336, 0, !dbg !44
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i64 = icmp eq i32 %337, 0, !dbg !44
  br i1 %.not.i61, label %343, label %338, !dbg !44

338:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %341, label %339, !dbg !44

339:                                              ; preds = %338
  %340 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %273) #3, !dbg !44
  br label %__nv_sqrtf.exit65, !dbg !44

341:                                              ; preds = %338
  %342 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %273) #3, !dbg !44
  br label %__nv_sqrtf.exit65, !dbg !44

343:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %346, label %344, !dbg !44

344:                                              ; preds = %343
  %345 = tail call float @llvm.nvvm.sqrt.rn.f(float %273) #3, !dbg !44
  br label %__nv_sqrtf.exit65, !dbg !44

346:                                              ; preds = %343
  %347 = tail call float @llvm.nvvm.sqrt.approx.f(float %273) #3, !dbg !44
  br label %__nv_sqrtf.exit65, !dbg !44

__nv_sqrtf.exit65:                                ; preds = %339, %341, %344, %346
  %.0.i63 = phi float [ %340, %339 ], [ %342, %341 ], [ %345, %344 ], [ %347, %346 ], !dbg !44
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i66 = icmp eq i32 %348, 0, !dbg !44
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i69 = icmp eq i32 %349, 0, !dbg !44
  br i1 %.not.i66, label %355, label %350, !dbg !44

350:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %353, label %351, !dbg !44

351:                                              ; preds = %350
  %352 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %274) #3, !dbg !44
  br label %__nv_sqrtf.exit70, !dbg !44

353:                                              ; preds = %350
  %354 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %274) #3, !dbg !44
  br label %__nv_sqrtf.exit70, !dbg !44

355:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %358, label %356, !dbg !44

356:                                              ; preds = %355
  %357 = tail call float @llvm.nvvm.sqrt.rn.f(float %274) #3, !dbg !44
  br label %__nv_sqrtf.exit70, !dbg !44

358:                                              ; preds = %355
  %359 = tail call float @llvm.nvvm.sqrt.approx.f(float %274) #3, !dbg !44
  br label %__nv_sqrtf.exit70, !dbg !44

__nv_sqrtf.exit70:                                ; preds = %351, %353, %356, %358
  %.0.i68 = phi float [ %352, %351 ], [ %354, %353 ], [ %357, %356 ], [ %359, %358 ], !dbg !44
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i71 = icmp eq i32 %360, 0, !dbg !44
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i74 = icmp eq i32 %361, 0, !dbg !44
  br i1 %.not.i71, label %367, label %362, !dbg !44

362:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %365, label %363, !dbg !44

363:                                              ; preds = %362
  %364 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %275) #3, !dbg !44
  br label %__nv_sqrtf.exit75, !dbg !44

365:                                              ; preds = %362
  %366 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %275) #3, !dbg !44
  br label %__nv_sqrtf.exit75, !dbg !44

367:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %370, label %368, !dbg !44

368:                                              ; preds = %367
  %369 = tail call float @llvm.nvvm.sqrt.rn.f(float %275) #3, !dbg !44
  br label %__nv_sqrtf.exit75, !dbg !44

370:                                              ; preds = %367
  %371 = tail call float @llvm.nvvm.sqrt.approx.f(float %275) #3, !dbg !44
  br label %__nv_sqrtf.exit75, !dbg !44

__nv_sqrtf.exit75:                                ; preds = %363, %365, %368, %370
  %.0.i73 = phi float [ %364, %363 ], [ %366, %365 ], [ %369, %368 ], [ %371, %370 ], !dbg !44
  %372 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !21
  %373 = extractvalue { i32, i32 } %59, 1, !dbg !23
  %374 = extractvalue { i32, i32 } %115, 1, !dbg !33
  %375 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !21
  %376 = extractvalue { i32, i32 } %59, 0, !dbg !23
  %377 = extractvalue { i32, i32 } %115, 0, !dbg !33
  %378 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !21
  %379 = extractvalue { i32, i32 } %58, 1, !dbg !23
  %380 = extractvalue { i32, i32 } %114, 1, !dbg !33
  %381 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !21
  %382 = extractvalue { i32, i32 } %58, 0, !dbg !23
  %383 = extractvalue { i32, i32 } %114, 0, !dbg !33
  %384 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !21
  %385 = extractvalue { i32, i32 } %57, 1, !dbg !23
  %386 = extractvalue { i32, i32 } %113, 1, !dbg !33
  %387 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !21
  %388 = extractvalue { i32, i32 } %57, 0, !dbg !23
  %389 = extractvalue { i32, i32 } %113, 0, !dbg !33
  %390 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !21
  %391 = extractvalue { i32, i32 } %56, 1, !dbg !23
  %392 = extractvalue { i32, i32 } %112, 1, !dbg !33
  %393 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !21
  %394 = extractvalue { i32, i32 } %56, 0, !dbg !23
  %395 = extractvalue { i32, i32 } %112, 0, !dbg !33
  %396 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !17
  %397 = extractvalue { i32, i32 } %47, 1, !dbg !19
  %398 = extractvalue { i32, i32 } %67, 1, !dbg !25
  %399 = extractvalue { i32, i32 } %99, 1, !dbg !29
  %400 = extractvalue { i32, i32 } %107, 1, !dbg !31
  %401 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !17
  %402 = extractvalue { i32, i32 } %47, 0, !dbg !19
  %403 = extractvalue { i32, i32 } %67, 0, !dbg !25
  %404 = extractvalue { i32, i32 } %99, 0, !dbg !29
  %405 = extractvalue { i32, i32 } %107, 0, !dbg !31
  %406 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !17
  %407 = extractvalue { i32, i32 } %46, 1, !dbg !19
  %408 = extractvalue { i32, i32 } %66, 1, !dbg !25
  %409 = extractvalue { i32, i32 } %98, 1, !dbg !29
  %410 = extractvalue { i32, i32 } %106, 1, !dbg !31
  %411 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !17
  %412 = extractvalue { i32, i32 } %46, 0, !dbg !19
  %413 = extractvalue { i32, i32 } %66, 0, !dbg !25
  %414 = extractvalue { i32, i32 } %98, 0, !dbg !29
  %415 = extractvalue { i32, i32 } %106, 0, !dbg !31
  %416 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !17
  %417 = extractvalue { i32, i32 } %45, 1, !dbg !19
  %418 = extractvalue { i32, i32 } %65, 1, !dbg !25
  %419 = extractvalue { i32, i32 } %97, 1, !dbg !29
  %420 = extractvalue { i32, i32 } %105, 1, !dbg !31
  %421 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !17
  %422 = extractvalue { i32, i32 } %45, 0, !dbg !19
  %423 = extractvalue { i32, i32 } %65, 0, !dbg !25
  %424 = extractvalue { i32, i32 } %97, 0, !dbg !29
  %425 = extractvalue { i32, i32 } %105, 0, !dbg !31
  %426 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !17
  %427 = extractvalue { i32, i32 } %44, 1, !dbg !19
  %428 = extractvalue { i32, i32 } %64, 1, !dbg !25
  %429 = extractvalue { i32, i32 } %96, 1, !dbg !29
  %430 = extractvalue { i32, i32 } %104, 1, !dbg !31
  %431 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !17
  %432 = extractvalue { i32, i32 } %44, 0, !dbg !19
  %433 = extractvalue { i32, i32 } %64, 0, !dbg !25
  %434 = extractvalue { i32, i32 } %96, 0, !dbg !29
  %435 = extractvalue { i32, i32 } %104, 0, !dbg !31
  %436 = extractvalue { i32, i32 } %155, 1, !dbg !39
  %437 = extractvalue { i32, i32 } %155, 0, !dbg !39
  %438 = extractvalue { i32, i32 } %154, 1, !dbg !39
  %439 = extractvalue { i32, i32 } %154, 0, !dbg !39
  %440 = extractvalue { i32, i32 } %153, 1, !dbg !39
  %441 = extractvalue { i32, i32 } %153, 0, !dbg !39
  %442 = extractvalue { i32, i32 } %152, 1, !dbg !39
  %443 = extractvalue { i32, i32 } %152, 0, !dbg !39
  %444 = extractvalue { i32, i32 } %147, 1, !dbg !37
  %445 = extractvalue { i32, i32 } %147, 0, !dbg !37
  %446 = extractvalue { i32, i32 } %146, 1, !dbg !37
  %447 = extractvalue { i32, i32 } %146, 0, !dbg !37
  %448 = extractvalue { i32, i32 } %145, 1, !dbg !37
  %449 = extractvalue { i32, i32 } %145, 0, !dbg !37
  %450 = extractvalue { i32, i32 } %144, 1, !dbg !37
  %451 = extractvalue { i32, i32 } %144, 0, !dbg !37
  %452 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !45
  %453 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !45
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !45
  %455 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !45
  %456 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !45
  %457 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !45
  %458 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !45
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !45
  %460 = insertelement <2 x i32> poison, i32 %431, i64 0, !dbg !17
  %461 = insertelement <2 x i32> %460, i32 %393, i64 1, !dbg !17
  %462 = bitcast <2 x i32> %461 to <2 x float>, !dbg !17
  %463 = insertelement <2 x i32> poison, i32 %432, i64 0, !dbg !19
  %464 = insertelement <2 x i32> %463, i32 %394, i64 1, !dbg !19
  %465 = bitcast <2 x i32> %464 to <2 x float>, !dbg !19
  %466 = fadd <2 x float> %462, %465, !dbg !46
  %467 = insertelement <2 x i32> poison, i32 %433, i64 0, !dbg !25
  %468 = insertelement <2 x i32> %467, i32 %395, i64 1, !dbg !25
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !25
  %470 = fsub <2 x float> %466, %469, !dbg !47
  %471 = insertelement <2 x i32> poison, i32 %435, i64 0, !dbg !31
  %472 = insertelement <2 x i32> %471, i32 %443, i64 1, !dbg !31
  %473 = bitcast <2 x i32> %472 to <2 x float>, !dbg !31
  %474 = insertelement <2 x i32> poison, i32 %434, i64 0, !dbg !29
  %475 = insertelement <2 x i32> %474, i32 %451, i64 1, !dbg !29
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !29
  %477 = insertelement <2 x float> poison, float %260, i64 0, !dbg !48
  %478 = insertelement <2 x float> %477, float %452, i64 1, !dbg !48
  %479 = fmul <2 x float> %470, %478, !dbg !48
  %480 = fmul <2 x float> %479, %476, !dbg !49
  %481 = fadd <2 x float> %480, %473, !dbg !50
  %482 = insertelement <2 x i32> poison, i32 %426, i64 0, !dbg !17
  %483 = insertelement <2 x i32> %482, i32 %390, i64 1, !dbg !17
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !17
  %485 = insertelement <2 x i32> poison, i32 %427, i64 0, !dbg !19
  %486 = insertelement <2 x i32> %485, i32 %391, i64 1, !dbg !19
  %487 = bitcast <2 x i32> %486 to <2 x float>, !dbg !19
  %488 = fadd <2 x float> %484, %487, !dbg !46
  %489 = insertelement <2 x i32> poison, i32 %428, i64 0, !dbg !25
  %490 = insertelement <2 x i32> %489, i32 %392, i64 1, !dbg !25
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !25
  %492 = fsub <2 x float> %488, %491, !dbg !47
  %493 = insertelement <2 x i32> poison, i32 %430, i64 0, !dbg !31
  %494 = insertelement <2 x i32> %493, i32 %442, i64 1, !dbg !31
  %495 = bitcast <2 x i32> %494 to <2 x float>, !dbg !31
  %496 = insertelement <2 x i32> poison, i32 %429, i64 0, !dbg !29
  %497 = insertelement <2 x i32> %496, i32 %450, i64 1, !dbg !29
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !29
  %499 = insertelement <2 x float> poison, float %261, i64 0, !dbg !48
  %500 = insertelement <2 x float> %499, float %453, i64 1, !dbg !48
  %501 = fmul <2 x float> %492, %500, !dbg !48
  %502 = fmul <2 x float> %501, %498, !dbg !49
  %503 = fadd <2 x float> %502, %495, !dbg !50
  %504 = insertelement <2 x i32> poison, i32 %421, i64 0, !dbg !17
  %505 = insertelement <2 x i32> %504, i32 %387, i64 1, !dbg !17
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !17
  %507 = insertelement <2 x i32> poison, i32 %422, i64 0, !dbg !19
  %508 = insertelement <2 x i32> %507, i32 %388, i64 1, !dbg !19
  %509 = bitcast <2 x i32> %508 to <2 x float>, !dbg !19
  %510 = fadd <2 x float> %506, %509, !dbg !46
  %511 = insertelement <2 x i32> poison, i32 %423, i64 0, !dbg !25
  %512 = insertelement <2 x i32> %511, i32 %389, i64 1, !dbg !25
  %513 = bitcast <2 x i32> %512 to <2 x float>, !dbg !25
  %514 = fsub <2 x float> %510, %513, !dbg !47
  %515 = insertelement <2 x i32> poison, i32 %425, i64 0, !dbg !31
  %516 = insertelement <2 x i32> %515, i32 %441, i64 1, !dbg !31
  %517 = bitcast <2 x i32> %516 to <2 x float>, !dbg !31
  %518 = insertelement <2 x i32> poison, i32 %424, i64 0, !dbg !29
  %519 = insertelement <2 x i32> %518, i32 %449, i64 1, !dbg !29
  %520 = bitcast <2 x i32> %519 to <2 x float>, !dbg !29
  %521 = insertelement <2 x float> poison, float %262, i64 0, !dbg !48
  %522 = insertelement <2 x float> %521, float %454, i64 1, !dbg !48
  %523 = fmul <2 x float> %514, %522, !dbg !48
  %524 = fmul <2 x float> %523, %520, !dbg !49
  %525 = fadd <2 x float> %524, %517, !dbg !50
  %526 = insertelement <2 x i32> poison, i32 %416, i64 0, !dbg !17
  %527 = insertelement <2 x i32> %526, i32 %384, i64 1, !dbg !17
  %528 = bitcast <2 x i32> %527 to <2 x float>, !dbg !17
  %529 = insertelement <2 x i32> poison, i32 %417, i64 0, !dbg !19
  %530 = insertelement <2 x i32> %529, i32 %385, i64 1, !dbg !19
  %531 = bitcast <2 x i32> %530 to <2 x float>, !dbg !19
  %532 = fadd <2 x float> %528, %531, !dbg !46
  %533 = insertelement <2 x i32> poison, i32 %418, i64 0, !dbg !25
  %534 = insertelement <2 x i32> %533, i32 %386, i64 1, !dbg !25
  %535 = bitcast <2 x i32> %534 to <2 x float>, !dbg !25
  %536 = fsub <2 x float> %532, %535, !dbg !47
  %537 = insertelement <2 x i32> poison, i32 %420, i64 0, !dbg !31
  %538 = insertelement <2 x i32> %537, i32 %440, i64 1, !dbg !31
  %539 = bitcast <2 x i32> %538 to <2 x float>, !dbg !31
  %540 = insertelement <2 x i32> poison, i32 %419, i64 0, !dbg !29
  %541 = insertelement <2 x i32> %540, i32 %448, i64 1, !dbg !29
  %542 = bitcast <2 x i32> %541 to <2 x float>, !dbg !29
  %543 = insertelement <2 x float> poison, float %263, i64 0, !dbg !48
  %544 = insertelement <2 x float> %543, float %455, i64 1, !dbg !48
  %545 = fmul <2 x float> %536, %544, !dbg !48
  %546 = fmul <2 x float> %545, %542, !dbg !49
  %547 = fadd <2 x float> %546, %539, !dbg !50
  %548 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !17
  %549 = insertelement <2 x i32> %548, i32 %381, i64 1, !dbg !17
  %550 = bitcast <2 x i32> %549 to <2 x float>, !dbg !17
  %551 = insertelement <2 x i32> poison, i32 %412, i64 0, !dbg !19
  %552 = insertelement <2 x i32> %551, i32 %382, i64 1, !dbg !19
  %553 = bitcast <2 x i32> %552 to <2 x float>, !dbg !19
  %554 = fadd <2 x float> %550, %553, !dbg !46
  %555 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !25
  %556 = insertelement <2 x i32> %555, i32 %383, i64 1, !dbg !25
  %557 = bitcast <2 x i32> %556 to <2 x float>, !dbg !25
  %558 = fsub <2 x float> %554, %557, !dbg !47
  %559 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !31
  %560 = insertelement <2 x i32> %559, i32 %439, i64 1, !dbg !31
  %561 = bitcast <2 x i32> %560 to <2 x float>, !dbg !31
  %562 = insertelement <2 x i32> poison, i32 %414, i64 0, !dbg !29
  %563 = insertelement <2 x i32> %562, i32 %447, i64 1, !dbg !29
  %564 = bitcast <2 x i32> %563 to <2 x float>, !dbg !29
  %565 = insertelement <2 x float> poison, float %264, i64 0, !dbg !48
  %566 = insertelement <2 x float> %565, float %456, i64 1, !dbg !48
  %567 = fmul <2 x float> %558, %566, !dbg !48
  %568 = fmul <2 x float> %567, %564, !dbg !49
  %569 = fadd <2 x float> %568, %561, !dbg !50
  %570 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !17
  %571 = insertelement <2 x i32> %570, i32 %378, i64 1, !dbg !17
  %572 = bitcast <2 x i32> %571 to <2 x float>, !dbg !17
  %573 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !19
  %574 = insertelement <2 x i32> %573, i32 %379, i64 1, !dbg !19
  %575 = bitcast <2 x i32> %574 to <2 x float>, !dbg !19
  %576 = fadd <2 x float> %572, %575, !dbg !46
  %577 = insertelement <2 x i32> poison, i32 %408, i64 0, !dbg !25
  %578 = insertelement <2 x i32> %577, i32 %380, i64 1, !dbg !25
  %579 = bitcast <2 x i32> %578 to <2 x float>, !dbg !25
  %580 = fsub <2 x float> %576, %579, !dbg !47
  %581 = insertelement <2 x i32> poison, i32 %410, i64 0, !dbg !31
  %582 = insertelement <2 x i32> %581, i32 %438, i64 1, !dbg !31
  %583 = bitcast <2 x i32> %582 to <2 x float>, !dbg !31
  %584 = insertelement <2 x i32> poison, i32 %409, i64 0, !dbg !29
  %585 = insertelement <2 x i32> %584, i32 %446, i64 1, !dbg !29
  %586 = bitcast <2 x i32> %585 to <2 x float>, !dbg !29
  %587 = insertelement <2 x float> poison, float %265, i64 0, !dbg !48
  %588 = insertelement <2 x float> %587, float %457, i64 1, !dbg !48
  %589 = fmul <2 x float> %580, %588, !dbg !48
  %590 = fmul <2 x float> %589, %586, !dbg !49
  %591 = fadd <2 x float> %590, %583, !dbg !50
  %592 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !17
  %593 = insertelement <2 x i32> %592, i32 %375, i64 1, !dbg !17
  %594 = bitcast <2 x i32> %593 to <2 x float>, !dbg !17
  %595 = insertelement <2 x i32> poison, i32 %402, i64 0, !dbg !19
  %596 = insertelement <2 x i32> %595, i32 %376, i64 1, !dbg !19
  %597 = bitcast <2 x i32> %596 to <2 x float>, !dbg !19
  %598 = fadd <2 x float> %594, %597, !dbg !46
  %599 = insertelement <2 x i32> poison, i32 %403, i64 0, !dbg !25
  %600 = insertelement <2 x i32> %599, i32 %377, i64 1, !dbg !25
  %601 = bitcast <2 x i32> %600 to <2 x float>, !dbg !25
  %602 = fsub <2 x float> %598, %601, !dbg !47
  %603 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !31
  %604 = insertelement <2 x i32> %603, i32 %437, i64 1, !dbg !31
  %605 = bitcast <2 x i32> %604 to <2 x float>, !dbg !31
  %606 = insertelement <2 x i32> poison, i32 %404, i64 0, !dbg !29
  %607 = insertelement <2 x i32> %606, i32 %445, i64 1, !dbg !29
  %608 = bitcast <2 x i32> %607 to <2 x float>, !dbg !29
  %609 = insertelement <2 x float> poison, float %266, i64 0, !dbg !48
  %610 = insertelement <2 x float> %609, float %458, i64 1, !dbg !48
  %611 = fmul <2 x float> %602, %610, !dbg !48
  %612 = fmul <2 x float> %611, %608, !dbg !49
  %613 = fadd <2 x float> %612, %605, !dbg !50
  %614 = insertelement <2 x i32> poison, i32 %396, i64 0, !dbg !17
  %615 = insertelement <2 x i32> %614, i32 %372, i64 1, !dbg !17
  %616 = bitcast <2 x i32> %615 to <2 x float>, !dbg !17
  %617 = insertelement <2 x i32> poison, i32 %397, i64 0, !dbg !19
  %618 = insertelement <2 x i32> %617, i32 %373, i64 1, !dbg !19
  %619 = bitcast <2 x i32> %618 to <2 x float>, !dbg !19
  %620 = fadd <2 x float> %616, %619, !dbg !46
  %621 = insertelement <2 x i32> poison, i32 %398, i64 0, !dbg !25
  %622 = insertelement <2 x i32> %621, i32 %374, i64 1, !dbg !25
  %623 = bitcast <2 x i32> %622 to <2 x float>, !dbg !25
  %624 = fsub <2 x float> %620, %623, !dbg !47
  %625 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !31
  %626 = insertelement <2 x i32> %625, i32 %436, i64 1, !dbg !31
  %627 = bitcast <2 x i32> %626 to <2 x float>, !dbg !31
  %628 = insertelement <2 x i32> poison, i32 %399, i64 0, !dbg !29
  %629 = insertelement <2 x i32> %628, i32 %444, i64 1, !dbg !29
  %630 = bitcast <2 x i32> %629 to <2 x float>, !dbg !29
  %631 = insertelement <2 x float> poison, float %267, i64 0, !dbg !48
  %632 = insertelement <2 x float> %631, float %459, i64 1, !dbg !48
  %633 = fmul <2 x float> %624, %632, !dbg !48
  %634 = fmul <2 x float> %633, %630, !dbg !49
  %635 = fadd <2 x float> %634, %627, !dbg !50
  %shift = shufflevector <2 x float> %481, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %636 = fadd <2 x float> %481, %shift, !dbg !51
  %shift76 = shufflevector <2 x float> %503, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %637 = fadd <2 x float> %503, %shift76, !dbg !51
  %shift77 = shufflevector <2 x float> %525, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %638 = fadd <2 x float> %525, %shift77, !dbg !51
  %shift78 = shufflevector <2 x float> %547, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %639 = fadd <2 x float> %547, %shift78, !dbg !51
  %shift79 = shufflevector <2 x float> %569, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %640 = fadd <2 x float> %569, %shift79, !dbg !51
  %shift80 = shufflevector <2 x float> %591, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %641 = fadd <2 x float> %591, %shift80, !dbg !51
  %shift81 = shufflevector <2 x float> %613, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %642 = fadd <2 x float> %613, %shift81, !dbg !51
  %shift82 = shufflevector <2 x float> %635, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %643 = fadd <2 x float> %635, %shift82, !dbg !51
  %bc = bitcast <2 x float> %466 to <2 x i32>, !dbg !52
  %644 = extractelement <2 x i32> %bc, i64 0, !dbg !52
  %bc83 = bitcast <2 x float> %488 to <2 x i32>, !dbg !52
  %645 = extractelement <2 x i32> %bc83, i64 0, !dbg !52
  %bc84 = bitcast <2 x float> %510 to <2 x i32>, !dbg !52
  %646 = extractelement <2 x i32> %bc84, i64 0, !dbg !52
  %bc85 = bitcast <2 x float> %532 to <2 x i32>, !dbg !52
  %647 = extractelement <2 x i32> %bc85, i64 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %644, i32 %645, i32 %646, i32 %647, ptr addrspace(1) %31, i1 %24) #3, !dbg !52
  %bc86 = bitcast <2 x float> %554 to <2 x i32>, !dbg !52
  %648 = extractelement <2 x i32> %bc86, i64 0, !dbg !52
  %bc87 = bitcast <2 x float> %576 to <2 x i32>, !dbg !52
  %649 = extractelement <2 x i32> %bc87, i64 0, !dbg !52
  %bc88 = bitcast <2 x float> %598 to <2 x i32>, !dbg !52
  %650 = extractelement <2 x i32> %bc88, i64 0, !dbg !52
  %bc89 = bitcast <2 x float> %620 to <2 x i32>, !dbg !52
  %651 = extractelement <2 x i32> %bc89, i64 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %648, i32 %649, i32 %650, i32 %651, ptr addrspace(1) %33, i1 %25) #3, !dbg !52
  %bc90 = bitcast <2 x float> %466 to <2 x i32>, !dbg !53
  %652 = extractelement <2 x i32> %bc90, i64 1, !dbg !53
  %bc91 = bitcast <2 x float> %488 to <2 x i32>, !dbg !53
  %653 = extractelement <2 x i32> %bc91, i64 1, !dbg !53
  %bc92 = bitcast <2 x float> %510 to <2 x i32>, !dbg !53
  %654 = extractelement <2 x i32> %bc92, i64 1, !dbg !53
  %bc93 = bitcast <2 x float> %532 to <2 x i32>, !dbg !53
  %655 = extractelement <2 x i32> %bc93, i64 1, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %652, i32 %653, i32 %654, i32 %655, ptr addrspace(1) %48, i1 %24) #3, !dbg !53
  %bc94 = bitcast <2 x float> %554 to <2 x i32>, !dbg !53
  %656 = extractelement <2 x i32> %bc94, i64 1, !dbg !53
  %bc95 = bitcast <2 x float> %576 to <2 x i32>, !dbg !53
  %657 = extractelement <2 x i32> %bc95, i64 1, !dbg !53
  %bc96 = bitcast <2 x float> %598 to <2 x i32>, !dbg !53
  %658 = extractelement <2 x i32> %bc96, i64 1, !dbg !53
  %bc97 = bitcast <2 x float> %620 to <2 x i32>, !dbg !53
  %659 = extractelement <2 x i32> %bc97, i64 1, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %656, i32 %657, i32 %658, i32 %659, ptr addrspace(1) %49, i1 %25) #3, !dbg !53
  %660 = getelementptr float, ptr addrspace(1) %12, i64 %30, !dbg !54
  %661 = getelementptr float, ptr addrspace(1) %12, i64 %32, !dbg !54
  %bc98 = bitcast <2 x float> %636 to <2 x i32>, !dbg !55
  %662 = extractelement <2 x i32> %bc98, i64 0, !dbg !55
  %bc99 = bitcast <2 x float> %637 to <2 x i32>, !dbg !55
  %663 = extractelement <2 x i32> %bc99, i64 0, !dbg !55
  %bc100 = bitcast <2 x float> %638 to <2 x i32>, !dbg !55
  %664 = extractelement <2 x i32> %bc100, i64 0, !dbg !55
  %bc101 = bitcast <2 x float> %639 to <2 x i32>, !dbg !55
  %665 = extractelement <2 x i32> %bc101, i64 0, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %662, i32 %663, i32 %664, i32 %665, ptr addrspace(1) %660, i1 %24) #3, !dbg !55
  %bc102 = bitcast <2 x float> %640 to <2 x i32>, !dbg !55
  %666 = extractelement <2 x i32> %bc102, i64 0, !dbg !55
  %bc103 = bitcast <2 x float> %641 to <2 x i32>, !dbg !55
  %667 = extractelement <2 x i32> %bc103, i64 0, !dbg !55
  %bc104 = bitcast <2 x float> %642 to <2 x i32>, !dbg !55
  %668 = extractelement <2 x i32> %bc104, i64 0, !dbg !55
  %bc105 = bitcast <2 x float> %643 to <2 x i32>, !dbg !55
  %669 = extractelement <2 x i32> %bc105, i64 0, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %666, i32 %667, i32 %668, i32 %669, ptr addrspace(1) %661, i1 %25) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2iul5mraaaxa5r3ocpjbym4oltt6vlwsz3cj4vidorr3ockc6up.py", directory: "inductor_cache/2i")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 27, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 39, scope: !7)
!53 = !DILocation(line: 61, column: 39, scope: !7)
!54 = !DILocation(line: 62, column: 25, scope: !7)
!55 = !DILocation(line: 62, column: 37, scope: !7)
!56 = !DILocation(line: 62, column: 4, scope: !7)
