; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_constant_pad_nd_cumsum_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 4, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = lshr i32 %7, 5, !dbg !15
  %13 = lshr i32 %7, 1, !dbg !15
  %14 = and i32 %13, 31, !dbg !15
  %15 = icmp samesign ult i32 %14, 17, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %16 = sdiv i32 %.frozen, 16, !dbg !17
  %17 = mul i32 %16, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %17, !dbg !18
  %.not = icmp eq i32 %14, 0, !dbg !19
  %18 = shl nuw nsw i32 %14, 4, !dbg !20
  %19 = shl i32 %16, 8, !dbg !21
  %20 = add nsw i32 %.decomposed, %18, !dbg !22
  %21 = add nsw i32 %20, -16, !dbg !23
  %22 = add i32 %21, %19, !dbg !24
  %23 = sext i32 %22 to i64, !dbg !25
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !25
  %25 = add nsw i32 %14, -1, !dbg !26
  %26 = icmp ult i32 %25, 16, !dbg !26
  %27 = and i1 %26, %11, !dbg !27
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !28
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !28
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !28
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !28
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !28
  %33 = bitcast i32 %29 to float, !dbg !28
  %34 = bitcast i32 %30 to float, !dbg !28
  %35 = bitcast i32 %31 to float, !dbg !28
  %36 = bitcast i32 %32 to float, !dbg !28
  %37 = fmul float %33, 0x4023FF7CE0000000, !dbg !29
  %38 = fmul float %34, 0x4023FF7CE0000000, !dbg !29
  %39 = fmul float %35, 0x4023FF7CE0000000, !dbg !29
  %40 = fmul float %36, 0x4023FF7CE0000000, !dbg !29
  %41 = select i1 %.not, float 0x3F50624DE0000000, float %37, !dbg !30
  %42 = select i1 %.not, float 0x3F50624DE0000000, float %38, !dbg !30
  %43 = select i1 %.not, float 0x3F50624DE0000000, float %39, !dbg !30
  %44 = select i1 %.not, float 0x3F50624DE0000000, float %40, !dbg !30
  %45 = and i32 %7, 1, !dbg !31
  %46 = and i32 %13, 15, !dbg !31
  %47 = and i32 %12, 1, !dbg !31
  %48 = bitcast float %41 to i32, !dbg !31
  %49 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %48, i32 2, i32 0), !dbg !31
  %50 = bitcast i32 %49 to float, !dbg !31
  %.not1 = icmp eq i32 %46, 0, !dbg !31
  %51 = fadd float %41, %50, !dbg !32
  %52 = select i1 %.not1, float %41, float %51, !dbg !31
  %53 = bitcast float %52 to i32, !dbg !31
  %54 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %53, i32 4, i32 0), !dbg !31
  %55 = bitcast i32 %54 to float, !dbg !31
  %56 = icmp samesign ugt i32 %46, 1, !dbg !31
  %57 = fadd float %52, %55, !dbg !32
  %58 = select i1 %56, float %57, float %52, !dbg !31
  %59 = bitcast float %58 to i32, !dbg !31
  %60 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %59, i32 8, i32 0), !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = icmp samesign ugt i32 %46, 3, !dbg !31
  %63 = fadd float %58, %61, !dbg !32
  %64 = select i1 %62, float %63, float %58, !dbg !31
  %65 = bitcast float %64 to i32, !dbg !31
  %66 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %65, i32 16, i32 0), !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = icmp samesign ugt i32 %46, 7, !dbg !31
  %69 = fadd float %64, %67, !dbg !32
  %70 = select i1 %68, float %69, float %64, !dbg !31
  %71 = bitcast float %42 to i32, !dbg !31
  %72 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %71, i32 2, i32 0), !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = fadd float %42, %73, !dbg !32
  %75 = select i1 %.not1, float %42, float %74, !dbg !31
  %76 = bitcast float %75 to i32, !dbg !31
  %77 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %76, i32 4, i32 0), !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = fadd float %75, %78, !dbg !32
  %80 = select i1 %56, float %79, float %75, !dbg !31
  %81 = bitcast float %80 to i32, !dbg !31
  %82 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %81, i32 8, i32 0), !dbg !31
  %83 = bitcast i32 %82 to float, !dbg !31
  %84 = fadd float %80, %83, !dbg !32
  %85 = select i1 %62, float %84, float %80, !dbg !31
  %86 = bitcast float %85 to i32, !dbg !31
  %87 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %86, i32 16, i32 0), !dbg !31
  %88 = bitcast i32 %87 to float, !dbg !31
  %89 = fadd float %85, %88, !dbg !32
  %90 = select i1 %68, float %89, float %85, !dbg !31
  %91 = bitcast float %43 to i32, !dbg !31
  %92 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %91, i32 2, i32 0), !dbg !31
  %93 = bitcast i32 %92 to float, !dbg !31
  %94 = fadd float %43, %93, !dbg !32
  %95 = select i1 %.not1, float %43, float %94, !dbg !31
  %96 = bitcast float %95 to i32, !dbg !31
  %97 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %96, i32 4, i32 0), !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = fadd float %95, %98, !dbg !32
  %100 = select i1 %56, float %99, float %95, !dbg !31
  %101 = bitcast float %100 to i32, !dbg !31
  %102 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %101, i32 8, i32 0), !dbg !31
  %103 = bitcast i32 %102 to float, !dbg !31
  %104 = fadd float %100, %103, !dbg !32
  %105 = select i1 %62, float %104, float %100, !dbg !31
  %106 = bitcast float %105 to i32, !dbg !31
  %107 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %106, i32 16, i32 0), !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = fadd float %105, %108, !dbg !32
  %110 = select i1 %68, float %109, float %105, !dbg !31
  %111 = bitcast float %44 to i32, !dbg !31
  %112 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %111, i32 2, i32 0), !dbg !31
  %113 = bitcast i32 %112 to float, !dbg !31
  %114 = fadd float %44, %113, !dbg !32
  %115 = select i1 %.not1, float %44, float %114, !dbg !31
  %116 = bitcast float %115 to i32, !dbg !31
  %117 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %116, i32 4, i32 0), !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = fadd float %115, %118, !dbg !32
  %120 = select i1 %56, float %119, float %115, !dbg !31
  %121 = bitcast float %120 to i32, !dbg !31
  %122 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %121, i32 8, i32 0), !dbg !31
  %123 = bitcast i32 %122 to float, !dbg !31
  %124 = fadd float %120, %123, !dbg !32
  %125 = select i1 %62, float %124, float %120, !dbg !31
  %126 = bitcast float %125 to i32, !dbg !31
  %127 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %126, i32 16, i32 0), !dbg !31
  %128 = bitcast i32 %127 to float, !dbg !31
  %129 = fadd float %125, %128, !dbg !32
  %130 = select i1 %68, float %129, float %125, !dbg !31
  %131 = icmp eq i32 %46, 15, !dbg !31
  %132 = shl nuw nsw i32 %47, 1, !dbg !31
  %133 = or disjoint i32 %132, %45, !dbg !31
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !31
  %135 = bitcast float %70 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 %131) #3, !dbg !31
  %136 = or disjoint i32 %133, 4, !dbg !31
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !31
  %138 = bitcast float %90 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 %131) #3, !dbg !31
  %139 = or disjoint i32 %133, 8, !dbg !31
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !31
  %141 = bitcast float %110 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 %131) #3, !dbg !31
  %142 = or disjoint i32 %133, 12, !dbg !31
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !31
  %144 = bitcast float %130 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 %131) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.not2 = icmp eq i32 %47, 0, !dbg !31
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %45, !dbg !31
  %146 = load float, ptr addrspace(3) %145, align 4, !dbg !31
  %147 = fadd float %70, %146, !dbg !32
  %148 = select i1 %.not2, float %70, float %147, !dbg !31
  %149 = bitcast float %148 to i32, !dbg !31
  %150 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %149, i32 2, i32 0), !dbg !31
  %151 = or disjoint i32 %45, 4, !dbg !31
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !31
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !31
  %154 = fadd float %90, %153, !dbg !32
  %155 = select i1 %.not2, float %90, float %154, !dbg !31
  %156 = bitcast float %155 to i32, !dbg !31
  %157 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %156, i32 2, i32 0), !dbg !31
  %158 = or disjoint i32 %45, 8, !dbg !31
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !31
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !31
  %161 = fadd float %110, %160, !dbg !32
  %162 = select i1 %.not2, float %110, float %161, !dbg !31
  %163 = bitcast float %162 to i32, !dbg !31
  %164 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %163, i32 2, i32 0), !dbg !31
  %165 = or disjoint i32 %45, 12, !dbg !31
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !31
  %167 = load float, ptr addrspace(3) %166, align 4, !dbg !31
  %168 = fadd float %130, %167, !dbg !32
  %169 = select i1 %.not2, float %130, float %168, !dbg !31
  %170 = bitcast float %169 to i32, !dbg !31
  %171 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %170, i32 2, i32 0), !dbg !31
  %172 = mul i32 %16, 272, !dbg !34
  %173 = add i32 %20, %172, !dbg !35
  %174 = sext i32 %173 to i64, !dbg !36
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !36
  %176 = and i1 %15, %11, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %149, i32 %156, i32 %163, i32 %170, ptr addrspace(1) %175, i1 %176) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py", directory: "inductor_cache/4p")
!4 = !{ptr @triton_per_fused_constant_pad_nd_cumsum_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_constant_pad_nd_cumsum_mul_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_constant_pad_nd_cumsum_mul_4", linkageName: "triton_per_fused_constant_pad_nd_cumsum_mul_4", scope: !3, file: !3, line: 24, type: !8, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 28, scope: !7)
!11 = !DILocation(line: 28, column: 33, scope: !7)
!12 = !DILocation(line: 29, column: 44, scope: !7)
!13 = !DILocation(line: 29, column: 23, scope: !7)
!14 = !DILocation(line: 30, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 21, scope: !7)
!17 = !DILocation(line: 36, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 19, scope: !7)
!19 = !DILocation(line: 39, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 46, scope: !7)
!21 = !DILocation(line: 40, column: 55, scope: !7)
!22 = !DILocation(line: 40, column: 38, scope: !7)
!23 = !DILocation(line: 40, column: 43, scope: !7)
!24 = !DILocation(line: 40, column: 51, scope: !7)
!25 = !DILocation(line: 40, column: 30, scope: !7)
!26 = !DILocation(line: 40, column: 68, scope: !7)
!27 = !DILocation(line: 40, column: 75, scope: !7)
!28 = !DILocation(line: 40, column: 60, scope: !7)
!29 = !DILocation(line: 42, column: 18, scope: !7)
!30 = !DILocation(line: 44, column: 32, scope: !7)
!31 = !DILocation(line: 47, column: 45, scope: !7)
!32 = !DILocation(line: 13, column: 20, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!34 = !DILocation(line: 48, column: 42, scope: !7)
!35 = !DILocation(line: 48, column: 38, scope: !7)
!36 = !DILocation(line: 48, column: 25, scope: !7)
!37 = !DILocation(line: 48, column: 62, scope: !7)
!38 = !DILocation(line: 48, column: 54, scope: !7)
!39 = !DILocation(line: 48, column: 4, scope: !7)
