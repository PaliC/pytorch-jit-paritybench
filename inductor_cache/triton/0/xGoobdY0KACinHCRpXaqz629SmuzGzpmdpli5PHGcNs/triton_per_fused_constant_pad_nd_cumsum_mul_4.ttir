#loc = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":24:0)
#loc1 = loc(unknown)
module {
  tt.func public @triton_per_fused_constant_pad_nd_cumsum_mul_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":24:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":24:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":24:0), %arg3: i32 loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":24:0)) attributes {noinline = false} {
    %cst = arith.constant dense<272> : tensor<8x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e-03> : tensor<8x32xf32> loc(#loc1)
    %cst_1 = arith.constant dense<9.99899959> : tensor<8x32xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<8x32xf32> loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<8x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<1x32xi32> loc(#loc1)
    %cst_5 = arith.constant dense<-16> : tensor<8x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<1x32xi64> loc(#loc1)
    %cst_7 = arith.constant dense<-1> : tensor<1x32xi32> loc(#loc1)
    %cst_8 = arith.constant dense<16> : tensor<8x1xi32> loc(#loc1)
    %cst_9 = arith.constant dense<17> : tensor<1x32xi32> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<8x1xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<8x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_10 : tensor<8x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc9)
    %9 = arith.cmpi slt, %8, %cst_9 : tensor<1x32xi32> loc(#loc10)
    %10 = arith.remsi %5, %cst_8 : tensor<8x1xi32> loc(#loc11)
    %11 = arith.divsi %5, %cst_8 : tensor<8x1xi32> loc(#loc12)
    %12 = arith.addi %8, %cst_7 : tensor<1x32xi32> loc(#loc13)
    %13 = arith.extsi %12 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc14)
    %14 = arith.cmpi sge, %13, %cst_6 : tensor<1x32xi64> loc(#loc14)
    %15 = arith.addi %10, %cst_5 : tensor<8x1xi32> loc(#loc15)
    %16 = arith.muli %8, %cst_4 : tensor<1x32xi32> loc(#loc16)
    %17 = tt.broadcast %15 : tensor<8x1xi32> -> tensor<8x32xi32> loc(#loc17)
    %18 = tt.broadcast %16 : tensor<1x32xi32> -> tensor<8x32xi32> loc(#loc17)
    %19 = arith.addi %17, %18 : tensor<8x32xi32> loc(#loc17)
    %20 = arith.muli %11, %cst_3 : tensor<8x1xi32> loc(#loc18)
    %21 = tt.broadcast %20 : tensor<8x1xi32> -> tensor<8x32xi32> loc(#loc19)
    %22 = arith.addi %19, %21 : tensor<8x32xi32> loc(#loc19)
    %23 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x32x!tt.ptr<f32>> loc(#loc20)
    %24 = tt.addptr %23, %22 : tensor<8x32x!tt.ptr<f32>>, tensor<8x32xi32> loc(#loc20)
    %25 = arith.andi %9, %14 : tensor<1x32xi1> loc(#loc21)
    %26 = tt.broadcast %25 : tensor<1x32xi1> -> tensor<8x32xi1> loc(#loc22)
    %27 = tt.broadcast %6 : tensor<8x1xi1> -> tensor<8x32xi1> loc(#loc22)
    %28 = arith.andi %26, %27 : tensor<8x32xi1> loc(#loc22)
    %29 = tt.load %24, %28, %cst_2 : tensor<8x32x!tt.ptr<f32>> loc(#loc23)
    %30 = arith.mulf %29, %cst_1 : tensor<8x32xf32> loc(#loc24)
    %31 = tt.broadcast %14 : tensor<1x32xi1> -> tensor<8x32xi1> loc(#loc25)
    %32 = arith.select %31, %30, %cst_0 : tensor<8x32xi1>, tensor<8x32xf32> loc(#loc25)
    %33 = "tt.scan"(%32) <{axis = 1 : i32, reverse = false}> ({
    ^bb0(%arg4: f32 loc(unknown), %arg5: f32 loc(unknown)):
      %43 = arith.addf %arg4, %arg5 : f32 loc(#loc35)
      tt.scan.return %43 : f32 loc(#loc26)
    }) : (tensor<8x32xf32>) -> tensor<8x32xf32> loc(#loc26)
    %34 = tt.broadcast %10 : tensor<8x1xi32> -> tensor<8x32xi32> loc(#loc28)
    %35 = arith.addi %34, %18 : tensor<8x32xi32> loc(#loc28)
    %36 = arith.muli %11, %cst : tensor<8x1xi32> loc(#loc29)
    %37 = tt.broadcast %36 : tensor<8x1xi32> -> tensor<8x32xi32> loc(#loc30)
    %38 = arith.addi %35, %37 : tensor<8x32xi32> loc(#loc30)
    %39 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x32x!tt.ptr<f32>> loc(#loc31)
    %40 = tt.addptr %39, %38 : tensor<8x32x!tt.ptr<f32>>, tensor<8x32xi32> loc(#loc31)
    %41 = tt.broadcast %9 : tensor<1x32xi1> -> tensor<8x32xi1> loc(#loc32)
    %42 = arith.andi %41, %27 : tensor<8x32xi1> loc(#loc32)
    tt.store %40, %33, %42 : tensor<8x32x!tt.ptr<f32>> loc(#loc33)
    tt.return loc(#loc34)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":28:28)
#loc3 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":28:33)
#loc4 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":29:36)
#loc5 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":29:44)
#loc6 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":29:23)
#loc7 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":30:21)
#loc8 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":31:26)
#loc9 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":31:34)
#loc10 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":33:21)
#loc11 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":35:19)
#loc12 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":36:19)
#loc13 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":37:18)
#loc14 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":39:19)
#loc15 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":40:38)
#loc16 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":40:46)
#loc17 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":40:43)
#loc18 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":40:55)
#loc19 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":40:51)
#loc20 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":40:30)
#loc21 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":40:68)
#loc22 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":40:75)
#loc23 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":40:60)
#loc24 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":42:18)
#loc25 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":44:32)
#loc26 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":47:45)
#loc27 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":13:20)
#loc28 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":48:30)
#loc29 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":48:42)
#loc30 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":48:38)
#loc31 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":48:25)
#loc32 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":48:62)
#loc33 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":48:54)
#loc34 = loc("inductor_cache/4p/c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py":48:4)
#loc35 = loc(callsite(#loc27 at #loc26))
