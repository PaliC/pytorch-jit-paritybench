; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = shl i32 %11, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %10, %12, !dbg !13
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %17, !dbg !13
  %23 = icmp slt i32 %18, 384, !dbg !14
  %24 = icmp slt i32 %19, 384, !dbg !14
  %25 = icmp slt i32 %20, 384, !dbg !14
  %26 = icmp slt i32 %21, 384, !dbg !14
  %27 = icmp slt i32 %22, 384, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %29 = shl i32 %28, 1, !dbg !16
  %30 = or disjoint i32 %29, 1, !dbg !17
  %31 = icmp slt i32 %29, 256, !dbg !18
  %32 = icmp slt i32 %30, 256, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %33 = sdiv i32 %.frozen, 96, !dbg !19
  %34 = mul i32 %33, 96, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %35 = srem i32 %18, 96, !dbg !20
  %36 = srem i32 %19, 96, !dbg !20
  %37 = srem i32 %20, 96, !dbg !20
  %38 = srem i32 %21, 96, !dbg !20
  %.frozen19 = freeze i32 %29, !dbg !21
  %39 = sdiv i32 %.frozen19, 16, !dbg !21
  %40 = mul i32 %39, 16, !dbg !22
  %.decomposed20 = sub i32 %.frozen19, %40, !dbg !22
  %.frozen21 = freeze i32 %30, !dbg !21
  %41 = sdiv i32 %.frozen21, 16, !dbg !21
  %42 = mul i32 %41, 16, !dbg !22
  %.decomposed22 = sub i32 %.frozen21, %42, !dbg !22
  %43 = shl i32 %18, 8, !dbg !23
  %44 = shl i32 %19, 8, !dbg !23
  %45 = shl i32 %20, 8, !dbg !23
  %46 = shl i32 %21, 8, !dbg !23
  %47 = add i32 %43, %29, !dbg !24
  %48 = add i32 %44, %29, !dbg !24
  %49 = add i32 %45, %29, !dbg !24
  %50 = add i32 %46, %29, !dbg !24
  %51 = sext i32 %47 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %48 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = sext i32 %49 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !25
  %57 = sext i32 %50 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !25
  %59 = and i1 %31, %23, !dbg !26
  %60 = and i1 %31, %24, !dbg !26
  %61 = and i1 %31, %25, !dbg !26
  %62 = and i1 %31, %26, !dbg !26
  %63 = and i1 %31, %27, !dbg !26
  %64 = and i1 %27, %32, !dbg !26
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %59) #3, !dbg !27
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !27
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !27
  %68 = bitcast i32 %66 to float, !dbg !27
  %69 = bitcast i32 %67 to float, !dbg !27
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %60) #3, !dbg !27
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !27
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !27
  %73 = bitcast i32 %71 to float, !dbg !27
  %74 = bitcast i32 %72 to float, !dbg !27
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #3, !dbg !27
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !27
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !27
  %78 = bitcast i32 %76 to float, !dbg !27
  %79 = bitcast i32 %77 to float, !dbg !27
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %62) #3, !dbg !27
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !27
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !27
  %83 = bitcast i32 %81 to float, !dbg !27
  %84 = bitcast i32 %82 to float, !dbg !27
  %85 = sext i32 %.decomposed to i64, !dbg !28
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !28
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %27) #3, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !29
  %92 = shl nsw i32 %35, 8, !dbg !30
  %93 = shl nsw i32 %36, 8, !dbg !30
  %94 = shl nsw i32 %37, 8, !dbg !30
  %95 = shl nsw i32 %38, 8, !dbg !30
  %96 = add i32 %92, %29, !dbg !31
  %97 = add i32 %93, %29, !dbg !31
  %98 = add i32 %94, %29, !dbg !31
  %99 = add i32 %95, %29, !dbg !31
  %100 = sext i32 %96 to i64, !dbg !32
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !32
  %102 = sext i32 %97 to i64, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !32
  %104 = sext i32 %98 to i64, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !32
  %106 = sext i32 %99 to i64, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !32
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %101, i1 %59) #3, !dbg !33
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !33
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !33
  %111 = bitcast i32 %109 to float, !dbg !33
  %112 = bitcast i32 %110 to float, !dbg !33
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %103, i1 %60) #3, !dbg !33
  %114 = extractvalue { i32, i32 } %113, 0, !dbg !33
  %115 = extractvalue { i32, i32 } %113, 1, !dbg !33
  %116 = bitcast i32 %114 to float, !dbg !33
  %117 = bitcast i32 %115 to float, !dbg !33
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %105, i1 %61) #3, !dbg !33
  %119 = extractvalue { i32, i32 } %118, 0, !dbg !33
  %120 = extractvalue { i32, i32 } %118, 1, !dbg !33
  %121 = bitcast i32 %119 to float, !dbg !33
  %122 = bitcast i32 %120 to float, !dbg !33
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %107, i1 %62) #3, !dbg !33
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !33
  %125 = extractvalue { i32, i32 } %123, 1, !dbg !33
  %126 = bitcast i32 %124 to float, !dbg !33
  %127 = bitcast i32 %125 to float, !dbg !33
  %128 = srem i32 %39, 8, !dbg !34
  %129 = srem i32 %41, 8, !dbg !34
  %130 = shl nsw i32 %128, 3, !dbg !35
  %131 = shl nsw i32 %35, 6, !dbg !36
  %132 = shl nsw i32 %36, 6, !dbg !36
  %133 = shl nsw i32 %37, 6, !dbg !36
  %134 = shl nsw i32 %38, 6, !dbg !36
  %.lhs.trunc = trunc nsw i32 %.decomposed20 to i8, !dbg !37
  %135 = sdiv i8 %.lhs.trunc, 8, !dbg !38
  %136 = mul i8 %135, 8, !dbg !37
  %.decomposed23 = sub i8 %.lhs.trunc, %136, !dbg !37
  %.sext = sext i8 %.decomposed23 to i32, !dbg !37
  %.lhs.trunc12 = trunc nsw i32 %.decomposed22 to i8, !dbg !37
  %137 = sdiv i8 %.lhs.trunc12, 8, !dbg !38
  %138 = mul i8 %137, 8, !dbg !37
  %.decomposed24 = sub i8 %.lhs.trunc12, %138, !dbg !37
  %139 = add nsw i32 %130, %.sext, !dbg !39
  %140 = add nsw i32 %139, %131, !dbg !40
  %141 = add nsw i32 %139, %132, !dbg !40
  %142 = add nsw i32 %139, %133, !dbg !40
  %143 = add nsw i32 %139, %134, !dbg !40
  %144 = sext i32 %140 to i64, !dbg !41
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !41
  %146 = sext i32 %141 to i64, !dbg !41
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !41
  %148 = sext i32 %142 to i64, !dbg !41
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !41
  %150 = sext i32 %143 to i64, !dbg !41
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !41
  %152 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %145, i1 %59) #3, !dbg !42
  %153 = extractvalue { i32, i32 } %152, 0, !dbg !42
  %154 = extractvalue { i32, i32 } %152, 1, !dbg !42
  %155 = bitcast i32 %153 to float, !dbg !42
  %156 = bitcast i32 %154 to float, !dbg !42
  %157 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %147, i1 %60) #3, !dbg !42
  %158 = extractvalue { i32, i32 } %157, 0, !dbg !42
  %159 = extractvalue { i32, i32 } %157, 1, !dbg !42
  %160 = bitcast i32 %158 to float, !dbg !42
  %161 = bitcast i32 %159 to float, !dbg !42
  %162 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %149, i1 %61) #3, !dbg !42
  %163 = extractvalue { i32, i32 } %162, 0, !dbg !42
  %164 = extractvalue { i32, i32 } %162, 1, !dbg !42
  %165 = bitcast i32 %163 to float, !dbg !42
  %166 = bitcast i32 %164 to float, !dbg !42
  %167 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %151, i1 %62) #3, !dbg !42
  %168 = extractvalue { i32, i32 } %167, 0, !dbg !42
  %169 = extractvalue { i32, i32 } %167, 1, !dbg !42
  %170 = bitcast i32 %168 to float, !dbg !42
  %171 = bitcast i32 %169 to float, !dbg !42
  %.sext15 = sext i8 %135 to i32, !dbg !38
  %172 = insertelement <2 x i8> poison, i8 %.decomposed24, i64 0, !dbg !37
  %173 = insertelement <2 x i8> %172, i8 %137, i64 1, !dbg !37
  %174 = sdiv i32 %29, 128, !dbg !43
  %175 = sdiv i32 %30, 128, !dbg !43
  %176 = insertelement <4 x i32> poison, i32 %174, i64 0, !dbg !44
  %177 = insertelement <4 x i32> %176, i32 %128, i64 1, !dbg !44
  %178 = insertelement <4 x i32> %177, i32 %.sext, i64 2, !dbg !44
  %179 = insertelement <4 x i32> %178, i32 %.sext15, i64 3, !dbg !44
  %180 = mul <4 x i32> %179, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !44
  %181 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !44
  %182 = insertelement <4 x i32> %181, i32 %129, i64 1, !dbg !44
  %183 = sext <2 x i8> %173 to <2 x i32>, !dbg !44
  %184 = shufflevector <2 x i32> %183, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !44
  %185 = shufflevector <4 x i32> %182, <4 x i32> %184, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !44
  %186 = mul <4 x i32> %185, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !44
  %187 = mul i32 %33, 24576, !dbg !45
  %188 = add i32 %187, %.decomposed, !dbg !46
  %189 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %180), !dbg !47
  %op.rdx = add i32 %189, %188, !dbg !48
  %190 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %186), !dbg !47
  %op.rdx18 = add i32 %190, %188, !dbg !48
  %191 = sext i32 %op.rdx to i64, !dbg !49
  %192 = getelementptr float, ptr addrspace(1) %4, i64 %191, !dbg !49
  %193 = sext i32 %op.rdx18 to i64, !dbg !49
  %194 = getelementptr float, ptr addrspace(1) %4, i64 %193, !dbg !49
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %192, i1 %63) #3, !dbg !50
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !50
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !50
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !50
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !50
  %200 = bitcast i32 %196 to float, !dbg !50
  %201 = bitcast i32 %197 to float, !dbg !50
  %202 = bitcast i32 %198 to float, !dbg !50
  %203 = bitcast i32 %199 to float, !dbg !50
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %194, i1 %64) #3, !dbg !50
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !50
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !50
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !50
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !50
  %209 = bitcast i32 %205 to float, !dbg !50
  %210 = bitcast i32 %206 to float, !dbg !50
  %211 = bitcast i32 %207 to float, !dbg !50
  %212 = bitcast i32 %208 to float, !dbg !50
  %213 = getelementptr float, ptr addrspace(1) %5, i64 %85, !dbg !51
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %213, i1 %27) #3, !dbg !52
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !52
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !52
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !52
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !52
  %219 = bitcast i32 %215 to float, !dbg !52
  %220 = bitcast i32 %216 to float, !dbg !52
  %221 = bitcast i32 %217 to float, !dbg !52
  %222 = bitcast i32 %218 to float, !dbg !52
  %.idx = shl nuw nsw i32 %17, 3, !dbg !53
  %223 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !53
  %224 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #3, !dbg !53
  %225 = shl nuw nsw i32 %17, 1, !dbg !53
  %226 = or disjoint i32 %225, 2, !dbg !53
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !53
  %228 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #3, !dbg !53
  %229 = or disjoint i32 %225, 4, !dbg !53
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !53
  %231 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #3, !dbg !53
  %232 = or disjoint i32 %225, 6, !dbg !53
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !53
  %234 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.idx1 = shl nuw nsw i32 %12, 3, !dbg !53
  %235 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !53
  %236 = load float, ptr addrspace(3) %235, align 8, !dbg !53
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !53
  %237 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !53
  %238 = load float, ptr addrspace(3) %237, align 8, !dbg !53
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !53
  %239 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !53
  %240 = load float, ptr addrspace(3) %239, align 8, !dbg !53
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !53
  %241 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !53
  %242 = load float, ptr addrspace(3) %241, align 8, !dbg !53
  %243 = fadd float %236, %68, !dbg !53
  %244 = fadd float %236, %69, !dbg !53
  %245 = fadd float %238, %73, !dbg !53
  %246 = fadd float %238, %74, !dbg !53
  %247 = fadd float %240, %78, !dbg !53
  %248 = fadd float %240, %79, !dbg !53
  %249 = fadd float %242, %83, !dbg !53
  %250 = fadd float %242, %84, !dbg !53
  %251 = fadd float %111, %155, !dbg !54
  %252 = fadd float %112, %156, !dbg !54
  %253 = fadd float %116, %160, !dbg !54
  %254 = fadd float %117, %161, !dbg !54
  %255 = fadd float %121, %165, !dbg !54
  %256 = fadd float %122, %166, !dbg !54
  %257 = fadd float %126, %170, !dbg !54
  %258 = fadd float %127, %171, !dbg !54
  %259 = fadd float %251, %243, !dbg !55
  %260 = fadd float %252, %244, !dbg !55
  %261 = fadd float %253, %245, !dbg !55
  %262 = fadd float %254, %246, !dbg !55
  %263 = fadd float %255, %247, !dbg !55
  %264 = fadd float %256, %248, !dbg !55
  %265 = fadd float %257, %249, !dbg !55
  %266 = fadd float %258, %250, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !55
  %268 = bitcast float %259 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #3, !dbg !55
  %269 = getelementptr inbounds i8, ptr addrspace(3) %267, i32 2064, !dbg !55
  %270 = bitcast float %260 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #3, !dbg !55
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !55
  %272 = bitcast float %261 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #3, !dbg !55
  %273 = getelementptr inbounds i8, ptr addrspace(3) %267, i32 2576, !dbg !55
  %274 = bitcast float %262 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #3, !dbg !55
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !55
  %276 = bitcast float %263 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #3, !dbg !55
  %277 = getelementptr inbounds i8, ptr addrspace(3) %267, i32 3088, !dbg !55
  %278 = bitcast float %264 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #3, !dbg !55
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !55
  %280 = bitcast float %265 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #3, !dbg !55
  %281 = getelementptr inbounds i8, ptr addrspace(3) %267, i32 3600, !dbg !55
  %282 = bitcast float %266 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #3, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !55
  %284 = load float, ptr addrspace(3) %283, align 16, !dbg !55
  %285 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 4, !dbg !55
  %286 = load float, ptr addrspace(3) %285, align 4, !dbg !55
  %287 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 8, !dbg !55
  %288 = load float, ptr addrspace(3) %287, align 8, !dbg !55
  %289 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 12, !dbg !55
  %290 = load float, ptr addrspace(3) %289, align 4, !dbg !55
  %291 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 2064, !dbg !55
  %292 = load float, ptr addrspace(3) %291, align 16, !dbg !55
  %293 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 2068, !dbg !55
  %294 = load float, ptr addrspace(3) %293, align 4, !dbg !55
  %295 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 2072, !dbg !55
  %296 = load float, ptr addrspace(3) %295, align 8, !dbg !55
  %297 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 2076, !dbg !55
  %298 = load float, ptr addrspace(3) %297, align 4, !dbg !55
  %299 = fadd float %200, %219, !dbg !56
  %300 = fadd float %201, %220, !dbg !56
  %301 = fadd float %202, %221, !dbg !56
  %302 = fadd float %203, %222, !dbg !56
  %303 = fadd float %209, %219, !dbg !56
  %304 = fadd float %210, %220, !dbg !56
  %305 = fadd float %211, %221, !dbg !56
  %306 = fadd float %212, %222, !dbg !56
  %307 = fadd float %299, %284, !dbg !57
  %308 = fadd float %300, %286, !dbg !57
  %309 = fadd float %301, %288, !dbg !57
  %310 = fadd float %302, %290, !dbg !57
  %311 = fadd float %303, %292, !dbg !57
  %312 = fadd float %304, %294, !dbg !57
  %313 = fadd float %305, %296, !dbg !57
  %314 = fadd float %306, %298, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %315 = shl i32 %11, 3, !dbg !59
  %316 = and i32 %315, 1016, !dbg !59
  %317 = shl i32 %11, 1, !dbg !59
  %318 = and i32 %317, 254, !dbg !59
  %319 = lshr exact i32 %316, 1, !dbg !59
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %319, !dbg !59
  %321 = getelementptr inbounds float, ptr addrspace(3) %320, i32 %316, !dbg !59
  %322 = bitcast float %307 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #3, !dbg !59
  %323 = or disjoint i32 %316, 2, !dbg !59
  %324 = lshr exact i32 %323, 1, !dbg !59
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %324, !dbg !59
  %326 = getelementptr inbounds float, ptr addrspace(3) %325, i32 %323, !dbg !59
  %327 = bitcast float %308 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #3, !dbg !59
  %328 = or disjoint i32 %316, 4, !dbg !59
  %329 = lshr exact i32 %328, 1, !dbg !59
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !59
  %331 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %328, !dbg !59
  %332 = bitcast float %309 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #3, !dbg !59
  %333 = or disjoint i32 %316, 6, !dbg !59
  %334 = lshr exact i32 %333, 1, !dbg !59
  %335 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %334, !dbg !59
  %336 = getelementptr inbounds float, ptr addrspace(3) %335, i32 %333, !dbg !59
  %337 = bitcast float %310 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #3, !dbg !59
  %338 = or disjoint i32 %316, 1, !dbg !59
  %339 = getelementptr inbounds float, ptr addrspace(3) %320, i32 %338, !dbg !59
  %340 = bitcast float %311 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #3, !dbg !59
  %341 = or disjoint i32 %316, 3, !dbg !59
  %342 = lshr i32 %341, 1, !dbg !59
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %342, !dbg !59
  %344 = getelementptr inbounds float, ptr addrspace(3) %343, i32 %341, !dbg !59
  %345 = bitcast float %312 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #3, !dbg !59
  %346 = or disjoint i32 %316, 5, !dbg !59
  %347 = lshr i32 %346, 1, !dbg !59
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %347, !dbg !59
  %349 = getelementptr inbounds float, ptr addrspace(3) %348, i32 %346, !dbg !59
  %350 = bitcast float %313 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 true) #3, !dbg !59
  %351 = or disjoint i32 %316, 7, !dbg !59
  %352 = lshr i32 %351, 1, !dbg !59
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %352, !dbg !59
  %354 = getelementptr inbounds float, ptr addrspace(3) %353, i32 %351, !dbg !59
  %355 = bitcast float %314 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %355, i1 true) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %356 = lshr exact i32 %318, 1, !dbg !59
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %356, !dbg !59
  %358 = getelementptr float, ptr addrspace(3) %357, i32 %318, !dbg !59
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !59
  %360 = or disjoint i32 %318, 1, !dbg !59
  %361 = getelementptr float, ptr addrspace(3) %357, i32 %360, !dbg !59
  %362 = load i32, ptr addrspace(3) %361, align 4, !dbg !59
  %363 = or disjoint i32 %318, 256, !dbg !59
  %364 = lshr exact i32 %363, 1, !dbg !59
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i32 %364, !dbg !59
  %366 = getelementptr float, ptr addrspace(3) %365, i32 %363, !dbg !59
  %367 = load i32, ptr addrspace(3) %366, align 4, !dbg !59
  %368 = or disjoint i32 %318, 257, !dbg !59
  %369 = lshr i32 %368, 1, !dbg !59
  %370 = getelementptr float, ptr addrspace(3) @global_smem, i32 %369, !dbg !59
  %371 = getelementptr float, ptr addrspace(3) %370, i32 %368, !dbg !59
  %372 = load i32, ptr addrspace(3) %371, align 4, !dbg !59
  %373 = or disjoint i32 %318, 512, !dbg !59
  %374 = lshr exact i32 %373, 1, !dbg !59
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !59
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %373, !dbg !59
  %377 = load i32, ptr addrspace(3) %376, align 4, !dbg !59
  %378 = or disjoint i32 %318, 513, !dbg !59
  %379 = lshr i32 %378, 1, !dbg !59
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %379, !dbg !59
  %381 = getelementptr float, ptr addrspace(3) %380, i32 %378, !dbg !59
  %382 = load i32, ptr addrspace(3) %381, align 4, !dbg !59
  %383 = or disjoint i32 %318, 768, !dbg !59
  %384 = lshr exact i32 %383, 1, !dbg !59
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !59
  %386 = getelementptr float, ptr addrspace(3) %385, i32 %383, !dbg !59
  %387 = load i32, ptr addrspace(3) %386, align 4, !dbg !59
  %388 = or disjoint i32 %318, 769, !dbg !59
  %389 = lshr i32 %388, 1, !dbg !59
  %390 = getelementptr float, ptr addrspace(3) @global_smem, i32 %389, !dbg !59
  %391 = getelementptr float, ptr addrspace(3) %390, i32 %388, !dbg !59
  %392 = load i32, ptr addrspace(3) %391, align 4, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %359, i32 %362, ptr addrspace(1) %52, i1 %59) #3, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %367, i32 %372, ptr addrspace(1) %54, i1 %60) #3, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %377, i32 %382, ptr addrspace(1) %56, i1 %61) #3, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %387, i32 %392, ptr addrspace(1) %58, i1 %62) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2saqzgkixge2ceyzt36gpl54middaeipgy6tvhhngrgdks4pnis.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_8", linkageName: "triton_poi_fused_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 56, scope: !7)
!27 = !DILocation(line: 34, column: 48, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 39, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 44, scope: !7)
!34 = !DILocation(line: 37, column: 39, scope: !7)
!35 = !DILocation(line: 37, column: 34, scope: !7)
!36 = !DILocation(line: 37, column: 48, scope: !7)
!37 = !DILocation(line: 37, column: 60, scope: !7)
!38 = !DILocation(line: 38, column: 80, scope: !7)
!39 = !DILocation(line: 37, column: 45, scope: !7)
!40 = !DILocation(line: 37, column: 55, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 66, scope: !7)
!43 = !DILocation(line: 38, column: 98, scope: !7)
!44 = !DILocation(line: 38, column: 92, scope: !7)
!45 = !DILocation(line: 38, column: 109, scope: !7)
!46 = !DILocation(line: 38, column: 35, scope: !7)
!47 = !DILocation(line: 38, column: 103, scope: !7)
!48 = !DILocation(line: 38, column: 51, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 114, scope: !7)
!51 = !DILocation(line: 39, column: 30, scope: !7)
!52 = !DILocation(line: 39, column: 35, scope: !7)
!53 = !DILocation(line: 40, column: 18, scope: !7)
!54 = !DILocation(line: 41, column: 18, scope: !7)
!55 = !DILocation(line: 42, column: 18, scope: !7)
!56 = !DILocation(line: 43, column: 18, scope: !7)
!57 = !DILocation(line: 44, column: 19, scope: !7)
!58 = !DILocation(line: 45, column: 4, scope: !7)
!59 = !DILocation(line: 46, column: 49, scope: !7)
!60 = !DILocation(line: 46, column: 4, scope: !7)
