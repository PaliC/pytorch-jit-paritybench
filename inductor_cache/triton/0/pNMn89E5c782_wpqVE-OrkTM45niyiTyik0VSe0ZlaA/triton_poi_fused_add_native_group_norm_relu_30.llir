; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = srem i32 %14, 1024, !dbg !14
  %16 = sdiv i32 %14, 65536, !dbg !15
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %20 = shl nsw i32 %16, 5, !dbg !18
  %.lhs.trunc = trunc nsw i32 %15 to i16, !dbg !19
  %21 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %21 to i32, !dbg !19
  %22 = add nsw i32 %20, %.sext, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !24
  %29 = bitcast i32 %28 to float, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = sext i32 %15 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !25
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !27
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !29
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !30
  %39 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %29, float 2.048000e+03) #3, !dbg !31
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float 2.048000e+03) #3, !dbg !31
  %41 = fadd float %39, 0x3EE4F8B580000000, !dbg !32
  %42 = fadd float %40, 0x3EE4F8B580000000, !dbg !32
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %43, 0, !dbg !33
  br i1 %.not.i, label %46, label %44, !dbg !33

44:                                               ; preds = %8
  %45 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %41), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

46:                                               ; preds = %8
  %47 = tail call float @llvm.nvvm.rsqrt.approx.f(float %41), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %44, %46
  %.0.i = phi float [ %45, %44 ], [ %47, %46 ], !dbg !33
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %48, 0, !dbg !33
  br i1 %.not.i1, label %51, label %49, !dbg !33

49:                                               ; preds = %__nv_rsqrtf.exit
  %50 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %42), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

51:                                               ; preds = %__nv_rsqrtf.exit
  %52 = tail call float @llvm.nvvm.rsqrt.approx.f(float %42), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

__nv_rsqrtf.exit3:                                ; preds = %49, %51
  %.0.i2 = phi float [ %50, %49 ], [ %52, %51 ], !dbg !33
  %53 = extractvalue { i32, i32 } %19, 1, !dbg !17
  %54 = bitcast i32 %53 to float, !dbg !17
  %55 = bitcast i32 %26 to float, !dbg !22
  %56 = fsub float %54, %55, !dbg !34
  %57 = extractvalue { i32, i32 } %19, 0, !dbg !17
  %58 = bitcast i32 %57 to float, !dbg !17
  %59 = bitcast i32 %25 to float, !dbg !22
  %60 = fsub float %58, %59, !dbg !34
  %61 = extractvalue { i32, i32 } %38, 1, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = extractvalue { i32, i32 } %38, 0, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = extractvalue { i32, i32 } %36, 1, !dbg !28
  %66 = bitcast i32 %65 to float, !dbg !28
  %67 = extractvalue { i32, i32 } %36, 0, !dbg !28
  %68 = bitcast i32 %67 to float, !dbg !28
  %69 = extractvalue { i32, i32 } %34, 1, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = extractvalue { i32, i32 } %34, 0, !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = fmul float %60, %.0.i, !dbg !35
  %74 = fmul float %56, %.0.i2, !dbg !35
  %75 = fmul float %73, %72, !dbg !36
  %76 = fmul float %74, %70, !dbg !36
  %77 = fadd float %75, %68, !dbg !37
  %78 = fadd float %76, %66, !dbg !37
  %79 = fadd float %77, %64, !dbg !38
  %80 = fadd float %78, %62, !dbg !38
  %81 = fcmp olt float %79, 0.000000e+00, !dbg !39
  %82 = fcmp olt float %80, 0.000000e+00, !dbg !39
  %83 = select i1 %81, float 0.000000e+00, float %79, !dbg !43
  %84 = select i1 %82, float 0.000000e+00, float %80, !dbg !43
  %85 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !44
  %86 = bitcast float %83 to i32, !dbg !45
  %87 = bitcast float %84 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %86, i32 %87, ptr addrspace(1) %85, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfdgusvjmpk4uzifxswmatrw2l2s3xtzuzt3ojbo2hf2nrisa7bp.py", directory: "inductor_cache/fd")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_30, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_30", linkageName: "triton_poi_fused_add_native_group_norm_relu_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 51, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 27, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 19, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 45, column: 25, scope: !7)
!45 = !DILocation(line: 45, column: 37, scope: !7)
!46 = !DILocation(line: 45, column: 4, scope: !7)
