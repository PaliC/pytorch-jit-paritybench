; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 6144, !dbg !14
  %12 = sdiv i32 %9, 16, !dbg !15
  %13 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %14 = insertelement <2 x i32> %13, i32 %12, i64 1, !dbg !16
  %15 = srem <2 x i32> %14, splat (i32 16), !dbg !16
  %16 = srem i32 %10, 16, !dbg !16
  %17 = sext i32 %9 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %11) #1, !dbg !18
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !18
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !18
  %22 = bitcast i32 %20 to float, !dbg !18
  %23 = bitcast i32 %21 to float, !dbg !18
  %24 = extractelement <2 x i32> %15, i64 1, !dbg !19
  %25 = icmp sgt i32 %24, 0, !dbg !20
  %26 = extractelement <2 x i32> %15, i64 0, !dbg !21
  %27 = icmp sgt i32 %26, 0, !dbg !22
  %28 = icmp sgt i32 %16, 0, !dbg !22
  %29 = and i1 %27, %25, !dbg !23
  %30 = and i1 %28, %25, !dbg !23
  %31 = add i32 %9, -17, !dbg !24
  %32 = add i32 %9, -16, !dbg !24
  %33 = sext i32 %31 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !25
  %37 = and i1 %11, %29, !dbg !26
  %38 = and i1 %11, %30, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %37, i32 0, i1 %37) #1, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %38, i32 0, i1 %38) #1, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = icmp sgt i32 %26, -1, !dbg !28
  %44 = and i1 %43, %25, !dbg !29
  %45 = and i1 %11, %44, !dbg !30
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !31
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !31
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !31
  %49 = bitcast i32 %47 to float, !dbg !31
  %50 = bitcast i32 %48 to float, !dbg !31
  %51 = fadd float %40, %49, !dbg !32
  %52 = fadd float %42, %50, !dbg !32
  %53 = icmp ult i32 %26, 16, !dbg !33
  %54 = add nsw i32 %16, 1, !dbg !33
  %55 = icmp ult i32 %54, 16, !dbg !33
  %56 = and i1 %53, %25, !dbg !34
  %57 = and i1 %55, %25, !dbg !34
  %58 = add i32 %9, -15, !dbg !35
  %59 = add i32 %9, -14, !dbg !35
  %60 = sext i32 %58 to i64, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !36
  %62 = sext i32 %59 to i64, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !36
  %64 = and i1 %11, %56, !dbg !37
  %65 = and i1 %11, %57, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %64, i32 0, i1 %64) #1, !dbg !38
  %67 = bitcast i32 %66 to float, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %65, i32 0, i1 %65) #1, !dbg !38
  %69 = bitcast i32 %68 to float, !dbg !38
  %70 = fadd float %51, %67, !dbg !39
  %71 = fadd float %52, %69, !dbg !39
  %72 = icmp sgt i32 %24, -1, !dbg !40
  %73 = and i1 %27, %72, !dbg !41
  %74 = and i1 %28, %72, !dbg !41
  %75 = add i32 %9, -1, !dbg !42
  %76 = sext i32 %75 to i64, !dbg !43
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !43
  %78 = sext i32 %10 to i64, !dbg !43
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !43
  %80 = getelementptr i8, ptr addrspace(1) %79, i64 -4, !dbg !43
  %81 = and i1 %11, %73, !dbg !44
  %82 = and i1 %11, %74, !dbg !44
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %81, i32 0, i1 %81) #1, !dbg !45
  %84 = bitcast i32 %83 to float, !dbg !45
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %82, i32 0, i1 %82) #1, !dbg !45
  %86 = bitcast i32 %85 to float, !dbg !45
  %87 = fadd float %70, %84, !dbg !46
  %88 = fadd float %71, %86, !dbg !46
  %89 = or i32 %24, %26, !dbg !47
  %90 = icmp sgt i32 %89, -1, !dbg !47
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !48
  %92 = and i1 %11, %90, !dbg !49
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %91, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #1, !dbg !50
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !50
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !50
  %96 = bitcast i32 %94 to float, !dbg !50
  %97 = bitcast i32 %95 to float, !dbg !50
  %98 = fadd float %87, %96, !dbg !51
  %99 = fadd float %88, %97, !dbg !51
  %100 = and i1 %53, %72, !dbg !52
  %101 = and i1 %55, %72, !dbg !52
  %102 = add i32 %9, 2, !dbg !53
  %103 = sext i32 %102 to i64, !dbg !54
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !54
  %105 = and i1 %11, %100, !dbg !55
  %106 = and i1 %11, %101, !dbg !55
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %105, i32 0, i1 %105) #1, !dbg !56
  %108 = bitcast i32 %107 to float, !dbg !56
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %106, i32 0, i1 %106) #1, !dbg !56
  %110 = bitcast i32 %109 to float, !dbg !56
  %111 = fadd float %98, %108, !dbg !57
  %112 = fadd float %99, %110, !dbg !57
  %113 = add nsw i32 %24, 1, !dbg !58
  %114 = icmp ult i32 %113, 16, !dbg !58
  %115 = and i1 %27, %114, !dbg !59
  %116 = and i1 %28, %114, !dbg !59
  %117 = add i32 %9, 15, !dbg !60
  %118 = add i32 %9, 16, !dbg !60
  %119 = sext i32 %117 to i64, !dbg !61
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !61
  %121 = sext i32 %118 to i64, !dbg !61
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !61
  %123 = and i1 %11, %115, !dbg !62
  %124 = and i1 %11, %116, !dbg !62
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %123, i32 0, i1 %123) #1, !dbg !63
  %126 = bitcast i32 %125 to float, !dbg !63
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %124, i32 0, i1 %124) #1, !dbg !63
  %128 = bitcast i32 %127 to float, !dbg !63
  %129 = fadd float %111, %126, !dbg !64
  %130 = fadd float %112, %128, !dbg !64
  %131 = and i1 %43, %114, !dbg !65
  %132 = and i1 %11, %131, !dbg !66
  %133 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %122, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #1, !dbg !67
  %134 = extractvalue { i32, i32 } %133, 0, !dbg !67
  %135 = extractvalue { i32, i32 } %133, 1, !dbg !67
  %136 = bitcast i32 %134 to float, !dbg !67
  %137 = bitcast i32 %135 to float, !dbg !67
  %138 = fadd float %129, %136, !dbg !68
  %139 = fadd float %130, %137, !dbg !68
  %140 = or i32 %113, %26, !dbg !69
  %141 = icmp ult i32 %140, 16, !dbg !69
  %142 = or i32 %113, %54, !dbg !69
  %143 = icmp ult i32 %142, 16, !dbg !69
  %144 = add i32 %9, 17, !dbg !70
  %145 = add i32 %9, 18, !dbg !70
  %146 = sext i32 %144 to i64, !dbg !71
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !71
  %148 = sext i32 %145 to i64, !dbg !71
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !71
  %150 = and i1 %11, %141, !dbg !72
  %151 = and i1 %11, %143, !dbg !72
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %150, i32 0, i1 %150) #1, !dbg !73
  %153 = bitcast i32 %152 to float, !dbg !73
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %151, i32 0, i1 %151) #1, !dbg !73
  %155 = bitcast i32 %154 to float, !dbg !73
  %156 = fadd float %138, %153, !dbg !74
  %157 = fadd float %139, %155, !dbg !74
  %158 = add nsw i32 %26, 2, !dbg !75
  %159 = add nsw i32 %16, 2, !dbg !75
  %160 = icmp sgt i32 %26, 14, !dbg !76
  %161 = icmp sgt i32 %16, 14, !dbg !76
  %162 = select i1 %160, i32 17, i32 0, !dbg !77
  %163 = select i1 %161, i32 17, i32 0, !dbg !77
  %164 = icmp slt i32 %26, 15, !dbg !78
  %165 = icmp slt i32 %16, 15, !dbg !78
  %166 = select i1 %164, i32 %158, i32 0, !dbg !79
  %167 = select i1 %165, i32 %159, i32 0, !dbg !79
  %168 = add nsw i32 %162, %166, !dbg !80
  %169 = add nsw i32 %163, %167, !dbg !80
  %170 = add nsw i32 %24, 2, !dbg !81
  %171 = icmp sgt i32 %24, 14, !dbg !82
  %172 = select i1 %171, i32 17, i32 0, !dbg !83
  %173 = icmp slt i32 %24, 15, !dbg !84
  %174 = select i1 %173, i32 %170, i32 0, !dbg !85
  %175 = add nsw i32 %172, %174, !dbg !86
  %reass.add = sub nsw i32 %175, %24
  %reass.mul = mul nsw i32 %reass.add, %168
  %reass.add9 = sub nsw i32 %24, %175
  %reass.mul10 = mul nsw i32 %reass.add9, %26
  %176 = add nsw i32 %26, %24, !dbg !21
  %reass.sub = sub nsw i32 %168, %176, !dbg !19
  %177 = add nsw i32 %reass.sub, 1, !dbg !19
  %178 = add nsw i32 %177, %175, !dbg !87
  %179 = add nsw i32 %178, %reass.mul, !dbg !88
  %180 = add nsw i32 %179, %reass.mul10, !dbg !89
  %reass.mul8 = mul nsw i32 %reass.add, %169
  %reass.mul12 = mul nsw i32 %reass.add9, %16
  %181 = add nsw i32 %169, 1, !dbg !19
  %182 = add nsw i32 %16, %24, !dbg !19
  %183 = sub nsw i32 %181, %182, !dbg !19
  %184 = add nsw i32 %183, %175, !dbg !87
  %185 = add nsw i32 %184, %reass.mul8, !dbg !88
  %186 = add nsw i32 %185, %reass.mul12, !dbg !89
  %187 = sitofp i32 %180 to float, !dbg !90
  %188 = sitofp i32 %186 to float, !dbg !90
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %187) #1, !dbg !90
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %188) #1, !dbg !90
  %191 = fadd float %189, %22, !dbg !91
  %192 = fadd float %190, %23, !dbg !91
  %193 = bitcast float %191 to i32, !dbg !92
  %194 = bitcast float %192 to i32, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %193, i32 %194, ptr addrspace(1) %18, i1 %11) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbrgbxrwzab3je4ebmyjpodhibphbgwedpk77budt3bgrhxcvc7p.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_11", linkageName: "triton_poi_fused_add_avg_pool2d_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 40, scope: !7)
!19 = !DILocation(line: 80, column: 169, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 80, column: 48, scope: !7)
!22 = !DILocation(line: 35, column: 19, scope: !7)
!23 = !DILocation(line: 38, column: 19, scope: !7)
!24 = !DILocation(line: 39, column: 39, scope: !7)
!25 = !DILocation(line: 39, column: 31, scope: !7)
!26 = !DILocation(line: 39, column: 52, scope: !7)
!27 = !DILocation(line: 39, column: 44, scope: !7)
!28 = !DILocation(line: 41, column: 21, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 52, scope: !7)
!31 = !DILocation(line: 45, column: 44, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 50, column: 20, scope: !7)
!34 = !DILocation(line: 51, column: 19, scope: !7)
!35 = !DILocation(line: 52, column: 39, scope: !7)
!36 = !DILocation(line: 52, column: 31, scope: !7)
!37 = !DILocation(line: 52, column: 52, scope: !7)
!38 = !DILocation(line: 52, column: 44, scope: !7)
!39 = !DILocation(line: 53, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 21, scope: !7)
!41 = !DILocation(line: 58, column: 20, scope: !7)
!42 = !DILocation(line: 59, column: 38, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 51, scope: !7)
!45 = !DILocation(line: 59, column: 43, scope: !7)
!46 = !DILocation(line: 60, column: 20, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 31, scope: !7)
!49 = !DILocation(line: 62, column: 44, scope: !7)
!50 = !DILocation(line: 62, column: 36, scope: !7)
!51 = !DILocation(line: 63, column: 20, scope: !7)
!52 = !DILocation(line: 64, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 35, scope: !7)
!54 = !DILocation(line: 65, column: 31, scope: !7)
!55 = !DILocation(line: 65, column: 48, scope: !7)
!56 = !DILocation(line: 65, column: 40, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 70, column: 20, scope: !7)
!59 = !DILocation(line: 71, column: 20, scope: !7)
!60 = !DILocation(line: 72, column: 36, scope: !7)
!61 = !DILocation(line: 72, column: 31, scope: !7)
!62 = !DILocation(line: 72, column: 49, scope: !7)
!63 = !DILocation(line: 72, column: 41, scope: !7)
!64 = !DILocation(line: 73, column: 20, scope: !7)
!65 = !DILocation(line: 74, column: 20, scope: !7)
!66 = !DILocation(line: 75, column: 49, scope: !7)
!67 = !DILocation(line: 75, column: 41, scope: !7)
!68 = !DILocation(line: 76, column: 20, scope: !7)
!69 = !DILocation(line: 77, column: 20, scope: !7)
!70 = !DILocation(line: 78, column: 36, scope: !7)
!71 = !DILocation(line: 78, column: 31, scope: !7)
!72 = !DILocation(line: 78, column: 49, scope: !7)
!73 = !DILocation(line: 78, column: 41, scope: !7)
!74 = !DILocation(line: 79, column: 20, scope: !7)
!75 = !DILocation(line: 80, column: 70, scope: !7)
!76 = !DILocation(line: 80, column: 66, scope: !7)
!77 = !DILocation(line: 80, column: 57, scope: !7)
!78 = !DILocation(line: 80, column: 101, scope: !7)
!79 = !DILocation(line: 80, column: 89, scope: !7)
!80 = !DILocation(line: 80, column: 77, scope: !7)
!81 = !DILocation(line: 80, column: 129, scope: !7)
!82 = !DILocation(line: 80, column: 125, scope: !7)
!83 = !DILocation(line: 80, column: 116, scope: !7)
!84 = !DILocation(line: 80, column: 160, scope: !7)
!85 = !DILocation(line: 80, column: 148, scope: !7)
!86 = !DILocation(line: 80, column: 136, scope: !7)
!87 = !DILocation(line: 80, column: 240, scope: !7)
!88 = !DILocation(line: 80, column: 311, scope: !7)
!89 = !DILocation(line: 80, column: 372, scope: !7)
!90 = !DILocation(line: 81, column: 20, scope: !7)
!91 = !DILocation(line: 82, column: 20, scope: !7)
!92 = !DILocation(line: 83, column: 40, scope: !7)
!93 = !DILocation(line: 83, column: 4, scope: !7)
