; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_div_pow_relu_sub_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = icmp slt i32 %13, 3844, !dbg !14
  %17 = icmp slt i32 %14, 3844, !dbg !14
  %18 = icmp slt i32 %15, 3844, !dbg !14
  %19 = shl i32 %8, 2, !dbg !15
  %20 = and i32 %19, 60, !dbg !15
  %21 = shl i32 %13, 6, !dbg !16
  %22 = shl i32 %14, 6, !dbg !16
  %23 = or disjoint i32 %21, %20, !dbg !17
  %24 = or disjoint i32 %22, %20, !dbg !17
  %25 = sext i32 %23 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = sext i32 %24 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #3, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = zext nneg i32 %20 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !20
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !21
  %46 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !19
  %47 = insertelement <8 x i32> %46, i32 %37, i64 1, !dbg !19
  %48 = insertelement <8 x i32> %47, i32 %36, i64 2, !dbg !19
  %49 = insertelement <8 x i32> %48, i32 %35, i64 3, !dbg !19
  %50 = insertelement <8 x i32> %49, i32 %33, i64 4, !dbg !19
  %51 = insertelement <8 x i32> %50, i32 %32, i64 5, !dbg !19
  %52 = insertelement <8 x i32> %51, i32 %31, i64 6, !dbg !19
  %53 = insertelement <8 x i32> %52, i32 %30, i64 7, !dbg !19
  %54 = bitcast <8 x i32> %53 to <8 x float>, !dbg !19
  %55 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !21
  %56 = insertelement <4 x i32> %55, i32 %44, i64 1, !dbg !21
  %57 = insertelement <4 x i32> %56, i32 %43, i64 2, !dbg !21
  %58 = insertelement <4 x i32> %57, i32 %42, i64 3, !dbg !21
  %59 = bitcast <4 x i32> %58 to <4 x float>, !dbg !21
  %60 = shufflevector <4 x float> %59, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %61 = fadd <8 x float> %60, %54, !dbg !22
  %62 = fcmp olt <8 x float> %61, zeroinitializer, !dbg !23
  %63 = extractelement <8 x i1> %62, i64 7, !dbg !27
  %64 = extractelement <8 x float> %61, i64 7, !dbg !27
  %65 = select i1 %63, float 0.000000e+00, float %64, !dbg !27
  %66 = extractelement <8 x i1> %62, i64 6, !dbg !27
  %67 = extractelement <8 x float> %61, i64 6, !dbg !27
  %68 = select i1 %66, float 0.000000e+00, float %67, !dbg !27
  %69 = extractelement <8 x i1> %62, i64 5, !dbg !27
  %70 = extractelement <8 x float> %61, i64 5, !dbg !27
  %71 = select i1 %69, float 0.000000e+00, float %70, !dbg !27
  %72 = extractelement <8 x i1> %62, i64 4, !dbg !27
  %73 = extractelement <8 x float> %61, i64 4, !dbg !27
  %74 = select i1 %72, float 0.000000e+00, float %73, !dbg !27
  %75 = extractelement <8 x i1> %62, i64 3, !dbg !27
  %76 = extractelement <8 x float> %61, i64 3, !dbg !27
  %77 = select i1 %75, float 0.000000e+00, float %76, !dbg !27
  %78 = extractelement <8 x i1> %62, i64 2, !dbg !27
  %79 = extractelement <8 x float> %61, i64 2, !dbg !27
  %80 = select i1 %78, float 0.000000e+00, float %79, !dbg !27
  %81 = extractelement <8 x i1> %62, i64 1, !dbg !27
  %82 = extractelement <8 x float> %61, i64 1, !dbg !27
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !27
  %84 = extractelement <8 x i1> %62, i64 0, !dbg !27
  %85 = extractelement <8 x float> %61, i64 0, !dbg !27
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !27
  %87 = fmul float %65, %65, !dbg !28
  %88 = fmul float %68, %68, !dbg !28
  %89 = fmul float %71, %71, !dbg !28
  %90 = fmul float %74, %74, !dbg !28
  %91 = fmul float %77, %77, !dbg !28
  %92 = fmul float %80, %80, !dbg !28
  %93 = fmul float %83, %83, !dbg !28
  %94 = fmul float %86, %86, !dbg !28
  %95 = fadd float %87, %88, !dbg !29
  %96 = fadd float %89, %95, !dbg !29
  %97 = fadd float %90, %96, !dbg !29
  %98 = select i1 %16, float %97, float 0.000000e+00, !dbg !29
  %99 = fadd float %91, %92, !dbg !29
  %100 = fadd float %93, %99, !dbg !29
  %101 = fadd float %94, %100, !dbg !29
  %102 = select i1 %17, float %101, float 0.000000e+00, !dbg !29
  %103 = bitcast float %98 to i32, !dbg !34
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !34
  %105 = bitcast i32 %104 to float, !dbg !34
  %106 = fadd float %98, %105, !dbg !29
  %107 = bitcast float %106 to i32, !dbg !34
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !34
  %109 = bitcast i32 %108 to float, !dbg !34
  %110 = fadd float %106, %109, !dbg !29
  %111 = bitcast float %110 to i32, !dbg !34
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !34
  %113 = bitcast i32 %112 to float, !dbg !34
  %114 = fadd float %110, %113, !dbg !29
  %115 = bitcast float %114 to i32, !dbg !34
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !34
  %117 = bitcast i32 %116 to float, !dbg !34
  %118 = fadd float %114, %117, !dbg !29
  %119 = bitcast float %102 to i32, !dbg !34
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 8, i32 31), !dbg !34
  %121 = bitcast i32 %120 to float, !dbg !34
  %122 = fadd float %102, %121, !dbg !29
  %123 = bitcast float %122 to i32, !dbg !34
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !34
  %125 = bitcast i32 %124 to float, !dbg !34
  %126 = fadd float %122, %125, !dbg !29
  %127 = bitcast float %126 to i32, !dbg !34
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = fadd float %126, %129, !dbg !29
  %131 = bitcast float %130 to i32, !dbg !34
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = fadd float %130, %133, !dbg !29
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !35
  %136 = bitcast float %118 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #3, !dbg !35
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !35
  %138 = bitcast float %134 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !35
  %141 = bitcast float %65 to i32, !dbg !36
  %142 = bitcast float %68 to i32, !dbg !36
  %143 = bitcast float %71 to i32, !dbg !36
  %144 = bitcast float %74 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %141, i32 %142, i32 %143, i32 %144, ptr addrspace(1) %26, i1 %16) #3, !dbg !36
  %145 = bitcast float %77 to i32, !dbg !36
  %146 = bitcast float %80 to i32, !dbg !36
  %147 = bitcast float %83 to i32, !dbg !36
  %148 = bitcast float %86 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %146, i32 %147, i32 %148, ptr addrspace(1) %28, i1 %17) #3, !dbg !36
  %149 = sext i32 %15 to i64, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %149, !dbg !37
  %151 = and i32 %8, 224, !dbg !38
  %152 = icmp eq i32 %151, 0, !dbg !38
  %153 = and i1 %152, %18, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %150, i1 %153) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmf3swobsopdcnklob2ma56kj4e33rgkupjiib56pav4ow4fjamk.py", directory: "inductor_cache/mf")
!4 = !{ptr @triton_per_fused_convolution_div_pow_relu_sub_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_div_pow_relu_sub_sum_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_div_pow_relu_sub_sum_2", linkageName: "triton_per_fused_convolution_div_pow_relu_sub_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 35, column: 40, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 39, column: 24, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 39, column: 27, scope: !7)
!36 = !DILocation(line: 40, column: 47, scope: !7)
!37 = !DILocation(line: 41, column: 25, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 41, column: 4, scope: !7)
