; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 240, !dbg !12
  %15 = lshr i32 %12, 4, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = and i32 %12, 255, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %18, 4, !dbg !13
  %20 = or disjoint i32 %18, 8, !dbg !13
  %21 = or disjoint i32 %18, 12, !dbg !13
  %22 = or disjoint i32 %11, %17, !dbg !13
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %24 = shl i32 %23, 4, !dbg !15
  %25 = or disjoint i32 %24, %16, !dbg !16
  %26 = icmp slt i32 %25, 25, !dbg !17
  %.frozen = freeze i32 %18, !dbg !18
  %27 = sdiv i32 %.frozen, 256, !dbg !18
  %28 = mul i32 %27, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %28, !dbg !19
  %29 = srem i32 %19, 256, !dbg !19
  %30 = srem i32 %20, 256, !dbg !19
  %31 = srem i32 %21, 256, !dbg !19
  %32 = srem i32 %22, 256, !dbg !19
  %33 = shl i32 %25, 8, !dbg !20
  %34 = mul i32 %27, 6400, !dbg !21
  %35 = add i32 %34, %33, !dbg !22
  %36 = add i32 %35, %.decomposed, !dbg !23
  %37 = add i32 %35, %29, !dbg !23
  %38 = add i32 %35, %30, !dbg !23
  %39 = add i32 %35, %31, !dbg !23
  %40 = sext i32 %36 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %37 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %38 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %39 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %26) #4, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %26) #4, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %26) #4, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %26) #4, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = and i32 %13, 4080, !dbg !25
  %69 = and i32 %12, 240, !dbg !25
  %70 = add nuw nsw i32 %68, %69, !dbg !25
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %71, i32 %49, i32 %50, i32 %51, i32 %52, i1 true) #4, !dbg !25
  %72 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 16, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %54, i32 %55, i32 %56, i32 %57, i1 true) #4, !dbg !25
  %73 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 32, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %59, i32 %60, i32 %61, i32 %62, i1 true) #4, !dbg !25
  %74 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 48, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %64, i32 %65, i32 %66, i32 %67, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !25
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %77 = add nuw nsw i32 %17, 272, !dbg !25
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !25
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !25
  %80 = add nuw nsw i32 %17, 544, !dbg !25
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !25
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !25
  %83 = add nuw nsw i32 %17, 816, !dbg !25
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %83, !dbg !25
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !25
  %86 = add nuw nsw i32 %17, 1088, !dbg !25
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %86, !dbg !25
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !25
  %89 = add nuw nsw i32 %17, 1360, !dbg !25
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %89, !dbg !25
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !25
  %92 = add nuw nsw i32 %17, 1632, !dbg !25
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !25
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !25
  %95 = add nuw nsw i32 %17, 1904, !dbg !25
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !25
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !25
  %98 = add nuw nsw i32 %17, 2176, !dbg !25
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !25
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !25
  %101 = add nuw nsw i32 %17, 2448, !dbg !25
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !25
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !25
  %104 = add nuw nsw i32 %17, 2720, !dbg !25
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !25
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !25
  %107 = add nuw nsw i32 %17, 2992, !dbg !25
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !25
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !25
  %110 = add nuw nsw i32 %17, 3264, !dbg !25
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !25
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !25
  %113 = add nuw nsw i32 %17, 3536, !dbg !25
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !25
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !25
  %116 = add nuw nsw i32 %17, 3808, !dbg !25
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !25
  %118 = load float, ptr addrspace(3) %117, align 4, !dbg !25
  %119 = add nuw nsw i32 %17, 4080, !dbg !25
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !25
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !25
  %122 = sext i32 %32 to i64, !dbg !26
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #4, !dbg !27
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !28
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #4, !dbg !29
  %127 = bitcast i32 %126 to float, !dbg !29
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %122, !dbg !30
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #4, !dbg !31
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %122, !dbg !32
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #4, !dbg !33
  %132 = fadd float %127, 0x3EE4F8B580000000, !dbg !34
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %133, 0, !dbg !35
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %134, 0, !dbg !35
  br i1 %.not.i, label %140, label %135, !dbg !35

135:                                              ; preds = %9
  br i1 %.not1.i, label %138, label %136, !dbg !35

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

140:                                              ; preds = %9
  br i1 %.not1.i, label %143, label %141, !dbg !35

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %136, %138, %141, %143
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !35
  %145 = or disjoint i32 %17, 3840, !dbg !25
  %146 = or disjoint i32 %17, 3584, !dbg !25
  %147 = or disjoint i32 %17, 3328, !dbg !25
  %148 = or disjoint i32 %17, 3072, !dbg !25
  %149 = or disjoint i32 %17, 2816, !dbg !25
  %150 = or disjoint i32 %17, 2560, !dbg !25
  %151 = or disjoint i32 %17, 2304, !dbg !25
  %152 = or disjoint i32 %17, 2048, !dbg !25
  %153 = or disjoint i32 %17, 1792, !dbg !25
  %154 = or disjoint i32 %17, 1536, !dbg !25
  %155 = or disjoint i32 %17, 1280, !dbg !25
  %156 = or disjoint i32 %17, 1024, !dbg !25
  %157 = or disjoint i32 %17, 768, !dbg !25
  %158 = or disjoint i32 %17, 512, !dbg !25
  %159 = or disjoint i32 %17, 256, !dbg !25
  %160 = and i32 %12, 15, !dbg !12
  %161 = or disjoint i32 %24, %160, !dbg !16
  %162 = icmp slt i32 %161, 25, !dbg !17
  %163 = or disjoint i32 %16, 240, !dbg !12
  %164 = or disjoint i32 %11, %163, !dbg !13
  %165 = or disjoint i32 %16, 224, !dbg !12
  %166 = or disjoint i32 %11, %165, !dbg !13
  %167 = or disjoint i32 %16, 208, !dbg !12
  %168 = or disjoint i32 %11, %167, !dbg !13
  %169 = or disjoint i32 %16, 192, !dbg !12
  %170 = or disjoint i32 %11, %169, !dbg !13
  %171 = or disjoint i32 %16, 176, !dbg !12
  %172 = or disjoint i32 %11, %171, !dbg !13
  %173 = or disjoint i32 %16, 160, !dbg !12
  %174 = or disjoint i32 %11, %173, !dbg !13
  %175 = or disjoint i32 %16, 144, !dbg !12
  %176 = or disjoint i32 %11, %175, !dbg !13
  %177 = or disjoint i32 %16, 128, !dbg !12
  %178 = or disjoint i32 %11, %177, !dbg !13
  %179 = or disjoint i32 %16, 112, !dbg !12
  %180 = or disjoint i32 %11, %179, !dbg !13
  %181 = or disjoint i32 %16, 96, !dbg !12
  %182 = or disjoint i32 %11, %181, !dbg !13
  %183 = or disjoint i32 %16, 80, !dbg !12
  %184 = or disjoint i32 %11, %183, !dbg !13
  %185 = or disjoint i32 %16, 64, !dbg !12
  %186 = or disjoint i32 %11, %185, !dbg !13
  %187 = or disjoint i32 %16, 48, !dbg !12
  %188 = or disjoint i32 %11, %187, !dbg !13
  %189 = or disjoint i32 %16, 32, !dbg !12
  %190 = or disjoint i32 %11, %189, !dbg !13
  %191 = or disjoint i32 %16, 16, !dbg !12
  %192 = or disjoint i32 %11, %191, !dbg !13
  %193 = or disjoint i32 %11, %16, !dbg !13
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %195 = insertelement <16 x float> poison, float %121, i64 0, !dbg !37
  %196 = insertelement <16 x float> %195, float %118, i64 1, !dbg !37
  %197 = insertelement <16 x float> %196, float %115, i64 2, !dbg !37
  %198 = insertelement <16 x float> %197, float %112, i64 3, !dbg !37
  %199 = insertelement <16 x float> %198, float %109, i64 4, !dbg !37
  %200 = insertelement <16 x float> %199, float %106, i64 5, !dbg !37
  %201 = insertelement <16 x float> %200, float %103, i64 6, !dbg !37
  %202 = insertelement <16 x float> %201, float %100, i64 7, !dbg !37
  %203 = insertelement <16 x float> %202, float %97, i64 8, !dbg !37
  %204 = insertelement <16 x float> %203, float %94, i64 9, !dbg !37
  %205 = insertelement <16 x float> %204, float %91, i64 10, !dbg !37
  %206 = insertelement <16 x float> %205, float %88, i64 11, !dbg !37
  %207 = insertelement <16 x float> %206, float %85, i64 12, !dbg !37
  %208 = insertelement <16 x float> %207, float %82, i64 13, !dbg !37
  %209 = insertelement <16 x float> %208, float %79, i64 14, !dbg !37
  %210 = insertelement <16 x float> %209, float %76, i64 15, !dbg !37
  %211 = insertelement <16 x i32> poison, i32 %124, i64 0, !dbg !37
  %212 = bitcast <16 x i32> %211 to <16 x float>, !dbg !37
  %213 = shufflevector <16 x float> %212, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !37
  %214 = fsub <16 x float> %210, %213, !dbg !37
  %215 = insertelement <16 x float> poison, float %194, i64 0, !dbg !38
  %216 = shufflevector <16 x float> %215, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %217 = fmul <16 x float> %214, %216, !dbg !38
  %218 = insertelement <16 x i32> poison, i32 %129, i64 0, !dbg !39
  %219 = bitcast <16 x i32> %218 to <16 x float>, !dbg !39
  %220 = shufflevector <16 x float> %219, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %221 = fmul <16 x float> %217, %220, !dbg !39
  %222 = insertelement <16 x i32> poison, i32 %131, i64 0, !dbg !40
  %223 = bitcast <16 x i32> %222 to <16 x float>, !dbg !40
  %224 = shufflevector <16 x float> %223, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %225 = fadd <16 x float> %221, %224, !dbg !40
  %226 = fcmp olt <16 x float> %225, zeroinitializer, !dbg !41
  %227 = select <16 x i1> %226, <16 x float> zeroinitializer, <16 x float> %225, !dbg !45
  %228 = fcmp ole <16 x float> %227, zeroinitializer, !dbg !46
  %229 = mul i32 %193, 25, !dbg !47
  %230 = mul i32 %192, 25, !dbg !47
  %231 = mul i32 %190, 25, !dbg !47
  %232 = mul i32 %188, 25, !dbg !47
  %233 = mul i32 %186, 25, !dbg !47
  %234 = mul i32 %184, 25, !dbg !47
  %235 = mul i32 %182, 25, !dbg !47
  %236 = mul i32 %180, 25, !dbg !47
  %237 = mul i32 %178, 25, !dbg !47
  %238 = mul i32 %176, 25, !dbg !47
  %239 = mul i32 %174, 25, !dbg !47
  %240 = mul i32 %172, 25, !dbg !47
  %241 = mul i32 %170, 25, !dbg !47
  %242 = mul i32 %168, 25, !dbg !47
  %243 = mul i32 %166, 25, !dbg !47
  %244 = mul i32 %164, 25, !dbg !47
  %245 = add i32 %161, %229, !dbg !48
  %246 = add i32 %161, %230, !dbg !48
  %247 = add i32 %161, %231, !dbg !48
  %248 = add i32 %161, %232, !dbg !48
  %249 = add i32 %161, %233, !dbg !48
  %250 = add i32 %161, %234, !dbg !48
  %251 = add i32 %161, %235, !dbg !48
  %252 = add i32 %161, %236, !dbg !48
  %253 = add i32 %161, %237, !dbg !48
  %254 = add i32 %161, %238, !dbg !48
  %255 = add i32 %161, %239, !dbg !48
  %256 = add i32 %161, %240, !dbg !48
  %257 = add i32 %161, %241, !dbg !48
  %258 = add i32 %161, %242, !dbg !48
  %259 = add i32 %161, %243, !dbg !48
  %260 = add i32 %161, %244, !dbg !48
  %261 = sext i32 %245 to i64, !dbg !49
  %262 = getelementptr float, ptr addrspace(1) %5, i64 %261, !dbg !49
  %263 = sext i32 %246 to i64, !dbg !49
  %264 = getelementptr float, ptr addrspace(1) %5, i64 %263, !dbg !49
  %265 = sext i32 %247 to i64, !dbg !49
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %265, !dbg !49
  %267 = sext i32 %248 to i64, !dbg !49
  %268 = getelementptr float, ptr addrspace(1) %5, i64 %267, !dbg !49
  %269 = sext i32 %249 to i64, !dbg !49
  %270 = getelementptr float, ptr addrspace(1) %5, i64 %269, !dbg !49
  %271 = sext i32 %250 to i64, !dbg !49
  %272 = getelementptr float, ptr addrspace(1) %5, i64 %271, !dbg !49
  %273 = sext i32 %251 to i64, !dbg !49
  %274 = getelementptr float, ptr addrspace(1) %5, i64 %273, !dbg !49
  %275 = sext i32 %252 to i64, !dbg !49
  %276 = getelementptr float, ptr addrspace(1) %5, i64 %275, !dbg !49
  %277 = sext i32 %253 to i64, !dbg !49
  %278 = getelementptr float, ptr addrspace(1) %5, i64 %277, !dbg !49
  %279 = sext i32 %254 to i64, !dbg !49
  %280 = getelementptr float, ptr addrspace(1) %5, i64 %279, !dbg !49
  %281 = sext i32 %255 to i64, !dbg !49
  %282 = getelementptr float, ptr addrspace(1) %5, i64 %281, !dbg !49
  %283 = sext i32 %256 to i64, !dbg !49
  %284 = getelementptr float, ptr addrspace(1) %5, i64 %283, !dbg !49
  %285 = sext i32 %257 to i64, !dbg !49
  %286 = getelementptr float, ptr addrspace(1) %5, i64 %285, !dbg !49
  %287 = sext i32 %258 to i64, !dbg !49
  %288 = getelementptr float, ptr addrspace(1) %5, i64 %287, !dbg !49
  %289 = sext i32 %259 to i64, !dbg !49
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %289, !dbg !49
  %291 = sext i32 %260 to i64, !dbg !49
  %292 = getelementptr float, ptr addrspace(1) %5, i64 %291, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %293 = lshr exact i32 %68, 2, !dbg !50
  %294 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %293, !dbg !50
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %68, !dbg !50
  %296 = extractelement <16 x float> %227, i64 15, !dbg !50
  %297 = bitcast float %296 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %297, i1 true) #4, !dbg !50
  %298 = or disjoint i32 %68, 1, !dbg !50
  %299 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %298, !dbg !50
  %300 = extractelement <16 x float> %227, i64 14, !dbg !50
  %301 = bitcast float %300 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %301, i1 true) #4, !dbg !50
  %302 = or disjoint i32 %68, 2, !dbg !50
  %303 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %302, !dbg !50
  %304 = extractelement <16 x float> %227, i64 13, !dbg !50
  %305 = bitcast float %304 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %305, i1 true) #4, !dbg !50
  %306 = or disjoint i32 %68, 3, !dbg !50
  %307 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %306, !dbg !50
  %308 = extractelement <16 x float> %227, i64 12, !dbg !50
  %309 = bitcast float %308 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %309, i1 true) #4, !dbg !50
  %310 = or disjoint i32 %68, 4, !dbg !50
  %311 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %310, !dbg !50
  %312 = extractelement <16 x float> %227, i64 11, !dbg !50
  %313 = bitcast float %312 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %313, i1 true) #4, !dbg !50
  %314 = or disjoint i32 %68, 5, !dbg !50
  %315 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %314, !dbg !50
  %316 = extractelement <16 x float> %227, i64 10, !dbg !50
  %317 = bitcast float %316 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %317, i1 true) #4, !dbg !50
  %318 = or disjoint i32 %68, 6, !dbg !50
  %319 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %318, !dbg !50
  %320 = extractelement <16 x float> %227, i64 9, !dbg !50
  %321 = bitcast float %320 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %321, i1 true) #4, !dbg !50
  %322 = or disjoint i32 %68, 7, !dbg !50
  %323 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %322, !dbg !50
  %324 = extractelement <16 x float> %227, i64 8, !dbg !50
  %325 = bitcast float %324 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %325, i1 true) #4, !dbg !50
  %326 = or disjoint i32 %68, 8, !dbg !50
  %327 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %326, !dbg !50
  %328 = extractelement <16 x float> %227, i64 7, !dbg !50
  %329 = bitcast float %328 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %329, i1 true) #4, !dbg !50
  %330 = or disjoint i32 %68, 9, !dbg !50
  %331 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %330, !dbg !50
  %332 = extractelement <16 x float> %227, i64 6, !dbg !50
  %333 = bitcast float %332 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %333, i1 true) #4, !dbg !50
  %334 = or disjoint i32 %68, 10, !dbg !50
  %335 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %334, !dbg !50
  %336 = extractelement <16 x float> %227, i64 5, !dbg !50
  %337 = bitcast float %336 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %337, i1 true) #4, !dbg !50
  %338 = or disjoint i32 %68, 11, !dbg !50
  %339 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %338, !dbg !50
  %340 = extractelement <16 x float> %227, i64 4, !dbg !50
  %341 = bitcast float %340 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %341, i1 true) #4, !dbg !50
  %342 = or disjoint i32 %68, 12, !dbg !50
  %343 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %342, !dbg !50
  %344 = extractelement <16 x float> %227, i64 3, !dbg !50
  %345 = bitcast float %344 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %345, i1 true) #4, !dbg !50
  %346 = or disjoint i32 %68, 13, !dbg !50
  %347 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %346, !dbg !50
  %348 = extractelement <16 x float> %227, i64 2, !dbg !50
  %349 = bitcast float %348 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %349, i1 true) #4, !dbg !50
  %350 = or disjoint i32 %68, 14, !dbg !50
  %351 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %350, !dbg !50
  %352 = extractelement <16 x float> %227, i64 1, !dbg !50
  %353 = bitcast float %352 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %353, i1 true) #4, !dbg !50
  %354 = or disjoint i32 %68, 15, !dbg !50
  %355 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %354, !dbg !50
  %356 = extractelement <16 x float> %227, i64 0, !dbg !50
  %357 = bitcast float %356 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %357, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %358 = lshr i32 %17, 4, !dbg !50
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !50
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %17, !dbg !50
  %361 = load i32, ptr addrspace(3) %360, align 4, !dbg !50
  %362 = lshr i32 %159, 4, !dbg !50
  %363 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %362, !dbg !50
  %364 = getelementptr inbounds float, ptr addrspace(3) %363, i32 %159, !dbg !50
  %365 = load i32, ptr addrspace(3) %364, align 4, !dbg !50
  %366 = lshr i32 %158, 4, !dbg !50
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !50
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %158, !dbg !50
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !50
  %370 = lshr i32 %157, 4, !dbg !50
  %371 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %370, !dbg !50
  %372 = getelementptr inbounds float, ptr addrspace(3) %371, i32 %157, !dbg !50
  %373 = load i32, ptr addrspace(3) %372, align 4, !dbg !50
  %374 = lshr i32 %156, 4, !dbg !50
  %375 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %374, !dbg !50
  %376 = getelementptr inbounds float, ptr addrspace(3) %375, i32 %156, !dbg !50
  %377 = load i32, ptr addrspace(3) %376, align 4, !dbg !50
  %378 = lshr i32 %155, 4, !dbg !50
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %378, !dbg !50
  %380 = getelementptr inbounds float, ptr addrspace(3) %379, i32 %155, !dbg !50
  %381 = load i32, ptr addrspace(3) %380, align 4, !dbg !50
  %382 = lshr i32 %154, 4, !dbg !50
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %382, !dbg !50
  %384 = getelementptr inbounds float, ptr addrspace(3) %383, i32 %154, !dbg !50
  %385 = load i32, ptr addrspace(3) %384, align 4, !dbg !50
  %386 = lshr i32 %153, 4, !dbg !50
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %386, !dbg !50
  %388 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %153, !dbg !50
  %389 = load i32, ptr addrspace(3) %388, align 4, !dbg !50
  %390 = lshr i32 %152, 4, !dbg !50
  %391 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %390, !dbg !50
  %392 = getelementptr inbounds float, ptr addrspace(3) %391, i32 %152, !dbg !50
  %393 = load i32, ptr addrspace(3) %392, align 4, !dbg !50
  %394 = lshr i32 %151, 4, !dbg !50
  %395 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %394, !dbg !50
  %396 = getelementptr inbounds float, ptr addrspace(3) %395, i32 %151, !dbg !50
  %397 = load i32, ptr addrspace(3) %396, align 4, !dbg !50
  %398 = lshr i32 %150, 4, !dbg !50
  %399 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %398, !dbg !50
  %400 = getelementptr inbounds float, ptr addrspace(3) %399, i32 %150, !dbg !50
  %401 = load i32, ptr addrspace(3) %400, align 4, !dbg !50
  %402 = lshr i32 %149, 4, !dbg !50
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %402, !dbg !50
  %404 = getelementptr inbounds float, ptr addrspace(3) %403, i32 %149, !dbg !50
  %405 = load i32, ptr addrspace(3) %404, align 4, !dbg !50
  %406 = lshr i32 %148, 4, !dbg !50
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %406, !dbg !50
  %408 = getelementptr inbounds float, ptr addrspace(3) %407, i32 %148, !dbg !50
  %409 = load i32, ptr addrspace(3) %408, align 4, !dbg !50
  %410 = lshr i32 %147, 4, !dbg !50
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %410, !dbg !50
  %412 = getelementptr inbounds float, ptr addrspace(3) %411, i32 %147, !dbg !50
  %413 = load i32, ptr addrspace(3) %412, align 4, !dbg !50
  %414 = lshr i32 %146, 4, !dbg !50
  %415 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %414, !dbg !50
  %416 = getelementptr inbounds float, ptr addrspace(3) %415, i32 %146, !dbg !50
  %417 = load i32, ptr addrspace(3) %416, align 4, !dbg !50
  %418 = lshr i32 %145, 4, !dbg !50
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %418, !dbg !50
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %145, !dbg !50
  %421 = load i32, ptr addrspace(3) %420, align 4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %262, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %264, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %266, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %373, ptr addrspace(1) %268, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %377, ptr addrspace(1) %270, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %381, ptr addrspace(1) %272, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %385, ptr addrspace(1) %274, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %389, ptr addrspace(1) %276, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %393, ptr addrspace(1) %278, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %397, ptr addrspace(1) %280, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %401, ptr addrspace(1) %282, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %405, ptr addrspace(1) %284, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %409, ptr addrspace(1) %286, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %413, ptr addrspace(1) %288, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %417, ptr addrspace(1) %290, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %421, ptr addrspace(1) %292, i1 %162) #4, !dbg !50
  %422 = getelementptr i1, ptr addrspace(1) %6, i64 %40, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %423 = extractelement <16 x i1> %228, i64 15, !dbg !52
  %424 = zext i1 %423 to i8, !dbg !52
  %425 = extractelement <16 x i1> %228, i64 14, !dbg !52
  %426 = zext i1 %425 to i8, !dbg !52
  %427 = extractelement <16 x i1> %228, i64 13, !dbg !52
  %428 = zext i1 %427 to i8, !dbg !52
  %429 = extractelement <16 x i1> %228, i64 12, !dbg !52
  %430 = zext i1 %429 to i8, !dbg !52
  %431 = extractelement <16 x i1> %228, i64 11, !dbg !52
  %432 = zext i1 %431 to i8, !dbg !52
  %433 = extractelement <16 x i1> %228, i64 10, !dbg !52
  %434 = zext i1 %433 to i8, !dbg !52
  %435 = extractelement <16 x i1> %228, i64 9, !dbg !52
  %436 = zext i1 %435 to i8, !dbg !52
  %437 = extractelement <16 x i1> %228, i64 8, !dbg !52
  %438 = zext i1 %437 to i8, !dbg !52
  %439 = extractelement <16 x i1> %228, i64 7, !dbg !52
  %440 = zext i1 %439 to i8, !dbg !52
  %441 = extractelement <16 x i1> %228, i64 6, !dbg !52
  %442 = zext i1 %441 to i8, !dbg !52
  %443 = extractelement <16 x i1> %228, i64 5, !dbg !52
  %444 = zext i1 %443 to i8, !dbg !52
  %445 = extractelement <16 x i1> %228, i64 4, !dbg !52
  %446 = zext i1 %445 to i8, !dbg !52
  %447 = extractelement <16 x i1> %228, i64 3, !dbg !52
  %448 = zext i1 %447 to i8, !dbg !52
  %449 = extractelement <16 x i1> %228, i64 2, !dbg !52
  %450 = zext i1 %449 to i8, !dbg !52
  %451 = extractelement <16 x i1> %228, i64 1, !dbg !52
  %452 = zext i1 %451 to i8, !dbg !52
  %453 = extractelement <16 x i1> %228, i64 0, !dbg !52
  %454 = zext i1 %453 to i8, !dbg !52
  %455 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %17, !dbg !52
  %456 = insertelement <1 x i8> poison, i8 %424, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %455, <1 x i8> %456, i1 true) #4, !dbg !52
  %457 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %77, !dbg !52
  %458 = insertelement <1 x i8> poison, i8 %426, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %457, <1 x i8> %458, i1 true) #4, !dbg !52
  %459 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %80, !dbg !52
  %460 = insertelement <1 x i8> poison, i8 %428, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %459, <1 x i8> %460, i1 true) #4, !dbg !52
  %461 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %83, !dbg !52
  %462 = insertelement <1 x i8> poison, i8 %430, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %461, <1 x i8> %462, i1 true) #4, !dbg !52
  %463 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %86, !dbg !52
  %464 = insertelement <1 x i8> poison, i8 %432, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %463, <1 x i8> %464, i1 true) #4, !dbg !52
  %465 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %89, !dbg !52
  %466 = insertelement <1 x i8> poison, i8 %434, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %465, <1 x i8> %466, i1 true) #4, !dbg !52
  %467 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %92, !dbg !52
  %468 = insertelement <1 x i8> poison, i8 %436, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %467, <1 x i8> %468, i1 true) #4, !dbg !52
  %469 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %95, !dbg !52
  %470 = insertelement <1 x i8> poison, i8 %438, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %469, <1 x i8> %470, i1 true) #4, !dbg !52
  %471 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %98, !dbg !52
  %472 = insertelement <1 x i8> poison, i8 %440, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %471, <1 x i8> %472, i1 true) #4, !dbg !52
  %473 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %101, !dbg !52
  %474 = insertelement <1 x i8> poison, i8 %442, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %473, <1 x i8> %474, i1 true) #4, !dbg !52
  %475 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %104, !dbg !52
  %476 = insertelement <1 x i8> poison, i8 %444, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %475, <1 x i8> %476, i1 true) #4, !dbg !52
  %477 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %107, !dbg !52
  %478 = insertelement <1 x i8> poison, i8 %446, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %477, <1 x i8> %478, i1 true) #4, !dbg !52
  %479 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %110, !dbg !52
  %480 = insertelement <1 x i8> poison, i8 %448, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %479, <1 x i8> %480, i1 true) #4, !dbg !52
  %481 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %113, !dbg !52
  %482 = insertelement <1 x i8> poison, i8 %450, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %481, <1 x i8> %482, i1 true) #4, !dbg !52
  %483 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %116, !dbg !52
  %484 = insertelement <1 x i8> poison, i8 %452, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %483, <1 x i8> %484, i1 true) #4, !dbg !52
  %485 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %119, !dbg !52
  %486 = insertelement <1 x i8> poison, i8 %454, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %485, <1 x i8> %486, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %487 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %70, !dbg !52
  %488 = load <4 x i32>, ptr addrspace(3) %487, align 16, !dbg !52
  %489 = bitcast <4 x i32> %488 to <128 x i1>, !dbg !52
  %490 = extractelement <128 x i1> %489, i64 24, !dbg !52
  %491 = extractelement <128 x i1> %489, i64 56, !dbg !52
  %492 = extractelement <128 x i1> %489, i64 88, !dbg !52
  %493 = extractelement <128 x i1> %489, i64 120, !dbg !52
  %494 = bitcast <4 x i32> %488 to <16 x i8>, !dbg !52
  %495 = extractelement <16 x i8> %494, i64 0, !dbg !52
  %496 = and i8 %495, 1, !dbg !52
  %497 = shufflevector <16 x i8> %494, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !52
  %498 = and <2 x i8> %497, splat (i8 1), !dbg !52
  %499 = zext i1 %490 to i8, !dbg !52
  %500 = extractelement <16 x i8> %494, i64 4, !dbg !52
  %501 = and i8 %500, 1, !dbg !52
  %502 = shufflevector <16 x i8> %494, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !52
  %503 = and <2 x i8> %502, splat (i8 1), !dbg !52
  %504 = zext i1 %491 to i8, !dbg !52
  %505 = extractelement <16 x i8> %494, i64 8, !dbg !52
  %506 = and i8 %505, 1, !dbg !52
  %507 = shufflevector <16 x i8> %494, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !52
  %508 = and <2 x i8> %507, splat (i8 1), !dbg !52
  %509 = zext i1 %492 to i8, !dbg !52
  %510 = extractelement <16 x i8> %494, i64 12, !dbg !52
  %511 = and i8 %510, 1, !dbg !52
  %512 = shufflevector <16 x i8> %494, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !52
  %513 = and <2 x i8> %512, splat (i8 1), !dbg !52
  %514 = zext i1 %493 to i8, !dbg !52
  %515 = insertelement <4 x i8> poison, i8 %496, i64 0, !dbg !52
  %516 = shufflevector <2 x i8> %498, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %517 = shufflevector <4 x i8> %515, <4 x i8> %516, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %518 = insertelement <4 x i8> %517, i8 %499, i64 3, !dbg !52
  %519 = bitcast <4 x i8> %518 to i32, !dbg !52
  %520 = insertelement <4 x i8> poison, i8 %501, i64 0, !dbg !52
  %521 = shufflevector <2 x i8> %503, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %522 = shufflevector <4 x i8> %520, <4 x i8> %521, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %523 = insertelement <4 x i8> %522, i8 %504, i64 3, !dbg !52
  %524 = bitcast <4 x i8> %523 to i32, !dbg !52
  %525 = insertelement <4 x i8> poison, i8 %506, i64 0, !dbg !52
  %526 = shufflevector <2 x i8> %508, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %527 = shufflevector <4 x i8> %525, <4 x i8> %526, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %528 = insertelement <4 x i8> %527, i8 %509, i64 3, !dbg !52
  %529 = bitcast <4 x i8> %528 to i32, !dbg !52
  %530 = insertelement <4 x i8> poison, i8 %511, i64 0, !dbg !52
  %531 = shufflevector <2 x i8> %513, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %532 = shufflevector <4 x i8> %530, <4 x i8> %531, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %533 = insertelement <4 x i8> %532, i8 %514, i64 3, !dbg !52
  %534 = bitcast <4 x i8> %533 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %519, i32 %524, i32 %529, i32 %534, ptr addrspace(1) %422, i1 %26) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chcdghsgb5ihc7xjbayukmqrcj4k6aj6arnotjybfqs3sw3biny4.py", directory: "inductor_cache/hc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 51, column: 21, scope: !7)
!47 = !DILocation(line: 52, column: 33, scope: !7)
!48 = !DILocation(line: 52, column: 30, scope: !7)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 53, column: 25, scope: !7)
!52 = !DILocation(line: 53, column: 56, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
