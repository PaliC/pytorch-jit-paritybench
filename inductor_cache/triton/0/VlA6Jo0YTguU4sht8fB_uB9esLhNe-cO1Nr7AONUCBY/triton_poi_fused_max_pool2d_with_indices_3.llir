; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 4, !dbg !13
  %18 = or disjoint i32 %13, 5, !dbg !13
  %19 = or disjoint i32 %13, 6, !dbg !13
  %20 = or disjoint i32 %13, 7, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %23 = sdiv i32 %.frozen, 12, !dbg !14
  %24 = mul i32 %23, 12, !dbg !15
  %.decomposed = sub i32 %.frozen, %24, !dbg !15
  %25 = srem i32 %14, 12, !dbg !15
  %26 = srem i32 %15, 12, !dbg !15
  %27 = srem i32 %16, 12, !dbg !15
  %.frozen28 = freeze i32 %17, !dbg !14
  %28 = sdiv i32 %.frozen28, 12, !dbg !14
  %29 = mul i32 %28, 12, !dbg !15
  %.decomposed29 = sub i32 %.frozen28, %29, !dbg !15
  %30 = srem i32 %18, 12, !dbg !15
  %31 = srem i32 %19, 12, !dbg !15
  %32 = srem i32 %20, 12, !dbg !15
  %33 = srem i32 %23, 12, !dbg !16
  %34 = srem i32 %28, 12, !dbg !16
  %35 = sdiv i32 %13, 144, !dbg !17
  %36 = shl nsw i32 %.decomposed, 1, !dbg !18
  %37 = shl nsw i32 %25, 1, !dbg !18
  %38 = shl nsw i32 %26, 1, !dbg !18
  %39 = shl nsw i32 %27, 1, !dbg !18
  %40 = shl nsw i32 %.decomposed29, 1, !dbg !18
  %41 = shl nsw i32 %30, 1, !dbg !18
  %42 = shl nsw i32 %31, 1, !dbg !18
  %43 = shl nsw i32 %32, 1, !dbg !18
  %44 = mul nsw i32 %33, 50, !dbg !19
  %45 = mul nsw i32 %34, 50, !dbg !19
  %46 = mul i32 %35, 625, !dbg !20
  %47 = add i32 %44, %46, !dbg !21
  %48 = add i32 %47, %36, !dbg !22
  %49 = add i32 %47, %37, !dbg !22
  %50 = add i32 %47, %38, !dbg !22
  %51 = add i32 %47, %39, !dbg !22
  %52 = add i32 %46, %45, !dbg !21
  %53 = add i32 %52, %40, !dbg !22
  %54 = add i32 %52, %41, !dbg !22
  %55 = add i32 %52, %42, !dbg !22
  %56 = add i32 %52, %43, !dbg !22
  %57 = sext i32 %48 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %49 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %50 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %51 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %53 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = sext i32 %54 to i64, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !23
  %69 = sext i32 %55 to i64, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !23
  %71 = sext i32 %56 to i64, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !24
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #2, !dbg !24
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !24
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #2, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #2, !dbg !24
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !24
  %81 = add i32 %47, 1, !dbg !25
  %82 = add i32 %81, %36, !dbg !26
  %83 = add i32 %81, %37, !dbg !26
  %84 = add i32 %81, %38, !dbg !26
  %85 = add i32 %81, %39, !dbg !26
  %86 = add i32 %52, 1, !dbg !25
  %87 = add i32 %86, %40, !dbg !26
  %88 = add i32 %86, %41, !dbg !26
  %89 = add i32 %86, %42, !dbg !26
  %90 = add i32 %86, %43, !dbg !26
  %91 = sext i32 %82 to i64, !dbg !27
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !27
  %93 = sext i32 %83 to i64, !dbg !27
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !27
  %95 = sext i32 %84 to i64, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !27
  %97 = sext i32 %85 to i64, !dbg !27
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !27
  %99 = sext i32 %87 to i64, !dbg !27
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !27
  %101 = sext i32 %88 to i64, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !27
  %103 = sext i32 %89 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !27
  %105 = sext i32 %90 to i64, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !27
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #2, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #2, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #2, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #2, !dbg !28
  %115 = add i32 %47, 2, !dbg !29
  %116 = add i32 %115, %36, !dbg !30
  %117 = add i32 %115, %37, !dbg !30
  %118 = add i32 %115, %38, !dbg !30
  %119 = add i32 %115, %39, !dbg !30
  %120 = add i32 %52, 2, !dbg !29
  %121 = add i32 %120, %40, !dbg !30
  %122 = add i32 %120, %41, !dbg !30
  %123 = add i32 %120, %42, !dbg !30
  %124 = add i32 %120, %43, !dbg !30
  %125 = sext i32 %116 to i64, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !31
  %127 = sext i32 %117 to i64, !dbg !31
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !31
  %129 = sext i32 %118 to i64, !dbg !31
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !31
  %131 = sext i32 %119 to i64, !dbg !31
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !31
  %133 = sext i32 %121 to i64, !dbg !31
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !31
  %135 = sext i32 %122 to i64, !dbg !31
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !31
  %137 = sext i32 %123 to i64, !dbg !31
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !31
  %139 = sext i32 %124 to i64, !dbg !31
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !31
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #2, !dbg !32
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #2, !dbg !32
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !32
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #2, !dbg !32
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #2, !dbg !32
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #2, !dbg !32
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #2, !dbg !32
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #2, !dbg !32
  %149 = add i32 %47, 25, !dbg !33
  %150 = add i32 %149, %36, !dbg !34
  %151 = add i32 %149, %37, !dbg !34
  %152 = add i32 %149, %38, !dbg !34
  %153 = add i32 %149, %39, !dbg !34
  %154 = add i32 %52, 25, !dbg !33
  %155 = add i32 %154, %40, !dbg !34
  %156 = add i32 %154, %41, !dbg !34
  %157 = add i32 %154, %42, !dbg !34
  %158 = add i32 %154, %43, !dbg !34
  %159 = sext i32 %150 to i64, !dbg !35
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !35
  %161 = sext i32 %151 to i64, !dbg !35
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !35
  %163 = sext i32 %152 to i64, !dbg !35
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !35
  %165 = sext i32 %153 to i64, !dbg !35
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !35
  %167 = sext i32 %155 to i64, !dbg !35
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !35
  %169 = sext i32 %156 to i64, !dbg !35
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !35
  %171 = sext i32 %157 to i64, !dbg !35
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !35
  %173 = sext i32 %158 to i64, !dbg !35
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !35
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #2, !dbg !36
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #2, !dbg !36
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #2, !dbg !36
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #2, !dbg !36
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #2, !dbg !36
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #2, !dbg !36
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #2, !dbg !36
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #2, !dbg !36
  %183 = add i32 %47, 26, !dbg !37
  %184 = add i32 %183, %36, !dbg !38
  %185 = add i32 %183, %37, !dbg !38
  %186 = add i32 %183, %38, !dbg !38
  %187 = add i32 %183, %39, !dbg !38
  %188 = add i32 %52, 26, !dbg !37
  %189 = add i32 %188, %40, !dbg !38
  %190 = add i32 %188, %41, !dbg !38
  %191 = add i32 %188, %42, !dbg !38
  %192 = add i32 %188, %43, !dbg !38
  %193 = sext i32 %184 to i64, !dbg !39
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !39
  %195 = sext i32 %185 to i64, !dbg !39
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !39
  %197 = sext i32 %186 to i64, !dbg !39
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !39
  %199 = sext i32 %187 to i64, !dbg !39
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !39
  %201 = sext i32 %189 to i64, !dbg !39
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !39
  %203 = sext i32 %190 to i64, !dbg !39
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !39
  %205 = sext i32 %191 to i64, !dbg !39
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !39
  %207 = sext i32 %192 to i64, !dbg !39
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !39
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #2, !dbg !40
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #2, !dbg !40
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #2, !dbg !40
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #2, !dbg !40
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #2, !dbg !40
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #2, !dbg !40
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #2, !dbg !40
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #2, !dbg !40
  %217 = add i32 %47, 27, !dbg !41
  %218 = add i32 %217, %36, !dbg !42
  %219 = add i32 %217, %37, !dbg !42
  %220 = add i32 %217, %38, !dbg !42
  %221 = add i32 %217, %39, !dbg !42
  %222 = add i32 %52, 27, !dbg !41
  %223 = add i32 %222, %40, !dbg !42
  %224 = add i32 %222, %41, !dbg !42
  %225 = add i32 %222, %42, !dbg !42
  %226 = add i32 %222, %43, !dbg !42
  %227 = sext i32 %218 to i64, !dbg !43
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !43
  %229 = sext i32 %219 to i64, !dbg !43
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !43
  %231 = sext i32 %220 to i64, !dbg !43
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !43
  %233 = sext i32 %221 to i64, !dbg !43
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !43
  %235 = sext i32 %223 to i64, !dbg !43
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !43
  %237 = sext i32 %224 to i64, !dbg !43
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !43
  %239 = sext i32 %225 to i64, !dbg !43
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !43
  %241 = sext i32 %226 to i64, !dbg !43
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !43
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #2, !dbg !44
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #2, !dbg !44
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #2, !dbg !44
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #2, !dbg !44
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #2, !dbg !44
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #2, !dbg !44
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #2, !dbg !44
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #2, !dbg !44
  %251 = add i32 %47, 50, !dbg !45
  %252 = add i32 %251, %36, !dbg !46
  %253 = add i32 %251, %37, !dbg !46
  %254 = add i32 %251, %38, !dbg !46
  %255 = add i32 %251, %39, !dbg !46
  %256 = add i32 %52, 50, !dbg !45
  %257 = add i32 %256, %40, !dbg !46
  %258 = add i32 %256, %41, !dbg !46
  %259 = add i32 %256, %42, !dbg !46
  %260 = add i32 %256, %43, !dbg !46
  %261 = sext i32 %252 to i64, !dbg !47
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !47
  %263 = sext i32 %253 to i64, !dbg !47
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !47
  %265 = sext i32 %254 to i64, !dbg !47
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !47
  %267 = sext i32 %255 to i64, !dbg !47
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !47
  %269 = sext i32 %257 to i64, !dbg !47
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !47
  %271 = sext i32 %258 to i64, !dbg !47
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !47
  %273 = sext i32 %259 to i64, !dbg !47
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !47
  %275 = sext i32 %260 to i64, !dbg !47
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !47
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #2, !dbg !48
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #2, !dbg !48
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #2, !dbg !48
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #2, !dbg !48
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #2, !dbg !48
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #2, !dbg !48
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #2, !dbg !48
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #2, !dbg !48
  %285 = add i32 %47, 51, !dbg !49
  %286 = add i32 %285, %36, !dbg !50
  %287 = add i32 %285, %37, !dbg !50
  %288 = add i32 %285, %38, !dbg !50
  %289 = add i32 %285, %39, !dbg !50
  %290 = add i32 %52, 51, !dbg !49
  %291 = add i32 %290, %40, !dbg !50
  %292 = add i32 %290, %41, !dbg !50
  %293 = add i32 %290, %42, !dbg !50
  %294 = add i32 %290, %43, !dbg !50
  %295 = sext i32 %286 to i64, !dbg !51
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %295, !dbg !51
  %297 = sext i32 %287 to i64, !dbg !51
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !51
  %299 = sext i32 %288 to i64, !dbg !51
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !51
  %301 = sext i32 %289 to i64, !dbg !51
  %302 = getelementptr float, ptr addrspace(1) %0, i64 %301, !dbg !51
  %303 = sext i32 %291 to i64, !dbg !51
  %304 = getelementptr float, ptr addrspace(1) %0, i64 %303, !dbg !51
  %305 = sext i32 %292 to i64, !dbg !51
  %306 = getelementptr float, ptr addrspace(1) %0, i64 %305, !dbg !51
  %307 = sext i32 %293 to i64, !dbg !51
  %308 = getelementptr float, ptr addrspace(1) %0, i64 %307, !dbg !51
  %309 = sext i32 %294 to i64, !dbg !51
  %310 = getelementptr float, ptr addrspace(1) %0, i64 %309, !dbg !51
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 true) #2, !dbg !52
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #2, !dbg !52
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #2, !dbg !52
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #2, !dbg !52
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #2, !dbg !52
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 true) #2, !dbg !52
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %308, i1 true) #2, !dbg !52
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 true) #2, !dbg !52
  %319 = add i32 %47, 52, !dbg !53
  %320 = add i32 %319, %36, !dbg !54
  %321 = add i32 %319, %37, !dbg !54
  %322 = add i32 %319, %38, !dbg !54
  %323 = add i32 %319, %39, !dbg !54
  %324 = add i32 %52, 52, !dbg !53
  %325 = add i32 %324, %40, !dbg !54
  %326 = add i32 %324, %41, !dbg !54
  %327 = add i32 %324, %42, !dbg !54
  %328 = add i32 %324, %43, !dbg !54
  %329 = sext i32 %320 to i64, !dbg !55
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !55
  %331 = sext i32 %321 to i64, !dbg !55
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !55
  %333 = sext i32 %322 to i64, !dbg !55
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !55
  %335 = sext i32 %323 to i64, !dbg !55
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !55
  %337 = sext i32 %325 to i64, !dbg !55
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !55
  %339 = sext i32 %326 to i64, !dbg !55
  %340 = getelementptr float, ptr addrspace(1) %0, i64 %339, !dbg !55
  %341 = sext i32 %327 to i64, !dbg !55
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %341, !dbg !55
  %343 = sext i32 %328 to i64, !dbg !55
  %344 = getelementptr float, ptr addrspace(1) %0, i64 %343, !dbg !55
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 true) #2, !dbg !56
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 true) #2, !dbg !56
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 true) #2, !dbg !56
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 true) #2, !dbg !56
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 true) #2, !dbg !56
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 true) #2, !dbg !56
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 true) #2, !dbg !56
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 true) #2, !dbg !56
  %353 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !24
  %354 = insertelement <4 x i32> %353, i32 %74, i64 1, !dbg !24
  %355 = insertelement <4 x i32> %354, i32 %75, i64 2, !dbg !24
  %356 = insertelement <4 x i32> %355, i32 %76, i64 3, !dbg !24
  %357 = bitcast <4 x i32> %356 to <4 x float>, !dbg !24
  %358 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !28
  %359 = insertelement <4 x i32> %358, i32 %108, i64 1, !dbg !28
  %360 = insertelement <4 x i32> %359, i32 %109, i64 2, !dbg !28
  %361 = insertelement <4 x i32> %360, i32 %110, i64 3, !dbg !28
  %362 = bitcast <4 x i32> %361 to <4 x float>, !dbg !28
  %363 = insertelement <4 x i32> poison, i32 %141, i64 0, !dbg !32
  %364 = insertelement <4 x i32> %363, i32 %142, i64 1, !dbg !32
  %365 = insertelement <4 x i32> %364, i32 %143, i64 2, !dbg !32
  %366 = insertelement <4 x i32> %365, i32 %144, i64 3, !dbg !32
  %367 = bitcast <4 x i32> %366 to <4 x float>, !dbg !32
  %368 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !36
  %369 = insertelement <4 x i32> %368, i32 %176, i64 1, !dbg !36
  %370 = insertelement <4 x i32> %369, i32 %177, i64 2, !dbg !36
  %371 = insertelement <4 x i32> %370, i32 %178, i64 3, !dbg !36
  %372 = bitcast <4 x i32> %371 to <4 x float>, !dbg !36
  %373 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !40
  %374 = insertelement <4 x i32> %373, i32 %210, i64 1, !dbg !40
  %375 = insertelement <4 x i32> %374, i32 %211, i64 2, !dbg !40
  %376 = insertelement <4 x i32> %375, i32 %212, i64 3, !dbg !40
  %377 = bitcast <4 x i32> %376 to <4 x float>, !dbg !40
  %378 = insertelement <4 x i32> poison, i32 %243, i64 0, !dbg !44
  %379 = insertelement <4 x i32> %378, i32 %244, i64 1, !dbg !44
  %380 = insertelement <4 x i32> %379, i32 %245, i64 2, !dbg !44
  %381 = insertelement <4 x i32> %380, i32 %246, i64 3, !dbg !44
  %382 = bitcast <4 x i32> %381 to <4 x float>, !dbg !44
  %383 = insertelement <4 x i32> poison, i32 %277, i64 0, !dbg !48
  %384 = insertelement <4 x i32> %383, i32 %278, i64 1, !dbg !48
  %385 = insertelement <4 x i32> %384, i32 %279, i64 2, !dbg !48
  %386 = insertelement <4 x i32> %385, i32 %280, i64 3, !dbg !48
  %387 = bitcast <4 x i32> %386 to <4 x float>, !dbg !48
  %388 = insertelement <4 x i32> poison, i32 %311, i64 0, !dbg !52
  %389 = insertelement <4 x i32> %388, i32 %312, i64 1, !dbg !52
  %390 = insertelement <4 x i32> %389, i32 %313, i64 2, !dbg !52
  %391 = insertelement <4 x i32> %390, i32 %314, i64 3, !dbg !52
  %392 = bitcast <4 x i32> %391 to <4 x float>, !dbg !52
  %393 = insertelement <4 x i32> poison, i32 %345, i64 0, !dbg !56
  %394 = insertelement <4 x i32> %393, i32 %346, i64 1, !dbg !56
  %395 = insertelement <4 x i32> %394, i32 %347, i64 2, !dbg !56
  %396 = insertelement <4 x i32> %395, i32 %348, i64 3, !dbg !56
  %397 = bitcast <4 x i32> %396 to <4 x float>, !dbg !56
  %398 = fcmp ogt <4 x float> %362, %357, !dbg !57
  %399 = fcmp uno <4 x float> %362, zeroinitializer, !dbg !61
  %400 = or <4 x i1> %398, %399, !dbg !62
  %.v = select <4 x i1> %400, <4 x i32> %361, <4 x i32> %356, !dbg !63
  %401 = bitcast <4 x i32> %.v to <4 x float>, !dbg !63
  %402 = fcmp olt <4 x float> %401, %367, !dbg !64
  %403 = fcmp uno <4 x float> %367, zeroinitializer, !dbg !66
  %404 = or <4 x i1> %402, %403, !dbg !67
  %.v15 = select <4 x i1> %404, <4 x i32> %366, <4 x i32> %.v, !dbg !68
  %405 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !68
  %406 = fcmp olt <4 x float> %405, %372, !dbg !69
  %407 = fcmp uno <4 x float> %372, zeroinitializer, !dbg !71
  %408 = or <4 x i1> %406, %407, !dbg !72
  %.v16 = select <4 x i1> %408, <4 x i32> %371, <4 x i32> %.v15, !dbg !73
  %409 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !73
  %410 = fcmp olt <4 x float> %409, %377, !dbg !74
  %411 = fcmp uno <4 x float> %377, zeroinitializer, !dbg !76
  %412 = or <4 x i1> %410, %411, !dbg !77
  %.v17 = select <4 x i1> %412, <4 x i32> %376, <4 x i32> %.v16, !dbg !78
  %413 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !78
  %414 = fcmp olt <4 x float> %413, %382, !dbg !79
  %415 = fcmp uno <4 x float> %382, zeroinitializer, !dbg !81
  %416 = or <4 x i1> %414, %415, !dbg !82
  %.v18 = select <4 x i1> %416, <4 x i32> %381, <4 x i32> %.v17, !dbg !83
  %417 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !83
  %418 = fcmp olt <4 x float> %417, %387, !dbg !84
  %419 = fcmp uno <4 x float> %387, zeroinitializer, !dbg !86
  %420 = or <4 x i1> %418, %419, !dbg !87
  %.v19 = select <4 x i1> %420, <4 x i32> %386, <4 x i32> %.v18, !dbg !88
  %421 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !88
  %422 = fcmp olt <4 x float> %421, %392, !dbg !89
  %423 = fcmp uno <4 x float> %392, zeroinitializer, !dbg !91
  %424 = or <4 x i1> %422, %423, !dbg !92
  %.v20 = select <4 x i1> %424, <4 x i32> %391, <4 x i32> %.v19, !dbg !93
  %425 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !93
  %426 = fcmp olt <4 x float> %425, %397, !dbg !94
  %427 = extractelement <4 x i1> %426, i64 0, !dbg !96
  %428 = extractelement <4 x i1> %426, i64 1, !dbg !96
  %429 = extractelement <4 x i1> %426, i64 2, !dbg !96
  %430 = extractelement <4 x i1> %426, i64 3, !dbg !96
  %431 = zext <4 x i1> %398 to <4 x i8>, !dbg !97
  %432 = select <4 x i1> %402, <4 x i8> splat (i8 2), <4 x i8> %431, !dbg !98
  %433 = select <4 x i1> %406, <4 x i8> splat (i8 3), <4 x i8> %432, !dbg !99
  %434 = select <4 x i1> %410, <4 x i8> splat (i8 4), <4 x i8> %433, !dbg !100
  %435 = select <4 x i1> %414, <4 x i8> splat (i8 5), <4 x i8> %434, !dbg !101
  %436 = select <4 x i1> %418, <4 x i8> splat (i8 6), <4 x i8> %435, !dbg !102
  %437 = select <4 x i1> %422, <4 x i8> splat (i8 7), <4 x i8> %436, !dbg !103
  %438 = select <4 x i1> %426, <4 x i8> splat (i8 8), <4 x i8> %437, !dbg !104
  %439 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !24
  %440 = insertelement <4 x i32> %439, i32 %78, i64 1, !dbg !24
  %441 = insertelement <4 x i32> %440, i32 %79, i64 2, !dbg !24
  %442 = insertelement <4 x i32> %441, i32 %80, i64 3, !dbg !24
  %443 = bitcast <4 x i32> %442 to <4 x float>, !dbg !24
  %444 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !28
  %445 = insertelement <4 x i32> %444, i32 %112, i64 1, !dbg !28
  %446 = insertelement <4 x i32> %445, i32 %113, i64 2, !dbg !28
  %447 = insertelement <4 x i32> %446, i32 %114, i64 3, !dbg !28
  %448 = bitcast <4 x i32> %447 to <4 x float>, !dbg !28
  %449 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !32
  %450 = insertelement <4 x i32> %449, i32 %146, i64 1, !dbg !32
  %451 = insertelement <4 x i32> %450, i32 %147, i64 2, !dbg !32
  %452 = insertelement <4 x i32> %451, i32 %148, i64 3, !dbg !32
  %453 = bitcast <4 x i32> %452 to <4 x float>, !dbg !32
  %454 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !36
  %455 = insertelement <4 x i32> %454, i32 %180, i64 1, !dbg !36
  %456 = insertelement <4 x i32> %455, i32 %181, i64 2, !dbg !36
  %457 = insertelement <4 x i32> %456, i32 %182, i64 3, !dbg !36
  %458 = bitcast <4 x i32> %457 to <4 x float>, !dbg !36
  %459 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !40
  %460 = insertelement <4 x i32> %459, i32 %214, i64 1, !dbg !40
  %461 = insertelement <4 x i32> %460, i32 %215, i64 2, !dbg !40
  %462 = insertelement <4 x i32> %461, i32 %216, i64 3, !dbg !40
  %463 = bitcast <4 x i32> %462 to <4 x float>, !dbg !40
  %464 = insertelement <4 x i32> poison, i32 %247, i64 0, !dbg !44
  %465 = insertelement <4 x i32> %464, i32 %248, i64 1, !dbg !44
  %466 = insertelement <4 x i32> %465, i32 %249, i64 2, !dbg !44
  %467 = insertelement <4 x i32> %466, i32 %250, i64 3, !dbg !44
  %468 = bitcast <4 x i32> %467 to <4 x float>, !dbg !44
  %469 = insertelement <4 x i32> poison, i32 %281, i64 0, !dbg !48
  %470 = insertelement <4 x i32> %469, i32 %282, i64 1, !dbg !48
  %471 = insertelement <4 x i32> %470, i32 %283, i64 2, !dbg !48
  %472 = insertelement <4 x i32> %471, i32 %284, i64 3, !dbg !48
  %473 = bitcast <4 x i32> %472 to <4 x float>, !dbg !48
  %474 = insertelement <4 x i32> poison, i32 %315, i64 0, !dbg !52
  %475 = insertelement <4 x i32> %474, i32 %316, i64 1, !dbg !52
  %476 = insertelement <4 x i32> %475, i32 %317, i64 2, !dbg !52
  %477 = insertelement <4 x i32> %476, i32 %318, i64 3, !dbg !52
  %478 = bitcast <4 x i32> %477 to <4 x float>, !dbg !52
  %479 = insertelement <4 x i32> poison, i32 %349, i64 0, !dbg !56
  %480 = insertelement <4 x i32> %479, i32 %350, i64 1, !dbg !56
  %481 = insertelement <4 x i32> %480, i32 %351, i64 2, !dbg !56
  %482 = insertelement <4 x i32> %481, i32 %352, i64 3, !dbg !56
  %483 = bitcast <4 x i32> %482 to <4 x float>, !dbg !56
  %484 = fcmp ogt <4 x float> %448, %443, !dbg !57
  %485 = fcmp uno <4 x float> %448, zeroinitializer, !dbg !61
  %486 = or <4 x i1> %484, %485, !dbg !62
  %.v21 = select <4 x i1> %486, <4 x i32> %447, <4 x i32> %442, !dbg !63
  %487 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !63
  %488 = fcmp olt <4 x float> %487, %453, !dbg !64
  %489 = fcmp uno <4 x float> %453, zeroinitializer, !dbg !66
  %490 = or <4 x i1> %488, %489, !dbg !67
  %.v22 = select <4 x i1> %490, <4 x i32> %452, <4 x i32> %.v21, !dbg !68
  %491 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !68
  %492 = fcmp olt <4 x float> %491, %458, !dbg !69
  %493 = fcmp uno <4 x float> %458, zeroinitializer, !dbg !71
  %494 = or <4 x i1> %492, %493, !dbg !72
  %.v23 = select <4 x i1> %494, <4 x i32> %457, <4 x i32> %.v22, !dbg !73
  %495 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !73
  %496 = fcmp olt <4 x float> %495, %463, !dbg !74
  %497 = fcmp uno <4 x float> %463, zeroinitializer, !dbg !76
  %498 = or <4 x i1> %496, %497, !dbg !77
  %.v24 = select <4 x i1> %498, <4 x i32> %462, <4 x i32> %.v23, !dbg !78
  %499 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !78
  %500 = fcmp olt <4 x float> %499, %468, !dbg !79
  %501 = fcmp uno <4 x float> %468, zeroinitializer, !dbg !81
  %502 = or <4 x i1> %500, %501, !dbg !82
  %.v25 = select <4 x i1> %502, <4 x i32> %467, <4 x i32> %.v24, !dbg !83
  %503 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !83
  %504 = fcmp olt <4 x float> %503, %473, !dbg !84
  %505 = fcmp uno <4 x float> %473, zeroinitializer, !dbg !86
  %506 = or <4 x i1> %504, %505, !dbg !87
  %.v26 = select <4 x i1> %506, <4 x i32> %472, <4 x i32> %.v25, !dbg !88
  %507 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !88
  %508 = fcmp olt <4 x float> %507, %478, !dbg !89
  %509 = fcmp uno <4 x float> %478, zeroinitializer, !dbg !91
  %510 = or <4 x i1> %508, %509, !dbg !92
  %.v27 = select <4 x i1> %510, <4 x i32> %477, <4 x i32> %.v26, !dbg !93
  %511 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !93
  %512 = fcmp olt <4 x float> %511, %483, !dbg !94
  %513 = shufflevector <4 x float> %483, <4 x float> %397, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !105
  %514 = fcmp uno <8 x float> %513, zeroinitializer, !dbg !105
  %515 = extractelement <8 x i1> %514, i64 7, !dbg !96
  %516 = or i1 %427, %515, !dbg !96
  %517 = extractelement <8 x i1> %514, i64 6, !dbg !96
  %518 = or i1 %428, %517, !dbg !96
  %519 = extractelement <8 x i1> %514, i64 5, !dbg !96
  %520 = or i1 %429, %519, !dbg !96
  %521 = extractelement <8 x i1> %514, i64 4, !dbg !96
  %522 = or i1 %430, %521, !dbg !96
  %523 = extractelement <4 x i1> %512, i64 0, !dbg !96
  %524 = extractelement <8 x i1> %514, i64 3, !dbg !96
  %525 = or i1 %523, %524, !dbg !96
  %526 = extractelement <4 x i1> %512, i64 1, !dbg !96
  %527 = extractelement <8 x i1> %514, i64 2, !dbg !96
  %528 = or i1 %526, %527, !dbg !96
  %529 = extractelement <4 x i1> %512, i64 2, !dbg !96
  %530 = extractelement <8 x i1> %514, i64 1, !dbg !96
  %531 = or i1 %529, %530, !dbg !96
  %532 = extractelement <4 x i1> %512, i64 3, !dbg !96
  %533 = extractelement <8 x i1> %514, i64 0, !dbg !96
  %534 = or i1 %532, %533, !dbg !96
  %535 = zext <4 x i1> %484 to <4 x i8>, !dbg !97
  %536 = select <4 x i1> %488, <4 x i8> splat (i8 2), <4 x i8> %535, !dbg !98
  %537 = select <4 x i1> %492, <4 x i8> splat (i8 3), <4 x i8> %536, !dbg !99
  %538 = select <4 x i1> %496, <4 x i8> splat (i8 4), <4 x i8> %537, !dbg !100
  %539 = select <4 x i1> %500, <4 x i8> splat (i8 5), <4 x i8> %538, !dbg !101
  %540 = select <4 x i1> %504, <4 x i8> splat (i8 6), <4 x i8> %539, !dbg !102
  %541 = select <4 x i1> %508, <4 x i8> splat (i8 7), <4 x i8> %540, !dbg !103
  %542 = select <4 x i1> %512, <4 x i8> splat (i8 8), <4 x i8> %541, !dbg !104
  %543 = sext i32 %21 to i64, !dbg !106
  %544 = getelementptr float, ptr addrspace(1) %1, i64 %543, !dbg !106
  %545 = sext i32 %22 to i64, !dbg !106
  %546 = getelementptr float, ptr addrspace(1) %1, i64 %545, !dbg !106
  %547 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !107
  %548 = extractelement <4 x i32> %.v20, i64 0, !dbg !107
  %549 = select i1 %516, i32 %345, i32 %548, !dbg !108
  %550 = extractelement <4 x i32> %.v20, i64 1, !dbg !107
  %551 = select i1 %518, i32 %346, i32 %550, !dbg !108
  %552 = extractelement <4 x i32> %.v20, i64 2, !dbg !107
  %553 = select i1 %520, i32 %347, i32 %552, !dbg !108
  %554 = extractelement <4 x i32> %.v20, i64 3, !dbg !107
  %555 = select i1 %522, i32 %348, i32 %554, !dbg !108
  %556 = extractelement <4 x i32> %.v27, i64 0, !dbg !107
  %557 = select i1 %525, i32 %349, i32 %556, !dbg !108
  %558 = extractelement <4 x i32> %.v27, i64 1, !dbg !107
  %559 = select i1 %528, i32 %350, i32 %558, !dbg !108
  %560 = extractelement <4 x i32> %.v27, i64 2, !dbg !107
  %561 = select i1 %531, i32 %351, i32 %560, !dbg !108
  %562 = extractelement <4 x i32> %.v27, i64 3, !dbg !107
  %563 = select i1 %534, i32 %352, i32 %562, !dbg !108
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %547, i32 %549, i32 %551, i32 %553, i32 %555, i1 true) #2, !dbg !107
  %564 = getelementptr inbounds i8, ptr addrspace(3) %547, i32 16, !dbg !107
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %564, i32 %557, i32 %559, i32 %561, i32 %563, i1 true) #2, !dbg !107
  tail call void @llvm.nvvm.barrier0(), !dbg !107
  %565 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !107
  %566 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !107
  %567 = load <4 x i32>, ptr addrspace(3) %566, align 16, !dbg !107
  %.extract = load i32, ptr addrspace(3) %565, align 16, !dbg !107
  %568 = getelementptr inbounds i8, ptr addrspace(3) %565, i32 4, !dbg !107
  %.extract8 = load i32, ptr addrspace(3) %568, align 4, !dbg !107
  %569 = getelementptr inbounds i8, ptr addrspace(3) %565, i32 8, !dbg !107
  %.extract9 = load i32, ptr addrspace(3) %569, align 8, !dbg !107
  %570 = getelementptr inbounds i8, ptr addrspace(3) %565, i32 12, !dbg !107
  %.extract10 = load i32, ptr addrspace(3) %570, align 4, !dbg !107
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %544, i1 true) #2, !dbg !107
  %.extract11 = extractelement <4 x i32> %567, i64 0, !dbg !107
  %.extract12 = extractelement <4 x i32> %567, i64 1, !dbg !107
  %.extract13 = extractelement <4 x i32> %567, i64 2, !dbg !107
  %.extract14 = extractelement <4 x i32> %567, i64 3, !dbg !107
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %546, i1 true) #2, !dbg !107
  %571 = sext i32 %13 to i64, !dbg !109
  %572 = getelementptr i8, ptr addrspace(1) %2, i64 %571, !dbg !109
  %573 = bitcast <4 x i8> %438 to i32, !dbg !110
  %574 = bitcast <4 x i8> %542 to i32, !dbg !110
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %573, i32 %574, ptr addrspace(1) %572, i1 true) #2, !dbg !110
  ret void, !dbg !111
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cq5uenrhgkdk7sblzprp7znhpzc766hwmapekvpxnyd7yr7ybeg2.py", directory: "inductor_cache/q5")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_3", linkageName: "triton_poi_fused_max_pool2d_with_indices_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 40, scope: !7)
!20 = !DILocation(line: 28, column: 49, scope: !7)
!21 = !DILocation(line: 28, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 45, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 54, scope: !7)
!25 = !DILocation(line: 29, column: 41, scope: !7)
!26 = !DILocation(line: 29, column: 49, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 58, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 30, column: 49, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 58, scope: !7)
!33 = !DILocation(line: 31, column: 42, scope: !7)
!34 = !DILocation(line: 31, column: 50, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 59, scope: !7)
!37 = !DILocation(line: 32, column: 42, scope: !7)
!38 = !DILocation(line: 32, column: 50, scope: !7)
!39 = !DILocation(line: 32, column: 30, scope: !7)
!40 = !DILocation(line: 32, column: 59, scope: !7)
!41 = !DILocation(line: 33, column: 42, scope: !7)
!42 = !DILocation(line: 33, column: 50, scope: !7)
!43 = !DILocation(line: 33, column: 30, scope: !7)
!44 = !DILocation(line: 33, column: 59, scope: !7)
!45 = !DILocation(line: 34, column: 43, scope: !7)
!46 = !DILocation(line: 34, column: 51, scope: !7)
!47 = !DILocation(line: 34, column: 31, scope: !7)
!48 = !DILocation(line: 34, column: 60, scope: !7)
!49 = !DILocation(line: 35, column: 43, scope: !7)
!50 = !DILocation(line: 35, column: 51, scope: !7)
!51 = !DILocation(line: 35, column: 31, scope: !7)
!52 = !DILocation(line: 35, column: 60, scope: !7)
!53 = !DILocation(line: 36, column: 43, scope: !7)
!54 = !DILocation(line: 36, column: 51, scope: !7)
!55 = !DILocation(line: 36, column: 31, scope: !7)
!56 = !DILocation(line: 36, column: 60, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 37, column: 40, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !60)
!62 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !60)
!63 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !65)
!65 = !DILocation(line: 38, column: 40, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !65)
!69 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !70)
!70 = !DILocation(line: 39, column: 40, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !70)
!74 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !75)
!75 = !DILocation(line: 40, column: 40, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !80)
!80 = !DILocation(line: 41, column: 41, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !85)
!85 = !DILocation(line: 42, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !90)
!90 = !DILocation(line: 43, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !95)
!95 = !DILocation(line: 44, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !95)
!97 = !DILocation(line: 48, column: 35, scope: !7)
!98 = !DILocation(line: 51, column: 35, scope: !7)
!99 = !DILocation(line: 54, column: 35, scope: !7)
!100 = !DILocation(line: 57, column: 35, scope: !7)
!101 = !DILocation(line: 60, column: 35, scope: !7)
!102 = !DILocation(line: 63, column: 35, scope: !7)
!103 = !DILocation(line: 66, column: 35, scope: !7)
!104 = !DILocation(line: 69, column: 35, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !95)
!106 = !DILocation(line: 70, column: 25, scope: !7)
!107 = !DILocation(line: 70, column: 37, scope: !7)
!108 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !95)
!109 = !DILocation(line: 71, column: 25, scope: !7)
!110 = !DILocation(line: 71, column: 37, scope: !7)
!111 = !DILocation(line: 71, column: 4, scope: !7)
