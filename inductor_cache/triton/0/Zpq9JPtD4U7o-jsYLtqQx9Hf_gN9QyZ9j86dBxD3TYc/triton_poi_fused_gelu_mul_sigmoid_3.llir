; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_gelu_mul_sigmoid_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 64, !dbg !15
  %13 = mul i32 %12, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = srem i32 %10, 16, !dbg !17
  %15 = shl i32 %12, 7, !dbg !18
  %16 = add i32 %15, %.decomposed, !dbg !19
  %17 = sext i32 %16 to i64, !dbg !20
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !20
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %11) #3, !dbg !21
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !21
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !21
  %22 = bitcast i32 %20 to float, !dbg !21
  %23 = bitcast i32 %21 to float, !dbg !21
  %24 = shl nsw i32 %12, 4, !dbg !22
  %25 = add nsw i32 %24, %14, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %11) #3, !dbg !25
  %29 = fmul float %22, 0x3FE6A09E60000000, !dbg !26
  %30 = fmul float %23, 0x3FE6A09E60000000, !dbg !26
  %31 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %31, 0, !dbg !27
  %32 = tail call float @llvm.nvvm.fabs.ftz.f(float %29) #3, !dbg !27
  %33 = tail call float @llvm.nvvm.fabs.f(float %29) #3, !dbg !27
  %.0.i = select i1 %.not.i, float %33, float %32, !dbg !27
  %34 = fcmp oge float %.0.i, 0x3FF00C1FC0000000, !dbg !27
  br i1 %34, label %__nv_fabsf.exit1.i, label %36, !dbg !27

__nv_fabsf.exit1.i:                               ; preds = %4
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not1.i = icmp eq i32 %35, 0, !dbg !27
  %.01.i = select i1 %.not1.i, float %33, float %32, !dbg !27
  br label %__internal_fmad.exit.i, !dbg !27

36:                                               ; preds = %4
  %37 = fmul float %29, %29, !dbg !27
  br label %__internal_fmad.exit.i, !dbg !27

__internal_fmad.exit.i:                           ; preds = %36, %__nv_fabsf.exit1.i
  %38 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %36 ], !dbg !27
  %39 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %36 ], !dbg !27
  %40 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %36 ], !dbg !27
  %41 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %36 ], !dbg !27
  %42 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %36 ], !dbg !27
  %43 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %36 ], !dbg !27
  %44 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %36 ], !dbg !27
  %45 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %37, %36 ], !dbg !27
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not2.i = icmp eq i32 %46, 0, !dbg !27
  %47 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %44, float %45, float %43) #3, !dbg !27
  %48 = tail call float @llvm.nvvm.fma.rn.f(float %44, float %45, float %43) #3, !dbg !27
  %.02.i = select i1 %.not2.i, float %48, float %47, !dbg !27
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not3.i = icmp eq i32 %49, 0, !dbg !27
  %50 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %45, float %42) #3, !dbg !27
  %51 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %45, float %42) #3, !dbg !27
  %.03.i = select i1 %.not3.i, float %51, float %50, !dbg !27
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not4.i = icmp eq i32 %52, 0, !dbg !27
  %53 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %45, float %41) #3, !dbg !27
  %54 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %45, float %41) #3, !dbg !27
  %.04.i = select i1 %.not4.i, float %54, float %53, !dbg !27
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not5.i = icmp eq i32 %55, 0, !dbg !27
  %56 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %45, float %40) #3, !dbg !27
  %57 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %45, float %40) #3, !dbg !27
  %.05.i = select i1 %.not5.i, float %57, float %56, !dbg !27
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not6.i = icmp eq i32 %58, 0, !dbg !27
  %59 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %45, float %39) #3, !dbg !27
  %60 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %45, float %39) #3, !dbg !27
  %.06.i = select i1 %.not6.i, float %60, float %59, !dbg !27
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not7.i = icmp eq i32 %61, 0, !dbg !27
  %62 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %45, float %38) #3, !dbg !27
  %63 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %45, float %38) #3, !dbg !27
  %.07.i = select i1 %.not7.i, float %63, float %62, !dbg !27
  %64 = fneg float %45, !dbg !27
  %65 = select i1 %34, float %64, float %29, !dbg !27
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not8.i = icmp eq i32 %66, 0, !dbg !27
  %67 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %65, float %65) #3, !dbg !27
  %68 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %65, float %65) #3, !dbg !27
  %.08.i = select i1 %.not8.i, float %68, float %67, !dbg !27
  br i1 %34, label %69, label %__nv_erff.exit, !dbg !27

69:                                               ; preds = %__internal_fmad.exit.i
  %70 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #3, !dbg !27
  %71 = fsub float 1.000000e+00, %70, !dbg !27
  %72 = bitcast float %71 to i32, !dbg !27
  %73 = bitcast float %29 to i32, !dbg !27
  %74 = and i32 %73, -2147483648, !dbg !27
  %75 = or i32 %74, %72, !dbg !27
  %76 = bitcast i32 %75 to float, !dbg !27
  br label %__nv_erff.exit, !dbg !27

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %69
  %r.0.i = phi float [ %76, %69 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !27
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %77, 0, !dbg !27
  %78 = tail call float @llvm.nvvm.fabs.ftz.f(float %30) #3, !dbg !27
  %79 = tail call float @llvm.nvvm.fabs.f(float %30) #3, !dbg !27
  %.0.i2 = select i1 %.not.i1, float %79, float %78, !dbg !27
  %80 = fcmp oge float %.0.i2, 0x3FF00C1FC0000000, !dbg !27
  br i1 %80, label %__nv_fabsf.exit1.i19, label %82, !dbg !27

__nv_fabsf.exit1.i19:                             ; preds = %__nv_erff.exit
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not1.i20 = icmp eq i32 %81, 0, !dbg !27
  %.01.i21 = select i1 %.not1.i20, float %79, float %78, !dbg !27
  br label %__internal_fmad.exit.i3, !dbg !27

82:                                               ; preds = %__nv_erff.exit
  %83 = fmul float %30, %30, !dbg !27
  br label %__internal_fmad.exit.i3, !dbg !27

__internal_fmad.exit.i3:                          ; preds = %82, %__nv_fabsf.exit1.i19
  %84 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i19 ], [ 0x3FC06EBA60000000, %82 ], !dbg !27
  %85 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i19 ], [ 0xBFD8127580000000, %82 ], !dbg !27
  %86 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i19 ], [ 0x3FBCE315E0000000, %82 ], !dbg !27
  %87 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i19 ], [ 0xBF9B837CE0000000, %82 ], !dbg !27
  %88 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i19 ], [ 0x3F755ABD40000000, %82 ], !dbg !27
  %89 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i19 ], [ 0xBF4AE9A400000000, %82 ], !dbg !27
  %90 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i19 ], [ 0x3F163D2D40000000, %82 ], !dbg !27
  %91 = phi float [ %.01.i21, %__nv_fabsf.exit1.i19 ], [ %83, %82 ], !dbg !27
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not2.i4 = icmp eq i32 %92, 0, !dbg !27
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %90, float %91, float %89) #3, !dbg !27
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %90, float %91, float %89) #3, !dbg !27
  %.02.i5 = select i1 %.not2.i4, float %94, float %93, !dbg !27
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not3.i6 = icmp eq i32 %95, 0, !dbg !27
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i5, float %91, float %88) #3, !dbg !27
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i5, float %91, float %88) #3, !dbg !27
  %.03.i7 = select i1 %.not3.i6, float %97, float %96, !dbg !27
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not4.i8 = icmp eq i32 %98, 0, !dbg !27
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i7, float %91, float %87) #3, !dbg !27
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i7, float %91, float %87) #3, !dbg !27
  %.04.i9 = select i1 %.not4.i8, float %100, float %99, !dbg !27
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not5.i10 = icmp eq i32 %101, 0, !dbg !27
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i9, float %91, float %86) #3, !dbg !27
  %103 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i9, float %91, float %86) #3, !dbg !27
  %.05.i11 = select i1 %.not5.i10, float %103, float %102, !dbg !27
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not6.i12 = icmp eq i32 %104, 0, !dbg !27
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i11, float %91, float %85) #3, !dbg !27
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i11, float %91, float %85) #3, !dbg !27
  %.06.i13 = select i1 %.not6.i12, float %106, float %105, !dbg !27
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not7.i14 = icmp eq i32 %107, 0, !dbg !27
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i13, float %91, float %84) #3, !dbg !27
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i13, float %91, float %84) #3, !dbg !27
  %.07.i15 = select i1 %.not7.i14, float %109, float %108, !dbg !27
  %110 = fneg float %91, !dbg !27
  %111 = select i1 %80, float %110, float %30, !dbg !27
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not8.i16 = icmp eq i32 %112, 0, !dbg !27
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i15, float %111, float %111) #3, !dbg !27
  %114 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i15, float %111, float %111) #3, !dbg !27
  %.08.i17 = select i1 %.not8.i16, float %114, float %113, !dbg !27
  br i1 %80, label %115, label %__nv_erff.exit22, !dbg !27

115:                                              ; preds = %__internal_fmad.exit.i3
  %116 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i17) #3, !dbg !27
  %117 = fsub float 1.000000e+00, %116, !dbg !27
  %118 = bitcast float %117 to i32, !dbg !27
  %119 = bitcast float %30 to i32, !dbg !27
  %120 = and i32 %119, -2147483648, !dbg !27
  %121 = or i32 %120, %118, !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  br label %__nv_erff.exit22, !dbg !27

__nv_erff.exit22:                                 ; preds = %__internal_fmad.exit.i3, %115
  %r.0.i18 = phi float [ %122, %115 ], [ %.08.i17, %__internal_fmad.exit.i3 ], !dbg !27
  %123 = fmul float %23, 5.000000e-01, !dbg !28
  %124 = fmul float %22, 5.000000e-01, !dbg !28
  %125 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %126 = bitcast i32 %125 to float, !dbg !25
  %127 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %128 = bitcast i32 %127 to float, !dbg !25
  %129 = fadd float %r.0.i, 1.000000e+00, !dbg !29
  %130 = fadd float %r.0.i18, 1.000000e+00, !dbg !29
  %131 = fmul float %124, %129, !dbg !30
  %132 = fmul float %123, %130, !dbg !30
  %133 = fsub float 0.000000e+00, %128, !dbg !31
  %134 = fsub float 0.000000e+00, %126, !dbg !31
  %135 = fmul float %133, 0x3FF7154760000000, !dbg !35
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #3, !dbg !35
  %137 = fmul float %134, 0x3FF7154760000000, !dbg !35
  %138 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %137) #3, !dbg !35
  %139 = fadd float %136, 1.000000e+00, !dbg !36
  %140 = fadd float %138, 1.000000e+00, !dbg !36
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %139) #3, !dbg !37
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %140) #3, !dbg !37
  %143 = fmul float %131, %141, !dbg !38
  %144 = fmul float %132, %142, !dbg !38
  %145 = sext i32 %10 to i64, !dbg !39
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !39
  %147 = bitcast float %143 to i32, !dbg !40
  %148 = bitcast float %144 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %146, i1 %11) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3q6wqfz4qyqud7kugclrijhxo6dr5sizeq3qg4uvfmo6tqfnbva.py", directory: "inductor_cache/3q")
!4 = !{ptr @triton_poi_fused_gelu_mul_sigmoid_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_gelu_mul_sigmoid_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_gelu_mul_sigmoid_3", linkageName: "triton_poi_fused_gelu_mul_sigmoid_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 29, column: 38, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 25, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 38, column: 23, scope: !7)
!35 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 39, column: 19, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
