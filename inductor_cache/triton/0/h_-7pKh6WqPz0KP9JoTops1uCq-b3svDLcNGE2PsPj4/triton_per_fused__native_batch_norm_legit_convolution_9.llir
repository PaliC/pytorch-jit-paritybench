; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 252, !dbg !11
  %13 = srem i32 %7, 128, !dbg !12
  %14 = shl i32 %7, 8, !dbg !13
  %15 = or disjoint i32 %14, %12, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = sext i32 %13 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !18
  %33 = bitcast i32 %32 to float, !dbg !18
  %34 = fadd float %23, %33, !dbg !19
  %35 = fadd float %24, %33, !dbg !19
  %36 = fadd float %25, %33, !dbg !19
  %37 = fadd float %26, %33, !dbg !19
  %38 = fadd float %34, %35, !dbg !20
  %39 = fadd float %36, %38, !dbg !20
  %40 = fadd float %37, %39, !dbg !20
  %41 = bitcast float %40 to i32, !dbg !25
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 16, i32 31), !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = fadd float %40, %43, !dbg !20
  %45 = bitcast float %44 to i32, !dbg !25
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 8, i32 31), !dbg !25
  %47 = bitcast i32 %46 to float, !dbg !25
  %48 = fadd float %44, %47, !dbg !20
  %49 = bitcast float %48 to i32, !dbg !25
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 4, i32 31), !dbg !25
  %51 = bitcast i32 %50 to float, !dbg !25
  %52 = fadd float %48, %51, !dbg !20
  %53 = bitcast float %52 to i32, !dbg !25
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = fadd float %52, %55, !dbg !20
  %57 = bitcast float %56 to i32, !dbg !25
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = fadd float %56, %59, !dbg !20
  %61 = icmp eq i32 %9, 0, !dbg !25
  %62 = and i32 %10, 1, !dbg !25
  %63 = zext nneg i32 %62 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i64 %63, !dbg !25
  %65 = bitcast float %60 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 %61) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %66 = icmp slt i32 %8, 2, !dbg !25
  %67 = sext i32 %8 to i64, !dbg !25
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i64 %67, !dbg !25
  %69 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %66) #5, !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fadd float %70, %72, !dbg !20
  %74 = and i32 %8, 1, !dbg !25
  %75 = icmp eq i32 %74, 0, !dbg !25
  %76 = and i1 %66, %75, !dbg !25
  %77 = bitcast float %73 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %77, i1 %76) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %78 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %79 = fadd float %78, 0.000000e+00, !dbg !26
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 2.560000e+02) #5, !dbg !30
  %81 = fsub float %34, %80, !dbg !31
  %82 = fsub float %35, %80, !dbg !31
  %83 = fsub float %36, %80, !dbg !31
  %84 = fsub float %37, %80, !dbg !31
  %85 = fmul float %81, %81, !dbg !32
  %86 = fmul float %82, %82, !dbg !32
  %87 = fmul float %83, %83, !dbg !32
  %88 = fmul float %84, %84, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %89 = fadd float %85, %86, !dbg !35
  %90 = fadd float %87, %89, !dbg !35
  %91 = fadd float %88, %90, !dbg !35
  %92 = bitcast float %91 to i32, !dbg !33
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !33
  %94 = bitcast i32 %93 to float, !dbg !33
  %95 = fadd float %91, %94, !dbg !35
  %96 = bitcast float %95 to i32, !dbg !33
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !33
  %98 = bitcast i32 %97 to float, !dbg !33
  %99 = fadd float %95, %98, !dbg !35
  %100 = bitcast float %99 to i32, !dbg !33
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !33
  %102 = bitcast i32 %101 to float, !dbg !33
  %103 = fadd float %99, %102, !dbg !35
  %104 = bitcast float %103 to i32, !dbg !33
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !33
  %106 = bitcast i32 %105 to float, !dbg !33
  %107 = fadd float %103, %106, !dbg !35
  %108 = bitcast float %107 to i32, !dbg !33
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !33
  %110 = bitcast i32 %109 to float, !dbg !33
  %111 = fadd float %107, %110, !dbg !35
  %112 = bitcast float %111 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %112, i1 %61) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %113 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %66) #5, !dbg !33
  %114 = bitcast i32 %113 to float, !dbg !33
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = fadd float %114, %116, !dbg !35
  %118 = bitcast float %117 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %118, i1 %76) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %119 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %120 = fadd float %119, 0.000000e+00, !dbg !36
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 2.560000e+02) #5, !dbg !38
  %122 = fadd float %121, 0x3EE4F8B580000000, !dbg !39
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %123, 0, !dbg !40
  br i1 %.not.i, label %126, label %124, !dbg !40

124:                                              ; preds = %6
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %122), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

126:                                              ; preds = %6
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %122), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %124, %126
  %.0.i = phi float [ %125, %124 ], [ %127, %126 ], !dbg !40
  %128 = bitcast float %34 to i32, !dbg !41
  %129 = bitcast float %35 to i32, !dbg !41
  %130 = bitcast float %36 to i32, !dbg !41
  %131 = bitcast float %37 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %128, i32 %129, i32 %130, i32 %131, ptr addrspace(1) %17, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %132 = sext i32 %7 to i64, !dbg !43
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !43
  %urem = and i32 %8, 63, !dbg !44
  %134 = icmp eq i32 %urem, 0, !dbg !44
  %135 = bitcast float %.0.i to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %133, i1 %134) #5, !dbg !44
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !45
  %137 = bitcast float %80 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %136, i1 %134) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6bysggmh7wxhh6z4rwstile3z2622jynjkfse4fezulqostrxlp.py", directory: "inductor_cache/6b")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_9, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_9", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 43, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 48, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 18, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 38, column: 57, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 38, column: 44, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 20, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !34)
!34 = !DILocation(line: 45, column: 59, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 45, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 28, scope: !7)
!41 = !DILocation(line: 51, column: 48, scope: !7)
!42 = !DILocation(line: 52, column: 4, scope: !7)
!43 = !DILocation(line: 53, column: 28, scope: !7)
!44 = !DILocation(line: 53, column: 40, scope: !7)
!45 = !DILocation(line: 54, column: 25, scope: !7)
!46 = !DILocation(line: 54, column: 37, scope: !7)
!47 = !DILocation(line: 54, column: 4, scope: !7)
