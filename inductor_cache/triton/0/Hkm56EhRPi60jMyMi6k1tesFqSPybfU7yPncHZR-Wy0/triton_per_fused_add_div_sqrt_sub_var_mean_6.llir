; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_sqrt_sub_var_mean_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %12 = or disjoint i32 %11, 64, !dbg !12
  %13 = or disjoint i32 %11, 128, !dbg !12
  %14 = or disjoint i32 %11, 192, !dbg !12
  %15 = icmp samesign ult i32 %13, 147, !dbg !13
  %16 = mul i32 %6, 147, !dbg !14
  %17 = add i32 %16, %11, !dbg !15
  %18 = add i32 %12, %16, !dbg !15
  %19 = add i32 %16, %13, !dbg !15
  %20 = add i32 %14, %16, !dbg !15
  %21 = sext i32 %17 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = sext i32 %18 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !16
  %25 = sext i32 %19 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !16
  %27 = sext i32 %20 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !16
  %29 = and i1 %15, %7, !dbg !17
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %7, i32 0, i1 %7) #5, !dbg !18
  %31 = bitcast i32 %30 to float, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %7, i32 0, i1 %7) #5, !dbg !18
  %33 = bitcast i32 %32 to float, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %29, i32 0, i1 %29) #5, !dbg !18
  %35 = bitcast i32 %34 to float, !dbg !18
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 false, i32 0, i1 false) #5, !dbg !18
  %37 = select i1 %29, float %35, float 0.000000e+00, !dbg !19
  %38 = fadd float %31, %33, !dbg !20
  %39 = select i1 %7, float %38, float 0.000000e+00, !dbg !20
  %40 = fadd float %39, %37, !dbg !20
  %41 = fadd float %40, 0.000000e+00, !dbg !20
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !20
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %45, %48, !dbg !20
  %50 = bitcast float %49 to i32, !dbg !25
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = fadd float %49, %52, !dbg !20
  %54 = bitcast float %53 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %53, %56, !dbg !20
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !20
  %62 = icmp eq i32 %9, 0, !dbg !25
  %63 = and i32 %10, 1, !dbg !25
  %64 = zext nneg i32 %63 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i64 %64, !dbg !25
  %66 = bitcast float %61 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 %62) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %67 = icmp slt i32 %8, 2, !dbg !25
  %68 = sext i32 %8 to i64, !dbg !25
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i64 %68, !dbg !25
  %70 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %67) #5, !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fadd float %71, %73, !dbg !20
  %75 = and i32 %8, 1, !dbg !25
  %76 = icmp eq i32 %75, 0, !dbg !25
  %77 = and i1 %67, %76, !dbg !25
  %78 = bitcast float %74 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %78, i1 %77) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %79 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 1.470000e+02) #5, !dbg !26
  %81 = fsub float %31, %80, !dbg !27
  %82 = fsub float %33, %80, !dbg !27
  %83 = fsub float %35, %80, !dbg !27
  %84 = fmul float %81, %81, !dbg !28
  %85 = fmul float %82, %82, !dbg !28
  %86 = fmul float %83, %83, !dbg !28
  %87 = select i1 %29, float %86, float 0.000000e+00, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %88 = fadd float %84, %85, !dbg !32
  %89 = select i1 %7, float %88, float 0.000000e+00, !dbg !32
  %90 = fadd float %87, %89, !dbg !32
  %91 = bitcast float %90 to i32, !dbg !30
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 16, i32 31), !dbg !30
  %93 = bitcast i32 %92 to float, !dbg !30
  %94 = fadd float %90, %93, !dbg !32
  %95 = bitcast float %94 to i32, !dbg !30
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !30
  %97 = bitcast i32 %96 to float, !dbg !30
  %98 = fadd float %94, %97, !dbg !32
  %99 = bitcast float %98 to i32, !dbg !30
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !30
  %101 = bitcast i32 %100 to float, !dbg !30
  %102 = fadd float %98, %101, !dbg !32
  %103 = bitcast float %102 to i32, !dbg !30
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !30
  %105 = bitcast i32 %104 to float, !dbg !30
  %106 = fadd float %102, %105, !dbg !32
  %107 = bitcast float %106 to i32, !dbg !30
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !30
  %109 = bitcast i32 %108 to float, !dbg !30
  %110 = fadd float %106, %109, !dbg !32
  %111 = bitcast float %110 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %111, i1 %62) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %67) #5, !dbg !30
  %113 = bitcast i32 %112 to float, !dbg !30
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !30
  %115 = bitcast i32 %114 to float, !dbg !30
  %116 = fadd float %113, %115, !dbg !32
  %117 = bitcast float %116 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %117, i1 %77) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %118 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 1.470000e+02) #5, !dbg !33
  %120 = fadd float %119, 0x3DDB7CDFE0000000, !dbg !34
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %121, 0, !dbg !35
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i = icmp eq i32 %122, 0, !dbg !35
  br i1 %.not.i, label %128, label %123, !dbg !35

123:                                              ; preds = %5
  br i1 %.not1.i, label %126, label %124, !dbg !35

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

128:                                              ; preds = %5
  br i1 %.not1.i, label %131, label %129, !dbg !35

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %124, %126, %129, %131
  %.0.i = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i1 = icmp eq i32 %133, 0, !dbg !35
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i4 = icmp eq i32 %134, 0, !dbg !35
  br i1 %.not.i1, label %140, label %135, !dbg !35

135:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %138, label %136, !dbg !35

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %143, label %141, !dbg !35

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %136, %138, %141, %143
  %.0.i3 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !35
  %145 = bitcast i32 %36 to float, !dbg !18
  %146 = fsub float %145, %80, !dbg !27
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float %.0.i3) #5, !dbg !36
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %.0.i3) #5, !dbg !36
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %.0.i3) #5, !dbg !36
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %.0.i3) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %151 = sext i32 %6 to i64, !dbg !38
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !38
  %153 = icmp eq i32 %11, 0, !dbg !39
  %154 = bitcast float %.0.i to i32, !dbg !39
  %155 = and i1 %153, %7, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %152, i1 %155) #5, !dbg !39
  %156 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !40
  %157 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !40
  %158 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !40
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !40
  %160 = bitcast float %147 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %156, i1 %7) #5, !dbg !41
  %161 = bitcast float %148 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %157, i1 %7) #5, !dbg !41
  %162 = bitcast float %149 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %158, i1 %29) #5, !dbg !41
  %163 = bitcast float %150 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %159, i1 false) #5, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjox7ultkslv6gd7udb27juzrlre5bplphedjbuqg5hnonid5xsj.py", directory: "inductor_cache/jo")
!4 = !{ptr @triton_per_fused_add_div_sqrt_sub_var_mean_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_sqrt_sub_var_mean_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_sqrt_sub_var_mean_6", linkageName: "triton_per_fused_add_div_sqrt_sub_var_mean_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 52, scope: !7)
!18 = !DILocation(line: 31, column: 44, scope: !7)
!19 = !DILocation(line: 35, column: 41, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 43, column: 43, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !31)
!31 = !DILocation(line: 44, column: 26, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !31)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 49, column: 27, scope: !7)
!36 = !DILocation(line: 51, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 4, scope: !7)
!38 = !DILocation(line: 53, column: 28, scope: !7)
!39 = !DILocation(line: 53, column: 40, scope: !7)
!40 = !DILocation(line: 54, column: 25, scope: !7)
!41 = !DILocation(line: 54, column: 46, scope: !7)
!42 = !DILocation(line: 54, column: 4, scope: !7)
