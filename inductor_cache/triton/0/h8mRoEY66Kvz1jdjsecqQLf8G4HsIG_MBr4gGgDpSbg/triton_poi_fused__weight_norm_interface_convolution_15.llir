; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %.lobit1 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %.lobit1, 3, !dbg !12
  %14 = or disjoint i32 %13, 4, !dbg !12
  %15 = or disjoint i32 %13, 8, !dbg !12
  %16 = or disjoint i32 %13, 12, !dbg !12
  %17 = or disjoint i32 %13, 16, !dbg !12
  %18 = or disjoint i32 %13, 20, !dbg !12
  %19 = or disjoint i32 %13, 24, !dbg !12
  %20 = or disjoint i32 %13, 28, !dbg !12
  %21 = or disjoint i32 %9, %12, !dbg !13
  %22 = or disjoint i32 %9, %13, !dbg !13
  %23 = or disjoint i32 %9, %14, !dbg !13
  %24 = or disjoint i32 %9, %15, !dbg !13
  %25 = or disjoint i32 %9, %16, !dbg !13
  %26 = or disjoint i32 %9, %17, !dbg !13
  %27 = or disjoint i32 %9, %18, !dbg !13
  %28 = or disjoint i32 %9, %19, !dbg !13
  %29 = or disjoint i32 %9, %20, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = shl i32 %30, 5, !dbg !15
  %32 = lshr i32 %10, 3, !dbg !16
  %33 = and i32 %32, 15, !dbg !16
  %34 = and i32 %10, 31, !dbg !16
  %35 = or disjoint i32 %31, %33, !dbg !17
  %36 = or disjoint i32 %35, 16, !dbg !17
  %37 = or disjoint i32 %31, %34, !dbg !17
  %38 = icmp slt i32 %35, 25, !dbg !18
  %39 = icmp slt i32 %36, 25, !dbg !18
  %40 = icmp slt i32 %37, 25, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %41 = sdiv i32 %.frozen, 64, !dbg !19
  %42 = mul i32 %41, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %42, !dbg !20
  %43 = shl i32 %35, 6, !dbg !21
  %44 = shl i32 %36, 6, !dbg !21
  %45 = mul i32 %41, 1600, !dbg !22
  %46 = add i32 %45, %.decomposed, !dbg !23
  %47 = add i32 %46, %43, !dbg !24
  %48 = add i32 %46, %44, !dbg !24
  %49 = sext i32 %47 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = sext i32 %48 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %38) #2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = bitcast i32 %57 to float, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %39) #2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = sext i32 %41 to i64, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !28
  %74 = bitcast i32 %73 to float, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !29
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !30
  %83 = bitcast i32 %82 to float, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !30
  %85 = bitcast i32 %84 to float, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !30
  %87 = bitcast i32 %86 to float, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !30
  %89 = bitcast i32 %88 to float, !dbg !30
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %83) #2, !dbg !31
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %85) #2, !dbg !31
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %87) #2, !dbg !31
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %89) #2, !dbg !31
  %94 = fmul float %90, %58, !dbg !32
  %95 = fmul float %91, %59, !dbg !32
  %96 = fmul float %92, %60, !dbg !32
  %97 = fmul float %93, %61, !dbg !32
  %98 = fmul float %90, %67, !dbg !32
  %99 = fmul float %91, %68, !dbg !32
  %100 = fmul float %92, %69, !dbg !32
  %101 = fmul float %93, %70, !dbg !32
  %102 = mul i32 %22, 25, !dbg !33
  %103 = mul i32 %23, 25, !dbg !33
  %104 = mul i32 %24, 25, !dbg !33
  %105 = mul i32 %25, 25, !dbg !33
  %106 = mul i32 %26, 25, !dbg !33
  %107 = mul i32 %27, 25, !dbg !33
  %108 = mul i32 %28, 25, !dbg !33
  %109 = mul i32 %29, 25, !dbg !33
  %110 = add i32 %37, %102, !dbg !34
  %111 = add i32 %37, %103, !dbg !34
  %112 = add i32 %37, %104, !dbg !34
  %113 = add i32 %37, %105, !dbg !34
  %114 = add i32 %37, %106, !dbg !34
  %115 = add i32 %37, %107, !dbg !34
  %116 = add i32 %37, %108, !dbg !34
  %117 = add i32 %37, %109, !dbg !34
  %118 = sext i32 %110 to i64, !dbg !35
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %118, !dbg !35
  %120 = sext i32 %111 to i64, !dbg !35
  %121 = getelementptr float, ptr addrspace(1) %3, i64 %120, !dbg !35
  %122 = sext i32 %112 to i64, !dbg !35
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %122, !dbg !35
  %124 = sext i32 %113 to i64, !dbg !35
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %124, !dbg !35
  %126 = sext i32 %114 to i64, !dbg !35
  %127 = getelementptr float, ptr addrspace(1) %3, i64 %126, !dbg !35
  %128 = sext i32 %115 to i64, !dbg !35
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !35
  %130 = sext i32 %116 to i64, !dbg !35
  %131 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !35
  %132 = sext i32 %117 to i64, !dbg !35
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !35
  %134 = shl i32 %10, 7, !dbg !36
  %135 = and i32 %134, 896, !dbg !36
  %136 = or disjoint i32 %135, %33, !dbg !36
  %137 = and i32 %10, 127, !dbg !36
  %138 = lshr exact i32 %135, 5, !dbg !36
  %139 = add nuw nsw i32 %138, %136, !dbg !36
  %140 = zext nneg i32 %139 to i64, !dbg !36
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !36
  %142 = bitcast float %94 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !36
  %143 = or disjoint i32 %136, 32, !dbg !36
  %144 = lshr i32 %143, 5, !dbg !36
  %145 = add nuw nsw i32 %144, %143, !dbg !36
  %146 = zext nneg i32 %145 to i64, !dbg !36
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !36
  %148 = bitcast float %95 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !36
  %149 = or disjoint i32 %136, 64, !dbg !36
  %150 = lshr i32 %149, 5, !dbg !36
  %151 = add nuw nsw i32 %150, %149, !dbg !36
  %152 = zext nneg i32 %151 to i64, !dbg !36
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !36
  %154 = bitcast float %96 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !36
  %155 = or disjoint i32 %136, 96, !dbg !36
  %156 = lshr i32 %155, 5, !dbg !36
  %157 = add nuw nsw i32 %156, %155, !dbg !36
  %158 = zext nneg i32 %157 to i64, !dbg !36
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !36
  %160 = bitcast float %97 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !36
  %161 = or disjoint i32 %136, 16, !dbg !36
  %162 = add nuw nsw i32 %161, %138, !dbg !36
  %163 = zext nneg i32 %162 to i64, !dbg !36
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %163, !dbg !36
  %165 = bitcast float %98 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !36
  %166 = or disjoint i32 %136, 48, !dbg !36
  %167 = lshr i32 %166, 5, !dbg !36
  %168 = add nuw nsw i32 %167, %166, !dbg !36
  %169 = zext nneg i32 %168 to i64, !dbg !36
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !36
  %171 = bitcast float %99 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !36
  %172 = or disjoint i32 %136, 80, !dbg !36
  %173 = lshr i32 %172, 5, !dbg !36
  %174 = add nuw nsw i32 %173, %172, !dbg !36
  %175 = zext nneg i32 %174 to i64, !dbg !36
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %175, !dbg !36
  %177 = bitcast float %100 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !36
  %178 = or disjoint i32 %136, 112, !dbg !36
  %179 = lshr i32 %178, 5, !dbg !36
  %180 = add nuw nsw i32 %179, %178, !dbg !36
  %181 = zext nneg i32 %180 to i64, !dbg !36
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %181, !dbg !36
  %183 = bitcast float %101 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %184 = lshr i32 %137, 5, !dbg !36
  %185 = add nuw nsw i32 %184, %137, !dbg !36
  %186 = zext nneg i32 %185 to i64, !dbg !36
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %186, !dbg !36
  %188 = load i32, ptr addrspace(3) %187, align 4, !dbg !36
  %189 = or disjoint i32 %137, 128, !dbg !36
  %190 = lshr i32 %189, 5, !dbg !36
  %191 = add nuw nsw i32 %190, %189, !dbg !36
  %192 = zext nneg i32 %191 to i64, !dbg !36
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %192, !dbg !36
  %194 = load i32, ptr addrspace(3) %193, align 4, !dbg !36
  %195 = or disjoint i32 %137, 256, !dbg !36
  %196 = lshr i32 %195, 5, !dbg !36
  %197 = add nuw nsw i32 %196, %195, !dbg !36
  %198 = zext nneg i32 %197 to i64, !dbg !36
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %198, !dbg !36
  %200 = load i32, ptr addrspace(3) %199, align 4, !dbg !36
  %201 = or disjoint i32 %137, 384, !dbg !36
  %202 = lshr i32 %201, 5, !dbg !36
  %203 = add nuw nsw i32 %202, %201, !dbg !36
  %204 = zext nneg i32 %203 to i64, !dbg !36
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %204, !dbg !36
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !36
  %207 = or disjoint i32 %137, 512, !dbg !36
  %208 = lshr i32 %207, 5, !dbg !36
  %209 = add nuw nsw i32 %208, %207, !dbg !36
  %210 = zext nneg i32 %209 to i64, !dbg !36
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %210, !dbg !36
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !36
  %213 = or disjoint i32 %137, 640, !dbg !36
  %214 = lshr i32 %213, 5, !dbg !36
  %215 = add nuw nsw i32 %214, %213, !dbg !36
  %216 = zext nneg i32 %215 to i64, !dbg !36
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %216, !dbg !36
  %218 = load i32, ptr addrspace(3) %217, align 4, !dbg !36
  %219 = or disjoint i32 %137, 768, !dbg !36
  %220 = lshr i32 %219, 5, !dbg !36
  %221 = add nuw nsw i32 %220, %219, !dbg !36
  %222 = zext nneg i32 %221 to i64, !dbg !36
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %222, !dbg !36
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !36
  %225 = or disjoint i32 %137, 896, !dbg !36
  %226 = lshr i32 %225, 5, !dbg !36
  %227 = add nuw nsw i32 %226, %225, !dbg !36
  %228 = zext nneg i32 %227 to i64, !dbg !36
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %228, !dbg !36
  %230 = load i32, ptr addrspace(3) %229, align 4, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %119, i1 %40) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %121, i1 %40) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %123, i1 %40) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %125, i1 %40) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %127, i1 %40) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %218, ptr addrspace(1) %129, i1 %40) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %224, ptr addrspace(1) %131, i1 %40) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %230, ptr addrspace(1) %133, i1 %40) #2, !dbg !36
  %231 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !37
  %232 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !37
  %233 = bitcast float %94 to i32, !dbg !38
  %234 = bitcast float %95 to i32, !dbg !38
  %235 = bitcast float %96 to i32, !dbg !38
  %236 = bitcast float %97 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %233, i32 %234, i32 %235, i32 %236, ptr addrspace(1) %231, i1 %38) #2, !dbg !38
  %237 = bitcast float %98 to i32, !dbg !38
  %238 = bitcast float %99 to i32, !dbg !38
  %239 = bitcast float %100 to i32, !dbg !38
  %240 = bitcast float %101 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %238, i32 %239, i32 %240, ptr addrspace(1) %232, i1 %39) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ivnzkovmrtd3e4cjttwafp4yp67ob32gbtck3yirimlfjdns4n.py", directory: "inductor_cache/3i")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_15", linkageName: "triton_poi_fused__weight_norm_interface_convolution_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 53, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 33, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 44, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 54, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
