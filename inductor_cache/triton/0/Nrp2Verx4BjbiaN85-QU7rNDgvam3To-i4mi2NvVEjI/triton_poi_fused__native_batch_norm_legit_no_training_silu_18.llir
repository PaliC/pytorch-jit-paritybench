; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_silu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %11, 5, !dbg !12
  %12 = and i32 %.lobit1, 3, !dbg !12
  %13 = or disjoint i32 %12, 4, !dbg !12
  %14 = shl i32 %11, 2, !dbg !12
  %15 = or disjoint i32 %10, %12, !dbg !13
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 7, !dbg !15
  %19 = and i32 %14, 124, !dbg !16
  %20 = and i32 %11, 127, !dbg !16
  %21 = or disjoint i32 %18, %19, !dbg !17
  %22 = or disjoint i32 %18, %20, !dbg !17
  %23 = icmp slt i32 %21, 128, !dbg !18
  %24 = icmp slt i32 %22, 128, !dbg !18
  %25 = shl i32 %15, 7, !dbg !19
  %26 = shl i32 %16, 7, !dbg !19
  %27 = add i32 %21, %25, !dbg !20
  %28 = add i32 %21, %26, !dbg !20
  %29 = sext i32 %27 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = sext i32 %28 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %23) #4, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %23) #4, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = and i32 %14, 508, !dbg !22
  %44 = lshr i32 %43, 7, !dbg !22
  %45 = or disjoint i32 %44, %43, !dbg !22
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %45, !dbg !22
  %47 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #4, !dbg !22
  %48 = or disjoint i32 %43, 1, !dbg !22
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %44, !dbg !22
  %50 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %48, !dbg !22
  %51 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #4, !dbg !22
  %52 = or disjoint i32 %43, 2, !dbg !22
  %53 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %52, !dbg !22
  %54 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #4, !dbg !22
  %55 = or disjoint i32 %43, 3, !dbg !22
  %56 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %55, !dbg !22
  %57 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !22
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !22
  %60 = getelementptr inbounds i8, ptr addrspace(3) %58, i32 516, !dbg !22
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !22
  %62 = getelementptr inbounds i8, ptr addrspace(3) %58, i32 1032, !dbg !22
  %63 = load float, ptr addrspace(3) %62, align 4, !dbg !22
  %64 = getelementptr inbounds i8, ptr addrspace(3) %58, i32 1548, !dbg !22
  %65 = load float, ptr addrspace(3) %64, align 4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %66 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %66, i1 true) #4, !dbg !22
  %67 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %67, i1 true) #4, !dbg !22
  %68 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %68, i1 true) #4, !dbg !22
  %69 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %69, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %70 = load float, ptr addrspace(3) %58, align 4, !dbg !22
  %71 = load float, ptr addrspace(3) %60, align 4, !dbg !22
  %72 = load float, ptr addrspace(3) %62, align 4, !dbg !22
  %73 = load float, ptr addrspace(3) %64, align 4, !dbg !22
  %74 = sext i32 %22 to i64, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !23
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %24) #4, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %24) #4, !dbg !26
  %79 = bitcast i32 %78 to float, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %24) #4, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %24) #4, !dbg !30
  %84 = fadd float %79, 0x3F50624DE0000000, !dbg !31
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %85, 0, !dbg !32
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %86, 0, !dbg !32
  br i1 %.not.i, label %92, label %87, !dbg !32

87:                                               ; preds = %8
  br i1 %.not1.i, label %90, label %88, !dbg !32

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

92:                                               ; preds = %8
  br i1 %.not1.i, label %95, label %93, !dbg !32

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !32
  %97 = bitcast i32 %76 to float, !dbg !24
  %98 = fsub float %73, %97, !dbg !33
  %99 = fsub float %72, %97, !dbg !33
  %100 = fsub float %71, %97, !dbg !33
  %101 = fsub float %70, %97, !dbg !33
  %102 = fsub float %65, %97, !dbg !33
  %103 = fsub float %63, %97, !dbg !33
  %104 = fsub float %61, %97, !dbg !33
  %105 = fsub float %59, %97, !dbg !33
  %106 = bitcast i32 %83 to float, !dbg !30
  %107 = bitcast i32 %81 to float, !dbg !28
  %108 = and i32 %14, 4, !dbg !12
  %109 = or disjoint i32 %10, %108, !dbg !13
  %.frozen = freeze i32 %109, !dbg !34
  %110 = sdiv i32 %.frozen, 256, !dbg !34
  %111 = mul i32 %110, 256, !dbg !35
  %.decomposed = sub i32 %.frozen, %111, !dbg !35
  %112 = lshr i32 %11, 1, !dbg !16
  %113 = and i32 %112, 63, !dbg !16
  %114 = or disjoint i32 %113, %18, !dbg !17
  %115 = or disjoint i32 %114, 64, !dbg !17
  %116 = icmp slt i32 %115, 128, !dbg !18
  %117 = icmp slt i32 %114, 128, !dbg !18
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %119 = fmul float %105, %118, !dbg !37
  %120 = fmul float %104, %118, !dbg !37
  %121 = fmul float %103, %118, !dbg !37
  %122 = fmul float %102, %118, !dbg !37
  %123 = fmul float %101, %118, !dbg !37
  %124 = fmul float %100, %118, !dbg !37
  %125 = fmul float %99, %118, !dbg !37
  %126 = fmul float %98, %118, !dbg !37
  %127 = fmul float %119, %107, !dbg !38
  %128 = fmul float %120, %107, !dbg !38
  %129 = fmul float %121, %107, !dbg !38
  %130 = fmul float %122, %107, !dbg !38
  %131 = fmul float %123, %107, !dbg !38
  %132 = fmul float %124, %107, !dbg !38
  %133 = fmul float %125, %107, !dbg !38
  %134 = fmul float %126, %107, !dbg !38
  %135 = fadd float %127, %106, !dbg !39
  %136 = fadd float %128, %106, !dbg !39
  %137 = fadd float %129, %106, !dbg !39
  %138 = fadd float %130, %106, !dbg !39
  %139 = fadd float %131, %106, !dbg !39
  %140 = fadd float %132, %106, !dbg !39
  %141 = fadd float %133, %106, !dbg !39
  %142 = fadd float %134, %106, !dbg !39
  %143 = fsub float 0.000000e+00, %135, !dbg !40
  %144 = fsub float 0.000000e+00, %136, !dbg !40
  %145 = fsub float 0.000000e+00, %137, !dbg !40
  %146 = fsub float 0.000000e+00, %138, !dbg !40
  %147 = fsub float 0.000000e+00, %139, !dbg !40
  %148 = fsub float 0.000000e+00, %140, !dbg !40
  %149 = fsub float 0.000000e+00, %141, !dbg !40
  %150 = fsub float 0.000000e+00, %142, !dbg !40
  %151 = fmul float %143, 0x3FF7154760000000, !dbg !44
  %152 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %151) #4, !dbg !44
  %153 = fmul float %144, 0x3FF7154760000000, !dbg !44
  %154 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %153) #4, !dbg !44
  %155 = fmul float %145, 0x3FF7154760000000, !dbg !44
  %156 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %155) #4, !dbg !44
  %157 = fmul float %146, 0x3FF7154760000000, !dbg !44
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #4, !dbg !44
  %159 = fmul float %147, 0x3FF7154760000000, !dbg !44
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #4, !dbg !44
  %161 = fmul float %148, 0x3FF7154760000000, !dbg !44
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #4, !dbg !44
  %163 = fmul float %149, 0x3FF7154760000000, !dbg !44
  %164 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %163) #4, !dbg !44
  %165 = fmul float %150, 0x3FF7154760000000, !dbg !44
  %166 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %165) #4, !dbg !44
  %167 = fadd float %152, 1.000000e+00, !dbg !45
  %168 = fadd float %154, 1.000000e+00, !dbg !45
  %169 = fadd float %156, 1.000000e+00, !dbg !45
  %170 = fadd float %158, 1.000000e+00, !dbg !45
  %171 = fadd float %160, 1.000000e+00, !dbg !45
  %172 = fadd float %162, 1.000000e+00, !dbg !45
  %173 = fadd float %164, 1.000000e+00, !dbg !45
  %174 = fadd float %166, 1.000000e+00, !dbg !45
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %167) #4, !dbg !46
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %168) #4, !dbg !46
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %169) #4, !dbg !46
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %170) #4, !dbg !46
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %171) #4, !dbg !46
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %172) #4, !dbg !46
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %173) #4, !dbg !46
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %174) #4, !dbg !46
  %183 = fmul float %135, %175, !dbg !47
  %184 = fmul float %136, %176, !dbg !47
  %185 = fmul float %137, %177, !dbg !47
  %186 = fmul float %138, %178, !dbg !47
  %187 = fmul float %139, %179, !dbg !47
  %188 = fmul float %140, %180, !dbg !47
  %189 = fmul float %141, %181, !dbg !47
  %190 = fmul float %142, %182, !dbg !47
  %191 = shl i32 %114, 8, !dbg !48
  %192 = shl i32 %115, 8, !dbg !48
  %193 = shl i32 %110, 15, !dbg !49
  %194 = add i32 %193, %.decomposed, !dbg !50
  %195 = add i32 %194, %191, !dbg !51
  %196 = add i32 %194, %192, !dbg !51
  %197 = sext i32 %195 to i64, !dbg !52
  %198 = getelementptr float, ptr addrspace(1) %5, i64 %197, !dbg !52
  %199 = sext i32 %196 to i64, !dbg !52
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %201 = shl i32 %11, 3, !dbg !53
  %202 = and i32 %201, 1016, !dbg !53
  %203 = lshr exact i32 %202, 1, !dbg !53
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !53
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %202, !dbg !53
  %206 = bitcast float %183 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #4, !dbg !53
  %207 = or disjoint i32 %202, 1, !dbg !53
  %208 = getelementptr float, ptr addrspace(3) %204, i32 %207, !dbg !53
  %209 = bitcast float %184 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #4, !dbg !53
  %210 = or disjoint i32 %202, 2, !dbg !53
  %211 = getelementptr float, ptr addrspace(3) %204, i32 %210, !dbg !53
  %212 = bitcast float %185 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #4, !dbg !53
  %213 = or disjoint i32 %202, 3, !dbg !53
  %214 = getelementptr float, ptr addrspace(3) %204, i32 %213, !dbg !53
  %215 = bitcast float %186 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #4, !dbg !53
  %216 = or disjoint i32 %202, 4, !dbg !53
  %217 = getelementptr float, ptr addrspace(3) %204, i32 %216, !dbg !53
  %218 = bitcast float %187 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #4, !dbg !53
  %219 = or disjoint i32 %202, 5, !dbg !53
  %220 = getelementptr float, ptr addrspace(3) %204, i32 %219, !dbg !53
  %221 = bitcast float %188 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #4, !dbg !53
  %222 = or disjoint i32 %202, 6, !dbg !53
  %223 = getelementptr float, ptr addrspace(3) %204, i32 %222, !dbg !53
  %224 = bitcast float %189 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !53
  %225 = or disjoint i32 %202, 7, !dbg !53
  %226 = getelementptr float, ptr addrspace(3) %204, i32 %225, !dbg !53
  %227 = bitcast float %190 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %228 = lshr exact i32 %14, 1, !dbg !53
  %229 = and i32 %228, 252, !dbg !53
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !53
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %43, !dbg !53
  %232 = or disjoint i32 %43, 512, !dbg !53
  %233 = lshr exact i32 %232, 1, !dbg !53
  %234 = and i32 %233, 508, !dbg !53
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !53
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %232, !dbg !53
  %237 = load <4 x i32>, ptr addrspace(3) %236, align 16, !dbg !53
  %.extract = load i32, ptr addrspace(3) %231, align 16, !dbg !53
  %238 = getelementptr inbounds i8, ptr addrspace(3) %231, i32 4, !dbg !53
  %.extract12 = load i32, ptr addrspace(3) %238, align 4, !dbg !53
  %239 = getelementptr inbounds i8, ptr addrspace(3) %231, i32 8, !dbg !53
  %.extract13 = load i32, ptr addrspace(3) %239, align 8, !dbg !53
  %240 = getelementptr inbounds i8, ptr addrspace(3) %231, i32 12, !dbg !53
  %.extract14 = load i32, ptr addrspace(3) %240, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %198, i1 %117) #4, !dbg !53
  %.extract15 = extractelement <4 x i32> %237, i64 0, !dbg !53
  %.extract16 = extractelement <4 x i32> %237, i64 1, !dbg !53
  %.extract17 = extractelement <4 x i32> %237, i64 2, !dbg !53
  %.extract18 = extractelement <4 x i32> %237, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %200, i1 %116) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvfxim32544rmukbhcpeoipriqpudszmsnlpxntquynzi42qcdnq.py", directory: "inductor_cache/vf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_silu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_silu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 26, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 30, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 48, column: 23, scope: !7)
!44 = !DILocation(line: 47, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 47, column: 20, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 47, column: 16, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 34, scope: !7)
!49 = !DILocation(line: 50, column: 45, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 39, scope: !7)
!52 = !DILocation(line: 50, column: 25, scope: !7)
!53 = !DILocation(line: 50, column: 57, scope: !7)
!54 = !DILocation(line: 50, column: 4, scope: !7)
