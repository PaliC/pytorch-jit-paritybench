; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 61504, !dbg !14
  %16 = sdiv i32 %14, 3844, !dbg !15
  %17 = srem i32 %16, 4, !dbg !16
  %18 = sext i32 %14 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %15) #3, !dbg !18
  %21 = sext i32 %17 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %15) #3, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %15) #3, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %15) #3, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %15) #3, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %15) #3, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %15) #3, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %15) #3, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %15) #3, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #3, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #3, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #3, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #3, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #3, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #3, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #3, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #3, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %15) #3, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %15) #3, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %15) #3, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %15) #3, !dbg !28
  %51 = fadd float %34, 0x3EE4F8B580000000, !dbg !29
  %52 = fadd float %36, 0x3EE4F8B580000000, !dbg !29
  %53 = fadd float %38, 0x3EE4F8B580000000, !dbg !29
  %54 = fadd float %40, 0x3EE4F8B580000000, !dbg !29
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %55, 0, !dbg !30
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %56, 0, !dbg !30
  br i1 %.not.i, label %62, label %57, !dbg !30

57:                                               ; preds = %8
  br i1 %.not1.i, label %60, label %58, !dbg !30

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

62:                                               ; preds = %8
  br i1 %.not1.i, label %65, label %63, !dbg !30

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %58, %60, %63, %65
  %.0.i = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !30
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %67, 0, !dbg !30
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %68, 0, !dbg !30
  br i1 %.not.i1, label %74, label %69, !dbg !30

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !30

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !30

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %70, %72, %75, %77
  %.0.i3 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !30
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %79, 0, !dbg !30
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %80, 0, !dbg !30
  br i1 %.not.i6, label %86, label %81, !dbg !30

81:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %84, label %82, !dbg !30

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

86:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %89, label %87, !dbg !30

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %82, %84, %87, %89
  %.0.i8 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !30
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %91, 0, !dbg !30
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %92, 0, !dbg !30
  br i1 %.not.i11, label %98, label %93, !dbg !30

93:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %96, label %94, !dbg !30

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !30

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %94, %96, %99, %101
  %.0.i13 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !30
  %103 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !18
  %104 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !20
  %105 = insertelement <4 x i32> %104, i32 %25, i64 1, !dbg !20
  %106 = insertelement <4 x i32> %105, i32 %24, i64 2, !dbg !20
  %107 = insertelement <4 x i32> %106, i32 %23, i64 3, !dbg !20
  %108 = bitcast <4 x i32> %107 to <4 x float>, !dbg !20
  %109 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !22
  %110 = insertelement <4 x i32> %109, i32 %30, i64 1, !dbg !22
  %111 = insertelement <4 x i32> %110, i32 %29, i64 2, !dbg !22
  %112 = insertelement <4 x i32> %111, i32 %28, i64 3, !dbg !22
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !22
  %114 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !18
  %115 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !18
  %116 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !18
  %117 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !28
  %118 = insertelement <4 x i32> %117, i32 %49, i64 1, !dbg !28
  %119 = insertelement <4 x i32> %118, i32 %48, i64 2, !dbg !28
  %120 = insertelement <4 x i32> %119, i32 %47, i64 3, !dbg !28
  %121 = bitcast <4 x i32> %120 to <4 x float>, !dbg !28
  %122 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !26
  %123 = insertelement <4 x i32> %122, i32 %44, i64 1, !dbg !26
  %124 = insertelement <4 x i32> %123, i32 %43, i64 2, !dbg !26
  %125 = insertelement <4 x i32> %124, i32 %42, i64 3, !dbg !26
  %126 = bitcast <4 x i32> %125 to <4 x float>, !dbg !26
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %131 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !18
  %132 = insertelement <4 x i32> %131, i32 %114, i64 1, !dbg !18
  %133 = insertelement <4 x i32> %132, i32 %115, i64 2, !dbg !18
  %134 = insertelement <4 x i32> %133, i32 %116, i64 3, !dbg !18
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !18
  %136 = fadd <4 x float> %135, %108, !dbg !32
  %137 = fsub <4 x float> %136, %113, !dbg !33
  %138 = insertelement <4 x float> poison, float %130, i64 0, !dbg !34
  %139 = insertelement <4 x float> %138, float %129, i64 1, !dbg !34
  %140 = insertelement <4 x float> %139, float %128, i64 2, !dbg !34
  %141 = insertelement <4 x float> %140, float %127, i64 3, !dbg !34
  %142 = fmul <4 x float> %137, %141, !dbg !34
  %143 = fmul <4 x float> %142, %126, !dbg !35
  %144 = fadd <4 x float> %143, %121, !dbg !36
  %145 = fcmp olt <4 x float> %144, zeroinitializer, !dbg !37
  %146 = extractelement <4 x i1> %145, i64 3, !dbg !41
  %147 = extractelement <4 x i1> %145, i64 2, !dbg !41
  %148 = extractelement <4 x i1> %145, i64 1, !dbg !41
  %149 = extractelement <4 x i1> %145, i64 0, !dbg !41
  %bc = bitcast <4 x float> %136 to <4 x i32>, !dbg !42
  %150 = extractelement <4 x i32> %bc, i64 3, !dbg !42
  %bc16 = bitcast <4 x float> %136 to <4 x i32>, !dbg !42
  %151 = extractelement <4 x i32> %bc16, i64 2, !dbg !42
  %bc17 = bitcast <4 x float> %136 to <4 x i32>, !dbg !42
  %152 = extractelement <4 x i32> %bc17, i64 1, !dbg !42
  %bc18 = bitcast <4 x float> %136 to <4 x i32>, !dbg !42
  %153 = extractelement <4 x i32> %bc18, i64 0, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %150, i32 %151, i32 %152, i32 %153, ptr addrspace(1) %19, i1 %15) #3, !dbg !42
  %154 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !43
  %bc19 = bitcast <4 x float> %144 to <4 x i32>, !dbg !44
  %155 = extractelement <4 x i32> %bc19, i64 3, !dbg !44
  %156 = select i1 %146, i32 0, i32 %155, !dbg !41
  %bc20 = bitcast <4 x float> %144 to <4 x i32>, !dbg !44
  %157 = extractelement <4 x i32> %bc20, i64 2, !dbg !44
  %158 = select i1 %147, i32 0, i32 %157, !dbg !41
  %bc21 = bitcast <4 x float> %144 to <4 x i32>, !dbg !44
  %159 = extractelement <4 x i32> %bc21, i64 1, !dbg !44
  %160 = select i1 %148, i32 0, i32 %159, !dbg !41
  %bc22 = bitcast <4 x float> %144 to <4 x i32>, !dbg !44
  %161 = extractelement <4 x i32> %bc22, i64 0, !dbg !44
  %162 = select i1 %149, i32 0, i32 %161, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %158, i32 %160, i32 %162, ptr addrspace(1) %154, i1 %15) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crws4jpccujwsfuuexyhovfpvs4nctx7dyu5ntvngn24mkvianu5.py", directory: "inductor_cache/rw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 29, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 26, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 45, column: 42, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 46, column: 39, scope: !7)
!43 = !DILocation(line: 47, column: 25, scope: !7)
!44 = !DILocation(line: 47, column: 37, scope: !7)
!45 = !DILocation(line: 47, column: 4, scope: !7)
