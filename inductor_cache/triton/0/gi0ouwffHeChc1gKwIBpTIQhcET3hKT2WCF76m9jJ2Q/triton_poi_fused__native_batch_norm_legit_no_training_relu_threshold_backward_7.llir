; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 48, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 6, !dbg !15
  %21 = lshr i32 %12, 2, !dbg !16
  %22 = and i32 %21, 63, !dbg !16
  %23 = or disjoint i32 %20, %22, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %24 = sdiv i32 %.frozen, 256, !dbg !18
  %25 = mul i32 %24, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = srem i32 %16, 256, !dbg !19
  %27 = srem i32 %17, 256, !dbg !19
  %28 = srem i32 %18, 256, !dbg !19
  %29 = shl i32 %23, 8, !dbg !20
  %30 = shl i32 %24, 20, !dbg !21
  %31 = add i32 %30, %29, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %31, %26, !dbg !23
  %34 = add i32 %31, %27, !dbg !23
  %35 = add i32 %31, %28, !dbg !23
  %36 = sext i32 %32 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = sext i32 %33 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = sext i32 %34 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %35 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !25
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !25
  %48 = sext i32 %.decomposed to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %50 = sext i32 %26 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !26
  %52 = sext i32 %27 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !26
  %54 = sext i32 %28 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #4, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !27
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !27
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #4, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !28
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !29
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !29
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !29
  %69 = bitcast i32 %65 to float, !dbg !29
  %70 = bitcast i32 %66 to float, !dbg !29
  %71 = bitcast i32 %67 to float, !dbg !29
  %72 = bitcast i32 %68 to float, !dbg !29
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !29
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !29
  %78 = bitcast i32 %74 to float, !dbg !29
  %79 = bitcast i32 %75 to float, !dbg !29
  %80 = bitcast i32 %76 to float, !dbg !29
  %81 = bitcast i32 %77 to float, !dbg !29
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !29
  %87 = bitcast i32 %83 to float, !dbg !29
  %88 = bitcast i32 %84 to float, !dbg !29
  %89 = bitcast i32 %85 to float, !dbg !29
  %90 = bitcast i32 %86 to float, !dbg !29
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !29
  %96 = bitcast i32 %92 to float, !dbg !29
  %97 = bitcast i32 %93 to float, !dbg !29
  %98 = bitcast i32 %94 to float, !dbg !29
  %99 = bitcast i32 %95 to float, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !30
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #4, !dbg !31
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #4, !dbg !31
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #4, !dbg !31
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 true) #4, !dbg !31
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !32
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #4, !dbg !33
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #4, !dbg !33
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 true) #4, !dbg !33
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #4, !dbg !33
  %116 = fadd float %69, 0x3EE4F8B580000000, !dbg !34
  %117 = fadd float %70, 0x3EE4F8B580000000, !dbg !34
  %118 = fadd float %71, 0x3EE4F8B580000000, !dbg !34
  %119 = fadd float %72, 0x3EE4F8B580000000, !dbg !34
  %120 = fadd float %78, 0x3EE4F8B580000000, !dbg !34
  %121 = fadd float %79, 0x3EE4F8B580000000, !dbg !34
  %122 = fadd float %80, 0x3EE4F8B580000000, !dbg !34
  %123 = fadd float %81, 0x3EE4F8B580000000, !dbg !34
  %124 = fadd float %87, 0x3EE4F8B580000000, !dbg !34
  %125 = fadd float %88, 0x3EE4F8B580000000, !dbg !34
  %126 = fadd float %89, 0x3EE4F8B580000000, !dbg !34
  %127 = fadd float %90, 0x3EE4F8B580000000, !dbg !34
  %128 = fadd float %96, 0x3EE4F8B580000000, !dbg !34
  %129 = fadd float %97, 0x3EE4F8B580000000, !dbg !34
  %130 = fadd float %98, 0x3EE4F8B580000000, !dbg !34
  %131 = fadd float %99, 0x3EE4F8B580000000, !dbg !34
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %132, 0, !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %133, 0, !dbg !35
  br i1 %.not.i, label %139, label %134, !dbg !35

134:                                              ; preds = %9
  br i1 %.not1.i, label %137, label %135, !dbg !35

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

139:                                              ; preds = %9
  br i1 %.not1.i, label %142, label %140, !dbg !35

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %135, %137, %140, %142
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !35
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i3 = icmp eq i32 %144, 0, !dbg !35
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i6 = icmp eq i32 %145, 0, !dbg !35
  br i1 %.not.i3, label %151, label %146, !dbg !35

146:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %149, label %147, !dbg !35

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

151:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %154, label %152, !dbg !35

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

__nv_sqrtf.exit7:                                 ; preds = %147, %149, %152, %154
  %.0.i5 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !35
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i8 = icmp eq i32 %156, 0, !dbg !35
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i11 = icmp eq i32 %157, 0, !dbg !35
  br i1 %.not.i8, label %163, label %158, !dbg !35

158:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %161, label %159, !dbg !35

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

163:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %166, label %164, !dbg !35

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

__nv_sqrtf.exit12:                                ; preds = %159, %161, %164, %166
  %.0.i10 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !35
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i13 = icmp eq i32 %168, 0, !dbg !35
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i16 = icmp eq i32 %169, 0, !dbg !35
  br i1 %.not.i13, label %175, label %170, !dbg !35

170:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %173, label %171, !dbg !35

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

175:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %178, label %176, !dbg !35

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

__nv_sqrtf.exit17:                                ; preds = %171, %173, %176, %178
  %.0.i15 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !35
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i18 = icmp eq i32 %180, 0, !dbg !35
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i21 = icmp eq i32 %181, 0, !dbg !35
  br i1 %.not.i18, label %187, label %182, !dbg !35

182:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %185, label %183, !dbg !35

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

187:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %190, label %188, !dbg !35

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

__nv_sqrtf.exit22:                                ; preds = %183, %185, %188, %190
  %.0.i20 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !35
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i23 = icmp eq i32 %192, 0, !dbg !35
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i26 = icmp eq i32 %193, 0, !dbg !35
  br i1 %.not.i23, label %199, label %194, !dbg !35

194:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %197, label %195, !dbg !35

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

199:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %202, label %200, !dbg !35

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

__nv_sqrtf.exit27:                                ; preds = %195, %197, %200, %202
  %.0.i25 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !35
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i28 = icmp eq i32 %204, 0, !dbg !35
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i31 = icmp eq i32 %205, 0, !dbg !35
  br i1 %.not.i28, label %211, label %206, !dbg !35

206:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %209, label %207, !dbg !35

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

211:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %214, label %212, !dbg !35

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

__nv_sqrtf.exit32:                                ; preds = %207, %209, %212, %214
  %.0.i30 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !35
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i33 = icmp eq i32 %216, 0, !dbg !35
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i36 = icmp eq i32 %217, 0, !dbg !35
  br i1 %.not.i33, label %223, label %218, !dbg !35

218:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %221, label %219, !dbg !35

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

223:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %226, label %224, !dbg !35

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

__nv_sqrtf.exit37:                                ; preds = %219, %221, %224, %226
  %.0.i35 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !35
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i38 = icmp eq i32 %228, 0, !dbg !35
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i41 = icmp eq i32 %229, 0, !dbg !35
  br i1 %.not.i38, label %235, label %230, !dbg !35

230:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %233, label %231, !dbg !35

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

235:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %238, label %236, !dbg !35

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

__nv_sqrtf.exit42:                                ; preds = %231, %233, %236, %238
  %.0.i40 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !35
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i43 = icmp eq i32 %240, 0, !dbg !35
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i46 = icmp eq i32 %241, 0, !dbg !35
  br i1 %.not.i43, label %247, label %242, !dbg !35

242:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %245, label %243, !dbg !35

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

247:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %250, label %248, !dbg !35

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

__nv_sqrtf.exit47:                                ; preds = %243, %245, %248, %250
  %.0.i45 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !35
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i48 = icmp eq i32 %252, 0, !dbg !35
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i51 = icmp eq i32 %253, 0, !dbg !35
  br i1 %.not.i48, label %259, label %254, !dbg !35

254:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %257, label %255, !dbg !35

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit52, !dbg !35

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit52, !dbg !35

259:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %262, label %260, !dbg !35

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit52, !dbg !35

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit52, !dbg !35

__nv_sqrtf.exit52:                                ; preds = %255, %257, %260, %262
  %.0.i50 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !35
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i53 = icmp eq i32 %264, 0, !dbg !35
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i56 = icmp eq i32 %265, 0, !dbg !35
  br i1 %.not.i53, label %271, label %266, !dbg !35

266:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %269, label %267, !dbg !35

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit57, !dbg !35

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit57, !dbg !35

271:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %274, label %272, !dbg !35

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit57, !dbg !35

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit57, !dbg !35

__nv_sqrtf.exit57:                                ; preds = %267, %269, %272, %274
  %.0.i55 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !35
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i58 = icmp eq i32 %276, 0, !dbg !35
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i61 = icmp eq i32 %277, 0, !dbg !35
  br i1 %.not.i58, label %283, label %278, !dbg !35

278:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %281, label %279, !dbg !35

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !35
  br label %__nv_sqrtf.exit62, !dbg !35

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !35
  br label %__nv_sqrtf.exit62, !dbg !35

283:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %286, label %284, !dbg !35

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !35
  br label %__nv_sqrtf.exit62, !dbg !35

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !35
  br label %__nv_sqrtf.exit62, !dbg !35

__nv_sqrtf.exit62:                                ; preds = %279, %281, %284, %286
  %.0.i60 = phi float [ %280, %279 ], [ %282, %281 ], [ %285, %284 ], [ %287, %286 ], !dbg !35
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i63 = icmp eq i32 %288, 0, !dbg !35
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i66 = icmp eq i32 %289, 0, !dbg !35
  br i1 %.not.i63, label %295, label %290, !dbg !35

290:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %293, label %291, !dbg !35

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #4, !dbg !35
  br label %__nv_sqrtf.exit67, !dbg !35

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #4, !dbg !35
  br label %__nv_sqrtf.exit67, !dbg !35

295:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %298, label %296, !dbg !35

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #4, !dbg !35
  br label %__nv_sqrtf.exit67, !dbg !35

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #4, !dbg !35
  br label %__nv_sqrtf.exit67, !dbg !35

__nv_sqrtf.exit67:                                ; preds = %291, %293, %296, %298
  %.0.i65 = phi float [ %292, %291 ], [ %294, %293 ], [ %297, %296 ], [ %299, %298 ], !dbg !35
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i68 = icmp eq i32 %300, 0, !dbg !35
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i71 = icmp eq i32 %301, 0, !dbg !35
  br i1 %.not.i68, label %307, label %302, !dbg !35

302:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %305, label %303, !dbg !35

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #4, !dbg !35
  br label %__nv_sqrtf.exit72, !dbg !35

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #4, !dbg !35
  br label %__nv_sqrtf.exit72, !dbg !35

307:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %310, label %308, !dbg !35

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #4, !dbg !35
  br label %__nv_sqrtf.exit72, !dbg !35

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #4, !dbg !35
  br label %__nv_sqrtf.exit72, !dbg !35

__nv_sqrtf.exit72:                                ; preds = %303, %305, %308, %310
  %.0.i70 = phi float [ %304, %303 ], [ %306, %305 ], [ %309, %308 ], [ %311, %310 ], !dbg !35
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i73 = icmp eq i32 %312, 0, !dbg !35
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i76 = icmp eq i32 %313, 0, !dbg !35
  br i1 %.not.i73, label %319, label %314, !dbg !35

314:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %317, label %315, !dbg !35

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit77, !dbg !35

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit77, !dbg !35

319:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %322, label %320, !dbg !35

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit77, !dbg !35

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit77, !dbg !35

__nv_sqrtf.exit77:                                ; preds = %315, %317, %320, %322
  %.0.i75 = phi float [ %316, %315 ], [ %318, %317 ], [ %321, %320 ], [ %323, %322 ], !dbg !35
  %324 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %325 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !27
  %326 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %327 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !27
  %328 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %329 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !27
  %330 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %331 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !27
  %332 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %333 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !27
  %334 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %335 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !27
  %336 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %337 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !27
  %338 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %339 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !27
  %340 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %341 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !27
  %342 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %343 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !27
  %344 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %345 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !27
  %346 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %347 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !27
  %348 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !25
  %349 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %350 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !25
  %351 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %352 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !25
  %353 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %354 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !25
  %355 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %356 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !33
  %357 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !33
  %358 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !33
  %359 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !33
  %360 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !33
  %361 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !33
  %362 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !33
  %363 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !33
  %364 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !33
  %365 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !33
  %366 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !33
  %367 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !33
  %368 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !33
  %369 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !33
  %370 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !33
  %371 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !33
  %372 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !31
  %373 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !31
  %374 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !31
  %375 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !31
  %376 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !31
  %377 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !31
  %378 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !31
  %379 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !31
  %380 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !31
  %381 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !31
  %382 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !31
  %383 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !31
  %384 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !31
  %385 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !31
  %386 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !31
  %387 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !31
  %388 = shl i32 %12, 2, !dbg !16
  %389 = and i32 %388, 60, !dbg !16
  %390 = or disjoint i32 %20, %389, !dbg !17
  %391 = lshr i32 %12, 4, !dbg !12
  %392 = and i32 %391, 15, !dbg !12
  %393 = or disjoint i32 %392, 48, !dbg !12
  %394 = or disjoint i32 %11, %393, !dbg !13
  %395 = or disjoint i32 %392, 32, !dbg !12
  %396 = or disjoint i32 %11, %395, !dbg !13
  %397 = or disjoint i32 %392, 16, !dbg !12
  %398 = or disjoint i32 %11, %397, !dbg !13
  %399 = or disjoint i32 %11, %392, !dbg !13
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !36
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !36
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !36
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !36
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !36
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !36
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !36
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !36
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !36
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !36
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #4, !dbg !36
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #4, !dbg !36
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #4, !dbg !36
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i70) #4, !dbg !36
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i75) #4, !dbg !36
  %416 = shl i32 %399, 12, !dbg !37
  %417 = shl i32 %398, 12, !dbg !37
  %418 = shl i32 %396, 12, !dbg !37
  %419 = shl i32 %394, 12, !dbg !37
  %420 = add i32 %390, %416, !dbg !38
  %421 = add i32 %390, %417, !dbg !38
  %422 = add i32 %390, %418, !dbg !38
  %423 = add i32 %390, %419, !dbg !38
  %424 = sext i32 %420 to i64, !dbg !39
  %425 = getelementptr float, ptr addrspace(1) %5, i64 %424, !dbg !39
  %426 = sext i32 %421 to i64, !dbg !39
  %427 = getelementptr float, ptr addrspace(1) %5, i64 %426, !dbg !39
  %428 = sext i32 %422 to i64, !dbg !39
  %429 = getelementptr float, ptr addrspace(1) %5, i64 %428, !dbg !39
  %430 = sext i32 %423 to i64, !dbg !39
  %431 = getelementptr float, ptr addrspace(1) %5, i64 %430, !dbg !39
  %432 = shl i32 %12, 10, !dbg !40
  %433 = and i32 %432, 3072, !dbg !40
  %434 = or disjoint i32 %433, %22, !dbg !40
  %435 = and i32 %388, 1020, !dbg !40
  %436 = lshr exact i32 %433, 4, !dbg !40
  %437 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %436, !dbg !40
  %438 = getelementptr float, ptr addrspace(3) %437, i32 %434, !dbg !40
  %439 = or disjoint i32 %434, 64, !dbg !40
  %440 = lshr i32 %439, 6, !dbg !40
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !40
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %439, !dbg !40
  %443 = or disjoint i32 %434, 128, !dbg !40
  %444 = lshr i32 %443, 6, !dbg !40
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %444, !dbg !40
  %446 = getelementptr float, ptr addrspace(3) %445, i32 %443, !dbg !40
  %447 = or disjoint i32 %434, 192, !dbg !40
  %448 = lshr i32 %447, 6, !dbg !40
  %449 = getelementptr float, ptr addrspace(3) @global_smem, i32 %448, !dbg !40
  %450 = getelementptr float, ptr addrspace(3) %449, i32 %447, !dbg !40
  %451 = or disjoint i32 %434, 256, !dbg !40
  %452 = lshr i32 %451, 6, !dbg !40
  %453 = getelementptr float, ptr addrspace(3) @global_smem, i32 %452, !dbg !40
  %454 = getelementptr float, ptr addrspace(3) %453, i32 %451, !dbg !40
  %455 = or disjoint i32 %434, 320, !dbg !40
  %456 = lshr i32 %455, 6, !dbg !40
  %457 = getelementptr float, ptr addrspace(3) @global_smem, i32 %456, !dbg !40
  %458 = getelementptr float, ptr addrspace(3) %457, i32 %455, !dbg !40
  %459 = or disjoint i32 %434, 384, !dbg !40
  %460 = lshr i32 %459, 6, !dbg !40
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !40
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %459, !dbg !40
  %463 = or disjoint i32 %434, 448, !dbg !40
  %464 = lshr i32 %463, 6, !dbg !40
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %464, !dbg !40
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %463, !dbg !40
  %467 = or disjoint i32 %434, 512, !dbg !40
  %468 = lshr i32 %467, 6, !dbg !40
  %469 = getelementptr float, ptr addrspace(3) @global_smem, i32 %468, !dbg !40
  %470 = getelementptr float, ptr addrspace(3) %469, i32 %467, !dbg !40
  %471 = or disjoint i32 %434, 576, !dbg !40
  %472 = lshr i32 %471, 6, !dbg !40
  %473 = getelementptr float, ptr addrspace(3) @global_smem, i32 %472, !dbg !40
  %474 = getelementptr float, ptr addrspace(3) %473, i32 %471, !dbg !40
  %475 = or disjoint i32 %434, 640, !dbg !40
  %476 = lshr i32 %475, 6, !dbg !40
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !40
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %475, !dbg !40
  %479 = or disjoint i32 %434, 704, !dbg !40
  %480 = lshr i32 %479, 6, !dbg !40
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !40
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %479, !dbg !40
  %483 = or disjoint i32 %434, 768, !dbg !40
  %484 = lshr i32 %483, 6, !dbg !40
  %485 = getelementptr float, ptr addrspace(3) @global_smem, i32 %484, !dbg !40
  %486 = getelementptr float, ptr addrspace(3) %485, i32 %483, !dbg !40
  %487 = or disjoint i32 %434, 832, !dbg !40
  %488 = lshr i32 %487, 6, !dbg !40
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !40
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %487, !dbg !40
  %491 = or disjoint i32 %434, 896, !dbg !40
  %492 = lshr i32 %491, 6, !dbg !40
  %493 = getelementptr float, ptr addrspace(3) @global_smem, i32 %492, !dbg !40
  %494 = getelementptr float, ptr addrspace(3) %493, i32 %491, !dbg !40
  %495 = or disjoint i32 %434, 960, !dbg !40
  %496 = lshr i32 %495, 6, !dbg !40
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %496, !dbg !40
  %498 = getelementptr float, ptr addrspace(3) %497, i32 %495, !dbg !40
  %499 = lshr i32 %435, 6, !dbg !40
  %500 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %499, !dbg !40
  %501 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %435, !dbg !40
  %502 = or disjoint i32 %435, 1, !dbg !40
  %503 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %502, !dbg !40
  %504 = or disjoint i32 %435, 2, !dbg !40
  %505 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %504, !dbg !40
  %506 = or disjoint i32 %435, 3, !dbg !40
  %507 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %506, !dbg !40
  %508 = or disjoint i32 %435, 1024, !dbg !40
  %509 = lshr i32 %508, 6, !dbg !40
  %510 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %509, !dbg !40
  %511 = getelementptr inbounds float, ptr addrspace(3) %510, i32 %508, !dbg !40
  %512 = or disjoint i32 %435, 1025, !dbg !40
  %513 = lshr i32 %512, 6, !dbg !40
  %514 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %513, !dbg !40
  %515 = getelementptr inbounds float, ptr addrspace(3) %514, i32 %512, !dbg !40
  %516 = or disjoint i32 %435, 1026, !dbg !40
  %517 = lshr i32 %516, 6, !dbg !40
  %518 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %517, !dbg !40
  %519 = getelementptr inbounds float, ptr addrspace(3) %518, i32 %516, !dbg !40
  %520 = or disjoint i32 %435, 1027, !dbg !40
  %521 = lshr i32 %520, 6, !dbg !40
  %522 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %521, !dbg !40
  %523 = getelementptr inbounds float, ptr addrspace(3) %522, i32 %520, !dbg !40
  %524 = or disjoint i32 %435, 2048, !dbg !40
  %525 = lshr i32 %524, 6, !dbg !40
  %526 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %525, !dbg !40
  %527 = getelementptr inbounds float, ptr addrspace(3) %526, i32 %524, !dbg !40
  %528 = or disjoint i32 %435, 2049, !dbg !40
  %529 = lshr i32 %528, 6, !dbg !40
  %530 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %529, !dbg !40
  %531 = getelementptr inbounds float, ptr addrspace(3) %530, i32 %528, !dbg !40
  %532 = or disjoint i32 %435, 2050, !dbg !40
  %533 = lshr i32 %532, 6, !dbg !40
  %534 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %533, !dbg !40
  %535 = getelementptr inbounds float, ptr addrspace(3) %534, i32 %532, !dbg !40
  %536 = or disjoint i32 %435, 2051, !dbg !40
  %537 = lshr i32 %536, 6, !dbg !40
  %538 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %537, !dbg !40
  %539 = getelementptr inbounds float, ptr addrspace(3) %538, i32 %536, !dbg !40
  %540 = or disjoint i32 %435, 3072, !dbg !40
  %541 = lshr i32 %540, 6, !dbg !40
  %542 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %541, !dbg !40
  %543 = getelementptr inbounds float, ptr addrspace(3) %542, i32 %540, !dbg !40
  %544 = or disjoint i32 %435, 3073, !dbg !40
  %545 = lshr i32 %544, 6, !dbg !40
  %546 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %545, !dbg !40
  %547 = getelementptr inbounds float, ptr addrspace(3) %546, i32 %544, !dbg !40
  %548 = or disjoint i32 %435, 3074, !dbg !40
  %549 = lshr i32 %548, 6, !dbg !40
  %550 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %549, !dbg !40
  %551 = getelementptr inbounds float, ptr addrspace(3) %550, i32 %548, !dbg !40
  %552 = or disjoint i32 %435, 3075, !dbg !40
  %553 = lshr i32 %552, 6, !dbg !40
  %554 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %553, !dbg !40
  %555 = getelementptr inbounds float, ptr addrspace(3) %554, i32 %552, !dbg !40
  %556 = getelementptr i1, ptr addrspace(1) %6, i64 %36, !dbg !41
  %557 = insertelement <4 x i32> poison, i32 %354, i64 0, !dbg !25
  %558 = insertelement <4 x i32> %557, i32 %352, i64 1, !dbg !25
  %559 = insertelement <4 x i32> %558, i32 %350, i64 2, !dbg !25
  %560 = insertelement <4 x i32> %559, i32 %348, i64 3, !dbg !25
  %561 = bitcast <4 x i32> %560 to <4 x float>, !dbg !25
  %562 = insertelement <4 x i32> poison, i32 %355, i64 0, !dbg !27
  %563 = insertelement <4 x i32> %562, i32 %353, i64 1, !dbg !27
  %564 = insertelement <4 x i32> %563, i32 %351, i64 2, !dbg !27
  %565 = insertelement <4 x i32> %564, i32 %349, i64 3, !dbg !27
  %566 = bitcast <4 x i32> %565 to <4 x float>, !dbg !27
  %567 = fsub <4 x float> %561, %566, !dbg !42
  %568 = insertelement <4 x i32> poison, i32 %371, i64 0, !dbg !33
  %569 = insertelement <4 x i32> %568, i32 %370, i64 1, !dbg !33
  %570 = insertelement <4 x i32> %569, i32 %369, i64 2, !dbg !33
  %571 = insertelement <4 x i32> %570, i32 %368, i64 3, !dbg !33
  %572 = bitcast <4 x i32> %571 to <4 x float>, !dbg !33
  %573 = insertelement <4 x i32> poison, i32 %387, i64 0, !dbg !31
  %574 = insertelement <4 x i32> %573, i32 %386, i64 1, !dbg !31
  %575 = insertelement <4 x i32> %574, i32 %385, i64 2, !dbg !31
  %576 = insertelement <4 x i32> %575, i32 %384, i64 3, !dbg !31
  %577 = bitcast <4 x i32> %576 to <4 x float>, !dbg !31
  %578 = insertelement <4 x float> poison, float %400, i64 0, !dbg !43
  %579 = insertelement <4 x float> %578, float %401, i64 1, !dbg !43
  %580 = insertelement <4 x float> %579, float %402, i64 2, !dbg !43
  %581 = insertelement <4 x float> %580, float %403, i64 3, !dbg !43
  %582 = fmul <4 x float> %567, %581, !dbg !43
  %583 = fmul <4 x float> %582, %577, !dbg !44
  %584 = fadd <4 x float> %583, %572, !dbg !45
  %585 = fcmp olt <4 x float> %584, zeroinitializer, !dbg !46
  %586 = select <4 x i1> %585, <4 x float> zeroinitializer, <4 x float> %584, !dbg !50
  %587 = fcmp ole <4 x float> %586, zeroinitializer, !dbg !51
  %588 = extractelement <4 x float> %586, i64 0, !dbg !40
  %589 = bitcast float %588 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %589, i1 true) #4, !dbg !40
  %590 = extractelement <4 x float> %586, i64 1, !dbg !40
  %591 = bitcast float %590 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %591, i1 true) #4, !dbg !40
  %592 = extractelement <4 x float> %586, i64 2, !dbg !40
  %593 = bitcast float %592 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %593, i1 true) #4, !dbg !40
  %594 = extractelement <4 x float> %586, i64 3, !dbg !40
  %595 = bitcast float %594 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %595, i1 true) #4, !dbg !40
  %596 = insertelement <4 x i32> poison, i32 %346, i64 0, !dbg !25
  %597 = insertelement <4 x i32> %596, i32 %344, i64 1, !dbg !25
  %598 = insertelement <4 x i32> %597, i32 %342, i64 2, !dbg !25
  %599 = insertelement <4 x i32> %598, i32 %340, i64 3, !dbg !25
  %600 = bitcast <4 x i32> %599 to <4 x float>, !dbg !25
  %601 = insertelement <4 x i32> poison, i32 %347, i64 0, !dbg !27
  %602 = insertelement <4 x i32> %601, i32 %345, i64 1, !dbg !27
  %603 = insertelement <4 x i32> %602, i32 %343, i64 2, !dbg !27
  %604 = insertelement <4 x i32> %603, i32 %341, i64 3, !dbg !27
  %605 = bitcast <4 x i32> %604 to <4 x float>, !dbg !27
  %606 = fsub <4 x float> %600, %605, !dbg !42
  %607 = insertelement <4 x i32> poison, i32 %367, i64 0, !dbg !33
  %608 = insertelement <4 x i32> %607, i32 %366, i64 1, !dbg !33
  %609 = insertelement <4 x i32> %608, i32 %365, i64 2, !dbg !33
  %610 = insertelement <4 x i32> %609, i32 %364, i64 3, !dbg !33
  %611 = bitcast <4 x i32> %610 to <4 x float>, !dbg !33
  %612 = insertelement <4 x i32> poison, i32 %383, i64 0, !dbg !31
  %613 = insertelement <4 x i32> %612, i32 %382, i64 1, !dbg !31
  %614 = insertelement <4 x i32> %613, i32 %381, i64 2, !dbg !31
  %615 = insertelement <4 x i32> %614, i32 %380, i64 3, !dbg !31
  %616 = bitcast <4 x i32> %615 to <4 x float>, !dbg !31
  %617 = insertelement <4 x float> poison, float %404, i64 0, !dbg !43
  %618 = insertelement <4 x float> %617, float %405, i64 1, !dbg !43
  %619 = insertelement <4 x float> %618, float %406, i64 2, !dbg !43
  %620 = insertelement <4 x float> %619, float %407, i64 3, !dbg !43
  %621 = fmul <4 x float> %606, %620, !dbg !43
  %622 = fmul <4 x float> %621, %616, !dbg !44
  %623 = fadd <4 x float> %622, %611, !dbg !45
  %624 = fcmp olt <4 x float> %623, zeroinitializer, !dbg !46
  %625 = select <4 x i1> %624, <4 x float> zeroinitializer, <4 x float> %623, !dbg !50
  %626 = fcmp ole <4 x float> %625, zeroinitializer, !dbg !51
  %627 = extractelement <4 x float> %625, i64 0, !dbg !40
  %628 = bitcast float %627 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %628, i1 true) #4, !dbg !40
  %629 = extractelement <4 x float> %625, i64 1, !dbg !40
  %630 = bitcast float %629 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %630, i1 true) #4, !dbg !40
  %631 = extractelement <4 x float> %625, i64 2, !dbg !40
  %632 = bitcast float %631 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %632, i1 true) #4, !dbg !40
  %633 = extractelement <4 x float> %625, i64 3, !dbg !40
  %634 = bitcast float %633 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %634, i1 true) #4, !dbg !40
  %635 = insertelement <4 x i32> poison, i32 %338, i64 0, !dbg !25
  %636 = insertelement <4 x i32> %635, i32 %336, i64 1, !dbg !25
  %637 = insertelement <4 x i32> %636, i32 %334, i64 2, !dbg !25
  %638 = insertelement <4 x i32> %637, i32 %332, i64 3, !dbg !25
  %639 = bitcast <4 x i32> %638 to <4 x float>, !dbg !25
  %640 = insertelement <4 x i32> poison, i32 %339, i64 0, !dbg !27
  %641 = insertelement <4 x i32> %640, i32 %337, i64 1, !dbg !27
  %642 = insertelement <4 x i32> %641, i32 %335, i64 2, !dbg !27
  %643 = insertelement <4 x i32> %642, i32 %333, i64 3, !dbg !27
  %644 = bitcast <4 x i32> %643 to <4 x float>, !dbg !27
  %645 = fsub <4 x float> %639, %644, !dbg !42
  %646 = insertelement <4 x i32> poison, i32 %363, i64 0, !dbg !33
  %647 = insertelement <4 x i32> %646, i32 %362, i64 1, !dbg !33
  %648 = insertelement <4 x i32> %647, i32 %361, i64 2, !dbg !33
  %649 = insertelement <4 x i32> %648, i32 %360, i64 3, !dbg !33
  %650 = bitcast <4 x i32> %649 to <4 x float>, !dbg !33
  %651 = insertelement <4 x i32> poison, i32 %379, i64 0, !dbg !31
  %652 = insertelement <4 x i32> %651, i32 %378, i64 1, !dbg !31
  %653 = insertelement <4 x i32> %652, i32 %377, i64 2, !dbg !31
  %654 = insertelement <4 x i32> %653, i32 %376, i64 3, !dbg !31
  %655 = bitcast <4 x i32> %654 to <4 x float>, !dbg !31
  %656 = insertelement <4 x float> poison, float %408, i64 0, !dbg !43
  %657 = insertelement <4 x float> %656, float %409, i64 1, !dbg !43
  %658 = insertelement <4 x float> %657, float %410, i64 2, !dbg !43
  %659 = insertelement <4 x float> %658, float %411, i64 3, !dbg !43
  %660 = fmul <4 x float> %645, %659, !dbg !43
  %661 = fmul <4 x float> %660, %655, !dbg !44
  %662 = fadd <4 x float> %661, %650, !dbg !45
  %663 = fcmp olt <4 x float> %662, zeroinitializer, !dbg !46
  %664 = select <4 x i1> %663, <4 x float> zeroinitializer, <4 x float> %662, !dbg !50
  %665 = fcmp ole <4 x float> %664, zeroinitializer, !dbg !51
  %666 = extractelement <4 x float> %664, i64 0, !dbg !40
  %667 = bitcast float %666 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %667, i1 true) #4, !dbg !40
  %668 = extractelement <4 x float> %664, i64 1, !dbg !40
  %669 = bitcast float %668 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %669, i1 true) #4, !dbg !40
  %670 = extractelement <4 x float> %664, i64 2, !dbg !40
  %671 = bitcast float %670 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %671, i1 true) #4, !dbg !40
  %672 = extractelement <4 x float> %664, i64 3, !dbg !40
  %673 = bitcast float %672 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %673, i1 true) #4, !dbg !40
  %674 = insertelement <4 x i32> poison, i32 %330, i64 0, !dbg !25
  %675 = insertelement <4 x i32> %674, i32 %328, i64 1, !dbg !25
  %676 = insertelement <4 x i32> %675, i32 %326, i64 2, !dbg !25
  %677 = insertelement <4 x i32> %676, i32 %324, i64 3, !dbg !25
  %678 = bitcast <4 x i32> %677 to <4 x float>, !dbg !25
  %679 = insertelement <4 x i32> poison, i32 %331, i64 0, !dbg !27
  %680 = insertelement <4 x i32> %679, i32 %329, i64 1, !dbg !27
  %681 = insertelement <4 x i32> %680, i32 %327, i64 2, !dbg !27
  %682 = insertelement <4 x i32> %681, i32 %325, i64 3, !dbg !27
  %683 = bitcast <4 x i32> %682 to <4 x float>, !dbg !27
  %684 = fsub <4 x float> %678, %683, !dbg !42
  %685 = insertelement <4 x i32> poison, i32 %359, i64 0, !dbg !33
  %686 = insertelement <4 x i32> %685, i32 %358, i64 1, !dbg !33
  %687 = insertelement <4 x i32> %686, i32 %357, i64 2, !dbg !33
  %688 = insertelement <4 x i32> %687, i32 %356, i64 3, !dbg !33
  %689 = bitcast <4 x i32> %688 to <4 x float>, !dbg !33
  %690 = insertelement <4 x i32> poison, i32 %375, i64 0, !dbg !31
  %691 = insertelement <4 x i32> %690, i32 %374, i64 1, !dbg !31
  %692 = insertelement <4 x i32> %691, i32 %373, i64 2, !dbg !31
  %693 = insertelement <4 x i32> %692, i32 %372, i64 3, !dbg !31
  %694 = bitcast <4 x i32> %693 to <4 x float>, !dbg !31
  %695 = insertelement <4 x float> poison, float %412, i64 0, !dbg !43
  %696 = insertelement <4 x float> %695, float %413, i64 1, !dbg !43
  %697 = insertelement <4 x float> %696, float %414, i64 2, !dbg !43
  %698 = insertelement <4 x float> %697, float %415, i64 3, !dbg !43
  %699 = fmul <4 x float> %684, %698, !dbg !43
  %700 = fmul <4 x float> %699, %694, !dbg !44
  %701 = fadd <4 x float> %700, %689, !dbg !45
  %702 = fcmp olt <4 x float> %701, zeroinitializer, !dbg !46
  %703 = select <4 x i1> %702, <4 x float> zeroinitializer, <4 x float> %701, !dbg !50
  %704 = fcmp ole <4 x float> %703, zeroinitializer, !dbg !51
  %705 = extractelement <4 x float> %703, i64 0, !dbg !40
  %706 = bitcast float %705 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %486, <1 x i32> %706, i1 true) #4, !dbg !40
  %707 = extractelement <4 x float> %703, i64 1, !dbg !40
  %708 = bitcast float %707 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %708, i1 true) #4, !dbg !40
  %709 = extractelement <4 x float> %703, i64 2, !dbg !40
  %710 = bitcast float %709 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %494, <1 x i32> %710, i1 true) #4, !dbg !40
  %711 = extractelement <4 x float> %703, i64 3, !dbg !40
  %712 = bitcast float %711 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %712, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %713 = load i32, ptr addrspace(3) %501, align 4, !dbg !40
  %714 = load i32, ptr addrspace(3) %503, align 4, !dbg !40
  %715 = load i32, ptr addrspace(3) %505, align 4, !dbg !40
  %716 = load i32, ptr addrspace(3) %507, align 4, !dbg !40
  %717 = load i32, ptr addrspace(3) %511, align 4, !dbg !40
  %718 = load i32, ptr addrspace(3) %515, align 4, !dbg !40
  %719 = load i32, ptr addrspace(3) %519, align 4, !dbg !40
  %720 = load i32, ptr addrspace(3) %523, align 4, !dbg !40
  %721 = load i32, ptr addrspace(3) %527, align 4, !dbg !40
  %722 = load i32, ptr addrspace(3) %531, align 4, !dbg !40
  %723 = load i32, ptr addrspace(3) %535, align 4, !dbg !40
  %724 = load i32, ptr addrspace(3) %539, align 4, !dbg !40
  %725 = load i32, ptr addrspace(3) %543, align 4, !dbg !40
  %726 = load i32, ptr addrspace(3) %547, align 4, !dbg !40
  %727 = load i32, ptr addrspace(3) %551, align 4, !dbg !40
  %728 = load i32, ptr addrspace(3) %555, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %713, i32 %714, i32 %715, i32 %716, ptr addrspace(1) %425, i1 true) #4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %717, i32 %718, i32 %719, i32 %720, ptr addrspace(1) %427, i1 true) #4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %721, i32 %722, i32 %723, i32 %724, ptr addrspace(1) %429, i1 true) #4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %725, i32 %726, i32 %727, i32 %728, ptr addrspace(1) %431, i1 true) #4, !dbg !40
  %729 = zext <4 x i1> %587 to <4 x i8>, !dbg !52
  %730 = bitcast <4 x i8> %729 to i32, !dbg !52
  %731 = zext <4 x i1> %626 to <4 x i8>, !dbg !52
  %732 = bitcast <4 x i8> %731 to i32, !dbg !52
  %733 = zext <4 x i1> %665 to <4 x i8>, !dbg !52
  %734 = bitcast <4 x i8> %733 to i32, !dbg !52
  %735 = zext <4 x i1> %704 to <4 x i8>, !dbg !52
  %736 = bitcast <4 x i8> %735 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %730, i32 %732, i32 %734, i32 %736, ptr addrspace(1) %556, i1 true) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 52, column: 35, scope: !7)
!38 = !DILocation(line: 52, column: 30, scope: !7)
!39 = !DILocation(line: 52, column: 25, scope: !7)
!40 = !DILocation(line: 52, column: 47, scope: !7)
!41 = !DILocation(line: 53, column: 25, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 49, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 51, column: 21, scope: !7)
!52 = !DILocation(line: 53, column: 59, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
