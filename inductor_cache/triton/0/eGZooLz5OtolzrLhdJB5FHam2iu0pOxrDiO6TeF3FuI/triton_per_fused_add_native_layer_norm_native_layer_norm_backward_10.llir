; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 31, !dbg !11
  %17 = lshr i32 %15, 5, !dbg !11
  %18 = shl i32 %15, 2, !dbg !11
  %19 = and i32 %18, 508, !dbg !11
  %20 = icmp samesign ult i32 %19, 384, !dbg !12
  %21 = mul i32 %14, 384, !dbg !13
  %22 = add i32 %21, %19, !dbg !14
  %23 = sext i32 %22 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !15
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %30 = bitcast i32 %28 to float, !dbg !16
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %37 = bitcast i32 %35 to float, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = bitcast i32 %42 to float, !dbg !20
  %47 = zext nneg i32 %19 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !21
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = bitcast i32 %51 to float, !dbg !22
  %56 = bitcast i32 %52 to float, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !29
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !30
  %73 = fadd float %30, %37, !dbg !31
  %74 = fadd float %44, %54, !dbg !32
  %75 = fadd float %45, %55, !dbg !32
  %76 = fadd float %46, %56, !dbg !32
  %77 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !16
  %78 = insertelement <2 x i32> %77, i32 %59, i64 1, !dbg !16
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !16
  %80 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !18
  %81 = insertelement <2 x i32> %80, i32 %65, i64 1, !dbg !18
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !18
  %83 = fadd <2 x float> %79, %82, !dbg !31
  %84 = extractelement <2 x float> %83, i64 0, !dbg !33
  %85 = fadd float %84, %74, !dbg !33
  %86 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !16
  %87 = insertelement <2 x i32> %86, i32 %60, i64 1, !dbg !16
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !16
  %89 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !18
  %90 = insertelement <2 x i32> %89, i32 %66, i64 1, !dbg !18
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !18
  %92 = fadd <2 x float> %88, %91, !dbg !31
  %93 = extractelement <2 x float> %92, i64 0, !dbg !33
  %94 = fadd float %93, %75, !dbg !33
  %95 = extractelement <2 x float> %83, i64 1, !dbg !34
  %96 = fadd float %85, %95, !dbg !34
  %97 = extractelement <2 x float> %92, i64 1, !dbg !34
  %98 = fadd float %94, %97, !dbg !34
  %99 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !20
  %100 = insertelement <2 x i32> %99, i32 %61, i64 1, !dbg !20
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !20
  %102 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !22
  %103 = insertelement <2 x i32> %102, i32 %67, i64 1, !dbg !22
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !22
  %105 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !31
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !31
  %107 = insertelement <2 x float> %106, float %73, i64 1, !dbg !31
  %108 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !31
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !31
  %110 = insertelement <2 x float> %109, float %76, i64 1, !dbg !31
  %111 = fadd <2 x float> %107, %110, !dbg !31
  %112 = fadd <2 x float> %101, %104, !dbg !32
  %113 = fadd <2 x float> %111, %112, !dbg !33
  %114 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !35
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !35
  %116 = insertelement <2 x float> %115, float %96, i64 1, !dbg !35
  %117 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !35
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !35
  %119 = insertelement <2 x float> %118, float %98, i64 1, !dbg !35
  %120 = fadd <2 x float> %116, %119, !dbg !35
  %121 = fadd <2 x float> %113, %120, !dbg !34
  %122 = extractelement <2 x float> %121, i64 0, !dbg !36
  %123 = extractelement <2 x float> %121, i64 1, !dbg !36
  %124 = fadd float %122, %123, !dbg !36
  %125 = select i1 %20, float %124, float 0.000000e+00, !dbg !36
  %126 = bitcast float %125 to i32, !dbg !41
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 16, i32 31), !dbg !41
  %128 = bitcast i32 %127 to float, !dbg !41
  %129 = fadd float %125, %128, !dbg !36
  %130 = bitcast float %129 to i32, !dbg !41
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 8, i32 31), !dbg !41
  %132 = bitcast i32 %131 to float, !dbg !41
  %133 = fadd float %129, %132, !dbg !36
  %134 = bitcast float %133 to i32, !dbg !41
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !41
  %136 = bitcast i32 %135 to float, !dbg !41
  %137 = fadd float %133, %136, !dbg !36
  %138 = bitcast float %137 to i32, !dbg !41
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !41
  %140 = bitcast i32 %139 to float, !dbg !41
  %141 = fadd float %137, %140, !dbg !36
  %142 = bitcast float %141 to i32, !dbg !41
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !41
  %144 = bitcast i32 %143 to float, !dbg !41
  %145 = fadd float %141, %144, !dbg !36
  %146 = icmp eq i32 %16, 0, !dbg !41
  %147 = and i32 %17, 3, !dbg !41
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !41
  %149 = bitcast float %145 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 %146) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %150 = icmp slt i32 %15, 4, !dbg !41
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !41
  %152 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %151, i1 %150) #5, !dbg !41
  %153 = bitcast i32 %152 to float, !dbg !41
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !41
  %155 = bitcast i32 %154 to float, !dbg !41
  %156 = fadd float %153, %155, !dbg !36
  %157 = bitcast float %156 to i32, !dbg !41
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !41
  %159 = bitcast i32 %158 to float, !dbg !41
  %160 = fadd float %156, %159, !dbg !36
  %161 = and i32 %15, 3, !dbg !41
  %162 = icmp eq i32 %161, 0, !dbg !41
  %163 = and i1 %150, %162, !dbg !41
  %164 = bitcast float %160 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %164, i1 %163) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %165 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %166 = fadd float %165, 0.000000e+00, !dbg !42
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float 3.840000e+02) #5, !dbg !46
  %168 = fsub float %96, %167, !dbg !47
  %169 = fsub float %98, %167, !dbg !47
  %170 = extractelement <2 x float> %113, i64 1, !dbg !47
  %171 = fsub float %170, %167, !dbg !47
  %172 = fsub float %122, %167, !dbg !47
  %173 = fmul float %168, %168, !dbg !48
  %174 = fmul float %169, %169, !dbg !48
  %175 = fmul float %171, %171, !dbg !48
  %176 = fmul float %172, %172, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %177 = fadd float %173, %174, !dbg !51
  %178 = fadd float %175, %177, !dbg !51
  %179 = fadd float %176, %178, !dbg !51
  %180 = select i1 %20, float %179, float 0.000000e+00, !dbg !51
  %181 = bitcast float %180 to i32, !dbg !49
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 16, i32 31), !dbg !49
  %183 = bitcast i32 %182 to float, !dbg !49
  %184 = fadd float %180, %183, !dbg !51
  %185 = bitcast float %184 to i32, !dbg !49
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 8, i32 31), !dbg !49
  %187 = bitcast i32 %186 to float, !dbg !49
  %188 = fadd float %184, %187, !dbg !51
  %189 = bitcast float %188 to i32, !dbg !49
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !49
  %191 = bitcast i32 %190 to float, !dbg !49
  %192 = fadd float %188, %191, !dbg !51
  %193 = bitcast float %192 to i32, !dbg !49
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 2, i32 31), !dbg !49
  %195 = bitcast i32 %194 to float, !dbg !49
  %196 = fadd float %192, %195, !dbg !51
  %197 = bitcast float %196 to i32, !dbg !49
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 1, i32 31), !dbg !49
  %199 = bitcast i32 %198 to float, !dbg !49
  %200 = fadd float %196, %199, !dbg !51
  %201 = bitcast float %200 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %201, i1 %146) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %202 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %151, i1 %150) #5, !dbg !49
  %203 = bitcast i32 %202 to float, !dbg !49
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 2, i32 31), !dbg !49
  %205 = bitcast i32 %204 to float, !dbg !49
  %206 = fadd float %203, %205, !dbg !51
  %207 = bitcast float %206 to i32, !dbg !49
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 1, i32 31), !dbg !49
  %209 = bitcast i32 %208 to float, !dbg !49
  %210 = fadd float %206, %209, !dbg !51
  %211 = bitcast float %210 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %211, i1 %163) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %212 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %213 = fadd float %212, 0.000000e+00, !dbg !52
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float 3.840000e+02) #5, !dbg !54
  %215 = fadd float %214, 0x3EE4F8B580000000, !dbg !55
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not.i = icmp eq i32 %216, 0, !dbg !56
  br i1 %.not.i, label %219, label %217, !dbg !56

217:                                              ; preds = %13
  %218 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %215), !dbg !56
  br label %__nv_rsqrtf.exit, !dbg !56

219:                                              ; preds = %13
  %220 = tail call float @llvm.nvvm.rsqrt.approx.f(float %215), !dbg !56
  br label %__nv_rsqrtf.exit, !dbg !56

__nv_rsqrtf.exit:                                 ; preds = %217, %219
  %.0.i = phi float [ %218, %217 ], [ %220, %219 ], !dbg !56
  %221 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !30
  %222 = bitcast i32 %221 to float, !dbg !30
  %223 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !30
  %224 = bitcast i32 %223 to float, !dbg !30
  %225 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !30
  %226 = bitcast i32 %225 to float, !dbg !30
  %227 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !30
  %228 = bitcast i32 %227 to float, !dbg !30
  %229 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %230 = bitcast i32 %229 to float, !dbg !28
  %231 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %232 = bitcast i32 %231 to float, !dbg !28
  %233 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %234 = bitcast i32 %233 to float, !dbg !28
  %235 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %236 = bitcast i32 %235 to float, !dbg !28
  %237 = fmul float %168, %.0.i, !dbg !57
  %238 = fmul float %169, %.0.i, !dbg !57
  %239 = fmul float %171, %.0.i, !dbg !57
  %240 = fmul float %172, %.0.i, !dbg !57
  %241 = fmul float %237, %236, !dbg !58
  %242 = fmul float %238, %234, !dbg !58
  %243 = fmul float %239, %232, !dbg !58
  %244 = fmul float %240, %230, !dbg !58
  %245 = fadd float %241, %228, !dbg !59
  %246 = fadd float %242, %226, !dbg !59
  %247 = fadd float %243, %224, !dbg !59
  %248 = fadd float %244, %222, !dbg !59
  %249 = fmul float %.0.i, 0x3F65555560000000, !dbg !60
  %250 = bitcast float %96 to i32, !dbg !61
  %251 = bitcast float %98 to i32, !dbg !61
  %252 = bitcast float %170 to i32, !dbg !61
  %253 = bitcast float %122 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %250, i32 %251, i32 %252, i32 %253, ptr addrspace(1) %38, i1 %20) #5, !dbg !61
  %254 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !62
  %255 = bitcast float %237 to i32, !dbg !63
  %256 = bitcast float %238 to i32, !dbg !63
  %257 = bitcast float %239 to i32, !dbg !63
  %258 = bitcast float %240 to i32, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %255, i32 %256, i32 %257, i32 %258, ptr addrspace(1) %254, i1 %20) #5, !dbg !63
  %259 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !64
  %260 = bitcast float %245 to i32, !dbg !65
  %261 = bitcast float %246 to i32, !dbg !65
  %262 = bitcast float %247 to i32, !dbg !65
  %263 = bitcast float %248 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %261, i32 %262, i32 %263, ptr addrspace(1) %259, i1 %20) #5, !dbg !65
  %264 = sext i32 %14 to i64, !dbg !66
  %265 = getelementptr float, ptr addrspace(1) %10, i64 %264, !dbg !66
  %urem = and i32 %15, 127, !dbg !67
  %266 = icmp eq i32 %urem, 0, !dbg !67
  %267 = bitcast float %249 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %267, ptr addrspace(1) %265, i1 %266) #5, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7fwutbok7izdl5tfao4dmx2znlhkd2ilcwbsn2mrjzmb2iggj3f.py", directory: "inductor_cache/7f")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 34, scope: !7)
!20 = !DILocation(line: 34, column: 48, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 44, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 31, scope: !7)
!30 = !DILocation(line: 39, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 18, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 18, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 49, column: 59, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 73, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 45, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !50)
!50 = !DILocation(line: 57, column: 59, scope: !7)
!51 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !50)
!52 = !DILocation(line: 73, column: 15, scope: !43, inlinedAt: !53)
!53 = !DILocation(line: 57, column: 45, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 28, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 69, column: 49, scope: !7)
!62 = !DILocation(line: 70, column: 25, scope: !7)
!63 = !DILocation(line: 70, column: 46, scope: !7)
!64 = !DILocation(line: 71, column: 25, scope: !7)
!65 = !DILocation(line: 71, column: 46, scope: !7)
!66 = !DILocation(line: 72, column: 25, scope: !7)
!67 = !DILocation(line: 72, column: 37, scope: !7)
!68 = !DILocation(line: 72, column: 4, scope: !7)
