; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_reflection_pad2d_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = or disjoint i32 %11, 2, !dbg !13
  %14 = or disjoint i32 %11, 3, !dbg !13
  %15 = or disjoint i32 %11, 512, !dbg !13
  %16 = or disjoint i32 %11, 513, !dbg !13
  %17 = or disjoint i32 %11, 514, !dbg !13
  %18 = or disjoint i32 %11, 515, !dbg !13
  %19 = icmp slt i32 %11, 147968, !dbg !14
  %20 = icmp slt i32 %15, 147968, !dbg !14
  %21 = srem i32 %12, 34, !dbg !15
  %22 = srem i32 %14, 34, !dbg !15
  %23 = srem i32 %16, 34, !dbg !15
  %24 = srem i32 %18, 34, !dbg !15
  %25 = sdiv i32 %11, 34, !dbg !16
  %26 = sdiv i32 %13, 34, !dbg !16
  %27 = sdiv i32 %15, 34, !dbg !16
  %28 = sdiv i32 %17, 34, !dbg !16
  %29 = sdiv i32 %11, 1156, !dbg !17
  %30 = sdiv i32 %15, 1156, !dbg !17
  %31 = add nsw i32 %21, -1, !dbg !18
  %32 = add nsw i32 %22, -1, !dbg !18
  %33 = add nsw i32 %23, -1, !dbg !18
  %34 = add nsw i32 %24, -1, !dbg !18
  %35 = tail call i32 @llvm.abs.i32(i32 %31, i1 true), !dbg !19
  %36 = tail call i32 @llvm.abs.i32(i32 %32, i1 true), !dbg !19
  %37 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !19
  %38 = tail call i32 @llvm.abs.i32(i32 %34, i1 true), !dbg !19
  %39 = add nsw i32 %35, -31, !dbg !20
  %40 = add nsw i32 %36, -31, !dbg !20
  %41 = add nsw i32 %37, -31, !dbg !20
  %42 = add nsw i32 %38, -31, !dbg !20
  %43 = tail call i32 @llvm.abs.i32(i32 %39, i1 true), !dbg !21
  %44 = tail call i32 @llvm.abs.i32(i32 %40, i1 true), !dbg !21
  %45 = tail call i32 @llvm.abs.i32(i32 %41, i1 true), !dbg !21
  %46 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !21
  %47 = shl nsw i32 %29, 10, !dbg !22
  %48 = shl nsw i32 %30, 10, !dbg !22
  %reass.sub = or disjoint i32 %47, 1023, !dbg !23
  %49 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !15
  %50 = insertelement <2 x i32> %49, i32 %25, i64 1, !dbg !15
  %51 = srem <2 x i32> %50, splat (i32 34), !dbg !15
  %52 = add nsw <2 x i32> %51, splat (i32 -1), !dbg !18
  %53 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %52, i1 true), !dbg !19
  %54 = add nsw <2 x i32> %53, splat (i32 -31), !dbg !20
  %55 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %54, i1 true), !dbg !21
  %56 = extractelement <2 x i32> %55, i64 0, !dbg !24
  %57 = sub nuw i32 %reass.sub, %56, !dbg !24
  %58 = extractelement <2 x i32> %55, i64 1, !dbg !24
  %59 = mul nsw i32 %58, -32, !dbg !24
  %60 = add i32 %57, %59, !dbg !24
  %61 = sub nuw i32 %reass.sub, %43, !dbg !23
  %62 = add i32 %61, %59, !dbg !24
  %63 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !15
  %64 = insertelement <2 x i32> %63, i32 %26, i64 1, !dbg !15
  %65 = srem <2 x i32> %64, splat (i32 34), !dbg !15
  %66 = add nsw <2 x i32> %65, splat (i32 -1), !dbg !18
  %67 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %66, i1 true), !dbg !19
  %68 = add nsw <2 x i32> %67, splat (i32 -31), !dbg !20
  %69 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %68, i1 true), !dbg !21
  %70 = extractelement <2 x i32> %69, i64 0, !dbg !24
  %71 = sub nuw i32 %reass.sub, %70, !dbg !24
  %72 = extractelement <2 x i32> %69, i64 1, !dbg !24
  %73 = mul nsw i32 %72, -32, !dbg !24
  %74 = add i32 %71, %73, !dbg !24
  %75 = sub nuw i32 %reass.sub, %44, !dbg !23
  %76 = add i32 %75, %73, !dbg !24
  %reass.sub4 = or disjoint i32 %48, 1023, !dbg !23
  %77 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !15
  %78 = insertelement <2 x i32> %77, i32 %27, i64 1, !dbg !15
  %79 = srem <2 x i32> %78, splat (i32 34), !dbg !15
  %80 = add nsw <2 x i32> %79, splat (i32 -1), !dbg !18
  %81 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %80, i1 true), !dbg !19
  %82 = add nsw <2 x i32> %81, splat (i32 -31), !dbg !20
  %83 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %82, i1 true), !dbg !21
  %84 = extractelement <2 x i32> %83, i64 0, !dbg !24
  %85 = sub nuw i32 %reass.sub4, %84, !dbg !24
  %86 = extractelement <2 x i32> %83, i64 1, !dbg !24
  %87 = mul nsw i32 %86, -32, !dbg !24
  %88 = add i32 %85, %87, !dbg !24
  %89 = sub nuw i32 %reass.sub4, %45, !dbg !23
  %90 = add i32 %89, %87, !dbg !24
  %91 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %92 = insertelement <2 x i32> %91, i32 %28, i64 1, !dbg !15
  %93 = srem <2 x i32> %92, splat (i32 34), !dbg !15
  %94 = add nsw <2 x i32> %93, splat (i32 -1), !dbg !18
  %95 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %94, i1 true), !dbg !19
  %96 = add nsw <2 x i32> %95, splat (i32 -31), !dbg !20
  %97 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %96, i1 true), !dbg !21
  %98 = extractelement <2 x i32> %97, i64 0, !dbg !24
  %99 = sub nuw i32 %reass.sub4, %98, !dbg !24
  %100 = extractelement <2 x i32> %97, i64 1, !dbg !24
  %101 = mul nsw i32 %100, -32, !dbg !24
  %102 = add i32 %99, %101, !dbg !24
  %103 = sub nuw i32 %reass.sub4, %46, !dbg !23
  %104 = add i32 %103, %101, !dbg !24
  %105 = sext i32 %60 to i64, !dbg !25
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !25
  %107 = sext i32 %62 to i64, !dbg !25
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !25
  %109 = sext i32 %74 to i64, !dbg !25
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !25
  %111 = sext i32 %76 to i64, !dbg !25
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !25
  %113 = sext i32 %88 to i64, !dbg !25
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !25
  %115 = sext i32 %90 to i64, !dbg !25
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !25
  %117 = sext i32 %102 to i64, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !25
  %119 = sext i32 %104 to i64, !dbg !25
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !25
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %19) #2, !dbg !26
  %122 = bitcast i32 %121 to float, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %19) #2, !dbg !26
  %124 = bitcast i32 %123 to float, !dbg !26
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %19) #2, !dbg !26
  %126 = bitcast i32 %125 to float, !dbg !26
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %19) #2, !dbg !26
  %128 = bitcast i32 %127 to float, !dbg !26
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %20) #2, !dbg !26
  %130 = bitcast i32 %129 to float, !dbg !26
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %20) #2, !dbg !26
  %132 = bitcast i32 %131 to float, !dbg !26
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %20) #2, !dbg !26
  %134 = bitcast i32 %133 to float, !dbg !26
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %20) #2, !dbg !26
  %136 = bitcast i32 %135 to float, !dbg !26
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !27
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !27
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !27
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !27
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !27
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !27
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !27
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !27
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %19) #2, !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %19) #2, !dbg !28
  %148 = bitcast i32 %147 to float, !dbg !28
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %19) #2, !dbg !28
  %150 = bitcast i32 %149 to float, !dbg !28
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %19) #2, !dbg !28
  %152 = bitcast i32 %151 to float, !dbg !28
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %20) #2, !dbg !28
  %154 = bitcast i32 %153 to float, !dbg !28
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %20) #2, !dbg !28
  %156 = bitcast i32 %155 to float, !dbg !28
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %20) #2, !dbg !28
  %158 = bitcast i32 %157 to float, !dbg !28
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %20) #2, !dbg !28
  %160 = bitcast i32 %159 to float, !dbg !28
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !29
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !29
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !29
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !29
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !29
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !29
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !29
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !29
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %19) #2, !dbg !30
  %170 = bitcast i32 %169 to float, !dbg !30
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %19) #2, !dbg !30
  %172 = bitcast i32 %171 to float, !dbg !30
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %19) #2, !dbg !30
  %174 = bitcast i32 %173 to float, !dbg !30
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %19) #2, !dbg !30
  %176 = bitcast i32 %175 to float, !dbg !30
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %20) #2, !dbg !30
  %178 = bitcast i32 %177 to float, !dbg !30
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %20) #2, !dbg !30
  %180 = bitcast i32 %179 to float, !dbg !30
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %20) #2, !dbg !30
  %182 = bitcast i32 %181 to float, !dbg !30
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %20) #2, !dbg !30
  %184 = bitcast i32 %183 to float, !dbg !30
  %185 = fcmp olt float %170, 0.000000e+00, !dbg !31
  %186 = fcmp olt float %172, 0.000000e+00, !dbg !31
  %187 = fcmp olt float %174, 0.000000e+00, !dbg !31
  %188 = fcmp olt float %176, 0.000000e+00, !dbg !31
  %189 = fcmp olt float %178, 0.000000e+00, !dbg !31
  %190 = fcmp olt float %180, 0.000000e+00, !dbg !31
  %191 = fcmp olt float %182, 0.000000e+00, !dbg !31
  %192 = fcmp olt float %184, 0.000000e+00, !dbg !31
  %193 = select i1 %185, float 0.000000e+00, float %170, !dbg !35
  %194 = select i1 %186, float 0.000000e+00, float %172, !dbg !35
  %195 = select i1 %187, float 0.000000e+00, float %174, !dbg !35
  %196 = select i1 %188, float 0.000000e+00, float %176, !dbg !35
  %197 = select i1 %189, float 0.000000e+00, float %178, !dbg !35
  %198 = select i1 %190, float 0.000000e+00, float %180, !dbg !35
  %199 = select i1 %191, float 0.000000e+00, float %182, !dbg !35
  %200 = select i1 %192, float 0.000000e+00, float %184, !dbg !35
  %201 = fadd float %193, %146, !dbg !36
  %202 = fadd float %194, %148, !dbg !36
  %203 = fadd float %195, %150, !dbg !36
  %204 = fadd float %196, %152, !dbg !36
  %205 = fadd float %197, %154, !dbg !36
  %206 = fadd float %198, %156, !dbg !36
  %207 = fadd float %199, %158, !dbg !36
  %208 = fadd float %200, %160, !dbg !36
  %209 = fadd float %201, %122, !dbg !37
  %210 = fadd float %202, %124, !dbg !37
  %211 = fadd float %203, %126, !dbg !37
  %212 = fadd float %204, %128, !dbg !37
  %213 = fadd float %205, %130, !dbg !37
  %214 = fadd float %206, %132, !dbg !37
  %215 = fadd float %207, %134, !dbg !37
  %216 = fadd float %208, %136, !dbg !37
  %217 = sext i32 %11 to i64, !dbg !38
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %217, !dbg !38
  %219 = sext i32 %15 to i64, !dbg !38
  %220 = getelementptr float, ptr addrspace(1) %3, i64 %219, !dbg !38
  %221 = bitcast float %209 to i32, !dbg !39
  %222 = bitcast float %210 to i32, !dbg !39
  %223 = bitcast float %211 to i32, !dbg !39
  %224 = bitcast float %212 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %221, i32 %222, i32 %223, i32 %224, ptr addrspace(1) %218, i1 %19) #2, !dbg !39
  %225 = bitcast float %213 to i32, !dbg !39
  %226 = bitcast float %214 to i32, !dbg !39
  %227 = bitcast float %215 to i32, !dbg !39
  %228 = bitcast float %216 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %225, i32 %226, i32 %227, i32 %228, ptr addrspace(1) %220, i1 %20) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckslk4zjqezkoojs5664tp6fldupboipooehfstzpav7su224isp.py", directory: "inductor_cache/ks")
!4 = !{ptr @triton_poi_fused_add_reflection_pad2d_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_reflection_pad2d_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_reflection_pad2d_relu_6", linkageName: "triton_poi_fused_add_reflection_pad2d_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 82, scope: !7)
!19 = !DILocation(line: 28, column: 75, scope: !7)
!20 = !DILocation(line: 28, column: 63, scope: !7)
!21 = !DILocation(line: 28, column: 55, scope: !7)
!22 = !DILocation(line: 28, column: 149, scope: !7)
!23 = !DILocation(line: 28, column: 91, scope: !7)
!24 = !DILocation(line: 28, column: 144, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 154, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 154, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 154, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 32, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 34, column: 18, scope: !7)
!38 = !DILocation(line: 35, column: 25, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 35, column: 4, scope: !7)
