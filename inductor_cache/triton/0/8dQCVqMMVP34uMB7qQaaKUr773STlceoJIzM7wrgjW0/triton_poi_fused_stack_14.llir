; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_stack_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 65536, !dbg !14
  %16 = sdiv i32 %14, 65536, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen, 256, !dbg !15
  %18 = mul i32 %17, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = sdiv i32 %14, 256, !dbg !15
  %20 = srem i32 %17, 256, !dbg !17
  %21 = srem i32 %19, 256, !dbg !17
  %22 = icmp slt i32 %13, 262144, !dbg !18
  %23 = icmp slt i32 %14, 262144, !dbg !18
  %24 = shl nsw i32 %20, 9, !dbg !19
  %25 = shl nsw i32 %21, 9, !dbg !19
  %26 = shl i32 %15, 17, !dbg !20
  %27 = shl i32 %16, 17, !dbg !20
  %28 = add i32 %24, %26, !dbg !21
  %29 = add i32 %28, %.decomposed, !dbg !22
  %30 = add i32 %25, %27, !dbg !21
  %31 = add i32 %30, %.decomposed, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = sext i32 %31 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !24
  %38 = sext i32 %.decomposed to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %48 = bitcast i32 %44 to float, !dbg !28
  %49 = bitcast i32 %45 to float, !dbg !28
  %50 = bitcast i32 %46 to float, !dbg !28
  %51 = bitcast i32 %47 to float, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %57 = bitcast i32 %53 to float, !dbg !28
  %58 = bitcast i32 %54 to float, !dbg !28
  %59 = bitcast i32 %55 to float, !dbg !28
  %60 = bitcast i32 %56 to float, !dbg !28
  %61 = fadd float %48, 0x3EE4F8B580000000, !dbg !29
  %62 = fadd float %49, 0x3EE4F8B580000000, !dbg !29
  %63 = fadd float %50, 0x3EE4F8B580000000, !dbg !29
  %64 = fadd float %51, 0x3EE4F8B580000000, !dbg !29
  %65 = fadd float %57, 0x3EE4F8B580000000, !dbg !29
  %66 = fadd float %58, 0x3EE4F8B580000000, !dbg !29
  %67 = fadd float %59, 0x3EE4F8B580000000, !dbg !29
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !29
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %69, 0, !dbg !30
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %70, 0, !dbg !30
  br i1 %.not.i, label %76, label %71, !dbg !30

71:                                               ; preds = %7
  br i1 %.not1.i, label %74, label %72, !dbg !30

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

76:                                               ; preds = %7
  br i1 %.not1.i, label %79, label %77, !dbg !30

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !30
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %81, 0, !dbg !30
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !30
  br i1 %.not.i1, label %88, label %83, !dbg !30

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !30

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !30

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !30
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %93, 0, !dbg !30
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %94, 0, !dbg !30
  br i1 %.not.i6, label %100, label %95, !dbg !30

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !30

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !30

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %96, %98, %101, %103
  %.0.i8 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !30
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %105, 0, !dbg !30
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %106, 0, !dbg !30
  br i1 %.not.i11, label %112, label %107, !dbg !30

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !30

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !30

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %108, %110, %113, %115
  %.0.i13 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !30
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %117, 0, !dbg !30
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %118, 0, !dbg !30
  br i1 %.not.i16, label %124, label %119, !dbg !30

119:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %122, label %120, !dbg !30

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

124:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %127, label %125, !dbg !30

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %120, %122, %125, %127
  %.0.i18 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !30
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %129, 0, !dbg !30
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %130, 0, !dbg !30
  br i1 %.not.i21, label %136, label %131, !dbg !30

131:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %134, label %132, !dbg !30

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

136:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %139, label %137, !dbg !30

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %132, %134, %137, %139
  %.0.i23 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !30
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %141, 0, !dbg !30
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %142, 0, !dbg !30
  br i1 %.not.i26, label %148, label %143, !dbg !30

143:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %146, label %144, !dbg !30

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

148:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %151, label %149, !dbg !30

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %144, %146, %149, %151
  %.0.i28 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !30
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %153, 0, !dbg !30
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %154, 0, !dbg !30
  br i1 %.not.i31, label %160, label %155, !dbg !30

155:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %158, label %156, !dbg !30

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

160:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %163, label %161, !dbg !30

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %156, %158, %161, %163
  %.0.i33 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !30
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !32
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %173, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !33
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %173, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !33
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !34
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !35
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !35
  %179 = icmp sgt i32 %13, 262143, !dbg !36
  %180 = icmp sgt i32 %14, 262143, !dbg !36
  %181 = add nsw i32 %.decomposed, 256, !dbg !37
  %182 = add i32 %26, -524288, !dbg !38
  %183 = add i32 %182, %181, !dbg !39
  %184 = add i32 %183, %24, !dbg !40
  %185 = add i32 %27, -524288, !dbg !38
  %186 = add i32 %185, %181, !dbg !39
  %187 = add i32 %186, %25, !dbg !40
  %188 = sext i32 %184 to i64, !dbg !41
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !41
  %190 = sext i32 %187 to i64, !dbg !41
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !41
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #3, !dbg !42
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !42
  %194 = zext nneg i32 %181 to i64, !dbg !43
  %195 = getelementptr float, ptr addrspace(1) %1, i64 %194, !dbg !43
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #3, !dbg !44
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !44
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !45
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #3, !dbg !46
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !46
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !46
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !46
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !46
  %204 = bitcast i32 %200 to float, !dbg !46
  %205 = bitcast i32 %201 to float, !dbg !46
  %206 = bitcast i32 %202 to float, !dbg !46
  %207 = bitcast i32 %203 to float, !dbg !46
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !46
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !46
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !46
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !46
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !46
  %213 = bitcast i32 %209 to float, !dbg !46
  %214 = bitcast i32 %210 to float, !dbg !46
  %215 = bitcast i32 %211 to float, !dbg !46
  %216 = bitcast i32 %212 to float, !dbg !46
  %217 = fadd float %204, 0x3EE4F8B580000000, !dbg !47
  %218 = fadd float %205, 0x3EE4F8B580000000, !dbg !47
  %219 = fadd float %206, 0x3EE4F8B580000000, !dbg !47
  %220 = fadd float %207, 0x3EE4F8B580000000, !dbg !47
  %221 = fadd float %213, 0x3EE4F8B580000000, !dbg !47
  %222 = fadd float %214, 0x3EE4F8B580000000, !dbg !47
  %223 = fadd float %215, 0x3EE4F8B580000000, !dbg !47
  %224 = fadd float %216, 0x3EE4F8B580000000, !dbg !47
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i36 = icmp eq i32 %225, 0, !dbg !48
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i39 = icmp eq i32 %226, 0, !dbg !48
  br i1 %.not.i36, label %232, label %227, !dbg !48

227:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %230, label %228, !dbg !48

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #3, !dbg !48
  br label %__nv_sqrtf.exit40, !dbg !48

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #3, !dbg !48
  br label %__nv_sqrtf.exit40, !dbg !48

232:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %235, label %233, !dbg !48

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #3, !dbg !48
  br label %__nv_sqrtf.exit40, !dbg !48

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #3, !dbg !48
  br label %__nv_sqrtf.exit40, !dbg !48

__nv_sqrtf.exit40:                                ; preds = %228, %230, %233, %235
  %.0.i38 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !48
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i41 = icmp eq i32 %237, 0, !dbg !48
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i44 = icmp eq i32 %238, 0, !dbg !48
  br i1 %.not.i41, label %244, label %239, !dbg !48

239:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %242, label %240, !dbg !48

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !48
  br label %__nv_sqrtf.exit45, !dbg !48

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !48
  br label %__nv_sqrtf.exit45, !dbg !48

244:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %247, label %245, !dbg !48

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !48
  br label %__nv_sqrtf.exit45, !dbg !48

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !48
  br label %__nv_sqrtf.exit45, !dbg !48

__nv_sqrtf.exit45:                                ; preds = %240, %242, %245, %247
  %.0.i43 = phi float [ %241, %240 ], [ %243, %242 ], [ %246, %245 ], [ %248, %247 ], !dbg !48
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i46 = icmp eq i32 %249, 0, !dbg !48
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i49 = icmp eq i32 %250, 0, !dbg !48
  br i1 %.not.i46, label %256, label %251, !dbg !48

251:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %254, label %252, !dbg !48

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #3, !dbg !48
  br label %__nv_sqrtf.exit50, !dbg !48

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #3, !dbg !48
  br label %__nv_sqrtf.exit50, !dbg !48

256:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %259, label %257, !dbg !48

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #3, !dbg !48
  br label %__nv_sqrtf.exit50, !dbg !48

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #3, !dbg !48
  br label %__nv_sqrtf.exit50, !dbg !48

__nv_sqrtf.exit50:                                ; preds = %252, %254, %257, %259
  %.0.i48 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !48
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i51 = icmp eq i32 %261, 0, !dbg !48
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i54 = icmp eq i32 %262, 0, !dbg !48
  br i1 %.not.i51, label %268, label %263, !dbg !48

263:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %266, label %264, !dbg !48

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !48
  br label %__nv_sqrtf.exit55, !dbg !48

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !48
  br label %__nv_sqrtf.exit55, !dbg !48

268:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %271, label %269, !dbg !48

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !48
  br label %__nv_sqrtf.exit55, !dbg !48

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !48
  br label %__nv_sqrtf.exit55, !dbg !48

__nv_sqrtf.exit55:                                ; preds = %264, %266, %269, %271
  %.0.i53 = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !48
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i56 = icmp eq i32 %273, 0, !dbg !48
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i59 = icmp eq i32 %274, 0, !dbg !48
  br i1 %.not.i56, label %280, label %275, !dbg !48

275:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %278, label %276, !dbg !48

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !48
  br label %__nv_sqrtf.exit60, !dbg !48

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !48
  br label %__nv_sqrtf.exit60, !dbg !48

280:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %283, label %281, !dbg !48

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !48
  br label %__nv_sqrtf.exit60, !dbg !48

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !48
  br label %__nv_sqrtf.exit60, !dbg !48

__nv_sqrtf.exit60:                                ; preds = %276, %278, %281, %283
  %.0.i58 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !48
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i61 = icmp eq i32 %285, 0, !dbg !48
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i64 = icmp eq i32 %286, 0, !dbg !48
  br i1 %.not.i61, label %292, label %287, !dbg !48

287:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %290, label %288, !dbg !48

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !48
  br label %__nv_sqrtf.exit65, !dbg !48

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !48
  br label %__nv_sqrtf.exit65, !dbg !48

292:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %295, label %293, !dbg !48

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !48
  br label %__nv_sqrtf.exit65, !dbg !48

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !48
  br label %__nv_sqrtf.exit65, !dbg !48

__nv_sqrtf.exit65:                                ; preds = %288, %290, %293, %295
  %.0.i63 = phi float [ %289, %288 ], [ %291, %290 ], [ %294, %293 ], [ %296, %295 ], !dbg !48
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i66 = icmp eq i32 %297, 0, !dbg !48
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i69 = icmp eq i32 %298, 0, !dbg !48
  br i1 %.not.i66, label %304, label %299, !dbg !48

299:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %302, label %300, !dbg !48

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !48
  br label %__nv_sqrtf.exit70, !dbg !48

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !48
  br label %__nv_sqrtf.exit70, !dbg !48

304:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %307, label %305, !dbg !48

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !48
  br label %__nv_sqrtf.exit70, !dbg !48

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !48
  br label %__nv_sqrtf.exit70, !dbg !48

__nv_sqrtf.exit70:                                ; preds = %300, %302, %305, %307
  %.0.i68 = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !48
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i71 = icmp eq i32 %309, 0, !dbg !48
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i74 = icmp eq i32 %310, 0, !dbg !48
  br i1 %.not.i71, label %316, label %311, !dbg !48

311:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %314, label %312, !dbg !48

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !48
  br label %__nv_sqrtf.exit75, !dbg !48

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !48
  br label %__nv_sqrtf.exit75, !dbg !48

316:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %319, label %317, !dbg !48

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !48
  br label %__nv_sqrtf.exit75, !dbg !48

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !48
  br label %__nv_sqrtf.exit75, !dbg !48

__nv_sqrtf.exit75:                                ; preds = %312, %314, %317, %319
  %.0.i73 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !48
  %321 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !42
  %322 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !44
  %323 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !42
  %324 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !44
  %325 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !42
  %326 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !44
  %327 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !42
  %328 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !44
  %329 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !42
  %330 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !44
  %331 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !42
  %332 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !44
  %333 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !42
  %334 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !44
  %335 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !42
  %336 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !44
  %337 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %338 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %339 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !33
  %340 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !35
  %341 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %342 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %343 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !33
  %344 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !35
  %345 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %346 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %347 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !33
  %348 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !35
  %349 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %350 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %351 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !33
  %352 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !35
  %353 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %354 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %355 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !33
  %356 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !35
  %357 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %358 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %359 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !33
  %360 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !35
  %361 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %362 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %363 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !33
  %364 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !35
  %365 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %366 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %367 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !33
  %368 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !35
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !49
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !49
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !49
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !49
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !49
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !49
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !49
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !49
  %377 = getelementptr float, ptr addrspace(1) %3, i64 %194, !dbg !50
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %377, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #3, !dbg !51
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !51
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !51
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !51
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !51
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %377, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !51
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !51
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !51
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !51
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !51
  %388 = getelementptr float, ptr addrspace(1) %4, i64 %194, !dbg !52
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %388, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #3, !dbg !53
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !53
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !53
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !53
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !53
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %388, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !53
  %395 = extractvalue { i32, i32, i32, i32 } %394, 0, !dbg !53
  %396 = extractvalue { i32, i32, i32, i32 } %394, 1, !dbg !53
  %397 = extractvalue { i32, i32, i32, i32 } %394, 2, !dbg !53
  %398 = extractvalue { i32, i32, i32, i32 } %394, 3, !dbg !53
  %399 = insertelement <16 x i32> poison, i32 %321, i64 0, !dbg !42
  %400 = insertelement <16 x i32> %399, i32 %323, i64 1, !dbg !42
  %401 = insertelement <16 x i32> %400, i32 %325, i64 2, !dbg !42
  %402 = insertelement <16 x i32> %401, i32 %327, i64 3, !dbg !42
  %403 = insertelement <16 x i32> %402, i32 %329, i64 4, !dbg !42
  %404 = insertelement <16 x i32> %403, i32 %331, i64 5, !dbg !42
  %405 = insertelement <16 x i32> %404, i32 %333, i64 6, !dbg !42
  %406 = insertelement <16 x i32> %405, i32 %335, i64 7, !dbg !42
  %407 = insertelement <16 x i32> %406, i32 %365, i64 8, !dbg !42
  %408 = insertelement <16 x i32> %407, i32 %361, i64 9, !dbg !42
  %409 = insertelement <16 x i32> %408, i32 %357, i64 10, !dbg !42
  %410 = insertelement <16 x i32> %409, i32 %353, i64 11, !dbg !42
  %411 = insertelement <16 x i32> %410, i32 %349, i64 12, !dbg !42
  %412 = insertelement <16 x i32> %411, i32 %345, i64 13, !dbg !42
  %413 = insertelement <16 x i32> %412, i32 %341, i64 14, !dbg !42
  %414 = insertelement <16 x i32> %413, i32 %337, i64 15, !dbg !42
  %415 = bitcast <16 x i32> %414 to <16 x float>, !dbg !42
  %416 = insertelement <16 x i32> poison, i32 %322, i64 0, !dbg !44
  %417 = insertelement <16 x i32> %416, i32 %324, i64 1, !dbg !44
  %418 = insertelement <16 x i32> %417, i32 %326, i64 2, !dbg !44
  %419 = insertelement <16 x i32> %418, i32 %328, i64 3, !dbg !44
  %420 = insertelement <16 x i32> %419, i32 %330, i64 4, !dbg !44
  %421 = insertelement <16 x i32> %420, i32 %332, i64 5, !dbg !44
  %422 = insertelement <16 x i32> %421, i32 %334, i64 6, !dbg !44
  %423 = insertelement <16 x i32> %422, i32 %336, i64 7, !dbg !44
  %424 = insertelement <16 x i32> %423, i32 %366, i64 8, !dbg !44
  %425 = insertelement <16 x i32> %424, i32 %362, i64 9, !dbg !44
  %426 = insertelement <16 x i32> %425, i32 %358, i64 10, !dbg !44
  %427 = insertelement <16 x i32> %426, i32 %354, i64 11, !dbg !44
  %428 = insertelement <16 x i32> %427, i32 %350, i64 12, !dbg !44
  %429 = insertelement <16 x i32> %428, i32 %346, i64 13, !dbg !44
  %430 = insertelement <16 x i32> %429, i32 %342, i64 14, !dbg !44
  %431 = insertelement <16 x i32> %430, i32 %338, i64 15, !dbg !44
  %432 = bitcast <16 x i32> %431 to <16 x float>, !dbg !44
  %433 = fsub <16 x float> %415, %432, !dbg !54
  %434 = insertelement <16 x float> poison, float %376, i64 0, !dbg !55
  %435 = insertelement <16 x float> %434, float %375, i64 1, !dbg !55
  %436 = insertelement <16 x float> %435, float %374, i64 2, !dbg !55
  %437 = insertelement <16 x float> %436, float %373, i64 3, !dbg !55
  %438 = insertelement <16 x float> %437, float %372, i64 4, !dbg !55
  %439 = insertelement <16 x float> %438, float %371, i64 5, !dbg !55
  %440 = insertelement <16 x float> %439, float %370, i64 6, !dbg !55
  %441 = insertelement <16 x float> %440, float %369, i64 7, !dbg !55
  %442 = insertelement <16 x float> %441, float %165, i64 8, !dbg !55
  %443 = insertelement <16 x float> %442, float %166, i64 9, !dbg !55
  %444 = insertelement <16 x float> %443, float %167, i64 10, !dbg !55
  %445 = insertelement <16 x float> %444, float %168, i64 11, !dbg !55
  %446 = insertelement <16 x float> %445, float %169, i64 12, !dbg !55
  %447 = insertelement <16 x float> %446, float %170, i64 13, !dbg !55
  %448 = insertelement <16 x float> %447, float %171, i64 14, !dbg !55
  %449 = insertelement <16 x float> %448, float %172, i64 15, !dbg !55
  %450 = fmul <16 x float> %433, %449, !dbg !55
  %451 = insertelement <16 x i32> poison, i32 %387, i64 0, !dbg !51
  %452 = insertelement <16 x i32> %451, i32 %386, i64 1, !dbg !51
  %453 = insertelement <16 x i32> %452, i32 %385, i64 2, !dbg !51
  %454 = insertelement <16 x i32> %453, i32 %384, i64 3, !dbg !51
  %455 = insertelement <16 x i32> %454, i32 %382, i64 4, !dbg !51
  %456 = insertelement <16 x i32> %455, i32 %381, i64 5, !dbg !51
  %457 = insertelement <16 x i32> %456, i32 %380, i64 6, !dbg !51
  %458 = insertelement <16 x i32> %457, i32 %379, i64 7, !dbg !51
  %459 = insertelement <16 x i32> %458, i32 %367, i64 8, !dbg !51
  %460 = insertelement <16 x i32> %459, i32 %363, i64 9, !dbg !51
  %461 = insertelement <16 x i32> %460, i32 %359, i64 10, !dbg !51
  %462 = insertelement <16 x i32> %461, i32 %355, i64 11, !dbg !51
  %463 = insertelement <16 x i32> %462, i32 %351, i64 12, !dbg !51
  %464 = insertelement <16 x i32> %463, i32 %347, i64 13, !dbg !51
  %465 = insertelement <16 x i32> %464, i32 %343, i64 14, !dbg !51
  %466 = insertelement <16 x i32> %465, i32 %339, i64 15, !dbg !51
  %467 = bitcast <16 x i32> %466 to <16 x float>, !dbg !51
  %468 = fmul <16 x float> %450, %467, !dbg !56
  %469 = insertelement <16 x i32> poison, i32 %398, i64 0, !dbg !53
  %470 = insertelement <16 x i32> %469, i32 %397, i64 1, !dbg !53
  %471 = insertelement <16 x i32> %470, i32 %396, i64 2, !dbg !53
  %472 = insertelement <16 x i32> %471, i32 %395, i64 3, !dbg !53
  %473 = insertelement <16 x i32> %472, i32 %393, i64 4, !dbg !53
  %474 = insertelement <16 x i32> %473, i32 %392, i64 5, !dbg !53
  %475 = insertelement <16 x i32> %474, i32 %391, i64 6, !dbg !53
  %476 = insertelement <16 x i32> %475, i32 %390, i64 7, !dbg !53
  %477 = insertelement <16 x i32> %476, i32 %368, i64 8, !dbg !53
  %478 = insertelement <16 x i32> %477, i32 %364, i64 9, !dbg !53
  %479 = insertelement <16 x i32> %478, i32 %360, i64 10, !dbg !53
  %480 = insertelement <16 x i32> %479, i32 %356, i64 11, !dbg !53
  %481 = insertelement <16 x i32> %480, i32 %352, i64 12, !dbg !53
  %482 = insertelement <16 x i32> %481, i32 %348, i64 13, !dbg !53
  %483 = insertelement <16 x i32> %482, i32 %344, i64 14, !dbg !53
  %484 = insertelement <16 x i32> %483, i32 %340, i64 15, !dbg !53
  %485 = bitcast <16 x i32> %484 to <16 x float>, !dbg !53
  %486 = fadd <16 x float> %468, %485, !dbg !57
  %487 = fcmp olt <16 x float> %486, zeroinitializer, !dbg !58
  %488 = extractelement <16 x i1> %487, i64 15, !dbg !62
  %489 = extractelement <16 x float> %486, i64 15, !dbg !62
  %490 = select i1 %488, float 0.000000e+00, float %489, !dbg !62
  %491 = extractelement <16 x i1> %487, i64 14, !dbg !62
  %492 = extractelement <16 x float> %486, i64 14, !dbg !62
  %493 = select i1 %491, float 0.000000e+00, float %492, !dbg !62
  %494 = extractelement <16 x i1> %487, i64 13, !dbg !62
  %495 = extractelement <16 x float> %486, i64 13, !dbg !62
  %496 = select i1 %494, float 0.000000e+00, float %495, !dbg !62
  %497 = extractelement <16 x i1> %487, i64 12, !dbg !62
  %498 = extractelement <16 x float> %486, i64 12, !dbg !62
  %499 = select i1 %497, float 0.000000e+00, float %498, !dbg !62
  %500 = extractelement <16 x i1> %487, i64 11, !dbg !62
  %501 = extractelement <16 x float> %486, i64 11, !dbg !62
  %502 = select i1 %500, float 0.000000e+00, float %501, !dbg !62
  %503 = extractelement <16 x i1> %487, i64 10, !dbg !62
  %504 = extractelement <16 x float> %486, i64 10, !dbg !62
  %505 = select i1 %503, float 0.000000e+00, float %504, !dbg !62
  %506 = extractelement <16 x i1> %487, i64 9, !dbg !62
  %507 = extractelement <16 x float> %486, i64 9, !dbg !62
  %508 = select i1 %506, float 0.000000e+00, float %507, !dbg !62
  %509 = extractelement <16 x i1> %487, i64 8, !dbg !62
  %510 = extractelement <16 x float> %486, i64 8, !dbg !62
  %511 = select i1 %509, float 0.000000e+00, float %510, !dbg !62
  %512 = extractelement <16 x i1> %487, i64 7, !dbg !64
  %513 = extractelement <16 x float> %486, i64 7, !dbg !64
  %514 = select i1 %512, float 0.000000e+00, float %513, !dbg !64
  %515 = extractelement <16 x i1> %487, i64 6, !dbg !64
  %516 = extractelement <16 x float> %486, i64 6, !dbg !64
  %517 = select i1 %515, float 0.000000e+00, float %516, !dbg !64
  %518 = extractelement <16 x i1> %487, i64 5, !dbg !64
  %519 = extractelement <16 x float> %486, i64 5, !dbg !64
  %520 = select i1 %518, float 0.000000e+00, float %519, !dbg !64
  %521 = extractelement <16 x i1> %487, i64 4, !dbg !64
  %522 = extractelement <16 x float> %486, i64 4, !dbg !64
  %523 = select i1 %521, float 0.000000e+00, float %522, !dbg !64
  %524 = extractelement <16 x i1> %487, i64 3, !dbg !64
  %525 = extractelement <16 x float> %486, i64 3, !dbg !64
  %526 = select i1 %524, float 0.000000e+00, float %525, !dbg !64
  %527 = extractelement <16 x i1> %487, i64 2, !dbg !64
  %528 = extractelement <16 x float> %486, i64 2, !dbg !64
  %529 = select i1 %527, float 0.000000e+00, float %528, !dbg !64
  %530 = extractelement <16 x i1> %487, i64 1, !dbg !64
  %531 = extractelement <16 x float> %486, i64 1, !dbg !64
  %532 = select i1 %530, float 0.000000e+00, float %531, !dbg !64
  %533 = extractelement <16 x i1> %487, i64 0, !dbg !64
  %534 = extractelement <16 x float> %486, i64 0, !dbg !64
  %535 = select i1 %533, float 0.000000e+00, float %534, !dbg !64
  %536 = select i1 %22, float %511, float %514, !dbg !65
  %537 = select i1 %22, float %508, float %517, !dbg !65
  %538 = select i1 %22, float %505, float %520, !dbg !65
  %539 = select i1 %22, float %502, float %523, !dbg !65
  %540 = select i1 %23, float %499, float %526, !dbg !65
  %541 = select i1 %23, float %496, float %529, !dbg !65
  %542 = select i1 %23, float %493, float %532, !dbg !65
  %543 = select i1 %23, float %490, float %535, !dbg !65
  %544 = sext i32 %13 to i64, !dbg !66
  %545 = getelementptr float, ptr addrspace(1) %5, i64 %544, !dbg !66
  %546 = sext i32 %14 to i64, !dbg !66
  %547 = getelementptr float, ptr addrspace(1) %5, i64 %546, !dbg !66
  %548 = bitcast float %536 to i32, !dbg !67
  %549 = bitcast float %537 to i32, !dbg !67
  %550 = bitcast float %538 to i32, !dbg !67
  %551 = bitcast float %539 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %548, i32 %549, i32 %550, i32 %551, ptr addrspace(1) %545, i1 true) #3, !dbg !67
  %552 = bitcast float %540 to i32, !dbg !67
  %553 = bitcast float %541 to i32, !dbg !67
  %554 = bitcast float %542 to i32, !dbg !67
  %555 = bitcast float %543 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %552, i32 %553, i32 %554, i32 %555, ptr addrspace(1) %547, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbxfo4uibkqwcdqwfym2zr4t4cxxuajleytlmmvy6dhi6sbd4wjf.py", directory: "inductor_cache/bx")
!4 = !{ptr @triton_poi_fused_stack_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_14", linkageName: "triton_poi_fused_stack_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 28, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 58, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 37, scope: !7)
!38 = !DILocation(line: 56, column: 42, scope: !7)
!39 = !DILocation(line: 56, column: 59, scope: !7)
!40 = !DILocation(line: 56, column: 51, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 72, scope: !7)
!43 = !DILocation(line: 57, column: 31, scope: !7)
!44 = !DILocation(line: 57, column: 42, scope: !7)
!45 = !DILocation(line: 59, column: 31, scope: !7)
!46 = !DILocation(line: 59, column: 42, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 27, scope: !7)
!49 = !DILocation(line: 64, column: 20, scope: !7)
!50 = !DILocation(line: 68, column: 31, scope: !7)
!51 = !DILocation(line: 68, column: 42, scope: !7)
!52 = !DILocation(line: 70, column: 31, scope: !7)
!53 = !DILocation(line: 70, column: 42, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 67, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 20, scope: !7)
!57 = !DILocation(line: 71, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 73, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !63)
!63 = !DILocation(line: 50, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!65 = !DILocation(line: 0, scope: !7)
!66 = !DILocation(line: 77, column: 25, scope: !7)
!67 = !DILocation(line: 77, column: 37, scope: !7)
!68 = !DILocation(line: 77, column: 4, scope: !7)
