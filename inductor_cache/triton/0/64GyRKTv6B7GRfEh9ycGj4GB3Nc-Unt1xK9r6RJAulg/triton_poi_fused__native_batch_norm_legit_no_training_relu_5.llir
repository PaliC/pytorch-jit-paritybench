; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 5, !dbg !15
  %17 = lshr i32 %11, 3, !dbg !16
  %18 = and i32 %17, 15, !dbg !16
  %19 = or disjoint i32 %16, %18, !dbg !17
  %20 = or disjoint i32 %19, 16, !dbg !17
  %21 = icmp slt i32 %19, 961, !dbg !18
  %22 = icmp slt i32 %20, 961, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %23 = sdiv i32 %.frozen, 256, !dbg !19
  %24 = mul i32 %23, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = shl i32 %19, 8, !dbg !21
  %26 = shl i32 %20, 8, !dbg !21
  %27 = mul i32 %23, 246016, !dbg !22
  %28 = add i32 %27, %.decomposed, !dbg !23
  %29 = add i32 %28, %25, !dbg !24
  %30 = add i32 %28, %26, !dbg !24
  %31 = sext i32 %29 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = sext i32 %30 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %21) #4, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !26
  %37 = sext i32 %.decomposed to i64, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !27
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !29
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !30
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !30
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !30
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !30
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !30
  %46 = bitcast i32 %42 to float, !dbg !30
  %47 = bitcast i32 %43 to float, !dbg !30
  %48 = bitcast i32 %44 to float, !dbg !30
  %49 = bitcast i32 %45 to float, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !31
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !33
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !34
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %58, 0, !dbg !36
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %59, 0, !dbg !36
  br i1 %.not.i, label %65, label %60, !dbg !36

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !36

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

65:                                               ; preds = %8
  br i1 %.not1.i, label %68, label %66, !dbg !36

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !36
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i4 = icmp eq i32 %70, 0, !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i7 = icmp eq i32 %71, 0, !dbg !36
  br i1 %.not.i4, label %77, label %72, !dbg !36

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %75, label %73, !dbg !36

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %80, label %78, !dbg !36

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

__nv_sqrtf.exit8:                                 ; preds = %73, %75, %78, %80
  %.0.i6 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !36
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i9 = icmp eq i32 %82, 0, !dbg !36
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i12 = icmp eq i32 %83, 0, !dbg !36
  br i1 %.not.i9, label %89, label %84, !dbg !36

84:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %87, label %85, !dbg !36

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

89:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %92, label %90, !dbg !36

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

__nv_sqrtf.exit13:                                ; preds = %85, %87, %90, %92
  %.0.i11 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !36
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i14 = icmp eq i32 %94, 0, !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i17 = icmp eq i32 %95, 0, !dbg !36
  br i1 %.not.i14, label %101, label %96, !dbg !36

96:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %99, label %97, !dbg !36

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

101:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %104, label %102, !dbg !36

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

__nv_sqrtf.exit18:                                ; preds = %97, %99, %102, %104
  %.0.i16 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !36
  %106 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !26
  %115 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !26
  %116 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !26
  %118 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !34
  %122 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !32
  %123 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !32
  %124 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !32
  %.lobit1 = lshr i32 %11, 5, !dbg !12
  %126 = and i32 %.lobit1, 3, !dbg !12
  %127 = or disjoint i32 %126, %10, !dbg !13
  %128 = or disjoint i32 %127, 28, !dbg !13
  %.frozen19 = freeze i32 %128, !dbg !19
  %129 = sdiv i32 %.frozen19, 256, !dbg !19
  %130 = or disjoint i32 %127, 24, !dbg !13
  %.frozen21 = freeze i32 %130, !dbg !19
  %131 = sdiv i32 %.frozen21, 256, !dbg !19
  %132 = or disjoint i32 %127, 20, !dbg !13
  %.frozen23 = freeze i32 %132, !dbg !19
  %133 = sdiv i32 %.frozen23, 256, !dbg !19
  %134 = or disjoint i32 %127, 16, !dbg !13
  %.frozen25 = freeze i32 %134, !dbg !19
  %135 = sdiv i32 %.frozen25, 256, !dbg !19
  %136 = or disjoint i32 %127, 12, !dbg !13
  %.frozen27 = freeze i32 %136, !dbg !19
  %137 = sdiv i32 %.frozen27, 256, !dbg !19
  %138 = or disjoint i32 %127, 8, !dbg !13
  %.frozen29 = freeze i32 %138, !dbg !19
  %139 = sdiv i32 %.frozen29, 256, !dbg !19
  %140 = or disjoint i32 %127, 4, !dbg !13
  %.frozen31 = freeze i32 %140, !dbg !19
  %141 = sdiv i32 %.frozen31, 256, !dbg !19
  %.frozen33 = freeze i32 %127, !dbg !19
  %142 = sdiv i32 %.frozen33, 256, !dbg !19
  %143 = mul i32 %129, 256, !dbg !20
  %.decomposed20 = sub i32 %.frozen19, %143, !dbg !20
  %144 = mul i32 %131, 256, !dbg !20
  %.decomposed22 = sub i32 %.frozen21, %144, !dbg !20
  %145 = mul i32 %133, 256, !dbg !20
  %.decomposed24 = sub i32 %.frozen23, %145, !dbg !20
  %146 = mul i32 %135, 256, !dbg !20
  %.decomposed26 = sub i32 %.frozen25, %146, !dbg !20
  %147 = mul i32 %137, 256, !dbg !20
  %.decomposed28 = sub i32 %.frozen27, %147, !dbg !20
  %148 = mul i32 %139, 256, !dbg !20
  %.decomposed30 = sub i32 %.frozen29, %148, !dbg !20
  %149 = mul i32 %141, 256, !dbg !20
  %.decomposed32 = sub i32 %.frozen31, %149, !dbg !20
  %150 = mul i32 %142, 256, !dbg !20
  %.decomposed34 = sub i32 %.frozen33, %150, !dbg !20
  %151 = and i32 %11, 31, !dbg !16
  %152 = or disjoint i32 %16, %151, !dbg !17
  %153 = icmp slt i32 %152, 961, !dbg !18
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !37
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !37
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !37
  %158 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !28
  %159 = insertelement <4 x i32> %158, i32 %109, i64 1, !dbg !28
  %160 = insertelement <4 x i32> %159, i32 %111, i64 2, !dbg !28
  %161 = insertelement <4 x i32> %160, i32 %113, i64 3, !dbg !28
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !28
  %163 = shufflevector <4 x float> %162, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %164 = insertelement <8 x i32> poison, i32 %106, i64 0, !dbg !26
  %165 = insertelement <8 x i32> %164, i32 %108, i64 1, !dbg !26
  %166 = insertelement <8 x i32> %165, i32 %110, i64 2, !dbg !26
  %167 = insertelement <8 x i32> %166, i32 %112, i64 3, !dbg !26
  %168 = insertelement <8 x i32> %167, i32 %114, i64 4, !dbg !26
  %169 = insertelement <8 x i32> %168, i32 %115, i64 5, !dbg !26
  %170 = insertelement <8 x i32> %169, i32 %116, i64 6, !dbg !26
  %171 = insertelement <8 x i32> %170, i32 %117, i64 7, !dbg !26
  %172 = bitcast <8 x i32> %171 to <8 x float>, !dbg !26
  %173 = fsub <8 x float> %172, %163, !dbg !38
  %174 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !34
  %175 = insertelement <4 x i32> %174, i32 %119, i64 1, !dbg !34
  %176 = insertelement <4 x i32> %175, i32 %120, i64 2, !dbg !34
  %177 = insertelement <4 x i32> %176, i32 %121, i64 3, !dbg !34
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !34
  %179 = shufflevector <4 x float> %178, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %180 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !32
  %181 = insertelement <4 x i32> %180, i32 %123, i64 1, !dbg !32
  %182 = insertelement <4 x i32> %181, i32 %124, i64 2, !dbg !32
  %183 = insertelement <4 x i32> %182, i32 %125, i64 3, !dbg !32
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !32
  %185 = shufflevector <4 x float> %184, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %186 = insertelement <8 x float> poison, float %157, i64 0, !dbg !39
  %187 = insertelement <8 x float> %186, float %156, i64 1, !dbg !39
  %188 = insertelement <8 x float> %187, float %155, i64 2, !dbg !39
  %189 = insertelement <8 x float> %188, float %154, i64 3, !dbg !39
  %190 = shufflevector <8 x float> %189, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %191 = fmul <8 x float> %173, %190, !dbg !39
  %192 = fmul <8 x float> %191, %185, !dbg !40
  %193 = fadd <8 x float> %192, %179, !dbg !41
  %194 = fcmp olt <8 x float> %193, zeroinitializer, !dbg !42
  %195 = extractelement <8 x i1> %194, i64 7, !dbg !46
  %196 = extractelement <8 x float> %193, i64 7, !dbg !46
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !46
  %198 = extractelement <8 x i1> %194, i64 6, !dbg !46
  %199 = extractelement <8 x float> %193, i64 6, !dbg !46
  %200 = select i1 %198, float 0.000000e+00, float %199, !dbg !46
  %201 = extractelement <8 x i1> %194, i64 5, !dbg !46
  %202 = extractelement <8 x float> %193, i64 5, !dbg !46
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !46
  %204 = extractelement <8 x i1> %194, i64 4, !dbg !46
  %205 = extractelement <8 x float> %193, i64 4, !dbg !46
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !46
  %207 = extractelement <8 x i1> %194, i64 3, !dbg !46
  %208 = extractelement <8 x float> %193, i64 3, !dbg !46
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !46
  %210 = extractelement <8 x i1> %194, i64 2, !dbg !46
  %211 = extractelement <8 x float> %193, i64 2, !dbg !46
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !46
  %213 = extractelement <8 x i1> %194, i64 1, !dbg !46
  %214 = extractelement <8 x float> %193, i64 1, !dbg !46
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !46
  %216 = extractelement <8 x i1> %194, i64 0, !dbg !46
  %217 = extractelement <8 x float> %193, i64 0, !dbg !46
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !46
  %219 = mul nsw i32 %.decomposed34, 961, !dbg !47
  %220 = mul nsw i32 %.decomposed32, 961, !dbg !47
  %221 = mul nsw i32 %.decomposed30, 961, !dbg !47
  %222 = mul nsw i32 %.decomposed28, 961, !dbg !47
  %223 = mul nsw i32 %.decomposed26, 961, !dbg !47
  %224 = mul nsw i32 %.decomposed24, 961, !dbg !47
  %225 = mul nsw i32 %.decomposed22, 961, !dbg !47
  %226 = mul nsw i32 %.decomposed20, 961, !dbg !47
  %227 = add i32 %219, %152, !dbg !48
  %228 = add i32 %220, %152, !dbg !48
  %229 = add i32 %221, %152, !dbg !48
  %230 = add i32 %222, %152, !dbg !48
  %231 = add i32 %223, %152, !dbg !48
  %232 = add i32 %224, %152, !dbg !48
  %233 = add i32 %225, %152, !dbg !48
  %234 = add i32 %226, %152, !dbg !48
  %235 = mul i32 %142, 1968128, !dbg !49
  %236 = mul i32 %141, 1968128, !dbg !49
  %237 = mul i32 %139, 1968128, !dbg !49
  %238 = mul i32 %137, 1968128, !dbg !49
  %239 = mul i32 %135, 1968128, !dbg !49
  %240 = mul i32 %133, 1968128, !dbg !49
  %241 = mul i32 %131, 1968128, !dbg !49
  %242 = mul i32 %129, 1968128, !dbg !49
  %243 = add i32 %227, %235, !dbg !50
  %244 = add i32 %228, %236, !dbg !50
  %245 = add i32 %229, %237, !dbg !50
  %246 = add i32 %230, %238, !dbg !50
  %247 = add i32 %231, %239, !dbg !50
  %248 = add i32 %232, %240, !dbg !50
  %249 = add i32 %233, %241, !dbg !50
  %250 = add i32 %234, %242, !dbg !50
  %251 = sext i32 %243 to i64, !dbg !51
  %252 = getelementptr float, ptr addrspace(1) %5, i64 %251, !dbg !51
  %253 = sext i32 %244 to i64, !dbg !51
  %254 = getelementptr float, ptr addrspace(1) %5, i64 %253, !dbg !51
  %255 = sext i32 %245 to i64, !dbg !51
  %256 = getelementptr float, ptr addrspace(1) %5, i64 %255, !dbg !51
  %257 = sext i32 %246 to i64, !dbg !51
  %258 = getelementptr float, ptr addrspace(1) %5, i64 %257, !dbg !51
  %259 = sext i32 %247 to i64, !dbg !51
  %260 = getelementptr float, ptr addrspace(1) %5, i64 %259, !dbg !51
  %261 = sext i32 %248 to i64, !dbg !51
  %262 = getelementptr float, ptr addrspace(1) %5, i64 %261, !dbg !51
  %263 = sext i32 %249 to i64, !dbg !51
  %264 = getelementptr float, ptr addrspace(1) %5, i64 %263, !dbg !51
  %265 = sext i32 %250 to i64, !dbg !51
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %265, !dbg !51
  %267 = shl i32 %11, 7, !dbg !52
  %268 = and i32 %267, 896, !dbg !52
  %269 = or disjoint i32 %268, %18, !dbg !52
  %270 = and i32 %11, 127, !dbg !52
  %271 = lshr exact i32 %268, 3, !dbg !52
  %272 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %271, !dbg !52
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %269, !dbg !52
  %274 = bitcast float %197 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !52
  %275 = or disjoint i32 %269, 32, !dbg !52
  %276 = lshr i32 %275, 5, !dbg !52
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i32 %276, !dbg !52
  %278 = getelementptr float, ptr addrspace(3) %277, i32 %275, !dbg !52
  %279 = bitcast float %200 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !52
  %280 = or disjoint i32 %269, 64, !dbg !52
  %281 = lshr i32 %280, 5, !dbg !52
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !52
  %283 = getelementptr float, ptr addrspace(3) %282, i32 %280, !dbg !52
  %284 = bitcast float %203 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !52
  %285 = or disjoint i32 %269, 96, !dbg !52
  %286 = lshr i32 %285, 5, !dbg !52
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %286, !dbg !52
  %288 = getelementptr float, ptr addrspace(3) %287, i32 %285, !dbg !52
  %289 = bitcast float %206 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !52
  %290 = or disjoint i32 %269, 16, !dbg !52
  %291 = getelementptr float, ptr addrspace(3) %272, i32 %290, !dbg !52
  %292 = bitcast float %209 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #4, !dbg !52
  %293 = or disjoint i32 %269, 48, !dbg !52
  %294 = lshr i32 %293, 5, !dbg !52
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %294, !dbg !52
  %296 = getelementptr float, ptr addrspace(3) %295, i32 %293, !dbg !52
  %297 = bitcast float %212 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !52
  %298 = or disjoint i32 %269, 80, !dbg !52
  %299 = lshr i32 %298, 5, !dbg !52
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i32 %299, !dbg !52
  %301 = getelementptr float, ptr addrspace(3) %300, i32 %298, !dbg !52
  %302 = bitcast float %215 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !52
  %303 = or disjoint i32 %269, 112, !dbg !52
  %304 = lshr i32 %303, 5, !dbg !52
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %304, !dbg !52
  %306 = getelementptr float, ptr addrspace(3) %305, i32 %303, !dbg !52
  %307 = bitcast float %218 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %308 = lshr i32 %270, 5, !dbg !52
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !52
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %270, !dbg !52
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !52
  %312 = or disjoint i32 %270, 128, !dbg !52
  %313 = lshr i32 %312, 5, !dbg !52
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !52
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !52
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !52
  %317 = or disjoint i32 %270, 256, !dbg !52
  %318 = lshr i32 %317, 5, !dbg !52
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !52
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !52
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !52
  %322 = or disjoint i32 %270, 384, !dbg !52
  %323 = lshr i32 %322, 5, !dbg !52
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %323, !dbg !52
  %325 = getelementptr inbounds float, ptr addrspace(3) %324, i32 %322, !dbg !52
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !52
  %327 = or disjoint i32 %270, 512, !dbg !52
  %328 = lshr i32 %327, 5, !dbg !52
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !52
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !52
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !52
  %332 = or disjoint i32 %270, 640, !dbg !52
  %333 = lshr i32 %332, 5, !dbg !52
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !52
  %335 = getelementptr inbounds float, ptr addrspace(3) %334, i32 %332, !dbg !52
  %336 = load i32, ptr addrspace(3) %335, align 4, !dbg !52
  %337 = or disjoint i32 %270, 768, !dbg !52
  %338 = lshr i32 %337, 5, !dbg !52
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !52
  %340 = getelementptr inbounds float, ptr addrspace(3) %339, i32 %337, !dbg !52
  %341 = load i32, ptr addrspace(3) %340, align 4, !dbg !52
  %342 = or disjoint i32 %270, 896, !dbg !52
  %343 = lshr i32 %342, 5, !dbg !52
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !52
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %342, !dbg !52
  %346 = load i32, ptr addrspace(3) %345, align 4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %311, ptr addrspace(1) %252, i1 %153) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %316, ptr addrspace(1) %254, i1 %153) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %321, ptr addrspace(1) %256, i1 %153) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %258, i1 %153) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %331, ptr addrspace(1) %260, i1 %153) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %336, ptr addrspace(1) %262, i1 %153) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %341, ptr addrspace(1) %264, i1 %153) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %266, i1 %153) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxfguahipa6vc3fzklyi72y3yd2erpeci3c5l7jv3a56pbj3ipoq.py", directory: "inductor_cache/xf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 51, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 56, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 48, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 49, column: 34, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 47, scope: !7)
!50 = !DILocation(line: 49, column: 39, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 59, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
