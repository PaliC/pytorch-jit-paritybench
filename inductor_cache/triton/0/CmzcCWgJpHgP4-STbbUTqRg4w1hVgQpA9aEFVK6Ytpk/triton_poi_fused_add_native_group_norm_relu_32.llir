; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, 64, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %13 = shl i32 %12, 9, !dbg !13
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %15 = shl i32 %14, 2, !dbg !14
  %16 = and i32 %15, 508, !dbg !14
  %17 = or disjoint i32 %13, %16, !dbg !15
  %18 = icmp slt i32 %17, 1024, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %19 = sdiv i32 %.frozen, 16, !dbg !17
  %20 = shl i32 %10, 10, !dbg !18
  %21 = add i32 %17, %20, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = and i1 %11, %18, !dbg !21
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 %24) #4, !dbg !22
  %26 = shl i32 %19, 5, !dbg !23
  %27 = sdiv i32 %17, 32, !dbg !24
  %28 = add i32 %27, %26, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %24) #4, !dbg !27
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %24) #4, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %24) #4, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %24) #4, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %24) #4, !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %24) #4, !dbg !29
  %39 = bitcast i32 %38 to float, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %24) #4, !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %24) #4, !dbg !29
  %43 = bitcast i32 %42 to float, !dbg !29
  %44 = sext i32 %17 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !30
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %18) #4, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !32
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %18) #4, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !34
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %24) #4, !dbg !35
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 5.120000e+02) #4, !dbg !36
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 5.120000e+02) #4, !dbg !36
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float 5.120000e+02) #4, !dbg !36
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 5.120000e+02) #4, !dbg !36
  %55 = fadd float %51, 0x3EE4F8B580000000, !dbg !37
  %56 = fadd float %52, 0x3EE4F8B580000000, !dbg !37
  %57 = fadd float %53, 0x3EE4F8B580000000, !dbg !37
  %58 = fadd float %54, 0x3EE4F8B580000000, !dbg !37
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %59, 0, !dbg !38
  br i1 %.not.i, label %62, label %60, !dbg !38

60:                                               ; preds = %9
  %61 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %55), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

62:                                               ; preds = %9
  %63 = tail call float @llvm.nvvm.rsqrt.approx.f(float %55), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %60, %62
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], !dbg !38
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i1 = icmp eq i32 %64, 0, !dbg !38
  br i1 %.not.i1, label %67, label %65, !dbg !38

65:                                               ; preds = %__nv_rsqrtf.exit
  %66 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %56), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

67:                                               ; preds = %__nv_rsqrtf.exit
  %68 = tail call float @llvm.nvvm.rsqrt.approx.f(float %56), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

__nv_rsqrtf.exit3:                                ; preds = %65, %67
  %.0.i2 = phi float [ %66, %65 ], [ %68, %67 ], !dbg !38
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i4 = icmp eq i32 %69, 0, !dbg !38
  br i1 %.not.i4, label %72, label %70, !dbg !38

70:                                               ; preds = %__nv_rsqrtf.exit3
  %71 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %57), !dbg !38
  br label %__nv_rsqrtf.exit6, !dbg !38

72:                                               ; preds = %__nv_rsqrtf.exit3
  %73 = tail call float @llvm.nvvm.rsqrt.approx.f(float %57), !dbg !38
  br label %__nv_rsqrtf.exit6, !dbg !38

__nv_rsqrtf.exit6:                                ; preds = %70, %72
  %.0.i5 = phi float [ %71, %70 ], [ %73, %72 ], !dbg !38
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i7 = icmp eq i32 %74, 0, !dbg !38
  br i1 %.not.i7, label %77, label %75, !dbg !38

75:                                               ; preds = %__nv_rsqrtf.exit6
  %76 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %58), !dbg !38
  br label %__nv_rsqrtf.exit9, !dbg !38

77:                                               ; preds = %__nv_rsqrtf.exit6
  %78 = tail call float @llvm.nvvm.rsqrt.approx.f(float %58), !dbg !38
  br label %__nv_rsqrtf.exit9, !dbg !38

__nv_rsqrtf.exit9:                                ; preds = %75, %77
  %.0.i8 = phi float [ %76, %75 ], [ %78, %77 ], !dbg !38
  %79 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !22
  %80 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !27
  %81 = insertelement <4 x i32> %80, i32 %33, i64 1, !dbg !27
  %82 = insertelement <4 x i32> %81, i32 %32, i64 2, !dbg !27
  %83 = insertelement <4 x i32> %82, i32 %31, i64 3, !dbg !27
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !22
  %86 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !22
  %87 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !22
  %88 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !35
  %89 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !35
  %90 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !35
  %91 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !35
  %92 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !33
  %93 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !33
  %94 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !33
  %95 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !31
  %97 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !31
  %98 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !31
  %99 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !31
  %100 = and i32 %14, 127, !dbg !14
  %101 = or disjoint i32 %100, 384, !dbg !14
  %102 = or disjoint i32 %13, %101, !dbg !15
  %103 = icmp slt i32 %102, 1024, !dbg !16
  %104 = and i1 %11, %103, !dbg !21
  %105 = or disjoint i32 %100, 256, !dbg !14
  %106 = or disjoint i32 %13, %105, !dbg !15
  %107 = icmp slt i32 %106, 1024, !dbg !16
  %108 = and i1 %11, %107, !dbg !21
  %109 = or disjoint i32 %100, 128, !dbg !14
  %110 = or disjoint i32 %13, %109, !dbg !15
  %111 = icmp slt i32 %110, 1024, !dbg !16
  %112 = and i1 %11, %111, !dbg !21
  %113 = or disjoint i32 %13, %100, !dbg !15
  %114 = icmp slt i32 %113, 1024, !dbg !16
  %115 = and i1 %11, %114, !dbg !21
  %116 = mul i32 %19, 16, !dbg !39
  %.decomposed = sub i32 %.frozen, %116, !dbg !39
  %117 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !22
  %118 = insertelement <4 x i32> %117, i32 %85, i64 1, !dbg !22
  %119 = insertelement <4 x i32> %118, i32 %86, i64 2, !dbg !22
  %120 = insertelement <4 x i32> %119, i32 %87, i64 3, !dbg !22
  %121 = bitcast <4 x i32> %120 to <4 x float>, !dbg !22
  %122 = fsub <4 x float> %121, %84, !dbg !40
  %123 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !35
  %124 = insertelement <4 x i32> %123, i32 %89, i64 1, !dbg !35
  %125 = insertelement <4 x i32> %124, i32 %90, i64 2, !dbg !35
  %126 = insertelement <4 x i32> %125, i32 %91, i64 3, !dbg !35
  %127 = bitcast <4 x i32> %126 to <4 x float>, !dbg !35
  %128 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !33
  %129 = insertelement <4 x i32> %128, i32 %93, i64 1, !dbg !33
  %130 = insertelement <4 x i32> %129, i32 %94, i64 2, !dbg !33
  %131 = insertelement <4 x i32> %130, i32 %95, i64 3, !dbg !33
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !33
  %133 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !31
  %134 = insertelement <4 x i32> %133, i32 %97, i64 1, !dbg !31
  %135 = insertelement <4 x i32> %134, i32 %98, i64 2, !dbg !31
  %136 = insertelement <4 x i32> %135, i32 %99, i64 3, !dbg !31
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !31
  %138 = insertelement <4 x float> poison, float %.0.i8, i64 0, !dbg !41
  %139 = insertelement <4 x float> %138, float %.0.i5, i64 1, !dbg !41
  %140 = insertelement <4 x float> %139, float %.0.i2, i64 2, !dbg !41
  %141 = insertelement <4 x float> %140, float %.0.i, i64 3, !dbg !41
  %142 = fmul <4 x float> %122, %141, !dbg !41
  %143 = fmul <4 x float> %142, %137, !dbg !42
  %144 = fadd <4 x float> %143, %132, !dbg !43
  %145 = fadd <4 x float> %144, %127, !dbg !44
  %146 = fcmp olt <4 x float> %145, zeroinitializer, !dbg !45
  %147 = extractelement <4 x i1> %146, i64 3, !dbg !49
  %148 = extractelement <4 x float> %145, i64 3, !dbg !49
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !49
  %150 = extractelement <4 x i1> %146, i64 2, !dbg !49
  %151 = extractelement <4 x float> %145, i64 2, !dbg !49
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !49
  %153 = extractelement <4 x i1> %146, i64 1, !dbg !49
  %154 = extractelement <4 x float> %145, i64 1, !dbg !49
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !49
  %156 = extractelement <4 x i1> %146, i64 0, !dbg !49
  %157 = extractelement <4 x float> %145, i64 0, !dbg !49
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !49
  %159 = shl i32 %113, 4, !dbg !50
  %160 = shl i32 %110, 4, !dbg !50
  %161 = shl i32 %106, 4, !dbg !50
  %162 = shl i32 %102, 4, !dbg !50
  %163 = shl i32 %19, 14, !dbg !51
  %164 = add i32 %163, %.decomposed, !dbg !52
  %165 = add i32 %164, %159, !dbg !53
  %166 = add i32 %164, %160, !dbg !53
  %167 = add i32 %164, %161, !dbg !53
  %168 = add i32 %164, %162, !dbg !53
  %169 = sext i32 %165 to i64, !dbg !54
  %170 = getelementptr float, ptr addrspace(1) %6, i64 %169, !dbg !54
  %171 = sext i32 %166 to i64, !dbg !54
  %172 = getelementptr float, ptr addrspace(1) %6, i64 %171, !dbg !54
  %173 = sext i32 %167 to i64, !dbg !54
  %174 = getelementptr float, ptr addrspace(1) %6, i64 %173, !dbg !54
  %175 = sext i32 %168 to i64, !dbg !54
  %176 = getelementptr float, ptr addrspace(1) %6, i64 %175, !dbg !54
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !55
  %178 = bitcast float %149 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #4, !dbg !55
  %179 = or disjoint i32 %16, 1, !dbg !55
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !55
  %181 = bitcast float %152 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #4, !dbg !55
  %182 = or disjoint i32 %16, 2, !dbg !55
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !55
  %184 = bitcast float %155 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #4, !dbg !55
  %185 = or disjoint i32 %16, 3, !dbg !55
  %186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %185, !dbg !55
  %187 = bitcast float %158 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !55
  %189 = load i32, ptr addrspace(3) %188, align 4, !dbg !55
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !55
  %191 = load i32, ptr addrspace(3) %190, align 4, !dbg !55
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !55
  %193 = load i32, ptr addrspace(3) %192, align 4, !dbg !55
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !55
  %195 = load i32, ptr addrspace(3) %194, align 4, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %189, ptr addrspace(1) %170, i1 %115) #4, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %191, ptr addrspace(1) %172, i1 %112) #4, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %174, i1 %108) #4, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %176, i1 %104) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx25tstxlj2znuw4byygoolyvmx6ozrajckclupupgaej7pyhj4q.py", directory: "inductor_cache/x2")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_32", linkageName: "triton_poi_fused_add_native_group_norm_relu_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 33, scope: !7)
!24 = !DILocation(line: 33, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 51, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 51, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 31, scope: !7)
!35 = !DILocation(line: 37, column: 46, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 27, scope: !7)
!39 = !DILocation(line: 31, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 45, column: 19, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 49, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 50, column: 33, scope: !7)
!51 = !DILocation(line: 50, column: 44, scope: !7)
!52 = !DILocation(line: 50, column: 30, scope: !7)
!53 = !DILocation(line: 50, column: 38, scope: !7)
!54 = !DILocation(line: 50, column: 25, scope: !7)
!55 = !DILocation(line: 50, column: 56, scope: !7)
!56 = !DILocation(line: 50, column: 4, scope: !7)
