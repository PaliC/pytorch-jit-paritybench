; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = srem i32 %9, 512, !dbg !14
  %11 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %12 = shufflevector <2 x i32> %11, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %13 = sdiv <2 x i32> %12, <i32 16384, i32 512>, !dbg !15
  %14 = srem <2 x i32> %13, splat (i32 32), !dbg !16
  %15 = extractelement <2 x i32> %14, i64 0, !dbg !17
  %16 = icmp sgt i32 %15, 0, !dbg !18
  %17 = icmp sgt <2 x i32> %14, <i32 -1, i32 0>, !dbg !19
  %18 = extractelement <2 x i1> %17, i64 1, !dbg !20
  %19 = and i1 %16, %18, !dbg !20
  %20 = extractelement <2 x i32> %14, i64 1, !dbg !17
  %21 = shl nsw i32 %20, 10, !dbg !21
  %22 = extractelement <2 x i32> %13, i64 0, !dbg !22
  %23 = shl i32 %22, 16, !dbg !22
  %24 = add i32 %23, %10, !dbg !23
  %25 = add i32 %24, -33280, !dbg !24
  %26 = add i32 %25, %21, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !26
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %19, i32 -8388608, i1 %19, i32 -8388608, i1 %19) #1, !dbg !27
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !27
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !27
  %32 = bitcast i32 %30 to float, !dbg !27
  %33 = bitcast i32 %31 to float, !dbg !27
  %34 = icmp sgt i32 %20, -1, !dbg !28
  %35 = and i1 %16, %34, !dbg !29
  %36 = add i32 %24, -32768, !dbg !30
  %37 = add i32 %36, %21, !dbg !31
  %38 = sext i32 %37 to i64, !dbg !32
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !32
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %35, i32 -8388608, i1 %35, i32 -8388608, i1 %35) #1, !dbg !33
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !33
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !33
  %43 = bitcast i32 %41 to float, !dbg !33
  %44 = bitcast i32 %42 to float, !dbg !33
  %45 = fcmp ogt float %43, %32, !dbg !34
  %46 = fcmp ogt float %44, %33, !dbg !34
  %47 = fcmp uno float %43, 0.000000e+00, !dbg !38
  %48 = fcmp uno float %44, 0.000000e+00, !dbg !38
  %49 = or i1 %45, %47, !dbg !39
  %50 = or i1 %46, %48, !dbg !39
  %51 = select i1 %49, float %43, float %32, !dbg !40
  %52 = select i1 %50, float %44, float %33, !dbg !40
  %53 = add i32 %24, -32256, !dbg !41
  %54 = add i32 %53, %21, !dbg !42
  %55 = sext i32 %54 to i64, !dbg !43
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !43
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %35, i32 -8388608, i1 %35, i32 -8388608, i1 %35) #1, !dbg !44
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !44
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !44
  %60 = bitcast i32 %58 to float, !dbg !44
  %61 = bitcast i32 %59 to float, !dbg !44
  %62 = fcmp olt float %51, %60, !dbg !45
  %63 = fcmp olt float %52, %61, !dbg !45
  %64 = fcmp uno float %60, 0.000000e+00, !dbg !47
  %65 = fcmp uno float %61, 0.000000e+00, !dbg !47
  %66 = or i1 %64, %62, !dbg !48
  %67 = or i1 %65, %63, !dbg !48
  %68 = select i1 %66, float %60, float %51, !dbg !49
  %69 = select i1 %67, float %61, float %52, !dbg !49
  %70 = extractelement <2 x i1> %17, i64 0, !dbg !50
  %71 = and i1 %70, %18, !dbg !50
  %72 = add i32 %24, -512, !dbg !51
  %73 = add i32 %72, %21, !dbg !52
  %74 = sext i32 %73 to i64, !dbg !53
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !53
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #1, !dbg !54
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !54
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !54
  %79 = bitcast i32 %77 to float, !dbg !54
  %80 = bitcast i32 %78 to float, !dbg !54
  %81 = fcmp olt float %68, %79, !dbg !55
  %82 = fcmp olt float %69, %80, !dbg !55
  %83 = fcmp uno float %79, 0.000000e+00, !dbg !57
  %84 = fcmp uno float %80, 0.000000e+00, !dbg !57
  %85 = or i1 %83, %81, !dbg !58
  %86 = or i1 %84, %82, !dbg !58
  %87 = select i1 %85, float %79, float %68, !dbg !59
  %88 = select i1 %86, float %80, float %69, !dbg !59
  %89 = or i32 %15, %20, !dbg !17
  %90 = icmp sgt i32 %89, -1, !dbg !17
  %91 = add i32 %24, %21, !dbg !60
  %92 = sext i32 %91 to i64, !dbg !61
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !61
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90) #1, !dbg !62
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !62
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !62
  %97 = bitcast i32 %95 to float, !dbg !62
  %98 = bitcast i32 %96 to float, !dbg !62
  %99 = fcmp olt float %87, %97, !dbg !63
  %100 = fcmp olt float %88, %98, !dbg !63
  %101 = fcmp uno float %97, 0.000000e+00, !dbg !65
  %102 = fcmp uno float %98, 0.000000e+00, !dbg !65
  %103 = or i1 %101, %99, !dbg !66
  %104 = or i1 %102, %100, !dbg !66
  %105 = select i1 %103, float %97, float %87, !dbg !67
  %106 = select i1 %104, float %98, float %88, !dbg !67
  %107 = add i32 %24, 512, !dbg !68
  %108 = add i32 %107, %21, !dbg !69
  %109 = sext i32 %108 to i64, !dbg !70
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !70
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %110, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90) #1, !dbg !71
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !71
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !71
  %114 = bitcast i32 %112 to float, !dbg !71
  %115 = bitcast i32 %113 to float, !dbg !71
  %116 = fcmp olt float %105, %114, !dbg !72
  %117 = fcmp olt float %106, %115, !dbg !72
  %118 = fcmp uno float %114, 0.000000e+00, !dbg !74
  %119 = fcmp uno float %115, 0.000000e+00, !dbg !74
  %120 = or i1 %118, %116, !dbg !75
  %121 = or i1 %119, %117, !dbg !75
  %122 = select i1 %120, float %114, float %105, !dbg !76
  %123 = select i1 %121, float %115, float %106, !dbg !76
  %124 = add i32 %24, 32256, !dbg !77
  %125 = add i32 %124, %21, !dbg !78
  %126 = sext i32 %125 to i64, !dbg !79
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !79
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %127, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #1, !dbg !80
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !80
  %130 = extractvalue { i32, i32 } %128, 1, !dbg !80
  %131 = bitcast i32 %129 to float, !dbg !80
  %132 = bitcast i32 %130 to float, !dbg !80
  %133 = fcmp olt float %122, %131, !dbg !81
  %134 = fcmp olt float %123, %132, !dbg !81
  %135 = fcmp uno float %131, 0.000000e+00, !dbg !83
  %136 = fcmp uno float %132, 0.000000e+00, !dbg !83
  %137 = or i1 %135, %133, !dbg !84
  %138 = or i1 %136, %134, !dbg !84
  %139 = select i1 %137, float %131, float %122, !dbg !85
  %140 = select i1 %138, float %132, float %123, !dbg !85
  %141 = add i32 %24, 32768, !dbg !86
  %142 = add i32 %141, %21, !dbg !87
  %143 = sext i32 %142 to i64, !dbg !88
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !88
  %145 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %144, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90) #1, !dbg !89
  %146 = extractvalue { i32, i32 } %145, 0, !dbg !89
  %147 = extractvalue { i32, i32 } %145, 1, !dbg !89
  %148 = bitcast i32 %146 to float, !dbg !89
  %149 = bitcast i32 %147 to float, !dbg !89
  %150 = fcmp olt float %139, %148, !dbg !90
  %151 = fcmp olt float %140, %149, !dbg !90
  %152 = fcmp uno float %148, 0.000000e+00, !dbg !92
  %153 = fcmp uno float %149, 0.000000e+00, !dbg !92
  %154 = or i1 %152, %150, !dbg !93
  %155 = or i1 %153, %151, !dbg !93
  %156 = select i1 %154, float %148, float %139, !dbg !94
  %157 = select i1 %155, float %149, float %140, !dbg !94
  %158 = add i32 %24, 33280, !dbg !95
  %159 = add i32 %158, %21, !dbg !96
  %160 = sext i32 %159 to i64, !dbg !97
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !97
  %162 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %161, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90) #1, !dbg !98
  %163 = extractvalue { i32, i32 } %162, 0, !dbg !98
  %164 = extractvalue { i32, i32 } %162, 1, !dbg !98
  %165 = bitcast i32 %163 to float, !dbg !98
  %166 = bitcast i32 %164 to float, !dbg !98
  %167 = fcmp olt float %156, %165, !dbg !99
  %168 = fcmp olt float %157, %166, !dbg !99
  %169 = fcmp uno float %165, 0.000000e+00, !dbg !101
  %170 = fcmp uno float %166, 0.000000e+00, !dbg !101
  %171 = or i1 %169, %167, !dbg !102
  %172 = or i1 %170, %168, !dbg !102
  %173 = sext i32 %9 to i64, !dbg !103
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !103
  %175 = bitcast float %156 to i32, !dbg !104
  %176 = select i1 %171, i32 %163, i32 %175, !dbg !105
  %177 = bitcast float %157 to i32, !dbg !104
  %178 = select i1 %172, i32 %164, i32 %177, !dbg !105
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %178, ptr addrspace(1) %174, i1 true) #1, !dbg !104
  ret void, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbt5dhejyt7mzl3qd2zp4fw5fqnkbuaemh3kxxzwpgx4qlsqsgp4.py", directory: "inductor_cache/bt")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 30, scope: !7)
!17 = !DILocation(line: 62, column: 20, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 56, column: 21, scope: !7)
!20 = !DILocation(line: 39, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 52, scope: !7)
!22 = !DILocation(line: 40, column: 63, scope: !7)
!23 = !DILocation(line: 40, column: 42, scope: !7)
!24 = !DILocation(line: 40, column: 47, scope: !7)
!25 = !DILocation(line: 40, column: 57, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 68, scope: !7)
!28 = !DILocation(line: 42, column: 21, scope: !7)
!29 = !DILocation(line: 45, column: 19, scope: !7)
!30 = !DILocation(line: 46, column: 47, scope: !7)
!31 = !DILocation(line: 46, column: 57, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 68, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 47, column: 42, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 53, column: 47, scope: !7)
!42 = !DILocation(line: 53, column: 57, scope: !7)
!43 = !DILocation(line: 53, column: 31, scope: !7)
!44 = !DILocation(line: 53, column: 68, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !46)
!46 = !DILocation(line: 54, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !46)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 45, scope: !7)
!52 = !DILocation(line: 60, column: 55, scope: !7)
!53 = !DILocation(line: 60, column: 31, scope: !7)
!54 = !DILocation(line: 60, column: 66, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !56)
!56 = !DILocation(line: 61, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !56)
!60 = !DILocation(line: 63, column: 46, scope: !7)
!61 = !DILocation(line: 63, column: 31, scope: !7)
!62 = !DILocation(line: 63, column: 57, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !64)
!64 = !DILocation(line: 64, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !64)
!68 = !DILocation(line: 66, column: 42, scope: !7)
!69 = !DILocation(line: 66, column: 52, scope: !7)
!70 = !DILocation(line: 66, column: 31, scope: !7)
!71 = !DILocation(line: 66, column: 63, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !73)
!73 = !DILocation(line: 67, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !73)
!77 = !DILocation(line: 73, column: 44, scope: !7)
!78 = !DILocation(line: 73, column: 54, scope: !7)
!79 = !DILocation(line: 73, column: 31, scope: !7)
!80 = !DILocation(line: 73, column: 65, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !82)
!82 = !DILocation(line: 74, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !82)
!86 = !DILocation(line: 76, column: 44, scope: !7)
!87 = !DILocation(line: 76, column: 54, scope: !7)
!88 = !DILocation(line: 76, column: 31, scope: !7)
!89 = !DILocation(line: 76, column: 65, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !91)
!91 = !DILocation(line: 77, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !91)
!95 = !DILocation(line: 79, column: 44, scope: !7)
!96 = !DILocation(line: 79, column: 54, scope: !7)
!97 = !DILocation(line: 79, column: 31, scope: !7)
!98 = !DILocation(line: 79, column: 65, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !100)
!103 = !DILocation(line: 81, column: 25, scope: !7)
!104 = !DILocation(line: 81, column: 37, scope: !7)
!105 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !100)
!106 = !DILocation(line: 81, column: 4, scope: !7)
