; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = mul i32 %6, 6912, !dbg !13
  %12 = zext nneg i32 %10 to i64, !dbg !14
  %13 = add i32 %10, %11, !dbg !15
  %14 = sext i32 %13 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !17
  %21 = bitcast i32 %19 to float, !dbg !17
  %22 = bitcast i32 %20 to float, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !19
  %29 = bitcast i32 %27 to float, !dbg !19
  %30 = bitcast i32 %28 to float, !dbg !19
  %31 = fmul float %21, %29, !dbg !20
  %32 = fmul float %22, %30, !dbg !20
  %33 = fadd float %31, 0.000000e+00, !dbg !21
  %34 = fadd float %32, 0.000000e+00, !dbg !21
  %35 = or disjoint i64 %12, 2048, !dbg !22
  %36 = trunc nuw nsw i64 %35 to i32, !dbg !15
  %37 = add i32 %11, %36, !dbg !15
  %38 = sext i32 %37 to i64, !dbg !16
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !16
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !17
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !17
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !17
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !17
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !18
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !19
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !19
  %51 = or disjoint i64 %12, 4096, !dbg !22
  %52 = trunc nuw nsw i64 %51 to i32, !dbg !15
  %53 = add i32 %11, %52, !dbg !15
  %54 = sext i32 %53 to i64, !dbg !16
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !16
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !17
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !17
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !17
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !17
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !18
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !19
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !19
  %67 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !17
  %68 = insertelement <2 x i32> %67, i32 %59, i64 1, !dbg !17
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !17
  %70 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !19
  %71 = insertelement <2 x i32> %70, i32 %65, i64 1, !dbg !19
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !19
  %73 = fmul <2 x float> %69, %72, !dbg !20
  %74 = extractelement <2 x float> %73, i64 0, !dbg !21
  %75 = fadd float %33, %74, !dbg !21
  %76 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !17
  %77 = insertelement <2 x i32> %76, i32 %60, i64 1, !dbg !17
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !17
  %79 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !19
  %80 = insertelement <2 x i32> %79, i32 %66, i64 1, !dbg !19
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !19
  %82 = fmul <2 x float> %78, %81, !dbg !20
  %83 = extractelement <2 x float> %82, i64 0, !dbg !21
  %84 = fadd float %34, %83, !dbg !21
  %85 = extractelement <2 x float> %73, i64 1, !dbg !21
  %86 = fadd float %75, %85, !dbg !21
  %87 = extractelement <2 x float> %82, i64 1, !dbg !21
  %88 = fadd float %84, %87, !dbg !21
  %89 = select i1 %7, float %86, float 0.000000e+00, !dbg !23
  %90 = select i1 %7, float %88, float 0.000000e+00, !dbg !23
  %91 = or disjoint i64 %12, 6144, !dbg !22
  %92 = icmp samesign ult i64 %91, 6912, !dbg !24
  %93 = trunc nuw nsw i64 %91 to i32, !dbg !15
  %94 = add i32 %11, %93, !dbg !15
  %95 = sext i32 %94 to i64, !dbg !16
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !16
  %97 = and i1 %7, %92, !dbg !25
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #3, !dbg !17
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !17
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !17
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !17
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !17
  %103 = bitcast i32 %101 to float, !dbg !17
  %104 = bitcast i32 %102 to float, !dbg !17
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !18
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #3, !dbg !19
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !19
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !19
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !19
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !19
  %111 = bitcast i32 %109 to float, !dbg !19
  %112 = bitcast i32 %110 to float, !dbg !19
  %113 = fmul float %103, %111, !dbg !20
  %114 = fmul float %104, %112, !dbg !20
  %115 = fadd float %89, %113, !dbg !21
  %116 = fadd float %90, %114, !dbg !21
  %117 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %118 = insertelement <2 x i32> %117, i32 %18, i64 1, !dbg !17
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !17
  %120 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !19
  %121 = insertelement <2 x i32> %120, i32 %26, i64 1, !dbg !19
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !19
  %123 = fmul <2 x float> %119, %122, !dbg !20
  %124 = fadd <2 x float> %123, zeroinitializer, !dbg !21
  %125 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !17
  %126 = insertelement <2 x i32> %125, i32 %42, i64 1, !dbg !17
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !17
  %128 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !19
  %129 = insertelement <2 x i32> %128, i32 %48, i64 1, !dbg !19
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !19
  %131 = fmul <2 x float> %127, %130, !dbg !20
  %132 = fadd <2 x float> %124, %131, !dbg !21
  %133 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !17
  %134 = insertelement <2 x i32> %133, i32 %58, i64 1, !dbg !17
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !17
  %136 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !19
  %137 = insertelement <2 x i32> %136, i32 %64, i64 1, !dbg !19
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !19
  %139 = fmul <2 x float> %135, %138, !dbg !20
  %140 = fadd <2 x float> %132, %139, !dbg !21
  %141 = insertelement <2 x i1> poison, i1 %7, i64 0, !dbg !23
  %142 = shufflevector <2 x i1> %141, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !23
  %143 = select <2 x i1> %142, <2 x float> %140, <2 x float> zeroinitializer, !dbg !23
  %144 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !17
  %145 = insertelement <2 x i32> %144, i32 %100, i64 1, !dbg !17
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !17
  %147 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !19
  %148 = insertelement <2 x i32> %147, i32 %108, i64 1, !dbg !19
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !19
  %150 = fmul <2 x float> %146, %149, !dbg !20
  %151 = fadd <2 x float> %143, %150, !dbg !21
  %152 = insertelement <2 x i1> poison, i1 %97, i64 0, !dbg !23
  %153 = shufflevector <2 x i1> %152, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !23
  %154 = select <2 x i1> %153, <2 x float> %151, <2 x float> %143, !dbg !23
  %155 = select i1 %97, float %115, float %89, !dbg !23
  %156 = select i1 %97, float %116, float %90, !dbg !23
  %157 = lshr i32 %8, 5, !dbg !12
  %158 = and i32 %8, 31, !dbg !12
  %shift = shufflevector <2 x float> %154, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %159 = fadd <2 x float> %154, %shift, !dbg !26
  %160 = extractelement <2 x float> %159, i64 0, !dbg !26
  %161 = fadd float %155, %160, !dbg !26
  %162 = fadd float %156, %161, !dbg !26
  %163 = bitcast float %162 to i32, !dbg !31
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 16, i32 31), !dbg !31
  %165 = bitcast i32 %164 to float, !dbg !31
  %166 = fadd float %162, %165, !dbg !26
  %167 = bitcast float %166 to i32, !dbg !31
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !31
  %169 = bitcast i32 %168 to float, !dbg !31
  %170 = fadd float %166, %169, !dbg !26
  %171 = bitcast float %170 to i32, !dbg !31
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 4, i32 31), !dbg !31
  %173 = bitcast i32 %172 to float, !dbg !31
  %174 = fadd float %170, %173, !dbg !26
  %175 = bitcast float %174 to i32, !dbg !31
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !31
  %177 = bitcast i32 %176 to float, !dbg !31
  %178 = fadd float %174, %177, !dbg !26
  %179 = bitcast float %178 to i32, !dbg !31
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !31
  %181 = bitcast i32 %180 to float, !dbg !31
  %182 = fadd float %178, %181, !dbg !26
  %183 = icmp eq i32 %158, 0, !dbg !31
  %184 = and i32 %157, 15, !dbg !31
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !31
  %186 = bitcast float %182 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 %183) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %187 = icmp slt i32 %8, 16, !dbg !31
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !31
  %189 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %188, i1 %187) #3, !dbg !31
  %190 = bitcast i32 %189 to float, !dbg !31
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !31
  %192 = bitcast i32 %191 to float, !dbg !31
  %193 = fadd float %190, %192, !dbg !26
  %194 = bitcast float %193 to i32, !dbg !31
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 4, i32 31), !dbg !31
  %196 = bitcast i32 %195 to float, !dbg !31
  %197 = fadd float %193, %196, !dbg !26
  %198 = bitcast float %197 to i32, !dbg !31
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 2, i32 31), !dbg !31
  %200 = bitcast i32 %199 to float, !dbg !31
  %201 = fadd float %197, %200, !dbg !26
  %202 = bitcast float %201 to i32, !dbg !31
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !31
  %204 = bitcast i32 %203 to float, !dbg !31
  %205 = fadd float %201, %204, !dbg !26
  %206 = and i32 %8, 15, !dbg !31
  %207 = icmp eq i32 %206, 0, !dbg !31
  %208 = and i1 %187, %207, !dbg !31
  %209 = bitcast float %205 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %209, i1 %208) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %210 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %211 = sext i32 %6 to i64, !dbg !32
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %211, !dbg !32
  %urem = and i32 %8, 511, !dbg !33
  %213 = icmp eq i32 %urem, 0, !dbg !33
  %214 = and i1 %213, %7, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %212, i1 %214) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfaq36ip2pganabvnlool2qrjqa4pbafgmsk5nsvkk7lfzjdtupg.py", directory: "inductor_cache/fa")
!4 = !{ptr @triton_red_fused_mv_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_12, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_12", linkageName: "triton_red_fused_mv_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 49, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 22, scope: !7)
!21 = !DILocation(line: 36, column: 23, scope: !7)
!22 = !DILocation(line: 29, column: 27, scope: !7)
!23 = !DILocation(line: 37, column: 46, scope: !7)
!24 = !DILocation(line: 30, column: 25, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 39, column: 25, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 4, scope: !7)
