; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = icmp slt i32 %9, 512, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %12 = shl i32 %11, 10, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = shl i32 %13, 2, !dbg !14
  %15 = and i32 %14, 508, !dbg !14
  %16 = or disjoint i32 %15, 1, !dbg !14
  %17 = or disjoint i32 %15, 2, !dbg !14
  %18 = or disjoint i32 %15, 3, !dbg !14
  %19 = or disjoint i32 %15, 513, !dbg !14
  %20 = or disjoint i32 %15, 514, !dbg !14
  %21 = or disjoint i32 %15, 515, !dbg !14
  %22 = and i32 %13, 127, !dbg !14
  %23 = or disjoint i32 %22, 128, !dbg !14
  %24 = or disjoint i32 %22, 256, !dbg !14
  %25 = or disjoint i32 %22, 384, !dbg !14
  %26 = or disjoint i32 %12, %15, !dbg !15
  %27 = or disjoint i32 %12, %16, !dbg !15
  %28 = or disjoint i32 %12, %17, !dbg !15
  %29 = or disjoint i32 %12, %18, !dbg !15
  %30 = or disjoint i32 %26, 512, !dbg !15
  %31 = or disjoint i32 %12, %19, !dbg !15
  %32 = or disjoint i32 %12, %20, !dbg !15
  %33 = or disjoint i32 %12, %21, !dbg !15
  %34 = or disjoint i32 %12, %22, !dbg !15
  %35 = or disjoint i32 %12, %23, !dbg !15
  %36 = or disjoint i32 %12, %24, !dbg !15
  %37 = or disjoint i32 %12, %25, !dbg !15
  %38 = or disjoint i32 %34, 512, !dbg !15
  %39 = or disjoint i32 %34, 640, !dbg !15
  %40 = or disjoint i32 %34, 768, !dbg !15
  %41 = or disjoint i32 %34, 896, !dbg !15
  %42 = icmp slt i32 %26, 1024, !dbg !16
  %43 = icmp slt i32 %30, 1024, !dbg !16
  %44 = icmp slt i32 %34, 1024, !dbg !16
  %45 = icmp slt i32 %35, 1024, !dbg !16
  %46 = icmp slt i32 %36, 1024, !dbg !16
  %47 = icmp slt i32 %37, 1024, !dbg !16
  %48 = icmp slt i32 %38, 1024, !dbg !16
  %49 = icmp slt i32 %39, 1024, !dbg !16
  %50 = icmp slt i32 %40, 1024, !dbg !16
  %51 = icmp slt i32 %41, 1024, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %52 = sdiv i32 %.frozen, 128, !dbg !17
  %53 = mul i32 %52, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %53, !dbg !18
  %54 = shl i32 %9, 10, !dbg !19
  %55 = add i32 %26, %54, !dbg !20
  %56 = add i32 %54, %30, !dbg !20
  %57 = sext i32 %55 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = sext i32 %56 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !21
  %61 = and i1 %10, %42, !dbg !22
  %62 = and i1 %43, %10, !dbg !22
  %63 = and i1 %10, %44, !dbg !22
  %64 = and i1 %10, %45, !dbg !22
  %65 = and i1 %10, %46, !dbg !22
  %66 = and i1 %10, %47, !dbg !22
  %67 = and i1 %48, %10, !dbg !22
  %68 = and i1 %49, %10, !dbg !22
  %69 = and i1 %50, %10, !dbg !22
  %70 = and i1 %51, %10, !dbg !22
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %61) #2, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !23
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !23
  %76 = bitcast i32 %72 to float, !dbg !23
  %77 = bitcast i32 %73 to float, !dbg !23
  %78 = bitcast i32 %74 to float, !dbg !23
  %79 = bitcast i32 %75 to float, !dbg !23
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %62) #2, !dbg !23
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !23
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !23
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !23
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !23
  %85 = bitcast i32 %81 to float, !dbg !23
  %86 = bitcast i32 %82 to float, !dbg !23
  %87 = bitcast i32 %83 to float, !dbg !23
  %88 = bitcast i32 %84 to float, !dbg !23
  %89 = sext i32 %.decomposed to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %10) #2, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %10) #2, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %10) #2, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %10) #2, !dbg !25
  %95 = bitcast i32 %94 to float, !dbg !25
  %96 = shl i32 %26, 7, !dbg !26
  %97 = shl i32 %27, 7, !dbg !26
  %98 = shl i32 %28, 7, !dbg !26
  %99 = shl i32 %29, 7, !dbg !26
  %100 = shl i32 %30, 7, !dbg !26
  %101 = shl i32 %31, 7, !dbg !26
  %102 = shl i32 %32, 7, !dbg !26
  %103 = shl i32 %33, 7, !dbg !26
  %104 = shl i32 %34, 7, !dbg !26
  %105 = shl i32 %35, 7, !dbg !26
  %106 = shl i32 %36, 7, !dbg !26
  %107 = shl i32 %37, 7, !dbg !26
  %108 = shl i32 %38, 7, !dbg !26
  %109 = shl i32 %39, 7, !dbg !26
  %110 = shl i32 %40, 7, !dbg !26
  %111 = shl i32 %41, 7, !dbg !26
  %112 = shl i32 %52, 17, !dbg !27
  %113 = add i32 %112, %.decomposed, !dbg !28
  %114 = add i32 %113, %96, !dbg !29
  %115 = add i32 %113, %97, !dbg !29
  %116 = add i32 %113, %98, !dbg !29
  %117 = add i32 %113, %99, !dbg !29
  %118 = add i32 %113, %100, !dbg !29
  %119 = add i32 %113, %101, !dbg !29
  %120 = add i32 %113, %102, !dbg !29
  %121 = add i32 %113, %103, !dbg !29
  %122 = add i32 %113, %104, !dbg !29
  %123 = add i32 %113, %105, !dbg !29
  %124 = add i32 %113, %106, !dbg !29
  %125 = add i32 %113, %107, !dbg !29
  %126 = add i32 %113, %108, !dbg !29
  %127 = add i32 %113, %109, !dbg !29
  %128 = add i32 %113, %110, !dbg !29
  %129 = add i32 %113, %111, !dbg !29
  %130 = sext i32 %114 to i64, !dbg !30
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !30
  %132 = sext i32 %115 to i64, !dbg !30
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !30
  %134 = sext i32 %116 to i64, !dbg !30
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !30
  %136 = sext i32 %117 to i64, !dbg !30
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !30
  %138 = sext i32 %118 to i64, !dbg !30
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !30
  %140 = sext i32 %119 to i64, !dbg !30
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !30
  %142 = sext i32 %120 to i64, !dbg !30
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !30
  %144 = sext i32 %121 to i64, !dbg !30
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !30
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %61) #2, !dbg !31
  %147 = bitcast i32 %146 to float, !dbg !31
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %61) #2, !dbg !31
  %149 = bitcast i32 %148 to float, !dbg !31
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %61) #2, !dbg !31
  %151 = bitcast i32 %150 to float, !dbg !31
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %61) #2, !dbg !31
  %153 = bitcast i32 %152 to float, !dbg !31
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %62) #2, !dbg !31
  %155 = bitcast i32 %154 to float, !dbg !31
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %62) #2, !dbg !31
  %157 = bitcast i32 %156 to float, !dbg !31
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %62) #2, !dbg !31
  %159 = bitcast i32 %158 to float, !dbg !31
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %62) #2, !dbg !31
  %161 = bitcast i32 %160 to float, !dbg !31
  %162 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !32
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %10) #2, !dbg !33
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %10) #2, !dbg !33
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %10) #2, !dbg !33
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %10) #2, !dbg !33
  %167 = bitcast i32 %166 to float, !dbg !33
  %168 = fmul float %95, %147, !dbg !34
  %169 = fmul float %95, %149, !dbg !34
  %170 = fmul float %95, %151, !dbg !34
  %171 = fmul float %95, %153, !dbg !34
  %172 = fmul float %95, %155, !dbg !34
  %173 = fmul float %95, %157, !dbg !34
  %174 = fmul float %95, %159, !dbg !34
  %175 = fmul float %95, %161, !dbg !34
  %176 = fadd float %168, %167, !dbg !35
  %177 = fadd float %169, %167, !dbg !35
  %178 = fadd float %170, %167, !dbg !35
  %179 = fadd float %171, %167, !dbg !35
  %180 = fadd float %172, %167, !dbg !35
  %181 = fadd float %173, %167, !dbg !35
  %182 = fadd float %174, %167, !dbg !35
  %183 = fadd float %175, %167, !dbg !35
  %184 = fadd float %176, %76, !dbg !36
  %185 = fadd float %177, %77, !dbg !36
  %186 = fadd float %178, %78, !dbg !36
  %187 = fadd float %179, %79, !dbg !36
  %188 = fadd float %180, %85, !dbg !36
  %189 = fadd float %181, %86, !dbg !36
  %190 = fadd float %182, %87, !dbg !36
  %191 = fadd float %183, %88, !dbg !36
  %192 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !37
  %193 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !37
  %194 = bitcast float %184 to i32, !dbg !38
  %195 = bitcast float %185 to i32, !dbg !38
  %196 = bitcast float %186 to i32, !dbg !38
  %197 = bitcast float %187 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %194, i32 %195, i32 %196, i32 %197, ptr addrspace(1) %192, i1 %61) #2, !dbg !38
  %198 = bitcast float %188 to i32, !dbg !38
  %199 = bitcast float %189 to i32, !dbg !38
  %200 = bitcast float %190 to i32, !dbg !38
  %201 = bitcast float %191 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %199, i32 %200, i32 %201, ptr addrspace(1) %193, i1 %62) #2, !dbg !38
  %202 = sext i32 %122 to i64, !dbg !39
  %203 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !39
  %204 = sext i32 %123 to i64, !dbg !39
  %205 = getelementptr float, ptr addrspace(1) %5, i64 %204, !dbg !39
  %206 = sext i32 %124 to i64, !dbg !39
  %207 = getelementptr float, ptr addrspace(1) %5, i64 %206, !dbg !39
  %208 = sext i32 %125 to i64, !dbg !39
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !39
  %210 = sext i32 %126 to i64, !dbg !39
  %211 = getelementptr float, ptr addrspace(1) %5, i64 %210, !dbg !39
  %212 = sext i32 %127 to i64, !dbg !39
  %213 = getelementptr float, ptr addrspace(1) %5, i64 %212, !dbg !39
  %214 = sext i32 %128 to i64, !dbg !39
  %215 = getelementptr float, ptr addrspace(1) %5, i64 %214, !dbg !39
  %216 = sext i32 %129 to i64, !dbg !39
  %217 = getelementptr float, ptr addrspace(1) %5, i64 %216, !dbg !39
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !40
  %219 = bitcast float %184 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !40
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !40
  %221 = bitcast float %185 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !40
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !40
  %223 = bitcast float %186 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !40
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !40
  %225 = bitcast float %187 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !40
  %227 = load i32, ptr addrspace(3) %226, align 4, !dbg !40
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !40
  %229 = load i32, ptr addrspace(3) %228, align 4, !dbg !40
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !40
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !40
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !40
  %233 = load i32, ptr addrspace(3) %232, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %234 = bitcast float %188 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %234, i1 true) #2, !dbg !40
  %235 = bitcast float %189 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %235, i1 true) #2, !dbg !40
  %236 = bitcast float %190 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %236, i1 true) #2, !dbg !40
  %237 = bitcast float %191 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %237, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %238 = load i32, ptr addrspace(3) %226, align 4, !dbg !40
  %239 = load i32, ptr addrspace(3) %228, align 4, !dbg !40
  %240 = load i32, ptr addrspace(3) %230, align 4, !dbg !40
  %241 = load i32, ptr addrspace(3) %232, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %227, ptr addrspace(1) %203, i1 %63) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %229, ptr addrspace(1) %205, i1 %64) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %231, ptr addrspace(1) %207, i1 %65) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %233, ptr addrspace(1) %209, i1 %66) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %238, ptr addrspace(1) %211, i1 %67) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %239, ptr addrspace(1) %213, i1 %68) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %240, ptr addrspace(1) %215, i1 %69) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %217, i1 %70) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdrlbqqscvjc5otaqvxjix4lrth3ao4bd4z7duknnptca2gicz3p.py", directory: "inductor_cache/dr")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_21", linkageName: "triton_poi_fused_add_convolution_mul_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 53, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 39, scope: !7)
!27 = !DILocation(line: 34, column: 51, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 56, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 39, column: 46, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 57, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
