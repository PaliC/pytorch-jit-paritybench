; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %15, 512, !dbg !13
  %20 = or disjoint i32 %15, 640, !dbg !13
  %21 = or disjoint i32 %15, 768, !dbg !13
  %22 = or disjoint i32 %15, 896, !dbg !13
  %23 = or disjoint i32 %7, %14, !dbg !13
  %24 = or disjoint i32 %23, 512, !dbg !13
  %25 = icmp slt i32 %15, 2912, !dbg !14
  %26 = icmp slt i32 %16, 2912, !dbg !14
  %27 = icmp slt i32 %17, 2912, !dbg !14
  %28 = icmp slt i32 %18, 2912, !dbg !14
  %29 = icmp slt i32 %19, 2912, !dbg !14
  %30 = icmp slt i32 %20, 2912, !dbg !14
  %31 = icmp slt i32 %21, 2912, !dbg !14
  %32 = icmp slt i32 %22, 2912, !dbg !14
  %33 = icmp slt i32 %23, 2912, !dbg !14
  %34 = icmp slt i32 %24, 2912, !dbg !14
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %.frozen = freeze i32 %23, !dbg !16
  %36 = sdiv i32 %.frozen, 728, !dbg !16
  %37 = mul i32 %36, 728, !dbg !17
  %.decomposed = sub i32 %.frozen, %37, !dbg !17
  %.frozen15 = freeze i32 %24, !dbg !16
  %38 = sdiv i32 %.frozen15, 728, !dbg !16
  %39 = mul i32 %38, 728, !dbg !17
  %.decomposed16 = sub i32 %.frozen15, %39, !dbg !17
  %40 = shl i32 %15, 12, !dbg !18
  %41 = shl i32 %16, 12, !dbg !18
  %42 = shl i32 %17, 12, !dbg !18
  %43 = shl i32 %18, 12, !dbg !18
  %44 = shl i32 %19, 12, !dbg !18
  %45 = shl i32 %20, 12, !dbg !18
  %46 = shl i32 %21, 12, !dbg !18
  %47 = shl i32 %22, 12, !dbg !18
  %48 = add i32 %40, %35, !dbg !19
  %49 = add i32 %41, %35, !dbg !19
  %50 = add i32 %42, %35, !dbg !19
  %51 = add i32 %43, %35, !dbg !19
  %52 = add i32 %35, %44, !dbg !19
  %53 = add i32 %35, %45, !dbg !19
  %54 = add i32 %35, %46, !dbg !19
  %55 = add i32 %35, %47, !dbg !19
  %56 = sext i32 %48 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !20
  %58 = sext i32 %49 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = sext i32 %50 to i64, !dbg !20
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !20
  %62 = sext i32 %51 to i64, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !20
  %64 = sext i32 %52 to i64, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !20
  %66 = sext i32 %53 to i64, !dbg !20
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !20
  %68 = sext i32 %54 to i64, !dbg !20
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !20
  %70 = sext i32 %55 to i64, !dbg !20
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #2, !dbg !21
  %73 = bitcast i32 %72 to float, !dbg !21
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %26) #2, !dbg !21
  %75 = bitcast i32 %74 to float, !dbg !21
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %27) #2, !dbg !21
  %77 = bitcast i32 %76 to float, !dbg !21
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %28) #2, !dbg !21
  %79 = bitcast i32 %78 to float, !dbg !21
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !21
  %81 = bitcast i32 %80 to float, !dbg !21
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %30) #2, !dbg !21
  %83 = bitcast i32 %82 to float, !dbg !21
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %31) #2, !dbg !21
  %85 = bitcast i32 %84 to float, !dbg !21
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %32) #2, !dbg !21
  %87 = bitcast i32 %86 to float, !dbg !21
  %88 = fcmp olt float %73, 0.000000e+00, !dbg !22
  %89 = fcmp olt float %75, 0.000000e+00, !dbg !22
  %90 = fcmp olt float %77, 0.000000e+00, !dbg !22
  %91 = fcmp olt float %79, 0.000000e+00, !dbg !22
  %92 = fcmp olt float %81, 0.000000e+00, !dbg !22
  %93 = fcmp olt float %83, 0.000000e+00, !dbg !22
  %94 = fcmp olt float %85, 0.000000e+00, !dbg !22
  %95 = fcmp olt float %87, 0.000000e+00, !dbg !22
  %96 = select i1 %88, float 0.000000e+00, float %73, !dbg !26
  %97 = select i1 %89, float 0.000000e+00, float %75, !dbg !26
  %98 = select i1 %90, float 0.000000e+00, float %77, !dbg !26
  %99 = select i1 %91, float 0.000000e+00, float %79, !dbg !26
  %100 = select i1 %92, float 0.000000e+00, float %81, !dbg !26
  %101 = select i1 %93, float 0.000000e+00, float %83, !dbg !26
  %102 = select i1 %94, float 0.000000e+00, float %85, !dbg !26
  %103 = select i1 %95, float 0.000000e+00, float %87, !dbg !26
  %104 = mul i32 %35, 728, !dbg !27
  %105 = add i32 %.decomposed, %104, !dbg !28
  %106 = mul i32 %36, 2981888, !dbg !29
  %107 = mul i32 %38, 2981888, !dbg !29
  %108 = add i32 %105, %106, !dbg !30
  %109 = add i32 %107, %.decomposed16, !dbg !28
  %110 = add i32 %109, %104, !dbg !30
  %111 = sext i32 %108 to i64, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !31
  %113 = sext i32 %110 to i64, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !31
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !32
  %116 = bitcast float %96 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !32
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !32
  %118 = bitcast float %97 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !32
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !32
  %120 = bitcast float %98 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !32
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %122 = bitcast float %99 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !32
  %124 = load <4 x i32>, ptr addrspace(3) %123, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %125 = bitcast float %100 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %125, i1 true) #2, !dbg !32
  %126 = bitcast float %101 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %126, i1 true) #2, !dbg !32
  %127 = bitcast float %102 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %127, i1 true) #2, !dbg !32
  %128 = bitcast float %103 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %128, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %129 = load <4 x i32>, ptr addrspace(3) %123, align 16, !dbg !32
  %.extract = extractelement <4 x i32> %124, i64 0, !dbg !32
  %.extract8 = extractelement <4 x i32> %124, i64 1, !dbg !32
  %.extract9 = extractelement <4 x i32> %124, i64 2, !dbg !32
  %.extract10 = extractelement <4 x i32> %124, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %112, i1 %33) #2, !dbg !32
  %.extract11 = extractelement <4 x i32> %129, i64 0, !dbg !32
  %.extract12 = extractelement <4 x i32> %129, i64 1, !dbg !32
  %.extract13 = extractelement <4 x i32> %129, i64 2, !dbg !32
  %.extract14 = extractelement <4 x i32> %129, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %114, i1 %34) #2, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !33
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !33
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !33
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !33
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !33
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !33
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !33
  %138 = bitcast float %96 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %130, i1 %25) #2, !dbg !34
  %139 = bitcast float %97 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %131, i1 %26) #2, !dbg !34
  %140 = bitcast float %98 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %132, i1 %27) #2, !dbg !34
  %141 = bitcast float %99 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %133, i1 %28) #2, !dbg !34
  %142 = bitcast float %100 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %134, i1 %29) #2, !dbg !34
  %143 = bitcast float %101 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %135, i1 %30) #2, !dbg !34
  %144 = bitcast float %102 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %136, i1 %31) #2, !dbg !34
  %145 = bitcast float %103 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %137, i1 %32) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckcof3gaunu5ylnxoaek7ds6miywrb2a57hmj6ec4mi2nwsfa3sm.py", directory: "inductor_cache/kc")
!4 = !{ptr @triton_poi_fused_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_0", linkageName: "triton_poi_fused_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 35, column: 34, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 47, scope: !7)
!30 = !DILocation(line: 35, column: 39, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 58, scope: !7)
!33 = !DILocation(line: 36, column: 25, scope: !7)
!34 = !DILocation(line: 36, column: 46, scope: !7)
!35 = !DILocation(line: 36, column: 4, scope: !7)
