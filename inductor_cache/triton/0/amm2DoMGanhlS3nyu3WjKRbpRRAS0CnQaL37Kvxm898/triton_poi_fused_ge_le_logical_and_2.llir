; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_ge_le_logical_and_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 2, !dbg !13
  %13 = or disjoint i32 %11, 4, !dbg !13
  %14 = or disjoint i32 %11, 6, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %15 = sdiv i32 %.frozen, 36864, !dbg !14
  %16 = mul i32 %15, 36864, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = srem i32 %12, 36864, !dbg !15
  %18 = srem i32 %13, 36864, !dbg !15
  %19 = srem i32 %14, 36864, !dbg !15
  %20 = sdiv i32 %11, 4096, !dbg !16
  %21 = srem i32 %20, 9, !dbg !17
  %22 = add nsw i32 %.decomposed, 36864, !dbg !18
  %23 = add nsw i32 %18, 36864, !dbg !18
  %24 = zext nneg i32 %22 to i64, !dbg !19
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %17 to i64, !dbg !19
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = getelementptr i8, ptr addrspace(1) %27, i64 294912, !dbg !19
  %29 = zext nneg i32 %23 to i64, !dbg !19
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = sext i32 %19 to i64, !dbg !19
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = getelementptr i8, ptr addrspace(1) %32, i64 294912, !dbg !19
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !20
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !20
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !20
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !20
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !20
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !20
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !20
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !20
  %46 = sext i32 %21 to i64, !dbg !21
  %47 = getelementptr i64, ptr addrspace(1) %1, i64 %46, !dbg !21
  %48 = getelementptr i8, ptr addrspace(1) %47, i64 72, !dbg !21
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %57 = mul i32 %15, 73728, !dbg !23
  %58 = add i32 %22, %57, !dbg !24
  %59 = add i32 %57, %23, !dbg !24
  %60 = sext i32 %58 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !25
  %62 = sext i32 %59 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !26
  %74 = sext i32 %11 to i64, !dbg !27
  %75 = getelementptr i1, ptr addrspace(1) %3, i64 %74, !dbg !27
  %76 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !26
  %77 = insertelement <4 x i32> %76, i32 %66, i64 1, !dbg !26
  %78 = insertelement <4 x i32> %77, i32 %67, i64 2, !dbg !26
  %79 = insertelement <4 x i32> %78, i32 %68, i64 3, !dbg !26
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !26
  %81 = insertelement <4 x i64> poison, i64 %35, i64 0, !dbg !28
  %82 = insertelement <4 x i64> %81, i64 %36, i64 1, !dbg !28
  %83 = insertelement <4 x i64> %82, i64 %38, i64 2, !dbg !28
  %84 = insertelement <4 x i64> %83, i64 %39, i64 3, !dbg !28
  %85 = sitofp <4 x i64> %84 to <4 x float>, !dbg !28
  %86 = insertelement <4 x i64> poison, i64 %49, i64 0, !dbg !29
  %87 = insertelement <4 x i64> %86, i64 %50, i64 1, !dbg !29
  %88 = insertelement <4 x i64> %87, i64 %51, i64 2, !dbg !29
  %89 = insertelement <4 x i64> %88, i64 %52, i64 3, !dbg !29
  %90 = sitofp <4 x i64> %89 to <4 x float>, !dbg !29
  %91 = fadd <4 x float> %85, %90, !dbg !30
  %92 = fadd <4 x float> %91, %80, !dbg !31
  %93 = fcmp oge <4 x float> %92, zeroinitializer, !dbg !32
  %94 = fcmp ole <4 x float> %92, splat (float 6.500000e+01), !dbg !33
  %95 = and <4 x i1> %93, %94, !dbg !34
  %96 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !26
  %97 = insertelement <4 x i32> %96, i32 %71, i64 1, !dbg !26
  %98 = insertelement <4 x i32> %97, i32 %72, i64 2, !dbg !26
  %99 = insertelement <4 x i32> %98, i32 %73, i64 3, !dbg !26
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !26
  %101 = insertelement <4 x i64> poison, i64 %41, i64 0, !dbg !28
  %102 = insertelement <4 x i64> %101, i64 %42, i64 1, !dbg !28
  %103 = insertelement <4 x i64> %102, i64 %44, i64 2, !dbg !28
  %104 = insertelement <4 x i64> %103, i64 %45, i64 3, !dbg !28
  %105 = sitofp <4 x i64> %104 to <4 x float>, !dbg !28
  %106 = insertelement <4 x i64> poison, i64 %53, i64 0, !dbg !29
  %107 = insertelement <4 x i64> %106, i64 %54, i64 1, !dbg !29
  %108 = insertelement <4 x i64> %107, i64 %55, i64 2, !dbg !29
  %109 = insertelement <4 x i64> %108, i64 %56, i64 3, !dbg !29
  %110 = sitofp <4 x i64> %109 to <4 x float>, !dbg !29
  %111 = fadd <4 x float> %105, %110, !dbg !30
  %112 = fadd <4 x float> %111, %100, !dbg !31
  %113 = fcmp oge <4 x float> %112, zeroinitializer, !dbg !32
  %114 = fcmp ole <4 x float> %112, splat (float 6.500000e+01), !dbg !33
  %115 = and <4 x i1> %113, %114, !dbg !34
  %116 = zext <4 x i1> %95 to <4 x i8>, !dbg !35
  %117 = bitcast <4 x i8> %116 to i32, !dbg !35
  %118 = zext <4 x i1> %115 to <4 x i8>, !dbg !35
  %119 = bitcast <4 x i8> %118 to i32, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %119, ptr addrspace(1) %75, i1 true) #1, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjmygubvj4dof2bhlti2wikdnizz73ficzuur4zpx4z5cvxyx5ln.py", directory: "inductor_cache/jm")
!4 = !{ptr @triton_poi_fused_ge_le_logical_and_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_ge_le_logical_and_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_ge_le_logical_and_2", linkageName: "triton_poi_fused_ge_le_logical_and_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 29, scope: !7)
!18 = !DILocation(line: 28, column: 38, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 43, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 39, scope: !7)
!23 = !DILocation(line: 30, column: 49, scope: !7)
!24 = !DILocation(line: 30, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 54, scope: !7)
!27 = !DILocation(line: 40, column: 25, scope: !7)
!28 = !DILocation(line: 31, column: 19, scope: !7)
!29 = !DILocation(line: 32, column: 19, scope: !7)
!30 = !DILocation(line: 33, column: 18, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 19, scope: !7)
!33 = !DILocation(line: 38, column: 20, scope: !7)
!34 = !DILocation(line: 39, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 37, scope: !7)
!36 = !DILocation(line: 40, column: 4, scope: !7)
