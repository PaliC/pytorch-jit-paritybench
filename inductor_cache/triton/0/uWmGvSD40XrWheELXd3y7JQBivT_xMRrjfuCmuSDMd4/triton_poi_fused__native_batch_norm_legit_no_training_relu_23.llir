; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 46080, !dbg !14
  %15 = sdiv i32 %13, 36, !dbg !15
  %16 = srem i32 %15, 320, !dbg !16
  %17 = sext i32 %13 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %14) #3, !dbg !18
  %20 = sext i32 %16 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #3, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #3, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #3, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #3, !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #3, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #3, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #3, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #3, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %14) #3, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %14) #3, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %14) #3, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %14) #3, !dbg !26
  %45 = fadd float %28, 0x3F50624DE0000000, !dbg !27
  %46 = fadd float %30, 0x3F50624DE0000000, !dbg !27
  %47 = fadd float %32, 0x3F50624DE0000000, !dbg !27
  %48 = fadd float %34, 0x3F50624DE0000000, !dbg !27
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %49, 0, !dbg !28
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %50, 0, !dbg !28
  br i1 %.not.i, label %56, label %51, !dbg !28

51:                                               ; preds = %7
  br i1 %.not1.i, label %54, label %52, !dbg !28

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

56:                                               ; preds = %7
  br i1 %.not1.i, label %59, label %57, !dbg !28

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !28
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %61, 0, !dbg !28
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !28
  br i1 %.not.i1, label %68, label %63, !dbg !28

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !28

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !28

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !28
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %73, 0, !dbg !28
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %74, 0, !dbg !28
  br i1 %.not.i6, label %80, label %75, !dbg !28

75:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %78, label %76, !dbg !28

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

80:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %83, label %81, !dbg !28

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %76, %78, %81, %83
  %.0.i8 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !28
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %85, 0, !dbg !28
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %86, 0, !dbg !28
  br i1 %.not.i11, label %92, label %87, !dbg !28

87:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %90, label %88, !dbg !28

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

92:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %95, label %93, !dbg !28

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %88, %90, %93, %95
  %.0.i13 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !18
  %98 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !20
  %99 = insertelement <4 x i32> %98, i32 %24, i64 1, !dbg !20
  %100 = insertelement <4 x i32> %99, i32 %23, i64 2, !dbg !20
  %101 = insertelement <4 x i32> %100, i32 %22, i64 3, !dbg !20
  %102 = bitcast <4 x i32> %101 to <4 x float>, !dbg !20
  %103 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !18
  %104 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !18
  %105 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !18
  %106 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !26
  %107 = insertelement <4 x i32> %106, i32 %43, i64 1, !dbg !26
  %108 = insertelement <4 x i32> %107, i32 %42, i64 2, !dbg !26
  %109 = insertelement <4 x i32> %108, i32 %41, i64 3, !dbg !26
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !26
  %111 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !24
  %112 = insertelement <4 x i32> %111, i32 %38, i64 1, !dbg !24
  %113 = insertelement <4 x i32> %112, i32 %37, i64 2, !dbg !24
  %114 = insertelement <4 x i32> %113, i32 %36, i64 3, !dbg !24
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !24
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %120 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !18
  %121 = insertelement <4 x i32> %120, i32 %103, i64 1, !dbg !18
  %122 = insertelement <4 x i32> %121, i32 %104, i64 2, !dbg !18
  %123 = insertelement <4 x i32> %122, i32 %105, i64 3, !dbg !18
  %124 = bitcast <4 x i32> %123 to <4 x float>, !dbg !18
  %125 = fsub <4 x float> %124, %102, !dbg !30
  %126 = insertelement <4 x float> poison, float %119, i64 0, !dbg !31
  %127 = insertelement <4 x float> %126, float %118, i64 1, !dbg !31
  %128 = insertelement <4 x float> %127, float %117, i64 2, !dbg !31
  %129 = insertelement <4 x float> %128, float %116, i64 3, !dbg !31
  %130 = fmul <4 x float> %125, %129, !dbg !31
  %131 = fmul <4 x float> %130, %115, !dbg !32
  %132 = fadd <4 x float> %131, %110, !dbg !33
  %133 = fcmp olt <4 x float> %132, zeroinitializer, !dbg !34
  %134 = extractelement <4 x i1> %133, i64 3, !dbg !38
  %135 = extractelement <4 x i1> %133, i64 2, !dbg !38
  %136 = extractelement <4 x i1> %133, i64 1, !dbg !38
  %137 = extractelement <4 x i1> %133, i64 0, !dbg !38
  %138 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !39
  %bc = bitcast <4 x float> %132 to <4 x i32>, !dbg !40
  %139 = extractelement <4 x i32> %bc, i64 3, !dbg !40
  %140 = select i1 %134, i32 0, i32 %139, !dbg !38
  %bc16 = bitcast <4 x float> %132 to <4 x i32>, !dbg !40
  %141 = extractelement <4 x i32> %bc16, i64 2, !dbg !40
  %142 = select i1 %135, i32 0, i32 %141, !dbg !38
  %bc17 = bitcast <4 x float> %132 to <4 x i32>, !dbg !40
  %143 = extractelement <4 x i32> %bc17, i64 1, !dbg !40
  %144 = select i1 %136, i32 0, i32 %143, !dbg !38
  %bc18 = bitcast <4 x float> %132 to <4 x i32>, !dbg !40
  %145 = extractelement <4 x i32> %bc18, i64 0, !dbg !40
  %146 = select i1 %137, i32 0, i32 %145, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %140, i32 %142, i32 %144, i32 %146, ptr addrspace(1) %138, i1 %14) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caxlveoyzfqepnu53o2qcxtlg4vydrr3zbqzy6luqzogejx7e2uk.py", directory: "inductor_cache/ax")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 43, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 44, column: 25, scope: !7)
!40 = !DILocation(line: 44, column: 37, scope: !7)
!41 = !DILocation(line: 44, column: 4, scope: !7)
