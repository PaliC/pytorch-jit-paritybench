; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 62, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 1280, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 2, !dbg !16
  %18 = lshr i32 %11, 5, !dbg !17
  %19 = and i32 %18, 3, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = icmp slt i32 %20, 4, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %22 = sdiv i32 %.frozen, 320, !dbg !20
  %23 = mul i32 %22, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %23, !dbg !21
  %24 = mul i32 %20, 320, !dbg !22
  %25 = add i32 %24, %.decomposed, !dbg !23
  %26 = mul i32 %22, 1280, !dbg !24
  %27 = add i32 %25, %26, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = and i1 %15, %21, !dbg !27
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %30) #4, !dbg !28
  %32 = sext i32 %.decomposed to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !29
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %15) #4, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !31
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #4, !dbg !32
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !32
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !32
  %39 = bitcast i32 %37 to float, !dbg !32
  %40 = bitcast i32 %38 to float, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !33
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #4, !dbg !34
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !35
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #4, !dbg !36
  %45 = fadd float %39, 0x3EE4F8B580000000, !dbg !37
  %46 = fadd float %40, 0x3EE4F8B580000000, !dbg !37
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %47, 0, !dbg !38
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %48, 0, !dbg !38
  br i1 %.not.i, label %54, label %49, !dbg !38

49:                                               ; preds = %8
  br i1 %.not1.i, label %52, label %50, !dbg !38

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

54:                                               ; preds = %8
  br i1 %.not1.i, label %57, label %55, !dbg !38

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !38
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %59, 0, !dbg !38
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %60, 0, !dbg !38
  br i1 %.not.i3, label %66, label %61, !dbg !38

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %64, label %62, !dbg !38

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %69, label %67, !dbg !38

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %62, %64, %67, %69
  %.0.i5 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !38
  %71 = extractvalue { i32, i32 } %31, 1, !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = extractvalue { i32, i32 } %34, 1, !dbg !30
  %74 = bitcast i32 %73 to float, !dbg !30
  %75 = fsub float %72, %74, !dbg !39
  %76 = extractvalue { i32, i32 } %31, 0, !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = extractvalue { i32, i32 } %34, 0, !dbg !30
  %79 = bitcast i32 %78 to float, !dbg !30
  %80 = fsub float %77, %79, !dbg !39
  %81 = extractvalue { i32, i32 } %44, 1, !dbg !36
  %82 = bitcast i32 %81 to float, !dbg !36
  %83 = extractvalue { i32, i32 } %44, 0, !dbg !36
  %84 = bitcast i32 %83 to float, !dbg !36
  %85 = extractvalue { i32, i32 } %42, 1, !dbg !34
  %86 = bitcast i32 %85 to float, !dbg !34
  %87 = extractvalue { i32, i32 } %42, 0, !dbg !34
  %88 = bitcast i32 %87 to float, !dbg !34
  %89 = and i32 %12, 2, !dbg !12
  %90 = or disjoint i32 %17, %89, !dbg !18
  %91 = icmp slt i32 %90, 4, !dbg !19
  %92 = lshr i32 %11, 1, !dbg !12
  %93 = and i32 %92, 63, !dbg !12
  %94 = or disjoint i32 %10, %93, !dbg !13
  %95 = icmp slt i32 %94, 1280, !dbg !14
  %96 = and i1 %95, %91, !dbg !27
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !40
  %99 = fmul float %80, %97, !dbg !41
  %100 = fmul float %75, %98, !dbg !41
  %101 = fmul float %99, %88, !dbg !42
  %102 = fmul float %100, %86, !dbg !42
  %103 = fadd float %101, %84, !dbg !43
  %104 = fadd float %102, %82, !dbg !43
  %105 = shl i32 %94, 2, !dbg !44
  %106 = add i32 %90, %105, !dbg !45
  %107 = sext i32 %106 to i64, !dbg !46
  %108 = getelementptr float, ptr addrspace(1) %5, i64 %107, !dbg !46
  %109 = shl i32 %11, 3, !dbg !47
  %110 = and i32 %109, 248, !dbg !47
  %111 = or disjoint i32 %110, %19, !dbg !47
  %112 = and i32 %12, 254, !dbg !47
  %113 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %110, !dbg !47
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %111, !dbg !47
  %115 = bitcast float %103 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !47
  %116 = or disjoint i32 %111, 4, !dbg !47
  %117 = lshr i32 %116, 2, !dbg !47
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !47
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !47
  %120 = bitcast float %104 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %121 = lshr i32 %112, 2, !dbg !47
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !47
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %112, !dbg !47
  %124 = load i32, ptr addrspace(3) %123, align 4, !dbg !47
  %125 = or disjoint i32 %112, 1, !dbg !47
  %126 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %125, !dbg !47
  %127 = load i32, ptr addrspace(3) %126, align 4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %127, ptr addrspace(1) %108, i1 %96) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chcbp3kkxvlvu47ajauqz6xezvhmt7izsszrq5ycskibafewp6zo.py", directory: "inductor_cache/hc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_41", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 49, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 48, column: 30, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 44, scope: !7)
!48 = !DILocation(line: 48, column: 4, scope: !7)
