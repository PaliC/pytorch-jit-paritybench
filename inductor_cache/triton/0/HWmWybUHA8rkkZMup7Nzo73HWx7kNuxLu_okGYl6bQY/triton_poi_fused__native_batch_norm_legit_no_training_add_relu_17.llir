; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, 512, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %13 = shl i32 %12, 10, !dbg !13
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %15 = shl i32 %14, 2, !dbg !14
  %16 = and i32 %15, 508, !dbg !14
  %17 = or disjoint i32 %16, 1, !dbg !14
  %18 = or disjoint i32 %16, 2, !dbg !14
  %19 = or disjoint i32 %16, 3, !dbg !14
  %20 = or disjoint i32 %16, 513, !dbg !14
  %21 = or disjoint i32 %16, 514, !dbg !14
  %22 = or disjoint i32 %16, 515, !dbg !14
  %23 = or disjoint i32 %13, %16, !dbg !15
  %24 = or disjoint i32 %13, %17, !dbg !15
  %25 = or disjoint i32 %13, %18, !dbg !15
  %26 = or disjoint i32 %13, %19, !dbg !15
  %27 = or disjoint i32 %23, 512, !dbg !15
  %28 = or disjoint i32 %13, %20, !dbg !15
  %29 = or disjoint i32 %13, %21, !dbg !15
  %30 = or disjoint i32 %13, %22, !dbg !15
  %31 = icmp slt i32 %23, 1024, !dbg !16
  %32 = icmp slt i32 %27, 1024, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %33 = sdiv i32 %.frozen, 128, !dbg !17
  %34 = mul i32 %33, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %34, !dbg !18
  %35 = shl i32 %23, 7, !dbg !19
  %36 = shl i32 %24, 7, !dbg !19
  %37 = shl i32 %25, 7, !dbg !19
  %38 = shl i32 %26, 7, !dbg !19
  %39 = shl i32 %27, 7, !dbg !19
  %40 = shl i32 %28, 7, !dbg !19
  %41 = shl i32 %29, 7, !dbg !19
  %42 = shl i32 %30, 7, !dbg !19
  %43 = shl i32 %33, 17, !dbg !20
  %44 = add i32 %43, %.decomposed, !dbg !21
  %45 = add i32 %44, %35, !dbg !22
  %46 = add i32 %44, %36, !dbg !22
  %47 = add i32 %44, %37, !dbg !22
  %48 = add i32 %44, %38, !dbg !22
  %49 = add i32 %44, %39, !dbg !22
  %50 = add i32 %44, %40, !dbg !22
  %51 = add i32 %44, %41, !dbg !22
  %52 = add i32 %44, %42, !dbg !22
  %53 = sext i32 %45 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %46 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %47 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %48 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %49 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %50 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %51 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = sext i32 %52 to i64, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !23
  %69 = and i1 %11, %31, !dbg !24
  %70 = and i1 %32, %11, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %69) #4, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %69) #4, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %69) #4, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %69) #4, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %70) #4, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %70) #4, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %70) #4, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %70) #4, !dbg !25
  %79 = sext i32 %.decomposed to i64, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %11) #4, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %11) #4, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %11) #4, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %11) #4, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !28
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %11) #4, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %11) #4, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %11) #4, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %11) #4, !dbg !29
  %90 = bitcast i32 %89 to float, !dbg !29
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %11) #4, !dbg !31
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %11) #4, !dbg !31
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %11) #4, !dbg !31
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %11) #4, !dbg !31
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !32
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %11) #4, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %11) #4, !dbg !33
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %11) #4, !dbg !33
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %11) #4, !dbg !33
  %101 = shl nsw i32 %.decomposed, 10, !dbg !34
  %102 = shl i32 %33, 19, !dbg !35
  %103 = add i32 %102, %101, !dbg !36
  %104 = add i32 %103, 262144, !dbg !37
  %105 = add i32 %104, %23, !dbg !38
  %106 = add i32 %104, %27, !dbg !38
  %107 = sext i32 %105 to i64, !dbg !39
  %108 = getelementptr float, ptr addrspace(1) %5, i64 %107, !dbg !39
  %109 = sext i32 %106 to i64, !dbg !39
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %109, !dbg !39
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %69) #4, !dbg !40
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %70) #4, !dbg !40
  %113 = fadd float %90, 0x3EE4F8B580000000, !dbg !41
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i11 = icmp eq i32 %120, 0, !dbg !42
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i14 = icmp eq i32 %121, 0, !dbg !42
  br i1 %.not.i11, label %127, label %122, !dbg !42

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %125, label %123, !dbg !42

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %130, label %128, !dbg !42

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %123, %125, %128, %130
  %.0.i13 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !42
  %132 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !25
  %133 = insertelement <8 x i32> %132, i32 %77, i64 1, !dbg !25
  %134 = insertelement <8 x i32> %133, i32 %76, i64 2, !dbg !25
  %135 = insertelement <8 x i32> %134, i32 %75, i64 3, !dbg !25
  %136 = insertelement <8 x i32> %135, i32 %74, i64 4, !dbg !25
  %137 = insertelement <8 x i32> %136, i32 %73, i64 5, !dbg !25
  %138 = insertelement <8 x i32> %137, i32 %72, i64 6, !dbg !25
  %139 = insertelement <8 x i32> %138, i32 %71, i64 7, !dbg !25
  %140 = bitcast <8 x i32> %139 to <8 x float>, !dbg !25
  %141 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !40
  %142 = bitcast i32 %141 to float, !dbg !40
  %143 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !40
  %144 = bitcast i32 %143 to float, !dbg !40
  %145 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !40
  %146 = bitcast i32 %145 to float, !dbg !40
  %147 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !40
  %148 = bitcast i32 %147 to float, !dbg !40
  %149 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !40
  %150 = bitcast i32 %149 to float, !dbg !40
  %151 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !40
  %152 = bitcast i32 %151 to float, !dbg !40
  %153 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !40
  %154 = bitcast i32 %153 to float, !dbg !40
  %155 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !40
  %156 = bitcast i32 %155 to float, !dbg !40
  %157 = and i32 %14, 127, !dbg !14
  %158 = or disjoint i32 %157, %13, !dbg !15
  %159 = or disjoint i32 %158, 896, !dbg !15
  %160 = icmp slt i32 %159, 1024, !dbg !16
  %161 = and i1 %11, %160, !dbg !24
  %162 = or disjoint i32 %158, 768, !dbg !15
  %163 = icmp slt i32 %162, 1024, !dbg !16
  %164 = and i1 %11, %163, !dbg !24
  %165 = or disjoint i32 %158, 640, !dbg !15
  %166 = icmp slt i32 %165, 1024, !dbg !16
  %167 = and i1 %11, %166, !dbg !24
  %168 = or disjoint i32 %158, 512, !dbg !15
  %169 = icmp slt i32 %168, 1024, !dbg !16
  %170 = and i1 %11, %169, !dbg !24
  %171 = or disjoint i32 %157, 384, !dbg !14
  %172 = or disjoint i32 %13, %171, !dbg !15
  %173 = icmp slt i32 %172, 1024, !dbg !16
  %174 = and i1 %11, %173, !dbg !24
  %175 = or disjoint i32 %157, 256, !dbg !14
  %176 = or disjoint i32 %13, %175, !dbg !15
  %177 = icmp slt i32 %176, 1024, !dbg !16
  %178 = and i1 %11, %177, !dbg !24
  %179 = or disjoint i32 %157, 128, !dbg !14
  %180 = or disjoint i32 %13, %179, !dbg !15
  %181 = icmp slt i32 %180, 1024, !dbg !16
  %182 = and i1 %11, %181, !dbg !24
  %183 = icmp slt i32 %158, 1024, !dbg !16
  %184 = and i1 %11, %183, !dbg !24
  %185 = shl i32 %159, 7, !dbg !19
  %186 = add i32 %44, %185, !dbg !22
  %187 = shl i32 %162, 7, !dbg !19
  %188 = add i32 %44, %187, !dbg !22
  %189 = shl i32 %165, 7, !dbg !19
  %190 = add i32 %44, %189, !dbg !22
  %191 = shl i32 %168, 7, !dbg !19
  %192 = add i32 %44, %191, !dbg !22
  %193 = shl i32 %172, 7, !dbg !19
  %194 = add i32 %44, %193, !dbg !22
  %195 = shl i32 %176, 7, !dbg !19
  %196 = add i32 %44, %195, !dbg !22
  %197 = shl i32 %180, 7, !dbg !19
  %198 = add i32 %44, %197, !dbg !22
  %199 = shl i32 %158, 7, !dbg !19
  %200 = add i32 %44, %199, !dbg !22
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !43
  %202 = insertelement <8 x i32> poison, i32 %84, i64 0, !dbg !44
  %203 = bitcast <8 x i32> %202 to <8 x float>, !dbg !44
  %204 = shufflevector <8 x float> %203, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !44
  %205 = fsub <8 x float> %140, %204, !dbg !44
  %206 = insertelement <8 x float> poison, float %201, i64 0, !dbg !45
  %207 = shufflevector <8 x float> %206, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !45
  %208 = fmul <8 x float> %205, %207, !dbg !45
  %209 = insertelement <8 x i32> poison, i32 %95, i64 0, !dbg !46
  %210 = bitcast <8 x i32> %209 to <8 x float>, !dbg !46
  %211 = shufflevector <8 x float> %210, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !46
  %212 = fmul <8 x float> %208, %211, !dbg !46
  %213 = insertelement <8 x i32> poison, i32 %100, i64 0, !dbg !47
  %214 = bitcast <8 x i32> %213 to <8 x float>, !dbg !47
  %215 = shufflevector <8 x float> %214, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !47
  %216 = fadd <8 x float> %212, %215, !dbg !47
  %217 = fcmp olt <8 x float> %216, zeroinitializer, !dbg !48
  %218 = extractelement <8 x i1> %217, i64 7, !dbg !52
  %219 = extractelement <8 x float> %216, i64 7, !dbg !52
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !52
  %221 = extractelement <8 x i1> %217, i64 6, !dbg !52
  %222 = extractelement <8 x float> %216, i64 6, !dbg !52
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !52
  %224 = extractelement <8 x i1> %217, i64 5, !dbg !52
  %225 = extractelement <8 x float> %216, i64 5, !dbg !52
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !52
  %227 = extractelement <8 x i1> %217, i64 4, !dbg !52
  %228 = extractelement <8 x float> %216, i64 4, !dbg !52
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !52
  %230 = extractelement <8 x i1> %217, i64 3, !dbg !52
  %231 = extractelement <8 x float> %216, i64 3, !dbg !52
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !52
  %233 = extractelement <8 x i1> %217, i64 2, !dbg !52
  %234 = extractelement <8 x float> %216, i64 2, !dbg !52
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !52
  %236 = extractelement <8 x i1> %217, i64 1, !dbg !52
  %237 = extractelement <8 x float> %216, i64 1, !dbg !52
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !52
  %239 = extractelement <8 x i1> %217, i64 0, !dbg !52
  %240 = extractelement <8 x float> %216, i64 0, !dbg !52
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !52
  %242 = fadd float %220, %156, !dbg !53
  %243 = fadd float %223, %154, !dbg !53
  %244 = fadd float %226, %152, !dbg !53
  %245 = fadd float %229, %150, !dbg !53
  %246 = fadd float %232, %148, !dbg !53
  %247 = fadd float %235, %146, !dbg !53
  %248 = fadd float %238, %144, !dbg !53
  %249 = fadd float %241, %142, !dbg !53
  %250 = add i32 %103, %23, !dbg !54
  %251 = add i32 %103, %27, !dbg !54
  %252 = sext i32 %250 to i64, !dbg !55
  %253 = getelementptr float, ptr addrspace(1) %6, i64 %252, !dbg !55
  %254 = sext i32 %251 to i64, !dbg !55
  %255 = getelementptr float, ptr addrspace(1) %6, i64 %254, !dbg !55
  %256 = bitcast float %220 to i32, !dbg !56
  %257 = bitcast float %223 to i32, !dbg !56
  %258 = bitcast float %226 to i32, !dbg !56
  %259 = bitcast float %229 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %256, i32 %257, i32 %258, i32 %259, ptr addrspace(1) %253, i1 %69) #4, !dbg !56
  %260 = bitcast float %232 to i32, !dbg !56
  %261 = bitcast float %235 to i32, !dbg !56
  %262 = bitcast float %238 to i32, !dbg !56
  %263 = bitcast float %241 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %261, i32 %262, i32 %263, ptr addrspace(1) %255, i1 %70) #4, !dbg !56
  %264 = sext i32 %200 to i64, !dbg !57
  %265 = getelementptr float, ptr addrspace(1) %7, i64 %264, !dbg !57
  %266 = sext i32 %198 to i64, !dbg !57
  %267 = getelementptr float, ptr addrspace(1) %7, i64 %266, !dbg !57
  %268 = sext i32 %196 to i64, !dbg !57
  %269 = getelementptr float, ptr addrspace(1) %7, i64 %268, !dbg !57
  %270 = sext i32 %194 to i64, !dbg !57
  %271 = getelementptr float, ptr addrspace(1) %7, i64 %270, !dbg !57
  %272 = sext i32 %192 to i64, !dbg !57
  %273 = getelementptr float, ptr addrspace(1) %7, i64 %272, !dbg !57
  %274 = sext i32 %190 to i64, !dbg !57
  %275 = getelementptr float, ptr addrspace(1) %7, i64 %274, !dbg !57
  %276 = sext i32 %188 to i64, !dbg !57
  %277 = getelementptr float, ptr addrspace(1) %7, i64 %276, !dbg !57
  %278 = sext i32 %186 to i64, !dbg !57
  %279 = getelementptr float, ptr addrspace(1) %7, i64 %278, !dbg !57
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !58
  %281 = bitcast float %242 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !58
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !58
  %283 = bitcast float %243 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !58
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !58
  %285 = bitcast float %244 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #4, !dbg !58
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !58
  %287 = bitcast float %245 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !58
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !58
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !58
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !58
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %175, !dbg !58
  %293 = load i32, ptr addrspace(3) %292, align 4, !dbg !58
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %171, !dbg !58
  %295 = load i32, ptr addrspace(3) %294, align 4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %296 = bitcast float %246 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %296, i1 true) #4, !dbg !58
  %297 = bitcast float %247 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %297, i1 true) #4, !dbg !58
  %298 = bitcast float %248 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %298, i1 true) #4, !dbg !58
  %299 = bitcast float %249 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %299, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %300 = load i32, ptr addrspace(3) %288, align 4, !dbg !58
  %301 = load i32, ptr addrspace(3) %290, align 4, !dbg !58
  %302 = load i32, ptr addrspace(3) %292, align 4, !dbg !58
  %303 = load i32, ptr addrspace(3) %294, align 4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %265, i1 %184) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %267, i1 %182) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %293, ptr addrspace(1) %269, i1 %178) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %295, ptr addrspace(1) %271, i1 %174) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %300, ptr addrspace(1) %273, i1 %170) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %301, ptr addrspace(1) %275, i1 %167) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %302, ptr addrspace(1) %277, i1 %164) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %303, ptr addrspace(1) %279, i1 %161) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7dzfqqci2667ocbe5ipsyrgj46pujii763s7f535gidrnwflcad.py", directory: "inductor_cache/7d")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 39, scope: !7)
!20 = !DILocation(line: 31, column: 51, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 44, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 64, scope: !7)
!25 = !DILocation(line: 31, column: 56, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 50, scope: !7)
!35 = !DILocation(line: 36, column: 62, scope: !7)
!36 = !DILocation(line: 36, column: 40, scope: !7)
!37 = !DILocation(line: 36, column: 45, scope: !7)
!38 = !DILocation(line: 36, column: 55, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 67, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 26, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 49, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 51, column: 40, scope: !7)
!55 = !DILocation(line: 51, column: 25, scope: !7)
!56 = !DILocation(line: 51, column: 59, scope: !7)
!57 = !DILocation(line: 52, column: 25, scope: !7)
!58 = !DILocation(line: 52, column: 58, scope: !7)
!59 = !DILocation(line: 52, column: 4, scope: !7)
