; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 256, !dbg !14
  %20 = sdiv i32 %18, 64, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %19) #3, !dbg !17
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %26 = bitcast i32 %24 to float, !dbg !17
  %27 = bitcast i32 %25 to float, !dbg !17
  %28 = sext i32 %20 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #3, !dbg !19
  %31 = bitcast i32 %30 to float, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #3, !dbg !19
  %33 = bitcast i32 %32 to float, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %19) #3, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %19) #3, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #3, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #3, !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #3, !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #3, !dbg !27
  %48 = bitcast i32 %47 to float, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #3, !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %26, float %31) #3, !dbg !28
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %27, float %33) #3, !dbg !28
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %31) #3, !dbg !30
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %33) #3, !dbg !30
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float %31) #3, !dbg !31
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float %33) #3, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !32
  %60 = getelementptr i1, ptr addrspace(1) %8, i64 %21, !dbg !33
  %61 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !21
  %62 = insertelement <2 x i32> %61, i32 %36, i64 1, !dbg !21
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !21
  %64 = insertelement <2 x float> poison, float %51, i64 0, !dbg !34
  %65 = insertelement <2 x float> %64, float %52, i64 1, !dbg !34
  %66 = fsub <2 x float> %65, %63, !dbg !34
  %67 = fcmp ogt <2 x float> %66, zeroinitializer, !dbg !35
  %68 = zext <2 x i1> %67 to <2 x i8>, !dbg !36
  %69 = fcmp olt <2 x float> %66, zeroinitializer, !dbg !37
  %70 = sext <2 x i1> %69 to <2 x i8>, !dbg !38
  %71 = add nsw <2 x i8> %70, %68, !dbg !39
  %72 = sitofp <2 x i8> %71 to <2 x float>, !dbg !40
  %73 = extractelement <2 x float> %66, i64 0, !dbg !41
  %74 = tail call float @llvm.fabs.f32(float %73), !dbg !41
  %75 = extractelement <2 x float> %66, i64 1, !dbg !41
  %76 = tail call float @llvm.fabs.f32(float %75), !dbg !41
  %77 = fadd float %74, 5.000000e-01, !dbg !42
  %78 = fadd float %76, 5.000000e-01, !dbg !42
  %79 = tail call float @llvm.nvvm.floor.ftz.f(float %77), !dbg !29
  %80 = tail call float @llvm.nvvm.floor.f(float %77), !dbg !29
  %81 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !29
  %82 = insertelement <2 x i32> %81, i32 %54, i64 1, !dbg !29
  %83 = icmp eq <2 x i32> %82, zeroinitializer, !dbg !29
  %84 = tail call float @llvm.nvvm.floor.ftz.f(float %78), !dbg !29
  %85 = tail call float @llvm.nvvm.floor.f(float %78), !dbg !29
  %86 = insertelement <2 x float> poison, float %80, i64 0, !dbg !29
  %87 = insertelement <2 x float> %86, float %85, i64 1, !dbg !29
  %88 = insertelement <2 x float> poison, float %79, i64 0, !dbg !29
  %89 = insertelement <2 x float> %88, float %84, i64 1, !dbg !29
  %90 = select <2 x i1> %83, <2 x float> %87, <2 x float> %89, !dbg !29
  %91 = fmul <2 x float> %90, %72, !dbg !43
  %92 = extractelement <2 x float> %91, i64 0, !dbg !44
  %93 = fcmp ogt float %92, %38, !dbg !48
  %94 = extractelement <2 x float> %91, i64 1, !dbg !44
  %95 = fcmp ogt float %94, %38, !dbg !48
  %96 = fcmp uno float %92, 0.000000e+00, !dbg !49
  %97 = fcmp uno float %94, 0.000000e+00, !dbg !49
  %98 = or i1 %93, %96, !dbg !50
  %99 = or i1 %95, %97, !dbg !50
  %100 = select i1 %98, float %92, float %38, !dbg !44
  %101 = select i1 %99, float %94, float %38, !dbg !44
  %102 = fcmp olt float %100, %40, !dbg !51
  %103 = fcmp olt float %101, %40, !dbg !51
  %104 = fcmp uno float %100, 0.000000e+00, !dbg !53
  %105 = fcmp uno float %101, 0.000000e+00, !dbg !53
  %106 = or i1 %102, %104, !dbg !54
  %107 = or i1 %103, %105, !dbg !54
  %108 = select i1 %106, float %100, float %40, !dbg !55
  %109 = select i1 %107, float %101, float %40, !dbg !55
  %110 = bitcast i32 %35 to float, !dbg !56
  %111 = fadd float %108, %110, !dbg !56
  %112 = bitcast i32 %36 to float, !dbg !56
  %113 = fadd float %109, %112, !dbg !56
  %114 = fmul float %111, %31, !dbg !57
  %115 = fmul float %113, %33, !dbg !57
  %116 = insertelement <2 x float> poison, float %38, i64 0, !dbg !58
  %117 = shufflevector <2 x float> %116, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %118 = fcmp oge <2 x float> %91, %117, !dbg !58
  %119 = insertelement <2 x float> poison, float %40, i64 0, !dbg !59
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %121 = fcmp ole <2 x float> %91, %120, !dbg !59
  %122 = and <2 x i1> %118, %121, !dbg !60
  %123 = bitcast float %114 to i32, !dbg !61
  %124 = bitcast float %115 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %124, ptr addrspace(1) %59, i1 %19) #3, !dbg !61
  %125 = zext <2 x i1> %122 to <2 x i8>, !dbg !62
  %126 = bitcast <2 x i8> %125 to i16, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %126, ptr addrspace(1) %60, i1 %19) #3, !dbg !62
  %127 = getelementptr i1, ptr addrspace(1) %9, i64 %21, !dbg !63
  %128 = insertelement <2 x float> poison, float %55, i64 0, !dbg !64
  %129 = insertelement <2 x float> %128, float %56, i64 1, !dbg !64
  %130 = fsub <2 x float> %129, %63, !dbg !64
  %131 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %130), !dbg !65
  %132 = insertelement <2 x float> poison, float %57, i64 0, !dbg !66
  %133 = insertelement <2 x float> %132, float %58, i64 1, !dbg !66
  %134 = fsub <2 x float> %133, %63, !dbg !66
  %135 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %134), !dbg !67
  %136 = fcmp ogt <2 x float> %131, %135, !dbg !68
  %137 = fcmp uno <2 x float> %130, zeroinitializer, !dbg !70
  %138 = or <2 x i1> %137, %136, !dbg !71
  %139 = select <2 x i1> %138, <2 x float> %131, <2 x float> %135, !dbg !72
  %140 = fcmp ogt <2 x float> %66, %139, !dbg !73
  %141 = zext <2 x i1> %140 to <2 x i8>, !dbg !74
  %142 = bitcast <2 x i8> %141 to i16, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %142, ptr addrspace(1) %127, i1 %19) #3, !dbg !74
  %143 = getelementptr i1, ptr addrspace(1) %10, i64 %21, !dbg !75
  %144 = fsub <2 x float> zeroinitializer, %139, !dbg !76
  %145 = fcmp olt <2 x float> %66, %144, !dbg !77
  %146 = zext <2 x i1> %145 to <2 x i8>, !dbg !78
  %147 = bitcast <2 x i8> %146 to i16, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %147, ptr addrspace(1) %143, i1 %19) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4l7l4bdnbq326sflrzny7g6rveeysg6ntddfudgfljdssmdl6n5.py", directory: "inductor_cache/4l")
!4 = !{ptr @triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1", linkageName: "triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 20, scope: !7)
!23 = !DILocation(line: 31, column: 20, scope: !7)
!24 = !DILocation(line: 33, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 47, column: 28, scope: !7)
!30 = !DILocation(line: 56, column: 20, scope: !7)
!31 = !DILocation(line: 59, column: 20, scope: !7)
!32 = !DILocation(line: 66, column: 25, scope: !7)
!33 = !DILocation(line: 67, column: 25, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 19, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 19, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 21, scope: !7)
!41 = !DILocation(line: 44, column: 24, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 50, column: 42, scope: !7)
!53 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 53, column: 21, scope: !7)
!59 = !DILocation(line: 54, column: 21, scope: !7)
!60 = !DILocation(line: 55, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 37, scope: !7)
!62 = !DILocation(line: 67, column: 37, scope: !7)
!63 = !DILocation(line: 68, column: 25, scope: !7)
!64 = !DILocation(line: 57, column: 20, scope: !7)
!65 = !DILocation(line: 58, column: 24, scope: !7)
!66 = !DILocation(line: 60, column: 20, scope: !7)
!67 = !DILocation(line: 61, column: 24, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !69)
!69 = !DILocation(line: 62, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !69)
!73 = !DILocation(line: 63, column: 19, scope: !7)
!74 = !DILocation(line: 68, column: 37, scope: !7)
!75 = !DILocation(line: 69, column: 25, scope: !7)
!76 = !DILocation(line: 64, column: 13, scope: !7)
!77 = !DILocation(line: 65, column: 19, scope: !7)
!78 = !DILocation(line: 69, column: 37, scope: !7)
!79 = !DILocation(line: 69, column: 4, scope: !7)
