; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %11, 256, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %6, %11, !dbg !13
  %19 = or disjoint i32 %6, %12, !dbg !13
  %20 = or disjoint i32 %18, 512, !dbg !13
  %21 = or disjoint i32 %18, 768, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %22 = sdiv i32 %.frozen, 32, !dbg !14
  %23 = mul i32 %22, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %23, !dbg !15
  %24 = srem i32 %14, 32, !dbg !15
  %25 = srem i32 %15, 32, !dbg !15
  %26 = srem i32 %16, 32, !dbg !15
  %27 = sdiv i32 %17, 32, !dbg !14
  %28 = srem i32 %22, 32, !dbg !16
  %29 = srem i32 %27, 32, !dbg !16
  %30 = shl nsw i32 %.decomposed, 1, !dbg !17
  %31 = shl nsw i32 %24, 1, !dbg !17
  %32 = shl nsw i32 %25, 1, !dbg !17
  %33 = shl nsw i32 %26, 1, !dbg !17
  %34 = shl i32 %22, 7, !dbg !18
  %35 = shl i32 %27, 7, !dbg !18
  %36 = add i32 %30, %34, !dbg !19
  %37 = add i32 %34, %31, !dbg !19
  %38 = add i32 %34, %32, !dbg !19
  %39 = add i32 %34, %33, !dbg !19
  %40 = add i32 %30, %35, !dbg !19
  %41 = add i32 %31, %35, !dbg !19
  %42 = add i32 %32, %35, !dbg !19
  %43 = add i32 %33, %35, !dbg !19
  %44 = sext i32 %36 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = sext i32 %37 to i64, !dbg !20
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !20
  %48 = sext i32 %38 to i64, !dbg !20
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !20
  %50 = sext i32 %39 to i64, !dbg !20
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !20
  %52 = sext i32 %40 to i64, !dbg !20
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !20
  %54 = sext i32 %41 to i64, !dbg !20
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !20
  %56 = sext i32 %42 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !20
  %58 = sext i32 %43 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %61 = bitcast i32 %60 to float, !dbg !21
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %63 = bitcast i32 %62 to float, !dbg !21
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !21
  %65 = bitcast i32 %64 to float, !dbg !21
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !21
  %67 = bitcast i32 %66 to float, !dbg !21
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !21
  %69 = bitcast i32 %68 to float, !dbg !21
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !21
  %71 = bitcast i32 %70 to float, !dbg !21
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !21
  %73 = bitcast i32 %72 to float, !dbg !21
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !21
  %75 = bitcast i32 %74 to float, !dbg !21
  %76 = or disjoint i32 %31, 1, !dbg !22
  %77 = or disjoint i32 %32, 1, !dbg !22
  %78 = or disjoint i32 %33, 1, !dbg !22
  %79 = or disjoint i32 %36, 1, !dbg !23
  %80 = add i32 %34, %76, !dbg !23
  %81 = add i32 %34, %77, !dbg !23
  %82 = add i32 %34, %78, !dbg !23
  %83 = or disjoint i32 %40, 1, !dbg !23
  %84 = add i32 %76, %35, !dbg !23
  %85 = add i32 %77, %35, !dbg !23
  %86 = add i32 %78, %35, !dbg !23
  %87 = sext i32 %79 to i64, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !24
  %89 = sext i32 %80 to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !24
  %91 = sext i32 %81 to i64, !dbg !24
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !24
  %93 = sext i32 %82 to i64, !dbg !24
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !24
  %95 = sext i32 %83 to i64, !dbg !24
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !24
  %97 = sext i32 %84 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !24
  %99 = sext i32 %85 to i64, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !24
  %101 = sext i32 %86 to i64, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !24
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #2, !dbg !25
  %104 = bitcast i32 %103 to float, !dbg !25
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #2, !dbg !25
  %106 = bitcast i32 %105 to float, !dbg !25
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !25
  %110 = bitcast i32 %109 to float, !dbg !25
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !25
  %112 = bitcast i32 %111 to float, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !25
  %114 = bitcast i32 %113 to float, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #2, !dbg !25
  %116 = bitcast i32 %115 to float, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #2, !dbg !25
  %118 = bitcast i32 %117 to float, !dbg !25
  %119 = add nsw i32 %31, 64, !dbg !26
  %120 = add nsw i32 %32, 64, !dbg !26
  %121 = add nsw i32 %33, 64, !dbg !26
  %122 = add i32 %36, 64, !dbg !27
  %123 = add nuw i32 %34, %119, !dbg !27
  %124 = add nuw i32 %34, %120, !dbg !27
  %125 = add nuw i32 %34, %121, !dbg !27
  %126 = add i32 %40, 64, !dbg !27
  %127 = add nuw i32 %119, %35, !dbg !27
  %128 = add nuw i32 %120, %35, !dbg !27
  %129 = add nuw i32 %121, %35, !dbg !27
  %130 = sext i32 %122 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !28
  %132 = sext i32 %123 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !28
  %134 = sext i32 %124 to i64, !dbg !28
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !28
  %136 = sext i32 %125 to i64, !dbg !28
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !28
  %138 = sext i32 %126 to i64, !dbg !28
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !28
  %140 = sext i32 %127 to i64, !dbg !28
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !28
  %142 = sext i32 %128 to i64, !dbg !28
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !28
  %144 = sext i32 %129 to i64, !dbg !28
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !28
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #2, !dbg !29
  %147 = bitcast i32 %146 to float, !dbg !29
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #2, !dbg !29
  %149 = bitcast i32 %148 to float, !dbg !29
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #2, !dbg !29
  %151 = bitcast i32 %150 to float, !dbg !29
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #2, !dbg !29
  %153 = bitcast i32 %152 to float, !dbg !29
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #2, !dbg !29
  %155 = bitcast i32 %154 to float, !dbg !29
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #2, !dbg !29
  %157 = bitcast i32 %156 to float, !dbg !29
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #2, !dbg !29
  %159 = bitcast i32 %158 to float, !dbg !29
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #2, !dbg !29
  %161 = bitcast i32 %160 to float, !dbg !29
  %162 = add nsw i32 %31, 65, !dbg !30
  %163 = add nsw i32 %32, 65, !dbg !30
  %164 = add nsw i32 %33, 65, !dbg !30
  %165 = add i32 %36, 65, !dbg !31
  %166 = add nuw i32 %34, %162, !dbg !31
  %167 = add nuw i32 %34, %163, !dbg !31
  %168 = add nuw i32 %34, %164, !dbg !31
  %169 = add i32 %40, 65, !dbg !31
  %170 = add nuw i32 %162, %35, !dbg !31
  %171 = add nuw i32 %163, %35, !dbg !31
  %172 = add nuw i32 %164, %35, !dbg !31
  %173 = sext i32 %165 to i64, !dbg !32
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !32
  %175 = sext i32 %166 to i64, !dbg !32
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !32
  %177 = sext i32 %167 to i64, !dbg !32
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !32
  %179 = sext i32 %168 to i64, !dbg !32
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !32
  %181 = sext i32 %169 to i64, !dbg !32
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !32
  %183 = sext i32 %170 to i64, !dbg !32
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !32
  %185 = sext i32 %171 to i64, !dbg !32
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !32
  %187 = sext i32 %172 to i64, !dbg !32
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !32
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #2, !dbg !33
  %190 = bitcast i32 %189 to float, !dbg !33
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #2, !dbg !33
  %192 = bitcast i32 %191 to float, !dbg !33
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #2, !dbg !33
  %194 = bitcast i32 %193 to float, !dbg !33
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #2, !dbg !33
  %196 = bitcast i32 %195 to float, !dbg !33
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #2, !dbg !33
  %198 = bitcast i32 %197 to float, !dbg !33
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 true) #2, !dbg !33
  %200 = bitcast i32 %199 to float, !dbg !33
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #2, !dbg !33
  %202 = bitcast i32 %201 to float, !dbg !33
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #2, !dbg !33
  %204 = bitcast i32 %203 to float, !dbg !33
  %205 = fcmp ogt float %104, %61, !dbg !34
  %206 = fcmp ogt float %106, %63, !dbg !34
  %207 = fcmp ogt float %108, %65, !dbg !34
  %208 = fcmp ogt float %110, %67, !dbg !34
  %209 = fcmp ogt float %112, %69, !dbg !34
  %210 = fcmp ogt float %114, %71, !dbg !34
  %211 = fcmp ogt float %116, %73, !dbg !34
  %212 = fcmp ogt float %118, %75, !dbg !34
  %213 = fcmp uno float %104, 0.000000e+00, !dbg !38
  %214 = fcmp uno float %106, 0.000000e+00, !dbg !38
  %215 = fcmp uno float %108, 0.000000e+00, !dbg !38
  %216 = fcmp uno float %110, 0.000000e+00, !dbg !38
  %217 = fcmp uno float %112, 0.000000e+00, !dbg !38
  %218 = fcmp uno float %114, 0.000000e+00, !dbg !38
  %219 = fcmp uno float %116, 0.000000e+00, !dbg !38
  %220 = fcmp uno float %118, 0.000000e+00, !dbg !38
  %221 = or i1 %205, %213, !dbg !39
  %222 = or i1 %206, %214, !dbg !39
  %223 = or i1 %207, %215, !dbg !39
  %224 = or i1 %208, %216, !dbg !39
  %225 = or i1 %209, %217, !dbg !39
  %226 = or i1 %210, %218, !dbg !39
  %227 = or i1 %211, %219, !dbg !39
  %228 = or i1 %212, %220, !dbg !39
  %229 = select i1 %221, float %104, float %61, !dbg !40
  %230 = select i1 %222, float %106, float %63, !dbg !40
  %231 = select i1 %223, float %108, float %65, !dbg !40
  %232 = select i1 %224, float %110, float %67, !dbg !40
  %233 = select i1 %225, float %112, float %69, !dbg !40
  %234 = select i1 %226, float %114, float %71, !dbg !40
  %235 = select i1 %227, float %116, float %73, !dbg !40
  %236 = select i1 %228, float %118, float %75, !dbg !40
  %237 = fcmp olt float %229, %147, !dbg !41
  %238 = fcmp olt float %230, %149, !dbg !41
  %239 = fcmp olt float %231, %151, !dbg !41
  %240 = fcmp olt float %232, %153, !dbg !41
  %241 = fcmp olt float %233, %155, !dbg !41
  %242 = fcmp olt float %234, %157, !dbg !41
  %243 = fcmp olt float %235, %159, !dbg !41
  %244 = fcmp olt float %236, %161, !dbg !41
  %245 = fcmp uno float %147, 0.000000e+00, !dbg !43
  %246 = fcmp uno float %149, 0.000000e+00, !dbg !43
  %247 = fcmp uno float %151, 0.000000e+00, !dbg !43
  %248 = fcmp uno float %153, 0.000000e+00, !dbg !43
  %249 = fcmp uno float %155, 0.000000e+00, !dbg !43
  %250 = fcmp uno float %157, 0.000000e+00, !dbg !43
  %251 = fcmp uno float %159, 0.000000e+00, !dbg !43
  %252 = fcmp uno float %161, 0.000000e+00, !dbg !43
  %253 = or i1 %237, %245, !dbg !44
  %254 = or i1 %238, %246, !dbg !44
  %255 = or i1 %239, %247, !dbg !44
  %256 = or i1 %240, %248, !dbg !44
  %257 = or i1 %241, %249, !dbg !44
  %258 = or i1 %242, %250, !dbg !44
  %259 = or i1 %243, %251, !dbg !44
  %260 = or i1 %244, %252, !dbg !44
  %261 = select i1 %253, float %147, float %229, !dbg !45
  %262 = select i1 %254, float %149, float %230, !dbg !45
  %263 = select i1 %255, float %151, float %231, !dbg !45
  %264 = select i1 %256, float %153, float %232, !dbg !45
  %265 = select i1 %257, float %155, float %233, !dbg !45
  %266 = select i1 %258, float %157, float %234, !dbg !45
  %267 = select i1 %259, float %159, float %235, !dbg !45
  %268 = select i1 %260, float %161, float %236, !dbg !45
  %269 = fcmp olt float %261, %190, !dbg !46
  %270 = fcmp olt float %262, %192, !dbg !46
  %271 = fcmp olt float %263, %194, !dbg !46
  %272 = fcmp olt float %264, %196, !dbg !46
  %273 = fcmp olt float %265, %198, !dbg !46
  %274 = fcmp olt float %266, %200, !dbg !46
  %275 = fcmp olt float %267, %202, !dbg !46
  %276 = fcmp olt float %268, %204, !dbg !46
  %277 = fcmp uno float %190, 0.000000e+00, !dbg !48
  %278 = fcmp uno float %192, 0.000000e+00, !dbg !48
  %279 = fcmp uno float %194, 0.000000e+00, !dbg !48
  %280 = fcmp uno float %196, 0.000000e+00, !dbg !48
  %281 = fcmp uno float %198, 0.000000e+00, !dbg !48
  %282 = fcmp uno float %200, 0.000000e+00, !dbg !48
  %283 = fcmp uno float %202, 0.000000e+00, !dbg !48
  %284 = fcmp uno float %204, 0.000000e+00, !dbg !48
  %285 = or i1 %269, %277, !dbg !49
  %286 = or i1 %270, %278, !dbg !49
  %287 = or i1 %271, %279, !dbg !49
  %288 = or i1 %272, %280, !dbg !49
  %289 = or i1 %273, %281, !dbg !49
  %290 = or i1 %274, %282, !dbg !49
  %291 = or i1 %275, %283, !dbg !49
  %292 = or i1 %276, %284, !dbg !49
  %293 = zext i1 %205 to i32, !dbg !50
  %294 = select i1 %237, i32 2, i32 %293, !dbg !51
  %295 = select i1 %269, i32 3, i32 %294, !dbg !52
  %296 = zext i1 %206 to i32, !dbg !50
  %297 = select i1 %238, i32 2, i32 %296, !dbg !51
  %298 = select i1 %270, i32 3, i32 %297, !dbg !52
  %299 = zext i1 %207 to i32, !dbg !50
  %300 = select i1 %239, i32 2, i32 %299, !dbg !51
  %301 = select i1 %271, i32 3, i32 %300, !dbg !52
  %302 = zext i1 %208 to i32, !dbg !50
  %303 = select i1 %240, i32 2, i32 %302, !dbg !51
  %304 = select i1 %272, i32 3, i32 %303, !dbg !52
  %305 = zext i1 %209 to i32, !dbg !50
  %306 = select i1 %241, i32 2, i32 %305, !dbg !51
  %307 = select i1 %273, i32 3, i32 %306, !dbg !52
  %308 = zext i1 %210 to i32, !dbg !50
  %309 = select i1 %242, i32 2, i32 %308, !dbg !51
  %310 = select i1 %274, i32 3, i32 %309, !dbg !52
  %311 = zext i1 %211 to i32, !dbg !50
  %312 = select i1 %243, i32 2, i32 %311, !dbg !51
  %313 = select i1 %275, i32 3, i32 %312, !dbg !52
  %314 = zext i1 %212 to i32, !dbg !50
  %315 = select i1 %244, i32 2, i32 %314, !dbg !51
  %316 = select i1 %276, i32 3, i32 %315, !dbg !52
  %317 = lshr i32 %295, 1, !dbg !53
  %318 = lshr i32 %298, 1, !dbg !53
  %319 = lshr i32 %301, 1, !dbg !53
  %320 = lshr i32 %304, 1, !dbg !53
  %321 = lshr i32 %307, 1, !dbg !53
  %322 = lshr i32 %310, 1, !dbg !53
  %323 = lshr i32 %313, 1, !dbg !53
  %324 = lshr i32 %316, 1, !dbg !53
  %325 = and i32 %295, 1, !dbg !54
  %326 = and i32 %301, 1, !dbg !54
  %327 = and i32 %307, 1, !dbg !54
  %328 = and i32 %313, 1, !dbg !54
  %329 = shl nsw i32 %28, 1, !dbg !55
  %330 = shl nsw i32 %29, 1, !dbg !55
  %331 = or disjoint i32 %317, %329, !dbg !56
  %332 = or disjoint i32 %318, %329, !dbg !56
  %333 = or disjoint i32 %319, %329, !dbg !56
  %334 = or disjoint i32 %320, %329, !dbg !56
  %335 = or disjoint i32 %321, %330, !dbg !56
  %336 = or disjoint i32 %322, %330, !dbg !56
  %337 = or disjoint i32 %323, %330, !dbg !56
  %338 = or disjoint i32 %324, %330, !dbg !56
  %339 = or disjoint i32 %325, %30, !dbg !57
  %340 = or i32 %298, %31, !dbg !57
  %341 = or disjoint i32 %326, %32, !dbg !57
  %342 = or i32 %304, %33, !dbg !57
  %343 = or disjoint i32 %327, %30, !dbg !57
  %344 = or i32 %310, %31, !dbg !57
  %345 = or disjoint i32 %328, %32, !dbg !57
  %346 = or i32 %316, %33, !dbg !57
  %347 = sext i32 %331 to i64, !dbg !58
  %348 = sext i32 %332 to i64, !dbg !58
  %349 = sext i32 %333 to i64, !dbg !58
  %350 = sext i32 %334 to i64, !dbg !58
  %351 = sext i32 %335 to i64, !dbg !58
  %352 = sext i32 %336 to i64, !dbg !58
  %353 = sext i32 %337 to i64, !dbg !58
  %354 = sext i32 %338 to i64, !dbg !58
  %355 = shl nsw i64 %347, 6, !dbg !58
  %356 = shl nsw i64 %348, 6, !dbg !58
  %357 = shl nsw i64 %349, 6, !dbg !58
  %358 = shl nsw i64 %350, 6, !dbg !58
  %359 = shl nsw i64 %351, 6, !dbg !58
  %360 = shl nsw i64 %352, 6, !dbg !58
  %361 = shl nsw i64 %353, 6, !dbg !58
  %362 = shl nsw i64 %354, 6, !dbg !58
  %363 = sext i32 %339 to i64, !dbg !59
  %364 = sext i32 %340 to i64, !dbg !59
  %365 = sext i32 %341 to i64, !dbg !59
  %366 = sext i32 %342 to i64, !dbg !59
  %367 = sext i32 %343 to i64, !dbg !59
  %368 = sext i32 %344 to i64, !dbg !59
  %369 = sext i32 %345 to i64, !dbg !59
  %370 = sext i32 %346 to i64, !dbg !59
  %371 = add nsw i64 %355, %363, !dbg !59
  %372 = add nsw i64 %356, %364, !dbg !59
  %373 = add nsw i64 %357, %365, !dbg !59
  %374 = add nsw i64 %358, %366, !dbg !59
  %375 = add nsw i64 %359, %367, !dbg !59
  %376 = add nsw i64 %360, %368, !dbg !59
  %377 = add nsw i64 %361, %369, !dbg !59
  %378 = add nsw i64 %362, %370, !dbg !59
  %379 = sext i32 %13 to i64, !dbg !60
  %380 = getelementptr float, ptr addrspace(1) %1, i64 %379, !dbg !60
  %381 = sext i32 %17 to i64, !dbg !60
  %382 = getelementptr float, ptr addrspace(1) %1, i64 %381, !dbg !60
  %383 = bitcast float %261 to i32, !dbg !61
  %384 = select i1 %285, i32 %189, i32 %383, !dbg !62
  %385 = bitcast float %262 to i32, !dbg !61
  %386 = select i1 %286, i32 %191, i32 %385, !dbg !62
  %387 = bitcast float %263 to i32, !dbg !61
  %388 = select i1 %287, i32 %193, i32 %387, !dbg !62
  %389 = bitcast float %264 to i32, !dbg !61
  %390 = select i1 %288, i32 %195, i32 %389, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %386, i32 %388, i32 %390, ptr addrspace(1) %380, i1 true) #2, !dbg !61
  %391 = bitcast float %265 to i32, !dbg !61
  %392 = select i1 %289, i32 %197, i32 %391, !dbg !62
  %393 = bitcast float %266 to i32, !dbg !61
  %394 = select i1 %290, i32 %199, i32 %393, !dbg !62
  %395 = bitcast float %267 to i32, !dbg !61
  %396 = select i1 %291, i32 %201, i32 %395, !dbg !62
  %397 = bitcast float %268 to i32, !dbg !61
  %398 = select i1 %292, i32 %203, i32 %397, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %392, i32 %394, i32 %396, i32 %398, ptr addrspace(1) %382, i1 true) #2, !dbg !61
  %399 = sext i32 %18 to i64, !dbg !63
  %400 = getelementptr i64, ptr addrspace(1) %2, i64 %399, !dbg !63
  %401 = sext i32 %19 to i64, !dbg !63
  %402 = getelementptr i64, ptr addrspace(1) %2, i64 %401, !dbg !63
  %403 = sext i32 %20 to i64, !dbg !63
  %404 = getelementptr i64, ptr addrspace(1) %2, i64 %403, !dbg !63
  %405 = sext i32 %21 to i64, !dbg !63
  %406 = getelementptr i64, ptr addrspace(1) %2, i64 %405, !dbg !63
  %407 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %9, !dbg !64
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %407, i64 %371, i64 %372, i1 true) #2, !dbg !64
  %408 = getelementptr inbounds i8, ptr addrspace(3) %407, i32 16, !dbg !64
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %408, i64 %373, i64 %374, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %409 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %11, !dbg !64
  %410 = load <2 x i64>, ptr addrspace(3) %409, align 16, !dbg !64
  %411 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %12, !dbg !64
  %412 = load <2 x i64>, ptr addrspace(3) %411, align 16, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %407, i64 %375, i64 %376, i1 true) #2, !dbg !64
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %408, i64 %377, i64 %378, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %413 = load <2 x i64>, ptr addrspace(3) %409, align 16, !dbg !64
  %414 = load <2 x i64>, ptr addrspace(3) %411, align 16, !dbg !64
  %.extract = extractelement <2 x i64> %410, i64 0, !dbg !64
  %.extract1 = extractelement <2 x i64> %410, i64 1, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract, i64 %.extract1, ptr addrspace(1) %400, i1 true) #2, !dbg !64
  %.extract2 = extractelement <2 x i64> %412, i64 0, !dbg !64
  %.extract3 = extractelement <2 x i64> %412, i64 1, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract2, i64 %.extract3, ptr addrspace(1) %402, i1 true) #2, !dbg !64
  %.extract4 = extractelement <2 x i64> %413, i64 0, !dbg !64
  %.extract5 = extractelement <2 x i64> %413, i64 1, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract4, i64 %.extract5, ptr addrspace(1) %404, i1 true) #2, !dbg !64
  %.extract6 = extractelement <2 x i64> %414, i64 0, !dbg !64
  %.extract7 = extractelement <2 x i64> %414, i64 1, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract6, i64 %.extract7, ptr addrspace(1) %406, i1 true) #2, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv7jdvf4x3ahc4hrjx2uqv52zg7ecqyaldryqzgcvxazqhjeopka.py", directory: "inductor_cache/v7")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_1", linkageName: "triton_poi_fused_max_pool2d_with_indices_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 27, scope: !7)
!17 = !DILocation(line: 28, column: 32, scope: !7)
!18 = !DILocation(line: 28, column: 41, scope: !7)
!19 = !DILocation(line: 28, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 46, scope: !7)
!22 = !DILocation(line: 29, column: 34, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 30, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 42, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 32, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !42)
!42 = !DILocation(line: 33, column: 40, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !42)
!46 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !47)
!47 = !DILocation(line: 34, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !47)
!50 = !DILocation(line: 46, column: 30, scope: !7)
!51 = !DILocation(line: 41, column: 35, scope: !7)
!52 = !DILocation(line: 44, column: 35, scope: !7)
!53 = !DILocation(line: 46, column: 87, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 49, column: 14, scope: !7)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 20, scope: !7)
!59 = !DILocation(line: 55, column: 20, scope: !7)
!60 = !DILocation(line: 56, column: 25, scope: !7)
!61 = !DILocation(line: 56, column: 36, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !47)
!63 = !DILocation(line: 57, column: 25, scope: !7)
!64 = !DILocation(line: 57, column: 37, scope: !7)
!65 = !DILocation(line: 57, column: 4, scope: !7)
