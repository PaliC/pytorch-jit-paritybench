#loc = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":19:0)
module {
  tt.func public @triton_poi_fused_relu_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<256xi32> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_0 : tensor<256xi32> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc7)
    %8 = tt.load %7, %5 : tensor<256x!tt.ptr<f32>> loc(#loc8)
    %9 = arith.cmpf ogt, %cst, %8 : tensor<256xf32> loc(#loc22)
    %10 = arith.select %9, %cst, %8 : tensor<256xi1>, tensor<256xf32> loc(#loc23)
    %11 = arith.cmpf ogt, %cst, %10 : tensor<256xf32> loc(#loc24)
    %12 = arith.select %11, %cst, %10 : tensor<256xi1>, tensor<256xf32> loc(#loc25)
    %13 = arith.cmpf ogt, %cst, %12 : tensor<256xf32> loc(#loc26)
    %14 = arith.select %13, %cst, %12 : tensor<256xi1>, tensor<256xf32> loc(#loc27)
    %15 = arith.cmpf ogt, %cst, %14 : tensor<256xf32> loc(#loc28)
    %16 = arith.select %15, %cst, %14 : tensor<256xi1>, tensor<256xf32> loc(#loc29)
    %17 = arith.cmpf ogt, %cst, %16 : tensor<256xf32> loc(#loc30)
    %18 = arith.select %17, %cst, %16 : tensor<256xi1>, tensor<256xf32> loc(#loc31)
    %19 = arith.cmpf ogt, %cst, %18 : tensor<256xf32> loc(#loc32)
    %20 = arith.select %19, %cst, %18 : tensor<256xi1>, tensor<256xf32> loc(#loc33)
    %21 = arith.cmpf ogt, %cst, %20 : tensor<256xf32> loc(#loc34)
    %22 = arith.select %21, %cst, %20 : tensor<256xi1>, tensor<256xf32> loc(#loc35)
    %23 = arith.cmpf ogt, %cst, %22 : tensor<256xf32> loc(#loc36)
    %24 = arith.select %23, %cst, %22 : tensor<256xi1>, tensor<256xf32> loc(#loc37)
    %25 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc19)
    %26 = tt.addptr %25, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc19)
    tt.store %26, %24, %5 : tensor<256x!tt.ptr<f32>> loc(#loc20)
    tt.return loc(#loc21)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":21:28)
#loc3 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":21:33)
#loc4 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":22:36)
#loc5 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":22:23)
#loc6 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":23:21)
#loc7 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":25:30)
#loc8 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":25:35)
#loc9 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc10 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":27:40)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc12 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":28:40)
#loc13 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":29:40)
#loc14 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":30:40)
#loc15 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":31:40)
#loc16 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":32:40)
#loc17 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":33:40)
#loc18 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":34:40)
#loc19 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":35:25)
#loc20 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":35:36)
#loc21 = loc("inductor_cache/mx/cmxepr64s6wvxd64czehtb4pswqgr3wvbmmtwmidp6mtr3iy4cce.py":35:4)
#loc22 = loc(callsite(#loc9 at #loc10))
#loc23 = loc(callsite(#loc11 at #loc10))
#loc24 = loc(callsite(#loc9 at #loc12))
#loc25 = loc(callsite(#loc11 at #loc12))
#loc26 = loc(callsite(#loc9 at #loc13))
#loc27 = loc(callsite(#loc11 at #loc13))
#loc28 = loc(callsite(#loc9 at #loc14))
#loc29 = loc(callsite(#loc11 at #loc14))
#loc30 = loc(callsite(#loc9 at #loc15))
#loc31 = loc(callsite(#loc11 at #loc15))
#loc32 = loc(callsite(#loc9 at #loc16))
#loc33 = loc(callsite(#loc11 at #loc16))
#loc34 = loc(callsite(#loc9 at #loc17))
#loc35 = loc(callsite(#loc11 at #loc17))
#loc36 = loc(callsite(#loc9 at #loc18))
#loc37 = loc(callsite(#loc11 at #loc18))
