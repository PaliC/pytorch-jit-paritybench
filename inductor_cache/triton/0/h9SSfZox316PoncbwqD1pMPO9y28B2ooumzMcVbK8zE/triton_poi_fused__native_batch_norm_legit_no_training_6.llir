; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %15, 32, !dbg !12
  %18 = or disjoint i32 %15, 48, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 6, !dbg !15
  %22 = or disjoint i32 %21, %15, !dbg !16
  %23 = or disjoint i32 %21, %16, !dbg !16
  %24 = or disjoint i32 %21, %17, !dbg !16
  %25 = or disjoint i32 %21, %18, !dbg !16
  %.frozen = freeze i32 %19, !dbg !17
  %26 = sdiv i32 %.frozen, 2048, !dbg !17
  %27 = mul i32 %26, 2048, !dbg !18
  %.decomposed = sub i32 %.frozen, %27, !dbg !18
  %28 = shl i32 %22, 11, !dbg !19
  %29 = shl i32 %23, 11, !dbg !19
  %30 = shl i32 %24, 11, !dbg !19
  %31 = shl i32 %25, 11, !dbg !19
  %32 = shl i32 %26, 23, !dbg !20
  %33 = add i32 %32, %.decomposed, !dbg !21
  %34 = add i32 %33, %28, !dbg !22
  %35 = add i32 %33, %29, !dbg !22
  %36 = add i32 %33, %30, !dbg !22
  %37 = add i32 %33, %31, !dbg !22
  %38 = sext i32 %34 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = sext i32 %35 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = sext i32 %36 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %37 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !24
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !24
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !24
  %50 = sext i32 %.decomposed to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !27
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !28
  %59 = bitcast i32 %55 to float, !dbg !28
  %60 = bitcast i32 %56 to float, !dbg !28
  %61 = bitcast i32 %57 to float, !dbg !28
  %62 = bitcast i32 %58 to float, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !31
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !32
  %67 = fadd float %59, 0x3EE4F8B580000000, !dbg !33
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !33
  %69 = fadd float %61, 0x3EE4F8B580000000, !dbg !33
  %70 = fadd float %62, 0x3EE4F8B580000000, !dbg !33
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %71, 0, !dbg !34
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %72, 0, !dbg !34
  br i1 %.not.i, label %78, label %73, !dbg !34

73:                                               ; preds = %8
  br i1 %.not1.i, label %76, label %74, !dbg !34

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

78:                                               ; preds = %8
  br i1 %.not1.i, label %81, label %79, !dbg !34

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !34
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i1 = icmp eq i32 %83, 0, !dbg !34
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !34
  br i1 %.not.i1, label %90, label %85, !dbg !34

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !34

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !34

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !34
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i6 = icmp eq i32 %95, 0, !dbg !34
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i9 = icmp eq i32 %96, 0, !dbg !34
  br i1 %.not.i6, label %102, label %97, !dbg !34

97:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %100, label %98, !dbg !34

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !34

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

__nv_sqrtf.exit10:                                ; preds = %98, %100, %103, %105
  %.0.i8 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !34
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i11 = icmp eq i32 %107, 0, !dbg !34
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i14 = icmp eq i32 %108, 0, !dbg !34
  br i1 %.not.i11, label %114, label %109, !dbg !34

109:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %112, label %110, !dbg !34

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !34

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

__nv_sqrtf.exit15:                                ; preds = %110, %112, %115, %117
  %.0.i13 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %120 = bitcast i32 %119 to float, !dbg !24
  %121 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %122 = bitcast i32 %121 to float, !dbg !26
  %123 = fsub float %120, %122, !dbg !35
  %124 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %125 = bitcast i32 %124 to float, !dbg !24
  %126 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %127 = bitcast i32 %126 to float, !dbg !26
  %128 = fsub float %125, %127, !dbg !35
  %129 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %130 = bitcast i32 %129 to float, !dbg !24
  %131 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %132 = bitcast i32 %131 to float, !dbg !26
  %133 = fsub float %130, %132, !dbg !35
  %134 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %135 = bitcast i32 %134 to float, !dbg !24
  %136 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %137 = bitcast i32 %136 to float, !dbg !26
  %138 = fsub float %135, %137, !dbg !35
  %139 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !24
  %140 = bitcast i32 %139 to float, !dbg !24
  %141 = fsub float %140, %122, !dbg !35
  %142 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !24
  %143 = bitcast i32 %142 to float, !dbg !24
  %144 = fsub float %143, %127, !dbg !35
  %145 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !24
  %146 = bitcast i32 %145 to float, !dbg !24
  %147 = fsub float %146, %132, !dbg !35
  %148 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !24
  %149 = bitcast i32 %148 to float, !dbg !24
  %150 = fsub float %149, %137, !dbg !35
  %151 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %152 = bitcast i32 %151 to float, !dbg !24
  %153 = fsub float %152, %122, !dbg !35
  %154 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %155 = bitcast i32 %154 to float, !dbg !24
  %156 = fsub float %155, %127, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %158 = bitcast i32 %157 to float, !dbg !24
  %159 = fsub float %158, %132, !dbg !35
  %160 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %161 = bitcast i32 %160 to float, !dbg !24
  %162 = fsub float %161, %137, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %164 = bitcast i32 %163 to float, !dbg !24
  %165 = fsub float %164, %122, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %167 = bitcast i32 %166 to float, !dbg !24
  %168 = fsub float %167, %127, !dbg !35
  %169 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %170 = bitcast i32 %169 to float, !dbg !24
  %171 = fsub float %170, %132, !dbg !35
  %172 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %173 = bitcast i32 %172 to float, !dbg !24
  %174 = fsub float %173, %137, !dbg !35
  %175 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !32
  %176 = bitcast i32 %175 to float, !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !32
  %178 = bitcast i32 %177 to float, !dbg !32
  %179 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !32
  %180 = bitcast i32 %179 to float, !dbg !32
  %181 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !32
  %182 = bitcast i32 %181 to float, !dbg !32
  %183 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %184 = bitcast i32 %183 to float, !dbg !30
  %185 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %186 = bitcast i32 %185 to float, !dbg !30
  %187 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %188 = bitcast i32 %187 to float, !dbg !30
  %189 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %190 = bitcast i32 %189 to float, !dbg !30
  %191 = or disjoint i32 %21, %13, !dbg !16
  %192 = or disjoint i32 %10, %18, !dbg !13
  %193 = or disjoint i32 %10, %17, !dbg !13
  %194 = or disjoint i32 %10, %16, !dbg !13
  %195 = or disjoint i32 %10, %15, !dbg !13
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !36
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !36
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !36
  %200 = fmul float %174, %196, !dbg !37
  %201 = fmul float %171, %197, !dbg !37
  %202 = fmul float %168, %198, !dbg !37
  %203 = fmul float %165, %199, !dbg !37
  %204 = fmul float %162, %196, !dbg !37
  %205 = fmul float %159, %197, !dbg !37
  %206 = fmul float %156, %198, !dbg !37
  %207 = fmul float %153, %199, !dbg !37
  %208 = fmul float %150, %196, !dbg !37
  %209 = fmul float %147, %197, !dbg !37
  %210 = fmul float %144, %198, !dbg !37
  %211 = fmul float %141, %199, !dbg !37
  %212 = fmul float %138, %196, !dbg !37
  %213 = fmul float %133, %197, !dbg !37
  %214 = fmul float %128, %198, !dbg !37
  %215 = fmul float %123, %199, !dbg !37
  %216 = fmul float %200, %190, !dbg !38
  %217 = fmul float %201, %188, !dbg !38
  %218 = fmul float %202, %186, !dbg !38
  %219 = fmul float %203, %184, !dbg !38
  %220 = fmul float %204, %190, !dbg !38
  %221 = fmul float %205, %188, !dbg !38
  %222 = fmul float %206, %186, !dbg !38
  %223 = fmul float %207, %184, !dbg !38
  %224 = fmul float %208, %190, !dbg !38
  %225 = fmul float %209, %188, !dbg !38
  %226 = fmul float %210, %186, !dbg !38
  %227 = fmul float %211, %184, !dbg !38
  %228 = fmul float %212, %190, !dbg !38
  %229 = fmul float %213, %188, !dbg !38
  %230 = fmul float %214, %186, !dbg !38
  %231 = fmul float %215, %184, !dbg !38
  %232 = fadd float %216, %182, !dbg !39
  %233 = fadd float %217, %180, !dbg !39
  %234 = fadd float %218, %178, !dbg !39
  %235 = fadd float %219, %176, !dbg !39
  %236 = fadd float %220, %182, !dbg !39
  %237 = fadd float %221, %180, !dbg !39
  %238 = fadd float %222, %178, !dbg !39
  %239 = fadd float %223, %176, !dbg !39
  %240 = fadd float %224, %182, !dbg !39
  %241 = fadd float %225, %180, !dbg !39
  %242 = fadd float %226, %178, !dbg !39
  %243 = fadd float %227, %176, !dbg !39
  %244 = fadd float %228, %182, !dbg !39
  %245 = fadd float %229, %180, !dbg !39
  %246 = fadd float %230, %178, !dbg !39
  %247 = fadd float %231, %176, !dbg !39
  %248 = shl i32 %195, 12, !dbg !40
  %249 = shl i32 %194, 12, !dbg !40
  %250 = shl i32 %193, 12, !dbg !40
  %251 = shl i32 %192, 12, !dbg !40
  %252 = add i32 %191, %248, !dbg !41
  %253 = add i32 %191, %249, !dbg !41
  %254 = add i32 %191, %250, !dbg !41
  %255 = add i32 %191, %251, !dbg !41
  %256 = sext i32 %252 to i64, !dbg !42
  %257 = getelementptr float, ptr addrspace(1) %5, i64 %256, !dbg !42
  %258 = sext i32 %253 to i64, !dbg !42
  %259 = getelementptr float, ptr addrspace(1) %5, i64 %258, !dbg !42
  %260 = sext i32 %254 to i64, !dbg !42
  %261 = getelementptr float, ptr addrspace(1) %5, i64 %260, !dbg !42
  %262 = sext i32 %255 to i64, !dbg !42
  %263 = getelementptr float, ptr addrspace(1) %5, i64 %262, !dbg !42
  %264 = shl i32 %11, 8, !dbg !43
  %265 = and i32 %264, 3840, !dbg !43
  %266 = or disjoint i32 %265, %15, !dbg !43
  %267 = and i32 %12, 1020, !dbg !43
  %268 = lshr exact i32 %265, 4, !dbg !43
  %269 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %268, !dbg !43
  %270 = getelementptr float, ptr addrspace(3) %269, i32 %266, !dbg !43
  %271 = bitcast float %232 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !43
  %272 = or disjoint i32 %266, 64, !dbg !43
  %273 = lshr i32 %272, 6, !dbg !43
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !43
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %272, !dbg !43
  %276 = bitcast float %233 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !43
  %277 = or disjoint i32 %266, 128, !dbg !43
  %278 = lshr i32 %277, 6, !dbg !43
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !43
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %277, !dbg !43
  %281 = bitcast float %234 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !43
  %282 = or disjoint i32 %266, 192, !dbg !43
  %283 = lshr i32 %282, 6, !dbg !43
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !43
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %282, !dbg !43
  %286 = bitcast float %235 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !43
  %287 = or disjoint i32 %266, 16, !dbg !43
  %288 = getelementptr float, ptr addrspace(3) %269, i32 %287, !dbg !43
  %289 = bitcast float %236 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !43
  %290 = or disjoint i32 %266, 80, !dbg !43
  %291 = lshr i32 %290, 6, !dbg !43
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i32 %291, !dbg !43
  %293 = getelementptr float, ptr addrspace(3) %292, i32 %290, !dbg !43
  %294 = bitcast float %237 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #4, !dbg !43
  %295 = or disjoint i32 %266, 144, !dbg !43
  %296 = lshr i32 %295, 6, !dbg !43
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !43
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %295, !dbg !43
  %299 = bitcast float %238 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !43
  %300 = or disjoint i32 %266, 208, !dbg !43
  %301 = lshr i32 %300, 6, !dbg !43
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %301, !dbg !43
  %303 = getelementptr float, ptr addrspace(3) %302, i32 %300, !dbg !43
  %304 = bitcast float %239 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !43
  %305 = or disjoint i32 %266, 32, !dbg !43
  %306 = getelementptr float, ptr addrspace(3) %269, i32 %305, !dbg !43
  %307 = bitcast float %240 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !43
  %308 = or disjoint i32 %266, 96, !dbg !43
  %309 = lshr i32 %308, 6, !dbg !43
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !43
  %311 = getelementptr float, ptr addrspace(3) %310, i32 %308, !dbg !43
  %312 = bitcast float %241 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !43
  %313 = or disjoint i32 %266, 160, !dbg !43
  %314 = lshr i32 %313, 6, !dbg !43
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i32 %314, !dbg !43
  %316 = getelementptr float, ptr addrspace(3) %315, i32 %313, !dbg !43
  %317 = bitcast float %242 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #4, !dbg !43
  %318 = or disjoint i32 %266, 224, !dbg !43
  %319 = lshr i32 %318, 6, !dbg !43
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i32 %319, !dbg !43
  %321 = getelementptr float, ptr addrspace(3) %320, i32 %318, !dbg !43
  %322 = bitcast float %243 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !43
  %323 = or disjoint i32 %266, 48, !dbg !43
  %324 = getelementptr float, ptr addrspace(3) %269, i32 %323, !dbg !43
  %325 = bitcast float %244 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #4, !dbg !43
  %326 = or disjoint i32 %266, 112, !dbg !43
  %327 = lshr i32 %326, 6, !dbg !43
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i32 %327, !dbg !43
  %329 = getelementptr float, ptr addrspace(3) %328, i32 %326, !dbg !43
  %330 = bitcast float %245 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !43
  %331 = or disjoint i32 %266, 176, !dbg !43
  %332 = lshr i32 %331, 6, !dbg !43
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !43
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %331, !dbg !43
  %335 = bitcast float %246 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !43
  %336 = or disjoint i32 %266, 240, !dbg !43
  %337 = lshr i32 %336, 6, !dbg !43
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !43
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !43
  %340 = bitcast float %247 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %341 = lshr i32 %267, 6, !dbg !43
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !43
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %267, !dbg !43
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !43
  %345 = or disjoint i32 %267, 1, !dbg !43
  %346 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %345, !dbg !43
  %347 = load i32, ptr addrspace(3) %346, align 4, !dbg !43
  %348 = or disjoint i32 %267, 2, !dbg !43
  %349 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %348, !dbg !43
  %350 = load i32, ptr addrspace(3) %349, align 4, !dbg !43
  %351 = or disjoint i32 %267, 3, !dbg !43
  %352 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %351, !dbg !43
  %353 = load i32, ptr addrspace(3) %352, align 4, !dbg !43
  %354 = or disjoint i32 %267, 1024, !dbg !43
  %355 = lshr i32 %354, 6, !dbg !43
  %356 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %355, !dbg !43
  %357 = getelementptr inbounds float, ptr addrspace(3) %356, i32 %354, !dbg !43
  %358 = load i32, ptr addrspace(3) %357, align 4, !dbg !43
  %359 = or disjoint i32 %267, 1025, !dbg !43
  %360 = lshr i32 %359, 6, !dbg !43
  %361 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %360, !dbg !43
  %362 = getelementptr inbounds float, ptr addrspace(3) %361, i32 %359, !dbg !43
  %363 = load i32, ptr addrspace(3) %362, align 4, !dbg !43
  %364 = or disjoint i32 %267, 1026, !dbg !43
  %365 = lshr i32 %364, 6, !dbg !43
  %366 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %365, !dbg !43
  %367 = getelementptr inbounds float, ptr addrspace(3) %366, i32 %364, !dbg !43
  %368 = load i32, ptr addrspace(3) %367, align 4, !dbg !43
  %369 = or disjoint i32 %267, 1027, !dbg !43
  %370 = lshr i32 %369, 6, !dbg !43
  %371 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %370, !dbg !43
  %372 = getelementptr inbounds float, ptr addrspace(3) %371, i32 %369, !dbg !43
  %373 = load i32, ptr addrspace(3) %372, align 4, !dbg !43
  %374 = or disjoint i32 %267, 2048, !dbg !43
  %375 = lshr i32 %374, 6, !dbg !43
  %376 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %375, !dbg !43
  %377 = getelementptr inbounds float, ptr addrspace(3) %376, i32 %374, !dbg !43
  %378 = load i32, ptr addrspace(3) %377, align 4, !dbg !43
  %379 = or disjoint i32 %267, 2049, !dbg !43
  %380 = lshr i32 %379, 6, !dbg !43
  %381 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %380, !dbg !43
  %382 = getelementptr inbounds float, ptr addrspace(3) %381, i32 %379, !dbg !43
  %383 = load i32, ptr addrspace(3) %382, align 4, !dbg !43
  %384 = or disjoint i32 %267, 2050, !dbg !43
  %385 = lshr i32 %384, 6, !dbg !43
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %385, !dbg !43
  %387 = getelementptr inbounds float, ptr addrspace(3) %386, i32 %384, !dbg !43
  %388 = load i32, ptr addrspace(3) %387, align 4, !dbg !43
  %389 = or disjoint i32 %267, 2051, !dbg !43
  %390 = lshr i32 %389, 6, !dbg !43
  %391 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %390, !dbg !43
  %392 = getelementptr inbounds float, ptr addrspace(3) %391, i32 %389, !dbg !43
  %393 = load i32, ptr addrspace(3) %392, align 4, !dbg !43
  %394 = or disjoint i32 %267, 3072, !dbg !43
  %395 = lshr i32 %394, 6, !dbg !43
  %396 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %395, !dbg !43
  %397 = getelementptr inbounds float, ptr addrspace(3) %396, i32 %394, !dbg !43
  %398 = load i32, ptr addrspace(3) %397, align 4, !dbg !43
  %399 = or disjoint i32 %267, 3073, !dbg !43
  %400 = lshr i32 %399, 6, !dbg !43
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %400, !dbg !43
  %402 = getelementptr inbounds float, ptr addrspace(3) %401, i32 %399, !dbg !43
  %403 = load i32, ptr addrspace(3) %402, align 4, !dbg !43
  %404 = or disjoint i32 %267, 3074, !dbg !43
  %405 = lshr i32 %404, 6, !dbg !43
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %405, !dbg !43
  %407 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %404, !dbg !43
  %408 = load i32, ptr addrspace(3) %407, align 4, !dbg !43
  %409 = or disjoint i32 %267, 3075, !dbg !43
  %410 = lshr i32 %409, 6, !dbg !43
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %410, !dbg !43
  %412 = getelementptr inbounds float, ptr addrspace(3) %411, i32 %409, !dbg !43
  %413 = load i32, ptr addrspace(3) %412, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %347, i32 %350, i32 %353, ptr addrspace(1) %257, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %358, i32 %363, i32 %368, i32 %373, ptr addrspace(1) %259, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %378, i32 %383, i32 %388, i32 %393, ptr addrspace(1) %261, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %398, i32 %403, i32 %408, i32 %413, ptr addrspace(1) %263, i1 true) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cel75zlhimsif776biquuf3vyj4cb6tbzv372mew66xel7upupkh.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 53, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 58, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 35, scope: !7)
!41 = !DILocation(line: 48, column: 30, scope: !7)
!42 = !DILocation(line: 48, column: 25, scope: !7)
!43 = !DILocation(line: 48, column: 47, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
