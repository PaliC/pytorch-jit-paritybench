; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 16, !dbg !15
  %14 = mul i32 %13, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = shl i32 %13, 6, !dbg !17
  %16 = add i32 %15, %.decomposed, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !20
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !20
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !20
  %22 = shl nsw i32 %13, 2, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #1, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #1, !dbg !23
  %27 = add i32 %16, 16, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %12) #1, !dbg !26
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !26
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !26
  %33 = or disjoint i32 %22, 1, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #1, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #1, !dbg !29
  %38 = add i32 %16, 32, !dbg !30
  %39 = sext i32 %38 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !31
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %12) #1, !dbg !32
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !32
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !32
  %44 = or disjoint i32 %22, 2, !dbg !33
  %45 = sext i32 %44 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !34
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %12) #1, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %12) #1, !dbg !35
  %49 = add i32 %16, 48, !dbg !36
  %50 = sext i32 %49 to i64, !dbg !37
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !37
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %12) #1, !dbg !38
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !38
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !38
  %55 = or disjoint i32 %22, 3, !dbg !39
  %56 = sext i32 %55 to i64, !dbg !40
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !40
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %12) #1, !dbg !41
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %12) #1, !dbg !41
  %60 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !20
  %61 = insertelement <2 x i32> %60, i32 %31, i64 1, !dbg !20
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !20
  %63 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !23
  %64 = insertelement <2 x i32> %63, i32 %36, i64 1, !dbg !23
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !23
  %66 = fadd <2 x float> %62, %65, !dbg !42
  %67 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !20
  %68 = insertelement <2 x i32> %67, i32 %32, i64 1, !dbg !20
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !20
  %70 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !23
  %71 = insertelement <2 x i32> %70, i32 %37, i64 1, !dbg !23
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !23
  %73 = fadd <2 x float> %69, %72, !dbg !42
  %74 = extractelement <2 x float> %66, i64 0, !dbg !43
  %75 = extractelement <2 x float> %66, i64 1, !dbg !44
  %76 = fadd float %74, %75, !dbg !45
  %77 = extractelement <2 x float> %73, i64 0, !dbg !43
  %78 = extractelement <2 x float> %73, i64 1, !dbg !44
  %79 = fadd float %77, %78, !dbg !45
  %80 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !32
  %81 = insertelement <2 x i32> %80, i32 %53, i64 1, !dbg !32
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !32
  %83 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !35
  %84 = insertelement <2 x i32> %83, i32 %58, i64 1, !dbg !35
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !35
  %86 = fadd <2 x float> %82, %85, !dbg !46
  %87 = extractelement <2 x float> %86, i64 0, !dbg !47
  %88 = fadd float %76, %87, !dbg !48
  %89 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !32
  %90 = insertelement <2 x i32> %89, i32 %54, i64 1, !dbg !32
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !32
  %92 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !35
  %93 = insertelement <2 x i32> %92, i32 %59, i64 1, !dbg !35
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !35
  %95 = fadd <2 x float> %91, %94, !dbg !46
  %96 = extractelement <2 x float> %95, i64 0, !dbg !47
  %97 = fadd float %79, %96, !dbg !48
  %98 = extractelement <2 x float> %86, i64 1, !dbg !49
  %99 = fadd float %88, %98, !dbg !50
  %100 = extractelement <2 x float> %95, i64 1, !dbg !49
  %101 = fadd float %97, %100, !dbg !50
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 4.000000e+00) #1, !dbg !51
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 4.000000e+00) #1, !dbg !51
  %104 = fsub float %74, %102, !dbg !43
  %105 = fsub float %77, %103, !dbg !43
  %106 = fmul float %104, %104, !dbg !52
  %107 = fmul float %105, %105, !dbg !52
  %108 = fsub float %75, %102, !dbg !44
  %109 = fsub float %78, %103, !dbg !44
  %110 = fmul float %108, %108, !dbg !53
  %111 = fmul float %109, %109, !dbg !53
  %112 = fadd float %106, %110, !dbg !54
  %113 = fadd float %107, %111, !dbg !54
  %114 = fsub float %87, %102, !dbg !47
  %115 = fsub float %96, %103, !dbg !47
  %116 = fmul float %114, %114, !dbg !55
  %117 = fmul float %115, %115, !dbg !55
  %118 = fadd float %116, %112, !dbg !56
  %119 = fadd float %117, %113, !dbg !56
  %120 = fsub float %98, %102, !dbg !49
  %121 = fsub float %100, %103, !dbg !49
  %122 = fmul float %120, %120, !dbg !57
  %123 = fmul float %121, %121, !dbg !57
  %124 = fadd float %122, %118, !dbg !58
  %125 = fadd float %123, %119, !dbg !58
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 4.000000e+00) #1, !dbg !59
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 4.000000e+00) #1, !dbg !59
  %128 = sext i32 %11 to i64, !dbg !60
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !60
  %130 = bitcast float %102 to i32, !dbg !61
  %131 = bitcast float %103 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %130, i32 %131, ptr addrspace(1) %129, i1 %12) #1, !dbg !61
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !62
  %133 = bitcast float %126 to i32, !dbg !63
  %134 = bitcast float %127 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %134, ptr addrspace(1) %132, i1 %12) #1, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crdf7fmil4yckkbhdblbkm3tqw5g4w6fell4uqrgfwipq5ujpxkk.py", directory: "inductor_cache/rd")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_0", linkageName: "triton_poi_fused_add_native_layer_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 32, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 37, scope: !7)
!24 = !DILocation(line: 29, column: 40, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 48, scope: !7)
!27 = !DILocation(line: 30, column: 34, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 40, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 48, scope: !7)
!33 = !DILocation(line: 32, column: 34, scope: !7)
!34 = !DILocation(line: 32, column: 30, scope: !7)
!35 = !DILocation(line: 32, column: 41, scope: !7)
!36 = !DILocation(line: 33, column: 41, scope: !7)
!37 = !DILocation(line: 33, column: 31, scope: !7)
!38 = !DILocation(line: 33, column: 49, scope: !7)
!39 = !DILocation(line: 34, column: 35, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 42, scope: !7)
!42 = !DILocation(line: 35, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 19, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 39, column: 19, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 41, column: 20, scope: !7)
!51 = !DILocation(line: 43, column: 20, scope: !7)
!52 = !DILocation(line: 45, column: 20, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 53, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 20, scope: !7)
!59 = !DILocation(line: 55, column: 20, scope: !7)
!60 = !DILocation(line: 56, column: 25, scope: !7)
!61 = !DILocation(line: 56, column: 37, scope: !7)
!62 = !DILocation(line: 57, column: 25, scope: !7)
!63 = !DILocation(line: 57, column: 37, scope: !7)
!64 = !DILocation(line: 57, column: 4, scope: !7)
