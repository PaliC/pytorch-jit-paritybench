; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 514, !dbg !13
  %.frozen16 = freeze i32 %13, !dbg !14
  %19 = sdiv i32 %.frozen16, 64, !dbg !14
  %20 = sdiv i32 %17, 64, !dbg !14
  %21 = srem i32 %19, 352, !dbg !15
  %22 = srem i32 %20, 352, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %23 = sdiv i32 %.frozen, 8, !dbg !16
  %24 = sdiv i32 %17, 8, !dbg !16
  %25 = srem i32 %23, 8, !dbg !17
  %26 = srem i32 %24, 8, !dbg !17
  %27 = mul i32 %23, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %27, !dbg !18
  %28 = srem i32 %15, 8, !dbg !18
  %29 = srem i32 %18, 8, !dbg !18
  %30 = sdiv i32 %13, 22528, !dbg !19
  %31 = sdiv i32 %17, 22528, !dbg !19
  %32 = mul i32 %19, 64, !dbg !20
  %.decomposed17 = sub i32 %.frozen16, %32, !dbg !20
  %33 = srem i32 %14, 64, !dbg !20
  %34 = srem i32 %15, 64, !dbg !20
  %35 = srem i32 %16, 64, !dbg !20
  %36 = srem i32 %18, 64, !dbg !20
  %37 = sext i32 %21 to i64, !dbg !21
  %38 = sext i32 %22 to i64, !dbg !21
  %39 = icmp slt i32 %21, 32, !dbg !21
  %40 = icmp slt i32 %22, 32, !dbg !21
  %41 = sext i32 %25 to i64, !dbg !22
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %26 to i64, !dbg !22
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %39, i1 %39) #1, !dbg !23
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %39, i1 %39) #1, !dbg !23
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %39, i1 %39) #1, !dbg !23
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %39, i1 %39) #1, !dbg !23
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %40, i1 %40) #1, !dbg !23
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %40, i1 %40) #1, !dbg !23
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %40, i1 %40) #1, !dbg !23
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %40, i1 %40) #1, !dbg !23
  %53 = lshr i64 %45, 57, !dbg !24
  %54 = and i64 %53, 64, !dbg !24
  %55 = add i64 %54, %45, !dbg !24
  %56 = lshr i64 %49, 57, !dbg !24
  %57 = and i64 %56, 64, !dbg !24
  %58 = add i64 %57, %49, !dbg !24
  %59 = sext i32 %.decomposed to i64, !dbg !25
  %60 = getelementptr i64, ptr addrspace(1) %0, i64 %59, !dbg !25
  %61 = sext i32 %28 to i64, !dbg !25
  %62 = getelementptr i64, ptr addrspace(1) %0, i64 %61, !dbg !25
  %63 = sext i32 %29 to i64, !dbg !25
  %64 = getelementptr i64, ptr addrspace(1) %0, i64 %63, !dbg !25
  %65 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %60, i1 %39, i1 %39, i1 %39) #1, !dbg !26
  %66 = extractvalue { i64, i64 } %65, 0, !dbg !26
  %67 = extractvalue { i64, i64 } %65, 1, !dbg !26
  %68 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %62, i1 %39, i1 %39, i1 %39) #1, !dbg !26
  %69 = extractvalue { i64, i64 } %68, 0, !dbg !26
  %70 = extractvalue { i64, i64 } %68, 1, !dbg !26
  %71 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %60, i1 %40, i1 %40, i1 %40) #1, !dbg !26
  %72 = extractvalue { i64, i64 } %71, 0, !dbg !26
  %73 = extractvalue { i64, i64 } %71, 1, !dbg !26
  %74 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %64, i1 %40, i1 %40, i1 %40) #1, !dbg !26
  %75 = extractvalue { i64, i64 } %74, 0, !dbg !26
  %76 = extractvalue { i64, i64 } %74, 1, !dbg !26
  %77 = lshr i64 %66, 57, !dbg !27
  %78 = and i64 %77, 64, !dbg !27
  %79 = add i64 %78, %66, !dbg !27
  %80 = lshr i64 %67, 57, !dbg !27
  %81 = and i64 %80, 64, !dbg !27
  %82 = add i64 %81, %67, !dbg !27
  %83 = lshr i64 %69, 57, !dbg !27
  %84 = and i64 %83, 64, !dbg !27
  %85 = add i64 %84, %69, !dbg !27
  %86 = lshr i64 %70, 57, !dbg !27
  %87 = and i64 %86, 64, !dbg !27
  %88 = add i64 %87, %70, !dbg !27
  %89 = lshr i64 %72, 57, !dbg !27
  %90 = and i64 %89, 64, !dbg !27
  %91 = add i64 %90, %72, !dbg !27
  %92 = lshr i64 %73, 57, !dbg !27
  %93 = and i64 %92, 64, !dbg !27
  %94 = add i64 %93, %73, !dbg !27
  %95 = lshr i64 %75, 57, !dbg !27
  %96 = and i64 %95, 64, !dbg !27
  %97 = add i64 %96, %75, !dbg !27
  %98 = lshr i64 %76, 57, !dbg !27
  %99 = and i64 %98, 64, !dbg !27
  %100 = add i64 %99, %76, !dbg !27
  %101 = shl i64 %55, 11, !dbg !28
  %102 = shl i64 %58, 11, !dbg !28
  %103 = shl i32 %30, 17, !dbg !29
  %104 = shl i32 %31, 17, !dbg !29
  %105 = sext i32 %103 to i64, !dbg !30
  %106 = sext i32 %104 to i64, !dbg !30
  %.idx = shl i64 %79, 7, !dbg !31
  %107 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !31
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %101, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %105, !dbg !31
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %37, !dbg !31
  %.idx1 = shl i64 %82, 7, !dbg !31
  %111 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx1, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %101, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %105, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %37, !dbg !31
  %.idx2 = shl i64 %85, 7, !dbg !31
  %115 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx2, !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %101, !dbg !31
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %105, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %37, !dbg !31
  %.idx3 = shl i64 %88, 7, !dbg !31
  %119 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx3, !dbg !31
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %101, !dbg !31
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %105, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %37, !dbg !31
  %.idx4 = shl i64 %91, 7, !dbg !31
  %123 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx4, !dbg !31
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %102, !dbg !31
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %106, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %38, !dbg !31
  %.idx5 = shl i64 %94, 7, !dbg !31
  %127 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx5, !dbg !31
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %102, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %106, !dbg !31
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %38, !dbg !31
  %.idx6 = shl i64 %97, 7, !dbg !31
  %131 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx6, !dbg !31
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %102, !dbg !31
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %106, !dbg !31
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %38, !dbg !31
  %.idx7 = shl i64 %100, 7, !dbg !31
  %135 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx7, !dbg !31
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %102, !dbg !31
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %106, !dbg !31
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %38, !dbg !31
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %39, i32 0, i1 %39) #1, !dbg !32
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %39, i32 0, i1 %39) #1, !dbg !32
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %39, i32 0, i1 %39) #1, !dbg !32
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %39, i32 0, i1 %39) #1, !dbg !32
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %40, i32 0, i1 %40) #1, !dbg !32
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %40, i32 0, i1 %40) #1, !dbg !32
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %40, i32 0, i1 %40) #1, !dbg !32
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %40, i32 0, i1 %40) #1, !dbg !32
  %147 = add nsw i32 %21, -32, !dbg !33
  %148 = icmp ult i32 %147, 64, !dbg !33
  %149 = add nsw i32 %22, -32, !dbg !33
  %150 = icmp ult i32 %149, 64, !dbg !33
  %151 = getelementptr i64, ptr addrspace(1) %2, i64 %41, !dbg !34
  %152 = getelementptr i64, ptr addrspace(1) %2, i64 %43, !dbg !34
  %153 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %151, i1 %148, i1 %148) #1, !dbg !35
  %154 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %151, i1 %148, i1 %148) #1, !dbg !35
  %155 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %151, i1 %148, i1 %148) #1, !dbg !35
  %156 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %151, i1 %148, i1 %148) #1, !dbg !35
  %157 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %152, i1 %150, i1 %150) #1, !dbg !35
  %158 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %152, i1 %150, i1 %150) #1, !dbg !35
  %159 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %152, i1 %150, i1 %150) #1, !dbg !35
  %160 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %152, i1 %150, i1 %150) #1, !dbg !35
  %161 = lshr i64 %153, 58, !dbg !36
  %162 = and i64 %161, 32, !dbg !36
  %163 = add i64 %162, %153, !dbg !36
  %164 = lshr i64 %157, 58, !dbg !36
  %165 = and i64 %164, 32, !dbg !36
  %166 = add i64 %165, %157, !dbg !36
  %167 = getelementptr i64, ptr addrspace(1) %2, i64 %59, !dbg !37
  %168 = getelementptr i64, ptr addrspace(1) %2, i64 %61, !dbg !37
  %169 = getelementptr i64, ptr addrspace(1) %2, i64 %63, !dbg !37
  %170 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %167, i1 %148, i1 %148, i1 %148) #1, !dbg !38
  %171 = extractvalue { i64, i64 } %170, 0, !dbg !38
  %172 = extractvalue { i64, i64 } %170, 1, !dbg !38
  %173 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %168, i1 %148, i1 %148, i1 %148) #1, !dbg !38
  %174 = extractvalue { i64, i64 } %173, 0, !dbg !38
  %175 = extractvalue { i64, i64 } %173, 1, !dbg !38
  %176 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %167, i1 %150, i1 %150, i1 %150) #1, !dbg !38
  %177 = extractvalue { i64, i64 } %176, 0, !dbg !38
  %178 = extractvalue { i64, i64 } %176, 1, !dbg !38
  %179 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %169, i1 %150, i1 %150, i1 %150) #1, !dbg !38
  %180 = extractvalue { i64, i64 } %179, 0, !dbg !38
  %181 = extractvalue { i64, i64 } %179, 1, !dbg !38
  %182 = lshr i64 %171, 58, !dbg !39
  %183 = and i64 %182, 32, !dbg !39
  %184 = add i64 %183, %171, !dbg !39
  %185 = lshr i64 %172, 58, !dbg !39
  %186 = and i64 %185, 32, !dbg !39
  %187 = add i64 %186, %172, !dbg !39
  %188 = lshr i64 %174, 58, !dbg !39
  %189 = and i64 %188, 32, !dbg !39
  %190 = add i64 %189, %174, !dbg !39
  %191 = lshr i64 %175, 58, !dbg !39
  %192 = and i64 %191, 32, !dbg !39
  %193 = add i64 %192, %175, !dbg !39
  %194 = lshr i64 %177, 58, !dbg !39
  %195 = and i64 %194, 32, !dbg !39
  %196 = add i64 %195, %177, !dbg !39
  %197 = lshr i64 %178, 58, !dbg !39
  %198 = and i64 %197, 32, !dbg !39
  %199 = add i64 %198, %178, !dbg !39
  %200 = lshr i64 %180, 58, !dbg !39
  %201 = and i64 %200, 32, !dbg !39
  %202 = add i64 %201, %180, !dbg !39
  %203 = lshr i64 %181, 58, !dbg !39
  %204 = and i64 %203, 32, !dbg !39
  %205 = add i64 %204, %181, !dbg !39
  %206 = shl i64 %163, 11, !dbg !40
  %207 = shl i64 %166, 11, !dbg !40
  %208 = shl i32 %30, 16, !dbg !41
  %209 = shl i32 %31, 16, !dbg !41
  %210 = sext i32 %208 to i64, !dbg !42
  %211 = sext i32 %209 to i64, !dbg !42
  %212 = sext i32 %147 to i64, !dbg !43
  %213 = sext i32 %149 to i64, !dbg !43
  %.idx8 = shl i64 %184, 8, !dbg !44
  %214 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx8, !dbg !44
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %206, !dbg !44
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %210, !dbg !44
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %212, !dbg !44
  %.idx9 = shl i64 %187, 8, !dbg !44
  %218 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx9, !dbg !44
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %206, !dbg !44
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %210, !dbg !44
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %212, !dbg !44
  %.idx10 = shl i64 %190, 8, !dbg !44
  %222 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx10, !dbg !44
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %206, !dbg !44
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %210, !dbg !44
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %212, !dbg !44
  %.idx11 = shl i64 %193, 8, !dbg !44
  %226 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx11, !dbg !44
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %206, !dbg !44
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %210, !dbg !44
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %212, !dbg !44
  %.idx12 = shl i64 %196, 8, !dbg !44
  %230 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx12, !dbg !44
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %207, !dbg !44
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %211, !dbg !44
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %213, !dbg !44
  %.idx13 = shl i64 %199, 8, !dbg !44
  %234 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx13, !dbg !44
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %207, !dbg !44
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %211, !dbg !44
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %213, !dbg !44
  %.idx14 = shl i64 %202, 8, !dbg !44
  %238 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx14, !dbg !44
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %207, !dbg !44
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %211, !dbg !44
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %213, !dbg !44
  %.idx15 = shl i64 %205, 8, !dbg !44
  %242 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx15, !dbg !44
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %207, !dbg !44
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %211, !dbg !44
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %213, !dbg !44
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %148, i32 0, i1 %148) #1, !dbg !45
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %148, i32 0, i1 %148) #1, !dbg !45
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %148, i32 0, i1 %148) #1, !dbg !45
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %148, i32 0, i1 %148) #1, !dbg !45
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %150, i32 0, i1 %150) #1, !dbg !45
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %150, i32 0, i1 %150) #1, !dbg !45
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %150, i32 0, i1 %150) #1, !dbg !45
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %150, i32 0, i1 %150) #1, !dbg !45
  %254 = icmp sgt i32 %21, 95, !dbg !46
  %255 = icmp sgt i32 %22, 95, !dbg !46
  %256 = shl nsw i32 %.decomposed17, 8, !dbg !47
  %257 = shl nsw i32 %33, 8, !dbg !47
  %258 = shl nsw i32 %34, 8, !dbg !47
  %259 = shl nsw i32 %35, 8, !dbg !47
  %260 = shl nsw i32 %36, 8, !dbg !47
  %261 = shl nsw i32 %30, 14, !dbg !48
  %262 = shl nsw i32 %31, 14, !dbg !48
  %263 = add nsw i32 %21, -96, !dbg !49
  %264 = add nsw i32 %22, -96, !dbg !49
  %265 = add nsw i32 %263, %261, !dbg !50
  %266 = add nsw i32 %265, %256, !dbg !51
  %267 = add nsw i32 %265, %257, !dbg !51
  %268 = add nsw i32 %265, %258, !dbg !51
  %269 = add nsw i32 %265, %259, !dbg !51
  %270 = add nsw i32 %264, %262, !dbg !50
  %271 = add nsw i32 %270, %256, !dbg !51
  %272 = add nsw i32 %270, %257, !dbg !51
  %273 = add nsw i32 %270, %260, !dbg !51
  %274 = add nsw i32 %270, %259, !dbg !51
  %275 = sext i32 %266 to i64, !dbg !52
  %276 = getelementptr float, ptr addrspace(1) %4, i64 %275, !dbg !52
  %277 = sext i32 %267 to i64, !dbg !52
  %278 = getelementptr float, ptr addrspace(1) %4, i64 %277, !dbg !52
  %279 = sext i32 %268 to i64, !dbg !52
  %280 = getelementptr float, ptr addrspace(1) %4, i64 %279, !dbg !52
  %281 = sext i32 %269 to i64, !dbg !52
  %282 = getelementptr float, ptr addrspace(1) %4, i64 %281, !dbg !52
  %283 = sext i32 %271 to i64, !dbg !52
  %284 = getelementptr float, ptr addrspace(1) %4, i64 %283, !dbg !52
  %285 = sext i32 %272 to i64, !dbg !52
  %286 = getelementptr float, ptr addrspace(1) %4, i64 %285, !dbg !52
  %287 = sext i32 %273 to i64, !dbg !52
  %288 = getelementptr float, ptr addrspace(1) %4, i64 %287, !dbg !52
  %289 = sext i32 %274 to i64, !dbg !52
  %290 = getelementptr float, ptr addrspace(1) %4, i64 %289, !dbg !52
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %254, i32 0, i1 %254) #1, !dbg !53
  %292 = bitcast i32 %291 to float, !dbg !53
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %254, i32 0, i1 %254) #1, !dbg !53
  %294 = bitcast i32 %293 to float, !dbg !53
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %254, i32 0, i1 %254) #1, !dbg !53
  %296 = bitcast i32 %295 to float, !dbg !53
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %254, i32 0, i1 %254) #1, !dbg !53
  %298 = bitcast i32 %297 to float, !dbg !53
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %255, i32 0, i1 %255) #1, !dbg !53
  %300 = bitcast i32 %299 to float, !dbg !53
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %286, i1 %255, i32 0, i1 %255) #1, !dbg !53
  %302 = bitcast i32 %301 to float, !dbg !53
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 %255, i32 0, i1 %255) #1, !dbg !53
  %304 = bitcast i32 %303 to float, !dbg !53
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %290, i1 %255, i32 0, i1 %255) #1, !dbg !53
  %306 = bitcast i32 %305 to float, !dbg !53
  %307 = fcmp ogt float %292, 0.000000e+00, !dbg !54
  %308 = fcmp ogt float %294, 0.000000e+00, !dbg !54
  %309 = fcmp ogt float %296, 0.000000e+00, !dbg !54
  %310 = fcmp ogt float %298, 0.000000e+00, !dbg !54
  %311 = fcmp ogt float %300, 0.000000e+00, !dbg !54
  %312 = fcmp ogt float %302, 0.000000e+00, !dbg !54
  %313 = fcmp ogt float %304, 0.000000e+00, !dbg !54
  %314 = fcmp ogt float %306, 0.000000e+00, !dbg !54
  %315 = fmul float %292, 0x3F847AE140000000, !dbg !55
  %316 = fmul float %294, 0x3F847AE140000000, !dbg !55
  %317 = fmul float %296, 0x3F847AE140000000, !dbg !55
  %318 = fmul float %298, 0x3F847AE140000000, !dbg !55
  %319 = fmul float %300, 0x3F847AE140000000, !dbg !55
  %320 = fmul float %302, 0x3F847AE140000000, !dbg !55
  %321 = fmul float %304, 0x3F847AE140000000, !dbg !55
  %322 = fmul float %306, 0x3F847AE140000000, !dbg !55
  %323 = select i1 %307, float %292, float %315, !dbg !56
  %324 = select i1 %308, float %294, float %316, !dbg !56
  %325 = select i1 %309, float %296, float %317, !dbg !56
  %326 = select i1 %310, float %298, float %318, !dbg !56
  %327 = select i1 %311, float %300, float %319, !dbg !56
  %328 = select i1 %312, float %302, float %320, !dbg !56
  %329 = select i1 %313, float %304, float %321, !dbg !56
  %330 = select i1 %314, float %306, float %322, !dbg !56
  %331 = sext i32 %13 to i64, !dbg !57
  %332 = getelementptr float, ptr addrspace(1) %5, i64 %331, !dbg !57
  %333 = sext i32 %17 to i64, !dbg !57
  %334 = getelementptr float, ptr addrspace(1) %5, i64 %333, !dbg !57
  %335 = bitcast float %323 to i32, !dbg !58
  %336 = select i1 %254, i32 %335, i32 0, !dbg !59
  %337 = select i1 %148, i32 %246, i32 %336, !dbg !60
  %338 = select i1 %39, i32 %139, i32 %337, !dbg !61
  %339 = bitcast float %324 to i32, !dbg !58
  %340 = select i1 %254, i32 %339, i32 0, !dbg !59
  %341 = select i1 %148, i32 %247, i32 %340, !dbg !60
  %342 = select i1 %39, i32 %140, i32 %341, !dbg !61
  %343 = bitcast float %325 to i32, !dbg !58
  %344 = select i1 %254, i32 %343, i32 0, !dbg !59
  %345 = select i1 %148, i32 %248, i32 %344, !dbg !60
  %346 = select i1 %39, i32 %141, i32 %345, !dbg !61
  %347 = bitcast float %326 to i32, !dbg !58
  %348 = select i1 %254, i32 %347, i32 0, !dbg !59
  %349 = select i1 %148, i32 %249, i32 %348, !dbg !60
  %350 = select i1 %39, i32 %142, i32 %349, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %338, i32 %342, i32 %346, i32 %350, ptr addrspace(1) %332, i1 true) #1, !dbg !58
  %351 = bitcast float %327 to i32, !dbg !58
  %352 = select i1 %255, i32 %351, i32 0, !dbg !59
  %353 = select i1 %150, i32 %250, i32 %352, !dbg !60
  %354 = select i1 %40, i32 %143, i32 %353, !dbg !61
  %355 = bitcast float %328 to i32, !dbg !58
  %356 = select i1 %255, i32 %355, i32 0, !dbg !59
  %357 = select i1 %150, i32 %251, i32 %356, !dbg !60
  %358 = select i1 %40, i32 %144, i32 %357, !dbg !61
  %359 = bitcast float %329 to i32, !dbg !58
  %360 = select i1 %255, i32 %359, i32 0, !dbg !59
  %361 = select i1 %150, i32 %252, i32 %360, !dbg !60
  %362 = select i1 %40, i32 %145, i32 %361, !dbg !61
  %363 = bitcast float %330 to i32, !dbg !58
  %364 = select i1 %255, i32 %363, i32 0, !dbg !59
  %365 = select i1 %150, i32 %253, i32 %364, !dbg !60
  %366 = select i1 %40, i32 %146, i32 %365, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %354, i32 %358, i32 %362, i32 %366, ptr addrspace(1) %334, i1 true) #1, !dbg !58
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmix6bem36tqjg32vv4cl54vyzhapwukekp3vnbewtw2bteetboz.py", directory: "inductor_cache/mi")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 39, column: 32, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 36, scope: !7)
!27 = !DILocation(line: 43, column: 35, scope: !7)
!28 = !DILocation(line: 44, column: 47, scope: !7)
!29 = !DILocation(line: 44, column: 61, scope: !7)
!30 = !DILocation(line: 44, column: 54, scope: !7)
!31 = !DILocation(line: 44, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 73, scope: !7)
!33 = !DILocation(line: 48, column: 20, scope: !7)
!34 = !DILocation(line: 49, column: 31, scope: !7)
!35 = !DILocation(line: 49, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 35, scope: !7)
!37 = !DILocation(line: 54, column: 31, scope: !7)
!38 = !DILocation(line: 54, column: 36, scope: !7)
!39 = !DILocation(line: 57, column: 35, scope: !7)
!40 = !DILocation(line: 58, column: 47, scope: !7)
!41 = !DILocation(line: 58, column: 61, scope: !7)
!42 = !DILocation(line: 58, column: 55, scope: !7)
!43 = !DILocation(line: 58, column: 67, scope: !7)
!44 = !DILocation(line: 58, column: 31, scope: !7)
!45 = !DILocation(line: 58, column: 81, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 35, scope: !7)
!48 = !DILocation(line: 62, column: 46, scope: !7)
!49 = !DILocation(line: 62, column: 60, scope: !7)
!50 = !DILocation(line: 62, column: 40, scope: !7)
!51 = !DILocation(line: 62, column: 52, scope: !7)
!52 = !DILocation(line: 62, column: 31, scope: !7)
!53 = !DILocation(line: 62, column: 66, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 35, scope: !7)
!57 = !DILocation(line: 72, column: 25, scope: !7)
!58 = !DILocation(line: 72, column: 37, scope: !7)
!59 = !DILocation(line: 69, column: 35, scope: !7)
!60 = !DILocation(line: 70, column: 35, scope: !7)
!61 = !DILocation(line: 71, column: 34, scope: !7)
!62 = !DILocation(line: 72, column: 4, scope: !7)
