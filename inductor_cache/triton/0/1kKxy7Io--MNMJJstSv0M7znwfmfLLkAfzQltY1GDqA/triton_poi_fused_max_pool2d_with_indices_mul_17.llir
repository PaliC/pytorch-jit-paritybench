; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_mul_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = icmp slt i32 %14, 1115136, !dbg !14
  %19 = icmp slt i32 %16, 1115136, !dbg !14
  %20 = icmp slt i32 %17, 1115136, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %21 = sdiv i32 %.frozen, 256, !dbg !15
  %22 = mul i32 %21, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = srem i32 %15, 256, !dbg !16
  %24 = srem i32 %21, 33, !dbg !17
  %25 = sdiv i32 %14, 8448, !dbg !18
  %26 = shl nsw i32 %24, 9, !dbg !19
  %27 = mul i32 %25, 33792, !dbg !20
  %28 = add i32 %26, %27, !dbg !21
  %29 = add i32 %28, %.decomposed, !dbg !22
  %30 = add i32 %28, %23, !dbg !22
  %31 = sext i32 %29 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = sext i32 %30 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %18) #2, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %18) #2, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %45 = or disjoint i32 %28, 256, !dbg !25
  %46 = add nsw i32 %45, %.decomposed, !dbg !26
  %47 = add nsw i32 %45, %23, !dbg !26
  %48 = sext i32 %46 to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !27
  %50 = sext i32 %47 to i64, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %18) #2, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %18) #2, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %62 = add i32 %28, 16896, !dbg !29
  %63 = add i32 %62, %.decomposed, !dbg !30
  %64 = add i32 %62, %23, !dbg !30
  %65 = sext i32 %63 to i64, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !31
  %67 = sext i32 %64 to i64, !dbg !31
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !31
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %18) #2, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !32
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %18) #2, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !32
  %79 = add i32 %28, 17152, !dbg !33
  %80 = add nsw i32 %79, %.decomposed, !dbg !34
  %81 = add nsw i32 %79, %23, !dbg !34
  %82 = sext i32 %80 to i64, !dbg !35
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !35
  %84 = sext i32 %81 to i64, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !35
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %18) #2, !dbg !36
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !36
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !36
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !36
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !36
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %18) #2, !dbg !36
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !36
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !36
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !36
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !36
  %96 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !24
  %97 = insertelement <4 x i32> %96, i32 %37, i64 1, !dbg !24
  %98 = insertelement <4 x i32> %97, i32 %38, i64 2, !dbg !24
  %99 = insertelement <4 x i32> %98, i32 %39, i64 3, !dbg !24
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !24
  %101 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !28
  %102 = insertelement <4 x i32> %101, i32 %54, i64 1, !dbg !28
  %103 = insertelement <4 x i32> %102, i32 %55, i64 2, !dbg !28
  %104 = insertelement <4 x i32> %103, i32 %56, i64 3, !dbg !28
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !28
  %106 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !32
  %107 = insertelement <4 x i32> %106, i32 %71, i64 1, !dbg !32
  %108 = insertelement <4 x i32> %107, i32 %72, i64 2, !dbg !32
  %109 = insertelement <4 x i32> %108, i32 %73, i64 3, !dbg !32
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !32
  %111 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !36
  %112 = insertelement <4 x i32> %111, i32 %88, i64 1, !dbg !36
  %113 = insertelement <4 x i32> %112, i32 %89, i64 2, !dbg !36
  %114 = insertelement <4 x i32> %113, i32 %90, i64 3, !dbg !36
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !36
  %116 = fcmp ogt <4 x float> %105, %100, !dbg !37
  %117 = fcmp uno <4 x float> %105, zeroinitializer, !dbg !41
  %118 = or <4 x i1> %116, %117, !dbg !42
  %.v = select <4 x i1> %118, <4 x i32> %104, <4 x i32> %99, !dbg !43
  %119 = bitcast <4 x i32> %.v to <4 x float>, !dbg !43
  %120 = fcmp olt <4 x float> %119, %110, !dbg !44
  %121 = fcmp uno <4 x float> %110, zeroinitializer, !dbg !46
  %122 = or <4 x i1> %121, %120, !dbg !47
  %.v30 = select <4 x i1> %122, <4 x i32> %109, <4 x i32> %.v, !dbg !48
  %123 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !48
  %124 = fcmp olt <4 x float> %123, %115, !dbg !49
  %125 = bitcast i32 %87 to float, !dbg !51
  %126 = fcmp uno float %125, 0.000000e+00, !dbg !51
  %127 = bitcast i32 %88 to float, !dbg !51
  %128 = fcmp uno float %127, 0.000000e+00, !dbg !51
  %129 = bitcast i32 %89 to float, !dbg !51
  %130 = fcmp uno float %129, 0.000000e+00, !dbg !51
  %131 = bitcast i32 %90 to float, !dbg !51
  %132 = fcmp uno float %131, 0.000000e+00, !dbg !51
  %133 = extractelement <4 x i1> %124, i64 0, !dbg !52
  %134 = or i1 %126, %133, !dbg !52
  %135 = extractelement <4 x i1> %124, i64 1, !dbg !52
  %136 = or i1 %128, %135, !dbg !52
  %137 = extractelement <4 x i1> %124, i64 2, !dbg !52
  %138 = or i1 %130, %137, !dbg !52
  %139 = extractelement <4 x i1> %124, i64 3, !dbg !52
  %140 = or i1 %132, %139, !dbg !52
  %141 = extractelement <4 x float> %123, i64 0, !dbg !53
  %142 = select i1 %134, float %125, float %141, !dbg !53
  %143 = extractelement <4 x float> %123, i64 1, !dbg !53
  %144 = select i1 %136, float %127, float %143, !dbg !53
  %145 = extractelement <4 x float> %123, i64 2, !dbg !53
  %146 = select i1 %138, float %129, float %145, !dbg !53
  %147 = extractelement <4 x float> %123, i64 3, !dbg !53
  %148 = select i1 %140, float %131, float %147, !dbg !53
  %149 = zext <4 x i1> %116 to <4 x i8>, !dbg !54
  %150 = select <4 x i1> %120, <4 x i8> splat (i8 2), <4 x i8> %149, !dbg !55
  %151 = select <4 x i1> %124, <4 x i8> splat (i8 3), <4 x i8> %150, !dbg !56
  %152 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !24
  %153 = insertelement <4 x i32> %152, i32 %42, i64 1, !dbg !24
  %154 = insertelement <4 x i32> %153, i32 %43, i64 2, !dbg !24
  %155 = insertelement <4 x i32> %154, i32 %44, i64 3, !dbg !24
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !24
  %157 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !28
  %158 = insertelement <4 x i32> %157, i32 %59, i64 1, !dbg !28
  %159 = insertelement <4 x i32> %158, i32 %60, i64 2, !dbg !28
  %160 = insertelement <4 x i32> %159, i32 %61, i64 3, !dbg !28
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !28
  %162 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !32
  %163 = insertelement <4 x i32> %162, i32 %76, i64 1, !dbg !32
  %164 = insertelement <4 x i32> %163, i32 %77, i64 2, !dbg !32
  %165 = insertelement <4 x i32> %164, i32 %78, i64 3, !dbg !32
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !32
  %167 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !36
  %168 = insertelement <4 x i32> %167, i32 %93, i64 1, !dbg !36
  %169 = insertelement <4 x i32> %168, i32 %94, i64 2, !dbg !36
  %170 = insertelement <4 x i32> %169, i32 %95, i64 3, !dbg !36
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !36
  %172 = fcmp ogt <4 x float> %161, %156, !dbg !37
  %173 = fcmp uno <4 x float> %161, zeroinitializer, !dbg !41
  %174 = or <4 x i1> %172, %173, !dbg !42
  %.v31 = select <4 x i1> %174, <4 x i32> %160, <4 x i32> %155, !dbg !43
  %175 = bitcast <4 x i32> %.v31 to <4 x float>, !dbg !43
  %176 = fcmp olt <4 x float> %175, %166, !dbg !44
  %177 = fcmp uno <4 x float> %166, zeroinitializer, !dbg !46
  %178 = or <4 x i1> %177, %176, !dbg !47
  %.v32 = select <4 x i1> %178, <4 x i32> %165, <4 x i32> %.v31, !dbg !48
  %179 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !48
  %180 = fcmp olt <4 x float> %179, %171, !dbg !49
  %181 = bitcast i32 %92 to float, !dbg !51
  %182 = fcmp uno float %181, 0.000000e+00, !dbg !51
  %183 = bitcast i32 %93 to float, !dbg !51
  %184 = fcmp uno float %183, 0.000000e+00, !dbg !51
  %185 = bitcast i32 %94 to float, !dbg !51
  %186 = fcmp uno float %185, 0.000000e+00, !dbg !51
  %187 = bitcast i32 %95 to float, !dbg !51
  %188 = fcmp uno float %187, 0.000000e+00, !dbg !51
  %189 = extractelement <4 x i1> %180, i64 0, !dbg !52
  %190 = or i1 %182, %189, !dbg !52
  %191 = extractelement <4 x i1> %180, i64 1, !dbg !52
  %192 = or i1 %184, %191, !dbg !52
  %193 = extractelement <4 x i1> %180, i64 2, !dbg !52
  %194 = or i1 %186, %193, !dbg !52
  %195 = extractelement <4 x i1> %180, i64 3, !dbg !52
  %196 = or i1 %188, %195, !dbg !52
  %197 = extractelement <4 x float> %179, i64 0, !dbg !53
  %198 = select i1 %190, float %181, float %197, !dbg !53
  %199 = extractelement <4 x float> %179, i64 1, !dbg !53
  %200 = select i1 %192, float %183, float %199, !dbg !53
  %201 = extractelement <4 x float> %179, i64 2, !dbg !53
  %202 = select i1 %194, float %185, float %201, !dbg !53
  %203 = extractelement <4 x float> %179, i64 3, !dbg !53
  %204 = select i1 %196, float %187, float %203, !dbg !53
  %205 = zext <4 x i1> %172 to <4 x i8>, !dbg !54
  %206 = select <4 x i1> %176, <4 x i8> splat (i8 2), <4 x i8> %205, !dbg !55
  %207 = select <4 x i1> %180, <4 x i8> splat (i8 3), <4 x i8> %206, !dbg !56
  %208 = fmul float %142, 0x3F1A36E2E0000000, !dbg !57
  %209 = fmul float %144, 0x3F1A36E2E0000000, !dbg !57
  %210 = fmul float %146, 0x3F1A36E2E0000000, !dbg !57
  %211 = fmul float %148, 0x3F1A36E2E0000000, !dbg !57
  %212 = fmul float %198, 0x3F1A36E2E0000000, !dbg !57
  %213 = fmul float %200, 0x3F1A36E2E0000000, !dbg !57
  %214 = fmul float %202, 0x3F1A36E2E0000000, !dbg !57
  %215 = fmul float %204, 0x3F1A36E2E0000000, !dbg !57
  %216 = sext i32 %16 to i64, !dbg !58
  %217 = getelementptr float, ptr addrspace(1) %1, i64 %216, !dbg !58
  %218 = sext i32 %17 to i64, !dbg !58
  %219 = getelementptr float, ptr addrspace(1) %1, i64 %218, !dbg !58
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !59
  %221 = bitcast float %142 to i32, !dbg !59
  %222 = bitcast float %144 to i32, !dbg !59
  %223 = bitcast float %146 to i32, !dbg !59
  %224 = bitcast float %148 to i32, !dbg !59
  %225 = bitcast float %198 to i32, !dbg !59
  %226 = bitcast float %200 to i32, !dbg !59
  %227 = bitcast float %202 to i32, !dbg !59
  %228 = bitcast float %204 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %220, i32 %221, i32 %222, i32 %223, i32 %224, i1 true) #2, !dbg !59
  %229 = getelementptr inbounds i8, ptr addrspace(3) %220, i32 16, !dbg !59
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %229, i32 %225, i32 %226, i32 %227, i32 %228, i1 true) #2, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !59
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !59
  %232 = load <4 x i32>, ptr addrspace(3) %231, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %230, align 16, !dbg !59
  %233 = getelementptr inbounds i8, ptr addrspace(3) %230, i32 4, !dbg !59
  %.extract8 = load i32, ptr addrspace(3) %233, align 4, !dbg !59
  %234 = getelementptr inbounds i8, ptr addrspace(3) %230, i32 8, !dbg !59
  %.extract9 = load i32, ptr addrspace(3) %234, align 8, !dbg !59
  %235 = getelementptr inbounds i8, ptr addrspace(3) %230, i32 12, !dbg !59
  %.extract10 = load i32, ptr addrspace(3) %235, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %217, i1 %19) #2, !dbg !59
  %.extract11 = extractelement <4 x i32> %232, i64 0, !dbg !59
  %.extract12 = extractelement <4 x i32> %232, i64 1, !dbg !59
  %.extract13 = extractelement <4 x i32> %232, i64 2, !dbg !59
  %.extract14 = extractelement <4 x i32> %232, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %219, i1 %20) #2, !dbg !59
  %236 = sext i32 %14 to i64, !dbg !60
  %237 = getelementptr i8, ptr addrspace(1) %2, i64 %236, !dbg !60
  %238 = bitcast <4 x i8> %151 to i32, !dbg !61
  %239 = bitcast <4 x i8> %207 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %238, i32 %239, ptr addrspace(1) %237, i1 %18) #2, !dbg !61
  %240 = getelementptr float, ptr addrspace(1) %3, i64 %216, !dbg !62
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %242 = bitcast float %208 to i32, !dbg !63
  %243 = bitcast float %209 to i32, !dbg !63
  %244 = bitcast float %210 to i32, !dbg !63
  %245 = bitcast float %211 to i32, !dbg !63
  %246 = bitcast float %212 to i32, !dbg !63
  %247 = bitcast float %213 to i32, !dbg !63
  %248 = bitcast float %214 to i32, !dbg !63
  %249 = bitcast float %215 to i32, !dbg !63
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %220, i32 %242, i32 %243, i32 %244, i32 %245, i1 true) #2, !dbg !63
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %229, i32 %246, i32 %247, i32 %248, i32 %249, i1 true) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %250 = load <4 x i32>, ptr addrspace(3) %231, align 16, !dbg !63
  %.extract22 = load i32, ptr addrspace(3) %230, align 16, !dbg !63
  %.extract23 = load i32, ptr addrspace(3) %233, align 4, !dbg !63
  %.extract24 = load i32, ptr addrspace(3) %234, align 8, !dbg !63
  %.extract25 = load i32, ptr addrspace(3) %235, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %240, i1 %19) #2, !dbg !63
  %.extract26 = extractelement <4 x i32> %250, i64 0, !dbg !63
  %.extract27 = extractelement <4 x i32> %250, i64 1, !dbg !63
  %.extract28 = extractelement <4 x i32> %250, i64 2, !dbg !63
  %.extract29 = extractelement <4 x i32> %250, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %241, i1 %20) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czyh52dwqhc7ymjueq447rmasillw7l74p3dkpku3ukzym4erjsz.py", directory: "inductor_cache/zy")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_mul_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_mul_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_mul_17", linkageName: "triton_poi_fused_max_pool2d_with_indices_mul_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 28, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 50, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 55, scope: !7)
!25 = !DILocation(line: 29, column: 41, scope: !7)
!26 = !DILocation(line: 29, column: 50, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 61, scope: !7)
!29 = !DILocation(line: 30, column: 43, scope: !7)
!30 = !DILocation(line: 30, column: 52, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 63, scope: !7)
!33 = !DILocation(line: 31, column: 43, scope: !7)
!34 = !DILocation(line: 31, column: 52, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 63, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 32, column: 40, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !45)
!45 = !DILocation(line: 33, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !45)
!49 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !50)
!50 = !DILocation(line: 34, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !50)
!54 = !DILocation(line: 38, column: 33, scope: !7)
!55 = !DILocation(line: 41, column: 35, scope: !7)
!56 = !DILocation(line: 44, column: 35, scope: !7)
!57 = !DILocation(line: 46, column: 19, scope: !7)
!58 = !DILocation(line: 47, column: 25, scope: !7)
!59 = !DILocation(line: 47, column: 36, scope: !7)
!60 = !DILocation(line: 48, column: 25, scope: !7)
!61 = !DILocation(line: 48, column: 37, scope: !7)
!62 = !DILocation(line: 49, column: 25, scope: !7)
!63 = !DILocation(line: 49, column: 37, scope: !7)
!64 = !DILocation(line: 49, column: 4, scope: !7)
