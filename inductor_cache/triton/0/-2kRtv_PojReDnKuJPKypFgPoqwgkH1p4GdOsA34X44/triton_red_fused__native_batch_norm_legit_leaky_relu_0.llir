; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_leaky_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = shl i32 %6, 12, !dbg !13
  %13 = or disjoint i32 %12, %11
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %18 = bitcast i32 %17 to float, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = bitcast i32 %19 to float, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %22 = bitcast i32 %21 to float, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %24 = bitcast i32 %23 to float, !dbg !15
  %25 = select i1 %7, float %24, float 0.000000e+00, !dbg !16
  %26 = select i1 %7, float %22, float 0.000000e+00, !dbg !16
  %27 = select i1 %7, float %20, float 0.000000e+00, !dbg !16
  %28 = select i1 %7, float %18, float 0.000000e+00, !dbg !16
  %29 = or disjoint i32 %13, 2048, !dbg !17
  %30 = sext i32 %29 to i64, !dbg !14
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !14
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !15
  %34 = bitcast i32 %33 to float, !dbg !15
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !15
  %36 = bitcast i32 %35 to float, !dbg !15
  %37 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !15
  %38 = bitcast i32 %37 to float, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !15
  %40 = bitcast i32 %39 to float, !dbg !15
  %41 = fsub float %40, %25, !dbg !18
  %42 = fsub float %38, %26, !dbg !18
  %43 = fsub float %36, %27, !dbg !18
  %44 = fsub float %34, %28, !dbg !18
  %45 = select i1 %7, float 2.000000e+00, float 1.000000e+00, !dbg !22
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %45) #5, !dbg !23
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %45) #5, !dbg !23
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %45) #5, !dbg !23
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %45) #5, !dbg !23
  %50 = fadd float %25, %46, !dbg !24
  %51 = fsub float %40, %50, !dbg !25
  %52 = fmul float %41, %51, !dbg !26
  %53 = fadd float %52, 0.000000e+00, !dbg !27
  %54 = fadd float %26, %47, !dbg !24
  %55 = fsub float %38, %54, !dbg !25
  %56 = fmul float %42, %55, !dbg !26
  %57 = fadd float %56, 0.000000e+00, !dbg !27
  %58 = fadd float %27, %48, !dbg !24
  %59 = fsub float %36, %58, !dbg !25
  %60 = fmul float %43, %59, !dbg !26
  %61 = fadd float %60, 0.000000e+00, !dbg !27
  %62 = fadd float %28, %49, !dbg !24
  %63 = fsub float %34, %62, !dbg !25
  %64 = fmul float %44, %63, !dbg !26
  %65 = fadd float %64, 0.000000e+00, !dbg !27
  %66 = select i1 %7, float %50, float 0.000000e+00, !dbg !16
  %67 = select i1 %7, float %54, float 0.000000e+00, !dbg !16
  %68 = select i1 %7, float %58, float 0.000000e+00, !dbg !16
  %69 = select i1 %7, float %62, float 0.000000e+00, !dbg !16
  %70 = select i1 %7, float %61, float 0.000000e+00, !dbg !28
  %71 = select i1 %7, float %65, float 0.000000e+00, !dbg !28
  %72 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %73 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %74 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %75 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %76 = lshr i32 %8, 5, !dbg !12
  %77 = fsub float %67, %66, !dbg !29
  %78 = select i1 %7, float 4.000000e+00, float 0.000000e+00, !dbg !32
  %79 = fcmp oeq float %78, 0.000000e+00, !dbg !33
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %78) #5, !dbg !34
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !35
  %82 = fmul float %77, %81, !dbg !36
  %83 = fadd float %66, %82, !dbg !37
  %84 = fadd float %53, %57, !dbg !38
  %85 = select i1 %7, float %84, float 0.000000e+00, !dbg !38
  %86 = fmul float %77, %77, !dbg !39
  %87 = fmul float %86, %72, !dbg !40
  %88 = fmul float %87, %81, !dbg !41
  %89 = fadd float %85, %88, !dbg !42
  %90 = fsub float %68, %83, !dbg !29
  %91 = select i1 %7, float 6.000000e+00, float 0.000000e+00, !dbg !32
  %92 = fcmp oeq float %91, 0.000000e+00, !dbg !33
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %91) #5, !dbg !34
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !35
  %95 = fmul float %94, %90, !dbg !36
  %96 = fadd float %83, %95, !dbg !37
  %97 = fadd float %70, %89, !dbg !38
  %98 = fmul float %90, %90, !dbg !39
  %99 = fmul float %78, %98, !dbg !40
  %100 = fmul float %94, %99, !dbg !41
  %101 = fadd float %97, %100, !dbg !42
  %102 = fsub float %69, %96, !dbg !29
  %103 = select i1 %7, float 8.000000e+00, float 0.000000e+00, !dbg !32
  %104 = fcmp oeq float %103, 0.000000e+00, !dbg !33
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %103) #5, !dbg !34
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !35
  %107 = fmul float %106, %102, !dbg !36
  %108 = fadd float %96, %107, !dbg !37
  %109 = fadd float %71, %101, !dbg !38
  %110 = fmul float %102, %102, !dbg !39
  %111 = fmul float %91, %110, !dbg !40
  %112 = fmul float %106, %111, !dbg !41
  %113 = fadd float %109, %112, !dbg !42
  %114 = bitcast float %108 to i32, !dbg !43
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !43
  %116 = bitcast i32 %115 to float, !dbg !43
  %117 = bitcast float %113 to i32, !dbg !43
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !43
  %119 = bitcast i32 %118 to float, !dbg !43
  %120 = bitcast float %103 to i32, !dbg !43
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !43
  %122 = bitcast i32 %121 to float, !dbg !43
  %123 = fsub float %116, %108, !dbg !29
  %124 = fadd float %103, %122, !dbg !32
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !33
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %124) #5, !dbg !34
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !35
  %128 = fmul float %127, %123, !dbg !36
  %129 = fadd float %108, %128, !dbg !37
  %130 = fadd float %113, %119, !dbg !38
  %131 = fmul float %123, %123, !dbg !39
  %132 = fmul float %103, %131, !dbg !40
  %133 = fmul float %127, %132, !dbg !41
  %134 = fadd float %130, %133, !dbg !42
  %135 = bitcast float %129 to i32, !dbg !43
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !43
  %137 = bitcast i32 %136 to float, !dbg !43
  %138 = bitcast float %134 to i32, !dbg !43
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !43
  %140 = bitcast i32 %139 to float, !dbg !43
  %141 = bitcast float %124 to i32, !dbg !43
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !43
  %143 = bitcast i32 %142 to float, !dbg !43
  %144 = fsub float %137, %129, !dbg !29
  %145 = fadd float %124, %143, !dbg !32
  %146 = fcmp oeq float %145, 0.000000e+00, !dbg !33
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %145) #5, !dbg !34
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !35
  %149 = fmul float %144, %148, !dbg !36
  %150 = fadd float %129, %149, !dbg !37
  %151 = fadd float %134, %140, !dbg !38
  %152 = fmul float %144, %144, !dbg !39
  %153 = fmul float %124, %152, !dbg !40
  %154 = fmul float %148, %153, !dbg !41
  %155 = fadd float %151, %154, !dbg !42
  %156 = bitcast float %150 to i32, !dbg !43
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !43
  %158 = bitcast i32 %157 to float, !dbg !43
  %159 = bitcast float %155 to i32, !dbg !43
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !43
  %161 = bitcast i32 %160 to float, !dbg !43
  %162 = bitcast float %145 to i32, !dbg !43
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  %165 = fsub float %158, %150, !dbg !29
  %166 = fadd float %145, %164, !dbg !32
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !33
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %166) #5, !dbg !34
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !35
  %170 = fmul float %165, %169, !dbg !36
  %171 = fadd float %150, %170, !dbg !37
  %172 = fadd float %155, %161, !dbg !38
  %173 = fmul float %165, %165, !dbg !39
  %174 = fmul float %145, %173, !dbg !40
  %175 = fmul float %169, %174, !dbg !41
  %176 = fadd float %172, %175, !dbg !42
  %177 = bitcast float %171 to i32, !dbg !43
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !43
  %179 = bitcast i32 %178 to float, !dbg !43
  %180 = bitcast float %176 to i32, !dbg !43
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !43
  %182 = bitcast i32 %181 to float, !dbg !43
  %183 = bitcast float %166 to i32, !dbg !43
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !43
  %185 = bitcast i32 %184 to float, !dbg !43
  %186 = fsub float %179, %171, !dbg !29
  %187 = fadd float %166, %185, !dbg !32
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !33
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %187) #5, !dbg !34
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !35
  %191 = fmul float %186, %190, !dbg !36
  %192 = fadd float %171, %191, !dbg !37
  %193 = fadd float %176, %182, !dbg !38
  %194 = fmul float %186, %186, !dbg !39
  %195 = fmul float %166, %194, !dbg !40
  %196 = fmul float %190, %195, !dbg !41
  %197 = fadd float %193, %196, !dbg !42
  %198 = bitcast float %192 to i32, !dbg !43
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 1, i32 31), !dbg !43
  %200 = bitcast i32 %199 to float, !dbg !43
  %201 = bitcast float %197 to i32, !dbg !43
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !43
  %203 = bitcast i32 %202 to float, !dbg !43
  %204 = bitcast float %187 to i32, !dbg !43
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = fsub float %200, %192, !dbg !29
  %208 = fadd float %187, %206, !dbg !32
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !33
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %208) #5, !dbg !34
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !35
  %212 = fmul float %207, %211, !dbg !36
  %213 = fadd float %192, %212, !dbg !37
  %214 = fadd float %197, %203, !dbg !38
  %215 = fmul float %207, %207, !dbg !39
  %216 = fmul float %187, %215, !dbg !40
  %217 = fmul float %211, %216, !dbg !41
  %218 = fadd float %214, %217, !dbg !42
  %219 = icmp eq i32 %9, 0, !dbg !43
  %220 = and i32 %76, 15, !dbg !43
  %221 = zext nneg i32 %220 to i64, !dbg !43
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i64 %221, !dbg !43
  %223 = bitcast float %213 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 %219) #5, !dbg !43
  %224 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %221, !dbg !43
  %225 = bitcast float %218 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 %219) #5, !dbg !43
  %226 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %221, !dbg !43
  %227 = bitcast float %208 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 %219) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %228 = icmp slt i32 %8, 16, !dbg !43
  %229 = sext i32 %8 to i64, !dbg !43
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !43
  %231 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %230, i1 %228) #5, !dbg !43
  %232 = bitcast i32 %231 to float, !dbg !43
  %233 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %229, !dbg !43
  %234 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %233, i1 %228) #5, !dbg !43
  %235 = bitcast i32 %234 to float, !dbg !43
  %236 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %229, !dbg !43
  %237 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %236, i1 %228) #5, !dbg !43
  %238 = bitcast i32 %237 to float, !dbg !43
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !43
  %240 = bitcast i32 %239 to float, !dbg !43
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !43
  %242 = bitcast i32 %241 to float, !dbg !43
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !43
  %244 = bitcast i32 %243 to float, !dbg !43
  %245 = fsub float %240, %232, !dbg !29
  %246 = fadd float %238, %244, !dbg !32
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !33
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %246) #5, !dbg !34
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !35
  %250 = fmul float %245, %249, !dbg !36
  %251 = fadd float %250, %232, !dbg !37
  %252 = fadd float %235, %242, !dbg !38
  %253 = fmul float %245, %245, !dbg !39
  %254 = fmul float %253, %238, !dbg !40
  %255 = fmul float %254, %249, !dbg !41
  %256 = fadd float %252, %255, !dbg !42
  %257 = bitcast float %251 to i32, !dbg !43
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !43
  %259 = bitcast i32 %258 to float, !dbg !43
  %260 = bitcast float %256 to i32, !dbg !43
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !43
  %262 = bitcast i32 %261 to float, !dbg !43
  %263 = bitcast float %246 to i32, !dbg !43
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !43
  %265 = bitcast i32 %264 to float, !dbg !43
  %266 = fsub float %259, %251, !dbg !29
  %267 = fadd float %246, %265, !dbg !32
  %268 = fcmp oeq float %267, 0.000000e+00, !dbg !33
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %267) #5, !dbg !34
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !35
  %271 = fmul float %266, %270, !dbg !36
  %272 = fadd float %251, %271, !dbg !37
  %273 = fadd float %256, %262, !dbg !38
  %274 = fmul float %266, %266, !dbg !39
  %275 = fmul float %246, %274, !dbg !40
  %276 = fmul float %270, %275, !dbg !41
  %277 = fadd float %273, %276, !dbg !42
  %278 = bitcast float %272 to i32, !dbg !43
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !43
  %280 = bitcast i32 %279 to float, !dbg !43
  %281 = bitcast float %277 to i32, !dbg !43
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !43
  %283 = bitcast i32 %282 to float, !dbg !43
  %284 = bitcast float %267 to i32, !dbg !43
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !43
  %286 = bitcast i32 %285 to float, !dbg !43
  %287 = fsub float %280, %272, !dbg !29
  %288 = fadd float %267, %286, !dbg !32
  %289 = fcmp oeq float %288, 0.000000e+00, !dbg !33
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %288) #5, !dbg !34
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !35
  %292 = fmul float %287, %291, !dbg !36
  %293 = fadd float %272, %292, !dbg !37
  %294 = fadd float %277, %283, !dbg !38
  %295 = fmul float %287, %287, !dbg !39
  %296 = fmul float %267, %295, !dbg !40
  %297 = fmul float %291, %296, !dbg !41
  %298 = fadd float %294, %297, !dbg !42
  %299 = bitcast float %293 to i32, !dbg !43
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !43
  %301 = bitcast i32 %300 to float, !dbg !43
  %302 = bitcast float %298 to i32, !dbg !43
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !43
  %304 = bitcast i32 %303 to float, !dbg !43
  %305 = bitcast float %288 to i32, !dbg !43
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !43
  %307 = bitcast i32 %306 to float, !dbg !43
  %308 = fsub float %301, %293, !dbg !29
  %309 = fadd float %288, %307, !dbg !32
  %310 = fcmp oeq float %309, 0.000000e+00, !dbg !33
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %309) #5, !dbg !34
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !35
  %313 = fmul float %308, %312, !dbg !36
  %314 = fadd float %293, %313, !dbg !37
  %315 = fadd float %298, %304, !dbg !38
  %316 = fmul float %308, %308, !dbg !39
  %317 = fmul float %288, %316, !dbg !40
  %318 = fmul float %312, %317, !dbg !41
  %319 = fadd float %315, %318, !dbg !42
  %320 = and i32 %8, 15, !dbg !43
  %321 = icmp eq i32 %320, 0, !dbg !43
  %322 = and i1 %228, %321, !dbg !43
  %323 = bitcast float %314 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %323, i1 %322) #5, !dbg !43
  %324 = bitcast float %319 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %324, i1 %322) #5, !dbg !43
  %325 = bitcast float %309 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %325, i1 %322) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %326 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %327 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !43
  %328 = sext i32 %6 to i64, !dbg !44
  %329 = getelementptr float, ptr addrspace(1) %1, i64 %328, !dbg !44
  %urem = and i32 %8, 511, !dbg !45
  %330 = icmp eq i32 %urem, 0, !dbg !45
  %331 = bitcast float %326 to i32, !dbg !45
  %332 = and i1 %330, %7, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %331, ptr addrspace(1) %329, i1 %332) #5, !dbg !45
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float 4.096000e+03) #5, !dbg !46
  %334 = fadd float %333, 0x3F50624DE0000000, !dbg !47
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i15 = icmp eq i32 %338, 0, !dbg !48
  br i1 %.not.i15, label %341, label %339, !dbg !48

339:                                              ; preds = %__nv_rsqrtf.exit
  %340 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %334), !dbg !48
  br label %__nv_rsqrtf.exit17, !dbg !48

341:                                              ; preds = %__nv_rsqrtf.exit
  %342 = tail call float @llvm.nvvm.rsqrt.approx.f(float %334), !dbg !48
  br label %__nv_rsqrtf.exit17, !dbg !48

__nv_rsqrtf.exit17:                               ; preds = %339, %341
  %.0.i16 = phi float [ %340, %339 ], [ %342, %341 ], !dbg !48
  %343 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !49
  %344 = extractvalue { i32, i32, i32, i32 } %343, 0, !dbg !49
  %345 = extractvalue { i32, i32, i32, i32 } %343, 1, !dbg !49
  %346 = extractvalue { i32, i32, i32, i32 } %343, 2, !dbg !49
  %347 = extractvalue { i32, i32, i32, i32 } %343, 3, !dbg !49
  %348 = bitcast i32 %344 to float, !dbg !49
  %349 = bitcast i32 %345 to float, !dbg !49
  %350 = bitcast i32 %346 to float, !dbg !49
  %351 = bitcast i32 %347 to float, !dbg !49
  %352 = fsub float %348, %326, !dbg !50
  %353 = fsub float %349, %326, !dbg !50
  %354 = fsub float %350, %326, !dbg !50
  %355 = fsub float %351, %326, !dbg !50
  %356 = fmul float %.0.i16, %352, !dbg !51
  %357 = fmul float %.0.i16, %353, !dbg !51
  %358 = fmul float %.0.i16, %354, !dbg !51
  %359 = fmul float %.0.i16, %355, !dbg !51
  %360 = fcmp ogt float %356, 0.000000e+00, !dbg !52
  %361 = fcmp ogt float %357, 0.000000e+00, !dbg !52
  %362 = fcmp ogt float %358, 0.000000e+00, !dbg !52
  %363 = fcmp ogt float %359, 0.000000e+00, !dbg !52
  %364 = fmul float %356, 0x3FC99999A0000000, !dbg !53
  %365 = fmul float %357, 0x3FC99999A0000000, !dbg !53
  %366 = fmul float %358, 0x3FC99999A0000000, !dbg !53
  %367 = fmul float %359, 0x3FC99999A0000000, !dbg !53
  %368 = select i1 %360, float %356, float %364, !dbg !54
  %369 = select i1 %361, float %357, float %365, !dbg !54
  %370 = select i1 %362, float %358, float %366, !dbg !54
  %371 = select i1 %363, float %359, float %367, !dbg !54
  %372 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !55
  %373 = bitcast float %368 to i32, !dbg !56
  %374 = bitcast float %369 to i32, !dbg !56
  %375 = bitcast float %370 to i32, !dbg !56
  %376 = bitcast float %371 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %373, i32 %374, i32 %375, i32 %376, ptr addrspace(1) %372, i1 %7) #5, !dbg !56
  %377 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !49
  %378 = extractvalue { i32, i32, i32, i32 } %377, 0, !dbg !49
  %379 = extractvalue { i32, i32, i32, i32 } %377, 1, !dbg !49
  %380 = extractvalue { i32, i32, i32, i32 } %377, 2, !dbg !49
  %381 = extractvalue { i32, i32, i32, i32 } %377, 3, !dbg !49
  %382 = bitcast i32 %378 to float, !dbg !49
  %383 = bitcast i32 %379 to float, !dbg !49
  %384 = bitcast i32 %380 to float, !dbg !49
  %385 = bitcast i32 %381 to float, !dbg !49
  %386 = fsub float %382, %326, !dbg !50
  %387 = fsub float %383, %326, !dbg !50
  %388 = fsub float %384, %326, !dbg !50
  %389 = fsub float %385, %326, !dbg !50
  %390 = fmul float %.0.i16, %386, !dbg !51
  %391 = fmul float %.0.i16, %387, !dbg !51
  %392 = fmul float %.0.i16, %388, !dbg !51
  %393 = fmul float %.0.i16, %389, !dbg !51
  %394 = fcmp ogt float %390, 0.000000e+00, !dbg !52
  %395 = fcmp ogt float %391, 0.000000e+00, !dbg !52
  %396 = fcmp ogt float %392, 0.000000e+00, !dbg !52
  %397 = fcmp ogt float %393, 0.000000e+00, !dbg !52
  %398 = fmul float %390, 0x3FC99999A0000000, !dbg !53
  %399 = fmul float %391, 0x3FC99999A0000000, !dbg !53
  %400 = fmul float %392, 0x3FC99999A0000000, !dbg !53
  %401 = fmul float %393, 0x3FC99999A0000000, !dbg !53
  %402 = select i1 %394, float %390, float %398, !dbg !54
  %403 = select i1 %395, float %391, float %399, !dbg !54
  %404 = select i1 %396, float %392, float %400, !dbg !54
  %405 = select i1 %397, float %393, float %401, !dbg !54
  %406 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !55
  %407 = bitcast float %402 to i32, !dbg !56
  %408 = bitcast float %403 to i32, !dbg !56
  %409 = bitcast float %404 to i32, !dbg !56
  %410 = bitcast float %405 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %407, i32 %408, i32 %409, i32 %410, ptr addrspace(1) %406, i1 %7) #5, !dbg !56
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i18 = icmp eq i32 %411, 0, !dbg !57
  br i1 %.not.i18, label %414, label %412, !dbg !57

412:                                              ; preds = %__nv_rsqrtf.exit17
  %413 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %334), !dbg !57
  br label %__nv_rsqrtf.exit20, !dbg !57

414:                                              ; preds = %__nv_rsqrtf.exit17
  %415 = tail call float @llvm.nvvm.rsqrt.approx.f(float %334), !dbg !57
  br label %__nv_rsqrtf.exit20, !dbg !57

__nv_rsqrtf.exit20:                               ; preds = %412, %414
  %.0.i19 = phi float [ %413, %412 ], [ %415, %414 ], !dbg !57
  %416 = getelementptr float, ptr addrspace(1) %3, i64 %328, !dbg !58
  %417 = bitcast float %.0.i19 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %417, ptr addrspace(1) %416, i1 %332) #5, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckjbzkgzgq7lxqtmziya3g7lirrcidfolhelqojk3p2br4gc7f6j.py", directory: "inductor_cache/kj")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_leaky_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_leaky_relu_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_leaky_relu_0", linkageName: "triton_red_fused__native_batch_norm_legit_leaky_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 34, scope: !7)
!15 = !DILocation(line: 34, column: 49, scope: !7)
!16 = !DILocation(line: 39, column: 60, scope: !7)
!17 = !DILocation(line: 34, column: 39, scope: !7)
!18 = !DILocation(line: 183, column: 24, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 37, column: 51, scope: !7)
!22 = !DILocation(line: 41, column: 64, scope: !7)
!23 = !DILocation(line: 185, column: 34, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 185, column: 26, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 186, column: 39, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 186, column: 31, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 186, column: 22, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 40, column: 56, scope: !7)
!29 = !DILocation(line: 192, column: 21, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!31 = !DILocation(line: 43, column: 41, scope: !7)
!32 = !DILocation(line: 193, column: 28, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 194, column: 39, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 194, column: 60, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 194, column: 49, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 196, column: 25, scope: !30, inlinedAt: !31)
!37 = !DILocation(line: 196, column: 17, scope: !30, inlinedAt: !31)
!38 = !DILocation(line: 197, column: 15, scope: !30, inlinedAt: !31)
!39 = !DILocation(line: 197, column: 30, scope: !30, inlinedAt: !31)
!40 = !DILocation(line: 197, column: 38, scope: !30, inlinedAt: !31)
!41 = !DILocation(line: 197, column: 49, scope: !30, inlinedAt: !31)
!42 = !DILocation(line: 197, column: 22, scope: !30, inlinedAt: !31)
!43 = !DILocation(line: 204, column: 46, scope: !19, inlinedAt: !31)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 36, scope: !7)
!46 = !DILocation(line: 56, column: 22, scope: !7)
!47 = !DILocation(line: 58, column: 23, scope: !7)
!48 = !DILocation(line: 59, column: 32, scope: !7)
!49 = !DILocation(line: 53, column: 49, scope: !7)
!50 = !DILocation(line: 54, column: 22, scope: !7)
!51 = !DILocation(line: 60, column: 23, scope: !7)
!52 = !DILocation(line: 62, column: 24, scope: !7)
!53 = !DILocation(line: 64, column: 24, scope: !7)
!54 = !DILocation(line: 65, column: 39, scope: !7)
!55 = !DILocation(line: 66, column: 29, scope: !7)
!56 = !DILocation(line: 66, column: 51, scope: !7)
!57 = !DILocation(line: 71, column: 28, scope: !7)
!58 = !DILocation(line: 72, column: 25, scope: !7)
!59 = !DILocation(line: 72, column: 37, scope: !7)
!60 = !DILocation(line: 72, column: 4, scope: !7)
