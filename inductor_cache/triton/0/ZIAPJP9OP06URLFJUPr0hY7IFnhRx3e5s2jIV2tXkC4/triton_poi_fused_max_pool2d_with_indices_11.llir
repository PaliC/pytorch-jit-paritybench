; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = and i32 %8, 255, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 16, !dbg !13
  %16 = or disjoint i32 %14, 32, !dbg !13
  %17 = or disjoint i32 %14, 48, !dbg !13
  %18 = or disjoint i32 %14, 64, !dbg !13
  %19 = or disjoint i32 %14, 80, !dbg !13
  %20 = or disjoint i32 %14, 96, !dbg !13
  %21 = or disjoint i32 %14, 112, !dbg !13
  %22 = or disjoint i32 %14, 128, !dbg !13
  %23 = or disjoint i32 %14, 144, !dbg !13
  %24 = or disjoint i32 %14, 160, !dbg !13
  %25 = or disjoint i32 %14, 176, !dbg !13
  %26 = or disjoint i32 %14, 192, !dbg !13
  %27 = or disjoint i32 %14, 208, !dbg !13
  %28 = or disjoint i32 %14, 224, !dbg !13
  %29 = or disjoint i32 %14, 240, !dbg !13
  %30 = icmp slt i32 %13, 1156, !dbg !14
  %31 = icmp slt i32 %14, 1156, !dbg !14
  %32 = icmp slt i32 %15, 1156, !dbg !14
  %33 = icmp slt i32 %16, 1156, !dbg !14
  %34 = icmp slt i32 %17, 1156, !dbg !14
  %35 = icmp slt i32 %18, 1156, !dbg !14
  %36 = icmp slt i32 %19, 1156, !dbg !14
  %37 = icmp slt i32 %20, 1156, !dbg !14
  %38 = icmp slt i32 %21, 1156, !dbg !14
  %39 = icmp slt i32 %22, 1156, !dbg !14
  %40 = icmp slt i32 %23, 1156, !dbg !14
  %41 = icmp slt i32 %24, 1156, !dbg !14
  %42 = icmp slt i32 %25, 1156, !dbg !14
  %43 = icmp slt i32 %26, 1156, !dbg !14
  %44 = icmp slt i32 %27, 1156, !dbg !14
  %45 = icmp slt i32 %28, 1156, !dbg !14
  %46 = icmp slt i32 %29, 1156, !dbg !14
  %47 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %48 = shl i32 %47, 4, !dbg !16
  %49 = or disjoint i32 %48, %9, !dbg !17
  %50 = icmp slt i32 %48, 256, !dbg !18
  %51 = icmp slt i32 %49, 256, !dbg !18
  %52 = sdiv i32 %13, 17, !dbg !19
  %53 = sdiv i32 %13, 289, !dbg !20
  %.frozen = freeze i32 %14, !dbg !20
  %54 = sdiv i32 %.frozen, 289, !dbg !20
  %.frozen30 = freeze i32 %15, !dbg !20
  %55 = sdiv i32 %.frozen30, 289, !dbg !20
  %.frozen32 = freeze i32 %16, !dbg !20
  %56 = sdiv i32 %.frozen32, 289, !dbg !20
  %.frozen34 = freeze i32 %17, !dbg !20
  %57 = sdiv i32 %.frozen34, 289, !dbg !20
  %.frozen36 = freeze i32 %18, !dbg !20
  %58 = sdiv i32 %.frozen36, 289, !dbg !20
  %.frozen38 = freeze i32 %19, !dbg !20
  %59 = sdiv i32 %.frozen38, 289, !dbg !20
  %.frozen40 = freeze i32 %20, !dbg !20
  %60 = sdiv i32 %.frozen40, 289, !dbg !20
  %.frozen42 = freeze i32 %21, !dbg !20
  %61 = sdiv i32 %.frozen42, 289, !dbg !20
  %.frozen44 = freeze i32 %22, !dbg !20
  %62 = sdiv i32 %.frozen44, 289, !dbg !20
  %.frozen46 = freeze i32 %23, !dbg !20
  %63 = sdiv i32 %.frozen46, 289, !dbg !20
  %.frozen48 = freeze i32 %24, !dbg !20
  %64 = sdiv i32 %.frozen48, 289, !dbg !20
  %.frozen50 = freeze i32 %25, !dbg !20
  %65 = sdiv i32 %.frozen50, 289, !dbg !20
  %.frozen52 = freeze i32 %26, !dbg !20
  %66 = sdiv i32 %.frozen52, 289, !dbg !20
  %.frozen54 = freeze i32 %27, !dbg !20
  %67 = sdiv i32 %.frozen54, 289, !dbg !20
  %.frozen56 = freeze i32 %28, !dbg !20
  %68 = sdiv i32 %.frozen56, 289, !dbg !20
  %.frozen58 = freeze i32 %29, !dbg !20
  %69 = sdiv i32 %.frozen58, 289, !dbg !20
  %70 = mul i32 %54, 289, !dbg !21
  %.decomposed = sub i32 %.frozen, %70, !dbg !21
  %71 = mul i32 %55, 289, !dbg !21
  %.decomposed31 = sub i32 %.frozen30, %71, !dbg !21
  %72 = mul i32 %56, 289, !dbg !21
  %.decomposed33 = sub i32 %.frozen32, %72, !dbg !21
  %73 = mul i32 %57, 289, !dbg !21
  %.decomposed35 = sub i32 %.frozen34, %73, !dbg !21
  %74 = mul i32 %58, 289, !dbg !21
  %.decomposed37 = sub i32 %.frozen36, %74, !dbg !21
  %75 = mul i32 %59, 289, !dbg !21
  %.decomposed39 = sub i32 %.frozen38, %75, !dbg !21
  %76 = mul i32 %60, 289, !dbg !21
  %.decomposed41 = sub i32 %.frozen40, %76, !dbg !21
  %77 = mul i32 %61, 289, !dbg !21
  %.decomposed43 = sub i32 %.frozen42, %77, !dbg !21
  %78 = mul i32 %62, 289, !dbg !21
  %.decomposed45 = sub i32 %.frozen44, %78, !dbg !21
  %79 = mul i32 %63, 289, !dbg !21
  %.decomposed47 = sub i32 %.frozen46, %79, !dbg !21
  %80 = mul i32 %64, 289, !dbg !21
  %.decomposed49 = sub i32 %.frozen48, %80, !dbg !21
  %81 = mul i32 %65, 289, !dbg !21
  %.decomposed51 = sub i32 %.frozen50, %81, !dbg !21
  %82 = mul i32 %66, 289, !dbg !21
  %.decomposed53 = sub i32 %.frozen52, %82, !dbg !21
  %83 = mul i32 %67, 289, !dbg !21
  %.decomposed55 = sub i32 %.frozen54, %83, !dbg !21
  %84 = mul i32 %68, 289, !dbg !21
  %.decomposed57 = sub i32 %.frozen56, %84, !dbg !21
  %85 = mul i32 %69, 289, !dbg !21
  %.decomposed59 = sub i32 %.frozen58, %85, !dbg !21
  %86 = mul i32 %53, 278784, !dbg !22
  %87 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !23
  %88 = insertelement <2 x i32> %87, i32 %52, i64 1, !dbg !23
  %89 = srem <2 x i32> %88, splat (i32 17), !dbg !23
  %90 = extractelement <2 x i32> %89, i64 1, !dbg !24
  %91 = icmp sgt i32 %90, 0, !dbg !25
  %92 = shl nsw <2 x i32> %89, splat (i32 1), !dbg !26
  %93 = extractelement <2 x i32> %89, i64 0, !dbg !24
  %94 = icmp sgt i32 %93, 0, !dbg !27
  %95 = and i1 %94, %91, !dbg !28
  %96 = shl nsw i32 %93, 9, !dbg !29
  %97 = mul nsw i32 %90, 16896, !dbg !30
  %98 = add i32 %86, %96, !dbg !31
  %99 = add i32 %98, -8704, !dbg !32
  %100 = add i32 %99, %48, !dbg !33
  %101 = add i32 %100, %97, !dbg !34
  %102 = add i32 %98, -8700, !dbg !32
  %103 = add i32 %102, %48, !dbg !33
  %104 = add i32 %103, %97, !dbg !34
  %105 = add i32 %98, -8696, !dbg !32
  %106 = add i32 %105, %48, !dbg !33
  %107 = add i32 %106, %97, !dbg !34
  %108 = add i32 %98, -8692, !dbg !32
  %109 = add i32 %108, %48, !dbg !33
  %110 = add i32 %109, %97, !dbg !34
  %111 = sext i32 %101 to i64, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !35
  %113 = sext i32 %104 to i64, !dbg !35
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !35
  %115 = sext i32 %107 to i64, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !35
  %117 = sext i32 %110 to i64, !dbg !35
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !35
  %119 = and i1 %50, %95, !dbg !36
  %120 = and i1 %30, %119, !dbg !37
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120) #2, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !38
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !38
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !38
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !38
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120) #2, !dbg !38
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !38
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !38
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120) #2, !dbg !38
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !38
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120) #2, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !38
  %141 = icmp sgt <2 x i32> %89, splat (i32 -1), !dbg !39
  %142 = extractelement <2 x i1> %141, i64 0, !dbg !40
  %143 = and i1 %142, %91, !dbg !40
  %144 = add i32 %98, -8448, !dbg !41
  %145 = add i32 %144, %48, !dbg !42
  %146 = add i32 %145, %97, !dbg !43
  %147 = add i32 %98, -8444, !dbg !41
  %148 = add i32 %147, %48, !dbg !42
  %149 = add i32 %148, %97, !dbg !43
  %150 = add i32 %98, -8440, !dbg !41
  %151 = add i32 %150, %48, !dbg !42
  %152 = add i32 %151, %97, !dbg !43
  %153 = add i32 %98, -8436, !dbg !41
  %154 = add i32 %153, %48, !dbg !42
  %155 = add i32 %154, %97, !dbg !43
  %156 = sext i32 %146 to i64, !dbg !44
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !44
  %158 = sext i32 %149 to i64, !dbg !44
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !44
  %160 = sext i32 %152 to i64, !dbg !44
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !44
  %162 = sext i32 %155 to i64, !dbg !44
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !44
  %164 = and i1 %50, %143, !dbg !45
  %165 = and i1 %30, %164, !dbg !46
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165) #2, !dbg !47
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !47
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !47
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !47
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !47
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %159, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165) #2, !dbg !47
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !47
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !47
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !47
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !47
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165) #2, !dbg !47
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !47
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !47
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !47
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !47
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %163, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165) #2, !dbg !47
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !47
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !47
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !47
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !47
  %186 = or disjoint <2 x i32> %92, splat (i32 1), !dbg !48
  %187 = icmp slt <2 x i32> %186, splat (i32 33), !dbg !49
  %188 = and <2 x i1> %141, %187, !dbg !50
  %189 = extractelement <2 x i1> %188, i64 0, !dbg !51
  %190 = and i1 %91, %189, !dbg !52
  %191 = add i32 %98, -8192, !dbg !53
  %192 = add i32 %191, %48, !dbg !54
  %193 = add i32 %192, %97, !dbg !55
  %194 = add i32 %98, -8188, !dbg !53
  %195 = add i32 %194, %48, !dbg !54
  %196 = add i32 %195, %97, !dbg !55
  %197 = add i32 %98, -8184, !dbg !53
  %198 = add i32 %197, %48, !dbg !54
  %199 = add i32 %198, %97, !dbg !55
  %200 = add i32 %98, -8180, !dbg !53
  %201 = add i32 %200, %48, !dbg !54
  %202 = add i32 %201, %97, !dbg !55
  %203 = sext i32 %193 to i64, !dbg !56
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !56
  %205 = sext i32 %196 to i64, !dbg !56
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !56
  %207 = sext i32 %199 to i64, !dbg !56
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !56
  %209 = sext i32 %202 to i64, !dbg !56
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !56
  %211 = and i1 %50, %190, !dbg !57
  %212 = and i1 %30, %211, !dbg !58
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %204, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212) #2, !dbg !59
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !59
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !59
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !59
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !59
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %206, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212) #2, !dbg !59
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !59
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !59
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !59
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !59
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %208, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212) #2, !dbg !59
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !59
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !59
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !59
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !59
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %210, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212) #2, !dbg !59
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !59
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !59
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !59
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !59
  %233 = extractelement <2 x i1> %141, i64 1, !dbg !60
  %234 = and i1 %94, %233, !dbg !60
  %235 = add i32 %98, -256, !dbg !61
  %236 = add i32 %235, %48, !dbg !62
  %237 = add i32 %236, %97, !dbg !63
  %238 = add i32 %98, -252, !dbg !61
  %239 = add i32 %238, %48, !dbg !62
  %240 = add i32 %239, %97, !dbg !63
  %241 = add i32 %98, -248, !dbg !61
  %242 = add i32 %241, %48, !dbg !62
  %243 = add i32 %242, %97, !dbg !63
  %244 = add i32 %98, -244, !dbg !61
  %245 = add i32 %244, %48, !dbg !62
  %246 = add i32 %245, %97, !dbg !63
  %247 = sext i32 %237 to i64, !dbg !64
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !64
  %249 = sext i32 %240 to i64, !dbg !64
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !64
  %251 = sext i32 %243 to i64, !dbg !64
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !64
  %253 = sext i32 %246 to i64, !dbg !64
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !64
  %255 = and i1 %50, %234, !dbg !65
  %256 = and i1 %30, %255, !dbg !66
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %248, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256) #2, !dbg !67
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !67
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !67
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !67
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !67
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %250, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256) #2, !dbg !67
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !67
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !67
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !67
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !67
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %252, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256) #2, !dbg !67
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !67
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !67
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !67
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !67
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %254, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256) #2, !dbg !67
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !67
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !67
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !67
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !67
  %277 = or i32 %90, %93, !dbg !24
  %278 = icmp sgt i32 %277, -1, !dbg !24
  %279 = add i32 %98, %48, !dbg !68
  %280 = add i32 %279, %97, !dbg !69
  %281 = or disjoint i32 %98, 4, !dbg !70
  %282 = add i32 %281, %48, !dbg !68
  %283 = add i32 %282, %97, !dbg !69
  %284 = or disjoint i32 %98, 8, !dbg !70
  %285 = add i32 %284, %48, !dbg !68
  %286 = add i32 %285, %97, !dbg !69
  %287 = or disjoint i32 %98, 12, !dbg !70
  %288 = add i32 %287, %48, !dbg !68
  %289 = add i32 %288, %97, !dbg !69
  %290 = sext i32 %280 to i64, !dbg !71
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %290, !dbg !71
  %292 = sext i32 %283 to i64, !dbg !71
  %293 = getelementptr float, ptr addrspace(1) %0, i64 %292, !dbg !71
  %294 = sext i32 %286 to i64, !dbg !71
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %294, !dbg !71
  %296 = sext i32 %289 to i64, !dbg !71
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %296, !dbg !71
  %298 = and i1 %50, %278, !dbg !72
  %299 = and i1 %30, %298, !dbg !73
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %291, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299) #2, !dbg !74
  %301 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !74
  %302 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !74
  %303 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !74
  %304 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !74
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %293, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299) #2, !dbg !74
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !74
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !74
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !74
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !74
  %310 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %295, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299) #2, !dbg !74
  %311 = extractvalue { i32, i32, i32, i32 } %310, 0, !dbg !74
  %312 = extractvalue { i32, i32, i32, i32 } %310, 1, !dbg !74
  %313 = extractvalue { i32, i32, i32, i32 } %310, 2, !dbg !74
  %314 = extractvalue { i32, i32, i32, i32 } %310, 3, !dbg !74
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %297, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299, i32 -8388608, i1 %299) #2, !dbg !74
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !74
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !74
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !74
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !74
  %320 = and i1 %233, %189, !dbg !75
  %321 = add i32 %98, 256, !dbg !76
  %322 = add i32 %321, %48, !dbg !77
  %323 = add i32 %322, %97, !dbg !78
  %324 = add i32 %98, 260, !dbg !76
  %325 = add i32 %324, %48, !dbg !77
  %326 = add i32 %325, %97, !dbg !78
  %327 = add i32 %98, 264, !dbg !76
  %328 = add i32 %327, %48, !dbg !77
  %329 = add i32 %328, %97, !dbg !78
  %330 = add i32 %98, 268, !dbg !76
  %331 = add i32 %330, %48, !dbg !77
  %332 = add i32 %331, %97, !dbg !78
  %333 = sext i32 %323 to i64, !dbg !79
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !79
  %335 = sext i32 %326 to i64, !dbg !79
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !79
  %337 = sext i32 %329 to i64, !dbg !79
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !79
  %339 = sext i32 %332 to i64, !dbg !79
  %340 = getelementptr float, ptr addrspace(1) %0, i64 %339, !dbg !79
  %341 = and i1 %50, %320, !dbg !80
  %342 = and i1 %30, %341, !dbg !81
  %343 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %334, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342) #2, !dbg !82
  %344 = extractvalue { i32, i32, i32, i32 } %343, 0, !dbg !82
  %345 = extractvalue { i32, i32, i32, i32 } %343, 1, !dbg !82
  %346 = extractvalue { i32, i32, i32, i32 } %343, 2, !dbg !82
  %347 = extractvalue { i32, i32, i32, i32 } %343, 3, !dbg !82
  %348 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %336, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342) #2, !dbg !82
  %349 = extractvalue { i32, i32, i32, i32 } %348, 0, !dbg !82
  %350 = extractvalue { i32, i32, i32, i32 } %348, 1, !dbg !82
  %351 = extractvalue { i32, i32, i32, i32 } %348, 2, !dbg !82
  %352 = extractvalue { i32, i32, i32, i32 } %348, 3, !dbg !82
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %338, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342) #2, !dbg !82
  %354 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !82
  %355 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !82
  %356 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !82
  %357 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !82
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %340, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342, i32 -8388608, i1 %342) #2, !dbg !82
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !82
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !82
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !82
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !82
  %363 = extractelement <2 x i1> %188, i64 1, !dbg !51
  %364 = and i1 %94, %363, !dbg !83
  %365 = add i32 %98, 8192, !dbg !84
  %366 = add i32 %365, %48, !dbg !85
  %367 = add i32 %366, %97, !dbg !86
  %368 = add i32 %98, 8196, !dbg !84
  %369 = add i32 %368, %48, !dbg !85
  %370 = add i32 %369, %97, !dbg !86
  %371 = add i32 %98, 8200, !dbg !84
  %372 = add i32 %371, %48, !dbg !85
  %373 = add i32 %372, %97, !dbg !86
  %374 = add i32 %98, 8204, !dbg !84
  %375 = add i32 %374, %48, !dbg !85
  %376 = add i32 %375, %97, !dbg !86
  %377 = sext i32 %367 to i64, !dbg !87
  %378 = getelementptr float, ptr addrspace(1) %0, i64 %377, !dbg !87
  %379 = sext i32 %370 to i64, !dbg !87
  %380 = getelementptr float, ptr addrspace(1) %0, i64 %379, !dbg !87
  %381 = sext i32 %373 to i64, !dbg !87
  %382 = getelementptr float, ptr addrspace(1) %0, i64 %381, !dbg !87
  %383 = sext i32 %376 to i64, !dbg !87
  %384 = getelementptr float, ptr addrspace(1) %0, i64 %383, !dbg !87
  %385 = and i1 %50, %364, !dbg !88
  %386 = and i1 %30, %385, !dbg !89
  %387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %378, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386) #2, !dbg !90
  %388 = extractvalue { i32, i32, i32, i32 } %387, 0, !dbg !90
  %389 = extractvalue { i32, i32, i32, i32 } %387, 1, !dbg !90
  %390 = extractvalue { i32, i32, i32, i32 } %387, 2, !dbg !90
  %391 = extractvalue { i32, i32, i32, i32 } %387, 3, !dbg !90
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %380, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386) #2, !dbg !90
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !90
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !90
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !90
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !90
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %382, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386) #2, !dbg !90
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !90
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !90
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !90
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !90
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %384, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386, i32 -8388608, i1 %386) #2, !dbg !90
  %403 = extractvalue { i32, i32, i32, i32 } %402, 0, !dbg !90
  %404 = extractvalue { i32, i32, i32, i32 } %402, 1, !dbg !90
  %405 = extractvalue { i32, i32, i32, i32 } %402, 2, !dbg !90
  %406 = extractvalue { i32, i32, i32, i32 } %402, 3, !dbg !90
  %407 = and i1 %142, %363, !dbg !91
  %408 = add i32 %98, 8448, !dbg !92
  %409 = add i32 %408, %48, !dbg !93
  %410 = add i32 %409, %97, !dbg !94
  %411 = add i32 %98, 8452, !dbg !92
  %412 = add i32 %411, %48, !dbg !93
  %413 = add i32 %412, %97, !dbg !94
  %414 = add i32 %98, 8456, !dbg !92
  %415 = add i32 %414, %48, !dbg !93
  %416 = add i32 %415, %97, !dbg !94
  %417 = add i32 %98, 8460, !dbg !92
  %418 = add i32 %417, %48, !dbg !93
  %419 = add i32 %418, %97, !dbg !94
  %420 = sext i32 %410 to i64, !dbg !95
  %421 = getelementptr float, ptr addrspace(1) %0, i64 %420, !dbg !95
  %422 = sext i32 %413 to i64, !dbg !95
  %423 = getelementptr float, ptr addrspace(1) %0, i64 %422, !dbg !95
  %424 = sext i32 %416 to i64, !dbg !95
  %425 = getelementptr float, ptr addrspace(1) %0, i64 %424, !dbg !95
  %426 = sext i32 %419 to i64, !dbg !95
  %427 = getelementptr float, ptr addrspace(1) %0, i64 %426, !dbg !95
  %428 = and i1 %50, %407, !dbg !96
  %429 = and i1 %30, %428, !dbg !97
  %430 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %421, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429) #2, !dbg !98
  %431 = extractvalue { i32, i32, i32, i32 } %430, 0, !dbg !98
  %432 = extractvalue { i32, i32, i32, i32 } %430, 1, !dbg !98
  %433 = extractvalue { i32, i32, i32, i32 } %430, 2, !dbg !98
  %434 = extractvalue { i32, i32, i32, i32 } %430, 3, !dbg !98
  %435 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %423, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429) #2, !dbg !98
  %436 = extractvalue { i32, i32, i32, i32 } %435, 0, !dbg !98
  %437 = extractvalue { i32, i32, i32, i32 } %435, 1, !dbg !98
  %438 = extractvalue { i32, i32, i32, i32 } %435, 2, !dbg !98
  %439 = extractvalue { i32, i32, i32, i32 } %435, 3, !dbg !98
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %425, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429) #2, !dbg !98
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !98
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !98
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !98
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !98
  %445 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %427, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429, i32 -8388608, i1 %429) #2, !dbg !98
  %446 = extractvalue { i32, i32, i32, i32 } %445, 0, !dbg !98
  %447 = extractvalue { i32, i32, i32, i32 } %445, 1, !dbg !98
  %448 = extractvalue { i32, i32, i32, i32 } %445, 2, !dbg !98
  %449 = extractvalue { i32, i32, i32, i32 } %445, 3, !dbg !98
  %450 = and i1 %189, %363, !dbg !51
  %451 = add i32 %98, 8704, !dbg !99
  %452 = add i32 %451, %48, !dbg !100
  %453 = add i32 %452, %97, !dbg !101
  %454 = add i32 %98, 8708, !dbg !99
  %455 = add i32 %454, %48, !dbg !100
  %456 = add i32 %455, %97, !dbg !101
  %457 = add i32 %98, 8712, !dbg !99
  %458 = add i32 %457, %48, !dbg !100
  %459 = add i32 %458, %97, !dbg !101
  %460 = add i32 %98, 8716, !dbg !99
  %461 = add i32 %460, %48, !dbg !100
  %462 = add i32 %461, %97, !dbg !101
  %463 = sext i32 %453 to i64, !dbg !102
  %464 = getelementptr float, ptr addrspace(1) %0, i64 %463, !dbg !102
  %465 = sext i32 %456 to i64, !dbg !102
  %466 = getelementptr float, ptr addrspace(1) %0, i64 %465, !dbg !102
  %467 = sext i32 %459 to i64, !dbg !102
  %468 = getelementptr float, ptr addrspace(1) %0, i64 %467, !dbg !102
  %469 = sext i32 %462 to i64, !dbg !102
  %470 = getelementptr float, ptr addrspace(1) %0, i64 %469, !dbg !102
  %471 = and i1 %50, %450, !dbg !103
  %472 = and i1 %30, %471, !dbg !104
  %473 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %464, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472) #2, !dbg !105
  %474 = extractvalue { i32, i32, i32, i32 } %473, 0, !dbg !105
  %475 = extractvalue { i32, i32, i32, i32 } %473, 1, !dbg !105
  %476 = extractvalue { i32, i32, i32, i32 } %473, 2, !dbg !105
  %477 = extractvalue { i32, i32, i32, i32 } %473, 3, !dbg !105
  %478 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %466, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472) #2, !dbg !105
  %479 = extractvalue { i32, i32, i32, i32 } %478, 0, !dbg !105
  %480 = extractvalue { i32, i32, i32, i32 } %478, 1, !dbg !105
  %481 = extractvalue { i32, i32, i32, i32 } %478, 2, !dbg !105
  %482 = extractvalue { i32, i32, i32, i32 } %478, 3, !dbg !105
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %468, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472) #2, !dbg !105
  %484 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !105
  %485 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !105
  %486 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !105
  %487 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !105
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %470, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472) #2, !dbg !105
  %489 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !105
  %490 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !105
  %491 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !105
  %492 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !105
  %493 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !38
  %494 = insertelement <4 x i32> %493, i32 %123, i64 1, !dbg !38
  %495 = insertelement <4 x i32> %494, i32 %124, i64 2, !dbg !38
  %496 = insertelement <4 x i32> %495, i32 %125, i64 3, !dbg !38
  %497 = bitcast <4 x i32> %496 to <4 x float>, !dbg !38
  %498 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !47
  %499 = insertelement <4 x i32> %498, i32 %168, i64 1, !dbg !47
  %500 = insertelement <4 x i32> %499, i32 %169, i64 2, !dbg !47
  %501 = insertelement <4 x i32> %500, i32 %170, i64 3, !dbg !47
  %502 = bitcast <4 x i32> %501 to <4 x float>, !dbg !47
  %503 = fcmp ogt <4 x float> %502, %497, !dbg !106
  %504 = fcmp uno <4 x float> %502, zeroinitializer, !dbg !110
  %505 = or <4 x i1> %503, %504, !dbg !111
  %.v = select <4 x i1> %505, <4 x i32> %501, <4 x i32> %496, !dbg !112
  %506 = bitcast <4 x i32> %.v to <4 x float>, !dbg !112
  %507 = insertelement <4 x i32> poison, i32 %214, i64 0, !dbg !59
  %508 = insertelement <4 x i32> %507, i32 %215, i64 1, !dbg !59
  %509 = insertelement <4 x i32> %508, i32 %216, i64 2, !dbg !59
  %510 = insertelement <4 x i32> %509, i32 %217, i64 3, !dbg !59
  %511 = bitcast <4 x i32> %510 to <4 x float>, !dbg !59
  %512 = fcmp olt <4 x float> %506, %511, !dbg !113
  %513 = fcmp uno <4 x float> %511, zeroinitializer, !dbg !115
  %514 = or <4 x i1> %512, %513, !dbg !116
  %.v3 = select <4 x i1> %514, <4 x i32> %510, <4 x i32> %.v, !dbg !117
  %515 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !117
  %516 = insertelement <4 x i32> poison, i32 %258, i64 0, !dbg !67
  %517 = insertelement <4 x i32> %516, i32 %259, i64 1, !dbg !67
  %518 = insertelement <4 x i32> %517, i32 %260, i64 2, !dbg !67
  %519 = insertelement <4 x i32> %518, i32 %261, i64 3, !dbg !67
  %520 = bitcast <4 x i32> %519 to <4 x float>, !dbg !67
  %521 = fcmp olt <4 x float> %515, %520, !dbg !118
  %522 = fcmp uno <4 x float> %520, zeroinitializer, !dbg !120
  %523 = or <4 x i1> %521, %522, !dbg !121
  %.v4 = select <4 x i1> %523, <4 x i32> %519, <4 x i32> %.v3, !dbg !122
  %524 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !122
  %525 = insertelement <4 x i32> poison, i32 %301, i64 0, !dbg !74
  %526 = insertelement <4 x i32> %525, i32 %302, i64 1, !dbg !74
  %527 = insertelement <4 x i32> %526, i32 %303, i64 2, !dbg !74
  %528 = insertelement <4 x i32> %527, i32 %304, i64 3, !dbg !74
  %529 = bitcast <4 x i32> %528 to <4 x float>, !dbg !74
  %530 = fcmp olt <4 x float> %524, %529, !dbg !123
  %531 = fcmp uno <4 x float> %529, zeroinitializer, !dbg !125
  %532 = or <4 x i1> %530, %531, !dbg !126
  %.v5 = select <4 x i1> %532, <4 x i32> %528, <4 x i32> %.v4, !dbg !127
  %533 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !127
  %534 = insertelement <4 x i32> poison, i32 %344, i64 0, !dbg !82
  %535 = insertelement <4 x i32> %534, i32 %345, i64 1, !dbg !82
  %536 = insertelement <4 x i32> %535, i32 %346, i64 2, !dbg !82
  %537 = insertelement <4 x i32> %536, i32 %347, i64 3, !dbg !82
  %538 = bitcast <4 x i32> %537 to <4 x float>, !dbg !82
  %539 = fcmp olt <4 x float> %533, %538, !dbg !128
  %540 = fcmp uno <4 x float> %538, zeroinitializer, !dbg !130
  %541 = or <4 x i1> %539, %540, !dbg !131
  %.v6 = select <4 x i1> %541, <4 x i32> %537, <4 x i32> %.v5, !dbg !132
  %542 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !132
  %543 = insertelement <4 x i32> poison, i32 %388, i64 0, !dbg !90
  %544 = insertelement <4 x i32> %543, i32 %389, i64 1, !dbg !90
  %545 = insertelement <4 x i32> %544, i32 %390, i64 2, !dbg !90
  %546 = insertelement <4 x i32> %545, i32 %391, i64 3, !dbg !90
  %547 = bitcast <4 x i32> %546 to <4 x float>, !dbg !90
  %548 = fcmp olt <4 x float> %542, %547, !dbg !133
  %549 = fcmp uno <4 x float> %547, zeroinitializer, !dbg !135
  %550 = or <4 x i1> %548, %549, !dbg !136
  %.v7 = select <4 x i1> %550, <4 x i32> %546, <4 x i32> %.v6, !dbg !137
  %551 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !137
  %552 = insertelement <4 x i32> poison, i32 %431, i64 0, !dbg !98
  %553 = insertelement <4 x i32> %552, i32 %432, i64 1, !dbg !98
  %554 = insertelement <4 x i32> %553, i32 %433, i64 2, !dbg !98
  %555 = insertelement <4 x i32> %554, i32 %434, i64 3, !dbg !98
  %556 = bitcast <4 x i32> %555 to <4 x float>, !dbg !98
  %557 = fcmp olt <4 x float> %551, %556, !dbg !138
  %558 = fcmp uno <4 x float> %556, zeroinitializer, !dbg !140
  %559 = or <4 x i1> %557, %558, !dbg !141
  %.v8 = select <4 x i1> %559, <4 x i32> %555, <4 x i32> %.v7, !dbg !142
  %560 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !142
  %561 = insertelement <4 x i32> poison, i32 %474, i64 0, !dbg !105
  %562 = insertelement <4 x i32> %561, i32 %475, i64 1, !dbg !105
  %563 = insertelement <4 x i32> %562, i32 %476, i64 2, !dbg !105
  %564 = insertelement <4 x i32> %563, i32 %477, i64 3, !dbg !105
  %565 = bitcast <4 x i32> %564 to <4 x float>, !dbg !105
  %566 = fcmp olt <4 x float> %560, %565, !dbg !143
  %567 = bitcast i32 %474 to float, !dbg !145
  %568 = fcmp uno float %567, 0.000000e+00, !dbg !145
  %569 = bitcast i32 %475 to float, !dbg !145
  %570 = fcmp uno float %569, 0.000000e+00, !dbg !145
  %571 = bitcast i32 %476 to float, !dbg !145
  %572 = fcmp uno float %571, 0.000000e+00, !dbg !145
  %573 = bitcast i32 %477 to float, !dbg !145
  %574 = fcmp uno float %573, 0.000000e+00, !dbg !145
  %575 = extractelement <4 x i1> %566, i64 0, !dbg !146
  %576 = or i1 %575, %568, !dbg !146
  %577 = extractelement <4 x i1> %566, i64 1, !dbg !146
  %578 = or i1 %577, %570, !dbg !146
  %579 = extractelement <4 x i1> %566, i64 2, !dbg !146
  %580 = or i1 %579, %572, !dbg !146
  %581 = extractelement <4 x i1> %566, i64 3, !dbg !146
  %582 = or i1 %581, %574, !dbg !146
  %583 = zext <4 x i1> %503 to <4 x i8>, !dbg !147
  %584 = select <4 x i1> %512, <4 x i8> splat (i8 2), <4 x i8> %583, !dbg !148
  %585 = select <4 x i1> %521, <4 x i8> splat (i8 3), <4 x i8> %584, !dbg !149
  %586 = select <4 x i1> %530, <4 x i8> splat (i8 4), <4 x i8> %585, !dbg !150
  %587 = select <4 x i1> %539, <4 x i8> splat (i8 5), <4 x i8> %586, !dbg !151
  %588 = select <4 x i1> %548, <4 x i8> splat (i8 6), <4 x i8> %587, !dbg !152
  %589 = select <4 x i1> %557, <4 x i8> splat (i8 7), <4 x i8> %588, !dbg !153
  %590 = select <4 x i1> %566, <4 x i8> splat (i8 8), <4 x i8> %589, !dbg !154
  %591 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !38
  %592 = insertelement <4 x i32> %591, i32 %128, i64 1, !dbg !38
  %593 = insertelement <4 x i32> %592, i32 %129, i64 2, !dbg !38
  %594 = insertelement <4 x i32> %593, i32 %130, i64 3, !dbg !38
  %595 = bitcast <4 x i32> %594 to <4 x float>, !dbg !38
  %596 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !47
  %597 = insertelement <4 x i32> %596, i32 %173, i64 1, !dbg !47
  %598 = insertelement <4 x i32> %597, i32 %174, i64 2, !dbg !47
  %599 = insertelement <4 x i32> %598, i32 %175, i64 3, !dbg !47
  %600 = bitcast <4 x i32> %599 to <4 x float>, !dbg !47
  %601 = fcmp ogt <4 x float> %600, %595, !dbg !106
  %602 = fcmp uno <4 x float> %600, zeroinitializer, !dbg !110
  %603 = or <4 x i1> %601, %602, !dbg !111
  %.v9 = select <4 x i1> %603, <4 x i32> %599, <4 x i32> %594, !dbg !112
  %604 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !112
  %605 = insertelement <4 x i32> poison, i32 %219, i64 0, !dbg !59
  %606 = insertelement <4 x i32> %605, i32 %220, i64 1, !dbg !59
  %607 = insertelement <4 x i32> %606, i32 %221, i64 2, !dbg !59
  %608 = insertelement <4 x i32> %607, i32 %222, i64 3, !dbg !59
  %609 = bitcast <4 x i32> %608 to <4 x float>, !dbg !59
  %610 = fcmp olt <4 x float> %604, %609, !dbg !113
  %611 = fcmp uno <4 x float> %609, zeroinitializer, !dbg !115
  %612 = or <4 x i1> %610, %611, !dbg !116
  %.v10 = select <4 x i1> %612, <4 x i32> %608, <4 x i32> %.v9, !dbg !117
  %613 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !117
  %614 = insertelement <4 x i32> poison, i32 %263, i64 0, !dbg !67
  %615 = insertelement <4 x i32> %614, i32 %264, i64 1, !dbg !67
  %616 = insertelement <4 x i32> %615, i32 %265, i64 2, !dbg !67
  %617 = insertelement <4 x i32> %616, i32 %266, i64 3, !dbg !67
  %618 = bitcast <4 x i32> %617 to <4 x float>, !dbg !67
  %619 = fcmp olt <4 x float> %613, %618, !dbg !118
  %620 = fcmp uno <4 x float> %618, zeroinitializer, !dbg !120
  %621 = or <4 x i1> %619, %620, !dbg !121
  %.v11 = select <4 x i1> %621, <4 x i32> %617, <4 x i32> %.v10, !dbg !122
  %622 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !122
  %623 = insertelement <4 x i32> poison, i32 %306, i64 0, !dbg !74
  %624 = insertelement <4 x i32> %623, i32 %307, i64 1, !dbg !74
  %625 = insertelement <4 x i32> %624, i32 %308, i64 2, !dbg !74
  %626 = insertelement <4 x i32> %625, i32 %309, i64 3, !dbg !74
  %627 = bitcast <4 x i32> %626 to <4 x float>, !dbg !74
  %628 = fcmp olt <4 x float> %622, %627, !dbg !123
  %629 = fcmp uno <4 x float> %627, zeroinitializer, !dbg !125
  %630 = or <4 x i1> %628, %629, !dbg !126
  %.v12 = select <4 x i1> %630, <4 x i32> %626, <4 x i32> %.v11, !dbg !127
  %631 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !127
  %632 = insertelement <4 x i32> poison, i32 %349, i64 0, !dbg !82
  %633 = insertelement <4 x i32> %632, i32 %350, i64 1, !dbg !82
  %634 = insertelement <4 x i32> %633, i32 %351, i64 2, !dbg !82
  %635 = insertelement <4 x i32> %634, i32 %352, i64 3, !dbg !82
  %636 = bitcast <4 x i32> %635 to <4 x float>, !dbg !82
  %637 = fcmp olt <4 x float> %631, %636, !dbg !128
  %638 = fcmp uno <4 x float> %636, zeroinitializer, !dbg !130
  %639 = or <4 x i1> %637, %638, !dbg !131
  %.v13 = select <4 x i1> %639, <4 x i32> %635, <4 x i32> %.v12, !dbg !132
  %640 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !132
  %641 = insertelement <4 x i32> poison, i32 %393, i64 0, !dbg !90
  %642 = insertelement <4 x i32> %641, i32 %394, i64 1, !dbg !90
  %643 = insertelement <4 x i32> %642, i32 %395, i64 2, !dbg !90
  %644 = insertelement <4 x i32> %643, i32 %396, i64 3, !dbg !90
  %645 = bitcast <4 x i32> %644 to <4 x float>, !dbg !90
  %646 = fcmp olt <4 x float> %640, %645, !dbg !133
  %647 = fcmp uno <4 x float> %645, zeroinitializer, !dbg !135
  %648 = or <4 x i1> %646, %647, !dbg !136
  %.v14 = select <4 x i1> %648, <4 x i32> %644, <4 x i32> %.v13, !dbg !137
  %649 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !137
  %650 = insertelement <4 x i32> poison, i32 %436, i64 0, !dbg !98
  %651 = insertelement <4 x i32> %650, i32 %437, i64 1, !dbg !98
  %652 = insertelement <4 x i32> %651, i32 %438, i64 2, !dbg !98
  %653 = insertelement <4 x i32> %652, i32 %439, i64 3, !dbg !98
  %654 = bitcast <4 x i32> %653 to <4 x float>, !dbg !98
  %655 = fcmp olt <4 x float> %649, %654, !dbg !138
  %656 = fcmp uno <4 x float> %654, zeroinitializer, !dbg !140
  %657 = or <4 x i1> %655, %656, !dbg !141
  %.v15 = select <4 x i1> %657, <4 x i32> %653, <4 x i32> %.v14, !dbg !142
  %658 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !142
  %659 = insertelement <4 x i32> poison, i32 %479, i64 0, !dbg !105
  %660 = insertelement <4 x i32> %659, i32 %480, i64 1, !dbg !105
  %661 = insertelement <4 x i32> %660, i32 %481, i64 2, !dbg !105
  %662 = insertelement <4 x i32> %661, i32 %482, i64 3, !dbg !105
  %663 = bitcast <4 x i32> %662 to <4 x float>, !dbg !105
  %664 = fcmp olt <4 x float> %658, %663, !dbg !143
  %665 = bitcast i32 %479 to float, !dbg !145
  %666 = fcmp uno float %665, 0.000000e+00, !dbg !145
  %667 = bitcast i32 %480 to float, !dbg !145
  %668 = fcmp uno float %667, 0.000000e+00, !dbg !145
  %669 = bitcast i32 %481 to float, !dbg !145
  %670 = fcmp uno float %669, 0.000000e+00, !dbg !145
  %671 = bitcast i32 %482 to float, !dbg !145
  %672 = fcmp uno float %671, 0.000000e+00, !dbg !145
  %673 = extractelement <4 x i1> %664, i64 0, !dbg !146
  %674 = or i1 %673, %666, !dbg !146
  %675 = extractelement <4 x i1> %664, i64 1, !dbg !146
  %676 = or i1 %675, %668, !dbg !146
  %677 = extractelement <4 x i1> %664, i64 2, !dbg !146
  %678 = or i1 %677, %670, !dbg !146
  %679 = extractelement <4 x i1> %664, i64 3, !dbg !146
  %680 = or i1 %679, %672, !dbg !146
  %681 = zext <4 x i1> %601 to <4 x i8>, !dbg !147
  %682 = select <4 x i1> %610, <4 x i8> splat (i8 2), <4 x i8> %681, !dbg !148
  %683 = select <4 x i1> %619, <4 x i8> splat (i8 3), <4 x i8> %682, !dbg !149
  %684 = select <4 x i1> %628, <4 x i8> splat (i8 4), <4 x i8> %683, !dbg !150
  %685 = select <4 x i1> %637, <4 x i8> splat (i8 5), <4 x i8> %684, !dbg !151
  %686 = select <4 x i1> %646, <4 x i8> splat (i8 6), <4 x i8> %685, !dbg !152
  %687 = select <4 x i1> %655, <4 x i8> splat (i8 7), <4 x i8> %686, !dbg !153
  %688 = select <4 x i1> %664, <4 x i8> splat (i8 8), <4 x i8> %687, !dbg !154
  %689 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !38
  %690 = insertelement <4 x i32> %689, i32 %133, i64 1, !dbg !38
  %691 = insertelement <4 x i32> %690, i32 %134, i64 2, !dbg !38
  %692 = insertelement <4 x i32> %691, i32 %135, i64 3, !dbg !38
  %693 = bitcast <4 x i32> %692 to <4 x float>, !dbg !38
  %694 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !47
  %695 = insertelement <4 x i32> %694, i32 %178, i64 1, !dbg !47
  %696 = insertelement <4 x i32> %695, i32 %179, i64 2, !dbg !47
  %697 = insertelement <4 x i32> %696, i32 %180, i64 3, !dbg !47
  %698 = bitcast <4 x i32> %697 to <4 x float>, !dbg !47
  %699 = fcmp ogt <4 x float> %698, %693, !dbg !106
  %700 = fcmp uno <4 x float> %698, zeroinitializer, !dbg !110
  %701 = or <4 x i1> %699, %700, !dbg !111
  %.v16 = select <4 x i1> %701, <4 x i32> %697, <4 x i32> %692, !dbg !112
  %702 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !112
  %703 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !59
  %704 = insertelement <4 x i32> %703, i32 %225, i64 1, !dbg !59
  %705 = insertelement <4 x i32> %704, i32 %226, i64 2, !dbg !59
  %706 = insertelement <4 x i32> %705, i32 %227, i64 3, !dbg !59
  %707 = bitcast <4 x i32> %706 to <4 x float>, !dbg !59
  %708 = fcmp olt <4 x float> %702, %707, !dbg !113
  %709 = fcmp uno <4 x float> %707, zeroinitializer, !dbg !115
  %710 = or <4 x i1> %708, %709, !dbg !116
  %.v17 = select <4 x i1> %710, <4 x i32> %706, <4 x i32> %.v16, !dbg !117
  %711 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !117
  %712 = insertelement <4 x i32> poison, i32 %268, i64 0, !dbg !67
  %713 = insertelement <4 x i32> %712, i32 %269, i64 1, !dbg !67
  %714 = insertelement <4 x i32> %713, i32 %270, i64 2, !dbg !67
  %715 = insertelement <4 x i32> %714, i32 %271, i64 3, !dbg !67
  %716 = bitcast <4 x i32> %715 to <4 x float>, !dbg !67
  %717 = fcmp olt <4 x float> %711, %716, !dbg !118
  %718 = fcmp uno <4 x float> %716, zeroinitializer, !dbg !120
  %719 = or <4 x i1> %717, %718, !dbg !121
  %.v18 = select <4 x i1> %719, <4 x i32> %715, <4 x i32> %.v17, !dbg !122
  %720 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !122
  %721 = insertelement <4 x i32> poison, i32 %311, i64 0, !dbg !74
  %722 = insertelement <4 x i32> %721, i32 %312, i64 1, !dbg !74
  %723 = insertelement <4 x i32> %722, i32 %313, i64 2, !dbg !74
  %724 = insertelement <4 x i32> %723, i32 %314, i64 3, !dbg !74
  %725 = bitcast <4 x i32> %724 to <4 x float>, !dbg !74
  %726 = fcmp olt <4 x float> %720, %725, !dbg !123
  %727 = fcmp uno <4 x float> %725, zeroinitializer, !dbg !125
  %728 = or <4 x i1> %726, %727, !dbg !126
  %.v19 = select <4 x i1> %728, <4 x i32> %724, <4 x i32> %.v18, !dbg !127
  %729 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !127
  %730 = insertelement <4 x i32> poison, i32 %354, i64 0, !dbg !82
  %731 = insertelement <4 x i32> %730, i32 %355, i64 1, !dbg !82
  %732 = insertelement <4 x i32> %731, i32 %356, i64 2, !dbg !82
  %733 = insertelement <4 x i32> %732, i32 %357, i64 3, !dbg !82
  %734 = bitcast <4 x i32> %733 to <4 x float>, !dbg !82
  %735 = fcmp olt <4 x float> %729, %734, !dbg !128
  %736 = fcmp uno <4 x float> %734, zeroinitializer, !dbg !130
  %737 = or <4 x i1> %735, %736, !dbg !131
  %.v20 = select <4 x i1> %737, <4 x i32> %733, <4 x i32> %.v19, !dbg !132
  %738 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !132
  %739 = insertelement <4 x i32> poison, i32 %398, i64 0, !dbg !90
  %740 = insertelement <4 x i32> %739, i32 %399, i64 1, !dbg !90
  %741 = insertelement <4 x i32> %740, i32 %400, i64 2, !dbg !90
  %742 = insertelement <4 x i32> %741, i32 %401, i64 3, !dbg !90
  %743 = bitcast <4 x i32> %742 to <4 x float>, !dbg !90
  %744 = fcmp olt <4 x float> %738, %743, !dbg !133
  %745 = fcmp uno <4 x float> %743, zeroinitializer, !dbg !135
  %746 = or <4 x i1> %744, %745, !dbg !136
  %.v21 = select <4 x i1> %746, <4 x i32> %742, <4 x i32> %.v20, !dbg !137
  %747 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !137
  %748 = insertelement <4 x i32> poison, i32 %441, i64 0, !dbg !98
  %749 = insertelement <4 x i32> %748, i32 %442, i64 1, !dbg !98
  %750 = insertelement <4 x i32> %749, i32 %443, i64 2, !dbg !98
  %751 = insertelement <4 x i32> %750, i32 %444, i64 3, !dbg !98
  %752 = bitcast <4 x i32> %751 to <4 x float>, !dbg !98
  %753 = fcmp olt <4 x float> %747, %752, !dbg !138
  %754 = fcmp uno <4 x float> %752, zeroinitializer, !dbg !140
  %755 = or <4 x i1> %753, %754, !dbg !141
  %.v22 = select <4 x i1> %755, <4 x i32> %751, <4 x i32> %.v21, !dbg !142
  %756 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !142
  %757 = insertelement <4 x i32> poison, i32 %484, i64 0, !dbg !105
  %758 = insertelement <4 x i32> %757, i32 %485, i64 1, !dbg !105
  %759 = insertelement <4 x i32> %758, i32 %486, i64 2, !dbg !105
  %760 = insertelement <4 x i32> %759, i32 %487, i64 3, !dbg !105
  %761 = bitcast <4 x i32> %760 to <4 x float>, !dbg !105
  %762 = fcmp olt <4 x float> %756, %761, !dbg !143
  %763 = bitcast i32 %484 to float, !dbg !145
  %764 = fcmp uno float %763, 0.000000e+00, !dbg !145
  %765 = bitcast i32 %485 to float, !dbg !145
  %766 = fcmp uno float %765, 0.000000e+00, !dbg !145
  %767 = bitcast i32 %486 to float, !dbg !145
  %768 = fcmp uno float %767, 0.000000e+00, !dbg !145
  %769 = bitcast i32 %487 to float, !dbg !145
  %770 = fcmp uno float %769, 0.000000e+00, !dbg !145
  %771 = extractelement <4 x i1> %762, i64 0, !dbg !146
  %772 = or i1 %771, %764, !dbg !146
  %773 = extractelement <4 x i1> %762, i64 1, !dbg !146
  %774 = or i1 %773, %766, !dbg !146
  %775 = extractelement <4 x i1> %762, i64 2, !dbg !146
  %776 = or i1 %775, %768, !dbg !146
  %777 = extractelement <4 x i1> %762, i64 3, !dbg !146
  %778 = or i1 %777, %770, !dbg !146
  %779 = zext <4 x i1> %699 to <4 x i8>, !dbg !147
  %780 = select <4 x i1> %708, <4 x i8> splat (i8 2), <4 x i8> %779, !dbg !148
  %781 = select <4 x i1> %717, <4 x i8> splat (i8 3), <4 x i8> %780, !dbg !149
  %782 = select <4 x i1> %726, <4 x i8> splat (i8 4), <4 x i8> %781, !dbg !150
  %783 = select <4 x i1> %735, <4 x i8> splat (i8 5), <4 x i8> %782, !dbg !151
  %784 = select <4 x i1> %744, <4 x i8> splat (i8 6), <4 x i8> %783, !dbg !152
  %785 = select <4 x i1> %753, <4 x i8> splat (i8 7), <4 x i8> %784, !dbg !153
  %786 = select <4 x i1> %762, <4 x i8> splat (i8 8), <4 x i8> %785, !dbg !154
  %787 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !38
  %788 = insertelement <4 x i32> %787, i32 %138, i64 1, !dbg !38
  %789 = insertelement <4 x i32> %788, i32 %139, i64 2, !dbg !38
  %790 = insertelement <4 x i32> %789, i32 %140, i64 3, !dbg !38
  %791 = bitcast <4 x i32> %790 to <4 x float>, !dbg !38
  %792 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !47
  %793 = insertelement <4 x i32> %792, i32 %183, i64 1, !dbg !47
  %794 = insertelement <4 x i32> %793, i32 %184, i64 2, !dbg !47
  %795 = insertelement <4 x i32> %794, i32 %185, i64 3, !dbg !47
  %796 = bitcast <4 x i32> %795 to <4 x float>, !dbg !47
  %797 = fcmp ogt <4 x float> %796, %791, !dbg !106
  %798 = fcmp uno <4 x float> %796, zeroinitializer, !dbg !110
  %799 = or <4 x i1> %797, %798, !dbg !111
  %.v23 = select <4 x i1> %799, <4 x i32> %795, <4 x i32> %790, !dbg !112
  %800 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !112
  %801 = insertelement <4 x i32> poison, i32 %229, i64 0, !dbg !59
  %802 = insertelement <4 x i32> %801, i32 %230, i64 1, !dbg !59
  %803 = insertelement <4 x i32> %802, i32 %231, i64 2, !dbg !59
  %804 = insertelement <4 x i32> %803, i32 %232, i64 3, !dbg !59
  %805 = bitcast <4 x i32> %804 to <4 x float>, !dbg !59
  %806 = fcmp olt <4 x float> %800, %805, !dbg !113
  %807 = fcmp uno <4 x float> %805, zeroinitializer, !dbg !115
  %808 = or <4 x i1> %806, %807, !dbg !116
  %.v24 = select <4 x i1> %808, <4 x i32> %804, <4 x i32> %.v23, !dbg !117
  %809 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !117
  %810 = insertelement <4 x i32> poison, i32 %273, i64 0, !dbg !67
  %811 = insertelement <4 x i32> %810, i32 %274, i64 1, !dbg !67
  %812 = insertelement <4 x i32> %811, i32 %275, i64 2, !dbg !67
  %813 = insertelement <4 x i32> %812, i32 %276, i64 3, !dbg !67
  %814 = bitcast <4 x i32> %813 to <4 x float>, !dbg !67
  %815 = fcmp olt <4 x float> %809, %814, !dbg !118
  %816 = fcmp uno <4 x float> %814, zeroinitializer, !dbg !120
  %817 = or <4 x i1> %815, %816, !dbg !121
  %.v25 = select <4 x i1> %817, <4 x i32> %813, <4 x i32> %.v24, !dbg !122
  %818 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !122
  %819 = insertelement <4 x i32> poison, i32 %316, i64 0, !dbg !74
  %820 = insertelement <4 x i32> %819, i32 %317, i64 1, !dbg !74
  %821 = insertelement <4 x i32> %820, i32 %318, i64 2, !dbg !74
  %822 = insertelement <4 x i32> %821, i32 %319, i64 3, !dbg !74
  %823 = bitcast <4 x i32> %822 to <4 x float>, !dbg !74
  %824 = fcmp olt <4 x float> %818, %823, !dbg !123
  %825 = fcmp uno <4 x float> %823, zeroinitializer, !dbg !125
  %826 = or <4 x i1> %824, %825, !dbg !126
  %.v26 = select <4 x i1> %826, <4 x i32> %822, <4 x i32> %.v25, !dbg !127
  %827 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !127
  %828 = insertelement <4 x i32> poison, i32 %359, i64 0, !dbg !82
  %829 = insertelement <4 x i32> %828, i32 %360, i64 1, !dbg !82
  %830 = insertelement <4 x i32> %829, i32 %361, i64 2, !dbg !82
  %831 = insertelement <4 x i32> %830, i32 %362, i64 3, !dbg !82
  %832 = bitcast <4 x i32> %831 to <4 x float>, !dbg !82
  %833 = fcmp olt <4 x float> %827, %832, !dbg !128
  %834 = fcmp uno <4 x float> %832, zeroinitializer, !dbg !130
  %835 = or <4 x i1> %833, %834, !dbg !131
  %.v27 = select <4 x i1> %835, <4 x i32> %831, <4 x i32> %.v26, !dbg !132
  %836 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !132
  %837 = insertelement <4 x i32> poison, i32 %403, i64 0, !dbg !90
  %838 = insertelement <4 x i32> %837, i32 %404, i64 1, !dbg !90
  %839 = insertelement <4 x i32> %838, i32 %405, i64 2, !dbg !90
  %840 = insertelement <4 x i32> %839, i32 %406, i64 3, !dbg !90
  %841 = bitcast <4 x i32> %840 to <4 x float>, !dbg !90
  %842 = fcmp olt <4 x float> %836, %841, !dbg !133
  %843 = fcmp uno <4 x float> %841, zeroinitializer, !dbg !135
  %844 = or <4 x i1> %842, %843, !dbg !136
  %.v28 = select <4 x i1> %844, <4 x i32> %840, <4 x i32> %.v27, !dbg !137
  %845 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !137
  %846 = insertelement <4 x i32> poison, i32 %446, i64 0, !dbg !98
  %847 = insertelement <4 x i32> %846, i32 %447, i64 1, !dbg !98
  %848 = insertelement <4 x i32> %847, i32 %448, i64 2, !dbg !98
  %849 = insertelement <4 x i32> %848, i32 %449, i64 3, !dbg !98
  %850 = bitcast <4 x i32> %849 to <4 x float>, !dbg !98
  %851 = fcmp olt <4 x float> %845, %850, !dbg !138
  %852 = fcmp uno <4 x float> %850, zeroinitializer, !dbg !140
  %853 = or <4 x i1> %851, %852, !dbg !141
  %.v29 = select <4 x i1> %853, <4 x i32> %849, <4 x i32> %.v28, !dbg !142
  %854 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !142
  %855 = insertelement <4 x i32> poison, i32 %489, i64 0, !dbg !105
  %856 = insertelement <4 x i32> %855, i32 %490, i64 1, !dbg !105
  %857 = insertelement <4 x i32> %856, i32 %491, i64 2, !dbg !105
  %858 = insertelement <4 x i32> %857, i32 %492, i64 3, !dbg !105
  %859 = bitcast <4 x i32> %858 to <4 x float>, !dbg !105
  %860 = fcmp olt <4 x float> %854, %859, !dbg !143
  %861 = bitcast i32 %489 to float, !dbg !145
  %862 = fcmp uno float %861, 0.000000e+00, !dbg !145
  %863 = bitcast i32 %490 to float, !dbg !145
  %864 = fcmp uno float %863, 0.000000e+00, !dbg !145
  %865 = bitcast i32 %491 to float, !dbg !145
  %866 = fcmp uno float %865, 0.000000e+00, !dbg !145
  %867 = bitcast i32 %492 to float, !dbg !145
  %868 = fcmp uno float %867, 0.000000e+00, !dbg !145
  %869 = extractelement <4 x i1> %860, i64 0, !dbg !146
  %870 = or i1 %869, %862, !dbg !146
  %871 = extractelement <4 x i1> %860, i64 1, !dbg !146
  %872 = or i1 %871, %864, !dbg !146
  %873 = extractelement <4 x i1> %860, i64 2, !dbg !146
  %874 = or i1 %873, %866, !dbg !146
  %875 = extractelement <4 x i1> %860, i64 3, !dbg !146
  %876 = or i1 %875, %868, !dbg !146
  %877 = zext <4 x i1> %797 to <4 x i8>, !dbg !147
  %878 = select <4 x i1> %806, <4 x i8> splat (i8 2), <4 x i8> %877, !dbg !148
  %879 = select <4 x i1> %815, <4 x i8> splat (i8 3), <4 x i8> %878, !dbg !149
  %880 = select <4 x i1> %824, <4 x i8> splat (i8 4), <4 x i8> %879, !dbg !150
  %881 = select <4 x i1> %833, <4 x i8> splat (i8 5), <4 x i8> %880, !dbg !151
  %882 = select <4 x i1> %842, <4 x i8> splat (i8 6), <4 x i8> %881, !dbg !152
  %883 = select <4 x i1> %851, <4 x i8> splat (i8 7), <4 x i8> %882, !dbg !153
  %884 = select <4 x i1> %860, <4 x i8> splat (i8 8), <4 x i8> %883, !dbg !154
  %885 = mul i32 %49, 289, !dbg !155
  %886 = add i32 %885, %.decomposed, !dbg !156
  %887 = mul i32 %54, 110976, !dbg !157
  %888 = mul i32 %55, 110976, !dbg !157
  %889 = mul i32 %56, 110976, !dbg !157
  %890 = mul i32 %57, 110976, !dbg !157
  %891 = mul i32 %58, 110976, !dbg !157
  %892 = mul i32 %59, 110976, !dbg !157
  %893 = mul i32 %60, 110976, !dbg !157
  %894 = mul i32 %61, 110976, !dbg !157
  %895 = mul i32 %62, 110976, !dbg !157
  %896 = mul i32 %63, 110976, !dbg !157
  %897 = mul i32 %64, 110976, !dbg !157
  %898 = mul i32 %65, 110976, !dbg !157
  %899 = mul i32 %66, 110976, !dbg !157
  %900 = mul i32 %67, 110976, !dbg !157
  %901 = mul i32 %68, 110976, !dbg !157
  %902 = mul i32 %69, 110976, !dbg !157
  %903 = add i32 %886, %887, !dbg !158
  %904 = add i32 %888, %.decomposed31, !dbg !156
  %905 = add i32 %904, %885, !dbg !158
  %906 = add i32 %889, %.decomposed33, !dbg !156
  %907 = add i32 %906, %885, !dbg !158
  %908 = add i32 %890, %.decomposed35, !dbg !156
  %909 = add i32 %908, %885, !dbg !158
  %910 = add i32 %891, %.decomposed37, !dbg !156
  %911 = add i32 %910, %885, !dbg !158
  %912 = add i32 %892, %.decomposed39, !dbg !156
  %913 = add i32 %912, %885, !dbg !158
  %914 = add i32 %893, %.decomposed41, !dbg !156
  %915 = add i32 %914, %885, !dbg !158
  %916 = add i32 %894, %.decomposed43, !dbg !156
  %917 = add i32 %916, %885, !dbg !158
  %918 = add i32 %895, %.decomposed45, !dbg !156
  %919 = add i32 %918, %885, !dbg !158
  %920 = add i32 %896, %.decomposed47, !dbg !156
  %921 = add i32 %920, %885, !dbg !158
  %922 = add i32 %897, %.decomposed49, !dbg !156
  %923 = add i32 %922, %885, !dbg !158
  %924 = add i32 %898, %.decomposed51, !dbg !156
  %925 = add i32 %924, %885, !dbg !158
  %926 = add i32 %899, %.decomposed53, !dbg !156
  %927 = add i32 %926, %885, !dbg !158
  %928 = add i32 %900, %.decomposed55, !dbg !156
  %929 = add i32 %928, %885, !dbg !158
  %930 = add i32 %901, %.decomposed57, !dbg !156
  %931 = add i32 %930, %885, !dbg !158
  %932 = add i32 %902, %.decomposed59, !dbg !156
  %933 = add i32 %932, %885, !dbg !158
  %934 = sext i32 %903 to i64, !dbg !159
  %935 = getelementptr float, ptr addrspace(1) %1, i64 %934, !dbg !159
  %936 = sext i32 %905 to i64, !dbg !159
  %937 = getelementptr float, ptr addrspace(1) %1, i64 %936, !dbg !159
  %938 = sext i32 %907 to i64, !dbg !159
  %939 = getelementptr float, ptr addrspace(1) %1, i64 %938, !dbg !159
  %940 = sext i32 %909 to i64, !dbg !159
  %941 = getelementptr float, ptr addrspace(1) %1, i64 %940, !dbg !159
  %942 = sext i32 %911 to i64, !dbg !159
  %943 = getelementptr float, ptr addrspace(1) %1, i64 %942, !dbg !159
  %944 = sext i32 %913 to i64, !dbg !159
  %945 = getelementptr float, ptr addrspace(1) %1, i64 %944, !dbg !159
  %946 = sext i32 %915 to i64, !dbg !159
  %947 = getelementptr float, ptr addrspace(1) %1, i64 %946, !dbg !159
  %948 = sext i32 %917 to i64, !dbg !159
  %949 = getelementptr float, ptr addrspace(1) %1, i64 %948, !dbg !159
  %950 = sext i32 %919 to i64, !dbg !159
  %951 = getelementptr float, ptr addrspace(1) %1, i64 %950, !dbg !159
  %952 = sext i32 %921 to i64, !dbg !159
  %953 = getelementptr float, ptr addrspace(1) %1, i64 %952, !dbg !159
  %954 = sext i32 %923 to i64, !dbg !159
  %955 = getelementptr float, ptr addrspace(1) %1, i64 %954, !dbg !159
  %956 = sext i32 %925 to i64, !dbg !159
  %957 = getelementptr float, ptr addrspace(1) %1, i64 %956, !dbg !159
  %958 = sext i32 %927 to i64, !dbg !159
  %959 = getelementptr float, ptr addrspace(1) %1, i64 %958, !dbg !159
  %960 = sext i32 %929 to i64, !dbg !159
  %961 = getelementptr float, ptr addrspace(1) %1, i64 %960, !dbg !159
  %962 = sext i32 %931 to i64, !dbg !159
  %963 = getelementptr float, ptr addrspace(1) %1, i64 %962, !dbg !159
  %964 = sext i32 %933 to i64, !dbg !159
  %965 = getelementptr float, ptr addrspace(1) %1, i64 %964, !dbg !159
  %966 = and i1 %31, %51, !dbg !160
  %967 = and i1 %32, %51, !dbg !160
  %968 = and i1 %33, %51, !dbg !160
  %969 = and i1 %34, %51, !dbg !160
  %970 = and i1 %35, %51, !dbg !160
  %971 = and i1 %36, %51, !dbg !160
  %972 = and i1 %37, %51, !dbg !160
  %973 = and i1 %38, %51, !dbg !160
  %974 = and i1 %39, %51, !dbg !160
  %975 = and i1 %40, %51, !dbg !160
  %976 = and i1 %41, %51, !dbg !160
  %977 = and i1 %42, %51, !dbg !160
  %978 = and i1 %43, %51, !dbg !160
  %979 = and i1 %44, %51, !dbg !160
  %980 = and i1 %45, %51, !dbg !160
  %981 = and i1 %46, %51, !dbg !160
  %982 = and i1 %50, %30, !dbg !160
  %983 = shl i32 %8, 4, !dbg !161
  %984 = and i32 %983, 4080, !dbg !161
  %985 = lshr exact i32 %984, 2, !dbg !161
  %986 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %985, !dbg !161
  %987 = getelementptr float, ptr addrspace(3) %986, i32 %984, !dbg !161
  %988 = extractelement <4 x i32> %.v8, i64 0, !dbg !161
  %989 = select i1 %576, i32 %474, i32 %988, !dbg !162
  %990 = insertelement <1 x i32> poison, i32 %989, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %987, <1 x i32> %990, i1 true) #2, !dbg !161
  %991 = or disjoint i32 %984, 1, !dbg !161
  %992 = getelementptr float, ptr addrspace(3) %986, i32 %991, !dbg !161
  %993 = extractelement <4 x i32> %.v8, i64 1, !dbg !161
  %994 = select i1 %578, i32 %475, i32 %993, !dbg !162
  %995 = insertelement <1 x i32> poison, i32 %994, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %992, <1 x i32> %995, i1 true) #2, !dbg !161
  %996 = or disjoint i32 %984, 2, !dbg !161
  %997 = getelementptr float, ptr addrspace(3) %986, i32 %996, !dbg !161
  %998 = extractelement <4 x i32> %.v8, i64 2, !dbg !161
  %999 = select i1 %580, i32 %476, i32 %998, !dbg !162
  %1000 = insertelement <1 x i32> poison, i32 %999, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %997, <1 x i32> %1000, i1 true) #2, !dbg !161
  %1001 = or disjoint i32 %984, 3, !dbg !161
  %1002 = getelementptr float, ptr addrspace(3) %986, i32 %1001, !dbg !161
  %1003 = extractelement <4 x i32> %.v8, i64 3, !dbg !161
  %1004 = select i1 %582, i32 %477, i32 %1003, !dbg !162
  %1005 = insertelement <1 x i32> poison, i32 %1004, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1002, <1 x i32> %1005, i1 true) #2, !dbg !161
  %1006 = or disjoint i32 %984, 4, !dbg !161
  %1007 = getelementptr float, ptr addrspace(3) %986, i32 %1006, !dbg !161
  %1008 = extractelement <4 x i32> %.v15, i64 0, !dbg !161
  %1009 = select i1 %674, i32 %479, i32 %1008, !dbg !162
  %1010 = insertelement <1 x i32> poison, i32 %1009, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1007, <1 x i32> %1010, i1 true) #2, !dbg !161
  %1011 = or disjoint i32 %984, 5, !dbg !161
  %1012 = getelementptr float, ptr addrspace(3) %986, i32 %1011, !dbg !161
  %1013 = extractelement <4 x i32> %.v15, i64 1, !dbg !161
  %1014 = select i1 %676, i32 %480, i32 %1013, !dbg !162
  %1015 = insertelement <1 x i32> poison, i32 %1014, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1012, <1 x i32> %1015, i1 true) #2, !dbg !161
  %1016 = or disjoint i32 %984, 6, !dbg !161
  %1017 = getelementptr float, ptr addrspace(3) %986, i32 %1016, !dbg !161
  %1018 = extractelement <4 x i32> %.v15, i64 2, !dbg !161
  %1019 = select i1 %678, i32 %481, i32 %1018, !dbg !162
  %1020 = insertelement <1 x i32> poison, i32 %1019, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1017, <1 x i32> %1020, i1 true) #2, !dbg !161
  %1021 = or disjoint i32 %984, 7, !dbg !161
  %1022 = getelementptr float, ptr addrspace(3) %986, i32 %1021, !dbg !161
  %1023 = extractelement <4 x i32> %.v15, i64 3, !dbg !161
  %1024 = select i1 %680, i32 %482, i32 %1023, !dbg !162
  %1025 = insertelement <1 x i32> poison, i32 %1024, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1022, <1 x i32> %1025, i1 true) #2, !dbg !161
  %1026 = or disjoint i32 %984, 8, !dbg !161
  %1027 = getelementptr float, ptr addrspace(3) %986, i32 %1026, !dbg !161
  %1028 = extractelement <4 x i32> %.v22, i64 0, !dbg !161
  %1029 = select i1 %772, i32 %484, i32 %1028, !dbg !162
  %1030 = insertelement <1 x i32> poison, i32 %1029, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1027, <1 x i32> %1030, i1 true) #2, !dbg !161
  %1031 = or disjoint i32 %984, 9, !dbg !161
  %1032 = getelementptr float, ptr addrspace(3) %986, i32 %1031, !dbg !161
  %1033 = extractelement <4 x i32> %.v22, i64 1, !dbg !161
  %1034 = select i1 %774, i32 %485, i32 %1033, !dbg !162
  %1035 = insertelement <1 x i32> poison, i32 %1034, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1032, <1 x i32> %1035, i1 true) #2, !dbg !161
  %1036 = or disjoint i32 %984, 10, !dbg !161
  %1037 = getelementptr float, ptr addrspace(3) %986, i32 %1036, !dbg !161
  %1038 = extractelement <4 x i32> %.v22, i64 2, !dbg !161
  %1039 = select i1 %776, i32 %486, i32 %1038, !dbg !162
  %1040 = insertelement <1 x i32> poison, i32 %1039, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1037, <1 x i32> %1040, i1 true) #2, !dbg !161
  %1041 = or disjoint i32 %984, 11, !dbg !161
  %1042 = getelementptr float, ptr addrspace(3) %986, i32 %1041, !dbg !161
  %1043 = extractelement <4 x i32> %.v22, i64 3, !dbg !161
  %1044 = select i1 %778, i32 %487, i32 %1043, !dbg !162
  %1045 = insertelement <1 x i32> poison, i32 %1044, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1042, <1 x i32> %1045, i1 true) #2, !dbg !161
  %1046 = or disjoint i32 %984, 12, !dbg !161
  %1047 = getelementptr float, ptr addrspace(3) %986, i32 %1046, !dbg !161
  %1048 = extractelement <4 x i32> %.v29, i64 0, !dbg !161
  %1049 = select i1 %870, i32 %489, i32 %1048, !dbg !162
  %1050 = insertelement <1 x i32> poison, i32 %1049, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1047, <1 x i32> %1050, i1 true) #2, !dbg !161
  %1051 = or disjoint i32 %984, 13, !dbg !161
  %1052 = getelementptr float, ptr addrspace(3) %986, i32 %1051, !dbg !161
  %1053 = extractelement <4 x i32> %.v29, i64 1, !dbg !161
  %1054 = select i1 %872, i32 %490, i32 %1053, !dbg !162
  %1055 = insertelement <1 x i32> poison, i32 %1054, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1052, <1 x i32> %1055, i1 true) #2, !dbg !161
  %1056 = or disjoint i32 %984, 14, !dbg !161
  %1057 = getelementptr float, ptr addrspace(3) %986, i32 %1056, !dbg !161
  %1058 = extractelement <4 x i32> %.v29, i64 2, !dbg !161
  %1059 = select i1 %874, i32 %491, i32 %1058, !dbg !162
  %1060 = insertelement <1 x i32> poison, i32 %1059, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1057, <1 x i32> %1060, i1 true) #2, !dbg !161
  %1061 = or disjoint i32 %984, 15, !dbg !161
  %1062 = getelementptr float, ptr addrspace(3) %986, i32 %1061, !dbg !161
  %1063 = extractelement <4 x i32> %.v29, i64 3, !dbg !161
  %1064 = select i1 %876, i32 %492, i32 %1063, !dbg !162
  %1065 = insertelement <1 x i32> poison, i32 %1064, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1062, <1 x i32> %1065, i1 true) #2, !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !161
  %1066 = lshr i32 %10, 4, !dbg !161
  %1067 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1066, !dbg !161
  %1068 = getelementptr inbounds float, ptr addrspace(3) %1067, i32 %10, !dbg !161
  %1069 = load i32, ptr addrspace(3) %1068, align 4, !dbg !161
  %1070 = or disjoint i32 %10, 256, !dbg !161
  %1071 = lshr i32 %1070, 4, !dbg !161
  %1072 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1071, !dbg !161
  %1073 = getelementptr inbounds float, ptr addrspace(3) %1072, i32 %1070, !dbg !161
  %1074 = load i32, ptr addrspace(3) %1073, align 4, !dbg !161
  %1075 = or disjoint i32 %10, 512, !dbg !161
  %1076 = lshr i32 %1075, 4, !dbg !161
  %1077 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1076, !dbg !161
  %1078 = getelementptr inbounds float, ptr addrspace(3) %1077, i32 %1075, !dbg !161
  %1079 = load i32, ptr addrspace(3) %1078, align 4, !dbg !161
  %1080 = or disjoint i32 %10, 768, !dbg !161
  %1081 = lshr i32 %1080, 4, !dbg !161
  %1082 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1081, !dbg !161
  %1083 = getelementptr inbounds float, ptr addrspace(3) %1082, i32 %1080, !dbg !161
  %1084 = load i32, ptr addrspace(3) %1083, align 4, !dbg !161
  %1085 = or disjoint i32 %10, 1024, !dbg !161
  %1086 = lshr i32 %1085, 4, !dbg !161
  %1087 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1086, !dbg !161
  %1088 = getelementptr inbounds float, ptr addrspace(3) %1087, i32 %1085, !dbg !161
  %1089 = load i32, ptr addrspace(3) %1088, align 4, !dbg !161
  %1090 = or disjoint i32 %10, 1280, !dbg !161
  %1091 = lshr i32 %1090, 4, !dbg !161
  %1092 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1091, !dbg !161
  %1093 = getelementptr inbounds float, ptr addrspace(3) %1092, i32 %1090, !dbg !161
  %1094 = load i32, ptr addrspace(3) %1093, align 4, !dbg !161
  %1095 = or disjoint i32 %10, 1536, !dbg !161
  %1096 = lshr i32 %1095, 4, !dbg !161
  %1097 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1096, !dbg !161
  %1098 = getelementptr inbounds float, ptr addrspace(3) %1097, i32 %1095, !dbg !161
  %1099 = load i32, ptr addrspace(3) %1098, align 4, !dbg !161
  %1100 = or disjoint i32 %10, 1792, !dbg !161
  %1101 = lshr i32 %1100, 4, !dbg !161
  %1102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1101, !dbg !161
  %1103 = getelementptr inbounds float, ptr addrspace(3) %1102, i32 %1100, !dbg !161
  %1104 = load i32, ptr addrspace(3) %1103, align 4, !dbg !161
  %1105 = or disjoint i32 %10, 2048, !dbg !161
  %1106 = lshr i32 %1105, 4, !dbg !161
  %1107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1106, !dbg !161
  %1108 = getelementptr inbounds float, ptr addrspace(3) %1107, i32 %1105, !dbg !161
  %1109 = load i32, ptr addrspace(3) %1108, align 4, !dbg !161
  %1110 = or disjoint i32 %10, 2304, !dbg !161
  %1111 = lshr i32 %1110, 4, !dbg !161
  %1112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1111, !dbg !161
  %1113 = getelementptr inbounds float, ptr addrspace(3) %1112, i32 %1110, !dbg !161
  %1114 = load i32, ptr addrspace(3) %1113, align 4, !dbg !161
  %1115 = or disjoint i32 %10, 2560, !dbg !161
  %1116 = lshr i32 %1115, 4, !dbg !161
  %1117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1116, !dbg !161
  %1118 = getelementptr inbounds float, ptr addrspace(3) %1117, i32 %1115, !dbg !161
  %1119 = load i32, ptr addrspace(3) %1118, align 4, !dbg !161
  %1120 = or disjoint i32 %10, 2816, !dbg !161
  %1121 = lshr i32 %1120, 4, !dbg !161
  %1122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1121, !dbg !161
  %1123 = getelementptr inbounds float, ptr addrspace(3) %1122, i32 %1120, !dbg !161
  %1124 = load i32, ptr addrspace(3) %1123, align 4, !dbg !161
  %1125 = or disjoint i32 %10, 3072, !dbg !161
  %1126 = lshr i32 %1125, 4, !dbg !161
  %1127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1126, !dbg !161
  %1128 = getelementptr inbounds float, ptr addrspace(3) %1127, i32 %1125, !dbg !161
  %1129 = load i32, ptr addrspace(3) %1128, align 4, !dbg !161
  %1130 = or disjoint i32 %10, 3328, !dbg !161
  %1131 = lshr i32 %1130, 4, !dbg !161
  %1132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1131, !dbg !161
  %1133 = getelementptr inbounds float, ptr addrspace(3) %1132, i32 %1130, !dbg !161
  %1134 = load i32, ptr addrspace(3) %1133, align 4, !dbg !161
  %1135 = or disjoint i32 %10, 3584, !dbg !161
  %1136 = lshr i32 %1135, 4, !dbg !161
  %1137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1136, !dbg !161
  %1138 = getelementptr inbounds float, ptr addrspace(3) %1137, i32 %1135, !dbg !161
  %1139 = load i32, ptr addrspace(3) %1138, align 4, !dbg !161
  %1140 = or disjoint i32 %10, 3840, !dbg !161
  %1141 = lshr i32 %1140, 4, !dbg !161
  %1142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1141, !dbg !161
  %1143 = getelementptr inbounds float, ptr addrspace(3) %1142, i32 %1140, !dbg !161
  %1144 = load i32, ptr addrspace(3) %1143, align 4, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1069, ptr addrspace(1) %935, i1 %966) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1074, ptr addrspace(1) %937, i1 %967) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1079, ptr addrspace(1) %939, i1 %968) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1084, ptr addrspace(1) %941, i1 %969) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1089, ptr addrspace(1) %943, i1 %970) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1094, ptr addrspace(1) %945, i1 %971) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1099, ptr addrspace(1) %947, i1 %972) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1104, ptr addrspace(1) %949, i1 %973) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1109, ptr addrspace(1) %951, i1 %974) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1114, ptr addrspace(1) %953, i1 %975) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1119, ptr addrspace(1) %955, i1 %976) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1124, ptr addrspace(1) %957, i1 %977) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1129, ptr addrspace(1) %959, i1 %978) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1134, ptr addrspace(1) %961, i1 %979) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1139, ptr addrspace(1) %963, i1 %980) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1144, ptr addrspace(1) %965, i1 %981) #2, !dbg !161
  %1145 = shl i32 %13, 8, !dbg !163
  %1146 = add i32 %1145, %48, !dbg !164
  %1147 = sext i32 %1146 to i64, !dbg !165
  %1148 = getelementptr i8, ptr addrspace(1) %2, i64 %1147, !dbg !165
  %1149 = bitcast <4 x i8> %590 to i32, !dbg !166
  %1150 = bitcast <4 x i8> %688 to i32, !dbg !166
  %1151 = bitcast <4 x i8> %786 to i32, !dbg !166
  %1152 = bitcast <4 x i8> %884 to i32, !dbg !166
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1149, i32 %1150, i32 %1151, i32 %1152, ptr addrspace(1) %1148, i1 %982) #2, !dbg !166
  ret void, !dbg !167
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chvcla2zmede5mb4omznrcq5e6yiy7c2kjevpimbpf2dhhpgvtyc.py", directory: "inductor_cache/hv")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 45, column: 73, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 67, column: 20, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 40, column: 20, scope: !7)
!27 = !DILocation(line: 41, column: 19, scope: !7)
!28 = !DILocation(line: 44, column: 19, scope: !7)
!29 = !DILocation(line: 45, column: 50, scope: !7)
!30 = !DILocation(line: 45, column: 61, scope: !7)
!31 = !DILocation(line: 45, column: 41, scope: !7)
!32 = !DILocation(line: 45, column: 46, scope: !7)
!33 = !DILocation(line: 45, column: 55, scope: !7)
!34 = !DILocation(line: 45, column: 66, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 86, scope: !7)
!37 = !DILocation(line: 45, column: 94, scope: !7)
!38 = !DILocation(line: 45, column: 78, scope: !7)
!39 = !DILocation(line: 47, column: 21, scope: !7)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 51, column: 46, scope: !7)
!42 = !DILocation(line: 51, column: 55, scope: !7)
!43 = !DILocation(line: 51, column: 66, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 86, scope: !7)
!46 = !DILocation(line: 51, column: 94, scope: !7)
!47 = !DILocation(line: 51, column: 78, scope: !7)
!48 = !DILocation(line: 53, column: 16, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 83, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 19, scope: !7)
!53 = !DILocation(line: 58, column: 46, scope: !7)
!54 = !DILocation(line: 58, column: 55, scope: !7)
!55 = !DILocation(line: 58, column: 66, scope: !7)
!56 = !DILocation(line: 58, column: 31, scope: !7)
!57 = !DILocation(line: 58, column: 86, scope: !7)
!58 = !DILocation(line: 58, column: 94, scope: !7)
!59 = !DILocation(line: 58, column: 78, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 45, scope: !7)
!62 = !DILocation(line: 65, column: 54, scope: !7)
!63 = !DILocation(line: 65, column: 65, scope: !7)
!64 = !DILocation(line: 65, column: 31, scope: !7)
!65 = !DILocation(line: 65, column: 85, scope: !7)
!66 = !DILocation(line: 65, column: 93, scope: !7)
!67 = !DILocation(line: 65, column: 77, scope: !7)
!68 = !DILocation(line: 68, column: 45, scope: !7)
!69 = !DILocation(line: 68, column: 56, scope: !7)
!70 = !DILocation(line: 68, column: 36, scope: !7)
!71 = !DILocation(line: 68, column: 31, scope: !7)
!72 = !DILocation(line: 68, column: 76, scope: !7)
!73 = !DILocation(line: 68, column: 84, scope: !7)
!74 = !DILocation(line: 68, column: 68, scope: !7)
!75 = !DILocation(line: 70, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 42, scope: !7)
!77 = !DILocation(line: 71, column: 51, scope: !7)
!78 = !DILocation(line: 71, column: 62, scope: !7)
!79 = !DILocation(line: 71, column: 31, scope: !7)
!80 = !DILocation(line: 71, column: 82, scope: !7)
!81 = !DILocation(line: 71, column: 90, scope: !7)
!82 = !DILocation(line: 71, column: 74, scope: !7)
!83 = !DILocation(line: 77, column: 20, scope: !7)
!84 = !DILocation(line: 78, column: 43, scope: !7)
!85 = !DILocation(line: 78, column: 52, scope: !7)
!86 = !DILocation(line: 78, column: 63, scope: !7)
!87 = !DILocation(line: 78, column: 31, scope: !7)
!88 = !DILocation(line: 78, column: 83, scope: !7)
!89 = !DILocation(line: 78, column: 91, scope: !7)
!90 = !DILocation(line: 78, column: 75, scope: !7)
!91 = !DILocation(line: 80, column: 20, scope: !7)
!92 = !DILocation(line: 81, column: 43, scope: !7)
!93 = !DILocation(line: 81, column: 52, scope: !7)
!94 = !DILocation(line: 81, column: 63, scope: !7)
!95 = !DILocation(line: 81, column: 31, scope: !7)
!96 = !DILocation(line: 81, column: 83, scope: !7)
!97 = !DILocation(line: 81, column: 91, scope: !7)
!98 = !DILocation(line: 81, column: 75, scope: !7)
!99 = !DILocation(line: 84, column: 43, scope: !7)
!100 = !DILocation(line: 84, column: 52, scope: !7)
!101 = !DILocation(line: 84, column: 63, scope: !7)
!102 = !DILocation(line: 84, column: 31, scope: !7)
!103 = !DILocation(line: 84, column: 83, scope: !7)
!104 = !DILocation(line: 84, column: 91, scope: !7)
!105 = !DILocation(line: 84, column: 75, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 52, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !114)
!114 = !DILocation(line: 59, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !119)
!119 = !DILocation(line: 66, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !119)
!123 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !124)
!124 = !DILocation(line: 69, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !124)
!128 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !129)
!129 = !DILocation(line: 72, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !129)
!133 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !134)
!134 = !DILocation(line: 79, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !134)
!138 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !139)
!139 = !DILocation(line: 82, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !139)
!143 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !144)
!144 = !DILocation(line: 85, column: 42, scope: !7)
!145 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !144)
!146 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !144)
!147 = !DILocation(line: 89, column: 35, scope: !7)
!148 = !DILocation(line: 92, column: 35, scope: !7)
!149 = !DILocation(line: 95, column: 35, scope: !7)
!150 = !DILocation(line: 98, column: 35, scope: !7)
!151 = !DILocation(line: 101, column: 35, scope: !7)
!152 = !DILocation(line: 104, column: 35, scope: !7)
!153 = !DILocation(line: 107, column: 35, scope: !7)
!154 = !DILocation(line: 110, column: 35, scope: !7)
!155 = !DILocation(line: 111, column: 34, scope: !7)
!156 = !DILocation(line: 111, column: 30, scope: !7)
!157 = !DILocation(line: 111, column: 46, scope: !7)
!158 = !DILocation(line: 111, column: 39, scope: !7)
!159 = !DILocation(line: 111, column: 25, scope: !7)
!160 = !DILocation(line: 111, column: 66, scope: !7)
!161 = !DILocation(line: 111, column: 58, scope: !7)
!162 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !144)
!163 = !DILocation(line: 112, column: 34, scope: !7)
!164 = !DILocation(line: 112, column: 30, scope: !7)
!165 = !DILocation(line: 112, column: 25, scope: !7)
!166 = !DILocation(line: 112, column: 46, scope: !7)
!167 = !DILocation(line: 112, column: 4, scope: !7)
