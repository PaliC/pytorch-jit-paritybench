; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %17 = sdiv i32 %.frozen, 128, !dbg !14
  %18 = mul i32 %17, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %14, 128, !dbg !15
  %20 = srem i32 %17, 32, !dbg !16
  %21 = sdiv i32 %13, 4096, !dbg !17
  %22 = shl nsw i32 %20, 8, !dbg !18
  %23 = shl i32 %21, 14, !dbg !19
  %24 = add i32 %22, %23, !dbg !20
  %25 = add i32 %24, %.decomposed, !dbg !21
  %26 = add i32 %24, %19, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #2, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = or disjoint i32 %24, 128, !dbg !24
  %42 = add nsw i32 %41, %.decomposed, !dbg !25
  %43 = add nsw i32 %41, %19, !dbg !25
  %44 = sext i32 %42 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %43 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %58 = add i32 %24, 8192, !dbg !28
  %59 = add i32 %58, %.decomposed, !dbg !29
  %60 = add i32 %58, %19, !dbg !29
  %61 = sext i32 %59 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !30
  %63 = sext i32 %60 to i64, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !31
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !31
  %75 = add i32 %24, 8320, !dbg !32
  %76 = add nsw i32 %75, %.decomposed, !dbg !33
  %77 = add nsw i32 %75, %19, !dbg !33
  %78 = sext i32 %76 to i64, !dbg !34
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !34
  %80 = sext i32 %77 to i64, !dbg !34
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !34
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #2, !dbg !35
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !35
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !35
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !35
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !35
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !35
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !35
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !35
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !35
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !35
  %92 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !23
  %93 = insertelement <4 x i32> %92, i32 %33, i64 1, !dbg !23
  %94 = insertelement <4 x i32> %93, i32 %34, i64 2, !dbg !23
  %95 = insertelement <4 x i32> %94, i32 %35, i64 3, !dbg !23
  %96 = bitcast <4 x i32> %95 to <4 x float>, !dbg !23
  %97 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !27
  %98 = insertelement <4 x i32> %97, i32 %50, i64 1, !dbg !27
  %99 = insertelement <4 x i32> %98, i32 %51, i64 2, !dbg !27
  %100 = insertelement <4 x i32> %99, i32 %52, i64 3, !dbg !27
  %101 = bitcast <4 x i32> %100 to <4 x float>, !dbg !27
  %102 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !31
  %103 = insertelement <4 x i32> %102, i32 %67, i64 1, !dbg !31
  %104 = insertelement <4 x i32> %103, i32 %68, i64 2, !dbg !31
  %105 = insertelement <4 x i32> %104, i32 %69, i64 3, !dbg !31
  %106 = bitcast <4 x i32> %105 to <4 x float>, !dbg !31
  %107 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !35
  %108 = insertelement <4 x i32> %107, i32 %84, i64 1, !dbg !35
  %109 = insertelement <4 x i32> %108, i32 %85, i64 2, !dbg !35
  %110 = insertelement <4 x i32> %109, i32 %86, i64 3, !dbg !35
  %111 = bitcast <4 x i32> %110 to <4 x float>, !dbg !35
  %112 = fcmp ogt <4 x float> %101, %96, !dbg !36
  %113 = fcmp uno <4 x float> %101, zeroinitializer, !dbg !40
  %114 = or <4 x i1> %112, %113, !dbg !41
  %.v = select <4 x i1> %114, <4 x i32> %100, <4 x i32> %95, !dbg !42
  %115 = bitcast <4 x i32> %.v to <4 x float>, !dbg !42
  %116 = fcmp olt <4 x float> %115, %106, !dbg !43
  %117 = fcmp uno <4 x float> %106, zeroinitializer, !dbg !45
  %118 = or <4 x i1> %117, %116, !dbg !46
  %.v15 = select <4 x i1> %118, <4 x i32> %105, <4 x i32> %.v, !dbg !47
  %119 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !47
  %120 = fcmp olt <4 x float> %119, %111, !dbg !48
  %121 = extractelement <4 x i1> %120, i64 0, !dbg !50
  %122 = extractelement <4 x i1> %120, i64 1, !dbg !50
  %123 = extractelement <4 x i1> %120, i64 2, !dbg !50
  %124 = extractelement <4 x i1> %120, i64 3, !dbg !50
  %125 = zext <4 x i1> %112 to <4 x i8>, !dbg !51
  %126 = select <4 x i1> %116, <4 x i8> splat (i8 2), <4 x i8> %125, !dbg !52
  %127 = select <4 x i1> %120, <4 x i8> splat (i8 3), <4 x i8> %126, !dbg !53
  %128 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !23
  %129 = insertelement <4 x i32> %128, i32 %38, i64 1, !dbg !23
  %130 = insertelement <4 x i32> %129, i32 %39, i64 2, !dbg !23
  %131 = insertelement <4 x i32> %130, i32 %40, i64 3, !dbg !23
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !23
  %133 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !27
  %134 = insertelement <4 x i32> %133, i32 %55, i64 1, !dbg !27
  %135 = insertelement <4 x i32> %134, i32 %56, i64 2, !dbg !27
  %136 = insertelement <4 x i32> %135, i32 %57, i64 3, !dbg !27
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !27
  %138 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !31
  %139 = insertelement <4 x i32> %138, i32 %72, i64 1, !dbg !31
  %140 = insertelement <4 x i32> %139, i32 %73, i64 2, !dbg !31
  %141 = insertelement <4 x i32> %140, i32 %74, i64 3, !dbg !31
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !31
  %143 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !35
  %144 = insertelement <4 x i32> %143, i32 %89, i64 1, !dbg !35
  %145 = insertelement <4 x i32> %144, i32 %90, i64 2, !dbg !35
  %146 = insertelement <4 x i32> %145, i32 %91, i64 3, !dbg !35
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !35
  %148 = fcmp ogt <4 x float> %137, %132, !dbg !36
  %149 = fcmp uno <4 x float> %137, zeroinitializer, !dbg !40
  %150 = or <4 x i1> %148, %149, !dbg !41
  %.v16 = select <4 x i1> %150, <4 x i32> %136, <4 x i32> %131, !dbg !42
  %151 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !42
  %152 = fcmp olt <4 x float> %151, %142, !dbg !43
  %153 = fcmp uno <4 x float> %142, zeroinitializer, !dbg !45
  %154 = or <4 x i1> %153, %152, !dbg !46
  %.v17 = select <4 x i1> %154, <4 x i32> %141, <4 x i32> %.v16, !dbg !47
  %155 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !47
  %156 = fcmp olt <4 x float> %155, %147, !dbg !48
  %157 = shufflevector <4 x float> %147, <4 x float> %111, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !54
  %158 = fcmp uno <8 x float> %157, zeroinitializer, !dbg !54
  %159 = extractelement <8 x i1> %158, i64 7, !dbg !50
  %160 = or i1 %159, %121, !dbg !50
  %161 = extractelement <8 x i1> %158, i64 6, !dbg !50
  %162 = or i1 %161, %122, !dbg !50
  %163 = extractelement <8 x i1> %158, i64 5, !dbg !50
  %164 = or i1 %163, %123, !dbg !50
  %165 = extractelement <8 x i1> %158, i64 4, !dbg !50
  %166 = or i1 %165, %124, !dbg !50
  %167 = extractelement <4 x i1> %156, i64 0, !dbg !50
  %168 = extractelement <8 x i1> %158, i64 3, !dbg !50
  %169 = or i1 %168, %167, !dbg !50
  %170 = extractelement <4 x i1> %156, i64 1, !dbg !50
  %171 = extractelement <8 x i1> %158, i64 2, !dbg !50
  %172 = or i1 %171, %170, !dbg !50
  %173 = extractelement <4 x i1> %156, i64 2, !dbg !50
  %174 = extractelement <8 x i1> %158, i64 1, !dbg !50
  %175 = or i1 %174, %173, !dbg !50
  %176 = extractelement <4 x i1> %156, i64 3, !dbg !50
  %177 = extractelement <8 x i1> %158, i64 0, !dbg !50
  %178 = or i1 %177, %176, !dbg !50
  %179 = zext <4 x i1> %148 to <4 x i8>, !dbg !51
  %180 = select <4 x i1> %152, <4 x i8> splat (i8 2), <4 x i8> %179, !dbg !52
  %181 = select <4 x i1> %156, <4 x i8> splat (i8 3), <4 x i8> %180, !dbg !53
  %182 = sext i32 %15 to i64, !dbg !55
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !55
  %184 = sext i32 %16 to i64, !dbg !55
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !55
  %186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !56
  %187 = extractelement <4 x i32> %.v15, i64 0, !dbg !56
  %188 = select i1 %160, i32 %83, i32 %187, !dbg !57
  %189 = extractelement <4 x i32> %.v15, i64 1, !dbg !56
  %190 = select i1 %162, i32 %84, i32 %189, !dbg !57
  %191 = extractelement <4 x i32> %.v15, i64 2, !dbg !56
  %192 = select i1 %164, i32 %85, i32 %191, !dbg !57
  %193 = extractelement <4 x i32> %.v15, i64 3, !dbg !56
  %194 = select i1 %166, i32 %86, i32 %193, !dbg !57
  %195 = extractelement <4 x i32> %.v17, i64 0, !dbg !56
  %196 = select i1 %169, i32 %88, i32 %195, !dbg !57
  %197 = extractelement <4 x i32> %.v17, i64 1, !dbg !56
  %198 = select i1 %172, i32 %89, i32 %197, !dbg !57
  %199 = extractelement <4 x i32> %.v17, i64 2, !dbg !56
  %200 = select i1 %175, i32 %90, i32 %199, !dbg !57
  %201 = extractelement <4 x i32> %.v17, i64 3, !dbg !56
  %202 = select i1 %178, i32 %91, i32 %201, !dbg !57
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %186, i32 %188, i32 %190, i32 %192, i32 %194, i1 true) #2, !dbg !56
  %203 = getelementptr inbounds i8, ptr addrspace(3) %186, i32 16, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %203, i32 %196, i32 %198, i32 %200, i32 %202, i1 true) #2, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !56
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !56
  %206 = load <4 x i32>, ptr addrspace(3) %205, align 16, !dbg !56
  %.extract = load i32, ptr addrspace(3) %204, align 16, !dbg !56
  %207 = getelementptr inbounds i8, ptr addrspace(3) %204, i32 4, !dbg !56
  %.extract8 = load i32, ptr addrspace(3) %207, align 4, !dbg !56
  %208 = getelementptr inbounds i8, ptr addrspace(3) %204, i32 8, !dbg !56
  %.extract9 = load i32, ptr addrspace(3) %208, align 8, !dbg !56
  %209 = getelementptr inbounds i8, ptr addrspace(3) %204, i32 12, !dbg !56
  %.extract10 = load i32, ptr addrspace(3) %209, align 4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %183, i1 true) #2, !dbg !56
  %.extract11 = extractelement <4 x i32> %206, i64 0, !dbg !56
  %.extract12 = extractelement <4 x i32> %206, i64 1, !dbg !56
  %.extract13 = extractelement <4 x i32> %206, i64 2, !dbg !56
  %.extract14 = extractelement <4 x i32> %206, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %185, i1 true) #2, !dbg !56
  %210 = sext i32 %13 to i64, !dbg !58
  %211 = getelementptr i8, ptr addrspace(1) %2, i64 %210, !dbg !58
  %212 = bitcast <4 x i8> %127 to i32, !dbg !59
  %213 = bitcast <4 x i8> %181 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %212, i32 %213, ptr addrspace(1) %211, i1 true) #2, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3eg5fgld3l4ueya7efp4n7vug6mocwl5vkszktzekixiwl2nou6.py", directory: "inductor_cache/3e")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_9", linkageName: "triton_poi_fused_max_pool2d_with_indices_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 50, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 61, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 62, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 62, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 32, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !44)
!44 = !DILocation(line: 33, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !49)
!49 = !DILocation(line: 34, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !49)
!51 = !DILocation(line: 38, column: 33, scope: !7)
!52 = !DILocation(line: 41, column: 35, scope: !7)
!53 = !DILocation(line: 44, column: 35, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !49)
!55 = !DILocation(line: 45, column: 25, scope: !7)
!56 = !DILocation(line: 45, column: 36, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !49)
!58 = !DILocation(line: 46, column: 25, scope: !7)
!59 = !DILocation(line: 46, column: 37, scope: !7)
!60 = !DILocation(line: 46, column: 4, scope: !7)
