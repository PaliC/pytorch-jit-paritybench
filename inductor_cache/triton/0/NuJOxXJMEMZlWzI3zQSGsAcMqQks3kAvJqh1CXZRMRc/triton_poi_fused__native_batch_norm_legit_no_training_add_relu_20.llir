; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = srem i32 %18, 1024, !dbg !14
  %21 = srem i32 %19, 1024, !dbg !14
  %22 = sext i32 %18 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !15
  %24 = sext i32 %19 to i64, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !15
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !16
  %28 = sext i32 %20 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !17
  %30 = sext i32 %21 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !20
  %50 = bitcast i32 %46 to float, !dbg !20
  %51 = bitcast i32 %47 to float, !dbg !20
  %52 = bitcast i32 %48 to float, !dbg !20
  %53 = bitcast i32 %49 to float, !dbg !20
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !21
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !22
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !23
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !27
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !28
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !28
  %70 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !29
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !30
  %77 = bitcast i32 %73 to float, !dbg !30
  %78 = bitcast i32 %74 to float, !dbg !30
  %79 = bitcast i32 %75 to float, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !30
  %86 = bitcast i32 %82 to float, !dbg !30
  %87 = bitcast i32 %83 to float, !dbg !30
  %88 = bitcast i32 %84 to float, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !31
  %91 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !31
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !32
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !32
  %94 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !33
  %95 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !33
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !34
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !34
  %98 = fadd float %41, 0x3EE4F8B580000000, !dbg !35
  %99 = fadd float %42, 0x3EE4F8B580000000, !dbg !35
  %100 = fadd float %43, 0x3EE4F8B580000000, !dbg !35
  %101 = fadd float %44, 0x3EE4F8B580000000, !dbg !35
  %102 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %103 = fadd float %51, 0x3EE4F8B580000000, !dbg !35
  %104 = fadd float %52, 0x3EE4F8B580000000, !dbg !35
  %105 = fadd float %53, 0x3EE4F8B580000000, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %106, 0, !dbg !36
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %107, 0, !dbg !36
  br i1 %.not.i, label %113, label %108, !dbg !36

108:                                              ; preds = %12
  br i1 %.not1.i, label %111, label %109, !dbg !36

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

113:                                              ; preds = %12
  br i1 %.not1.i, label %116, label %114, !dbg !36

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %109, %111, %114, %116
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !36
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %118, 0, !dbg !36
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %119, 0, !dbg !36
  br i1 %.not.i1, label %125, label %120, !dbg !36

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %123, label %121, !dbg !36

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

125:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %128, label %126, !dbg !36

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %121, %123, %126, %128
  %.0.i3 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !36
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %130, 0, !dbg !36
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %131, 0, !dbg !36
  br i1 %.not.i6, label %137, label %132, !dbg !36

132:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %135, label %133, !dbg !36

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

137:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %140, label %138, !dbg !36

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %133, %135, %138, %140
  %.0.i8 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !36
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %142, 0, !dbg !36
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %143, 0, !dbg !36
  br i1 %.not.i11, label %149, label %144, !dbg !36

144:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %147, label %145, !dbg !36

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

149:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %152, label %150, !dbg !36

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %145, %147, %150, %152
  %.0.i13 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !36
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i16 = icmp eq i32 %154, 0, !dbg !36
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i19 = icmp eq i32 %155, 0, !dbg !36
  br i1 %.not.i16, label %161, label %156, !dbg !36

156:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %159, label %157, !dbg !36

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

161:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %164, label %162, !dbg !36

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %157, %159, %162, %164
  %.0.i18 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !36
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i21 = icmp eq i32 %166, 0, !dbg !36
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i24 = icmp eq i32 %167, 0, !dbg !36
  br i1 %.not.i21, label %173, label %168, !dbg !36

168:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %171, label %169, !dbg !36

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

173:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %176, label %174, !dbg !36

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

__nv_sqrtf.exit25:                                ; preds = %169, %171, %174, %176
  %.0.i23 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !36
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i26 = icmp eq i32 %178, 0, !dbg !36
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i29 = icmp eq i32 %179, 0, !dbg !36
  br i1 %.not.i26, label %185, label %180, !dbg !36

180:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %183, label %181, !dbg !36

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

185:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %188, label %186, !dbg !36

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

__nv_sqrtf.exit30:                                ; preds = %181, %183, %186, %188
  %.0.i28 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !36
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i31 = icmp eq i32 %190, 0, !dbg !36
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i34 = icmp eq i32 %191, 0, !dbg !36
  br i1 %.not.i31, label %197, label %192, !dbg !36

192:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %195, label %193, !dbg !36

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

197:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %200, label %198, !dbg !36

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

__nv_sqrtf.exit35:                                ; preds = %193, %195, %198, %200
  %.0.i33 = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !36
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %210 = fadd float %77, 0x3EE4F8B580000000, !dbg !38
  %211 = fadd float %78, 0x3EE4F8B580000000, !dbg !38
  %212 = fadd float %79, 0x3EE4F8B580000000, !dbg !38
  %213 = fadd float %80, 0x3EE4F8B580000000, !dbg !38
  %214 = fadd float %86, 0x3EE4F8B580000000, !dbg !38
  %215 = fadd float %87, 0x3EE4F8B580000000, !dbg !38
  %216 = fadd float %88, 0x3EE4F8B580000000, !dbg !38
  %217 = fadd float %89, 0x3EE4F8B580000000, !dbg !38
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i36 = icmp eq i32 %218, 0, !dbg !39
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i39 = icmp eq i32 %219, 0, !dbg !39
  br i1 %.not.i36, label %225, label %220, !dbg !39

220:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %223, label %221, !dbg !39

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %210) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %210) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

225:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %228, label %226, !dbg !39

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.f(float %210) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.f(float %210) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

__nv_sqrtf.exit40:                                ; preds = %221, %223, %226, %228
  %.0.i38 = phi float [ %222, %221 ], [ %224, %223 ], [ %227, %226 ], [ %229, %228 ], !dbg !39
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i41 = icmp eq i32 %230, 0, !dbg !39
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i44 = icmp eq i32 %231, 0, !dbg !39
  br i1 %.not.i41, label %237, label %232, !dbg !39

232:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %235, label %233, !dbg !39

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

237:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %240, label %238, !dbg !39

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

__nv_sqrtf.exit45:                                ; preds = %233, %235, %238, %240
  %.0.i43 = phi float [ %234, %233 ], [ %236, %235 ], [ %239, %238 ], [ %241, %240 ], !dbg !39
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i46 = icmp eq i32 %242, 0, !dbg !39
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i49 = icmp eq i32 %243, 0, !dbg !39
  br i1 %.not.i46, label %249, label %244, !dbg !39

244:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %247, label %245, !dbg !39

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %212) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %212) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

249:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %252, label %250, !dbg !39

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.f(float %212) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.f(float %212) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

__nv_sqrtf.exit50:                                ; preds = %245, %247, %250, %252
  %.0.i48 = phi float [ %246, %245 ], [ %248, %247 ], [ %251, %250 ], [ %253, %252 ], !dbg !39
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i51 = icmp eq i32 %254, 0, !dbg !39
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i54 = icmp eq i32 %255, 0, !dbg !39
  br i1 %.not.i51, label %261, label %256, !dbg !39

256:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %259, label %257, !dbg !39

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

261:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %264, label %262, !dbg !39

262:                                              ; preds = %261
  %263 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

264:                                              ; preds = %261
  %265 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

__nv_sqrtf.exit55:                                ; preds = %257, %259, %262, %264
  %.0.i53 = phi float [ %258, %257 ], [ %260, %259 ], [ %263, %262 ], [ %265, %264 ], !dbg !39
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i56 = icmp eq i32 %266, 0, !dbg !39
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i59 = icmp eq i32 %267, 0, !dbg !39
  br i1 %.not.i56, label %273, label %268, !dbg !39

268:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %271, label %269, !dbg !39

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %214) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %214) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

273:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %276, label %274, !dbg !39

274:                                              ; preds = %273
  %275 = tail call float @llvm.nvvm.sqrt.rn.f(float %214) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

276:                                              ; preds = %273
  %277 = tail call float @llvm.nvvm.sqrt.approx.f(float %214) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

__nv_sqrtf.exit60:                                ; preds = %269, %271, %274, %276
  %.0.i58 = phi float [ %270, %269 ], [ %272, %271 ], [ %275, %274 ], [ %277, %276 ], !dbg !39
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i61 = icmp eq i32 %278, 0, !dbg !39
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i64 = icmp eq i32 %279, 0, !dbg !39
  br i1 %.not.i61, label %285, label %280, !dbg !39

280:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %283, label %281, !dbg !39

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %215) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %215) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

285:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %288, label %286, !dbg !39

286:                                              ; preds = %285
  %287 = tail call float @llvm.nvvm.sqrt.rn.f(float %215) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

288:                                              ; preds = %285
  %289 = tail call float @llvm.nvvm.sqrt.approx.f(float %215) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

__nv_sqrtf.exit65:                                ; preds = %281, %283, %286, %288
  %.0.i63 = phi float [ %282, %281 ], [ %284, %283 ], [ %287, %286 ], [ %289, %288 ], !dbg !39
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i66 = icmp eq i32 %290, 0, !dbg !39
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i69 = icmp eq i32 %291, 0, !dbg !39
  br i1 %.not.i66, label %297, label %292, !dbg !39

292:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %295, label %293, !dbg !39

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %216) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %216) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

297:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %300, label %298, !dbg !39

298:                                              ; preds = %297
  %299 = tail call float @llvm.nvvm.sqrt.rn.f(float %216) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

300:                                              ; preds = %297
  %301 = tail call float @llvm.nvvm.sqrt.approx.f(float %216) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

__nv_sqrtf.exit70:                                ; preds = %293, %295, %298, %300
  %.0.i68 = phi float [ %294, %293 ], [ %296, %295 ], [ %299, %298 ], [ %301, %300 ], !dbg !39
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i71 = icmp eq i32 %302, 0, !dbg !39
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i74 = icmp eq i32 %303, 0, !dbg !39
  br i1 %.not.i71, label %309, label %304, !dbg !39

304:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %307, label %305, !dbg !39

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

309:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %312, label %310, !dbg !39

310:                                              ; preds = %309
  %311 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

312:                                              ; preds = %309
  %313 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

__nv_sqrtf.exit75:                                ; preds = %305, %307, %310, %312
  %.0.i73 = phi float [ %306, %305 ], [ %308, %307 ], [ %311, %310 ], [ %313, %312 ], !dbg !39
  %314 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %315 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !28
  %316 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %317 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !28
  %318 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %319 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !28
  %320 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %321 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !28
  %322 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %323 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %324 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %325 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %326 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %327 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %328 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %329 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %330 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %331 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %332 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !22
  %333 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %334 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %335 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %336 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !22
  %337 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %338 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %339 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %340 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !22
  %341 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %342 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %343 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %344 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !22
  %345 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %346 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %347 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %348 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !22
  %349 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %350 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %351 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %352 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !22
  %353 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %354 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %355 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %356 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !22
  %357 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %358 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %359 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %360 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !22
  %361 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %362 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !34
  %363 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !34
  %364 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !34
  %365 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !34
  %366 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !34
  %367 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !34
  %368 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !34
  %369 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !34
  %370 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !32
  %371 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !32
  %372 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !32
  %373 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !32
  %374 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !32
  %375 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !32
  %376 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !32
  %377 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !32
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !40
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !40
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !40
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !40
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !40
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !40
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !40
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !40
  %386 = insertelement <2 x i32> poison, i32 %358, i64 0, !dbg !16
  %387 = insertelement <2 x i32> %386, i32 %328, i64 1, !dbg !16
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !16
  %389 = insertelement <2 x i32> poison, i32 %359, i64 0, !dbg !18
  %390 = insertelement <2 x i32> %389, i32 %329, i64 1, !dbg !18
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !18
  %392 = fsub <2 x float> %388, %391, !dbg !41
  %393 = insertelement <2 x i32> poison, i32 %361, i64 0, !dbg !24
  %394 = insertelement <2 x i32> %393, i32 %369, i64 1, !dbg !24
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !24
  %396 = insertelement <2 x i32> poison, i32 %360, i64 0, !dbg !22
  %397 = insertelement <2 x i32> %396, i32 %377, i64 1, !dbg !22
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !22
  %399 = insertelement <2 x float> poison, float %202, i64 0, !dbg !42
  %400 = insertelement <2 x float> %399, float %378, i64 1, !dbg !42
  %401 = fmul <2 x float> %392, %400, !dbg !42
  %402 = fmul <2 x float> %401, %398, !dbg !43
  %403 = fadd <2 x float> %402, %395, !dbg !44
  %404 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !16
  %405 = insertelement <2 x i32> %404, i32 %326, i64 1, !dbg !16
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !16
  %407 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !18
  %408 = insertelement <2 x i32> %407, i32 %327, i64 1, !dbg !18
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !18
  %410 = fsub <2 x float> %406, %409, !dbg !41
  %411 = insertelement <2 x i32> poison, i32 %357, i64 0, !dbg !24
  %412 = insertelement <2 x i32> %411, i32 %368, i64 1, !dbg !24
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !24
  %414 = insertelement <2 x i32> poison, i32 %356, i64 0, !dbg !22
  %415 = insertelement <2 x i32> %414, i32 %376, i64 1, !dbg !22
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !22
  %417 = insertelement <2 x float> poison, float %203, i64 0, !dbg !42
  %418 = insertelement <2 x float> %417, float %379, i64 1, !dbg !42
  %419 = fmul <2 x float> %410, %418, !dbg !42
  %420 = fmul <2 x float> %419, %416, !dbg !43
  %421 = fadd <2 x float> %420, %413, !dbg !44
  %422 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !16
  %423 = insertelement <2 x i32> %422, i32 %324, i64 1, !dbg !16
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !16
  %425 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !18
  %426 = insertelement <2 x i32> %425, i32 %325, i64 1, !dbg !18
  %427 = bitcast <2 x i32> %426 to <2 x float>, !dbg !18
  %428 = fsub <2 x float> %424, %427, !dbg !41
  %429 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !24
  %430 = insertelement <2 x i32> %429, i32 %367, i64 1, !dbg !24
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !24
  %432 = insertelement <2 x i32> poison, i32 %352, i64 0, !dbg !22
  %433 = insertelement <2 x i32> %432, i32 %375, i64 1, !dbg !22
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !22
  %435 = insertelement <2 x float> poison, float %204, i64 0, !dbg !42
  %436 = insertelement <2 x float> %435, float %380, i64 1, !dbg !42
  %437 = fmul <2 x float> %428, %436, !dbg !42
  %438 = fmul <2 x float> %437, %434, !dbg !43
  %439 = fadd <2 x float> %438, %431, !dbg !44
  %440 = insertelement <2 x i32> poison, i32 %346, i64 0, !dbg !16
  %441 = insertelement <2 x i32> %440, i32 %322, i64 1, !dbg !16
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !16
  %443 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !18
  %444 = insertelement <2 x i32> %443, i32 %323, i64 1, !dbg !18
  %445 = bitcast <2 x i32> %444 to <2 x float>, !dbg !18
  %446 = fsub <2 x float> %442, %445, !dbg !41
  %447 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !24
  %448 = insertelement <2 x i32> %447, i32 %366, i64 1, !dbg !24
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !24
  %450 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !22
  %451 = insertelement <2 x i32> %450, i32 %374, i64 1, !dbg !22
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !22
  %453 = insertelement <2 x float> poison, float %205, i64 0, !dbg !42
  %454 = insertelement <2 x float> %453, float %381, i64 1, !dbg !42
  %455 = fmul <2 x float> %446, %454, !dbg !42
  %456 = fmul <2 x float> %455, %452, !dbg !43
  %457 = fadd <2 x float> %456, %449, !dbg !44
  %458 = insertelement <2 x i32> poison, i32 %342, i64 0, !dbg !16
  %459 = insertelement <2 x i32> %458, i32 %320, i64 1, !dbg !16
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !16
  %461 = insertelement <2 x i32> poison, i32 %343, i64 0, !dbg !18
  %462 = insertelement <2 x i32> %461, i32 %321, i64 1, !dbg !18
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !18
  %464 = fsub <2 x float> %460, %463, !dbg !41
  %465 = insertelement <2 x i32> poison, i32 %345, i64 0, !dbg !24
  %466 = insertelement <2 x i32> %465, i32 %365, i64 1, !dbg !24
  %467 = bitcast <2 x i32> %466 to <2 x float>, !dbg !24
  %468 = insertelement <2 x i32> poison, i32 %344, i64 0, !dbg !22
  %469 = insertelement <2 x i32> %468, i32 %373, i64 1, !dbg !22
  %470 = bitcast <2 x i32> %469 to <2 x float>, !dbg !22
  %471 = insertelement <2 x float> poison, float %206, i64 0, !dbg !42
  %472 = insertelement <2 x float> %471, float %382, i64 1, !dbg !42
  %473 = fmul <2 x float> %464, %472, !dbg !42
  %474 = fmul <2 x float> %473, %470, !dbg !43
  %475 = fadd <2 x float> %474, %467, !dbg !44
  %476 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !16
  %477 = insertelement <2 x i32> %476, i32 %318, i64 1, !dbg !16
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !16
  %479 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !18
  %480 = insertelement <2 x i32> %479, i32 %319, i64 1, !dbg !18
  %481 = bitcast <2 x i32> %480 to <2 x float>, !dbg !18
  %482 = fsub <2 x float> %478, %481, !dbg !41
  %483 = insertelement <2 x i32> poison, i32 %341, i64 0, !dbg !24
  %484 = insertelement <2 x i32> %483, i32 %364, i64 1, !dbg !24
  %485 = bitcast <2 x i32> %484 to <2 x float>, !dbg !24
  %486 = insertelement <2 x i32> poison, i32 %340, i64 0, !dbg !22
  %487 = insertelement <2 x i32> %486, i32 %372, i64 1, !dbg !22
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !22
  %489 = insertelement <2 x float> poison, float %207, i64 0, !dbg !42
  %490 = insertelement <2 x float> %489, float %383, i64 1, !dbg !42
  %491 = fmul <2 x float> %482, %490, !dbg !42
  %492 = fmul <2 x float> %491, %488, !dbg !43
  %493 = fadd <2 x float> %492, %485, !dbg !44
  %494 = insertelement <2 x i32> poison, i32 %334, i64 0, !dbg !16
  %495 = insertelement <2 x i32> %494, i32 %316, i64 1, !dbg !16
  %496 = bitcast <2 x i32> %495 to <2 x float>, !dbg !16
  %497 = insertelement <2 x i32> poison, i32 %335, i64 0, !dbg !18
  %498 = insertelement <2 x i32> %497, i32 %317, i64 1, !dbg !18
  %499 = bitcast <2 x i32> %498 to <2 x float>, !dbg !18
  %500 = fsub <2 x float> %496, %499, !dbg !41
  %501 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !24
  %502 = insertelement <2 x i32> %501, i32 %363, i64 1, !dbg !24
  %503 = bitcast <2 x i32> %502 to <2 x float>, !dbg !24
  %504 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !22
  %505 = insertelement <2 x i32> %504, i32 %371, i64 1, !dbg !22
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !22
  %507 = insertelement <2 x float> poison, float %208, i64 0, !dbg !42
  %508 = insertelement <2 x float> %507, float %384, i64 1, !dbg !42
  %509 = fmul <2 x float> %500, %508, !dbg !42
  %510 = fmul <2 x float> %509, %506, !dbg !43
  %511 = fadd <2 x float> %510, %503, !dbg !44
  %512 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !16
  %513 = insertelement <2 x i32> %512, i32 %314, i64 1, !dbg !16
  %514 = bitcast <2 x i32> %513 to <2 x float>, !dbg !16
  %515 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !18
  %516 = insertelement <2 x i32> %515, i32 %315, i64 1, !dbg !18
  %517 = bitcast <2 x i32> %516 to <2 x float>, !dbg !18
  %518 = fsub <2 x float> %514, %517, !dbg !41
  %519 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !24
  %520 = insertelement <2 x i32> %519, i32 %362, i64 1, !dbg !24
  %521 = bitcast <2 x i32> %520 to <2 x float>, !dbg !24
  %522 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !22
  %523 = insertelement <2 x i32> %522, i32 %370, i64 1, !dbg !22
  %524 = bitcast <2 x i32> %523 to <2 x float>, !dbg !22
  %525 = insertelement <2 x float> poison, float %209, i64 0, !dbg !42
  %526 = insertelement <2 x float> %525, float %385, i64 1, !dbg !42
  %527 = fmul <2 x float> %518, %526, !dbg !42
  %528 = fmul <2 x float> %527, %524, !dbg !43
  %529 = fadd <2 x float> %528, %521, !dbg !44
  %shift = shufflevector <2 x float> %403, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %530 = fadd <2 x float> %403, %shift, !dbg !45
  %531 = extractelement <2 x float> %530, i64 0, !dbg !45
  %shift76 = shufflevector <2 x float> %421, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %532 = fadd <2 x float> %421, %shift76, !dbg !45
  %533 = extractelement <2 x float> %532, i64 0, !dbg !45
  %shift77 = shufflevector <2 x float> %439, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %534 = fadd <2 x float> %439, %shift77, !dbg !45
  %535 = extractelement <2 x float> %534, i64 0, !dbg !45
  %shift78 = shufflevector <2 x float> %457, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %536 = fadd <2 x float> %457, %shift78, !dbg !45
  %537 = extractelement <2 x float> %536, i64 0, !dbg !45
  %shift79 = shufflevector <2 x float> %475, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %538 = fadd <2 x float> %475, %shift79, !dbg !45
  %539 = extractelement <2 x float> %538, i64 0, !dbg !45
  %shift80 = shufflevector <2 x float> %493, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %540 = fadd <2 x float> %493, %shift80, !dbg !45
  %541 = extractelement <2 x float> %540, i64 0, !dbg !45
  %shift81 = shufflevector <2 x float> %511, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %542 = fadd <2 x float> %511, %shift81, !dbg !45
  %543 = extractelement <2 x float> %542, i64 0, !dbg !45
  %shift82 = shufflevector <2 x float> %529, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %544 = fadd <2 x float> %529, %shift82, !dbg !45
  %545 = extractelement <2 x float> %544, i64 0, !dbg !45
  %546 = fcmp olt float %531, 0.000000e+00, !dbg !46
  %547 = fcmp olt float %533, 0.000000e+00, !dbg !46
  %548 = fcmp olt float %535, 0.000000e+00, !dbg !46
  %549 = fcmp olt float %537, 0.000000e+00, !dbg !46
  %550 = fcmp olt float %539, 0.000000e+00, !dbg !46
  %551 = fcmp olt float %541, 0.000000e+00, !dbg !46
  %552 = fcmp olt float %543, 0.000000e+00, !dbg !46
  %553 = fcmp olt float %545, 0.000000e+00, !dbg !46
  %554 = select i1 %546, float 0.000000e+00, float %531, !dbg !50
  %555 = select i1 %547, float 0.000000e+00, float %533, !dbg !50
  %556 = select i1 %548, float 0.000000e+00, float %535, !dbg !50
  %557 = select i1 %549, float 0.000000e+00, float %537, !dbg !50
  %558 = select i1 %550, float 0.000000e+00, float %539, !dbg !50
  %559 = select i1 %551, float 0.000000e+00, float %541, !dbg !50
  %560 = select i1 %552, float 0.000000e+00, float %543, !dbg !50
  %561 = select i1 %553, float 0.000000e+00, float %545, !dbg !50
  %562 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !51
  %563 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !51
  %564 = bitcast float %554 to i32, !dbg !52
  %565 = bitcast float %555 to i32, !dbg !52
  %566 = bitcast float %556 to i32, !dbg !52
  %567 = bitcast float %557 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %564, i32 %565, i32 %566, i32 %567, ptr addrspace(1) %562, i1 true) #3, !dbg !52
  %568 = bitcast float %558 to i32, !dbg !52
  %569 = bitcast float %559 to i32, !dbg !52
  %570 = bitcast float %560 to i32, !dbg !52
  %571 = bitcast float %561 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %568, i32 %569, i32 %570, i32 %571, ptr addrspace(1) %563, i1 true) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqbernjizdfdzsoxcsvrrt3l4hias5t2pj2topezweqooszzzsnc.py", directory: "inductor_cache/qb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 27, scope: !7)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 57, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 58, column: 28, scope: !7)
!52 = !DILocation(line: 58, column: 40, scope: !7)
!53 = !DILocation(line: 58, column: 4, scope: !7)
