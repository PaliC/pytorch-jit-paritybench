; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = shl i32 %14, 5, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = lshr i32 %16, 2, !dbg !12
  %18 = and i32 %17, 31, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 256, !dbg !14
  %21 = shl i32 %16, 2, !dbg !15
  %22 = and i32 %21, 12, !dbg !15
  %23 = srem i32 %19, 64, !dbg !16
  %24 = shl i32 %19, 4, !dbg !17
  %25 = or disjoint i32 %24, %22, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !20
  %29 = sext i32 %23 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #5, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #5, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #5, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #5, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #5, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #5, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #5, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #5, !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #5, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #5, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #5, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #5, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #5, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #5, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #5, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #5, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !31
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #5, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #5, !dbg !36
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #5, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #5, !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %20) #5, !dbg !38
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %20) #5, !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %20) #5, !dbg !38
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %20) #5, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !39
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %20) #5, !dbg !40
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %20) #5, !dbg !40
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %20) #5, !dbg !40
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %20) #5, !dbg !40
  %79 = fadd float %45, 0x3EE4F8B580000000, !dbg !41
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i13 = icmp eq i32 %86, 0, !dbg !42
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i16 = icmp eq i32 %87, 0, !dbg !42
  br i1 %.not.i13, label %93, label %88, !dbg !42

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %91, label %89, !dbg !42

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %96, label %94, !dbg !42

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

__nv_sqrtf.exit17:                                ; preds = %89, %91, %94, %96
  %.0.i15 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !42
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !43
  %99 = fadd float %68, 0x3EE4F8B580000000, !dbg !44
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i33 = icmp eq i32 %106, 0, !dbg !45
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %.not1.i36 = icmp eq i32 %107, 0, !dbg !45
  br i1 %.not.i33, label %113, label %108, !dbg !45

108:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %111, label %109, !dbg !45

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #5, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #5, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

113:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %116, label %114, !dbg !45

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #5, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #5, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

__nv_sqrtf.exit37:                                ; preds = %109, %111, %114, %116
  %.0.i35 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !45
  %118 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !32
  %119 = bitcast i32 %118 to float, !dbg !32
  %120 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !34
  %121 = insertelement <2 x i32> %120, i32 %62, i64 1, !dbg !34
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !34
  %123 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !32
  %126 = bitcast i32 %125 to float, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !32
  %128 = bitcast i32 %127 to float, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %130 = bitcast i32 %129 to float, !dbg !20
  %131 = bitcast i32 %34 to float, !dbg !22
  %132 = fadd float %130, %131, !dbg !46
  %133 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !38
  %134 = insertelement <2 x i32> %133, i32 %73, i64 1, !dbg !38
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !38
  %136 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !40
  %137 = insertelement <2 x i32> %136, i32 %78, i64 1, !dbg !40
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !40
  %139 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %140 = bitcast i32 %139 to float, !dbg !20
  %141 = fadd float %140, %131, !dbg !46
  %142 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %143 = bitcast i32 %142 to float, !dbg !20
  %144 = fadd float %143, %131, !dbg !46
  %145 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %146 = bitcast i32 %145 to float, !dbg !20
  %147 = fadd float %146, %131, !dbg !46
  %148 = and i32 %16, 31, !dbg !12
  %149 = or disjoint i32 %15, %148, !dbg !13
  %150 = icmp slt i32 %149, 256, !dbg !14
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #5, !dbg !47
  %152 = insertelement <2 x float> poison, float %141, i64 0, !dbg !48
  %153 = insertelement <2 x float> %152, float %124, i64 1, !dbg !48
  %154 = fsub <2 x float> %153, %122, !dbg !48
  %155 = insertelement <2 x float> poison, float %98, i64 0, !dbg !49
  %156 = insertelement <2 x float> %155, float %151, i64 1, !dbg !49
  %157 = fmul <2 x float> %154, %156, !dbg !49
  %158 = fmul <2 x float> %157, %135, !dbg !50
  %159 = fadd <2 x float> %158, %138, !dbg !51
  %160 = insertelement <2 x float> poison, float %132, i64 0, !dbg !48
  %161 = insertelement <2 x float> %160, float %119, i64 1, !dbg !48
  %162 = fsub <2 x float> %161, %122, !dbg !48
  %163 = fmul <2 x float> %162, %156, !dbg !49
  %164 = fmul <2 x float> %163, %135, !dbg !50
  %165 = fadd <2 x float> %164, %138, !dbg !51
  %shift = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %166 = fadd <2 x float> %159, %shift, !dbg !52
  %167 = extractelement <2 x float> %166, i64 0, !dbg !52
  %shift38 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %168 = fadd <2 x float> %165, %shift38, !dbg !52
  %169 = extractelement <2 x float> %168, i64 0, !dbg !52
  %170 = fcmp olt float %167, 0.000000e+00, !dbg !53
  %171 = fcmp olt float %169, 0.000000e+00, !dbg !53
  %172 = insertelement <2 x float> poison, float %144, i64 0, !dbg !57
  %173 = insertelement <2 x float> %172, float %128, i64 1, !dbg !57
  %174 = fsub <2 x float> %173, %122, !dbg !57
  %175 = insertelement <2 x float> poison, float %147, i64 0, !dbg !48
  %176 = insertelement <2 x float> %175, float %126, i64 1, !dbg !48
  %177 = fsub <2 x float> %176, %122, !dbg !48
  %178 = fmul <2 x float> %174, %156, !dbg !58
  %179 = fmul <2 x float> %177, %156, !dbg !49
  %180 = fmul <2 x float> %178, %135, !dbg !59
  %181 = fmul <2 x float> %179, %135, !dbg !50
  %182 = fadd <2 x float> %180, %138, !dbg !60
  %183 = fadd <2 x float> %181, %138, !dbg !51
  %184 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !51
  %185 = fadd <2 x float> %182, %184, !dbg !52
  %186 = fcmp olt <2 x float> %185, zeroinitializer, !dbg !53
  %187 = select <2 x i1> %186, <2 x float> zeroinitializer, <2 x float> %185, !dbg !61
  %188 = select i1 %170, float 0.000000e+00, float %167, !dbg !61
  %189 = select i1 %171, float 0.000000e+00, float %169, !dbg !61
  %shift39 = shufflevector <2 x float> %187, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %190 = fadd <2 x float> %shift39, %187, !dbg !62
  %191 = extractelement <2 x float> %190, i64 0, !dbg !62
  %192 = fadd float %188, %191, !dbg !62
  %193 = fadd float %189, %192, !dbg !62
  %194 = select i1 %20, float %193, float 0.000000e+00, !dbg !62
  %195 = bitcast float %194 to i32, !dbg !67
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !67
  %197 = bitcast i32 %196 to float, !dbg !67
  %198 = fadd float %194, %197, !dbg !62
  %199 = bitcast float %198 to i32, !dbg !67
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !67
  %201 = bitcast i32 %200 to float, !dbg !67
  %202 = fadd float %198, %201, !dbg !62
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !68
  %204 = bitcast float %202 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !68
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !68
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float 1.600000e+01) #5, !dbg !68
  %208 = bitcast float %147 to i32, !dbg !69
  %209 = bitcast float %144 to i32, !dbg !69
  %210 = bitcast float %141 to i32, !dbg !69
  %211 = bitcast float %132 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %208, i32 %209, i32 %210, i32 %211, ptr addrspace(1) %27, i1 %20) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %212 = sext i32 %149 to i64, !dbg !71
  %213 = getelementptr float, ptr addrspace(1) %1, i64 %212, !dbg !71
  %214 = and i32 %16, 96, !dbg !72
  %215 = icmp eq i32 %214, 0, !dbg !72
  %216 = bitcast float %207 to i32, !dbg !72
  %217 = and i1 %215, %150, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %213, i1 %217) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqysvunu2gkgb2k5yox4knuxxjuqrovcgn4f5tfldn5sajg5cked.py", directory: "inductor_cache/qy")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 44, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 36, scope: !7)
!41 = !DILocation(line: 46, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 26, scope: !7)
!43 = !DILocation(line: 49, column: 19, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 27, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 58, column: 19, scope: !7)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 52, column: 19, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 65, column: 42, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 60, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!62 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !66)
!63 = distinct !DILexicalBlockFile(scope: !65, file: !64, discriminator: 0)
!64 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!65 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!66 = !DILocation(line: 68, column: 26, scope: !7)
!67 = !DILocation(line: 267, column: 36, scope: !65, inlinedAt: !66)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 47, scope: !7)
!70 = !DILocation(line: 72, column: 4, scope: !7)
!71 = !DILocation(line: 73, column: 28, scope: !7)
!72 = !DILocation(line: 73, column: 40, scope: !7)
!73 = !DILocation(line: 73, column: 4, scope: !7)
