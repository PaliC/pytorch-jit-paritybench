; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_cat_native_group_norm_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 2, !dbg !11
  %16 = and i32 %15, 60, !dbg !11
  %17 = and i32 %15, 448, !dbg !11
  %18 = lshr exact i32 %17, 6, !dbg !12
  %.frozen = freeze i32 %11, !dbg !13
  %19 = sdiv i32 %.frozen, 32, !dbg !13
  %20 = mul i32 %19, 32, !dbg !14
  %.decomposed = sub i32 %.frozen, %20, !dbg !14
  %21 = shl i32 %11, 9, !dbg !15
  %22 = or disjoint i32 %21, %16, !dbg !16
  %23 = or disjoint i32 %22, %17, !dbg !16
  %24 = sext i32 %23 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %31 = bitcast i32 %27 to float, !dbg !18
  %32 = bitcast i32 %28 to float, !dbg !18
  %33 = bitcast i32 %29 to float, !dbg !18
  %34 = bitcast i32 %30 to float, !dbg !18
  %35 = shl nsw i32 %.decomposed, 3, !dbg !19
  %36 = or disjoint i32 %35, %18, !dbg !20
  %37 = icmp slt i32 %36, 128, !dbg !21
  %38 = shl nsw i32 %36, 6, !dbg !22
  %39 = shl i32 %19, 13, !dbg !23
  %40 = or disjoint i32 %39, %16, !dbg !24
  %41 = add i32 %40, %38, !dbg !25
  %42 = sext i32 %41 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #5, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %49 = and i32 %.decomposed, 536870904, !dbg !28
  %50 = icmp eq i32 %49, 16, !dbg !28
  %51 = or disjoint i32 %18, -128, !dbg !29
  %52 = add nsw i32 %51, %35, !dbg !30
  %53 = shl nsw i32 %52, 6, !dbg !31
  %54 = shl i32 %19, 12, !dbg !32
  %55 = or disjoint i32 %54, %16, !dbg !33
  %56 = add i32 %55, %53, !dbg !34
  %57 = sext i32 %56 to i64, !dbg !35
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !35
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #5, !dbg !36
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !36
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !36
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !36
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !36
  %64 = icmp sgt i32 %36, 191, !dbg !37
  %65 = or disjoint i32 %18, -192, !dbg !38
  %66 = add nsw i32 %65, %35, !dbg !39
  %67 = shl nsw i32 %66, 6, !dbg !40
  %68 = add i32 %55, %67, !dbg !41
  %69 = sext i32 %68 to i64, !dbg !42
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !42
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #5, !dbg !43
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !43
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !43
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !43
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !43
  %.v = select i1 %50, i32 %60, i32 %72, !dbg !44
  %.v1 = select i1 %50, i32 %61, i32 %73, !dbg !44
  %.v2 = select i1 %50, i32 %62, i32 %74, !dbg !44
  %.v3 = select i1 %50, i32 %63, i32 %75, !dbg !44
  %.v4 = select i1 %37, i32 %45, i32 %.v, !dbg !45
  %76 = bitcast i32 %.v4 to float, !dbg !45
  %.v5 = select i1 %37, i32 %46, i32 %.v1, !dbg !45
  %77 = bitcast i32 %.v5 to float, !dbg !45
  %.v6 = select i1 %37, i32 %47, i32 %.v2, !dbg !45
  %78 = bitcast i32 %.v6 to float, !dbg !45
  %.v7 = select i1 %37, i32 %48, i32 %.v3, !dbg !45
  %79 = bitcast i32 %.v7 to float, !dbg !45
  %80 = fadd float %31, %76, !dbg !46
  %81 = fadd float %32, %77, !dbg !46
  %82 = fadd float %33, %78, !dbg !46
  %83 = fadd float %34, %79, !dbg !46
  %84 = fadd float %80, %81, !dbg !47
  %85 = fadd float %82, %84, !dbg !47
  %86 = fadd float %83, %85, !dbg !47
  %87 = bitcast float %86 to i32, !dbg !52
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 16, i32 31), !dbg !52
  %89 = bitcast i32 %88 to float, !dbg !52
  %90 = fadd float %86, %89, !dbg !47
  %91 = bitcast float %90 to i32, !dbg !52
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !52
  %93 = bitcast i32 %92 to float, !dbg !52
  %94 = fadd float %90, %93, !dbg !47
  %95 = bitcast float %94 to i32, !dbg !52
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !52
  %97 = bitcast i32 %96 to float, !dbg !52
  %98 = fadd float %94, %97, !dbg !47
  %99 = bitcast float %98 to i32, !dbg !52
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !52
  %101 = bitcast i32 %100 to float, !dbg !52
  %102 = fadd float %98, %101, !dbg !47
  %103 = bitcast float %102 to i32, !dbg !52
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !52
  %105 = bitcast i32 %104 to float, !dbg !52
  %106 = fadd float %102, %105, !dbg !47
  %107 = icmp eq i32 %13, 0, !dbg !52
  %108 = and i32 %14, 3, !dbg !52
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !52
  %110 = bitcast float %106 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 %107) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %111 = icmp slt i32 %12, 4, !dbg !52
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !52
  %113 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %112, i1 %111) #5, !dbg !52
  %114 = bitcast i32 %113 to float, !dbg !52
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !52
  %116 = bitcast i32 %115 to float, !dbg !52
  %117 = fadd float %114, %116, !dbg !47
  %118 = bitcast float %117 to i32, !dbg !52
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !52
  %120 = bitcast i32 %119 to float, !dbg !52
  %121 = fadd float %117, %120, !dbg !47
  %122 = and i32 %12, 3, !dbg !52
  %123 = icmp eq i32 %122, 0, !dbg !52
  %124 = and i1 %111, %123, !dbg !52
  %125 = bitcast float %121 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %125, i1 %124) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %126 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %127 = fadd float %126, 0.000000e+00, !dbg !53
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 5.120000e+02) #5, !dbg !57
  %129 = fsub float %80, %128, !dbg !58
  %130 = fsub float %81, %128, !dbg !58
  %131 = fsub float %82, %128, !dbg !58
  %132 = fsub float %83, %128, !dbg !58
  %133 = fmul float %129, %129, !dbg !59
  %134 = fmul float %130, %130, !dbg !59
  %135 = fmul float %131, %131, !dbg !59
  %136 = fmul float %132, %132, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %137 = fadd float %133, %134, !dbg !62
  %138 = fadd float %135, %137, !dbg !62
  %139 = fadd float %136, %138, !dbg !62
  %140 = bitcast float %139 to i32, !dbg !60
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !60
  %142 = bitcast i32 %141 to float, !dbg !60
  %143 = fadd float %139, %142, !dbg !62
  %144 = bitcast float %143 to i32, !dbg !60
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 8, i32 31), !dbg !60
  %146 = bitcast i32 %145 to float, !dbg !60
  %147 = fadd float %143, %146, !dbg !62
  %148 = bitcast float %147 to i32, !dbg !60
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 4, i32 31), !dbg !60
  %150 = bitcast i32 %149 to float, !dbg !60
  %151 = fadd float %147, %150, !dbg !62
  %152 = bitcast float %151 to i32, !dbg !60
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !60
  %154 = bitcast i32 %153 to float, !dbg !60
  %155 = fadd float %151, %154, !dbg !62
  %156 = bitcast float %155 to i32, !dbg !60
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !60
  %158 = bitcast i32 %157 to float, !dbg !60
  %159 = fadd float %155, %158, !dbg !62
  %160 = bitcast float %159 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %160, i1 %107) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %112, i1 %111) #5, !dbg !60
  %162 = bitcast i32 %161 to float, !dbg !60
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !60
  %164 = bitcast i32 %163 to float, !dbg !60
  %165 = fadd float %162, %164, !dbg !62
  %166 = bitcast float %165 to i32, !dbg !60
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !60
  %168 = bitcast i32 %167 to float, !dbg !60
  %169 = fadd float %165, %168, !dbg !62
  %170 = bitcast float %169 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %170, i1 %124) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %171 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !60
  %172 = fadd float %171, 0.000000e+00, !dbg !63
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float 5.120000e+02) #5, !dbg !65
  %174 = fadd float %173, 0x3EE4F8B580000000, !dbg !66
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !67
  %.not.i = icmp eq i32 %175, 0, !dbg !67
  br i1 %.not.i, label %178, label %176, !dbg !67

176:                                              ; preds = %10
  %177 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %174), !dbg !67
  br label %__nv_rsqrtf.exit, !dbg !67

178:                                              ; preds = %10
  %179 = tail call float @llvm.nvvm.rsqrt.approx.f(float %174), !dbg !67
  br label %__nv_rsqrtf.exit, !dbg !67

__nv_rsqrtf.exit:                                 ; preds = %176, %178
  %.0.i = phi float [ %177, %176 ], [ %179, %178 ], !dbg !67
  %180 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !68
  %181 = bitcast float %80 to i32, !dbg !69
  %182 = bitcast float %81 to i32, !dbg !69
  %183 = bitcast float %82 to i32, !dbg !69
  %184 = bitcast float %83 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %180, i1 true) #5, !dbg !69
  %185 = sext i32 %11 to i64, !dbg !70
  %186 = getelementptr float, ptr addrspace(1) %7, i64 %185, !dbg !70
  %urem = and i32 %12, 127, !dbg !71
  %187 = icmp eq i32 %urem, 0, !dbg !71
  %188 = bitcast float %.0.i to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %186, i1 %187) #5, !dbg !71
  %189 = getelementptr float, ptr addrspace(1) %5, i64 %185, !dbg !72
  %190 = bitcast float %128 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %189, i1 %187) #5, !dbg !73
  %191 = getelementptr float, ptr addrspace(1) %6, i64 %185, !dbg !74
  %192 = bitcast float %172 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %191, i1 %187) #5, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7xfkqkqr3zzwcikmcmcldaarop4bubgh6xnh3mnf7i4gjthblie.py", directory: "inductor_cache/7x")
!4 = !{ptr @triton_per_fused_add_cat_native_group_norm_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_cat_native_group_norm_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_cat_native_group_norm_23", linkageName: "triton_per_fused_add_cat_native_group_norm_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 30, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 36, column: 40, scope: !7)
!16 = !DILocation(line: 36, column: 36, scope: !7)
!17 = !DILocation(line: 36, column: 31, scope: !7)
!18 = !DILocation(line: 36, column: 45, scope: !7)
!19 = !DILocation(line: 37, column: 18, scope: !7)
!20 = !DILocation(line: 37, column: 16, scope: !7)
!21 = !DILocation(line: 41, column: 18, scope: !7)
!22 = !DILocation(line: 42, column: 39, scope: !7)
!23 = !DILocation(line: 42, column: 57, scope: !7)
!24 = !DILocation(line: 42, column: 35, scope: !7)
!25 = !DILocation(line: 42, column: 52, scope: !7)
!26 = !DILocation(line: 42, column: 30, scope: !7)
!27 = !DILocation(line: 42, column: 62, scope: !7)
!28 = !DILocation(line: 46, column: 18, scope: !7)
!29 = !DILocation(line: 47, column: 49, scope: !7)
!30 = !DILocation(line: 47, column: 54, scope: !7)
!31 = !DILocation(line: 47, column: 40, scope: !7)
!32 = !DILocation(line: 47, column: 67, scope: !7)
!33 = !DILocation(line: 47, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 62, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 72, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 49, scope: !7)
!39 = !DILocation(line: 51, column: 54, scope: !7)
!40 = !DILocation(line: 51, column: 40, scope: !7)
!41 = !DILocation(line: 51, column: 62, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 72, scope: !7)
!44 = !DILocation(line: 52, column: 34, scope: !7)
!45 = !DILocation(line: 53, column: 33, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !51)
!48 = distinct !DILexicalBlockFile(scope: !50, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!51 = !DILocation(line: 57, column: 59, scope: !7)
!52 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 73, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 57, column: 45, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !61)
!61 = !DILocation(line: 64, column: 59, scope: !7)
!62 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !61)
!63 = !DILocation(line: 73, column: 15, scope: !54, inlinedAt: !64)
!64 = !DILocation(line: 64, column: 45, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 28, scope: !7)
!68 = !DILocation(line: 70, column: 25, scope: !7)
!69 = !DILocation(line: 70, column: 46, scope: !7)
!70 = !DILocation(line: 71, column: 25, scope: !7)
!71 = !DILocation(line: 71, column: 37, scope: !7)
!72 = !DILocation(line: 72, column: 25, scope: !7)
!73 = !DILocation(line: 72, column: 37, scope: !7)
!74 = !DILocation(line: 73, column: 25, scope: !7)
!75 = !DILocation(line: 73, column: 37, scope: !7)
!76 = !DILocation(line: 73, column: 4, scope: !7)
