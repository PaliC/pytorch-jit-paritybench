; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = icmp slt i32 %18, 125440, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %21 = sdiv i32 %.frozen, 49, !dbg !15
  %.frozen16 = freeze i32 %19, !dbg !15
  %22 = sdiv i32 %.frozen16, 49, !dbg !15
  %23 = srem i32 %21, 640, !dbg !16
  %24 = srem i32 %22, 640, !dbg !16
  %25 = mul i32 %21, 49, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = mul i32 %22, 49, !dbg !17
  %.decomposed17 = sub i32 %.frozen16, %26, !dbg !17
  %27 = sdiv i32 %18, 31360, !dbg !18
  %28 = icmp slt i32 %23, 512, !dbg !19
  %29 = icmp slt i32 %24, 512, !dbg !19
  %30 = shl nsw i32 %.decomposed, 9, !dbg !20
  %31 = shl nsw i32 %.decomposed17, 9, !dbg !20
  %32 = mul nsw i32 %27, 25088, !dbg !21
  %33 = add nsw i32 %30, %32, !dbg !22
  %34 = add nsw i32 %33, %23, !dbg !23
  %35 = add nsw i32 %24, %31, !dbg !22
  %36 = add nsw i32 %35, %32, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = sext i32 %36 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = and i1 %20, %28, !dbg !25
  %42 = and i1 %29, %20, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %41, i32 0, i1 %41) #3, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %42, i32 0, i1 %42) #3, !dbg !26
  %45 = sext i32 %23 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !27
  %47 = sext i32 %24 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %41, i32 0, i1 %41) #3, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %42, i32 0, i1 %42) #3, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %41, i32 0, i1 %41) #3, !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %42, i32 0, i1 %42) #3, !dbg !30
  %56 = bitcast i32 %55 to float, !dbg !30
  %57 = fadd float %54, 0x3EE4F8B580000000, !dbg !31
  %58 = fadd float %56, 0x3EE4F8B580000000, !dbg !31
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %59, 0, !dbg !32
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %60, 0, !dbg !32
  br i1 %.not.i, label %66, label %61, !dbg !32

61:                                               ; preds = %12
  br i1 %.not1.i, label %64, label %62, !dbg !32

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

66:                                               ; preds = %12
  br i1 %.not1.i, label %69, label %67, !dbg !32

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !32
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %71, 0, !dbg !32
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !32
  br i1 %.not.i1, label %78, label %73, !dbg !32

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !32

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !32

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !32
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !34
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !34
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %41, i32 0, i1 %41) #3, !dbg !35
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %42, i32 0, i1 %42) #3, !dbg !35
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !36
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !36
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %41, i32 0, i1 %41) #3, !dbg !37
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %42, i32 0, i1 %42) #3, !dbg !37
  %93 = icmp sgt i32 %23, 511, !dbg !38
  %94 = icmp sgt i32 %24, 511, !dbg !38
  %95 = shl nsw i32 %.decomposed, 7, !dbg !39
  %96 = shl nsw i32 %.decomposed17, 7, !dbg !39
  %97 = mul nsw i32 %27, 6272, !dbg !40
  %98 = add nsw i32 %95, %97, !dbg !41
  %99 = add nsw i32 %23, -512, !dbg !42
  %100 = add nsw i32 %24, -512, !dbg !42
  %101 = add nsw i32 %98, %99, !dbg !43
  %102 = add nsw i32 %100, %96, !dbg !41
  %103 = add nsw i32 %102, %97, !dbg !43
  %104 = sext i32 %101 to i64, !dbg !44
  %105 = getelementptr float, ptr addrspace(1) %5, i64 %104, !dbg !44
  %106 = sext i32 %103 to i64, !dbg !44
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %106, !dbg !44
  %108 = and i1 %20, %93, !dbg !45
  %109 = and i1 %94, %20, !dbg !45
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %108, i32 0, i1 %108) #3, !dbg !46
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %109, i32 0, i1 %109) #3, !dbg !46
  %112 = sext i32 %99 to i64, !dbg !47
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %112, !dbg !47
  %114 = sext i32 %100 to i64, !dbg !47
  %115 = getelementptr float, ptr addrspace(1) %6, i64 %114, !dbg !47
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %108, i32 0, i1 %108) #3, !dbg !48
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %109, i32 0, i1 %109) #3, !dbg !48
  %118 = getelementptr float, ptr addrspace(1) %7, i64 %112, !dbg !49
  %119 = getelementptr float, ptr addrspace(1) %7, i64 %114, !dbg !49
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %108, i32 0, i1 %108) #3, !dbg !50
  %121 = bitcast i32 %120 to float, !dbg !50
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %109, i32 0, i1 %109) #3, !dbg !50
  %123 = bitcast i32 %122 to float, !dbg !50
  %124 = fadd float %121, 0x3F50624DE0000000, !dbg !51
  %125 = fadd float %123, 0x3F50624DE0000000, !dbg !51
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i6 = icmp eq i32 %126, 0, !dbg !52
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i9 = icmp eq i32 %127, 0, !dbg !52
  br i1 %.not.i6, label %133, label %128, !dbg !52

128:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %131, label %129, !dbg !52

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

133:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %136, label %134, !dbg !52

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

__nv_sqrtf.exit10:                                ; preds = %129, %131, %134, %136
  %.0.i8 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !52
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i11 = icmp eq i32 %138, 0, !dbg !52
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i14 = icmp eq i32 %139, 0, !dbg !52
  br i1 %.not.i11, label %145, label %140, !dbg !52

140:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %143, label %141, !dbg !52

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

145:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %148, label %146, !dbg !52

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

__nv_sqrtf.exit15:                                ; preds = %141, %143, %146, %148
  %.0.i13 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !52
  %150 = bitcast i32 %111 to float, !dbg !46
  %151 = bitcast i32 %117 to float, !dbg !48
  %152 = fsub float %150, %151, !dbg !53
  %153 = bitcast i32 %110 to float, !dbg !46
  %154 = bitcast i32 %116 to float, !dbg !48
  %155 = fsub float %153, %154, !dbg !53
  %156 = bitcast i32 %44 to float, !dbg !26
  %157 = bitcast i32 %50 to float, !dbg !28
  %158 = fsub float %156, %157, !dbg !54
  %159 = fmul float %158, %84, !dbg !55
  %160 = bitcast i32 %88 to float, !dbg !35
  %161 = fmul float %159, %160, !dbg !56
  %162 = bitcast i32 %92 to float, !dbg !37
  %163 = fadd float %161, %162, !dbg !57
  %164 = bitcast i32 %43 to float, !dbg !26
  %165 = bitcast i32 %49 to float, !dbg !28
  %166 = fsub float %164, %165, !dbg !54
  %167 = fmul float %166, %83, !dbg !55
  %168 = bitcast i32 %87 to float, !dbg !35
  %169 = fmul float %167, %168, !dbg !56
  %170 = bitcast i32 %91 to float, !dbg !37
  %171 = fadd float %169, %170, !dbg !57
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !58
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !58
  %174 = fmul float %155, %172, !dbg !59
  %175 = fmul float %152, %173, !dbg !59
  %176 = getelementptr float, ptr addrspace(1) %8, i64 %112, !dbg !60
  %177 = getelementptr float, ptr addrspace(1) %8, i64 %114, !dbg !60
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %108, i32 0, i1 %108) #3, !dbg !61
  %179 = bitcast i32 %178 to float, !dbg !61
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %109, i32 0, i1 %109) #3, !dbg !61
  %181 = bitcast i32 %180 to float, !dbg !61
  %182 = fmul float %174, %179, !dbg !62
  %183 = fmul float %175, %181, !dbg !62
  %184 = getelementptr float, ptr addrspace(1) %9, i64 %112, !dbg !63
  %185 = getelementptr float, ptr addrspace(1) %9, i64 %114, !dbg !63
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %108, i32 0, i1 %108) #3, !dbg !64
  %187 = bitcast i32 %186 to float, !dbg !64
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %109, i32 0, i1 %109) #3, !dbg !64
  %189 = bitcast i32 %188 to float, !dbg !64
  %190 = fadd float %182, %187, !dbg !65
  %191 = fadd float %183, %189, !dbg !65
  %192 = select i1 %28, float %171, float %190, !dbg !66
  %193 = select i1 %29, float %163, float %191, !dbg !66
  %194 = sext i32 %18 to i64, !dbg !67
  %195 = getelementptr float, ptr addrspace(1) %10, i64 %194, !dbg !67
  %196 = bitcast float %192 to i32, !dbg !68
  %197 = bitcast float %193 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %196, i32 %197, ptr addrspace(1) %195, i1 %20) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwnebw3op4r6gmvnw7hzoj6b7xzjrdyca5slcjal6jonichgarqd.py", directory: "inductor_cache/wn")
!4 = !{ptr @triton_poi_fused_cat_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_26", linkageName: "triton_poi_fused_cat_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 51, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 64, scope: !7)
!26 = !DILocation(line: 33, column: 57, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 35, scope: !7)
!40 = !DILocation(line: 54, column: 45, scope: !7)
!41 = !DILocation(line: 54, column: 40, scope: !7)
!42 = !DILocation(line: 54, column: 60, scope: !7)
!43 = !DILocation(line: 54, column: 51, scope: !7)
!44 = !DILocation(line: 54, column: 31, scope: !7)
!45 = !DILocation(line: 54, column: 74, scope: !7)
!46 = !DILocation(line: 54, column: 66, scope: !7)
!47 = !DILocation(line: 55, column: 31, scope: !7)
!48 = !DILocation(line: 55, column: 45, scope: !7)
!49 = !DILocation(line: 57, column: 31, scope: !7)
!50 = !DILocation(line: 57, column: 45, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 27, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 35, column: 18, scope: !7)
!55 = !DILocation(line: 44, column: 19, scope: !7)
!56 = !DILocation(line: 46, column: 20, scope: !7)
!57 = !DILocation(line: 48, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 31, scope: !7)
!61 = !DILocation(line: 66, column: 45, scope: !7)
!62 = !DILocation(line: 67, column: 20, scope: !7)
!63 = !DILocation(line: 68, column: 31, scope: !7)
!64 = !DILocation(line: 68, column: 45, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 73, column: 25, scope: !7)
!68 = !DILocation(line: 73, column: 37, scope: !7)
!69 = !DILocation(line: 73, column: 4, scope: !7)
