; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_cumsum_max_sort_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %14 = and i32 %9, 1, !dbg !15
  %15 = and i32 %9, 3, !dbg !15
  %16 = shl i32 %12, 2, !dbg !16
  %17 = or disjoint i32 %16, %15, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %13, i32 0, i1 %13) #2, !dbg !19
  %21 = bitcast i32 %20 to float, !dbg !19
  %22 = sext i32 %16 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %13) #2, !dbg !21
  %25 = bitcast i32 %24 to float, !dbg !21
  %26 = or disjoint i32 %16, 1, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %13) #2, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = or disjoint i32 %16, 2, !dbg !25
  %32 = sext i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #2, !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = or disjoint i32 %16, 3, !dbg !28
  %37 = sext i32 %36 to i64, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !29
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %13) #2, !dbg !30
  %40 = bitcast i32 %39 to float, !dbg !30
  %41 = fcmp ogt float %25, %30, !dbg !31
  %42 = fcmp uno float %25, 0.000000e+00, !dbg !35
  %43 = or i1 %42, %41, !dbg !36
  %44 = select i1 %43, float %25, float %30, !dbg !37
  %45 = fcmp ogt float %44, %35, !dbg !38
  %46 = fcmp uno float %44, 0.000000e+00, !dbg !40
  %47 = or i1 %45, %46, !dbg !41
  %48 = select i1 %47, float %44, float %35, !dbg !42
  %49 = fcmp ogt float %48, %40, !dbg !43
  %50 = fcmp uno float %48, 0.000000e+00, !dbg !45
  %51 = or i1 %49, %50, !dbg !46
  %52 = select i1 %51, float %48, float %40, !dbg !47
  %53 = fsub float %21, %52, !dbg !48
  %54 = lshr i32 %9, 1, !dbg !49
  %.lobit1 = and i32 %54, 1, !dbg !49
  %55 = bitcast float %53 to i32, !dbg !52
  %56 = xor i32 %.lobit1, 1, !dbg !54
  %57 = xor i32 %14, 1, !dbg !54
  %58 = mul nuw nsw i32 %57, %55, !dbg !55
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !56
  %60 = add i32 %58, %59, !dbg !59
  %61 = mul nuw nsw i32 %14, %55, !dbg !61
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !56
  %63 = add i32 %61, %62, !dbg !59
  %64 = bitcast i32 %60 to float, !dbg !62
  %65 = bitcast i32 %63 to float, !dbg !63
  %66 = trunc i32 %54 to i1, !dbg !64
  %67 = fcmp uge float %64, %65, !dbg !64
  %.not = xor i1 %67, %66, !dbg !64
  %68 = xor i32 %60, %63, !dbg !65
  %69 = select i1 %.not, i32 0, i32 %68, !dbg !66
  %70 = xor i32 %69, %55, !dbg !67
  %71 = mul nuw nsw i32 %70, %56, !dbg !55
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !56
  %73 = add i32 %71, %72, !dbg !59
  %74 = mul nuw nsw i32 %70, %.lobit1, !dbg !61
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !56
  %76 = add i32 %74, %75, !dbg !59
  %77 = bitcast i32 %73 to float, !dbg !62
  %78 = bitcast i32 %76 to float, !dbg !63
  %79 = fcmp olt float %77, %78, !dbg !68
  %80 = xor i32 %73, %76, !dbg !65
  %81 = select i1 %79, i32 %80, i32 0, !dbg !66
  %82 = xor i32 %81, %70, !dbg !67
  %83 = mul nuw nsw i32 %82, %57, !dbg !55
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !56
  %85 = add i32 %83, %84, !dbg !59
  %86 = mul nuw nsw i32 %82, %14, !dbg !61
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !56
  %88 = add i32 %86, %87, !dbg !59
  %89 = bitcast i32 %85 to float, !dbg !62
  %90 = bitcast i32 %88 to float, !dbg !63
  %91 = fcmp olt float %89, %90, !dbg !68
  %92 = xor i32 %85, %88, !dbg !65
  %93 = select i1 %91, i32 %92, i32 0, !dbg !66
  %94 = xor i32 %93, %82, !dbg !67
  %95 = bitcast i32 %94 to float, !dbg !69
  %96 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %94, i32 1, i32 0), !dbg !70
  %97 = bitcast i32 %96 to float, !dbg !70
  %.not2 = icmp eq i32 %15, 0, !dbg !70
  %98 = fadd float %97, %95, !dbg !71
  %99 = select i1 %.not2, float %95, float %98, !dbg !70
  %100 = bitcast float %99 to i32, !dbg !70
  %101 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %100, i32 2, i32 0), !dbg !70
  %102 = bitcast i32 %101 to float, !dbg !70
  %103 = icmp samesign ugt i32 %15, 1, !dbg !70
  %104 = fadd float %99, %102, !dbg !71
  %105 = select i1 %103, float %104, float %99, !dbg !70
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !73
  %107 = and i32 %9, 32, !dbg !74
  %108 = icmp eq i32 %107, 0, !dbg !74
  %109 = and i1 %108, %13, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %55, ptr addrspace(1) %106, i1 %109) #2, !dbg !74
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %110, i1 %109) #2, !dbg !76
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !77
  %112 = bitcast float %105 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %111, i1 %109) #2, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coy54v5gczpdyyjcmc7glxfj4npjfpmmaqhytnymflg24ruwva5c.py", directory: "inductor_cache/oy")
!4 = !{ptr @triton_per_fused_cumsum_max_sort_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cumsum_max_sort_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cumsum_max_sort_sub_0", linkageName: "triton_per_fused_cumsum_max_sort_sub_0", scope: !3, file: !3, line: 24, type: !8, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 28, scope: !7)
!11 = !DILocation(line: 28, column: 33, scope: !7)
!12 = !DILocation(line: 29, column: 44, scope: !7)
!13 = !DILocation(line: 29, column: 23, scope: !7)
!14 = !DILocation(line: 30, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 36, column: 37, scope: !7)
!17 = !DILocation(line: 36, column: 35, scope: !7)
!18 = !DILocation(line: 36, column: 30, scope: !7)
!19 = !DILocation(line: 36, column: 42, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 37, column: 37, scope: !7)
!22 = !DILocation(line: 38, column: 34, scope: !7)
!23 = !DILocation(line: 38, column: 30, scope: !7)
!24 = !DILocation(line: 38, column: 41, scope: !7)
!25 = !DILocation(line: 39, column: 34, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 41, scope: !7)
!28 = !DILocation(line: 40, column: 34, scope: !7)
!29 = !DILocation(line: 40, column: 30, scope: !7)
!30 = !DILocation(line: 40, column: 41, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 41, column: 40, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 42, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 43, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !44)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 575, column: 44, scope: !50, inlinedAt: !51)
!50 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!51 = !DILocation(line: 49, column: 71, scope: !7)
!52 = !DILocation(line: 502, column: 14, scope: !53, inlinedAt: !51)
!53 = distinct !DILexicalBlockFile(scope: !50, file: !33, discriminator: 0)
!54 = !DILocation(line: 505, column: 21, scope: !53, inlinedAt: !51)
!55 = !DILocation(line: 506, column: 40, scope: !53, inlinedAt: !51)
!56 = !DILocation(line: 267, column: 36, scope: !57, inlinedAt: !51)
!57 = distinct !DILexicalBlockFile(scope: !53, file: !58, discriminator: 0)
!58 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!59 = !DILocation(line: 256, column: 15, scope: !60, inlinedAt: !51)
!60 = distinct !DILexicalBlockFile(scope: !57, file: !58, discriminator: 0)
!61 = !DILocation(line: 507, column: 41, scope: !53, inlinedAt: !51)
!62 = !DILocation(line: 510, column: 20, scope: !53, inlinedAt: !51)
!63 = !DILocation(line: 511, column: 22, scope: !53, inlinedAt: !51)
!64 = !DILocation(line: 547, column: 28, scope: !53, inlinedAt: !51)
!65 = !DILocation(line: 548, column: 38, scope: !53, inlinedAt: !51)
!66 = !DILocation(line: 548, column: 46, scope: !53, inlinedAt: !51)
!67 = !DILocation(line: 548, column: 15, scope: !53, inlinedAt: !51)
!68 = !DILocation(line: 536, column: 22, scope: !53, inlinedAt: !51)
!69 = !DILocation(line: 551, column: 18, scope: !53, inlinedAt: !51)
!70 = !DILocation(line: 52, column: 46, scope: !7)
!71 = !DILocation(line: 13, column: 20, scope: !72, inlinedAt: !70)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!73 = !DILocation(line: 53, column: 25, scope: !7)
!74 = !DILocation(line: 53, column: 43, scope: !7)
!75 = !DILocation(line: 54, column: 25, scope: !7)
!76 = !DILocation(line: 54, column: 44, scope: !7)
!77 = !DILocation(line: 55, column: 25, scope: !7)
!78 = !DILocation(line: 55, column: 44, scope: !7)
!79 = !DILocation(line: 55, column: 4, scope: !7)
