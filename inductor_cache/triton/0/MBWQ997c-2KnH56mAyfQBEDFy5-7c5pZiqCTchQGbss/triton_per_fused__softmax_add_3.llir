; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/ir/cir2ogqxdnfch7jghg3mhfqn4tzwovovbt25pdbdcl5htua4vjjl.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp5 < 343\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__softmax_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 3, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = lshr i32 %8, 3, !dbg !14
  %10 = and i32 %9, 7, !dbg !14
  %11 = or disjoint i32 %7, %10, !dbg !15
  %12 = icmp slt i32 %11, 512, !dbg !16
  %13 = shl i32 %8, 2, !dbg !17
  %14 = and i32 %13, 28, !dbg !17
  %.frozen = freeze i32 %11, !dbg !18
  %15 = sdiv i32 %.frozen, 32, !dbg !18
  %16 = mul i32 %15, 32, !dbg !19
  %.decomposed = sub i32 %.frozen, %16, !dbg !19
  %17 = shl i32 %11, 5, !dbg !20
  %18 = or disjoint i32 %17, %14, !dbg !21
  %19 = sext i32 %18 to i64, !dbg !22
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !22
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #4, !dbg !23
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !23
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !23
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !23
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !23
  %26 = shl i32 %8, 5, !dbg !23
  %27 = and i32 %26, 224, !dbg !23
  %28 = or disjoint i32 %27, %10, !dbg !23
  %29 = and i32 %8, 63, !dbg !23
  %30 = lshr exact i32 %27, 3, !dbg !23
  %31 = add nuw nsw i32 %30, %28, !dbg !23
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %31, !dbg !23
  %33 = insertelement <1 x i32> poison, i32 %22, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %33, i1 true) #4, !dbg !23
  %34 = or disjoint i32 %28, 8, !dbg !23
  %35 = lshr i32 %34, 3, !dbg !23
  %36 = add nuw nsw i32 %35, %34, !dbg !23
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %36, !dbg !23
  %38 = insertelement <1 x i32> poison, i32 %23, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %38, i1 true) #4, !dbg !23
  %39 = or disjoint i32 %28, 16, !dbg !23
  %40 = lshr i32 %39, 3, !dbg !23
  %41 = add nuw nsw i32 %40, %39, !dbg !23
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %41, !dbg !23
  %43 = insertelement <1 x i32> poison, i32 %24, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #4, !dbg !23
  %44 = or disjoint i32 %28, 24, !dbg !23
  %45 = lshr i32 %44, 3, !dbg !23
  %46 = add nuw nsw i32 %45, %44, !dbg !23
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %46, !dbg !23
  %48 = insertelement <1 x i32> poison, i32 %25, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %49 = lshr i32 %29, 3, !dbg !23
  %50 = add nuw nsw i32 %49, %29, !dbg !23
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !23
  %52 = load float, ptr addrspace(3) %51, align 4, !dbg !23
  %53 = or disjoint i32 %29, 64, !dbg !23
  %54 = lshr i32 %53, 3, !dbg !23
  %55 = add nuw nsw i32 %54, %53, !dbg !23
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %55, !dbg !23
  %57 = load float, ptr addrspace(3) %56, align 4, !dbg !23
  %58 = or disjoint i32 %29, 128, !dbg !23
  %59 = lshr i32 %58, 3, !dbg !23
  %60 = add nuw nsw i32 %59, %58, !dbg !23
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60, !dbg !23
  %62 = load float, ptr addrspace(3) %61, align 4, !dbg !23
  %63 = or disjoint i32 %29, 192, !dbg !23
  %64 = lshr i32 %63, 3, !dbg !23
  %65 = add nuw nsw i32 %64, %63, !dbg !23
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !23
  %67 = load float, ptr addrspace(3) %66, align 4, !dbg !23
  %68 = shl nsw i32 %.decomposed, 5, !dbg !24
  %69 = or disjoint i32 %68, %14, !dbg !25
  %70 = or disjoint i32 %69, 2, !dbg !25
  %71 = sext i32 %69 to i64, !dbg !26
  %72 = getelementptr i64, ptr addrspace(1) %1, i64 %71, !dbg !26
  %73 = sext i32 %70 to i64, !dbg !26
  %74 = getelementptr i64, ptr addrspace(1) %1, i64 %73, !dbg !26
  %75 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %72, i1 %12, i1 %12, i1 %12) #4, !dbg !27
  %76 = extractvalue { i64, i64 } %75, 0, !dbg !27
  %77 = extractvalue { i64, i64 } %75, 1, !dbg !27
  %78 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %74, i1 %12, i1 %12, i1 %12) #4, !dbg !27
  %79 = extractvalue { i64, i64 } %78, 0, !dbg !27
  %80 = extractvalue { i64, i64 } %78, 1, !dbg !27
  %81 = insertelement <4 x i64> poison, i64 %76, i64 0, !dbg !28
  %82 = insertelement <4 x i64> %81, i64 %77, i64 1, !dbg !28
  %83 = insertelement <4 x i64> %82, i64 %79, i64 2, !dbg !28
  %84 = insertelement <4 x i64> %83, i64 %80, i64 3, !dbg !28
  %85 = add <4 x i64> %84, splat (i64 343), !dbg !28
  %86 = icmp slt <4 x i64> %84, zeroinitializer, !dbg !29
  %87 = select <4 x i1> %86, <4 x i64> %85, <4 x i64> %84, !dbg !30
  %88 = icmp ugt <4 x i64> %87, splat (i64 342), !dbg !31
  %89 = bitcast <4 x i1> %88 to i4, !dbg !32
  %90 = icmp ne i4 %89, 0, !dbg !32
  %91 = and i1 %12, %90, !dbg !32
  br i1 %91, label %92, label %93, !dbg !32

92:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

93:                                               ; preds = %5
  %94 = and i32 %8, 7, !dbg !14
  %95 = srem i32 %15, 4, !dbg !33
  %96 = or disjoint i32 %7, %94, !dbg !15
  %97 = icmp slt i32 %96, 512, !dbg !16
  %98 = and i32 %8, 24, !dbg !14
  %99 = lshr i32 %8, 5, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %100 = sext i32 %95 to i64, !dbg !34
  %101 = extractelement <4 x i64> %87, i64 0, !dbg !35
  %.idx = shl i64 %101, 4, !dbg !35
  %102 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !35
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %100, !dbg !35
  %104 = extractelement <4 x i64> %87, i64 1, !dbg !35
  %.idx11 = shl i64 %104, 4, !dbg !35
  %105 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx11, !dbg !35
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %100, !dbg !35
  %107 = extractelement <4 x i64> %87, i64 2, !dbg !35
  %.idx12 = shl i64 %107, 4, !dbg !35
  %108 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx12, !dbg !35
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %100, !dbg !35
  %110 = extractelement <4 x i64> %87, i64 3, !dbg !35
  %.idx13 = shl i64 %110, 4, !dbg !35
  %111 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx13, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %100, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %113 = ptrtoint ptr addrspace(1) %103 to i64, !dbg !36
  %114 = ptrtoint ptr addrspace(1) %106 to i64, !dbg !36
  %115 = ptrtoint ptr addrspace(1) %109 to i64, !dbg !36
  %116 = ptrtoint ptr addrspace(1) %112 to i64, !dbg !36
  %117 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %31, !dbg !36
  %118 = insertelement <1 x i64> poison, i64 %113, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %117, <1 x i64> %118, i1 true) #4, !dbg !36
  %119 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %36, !dbg !36
  %120 = insertelement <1 x i64> poison, i64 %114, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %119, <1 x i64> %120, i1 true) #4, !dbg !36
  %121 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %41, !dbg !36
  %122 = insertelement <1 x i64> poison, i64 %115, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %121, <1 x i64> %122, i1 true) #4, !dbg !36
  %123 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %46, !dbg !36
  %124 = insertelement <1 x i64> poison, i64 %116, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %123, <1 x i64> %124, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %125 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %50, !dbg !36
  %126 = load i64, ptr addrspace(3) %125, align 8, !dbg !36
  %127 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %55, !dbg !36
  %128 = load i64, ptr addrspace(3) %127, align 8, !dbg !36
  %129 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %60, !dbg !36
  %130 = load i64, ptr addrspace(3) %129, align 8, !dbg !36
  %131 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %65, !dbg !36
  %132 = load i64, ptr addrspace(3) %131, align 8, !dbg !36
  %133 = inttoptr i64 %126 to ptr addrspace(1), !dbg !36
  %134 = inttoptr i64 %128 to ptr addrspace(1), !dbg !36
  %135 = inttoptr i64 %130 to ptr addrspace(1), !dbg !36
  %136 = inttoptr i64 %132 to ptr addrspace(1), !dbg !36
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %97) #4, !dbg !36
  %138 = bitcast i32 %137 to float, !dbg !36
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %97) #4, !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %97) #4, !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %97) #4, !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = fadd float %52, %138, !dbg !37
  %146 = fadd float %57, %140, !dbg !37
  %147 = fadd float %62, %142, !dbg !37
  %148 = fadd float %67, %144, !dbg !37
  %149 = select i1 %97, float %145, float 0xFFF0000000000000, !dbg !38
  %150 = select i1 %97, float %146, float 0xFFF0000000000000, !dbg !38
  %151 = select i1 %97, float %147, float 0xFFF0000000000000, !dbg !38
  %152 = select i1 %97, float %148, float 0xFFF0000000000000, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %153 = fcmp ogt float %149, %150, !dbg !43
  %154 = fcmp uno float %149, 0.000000e+00, !dbg !45
  %155 = or i1 %154, %153, !dbg !46
  %156 = select i1 %155, float %149, float %150, !dbg !47
  %157 = fcmp ogt float %156, %151, !dbg !43
  %158 = fcmp uno float %156, 0.000000e+00, !dbg !45
  %159 = or i1 %157, %158, !dbg !46
  %160 = select i1 %159, float %156, float %151, !dbg !47
  %161 = fcmp ogt float %160, %152, !dbg !43
  %162 = fcmp uno float %160, 0.000000e+00, !dbg !45
  %163 = or i1 %161, %162, !dbg !46
  %164 = select i1 %163, float %160, float %152, !dbg !47
  %165 = bitcast float %164 to i32, !dbg !39
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 16, i32 31), !dbg !39
  %167 = bitcast i32 %166 to float, !dbg !39
  %168 = fcmp ogt float %164, %167, !dbg !43
  %169 = fcmp uno float %164, 0.000000e+00, !dbg !45
  %170 = or i1 %168, %169, !dbg !46
  %171 = select i1 %170, float %164, float %167, !dbg !47
  %172 = bitcast float %171 to i32, !dbg !39
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 8, i32 31), !dbg !39
  %174 = bitcast i32 %173 to float, !dbg !39
  %175 = fcmp ogt float %171, %174, !dbg !43
  %176 = fcmp uno float %171, 0.000000e+00, !dbg !45
  %177 = or i1 %175, %176, !dbg !46
  %178 = icmp eq i32 %98, 0, !dbg !39
  %179 = and i32 %99, 1, !dbg !39
  %180 = shl nuw nsw i32 %94, 1, !dbg !39
  %181 = or disjoint i32 %180, %179, !dbg !39
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !39
  %183 = select i1 %177, i32 %172, i32 %173, !dbg !47
  %184 = insertelement <1 x i32> poison, i32 %183, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %184, i1 %178) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %185 = icmp slt i32 %8, 16, !dbg !39
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !39
  %187 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %186, i1 %185) #4, !dbg !39
  %188 = bitcast i32 %187 to float, !dbg !39
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !39
  %190 = bitcast i32 %189 to float, !dbg !39
  %191 = fcmp ogt float %188, %190, !dbg !43
  %192 = fcmp uno float %188, 0.000000e+00, !dbg !45
  %193 = or i1 %192, %191, !dbg !46
  %194 = and i32 %8, 1, !dbg !39
  %195 = icmp eq i32 %194, 0, !dbg !39
  %196 = and i1 %185, %195, !dbg !39
  %197 = select i1 %193, i32 %187, i32 %189, !dbg !47
  %198 = insertelement <1 x i32> poison, i32 %197, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %198, i1 %196) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !39
  %200 = load float, ptr addrspace(3) %199, align 8, !dbg !39
  %201 = fsub float %145, %200, !dbg !48
  %202 = fsub float %146, %200, !dbg !48
  %203 = fsub float %147, %200, !dbg !48
  %204 = fsub float %148, %200, !dbg !48
  %205 = fmul float %201, 0x3FF7154760000000, !dbg !49
  %206 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %205) #4, !dbg !49
  %207 = fmul float %202, 0x3FF7154760000000, !dbg !49
  %208 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %207) #4, !dbg !49
  %209 = fmul float %203, 0x3FF7154760000000, !dbg !49
  %210 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %209) #4, !dbg !49
  %211 = fmul float %204, 0x3FF7154760000000, !dbg !49
  %212 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %211) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %213 = fadd float %206, %208, !dbg !54
  %214 = fadd float %213, %210, !dbg !54
  %215 = fadd float %214, %212, !dbg !54
  %216 = select i1 %97, float %215, float 0.000000e+00, !dbg !54
  %217 = bitcast float %216 to i32, !dbg !50
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 16, i32 31), !dbg !50
  %219 = bitcast i32 %218 to float, !dbg !50
  %220 = fadd float %216, %219, !dbg !54
  %221 = bitcast float %220 to i32, !dbg !50
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 8, i32 31), !dbg !50
  %223 = bitcast i32 %222 to float, !dbg !50
  %224 = fadd float %220, %223, !dbg !54
  %225 = bitcast float %224 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %225, i1 %178) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %226 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %186, i1 %185) #4, !dbg !50
  %227 = bitcast i32 %226 to float, !dbg !50
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !50
  %229 = bitcast i32 %228 to float, !dbg !50
  %230 = fadd float %227, %229, !dbg !54
  %231 = bitcast float %230 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %231, i1 %196) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %232 = load float, ptr addrspace(3) %199, align 8, !dbg !50
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %232) #4, !dbg !56
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %232) #4, !dbg !56
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %232) #4, !dbg !56
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %232) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %237 = and i32 %13, 252, !dbg !57
  %238 = lshr exact i32 %27, 1, !dbg !57
  %239 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %238, !dbg !57
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %28, !dbg !57
  %241 = bitcast float %233 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !57
  %242 = getelementptr float, ptr addrspace(3) %239, i32 %34, !dbg !57
  %243 = bitcast float %234 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !57
  %244 = getelementptr float, ptr addrspace(3) %239, i32 %39, !dbg !57
  %245 = bitcast float %235 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !57
  %246 = getelementptr float, ptr addrspace(3) %239, i32 %44, !dbg !57
  %247 = bitcast float %236 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %248 = lshr i32 %13, 3, !dbg !57
  %249 = and i32 %248, 28, !dbg !57
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !57
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %237, !dbg !57
  %.extract = load i32, ptr addrspace(3) %251, align 16, !dbg !57
  %252 = getelementptr inbounds i8, ptr addrspace(3) %251, i32 4, !dbg !57
  %.extract17 = load i32, ptr addrspace(3) %252, align 4, !dbg !57
  %253 = getelementptr inbounds i8, ptr addrspace(3) %251, i32 8, !dbg !57
  %.extract18 = load i32, ptr addrspace(3) %253, align 8, !dbg !57
  %254 = getelementptr inbounds i8, ptr addrspace(3) %251, i32 12, !dbg !57
  %.extract19 = load i32, ptr addrspace(3) %254, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %20, i1 %12) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cir2ogqxdnfch7jghg3mhfqn4tzwovovbt25pdbdcl5htua4vjjl.py", directory: "inductor_cache/ir")
!4 = !{ptr @triton_per_fused__softmax_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_3", linkageName: "triton_per_fused__softmax_add_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 34, scope: !11)
!18 = !DILocation(line: 32, column: 21, scope: !11)
!19 = !DILocation(line: 31, column: 19, scope: !11)
!20 = !DILocation(line: 33, column: 42, scope: !11)
!21 = !DILocation(line: 33, column: 39, scope: !11)
!22 = !DILocation(line: 33, column: 34, scope: !11)
!23 = !DILocation(line: 33, column: 47, scope: !11)
!24 = !DILocation(line: 34, column: 38, scope: !11)
!25 = !DILocation(line: 34, column: 35, scope: !11)
!26 = !DILocation(line: 34, column: 30, scope: !11)
!27 = !DILocation(line: 34, column: 43, scope: !11)
!28 = !DILocation(line: 36, column: 18, scope: !11)
!29 = !DILocation(line: 37, column: 18, scope: !11)
!30 = !DILocation(line: 38, column: 32, scope: !11)
!31 = !DILocation(line: 39, column: 37, scope: !11)
!32 = !DILocation(line: 39, column: 62, scope: !11)
!33 = !DILocation(line: 32, column: 27, scope: !11)
!34 = !DILocation(line: 40, column: 35, scope: !11)
!35 = !DILocation(line: 40, column: 30, scope: !11)
!36 = !DILocation(line: 40, column: 44, scope: !11)
!37 = !DILocation(line: 41, column: 18, scope: !11)
!38 = !DILocation(line: 43, column: 34, scope: !11)
!39 = !DILocation(line: 131, column: 29, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !11, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 39, scope: !11)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !42)
!46 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !42)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !42)
!48 = !DILocation(line: 45, column: 19, scope: !11)
!49 = !DILocation(line: 46, column: 24, scope: !11)
!50 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 49, column: 26, scope: !11)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 50, column: 20, scope: !11)
!57 = !DILocation(line: 51, column: 48, scope: !11)
!58 = !DILocation(line: 51, column: 4, scope: !11)
