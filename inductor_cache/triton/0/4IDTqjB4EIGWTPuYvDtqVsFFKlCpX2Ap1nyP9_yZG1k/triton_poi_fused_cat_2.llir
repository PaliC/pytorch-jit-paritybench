; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 512, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 16, !dbg !15
  %18 = srem i32 %17, 8, !dbg !16
  %19 = mul i32 %17, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %.frozen6 = freeze i32 %15, !dbg !18
  %20 = sdiv i32 %.frozen6, 128, !dbg !18
  %21 = icmp slt i32 %18, 4, !dbg !19
  %22 = mul i32 %20, 128, !dbg !20
  %srem.decomposed = sub i32 %.frozen6, %22, !dbg !20
  %23 = shl nsw i32 %20, 6, !dbg !21
  %24 = add nsw i32 %23, %srem.decomposed, !dbg !22
  %25 = sext i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !23
  %27 = and i1 %16, %21, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !25
  %29 = and i32 %18, -2, !dbg !26
  %30 = icmp eq i32 %29, 4, !dbg !26
  %31 = shl nsw i32 %18, 4, !dbg !27
  %32 = shl nsw i32 %20, 5, !dbg !28
  %33 = add nsw i32 %32, %.decomposed, !dbg !27
  %34 = add nsw i32 %33, -64, !dbg !29
  %35 = add nsw i32 %34, %31, !dbg !30
  %36 = sext i32 %35 to i64, !dbg !31
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !31
  %38 = and i1 %16, %30, !dbg !32
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !33
  %40 = icmp sgt i32 %18, 5, !dbg !34
  %41 = add nsw i32 %18, -6, !dbg !35
  %42 = shl nsw i32 %41, 4, !dbg !36
  %43 = add nsw i32 %33, %42, !dbg !37
  %44 = sext i32 %43 to i64, !dbg !38
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !38
  %46 = and i1 %16, %40, !dbg !39
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !40
  %48 = sext i32 %41 to i64, !dbg !41
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !41
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %46, i32 0, i1 %46) #3, !dbg !42
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %46, i32 0, i1 %46) #3, !dbg !42
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !43
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %46, i32 0, i1 %46) #3, !dbg !44
  %54 = bitcast i32 %53 to float, !dbg !44
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %46, i32 0, i1 %46) #3, !dbg !44
  %56 = bitcast i32 %55 to float, !dbg !44
  %57 = fadd float %54, 0x3EE4F8B580000000, !dbg !45
  %58 = fadd float %56, 0x3EE4F8B580000000, !dbg !45
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %59, 0, !dbg !46
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %60, 0, !dbg !46
  br i1 %.not.i, label %66, label %61, !dbg !46

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !46

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

66:                                               ; preds = %9
  br i1 %.not1.i, label %69, label %67, !dbg !46

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !46
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %71, 0, !dbg !46
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !46
  br i1 %.not.i1, label %78, label %73, !dbg !46

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !46

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !46

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !46
  %83 = extractvalue { i32, i32 } %47, 1, !dbg !40
  %84 = bitcast i32 %83 to float, !dbg !40
  %85 = bitcast i32 %51 to float, !dbg !42
  %86 = fsub float %84, %85, !dbg !47
  %87 = extractvalue { i32, i32 } %47, 0, !dbg !40
  %88 = bitcast i32 %87 to float, !dbg !40
  %89 = bitcast i32 %50 to float, !dbg !42
  %90 = fsub float %88, %89, !dbg !47
  %91 = extractvalue { i32, i32 } %39, 1, !dbg !33
  %92 = extractvalue { i32, i32 } %39, 0, !dbg !33
  %93 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %94 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !48
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !48
  %97 = fmul float %90, %95, !dbg !49
  %98 = fmul float %86, %96, !dbg !49
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !50
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %46, i32 0, i1 %46) #3, !dbg !51
  %101 = bitcast i32 %100 to float, !dbg !51
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %46, i32 0, i1 %46) #3, !dbg !51
  %103 = bitcast i32 %102 to float, !dbg !51
  %104 = fmul float %97, %101, !dbg !52
  %105 = fmul float %98, %103, !dbg !52
  %106 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !53
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %46, i32 0, i1 %46) #3, !dbg !54
  %108 = bitcast i32 %107 to float, !dbg !54
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %46, i32 0, i1 %46) #3, !dbg !54
  %110 = bitcast i32 %109 to float, !dbg !54
  %111 = fadd float %104, %108, !dbg !55
  %112 = fadd float %105, %110, !dbg !55
  %113 = fcmp olt float %111, 0.000000e+00, !dbg !56
  %114 = fcmp olt float %112, 0.000000e+00, !dbg !56
  %115 = select i1 %113, float 0.000000e+00, float %111, !dbg !60
  %116 = select i1 %114, float 0.000000e+00, float %112, !dbg !60
  %117 = sext i32 %15 to i64, !dbg !61
  %118 = getelementptr float, ptr addrspace(1) %7, i64 %117, !dbg !61
  %119 = bitcast float %115 to i32, !dbg !62
  %120 = select i1 %40, i32 %119, i32 0, !dbg !63
  %121 = select i1 %30, i32 %92, i32 %120, !dbg !64
  %122 = select i1 %21, i32 %94, i32 %121, !dbg !65
  %123 = bitcast float %116 to i32, !dbg !62
  %124 = select i1 %40, i32 %123, i32 0, !dbg !63
  %125 = select i1 %30, i32 %91, i32 %124, !dbg !64
  %126 = select i1 %21, i32 %93, i32 %125, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %122, i32 %126, ptr addrspace(1) %118, i1 %16) #3, !dbg !62
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqzu7qjclicq43ql4cb3efpdzmyeygj5zuqohnejswpedcd34jjo.py", directory: "inductor_cache/qz")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 40, scope: !7)
!28 = !DILocation(line: 38, column: 56, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 53, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 68, scope: !7)
!33 = !DILocation(line: 38, column: 61, scope: !7)
!34 = !DILocation(line: 39, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 47, scope: !7)
!36 = !DILocation(line: 42, column: 40, scope: !7)
!37 = !DILocation(line: 42, column: 53, scope: !7)
!38 = !DILocation(line: 42, column: 31, scope: !7)
!39 = !DILocation(line: 42, column: 69, scope: !7)
!40 = !DILocation(line: 42, column: 61, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 43, scope: !7)
!43 = !DILocation(line: 45, column: 31, scope: !7)
!44 = !DILocation(line: 45, column: 43, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 27, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 31, scope: !7)
!51 = !DILocation(line: 54, column: 43, scope: !7)
!52 = !DILocation(line: 55, column: 20, scope: !7)
!53 = !DILocation(line: 56, column: 31, scope: !7)
!54 = !DILocation(line: 56, column: 43, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 59, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 64, column: 25, scope: !7)
!62 = !DILocation(line: 64, column: 37, scope: !7)
!63 = !DILocation(line: 61, column: 35, scope: !7)
!64 = !DILocation(line: 62, column: 34, scope: !7)
!65 = !DILocation(line: 63, column: 33, scope: !7)
!66 = !DILocation(line: 64, column: 4, scope: !7)
