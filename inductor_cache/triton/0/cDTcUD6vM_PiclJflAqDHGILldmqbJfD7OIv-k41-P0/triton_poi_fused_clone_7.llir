; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_clone_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %.fr = freeze i32 %6, !dbg !11
  %7 = shl i32 %.fr, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = srem i32 %11, 768, !dbg !14
  %14 = srem i32 %12, 768, !dbg !14
  %15 = srem i32 %11, 96, !dbg !15
  %16 = srem i32 %12, 96, !dbg !15
  %17 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !16
  %18 = shufflevector <2 x i32> %17, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %19 = sdiv <2 x i32> %18, <i32 6144, i32 768>, !dbg !16
  %20 = srem <2 x i32> %19, <i32 2, i32 8>, !dbg !17
  %21 = mul nsw <2 x i32> %20, <i32 768, i32 1536>, !dbg !18
  %22 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !16
  %23 = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %24 = sdiv <2 x i32> %23, <i32 6144, i32 768>, !dbg !16
  %25 = srem <2 x i32> %24, <i32 2, i32 8>, !dbg !17
  %26 = mul nsw <2 x i32> %25, <i32 768, i32 1536>, !dbg !18
  %27 = srem i32 %11, 12288, !dbg !19
  %28 = srem i32 %12, 12288, !dbg !19
  %29 = sub nsw i32 %11, %27, !dbg !20
  %30 = add i32 %29, %13, !dbg !21
  %31 = extractelement <2 x i32> %21, i64 0, !dbg !19
  %32 = add i32 %30, %31, !dbg !19
  %33 = extractelement <2 x i32> %21, i64 1, !dbg !22
  %34 = add i32 %32, %33, !dbg !22
  %35 = sub nsw i32 %12, %28, !dbg !20
  %36 = add i32 %35, %14, !dbg !21
  %37 = extractelement <2 x i32> %26, i64 0, !dbg !19
  %38 = add i32 %36, %37, !dbg !19
  %39 = extractelement <2 x i32> %26, i64 1, !dbg !22
  %40 = add i32 %38, %39, !dbg !22
  %41 = sext i32 %34 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = sext i32 %40 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = sext i32 %15 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !25
  %65 = sext i32 %16 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = bitcast i32 %78 to float, !dbg !26
  %83 = bitcast i32 %79 to float, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !27
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !28
  %92 = bitcast i32 %88 to float, !dbg !28
  %93 = bitcast i32 %89 to float, !dbg !28
  %94 = bitcast i32 %90 to float, !dbg !28
  %95 = bitcast i32 %91 to float, !dbg !28
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !28
  %101 = bitcast i32 %97 to float, !dbg !28
  %102 = bitcast i32 %98 to float, !dbg !28
  %103 = bitcast i32 %99 to float, !dbg !28
  %104 = bitcast i32 %100 to float, !dbg !28
  %105 = fmul float %50, %72, !dbg !29
  %106 = fmul float %51, %73, !dbg !29
  %107 = fmul float %52, %74, !dbg !29
  %108 = fmul float %53, %75, !dbg !29
  %109 = fmul float %59, %81, !dbg !29
  %110 = fmul float %60, %82, !dbg !29
  %111 = fmul float %61, %83, !dbg !29
  %112 = fmul float %62, %84, !dbg !29
  %113 = fadd float %105, %92, !dbg !30
  %114 = fadd float %106, %93, !dbg !30
  %115 = fadd float %107, %94, !dbg !30
  %116 = fadd float %108, %95, !dbg !30
  %117 = fadd float %109, %101, !dbg !30
  %118 = fadd float %110, %102, !dbg !30
  %119 = fadd float %111, %103, !dbg !30
  %120 = fadd float %112, %104, !dbg !30
  %121 = sext i32 %11 to i64, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !31
  %123 = sext i32 %12 to i64, !dbg !31
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !31
  %125 = bitcast float %113 to i32, !dbg !32
  %126 = bitcast float %114 to i32, !dbg !32
  %127 = bitcast float %115 to i32, !dbg !32
  %128 = bitcast float %116 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %125, i32 %126, i32 %127, i32 %128, ptr addrspace(1) %122, i1 true) #1, !dbg !32
  %129 = bitcast float %117 to i32, !dbg !32
  %130 = bitcast float %118 to i32, !dbg !32
  %131 = bitcast float %119 to i32, !dbg !32
  %132 = bitcast float %120 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %129, i32 %130, i32 %131, i32 %132, ptr addrspace(1) %124, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnxdj7gkuyqggjcaqnews3jmdumeu5rfperjscek5mxbtloqxgos.py", directory: "inductor_cache/nx")
!4 = !{ptr @triton_poi_fused_clone_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_7", linkageName: "triton_poi_fused_clone_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 28, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 29, scope: !7)
!18 = !DILocation(line: 30, column: 39, scope: !7)
!19 = !DILocation(line: 30, column: 60, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 44, scope: !7)
!22 = !DILocation(line: 30, column: 54, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 65, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
