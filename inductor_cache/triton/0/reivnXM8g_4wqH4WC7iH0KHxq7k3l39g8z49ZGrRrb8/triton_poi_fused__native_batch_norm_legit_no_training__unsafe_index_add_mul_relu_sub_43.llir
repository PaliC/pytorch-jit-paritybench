; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, i32 %19) local_unnamed_addr !dbg !7 {
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %22 = shl i32 %21, 7, !dbg !11
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %24 = and i32 %23, 127, !dbg !12
  %25 = or disjoint i32 %22, %24, !dbg !13
  %26 = icmp slt i32 %25, 1024, !dbg !14
  %27 = sdiv i32 %25, 16, !dbg !15
  %28 = srem i32 %27, 16, !dbg !16
  %.frozen = freeze i32 %25, !dbg !17
  %29 = sdiv i32 %.frozen, 4, !dbg !17
  %30 = srem i32 %29, 4, !dbg !18
  %31 = mul i32 %29, 4, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = sext i32 %25 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %26) #3, !dbg !21
  %35 = sext i32 %28 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %26) #3, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %26) #3, !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %26) #3, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %26) #3, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %26) #3, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !32
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %26) #3, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %8, i64 %35, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %26) #3, !dbg !35
  %51 = bitcast i32 %50 to float, !dbg !35
  %52 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !36
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %26) #3, !dbg !37
  %54 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !38
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %26) #3, !dbg !39
  %56 = sext i32 %30 to i64, !dbg !40
  %57 = getelementptr i64, ptr addrspace(1) %11, i64 %56, !dbg !40
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 %26) #3, !dbg !41
  %59 = sext i32 %.decomposed to i64, !dbg !42
  %60 = getelementptr i64, ptr addrspace(1) %12, i64 %59, !dbg !42
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %26) #3, !dbg !43
  %62 = getelementptr i64, ptr addrspace(1) %14, i64 %59, !dbg !44
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %26) #3, !dbg !45
  %64 = getelementptr float, ptr addrspace(1) %15, i64 %59, !dbg !46
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %26) #3, !dbg !47
  %66 = getelementptr float, ptr addrspace(1) %16, i64 %32, !dbg !48
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %26) #3, !dbg !49
  %68 = getelementptr i64, ptr addrspace(1) %17, i64 %56, !dbg !50
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %26) #3, !dbg !51
  %70 = getelementptr float, ptr addrspace(1) %18, i64 %56, !dbg !52
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %26) #3, !dbg !53
  %72 = fadd float %40, 0x3EE4F8B580000000, !dbg !54
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %73, 0, !dbg !55
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %74, 0, !dbg !55
  br i1 %.not.i, label %80, label %75, !dbg !55

75:                                               ; preds = %20
  br i1 %.not1.i, label %78, label %76, !dbg !55

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

80:                                               ; preds = %20
  br i1 %.not1.i, label %83, label %81, !dbg !55

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !55
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %86 = fadd float %51, 0x3EE4F8B580000000, !dbg !57
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i1 = icmp eq i32 %87, 0, !dbg !58
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i4 = icmp eq i32 %88, 0, !dbg !58
  br i1 %.not.i1, label %94, label %89, !dbg !58

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !58

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !58

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

__nv_sqrtf.exit5:                                 ; preds = %90, %92, %95, %97
  %.0.i3 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !58
  %99 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !21
  %100 = insertelement <2 x i32> %99, i32 %46, i64 1, !dbg !21
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !21
  %102 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !23
  %103 = insertelement <2 x i32> %102, i32 %48, i64 1, !dbg !23
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !23
  %105 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !27
  %106 = insertelement <2 x i32> %105, i32 %53, i64 1, !dbg !27
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !27
  %108 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !29
  %109 = insertelement <2 x i32> %108, i32 %55, i64 1, !dbg !29
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !29
  %111 = bitcast i32 %71 to float, !dbg !53
  %112 = bitcast i32 %67 to float, !dbg !49
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !59
  %114 = fsub <2 x float> %101, %104, !dbg !60
  %115 = insertelement <2 x float> poison, float %85, i64 0, !dbg !61
  %116 = insertelement <2 x float> %115, float %113, i64 1, !dbg !61
  %117 = fmul <2 x float> %114, %116, !dbg !61
  %118 = fmul <2 x float> %117, %107, !dbg !62
  %119 = fadd <2 x float> %118, %110, !dbg !63
  %shift = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !64
  %120 = fadd <2 x float> %119, %shift, !dbg !64
  %121 = extractelement <2 x float> %120, i64 0, !dbg !64
  %122 = lshr i64 %58, 62, !dbg !65
  %123 = and i64 %122, 2, !dbg !65
  %124 = add i64 %123, %58, !dbg !65
  %125 = lshr i64 %61, 62, !dbg !66
  %126 = and i64 %125, 2, !dbg !66
  %127 = shl i64 %124, 1, !dbg !67
  %128 = shl nsw i32 %27, 2, !dbg !68
  %129 = sext i32 %128 to i64, !dbg !69
  %130 = getelementptr float, ptr addrspace(1) %13, i64 %61, !dbg !70
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %126, !dbg !70
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %127, !dbg !70
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %129, !dbg !70
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %26) #3, !dbg !71
  %135 = lshr i64 %63, 62, !dbg !72
  %136 = and i64 %135, 2, !dbg !72
  %137 = getelementptr float, ptr addrspace(1) %13, i64 %63, !dbg !73
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %136, !dbg !73
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %127, !dbg !73
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %129, !dbg !73
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %26) #3, !dbg !74
  %142 = fadd float %121, %112, !dbg !75
  %143 = lshr i64 %69, 62, !dbg !76
  %144 = and i64 %143, 2, !dbg !76
  %145 = add i64 %144, %69, !dbg !76
  %146 = shl i64 %145, 1, !dbg !77
  %147 = getelementptr float, ptr addrspace(1) %131, i64 %146, !dbg !78
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %129, !dbg !78
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %26) #3, !dbg !79
  %150 = getelementptr float, ptr addrspace(1) %138, i64 %146, !dbg !80
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %129, !dbg !80
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %26) #3, !dbg !81
  %153 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !79
  %154 = insertelement <2 x i32> %153, i32 %134, i64 1, !dbg !79
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !79
  %156 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !81
  %157 = insertelement <2 x i32> %156, i32 %141, i64 1, !dbg !81
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !81
  %159 = fsub <2 x float> %158, %155, !dbg !82
  %160 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !83
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !83
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !83
  %163 = fmul <2 x float> %159, %162, !dbg !83
  %164 = fadd <2 x float> %163, %155, !dbg !84
  %165 = extractelement <2 x float> %164, i64 0, !dbg !85
  %166 = extractelement <2 x float> %164, i64 1, !dbg !86
  %167 = fsub float %165, %166, !dbg !85
  %168 = fmul float %167, %111, !dbg !87
  %169 = fadd float %166, %168, !dbg !86
  %170 = fadd float %142, %169, !dbg !88
  %171 = fcmp olt float %170, 0.000000e+00, !dbg !89
  %172 = select i1 %171, float 0.000000e+00, float %170, !dbg !93
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !94
  %174 = bitcast float %172 to i32, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %173, i1 %26) #3, !dbg !95
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnhornliljh3l6g4f32kda7p4gognefy5xxbcbz6dnhl3zpzesl7.py", directory: "inductor_cache/nh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 36, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 32, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 32, scope: !7)
!51 = !DILocation(line: 44, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 32, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 48, column: 18, scope: !7)
!55 = !DILocation(line: 49, column: 26, scope: !7)
!56 = !DILocation(line: 51, column: 18, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 27, scope: !7)
!59 = !DILocation(line: 60, column: 19, scope: !7)
!60 = !DILocation(line: 46, column: 18, scope: !7)
!61 = !DILocation(line: 54, column: 19, scope: !7)
!62 = !DILocation(line: 55, column: 20, scope: !7)
!63 = !DILocation(line: 56, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 35, scope: !7)
!66 = !DILocation(line: 72, column: 35, scope: !7)
!67 = !DILocation(line: 73, column: 42, scope: !7)
!68 = !DILocation(line: 73, column: 52, scope: !7)
!69 = !DILocation(line: 73, column: 50, scope: !7)
!70 = !DILocation(line: 73, column: 32, scope: !7)
!71 = !DILocation(line: 73, column: 57, scope: !7)
!72 = !DILocation(line: 76, column: 35, scope: !7)
!73 = !DILocation(line: 77, column: 32, scope: !7)
!74 = !DILocation(line: 77, column: 57, scope: !7)
!75 = !DILocation(line: 81, column: 20, scope: !7)
!76 = !DILocation(line: 84, column: 35, scope: !7)
!77 = !DILocation(line: 85, column: 42, scope: !7)
!78 = !DILocation(line: 85, column: 32, scope: !7)
!79 = !DILocation(line: 85, column: 57, scope: !7)
!80 = !DILocation(line: 86, column: 32, scope: !7)
!81 = !DILocation(line: 86, column: 57, scope: !7)
!82 = !DILocation(line: 87, column: 20, scope: !7)
!83 = !DILocation(line: 88, column: 20, scope: !7)
!84 = !DILocation(line: 89, column: 20, scope: !7)
!85 = !DILocation(line: 90, column: 20, scope: !7)
!86 = !DILocation(line: 92, column: 20, scope: !7)
!87 = !DILocation(line: 91, column: 20, scope: !7)
!88 = !DILocation(line: 93, column: 20, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 95, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!94 = !DILocation(line: 96, column: 28, scope: !7)
!95 = !DILocation(line: 96, column: 40, scope: !7)
!96 = !DILocation(line: 96, column: 4, scope: !7)
