; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 512, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 16, !dbg !15
  %16 = srem i32 %15, 8, !dbg !16
  %17 = mul i32 %15, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %.frozen1 = freeze i32 %13, !dbg !18
  %18 = sdiv i32 %.frozen1, 128, !dbg !18
  %19 = icmp slt i32 %16, 4, !dbg !19
  %20 = mul i32 %18, 128, !dbg !20
  %srem.decomposed = sub i32 %.frozen1, %20, !dbg !20
  %21 = shl nsw i32 %18, 6, !dbg !21
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = and i1 %14, %19, !dbg !24
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !25
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !25
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !25
  %29 = bitcast i32 %27 to float, !dbg !25
  %30 = bitcast i32 %28 to float, !dbg !25
  %31 = fcmp ogt float %29, 0.000000e+00, !dbg !26
  %32 = fcmp ogt float %30, 0.000000e+00, !dbg !26
  %33 = fmul float %29, 0x3FC99999A0000000, !dbg !27
  %34 = fmul float %30, 0x3FC99999A0000000, !dbg !27
  %35 = select i1 %31, float %29, float %33, !dbg !28
  %36 = select i1 %32, float %30, float %34, !dbg !28
  %37 = fadd float %35, 0.000000e+00, !dbg !29
  %38 = fadd float %36, 0.000000e+00, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !30
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !31
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !31
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !31
  %43 = bitcast i32 %41 to float, !dbg !31
  %44 = bitcast i32 %42 to float, !dbg !31
  %45 = fcmp ogt float %43, 0.000000e+00, !dbg !32
  %46 = fcmp ogt float %44, 0.000000e+00, !dbg !32
  %47 = fmul float %43, 0x3FC99999A0000000, !dbg !33
  %48 = fmul float %44, 0x3FC99999A0000000, !dbg !33
  %49 = select i1 %45, float %43, float %47, !dbg !34
  %50 = select i1 %46, float %44, float %48, !dbg !34
  %51 = fadd float %37, %49, !dbg !35
  %52 = fadd float %38, %50, !dbg !35
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !36
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !37
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !37
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !37
  %57 = bitcast i32 %55 to float, !dbg !37
  %58 = bitcast i32 %56 to float, !dbg !37
  %59 = fcmp ogt float %57, 0.000000e+00, !dbg !38
  %60 = fcmp ogt float %58, 0.000000e+00, !dbg !38
  %61 = fmul float %57, 0x3FC99999A0000000, !dbg !39
  %62 = fmul float %58, 0x3FC99999A0000000, !dbg !39
  %63 = select i1 %59, float %57, float %61, !dbg !40
  %64 = select i1 %60, float %58, float %62, !dbg !40
  %65 = fadd float %51, %63, !dbg !41
  %66 = fadd float %52, %64, !dbg !41
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !42
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !43
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !43
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !43
  %71 = bitcast i32 %69 to float, !dbg !43
  %72 = bitcast i32 %70 to float, !dbg !43
  %73 = fcmp ogt float %71, 0.000000e+00, !dbg !44
  %74 = fcmp ogt float %72, 0.000000e+00, !dbg !44
  %75 = fmul float %71, 0x3FC99999A0000000, !dbg !45
  %76 = fmul float %72, 0x3FC99999A0000000, !dbg !45
  %77 = select i1 %73, float %71, float %75, !dbg !46
  %78 = select i1 %74, float %72, float %76, !dbg !46
  %79 = fadd float %65, %77, !dbg !47
  %80 = fadd float %66, %78, !dbg !47
  %81 = icmp sgt i32 %16, 3, !dbg !48
  %82 = shl nsw i32 %16, 4, !dbg !49
  %83 = add nsw i32 %.decomposed, -64, !dbg !49
  %84 = add nsw i32 %83, %21, !dbg !50
  %85 = add nsw i32 %84, %82, !dbg !51
  %86 = sext i32 %85 to i64, !dbg !52
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !52
  %88 = and i1 %14, %81, !dbg !53
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #1, !dbg !54
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !54
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !54
  %92 = sext i32 %13 to i64, !dbg !55
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %92, !dbg !55
  %94 = bitcast float %79 to i32, !dbg !56
  %95 = select i1 %19, i32 %94, i32 %90, !dbg !57
  %96 = bitcast float %80 to i32, !dbg !56
  %97 = select i1 %19, i32 %96, i32 %91, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %95, i32 %97, ptr addrspace(1) %93, i1 %14) #1, !dbg !56
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4hdglrik46anasuvweqbx7dsoj5fp7fhptid2su4hp2tzch6g7m.py", directory: "inductor_cache/4h")
!4 = !{ptr @triton_poi_fused_cat_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_3", linkageName: "triton_poi_fused_cat_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 33, scope: !7)
!29 = !DILocation(line: 39, column: 20, scope: !7)
!30 = !DILocation(line: 40, column: 31, scope: !7)
!31 = !DILocation(line: 40, column: 54, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 35, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 54, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 35, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 31, scope: !7)
!43 = !DILocation(line: 50, column: 54, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 35, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 40, scope: !7)
!50 = !DILocation(line: 60, column: 36, scope: !7)
!51 = !DILocation(line: 60, column: 53, scope: !7)
!52 = !DILocation(line: 60, column: 31, scope: !7)
!53 = !DILocation(line: 60, column: 69, scope: !7)
!54 = !DILocation(line: 60, column: 61, scope: !7)
!55 = !DILocation(line: 62, column: 25, scope: !7)
!56 = !DILocation(line: 62, column: 37, scope: !7)
!57 = !DILocation(line: 0, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
