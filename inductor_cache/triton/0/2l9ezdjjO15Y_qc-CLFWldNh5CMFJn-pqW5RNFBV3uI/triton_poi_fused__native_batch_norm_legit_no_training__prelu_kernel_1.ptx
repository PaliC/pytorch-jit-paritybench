//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1 // -- Begin function triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
.global .align 1 .b8 _$_str_$_2[17] = {95, 95, 67, 85, 68, 65, 95, 80, 82, 69, 67, 95, 83, 81, 82, 84};
                                        // @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1
.visible .entry triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1(
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_0,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_1,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_2,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_3,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_4,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_5,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_6,
	.param .u32 triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_7
)
.reqntid 32, 1, 1
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<15>;
	.reg .b64 	%rd<11>;
	.loc	1 19 0                          // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:19:0

// %bb.0:                               // %__nv_sqrtf.exit
	ld.param.u64 	%rd8, [triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_0];
	ld.param.u64 	%rd9, [triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_1];
$L__tmp0:
	.loc	1 21 28                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:21:28
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	.loc	1 21 33                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:21:33
	shl.b32 	%r12, %r1, 4;
	ld.param.u64 	%rd2, [triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_2];
	ld.param.u64 	%rd3, [triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_3];
	.loc	1 22 36                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:22:36
	mov.u32 	%r13, %tid.x;
	and.b32  	%r14, %r13, 15;
	ld.param.u64 	%rd4, [triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_4];
	.loc	1 22 23                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:22:23
	or.b32  	%r15, %r12, %r14;
	ld.param.u64 	%rd5, [triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_5];
	.loc	1 23 21                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:23:21
	setp.lt.s32 	%p1, %r15, 16;
	ld.param.u64 	%rd6, [triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1_param_6];
	.loc	1 25 30                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:25:30
	mul.wide.s32 	%rd10, %r15, 4;
	add.s64 	%rd1, %rd9, %rd10;
	.loc	1 25 35                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:25:35
	// begin inline asm
	mov.u32 %r2, 0x0;
	@%p1 ld.global.b32 { %r2 }, [ %rd1 + 0 ];
	// end inline asm
	mov.pred 	%p2, -1;
	.loc	1 26 19                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:26:19
	// begin inline asm
	mov.u32 %r3, 0x0;
	@%p2 ld.global.b32 { %r3 }, [ %rd2 + 0 ];
	// end inline asm
	.loc	1 28 19                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:28:19
	// begin inline asm
	mov.u32 %r4, 0x0;
	@%p2 ld.global.b32 { %r4 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	%f1, %r4;
	.loc	1 30 20                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:30:20
	// begin inline asm
	mov.u32 %r5, 0x0;
	@%p2 ld.global.b32 { %r5 }, [ %rd4 + 0 ];
	// end inline asm
	.loc	1 32 20                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:32:20
	// begin inline asm
	mov.u32 %r6, 0x0;
	@%p2 ld.global.b32 { %r6 }, [ %rd5 + 0 ];
	// end inline asm
	.loc	1 34 20                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:34:20
	// begin inline asm
	mov.u32 %r7, 0x0;
	@%p2 ld.global.b32 { %r7 }, [ %rd6 + 0 ];
	// end inline asm
	.loc	1 38 18                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:38:18
	add.f32 	%f2, %f1, 0f3727C5AC;
	.loc	1 39 26                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:39:26
	sqrt.approx.ftz.f32 	%f3, %f2;
	.loc	1 25 35                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:25:35
	mov.b32 	%f4, %r2;
	.loc	1 26 19                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:26:19
	mov.b32 	%f5, %r3;
	.loc	1 36 18                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:36:18
	sub.f32 	%f6, %f4, %f5;
	.loc	1 34 20                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:34:20
	mov.b32 	%f7, %r7;
	.loc	1 32 20                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:32:20
	mov.b32 	%f8, %r6;
	.loc	1 30 20                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:30:20
	mov.b32 	%f9, %r5;
	.loc	1 22 36                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:22:36
	and.b32  	%r16, %r13, 16;
	.loc	1 41 19                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:41:19
	mov.b32 	%r10, %f3;
	mov.b32 	%r9, 1065353216;
	// begin inline asm
	div.full.f32 %r8, %r9, %r10;
	// end inline asm
	mov.b32 	%f10, %r8;
	.loc	1 44 19                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:44:19
	mul.f32 	%f11, %f6, %f10;
	.loc	1 46 20                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:46:20
	fma.rn.f32 	%f12, %f11, %f9, %f8;
	.loc	1 48 20                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:48:20
	setp.gt.f32 	%p8, %f12, 0f00000000;
	.loc	1 49 20                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:49:20
	mul.f32 	%f13, %f12, %f7;
	.loc	1 50 35                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:50:35
	selp.f32 	%f14, %f12, %f13, %p8;
	.loc	1 51 28                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:51:28
	add.s64 	%rd7, %rd8, %rd10;
	.loc	1 51 40                         // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:51:40
	setp.eq.s32 	%p9, %r16, 0;
	mov.b32 	%r11, %f14;
	and.pred  	%p7, %p9, %p1;
	// begin inline asm
	@%p7 st.global.b32 [ %rd7 + 0 ], { %r11 };
	// end inline asm
	.loc	1 51 4                          // ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py:51:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 95                                 // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x58 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 107
.b8 97
.b8 107
.b8 104
.b8 51
.b8 100
.b8 103
.b8 54
.b8 106
.b8 108
.b8 112
.b8 51
.b8 97
.b8 116
.b8 52
.b8 54
.b8 51
.b8 51
.b8 52
.b8 114
.b8 109
.b8 114
.b8 110
.b8 51
.b8 115
.b8 53
.b8 106
.b8 117
.b8 98
.b8 98
.b8 54
.b8 53
.b8 120
.b8 55
.b8 118
.b8 54
.b8 98
.b8 54
.b8 97
.b8 121
.b8 100
.b8 104
.b8 117
.b8 110
.b8 97
.b8 53
.b8 105
.b8 116
.b8 108
.b8 54
.b8 99
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 107
.b8 97
.b8 0
	}
	.section	.debug_macinfo	{	}
