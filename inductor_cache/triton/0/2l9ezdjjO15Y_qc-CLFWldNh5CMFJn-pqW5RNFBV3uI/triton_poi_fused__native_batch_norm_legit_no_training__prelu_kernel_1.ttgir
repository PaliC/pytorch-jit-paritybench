#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 9.99999974E-6 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<16xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<16xi32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<16xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<16xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_2 : tensor<16xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc7)
    %8 = tt.load %7, %5 : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc9)
    %10 = tt.load %9 : !tt.ptr<f32> loc(#loc10)
    %11 = tt.splat %10 : f32 -> tensor<16xf32, #blocked> loc(#loc11)
    %12 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc12)
    %13 = tt.load %12 : !tt.ptr<f32> loc(#loc13)
    %14 = tt.addptr %arg4, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc14)
    %15 = tt.load %14 : !tt.ptr<f32> loc(#loc15)
    %16 = tt.splat %15 : f32 -> tensor<16xf32, #blocked> loc(#loc16)
    %17 = tt.addptr %arg5, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc17)
    %18 = tt.load %17 : !tt.ptr<f32> loc(#loc18)
    %19 = tt.splat %18 : f32 -> tensor<16xf32, #blocked> loc(#loc19)
    %20 = tt.addptr %arg6, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc20)
    %21 = tt.load %20 : !tt.ptr<f32> loc(#loc21)
    %22 = tt.splat %21 : f32 -> tensor<16xf32, #blocked> loc(#loc22)
    %23 = arith.subf %8, %11 : tensor<16xf32, #blocked> loc(#loc23)
    %24 = arith.addf %13, %cst_0 : f32 loc(#loc24)
    %25 = tt.extern_elementwise %24 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (f32) -> f32 loc(#loc25)
    %26 = arith.divf %cst, %25 : f32 loc(#loc26)
    %27 = tt.splat %26 : f32 -> tensor<16xf32, #blocked> loc(#loc26)
    %28 = arith.mulf %23, %27 : tensor<16xf32, #blocked> loc(#loc27)
    %29 = arith.mulf %28, %16 : tensor<16xf32, #blocked> loc(#loc28)
    %30 = arith.addf %29, %19 : tensor<16xf32, #blocked> loc(#loc29)
    %31 = arith.cmpf ogt, %30, %cst_1 : tensor<16xf32, #blocked> loc(#loc30)
    %32 = arith.mulf %22, %30 : tensor<16xf32, #blocked> loc(#loc31)
    %33 = arith.select %31, %30, %32 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc32)
    %34 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>, #blocked> loc(#loc33)
    %35 = tt.addptr %34, %4 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc33)
    tt.store %35, %33, %5 : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc34)
    tt.return loc(#loc35)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":21:28)
#loc3 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":21:33)
#loc4 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":22:36)
#loc5 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":22:23)
#loc6 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":23:21)
#loc7 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":25:30)
#loc8 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":25:35)
#loc9 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":26:30)
#loc10 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":26:19)
#loc11 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":27:33)
#loc12 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":28:30)
#loc13 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":28:19)
#loc14 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":30:31)
#loc15 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":30:20)
#loc16 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":31:35)
#loc17 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":32:31)
#loc18 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":32:20)
#loc19 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":33:35)
#loc20 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":34:31)
#loc21 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":34:20)
#loc22 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":35:35)
#loc23 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":36:18)
#loc24 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":38:18)
#loc25 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":39:26)
#loc26 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":41:19)
#loc27 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":44:19)
#loc28 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":45:20)
#loc29 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":46:20)
#loc30 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":48:20)
#loc31 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":49:20)
#loc32 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":50:35)
#loc33 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":51:28)
#loc34 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":51:40)
#loc35 = loc("inductor_cache/ka/ckakh3dg6jlp3at46334rmrn3s5jubb65x7v6b6aydhuna5itl6c.py":51:4)
