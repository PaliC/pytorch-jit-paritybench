; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_75(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 5, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = lshr i32 %14, 3, !dbg !16
  %21 = and i32 %20, 15, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = or disjoint i32 %22, 16, !dbg !17
  %24 = icmp slt i32 %22, 64, !dbg !18
  %25 = icmp slt i32 %23, 64, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %26 = sdiv i32 %.frozen, 8, !dbg !19
  %27 = sdiv i32 %23, 8, !dbg !19
  %28 = mul i32 %26, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %.frozen4 = freeze i32 %17, !dbg !21
  %29 = sdiv i32 %.frozen4, 512, !dbg !21
  %30 = mul i32 %29, 512, !dbg !22
  %.decomposed5 = sub i32 %.frozen4, %30, !dbg !22
  %31 = sext i32 %26 to i64, !dbg !23
  %32 = getelementptr i64, ptr addrspace(1) %1, i64 %31, !dbg !23
  %33 = sext i32 %27 to i64, !dbg !23
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !23
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %24) #2, !dbg !24
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %24) #2, !dbg !24
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %24) #2, !dbg !24
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %24) #2, !dbg !24
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %25) #2, !dbg !24
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %25) #2, !dbg !24
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %25) #2, !dbg !24
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %25) #2, !dbg !24
  %43 = sext i32 %.decomposed to i64, !dbg !25
  %44 = getelementptr i64, ptr addrspace(1) %2, i64 %43, !dbg !25
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %24) #2, !dbg !26
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %24) #2, !dbg !26
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %24) #2, !dbg !26
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %24) #2, !dbg !26
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %25) #2, !dbg !26
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %25) #2, !dbg !26
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %25) #2, !dbg !26
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %25) #2, !dbg !26
  %53 = getelementptr i64, ptr addrspace(1) %4, i64 %43, !dbg !27
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %24) #2, !dbg !28
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %24) #2, !dbg !28
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %24) #2, !dbg !28
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %24) #2, !dbg !28
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %25) #2, !dbg !28
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %25) #2, !dbg !28
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %25) #2, !dbg !28
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %25) #2, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %24) #2, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %24) #2, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %24) #2, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %24) #2, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %25) #2, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %25) #2, !dbg !30
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %25) #2, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %25) #2, !dbg !30
  %71 = getelementptr i64, ptr addrspace(1) %6, i64 %31, !dbg !31
  %72 = getelementptr i64, ptr addrspace(1) %6, i64 %33, !dbg !31
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %24) #2, !dbg !32
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %24) #2, !dbg !32
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %24) #2, !dbg !32
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %24) #2, !dbg !32
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %25) #2, !dbg !32
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %25) #2, !dbg !32
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %25) #2, !dbg !32
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %25) #2, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !33
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %24) #2, !dbg !34
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %24) #2, !dbg !34
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %24) #2, !dbg !34
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %24) #2, !dbg !34
  %87 = bitcast i32 %86 to float, !dbg !34
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %25) #2, !dbg !34
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %25) #2, !dbg !34
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %25) #2, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %25) #2, !dbg !34
  %92 = bitcast i32 %91 to float, !dbg !34
  %93 = shl i32 %22, 9, !dbg !35
  %94 = shl i32 %23, 9, !dbg !35
  %95 = shl i32 %29, 15, !dbg !36
  %96 = add i32 %95, %.decomposed5, !dbg !37
  %97 = add i32 %96, %93, !dbg !38
  %98 = add i32 %96, %94, !dbg !38
  %99 = sext i32 %97 to i64, !dbg !39
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !39
  %101 = sext i32 %98 to i64, !dbg !39
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !39
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %24) #2, !dbg !40
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !40
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !40
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !40
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !40
  %108 = bitcast i32 %104 to float, !dbg !40
  %109 = bitcast i32 %105 to float, !dbg !40
  %110 = bitcast i32 %106 to float, !dbg !40
  %111 = bitcast i32 %107 to float, !dbg !40
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %25) #2, !dbg !40
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !40
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !40
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !40
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !40
  %117 = bitcast i32 %113 to float, !dbg !40
  %118 = bitcast i32 %114 to float, !dbg !40
  %119 = bitcast i32 %115 to float, !dbg !40
  %120 = bitcast i32 %116 to float, !dbg !40
  %121 = sext i32 %.decomposed5 to i64, !dbg !41
  %122 = getelementptr float, ptr addrspace(1) %8, i64 %121, !dbg !41
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 true) #2, !dbg !42
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !42
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !42
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !42
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !42
  %128 = bitcast i32 %124 to float, !dbg !42
  %129 = bitcast i32 %125 to float, !dbg !42
  %130 = bitcast i32 %126 to float, !dbg !42
  %131 = bitcast i32 %127 to float, !dbg !42
  %132 = lshr i64 %38, 61, !dbg !43
  %133 = and i64 %132, 4, !dbg !43
  %134 = add i64 %133, %38, !dbg !43
  %135 = lshr i64 %42, 61, !dbg !43
  %136 = and i64 %135, 4, !dbg !43
  %137 = add i64 %136, %42, !dbg !43
  %138 = lshr i64 %48, 61, !dbg !44
  %139 = and i64 %138, 4, !dbg !44
  %140 = add i64 %139, %48, !dbg !44
  %141 = lshr i64 %52, 61, !dbg !44
  %142 = and i64 %141, 4, !dbg !44
  %143 = add i64 %142, %52, !dbg !44
  %144 = shl i64 %134, 11, !dbg !45
  %145 = shl i64 %137, 11, !dbg !45
  %146 = shl i32 %29, 13, !dbg !46
  %147 = sext i32 %146 to i64, !dbg !47
  %.idx = shl i64 %140, 11, !dbg !48
  %148 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !48
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %121, !dbg !48
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %144, !dbg !48
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %147, !dbg !48
  %.idx1 = shl i64 %143, 11, !dbg !48
  %152 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !48
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %121, !dbg !48
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %145, !dbg !48
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %147, !dbg !48
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %24) #2, !dbg !49
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !49
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !49
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !49
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !49
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %25) #2, !dbg !49
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !49
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !49
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !49
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !49
  %166 = lshr i64 %57, 61, !dbg !50
  %167 = and i64 %166, 4, !dbg !50
  %168 = add i64 %167, %57, !dbg !50
  %169 = lshr i64 %61, 61, !dbg !50
  %170 = and i64 %169, 4, !dbg !50
  %171 = add i64 %170, %61, !dbg !50
  %.idx2 = shl i64 %168, 11, !dbg !51
  %172 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx2, !dbg !51
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %121, !dbg !51
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %144, !dbg !51
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %147, !dbg !51
  %.idx3 = shl i64 %171, 11, !dbg !51
  %176 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx3, !dbg !51
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %121, !dbg !51
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %145, !dbg !51
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %147, !dbg !51
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %24) #2, !dbg !52
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !52
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !52
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !52
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !52
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %25) #2, !dbg !52
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !52
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !52
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !52
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !52
  %190 = lshr i64 %76, 61, !dbg !53
  %191 = and i64 %190, 4, !dbg !53
  %192 = add i64 %191, %76, !dbg !53
  %193 = lshr i64 %80, 61, !dbg !53
  %194 = and i64 %193, 4, !dbg !53
  %195 = add i64 %194, %80, !dbg !53
  %196 = shl i64 %192, 11, !dbg !54
  %197 = shl i64 %195, 11, !dbg !54
  %198 = getelementptr float, ptr addrspace(1) %149, i64 %196, !dbg !55
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %147, !dbg !55
  %200 = getelementptr float, ptr addrspace(1) %153, i64 %197, !dbg !55
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %147, !dbg !55
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %24) #2, !dbg !56
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !56
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !56
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !56
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !56
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %201, i1 %25) #2, !dbg !56
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !56
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !56
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !56
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !56
  %212 = getelementptr float, ptr addrspace(1) %173, i64 %196, !dbg !57
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %147, !dbg !57
  %214 = getelementptr float, ptr addrspace(1) %177, i64 %197, !dbg !57
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %147, !dbg !57
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %213, i1 %24) #2, !dbg !58
  %217 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !58
  %218 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !58
  %219 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !58
  %220 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !58
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %215, i1 %25) #2, !dbg !58
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !58
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !58
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !58
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !58
  %226 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !56
  %227 = insertelement <2 x i32> %226, i32 %157, i64 1, !dbg !56
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !56
  %229 = insertelement <2 x i32> poison, i32 %217, i64 0, !dbg !58
  %230 = insertelement <2 x i32> %229, i32 %181, i64 1, !dbg !58
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !58
  %232 = fsub <2 x float> %231, %228, !dbg !59
  %233 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !60
  %234 = bitcast <2 x i32> %233 to <2 x float>, !dbg !60
  %235 = shufflevector <2 x float> %234, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %236 = fmul <2 x float> %232, %235, !dbg !60
  %237 = fadd <2 x float> %236, %228, !dbg !61
  %238 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !56
  %239 = insertelement <2 x i32> %238, i32 %158, i64 1, !dbg !56
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !56
  %241 = insertelement <2 x i32> poison, i32 %218, i64 0, !dbg !58
  %242 = insertelement <2 x i32> %241, i32 %182, i64 1, !dbg !58
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !58
  %244 = fsub <2 x float> %243, %240, !dbg !59
  %245 = fmul <2 x float> %244, %235, !dbg !60
  %246 = fadd <2 x float> %245, %240, !dbg !61
  %247 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !56
  %248 = insertelement <2 x i32> %247, i32 %159, i64 1, !dbg !56
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !56
  %250 = insertelement <2 x i32> poison, i32 %219, i64 0, !dbg !58
  %251 = insertelement <2 x i32> %250, i32 %183, i64 1, !dbg !58
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !58
  %253 = fsub <2 x float> %252, %249, !dbg !59
  %254 = fmul <2 x float> %253, %235, !dbg !60
  %255 = fadd <2 x float> %254, %249, !dbg !61
  %256 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !56
  %257 = insertelement <2 x i32> %256, i32 %160, i64 1, !dbg !56
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !56
  %259 = insertelement <2 x i32> poison, i32 %220, i64 0, !dbg !58
  %260 = insertelement <2 x i32> %259, i32 %184, i64 1, !dbg !58
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !58
  %262 = fsub <2 x float> %261, %258, !dbg !59
  %263 = fmul <2 x float> %262, %235, !dbg !60
  %264 = fadd <2 x float> %263, %258, !dbg !61
  %265 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !56
  %266 = insertelement <2 x i32> %265, i32 %162, i64 1, !dbg !56
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !56
  %268 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !58
  %269 = insertelement <2 x i32> %268, i32 %186, i64 1, !dbg !58
  %270 = bitcast <2 x i32> %269 to <2 x float>, !dbg !58
  %271 = fsub <2 x float> %270, %267, !dbg !59
  %272 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !60
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !60
  %274 = shufflevector <2 x float> %273, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %275 = fmul <2 x float> %271, %274, !dbg !60
  %276 = fadd <2 x float> %275, %267, !dbg !61
  %277 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !56
  %278 = insertelement <2 x i32> %277, i32 %163, i64 1, !dbg !56
  %279 = bitcast <2 x i32> %278 to <2 x float>, !dbg !56
  %280 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !58
  %281 = insertelement <2 x i32> %280, i32 %187, i64 1, !dbg !58
  %282 = bitcast <2 x i32> %281 to <2 x float>, !dbg !58
  %283 = fsub <2 x float> %282, %279, !dbg !59
  %284 = fmul <2 x float> %283, %274, !dbg !60
  %285 = fadd <2 x float> %284, %279, !dbg !61
  %286 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !56
  %287 = insertelement <2 x i32> %286, i32 %164, i64 1, !dbg !56
  %288 = bitcast <2 x i32> %287 to <2 x float>, !dbg !56
  %289 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !58
  %290 = insertelement <2 x i32> %289, i32 %188, i64 1, !dbg !58
  %291 = bitcast <2 x i32> %290 to <2 x float>, !dbg !58
  %292 = fsub <2 x float> %291, %288, !dbg !59
  %293 = fmul <2 x float> %292, %274, !dbg !60
  %294 = fadd <2 x float> %293, %288, !dbg !61
  %295 = insertelement <2 x i32> poison, i32 %211, i64 0, !dbg !56
  %296 = insertelement <2 x i32> %295, i32 %165, i64 1, !dbg !56
  %297 = bitcast <2 x i32> %296 to <2 x float>, !dbg !56
  %298 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !58
  %299 = insertelement <2 x i32> %298, i32 %189, i64 1, !dbg !58
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !58
  %301 = fsub <2 x float> %300, %297, !dbg !59
  %302 = fmul <2 x float> %301, %274, !dbg !60
  %303 = fadd <2 x float> %302, %297, !dbg !61
  %304 = extractelement <2 x float> %237, i64 0, !dbg !62
  %305 = extractelement <2 x float> %237, i64 1, !dbg !63
  %306 = fsub float %304, %305, !dbg !62
  %307 = extractelement <2 x float> %246, i64 0, !dbg !62
  %308 = extractelement <2 x float> %246, i64 1, !dbg !63
  %309 = fsub float %307, %308, !dbg !62
  %310 = extractelement <2 x float> %255, i64 0, !dbg !62
  %311 = extractelement <2 x float> %255, i64 1, !dbg !63
  %312 = fsub float %310, %311, !dbg !62
  %313 = extractelement <2 x float> %264, i64 0, !dbg !62
  %314 = extractelement <2 x float> %264, i64 1, !dbg !63
  %315 = fsub float %313, %314, !dbg !62
  %316 = extractelement <2 x float> %276, i64 0, !dbg !62
  %317 = extractelement <2 x float> %276, i64 1, !dbg !63
  %318 = fsub float %316, %317, !dbg !62
  %319 = extractelement <2 x float> %285, i64 0, !dbg !62
  %320 = extractelement <2 x float> %285, i64 1, !dbg !63
  %321 = fsub float %319, %320, !dbg !62
  %322 = extractelement <2 x float> %294, i64 0, !dbg !62
  %323 = extractelement <2 x float> %294, i64 1, !dbg !63
  %324 = fsub float %322, %323, !dbg !62
  %325 = extractelement <2 x float> %303, i64 0, !dbg !62
  %326 = extractelement <2 x float> %303, i64 1, !dbg !63
  %327 = fsub float %325, %326, !dbg !62
  %328 = fmul float %306, %87, !dbg !64
  %329 = fmul float %309, %87, !dbg !64
  %330 = fmul float %312, %87, !dbg !64
  %331 = fmul float %315, %87, !dbg !64
  %332 = fmul float %318, %92, !dbg !64
  %333 = fmul float %321, %92, !dbg !64
  %334 = fmul float %324, %92, !dbg !64
  %335 = fmul float %327, %92, !dbg !64
  %336 = fadd float %305, %328, !dbg !63
  %337 = fadd float %308, %329, !dbg !63
  %338 = fadd float %311, %330, !dbg !63
  %339 = fadd float %314, %331, !dbg !63
  %340 = fadd float %317, %332, !dbg !63
  %341 = fadd float %320, %333, !dbg !63
  %342 = fadd float %323, %334, !dbg !63
  %343 = fadd float %326, %335, !dbg !63
  %344 = fadd float %108, %128, !dbg !65
  %345 = fadd float %109, %129, !dbg !65
  %346 = fadd float %110, %130, !dbg !65
  %347 = fadd float %111, %131, !dbg !65
  %348 = fadd float %117, %128, !dbg !65
  %349 = fadd float %118, %129, !dbg !65
  %350 = fadd float %119, %130, !dbg !65
  %351 = fadd float %120, %131, !dbg !65
  %352 = fadd float %344, %336, !dbg !66
  %353 = fadd float %345, %337, !dbg !66
  %354 = fadd float %346, %338, !dbg !66
  %355 = fadd float %347, %339, !dbg !66
  %356 = fadd float %348, %340, !dbg !66
  %357 = fadd float %349, %341, !dbg !66
  %358 = fadd float %350, %342, !dbg !66
  %359 = fadd float %351, %343, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %360 = bitcast float %352 to i32, !dbg !68
  %361 = bitcast float %353 to i32, !dbg !68
  %362 = bitcast float %354 to i32, !dbg !68
  %363 = bitcast float %355 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %360, i32 %361, i32 %362, i32 %363, ptr addrspace(1) %100, i1 %24) #2, !dbg !68
  %364 = bitcast float %356 to i32, !dbg !68
  %365 = bitcast float %357 to i32, !dbg !68
  %366 = bitcast float %358 to i32, !dbg !68
  %367 = bitcast float %359 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %365, i32 %366, i32 %367, ptr addrspace(1) %102, i1 %25) #2, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyyiayghr7lpy7trr2mh3ndo5lc5awkgo6uazcdkjxyh4te7dgxv.py", directory: "inductor_cache/yy")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_75, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_75, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_75", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_75", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 55, scope: !7)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 60, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 51, scope: !7)
!46 = !DILocation(line: 49, column: 63, scope: !7)
!47 = !DILocation(line: 49, column: 58, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 68, scope: !7)
!50 = !DILocation(line: 52, column: 35, scope: !7)
!51 = !DILocation(line: 53, column: 31, scope: !7)
!52 = !DILocation(line: 53, column: 70, scope: !7)
!53 = !DILocation(line: 59, column: 35, scope: !7)
!54 = !DILocation(line: 60, column: 52, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 70, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 71, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 4, scope: !7)
!68 = !DILocation(line: 71, column: 60, scope: !7)
!69 = !DILocation(line: 71, column: 4, scope: !7)
