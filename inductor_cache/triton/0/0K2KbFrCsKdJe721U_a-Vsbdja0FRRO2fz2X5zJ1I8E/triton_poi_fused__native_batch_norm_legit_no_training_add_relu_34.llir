; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 1024, !dbg !14
  %17 = sdiv i32 %15, 1024, !dbg !14
  %18 = srem i32 %16, 32, !dbg !15
  %19 = srem i32 %17, 32, !dbg !15
  %20 = srem i32 %14, 256, !dbg !16
  %21 = sext i32 %14 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = sext i32 %15 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %27 = sext i32 %18 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = sext i32 %19 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %44 = bitcast i32 %43 to float, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %77 = shl nsw i32 %16, 8, !dbg !27
  %78 = shl nsw i32 %17, 8, !dbg !27
  %79 = add nsw i32 %77, %20, !dbg !28
  %80 = add nsw i32 %78, %20, !dbg !28
  %81 = sext i32 %79 to i64, !dbg !29
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %81, !dbg !29
  %83 = sext i32 %80 to i64, !dbg !29
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !29
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !30
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !30
  %87 = fadd float %42, 0x3EE4F8B580000000, !dbg !31
  %88 = fadd float %44, 0x3EE4F8B580000000, !dbg !31
  %89 = fadd float %46, 0x3EE4F8B580000000, !dbg !31
  %90 = fadd float %48, 0x3EE4F8B580000000, !dbg !31
  %91 = fadd float %50, 0x3EE4F8B580000000, !dbg !31
  %92 = fadd float %52, 0x3EE4F8B580000000, !dbg !31
  %93 = fadd float %54, 0x3EE4F8B580000000, !dbg !31
  %94 = fadd float %56, 0x3EE4F8B580000000, !dbg !31
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %95, 0, !dbg !32
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %96, 0, !dbg !32
  br i1 %.not.i, label %102, label %97, !dbg !32

97:                                               ; preds = %8
  br i1 %.not1.i, label %100, label %98, !dbg !32

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

102:                                              ; preds = %8
  br i1 %.not1.i, label %105, label %103, !dbg !32

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !32
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %107, 0, !dbg !32
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %108, 0, !dbg !32
  br i1 %.not.i1, label %114, label %109, !dbg !32

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !32

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !32

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %110, %112, %115, %117
  %.0.i3 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !32
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i6 = icmp eq i32 %119, 0, !dbg !32
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i9 = icmp eq i32 %120, 0, !dbg !32
  br i1 %.not.i6, label %126, label %121, !dbg !32

121:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %124, label %122, !dbg !32

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

126:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %129, label %127, !dbg !32

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %122, %124, %127, %129
  %.0.i8 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !32
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %131, 0, !dbg !32
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %132, 0, !dbg !32
  br i1 %.not.i11, label %138, label %133, !dbg !32

133:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %136, label %134, !dbg !32

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

138:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %141, label %139, !dbg !32

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %134, %136, %139, %141
  %.0.i13 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !32
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i16 = icmp eq i32 %143, 0, !dbg !32
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i19 = icmp eq i32 %144, 0, !dbg !32
  br i1 %.not.i16, label %150, label %145, !dbg !32

145:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %148, label %146, !dbg !32

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

150:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %153, label %151, !dbg !32

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %146, %148, %151, %153
  %.0.i18 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !32
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i21 = icmp eq i32 %155, 0, !dbg !32
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i24 = icmp eq i32 %156, 0, !dbg !32
  br i1 %.not.i21, label %162, label %157, !dbg !32

157:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %160, label %158, !dbg !32

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

162:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %165, label %163, !dbg !32

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %158, %160, %163, %165
  %.0.i23 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !32
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i26 = icmp eq i32 %167, 0, !dbg !32
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i29 = icmp eq i32 %168, 0, !dbg !32
  br i1 %.not.i26, label %174, label %169, !dbg !32

169:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %172, label %170, !dbg !32

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

174:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %177, label %175, !dbg !32

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %170, %172, %175, %177
  %.0.i28 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !32
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i31 = icmp eq i32 %179, 0, !dbg !32
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i34 = icmp eq i32 %180, 0, !dbg !32
  br i1 %.not.i31, label %186, label %181, !dbg !32

181:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %184, label %182, !dbg !32

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

186:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %189, label %187, !dbg !32

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %182, %184, %187, %189
  %.0.i33 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !32
  %191 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %192 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !20
  %193 = insertelement <8 x i32> %192, i32 %37, i64 1, !dbg !20
  %194 = insertelement <8 x i32> %193, i32 %36, i64 2, !dbg !20
  %195 = insertelement <8 x i32> %194, i32 %35, i64 3, !dbg !20
  %196 = insertelement <8 x i32> %195, i32 %34, i64 4, !dbg !20
  %197 = insertelement <8 x i32> %196, i32 %33, i64 5, !dbg !20
  %198 = insertelement <8 x i32> %197, i32 %32, i64 6, !dbg !20
  %199 = insertelement <8 x i32> %198, i32 %31, i64 7, !dbg !20
  %200 = bitcast <8 x i32> %199 to <8 x float>, !dbg !20
  %201 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %202 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %203 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %204 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %205 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %206 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %207 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %208 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !30
  %209 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !30
  %210 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !30
  %211 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !30
  %212 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !30
  %213 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !30
  %214 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !30
  %215 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !30
  %216 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !26
  %217 = insertelement <8 x i32> %216, i32 %75, i64 1, !dbg !26
  %218 = insertelement <8 x i32> %217, i32 %74, i64 2, !dbg !26
  %219 = insertelement <8 x i32> %218, i32 %73, i64 3, !dbg !26
  %220 = insertelement <8 x i32> %219, i32 %72, i64 4, !dbg !26
  %221 = insertelement <8 x i32> %220, i32 %71, i64 5, !dbg !26
  %222 = insertelement <8 x i32> %221, i32 %70, i64 6, !dbg !26
  %223 = insertelement <8 x i32> %222, i32 %69, i64 7, !dbg !26
  %224 = bitcast <8 x i32> %223 to <8 x float>, !dbg !26
  %225 = insertelement <8 x i32> poison, i32 %66, i64 0, !dbg !24
  %226 = insertelement <8 x i32> %225, i32 %65, i64 1, !dbg !24
  %227 = insertelement <8 x i32> %226, i32 %64, i64 2, !dbg !24
  %228 = insertelement <8 x i32> %227, i32 %63, i64 3, !dbg !24
  %229 = insertelement <8 x i32> %228, i32 %62, i64 4, !dbg !24
  %230 = insertelement <8 x i32> %229, i32 %61, i64 5, !dbg !24
  %231 = insertelement <8 x i32> %230, i32 %60, i64 6, !dbg !24
  %232 = insertelement <8 x i32> %231, i32 %59, i64 7, !dbg !24
  %233 = bitcast <8 x i32> %232 to <8 x float>, !dbg !24
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !33
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !33
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !33
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !33
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !33
  %242 = insertelement <8 x i32> poison, i32 %191, i64 0, !dbg !18
  %243 = insertelement <8 x i32> %242, i32 %201, i64 1, !dbg !18
  %244 = insertelement <8 x i32> %243, i32 %202, i64 2, !dbg !18
  %245 = insertelement <8 x i32> %244, i32 %203, i64 3, !dbg !18
  %246 = insertelement <8 x i32> %245, i32 %204, i64 4, !dbg !18
  %247 = insertelement <8 x i32> %246, i32 %205, i64 5, !dbg !18
  %248 = insertelement <8 x i32> %247, i32 %206, i64 6, !dbg !18
  %249 = insertelement <8 x i32> %248, i32 %207, i64 7, !dbg !18
  %250 = bitcast <8 x i32> %249 to <8 x float>, !dbg !18
  %251 = fsub <8 x float> %250, %200, !dbg !34
  %252 = insertelement <8 x i32> poison, i32 %208, i64 0, !dbg !30
  %253 = insertelement <8 x i32> %252, i32 %209, i64 1, !dbg !30
  %254 = insertelement <8 x i32> %253, i32 %210, i64 2, !dbg !30
  %255 = insertelement <8 x i32> %254, i32 %211, i64 3, !dbg !30
  %256 = insertelement <8 x i32> %255, i32 %212, i64 4, !dbg !30
  %257 = insertelement <8 x i32> %256, i32 %213, i64 5, !dbg !30
  %258 = insertelement <8 x i32> %257, i32 %214, i64 6, !dbg !30
  %259 = insertelement <8 x i32> %258, i32 %215, i64 7, !dbg !30
  %260 = bitcast <8 x i32> %259 to <8 x float>, !dbg !30
  %261 = insertelement <8 x float> poison, float %241, i64 0, !dbg !35
  %262 = insertelement <8 x float> %261, float %240, i64 1, !dbg !35
  %263 = insertelement <8 x float> %262, float %239, i64 2, !dbg !35
  %264 = insertelement <8 x float> %263, float %238, i64 3, !dbg !35
  %265 = insertelement <8 x float> %264, float %237, i64 4, !dbg !35
  %266 = insertelement <8 x float> %265, float %236, i64 5, !dbg !35
  %267 = insertelement <8 x float> %266, float %235, i64 6, !dbg !35
  %268 = insertelement <8 x float> %267, float %234, i64 7, !dbg !35
  %269 = fmul <8 x float> %251, %268, !dbg !35
  %270 = fmul <8 x float> %269, %233, !dbg !36
  %271 = fadd <8 x float> %270, %224, !dbg !37
  %272 = fadd <8 x float> %271, %260, !dbg !38
  %273 = fcmp olt <8 x float> %272, zeroinitializer, !dbg !39
  %274 = extractelement <8 x i1> %273, i64 7, !dbg !43
  %275 = extractelement <8 x i1> %273, i64 6, !dbg !43
  %276 = extractelement <8 x i1> %273, i64 5, !dbg !43
  %277 = extractelement <8 x i1> %273, i64 4, !dbg !43
  %278 = extractelement <8 x i1> %273, i64 3, !dbg !43
  %279 = extractelement <8 x i1> %273, i64 2, !dbg !43
  %280 = extractelement <8 x i1> %273, i64 1, !dbg !43
  %281 = extractelement <8 x i1> %273, i64 0, !dbg !43
  %282 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !44
  %283 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !44
  %bc = bitcast <8 x float> %272 to <8 x i32>, !dbg !45
  %284 = extractelement <8 x i32> %bc, i64 7, !dbg !45
  %285 = select i1 %274, i32 0, i32 %284, !dbg !43
  %bc36 = bitcast <8 x float> %272 to <8 x i32>, !dbg !45
  %286 = extractelement <8 x i32> %bc36, i64 6, !dbg !45
  %287 = select i1 %275, i32 0, i32 %286, !dbg !43
  %bc37 = bitcast <8 x float> %272 to <8 x i32>, !dbg !45
  %288 = extractelement <8 x i32> %bc37, i64 5, !dbg !45
  %289 = select i1 %276, i32 0, i32 %288, !dbg !43
  %bc38 = bitcast <8 x float> %272 to <8 x i32>, !dbg !45
  %290 = extractelement <8 x i32> %bc38, i64 4, !dbg !45
  %291 = select i1 %277, i32 0, i32 %290, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %285, i32 %287, i32 %289, i32 %291, ptr addrspace(1) %282, i1 true) #3, !dbg !45
  %bc39 = bitcast <8 x float> %272 to <8 x i32>, !dbg !45
  %292 = extractelement <8 x i32> %bc39, i64 3, !dbg !45
  %293 = select i1 %278, i32 0, i32 %292, !dbg !43
  %bc40 = bitcast <8 x float> %272 to <8 x i32>, !dbg !45
  %294 = extractelement <8 x i32> %bc40, i64 2, !dbg !45
  %295 = select i1 %279, i32 0, i32 %294, !dbg !43
  %bc41 = bitcast <8 x float> %272 to <8 x i32>, !dbg !45
  %296 = extractelement <8 x i32> %bc41, i64 1, !dbg !45
  %297 = select i1 %280, i32 0, i32 %296, !dbg !43
  %bc42 = bitcast <8 x float> %272 to <8 x i32>, !dbg !45
  %298 = extractelement <8 x i32> %bc42, i64 0, !dbg !45
  %299 = select i1 %281, i32 0, i32 %298, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %293, i32 %295, i32 %297, i32 %299, ptr addrspace(1) %283, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coh5zo2ajjryyuvnswgob4rynjqeu65r2nulle7ufr4fm6dprdcp.py", directory: "inductor_cache/oh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_34", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 40, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 45, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 26, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 47, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 37, scope: !7)
!46 = !DILocation(line: 48, column: 4, scope: !7)
