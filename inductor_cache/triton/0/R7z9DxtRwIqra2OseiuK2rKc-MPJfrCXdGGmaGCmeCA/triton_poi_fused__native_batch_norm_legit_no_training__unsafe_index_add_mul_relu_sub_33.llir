; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, i32 %29) local_unnamed_addr !dbg !7 {
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %32 = shl i32 %31, 7, !dbg !11
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %34 = and i32 %33, 127, !dbg !12
  %35 = or disjoint i32 %32, %34, !dbg !13
  %36 = sdiv i32 %35, 256, !dbg !14
  %37 = srem i32 %36, 4, !dbg !15
  %.frozen = freeze i32 %35, !dbg !16
  %38 = sdiv i32 %.frozen, 16, !dbg !16
  %39 = srem i32 %38, 16, !dbg !17
  %40 = mul i32 %38, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %40, !dbg !18
  %41 = sext i32 %35 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !20
  %44 = sext i32 %37 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !24
  %49 = bitcast i32 %48 to float, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !27
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !30
  %56 = sext i32 %39 to i64, !dbg !31
  %57 = getelementptr i64, ptr addrspace(1) %7, i64 %56, !dbg !31
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !32
  %59 = sext i32 %.decomposed to i64, !dbg !33
  %60 = getelementptr i64, ptr addrspace(1) %8, i64 %59, !dbg !33
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !34
  %62 = getelementptr i64, ptr addrspace(1) %10, i64 %59, !dbg !35
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %11, i64 %59, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !38
  %66 = getelementptr i64, ptr addrspace(1) %12, i64 %56, !dbg !39
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !40
  %68 = getelementptr float, ptr addrspace(1) %13, i64 %56, !dbg !41
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !42
  %70 = getelementptr i64, ptr addrspace(1) %14, i64 %56, !dbg !43
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !44
  %72 = getelementptr i64, ptr addrspace(1) %15, i64 %59, !dbg !45
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !46
  %74 = getelementptr i64, ptr addrspace(1) %17, i64 %59, !dbg !47
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !48
  %76 = getelementptr float, ptr addrspace(1) %18, i64 %59, !dbg !49
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !50
  %78 = getelementptr i64, ptr addrspace(1) %19, i64 %56, !dbg !51
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !52
  %80 = getelementptr float, ptr addrspace(1) %20, i64 %56, !dbg !53
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !54
  %82 = getelementptr i64, ptr addrspace(1) %21, i64 %56, !dbg !55
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !56
  %84 = getelementptr i64, ptr addrspace(1) %22, i64 %59, !dbg !57
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !58
  %86 = getelementptr i64, ptr addrspace(1) %24, i64 %59, !dbg !59
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !60
  %88 = getelementptr float, ptr addrspace(1) %25, i64 %59, !dbg !61
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !62
  %90 = getelementptr i64, ptr addrspace(1) %26, i64 %56, !dbg !63
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !64
  %92 = getelementptr float, ptr addrspace(1) %27, i64 %56, !dbg !65
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !66
  %94 = fadd float %49, 0x3EE4F8B580000000, !dbg !67
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %95, 0, !dbg !68
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %96, 0, !dbg !68
  br i1 %.not.i, label %102, label %97, !dbg !68

97:                                               ; preds = %30
  br i1 %.not1.i, label %100, label %98, !dbg !68

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

102:                                              ; preds = %30
  br i1 %.not1.i, label %105, label %103, !dbg !68

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !68
  %107 = bitcast i32 %43 to float, !dbg !20
  %108 = bitcast i32 %46 to float, !dbg !22
  %109 = fsub float %107, %108, !dbg !69
  %110 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !54
  %111 = insertelement <2 x i32> %110, i32 %93, i64 1, !dbg !54
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !54
  %113 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !50
  %114 = insertelement <2 x i32> %113, i32 %89, i64 1, !dbg !50
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !50
  %116 = bitcast i32 %69 to float, !dbg !42
  %117 = bitcast i32 %55 to float, !dbg !30
  %118 = bitcast i32 %53 to float, !dbg !28
  %119 = bitcast i32 %51 to float, !dbg !26
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !70
  %121 = fmul float %109, %120, !dbg !71
  %122 = fmul float %121, %119, !dbg !72
  %123 = fadd float %122, %118, !dbg !73
  %124 = fadd float %123, %117, !dbg !74
  %125 = fcmp olt float %124, 0.000000e+00, !dbg !75
  %126 = select i1 %125, float 0.000000e+00, float %124, !dbg !79
  %127 = lshr i64 %58, 60, !dbg !80
  %128 = and i64 %127, 8, !dbg !80
  %129 = add i64 %128, %58, !dbg !80
  %130 = lshr i64 %61, 60, !dbg !81
  %131 = and i64 %130, 8, !dbg !81
  %132 = shl i64 %129, 3, !dbg !82
  %133 = shl nsw i32 %36, 6, !dbg !83
  %134 = sext i32 %133 to i64, !dbg !84
  %135 = getelementptr float, ptr addrspace(1) %9, i64 %61, !dbg !85
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %131, !dbg !85
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %132, !dbg !85
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %134, !dbg !85
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !86
  %140 = lshr i64 %63, 60, !dbg !87
  %141 = and i64 %140, 8, !dbg !87
  %142 = getelementptr float, ptr addrspace(1) %9, i64 %63, !dbg !88
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %141, !dbg !88
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %132, !dbg !88
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %134, !dbg !88
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #3, !dbg !89
  %147 = lshr i64 %67, 60, !dbg !90
  %148 = and i64 %147, 8, !dbg !90
  %149 = add i64 %148, %67, !dbg !90
  %150 = shl i64 %149, 3, !dbg !91
  %151 = getelementptr float, ptr addrspace(1) %136, i64 %150, !dbg !92
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %134, !dbg !92
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #3, !dbg !93
  %154 = getelementptr float, ptr addrspace(1) %143, i64 %150, !dbg !94
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %134, !dbg !94
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #3, !dbg !95
  %157 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !93
  %158 = insertelement <2 x i32> %157, i32 %139, i64 1, !dbg !93
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !93
  %160 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !95
  %161 = insertelement <2 x i32> %160, i32 %146, i64 1, !dbg !95
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !95
  %163 = fsub <2 x float> %162, %159, !dbg !96
  %164 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !97
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !97
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  %167 = fmul <2 x float> %163, %166, !dbg !97
  %168 = fadd <2 x float> %167, %159, !dbg !98
  %169 = extractelement <2 x float> %168, i64 0, !dbg !99
  %170 = extractelement <2 x float> %168, i64 1, !dbg !100
  %171 = fsub float %169, %170, !dbg !99
  %172 = fmul float %171, %116, !dbg !101
  %173 = fadd float %170, %172, !dbg !100
  %174 = fadd float %126, %173, !dbg !102
  %175 = lshr i64 %71, 61, !dbg !103
  %176 = and i64 %175, 4, !dbg !103
  %177 = add i64 %176, %71, !dbg !103
  %178 = lshr i64 %73, 61, !dbg !104
  %179 = and i64 %178, 4, !dbg !104
  %180 = shl i64 %177, 2, !dbg !105
  %181 = shl nsw i32 %36, 4, !dbg !106
  %182 = sext i32 %181 to i64, !dbg !107
  %183 = getelementptr float, ptr addrspace(1) %16, i64 %73, !dbg !108
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %179, !dbg !108
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %180, !dbg !108
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %182, !dbg !108
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #3, !dbg !109
  %188 = lshr i64 %75, 61, !dbg !110
  %189 = and i64 %188, 4, !dbg !110
  %190 = getelementptr float, ptr addrspace(1) %16, i64 %75, !dbg !111
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %189, !dbg !111
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %180, !dbg !111
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %182, !dbg !111
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 true) #3, !dbg !112
  %195 = lshr i64 %79, 61, !dbg !113
  %196 = and i64 %195, 4, !dbg !113
  %197 = add i64 %196, %79, !dbg !113
  %198 = shl i64 %197, 2, !dbg !114
  %199 = getelementptr float, ptr addrspace(1) %184, i64 %198, !dbg !115
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %182, !dbg !115
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #3, !dbg !116
  %202 = getelementptr float, ptr addrspace(1) %191, i64 %198, !dbg !117
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %182, !dbg !117
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #3, !dbg !118
  %205 = lshr i64 %83, 62, !dbg !119
  %206 = and i64 %205, 2, !dbg !119
  %207 = add i64 %206, %83, !dbg !119
  %208 = lshr i64 %85, 62, !dbg !120
  %209 = and i64 %208, 2, !dbg !120
  %210 = shl i64 %207, 1, !dbg !121
  %211 = shl nsw i32 %36, 2, !dbg !122
  %212 = sext i32 %211 to i64, !dbg !123
  %213 = getelementptr float, ptr addrspace(1) %23, i64 %85, !dbg !124
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %209, !dbg !124
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %210, !dbg !124
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %212, !dbg !124
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #3, !dbg !125
  %218 = lshr i64 %87, 62, !dbg !126
  %219 = and i64 %218, 2, !dbg !126
  %220 = getelementptr float, ptr addrspace(1) %23, i64 %87, !dbg !127
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %219, !dbg !127
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %210, !dbg !127
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %212, !dbg !127
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #3, !dbg !128
  %225 = lshr i64 %91, 62, !dbg !129
  %226 = and i64 %225, 2, !dbg !129
  %227 = add i64 %226, %91, !dbg !129
  %228 = shl i64 %227, 1, !dbg !130
  %229 = getelementptr float, ptr addrspace(1) %214, i64 %228, !dbg !131
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %212, !dbg !131
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #3, !dbg !132
  %232 = getelementptr float, ptr addrspace(1) %221, i64 %228, !dbg !133
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %212, !dbg !133
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 true) #3, !dbg !134
  %235 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !109
  %236 = insertelement <2 x i32> %235, i32 %217, i64 1, !dbg !109
  %237 = bitcast <2 x i32> %236 to <2 x float>, !dbg !109
  %238 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !112
  %239 = insertelement <2 x i32> %238, i32 %224, i64 1, !dbg !112
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !112
  %241 = fsub <2 x float> %240, %237, !dbg !135
  %242 = fmul <2 x float> %241, %115, !dbg !136
  %243 = fadd <2 x float> %242, %237, !dbg !137
  %244 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !116
  %245 = insertelement <2 x i32> %244, i32 %231, i64 1, !dbg !116
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !116
  %247 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !118
  %248 = insertelement <2 x i32> %247, i32 %234, i64 1, !dbg !118
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !118
  %250 = fsub <2 x float> %249, %246, !dbg !138
  %251 = fmul <2 x float> %250, %115, !dbg !139
  %252 = fadd <2 x float> %251, %246, !dbg !140
  %253 = fsub <2 x float> %252, %243, !dbg !141
  %254 = fmul <2 x float> %253, %112, !dbg !142
  %255 = fadd <2 x float> %243, %254, !dbg !143
  %256 = extractelement <2 x float> %255, i64 0, !dbg !144
  %257 = fadd float %174, %256, !dbg !144
  %258 = extractelement <2 x float> %255, i64 1, !dbg !145
  %259 = fadd float %257, %258, !dbg !145
  %260 = fcmp olt float %259, 0.000000e+00, !dbg !146
  %261 = select i1 %260, float 0.000000e+00, float %259, !dbg !148
  %262 = getelementptr float, ptr addrspace(1) %28, i64 %41, !dbg !149
  %263 = bitcast float %126 to i32, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %263, ptr addrspace(1) %262, i1 true) #3, !dbg !150
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !151
  %265 = bitcast float %261 to i32, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %265, ptr addrspace(1) %264, i1 true) #3, !dbg !152
  ret void, !dbg !153
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxm5jb4e56cpopujzi5wiutf4ck7jmjponwttshn6qdswadksc5l.py", directory: "inductor_cache/xm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_33", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 47, column: 32, scope: !7)
!56 = !DILocation(line: 47, column: 37, scope: !7)
!57 = !DILocation(line: 48, column: 32, scope: !7)
!58 = !DILocation(line: 48, column: 37, scope: !7)
!59 = !DILocation(line: 49, column: 32, scope: !7)
!60 = !DILocation(line: 49, column: 37, scope: !7)
!61 = !DILocation(line: 50, column: 33, scope: !7)
!62 = !DILocation(line: 50, column: 38, scope: !7)
!63 = !DILocation(line: 51, column: 33, scope: !7)
!64 = !DILocation(line: 51, column: 38, scope: !7)
!65 = !DILocation(line: 52, column: 33, scope: !7)
!66 = !DILocation(line: 52, column: 38, scope: !7)
!67 = !DILocation(line: 55, column: 18, scope: !7)
!68 = !DILocation(line: 56, column: 26, scope: !7)
!69 = !DILocation(line: 53, column: 18, scope: !7)
!70 = !DILocation(line: 58, column: 18, scope: !7)
!71 = !DILocation(line: 61, column: 19, scope: !7)
!72 = !DILocation(line: 62, column: 20, scope: !7)
!73 = !DILocation(line: 63, column: 20, scope: !7)
!74 = !DILocation(line: 64, column: 20, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlockFile(scope: !7, file: !77, discriminator: 0)
!77 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!78 = !DILocation(line: 66, column: 42, scope: !7)
!79 = !DILocation(line: 121, column: 29, scope: !76, inlinedAt: !78)
!80 = !DILocation(line: 70, column: 35, scope: !7)
!81 = !DILocation(line: 73, column: 35, scope: !7)
!82 = !DILocation(line: 74, column: 41, scope: !7)
!83 = !DILocation(line: 74, column: 52, scope: !7)
!84 = !DILocation(line: 74, column: 49, scope: !7)
!85 = !DILocation(line: 74, column: 31, scope: !7)
!86 = !DILocation(line: 74, column: 57, scope: !7)
!87 = !DILocation(line: 77, column: 35, scope: !7)
!88 = !DILocation(line: 78, column: 31, scope: !7)
!89 = !DILocation(line: 78, column: 57, scope: !7)
!90 = !DILocation(line: 84, column: 35, scope: !7)
!91 = !DILocation(line: 85, column: 41, scope: !7)
!92 = !DILocation(line: 85, column: 31, scope: !7)
!93 = !DILocation(line: 85, column: 57, scope: !7)
!94 = !DILocation(line: 86, column: 31, scope: !7)
!95 = !DILocation(line: 86, column: 57, scope: !7)
!96 = !DILocation(line: 87, column: 20, scope: !7)
!97 = !DILocation(line: 88, column: 20, scope: !7)
!98 = !DILocation(line: 89, column: 20, scope: !7)
!99 = !DILocation(line: 90, column: 20, scope: !7)
!100 = !DILocation(line: 92, column: 20, scope: !7)
!101 = !DILocation(line: 91, column: 20, scope: !7)
!102 = !DILocation(line: 93, column: 20, scope: !7)
!103 = !DILocation(line: 97, column: 35, scope: !7)
!104 = !DILocation(line: 100, column: 35, scope: !7)
!105 = !DILocation(line: 101, column: 42, scope: !7)
!106 = !DILocation(line: 101, column: 53, scope: !7)
!107 = !DILocation(line: 101, column: 50, scope: !7)
!108 = !DILocation(line: 101, column: 32, scope: !7)
!109 = !DILocation(line: 101, column: 58, scope: !7)
!110 = !DILocation(line: 104, column: 35, scope: !7)
!111 = !DILocation(line: 105, column: 32, scope: !7)
!112 = !DILocation(line: 105, column: 58, scope: !7)
!113 = !DILocation(line: 111, column: 35, scope: !7)
!114 = !DILocation(line: 112, column: 42, scope: !7)
!115 = !DILocation(line: 112, column: 32, scope: !7)
!116 = !DILocation(line: 112, column: 58, scope: !7)
!117 = !DILocation(line: 113, column: 32, scope: !7)
!118 = !DILocation(line: 113, column: 58, scope: !7)
!119 = !DILocation(line: 124, column: 35, scope: !7)
!120 = !DILocation(line: 127, column: 35, scope: !7)
!121 = !DILocation(line: 128, column: 42, scope: !7)
!122 = !DILocation(line: 128, column: 52, scope: !7)
!123 = !DILocation(line: 128, column: 50, scope: !7)
!124 = !DILocation(line: 128, column: 32, scope: !7)
!125 = !DILocation(line: 128, column: 57, scope: !7)
!126 = !DILocation(line: 131, column: 35, scope: !7)
!127 = !DILocation(line: 132, column: 33, scope: !7)
!128 = !DILocation(line: 132, column: 58, scope: !7)
!129 = !DILocation(line: 138, column: 38, scope: !7)
!130 = !DILocation(line: 139, column: 43, scope: !7)
!131 = !DILocation(line: 139, column: 33, scope: !7)
!132 = !DILocation(line: 139, column: 59, scope: !7)
!133 = !DILocation(line: 140, column: 33, scope: !7)
!134 = !DILocation(line: 140, column: 59, scope: !7)
!135 = !DILocation(line: 106, column: 20, scope: !7)
!136 = !DILocation(line: 107, column: 20, scope: !7)
!137 = !DILocation(line: 108, column: 20, scope: !7)
!138 = !DILocation(line: 114, column: 20, scope: !7)
!139 = !DILocation(line: 115, column: 20, scope: !7)
!140 = !DILocation(line: 116, column: 20, scope: !7)
!141 = !DILocation(line: 117, column: 20, scope: !7)
!142 = !DILocation(line: 118, column: 20, scope: !7)
!143 = !DILocation(line: 119, column: 20, scope: !7)
!144 = !DILocation(line: 120, column: 20, scope: !7)
!145 = !DILocation(line: 147, column: 21, scope: !7)
!146 = !DILocation(line: 118, column: 15, scope: !76, inlinedAt: !147)
!147 = !DILocation(line: 148, column: 43, scope: !7)
!148 = !DILocation(line: 121, column: 29, scope: !76, inlinedAt: !147)
!149 = !DILocation(line: 149, column: 25, scope: !7)
!150 = !DILocation(line: 149, column: 37, scope: !7)
!151 = !DILocation(line: 150, column: 28, scope: !7)
!152 = !DILocation(line: 150, column: 41, scope: !7)
!153 = !DILocation(line: 150, column: 4, scope: !7)
