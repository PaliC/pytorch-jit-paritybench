; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_constant_pad_nd_47(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %.lobit1 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %.lobit1, 3, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %12, 4, !dbg !13
  %14 = or disjoint i32 %12, 8, !dbg !13
  %15 = or disjoint i32 %12, 12, !dbg !13
  %16 = or disjoint i32 %12, 16, !dbg !13
  %17 = or disjoint i32 %12, 20, !dbg !13
  %18 = or disjoint i32 %12, 24, !dbg !13
  %19 = or disjoint i32 %12, 28, !dbg !13
  %20 = icmp slt i32 %11, 1056, !dbg !14
  %21 = icmp slt i32 %12, 1056, !dbg !14
  %22 = icmp slt i32 %13, 1056, !dbg !14
  %23 = icmp slt i32 %14, 1056, !dbg !14
  %24 = icmp slt i32 %15, 1056, !dbg !14
  %25 = icmp slt i32 %16, 1056, !dbg !14
  %26 = icmp slt i32 %17, 1056, !dbg !14
  %27 = icmp slt i32 %18, 1056, !dbg !14
  %28 = icmp slt i32 %19, 1056, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 5, !dbg !16
  %31 = lshr i32 %7, 3, !dbg !17
  %32 = and i32 %31, 15, !dbg !17
  %33 = and i32 %7, 31, !dbg !17
  %34 = or disjoint i32 %30, %32, !dbg !18
  %35 = or disjoint i32 %34, 16, !dbg !18
  %36 = or disjoint i32 %30, %33, !dbg !18
  %37 = icmp slt i32 %36, 81, !dbg !19
  %.frozen = freeze i32 %34, !dbg !20
  %38 = sdiv i32 %.frozen, 9, !dbg !20
  %.frozen4 = freeze i32 %35, !dbg !20
  %39 = sdiv i32 %.frozen4, 9, !dbg !20
  %40 = mul i32 %38, 9, !dbg !21
  %.decomposed = sub i32 %.frozen, %40, !dbg !21
  %41 = mul i32 %39, 9, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %41, !dbg !21
  %.frozen6 = freeze i32 %11, !dbg !22
  %42 = sdiv i32 %.frozen6, 264, !dbg !22
  %43 = mul i32 %42, 264, !dbg !23
  %.decomposed7 = sub i32 %.frozen6, %43, !dbg !23
  %44 = icmp slt i32 %34, 72, !dbg !24
  %45 = icmp slt i32 %35, 72, !dbg !24
  %46 = icmp slt i32 %.decomposed, 8, !dbg !25
  %47 = icmp slt i32 %.decomposed5, 8, !dbg !25
  %48 = and i1 %44, %46, !dbg !26
  %49 = and i1 %45, %47, !dbg !26
  %50 = mul nsw i32 %.decomposed, 264, !dbg !27
  %51 = mul nsw i32 %.decomposed5, 264, !dbg !27
  %52 = mul i32 %38, 2112, !dbg !28
  %53 = mul i32 %39, 2112, !dbg !28
  %54 = mul i32 %42, 16896, !dbg !29
  %55 = add i32 %54, %.decomposed7, !dbg !30
  %56 = add i32 %55, %50, !dbg !31
  %57 = add i32 %56, %52, !dbg !32
  %58 = add i32 %55, %51, !dbg !31
  %59 = add i32 %58, %53, !dbg !32
  %60 = sext i32 %57 to i64, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !33
  %62 = sext i32 %59 to i64, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !33
  %64 = and i1 %20, %48, !dbg !34
  %65 = and i1 %49, %20, !dbg !34
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #2, !dbg !35
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !35
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !35
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !35
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !35
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #2, !dbg !35
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !35
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !35
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !35
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !35
  %76 = mul i32 %12, 81, !dbg !36
  %77 = mul i32 %13, 81, !dbg !36
  %78 = mul i32 %14, 81, !dbg !36
  %79 = mul i32 %15, 81, !dbg !36
  %80 = mul i32 %16, 81, !dbg !36
  %81 = mul i32 %17, 81, !dbg !36
  %82 = mul i32 %18, 81, !dbg !36
  %83 = mul i32 %19, 81, !dbg !36
  %84 = add i32 %36, %76, !dbg !37
  %85 = add i32 %36, %77, !dbg !37
  %86 = add i32 %36, %78, !dbg !37
  %87 = add i32 %36, %79, !dbg !37
  %88 = add i32 %36, %80, !dbg !37
  %89 = add i32 %36, %81, !dbg !37
  %90 = add i32 %36, %82, !dbg !37
  %91 = add i32 %36, %83, !dbg !37
  %92 = sext i32 %84 to i64, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !38
  %94 = sext i32 %85 to i64, !dbg !38
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !38
  %96 = sext i32 %86 to i64, !dbg !38
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !38
  %98 = sext i32 %87 to i64, !dbg !38
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !38
  %100 = sext i32 %88 to i64, !dbg !38
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !38
  %102 = sext i32 %89 to i64, !dbg !38
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !38
  %104 = sext i32 %90 to i64, !dbg !38
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !38
  %106 = sext i32 %91 to i64, !dbg !38
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !38
  %108 = and i1 %21, %37, !dbg !39
  %109 = and i1 %22, %37, !dbg !39
  %110 = and i1 %23, %37, !dbg !39
  %111 = and i1 %24, %37, !dbg !39
  %112 = and i1 %25, %37, !dbg !39
  %113 = and i1 %26, %37, !dbg !39
  %114 = and i1 %27, %37, !dbg !39
  %115 = and i1 %28, %37, !dbg !39
  %116 = shl i32 %7, 7, !dbg !40
  %117 = and i32 %116, 896, !dbg !40
  %118 = or disjoint i32 %117, %32, !dbg !40
  %119 = and i32 %7, 127, !dbg !40
  %120 = lshr exact i32 %117, 3, !dbg !40
  %121 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %120, !dbg !40
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %118, !dbg !40
  %123 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !40
  %124 = or disjoint i32 %118, 32, !dbg !40
  %125 = lshr i32 %124, 5, !dbg !40
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !40
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !40
  %128 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !40
  %129 = or disjoint i32 %118, 64, !dbg !40
  %130 = lshr i32 %129, 5, !dbg !40
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !40
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !40
  %133 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !40
  %134 = or disjoint i32 %118, 96, !dbg !40
  %135 = lshr i32 %134, 5, !dbg !40
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !40
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !40
  %138 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !40
  %139 = or disjoint i32 %118, 16, !dbg !40
  %140 = getelementptr float, ptr addrspace(3) %121, i32 %139, !dbg !40
  %141 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !40
  %142 = or disjoint i32 %118, 48, !dbg !40
  %143 = lshr i32 %142, 5, !dbg !40
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !40
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !40
  %146 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !40
  %147 = or disjoint i32 %118, 80, !dbg !40
  %148 = lshr i32 %147, 5, !dbg !40
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !40
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !40
  %151 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !40
  %152 = or disjoint i32 %118, 112, !dbg !40
  %153 = lshr i32 %152, 5, !dbg !40
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !40
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !40
  %156 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %157 = lshr i32 %119, 5, !dbg !40
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !40
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %119, !dbg !40
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !40
  %161 = or disjoint i32 %119, 128, !dbg !40
  %162 = lshr i32 %161, 5, !dbg !40
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %162, !dbg !40
  %164 = getelementptr inbounds float, ptr addrspace(3) %163, i32 %161, !dbg !40
  %165 = load i32, ptr addrspace(3) %164, align 4, !dbg !40
  %166 = or disjoint i32 %119, 256, !dbg !40
  %167 = lshr i32 %166, 5, !dbg !40
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !40
  %169 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %166, !dbg !40
  %170 = load i32, ptr addrspace(3) %169, align 4, !dbg !40
  %171 = or disjoint i32 %119, 384, !dbg !40
  %172 = lshr i32 %171, 5, !dbg !40
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !40
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %171, !dbg !40
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !40
  %176 = or disjoint i32 %119, 512, !dbg !40
  %177 = lshr i32 %176, 5, !dbg !40
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !40
  %179 = getelementptr inbounds float, ptr addrspace(3) %178, i32 %176, !dbg !40
  %180 = load i32, ptr addrspace(3) %179, align 4, !dbg !40
  %181 = or disjoint i32 %119, 640, !dbg !40
  %182 = lshr i32 %181, 5, !dbg !40
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !40
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %181, !dbg !40
  %185 = load i32, ptr addrspace(3) %184, align 4, !dbg !40
  %186 = or disjoint i32 %119, 768, !dbg !40
  %187 = lshr i32 %186, 5, !dbg !40
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !40
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %186, !dbg !40
  %190 = load i32, ptr addrspace(3) %189, align 4, !dbg !40
  %191 = or disjoint i32 %119, 896, !dbg !40
  %192 = lshr i32 %191, 5, !dbg !40
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %192, !dbg !40
  %194 = getelementptr inbounds float, ptr addrspace(3) %193, i32 %191, !dbg !40
  %195 = load i32, ptr addrspace(3) %194, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %93, i1 %108) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %95, i1 %109) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %97, i1 %110) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %99, i1 %111) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %101, i1 %112) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %103, i1 %113) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %105, i1 %114) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %107, i1 %115) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpkbtt5dnesyigghuuumztcrezeaidp3ojzqhugouvue3hvwqzmc.py", directory: "inductor_cache/pk")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_47", linkageName: "triton_poi_fused_constant_pad_nd_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 30, column: 19, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 39, scope: !7)
!28 = !DILocation(line: 40, column: 49, scope: !7)
!29 = !DILocation(line: 40, column: 60, scope: !7)
!30 = !DILocation(line: 40, column: 35, scope: !7)
!31 = !DILocation(line: 40, column: 44, scope: !7)
!32 = !DILocation(line: 40, column: 54, scope: !7)
!33 = !DILocation(line: 40, column: 30, scope: !7)
!34 = !DILocation(line: 40, column: 80, scope: !7)
!35 = !DILocation(line: 40, column: 65, scope: !7)
!36 = !DILocation(line: 41, column: 33, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 25, scope: !7)
!39 = !DILocation(line: 41, column: 52, scope: !7)
!40 = !DILocation(line: 41, column: 44, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
