; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = or disjoint i32 %14, 512, !dbg !13
  %17 = or disjoint i32 %14, 514, !dbg !13
  %18 = icmp slt i32 %14, 71680, !dbg !14
  %19 = icmp slt i32 %16, 71680, !dbg !14
  %20 = srem i32 %14, 70, !dbg !15
  %21 = srem i32 %15, 70, !dbg !15
  %22 = srem i32 %16, 70, !dbg !15
  %23 = srem i32 %17, 70, !dbg !15
  %24 = sext i32 %14 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = sext i32 %16 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %18) #3, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %19) #3, !dbg !17
  %30 = sext i32 %20 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !18
  %32 = sext i32 %21 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = sext i32 %22 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !18
  %36 = sext i32 %23 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !18
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !19
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %18) #3, !dbg !19
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !19
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !20
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !21
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !21
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %19) #3, !dbg !21
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #3, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !22
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %18) #3, !dbg !23
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !23
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !23
  %57 = bitcast i32 %55 to float, !dbg !23
  %58 = bitcast i32 %56 to float, !dbg !23
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %18) #3, !dbg !23
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !23
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !23
  %62 = bitcast i32 %60 to float, !dbg !23
  %63 = bitcast i32 %61 to float, !dbg !23
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %19) #3, !dbg !23
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !23
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !23
  %67 = bitcast i32 %65 to float, !dbg !23
  %68 = bitcast i32 %66 to float, !dbg !23
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %19) #3, !dbg !23
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !23
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !23
  %72 = bitcast i32 %70 to float, !dbg !23
  %73 = bitcast i32 %71 to float, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !24
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %18) #3, !dbg !25
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %18) #3, !dbg !25
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %19) #3, !dbg !25
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %77, i1 %19) #3, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !26
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %18) #3, !dbg !27
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %18) #3, !dbg !27
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %84, i1 %19) #3, !dbg !27
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %19) #3, !dbg !27
  %90 = fadd float %57, 0x3EE4F8B580000000, !dbg !28
  %91 = fadd float %58, 0x3EE4F8B580000000, !dbg !28
  %92 = fadd float %62, 0x3EE4F8B580000000, !dbg !28
  %93 = fadd float %63, 0x3EE4F8B580000000, !dbg !28
  %94 = fadd float %67, 0x3EE4F8B580000000, !dbg !28
  %95 = fadd float %68, 0x3EE4F8B580000000, !dbg !28
  %96 = fadd float %72, 0x3EE4F8B580000000, !dbg !28
  %97 = fadd float %73, 0x3EE4F8B580000000, !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %98, 0, !dbg !29
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %99, 0, !dbg !29
  br i1 %.not.i, label %105, label %100, !dbg !29

100:                                              ; preds = %8
  br i1 %.not1.i, label %103, label %101, !dbg !29

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

105:                                              ; preds = %8
  br i1 %.not1.i, label %108, label %106, !dbg !29

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %101, %103, %106, %108
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !29
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %110, 0, !dbg !29
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %111, 0, !dbg !29
  br i1 %.not.i1, label %117, label %112, !dbg !29

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !29

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %120, label %118, !dbg !29

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %113, %115, %118, %120
  %.0.i3 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !29
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %122, 0, !dbg !29
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %123, 0, !dbg !29
  br i1 %.not.i6, label %129, label %124, !dbg !29

124:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %127, label %125, !dbg !29

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

129:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %132, label %130, !dbg !29

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %125, %127, %130, %132
  %.0.i8 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !29
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %134, 0, !dbg !29
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %135, 0, !dbg !29
  br i1 %.not.i11, label %141, label %136, !dbg !29

136:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %139, label %137, !dbg !29

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

141:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %144, label %142, !dbg !29

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %137, %139, %142, %144
  %.0.i13 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !29
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %146, 0, !dbg !29
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %147, 0, !dbg !29
  br i1 %.not.i16, label %153, label %148, !dbg !29

148:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %151, label %149, !dbg !29

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

153:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %156, label %154, !dbg !29

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %149, %151, %154, %156
  %.0.i18 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !29
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %158, 0, !dbg !29
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %159, 0, !dbg !29
  br i1 %.not.i21, label %165, label %160, !dbg !29

160:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %163, label %161, !dbg !29

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

165:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %168, label %166, !dbg !29

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %161, %163, %166, %168
  %.0.i23 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !29
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %170, 0, !dbg !29
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %171, 0, !dbg !29
  br i1 %.not.i26, label %177, label %172, !dbg !29

172:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %175, label %173, !dbg !29

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

177:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %180, label %178, !dbg !29

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %173, %175, %178, %180
  %.0.i28 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !29
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %182, 0, !dbg !29
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %183, 0, !dbg !29
  br i1 %.not.i31, label %189, label %184, !dbg !29

184:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %187, label %185, !dbg !29

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

189:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %192, label %190, !dbg !29

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %185, %187, %190, %192
  %.0.i33 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !29
  %194 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %195 = bitcast i32 %194 to float, !dbg !17
  %196 = extractvalue { i32, i32 } %41, 1, !dbg !19
  %197 = bitcast i32 %196 to float, !dbg !19
  %198 = fadd float %195, %197, !dbg !30
  %199 = extractvalue { i32, i32 } %49, 1, !dbg !21
  %200 = bitcast i32 %199 to float, !dbg !21
  %201 = fsub float %198, %200, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %203 = bitcast i32 %202 to float, !dbg !17
  %204 = extractvalue { i32, i32 } %41, 0, !dbg !19
  %205 = bitcast i32 %204 to float, !dbg !19
  %206 = fadd float %203, %205, !dbg !30
  %207 = extractvalue { i32, i32 } %49, 0, !dbg !21
  %208 = bitcast i32 %207 to float, !dbg !21
  %209 = fsub float %206, %208, !dbg !31
  %210 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %211 = bitcast i32 %210 to float, !dbg !17
  %212 = extractvalue { i32, i32 } %40, 1, !dbg !19
  %213 = bitcast i32 %212 to float, !dbg !19
  %214 = fadd float %211, %213, !dbg !30
  %215 = extractvalue { i32, i32 } %48, 1, !dbg !21
  %216 = bitcast i32 %215 to float, !dbg !21
  %217 = fsub float %214, %216, !dbg !31
  %218 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %219 = bitcast i32 %218 to float, !dbg !17
  %220 = extractvalue { i32, i32 } %40, 0, !dbg !19
  %221 = bitcast i32 %220 to float, !dbg !19
  %222 = fadd float %219, %221, !dbg !30
  %223 = extractvalue { i32, i32 } %48, 0, !dbg !21
  %224 = bitcast i32 %223 to float, !dbg !21
  %225 = fsub float %222, %224, !dbg !31
  %226 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %227 = bitcast i32 %226 to float, !dbg !17
  %228 = extractvalue { i32, i32 } %39, 1, !dbg !19
  %229 = bitcast i32 %228 to float, !dbg !19
  %230 = fadd float %227, %229, !dbg !30
  %231 = extractvalue { i32, i32 } %47, 1, !dbg !21
  %232 = bitcast i32 %231 to float, !dbg !21
  %233 = fsub float %230, %232, !dbg !31
  %234 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %235 = bitcast i32 %234 to float, !dbg !17
  %236 = extractvalue { i32, i32 } %39, 0, !dbg !19
  %237 = bitcast i32 %236 to float, !dbg !19
  %238 = fadd float %235, %237, !dbg !30
  %239 = extractvalue { i32, i32 } %47, 0, !dbg !21
  %240 = bitcast i32 %239 to float, !dbg !21
  %241 = fsub float %238, %240, !dbg !31
  %242 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %243 = bitcast i32 %242 to float, !dbg !17
  %244 = extractvalue { i32, i32 } %38, 1, !dbg !19
  %245 = bitcast i32 %244 to float, !dbg !19
  %246 = fadd float %243, %245, !dbg !30
  %247 = extractvalue { i32, i32 } %46, 1, !dbg !21
  %248 = bitcast i32 %247 to float, !dbg !21
  %249 = fsub float %246, %248, !dbg !31
  %250 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %251 = bitcast i32 %250 to float, !dbg !17
  %252 = extractvalue { i32, i32 } %38, 0, !dbg !19
  %253 = bitcast i32 %252 to float, !dbg !19
  %254 = fadd float %251, %253, !dbg !30
  %255 = extractvalue { i32, i32 } %46, 0, !dbg !21
  %256 = bitcast i32 %255 to float, !dbg !21
  %257 = fsub float %254, %256, !dbg !31
  %258 = extractvalue { i32, i32 } %89, 1, !dbg !27
  %259 = bitcast i32 %258 to float, !dbg !27
  %260 = extractvalue { i32, i32 } %89, 0, !dbg !27
  %261 = bitcast i32 %260 to float, !dbg !27
  %262 = extractvalue { i32, i32 } %88, 1, !dbg !27
  %263 = bitcast i32 %262 to float, !dbg !27
  %264 = extractvalue { i32, i32 } %88, 0, !dbg !27
  %265 = bitcast i32 %264 to float, !dbg !27
  %266 = extractvalue { i32, i32 } %87, 1, !dbg !27
  %267 = bitcast i32 %266 to float, !dbg !27
  %268 = extractvalue { i32, i32 } %87, 0, !dbg !27
  %269 = bitcast i32 %268 to float, !dbg !27
  %270 = extractvalue { i32, i32 } %86, 1, !dbg !27
  %271 = bitcast i32 %270 to float, !dbg !27
  %272 = extractvalue { i32, i32 } %86, 0, !dbg !27
  %273 = bitcast i32 %272 to float, !dbg !27
  %274 = extractvalue { i32, i32 } %81, 1, !dbg !25
  %275 = bitcast i32 %274 to float, !dbg !25
  %276 = extractvalue { i32, i32 } %81, 0, !dbg !25
  %277 = bitcast i32 %276 to float, !dbg !25
  %278 = extractvalue { i32, i32 } %80, 1, !dbg !25
  %279 = bitcast i32 %278 to float, !dbg !25
  %280 = extractvalue { i32, i32 } %80, 0, !dbg !25
  %281 = bitcast i32 %280 to float, !dbg !25
  %282 = extractvalue { i32, i32 } %79, 1, !dbg !25
  %283 = bitcast i32 %282 to float, !dbg !25
  %284 = extractvalue { i32, i32 } %79, 0, !dbg !25
  %285 = bitcast i32 %284 to float, !dbg !25
  %286 = extractvalue { i32, i32 } %78, 1, !dbg !25
  %287 = bitcast i32 %286 to float, !dbg !25
  %288 = extractvalue { i32, i32 } %78, 0, !dbg !25
  %289 = bitcast i32 %288 to float, !dbg !25
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !32
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !32
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !32
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !32
  %298 = fmul float %257, %290, !dbg !33
  %299 = fmul float %249, %291, !dbg !33
  %300 = fmul float %241, %292, !dbg !33
  %301 = fmul float %233, %293, !dbg !33
  %302 = fmul float %225, %294, !dbg !33
  %303 = fmul float %217, %295, !dbg !33
  %304 = fmul float %209, %296, !dbg !33
  %305 = fmul float %201, %297, !dbg !33
  %306 = fmul float %298, %289, !dbg !34
  %307 = fmul float %299, %287, !dbg !34
  %308 = fmul float %300, %285, !dbg !34
  %309 = fmul float %301, %283, !dbg !34
  %310 = fmul float %302, %281, !dbg !34
  %311 = fmul float %303, %279, !dbg !34
  %312 = fmul float %304, %277, !dbg !34
  %313 = fmul float %305, %275, !dbg !34
  %314 = fadd float %306, %273, !dbg !35
  %315 = fadd float %307, %271, !dbg !35
  %316 = fadd float %308, %269, !dbg !35
  %317 = fadd float %309, %267, !dbg !35
  %318 = fadd float %310, %265, !dbg !35
  %319 = fadd float %311, %263, !dbg !35
  %320 = fadd float %312, %261, !dbg !35
  %321 = fadd float %313, %259, !dbg !35
  %322 = bitcast float %254 to i32, !dbg !36
  %323 = bitcast float %246 to i32, !dbg !36
  %324 = bitcast float %238 to i32, !dbg !36
  %325 = bitcast float %230 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %322, i32 %323, i32 %324, i32 %325, ptr addrspace(1) %25, i1 %18) #3, !dbg !36
  %326 = bitcast float %222 to i32, !dbg !36
  %327 = bitcast float %214 to i32, !dbg !36
  %328 = bitcast float %206 to i32, !dbg !36
  %329 = bitcast float %198 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %326, i32 %327, i32 %328, i32 %329, ptr addrspace(1) %27, i1 %19) #3, !dbg !36
  %330 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !37
  %331 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !37
  %332 = bitcast float %314 to i32, !dbg !38
  %333 = bitcast float %315 to i32, !dbg !38
  %334 = bitcast float %316 to i32, !dbg !38
  %335 = bitcast float %317 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %333, i32 %334, i32 %335, ptr addrspace(1) %330, i1 %18) #3, !dbg !38
  %336 = bitcast float %318 to i32, !dbg !38
  %337 = bitcast float %319 to i32, !dbg !38
  %338 = bitcast float %320 to i32, !dbg !38
  %339 = bitcast float %321 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %336, i32 %337, i32 %338, i32 %339, ptr addrspace(1) %331, i1 %19) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv5iwno2t6mumrn75mlaoq5gliscp4kvoqbuf2ygitej66xv7skq.py", directory: "inductor_cache/v5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 39, scope: !7)
!37 = !DILocation(line: 45, column: 25, scope: !7)
!38 = !DILocation(line: 45, column: 37, scope: !7)
!39 = !DILocation(line: 45, column: 4, scope: !7)
