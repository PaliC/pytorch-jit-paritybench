; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_div_mean_mul_sqrt_sub_var_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 16, !dbg !15
  %15 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = sdiv i32 %12, 64, !dbg !17
  %17 = srem i32 %14, 4, !dbg !18
  %18 = sext i32 %12 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !20
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %23 = bitcast i32 %21 to float, !dbg !20
  %24 = bitcast i32 %22 to float, !dbg !20
  %25 = shl nsw i32 %16, 6, !dbg !21
  %26 = add i32 %25, %.decomposed, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %13) #1, !dbg !24
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !24
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !24
  %32 = bitcast i32 %30 to float, !dbg !24
  %33 = bitcast i32 %31 to float, !dbg !24
  %34 = add i32 %26, 16, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !27
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !27
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !27
  %40 = bitcast i32 %38 to float, !dbg !27
  %41 = bitcast i32 %39 to float, !dbg !27
  %42 = add i32 %26, 32, !dbg !28
  %43 = sext i32 %42 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !29
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %13) #1, !dbg !30
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !30
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !30
  %48 = bitcast i32 %46 to float, !dbg !30
  %49 = bitcast i32 %47 to float, !dbg !30
  %50 = add i32 %26, 48, !dbg !31
  %51 = sext i32 %50 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !32
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %13) #1, !dbg !33
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !33
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !33
  %56 = bitcast i32 %54 to float, !dbg !33
  %57 = bitcast i32 %55 to float, !dbg !33
  %58 = shl nsw i32 %16, 4, !dbg !34
  %59 = add nsw i32 %58, %.decomposed, !dbg !35
  %60 = sext i32 %59 to i64, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !36
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !37
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !37
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !37
  %65 = bitcast i32 %63 to float, !dbg !37
  %66 = bitcast i32 %64 to float, !dbg !37
  %67 = sext i32 %17 to i64, !dbg !38
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !38
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %13) #1, !dbg !39
  %70 = bitcast i32 %69 to float, !dbg !39
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %13) #1, !dbg !39
  %72 = bitcast i32 %71 to float, !dbg !39
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !40
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %13) #1, !dbg !41
  %75 = bitcast i32 %74 to float, !dbg !41
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %13) #1, !dbg !41
  %77 = bitcast i32 %76 to float, !dbg !41
  %78 = fadd float %32, %40, !dbg !42
  %79 = fadd float %33, %41, !dbg !42
  %80 = fadd float %78, %48, !dbg !43
  %81 = fadd float %79, %49, !dbg !43
  %82 = fadd float %80, %56, !dbg !44
  %83 = fadd float %81, %57, !dbg !44
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 4.000000e+00) #1, !dbg !45
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 4.000000e+00) #1, !dbg !45
  %86 = fsub float %23, %84, !dbg !46
  %87 = fsub float %24, %85, !dbg !46
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %65) #1, !dbg !47
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %66) #1, !dbg !47
  %90 = fmul float %88, %70, !dbg !48
  %91 = fmul float %89, %72, !dbg !48
  %92 = fadd float %90, %75, !dbg !49
  %93 = fadd float %91, %77, !dbg !49
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !50
  %95 = bitcast float %92 to i32, !dbg !51
  %96 = bitcast float %93 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %95, i32 %96, ptr addrspace(1) %94, i1 %13) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd7ns6dvlfnjm3kf2ga7f46ket5jziiqkmo42aty4eng36xoesxr.py", directory: "inductor_cache/d7")
!4 = !{ptr @triton_poi_fused_add_div_mean_mul_sqrt_sub_var_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mean_mul_sqrt_sub_var_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mean_mul_sqrt_sub_var_1", linkageName: "triton_poi_fused_add_div_mean_mul_sqrt_sub_var_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 38, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 48, scope: !7)
!28 = !DILocation(line: 31, column: 40, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 48, scope: !7)
!31 = !DILocation(line: 32, column: 40, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 48, scope: !7)
!34 = !DILocation(line: 33, column: 39, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 44, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 36, scope: !7)
!40 = !DILocation(line: 35, column: 31, scope: !7)
!41 = !DILocation(line: 35, column: 36, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 41, column: 19, scope: !7)
!47 = !DILocation(line: 42, column: 20, scope: !7)
!48 = !DILocation(line: 43, column: 20, scope: !7)
!49 = !DILocation(line: 44, column: 20, scope: !7)
!50 = !DILocation(line: 45, column: 25, scope: !7)
!51 = !DILocation(line: 45, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 4, scope: !7)
