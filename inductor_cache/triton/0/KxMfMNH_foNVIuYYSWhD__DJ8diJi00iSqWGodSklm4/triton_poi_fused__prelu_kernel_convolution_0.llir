; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__prelu_kernel_convolution_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = sdiv i32 %11, 4096, !dbg !14
  %14 = sdiv i32 %12, 4096, !dbg !14
  %15 = srem i32 %13, 64, !dbg !15
  %16 = srem i32 %14, 64, !dbg !15
  %17 = sext i32 %11 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = sext i32 %12 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %31 = sext i32 %15 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = sext i32 %16 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !20
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !21
  %46 = bitcast i32 %45 to float, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !21
  %50 = bitcast i32 %49 to float, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !21
  %52 = bitcast i32 %51 to float, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %54 = bitcast i32 %53 to float, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %56 = bitcast i32 %55 to float, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %58 = bitcast i32 %57 to float, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %60 = bitcast i32 %59 to float, !dbg !21
  %61 = insertelement <8 x i32> poison, i32 %30, i64 0, !dbg !17
  %62 = insertelement <8 x i32> %61, i32 %29, i64 1, !dbg !17
  %63 = insertelement <8 x i32> %62, i32 %28, i64 2, !dbg !17
  %64 = insertelement <8 x i32> %63, i32 %27, i64 3, !dbg !17
  %65 = insertelement <8 x i32> %64, i32 %25, i64 4, !dbg !17
  %66 = insertelement <8 x i32> %65, i32 %24, i64 5, !dbg !17
  %67 = insertelement <8 x i32> %66, i32 %23, i64 6, !dbg !17
  %68 = insertelement <8 x i32> %67, i32 %22, i64 7, !dbg !17
  %69 = bitcast <8 x i32> %68 to <8 x float>, !dbg !17
  %70 = insertelement <8 x i32> poison, i32 %42, i64 0, !dbg !19
  %71 = insertelement <8 x i32> %70, i32 %41, i64 1, !dbg !19
  %72 = insertelement <8 x i32> %71, i32 %40, i64 2, !dbg !19
  %73 = insertelement <8 x i32> %72, i32 %39, i64 3, !dbg !19
  %74 = insertelement <8 x i32> %73, i32 %38, i64 4, !dbg !19
  %75 = insertelement <8 x i32> %74, i32 %37, i64 5, !dbg !19
  %76 = insertelement <8 x i32> %75, i32 %36, i64 6, !dbg !19
  %77 = insertelement <8 x i32> %76, i32 %35, i64 7, !dbg !19
  %78 = bitcast <8 x i32> %77 to <8 x float>, !dbg !19
  %79 = fadd <8 x float> %69, %78, !dbg !22
  %80 = fcmp ogt <8 x float> %79, zeroinitializer, !dbg !23
  %81 = extractelement <8 x float> %79, i64 7, !dbg !24
  %82 = fmul float %81, %46, !dbg !25
  %83 = extractelement <8 x float> %79, i64 6, !dbg !24
  %84 = fmul float %83, %48, !dbg !25
  %85 = extractelement <8 x float> %79, i64 5, !dbg !24
  %86 = fmul float %85, %50, !dbg !25
  %87 = extractelement <8 x float> %79, i64 4, !dbg !24
  %88 = fmul float %87, %52, !dbg !25
  %89 = extractelement <8 x float> %79, i64 3, !dbg !24
  %90 = fmul float %89, %54, !dbg !25
  %91 = extractelement <8 x float> %79, i64 2, !dbg !24
  %92 = fmul float %91, %56, !dbg !25
  %93 = extractelement <8 x float> %79, i64 1, !dbg !24
  %94 = fmul float %93, %58, !dbg !25
  %95 = extractelement <8 x float> %79, i64 0, !dbg !24
  %96 = fmul float %95, %60, !dbg !25
  %97 = extractelement <8 x i1> %80, i64 7, !dbg !26
  %98 = select i1 %97, float %81, float %82, !dbg !26
  %99 = extractelement <8 x i1> %80, i64 6, !dbg !26
  %100 = select i1 %99, float %83, float %84, !dbg !26
  %101 = extractelement <8 x i1> %80, i64 5, !dbg !26
  %102 = select i1 %101, float %85, float %86, !dbg !26
  %103 = extractelement <8 x i1> %80, i64 4, !dbg !26
  %104 = select i1 %103, float %87, float %88, !dbg !26
  %105 = extractelement <8 x i1> %80, i64 3, !dbg !26
  %106 = select i1 %105, float %89, float %90, !dbg !26
  %107 = extractelement <8 x i1> %80, i64 2, !dbg !26
  %108 = select i1 %107, float %91, float %92, !dbg !26
  %109 = extractelement <8 x i1> %80, i64 1, !dbg !26
  %110 = select i1 %109, float %93, float %94, !dbg !26
  %111 = extractelement <8 x i1> %80, i64 0, !dbg !26
  %112 = select i1 %111, float %95, float %96, !dbg !26
  %113 = bitcast float %81 to i32, !dbg !24
  %114 = bitcast float %83 to i32, !dbg !24
  %115 = bitcast float %85 to i32, !dbg !24
  %116 = bitcast float %87 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %113, i32 %114, i32 %115, i32 %116, ptr addrspace(1) %18, i1 true) #1, !dbg !24
  %117 = bitcast float %89 to i32, !dbg !24
  %118 = bitcast float %91 to i32, !dbg !24
  %119 = bitcast float %93 to i32, !dbg !24
  %120 = bitcast float %95 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %117, i32 %118, i32 %119, i32 %120, ptr addrspace(1) %20, i1 true) #1, !dbg !24
  %121 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !27
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !27
  %123 = bitcast float %98 to i32, !dbg !28
  %124 = bitcast float %100 to i32, !dbg !28
  %125 = bitcast float %102 to i32, !dbg !28
  %126 = bitcast float %104 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %123, i32 %124, i32 %125, i32 %126, ptr addrspace(1) %121, i1 true) #1, !dbg !28
  %127 = bitcast float %106 to i32, !dbg !28
  %128 = bitcast float %108 to i32, !dbg !28
  %129 = bitcast float %110 to i32, !dbg !28
  %130 = bitcast float %112 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %127, i32 %128, i32 %129, i32 %130, ptr addrspace(1) %122, i1 true) #1, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cspe5dwcog2wmb2t5entffpdf2nbobrxkaldgwacxvopi22alzyn.py", directory: "inductor_cache/sp")
!4 = !{ptr @triton_poi_fused__prelu_kernel_convolution_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel_convolution_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel_convolution_0", linkageName: "triton_poi_fused__prelu_kernel_convolution_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 31, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 32, column: 18, scope: !7)
!26 = !DILocation(line: 33, column: 32, scope: !7)
!27 = !DILocation(line: 35, column: 25, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 4, scope: !7)
