; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = sdiv i32 %15, 1024, !dbg !14
  %18 = sdiv i32 %16, 1024, !dbg !14
  %19 = srem i32 %17, 32, !dbg !15
  %20 = srem i32 %18, 32, !dbg !15
  %21 = sext i32 %15 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = sext i32 %16 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !17
  %27 = sext i32 %19 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = sext i32 %20 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %52 = bitcast i32 %51 to float, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %56 = bitcast i32 %55 to float, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %60 = bitcast i32 %59 to float, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %62 = bitcast i32 %61 to float, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %64 = bitcast i32 %63 to float, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !28
  %88 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !28
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !29
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !29
  %91 = fadd float %52, 0x3EE4F8B580000000, !dbg !30
  %92 = fadd float %54, 0x3EE4F8B580000000, !dbg !30
  %93 = fadd float %56, 0x3EE4F8B580000000, !dbg !30
  %94 = fadd float %58, 0x3EE4F8B580000000, !dbg !30
  %95 = fadd float %60, 0x3EE4F8B580000000, !dbg !30
  %96 = fadd float %62, 0x3EE4F8B580000000, !dbg !30
  %97 = fadd float %64, 0x3EE4F8B580000000, !dbg !30
  %98 = fadd float %66, 0x3EE4F8B580000000, !dbg !30
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %99, 0, !dbg !31
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %100, 0, !dbg !31
  br i1 %.not.i, label %106, label %101, !dbg !31

101:                                              ; preds = %9
  br i1 %.not1.i, label %104, label %102, !dbg !31

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

106:                                              ; preds = %9
  br i1 %.not1.i, label %109, label %107, !dbg !31

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %102, %104, %107, %109
  %.0.i = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !31
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %111, 0, !dbg !31
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %112, 0, !dbg !31
  br i1 %.not.i1, label %118, label %113, !dbg !31

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %116, label %114, !dbg !31

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %121, label %119, !dbg !31

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %114, %116, %119, %121
  %.0.i3 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !31
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i6 = icmp eq i32 %123, 0, !dbg !31
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i9 = icmp eq i32 %124, 0, !dbg !31
  br i1 %.not.i6, label %130, label %125, !dbg !31

125:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %128, label %126, !dbg !31

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

130:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %133, label %131, !dbg !31

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %126, %128, %131, %133
  %.0.i8 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !31
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i11 = icmp eq i32 %135, 0, !dbg !31
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i14 = icmp eq i32 %136, 0, !dbg !31
  br i1 %.not.i11, label %142, label %137, !dbg !31

137:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %140, label %138, !dbg !31

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

142:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %145, label %143, !dbg !31

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %138, %140, %143, %145
  %.0.i13 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !31
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i16 = icmp eq i32 %147, 0, !dbg !31
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i19 = icmp eq i32 %148, 0, !dbg !31
  br i1 %.not.i16, label %154, label %149, !dbg !31

149:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %152, label %150, !dbg !31

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

154:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %157, label %155, !dbg !31

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %150, %152, %155, %157
  %.0.i18 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !31
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i21 = icmp eq i32 %159, 0, !dbg !31
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i24 = icmp eq i32 %160, 0, !dbg !31
  br i1 %.not.i21, label %166, label %161, !dbg !31

161:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %164, label %162, !dbg !31

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

166:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %169, label %167, !dbg !31

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

__nv_sqrtf.exit25:                                ; preds = %162, %164, %167, %169
  %.0.i23 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !31
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i26 = icmp eq i32 %171, 0, !dbg !31
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i29 = icmp eq i32 %172, 0, !dbg !31
  br i1 %.not.i26, label %178, label %173, !dbg !31

173:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %176, label %174, !dbg !31

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

178:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %181, label %179, !dbg !31

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

__nv_sqrtf.exit30:                                ; preds = %174, %176, %179, %181
  %.0.i28 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !31
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i31 = icmp eq i32 %183, 0, !dbg !31
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i34 = icmp eq i32 %184, 0, !dbg !31
  br i1 %.not.i31, label %190, label %185, !dbg !31

185:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %188, label %186, !dbg !31

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

190:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %193, label %191, !dbg !31

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %186, %188, %191, %193
  %.0.i33 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !31
  %195 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %196 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !19
  %197 = insertelement <8 x i32> %196, i32 %37, i64 1, !dbg !19
  %198 = insertelement <8 x i32> %197, i32 %36, i64 2, !dbg !19
  %199 = insertelement <8 x i32> %198, i32 %35, i64 3, !dbg !19
  %200 = insertelement <8 x i32> %199, i32 %34, i64 4, !dbg !19
  %201 = insertelement <8 x i32> %200, i32 %33, i64 5, !dbg !19
  %202 = insertelement <8 x i32> %201, i32 %32, i64 6, !dbg !19
  %203 = insertelement <8 x i32> %202, i32 %31, i64 7, !dbg !19
  %204 = bitcast <8 x i32> %203 to <8 x float>, !dbg !19
  %205 = insertelement <8 x i32> poison, i32 %48, i64 0, !dbg !21
  %206 = insertelement <8 x i32> %205, i32 %47, i64 1, !dbg !21
  %207 = insertelement <8 x i32> %206, i32 %46, i64 2, !dbg !21
  %208 = insertelement <8 x i32> %207, i32 %45, i64 3, !dbg !21
  %209 = insertelement <8 x i32> %208, i32 %44, i64 4, !dbg !21
  %210 = insertelement <8 x i32> %209, i32 %43, i64 5, !dbg !21
  %211 = insertelement <8 x i32> %210, i32 %42, i64 6, !dbg !21
  %212 = insertelement <8 x i32> %211, i32 %41, i64 7, !dbg !21
  %213 = bitcast <8 x i32> %212 to <8 x float>, !dbg !21
  %214 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %215 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %216 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %217 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %218 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %219 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %220 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %221 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !29
  %222 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !29
  %223 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !29
  %224 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !29
  %225 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !29
  %226 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !29
  %227 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !29
  %228 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !29
  %229 = insertelement <8 x i32> poison, i32 %86, i64 0, !dbg !27
  %230 = insertelement <8 x i32> %229, i32 %85, i64 1, !dbg !27
  %231 = insertelement <8 x i32> %230, i32 %84, i64 2, !dbg !27
  %232 = insertelement <8 x i32> %231, i32 %83, i64 3, !dbg !27
  %233 = insertelement <8 x i32> %232, i32 %82, i64 4, !dbg !27
  %234 = insertelement <8 x i32> %233, i32 %81, i64 5, !dbg !27
  %235 = insertelement <8 x i32> %234, i32 %80, i64 6, !dbg !27
  %236 = insertelement <8 x i32> %235, i32 %79, i64 7, !dbg !27
  %237 = bitcast <8 x i32> %236 to <8 x float>, !dbg !27
  %238 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !25
  %239 = insertelement <8 x i32> %238, i32 %75, i64 1, !dbg !25
  %240 = insertelement <8 x i32> %239, i32 %74, i64 2, !dbg !25
  %241 = insertelement <8 x i32> %240, i32 %73, i64 3, !dbg !25
  %242 = insertelement <8 x i32> %241, i32 %72, i64 4, !dbg !25
  %243 = insertelement <8 x i32> %242, i32 %71, i64 5, !dbg !25
  %244 = insertelement <8 x i32> %243, i32 %70, i64 6, !dbg !25
  %245 = insertelement <8 x i32> %244, i32 %69, i64 7, !dbg !25
  %246 = bitcast <8 x i32> %245 to <8 x float>, !dbg !25
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !32
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !32
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !32
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !32
  %255 = insertelement <8 x i32> poison, i32 %195, i64 0, !dbg !17
  %256 = insertelement <8 x i32> %255, i32 %214, i64 1, !dbg !17
  %257 = insertelement <8 x i32> %256, i32 %215, i64 2, !dbg !17
  %258 = insertelement <8 x i32> %257, i32 %216, i64 3, !dbg !17
  %259 = insertelement <8 x i32> %258, i32 %217, i64 4, !dbg !17
  %260 = insertelement <8 x i32> %259, i32 %218, i64 5, !dbg !17
  %261 = insertelement <8 x i32> %260, i32 %219, i64 6, !dbg !17
  %262 = insertelement <8 x i32> %261, i32 %220, i64 7, !dbg !17
  %263 = bitcast <8 x i32> %262 to <8 x float>, !dbg !17
  %264 = fadd <8 x float> %263, %204, !dbg !33
  %265 = fsub <8 x float> %264, %213, !dbg !34
  %266 = insertelement <8 x i32> poison, i32 %221, i64 0, !dbg !29
  %267 = insertelement <8 x i32> %266, i32 %222, i64 1, !dbg !29
  %268 = insertelement <8 x i32> %267, i32 %223, i64 2, !dbg !29
  %269 = insertelement <8 x i32> %268, i32 %224, i64 3, !dbg !29
  %270 = insertelement <8 x i32> %269, i32 %225, i64 4, !dbg !29
  %271 = insertelement <8 x i32> %270, i32 %226, i64 5, !dbg !29
  %272 = insertelement <8 x i32> %271, i32 %227, i64 6, !dbg !29
  %273 = insertelement <8 x i32> %272, i32 %228, i64 7, !dbg !29
  %274 = bitcast <8 x i32> %273 to <8 x float>, !dbg !29
  %275 = insertelement <8 x float> poison, float %254, i64 0, !dbg !35
  %276 = insertelement <8 x float> %275, float %253, i64 1, !dbg !35
  %277 = insertelement <8 x float> %276, float %252, i64 2, !dbg !35
  %278 = insertelement <8 x float> %277, float %251, i64 3, !dbg !35
  %279 = insertelement <8 x float> %278, float %250, i64 4, !dbg !35
  %280 = insertelement <8 x float> %279, float %249, i64 5, !dbg !35
  %281 = insertelement <8 x float> %280, float %248, i64 6, !dbg !35
  %282 = insertelement <8 x float> %281, float %247, i64 7, !dbg !35
  %283 = fmul <8 x float> %265, %282, !dbg !35
  %284 = fmul <8 x float> %283, %246, !dbg !36
  %285 = fadd <8 x float> %284, %237, !dbg !37
  %286 = fadd <8 x float> %285, %274, !dbg !38
  %287 = fcmp olt <8 x float> %286, zeroinitializer, !dbg !39
  %288 = extractelement <8 x i1> %287, i64 7, !dbg !43
  %289 = extractelement <8 x i1> %287, i64 6, !dbg !43
  %290 = extractelement <8 x i1> %287, i64 5, !dbg !43
  %291 = extractelement <8 x i1> %287, i64 4, !dbg !43
  %292 = extractelement <8 x i1> %287, i64 3, !dbg !43
  %293 = extractelement <8 x i1> %287, i64 2, !dbg !43
  %294 = extractelement <8 x i1> %287, i64 1, !dbg !43
  %295 = extractelement <8 x i1> %287, i64 0, !dbg !43
  %bc = bitcast <8 x float> %264 to <8 x i32>, !dbg !44
  %296 = extractelement <8 x i32> %bc, i64 7, !dbg !44
  %bc36 = bitcast <8 x float> %264 to <8 x i32>, !dbg !44
  %297 = extractelement <8 x i32> %bc36, i64 6, !dbg !44
  %bc37 = bitcast <8 x float> %264 to <8 x i32>, !dbg !44
  %298 = extractelement <8 x i32> %bc37, i64 5, !dbg !44
  %bc38 = bitcast <8 x float> %264 to <8 x i32>, !dbg !44
  %299 = extractelement <8 x i32> %bc38, i64 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %22, i1 true) #3, !dbg !44
  %bc39 = bitcast <8 x float> %264 to <8 x i32>, !dbg !44
  %300 = extractelement <8 x i32> %bc39, i64 3, !dbg !44
  %bc40 = bitcast <8 x float> %264 to <8 x i32>, !dbg !44
  %301 = extractelement <8 x i32> %bc40, i64 2, !dbg !44
  %bc41 = bitcast <8 x float> %264 to <8 x i32>, !dbg !44
  %302 = extractelement <8 x i32> %bc41, i64 1, !dbg !44
  %bc42 = bitcast <8 x float> %264 to <8 x i32>, !dbg !44
  %303 = extractelement <8 x i32> %bc42, i64 0, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %24, i1 true) #3, !dbg !44
  %304 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !45
  %305 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !45
  %bc43 = bitcast <8 x float> %286 to <8 x i32>, !dbg !46
  %306 = extractelement <8 x i32> %bc43, i64 7, !dbg !46
  %307 = select i1 %288, i32 0, i32 %306, !dbg !43
  %bc44 = bitcast <8 x float> %286 to <8 x i32>, !dbg !46
  %308 = extractelement <8 x i32> %bc44, i64 6, !dbg !46
  %309 = select i1 %289, i32 0, i32 %308, !dbg !43
  %bc45 = bitcast <8 x float> %286 to <8 x i32>, !dbg !46
  %310 = extractelement <8 x i32> %bc45, i64 5, !dbg !46
  %311 = select i1 %290, i32 0, i32 %310, !dbg !43
  %bc46 = bitcast <8 x float> %286 to <8 x i32>, !dbg !46
  %312 = extractelement <8 x i32> %bc46, i64 4, !dbg !46
  %313 = select i1 %291, i32 0, i32 %312, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %309, i32 %311, i32 %313, ptr addrspace(1) %304, i1 true) #3, !dbg !46
  %bc47 = bitcast <8 x float> %286 to <8 x i32>, !dbg !46
  %314 = extractelement <8 x i32> %bc47, i64 3, !dbg !46
  %315 = select i1 %292, i32 0, i32 %314, !dbg !43
  %bc48 = bitcast <8 x float> %286 to <8 x i32>, !dbg !46
  %316 = extractelement <8 x i32> %bc48, i64 2, !dbg !46
  %317 = select i1 %293, i32 0, i32 %316, !dbg !43
  %bc49 = bitcast <8 x float> %286 to <8 x i32>, !dbg !46
  %318 = extractelement <8 x i32> %bc49, i64 1, !dbg !46
  %319 = select i1 %294, i32 0, i32 %318, !dbg !43
  %bc50 = bitcast <8 x float> %286 to <8 x i32>, !dbg !46
  %320 = extractelement <8 x i32> %bc50, i64 0, !dbg !46
  %321 = select i1 %295, i32 0, i32 %320, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %317, i32 %319, i32 %321, ptr addrspace(1) %305, i1 true) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czi375ab35xj4saeiwjtptrbtjhhvdz3mpeebwveexfwsravscjm.py", directory: "inductor_cache/zi")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 47, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 48, column: 39, scope: !7)
!45 = !DILocation(line: 49, column: 25, scope: !7)
!46 = !DILocation(line: 49, column: 37, scope: !7)
!47 = !DILocation(line: 49, column: 4, scope: !7)
