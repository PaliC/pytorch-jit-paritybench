; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = sdiv i32 %11, 16, !dbg !15
  %14 = sext i32 %11 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %12) #1, !dbg !17
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !17
  %19 = bitcast i32 %17 to float, !dbg !17
  %20 = bitcast i32 %18 to float, !dbg !17
  %21 = sext i32 %13 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #1, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #1, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = add i32 %11, 64, !dbg !20
  %28 = sext i32 %27 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %12) #1, !dbg !22
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !22
  %33 = bitcast i32 %31 to float, !dbg !22
  %34 = bitcast i32 %32 to float, !dbg !22
  %35 = add i32 %11, 128, !dbg !23
  %36 = sext i32 %35 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %12) #1, !dbg !25
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !25
  %41 = bitcast i32 %39 to float, !dbg !25
  %42 = bitcast i32 %40 to float, !dbg !25
  %43 = add i32 %11, 192, !dbg !26
  %44 = sext i32 %43 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %12) #1, !dbg !28
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !28
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !28
  %49 = bitcast i32 %47 to float, !dbg !28
  %50 = bitcast i32 %48 to float, !dbg !28
  %51 = fadd float %19, %24, !dbg !29
  %52 = fadd float %20, %26, !dbg !29
  %53 = fadd float %24, %33, !dbg !30
  %54 = fadd float %26, %34, !dbg !30
  %55 = fcmp ogt float %51, %53, !dbg !31
  %56 = fcmp ogt float %52, %54, !dbg !31
  %57 = fcmp uno float %51, 0.000000e+00, !dbg !35
  %58 = fcmp uno float %52, 0.000000e+00, !dbg !35
  %59 = or i1 %57, %55, !dbg !36
  %60 = or i1 %58, %56, !dbg !36
  %61 = select i1 %59, float %51, float %53, !dbg !37
  %62 = select i1 %60, float %52, float %54, !dbg !37
  %63 = fadd float %24, %41, !dbg !38
  %64 = fadd float %26, %42, !dbg !38
  %65 = fcmp ogt float %61, %63, !dbg !39
  %66 = fcmp ogt float %62, %64, !dbg !39
  %67 = fcmp uno float %61, 0.000000e+00, !dbg !41
  %68 = fcmp uno float %62, 0.000000e+00, !dbg !41
  %69 = or i1 %65, %67, !dbg !42
  %70 = or i1 %66, %68, !dbg !42
  %71 = select i1 %69, float %61, float %63, !dbg !43
  %72 = select i1 %70, float %62, float %64, !dbg !43
  %73 = fadd float %24, %49, !dbg !44
  %74 = fadd float %26, %50, !dbg !44
  %75 = fcmp ogt float %71, %73, !dbg !45
  %76 = fcmp ogt float %72, %74, !dbg !45
  %77 = fcmp uno float %71, 0.000000e+00, !dbg !47
  %78 = fcmp uno float %72, 0.000000e+00, !dbg !47
  %79 = or i1 %75, %77, !dbg !48
  %80 = or i1 %76, %78, !dbg !48
  %81 = select i1 %79, float %71, float %73, !dbg !49
  %82 = select i1 %80, float %72, float %74, !dbg !49
  %83 = fsub float %51, %81, !dbg !50
  %84 = fsub float %52, %82, !dbg !50
  %85 = fmul float %83, 0x3FF7154760000000, !dbg !51
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !51
  %87 = fmul float %84, 0x3FF7154760000000, !dbg !51
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #1, !dbg !51
  %89 = fsub float %53, %81, !dbg !52
  %90 = fsub float %54, %82, !dbg !52
  %91 = fmul float %89, 0x3FF7154760000000, !dbg !53
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !53
  %93 = fmul float %90, 0x3FF7154760000000, !dbg !53
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #1, !dbg !53
  %95 = fadd float %86, %92, !dbg !54
  %96 = fadd float %88, %94, !dbg !54
  %97 = fsub float %63, %81, !dbg !55
  %98 = fsub float %64, %82, !dbg !55
  %99 = fmul float %97, 0x3FF7154760000000, !dbg !56
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %99) #1, !dbg !56
  %101 = fmul float %98, 0x3FF7154760000000, !dbg !56
  %102 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %101) #1, !dbg !56
  %103 = fadd float %95, %100, !dbg !57
  %104 = fadd float %96, %102, !dbg !57
  %105 = fsub float %73, %81, !dbg !58
  %106 = fsub float %74, %82, !dbg !58
  %107 = fmul float %105, 0x3FF7154760000000, !dbg !59
  %108 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %107) #1, !dbg !59
  %109 = fmul float %106, 0x3FF7154760000000, !dbg !59
  %110 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %109) #1, !dbg !59
  %111 = fadd float %103, %108, !dbg !60
  %112 = fadd float %104, %110, !dbg !60
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !61
  %114 = bitcast float %81 to i32, !dbg !62
  %115 = bitcast float %82 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %114, i32 %115, ptr addrspace(1) %113, i1 %12) #1, !dbg !62
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !63
  %117 = bitcast float %111 to i32, !dbg !64
  %118 = bitcast float %112 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %118, ptr addrspace(1) %116, i1 %12) #1, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c72rip6ieqohslywpipa37npcboy3ljionnh4cxoqzidlv7k3vxx.py", directory: "inductor_cache/72")
!4 = !{ptr @triton_poi_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_1", linkageName: "triton_poi_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 40, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 41, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 33, column: 40, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 18, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !40)
!40 = !DILocation(line: 35, column: 40, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !40)
!44 = !DILocation(line: 36, column: 19, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !46)
!46 = !DILocation(line: 37, column: 41, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !46)
!50 = !DILocation(line: 38, column: 19, scope: !7)
!51 = !DILocation(line: 39, column: 24, scope: !7)
!52 = !DILocation(line: 40, column: 19, scope: !7)
!53 = !DILocation(line: 41, column: 24, scope: !7)
!54 = !DILocation(line: 42, column: 20, scope: !7)
!55 = !DILocation(line: 43, column: 19, scope: !7)
!56 = !DILocation(line: 44, column: 24, scope: !7)
!57 = !DILocation(line: 45, column: 20, scope: !7)
!58 = !DILocation(line: 46, column: 20, scope: !7)
!59 = !DILocation(line: 47, column: 24, scope: !7)
!60 = !DILocation(line: 48, column: 20, scope: !7)
!61 = !DILocation(line: 49, column: 25, scope: !7)
!62 = !DILocation(line: 49, column: 37, scope: !7)
!63 = !DILocation(line: 50, column: 25, scope: !7)
!64 = !DILocation(line: 50, column: 37, scope: !7)
!65 = !DILocation(line: 50, column: 4, scope: !7)
