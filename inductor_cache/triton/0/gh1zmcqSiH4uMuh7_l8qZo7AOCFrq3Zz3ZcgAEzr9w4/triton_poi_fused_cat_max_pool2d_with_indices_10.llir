; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, 1, !dbg !13
  %16 = or disjoint i32 %7, 2, !dbg !13
  %17 = or disjoint i32 %7, 3, !dbg !13
  %18 = or disjoint i32 %7, 4, !dbg !13
  %19 = or disjoint i32 %7, 5, !dbg !13
  %20 = or disjoint i32 %7, 6, !dbg !13
  %21 = or disjoint i32 %7, 7, !dbg !13
  %22 = or disjoint i32 %7, %12, !dbg !13
  %23 = or disjoint i32 %7, %13, !dbg !13
  %24 = srem i32 %15, 8, !dbg !14
  %25 = srem i32 %16, 8, !dbg !14
  %26 = srem i32 %17, 8, !dbg !14
  %27 = srem i32 %18, 8, !dbg !14
  %28 = srem i32 %19, 8, !dbg !14
  %29 = srem i32 %20, 8, !dbg !14
  %30 = srem i32 %21, 8, !dbg !14
  %.frozen = freeze i32 %22, !dbg !15
  %31 = sdiv i32 %.frozen, 32768, !dbg !15
  %32 = mul i32 %31, 32768, !dbg !16
  %.decomposed = sub i32 %.frozen, %32, !dbg !16
  %.frozen18 = freeze i32 %23, !dbg !15
  %33 = sdiv i32 %.frozen18, 32768, !dbg !15
  %34 = mul i32 %33, 32768, !dbg !16
  %.decomposed19 = sub i32 %.frozen18, %34, !dbg !16
  %35 = shl nsw i32 %24, 1, !dbg !17
  %36 = shl nsw i32 %25, 1, !dbg !17
  %37 = shl nsw i32 %26, 1, !dbg !17
  %38 = shl nsw i32 %27, 1, !dbg !17
  %39 = shl nsw i32 %28, 1, !dbg !17
  %40 = shl nsw i32 %29, 1, !dbg !17
  %41 = shl nsw i32 %30, 1, !dbg !17
  %42 = shl i32 %14, 2, !dbg !18
  %43 = add i32 %35, %42, !dbg !19
  %44 = add i32 %36, %42, !dbg !19
  %45 = add i32 %37, %42, !dbg !19
  %46 = add i32 %38, %42, !dbg !19
  %47 = add i32 %39, %42, !dbg !19
  %48 = add i32 %40, %42, !dbg !19
  %49 = add i32 %41, %42, !dbg !19
  %50 = sext i32 %42 to i64, !dbg !20
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !20
  %52 = sext i32 %43 to i64, !dbg !20
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !20
  %54 = sext i32 %44 to i64, !dbg !20
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !20
  %56 = sext i32 %45 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !20
  %58 = sext i32 %46 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = sext i32 %47 to i64, !dbg !20
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !20
  %62 = sext i32 %48 to i64, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !20
  %64 = sext i32 %49 to i64, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !21
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !21
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !21
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !21
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !21
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !21
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #2, !dbg !21
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #2, !dbg !21
  %74 = or disjoint i32 %42, 1, !dbg !22
  %75 = or disjoint i32 %43, 1, !dbg !22
  %76 = or disjoint i32 %44, 1, !dbg !22
  %77 = or disjoint i32 %45, 1, !dbg !22
  %78 = or disjoint i32 %46, 1, !dbg !22
  %79 = or disjoint i32 %47, 1, !dbg !22
  %80 = or disjoint i32 %48, 1, !dbg !22
  %81 = or disjoint i32 %49, 1, !dbg !22
  %82 = sext i32 %74 to i64, !dbg !23
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !23
  %84 = sext i32 %75 to i64, !dbg !23
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !23
  %86 = sext i32 %76 to i64, !dbg !23
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !23
  %88 = sext i32 %77 to i64, !dbg !23
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !23
  %90 = sext i32 %78 to i64, !dbg !23
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !23
  %92 = sext i32 %79 to i64, !dbg !23
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !23
  %94 = sext i32 %80 to i64, !dbg !23
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !23
  %96 = sext i32 %81 to i64, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #2, !dbg !24
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #2, !dbg !24
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #2, !dbg !24
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #2, !dbg !24
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #2, !dbg !24
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #2, !dbg !24
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #2, !dbg !24
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !24
  %106 = or disjoint i32 %42, 16, !dbg !25
  %107 = add i32 %106, %35, !dbg !25
  %108 = add i32 %106, %36, !dbg !25
  %109 = add i32 %106, %37, !dbg !25
  %110 = add i32 %106, %38, !dbg !25
  %111 = add i32 %106, %39, !dbg !25
  %112 = add i32 %106, %40, !dbg !25
  %113 = add i32 %106, %41, !dbg !25
  %114 = sext i32 %106 to i64, !dbg !26
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !26
  %116 = sext i32 %107 to i64, !dbg !26
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !26
  %118 = sext i32 %108 to i64, !dbg !26
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !26
  %120 = sext i32 %109 to i64, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !26
  %122 = sext i32 %110 to i64, !dbg !26
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !26
  %124 = sext i32 %111 to i64, !dbg !26
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !26
  %126 = sext i32 %112 to i64, !dbg !26
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !26
  %128 = sext i32 %113 to i64, !dbg !26
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !26
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #2, !dbg !27
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #2, !dbg !27
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #2, !dbg !27
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #2, !dbg !27
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #2, !dbg !27
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #2, !dbg !27
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !27
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #2, !dbg !27
  %138 = or disjoint i32 %42, 17, !dbg !28
  %139 = add i32 %138, %35, !dbg !28
  %140 = add i32 %138, %36, !dbg !28
  %141 = add i32 %138, %37, !dbg !28
  %142 = add i32 %138, %38, !dbg !28
  %143 = add i32 %138, %39, !dbg !28
  %144 = add i32 %138, %40, !dbg !28
  %145 = add i32 %138, %41, !dbg !28
  %146 = sext i32 %138 to i64, !dbg !29
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !29
  %148 = sext i32 %139 to i64, !dbg !29
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !29
  %150 = sext i32 %140 to i64, !dbg !29
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !29
  %152 = sext i32 %141 to i64, !dbg !29
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !29
  %154 = sext i32 %142 to i64, !dbg !29
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !29
  %156 = sext i32 %143 to i64, !dbg !29
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !29
  %158 = sext i32 %144 to i64, !dbg !29
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !29
  %160 = sext i32 %145 to i64, !dbg !29
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !29
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #2, !dbg !30
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #2, !dbg !30
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #2, !dbg !30
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #2, !dbg !30
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #2, !dbg !30
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #2, !dbg !30
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #2, !dbg !30
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #2, !dbg !30
  %170 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !21
  %171 = insertelement <4 x i32> %170, i32 %67, i64 1, !dbg !21
  %172 = insertelement <4 x i32> %171, i32 %68, i64 2, !dbg !21
  %173 = insertelement <4 x i32> %172, i32 %69, i64 3, !dbg !21
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !21
  %175 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !24
  %176 = insertelement <4 x i32> %175, i32 %99, i64 1, !dbg !24
  %177 = insertelement <4 x i32> %176, i32 %100, i64 2, !dbg !24
  %178 = insertelement <4 x i32> %177, i32 %101, i64 3, !dbg !24
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !24
  %180 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !27
  %181 = insertelement <4 x i32> %180, i32 %131, i64 1, !dbg !27
  %182 = insertelement <4 x i32> %181, i32 %132, i64 2, !dbg !27
  %183 = insertelement <4 x i32> %182, i32 %133, i64 3, !dbg !27
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !27
  %185 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !30
  %186 = insertelement <4 x i32> %185, i32 %163, i64 1, !dbg !30
  %187 = insertelement <4 x i32> %186, i32 %164, i64 2, !dbg !30
  %188 = insertelement <4 x i32> %187, i32 %165, i64 3, !dbg !30
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !30
  %190 = fcmp ogt <4 x float> %179, %174, !dbg !31
  %191 = fcmp uno <4 x float> %179, zeroinitializer, !dbg !35
  %192 = or <4 x i1> %190, %191, !dbg !36
  %.v = select <4 x i1> %192, <4 x i32> %178, <4 x i32> %173, !dbg !37
  %193 = bitcast <4 x i32> %.v to <4 x float>, !dbg !37
  %194 = fcmp olt <4 x float> %193, %184, !dbg !38
  %195 = fcmp uno <4 x float> %184, zeroinitializer, !dbg !40
  %196 = or <4 x i1> %194, %195, !dbg !41
  %.v15 = select <4 x i1> %196, <4 x i32> %183, <4 x i32> %.v, !dbg !42
  %197 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !42
  %198 = fcmp olt <4 x float> %197, %189, !dbg !43
  %199 = extractelement <4 x i1> %198, i64 0, !dbg !45
  %200 = extractelement <4 x i1> %198, i64 1, !dbg !45
  %201 = extractelement <4 x i1> %198, i64 2, !dbg !45
  %202 = extractelement <4 x i1> %198, i64 3, !dbg !45
  %203 = zext <4 x i1> %190 to <4 x i8>, !dbg !46
  %204 = select <4 x i1> %194, <4 x i8> splat (i8 2), <4 x i8> %203, !dbg !47
  %205 = select <4 x i1> %198, <4 x i8> splat (i8 3), <4 x i8> %204, !dbg !48
  %206 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !21
  %207 = insertelement <4 x i32> %206, i32 %71, i64 1, !dbg !21
  %208 = insertelement <4 x i32> %207, i32 %72, i64 2, !dbg !21
  %209 = insertelement <4 x i32> %208, i32 %73, i64 3, !dbg !21
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !21
  %211 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !24
  %212 = insertelement <4 x i32> %211, i32 %103, i64 1, !dbg !24
  %213 = insertelement <4 x i32> %212, i32 %104, i64 2, !dbg !24
  %214 = insertelement <4 x i32> %213, i32 %105, i64 3, !dbg !24
  %215 = bitcast <4 x i32> %214 to <4 x float>, !dbg !24
  %216 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !27
  %217 = insertelement <4 x i32> %216, i32 %135, i64 1, !dbg !27
  %218 = insertelement <4 x i32> %217, i32 %136, i64 2, !dbg !27
  %219 = insertelement <4 x i32> %218, i32 %137, i64 3, !dbg !27
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !27
  %221 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !30
  %222 = insertelement <4 x i32> %221, i32 %167, i64 1, !dbg !30
  %223 = insertelement <4 x i32> %222, i32 %168, i64 2, !dbg !30
  %224 = insertelement <4 x i32> %223, i32 %169, i64 3, !dbg !30
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !30
  %226 = fcmp ogt <4 x float> %215, %210, !dbg !31
  %227 = fcmp uno <4 x float> %215, zeroinitializer, !dbg !35
  %228 = or <4 x i1> %226, %227, !dbg !36
  %.v16 = select <4 x i1> %228, <4 x i32> %214, <4 x i32> %209, !dbg !37
  %229 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !37
  %230 = fcmp olt <4 x float> %229, %220, !dbg !38
  %231 = fcmp uno <4 x float> %220, zeroinitializer, !dbg !40
  %232 = or <4 x i1> %230, %231, !dbg !41
  %.v17 = select <4 x i1> %232, <4 x i32> %219, <4 x i32> %.v16, !dbg !42
  %233 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !42
  %234 = fcmp olt <4 x float> %233, %225, !dbg !43
  %235 = shufflevector <4 x float> %225, <4 x float> %189, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !49
  %236 = fcmp uno <8 x float> %235, zeroinitializer, !dbg !49
  %237 = extractelement <8 x i1> %236, i64 7, !dbg !45
  %238 = or i1 %199, %237, !dbg !45
  %239 = extractelement <8 x i1> %236, i64 6, !dbg !45
  %240 = or i1 %200, %239, !dbg !45
  %241 = extractelement <8 x i1> %236, i64 5, !dbg !45
  %242 = or i1 %201, %241, !dbg !45
  %243 = extractelement <8 x i1> %236, i64 4, !dbg !45
  %244 = or i1 %202, %243, !dbg !45
  %245 = extractelement <4 x i1> %234, i64 0, !dbg !45
  %246 = extractelement <8 x i1> %236, i64 3, !dbg !45
  %247 = or i1 %245, %246, !dbg !45
  %248 = extractelement <4 x i1> %234, i64 1, !dbg !45
  %249 = extractelement <8 x i1> %236, i64 2, !dbg !45
  %250 = or i1 %248, %249, !dbg !45
  %251 = extractelement <4 x i1> %234, i64 2, !dbg !45
  %252 = extractelement <8 x i1> %236, i64 1, !dbg !45
  %253 = or i1 %251, %252, !dbg !45
  %254 = extractelement <4 x i1> %234, i64 3, !dbg !45
  %255 = extractelement <8 x i1> %236, i64 0, !dbg !45
  %256 = or i1 %254, %255, !dbg !45
  %257 = zext <4 x i1> %226 to <4 x i8>, !dbg !46
  %258 = select <4 x i1> %230, <4 x i8> splat (i8 2), <4 x i8> %257, !dbg !47
  %259 = select <4 x i1> %234, <4 x i8> splat (i8 3), <4 x i8> %258, !dbg !48
  %260 = sext i32 %22 to i64, !dbg !50
  %261 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !50
  %262 = sext i32 %23 to i64, !dbg !50
  %263 = getelementptr float, ptr addrspace(1) %1, i64 %262, !dbg !50
  %264 = zext nneg i32 %10 to i64, !dbg !51
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %264, !dbg !51
  %266 = extractelement <4 x i32> %.v15, i64 0, !dbg !51
  %267 = select i1 %238, i32 %162, i32 %266, !dbg !52
  %268 = extractelement <4 x i32> %.v15, i64 1, !dbg !51
  %269 = select i1 %240, i32 %163, i32 %268, !dbg !52
  %270 = extractelement <4 x i32> %.v15, i64 2, !dbg !51
  %271 = select i1 %242, i32 %164, i32 %270, !dbg !52
  %272 = extractelement <4 x i32> %.v15, i64 3, !dbg !51
  %273 = select i1 %244, i32 %165, i32 %272, !dbg !52
  %274 = extractelement <4 x i32> %.v17, i64 0, !dbg !51
  %275 = select i1 %247, i32 %166, i32 %274, !dbg !52
  %276 = extractelement <4 x i32> %.v17, i64 1, !dbg !51
  %277 = select i1 %250, i32 %167, i32 %276, !dbg !52
  %278 = extractelement <4 x i32> %.v17, i64 2, !dbg !51
  %279 = select i1 %253, i32 %168, i32 %278, !dbg !52
  %280 = extractelement <4 x i32> %.v17, i64 3, !dbg !51
  %281 = select i1 %256, i32 %169, i32 %280, !dbg !52
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %265, i32 %267, i32 %269, i32 %271, i32 %273, i1 true) #2, !dbg !51
  %282 = getelementptr inbounds i8, ptr addrspace(3) %265, i64 16, !dbg !51
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %282, i32 %275, i32 %277, i32 %279, i32 %281, i1 true) #2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %283 = zext nneg i32 %12 to i64, !dbg !51
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %283, !dbg !51
  %285 = zext nneg i32 %13 to i64, !dbg !51
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %285, !dbg !51
  %287 = load <4 x i32>, ptr addrspace(3) %286, align 16, !dbg !51
  %.extract = load i32, ptr addrspace(3) %284, align 16, !dbg !51
  %288 = getelementptr inbounds i8, ptr addrspace(3) %284, i64 4, !dbg !51
  %.extract8 = load i32, ptr addrspace(3) %288, align 4, !dbg !51
  %289 = getelementptr inbounds i8, ptr addrspace(3) %284, i64 8, !dbg !51
  %.extract9 = load i32, ptr addrspace(3) %289, align 8, !dbg !51
  %290 = getelementptr inbounds i8, ptr addrspace(3) %284, i64 12, !dbg !51
  %.extract10 = load i32, ptr addrspace(3) %290, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %261, i1 true) #2, !dbg !51
  %.extract11 = extractelement <4 x i32> %287, i64 0, !dbg !51
  %.extract12 = extractelement <4 x i32> %287, i64 1, !dbg !51
  %.extract13 = extractelement <4 x i32> %287, i64 2, !dbg !51
  %.extract14 = extractelement <4 x i32> %287, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %263, i1 true) #2, !dbg !51
  %291 = sext i32 %14 to i64, !dbg !53
  %292 = getelementptr i8, ptr addrspace(1) %2, i64 %291, !dbg !53
  %293 = bitcast <4 x i8> %205 to i32, !dbg !54
  %294 = bitcast <4 x i8> %259 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %293, i32 %294, ptr addrspace(1) %292, i1 true) #2, !dbg !54
  %295 = shl i32 %31, 16, !dbg !55
  %296 = shl i32 %33, 16, !dbg !55
  %297 = add i32 %295, %.decomposed, !dbg !56
  %298 = add i32 %296, %.decomposed19, !dbg !56
  %299 = sext i32 %297 to i64, !dbg !57
  %300 = getelementptr float, ptr addrspace(1) %3, i64 %299, !dbg !57
  %301 = sext i32 %298 to i64, !dbg !57
  %302 = getelementptr float, ptr addrspace(1) %3, i64 %301, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %300, i1 true) #2, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %302, i1 true) #2, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxsuyjttc5zcfhop2ozv6ltk3lqg2dgv7e4vqxlo55rychxybfd2.py", directory: "inductor_cache/xs")
!4 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_max_pool2d_with_indices_10", linkageName: "triton_poi_fused_cat_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 28, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 32, scope: !7)
!18 = !DILocation(line: 29, column: 40, scope: !7)
!19 = !DILocation(line: 29, column: 37, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 45, scope: !7)
!22 = !DILocation(line: 30, column: 41, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 49, scope: !7)
!25 = !DILocation(line: 31, column: 42, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 50, scope: !7)
!28 = !DILocation(line: 32, column: 42, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 50, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 33, column: 40, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 34, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 35, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 39, column: 33, scope: !7)
!47 = !DILocation(line: 42, column: 35, scope: !7)
!48 = !DILocation(line: 45, column: 35, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !44)
!50 = !DILocation(line: 46, column: 25, scope: !7)
!51 = !DILocation(line: 46, column: 36, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !44)
!53 = !DILocation(line: 47, column: 25, scope: !7)
!54 = !DILocation(line: 47, column: 37, scope: !7)
!55 = !DILocation(line: 48, column: 36, scope: !7)
!56 = !DILocation(line: 48, column: 30, scope: !7)
!57 = !DILocation(line: 48, column: 25, scope: !7)
!58 = !DILocation(line: 48, column: 47, scope: !7)
!59 = !DILocation(line: 48, column: 4, scope: !7)
