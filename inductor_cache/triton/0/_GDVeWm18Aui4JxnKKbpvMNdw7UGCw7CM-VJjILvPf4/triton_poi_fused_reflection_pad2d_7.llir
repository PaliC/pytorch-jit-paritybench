; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_reflection_pad2d_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = srem i32 %10, 18, !dbg !14
  %18 = srem i32 %12, 18, !dbg !14
  %19 = srem i32 %14, 18, !dbg !14
  %20 = srem i32 %16, 18, !dbg !14
  %21 = sdiv i32 %9, 18, !dbg !15
  %22 = sdiv i32 %11, 18, !dbg !15
  %23 = sdiv i32 %13, 18, !dbg !15
  %24 = sdiv i32 %15, 18, !dbg !15
  %25 = sdiv i32 %9, 324, !dbg !16
  %26 = sdiv i32 %13, 324, !dbg !16
  %27 = add nsw i32 %17, -1, !dbg !17
  %28 = add nsw i32 %18, -1, !dbg !17
  %29 = add nsw i32 %19, -1, !dbg !17
  %30 = add nsw i32 %20, -1, !dbg !17
  %31 = tail call i32 @llvm.abs.i32(i32 %27, i1 true), !dbg !18
  %32 = tail call i32 @llvm.abs.i32(i32 %28, i1 true), !dbg !18
  %33 = tail call i32 @llvm.abs.i32(i32 %29, i1 true), !dbg !18
  %34 = tail call i32 @llvm.abs.i32(i32 %30, i1 true), !dbg !18
  %35 = add nsw i32 %31, -15, !dbg !19
  %36 = add nsw i32 %32, -15, !dbg !19
  %37 = add nsw i32 %33, -15, !dbg !19
  %38 = add nsw i32 %34, -15, !dbg !19
  %39 = tail call i32 @llvm.abs.i32(i32 %35, i1 true), !dbg !20
  %40 = tail call i32 @llvm.abs.i32(i32 %36, i1 true), !dbg !20
  %41 = tail call i32 @llvm.abs.i32(i32 %37, i1 true), !dbg !20
  %42 = tail call i32 @llvm.abs.i32(i32 %38, i1 true), !dbg !20
  %43 = shl nsw i32 %25, 8, !dbg !21
  %44 = shl nsw i32 %26, 8, !dbg !21
  %reass.sub = or disjoint i32 %43, 255, !dbg !22
  %45 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !14
  %46 = insertelement <2 x i32> %45, i32 %21, i64 1, !dbg !14
  %47 = srem <2 x i32> %46, splat (i32 18), !dbg !14
  %48 = add nsw <2 x i32> %47, splat (i32 -1), !dbg !17
  %49 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %48, i1 true), !dbg !18
  %50 = add nsw <2 x i32> %49, splat (i32 -15), !dbg !19
  %51 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %50, i1 true), !dbg !20
  %52 = extractelement <2 x i32> %51, i64 0, !dbg !23
  %53 = sub nuw i32 %reass.sub, %52, !dbg !23
  %54 = extractelement <2 x i32> %51, i64 1, !dbg !23
  %55 = mul nsw i32 %54, -16, !dbg !23
  %56 = add i32 %53, %55, !dbg !23
  %57 = sub nuw i32 %reass.sub, %39, !dbg !22
  %58 = add i32 %57, %55, !dbg !23
  %59 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !14
  %60 = insertelement <2 x i32> %59, i32 %22, i64 1, !dbg !14
  %61 = srem <2 x i32> %60, splat (i32 18), !dbg !14
  %62 = add nsw <2 x i32> %61, splat (i32 -1), !dbg !17
  %63 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %62, i1 true), !dbg !18
  %64 = add nsw <2 x i32> %63, splat (i32 -15), !dbg !19
  %65 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %64, i1 true), !dbg !20
  %66 = extractelement <2 x i32> %65, i64 0, !dbg !23
  %67 = sub nuw i32 %reass.sub, %66, !dbg !23
  %68 = extractelement <2 x i32> %65, i64 1, !dbg !23
  %69 = mul nsw i32 %68, -16, !dbg !23
  %70 = add i32 %67, %69, !dbg !23
  %71 = sub nuw i32 %reass.sub, %40, !dbg !22
  %72 = add i32 %71, %69, !dbg !23
  %reass.sub4 = or disjoint i32 %44, 255, !dbg !22
  %73 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !14
  %74 = insertelement <2 x i32> %73, i32 %23, i64 1, !dbg !14
  %75 = srem <2 x i32> %74, splat (i32 18), !dbg !14
  %76 = add nsw <2 x i32> %75, splat (i32 -1), !dbg !17
  %77 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %76, i1 true), !dbg !18
  %78 = add nsw <2 x i32> %77, splat (i32 -15), !dbg !19
  %79 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %78, i1 true), !dbg !20
  %80 = extractelement <2 x i32> %79, i64 0, !dbg !23
  %81 = sub nuw i32 %reass.sub4, %80, !dbg !23
  %82 = extractelement <2 x i32> %79, i64 1, !dbg !23
  %83 = mul nsw i32 %82, -16, !dbg !23
  %84 = add i32 %81, %83, !dbg !23
  %85 = sub nuw i32 %reass.sub4, %41, !dbg !22
  %86 = add i32 %85, %83, !dbg !23
  %87 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !14
  %88 = insertelement <2 x i32> %87, i32 %24, i64 1, !dbg !14
  %89 = srem <2 x i32> %88, splat (i32 18), !dbg !14
  %90 = add nsw <2 x i32> %89, splat (i32 -1), !dbg !17
  %91 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %90, i1 true), !dbg !18
  %92 = add nsw <2 x i32> %91, splat (i32 -15), !dbg !19
  %93 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %92, i1 true), !dbg !20
  %94 = extractelement <2 x i32> %93, i64 0, !dbg !23
  %95 = sub nuw i32 %reass.sub4, %94, !dbg !23
  %96 = extractelement <2 x i32> %93, i64 1, !dbg !23
  %97 = mul nsw i32 %96, -16, !dbg !23
  %98 = add i32 %95, %97, !dbg !23
  %99 = sub nuw i32 %reass.sub4, %42, !dbg !22
  %100 = add i32 %99, %97, !dbg !23
  %101 = sext i32 %56 to i64, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !24
  %103 = sext i32 %58 to i64, !dbg !24
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !24
  %105 = sext i32 %70 to i64, !dbg !24
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !24
  %107 = sext i32 %72 to i64, !dbg !24
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !24
  %109 = sext i32 %84 to i64, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !24
  %111 = sext i32 %86 to i64, !dbg !24
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !24
  %113 = sext i32 %98 to i64, !dbg !24
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !24
  %115 = sext i32 %100 to i64, !dbg !24
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !24
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #2, !dbg !25
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #2, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #2, !dbg !25
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #2, !dbg !25
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #2, !dbg !25
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #2, !dbg !25
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !25
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #2, !dbg !25
  %125 = sext i32 %9 to i64, !dbg !26
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !26
  %127 = sext i32 %13 to i64, !dbg !26
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %117, i32 %118, i32 %119, i32 %120, ptr addrspace(1) %126, i1 true) #2, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %121, i32 %122, i32 %123, i32 %124, ptr addrspace(1) %128, i1 true) #2, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw5gq3zdiuenctv2kuwyosdc2cfjepcbvn7fs3mbexz7wi66bwel.py", directory: "inductor_cache/w5")
!4 = !{ptr @triton_poi_fused_reflection_pad2d_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_reflection_pad2d_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_reflection_pad2d_7", linkageName: "triton_poi_fused_reflection_pad2d_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 81, scope: !7)
!18 = !DILocation(line: 28, column: 74, scope: !7)
!19 = !DILocation(line: 28, column: 62, scope: !7)
!20 = !DILocation(line: 28, column: 54, scope: !7)
!21 = !DILocation(line: 28, column: 147, scope: !7)
!22 = !DILocation(line: 28, column: 90, scope: !7)
!23 = !DILocation(line: 28, column: 143, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 152, scope: !7)
!26 = !DILocation(line: 29, column: 25, scope: !7)
!27 = !DILocation(line: 29, column: 36, scope: !7)
!28 = !DILocation(line: 29, column: 4, scope: !7)
