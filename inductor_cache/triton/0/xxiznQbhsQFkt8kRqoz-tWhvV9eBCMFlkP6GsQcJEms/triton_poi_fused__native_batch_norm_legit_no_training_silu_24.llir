; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_silu_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 1, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 6, !dbg !12
  %.lobit = and i32 %12, 1, !dbg !12
  %13 = or disjoint i32 %10, %.lobit, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %16 = shl i32 %15, 8, !dbg !16
  %17 = shl i32 %11, 2, !dbg !17
  %18 = and i32 %17, 252, !dbg !17
  %19 = shl i32 %11, 1, !dbg !17
  %20 = and i32 %19, 254, !dbg !17
  %21 = or disjoint i32 %16, %18, !dbg !18
  %22 = or disjoint i32 %16, %20, !dbg !18
  %23 = icmp slt i32 %21, 256, !dbg !19
  %24 = icmp slt i32 %22, 256, !dbg !19
  %25 = shl i32 %13, 8, !dbg !20
  %26 = add i32 %21, %25, !dbg !21
  %27 = sext i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = and i1 %14, %23, !dbg !23
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %29) #4, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !24
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !24
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !24
  %35 = and i32 %17, 508, !dbg !24
  %36 = lshr i32 %35, 8, !dbg !24
  %37 = or disjoint i32 %36, %35, !dbg !24
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %37, !dbg !24
  %39 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %39, i1 true) #4, !dbg !24
  %40 = or disjoint i32 %35, 1, !dbg !24
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %36, !dbg !24
  %42 = getelementptr inbounds float, ptr addrspace(3) %41, i32 %40, !dbg !24
  %43 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #4, !dbg !24
  %44 = or disjoint i32 %35, 2, !dbg !24
  %45 = or disjoint i32 %36, %44, !dbg !24
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %45, !dbg !24
  %47 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #4, !dbg !24
  %48 = or disjoint i32 %35, 3, !dbg !24
  %49 = getelementptr inbounds float, ptr addrspace(3) %41, i32 %48, !dbg !24
  %50 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i32 %20, !dbg !24
  %52 = load float, ptr addrspace(3) %51, align 8, !dbg !24
  %53 = or disjoint i32 %20, 1, !dbg !24
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53, !dbg !24
  %55 = load float, ptr addrspace(3) %54, align 4, !dbg !24
  %56 = or disjoint i32 %20, 256, !dbg !24
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56, !dbg !24
  %58 = getelementptr i8, ptr addrspace(3) %57, i32 4, !dbg !24
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !24
  %60 = or disjoint i32 %20, 257, !dbg !24
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !24
  %62 = getelementptr i8, ptr addrspace(3) %61, i32 4, !dbg !24
  %63 = load float, ptr addrspace(3) %62, align 8, !dbg !24
  %64 = sext i32 %22 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !25
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %24) #4, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !27
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %24) #4, !dbg !28
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !28
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !28
  %71 = bitcast i32 %69 to float, !dbg !28
  %72 = bitcast i32 %70 to float, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !29
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %24) #4, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !31
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %24) #4, !dbg !32
  %77 = fadd float %71, 0x3F50624DE0000000, !dbg !33
  %78 = fadd float %72, 0x3F50624DE0000000, !dbg !33
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %79, 0, !dbg !34
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %80, 0, !dbg !34
  br i1 %.not.i, label %86, label %81, !dbg !34

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !34

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

86:                                               ; preds = %8
  br i1 %.not1.i, label %89, label %87, !dbg !34

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %82, %84, %87, %89
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !34
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i9 = icmp eq i32 %91, 0, !dbg !34
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i12 = icmp eq i32 %92, 0, !dbg !34
  br i1 %.not.i9, label %98, label %93, !dbg !34

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %96, label %94, !dbg !34

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %101, label %99, !dbg !34

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

__nv_sqrtf.exit13:                                ; preds = %94, %96, %99, %101
  %.0.i11 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !34
  %103 = extractvalue { i32, i32 } %66, 1, !dbg !26
  %104 = bitcast i32 %103 to float, !dbg !26
  %105 = fsub float %63, %104, !dbg !35
  %106 = extractvalue { i32, i32 } %66, 0, !dbg !26
  %107 = bitcast i32 %106 to float, !dbg !26
  %108 = fsub float %59, %107, !dbg !35
  %109 = fsub float %55, %104, !dbg !35
  %110 = fsub float %52, %107, !dbg !35
  %111 = extractvalue { i32, i32 } %76, 1, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = extractvalue { i32, i32 } %76, 0, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = extractvalue { i32, i32 } %74, 1, !dbg !30
  %116 = bitcast i32 %115 to float, !dbg !30
  %117 = extractvalue { i32, i32 } %74, 0, !dbg !30
  %118 = bitcast i32 %117 to float, !dbg !30
  %119 = and i32 %11, 127, !dbg !17
  %120 = or disjoint i32 %119, %16, !dbg !18
  %121 = or disjoint i32 %120, 128, !dbg !18
  %122 = icmp slt i32 %121, 256, !dbg !19
  %123 = icmp slt i32 %10, 256, !dbg !14
  %124 = and i1 %123, %122, !dbg !23
  %125 = icmp slt i32 %120, 256, !dbg !19
  %126 = and i1 %123, %125, !dbg !23
  %.frozen = freeze i32 %10, !dbg !36
  %127 = sdiv i32 %.frozen, 64, !dbg !36
  %128 = mul i32 %127, 64, !dbg !37
  %.decomposed = sub i32 %.frozen, %128, !dbg !37
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !38
  %131 = fmul float %110, %129, !dbg !39
  %132 = fmul float %109, %130, !dbg !39
  %133 = fmul float %108, %129, !dbg !39
  %134 = fmul float %105, %130, !dbg !39
  %135 = fmul float %131, %118, !dbg !40
  %136 = fmul float %132, %116, !dbg !40
  %137 = fmul float %133, %118, !dbg !40
  %138 = fmul float %134, %116, !dbg !40
  %139 = fadd float %135, %114, !dbg !41
  %140 = fadd float %136, %112, !dbg !41
  %141 = fadd float %137, %114, !dbg !41
  %142 = fadd float %138, %112, !dbg !41
  %143 = fsub float 0.000000e+00, %139, !dbg !42
  %144 = fsub float 0.000000e+00, %140, !dbg !42
  %145 = fsub float 0.000000e+00, %141, !dbg !42
  %146 = fsub float 0.000000e+00, %142, !dbg !42
  %147 = fmul float %143, 0x3FF7154760000000, !dbg !46
  %148 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %147) #4, !dbg !46
  %149 = fmul float %144, 0x3FF7154760000000, !dbg !46
  %150 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %149) #4, !dbg !46
  %151 = fmul float %145, 0x3FF7154760000000, !dbg !46
  %152 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %151) #4, !dbg !46
  %153 = fmul float %146, 0x3FF7154760000000, !dbg !46
  %154 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %153) #4, !dbg !46
  %155 = fadd float %148, 1.000000e+00, !dbg !47
  %156 = fadd float %150, 1.000000e+00, !dbg !47
  %157 = fadd float %152, 1.000000e+00, !dbg !47
  %158 = fadd float %154, 1.000000e+00, !dbg !47
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %155) #4, !dbg !48
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %156) #4, !dbg !48
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %157) #4, !dbg !48
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %158) #4, !dbg !48
  %163 = fmul float %139, %159, !dbg !49
  %164 = fmul float %140, %160, !dbg !49
  %165 = fmul float %141, %161, !dbg !49
  %166 = fmul float %142, %162, !dbg !49
  %167 = shl i32 %120, 6, !dbg !50
  %168 = shl i32 %121, 6, !dbg !50
  %169 = shl i32 %127, 14, !dbg !51
  %170 = add i32 %169, %.decomposed, !dbg !52
  %171 = add i32 %170, %167, !dbg !53
  %172 = add i32 %170, %168, !dbg !53
  %173 = sext i32 %171 to i64, !dbg !54
  %174 = getelementptr float, ptr addrspace(1) %5, i64 %173, !dbg !54
  %175 = sext i32 %172 to i64, !dbg !54
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %175, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %.idx = shl nuw nsw i32 %35, 3, !dbg !55
  %177 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !55
  %178 = bitcast float %163 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #4, !dbg !55
  %.idx2 = shl nuw nsw i32 %44, 3, !dbg !55
  %179 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !55
  %180 = bitcast float %164 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #4, !dbg !55
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %35, !dbg !55
  %182 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %40, !dbg !55
  %183 = bitcast float %165 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #4, !dbg !55
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %44, !dbg !55
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %48, !dbg !55
  %186 = bitcast float %166 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %187 = getelementptr float, ptr addrspace(3) %51, i32 %20, !dbg !55
  %188 = getelementptr float, ptr addrspace(3) %57, i32 %56, !dbg !55
  %189 = load <2 x i32>, ptr addrspace(3) %188, align 8, !dbg !55
  %.extract = load i32, ptr addrspace(3) %187, align 8, !dbg !55
  %190 = getelementptr inbounds i8, ptr addrspace(3) %187, i32 4, !dbg !55
  %.extract6 = load i32, ptr addrspace(3) %190, align 4, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %174, i1 %126) #4, !dbg !55
  %.extract7 = extractelement <2 x i32> %189, i64 0, !dbg !55
  %.extract8 = extractelement <2 x i32> %189, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract7, i32 %.extract8, ptr addrspace(1) %176, i1 %124) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co4u73qqxj6nnudofstjn7ltmymj3ft37kpit5co67umt772d3y5.py", directory: "inductor_cache/o4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_silu_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_silu_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 48, column: 23, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 33, scope: !7)
!51 = !DILocation(line: 50, column: 44, scope: !7)
!52 = !DILocation(line: 50, column: 30, scope: !7)
!53 = !DILocation(line: 50, column: 38, scope: !7)
!54 = !DILocation(line: 50, column: 25, scope: !7)
!55 = !DILocation(line: 50, column: 56, scope: !7)
!56 = !DILocation(line: 50, column: 4, scope: !7)
