; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 510, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = srem i32 %19, 32, !dbg !14
  %21 = sext i32 %19 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !15
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %24 = sext i32 %20 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !17
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !19
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !20
  %31 = bitcast i32 %29 to float, !dbg !20
  %32 = bitcast i32 %30 to float, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !21
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !23
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !25
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !29
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !30
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !30
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !30
  %45 = bitcast i32 %43 to float, !dbg !30
  %46 = bitcast i32 %44 to float, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !31
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !33
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !34
  %51 = fadd float %31, 0x3EE4F8B580000000, !dbg !35
  %52 = fadd float %32, 0x3EE4F8B580000000, !dbg !35
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %53, 0, !dbg !36
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %54, 0, !dbg !36
  br i1 %.not.i, label %60, label %55, !dbg !36

55:                                               ; preds = %13
  br i1 %.not1.i, label %58, label %56, !dbg !36

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

60:                                               ; preds = %13
  br i1 %.not1.i, label %63, label %61, !dbg !36

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !36
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %65, 0, !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %66, 0, !dbg !36
  br i1 %.not.i1, label %72, label %67, !dbg !36

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !36

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !36

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %68, %70, %73, %75
  %.0.i3 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !36
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %79 = fadd float %45, 0x3EE4F8B580000000, !dbg !38
  %80 = fadd float %46, 0x3EE4F8B580000000, !dbg !38
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i6 = icmp eq i32 %81, 0, !dbg !39
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i9 = icmp eq i32 %82, 0, !dbg !39
  br i1 %.not.i6, label %88, label %83, !dbg !39

83:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %86, label %84, !dbg !39

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !39

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %84, %86, %89, %91
  %.0.i8 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !39
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i11 = icmp eq i32 %93, 0, !dbg !39
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i14 = icmp eq i32 %94, 0, !dbg !39
  br i1 %.not.i11, label %100, label %95, !dbg !39

95:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %98, label %96, !dbg !39

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !39

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %96, %98, %101, %103
  %.0.i13 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !39
  %105 = extractvalue { i32, i32 } %23, 1, !dbg !16
  %106 = bitcast i32 %105 to float, !dbg !16
  %107 = extractvalue { i32, i32 } %26, 1, !dbg !18
  %108 = bitcast i32 %107 to float, !dbg !18
  %109 = fsub float %106, %108, !dbg !40
  %110 = fmul float %109, %78, !dbg !41
  %111 = extractvalue { i32, i32 } %34, 1, !dbg !22
  %112 = bitcast i32 %111 to float, !dbg !22
  %113 = fmul float %110, %112, !dbg !42
  %114 = extractvalue { i32, i32 } %36, 1, !dbg !24
  %115 = bitcast i32 %114 to float, !dbg !24
  %116 = fadd float %113, %115, !dbg !43
  %117 = fcmp ogt float %116, 0.000000e+00, !dbg !44
  %118 = extractvalue { i32, i32 } %38, 1, !dbg !26
  %119 = bitcast i32 %118 to float, !dbg !26
  %120 = fmul float %116, %119, !dbg !45
  %121 = select i1 %117, float %116, float %120, !dbg !46
  %122 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = fsub float %121, %123, !dbg !47
  %125 = extractvalue { i32, i32 } %23, 0, !dbg !16
  %126 = bitcast i32 %125 to float, !dbg !16
  %127 = extractvalue { i32, i32 } %26, 0, !dbg !18
  %128 = bitcast i32 %127 to float, !dbg !18
  %129 = fsub float %126, %128, !dbg !40
  %130 = fmul float %129, %77, !dbg !41
  %131 = extractvalue { i32, i32 } %34, 0, !dbg !22
  %132 = bitcast i32 %131 to float, !dbg !22
  %133 = fmul float %130, %132, !dbg !42
  %134 = extractvalue { i32, i32 } %36, 0, !dbg !24
  %135 = bitcast i32 %134 to float, !dbg !24
  %136 = fadd float %133, %135, !dbg !43
  %137 = fcmp ogt float %136, 0.000000e+00, !dbg !44
  %138 = extractvalue { i32, i32 } %38, 0, !dbg !26
  %139 = bitcast i32 %138 to float, !dbg !26
  %140 = fmul float %136, %139, !dbg !45
  %141 = select i1 %137, float %136, float %140, !dbg !46
  %142 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %143 = bitcast i32 %142 to float, !dbg !28
  %144 = fsub float %141, %143, !dbg !47
  %145 = extractvalue { i32, i32 } %50, 1, !dbg !34
  %146 = bitcast i32 %145 to float, !dbg !34
  %147 = extractvalue { i32, i32 } %50, 0, !dbg !34
  %148 = bitcast i32 %147 to float, !dbg !34
  %149 = extractvalue { i32, i32 } %48, 1, !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = extractvalue { i32, i32 } %48, 0, !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !48
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !48
  %155 = fmul float %144, %153, !dbg !49
  %156 = fmul float %124, %154, !dbg !49
  %157 = fmul float %155, %152, !dbg !50
  %158 = fmul float %156, %150, !dbg !50
  %159 = fadd float %157, %148, !dbg !51
  %160 = fadd float %158, %146, !dbg !51
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !52
  %162 = bitcast float %141 to i32, !dbg !53
  %163 = bitcast float %121 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %161, i1 true) #3, !dbg !53
  %164 = getelementptr float, ptr addrspace(1) %11, i64 %21, !dbg !54
  %165 = bitcast float %159 to i32, !dbg !55
  %166 = bitcast float %160 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %166, ptr addrspace(1) %164, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cessebyicxhldj6i73za5hiz4mhszhlyoqedptkbhuxhb4r44cfs.py", directory: "inductor_cache/es")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 20, scope: !7)
!39 = !DILocation(line: 53, column: 27, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 35, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 19, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 28, scope: !7)
!53 = !DILocation(line: 59, column: 40, scope: !7)
!54 = !DILocation(line: 60, column: 25, scope: !7)
!55 = !DILocation(line: 60, column: 37, scope: !7)
!56 = !DILocation(line: 60, column: 4, scope: !7)
