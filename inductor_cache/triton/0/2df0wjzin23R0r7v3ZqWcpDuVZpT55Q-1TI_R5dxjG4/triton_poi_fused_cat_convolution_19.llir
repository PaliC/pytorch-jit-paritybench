; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %15, 8, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = or disjoint i32 %10, %16, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 4, !dbg !15
  %22 = lshr i32 %11, 3, !dbg !16
  %23 = and i32 %22, 15, !dbg !16
  %24 = and i32 %11, 15, !dbg !16
  %25 = or disjoint i32 %21, %23, !dbg !17
  %26 = or disjoint i32 %21, %24, !dbg !17
  %27 = icmp slt i32 %25, 9, !dbg !18
  %28 = icmp slt i32 %26, 9, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %29 = sdiv i32 %.frozen, 512, !dbg !19
  %30 = mul i32 %29, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = icmp slt i32 %.decomposed, 256, !dbg !21
  %32 = shl i32 %25, 8, !dbg !22
  %33 = mul i32 %29, 2304, !dbg !23
  %34 = add i32 %32, %33, !dbg !24
  %35 = add i32 %34, %.decomposed, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = and i1 %31, %27, !dbg !27
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #2, !dbg !28
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !28
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !28
  %42 = sext i32 %.decomposed to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !29
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #2, !dbg !30
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !30
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !30
  %47 = icmp sgt i32 %.decomposed, 255, !dbg !31
  %48 = add nsw i32 %.decomposed, -256, !dbg !32
  %49 = add i32 %34, %48, !dbg !33
  %50 = sext i32 %49 to i64, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !34
  %52 = and i1 %47, %27, !dbg !35
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #2, !dbg !36
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !36
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !36
  %56 = sext i32 %48 to i64, !dbg !37
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !37
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #2, !dbg !38
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !38
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !38
  %61 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !36
  %62 = insertelement <4 x i32> %61, i32 %54, i64 1, !dbg !36
  %63 = insertelement <4 x i32> %62, i32 %41, i64 2, !dbg !36
  %64 = insertelement <4 x i32> %63, i32 %40, i64 3, !dbg !36
  %65 = bitcast <4 x i32> %64 to <4 x float>, !dbg !36
  %66 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !38
  %67 = insertelement <4 x i32> %66, i32 %59, i64 1, !dbg !38
  %68 = insertelement <4 x i32> %67, i32 %46, i64 2, !dbg !38
  %69 = insertelement <4 x i32> %68, i32 %45, i64 3, !dbg !38
  %70 = bitcast <4 x i32> %69 to <4 x float>, !dbg !38
  %71 = fadd <4 x float> %65, %70, !dbg !39
  %72 = fcmp olt <4 x float> %71, zeroinitializer, !dbg !40
  %73 = extractelement <4 x i1> %72, i64 3, !dbg !44
  %74 = extractelement <4 x float> %71, i64 3, !dbg !44
  %75 = select i1 %73, float 0.000000e+00, float %74, !dbg !44
  %76 = extractelement <4 x i1> %72, i64 2, !dbg !44
  %77 = extractelement <4 x float> %71, i64 2, !dbg !44
  %78 = select i1 %76, float 0.000000e+00, float %77, !dbg !44
  %79 = extractelement <4 x i1> %72, i64 1, !dbg !46
  %80 = extractelement <4 x float> %71, i64 1, !dbg !46
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !46
  %82 = extractelement <4 x i1> %72, i64 0, !dbg !46
  %83 = extractelement <4 x float> %71, i64 0, !dbg !46
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !46
  %85 = select i1 %31, float %75, float %81, !dbg !47
  %86 = select i1 %31, float %78, float %84, !dbg !47
  %87 = mul i32 %18, 9, !dbg !48
  %88 = mul i32 %19, 9, !dbg !48
  %89 = add i32 %26, %87, !dbg !49
  %90 = add i32 %26, %88, !dbg !49
  %91 = sext i32 %89 to i64, !dbg !50
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %91, !dbg !50
  %93 = sext i32 %90 to i64, !dbg !50
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !50
  %95 = shl i32 %11, 5, !dbg !51
  %96 = and i32 %95, 224, !dbg !51
  %97 = or disjoint i32 %96, %23, !dbg !51
  %98 = and i32 %11, 127, !dbg !51
  %99 = lshr exact i32 %96, 2, !dbg !51
  %100 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %99, !dbg !51
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %97, !dbg !51
  %102 = bitcast float %85 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !51
  %103 = or disjoint i32 %97, 16, !dbg !51
  %104 = lshr i32 %103, 4, !dbg !51
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !51
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %103, !dbg !51
  %107 = bitcast float %86 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %108 = lshr i32 %98, 4, !dbg !51
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %108, !dbg !51
  %110 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %98, !dbg !51
  %111 = load i32, ptr addrspace(3) %110, align 4, !dbg !51
  %112 = or disjoint i32 %98, 128, !dbg !51
  %113 = lshr i32 %112, 4, !dbg !51
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !51
  %115 = getelementptr inbounds float, ptr addrspace(3) %114, i32 %112, !dbg !51
  %116 = load i32, ptr addrspace(3) %115, align 4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %92, i1 %28) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %94, i1 %28) #2, !dbg !51
  %117 = shl i32 %25, 9, !dbg !52
  %118 = add i32 %117, %.decomposed, !dbg !53
  %119 = mul i32 %29, 4608, !dbg !54
  %120 = add i32 %118, %119, !dbg !55
  %121 = sext i32 %120 to i64, !dbg !56
  %122 = getelementptr float, ptr addrspace(1) %5, i64 %121, !dbg !56
  %123 = bitcast float %85 to i32, !dbg !57
  %124 = bitcast float %86 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %124, ptr addrspace(1) %122, i1 %27) #2, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdmfdvlg2iv3a4r2haan3d4we6vxu6nyqnyrmyabcctwwytb6yhh.py", directory: "inductor_cache/dm")
!4 = !{ptr @triton_poi_fused_cat_convolution_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_19", linkageName: "triton_poi_fused_cat_convolution_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 44, scope: !7)
!24 = !DILocation(line: 37, column: 39, scope: !7)
!25 = !DILocation(line: 37, column: 50, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 63, scope: !7)
!28 = !DILocation(line: 37, column: 56, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 70, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 47, column: 60, scope: !7)
!33 = !DILocation(line: 47, column: 51, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 74, scope: !7)
!36 = !DILocation(line: 47, column: 66, scope: !7)
!37 = !DILocation(line: 48, column: 31, scope: !7)
!38 = !DILocation(line: 48, column: 80, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 51, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !45)
!45 = !DILocation(line: 41, column: 40, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 55, column: 32, scope: !7)
!49 = !DILocation(line: 55, column: 30, scope: !7)
!50 = !DILocation(line: 55, column: 25, scope: !7)
!51 = !DILocation(line: 55, column: 44, scope: !7)
!52 = !DILocation(line: 56, column: 34, scope: !7)
!53 = !DILocation(line: 56, column: 30, scope: !7)
!54 = !DILocation(line: 56, column: 44, scope: !7)
!55 = !DILocation(line: 56, column: 39, scope: !7)
!56 = !DILocation(line: 56, column: 25, scope: !7)
!57 = !DILocation(line: 56, column: 56, scope: !7)
!58 = !DILocation(line: 56, column: 4, scope: !7)
