; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 4, !dbg !13
  %18 = or disjoint i32 %13, 5, !dbg !13
  %19 = or disjoint i32 %13, 6, !dbg !13
  %20 = or disjoint i32 %13, 7, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %23 = sdiv i32 %.frozen, 14, !dbg !14
  %24 = mul i32 %23, 14, !dbg !15
  %.decomposed = sub i32 %.frozen, %24, !dbg !15
  %25 = srem i32 %14, 14, !dbg !15
  %.frozen28 = freeze i32 %15, !dbg !14
  %26 = sdiv i32 %.frozen28, 14, !dbg !14
  %27 = mul i32 %26, 14, !dbg !15
  %.decomposed29 = sub i32 %.frozen28, %27, !dbg !15
  %28 = srem i32 %16, 14, !dbg !15
  %.frozen30 = freeze i32 %17, !dbg !14
  %29 = sdiv i32 %.frozen30, 14, !dbg !14
  %30 = mul i32 %29, 14, !dbg !15
  %.decomposed31 = sub i32 %.frozen30, %30, !dbg !15
  %31 = srem i32 %18, 14, !dbg !15
  %.frozen32 = freeze i32 %19, !dbg !14
  %32 = sdiv i32 %.frozen32, 14, !dbg !14
  %33 = mul i32 %32, 14, !dbg !15
  %.decomposed33 = sub i32 %.frozen32, %33, !dbg !15
  %34 = srem i32 %20, 14, !dbg !15
  %35 = srem i32 %23, 14, !dbg !16
  %36 = srem i32 %26, 14, !dbg !16
  %37 = srem i32 %29, 14, !dbg !16
  %38 = srem i32 %32, 14, !dbg !16
  %39 = sdiv i32 %13, 196, !dbg !17
  %40 = sdiv i32 %17, 196, !dbg !17
  %.frozen34 = freeze i32 %21, !dbg !18
  %41 = sdiv i32 %.frozen34, 200704, !dbg !18
  %.frozen36 = freeze i32 %22, !dbg !18
  %42 = sdiv i32 %.frozen36, 200704, !dbg !18
  %43 = mul i32 %41, 200704, !dbg !19
  %.decomposed35 = sub i32 %.frozen34, %43, !dbg !19
  %44 = mul i32 %42, 200704, !dbg !19
  %.decomposed37 = sub i32 %.frozen36, %44, !dbg !19
  %45 = shl nsw i32 %.decomposed, 1, !dbg !20
  %46 = shl nsw i32 %25, 1, !dbg !20
  %47 = shl nsw i32 %.decomposed29, 1, !dbg !20
  %48 = shl nsw i32 %28, 1, !dbg !20
  %49 = shl nsw i32 %.decomposed31, 1, !dbg !20
  %50 = shl nsw i32 %31, 1, !dbg !20
  %51 = shl nsw i32 %.decomposed33, 1, !dbg !20
  %52 = shl nsw i32 %34, 1, !dbg !20
  %53 = mul nsw i32 %35, 60, !dbg !21
  %54 = mul nsw i32 %36, 60, !dbg !21
  %55 = mul nsw i32 %37, 60, !dbg !21
  %56 = mul nsw i32 %38, 60, !dbg !21
  %57 = mul i32 %39, 900, !dbg !22
  %58 = mul i32 %40, 900, !dbg !22
  %59 = add i32 %53, %57, !dbg !23
  %60 = add i32 %59, %45, !dbg !24
  %61 = add i32 %59, %46, !dbg !24
  %62 = add i32 %57, %54, !dbg !23
  %63 = add i32 %62, %47, !dbg !24
  %64 = add i32 %62, %48, !dbg !24
  %65 = add i32 %55, %58, !dbg !23
  %66 = add i32 %65, %49, !dbg !24
  %67 = add i32 %65, %50, !dbg !24
  %68 = add i32 %56, %58, !dbg !23
  %69 = add i32 %68, %51, !dbg !24
  %70 = add i32 %68, %52, !dbg !24
  %71 = sext i32 %60 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = sext i32 %61 to i64, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !25
  %75 = sext i32 %63 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !25
  %77 = sext i32 %64 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !25
  %79 = sext i32 %66 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !25
  %81 = sext i32 %67 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !25
  %83 = sext i32 %69 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !25
  %85 = sext i32 %70 to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #2, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #2, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #2, !dbg !26
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !26
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #2, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #2, !dbg !26
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !26
  %95 = or disjoint i32 %59, 1, !dbg !27
  %96 = add i32 %95, %45, !dbg !28
  %97 = add i32 %95, %46, !dbg !28
  %98 = or disjoint i32 %62, 1, !dbg !27
  %99 = add i32 %98, %47, !dbg !28
  %100 = add i32 %98, %48, !dbg !28
  %101 = or disjoint i32 %65, 1, !dbg !27
  %102 = add i32 %101, %49, !dbg !28
  %103 = add i32 %101, %50, !dbg !28
  %104 = or disjoint i32 %68, 1, !dbg !27
  %105 = add i32 %104, %51, !dbg !28
  %106 = add i32 %104, %52, !dbg !28
  %107 = sext i32 %96 to i64, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !29
  %109 = sext i32 %97 to i64, !dbg !29
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !29
  %111 = sext i32 %99 to i64, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !29
  %113 = sext i32 %100 to i64, !dbg !29
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !29
  %115 = sext i32 %102 to i64, !dbg !29
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !29
  %117 = sext i32 %103 to i64, !dbg !29
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !29
  %119 = sext i32 %105 to i64, !dbg !29
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !29
  %121 = sext i32 %106 to i64, !dbg !29
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !29
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #2, !dbg !30
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #2, !dbg !30
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #2, !dbg !30
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !30
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #2, !dbg !30
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #2, !dbg !30
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #2, !dbg !30
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #2, !dbg !30
  %131 = or disjoint i32 %59, 2, !dbg !31
  %132 = add i32 %131, %45, !dbg !32
  %133 = add i32 %131, %46, !dbg !32
  %134 = or disjoint i32 %62, 2, !dbg !31
  %135 = add i32 %134, %47, !dbg !32
  %136 = add i32 %134, %48, !dbg !32
  %137 = or disjoint i32 %65, 2, !dbg !31
  %138 = add i32 %137, %49, !dbg !32
  %139 = add i32 %137, %50, !dbg !32
  %140 = or disjoint i32 %68, 2, !dbg !31
  %141 = add i32 %140, %51, !dbg !32
  %142 = add i32 %140, %52, !dbg !32
  %143 = sext i32 %132 to i64, !dbg !33
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !33
  %145 = sext i32 %133 to i64, !dbg !33
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !33
  %147 = sext i32 %135 to i64, !dbg !33
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !33
  %149 = sext i32 %136 to i64, !dbg !33
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !33
  %151 = sext i32 %138 to i64, !dbg !33
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !33
  %153 = sext i32 %139 to i64, !dbg !33
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !33
  %155 = sext i32 %141 to i64, !dbg !33
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !33
  %157 = sext i32 %142 to i64, !dbg !33
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !33
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #2, !dbg !34
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #2, !dbg !34
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #2, !dbg !34
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #2, !dbg !34
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #2, !dbg !34
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #2, !dbg !34
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #2, !dbg !34
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #2, !dbg !34
  %167 = add i32 %59, 30, !dbg !35
  %168 = add i32 %167, %45, !dbg !36
  %169 = add i32 %167, %46, !dbg !36
  %170 = add i32 %62, 30, !dbg !35
  %171 = add i32 %170, %47, !dbg !36
  %172 = add i32 %170, %48, !dbg !36
  %173 = add i32 %65, 30, !dbg !35
  %174 = add i32 %173, %49, !dbg !36
  %175 = add i32 %173, %50, !dbg !36
  %176 = add i32 %68, 30, !dbg !35
  %177 = add i32 %176, %51, !dbg !36
  %178 = add i32 %176, %52, !dbg !36
  %179 = sext i32 %168 to i64, !dbg !37
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !37
  %181 = sext i32 %169 to i64, !dbg !37
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !37
  %183 = sext i32 %171 to i64, !dbg !37
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !37
  %185 = sext i32 %172 to i64, !dbg !37
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !37
  %187 = sext i32 %174 to i64, !dbg !37
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !37
  %189 = sext i32 %175 to i64, !dbg !37
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !37
  %191 = sext i32 %177 to i64, !dbg !37
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !37
  %193 = sext i32 %178 to i64, !dbg !37
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !37
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #2, !dbg !38
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #2, !dbg !38
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 true) #2, !dbg !38
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #2, !dbg !38
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #2, !dbg !38
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 true) #2, !dbg !38
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 true) #2, !dbg !38
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #2, !dbg !38
  %203 = add i32 %59, 31, !dbg !39
  %204 = add i32 %203, %45, !dbg !40
  %205 = add i32 %203, %46, !dbg !40
  %206 = add i32 %62, 31, !dbg !39
  %207 = add i32 %206, %47, !dbg !40
  %208 = add i32 %206, %48, !dbg !40
  %209 = add i32 %65, 31, !dbg !39
  %210 = add i32 %209, %49, !dbg !40
  %211 = add i32 %209, %50, !dbg !40
  %212 = add i32 %68, 31, !dbg !39
  %213 = add i32 %212, %51, !dbg !40
  %214 = add i32 %212, %52, !dbg !40
  %215 = sext i32 %204 to i64, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !41
  %217 = sext i32 %205 to i64, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !41
  %219 = sext i32 %207 to i64, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !41
  %221 = sext i32 %208 to i64, !dbg !41
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !41
  %223 = sext i32 %210 to i64, !dbg !41
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !41
  %225 = sext i32 %211 to i64, !dbg !41
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !41
  %227 = sext i32 %213 to i64, !dbg !41
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !41
  %229 = sext i32 %214 to i64, !dbg !41
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !41
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #2, !dbg !42
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #2, !dbg !42
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #2, !dbg !42
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #2, !dbg !42
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #2, !dbg !42
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #2, !dbg !42
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #2, !dbg !42
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #2, !dbg !42
  %239 = add i32 %59, 32, !dbg !43
  %240 = add i32 %239, %45, !dbg !44
  %241 = add i32 %239, %46, !dbg !44
  %242 = add i32 %62, 32, !dbg !43
  %243 = add i32 %242, %47, !dbg !44
  %244 = add i32 %242, %48, !dbg !44
  %245 = add i32 %65, 32, !dbg !43
  %246 = add i32 %245, %49, !dbg !44
  %247 = add i32 %245, %50, !dbg !44
  %248 = add i32 %68, 32, !dbg !43
  %249 = add i32 %248, %51, !dbg !44
  %250 = add i32 %248, %52, !dbg !44
  %251 = sext i32 %240 to i64, !dbg !45
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !45
  %253 = sext i32 %241 to i64, !dbg !45
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !45
  %255 = sext i32 %243 to i64, !dbg !45
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !45
  %257 = sext i32 %244 to i64, !dbg !45
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !45
  %259 = sext i32 %246 to i64, !dbg !45
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !45
  %261 = sext i32 %247 to i64, !dbg !45
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !45
  %263 = sext i32 %249 to i64, !dbg !45
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !45
  %265 = sext i32 %250 to i64, !dbg !45
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !45
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #2, !dbg !46
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #2, !dbg !46
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #2, !dbg !46
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #2, !dbg !46
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 true) #2, !dbg !46
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #2, !dbg !46
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #2, !dbg !46
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #2, !dbg !46
  %275 = add i32 %59, 60, !dbg !47
  %276 = add i32 %275, %45, !dbg !48
  %277 = add i32 %275, %46, !dbg !48
  %278 = add i32 %62, 60, !dbg !47
  %279 = add i32 %278, %47, !dbg !48
  %280 = add i32 %278, %48, !dbg !48
  %281 = add i32 %65, 60, !dbg !47
  %282 = add i32 %281, %49, !dbg !48
  %283 = add i32 %281, %50, !dbg !48
  %284 = add i32 %68, 60, !dbg !47
  %285 = add i32 %284, %51, !dbg !48
  %286 = add i32 %284, %52, !dbg !48
  %287 = sext i32 %276 to i64, !dbg !49
  %288 = getelementptr float, ptr addrspace(1) %0, i64 %287, !dbg !49
  %289 = sext i32 %277 to i64, !dbg !49
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !49
  %291 = sext i32 %279 to i64, !dbg !49
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !49
  %293 = sext i32 %280 to i64, !dbg !49
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !49
  %295 = sext i32 %282 to i64, !dbg !49
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %295, !dbg !49
  %297 = sext i32 %283 to i64, !dbg !49
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !49
  %299 = sext i32 %285 to i64, !dbg !49
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !49
  %301 = sext i32 %286 to i64, !dbg !49
  %302 = getelementptr float, ptr addrspace(1) %0, i64 %301, !dbg !49
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #2, !dbg !50
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #2, !dbg !50
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #2, !dbg !50
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #2, !dbg !50
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 true) #2, !dbg !50
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #2, !dbg !50
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #2, !dbg !50
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #2, !dbg !50
  %311 = add i32 %59, 61, !dbg !51
  %312 = add i32 %311, %45, !dbg !52
  %313 = add i32 %311, %46, !dbg !52
  %314 = add i32 %62, 61, !dbg !51
  %315 = add i32 %314, %47, !dbg !52
  %316 = add i32 %314, %48, !dbg !52
  %317 = add i32 %65, 61, !dbg !51
  %318 = add i32 %317, %49, !dbg !52
  %319 = add i32 %317, %50, !dbg !52
  %320 = add i32 %68, 61, !dbg !51
  %321 = add i32 %320, %51, !dbg !52
  %322 = add i32 %320, %52, !dbg !52
  %323 = sext i32 %312 to i64, !dbg !53
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !53
  %325 = sext i32 %313 to i64, !dbg !53
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !53
  %327 = sext i32 %315 to i64, !dbg !53
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !53
  %329 = sext i32 %316 to i64, !dbg !53
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !53
  %331 = sext i32 %318 to i64, !dbg !53
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !53
  %333 = sext i32 %319 to i64, !dbg !53
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !53
  %335 = sext i32 %321 to i64, !dbg !53
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !53
  %337 = sext i32 %322 to i64, !dbg !53
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !53
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 true) #2, !dbg !54
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 true) #2, !dbg !54
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 true) #2, !dbg !54
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 true) #2, !dbg !54
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 true) #2, !dbg !54
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 true) #2, !dbg !54
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 true) #2, !dbg !54
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 true) #2, !dbg !54
  %347 = add i32 %59, 62, !dbg !55
  %348 = add i32 %347, %45, !dbg !56
  %349 = add i32 %347, %46, !dbg !56
  %350 = add i32 %62, 62, !dbg !55
  %351 = add i32 %350, %47, !dbg !56
  %352 = add i32 %350, %48, !dbg !56
  %353 = add i32 %65, 62, !dbg !55
  %354 = add i32 %353, %49, !dbg !56
  %355 = add i32 %353, %50, !dbg !56
  %356 = add i32 %68, 62, !dbg !55
  %357 = add i32 %356, %51, !dbg !56
  %358 = add i32 %356, %52, !dbg !56
  %359 = sext i32 %348 to i64, !dbg !57
  %360 = getelementptr float, ptr addrspace(1) %0, i64 %359, !dbg !57
  %361 = sext i32 %349 to i64, !dbg !57
  %362 = getelementptr float, ptr addrspace(1) %0, i64 %361, !dbg !57
  %363 = sext i32 %351 to i64, !dbg !57
  %364 = getelementptr float, ptr addrspace(1) %0, i64 %363, !dbg !57
  %365 = sext i32 %352 to i64, !dbg !57
  %366 = getelementptr float, ptr addrspace(1) %0, i64 %365, !dbg !57
  %367 = sext i32 %354 to i64, !dbg !57
  %368 = getelementptr float, ptr addrspace(1) %0, i64 %367, !dbg !57
  %369 = sext i32 %355 to i64, !dbg !57
  %370 = getelementptr float, ptr addrspace(1) %0, i64 %369, !dbg !57
  %371 = sext i32 %357 to i64, !dbg !57
  %372 = getelementptr float, ptr addrspace(1) %0, i64 %371, !dbg !57
  %373 = sext i32 %358 to i64, !dbg !57
  %374 = getelementptr float, ptr addrspace(1) %0, i64 %373, !dbg !57
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 true) #2, !dbg !58
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 true) #2, !dbg !58
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 true) #2, !dbg !58
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 true) #2, !dbg !58
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %368, i1 true) #2, !dbg !58
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %370, i1 true) #2, !dbg !58
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %372, i1 true) #2, !dbg !58
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %374, i1 true) #2, !dbg !58
  %383 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !26
  %384 = insertelement <4 x i32> %383, i32 %88, i64 1, !dbg !26
  %385 = insertelement <4 x i32> %384, i32 %89, i64 2, !dbg !26
  %386 = insertelement <4 x i32> %385, i32 %90, i64 3, !dbg !26
  %387 = bitcast <4 x i32> %386 to <4 x float>, !dbg !26
  %388 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !30
  %389 = insertelement <4 x i32> %388, i32 %124, i64 1, !dbg !30
  %390 = insertelement <4 x i32> %389, i32 %125, i64 2, !dbg !30
  %391 = insertelement <4 x i32> %390, i32 %126, i64 3, !dbg !30
  %392 = bitcast <4 x i32> %391 to <4 x float>, !dbg !30
  %393 = insertelement <4 x i32> poison, i32 %159, i64 0, !dbg !34
  %394 = insertelement <4 x i32> %393, i32 %160, i64 1, !dbg !34
  %395 = insertelement <4 x i32> %394, i32 %161, i64 2, !dbg !34
  %396 = insertelement <4 x i32> %395, i32 %162, i64 3, !dbg !34
  %397 = bitcast <4 x i32> %396 to <4 x float>, !dbg !34
  %398 = insertelement <4 x i32> poison, i32 %195, i64 0, !dbg !38
  %399 = insertelement <4 x i32> %398, i32 %196, i64 1, !dbg !38
  %400 = insertelement <4 x i32> %399, i32 %197, i64 2, !dbg !38
  %401 = insertelement <4 x i32> %400, i32 %198, i64 3, !dbg !38
  %402 = bitcast <4 x i32> %401 to <4 x float>, !dbg !38
  %403 = insertelement <4 x i32> poison, i32 %231, i64 0, !dbg !42
  %404 = insertelement <4 x i32> %403, i32 %232, i64 1, !dbg !42
  %405 = insertelement <4 x i32> %404, i32 %233, i64 2, !dbg !42
  %406 = insertelement <4 x i32> %405, i32 %234, i64 3, !dbg !42
  %407 = bitcast <4 x i32> %406 to <4 x float>, !dbg !42
  %408 = insertelement <4 x i32> poison, i32 %267, i64 0, !dbg !46
  %409 = insertelement <4 x i32> %408, i32 %268, i64 1, !dbg !46
  %410 = insertelement <4 x i32> %409, i32 %269, i64 2, !dbg !46
  %411 = insertelement <4 x i32> %410, i32 %270, i64 3, !dbg !46
  %412 = bitcast <4 x i32> %411 to <4 x float>, !dbg !46
  %413 = insertelement <4 x i32> poison, i32 %303, i64 0, !dbg !50
  %414 = insertelement <4 x i32> %413, i32 %304, i64 1, !dbg !50
  %415 = insertelement <4 x i32> %414, i32 %305, i64 2, !dbg !50
  %416 = insertelement <4 x i32> %415, i32 %306, i64 3, !dbg !50
  %417 = bitcast <4 x i32> %416 to <4 x float>, !dbg !50
  %418 = insertelement <4 x i32> poison, i32 %339, i64 0, !dbg !54
  %419 = insertelement <4 x i32> %418, i32 %340, i64 1, !dbg !54
  %420 = insertelement <4 x i32> %419, i32 %341, i64 2, !dbg !54
  %421 = insertelement <4 x i32> %420, i32 %342, i64 3, !dbg !54
  %422 = bitcast <4 x i32> %421 to <4 x float>, !dbg !54
  %423 = insertelement <4 x i32> poison, i32 %375, i64 0, !dbg !58
  %424 = insertelement <4 x i32> %423, i32 %376, i64 1, !dbg !58
  %425 = insertelement <4 x i32> %424, i32 %377, i64 2, !dbg !58
  %426 = insertelement <4 x i32> %425, i32 %378, i64 3, !dbg !58
  %427 = bitcast <4 x i32> %426 to <4 x float>, !dbg !58
  %428 = fcmp ogt <4 x float> %392, %387, !dbg !59
  %429 = fcmp uno <4 x float> %392, zeroinitializer, !dbg !63
  %430 = or <4 x i1> %428, %429, !dbg !64
  %.v = select <4 x i1> %430, <4 x i32> %391, <4 x i32> %386, !dbg !65
  %431 = bitcast <4 x i32> %.v to <4 x float>, !dbg !65
  %432 = fcmp olt <4 x float> %431, %397, !dbg !66
  %433 = fcmp uno <4 x float> %397, zeroinitializer, !dbg !68
  %434 = or <4 x i1> %432, %433, !dbg !69
  %.v15 = select <4 x i1> %434, <4 x i32> %396, <4 x i32> %.v, !dbg !70
  %435 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !70
  %436 = fcmp olt <4 x float> %435, %402, !dbg !71
  %437 = fcmp uno <4 x float> %402, zeroinitializer, !dbg !73
  %438 = or <4 x i1> %436, %437, !dbg !74
  %.v16 = select <4 x i1> %438, <4 x i32> %401, <4 x i32> %.v15, !dbg !75
  %439 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !75
  %440 = fcmp olt <4 x float> %439, %407, !dbg !76
  %441 = fcmp uno <4 x float> %407, zeroinitializer, !dbg !78
  %442 = or <4 x i1> %440, %441, !dbg !79
  %.v17 = select <4 x i1> %442, <4 x i32> %406, <4 x i32> %.v16, !dbg !80
  %443 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !80
  %444 = fcmp olt <4 x float> %443, %412, !dbg !81
  %445 = fcmp uno <4 x float> %412, zeroinitializer, !dbg !83
  %446 = or <4 x i1> %444, %445, !dbg !84
  %.v18 = select <4 x i1> %446, <4 x i32> %411, <4 x i32> %.v17, !dbg !85
  %447 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !85
  %448 = fcmp olt <4 x float> %447, %417, !dbg !86
  %449 = fcmp uno <4 x float> %417, zeroinitializer, !dbg !88
  %450 = or <4 x i1> %448, %449, !dbg !89
  %.v19 = select <4 x i1> %450, <4 x i32> %416, <4 x i32> %.v18, !dbg !90
  %451 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !90
  %452 = fcmp olt <4 x float> %451, %422, !dbg !91
  %453 = fcmp uno <4 x float> %422, zeroinitializer, !dbg !93
  %454 = or <4 x i1> %452, %453, !dbg !94
  %.v20 = select <4 x i1> %454, <4 x i32> %421, <4 x i32> %.v19, !dbg !95
  %455 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !95
  %456 = fcmp olt <4 x float> %455, %427, !dbg !96
  %457 = extractelement <4 x i1> %456, i64 0, !dbg !98
  %458 = extractelement <4 x i1> %456, i64 1, !dbg !98
  %459 = extractelement <4 x i1> %456, i64 2, !dbg !98
  %460 = extractelement <4 x i1> %456, i64 3, !dbg !98
  %461 = zext <4 x i1> %428 to <4 x i8>, !dbg !99
  %462 = select <4 x i1> %432, <4 x i8> splat (i8 2), <4 x i8> %461, !dbg !100
  %463 = select <4 x i1> %436, <4 x i8> splat (i8 3), <4 x i8> %462, !dbg !101
  %464 = select <4 x i1> %440, <4 x i8> splat (i8 4), <4 x i8> %463, !dbg !102
  %465 = select <4 x i1> %444, <4 x i8> splat (i8 5), <4 x i8> %464, !dbg !103
  %466 = select <4 x i1> %448, <4 x i8> splat (i8 6), <4 x i8> %465, !dbg !104
  %467 = select <4 x i1> %452, <4 x i8> splat (i8 7), <4 x i8> %466, !dbg !105
  %468 = select <4 x i1> %456, <4 x i8> splat (i8 8), <4 x i8> %467, !dbg !106
  %469 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !26
  %470 = insertelement <4 x i32> %469, i32 %92, i64 1, !dbg !26
  %471 = insertelement <4 x i32> %470, i32 %93, i64 2, !dbg !26
  %472 = insertelement <4 x i32> %471, i32 %94, i64 3, !dbg !26
  %473 = bitcast <4 x i32> %472 to <4 x float>, !dbg !26
  %474 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !30
  %475 = insertelement <4 x i32> %474, i32 %128, i64 1, !dbg !30
  %476 = insertelement <4 x i32> %475, i32 %129, i64 2, !dbg !30
  %477 = insertelement <4 x i32> %476, i32 %130, i64 3, !dbg !30
  %478 = bitcast <4 x i32> %477 to <4 x float>, !dbg !30
  %479 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !34
  %480 = insertelement <4 x i32> %479, i32 %164, i64 1, !dbg !34
  %481 = insertelement <4 x i32> %480, i32 %165, i64 2, !dbg !34
  %482 = insertelement <4 x i32> %481, i32 %166, i64 3, !dbg !34
  %483 = bitcast <4 x i32> %482 to <4 x float>, !dbg !34
  %484 = insertelement <4 x i32> poison, i32 %199, i64 0, !dbg !38
  %485 = insertelement <4 x i32> %484, i32 %200, i64 1, !dbg !38
  %486 = insertelement <4 x i32> %485, i32 %201, i64 2, !dbg !38
  %487 = insertelement <4 x i32> %486, i32 %202, i64 3, !dbg !38
  %488 = bitcast <4 x i32> %487 to <4 x float>, !dbg !38
  %489 = insertelement <4 x i32> poison, i32 %235, i64 0, !dbg !42
  %490 = insertelement <4 x i32> %489, i32 %236, i64 1, !dbg !42
  %491 = insertelement <4 x i32> %490, i32 %237, i64 2, !dbg !42
  %492 = insertelement <4 x i32> %491, i32 %238, i64 3, !dbg !42
  %493 = bitcast <4 x i32> %492 to <4 x float>, !dbg !42
  %494 = insertelement <4 x i32> poison, i32 %271, i64 0, !dbg !46
  %495 = insertelement <4 x i32> %494, i32 %272, i64 1, !dbg !46
  %496 = insertelement <4 x i32> %495, i32 %273, i64 2, !dbg !46
  %497 = insertelement <4 x i32> %496, i32 %274, i64 3, !dbg !46
  %498 = bitcast <4 x i32> %497 to <4 x float>, !dbg !46
  %499 = insertelement <4 x i32> poison, i32 %307, i64 0, !dbg !50
  %500 = insertelement <4 x i32> %499, i32 %308, i64 1, !dbg !50
  %501 = insertelement <4 x i32> %500, i32 %309, i64 2, !dbg !50
  %502 = insertelement <4 x i32> %501, i32 %310, i64 3, !dbg !50
  %503 = bitcast <4 x i32> %502 to <4 x float>, !dbg !50
  %504 = insertelement <4 x i32> poison, i32 %343, i64 0, !dbg !54
  %505 = insertelement <4 x i32> %504, i32 %344, i64 1, !dbg !54
  %506 = insertelement <4 x i32> %505, i32 %345, i64 2, !dbg !54
  %507 = insertelement <4 x i32> %506, i32 %346, i64 3, !dbg !54
  %508 = bitcast <4 x i32> %507 to <4 x float>, !dbg !54
  %509 = insertelement <4 x i32> poison, i32 %379, i64 0, !dbg !58
  %510 = insertelement <4 x i32> %509, i32 %380, i64 1, !dbg !58
  %511 = insertelement <4 x i32> %510, i32 %381, i64 2, !dbg !58
  %512 = insertelement <4 x i32> %511, i32 %382, i64 3, !dbg !58
  %513 = bitcast <4 x i32> %512 to <4 x float>, !dbg !58
  %514 = fcmp ogt <4 x float> %478, %473, !dbg !59
  %515 = fcmp uno <4 x float> %478, zeroinitializer, !dbg !63
  %516 = or <4 x i1> %514, %515, !dbg !64
  %.v21 = select <4 x i1> %516, <4 x i32> %477, <4 x i32> %472, !dbg !65
  %517 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !65
  %518 = fcmp olt <4 x float> %517, %483, !dbg !66
  %519 = fcmp uno <4 x float> %483, zeroinitializer, !dbg !68
  %520 = or <4 x i1> %518, %519, !dbg !69
  %.v22 = select <4 x i1> %520, <4 x i32> %482, <4 x i32> %.v21, !dbg !70
  %521 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !70
  %522 = fcmp olt <4 x float> %521, %488, !dbg !71
  %523 = fcmp uno <4 x float> %488, zeroinitializer, !dbg !73
  %524 = or <4 x i1> %522, %523, !dbg !74
  %.v23 = select <4 x i1> %524, <4 x i32> %487, <4 x i32> %.v22, !dbg !75
  %525 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !75
  %526 = fcmp olt <4 x float> %525, %493, !dbg !76
  %527 = fcmp uno <4 x float> %493, zeroinitializer, !dbg !78
  %528 = or <4 x i1> %526, %527, !dbg !79
  %.v24 = select <4 x i1> %528, <4 x i32> %492, <4 x i32> %.v23, !dbg !80
  %529 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !80
  %530 = fcmp olt <4 x float> %529, %498, !dbg !81
  %531 = fcmp uno <4 x float> %498, zeroinitializer, !dbg !83
  %532 = or <4 x i1> %530, %531, !dbg !84
  %.v25 = select <4 x i1> %532, <4 x i32> %497, <4 x i32> %.v24, !dbg !85
  %533 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !85
  %534 = fcmp olt <4 x float> %533, %503, !dbg !86
  %535 = fcmp uno <4 x float> %503, zeroinitializer, !dbg !88
  %536 = or <4 x i1> %534, %535, !dbg !89
  %.v26 = select <4 x i1> %536, <4 x i32> %502, <4 x i32> %.v25, !dbg !90
  %537 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !90
  %538 = fcmp olt <4 x float> %537, %508, !dbg !91
  %539 = fcmp uno <4 x float> %508, zeroinitializer, !dbg !93
  %540 = or <4 x i1> %538, %539, !dbg !94
  %.v27 = select <4 x i1> %540, <4 x i32> %507, <4 x i32> %.v26, !dbg !95
  %541 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !95
  %542 = fcmp olt <4 x float> %541, %513, !dbg !96
  %543 = shufflevector <4 x float> %513, <4 x float> %427, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !107
  %544 = fcmp uno <8 x float> %543, zeroinitializer, !dbg !107
  %545 = extractelement <8 x i1> %544, i64 7, !dbg !98
  %546 = or i1 %457, %545, !dbg !98
  %547 = extractelement <8 x i1> %544, i64 6, !dbg !98
  %548 = or i1 %458, %547, !dbg !98
  %549 = extractelement <8 x i1> %544, i64 5, !dbg !98
  %550 = or i1 %459, %549, !dbg !98
  %551 = extractelement <8 x i1> %544, i64 4, !dbg !98
  %552 = or i1 %460, %551, !dbg !98
  %553 = extractelement <4 x i1> %542, i64 0, !dbg !98
  %554 = extractelement <8 x i1> %544, i64 3, !dbg !98
  %555 = or i1 %553, %554, !dbg !98
  %556 = extractelement <4 x i1> %542, i64 1, !dbg !98
  %557 = extractelement <8 x i1> %544, i64 2, !dbg !98
  %558 = or i1 %556, %557, !dbg !98
  %559 = extractelement <4 x i1> %542, i64 2, !dbg !98
  %560 = extractelement <8 x i1> %544, i64 1, !dbg !98
  %561 = or i1 %559, %560, !dbg !98
  %562 = extractelement <4 x i1> %542, i64 3, !dbg !98
  %563 = extractelement <8 x i1> %544, i64 0, !dbg !98
  %564 = or i1 %562, %563, !dbg !98
  %565 = zext <4 x i1> %514 to <4 x i8>, !dbg !99
  %566 = select <4 x i1> %518, <4 x i8> splat (i8 2), <4 x i8> %565, !dbg !100
  %567 = select <4 x i1> %522, <4 x i8> splat (i8 3), <4 x i8> %566, !dbg !101
  %568 = select <4 x i1> %526, <4 x i8> splat (i8 4), <4 x i8> %567, !dbg !102
  %569 = select <4 x i1> %530, <4 x i8> splat (i8 5), <4 x i8> %568, !dbg !103
  %570 = select <4 x i1> %534, <4 x i8> splat (i8 6), <4 x i8> %569, !dbg !104
  %571 = select <4 x i1> %538, <4 x i8> splat (i8 7), <4 x i8> %570, !dbg !105
  %572 = select <4 x i1> %542, <4 x i8> splat (i8 8), <4 x i8> %571, !dbg !106
  %573 = mul i32 %41, 301056, !dbg !108
  %574 = mul i32 %42, 301056, !dbg !108
  %575 = add i32 %573, %.decomposed35, !dbg !109
  %576 = add i32 %574, %.decomposed37, !dbg !109
  %577 = sext i32 %575 to i64, !dbg !110
  %578 = getelementptr float, ptr addrspace(1) %1, i64 %577, !dbg !110
  %579 = sext i32 %576 to i64, !dbg !110
  %580 = getelementptr float, ptr addrspace(1) %1, i64 %579, !dbg !110
  %581 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !111
  %582 = extractelement <4 x i32> %.v20, i64 0, !dbg !111
  %583 = select i1 %546, i32 %375, i32 %582, !dbg !112
  %584 = extractelement <4 x i32> %.v20, i64 1, !dbg !111
  %585 = select i1 %548, i32 %376, i32 %584, !dbg !112
  %586 = extractelement <4 x i32> %.v20, i64 2, !dbg !111
  %587 = select i1 %550, i32 %377, i32 %586, !dbg !112
  %588 = extractelement <4 x i32> %.v20, i64 3, !dbg !111
  %589 = select i1 %552, i32 %378, i32 %588, !dbg !112
  %590 = extractelement <4 x i32> %.v27, i64 0, !dbg !111
  %591 = select i1 %555, i32 %379, i32 %590, !dbg !112
  %592 = extractelement <4 x i32> %.v27, i64 1, !dbg !111
  %593 = select i1 %558, i32 %380, i32 %592, !dbg !112
  %594 = extractelement <4 x i32> %.v27, i64 2, !dbg !111
  %595 = select i1 %561, i32 %381, i32 %594, !dbg !112
  %596 = extractelement <4 x i32> %.v27, i64 3, !dbg !111
  %597 = select i1 %564, i32 %382, i32 %596, !dbg !112
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %581, i32 %583, i32 %585, i32 %587, i32 %589, i1 true) #2, !dbg !111
  %598 = getelementptr inbounds i8, ptr addrspace(3) %581, i32 16, !dbg !111
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %598, i32 %591, i32 %593, i32 %595, i32 %597, i1 true) #2, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %599 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !111
  %600 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !111
  %601 = load <4 x i32>, ptr addrspace(3) %600, align 16, !dbg !111
  %.extract = load i32, ptr addrspace(3) %599, align 16, !dbg !111
  %602 = getelementptr inbounds i8, ptr addrspace(3) %599, i32 4, !dbg !111
  %.extract8 = load i32, ptr addrspace(3) %602, align 4, !dbg !111
  %603 = getelementptr inbounds i8, ptr addrspace(3) %599, i32 8, !dbg !111
  %.extract9 = load i32, ptr addrspace(3) %603, align 8, !dbg !111
  %604 = getelementptr inbounds i8, ptr addrspace(3) %599, i32 12, !dbg !111
  %.extract10 = load i32, ptr addrspace(3) %604, align 4, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %578, i1 true) #2, !dbg !111
  %.extract11 = extractelement <4 x i32> %601, i64 0, !dbg !111
  %.extract12 = extractelement <4 x i32> %601, i64 1, !dbg !111
  %.extract13 = extractelement <4 x i32> %601, i64 2, !dbg !111
  %.extract14 = extractelement <4 x i32> %601, i64 3, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %580, i1 true) #2, !dbg !111
  %605 = sext i32 %13 to i64, !dbg !113
  %606 = getelementptr i8, ptr addrspace(1) %2, i64 %605, !dbg !113
  %607 = bitcast <4 x i8> %468 to i32, !dbg !114
  %608 = bitcast <4 x i8> %572 to i32, !dbg !114
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %607, i32 %608, ptr addrspace(1) %606, i1 true) #2, !dbg !114
  ret void, !dbg !115
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnlljm55vuoer3nnrw46ygayp62ovnp6ildbr2yoakfdli237qse.py", directory: "inductor_cache/nl")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_24", linkageName: "triton_poi_fused_max_pool2d_with_indices_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 32, scope: !7)
!21 = !DILocation(line: 30, column: 40, scope: !7)
!22 = !DILocation(line: 30, column: 49, scope: !7)
!23 = !DILocation(line: 30, column: 37, scope: !7)
!24 = !DILocation(line: 30, column: 45, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 54, scope: !7)
!27 = !DILocation(line: 31, column: 41, scope: !7)
!28 = !DILocation(line: 31, column: 49, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 58, scope: !7)
!31 = !DILocation(line: 32, column: 41, scope: !7)
!32 = !DILocation(line: 32, column: 49, scope: !7)
!33 = !DILocation(line: 32, column: 30, scope: !7)
!34 = !DILocation(line: 32, column: 58, scope: !7)
!35 = !DILocation(line: 33, column: 42, scope: !7)
!36 = !DILocation(line: 33, column: 50, scope: !7)
!37 = !DILocation(line: 33, column: 30, scope: !7)
!38 = !DILocation(line: 33, column: 59, scope: !7)
!39 = !DILocation(line: 34, column: 42, scope: !7)
!40 = !DILocation(line: 34, column: 50, scope: !7)
!41 = !DILocation(line: 34, column: 30, scope: !7)
!42 = !DILocation(line: 34, column: 59, scope: !7)
!43 = !DILocation(line: 35, column: 42, scope: !7)
!44 = !DILocation(line: 35, column: 50, scope: !7)
!45 = !DILocation(line: 35, column: 30, scope: !7)
!46 = !DILocation(line: 35, column: 59, scope: !7)
!47 = !DILocation(line: 36, column: 43, scope: !7)
!48 = !DILocation(line: 36, column: 51, scope: !7)
!49 = !DILocation(line: 36, column: 31, scope: !7)
!50 = !DILocation(line: 36, column: 60, scope: !7)
!51 = !DILocation(line: 37, column: 43, scope: !7)
!52 = !DILocation(line: 37, column: 51, scope: !7)
!53 = !DILocation(line: 37, column: 31, scope: !7)
!54 = !DILocation(line: 37, column: 60, scope: !7)
!55 = !DILocation(line: 38, column: 43, scope: !7)
!56 = !DILocation(line: 38, column: 51, scope: !7)
!57 = !DILocation(line: 38, column: 31, scope: !7)
!58 = !DILocation(line: 38, column: 60, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 39, column: 40, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!66 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !67)
!67 = !DILocation(line: 40, column: 40, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !67)
!71 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !72)
!72 = !DILocation(line: 41, column: 40, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !77)
!77 = !DILocation(line: 42, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !82)
!82 = !DILocation(line: 43, column: 41, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !87)
!87 = !DILocation(line: 44, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !92)
!92 = !DILocation(line: 45, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !97)
!97 = !DILocation(line: 46, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !97)
!99 = !DILocation(line: 50, column: 35, scope: !7)
!100 = !DILocation(line: 53, column: 35, scope: !7)
!101 = !DILocation(line: 56, column: 35, scope: !7)
!102 = !DILocation(line: 59, column: 35, scope: !7)
!103 = !DILocation(line: 62, column: 35, scope: !7)
!104 = !DILocation(line: 65, column: 35, scope: !7)
!105 = !DILocation(line: 68, column: 35, scope: !7)
!106 = !DILocation(line: 71, column: 35, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !97)
!108 = !DILocation(line: 72, column: 37, scope: !7)
!109 = !DILocation(line: 72, column: 30, scope: !7)
!110 = !DILocation(line: 72, column: 25, scope: !7)
!111 = !DILocation(line: 72, column: 49, scope: !7)
!112 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !97)
!113 = !DILocation(line: 73, column: 25, scope: !7)
!114 = !DILocation(line: 73, column: 37, scope: !7)
!115 = !DILocation(line: 73, column: 4, scope: !7)
