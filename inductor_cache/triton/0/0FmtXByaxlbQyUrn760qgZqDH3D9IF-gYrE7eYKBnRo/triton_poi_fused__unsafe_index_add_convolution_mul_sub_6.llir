; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %19 = sdiv i32 %.frozen, 64, !dbg !14
  %20 = srem i32 %19, 64, !dbg !15
  %21 = mul i32 %19, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = sdiv i32 %18, 4096, !dbg !17
  %23 = srem i32 %22, 16, !dbg !18
  %24 = sext i32 %20 to i64, !dbg !19
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %28 = sext i32 %.decomposed to i64, !dbg !21
  %29 = getelementptr i64, ptr addrspace(1) %2, i64 %28, !dbg !21
  %30 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !22
  %31 = extractvalue { i64, i64 } %30, 0, !dbg !22
  %32 = extractvalue { i64, i64 } %30, 1, !dbg !22
  %33 = sext i32 %23 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !24
  %37 = getelementptr i64, ptr addrspace(1) %5, i64 %28, !dbg !25
  %38 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !26
  %39 = extractvalue { i64, i64 } %38, 0, !dbg !26
  %40 = extractvalue { i64, i64 } %38, 1, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !27
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !28
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !28
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !28
  %45 = getelementptr i64, ptr addrspace(1) %7, i64 %24, !dbg !29
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !30
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !32
  %50 = bitcast i32 %49 to float, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !32
  %52 = bitcast i32 %51 to float, !dbg !32
  %53 = sext i32 %18 to i64, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %53, !dbg !33
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !34
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !34
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !34
  %58 = bitcast i32 %56 to float, !dbg !34
  %59 = bitcast i32 %57 to float, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %10, i64 %33, !dbg !35
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !36
  %62 = bitcast i32 %61 to float, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !36
  %64 = bitcast i32 %63 to float, !dbg !36
  %65 = add i64 %26, 9, !dbg !37
  %66 = icmp slt i64 %26, 0, !dbg !38
  %67 = select i1 %66, i64 %65, i64 %26, !dbg !39
  %68 = add i64 %31, 9, !dbg !40
  %69 = add i64 %32, 9, !dbg !40
  %70 = icmp slt i64 %31, 0, !dbg !41
  %71 = icmp slt i64 %32, 0, !dbg !41
  %72 = select i1 %70, i64 %68, i64 %31, !dbg !42
  %73 = select i1 %71, i64 %69, i64 %32, !dbg !42
  %74 = mul i64 %67, 9, !dbg !43
  %75 = mul nsw i32 %22, 81, !dbg !44
  %76 = sext i32 %75 to i64, !dbg !45
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !46
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %74, !dbg !46
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %76, !dbg !46
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !46
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %74, !dbg !46
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %76, !dbg !46
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !47
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !47
  %85 = add i64 %39, 9, !dbg !48
  %86 = add i64 %40, 9, !dbg !48
  %87 = icmp slt i64 %39, 0, !dbg !49
  %88 = icmp slt i64 %40, 0, !dbg !49
  %89 = select i1 %87, i64 %85, i64 %39, !dbg !50
  %90 = select i1 %88, i64 %86, i64 %40, !dbg !50
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !51
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %74, !dbg !51
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %76, !dbg !51
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !51
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %74, !dbg !51
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %76, !dbg !51
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !52
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !52
  %99 = add i64 %46, 9, !dbg !53
  %100 = icmp slt i64 %46, 0, !dbg !54
  %101 = select i1 %100, i64 %99, i64 %46, !dbg !55
  %102 = mul i64 %101, 9, !dbg !56
  %103 = getelementptr float, ptr addrspace(1) %77, i64 %102, !dbg !57
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %76, !dbg !57
  %105 = getelementptr float, ptr addrspace(1) %80, i64 %102, !dbg !57
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %76, !dbg !57
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !58
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !58
  %109 = getelementptr float, ptr addrspace(1) %91, i64 %102, !dbg !59
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %76, !dbg !59
  %111 = getelementptr float, ptr addrspace(1) %94, i64 %102, !dbg !59
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %76, !dbg !59
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #1, !dbg !60
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #1, !dbg !60
  %115 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !58
  %116 = insertelement <2 x i32> %115, i32 %83, i64 1, !dbg !58
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !58
  %118 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !61
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !61
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %121 = fadd <2 x float> %120, %117, !dbg !61
  %122 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !60
  %123 = insertelement <2 x i32> %122, i32 %97, i64 1, !dbg !60
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !60
  %125 = fadd <2 x float> %120, %124, !dbg !62
  %126 = fsub <2 x float> %125, %121, !dbg !63
  %127 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !64
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !64
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %130 = fmul <2 x float> %126, %129, !dbg !64
  %131 = fadd <2 x float> %121, %130, !dbg !65
  %132 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !58
  %133 = insertelement <2 x i32> %132, i32 %84, i64 1, !dbg !58
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !58
  %135 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !61
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !61
  %137 = shufflevector <2 x float> %136, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %138 = fadd <2 x float> %137, %134, !dbg !61
  %139 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !60
  %140 = insertelement <2 x i32> %139, i32 %98, i64 1, !dbg !60
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !60
  %142 = fadd <2 x float> %137, %141, !dbg !62
  %143 = fsub <2 x float> %142, %138, !dbg !63
  %144 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !64
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !64
  %146 = shufflevector <2 x float> %145, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %147 = fmul <2 x float> %143, %146, !dbg !64
  %148 = fadd <2 x float> %138, %147, !dbg !65
  %149 = extractelement <2 x float> %131, i64 0, !dbg !66
  %150 = extractelement <2 x float> %131, i64 1, !dbg !67
  %151 = fsub float %149, %150, !dbg !66
  %152 = extractelement <2 x float> %148, i64 0, !dbg !66
  %153 = extractelement <2 x float> %148, i64 1, !dbg !67
  %154 = fsub float %152, %153, !dbg !66
  %155 = fmul float %151, %50, !dbg !68
  %156 = fmul float %154, %52, !dbg !68
  %157 = fadd float %150, %155, !dbg !67
  %158 = fadd float %153, %156, !dbg !67
  %159 = fadd float %58, %62, !dbg !69
  %160 = fadd float %59, %64, !dbg !69
  %161 = fadd float %159, %157, !dbg !70
  %162 = fadd float %160, %158, !dbg !70
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !71
  %164 = bitcast float %161 to i32, !dbg !72
  %165 = bitcast float %162 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %164, i32 %165, ptr addrspace(1) %163, i1 true) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnuqpty7tu7udp7m4teol5rcayv2n7y2dr2zqqgrrlx3vv3m4ilr.py", directory: "inductor_cache/nu")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_6", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 32, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 32, scope: !7)
!43 = !DILocation(line: 45, column: 39, scope: !7)
!44 = !DILocation(line: 45, column: 49, scope: !7)
!45 = !DILocation(line: 45, column: 46, scope: !7)
!46 = !DILocation(line: 45, column: 30, scope: !7)
!47 = !DILocation(line: 45, column: 54, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 35, scope: !7)
!51 = !DILocation(line: 50, column: 31, scope: !7)
!52 = !DILocation(line: 50, column: 56, scope: !7)
!53 = !DILocation(line: 55, column: 20, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 35, scope: !7)
!56 = !DILocation(line: 58, column: 40, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 56, scope: !7)
!59 = !DILocation(line: 60, column: 31, scope: !7)
!60 = !DILocation(line: 60, column: 57, scope: !7)
!61 = !DILocation(line: 59, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 20, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 66, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 69, column: 20, scope: !7)
!71 = !DILocation(line: 70, column: 28, scope: !7)
!72 = !DILocation(line: 70, column: 40, scope: !7)
!73 = !DILocation(line: 70, column: 4, scope: !7)
