; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = icmp slt i32 %15, 256, !dbg !14
  %20 = icmp slt i32 %16, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 2, !dbg !16
  %25 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %25, 1, !dbg !17
  %26 = or disjoint i32 %24, %.lobit, !dbg !18
  %27 = or disjoint i32 %26, 2, !dbg !18
  %28 = icmp slt i32 %24, 68644, !dbg !19
  %29 = icmp slt i32 %26, 68644, !dbg !19
  %30 = icmp slt i32 %27, 68644, !dbg !19
  %31 = srem i32 %17, 64, !dbg !20
  %.frozen = freeze i32 %18, !dbg !21
  %32 = sdiv i32 %.frozen, 64, !dbg !21
  %33 = mul i32 %32, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %33, !dbg !20
  %34 = mul i32 %15, 68644, !dbg !22
  %35 = mul i32 %16, 68644, !dbg !22
  %36 = add i32 %34, %24, !dbg !23
  %37 = add i32 %35, %24, !dbg !23
  %38 = sext i32 %36 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = sext i32 %37 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = and i1 %28, %19, !dbg !25
  %43 = and i1 %28, %20, !dbg !25
  %44 = and i1 %22, %29, !dbg !25
  %45 = and i1 %30, %22, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %42) #2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %43) #2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %56 = and i32 %13, 508, !dbg !26
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !26
  %58 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !26
  %59 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 1040, !dbg !26
  %60 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !26
  %61 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 2080, !dbg !26
  %62 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !26
  %63 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 3120, !dbg !26
  %64 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #2, !dbg !26
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %66 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !26
  %67 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 1552, !dbg !26
  %68 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !26
  %69 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 2592, !dbg !26
  %70 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !26
  %71 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 3632, !dbg !26
  %72 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %73 = lshr i32 %13, 6, !dbg !26
  %74 = and i32 %73, 4, !dbg !26
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !26
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %56, !dbg !26
  %77 = or disjoint i32 %56, 512, !dbg !26
  %78 = lshr i32 %77, 6, !dbg !26
  %79 = and i32 %78, 12, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !26
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %77, !dbg !26
  %82 = sext i32 %31 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !27
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !28
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %86 = load <4 x float>, ptr addrspace(3) %76, align 16, !dbg !26
  %87 = load <4 x float>, ptr addrspace(3) %81, align 16, !dbg !26
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %21) #2, !dbg !32
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !32
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %84, i32 %89, i32 %90, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %91 = load <4 x float>, ptr addrspace(3) %85, align 16, !dbg !28
  %92 = shufflevector <4 x float> %91, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %93 = shufflevector <4 x float> %87, <4 x float> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !33
  %94 = fadd <8 x float> %93, %92, !dbg !33
  %95 = fcmp olt <8 x float> %94, zeroinitializer, !dbg !34
  %96 = extractelement <8 x i1> %95, i64 4, !dbg !28
  %97 = extractelement <8 x i1> %95, i64 5, !dbg !28
  %98 = extractelement <8 x i1> %95, i64 6, !dbg !28
  %99 = extractelement <8 x i1> %95, i64 7, !dbg !28
  %100 = extractelement <8 x i1> %95, i64 0, !dbg !28
  %101 = extractelement <8 x i1> %95, i64 1, !dbg !28
  %102 = extractelement <8 x i1> %95, i64 2, !dbg !28
  %103 = extractelement <8 x i1> %95, i64 3, !dbg !28
  %104 = shl i32 %26, 6, !dbg !35
  %105 = shl i32 %27, 6, !dbg !35
  %106 = mul i32 %32, 4393216, !dbg !36
  %107 = add i32 %106, %.decomposed, !dbg !37
  %108 = add i32 %107, %104, !dbg !38
  %109 = add i32 %107, %105, !dbg !38
  %110 = sext i32 %108 to i64, !dbg !39
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !39
  %112 = sext i32 %109 to i64, !dbg !39
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !39
  %bc = bitcast <8 x float> %94 to <8 x i32>, !dbg !40
  %114 = extractelement <8 x i32> %bc, i64 4, !dbg !40
  %115 = select i1 %96, i32 0, i32 %114, !dbg !28
  %bc12 = bitcast <8 x float> %94 to <8 x i32>, !dbg !40
  %116 = extractelement <8 x i32> %bc12, i64 5, !dbg !40
  %117 = select i1 %97, i32 0, i32 %116, !dbg !28
  %bc13 = bitcast <8 x float> %94 to <8 x i32>, !dbg !40
  %118 = extractelement <8 x i32> %bc13, i64 6, !dbg !40
  %119 = select i1 %98, i32 0, i32 %118, !dbg !28
  %bc14 = bitcast <8 x float> %94 to <8 x i32>, !dbg !40
  %120 = extractelement <8 x i32> %bc14, i64 7, !dbg !40
  %121 = select i1 %99, i32 0, i32 %120, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %117, i32 %119, i32 %121, ptr addrspace(1) %111, i1 %44) #2, !dbg !40
  %bc15 = bitcast <8 x float> %94 to <8 x i32>, !dbg !40
  %122 = extractelement <8 x i32> %bc15, i64 0, !dbg !40
  %123 = select i1 %100, i32 0, i32 %122, !dbg !28
  %bc16 = bitcast <8 x float> %94 to <8 x i32>, !dbg !40
  %124 = extractelement <8 x i32> %bc16, i64 1, !dbg !40
  %125 = select i1 %101, i32 0, i32 %124, !dbg !28
  %bc17 = bitcast <8 x float> %94 to <8 x i32>, !dbg !40
  %126 = extractelement <8 x i32> %bc17, i64 2, !dbg !40
  %127 = select i1 %102, i32 0, i32 %126, !dbg !28
  %bc18 = bitcast <8 x float> %94 to <8 x i32>, !dbg !40
  %128 = extractelement <8 x i32> %bc18, i64 3, !dbg !40
  %129 = select i1 %103, i32 0, i32 %128, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %123, i32 %125, i32 %127, i32 %129, ptr addrspace(1) %113, i1 %45) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_poi_fused_convolution_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_8", linkageName: "triton_poi_fused_convolution_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 46, scope: !7)
!37 = !DILocation(line: 37, column: 30, scope: !7)
!38 = !DILocation(line: 37, column: 38, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 57, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
