#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":19:0)
#loc1 = loc(unknown)
#loc21 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":41:37)
#loc32 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":48:26)
#loc44 = loc(callsite(#loc1 at #loc21))
#loc50 = loc(callsite(#loc1 at #loc32))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__softmax_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":19:0), %arg4: i32 loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0xFF800000> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c1312_i32 = arith.constant 1312 : i32 loc(#loc1)
    %c144_i32 = arith.constant 144 : i32 loc(#loc1)
    %c9_i32 = arith.constant 9 : i32 loc(#loc1)
    %c576_i32 = arith.constant 576 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<5.000000e-01> : tensor<1x16xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c576_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %4 = arith.cmpi slt, %3, %cst : tensor<1x16xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %0, %c9_i32 : i32 loc(#loc6)
    %6 = arith.divsi %0, %c144_i32 : i32 loc(#loc7)
    %7 = arith.remsi %0, %c144_i32 : i32 loc(#loc8)
    %8 = arith.muli %0, %c9_i32 : i32 loc(#loc9)
    %9 = tt.splat %8 : i32 -> tensor<1x16xi32, #blocked> loc(#loc10)
    %10 = arith.addi %3, %9 : tensor<1x16xi32, #blocked> loc(#loc10)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.addptr %11, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc11)
    %13 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc12)
    %14 = arith.andi %4, %13 : tensor<1x16xi1, #blocked> loc(#loc12)
    %15 = tt.load %12, %14, %cst_0 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc13)
    %16 = arith.muli %5, %c9_i32 : i32 loc(#loc14)
    %17 = tt.splat %16 : i32 -> tensor<1x16xi32, #blocked> loc(#loc15)
    %18 = arith.addi %3, %17 : tensor<1x16xi32, #blocked> loc(#loc15)
    %19 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc16)
    %20 = tt.addptr %19, %18 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc16)
    %21 = tt.load %20, %14, %cst_0 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc17)
    %22 = arith.addf %15, %21 : tensor<1x16xf32, #blocked> loc(#loc18)
    %23 = arith.select %14, %22, %cst_1 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc19)
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc21)), %arg6: f32 loc(callsite(#loc1 at #loc21))):
      %43 = arith.cmpf ogt, %arg5, %arg6 : f32 loc(#loc52)
      %44 = arith.cmpf une, %arg5, %arg5 : f32 loc(#loc53)
      %45 = arith.ori %43, %44 : i1 loc(#loc54)
      %46 = arith.select %45, %arg5, %arg6 : f32 loc(#loc55)
      tt.reduce.return %46 : f32 loc(#loc43)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc26)
    %26 = tt.broadcast %25 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc27)
    %27 = arith.subf %22, %26 : tensor<1x16xf32, #blocked> loc(#loc27)
    %28 = arith.mulf %27, %cst_2 : tensor<1x16xf32, #blocked> loc(#loc28)
    %29 = math.exp %28 : tensor<1x16xf32, #blocked> loc(#loc29)
    %30 = arith.select %14, %29, %cst_0 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc30)
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc32)), %arg6: f32 loc(callsite(#loc1 at #loc32))):
      %43 = arith.addf %arg5, %arg6 : f32 loc(#loc56)
      tt.reduce.return %43 : f32 loc(#loc49)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc49)
    %32 = tt.expand_dims %31 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc34)
    %33 = tt.broadcast %32 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc35)
    %34 = arith.divf %29, %33 : tensor<1x16xf32, #blocked> loc(#loc35)
    %35 = arith.muli %7, %c9_i32 : i32 loc(#loc36)
    %36 = tt.splat %35 : i32 -> tensor<1x16xi32, #blocked> loc(#loc37)
    %37 = arith.addi %3, %36 : tensor<1x16xi32, #blocked> loc(#loc37)
    %38 = arith.muli %6, %c1312_i32 : i32 loc(#loc38)
    %39 = tt.splat %38 : i32 -> tensor<1x16xi32, #blocked> loc(#loc39)
    %40 = arith.addi %37, %39 : tensor<1x16xi32, #blocked> loc(#loc39)
    %41 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc40)
    %42 = tt.addptr %41, %40 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc40)
    tt.store %42, %34, %14 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":23:28)
#loc3 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":25:21)
#loc4 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":26:34)
#loc5 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":28:21)
#loc6 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":31:19)
#loc7 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":32:19)
#loc8 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":33:19)
#loc9 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":34:37)
#loc10 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":34:35)
#loc11 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":34:30)
#loc12 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":34:50)
#loc13 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":34:42)
#loc14 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":35:37)
#loc15 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":35:35)
#loc16 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":35:30)
#loc17 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":35:42)
#loc18 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":36:18)
#loc19 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":40:41)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc26 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":41:40)
#loc27 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":42:18)
#loc28 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":44:19)
#loc29 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":45:24)
#loc30 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":47:43)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc34 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":48:29)
#loc35 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":49:20)
#loc36 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":50:32)
#loc37 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":50:30)
#loc38 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":50:42)
#loc39 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":50:37)
#loc40 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":50:25)
#loc41 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":50:54)
#loc42 = loc("inductor_cache/m2/cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py":50:4)
#loc43 = loc(callsite(#loc20 at #loc21))
#loc45 = loc(callsite(#loc22 at #loc20))
#loc46 = loc(callsite(#loc23 at #loc20))
#loc47 = loc(callsite(#loc24 at #loc20))
#loc48 = loc(callsite(#loc25 at #loc20))
#loc49 = loc(callsite(#loc31 at #loc32))
#loc51 = loc(callsite(#loc33 at #loc31))
#loc52 = loc(callsite(#loc45 at #loc21))
#loc53 = loc(callsite(#loc46 at #loc21))
#loc54 = loc(callsite(#loc47 at #loc21))
#loc55 = loc(callsite(#loc48 at #loc21))
#loc56 = loc(callsite(#loc51 at #loc32))
