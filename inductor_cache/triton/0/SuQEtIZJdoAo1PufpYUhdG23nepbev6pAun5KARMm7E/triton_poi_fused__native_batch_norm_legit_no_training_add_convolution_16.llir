; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, i32 %25) local_unnamed_addr !dbg !7 {
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %28 = shl i32 %27, 9, !dbg !11
  %29 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %30 = shl i32 %29, 2, !dbg !12
  %31 = and i32 %30, 508, !dbg !12
  %32 = or disjoint i32 %28, %31, !dbg !13
  %33 = sdiv i32 %32, 64, !dbg !14
  %34 = srem i32 %33, 256, !dbg !15
  %35 = sext i32 %32 to i64, !dbg !16
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !16
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !17
  %38 = sext i32 %34 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !18
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !26
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !28
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !30
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !31
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !31
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %9, i64 %38, !dbg !32
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !33
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !33
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !33
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !33
  %70 = getelementptr float, ptr addrspace(1) %10, i64 %38, !dbg !34
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !35
  %74 = bitcast i32 %73 to float, !dbg !35
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !35
  %78 = bitcast i32 %77 to float, !dbg !35
  %79 = getelementptr float, ptr addrspace(1) %11, i64 %38, !dbg !36
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !37
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !37
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !37
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !37
  %84 = getelementptr float, ptr addrspace(1) %12, i64 %38, !dbg !38
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !39
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !39
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !39
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !39
  %89 = getelementptr float, ptr addrspace(1) %13, i64 %38, !dbg !40
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !41
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !41
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !41
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !41
  %94 = getelementptr float, ptr addrspace(1) %14, i64 %38, !dbg !42
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !43
  %96 = bitcast i32 %95 to float, !dbg !43
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !43
  %98 = bitcast i32 %97 to float, !dbg !43
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !43
  %100 = bitcast i32 %99 to float, !dbg !43
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !43
  %102 = bitcast i32 %101 to float, !dbg !43
  %103 = getelementptr float, ptr addrspace(1) %15, i64 %38, !dbg !44
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !45
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !45
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !45
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !45
  %108 = getelementptr float, ptr addrspace(1) %16, i64 %38, !dbg !46
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !47
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !47
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !47
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !47
  %113 = getelementptr float, ptr addrspace(1) %17, i64 %38, !dbg !48
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !49
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !49
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !49
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !49
  %118 = getelementptr float, ptr addrspace(1) %18, i64 %38, !dbg !50
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !51
  %120 = bitcast i32 %119 to float, !dbg !51
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !51
  %122 = bitcast i32 %121 to float, !dbg !51
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !51
  %124 = bitcast i32 %123 to float, !dbg !51
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !51
  %126 = bitcast i32 %125 to float, !dbg !51
  %127 = getelementptr float, ptr addrspace(1) %19, i64 %38, !dbg !52
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !53
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !53
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !53
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !53
  %132 = getelementptr float, ptr addrspace(1) %20, i64 %38, !dbg !54
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #3, !dbg !55
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #3, !dbg !55
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #3, !dbg !55
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #3, !dbg !55
  %137 = getelementptr float, ptr addrspace(1) %21, i64 %38, !dbg !56
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #3, !dbg !57
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #3, !dbg !57
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #3, !dbg !57
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #3, !dbg !57
  %142 = getelementptr float, ptr addrspace(1) %22, i64 %38, !dbg !58
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !59
  %144 = bitcast i32 %143 to float, !dbg !59
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !59
  %146 = bitcast i32 %145 to float, !dbg !59
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !59
  %148 = bitcast i32 %147 to float, !dbg !59
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !59
  %150 = bitcast i32 %149 to float, !dbg !59
  %151 = getelementptr float, ptr addrspace(1) %23, i64 %38, !dbg !60
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !61
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !61
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !61
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !61
  %156 = getelementptr float, ptr addrspace(1) %24, i64 %38, !dbg !62
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !63
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !63
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !63
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !63
  %161 = fadd float %72, 0x3EE4F8B580000000, !dbg !64
  %162 = fadd float %74, 0x3EE4F8B580000000, !dbg !64
  %163 = fadd float %76, 0x3EE4F8B580000000, !dbg !64
  %164 = fadd float %78, 0x3EE4F8B580000000, !dbg !64
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %165, 0, !dbg !65
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %166, 0, !dbg !65
  br i1 %.not.i, label %172, label %167, !dbg !65

167:                                              ; preds = %26
  br i1 %.not1.i, label %170, label %168, !dbg !65

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

172:                                              ; preds = %26
  br i1 %.not1.i, label %175, label %173, !dbg !65

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %168, %170, %173, %175
  %.0.i = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !65
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %177, 0, !dbg !65
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %178, 0, !dbg !65
  br i1 %.not.i1, label %184, label %179, !dbg !65

179:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %182, label %180, !dbg !65

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %162) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %162) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

184:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %187, label %185, !dbg !65

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %162) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %162) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %180, %182, %185, %187
  %.0.i3 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !65
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i6 = icmp eq i32 %189, 0, !dbg !65
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i9 = icmp eq i32 %190, 0, !dbg !65
  br i1 %.not.i6, label %196, label %191, !dbg !65

191:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %194, label %192, !dbg !65

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

196:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %199, label %197, !dbg !65

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

__nv_sqrtf.exit10:                                ; preds = %192, %194, %197, %199
  %.0.i8 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !65
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i11 = icmp eq i32 %201, 0, !dbg !65
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i14 = icmp eq i32 %202, 0, !dbg !65
  br i1 %.not.i11, label %208, label %203, !dbg !65

203:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %206, label %204, !dbg !65

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

208:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %211, label %209, !dbg !65

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

__nv_sqrtf.exit15:                                ; preds = %204, %206, %209, %211
  %.0.i13 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !65
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !66
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !66
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !66
  %217 = fadd float %96, 0x3EE4F8B580000000, !dbg !67
  %218 = fadd float %98, 0x3EE4F8B580000000, !dbg !67
  %219 = fadd float %100, 0x3EE4F8B580000000, !dbg !67
  %220 = fadd float %102, 0x3EE4F8B580000000, !dbg !67
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i16 = icmp eq i32 %221, 0, !dbg !68
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i19 = icmp eq i32 %222, 0, !dbg !68
  br i1 %.not.i16, label %228, label %223, !dbg !68

223:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %226, label %224, !dbg !68

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

228:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %231, label %229, !dbg !68

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

__nv_sqrtf.exit20:                                ; preds = %224, %226, %229, %231
  %.0.i18 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !68
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i21 = icmp eq i32 %233, 0, !dbg !68
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i24 = icmp eq i32 %234, 0, !dbg !68
  br i1 %.not.i21, label %240, label %235, !dbg !68

235:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %238, label %236, !dbg !68

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

240:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %243, label %241, !dbg !68

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

__nv_sqrtf.exit25:                                ; preds = %236, %238, %241, %243
  %.0.i23 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !68
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i26 = icmp eq i32 %245, 0, !dbg !68
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i29 = icmp eq i32 %246, 0, !dbg !68
  br i1 %.not.i26, label %252, label %247, !dbg !68

247:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %250, label %248, !dbg !68

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #3, !dbg !68
  br label %__nv_sqrtf.exit30, !dbg !68

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #3, !dbg !68
  br label %__nv_sqrtf.exit30, !dbg !68

252:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %255, label %253, !dbg !68

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #3, !dbg !68
  br label %__nv_sqrtf.exit30, !dbg !68

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #3, !dbg !68
  br label %__nv_sqrtf.exit30, !dbg !68

__nv_sqrtf.exit30:                                ; preds = %248, %250, %253, %255
  %.0.i28 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !68
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i31 = icmp eq i32 %257, 0, !dbg !68
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i34 = icmp eq i32 %258, 0, !dbg !68
  br i1 %.not.i31, label %264, label %259, !dbg !68

259:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %262, label %260, !dbg !68

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !68
  br label %__nv_sqrtf.exit35, !dbg !68

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !68
  br label %__nv_sqrtf.exit35, !dbg !68

264:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %267, label %265, !dbg !68

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !68
  br label %__nv_sqrtf.exit35, !dbg !68

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !68
  br label %__nv_sqrtf.exit35, !dbg !68

__nv_sqrtf.exit35:                                ; preds = %260, %262, %265, %267
  %.0.i33 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !68
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !69
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !69
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !69
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !69
  %273 = fadd float %120, 0x3EE4F8B580000000, !dbg !70
  %274 = fadd float %122, 0x3EE4F8B580000000, !dbg !70
  %275 = fadd float %124, 0x3EE4F8B580000000, !dbg !70
  %276 = fadd float %126, 0x3EE4F8B580000000, !dbg !70
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i36 = icmp eq i32 %277, 0, !dbg !71
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i39 = icmp eq i32 %278, 0, !dbg !71
  br i1 %.not.i36, label %284, label %279, !dbg !71

279:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %282, label %280, !dbg !71

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %273) #3, !dbg !71
  br label %__nv_sqrtf.exit40, !dbg !71

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %273) #3, !dbg !71
  br label %__nv_sqrtf.exit40, !dbg !71

284:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %287, label %285, !dbg !71

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.f(float %273) #3, !dbg !71
  br label %__nv_sqrtf.exit40, !dbg !71

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.f(float %273) #3, !dbg !71
  br label %__nv_sqrtf.exit40, !dbg !71

__nv_sqrtf.exit40:                                ; preds = %280, %282, %285, %287
  %.0.i38 = phi float [ %281, %280 ], [ %283, %282 ], [ %286, %285 ], [ %288, %287 ], !dbg !71
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i41 = icmp eq i32 %289, 0, !dbg !71
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i44 = icmp eq i32 %290, 0, !dbg !71
  br i1 %.not.i41, label %296, label %291, !dbg !71

291:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %294, label %292, !dbg !71

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %274) #3, !dbg !71
  br label %__nv_sqrtf.exit45, !dbg !71

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %274) #3, !dbg !71
  br label %__nv_sqrtf.exit45, !dbg !71

296:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %299, label %297, !dbg !71

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.f(float %274) #3, !dbg !71
  br label %__nv_sqrtf.exit45, !dbg !71

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.f(float %274) #3, !dbg !71
  br label %__nv_sqrtf.exit45, !dbg !71

__nv_sqrtf.exit45:                                ; preds = %292, %294, %297, %299
  %.0.i43 = phi float [ %293, %292 ], [ %295, %294 ], [ %298, %297 ], [ %300, %299 ], !dbg !71
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i46 = icmp eq i32 %301, 0, !dbg !71
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i49 = icmp eq i32 %302, 0, !dbg !71
  br i1 %.not.i46, label %308, label %303, !dbg !71

303:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %306, label %304, !dbg !71

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %275) #3, !dbg !71
  br label %__nv_sqrtf.exit50, !dbg !71

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %275) #3, !dbg !71
  br label %__nv_sqrtf.exit50, !dbg !71

308:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %311, label %309, !dbg !71

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.f(float %275) #3, !dbg !71
  br label %__nv_sqrtf.exit50, !dbg !71

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.f(float %275) #3, !dbg !71
  br label %__nv_sqrtf.exit50, !dbg !71

__nv_sqrtf.exit50:                                ; preds = %304, %306, %309, %311
  %.0.i48 = phi float [ %305, %304 ], [ %307, %306 ], [ %310, %309 ], [ %312, %311 ], !dbg !71
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i51 = icmp eq i32 %313, 0, !dbg !71
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i54 = icmp eq i32 %314, 0, !dbg !71
  br i1 %.not.i51, label %320, label %315, !dbg !71

315:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %318, label %316, !dbg !71

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %276) #3, !dbg !71
  br label %__nv_sqrtf.exit55, !dbg !71

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %276) #3, !dbg !71
  br label %__nv_sqrtf.exit55, !dbg !71

320:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %323, label %321, !dbg !71

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.f(float %276) #3, !dbg !71
  br label %__nv_sqrtf.exit55, !dbg !71

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.f(float %276) #3, !dbg !71
  br label %__nv_sqrtf.exit55, !dbg !71

__nv_sqrtf.exit55:                                ; preds = %316, %318, %321, %323
  %.0.i53 = phi float [ %317, %316 ], [ %319, %318 ], [ %322, %321 ], [ %324, %323 ], !dbg !71
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !72
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !72
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !72
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !72
  %329 = fadd float %144, 0x3EE4F8B580000000, !dbg !73
  %330 = fadd float %146, 0x3EE4F8B580000000, !dbg !73
  %331 = fadd float %148, 0x3EE4F8B580000000, !dbg !73
  %332 = fadd float %150, 0x3EE4F8B580000000, !dbg !73
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i56 = icmp eq i32 %333, 0, !dbg !74
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i59 = icmp eq i32 %334, 0, !dbg !74
  br i1 %.not.i56, label %340, label %335, !dbg !74

335:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %338, label %336, !dbg !74

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %329) #3, !dbg !74
  br label %__nv_sqrtf.exit60, !dbg !74

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %329) #3, !dbg !74
  br label %__nv_sqrtf.exit60, !dbg !74

340:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %343, label %341, !dbg !74

341:                                              ; preds = %340
  %342 = tail call float @llvm.nvvm.sqrt.rn.f(float %329) #3, !dbg !74
  br label %__nv_sqrtf.exit60, !dbg !74

343:                                              ; preds = %340
  %344 = tail call float @llvm.nvvm.sqrt.approx.f(float %329) #3, !dbg !74
  br label %__nv_sqrtf.exit60, !dbg !74

__nv_sqrtf.exit60:                                ; preds = %336, %338, %341, %343
  %.0.i58 = phi float [ %337, %336 ], [ %339, %338 ], [ %342, %341 ], [ %344, %343 ], !dbg !74
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i61 = icmp eq i32 %345, 0, !dbg !74
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i64 = icmp eq i32 %346, 0, !dbg !74
  br i1 %.not.i61, label %352, label %347, !dbg !74

347:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %350, label %348, !dbg !74

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %330) #3, !dbg !74
  br label %__nv_sqrtf.exit65, !dbg !74

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %330) #3, !dbg !74
  br label %__nv_sqrtf.exit65, !dbg !74

352:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %355, label %353, !dbg !74

353:                                              ; preds = %352
  %354 = tail call float @llvm.nvvm.sqrt.rn.f(float %330) #3, !dbg !74
  br label %__nv_sqrtf.exit65, !dbg !74

355:                                              ; preds = %352
  %356 = tail call float @llvm.nvvm.sqrt.approx.f(float %330) #3, !dbg !74
  br label %__nv_sqrtf.exit65, !dbg !74

__nv_sqrtf.exit65:                                ; preds = %348, %350, %353, %355
  %.0.i63 = phi float [ %349, %348 ], [ %351, %350 ], [ %354, %353 ], [ %356, %355 ], !dbg !74
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i66 = icmp eq i32 %357, 0, !dbg !74
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i69 = icmp eq i32 %358, 0, !dbg !74
  br i1 %.not.i66, label %364, label %359, !dbg !74

359:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %362, label %360, !dbg !74

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #3, !dbg !74
  br label %__nv_sqrtf.exit70, !dbg !74

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #3, !dbg !74
  br label %__nv_sqrtf.exit70, !dbg !74

364:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %367, label %365, !dbg !74

365:                                              ; preds = %364
  %366 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #3, !dbg !74
  br label %__nv_sqrtf.exit70, !dbg !74

367:                                              ; preds = %364
  %368 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #3, !dbg !74
  br label %__nv_sqrtf.exit70, !dbg !74

__nv_sqrtf.exit70:                                ; preds = %360, %362, %365, %367
  %.0.i68 = phi float [ %361, %360 ], [ %363, %362 ], [ %366, %365 ], [ %368, %367 ], !dbg !74
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i71 = icmp eq i32 %369, 0, !dbg !74
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i74 = icmp eq i32 %370, 0, !dbg !74
  br i1 %.not.i71, label %376, label %371, !dbg !74

371:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %374, label %372, !dbg !74

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #3, !dbg !74
  br label %__nv_sqrtf.exit75, !dbg !74

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #3, !dbg !74
  br label %__nv_sqrtf.exit75, !dbg !74

376:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %379, label %377, !dbg !74

377:                                              ; preds = %376
  %378 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #3, !dbg !74
  br label %__nv_sqrtf.exit75, !dbg !74

379:                                              ; preds = %376
  %380 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #3, !dbg !74
  br label %__nv_sqrtf.exit75, !dbg !74

__nv_sqrtf.exit75:                                ; preds = %372, %374, %377, %379
  %.0.i73 = phi float [ %373, %372 ], [ %375, %374 ], [ %378, %377 ], [ %380, %379 ], !dbg !74
  %381 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !29
  %382 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !27
  %383 = insertelement <2 x i32> %382, i32 %64, i64 1, !dbg !27
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !27
  %385 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !49
  %386 = insertelement <2 x i32> %385, i32 %141, i64 1, !dbg !49
  %387 = bitcast <2 x i32> %386 to <2 x float>, !dbg !49
  %388 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !29
  %389 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !27
  %390 = insertelement <2 x i32> %389, i32 %63, i64 1, !dbg !27
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !27
  %392 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !49
  %393 = insertelement <2 x i32> %392, i32 %140, i64 1, !dbg !49
  %394 = bitcast <2 x i32> %393 to <2 x float>, !dbg !49
  %395 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !29
  %396 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !27
  %397 = insertelement <2 x i32> %396, i32 %62, i64 1, !dbg !27
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !27
  %399 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !49
  %400 = insertelement <2 x i32> %399, i32 %139, i64 1, !dbg !49
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !49
  %402 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !29
  %403 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !27
  %404 = insertelement <2 x i32> %403, i32 %61, i64 1, !dbg !27
  %405 = bitcast <2 x i32> %404 to <2 x float>, !dbg !27
  %406 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !49
  %407 = insertelement <2 x i32> %406, i32 %138, i64 1, !dbg !49
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !49
  %409 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !17
  %410 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !19
  %411 = insertelement <2 x i32> %410, i32 %50, i64 1, !dbg !19
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !19
  %413 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !33
  %414 = insertelement <2 x i32> %413, i32 %93, i64 1, !dbg !33
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !33
  %416 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !37
  %417 = insertelement <2 x i32> %416, i32 %107, i64 1, !dbg !37
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !37
  %419 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !39
  %420 = insertelement <2 x i32> %419, i32 %112, i64 1, !dbg !39
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !39
  %422 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %423 = insertelement <2 x i32> poison, i32 %409, i64 0, !dbg !17
  %424 = insertelement <2 x i32> %423, i32 %422, i64 1, !dbg !17
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !17
  %426 = fadd <2 x float> %425, %412, !dbg !75
  %427 = fsub <2 x float> %426, %415, !dbg !76
  %428 = insertelement <2 x float> poison, float %216, i64 0, !dbg !77
  %429 = insertelement <2 x float> %428, float %272, i64 1, !dbg !77
  %430 = fmul <2 x float> %427, %429, !dbg !77
  %431 = fmul <2 x float> %430, %418, !dbg !78
  %432 = fadd <2 x float> %431, %421, !dbg !79
  %shift = shufflevector <2 x float> %432, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %433 = fadd <2 x float> %432, %shift, !dbg !80
  %434 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %435 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !53
  %436 = insertelement <2 x i32> %435, i32 %155, i64 1, !dbg !53
  %437 = bitcast <2 x i32> %436 to <2 x float>, !dbg !53
  %438 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !55
  %439 = insertelement <2 x i32> %438, i32 %160, i64 1, !dbg !55
  %440 = bitcast <2 x i32> %439 to <2 x float>, !dbg !55
  %441 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !17
  %442 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !19
  %443 = insertelement <2 x i32> %442, i32 %49, i64 1, !dbg !19
  %444 = bitcast <2 x i32> %443 to <2 x float>, !dbg !19
  %445 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !33
  %446 = insertelement <2 x i32> %445, i32 %92, i64 1, !dbg !33
  %447 = bitcast <2 x i32> %446 to <2 x float>, !dbg !33
  %448 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !37
  %449 = insertelement <2 x i32> %448, i32 %106, i64 1, !dbg !37
  %450 = bitcast <2 x i32> %449 to <2 x float>, !dbg !37
  %451 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !39
  %452 = insertelement <2 x i32> %451, i32 %111, i64 1, !dbg !39
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !39
  %454 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %455 = insertelement <2 x i32> poison, i32 %441, i64 0, !dbg !17
  %456 = insertelement <2 x i32> %455, i32 %454, i64 1, !dbg !17
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !17
  %458 = fadd <2 x float> %457, %444, !dbg !75
  %459 = fsub <2 x float> %458, %447, !dbg !76
  %460 = insertelement <2 x float> poison, float %215, i64 0, !dbg !77
  %461 = insertelement <2 x float> %460, float %271, i64 1, !dbg !77
  %462 = fmul <2 x float> %459, %461, !dbg !77
  %463 = fmul <2 x float> %462, %450, !dbg !78
  %464 = fadd <2 x float> %463, %453, !dbg !79
  %shift76 = shufflevector <2 x float> %464, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %465 = fadd <2 x float> %464, %shift76, !dbg !80
  %466 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %467 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !53
  %468 = insertelement <2 x i32> %467, i32 %154, i64 1, !dbg !53
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !53
  %470 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !55
  %471 = insertelement <2 x i32> %470, i32 %159, i64 1, !dbg !55
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !55
  %473 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !17
  %474 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !19
  %475 = insertelement <2 x i32> %474, i32 %48, i64 1, !dbg !19
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !19
  %477 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !33
  %478 = insertelement <2 x i32> %477, i32 %91, i64 1, !dbg !33
  %479 = bitcast <2 x i32> %478 to <2 x float>, !dbg !33
  %480 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !37
  %481 = insertelement <2 x i32> %480, i32 %105, i64 1, !dbg !37
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !37
  %483 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !39
  %484 = insertelement <2 x i32> %483, i32 %110, i64 1, !dbg !39
  %485 = bitcast <2 x i32> %484 to <2 x float>, !dbg !39
  %486 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %487 = insertelement <2 x i32> poison, i32 %473, i64 0, !dbg !17
  %488 = insertelement <2 x i32> %487, i32 %486, i64 1, !dbg !17
  %489 = bitcast <2 x i32> %488 to <2 x float>, !dbg !17
  %490 = fadd <2 x float> %489, %476, !dbg !75
  %491 = fsub <2 x float> %490, %479, !dbg !76
  %492 = insertelement <2 x float> poison, float %214, i64 0, !dbg !77
  %493 = insertelement <2 x float> %492, float %270, i64 1, !dbg !77
  %494 = fmul <2 x float> %491, %493, !dbg !77
  %495 = fmul <2 x float> %494, %482, !dbg !78
  %496 = fadd <2 x float> %495, %485, !dbg !79
  %shift77 = shufflevector <2 x float> %496, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %497 = fadd <2 x float> %496, %shift77, !dbg !80
  %498 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %499 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !53
  %500 = insertelement <2 x i32> %499, i32 %153, i64 1, !dbg !53
  %501 = bitcast <2 x i32> %500 to <2 x float>, !dbg !53
  %502 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !55
  %503 = insertelement <2 x i32> %502, i32 %158, i64 1, !dbg !55
  %504 = bitcast <2 x i32> %503 to <2 x float>, !dbg !55
  %505 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !17
  %506 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %507 = insertelement <2 x i32> %506, i32 %47, i64 1, !dbg !19
  %508 = bitcast <2 x i32> %507 to <2 x float>, !dbg !19
  %509 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !33
  %510 = insertelement <2 x i32> %509, i32 %90, i64 1, !dbg !33
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !33
  %512 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !37
  %513 = insertelement <2 x i32> %512, i32 %104, i64 1, !dbg !37
  %514 = bitcast <2 x i32> %513 to <2 x float>, !dbg !37
  %515 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !39
  %516 = insertelement <2 x i32> %515, i32 %109, i64 1, !dbg !39
  %517 = bitcast <2 x i32> %516 to <2 x float>, !dbg !39
  %518 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %519 = insertelement <2 x i32> poison, i32 %505, i64 0, !dbg !17
  %520 = insertelement <2 x i32> %519, i32 %518, i64 1, !dbg !17
  %521 = bitcast <2 x i32> %520 to <2 x float>, !dbg !17
  %522 = fadd <2 x float> %521, %508, !dbg !75
  %523 = fsub <2 x float> %522, %511, !dbg !76
  %524 = insertelement <2 x float> poison, float %213, i64 0, !dbg !77
  %525 = insertelement <2 x float> %524, float %269, i64 1, !dbg !77
  %526 = fmul <2 x float> %523, %525, !dbg !77
  %527 = fmul <2 x float> %526, %514, !dbg !78
  %528 = fadd <2 x float> %527, %517, !dbg !79
  %shift78 = shufflevector <2 x float> %528, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %529 = fadd <2 x float> %528, %shift78, !dbg !80
  %530 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %531 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !53
  %532 = insertelement <2 x i32> %531, i32 %152, i64 1, !dbg !53
  %533 = bitcast <2 x i32> %532 to <2 x float>, !dbg !53
  %534 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !55
  %535 = insertelement <2 x i32> %534, i32 %157, i64 1, !dbg !55
  %536 = bitcast <2 x i32> %535 to <2 x float>, !dbg !55
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !81
  %538 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !81
  %539 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !81
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !81
  %541 = insertelement <2 x i32> poison, i32 %530, i64 0, !dbg !25
  %542 = insertelement <2 x i32> %541, i32 %402, i64 1, !dbg !25
  %543 = bitcast <2 x i32> %542 to <2 x float>, !dbg !25
  %544 = fadd <2 x float> %543, %405, !dbg !82
  %545 = fsub <2 x float> %544, %408, !dbg !83
  %546 = insertelement <2 x float> poison, float %325, i64 0, !dbg !84
  %547 = insertelement <2 x float> %546, float %537, i64 1, !dbg !84
  %548 = fmul <2 x float> %545, %547, !dbg !84
  %549 = fmul <2 x float> %548, %533, !dbg !85
  %550 = fadd <2 x float> %549, %536, !dbg !86
  %551 = fadd <2 x float> %529, %550, !dbg !87
  %552 = insertelement <2 x i32> poison, i32 %498, i64 0, !dbg !25
  %553 = insertelement <2 x i32> %552, i32 %395, i64 1, !dbg !25
  %554 = bitcast <2 x i32> %553 to <2 x float>, !dbg !25
  %555 = fadd <2 x float> %554, %398, !dbg !82
  %556 = fsub <2 x float> %555, %401, !dbg !83
  %557 = insertelement <2 x float> poison, float %326, i64 0, !dbg !84
  %558 = insertelement <2 x float> %557, float %538, i64 1, !dbg !84
  %559 = fmul <2 x float> %556, %558, !dbg !84
  %560 = fmul <2 x float> %559, %501, !dbg !85
  %561 = fadd <2 x float> %560, %504, !dbg !86
  %562 = fadd <2 x float> %497, %561, !dbg !87
  %563 = insertelement <2 x i32> poison, i32 %466, i64 0, !dbg !25
  %564 = insertelement <2 x i32> %563, i32 %388, i64 1, !dbg !25
  %565 = bitcast <2 x i32> %564 to <2 x float>, !dbg !25
  %566 = fadd <2 x float> %565, %391, !dbg !82
  %567 = fsub <2 x float> %566, %394, !dbg !83
  %568 = insertelement <2 x float> poison, float %327, i64 0, !dbg !84
  %569 = insertelement <2 x float> %568, float %539, i64 1, !dbg !84
  %570 = fmul <2 x float> %567, %569, !dbg !84
  %571 = fmul <2 x float> %570, %469, !dbg !85
  %572 = fadd <2 x float> %571, %472, !dbg !86
  %573 = fadd <2 x float> %465, %572, !dbg !87
  %574 = insertelement <2 x i32> poison, i32 %434, i64 0, !dbg !25
  %575 = insertelement <2 x i32> %574, i32 %381, i64 1, !dbg !25
  %576 = bitcast <2 x i32> %575 to <2 x float>, !dbg !25
  %577 = fadd <2 x float> %576, %384, !dbg !82
  %578 = fsub <2 x float> %577, %387, !dbg !83
  %579 = insertelement <2 x float> poison, float %328, i64 0, !dbg !84
  %580 = insertelement <2 x float> %579, float %540, i64 1, !dbg !84
  %581 = fmul <2 x float> %578, %580, !dbg !84
  %582 = fmul <2 x float> %581, %437, !dbg !85
  %583 = fadd <2 x float> %582, %440, !dbg !86
  %584 = fadd <2 x float> %433, %583, !dbg !87
  %shift79 = shufflevector <2 x float> %550, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !88
  %585 = fadd <2 x float> %551, %shift79, !dbg !88
  %shift80 = shufflevector <2 x float> %561, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !88
  %586 = fadd <2 x float> %562, %shift80, !dbg !88
  %shift81 = shufflevector <2 x float> %572, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !88
  %587 = fadd <2 x float> %573, %shift81, !dbg !88
  %shift82 = shufflevector <2 x float> %583, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !88
  %588 = fadd <2 x float> %584, %shift82, !dbg !88
  %bc = bitcast <2 x float> %522 to <2 x i32>, !dbg !89
  %589 = extractelement <2 x i32> %bc, i64 0, !dbg !89
  %bc83 = bitcast <2 x float> %490 to <2 x i32>, !dbg !89
  %590 = extractelement <2 x i32> %bc83, i64 0, !dbg !89
  %bc84 = bitcast <2 x float> %458 to <2 x i32>, !dbg !89
  %591 = extractelement <2 x i32> %bc84, i64 0, !dbg !89
  %bc85 = bitcast <2 x float> %426 to <2 x i32>, !dbg !89
  %592 = extractelement <2 x i32> %bc85, i64 0, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %589, i32 %590, i32 %591, i32 %592, ptr addrspace(1) %36, i1 true) #3, !dbg !89
  %bc86 = bitcast <2 x float> %522 to <2 x i32>, !dbg !90
  %593 = extractelement <2 x i32> %bc86, i64 1, !dbg !90
  %bc87 = bitcast <2 x float> %490 to <2 x i32>, !dbg !90
  %594 = extractelement <2 x i32> %bc87, i64 1, !dbg !90
  %bc88 = bitcast <2 x float> %458 to <2 x i32>, !dbg !90
  %595 = extractelement <2 x i32> %bc88, i64 1, !dbg !90
  %bc89 = bitcast <2 x float> %426 to <2 x i32>, !dbg !90
  %596 = extractelement <2 x i32> %bc89, i64 1, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %593, i32 %594, i32 %595, i32 %596, ptr addrspace(1) %44, i1 true) #3, !dbg !90
  %bc90 = bitcast <2 x float> %544 to <2 x i32>, !dbg !91
  %597 = extractelement <2 x i32> %bc90, i64 0, !dbg !91
  %bc91 = bitcast <2 x float> %555 to <2 x i32>, !dbg !91
  %598 = extractelement <2 x i32> %bc91, i64 0, !dbg !91
  %bc92 = bitcast <2 x float> %566 to <2 x i32>, !dbg !91
  %599 = extractelement <2 x i32> %bc92, i64 0, !dbg !91
  %bc93 = bitcast <2 x float> %577 to <2 x i32>, !dbg !91
  %600 = extractelement <2 x i32> %bc93, i64 0, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %597, i32 %598, i32 %599, i32 %600, ptr addrspace(1) %51, i1 true) #3, !dbg !91
  %bc94 = bitcast <2 x float> %544 to <2 x i32>, !dbg !92
  %601 = extractelement <2 x i32> %bc94, i64 1, !dbg !92
  %bc95 = bitcast <2 x float> %555 to <2 x i32>, !dbg !92
  %602 = extractelement <2 x i32> %bc95, i64 1, !dbg !92
  %bc96 = bitcast <2 x float> %566 to <2 x i32>, !dbg !92
  %603 = extractelement <2 x i32> %bc96, i64 1, !dbg !92
  %bc97 = bitcast <2 x float> %577 to <2 x i32>, !dbg !92
  %604 = extractelement <2 x i32> %bc97, i64 1, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %601, i32 %602, i32 %603, i32 %604, ptr addrspace(1) %58, i1 true) #3, !dbg !92
  %605 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !93
  %bc98 = bitcast <2 x float> %585 to <2 x i32>, !dbg !94
  %606 = extractelement <2 x i32> %bc98, i64 0, !dbg !94
  %bc99 = bitcast <2 x float> %586 to <2 x i32>, !dbg !94
  %607 = extractelement <2 x i32> %bc99, i64 0, !dbg !94
  %bc100 = bitcast <2 x float> %587 to <2 x i32>, !dbg !94
  %608 = extractelement <2 x i32> %bc100, i64 0, !dbg !94
  %bc101 = bitcast <2 x float> %588 to <2 x i32>, !dbg !94
  %609 = extractelement <2 x i32> %bc101, i64 0, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %606, i32 %607, i32 %608, i32 %609, ptr addrspace(1) %605, i1 true) #3, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c45ur3xdil4qugl637slk4uaccxk72nsg4cgzxccwiybr3nzrxcr.py", directory: "inductor_cache/45")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 34, scope: !7)
!25 = !DILocation(line: 30, column: 39, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 34, scope: !7)
!29 = !DILocation(line: 32, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 38, column: 31, scope: !7)
!41 = !DILocation(line: 38, column: 36, scope: !7)
!42 = !DILocation(line: 39, column: 31, scope: !7)
!43 = !DILocation(line: 39, column: 36, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 42, column: 32, scope: !7)
!49 = !DILocation(line: 42, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 32, scope: !7)
!51 = !DILocation(line: 43, column: 37, scope: !7)
!52 = !DILocation(line: 44, column: 32, scope: !7)
!53 = !DILocation(line: 44, column: 37, scope: !7)
!54 = !DILocation(line: 45, column: 32, scope: !7)
!55 = !DILocation(line: 45, column: 37, scope: !7)
!56 = !DILocation(line: 46, column: 32, scope: !7)
!57 = !DILocation(line: 46, column: 37, scope: !7)
!58 = !DILocation(line: 47, column: 32, scope: !7)
!59 = !DILocation(line: 47, column: 37, scope: !7)
!60 = !DILocation(line: 48, column: 32, scope: !7)
!61 = !DILocation(line: 48, column: 37, scope: !7)
!62 = !DILocation(line: 49, column: 32, scope: !7)
!63 = !DILocation(line: 49, column: 37, scope: !7)
!64 = !DILocation(line: 56, column: 20, scope: !7)
!65 = !DILocation(line: 57, column: 27, scope: !7)
!66 = !DILocation(line: 59, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 27, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 75, column: 20, scope: !7)
!71 = !DILocation(line: 76, column: 27, scope: !7)
!72 = !DILocation(line: 77, column: 20, scope: !7)
!73 = !DILocation(line: 84, column: 20, scope: !7)
!74 = !DILocation(line: 85, column: 27, scope: !7)
!75 = !DILocation(line: 50, column: 18, scope: !7)
!76 = !DILocation(line: 54, column: 19, scope: !7)
!77 = !DILocation(line: 62, column: 20, scope: !7)
!78 = !DILocation(line: 63, column: 20, scope: !7)
!79 = !DILocation(line: 64, column: 20, scope: !7)
!80 = !DILocation(line: 73, column: 20, scope: !7)
!81 = !DILocation(line: 86, column: 20, scope: !7)
!82 = !DILocation(line: 52, column: 18, scope: !7)
!83 = !DILocation(line: 74, column: 19, scope: !7)
!84 = !DILocation(line: 79, column: 20, scope: !7)
!85 = !DILocation(line: 80, column: 20, scope: !7)
!86 = !DILocation(line: 81, column: 20, scope: !7)
!87 = !DILocation(line: 82, column: 20, scope: !7)
!88 = !DILocation(line: 91, column: 20, scope: !7)
!89 = !DILocation(line: 92, column: 39, scope: !7)
!90 = !DILocation(line: 93, column: 39, scope: !7)
!91 = !DILocation(line: 94, column: 39, scope: !7)
!92 = !DILocation(line: 95, column: 40, scope: !7)
!93 = !DILocation(line: 96, column: 28, scope: !7)
!94 = !DILocation(line: 96, column: 40, scope: !7)
!95 = !DILocation(line: 96, column: 4, scope: !7)
