; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = shl i32 %12, 2, !dbg !12
  %17 = and i32 %16, 28, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = icmp slt i32 %19, 64, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 5, !dbg !16
  %24 = or disjoint i32 %23, %17, !dbg !17
  %25 = icmp slt i32 %24, 512, !dbg !18
  %26 = shl i32 %18, 9, !dbg !19
  %27 = shl i32 %19, 9, !dbg !19
  %28 = add i32 %24, %26, !dbg !20
  %29 = add i32 %24, %27, !dbg !20
  %30 = sext i32 %28 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = and i1 %20, %25, !dbg !22
  %35 = and i1 %21, %25, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %34) #4, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %35) #4, !dbg !23
  %38 = sext i32 %24 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %25) #4, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %25) #4, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %25) #4, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !30
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %25) #4, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !32
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %34) #4, !dbg !33
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %35) #4, !dbg !33
  %59 = fadd float %47, 0x3EE4F8B580000000, !dbg !34
  %60 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %61 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %62 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %63, 0, !dbg !35
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %64, 0, !dbg !35
  br i1 %.not.i, label %70, label %65, !dbg !35

65:                                               ; preds = %9
  br i1 %.not1.i, label %68, label %66, !dbg !35

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

70:                                               ; preds = %9
  br i1 %.not1.i, label %73, label %71, !dbg !35

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !35
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i15 = icmp eq i32 %75, 0, !dbg !35
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i18 = icmp eq i32 %76, 0, !dbg !35
  br i1 %.not.i15, label %82, label %77, !dbg !35

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %80, label %78, !dbg !35

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %85, label %83, !dbg !35

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

__nv_sqrtf.exit19:                                ; preds = %78, %80, %83, %85
  %.0.i17 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !35
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i20 = icmp eq i32 %87, 0, !dbg !35
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i23 = icmp eq i32 %88, 0, !dbg !35
  br i1 %.not.i20, label %94, label %89, !dbg !35

89:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %92, label %90, !dbg !35

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

94:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %97, label %95, !dbg !35

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

__nv_sqrtf.exit24:                                ; preds = %90, %92, %95, %97
  %.0.i22 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !35
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i25 = icmp eq i32 %99, 0, !dbg !35
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i28 = icmp eq i32 %100, 0, !dbg !35
  br i1 %.not.i25, label %106, label %101, !dbg !35

101:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %104, label %102, !dbg !35

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

106:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %109, label %107, !dbg !35

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

__nv_sqrtf.exit29:                                ; preds = %102, %104, %107, %109
  %.0.i27 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !35
  %111 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %114 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %116 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %118 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %120 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %121 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %122 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %123 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !33
  %124 = bitcast i32 %123 to float, !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !33
  %126 = bitcast i32 %125 to float, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !33
  %128 = bitcast i32 %127 to float, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !33
  %130 = bitcast i32 %129 to float, !dbg !33
  %131 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !33
  %132 = bitcast i32 %131 to float, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !33
  %134 = bitcast i32 %133 to float, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !33
  %136 = bitcast i32 %135 to float, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !33
  %138 = bitcast i32 %137 to float, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !31
  %140 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !29
  %144 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !29
  %145 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !29
  %146 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !29
  %147 = or disjoint i32 %23, %15, !dbg !17
  %148 = icmp slt i32 %147, 512, !dbg !18
  %149 = or disjoint i32 %11, %17, !dbg !13
  %150 = icmp slt i32 %149, 64, !dbg !14
  %151 = and i1 %150, %148, !dbg !22
  %152 = or disjoint i32 %23, %14, !dbg !17
  %153 = icmp slt i32 %152, 512, !dbg !18
  %154 = and i1 %150, %153, !dbg !22
  %.frozen = freeze i32 %149, !dbg !36
  %155 = sdiv i32 %.frozen, 16, !dbg !36
  %156 = mul i32 %155, 16, !dbg !37
  %.decomposed = sub i32 %.frozen, %156, !dbg !37
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !38
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !38
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !38
  %161 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !25
  %162 = insertelement <4 x i32> %161, i32 %114, i64 1, !dbg !25
  %163 = insertelement <4 x i32> %162, i32 %116, i64 2, !dbg !25
  %164 = insertelement <4 x i32> %163, i32 %118, i64 3, !dbg !25
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !25
  %166 = shufflevector <4 x float> %165, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %167 = insertelement <8 x i32> poison, i32 %111, i64 0, !dbg !23
  %168 = insertelement <8 x i32> %167, i32 %113, i64 1, !dbg !23
  %169 = insertelement <8 x i32> %168, i32 %115, i64 2, !dbg !23
  %170 = insertelement <8 x i32> %169, i32 %117, i64 3, !dbg !23
  %171 = insertelement <8 x i32> %170, i32 %119, i64 4, !dbg !23
  %172 = insertelement <8 x i32> %171, i32 %120, i64 5, !dbg !23
  %173 = insertelement <8 x i32> %172, i32 %121, i64 6, !dbg !23
  %174 = insertelement <8 x i32> %173, i32 %122, i64 7, !dbg !23
  %175 = bitcast <8 x i32> %174 to <8 x float>, !dbg !23
  %176 = fsub <8 x float> %175, %166, !dbg !39
  %177 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !31
  %178 = insertelement <4 x i32> %177, i32 %140, i64 1, !dbg !31
  %179 = insertelement <4 x i32> %178, i32 %141, i64 2, !dbg !31
  %180 = insertelement <4 x i32> %179, i32 %142, i64 3, !dbg !31
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !31
  %182 = shufflevector <4 x float> %181, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %183 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !29
  %184 = insertelement <4 x i32> %183, i32 %144, i64 1, !dbg !29
  %185 = insertelement <4 x i32> %184, i32 %145, i64 2, !dbg !29
  %186 = insertelement <4 x i32> %185, i32 %146, i64 3, !dbg !29
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !29
  %188 = shufflevector <4 x float> %187, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %189 = insertelement <8 x float> poison, float %160, i64 0, !dbg !40
  %190 = insertelement <8 x float> %189, float %159, i64 1, !dbg !40
  %191 = insertelement <8 x float> %190, float %158, i64 2, !dbg !40
  %192 = insertelement <8 x float> %191, float %157, i64 3, !dbg !40
  %193 = shufflevector <8 x float> %192, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %194 = fmul <8 x float> %176, %193, !dbg !40
  %195 = fmul <8 x float> %194, %188, !dbg !41
  %196 = fadd <8 x float> %195, %182, !dbg !42
  %197 = fcmp ogt <8 x float> %196, zeroinitializer, !dbg !43
  %198 = extractelement <8 x float> %196, i64 7, !dbg !44
  %199 = fmul float %198, 0x3FB99999A0000000, !dbg !45
  %200 = extractelement <8 x float> %196, i64 6, !dbg !44
  %201 = fmul float %200, 0x3FB99999A0000000, !dbg !45
  %202 = extractelement <8 x float> %196, i64 5, !dbg !44
  %203 = fmul float %202, 0x3FB99999A0000000, !dbg !45
  %204 = extractelement <8 x float> %196, i64 4, !dbg !44
  %205 = fmul float %204, 0x3FB99999A0000000, !dbg !45
  %206 = extractelement <8 x float> %196, i64 3, !dbg !44
  %207 = fmul float %206, 0x3FB99999A0000000, !dbg !45
  %208 = extractelement <8 x float> %196, i64 2, !dbg !44
  %209 = fmul float %208, 0x3FB99999A0000000, !dbg !45
  %210 = extractelement <8 x float> %196, i64 1, !dbg !44
  %211 = fmul float %210, 0x3FB99999A0000000, !dbg !45
  %212 = extractelement <8 x float> %196, i64 0, !dbg !44
  %213 = fmul float %212, 0x3FB99999A0000000, !dbg !45
  %214 = extractelement <8 x i1> %197, i64 7, !dbg !44
  %215 = select i1 %214, float %198, float %199, !dbg !44
  %216 = extractelement <8 x i1> %197, i64 6, !dbg !44
  %217 = select i1 %216, float %200, float %201, !dbg !44
  %218 = extractelement <8 x i1> %197, i64 5, !dbg !44
  %219 = select i1 %218, float %202, float %203, !dbg !44
  %220 = extractelement <8 x i1> %197, i64 4, !dbg !44
  %221 = select i1 %220, float %204, float %205, !dbg !44
  %222 = extractelement <8 x i1> %197, i64 3, !dbg !44
  %223 = select i1 %222, float %206, float %207, !dbg !44
  %224 = extractelement <8 x i1> %197, i64 2, !dbg !44
  %225 = select i1 %224, float %208, float %209, !dbg !44
  %226 = extractelement <8 x i1> %197, i64 1, !dbg !44
  %227 = select i1 %226, float %210, float %211, !dbg !44
  %228 = extractelement <8 x i1> %197, i64 0, !dbg !44
  %229 = select i1 %228, float %212, float %213, !dbg !44
  %230 = fadd float %215, %138, !dbg !46
  %231 = fadd float %217, %136, !dbg !46
  %232 = fadd float %219, %134, !dbg !46
  %233 = fadd float %221, %132, !dbg !46
  %234 = fadd float %223, %130, !dbg !46
  %235 = fadd float %225, %128, !dbg !46
  %236 = fadd float %227, %126, !dbg !46
  %237 = fadd float %229, %124, !dbg !46
  %238 = shl i32 %152, 4, !dbg !47
  %239 = shl i32 %147, 4, !dbg !47
  %240 = shl i32 %155, 13, !dbg !48
  %241 = add i32 %240, %.decomposed, !dbg !49
  %242 = add i32 %241, %238, !dbg !50
  %243 = add i32 %241, %239, !dbg !50
  %244 = sext i32 %242 to i64, !dbg !51
  %245 = getelementptr float, ptr addrspace(1) %6, i64 %244, !dbg !51
  %246 = sext i32 %243 to i64, !dbg !51
  %247 = getelementptr float, ptr addrspace(1) %6, i64 %246, !dbg !51
  %248 = shl i32 %12, 7, !dbg !52
  %249 = and i32 %248, 896, !dbg !52
  %250 = or disjoint i32 %249, %14, !dbg !52
  %251 = and i32 %16, 508, !dbg !52
  %252 = lshr exact i32 %249, 3, !dbg !52
  %253 = or disjoint i32 %252, %250, !dbg !52
  %254 = zext nneg i32 %253 to i64, !dbg !52
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %254, !dbg !52
  %256 = bitcast float %230 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !52
  %257 = or disjoint i32 %250, 32, !dbg !52
  %258 = lshr i32 %257, 3, !dbg !52
  %259 = and i32 %258, 116, !dbg !52
  %260 = add nuw nsw i32 %259, %257, !dbg !52
  %261 = zext nneg i32 %260 to i64, !dbg !52
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %261, !dbg !52
  %263 = bitcast float %231 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !52
  %264 = or disjoint i32 %250, 64, !dbg !52
  %265 = lshr i32 %264, 3, !dbg !52
  %266 = and i32 %265, 120, !dbg !52
  %267 = add nuw nsw i32 %266, %264, !dbg !52
  %268 = zext nneg i32 %267 to i64, !dbg !52
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %268, !dbg !52
  %270 = bitcast float %232 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !52
  %271 = or disjoint i32 %250, 96, !dbg !52
  %272 = lshr i32 %271, 3, !dbg !52
  %273 = and i32 %272, 124, !dbg !52
  %274 = add nuw nsw i32 %273, %271, !dbg !52
  %275 = zext nneg i32 %274 to i64, !dbg !52
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %275, !dbg !52
  %277 = bitcast float %233 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !52
  %278 = or disjoint i32 %250, 16, !dbg !52
  %279 = add nuw nsw i32 %278, %252, !dbg !52
  %280 = zext nneg i32 %279 to i64, !dbg !52
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %280, !dbg !52
  %282 = bitcast float %234 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #4, !dbg !52
  %283 = or disjoint i32 %250, 48, !dbg !52
  %284 = lshr i32 %283, 3, !dbg !52
  %285 = and i32 %284, 116, !dbg !52
  %286 = add nuw nsw i32 %285, %283, !dbg !52
  %287 = zext nneg i32 %286 to i64, !dbg !52
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %287, !dbg !52
  %289 = bitcast float %235 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !52
  %290 = or disjoint i32 %250, 80, !dbg !52
  %291 = lshr i32 %290, 3, !dbg !52
  %292 = and i32 %291, 120, !dbg !52
  %293 = add nuw nsw i32 %292, %290, !dbg !52
  %294 = zext nneg i32 %293 to i64, !dbg !52
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %294, !dbg !52
  %296 = bitcast float %236 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 true) #4, !dbg !52
  %297 = or disjoint i32 %250, 112, !dbg !52
  %298 = lshr i32 %297, 3, !dbg !52
  %299 = and i32 %298, 124, !dbg !52
  %300 = add nuw nsw i32 %299, %297, !dbg !52
  %301 = zext nneg i32 %300 to i64, !dbg !52
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %301, !dbg !52
  %303 = bitcast float %237 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %304 = lshr i32 %16, 3, !dbg !52
  %305 = and i32 %304, 60, !dbg !52
  %306 = add nuw nsw i32 %305, %251, !dbg !52
  %307 = zext nneg i32 %306 to i64, !dbg !52
  %308 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %307, !dbg !52
  %309 = or disjoint i32 %251, 512, !dbg !52
  %310 = lshr i32 %309, 3, !dbg !52
  %311 = and i32 %310, 124, !dbg !52
  %312 = add nuw nsw i32 %311, %309, !dbg !52
  %313 = zext nneg i32 %312 to i64, !dbg !52
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %313, !dbg !52
  %315 = load <4 x i32>, ptr addrspace(3) %314, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %308, align 16, !dbg !52
  %316 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 4, !dbg !52
  %.extract8 = load i32, ptr addrspace(3) %316, align 4, !dbg !52
  %317 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 8, !dbg !52
  %.extract9 = load i32, ptr addrspace(3) %317, align 8, !dbg !52
  %318 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 12, !dbg !52
  %.extract10 = load i32, ptr addrspace(3) %318, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %245, i1 %154) #4, !dbg !52
  %.extract11 = extractelement <4 x i32> %315, i64 0, !dbg !52
  %.extract12 = extractelement <4 x i32> %315, i64 1, !dbg !52
  %.extract13 = extractelement <4 x i32> %315, i64 2, !dbg !52
  %.extract14 = extractelement <4 x i32> %315, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %247, i1 %151) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckewedlycibszarnear7noymo4onxfxh45syg4qtydg3cpflk25w.py", directory: "inductor_cache/ke")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 45, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 46, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 35, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 33, scope: !7)
!48 = !DILocation(line: 55, column: 43, scope: !7)
!49 = !DILocation(line: 55, column: 30, scope: !7)
!50 = !DILocation(line: 55, column: 38, scope: !7)
!51 = !DILocation(line: 55, column: 25, scope: !7)
!52 = !DILocation(line: 55, column: 55, scope: !7)
!53 = !DILocation(line: 55, column: 4, scope: !7)
