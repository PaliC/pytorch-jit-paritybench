; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_layer_norm_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = shl i32 %10, 2, !dbg !15
  %13 = or disjoint i32 %12, 4, !dbg !15
  %14 = sext i32 %12 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #3, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #3, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = or disjoint i32 %12, 1, !dbg !18
  %23 = or disjoint i32 %12, 5, !dbg !18
  %24 = sext i32 %22 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #3, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #3, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = or disjoint i32 %12, 2, !dbg !21
  %33 = or disjoint i32 %12, 6, !dbg !21
  %34 = sext i32 %32 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = sext i32 %33 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %11) #3, !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #3, !dbg !23
  %41 = bitcast i32 %40 to float, !dbg !23
  %42 = or disjoint i32 %12, 3, !dbg !24
  %43 = or disjoint i32 %12, 7, !dbg !24
  %44 = sext i32 %42 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %43 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #3, !dbg !26
  %49 = bitcast i32 %48 to float, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #3, !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = fcmp olt float %19, 0.000000e+00, !dbg !27
  %53 = fcmp olt float %21, 0.000000e+00, !dbg !27
  %54 = select i1 %52, float 0.000000e+00, float %19, !dbg !31
  %55 = select i1 %53, float 0.000000e+00, float %21, !dbg !31
  %56 = fcmp olt float %29, 0.000000e+00, !dbg !32
  %57 = fcmp olt float %31, 0.000000e+00, !dbg !32
  %58 = select i1 %56, float 0.000000e+00, float %29, !dbg !34
  %59 = select i1 %57, float 0.000000e+00, float %31, !dbg !34
  %60 = fadd float %54, %58, !dbg !35
  %61 = fadd float %55, %59, !dbg !35
  %62 = fcmp olt float %39, 0.000000e+00, !dbg !36
  %63 = fcmp olt float %41, 0.000000e+00, !dbg !36
  %64 = select i1 %62, float 0.000000e+00, float %39, !dbg !38
  %65 = select i1 %63, float 0.000000e+00, float %41, !dbg !38
  %66 = fadd float %60, %64, !dbg !39
  %67 = fadd float %61, %65, !dbg !39
  %68 = fcmp olt float %49, 0.000000e+00, !dbg !40
  %69 = fcmp olt float %51, 0.000000e+00, !dbg !40
  %70 = select i1 %68, float 0.000000e+00, float %49, !dbg !42
  %71 = select i1 %69, float 0.000000e+00, float %51, !dbg !42
  %72 = fadd float %66, %70, !dbg !43
  %73 = fadd float %67, %71, !dbg !43
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float 4.000000e+00) #3, !dbg !44
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 4.000000e+00) #3, !dbg !44
  %76 = fsub float %54, %74, !dbg !45
  %77 = fsub float %55, %75, !dbg !45
  %78 = fmul float %76, %76, !dbg !46
  %79 = fmul float %77, %77, !dbg !46
  %80 = fsub float %58, %74, !dbg !47
  %81 = fsub float %59, %75, !dbg !47
  %82 = fmul float %80, %80, !dbg !48
  %83 = fmul float %81, %81, !dbg !48
  %84 = fadd float %78, %82, !dbg !49
  %85 = fadd float %79, %83, !dbg !49
  %86 = fsub float %64, %74, !dbg !50
  %87 = fsub float %65, %75, !dbg !50
  %88 = fmul float %86, %86, !dbg !51
  %89 = fmul float %87, %87, !dbg !51
  %90 = fadd float %88, %84, !dbg !52
  %91 = fadd float %89, %85, !dbg !52
  %92 = fsub float %70, %74, !dbg !53
  %93 = fsub float %71, %75, !dbg !53
  %94 = fmul float %92, %92, !dbg !54
  %95 = fmul float %93, %93, !dbg !54
  %96 = fadd float %94, %90, !dbg !55
  %97 = fadd float %95, %91, !dbg !55
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 4.000000e+00) #3, !dbg !56
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 4.000000e+00) #3, !dbg !56
  %100 = fadd float %98, 0x3EE4F8B580000000, !dbg !57
  %101 = fadd float %99, 0x3EE4F8B580000000, !dbg !57
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i = icmp eq i32 %102, 0, !dbg !58
  br i1 %.not.i, label %105, label %103, !dbg !58

103:                                              ; preds = %4
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %100), !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !58

105:                                              ; preds = %4
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %100), !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !58

__nv_rsqrtf.exit:                                 ; preds = %103, %105
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], !dbg !58
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i1 = icmp eq i32 %107, 0, !dbg !58
  br i1 %.not.i1, label %110, label %108, !dbg !58

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !58
  br label %__nv_rsqrtf.exit3, !dbg !58

110:                                              ; preds = %__nv_rsqrtf.exit
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !58
  br label %__nv_rsqrtf.exit3, !dbg !58

__nv_rsqrtf.exit3:                                ; preds = %108, %110
  %.0.i2 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !58
  %112 = sext i32 %10 to i64, !dbg !59
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !59
  %114 = bitcast float %74 to i32, !dbg !60
  %115 = bitcast float %75 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %114, i32 %115, ptr addrspace(1) %113, i1 %11) #3, !dbg !60
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !61
  %117 = bitcast float %.0.i to i32, !dbg !62
  %118 = bitcast float %.0.i2 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %118, ptr addrspace(1) %116, i1 %11) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvlukci2anwpkbrekc5j237hjoc3mnosqszukcle2zwqrjeql7rp.py", directory: "inductor_cache/vl")
!4 = !{ptr @triton_poi_fused_native_layer_norm_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_layer_norm_relu_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_layer_norm_relu_0", linkageName: "triton_poi_fused_native_layer_norm_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 34, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 41, scope: !7)
!24 = !DILocation(line: 28, column: 34, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 41, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 30, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !33)
!33 = !DILocation(line: 31, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !33)
!35 = !DILocation(line: 32, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !37)
!37 = !DILocation(line: 33, column: 40, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !37)
!39 = !DILocation(line: 34, column: 18, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !41)
!41 = !DILocation(line: 35, column: 41, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !41)
!43 = !DILocation(line: 36, column: 19, scope: !7)
!44 = !DILocation(line: 38, column: 20, scope: !7)
!45 = !DILocation(line: 39, column: 19, scope: !7)
!46 = !DILocation(line: 40, column: 20, scope: !7)
!47 = !DILocation(line: 41, column: 19, scope: !7)
!48 = !DILocation(line: 42, column: 20, scope: !7)
!49 = !DILocation(line: 43, column: 20, scope: !7)
!50 = !DILocation(line: 44, column: 19, scope: !7)
!51 = !DILocation(line: 45, column: 20, scope: !7)
!52 = !DILocation(line: 46, column: 20, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 49, column: 20, scope: !7)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 53, column: 28, scope: !7)
!59 = !DILocation(line: 54, column: 25, scope: !7)
!60 = !DILocation(line: 54, column: 37, scope: !7)
!61 = !DILocation(line: 55, column: 25, scope: !7)
!62 = !DILocation(line: 55, column: 37, scope: !7)
!63 = !DILocation(line: 55, column: 4, scope: !7)
