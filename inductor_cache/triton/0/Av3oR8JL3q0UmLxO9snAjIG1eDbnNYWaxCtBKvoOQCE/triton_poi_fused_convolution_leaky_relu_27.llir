; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 1, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %.lobit = and i32 %10, 1, !dbg !12
  %11 = or disjoint i32 %8, %.lobit, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %13 = icmp slt i32 %8, 256, !dbg !14
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %15 = shl i32 %14, 9, !dbg !16
  %16 = shl i32 %9, 3, !dbg !17
  %17 = and i32 %16, 504, !dbg !17
  %18 = or disjoint i32 %17, 4, !dbg !17
  %19 = and i32 %9, 127, !dbg !17
  %20 = or disjoint i32 %19, 128, !dbg !17
  %21 = or disjoint i32 %19, 256, !dbg !17
  %22 = or disjoint i32 %19, 384, !dbg !17
  %23 = shl i32 %9, 2, !dbg !17
  %24 = and i32 %23, 508, !dbg !17
  %25 = or disjoint i32 %15, %17, !dbg !18
  %26 = or disjoint i32 %15, %18, !dbg !18
  %27 = or disjoint i32 %15, %19, !dbg !18
  %28 = or disjoint i32 %15, %20, !dbg !18
  %29 = or disjoint i32 %15, %21, !dbg !18
  %30 = or disjoint i32 %15, %22, !dbg !18
  %31 = or disjoint i32 %15, %24, !dbg !18
  %32 = icmp slt i32 %25, 512, !dbg !19
  %33 = icmp slt i32 %27, 512, !dbg !19
  %34 = icmp slt i32 %28, 512, !dbg !19
  %35 = icmp slt i32 %29, 512, !dbg !19
  %36 = icmp slt i32 %30, 512, !dbg !19
  %37 = icmp slt i32 %31, 512, !dbg !19
  %.frozen = freeze i32 %8, !dbg !20
  %38 = sdiv i32 %.frozen, 64, !dbg !20
  %39 = mul i32 %38, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %39, !dbg !21
  %40 = shl i32 %11, 9, !dbg !22
  %41 = add i32 %25, %40, !dbg !23
  %42 = add i32 %26, %40, !dbg !23
  %43 = sext i32 %41 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %42 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = and i1 %12, %32, !dbg !25
  %48 = and i1 %13, %33, !dbg !25
  %49 = and i1 %13, %34, !dbg !25
  %50 = and i1 %13, %35, !dbg !25
  %51 = and i1 %13, %36, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %47) #2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %47) #2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %62 = shl i32 %9, 4, !dbg !26
  %63 = and i32 %62, 1008, !dbg !26
  %64 = or disjoint i32 %63, %.lobit, !dbg !26
  %65 = shl i32 %9, 1, !dbg !26
  %66 = and i32 %65, 254, !dbg !26
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !26
  %68 = getelementptr inbounds float, ptr addrspace(3) %67, i32 %64, !dbg !26
  %69 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !26
  %70 = or disjoint i32 %64, 2, !dbg !26
  %71 = or disjoint i32 %63, 2, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %70, !dbg !26
  %74 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !26
  %75 = or disjoint i32 %64, 4, !dbg !26
  %76 = or disjoint i32 %63, 4, !dbg !26
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !26
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %75, !dbg !26
  %79 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !26
  %80 = or disjoint i32 %64, 6, !dbg !26
  %81 = or disjoint i32 %63, 6, !dbg !26
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %81, !dbg !26
  %83 = getelementptr inbounds float, ptr addrspace(3) %82, i32 %80, !dbg !26
  %84 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !26
  %85 = or disjoint i32 %64, 8, !dbg !26
  %86 = or disjoint i32 %63, 8, !dbg !26
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %86, !dbg !26
  %88 = getelementptr inbounds float, ptr addrspace(3) %87, i32 %85, !dbg !26
  %89 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !26
  %90 = or disjoint i32 %64, 10, !dbg !26
  %91 = or disjoint i32 %63, 10, !dbg !26
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !26
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %90, !dbg !26
  %94 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !26
  %95 = or disjoint i32 %64, 12, !dbg !26
  %96 = or disjoint i32 %63, 12, !dbg !26
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %96, !dbg !26
  %98 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %95, !dbg !26
  %99 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !26
  %100 = or disjoint i32 %64, 14, !dbg !26
  %101 = or disjoint i32 %63, 14, !dbg !26
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !26
  %103 = getelementptr inbounds float, ptr addrspace(3) %102, i32 %100, !dbg !26
  %104 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !26
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %66, !dbg !26
  %107 = or disjoint i32 %66, 256, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !26
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %107, !dbg !26
  %110 = or disjoint i32 %66, 512, !dbg !26
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !26
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %110, !dbg !26
  %113 = or disjoint i32 %66, 768, !dbg !26
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !26
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %113, !dbg !26
  %116 = and i32 %16, 1016, !dbg !26
  %117 = lshr i32 %116, 9, !dbg !26
  %118 = or disjoint i32 %117, %116, !dbg !26
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !26
  %120 = or disjoint i32 %116, 1, !dbg !26
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !26
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %120, !dbg !26
  %123 = or disjoint i32 %118, 2, !dbg !26
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !26
  %125 = or disjoint i32 %116, 3, !dbg !26
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !26
  %127 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %125, !dbg !26
  %128 = or disjoint i32 %118, 4, !dbg !26
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !26
  %130 = or disjoint i32 %116, 5, !dbg !26
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !26
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %130, !dbg !26
  %133 = or disjoint i32 %118, 6, !dbg !26
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !26
  %135 = or disjoint i32 %116, 7, !dbg !26
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !26
  %137 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %135, !dbg !26
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !26
  %139 = or disjoint i32 %24, 1, !dbg !26
  %140 = or disjoint i32 %24, 2, !dbg !26
  %141 = or disjoint i32 %24, 3, !dbg !26
  %142 = or disjoint i32 %24, 513, !dbg !26
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !26
  %144 = or disjoint i32 %24, 514, !dbg !26
  %145 = or disjoint i32 %24, 515, !dbg !26
  %146 = sext i32 %31 to i64, !dbg !27
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !27
  %.idx = shl nuw nsw i32 %24, 3, !dbg !28
  %148 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %.idx9 = shl nuw nsw i32 %139, 3, !dbg !28
  %149 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !28
  %.idx10 = shl nuw nsw i32 %140, 3, !dbg !28
  %150 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !28
  %.idx11 = shl nuw nsw i32 %141, 3, !dbg !28
  %151 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !28
  %.idx12 = shl nuw nsw i32 %19, 3, !dbg !28
  %152 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !28
  %.idx13 = shl nuw nsw i32 %20, 3, !dbg !28
  %153 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !28
  %.idx14 = shl nuw nsw i32 %21, 3, !dbg !28
  %154 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !28
  %.idx15 = shl nuw nsw i32 %22, 3, !dbg !28
  %155 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx15, !dbg !28
  %156 = load <2 x float>, ptr addrspace(3) %106, align 8, !dbg !26
  %157 = shufflevector <2 x float> %156, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %158 = load <2 x float>, ptr addrspace(3) %109, align 8, !dbg !26
  %159 = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %160 = load <2 x float>, ptr addrspace(3) %112, align 8, !dbg !26
  %161 = shufflevector <2 x float> %160, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %162 = load <2 x float>, ptr addrspace(3) %115, align 8, !dbg !26
  %163 = shufflevector <2 x float> %162, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %69, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %74, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %79, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %84, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %89, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %94, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %99, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %104, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %164 = load <4 x float>, ptr addrspace(3) %138, align 16, !dbg !26
  %165 = shufflevector <4 x float> %164, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %166 = load <4 x float>, ptr addrspace(3) %143, align 4, !dbg !26
  %167 = shufflevector <4 x float> %166, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %37) #2, !dbg !29
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !29
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !29
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !29
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !29
  %173 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !29
  %174 = insertelement <4 x i32> %173, i32 %171, i64 1, !dbg !29
  %175 = insertelement <4 x i32> %174, i32 %170, i64 2, !dbg !29
  %176 = insertelement <4 x i32> %175, i32 %169, i64 3, !dbg !29
  %177 = bitcast <4 x i32> %176 to <4 x float>, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %178 = insertelement <1 x i32> poison, i32 %169, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %178, i1 true) #2, !dbg !28
  %179 = insertelement <1 x i32> poison, i32 %170, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %179, i1 true) #2, !dbg !28
  %180 = insertelement <1 x i32> poison, i32 %171, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %180, i1 true) #2, !dbg !28
  %181 = insertelement <1 x i32> poison, i32 %172, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %181, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %182 = load float, ptr addrspace(3) %152, align 8, !dbg !28
  %183 = load float, ptr addrspace(3) %153, align 8, !dbg !28
  %184 = load float, ptr addrspace(3) %154, align 8, !dbg !28
  %185 = load float, ptr addrspace(3) %155, align 8, !dbg !28
  %186 = shufflevector <4 x float> %167, <4 x float> %165, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %187 = shufflevector <2 x float> %163, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %188 = shufflevector <16 x float> %186, <16 x float> %187, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %189 = shufflevector <2 x float> %161, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %190 = shufflevector <16 x float> %188, <16 x float> %189, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %191 = shufflevector <2 x float> %159, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %192 = shufflevector <16 x float> %190, <16 x float> %191, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !30
  %193 = shufflevector <2 x float> %157, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %194 = shufflevector <16 x float> %192, <16 x float> %193, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !30
  %195 = insertelement <8 x float> poison, float %185, i64 4, !dbg !30
  %196 = insertelement <8 x float> %195, float %184, i64 5, !dbg !30
  %197 = insertelement <8 x float> %196, float %183, i64 6, !dbg !30
  %198 = insertelement <8 x float> %197, float %182, i64 7, !dbg !30
  %199 = shufflevector <4 x float> %177, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %200 = shufflevector <8 x float> %199, <8 x float> %198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !30
  %201 = shufflevector <8 x float> %200, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>, !dbg !30
  %202 = fadd <16 x float> %194, %201, !dbg !30
  %203 = fcmp ogt <16 x float> %202, zeroinitializer, !dbg !31
  %204 = extractelement <16 x float> %202, i64 15, !dbg !28
  %205 = fmul float %204, 0x3FC99999A0000000, !dbg !32
  %206 = extractelement <16 x float> %202, i64 14, !dbg !28
  %207 = fmul float %206, 0x3FC99999A0000000, !dbg !32
  %208 = extractelement <16 x float> %202, i64 13, !dbg !28
  %209 = fmul float %208, 0x3FC99999A0000000, !dbg !32
  %210 = extractelement <16 x float> %202, i64 12, !dbg !28
  %211 = fmul float %210, 0x3FC99999A0000000, !dbg !32
  %212 = extractelement <16 x float> %202, i64 11, !dbg !28
  %213 = fmul float %212, 0x3FC99999A0000000, !dbg !32
  %214 = extractelement <16 x float> %202, i64 10, !dbg !28
  %215 = fmul float %214, 0x3FC99999A0000000, !dbg !32
  %216 = extractelement <16 x float> %202, i64 9, !dbg !28
  %217 = fmul float %216, 0x3FC99999A0000000, !dbg !32
  %218 = extractelement <16 x float> %202, i64 8, !dbg !28
  %219 = fmul float %218, 0x3FC99999A0000000, !dbg !32
  %220 = extractelement <16 x i1> %203, i64 15, !dbg !28
  %221 = select i1 %220, float %204, float %205, !dbg !28
  %222 = extractelement <16 x i1> %203, i64 14, !dbg !28
  %223 = select i1 %222, float %206, float %207, !dbg !28
  %224 = extractelement <16 x i1> %203, i64 13, !dbg !28
  %225 = select i1 %224, float %208, float %209, !dbg !28
  %226 = extractelement <16 x i1> %203, i64 12, !dbg !28
  %227 = select i1 %226, float %210, float %211, !dbg !28
  %228 = extractelement <16 x i1> %203, i64 11, !dbg !28
  %229 = select i1 %228, float %212, float %213, !dbg !28
  %230 = extractelement <16 x i1> %203, i64 10, !dbg !28
  %231 = select i1 %230, float %214, float %215, !dbg !28
  %232 = extractelement <16 x i1> %203, i64 9, !dbg !28
  %233 = select i1 %232, float %216, float %217, !dbg !28
  %234 = extractelement <16 x i1> %203, i64 8, !dbg !28
  %235 = select i1 %234, float %218, float %219, !dbg !28
  %236 = getelementptr i1, ptr addrspace(1) %2, i64 %43, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %237 = extractelement <16 x i1> %203, i64 7, !dbg !34
  %238 = zext i1 %237 to i8, !dbg !34
  %239 = extractelement <16 x i1> %203, i64 6, !dbg !34
  %240 = zext i1 %239 to i8, !dbg !34
  %241 = extractelement <16 x i1> %203, i64 5, !dbg !34
  %242 = zext i1 %241 to i8, !dbg !34
  %243 = extractelement <16 x i1> %203, i64 4, !dbg !34
  %244 = zext i1 %243 to i8, !dbg !34
  %245 = extractelement <16 x i1> %203, i64 3, !dbg !34
  %246 = zext i1 %245 to i8, !dbg !34
  %247 = extractelement <16 x i1> %203, i64 2, !dbg !34
  %248 = zext i1 %247 to i8, !dbg !34
  %249 = extractelement <16 x i1> %203, i64 1, !dbg !34
  %250 = zext i1 %249 to i8, !dbg !34
  %251 = extractelement <16 x i1> %203, i64 0, !dbg !34
  %252 = zext i1 %251 to i8, !dbg !34
  %253 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %24, !dbg !34
  %254 = insertelement <1 x i8> poison, i8 %238, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %253, <1 x i8> %254, i1 true) #2, !dbg !34
  %255 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %139, !dbg !34
  %256 = insertelement <1 x i8> poison, i8 %240, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %255, <1 x i8> %256, i1 true) #2, !dbg !34
  %257 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %140, !dbg !34
  %258 = insertelement <1 x i8> poison, i8 %242, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %257, <1 x i8> %258, i1 true) #2, !dbg !34
  %259 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %141, !dbg !34
  %260 = insertelement <1 x i8> poison, i8 %244, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %259, <1 x i8> %260, i1 true) #2, !dbg !34
  %261 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %142, !dbg !34
  %262 = insertelement <1 x i8> poison, i8 %246, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %261, <1 x i8> %262, i1 true) #2, !dbg !34
  %263 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %144, !dbg !34
  %264 = insertelement <1 x i8> poison, i8 %248, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %263, <1 x i8> %264, i1 true) #2, !dbg !34
  %265 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %145, !dbg !34
  %266 = insertelement <1 x i8> poison, i8 %250, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %265, <1 x i8> %266, i1 true) #2, !dbg !34
  %267 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %24, !dbg !34
  %268 = getelementptr inbounds i8, ptr addrspace(3) %267, i32 516, !dbg !34
  %269 = insertelement <1 x i8> poison, i8 %252, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %268, <1 x i8> %269, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %270 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %118, !dbg !34
  %271 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %128, !dbg !34
  %272 = load <4 x i8>, ptr addrspace(3) %270, align 1, !dbg !34
  %273 = and <4 x i8> %272, splat (i8 1), !dbg !34
  %274 = load <4 x i8>, ptr addrspace(3) %271, align 1, !dbg !34
  %275 = and <4 x i8> %274, splat (i8 1), !dbg !34
  %276 = bitcast <4 x i8> %273 to i32, !dbg !34
  %277 = bitcast <4 x i8> %275 to i32, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %276, i32 %277, ptr addrspace(1) %236, i1 %47) #2, !dbg !34
  %278 = shl i32 %27, 6, !dbg !35
  %279 = shl i32 %28, 6, !dbg !35
  %280 = shl i32 %29, 6, !dbg !35
  %281 = shl i32 %30, 6, !dbg !35
  %282 = shl i32 %38, 15, !dbg !36
  %283 = add i32 %282, %.decomposed, !dbg !37
  %284 = add i32 %283, %278, !dbg !38
  %285 = add i32 %283, %279, !dbg !38
  %286 = add i32 %283, %280, !dbg !38
  %287 = add i32 %283, %281, !dbg !38
  %288 = sext i32 %284 to i64, !dbg !39
  %289 = getelementptr float, ptr addrspace(1) %3, i64 %288, !dbg !39
  %290 = sext i32 %285 to i64, !dbg !39
  %291 = getelementptr float, ptr addrspace(1) %3, i64 %290, !dbg !39
  %292 = sext i32 %286 to i64, !dbg !39
  %293 = getelementptr float, ptr addrspace(1) %3, i64 %292, !dbg !39
  %294 = sext i32 %287 to i64, !dbg !39
  %295 = getelementptr float, ptr addrspace(1) %3, i64 %294, !dbg !39
  %296 = bitcast float %221 to i32, !dbg !40
  %297 = bitcast float %223 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %296, i32 %297, ptr addrspace(1) %289, i1 %48) #2, !dbg !40
  %298 = bitcast float %225 to i32, !dbg !40
  %299 = bitcast float %227 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %298, i32 %299, ptr addrspace(1) %291, i1 %49) #2, !dbg !40
  %300 = bitcast float %229 to i32, !dbg !40
  %301 = bitcast float %231 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %300, i32 %301, ptr addrspace(1) %293, i1 %50) #2, !dbg !40
  %302 = bitcast float %233 to i32, !dbg !40
  %303 = bitcast float %235 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %302, i32 %303, ptr addrspace(1) %295, i1 %51) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csnv7xak3ajfacpz54ybn5r32qvqs6r5t2oxgx6z5nmxl4luk2i7.py", directory: "inductor_cache/sn")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_27", linkageName: "triton_poi_fused_convolution_leaky_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 39, column: 32, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 33, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 38, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
