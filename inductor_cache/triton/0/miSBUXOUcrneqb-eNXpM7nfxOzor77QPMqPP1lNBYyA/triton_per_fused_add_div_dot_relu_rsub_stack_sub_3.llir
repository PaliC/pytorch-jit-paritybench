; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_dot_relu_rsub_stack_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = and i32 %7, 63, !dbg !10
  %11 = zext nneg i32 %10 to i64, !dbg !11
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !11
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !12
  %14 = bitcast i32 %13 to float, !dbg !12
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #3, !dbg !13
  %16 = bitcast i32 %15 to float, !dbg !13
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !14
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !15
  %19 = bitcast i32 %18 to float, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = fcmp olt float %14, 0.000000e+00, !dbg !18
  %24 = select i1 %23, float 0.000000e+00, float %14, !dbg !22
  %25 = icmp ne i32 %10, 0, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %27 = bitcast i32 %26 to float, !dbg !24
  %28 = fsub float %16, %27, !dbg !25
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %30 = bitcast i32 %29 to float, !dbg !26
  %31 = fadd float %16, %30, !dbg !27
  %32 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %28, float %31) #3, !dbg !28
  %33 = fsub float 1.000000e+00, %32, !dbg !29
  %34 = add nsw i32 %10, -1, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !31
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %25, i32 0, i1 %25) #3, !dbg !32
  %38 = bitcast i32 %37 to float, !dbg !32
  %39 = fsub float %16, %38, !dbg !33
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !34
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %25, i32 0, i1 %25) #3, !dbg !35
  %42 = bitcast i32 %41 to float, !dbg !35
  %43 = fadd float %16, %42, !dbg !36
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float %43) #3, !dbg !37
  %45 = fadd float %44, -1.000000e+00, !dbg !38
  %46 = fadd float %33, %45, !dbg !38
  %47 = fsub float %16, %19, !dbg !39
  %48 = fadd float %16, %22, !dbg !40
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float %48) #3, !dbg !41
  %50 = fsub float 1.000000e+00, %49, !dbg !42
  %51 = select i1 %25, float %46, float %50, !dbg !43
  %52 = fmul float %24, %51, !dbg !44
  %53 = bitcast float %52 to i32, !dbg !45
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !45
  %55 = bitcast i32 %54 to float, !dbg !45
  %56 = fadd float %52, %55, !dbg !49
  %57 = bitcast float %56 to i32, !dbg !45
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !45
  %59 = bitcast i32 %58 to float, !dbg !45
  %60 = fadd float %56, %59, !dbg !49
  %61 = bitcast float %60 to i32, !dbg !45
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !45
  %63 = bitcast i32 %62 to float, !dbg !45
  %64 = fadd float %60, %63, !dbg !49
  %65 = bitcast float %64 to i32, !dbg !45
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !45
  %67 = bitcast i32 %66 to float, !dbg !45
  %68 = fadd float %64, %67, !dbg !49
  %69 = bitcast float %68 to i32, !dbg !45
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !45
  %71 = bitcast i32 %70 to float, !dbg !45
  %72 = fadd float %68, %71, !dbg !49
  %73 = icmp eq i32 %8, 0, !dbg !45
  %74 = and i32 %9, 1, !dbg !45
  %75 = zext nneg i32 %74 to i64, !dbg !45
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i64 %75, !dbg !45
  %77 = bitcast float %72 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 %73) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %78 = icmp slt i32 %7, 2, !dbg !45
  %79 = sext i32 %7 to i64, !dbg !45
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i64 %79, !dbg !45
  %81 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %78) #3, !dbg !45
  %82 = bitcast i32 %81 to float, !dbg !45
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !45
  %84 = bitcast i32 %83 to float, !dbg !45
  %85 = fadd float %82, %84, !dbg !49
  %86 = and i32 %7, 1, !dbg !45
  %87 = icmp eq i32 %86, 0, !dbg !45
  %88 = and i1 %78, %87, !dbg !45
  %89 = bitcast float %85 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %89, i1 %88) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %90 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !45
  %91 = icmp eq i32 %10, 0, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %4, i1 %91) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cikxj4dk5on3psenltlynd2irvirhj3qqaor6qnykggi2nelm25u.py", directory: "inductor_cache/ik")
!4 = !{ptr @triton_per_fused_add_div_dot_relu_rsub_stack_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_dot_relu_rsub_stack_sub_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_dot_relu_rsub_stack_sub_3", linkageName: "triton_per_fused_add_div_dot_relu_rsub_stack_sub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 35, column: 31, scope: !7)
!15 = !DILocation(line: 35, column: 36, scope: !7)
!16 = !DILocation(line: 36, column: 31, scope: !7)
!17 = !DILocation(line: 36, column: 36, scope: !7)
!18 = !DILocation(line: 118, column: 15, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 38, column: 40, scope: !7)
!22 = !DILocation(line: 121, column: 29, scope: !19, inlinedAt: !21)
!23 = !DILocation(line: 41, column: 19, scope: !7)
!24 = !DILocation(line: 42, column: 70, scope: !7)
!25 = !DILocation(line: 43, column: 18, scope: !7)
!26 = !DILocation(line: 44, column: 71, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 19, scope: !7)
!29 = !DILocation(line: 48, column: 20, scope: !7)
!30 = !DILocation(line: 49, column: 54, scope: !7)
!31 = !DILocation(line: 49, column: 31, scope: !7)
!32 = !DILocation(line: 49, column: 78, scope: !7)
!33 = !DILocation(line: 50, column: 19, scope: !7)
!34 = !DILocation(line: 51, column: 31, scope: !7)
!35 = !DILocation(line: 51, column: 78, scope: !7)
!36 = !DILocation(line: 52, column: 19, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 55, column: 20, scope: !7)
!39 = !DILocation(line: 58, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 20, scope: !7)
!41 = !DILocation(line: 60, column: 20, scope: !7)
!42 = !DILocation(line: 62, column: 20, scope: !7)
!43 = !DILocation(line: 0, scope: !7)
!44 = !DILocation(line: 64, column: 19, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!48 = !DILocation(line: 66, column: 26, scope: !7)
!49 = !DILocation(line: 256, column: 15, scope: !50, inlinedAt: !48)
!50 = distinct !DILexicalBlockFile(scope: !46, file: !47, discriminator: 0)
!51 = !DILocation(line: 67, column: 68, scope: !7)
!52 = !DILocation(line: 67, column: 4, scope: !7)
