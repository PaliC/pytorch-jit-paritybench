; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, i32 %22) local_unnamed_addr !dbg !7 {
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %25 = shl i32 %24, 8, !dbg !11
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %27 = shl i32 %26, 1, !dbg !12
  %28 = and i32 %27, 254, !dbg !12
  %29 = or disjoint i32 %25, %28, !dbg !13
  %30 = icmp slt i32 %29, 9216, !dbg !14
  %.frozen = freeze i32 %29, !dbg !15
  %31 = sdiv i32 %.frozen, 8, !dbg !15
  %32 = srem i32 %31, 8, !dbg !16
  %33 = mul i32 %31, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %34 = sdiv i32 %29, 64, !dbg !18
  %35 = srem i32 %34, 36, !dbg !19
  %36 = sext i32 %32 to i64, !dbg !20
  %37 = getelementptr i64, ptr addrspace(1) %1, i64 %36, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %30) #3, !dbg !21
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %30) #3, !dbg !21
  %40 = sext i32 %.decomposed to i64, !dbg !22
  %41 = getelementptr i64, ptr addrspace(1) %2, i64 %40, !dbg !22
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 %30) #3, !dbg !23
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !23
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !23
  %45 = getelementptr i64, ptr addrspace(1) %4, i64 %40, !dbg !24
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 %30) #3, !dbg !25
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !25
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !26
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %30) #3, !dbg !27
  %51 = sext i32 %29 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %6, i64 %51, !dbg !28
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %30) #3, !dbg !29
  %54 = sext i32 %35 to i64, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %7, i64 %54, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %30) #3, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %30) #3, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %8, i64 %54, !dbg !32
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %30) #3, !dbg !33
  %60 = bitcast i32 %59 to float, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %30) #3, !dbg !33
  %62 = bitcast i32 %61 to float, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %9, i64 %54, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %30) #3, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %30) #3, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %10, i64 %54, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %30) #3, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %30) #3, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %11, i64 %51, !dbg !38
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %30) #3, !dbg !39
  %71 = getelementptr i64, ptr addrspace(1) %12, i64 %36, !dbg !40
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %30) #3, !dbg !41
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %30) #3, !dbg !41
  %74 = getelementptr float, ptr addrspace(1) %13, i64 %36, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %30) #3, !dbg !43
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %30) #3, !dbg !43
  %77 = getelementptr i64, ptr addrspace(1) %14, i64 %36, !dbg !44
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %77, i1 %30) #3, !dbg !45
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %77, i1 %30) #3, !dbg !45
  %80 = getelementptr i64, ptr addrspace(1) %15, i64 %40, !dbg !46
  %81 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %80, i1 %30) #3, !dbg !47
  %82 = getelementptr i64, ptr addrspace(1) %17, i64 %40, !dbg !48
  %83 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %82, i1 %30) #3, !dbg !49
  %84 = getelementptr float, ptr addrspace(1) %18, i64 %40, !dbg !50
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %84, i1 %30) #3, !dbg !51
  %86 = getelementptr i64, ptr addrspace(1) %19, i64 %36, !dbg !52
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %30) #3, !dbg !53
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %30) #3, !dbg !53
  %89 = getelementptr float, ptr addrspace(1) %20, i64 %36, !dbg !54
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %30) #3, !dbg !55
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %30) #3, !dbg !55
  %92 = lshr i64 %38, 61, !dbg !56
  %93 = and i64 %92, 4, !dbg !56
  %94 = add i64 %93, %38, !dbg !56
  %95 = lshr i64 %43, 61, !dbg !57
  %96 = and i64 %95, 4, !dbg !57
  %97 = lshr i64 %44, 61, !dbg !57
  %98 = and i64 %97, 4, !dbg !57
  %99 = shl i64 %94, 2, !dbg !58
  %100 = shl nsw i32 %34, 4, !dbg !59
  %101 = sext i32 %100 to i64, !dbg !60
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !61
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %96, !dbg !61
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %99, !dbg !61
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %101, !dbg !61
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !61
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %98, !dbg !61
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %99, !dbg !61
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %101, !dbg !61
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %30) #3, !dbg !62
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %30) #3, !dbg !62
  %112 = lshr i64 %47, 61, !dbg !63
  %113 = and i64 %112, 4, !dbg !63
  %114 = lshr i64 %48, 61, !dbg !63
  %115 = and i64 %114, 4, !dbg !63
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !64
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %113, !dbg !64
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %99, !dbg !64
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %101, !dbg !64
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !64
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %115, !dbg !64
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %99, !dbg !64
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %101, !dbg !64
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %30) #3, !dbg !65
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %30) #3, !dbg !65
  %126 = fadd float %60, 0x3EE4F8B580000000, !dbg !66
  %127 = fadd float %62, 0x3EE4F8B580000000, !dbg !66
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %128, 0, !dbg !67
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %129, 0, !dbg !67
  br i1 %.not.i, label %135, label %130, !dbg !67

130:                                              ; preds = %23
  br i1 %.not1.i, label %133, label %131, !dbg !67

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

135:                                              ; preds = %23
  br i1 %.not1.i, label %138, label %136, !dbg !67

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %131, %133, %136, %138
  %.0.i = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !67
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i1 = icmp eq i32 %140, 0, !dbg !67
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i4 = icmp eq i32 %141, 0, !dbg !67
  br i1 %.not.i1, label %147, label %142, !dbg !67

142:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %145, label %143, !dbg !67

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %150, label %148, !dbg !67

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

__nv_sqrtf.exit5:                                 ; preds = %143, %145, %148, %150
  %.0.i3 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !67
  %152 = extractvalue { i32, i32 } %53, 1, !dbg !29
  %153 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !31
  %154 = insertelement <2 x i32> %153, i32 %57, i64 1, !dbg !31
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !31
  %156 = extractvalue { i32, i32 } %53, 0, !dbg !29
  %157 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !29
  %158 = insertelement <2 x i32> %157, i32 %152, i64 1, !dbg !29
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !29
  %160 = fsub <2 x float> %159, %155, !dbg !68
  %161 = extractvalue { i32, i32 } %50, 1, !dbg !27
  %162 = extractvalue { i32, i32 } %50, 0, !dbg !27
  %163 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !43
  %164 = insertelement <2 x i32> %163, i32 %91, i64 1, !dbg !43
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !43
  %166 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !43
  %167 = insertelement <2 x i32> %166, i32 %90, i64 1, !dbg !43
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !43
  %169 = extractvalue { i32, i32 } %85, 1, !dbg !51
  %170 = extractvalue { i32, i32 } %85, 0, !dbg !51
  %171 = extractvalue { i64, i64 } %83, 1, !dbg !49
  %172 = extractvalue { i64, i64 } %83, 0, !dbg !49
  %173 = extractvalue { i64, i64 } %81, 1, !dbg !47
  %174 = extractvalue { i64, i64 } %81, 0, !dbg !47
  %175 = extractvalue { i32, i32 } %70, 1, !dbg !39
  %176 = extractvalue { i32, i32 } %70, 0, !dbg !39
  %177 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !37
  %178 = insertelement <2 x i32> %177, i32 %68, i64 1, !dbg !37
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !37
  %180 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !35
  %181 = insertelement <2 x i32> %180, i32 %65, i64 1, !dbg !35
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !35
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !69
  %185 = lshr i64 %72, 61, !dbg !70
  %186 = and i64 %185, 4, !dbg !70
  %187 = add i64 %186, %72, !dbg !70
  %188 = shl i64 %187, 2, !dbg !71
  %189 = getelementptr float, ptr addrspace(1) %103, i64 %188, !dbg !72
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %101, !dbg !72
  %191 = getelementptr float, ptr addrspace(1) %107, i64 %188, !dbg !72
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %101, !dbg !72
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %30) #3, !dbg !73
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %30) #3, !dbg !73
  %195 = getelementptr float, ptr addrspace(1) %117, i64 %188, !dbg !74
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %101, !dbg !74
  %197 = getelementptr float, ptr addrspace(1) %121, i64 %188, !dbg !74
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %101, !dbg !74
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 %30) #3, !dbg !75
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %30) #3, !dbg !75
  %201 = lshr i64 %78, 62, !dbg !76
  %202 = and i64 %201, 2, !dbg !76
  %203 = add i64 %202, %78, !dbg !76
  %204 = lshr i64 %174, 62, !dbg !77
  %205 = and i64 %204, 2, !dbg !77
  %206 = lshr i64 %173, 62, !dbg !77
  %207 = and i64 %206, 2, !dbg !77
  %208 = shl i64 %203, 1, !dbg !78
  %209 = shl nsw i32 %34, 2, !dbg !79
  %210 = sext i32 %209 to i64, !dbg !80
  %211 = getelementptr float, ptr addrspace(1) %16, i64 %174, !dbg !81
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %205, !dbg !81
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %208, !dbg !81
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %210, !dbg !81
  %215 = getelementptr float, ptr addrspace(1) %16, i64 %173, !dbg !81
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %207, !dbg !81
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %208, !dbg !81
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %210, !dbg !81
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 %30) #3, !dbg !82
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %30) #3, !dbg !82
  %221 = lshr i64 %172, 62, !dbg !83
  %222 = and i64 %221, 2, !dbg !83
  %223 = lshr i64 %171, 62, !dbg !83
  %224 = and i64 %223, 2, !dbg !83
  %225 = getelementptr float, ptr addrspace(1) %16, i64 %172, !dbg !84
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %222, !dbg !84
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %208, !dbg !84
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %210, !dbg !84
  %229 = getelementptr float, ptr addrspace(1) %16, i64 %171, !dbg !84
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %224, !dbg !84
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %208, !dbg !84
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %210, !dbg !84
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %30) #3, !dbg !85
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %30) #3, !dbg !85
  %235 = lshr i64 %87, 62, !dbg !86
  %236 = and i64 %235, 2, !dbg !86
  %237 = add i64 %236, %87, !dbg !86
  %238 = shl i64 %237, 1, !dbg !87
  %239 = getelementptr float, ptr addrspace(1) %212, i64 %238, !dbg !88
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %210, !dbg !88
  %241 = getelementptr float, ptr addrspace(1) %216, i64 %238, !dbg !88
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %210, !dbg !88
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %30) #3, !dbg !89
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %30) #3, !dbg !89
  %245 = getelementptr float, ptr addrspace(1) %226, i64 %238, !dbg !90
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %210, !dbg !90
  %247 = getelementptr float, ptr addrspace(1) %230, i64 %238, !dbg !90
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %210, !dbg !90
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %30) #3, !dbg !91
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 %30) #3, !dbg !91
  %251 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !27
  %252 = insertelement <2 x i32> %251, i32 %170, i64 1, !dbg !27
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !27
  %254 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !62
  %255 = insertelement <2 x i32> %254, i32 %219, i64 1, !dbg !62
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !62
  %257 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !65
  %258 = insertelement <2 x i32> %257, i32 %233, i64 1, !dbg !65
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !65
  %260 = fsub <2 x float> %259, %256, !dbg !92
  %261 = fmul <2 x float> %260, %253, !dbg !93
  %262 = fadd <2 x float> %261, %256, !dbg !94
  %263 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !73
  %264 = insertelement <2 x i32> %263, i32 %243, i64 1, !dbg !73
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !73
  %266 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !75
  %267 = insertelement <2 x i32> %266, i32 %249, i64 1, !dbg !75
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !75
  %269 = fsub <2 x float> %268, %265, !dbg !95
  %270 = fmul <2 x float> %269, %253, !dbg !96
  %271 = fadd <2 x float> %270, %265, !dbg !97
  %272 = fsub <2 x float> %271, %262, !dbg !98
  %273 = fmul <2 x float> %272, %168, !dbg !99
  %274 = fadd <2 x float> %262, %273, !dbg !100
  %275 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !27
  %276 = insertelement <2 x i32> %275, i32 %169, i64 1, !dbg !27
  %277 = bitcast <2 x i32> %276 to <2 x float>, !dbg !27
  %278 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !62
  %279 = insertelement <2 x i32> %278, i32 %220, i64 1, !dbg !62
  %280 = bitcast <2 x i32> %279 to <2 x float>, !dbg !62
  %281 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !65
  %282 = insertelement <2 x i32> %281, i32 %234, i64 1, !dbg !65
  %283 = bitcast <2 x i32> %282 to <2 x float>, !dbg !65
  %284 = fsub <2 x float> %283, %280, !dbg !92
  %285 = fmul <2 x float> %284, %277, !dbg !93
  %286 = fadd <2 x float> %285, %280, !dbg !94
  %287 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !73
  %288 = insertelement <2 x i32> %287, i32 %244, i64 1, !dbg !73
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !73
  %290 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !75
  %291 = insertelement <2 x i32> %290, i32 %250, i64 1, !dbg !75
  %292 = bitcast <2 x i32> %291 to <2 x float>, !dbg !75
  %293 = fsub <2 x float> %292, %289, !dbg !95
  %294 = fmul <2 x float> %293, %277, !dbg !96
  %295 = fadd <2 x float> %294, %289, !dbg !97
  %296 = fsub <2 x float> %295, %286, !dbg !98
  %297 = fmul <2 x float> %296, %165, !dbg !99
  %298 = fadd <2 x float> %286, %297, !dbg !100
  %299 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !101
  %300 = getelementptr i1, ptr addrspace(1) %21, i64 %51, !dbg !102
  %301 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !39
  %302 = insertelement <2 x i32> %301, i32 %175, i64 1, !dbg !39
  %303 = bitcast <2 x i32> %302 to <2 x float>, !dbg !39
  %304 = insertelement <2 x float> poison, float %183, i64 0, !dbg !103
  %305 = insertelement <2 x float> %304, float %184, i64 1, !dbg !103
  %306 = fmul <2 x float> %160, %305, !dbg !103
  %307 = fmul <2 x float> %306, %182, !dbg !104
  %308 = fadd <2 x float> %307, %179, !dbg !105
  %309 = fadd <2 x float> %308, zeroinitializer, !dbg !106
  %310 = fadd <2 x float> %309, %303, !dbg !107
  %311 = shufflevector <2 x float> %274, <2 x float> %298, <2 x i32> <i32 0, i32 2>, !dbg !108
  %312 = fadd <2 x float> %310, %311, !dbg !108
  %313 = shufflevector <2 x float> %274, <2 x float> %298, <2 x i32> <i32 1, i32 3>, !dbg !109
  %314 = fadd <2 x float> %312, %313, !dbg !109
  %315 = fcmp olt <2 x float> %314, zeroinitializer, !dbg !110
  %316 = select <2 x i1> %315, <2 x float> zeroinitializer, <2 x float> %314, !dbg !114
  %317 = fcmp ole <2 x float> %316, zeroinitializer, !dbg !115
  %bc = bitcast <2 x float> %316 to <2 x i32>, !dbg !116
  %318 = extractelement <2 x i32> %bc, i64 0, !dbg !116
  %bc6 = bitcast <2 x float> %316 to <2 x i32>, !dbg !116
  %319 = extractelement <2 x i32> %bc6, i64 1, !dbg !116
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %318, i32 %319, ptr addrspace(1) %299, i1 %30) #3, !dbg !116
  %320 = zext <2 x i1> %317 to <2 x i8>, !dbg !117
  %321 = bitcast <2 x i8> %320 to i16, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %321, ptr addrspace(1) %300, i1 %30) #3, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbwohk4w7xx53ino66ypiqtyqbmdwzgjrpme5jmqjzibjhvci6ev.py", directory: "inductor_cache/bw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 32, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 32, scope: !7)
!51 = !DILocation(line: 44, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 32, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 46, column: 32, scope: !7)
!55 = !DILocation(line: 46, column: 37, scope: !7)
!56 = !DILocation(line: 50, column: 32, scope: !7)
!57 = !DILocation(line: 53, column: 32, scope: !7)
!58 = !DILocation(line: 54, column: 39, scope: !7)
!59 = !DILocation(line: 54, column: 49, scope: !7)
!60 = !DILocation(line: 54, column: 46, scope: !7)
!61 = !DILocation(line: 54, column: 30, scope: !7)
!62 = !DILocation(line: 54, column: 54, scope: !7)
!63 = !DILocation(line: 57, column: 35, scope: !7)
!64 = !DILocation(line: 58, column: 31, scope: !7)
!65 = !DILocation(line: 58, column: 56, scope: !7)
!66 = !DILocation(line: 64, column: 20, scope: !7)
!67 = !DILocation(line: 65, column: 27, scope: !7)
!68 = !DILocation(line: 62, column: 20, scope: !7)
!69 = !DILocation(line: 67, column: 20, scope: !7)
!70 = !DILocation(line: 78, column: 35, scope: !7)
!71 = !DILocation(line: 79, column: 40, scope: !7)
!72 = !DILocation(line: 79, column: 31, scope: !7)
!73 = !DILocation(line: 79, column: 56, scope: !7)
!74 = !DILocation(line: 80, column: 31, scope: !7)
!75 = !DILocation(line: 80, column: 57, scope: !7)
!76 = !DILocation(line: 91, column: 35, scope: !7)
!77 = !DILocation(line: 94, column: 35, scope: !7)
!78 = !DILocation(line: 95, column: 42, scope: !7)
!79 = !DILocation(line: 95, column: 52, scope: !7)
!80 = !DILocation(line: 95, column: 50, scope: !7)
!81 = !DILocation(line: 95, column: 32, scope: !7)
!82 = !DILocation(line: 95, column: 57, scope: !7)
!83 = !DILocation(line: 98, column: 35, scope: !7)
!84 = !DILocation(line: 99, column: 32, scope: !7)
!85 = !DILocation(line: 99, column: 57, scope: !7)
!86 = !DILocation(line: 105, column: 35, scope: !7)
!87 = !DILocation(line: 106, column: 42, scope: !7)
!88 = !DILocation(line: 106, column: 32, scope: !7)
!89 = !DILocation(line: 106, column: 57, scope: !7)
!90 = !DILocation(line: 107, column: 32, scope: !7)
!91 = !DILocation(line: 107, column: 57, scope: !7)
!92 = !DILocation(line: 59, column: 20, scope: !7)
!93 = !DILocation(line: 60, column: 20, scope: !7)
!94 = !DILocation(line: 61, column: 19, scope: !7)
!95 = !DILocation(line: 81, column: 20, scope: !7)
!96 = !DILocation(line: 82, column: 20, scope: !7)
!97 = !DILocation(line: 83, column: 20, scope: !7)
!98 = !DILocation(line: 84, column: 20, scope: !7)
!99 = !DILocation(line: 85, column: 20, scope: !7)
!100 = !DILocation(line: 86, column: 20, scope: !7)
!101 = !DILocation(line: 118, column: 28, scope: !7)
!102 = !DILocation(line: 119, column: 25, scope: !7)
!103 = !DILocation(line: 70, column: 20, scope: !7)
!104 = !DILocation(line: 71, column: 20, scope: !7)
!105 = !DILocation(line: 72, column: 20, scope: !7)
!106 = !DILocation(line: 74, column: 20, scope: !7)
!107 = !DILocation(line: 75, column: 20, scope: !7)
!108 = !DILocation(line: 87, column: 20, scope: !7)
!109 = !DILocation(line: 114, column: 20, scope: !7)
!110 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !113)
!111 = distinct !DILexicalBlockFile(scope: !7, file: !112, discriminator: 0)
!112 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!113 = !DILocation(line: 116, column: 42, scope: !7)
!114 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !113)
!115 = !DILocation(line: 117, column: 21, scope: !7)
!116 = !DILocation(line: 118, column: 40, scope: !7)
!117 = !DILocation(line: 119, column: 37, scope: !7)
!118 = !DILocation(line: 119, column: 4, scope: !7)
