; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = srem i32 %17, 64, !dbg !15
  %19 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %16, 4096, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr i64, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %25 = sext i32 %.decomposed to i64, !dbg !20
  %26 = getelementptr i64, ptr addrspace(1) %2, i64 %25, !dbg !20
  %27 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !21
  %28 = extractvalue { i64, i64 } %27, 0, !dbg !21
  %29 = extractvalue { i64, i64 } %27, 1, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #1, !dbg !22
  %31 = getelementptr i64, ptr addrspace(1) %5, i64 %25, !dbg !23
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !24
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !24
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !25
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !26
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !26
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !26
  %39 = getelementptr i64, ptr addrspace(1) %7, i64 %21, !dbg !27
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !28
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !30
  %44 = bitcast i32 %43 to float, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !30
  %46 = bitcast i32 %45 to float, !dbg !30
  %47 = lshr i64 %23, 58, !dbg !31
  %48 = and i64 %47, 32, !dbg !31
  %49 = add i64 %48, %23, !dbg !31
  %50 = lshr i64 %28, 58, !dbg !32
  %51 = and i64 %50, 32, !dbg !32
  %52 = lshr i64 %29, 58, !dbg !32
  %53 = and i64 %52, 32, !dbg !32
  %54 = shl i64 %49, 5, !dbg !33
  %55 = shl nsw i32 %20, 10, !dbg !34
  %56 = sext i32 %55 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %51, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %54, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %56, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %53, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %54, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %56, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !37
  %67 = lshr i64 %33, 58, !dbg !38
  %68 = and i64 %67, 32, !dbg !38
  %69 = lshr i64 %34, 58, !dbg !38
  %70 = and i64 %69, 32, !dbg !38
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !39
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %68, !dbg !39
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %54, !dbg !39
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %56, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !39
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %70, !dbg !39
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %54, !dbg !39
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %56, !dbg !39
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !40
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !40
  %81 = lshr i64 %40, 58, !dbg !41
  %82 = and i64 %81, 32, !dbg !41
  %83 = add i64 %82, %40, !dbg !41
  %84 = shl i64 %83, 5, !dbg !42
  %85 = getelementptr float, ptr addrspace(1) %58, i64 %84, !dbg !43
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %56, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %62, i64 %84, !dbg !43
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %56, !dbg !43
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !44
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !44
  %91 = getelementptr float, ptr addrspace(1) %72, i64 %84, !dbg !45
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %56, !dbg !45
  %93 = getelementptr float, ptr addrspace(1) %76, i64 %84, !dbg !45
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %56, !dbg !45
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !46
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !46
  %97 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !44
  %98 = insertelement <2 x i32> %97, i32 %65, i64 1, !dbg !44
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !44
  %100 = fcmp ogt <2 x float> %99, zeroinitializer, !dbg !47
  %101 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !48
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !48
  %103 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %104 = fmul <2 x float> %103, %99, !dbg !48
  %105 = select <2 x i1> %100, <2 x float> %99, <2 x float> %104, !dbg !49
  %106 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !46
  %107 = insertelement <2 x i32> %106, i32 %79, i64 1, !dbg !46
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !46
  %109 = fcmp ogt <2 x float> %108, zeroinitializer, !dbg !50
  %110 = fmul <2 x float> %103, %108, !dbg !51
  %111 = select <2 x i1> %109, <2 x float> %108, <2 x float> %110, !dbg !52
  %112 = fsub <2 x float> %111, %105, !dbg !53
  %113 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !54
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !54
  %115 = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %116 = fmul <2 x float> %112, %115, !dbg !54
  %117 = fadd <2 x float> %105, %116, !dbg !55
  %118 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !44
  %119 = insertelement <2 x i32> %118, i32 %66, i64 1, !dbg !44
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !44
  %121 = fcmp ogt <2 x float> %120, zeroinitializer, !dbg !47
  %122 = fmul <2 x float> %103, %120, !dbg !48
  %123 = select <2 x i1> %121, <2 x float> %120, <2 x float> %122, !dbg !49
  %124 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !46
  %125 = insertelement <2 x i32> %124, i32 %80, i64 1, !dbg !46
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !46
  %127 = fcmp ogt <2 x float> %126, zeroinitializer, !dbg !50
  %128 = fmul <2 x float> %103, %126, !dbg !51
  %129 = select <2 x i1> %127, <2 x float> %126, <2 x float> %128, !dbg !52
  %130 = fsub <2 x float> %129, %123, !dbg !53
  %131 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !54
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !54
  %133 = shufflevector <2 x float> %132, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %134 = fmul <2 x float> %130, %133, !dbg !54
  %135 = fadd <2 x float> %123, %134, !dbg !55
  %136 = extractelement <2 x float> %117, i64 0, !dbg !56
  %137 = extractelement <2 x float> %117, i64 1, !dbg !57
  %138 = fsub float %136, %137, !dbg !56
  %139 = extractelement <2 x float> %135, i64 0, !dbg !56
  %140 = extractelement <2 x float> %135, i64 1, !dbg !57
  %141 = fsub float %139, %140, !dbg !56
  %142 = fmul float %138, %44, !dbg !58
  %143 = fmul float %141, %46, !dbg !58
  %144 = fadd float %137, %142, !dbg !57
  %145 = fadd float %140, %143, !dbg !57
  %146 = sext i32 %16 to i64, !dbg !59
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !59
  %148 = bitcast float %144 to i32, !dbg !60
  %149 = bitcast float %145 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %148, i32 %149, ptr addrspace(1) %147, i1 true) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2xy52gi7a4sbqxxlfqapclrqvmx6dxxb7tjfy74txjcskr4d2zi.py", directory: "inductor_cache/2x")
!4 = !{ptr @triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48", linkageName: "triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 42, column: 32, scope: !7)
!33 = !DILocation(line: 43, column: 40, scope: !7)
!34 = !DILocation(line: 43, column: 52, scope: !7)
!35 = !DILocation(line: 43, column: 47, scope: !7)
!36 = !DILocation(line: 43, column: 30, scope: !7)
!37 = !DILocation(line: 43, column: 57, scope: !7)
!38 = !DILocation(line: 50, column: 35, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 59, scope: !7)
!41 = !DILocation(line: 60, column: 35, scope: !7)
!42 = !DILocation(line: 61, column: 41, scope: !7)
!43 = !DILocation(line: 61, column: 31, scope: !7)
!44 = !DILocation(line: 61, column: 59, scope: !7)
!45 = !DILocation(line: 65, column: 31, scope: !7)
!46 = !DILocation(line: 65, column: 60, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 35, scope: !7)
!50 = !DILocation(line: 66, column: 20, scope: !7)
!51 = !DILocation(line: 67, column: 20, scope: !7)
!52 = !DILocation(line: 68, column: 35, scope: !7)
!53 = !DILocation(line: 69, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 20, scope: !7)
!56 = !DILocation(line: 72, column: 20, scope: !7)
!57 = !DILocation(line: 74, column: 20, scope: !7)
!58 = !DILocation(line: 73, column: 20, scope: !7)
!59 = !DILocation(line: 75, column: 28, scope: !7)
!60 = !DILocation(line: 75, column: 40, scope: !7)
!61 = !DILocation(line: 75, column: 4, scope: !7)
