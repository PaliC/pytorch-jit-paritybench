; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/li/cli2a6a7mhtmnjmriaoo5g66o7exi6dtuf6l4edbraw43meut2dv.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp20 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_clone_div_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !12
  %8 = shl i32 %7, 4, !dbg !13
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %10 = lshr i32 %9, 3, !dbg !14
  %11 = and i32 %10, 15, !dbg !14
  %12 = shl i32 %9, 1, !dbg !14
  %13 = and i32 %12, 14, !dbg !14
  %14 = or disjoint i32 %8, %11, !dbg !15
  %15 = icmp slt i32 %14, 16, !dbg !16
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !17
  %17 = shl i32 %16, 4, !dbg !18
  %18 = or disjoint i32 %17, %13, !dbg !19
  %19 = icmp slt i32 %18, 16, !dbg !20
  %.frozen11 = freeze i32 %14, !dbg !21
  %20 = sdiv i32 %.frozen11, 4, !dbg !21
  %21 = shl i32 %14, 4, !dbg !22
  %22 = add i32 %18, %21, !dbg !23
  %23 = sext i32 %22 to i64, !dbg !24
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !24
  %25 = and i1 %15, %19, !dbg !25
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %25) #5, !dbg !26
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !26
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !26
  %29 = bitcast i32 %27 to float, !dbg !26
  %30 = bitcast i32 %28 to float, !dbg !26
  %31 = shl i32 %20, 6, !dbg !27
  %32 = add i32 %31, %18, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !29
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %25) #5, !dbg !30
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !30
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !30
  %38 = bitcast i32 %36 to float, !dbg !30
  %39 = bitcast i32 %37 to float, !dbg !30
  %40 = add i32 %32, 16, !dbg !31
  %41 = sext i32 %40 to i64, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !32
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %25) #5, !dbg !33
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !33
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !33
  %46 = bitcast i32 %44 to float, !dbg !33
  %47 = bitcast i32 %45 to float, !dbg !33
  %48 = add i32 %32, 32, !dbg !34
  %49 = sext i32 %48 to i64, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !35
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %25) #5, !dbg !36
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !36
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !36
  %54 = bitcast i32 %52 to float, !dbg !36
  %55 = bitcast i32 %53 to float, !dbg !36
  %56 = add i32 %32, 48, !dbg !37
  %57 = sext i32 %56 to i64, !dbg !38
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !38
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %25) #5, !dbg !39
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !39
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !39
  %62 = bitcast i32 %60 to float, !dbg !39
  %63 = bitcast i32 %61 to float, !dbg !39
  %64 = shl i32 %20, 4, !dbg !40
  %65 = add i32 %64, %18, !dbg !41
  %66 = sext i32 %65 to i64, !dbg !42
  %67 = getelementptr i64, ptr addrspace(1) %1, i64 %66, !dbg !42
  %68 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %67, i1 %25) #5, !dbg !43
  %69 = extractvalue { i64, i64 } %68, 0, !dbg !43
  %70 = extractvalue { i64, i64 } %68, 1, !dbg !43
  %71 = fmul float %38, %38, !dbg !44
  %72 = fmul float %39, %39, !dbg !44
  %73 = fmul float %46, %46, !dbg !45
  %74 = fmul float %47, %47, !dbg !45
  %75 = fadd float %71, %73, !dbg !46
  %76 = fadd float %72, %74, !dbg !46
  %77 = fmul float %54, %54, !dbg !47
  %78 = fmul float %55, %55, !dbg !47
  %79 = fadd float %75, %77, !dbg !48
  %80 = fadd float %76, %78, !dbg !48
  %81 = fmul float %62, %62, !dbg !49
  %82 = fmul float %63, %63, !dbg !49
  %83 = fadd float %79, %81, !dbg !50
  %84 = fadd float %80, %82, !dbg !50
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i = icmp eq i32 %85, 0, !dbg !51
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !51
  %.not1.i = icmp eq i32 %86, 0, !dbg !51
  br i1 %.not.i, label %92, label %87, !dbg !51

87:                                               ; preds = %6
  br i1 %.not1.i, label %90, label %88, !dbg !51

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #5, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #5, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

92:                                               ; preds = %6
  br i1 %.not1.i, label %95, label %93, !dbg !51

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #5, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #5, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !51
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i6 = icmp eq i32 %97, 0, !dbg !51
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !51
  %.not1.i9 = icmp eq i32 %98, 0, !dbg !51
  br i1 %.not.i6, label %104, label %99, !dbg !51

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %102, label %100, !dbg !51

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #5, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #5, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %107, label %105, !dbg !51

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #5, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #5, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

__nv_sqrtf.exit10:                                ; preds = %100, %102, %105, %107
  %.0.i8 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !51
  %109 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !52
  %110 = fcmp ogt float %.0.i8, 0x3D71979980000000, !dbg !52
  %111 = fcmp uno float %.0.i, 0.000000e+00, !dbg !56
  %112 = fcmp uno float %.0.i8, 0.000000e+00, !dbg !56
  %113 = or i1 %109, %111, !dbg !57
  %114 = or i1 %110, %112, !dbg !57
  %115 = select i1 %113, float %.0.i, float 0x3D71979980000000, !dbg !58
  %116 = select i1 %114, float %.0.i8, float 0x3D71979980000000, !dbg !58
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %29, float %115) #5, !dbg !59
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %116) #5, !dbg !59
  %119 = shl i32 %9, 5, !dbg !59
  %120 = and i32 %119, 224, !dbg !59
  %121 = or disjoint i32 %120, %11, !dbg !59
  %122 = lshr exact i32 %120, 3, !dbg !59
  %123 = add nuw nsw i32 %122, %121, !dbg !59
  %124 = zext nneg i32 %123 to i64, !dbg !59
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !59
  %126 = bitcast float %117 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #5, !dbg !59
  %127 = or disjoint i32 %121, 16, !dbg !59
  %128 = lshr i32 %127, 3, !dbg !59
  %129 = and i32 %128, 30, !dbg !59
  %130 = add nuw nsw i32 %129, %127, !dbg !59
  %131 = zext nneg i32 %130 to i64, !dbg !59
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %131, !dbg !59
  %133 = bitcast float %118 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %134 = insertelement <2 x i64> poison, i64 %69, i64 0, !dbg !60
  %135 = insertelement <2 x i64> %134, i64 %70, i64 1, !dbg !60
  %136 = lshr <2 x i64> %135, splat (i64 61), !dbg !60
  %137 = and <2 x i64> %136, splat (i64 4), !dbg !60
  %138 = add <2 x i64> %137, %135, !dbg !60
  %139 = extractelement <2 x i64> %138, i64 0, !dbg !61
  %140 = extractelement <2 x i64> %138, i64 1, !dbg !61
  %141 = or i64 %139, %140, !dbg !61
  %.not24 = icmp ugt i64 %141, 3, !dbg !61
  %142 = and i1 %25, %.not24, !dbg !61
  br i1 %142, label %143, label %144, !dbg !61

143:                                              ; preds = %__nv_sqrtf.exit10
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 53, ptr nonnull @assertFunc_0, i64 1), !dbg !61
  unreachable, !dbg !61

144:                                              ; preds = %__nv_sqrtf.exit10
  %145 = lshr i32 %12, 3, !dbg !59
  %146 = and i32 %145, 30, !dbg !59
  %147 = and i32 %12, 254, !dbg !59
  %148 = add nuw nsw i32 %146, %147, !dbg !59
  %149 = zext nneg i32 %148 to i64, !dbg !59
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %149, !dbg !59
  %151 = getelementptr inbounds i8, ptr addrspace(3) %150, i64 4, !dbg !59
  %152 = load float, ptr addrspace(3) %151, align 4, !dbg !59
  %153 = load float, ptr addrspace(3) %150, align 8, !dbg !59
  %154 = or disjoint i32 %8, %13, !dbg !15
  %.frozen = freeze i32 %154, !dbg !21
  %155 = sdiv i32 %.frozen, 4, !dbg !21
  %156 = shl i32 %155, 6, !dbg !27
  %157 = or disjoint i32 %17, %11, !dbg !19
  %158 = icmp slt i32 %157, 16, !dbg !20
  %159 = icmp slt i32 %154, 16, !dbg !16
  %160 = and i1 %159, %158, !dbg !25
  %161 = mul i32 %155, 4, !dbg !62
  %.decomposed = sub i32 %.frozen, %161, !dbg !62
  %162 = mul i32 %20, 4, !dbg !62
  %.decomposed12 = sub i32 %.frozen11, %162, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %163 = sext i32 %.decomposed12 to i64, !dbg !63
  %.idx = shl i64 %139, 4, !dbg !64
  %164 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !64
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %163, !dbg !64
  %.idx5 = shl i64 %140, 4, !dbg !64
  %166 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx5, !dbg !64
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %163, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %168 = ptrtoint ptr addrspace(1) %165 to i64, !dbg !65
  %169 = ptrtoint ptr addrspace(1) %167 to i64, !dbg !65
  %170 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %124, !dbg !65
  %171 = insertelement <1 x i64> poison, i64 %168, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %170, <1 x i64> %171, i1 true) #5, !dbg !65
  %172 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %131, !dbg !65
  %173 = insertelement <1 x i64> poison, i64 %169, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %172, <1 x i64> %173, i1 true) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %174 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %149, !dbg !65
  %175 = load i64, ptr addrspace(3) %174, align 16, !dbg !65
  %176 = inttoptr i64 %175 to ptr addrspace(1), !dbg !65
  %177 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %176, i1 %160) #5, !dbg !65
  %178 = extractvalue { i32, i32 } %177, 0, !dbg !65
  %179 = extractvalue { i32, i32 } %177, 1, !dbg !65
  %180 = bitcast i32 %178 to float, !dbg !65
  %181 = bitcast i32 %179 to float, !dbg !65
  %182 = fsub float %180, %153, !dbg !66
  %183 = fsub float %181, %152, !dbg !66
  %184 = fadd float %153, %182, !dbg !67
  %185 = fadd float %152, %183, !dbg !67
  %186 = shl i32 %157, 2, !dbg !68
  %187 = add i32 %186, %.decomposed, !dbg !69
  %188 = add i32 %187, %156, !dbg !70
  %189 = sext i32 %188 to i64, !dbg !71
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !71
  %191 = bitcast float %184 to i32, !dbg !72
  %192 = bitcast float %185 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %191, i32 %192, ptr addrspace(1) %190, i1 %160) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cli2a6a7mhtmnjmriaoo5g66o7exi6dtuf6l4edbraw43meut2dv.py", directory: "inductor_cache/li")
!4 = !{ptr @triton_poi_fused_add_clone_div_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clone_div_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_clone_div_sub_4", linkageName: "triton_poi_fused_add_clone_div_sub_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 25, column: 33, scope: !11)
!19 = !DILocation(line: 26, column: 23, scope: !11)
!20 = !DILocation(line: 27, column: 21, scope: !11)
!21 = !DILocation(line: 30, column: 19, scope: !11)
!22 = !DILocation(line: 32, column: 38, scope: !11)
!23 = !DILocation(line: 32, column: 35, scope: !11)
!24 = !DILocation(line: 32, column: 30, scope: !11)
!25 = !DILocation(line: 32, column: 51, scope: !11)
!26 = !DILocation(line: 32, column: 43, scope: !11)
!27 = !DILocation(line: 33, column: 38, scope: !11)
!28 = !DILocation(line: 33, column: 35, scope: !11)
!29 = !DILocation(line: 33, column: 30, scope: !11)
!30 = !DILocation(line: 33, column: 43, scope: !11)
!31 = !DILocation(line: 34, column: 40, scope: !11)
!32 = !DILocation(line: 34, column: 30, scope: !11)
!33 = !DILocation(line: 34, column: 48, scope: !11)
!34 = !DILocation(line: 35, column: 40, scope: !11)
!35 = !DILocation(line: 35, column: 30, scope: !11)
!36 = !DILocation(line: 35, column: 48, scope: !11)
!37 = !DILocation(line: 36, column: 40, scope: !11)
!38 = !DILocation(line: 36, column: 30, scope: !11)
!39 = !DILocation(line: 36, column: 48, scope: !11)
!40 = !DILocation(line: 37, column: 39, scope: !11)
!41 = !DILocation(line: 37, column: 36, scope: !11)
!42 = !DILocation(line: 37, column: 31, scope: !11)
!43 = !DILocation(line: 37, column: 44, scope: !11)
!44 = !DILocation(line: 38, column: 18, scope: !11)
!45 = !DILocation(line: 39, column: 18, scope: !11)
!46 = !DILocation(line: 40, column: 18, scope: !11)
!47 = !DILocation(line: 41, column: 18, scope: !11)
!48 = !DILocation(line: 42, column: 18, scope: !11)
!49 = !DILocation(line: 43, column: 19, scope: !11)
!50 = !DILocation(line: 44, column: 19, scope: !11)
!51 = !DILocation(line: 45, column: 27, scope: !11)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !11, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 47, column: 42, scope: !11)
!56 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!59 = !DILocation(line: 48, column: 19, scope: !11)
!60 = !DILocation(line: 52, column: 35, scope: !11)
!61 = !DILocation(line: 53, column: 70, scope: !11)
!62 = !DILocation(line: 31, column: 19, scope: !11)
!63 = !DILocation(line: 54, column: 36, scope: !11)
!64 = !DILocation(line: 54, column: 31, scope: !11)
!65 = !DILocation(line: 54, column: 46, scope: !11)
!66 = !DILocation(line: 55, column: 20, scope: !11)
!67 = !DILocation(line: 56, column: 20, scope: !11)
!68 = !DILocation(line: 57, column: 32, scope: !11)
!69 = !DILocation(line: 57, column: 30, scope: !11)
!70 = !DILocation(line: 57, column: 37, scope: !11)
!71 = !DILocation(line: 57, column: 25, scope: !11)
!72 = !DILocation(line: 57, column: 52, scope: !11)
!73 = !DILocation(line: 57, column: 4, scope: !11)
