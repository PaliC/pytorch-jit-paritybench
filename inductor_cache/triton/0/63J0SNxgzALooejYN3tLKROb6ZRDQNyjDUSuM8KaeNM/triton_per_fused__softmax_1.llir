; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 32, !dbg !14
  %16 = icmp slt i32 %14, 32, !dbg !14
  %17 = lshr i32 %8, 5, !dbg !15
  %18 = and i32 %8, 56, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %19 = sdiv i32 %.frozen, 8, !dbg !16
  %20 = mul i32 %19, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = add nsw i32 %.decomposed, %18, !dbg !18
  %22 = shl i32 %19, 6, !dbg !19
  %23 = add i32 %21, %22, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !21
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = select i1 %15, float %31, float 0xFFF0000000000000, !dbg !23
  %36 = select i1 %15, float %32, float 0xFFF0000000000000, !dbg !23
  %37 = select i1 %15, float %33, float 0xFFF0000000000000, !dbg !23
  %38 = select i1 %15, float %34, float 0xFFF0000000000000, !dbg !23
  %39 = bitcast float %35 to i32, !dbg !24
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 16, i32 31), !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = fcmp ogt float %35, %41, !dbg !28
  %43 = fcmp uno float %35, 0.000000e+00, !dbg !30
  %44 = or i1 %42, %43, !dbg !31
  %45 = select i1 %44, float %35, float %41, !dbg !32
  %46 = bitcast float %45 to i32, !dbg !24
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !24
  %48 = bitcast i32 %47 to float, !dbg !24
  %49 = fcmp ogt float %45, %48, !dbg !28
  %50 = fcmp uno float %45, 0.000000e+00, !dbg !30
  %51 = or i1 %49, %50, !dbg !31
  %52 = bitcast float %36 to i32, !dbg !24
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = fcmp ogt float %36, %54, !dbg !28
  %56 = fcmp uno float %36, 0.000000e+00, !dbg !30
  %57 = or i1 %56, %55, !dbg !31
  %58 = select i1 %57, float %36, float %54, !dbg !32
  %59 = bitcast float %58 to i32, !dbg !24
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !24
  %61 = bitcast i32 %60 to float, !dbg !24
  %62 = fcmp ogt float %58, %61, !dbg !28
  %63 = fcmp uno float %58, 0.000000e+00, !dbg !30
  %64 = or i1 %62, %63, !dbg !31
  %65 = bitcast float %37 to i32, !dbg !24
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = fcmp ogt float %37, %67, !dbg !28
  %69 = fcmp uno float %37, 0.000000e+00, !dbg !30
  %70 = or i1 %69, %68, !dbg !31
  %71 = select i1 %70, float %37, float %67, !dbg !32
  %72 = bitcast float %71 to i32, !dbg !24
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !24
  %74 = bitcast i32 %73 to float, !dbg !24
  %75 = fcmp ogt float %71, %74, !dbg !28
  %76 = fcmp uno float %71, 0.000000e+00, !dbg !30
  %77 = or i1 %75, %76, !dbg !31
  %78 = bitcast float %38 to i32, !dbg !24
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !24
  %80 = bitcast i32 %79 to float, !dbg !24
  %81 = fcmp ogt float %38, %80, !dbg !28
  %82 = fcmp uno float %38, 0.000000e+00, !dbg !30
  %83 = or i1 %82, %81, !dbg !31
  %84 = select i1 %83, float %38, float %80, !dbg !32
  %85 = bitcast float %84 to i32, !dbg !24
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = fcmp ogt float %84, %87, !dbg !28
  %89 = fcmp uno float %84, 0.000000e+00, !dbg !30
  %90 = or i1 %88, %89, !dbg !31
  %91 = icmp eq i32 %9, 0, !dbg !24
  %92 = and i32 %17, 1, !dbg !24
  %93 = shl nuw nsw i32 %11, 1, !dbg !24
  %94 = or disjoint i32 %93, %92, !dbg !24
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !24
  %96 = select i1 %51, i32 %46, i32 %47, !dbg !32
  %97 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %97, i1 %91) #3, !dbg !24
  %98 = or disjoint i32 %93, 2, !dbg !24
  %99 = or disjoint i32 %98, %92, !dbg !24
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !24
  %101 = select i1 %64, i32 %59, i32 %60, !dbg !32
  %102 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %102, i1 %91) #3, !dbg !24
  %103 = or disjoint i32 %93, 4, !dbg !24
  %104 = or disjoint i32 %103, %92, !dbg !24
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !24
  %106 = select i1 %77, i32 %72, i32 %73, !dbg !32
  %107 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %107, i1 %91) #3, !dbg !24
  %108 = or disjoint i32 %93, 6, !dbg !24
  %109 = or disjoint i32 %108, %92, !dbg !24
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !24
  %111 = select i1 %90, i32 %85, i32 %86, !dbg !32
  %112 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %112, i1 %91) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %113 = icmp slt i32 %8, 64, !dbg !24
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !24
  %115 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %114, i1 %113) #3, !dbg !24
  %116 = bitcast i32 %115 to float, !dbg !24
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !24
  %118 = bitcast i32 %117 to float, !dbg !24
  %119 = fcmp ogt float %116, %118, !dbg !28
  %120 = fcmp uno float %116, 0.000000e+00, !dbg !30
  %121 = or i1 %120, %119, !dbg !31
  %122 = and i32 %8, 1, !dbg !24
  %123 = icmp eq i32 %122, 0, !dbg !24
  %124 = and i1 %113, %123, !dbg !24
  %125 = select i1 %121, i32 %115, i32 %117, !dbg !32
  %126 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %126, i1 %124) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !24
  %128 = load float, ptr addrspace(3) %127, align 16, !dbg !24
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !24
  %130 = load float, ptr addrspace(3) %129, align 8, !dbg !24
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !24
  %132 = load float, ptr addrspace(3) %131, align 16, !dbg !24
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !24
  %134 = load float, ptr addrspace(3) %133, align 8, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !33
  %136 = bitcast float %128 to i32, !dbg !33
  %137 = bitcast float %130 to i32, !dbg !33
  %138 = bitcast float %132 to i32, !dbg !33
  %139 = bitcast float %134 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %135, i32 %136, i32 %137, i32 %138, i32 %139, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !33
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !33
  %142 = fsub float %31, %128, !dbg !34
  %143 = fsub float %32, %130, !dbg !34
  %144 = fsub float %33, %132, !dbg !34
  %145 = fsub float %34, %134, !dbg !34
  %146 = fmul float %142, 0x3FF7154760000000, !dbg !35
  %147 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %146) #3, !dbg !35
  %148 = fmul float %143, 0x3FF7154760000000, !dbg !35
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #3, !dbg !35
  %150 = fmul float %144, 0x3FF7154760000000, !dbg !35
  %151 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %150) #3, !dbg !35
  %152 = fmul float %145, 0x3FF7154760000000, !dbg !35
  %153 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %152) #3, !dbg !35
  %154 = select i1 %15, float %147, float 0.000000e+00, !dbg !36
  %155 = select i1 %15, float %149, float 0.000000e+00, !dbg !36
  %156 = select i1 %15, float %151, float 0.000000e+00, !dbg !36
  %157 = select i1 %15, float %153, float 0.000000e+00, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %158 = bitcast float %154 to i32, !dbg !37
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !37
  %160 = bitcast i32 %159 to float, !dbg !37
  %161 = fadd float %154, %160, !dbg !41
  %162 = bitcast float %161 to i32, !dbg !37
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !37
  %164 = bitcast i32 %163 to float, !dbg !37
  %165 = fadd float %161, %164, !dbg !41
  %166 = bitcast float %155 to i32, !dbg !37
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 16, i32 31), !dbg !37
  %168 = bitcast i32 %167 to float, !dbg !37
  %169 = fadd float %155, %168, !dbg !41
  %170 = bitcast float %169 to i32, !dbg !37
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !37
  %172 = bitcast i32 %171 to float, !dbg !37
  %173 = fadd float %169, %172, !dbg !41
  %174 = bitcast float %156 to i32, !dbg !37
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 16, i32 31), !dbg !37
  %176 = bitcast i32 %175 to float, !dbg !37
  %177 = fadd float %156, %176, !dbg !41
  %178 = bitcast float %177 to i32, !dbg !37
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 8, i32 31), !dbg !37
  %180 = bitcast i32 %179 to float, !dbg !37
  %181 = fadd float %177, %180, !dbg !41
  %182 = bitcast float %157 to i32, !dbg !37
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 16, i32 31), !dbg !37
  %184 = bitcast i32 %183 to float, !dbg !37
  %185 = fadd float %157, %184, !dbg !41
  %186 = bitcast float %185 to i32, !dbg !37
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 8, i32 31), !dbg !37
  %188 = bitcast i32 %187 to float, !dbg !37
  %189 = fadd float %185, %188, !dbg !41
  %190 = bitcast float %165 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %190, i1 %91) #3, !dbg !37
  %191 = bitcast float %173 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %191, i1 %91) #3, !dbg !37
  %192 = bitcast float %181 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %192, i1 %91) #3, !dbg !37
  %193 = bitcast float %189 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %193, i1 %91) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %194 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %114, i1 %113) #3, !dbg !37
  %195 = bitcast i32 %194 to float, !dbg !37
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !37
  %197 = bitcast i32 %196 to float, !dbg !37
  %198 = fadd float %195, %197, !dbg !41
  %199 = bitcast float %198 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %199, i1 %124) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %200 = load i32, ptr addrspace(3) %127, align 16, !dbg !37
  %201 = load i32, ptr addrspace(3) %129, align 8, !dbg !37
  %202 = load i32, ptr addrspace(3) %131, align 16, !dbg !37
  %203 = load i32, ptr addrspace(3) %133, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %135, i32 %200, i32 %201, i32 %202, i32 %203, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %204 = load i32, ptr addrspace(3) %140, align 4, !dbg !43
  %205 = sext i32 %14 to i64, !dbg !44
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !44
  %207 = icmp eq i32 %92, 0, !dbg !45
  %208 = and i1 %207, %16, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %206, i1 %208) #3, !dbg !45
  %209 = getelementptr float, ptr addrspace(1) %2, i64 %205, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %204, ptr addrspace(1) %209, i1 %208) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py", directory: "inductor_cache/a3")
!4 = !{ptr @triton_per_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_1", linkageName: "triton_per_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 35, column: 33, scope: !7)
!24 = !DILocation(line: 131, column: 29, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 36, column: 37, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !27)
!31 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !27)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !27)
!33 = !DILocation(line: 36, column: 40, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 23, scope: !7)
!36 = !DILocation(line: 40, column: 33, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!40 = !DILocation(line: 41, column: 25, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !40)
!42 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!43 = !DILocation(line: 41, column: 28, scope: !7)
!44 = !DILocation(line: 42, column: 25, scope: !7)
!45 = !DILocation(line: 42, column: 36, scope: !7)
!46 = !DILocation(line: 43, column: 25, scope: !7)
!47 = !DILocation(line: 43, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 4, scope: !7)
