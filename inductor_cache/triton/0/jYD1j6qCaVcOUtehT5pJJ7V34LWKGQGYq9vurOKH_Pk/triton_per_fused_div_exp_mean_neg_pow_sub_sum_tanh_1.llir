; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_div_exp_mean_neg_pow_sub_sum_tanh_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = shl i32 %7, 2, !dbg !11
  %9 = and i32 %8, 252, !dbg !11
  %10 = zext nneg i32 %9 to i64, !dbg !12
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !12
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #5, !dbg !13
  %13 = bitcast i32 %12 to float, !dbg !13
  %14 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #5, !dbg !15
  %16 = bitcast i32 %15 to float, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %3, i64 %10, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = or disjoint i32 %9, 1, !dbg !18
  %21 = zext nneg i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !22
  %27 = bitcast i32 %26 to float, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = or disjoint i32 %9, 2, !dbg !25
  %32 = zext nneg i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !29
  %38 = bitcast i32 %37 to float, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !31
  %41 = bitcast i32 %40 to float, !dbg !31
  %42 = or disjoint i32 %9, 3, !dbg !32
  %43 = zext nneg i32 %42 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !33
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !35
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !37
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !38
  %50 = bitcast i32 %49 to float, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %10, !dbg !39
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !40
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !41
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #5, !dbg !42
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !43
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #5, !dbg !44
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !45
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #5, !dbg !46
  %59 = fsub float %13, %16, !dbg !47
  %60 = fmul float %59, %59, !dbg !48
  %61 = fsub float 0.000000e+00, %60, !dbg !49
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %62, 0, !dbg !50
  %63 = tail call float @llvm.nvvm.fabs.ftz.f(float %19) #5, !dbg !50
  %64 = tail call float @llvm.nvvm.fabs.f(float %19) #5, !dbg !50
  %.01.i = select i1 %.not.i, float %64, float %63, !dbg !50
  %65 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !50
  br i1 %65, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !50

__internal_fmad.exit1.i:                          ; preds = %6
  %66 = fmul float %.01.i, 0x4007154760000000, !dbg !50
  %67 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %66) #5, !dbg !50
  %68 = fadd float %67, 1.000000e+00, !dbg !50
  %69 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %68) #6, !dbg !50, !srcloc !51
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not6.i = icmp eq i32 %70, 0, !dbg !50
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %69, float -2.000000e+00, float 1.000000e+00) #5, !dbg !50
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %69, float -2.000000e+00, float 1.000000e+00) #5, !dbg !50
  %.03.i = select i1 %.not6.i, float %72, float %71, !dbg !50
  %73 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !50
  %s.0.i = select i1 %73, float 1.000000e+00, float %.03.i, !dbg !50
  %74 = bitcast float %s.0.i to i32, !dbg !50
  %75 = and i32 %18, -2147483648, !dbg !50
  %76 = or i32 %75, %74, !dbg !50
  %77 = bitcast i32 %76 to float, !dbg !50
  br label %__nv_tanhf.exit, !dbg !50

__internal_fmad.exit3.i:                          ; preds = %6
  %78 = fmul float %19, %19, !dbg !50
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not1.i = icmp eq i32 %79, 0, !dbg !50
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %78, float 0xBFAAC795C0000000) #5, !dbg !50
  %81 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %78, float 0xBFAAC795C0000000) #5, !dbg !50
  %.06.i = select i1 %.not1.i, float %81, float %80, !dbg !50
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not2.i = icmp eq i32 %82, 0, !dbg !50
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %78, float 0x3FC10B2820000000) #5, !dbg !50
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %78, float 0x3FC10B2820000000) #5, !dbg !50
  %.05.i = select i1 %.not2.i, float %84, float %83, !dbg !50
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not3.i = icmp eq i32 %85, 0, !dbg !50
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %78, float 0xBFD5553DA0000000) #5, !dbg !50
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %78, float 0xBFD5553DA0000000) #5, !dbg !50
  %.0.i = select i1 %.not3.i, float %87, float %86, !dbg !50
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not4.i = icmp eq i32 %88, 0, !dbg !50
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %78, float 0.000000e+00) #5, !dbg !50
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %78, float 0.000000e+00) #5, !dbg !50
  %.04.i = select i1 %.not4.i, float %90, float %89, !dbg !50
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not5.i = icmp eq i32 %91, 0, !dbg !50
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %19, float %19) #5, !dbg !50
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %19, float %19) #5, !dbg !50
  %.02.i = select i1 %.not5.i, float %93, float %92, !dbg !50
  br label %__nv_tanhf.exit, !dbg !50

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %77, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !50
  %94 = fmul float %s.1.i, 0x3FF7154760000000, !dbg !52
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #5, !dbg !52
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %95) #5, !dbg !53
  %97 = fsub float %24, %27, !dbg !54
  %98 = fmul float %97, %97, !dbg !55
  %99 = fsub float 0.000000e+00, %98, !dbg !56
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i1 = icmp eq i32 %100, 0, !dbg !57
  %101 = tail call float @llvm.nvvm.fabs.ftz.f(float %30) #5, !dbg !57
  %102 = tail call float @llvm.nvvm.fabs.f(float %30) #5, !dbg !57
  %.01.i2 = select i1 %.not.i1, float %102, float %101, !dbg !57
  %103 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !57
  br i1 %103, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !57

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %104 = fmul float %.01.i2, 0x4007154760000000, !dbg !57
  %105 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %104) #5, !dbg !57
  %106 = fadd float %105, 1.000000e+00, !dbg !57
  %107 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %106) #6, !dbg !57, !srcloc !51
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not6.i4 = icmp eq i32 %108, 0, !dbg !57
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %107, float -2.000000e+00, float 1.000000e+00) #5, !dbg !57
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %107, float -2.000000e+00, float 1.000000e+00) #5, !dbg !57
  %.03.i5 = select i1 %.not6.i4, float %110, float %109, !dbg !57
  %111 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !57
  %s.0.i6 = select i1 %111, float 1.000000e+00, float %.03.i5, !dbg !57
  %112 = bitcast float %s.0.i6 to i32, !dbg !57
  %113 = and i32 %29, -2147483648, !dbg !57
  %114 = or i32 %113, %112, !dbg !57
  %115 = bitcast i32 %114 to float, !dbg !57
  br label %__nv_tanhf.exit19, !dbg !57

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %116 = fmul float %30, %30, !dbg !57
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not1.i9 = icmp eq i32 %117, 0, !dbg !57
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %116, float 0xBFAAC795C0000000) #5, !dbg !57
  %119 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %116, float 0xBFAAC795C0000000) #5, !dbg !57
  %.06.i10 = select i1 %.not1.i9, float %119, float %118, !dbg !57
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not2.i11 = icmp eq i32 %120, 0, !dbg !57
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %116, float 0x3FC10B2820000000) #5, !dbg !57
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %116, float 0x3FC10B2820000000) #5, !dbg !57
  %.05.i12 = select i1 %.not2.i11, float %122, float %121, !dbg !57
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not3.i13 = icmp eq i32 %123, 0, !dbg !57
  %124 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %116, float 0xBFD5553DA0000000) #5, !dbg !57
  %125 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %116, float 0xBFD5553DA0000000) #5, !dbg !57
  %.0.i14 = select i1 %.not3.i13, float %125, float %124, !dbg !57
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not4.i15 = icmp eq i32 %126, 0, !dbg !57
  %127 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %116, float 0.000000e+00) #5, !dbg !57
  %128 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %116, float 0.000000e+00) #5, !dbg !57
  %.04.i16 = select i1 %.not4.i15, float %128, float %127, !dbg !57
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not5.i17 = icmp eq i32 %129, 0, !dbg !57
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %30, float %30) #5, !dbg !57
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %30, float %30) #5, !dbg !57
  %.02.i18 = select i1 %.not5.i17, float %131, float %130, !dbg !57
  br label %__nv_tanhf.exit19, !dbg !57

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %115, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !57
  %132 = fmul float %s.1.i7, 0x3FF7154760000000, !dbg !58
  %133 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %132) #5, !dbg !58
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %133) #5, !dbg !59
  %135 = fsub float %35, %38, !dbg !60
  %136 = fmul float %135, %135, !dbg !61
  %137 = fsub float 0.000000e+00, %136, !dbg !62
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not.i20 = icmp eq i32 %138, 0, !dbg !63
  %139 = tail call float @llvm.nvvm.fabs.ftz.f(float %41) #5, !dbg !63
  %140 = tail call float @llvm.nvvm.fabs.f(float %41) #5, !dbg !63
  %.01.i21 = select i1 %.not.i20, float %140, float %139, !dbg !63
  %141 = fcmp ult float %.01.i21, 0x3FE3333340000000, !dbg !63
  br i1 %141, label %__internal_fmad.exit3.i27, label %__internal_fmad.exit1.i22, !dbg !63

__internal_fmad.exit1.i22:                        ; preds = %__nv_tanhf.exit19
  %142 = fmul float %.01.i21, 0x4007154760000000, !dbg !63
  %143 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %142) #5, !dbg !63
  %144 = fadd float %143, 1.000000e+00, !dbg !63
  %145 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %144) #6, !dbg !63, !srcloc !51
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not6.i23 = icmp eq i32 %146, 0, !dbg !63
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %145, float -2.000000e+00, float 1.000000e+00) #5, !dbg !63
  %148 = tail call float @llvm.nvvm.fma.rn.f(float %145, float -2.000000e+00, float 1.000000e+00) #5, !dbg !63
  %.03.i24 = select i1 %.not6.i23, float %148, float %147, !dbg !63
  %149 = fcmp oge float %.01.i21, 0x4022059680000000, !dbg !63
  %s.0.i25 = select i1 %149, float 1.000000e+00, float %.03.i24, !dbg !63
  %150 = bitcast float %s.0.i25 to i32, !dbg !63
  %151 = and i32 %40, -2147483648, !dbg !63
  %152 = or i32 %151, %150, !dbg !63
  %153 = bitcast i32 %152 to float, !dbg !63
  br label %__nv_tanhf.exit38, !dbg !63

__internal_fmad.exit3.i27:                        ; preds = %__nv_tanhf.exit19
  %154 = fmul float %41, %41, !dbg !63
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not1.i28 = icmp eq i32 %155, 0, !dbg !63
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %154, float 0xBFAAC795C0000000) #5, !dbg !63
  %157 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %154, float 0xBFAAC795C0000000) #5, !dbg !63
  %.06.i29 = select i1 %.not1.i28, float %157, float %156, !dbg !63
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not2.i30 = icmp eq i32 %158, 0, !dbg !63
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i29, float %154, float 0x3FC10B2820000000) #5, !dbg !63
  %160 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i29, float %154, float 0x3FC10B2820000000) #5, !dbg !63
  %.05.i31 = select i1 %.not2.i30, float %160, float %159, !dbg !63
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not3.i32 = icmp eq i32 %161, 0, !dbg !63
  %162 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i31, float %154, float 0xBFD5553DA0000000) #5, !dbg !63
  %163 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i31, float %154, float 0xBFD5553DA0000000) #5, !dbg !63
  %.0.i33 = select i1 %.not3.i32, float %163, float %162, !dbg !63
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not4.i34 = icmp eq i32 %164, 0, !dbg !63
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i33, float %154, float 0.000000e+00) #5, !dbg !63
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i33, float %154, float 0.000000e+00) #5, !dbg !63
  %.04.i35 = select i1 %.not4.i34, float %166, float %165, !dbg !63
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not5.i36 = icmp eq i32 %167, 0, !dbg !63
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i35, float %41, float %41) #5, !dbg !63
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i35, float %41, float %41) #5, !dbg !63
  %.02.i37 = select i1 %.not5.i36, float %169, float %168, !dbg !63
  br label %__nv_tanhf.exit38, !dbg !63

__nv_tanhf.exit38:                                ; preds = %__internal_fmad.exit1.i22, %__internal_fmad.exit3.i27
  %s.1.i26 = phi float [ %153, %__internal_fmad.exit1.i22 ], [ %.02.i37, %__internal_fmad.exit3.i27 ], !dbg !63
  %170 = fmul float %s.1.i26, 0x3FF7154760000000, !dbg !64
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #5, !dbg !64
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %171) #5, !dbg !65
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !66
  %.not.i39 = icmp eq i32 %173, 0, !dbg !66
  %174 = tail call float @llvm.nvvm.fabs.ftz.f(float %50) #5, !dbg !66
  %175 = tail call float @llvm.nvvm.fabs.f(float %50) #5, !dbg !66
  %.01.i40 = select i1 %.not.i39, float %175, float %174, !dbg !66
  %176 = fcmp ult float %.01.i40, 0x3FE3333340000000, !dbg !66
  br i1 %176, label %__internal_fmad.exit3.i46, label %__internal_fmad.exit1.i41, !dbg !66

__internal_fmad.exit1.i41:                        ; preds = %__nv_tanhf.exit38
  %177 = fmul float %.01.i40, 0x4007154760000000, !dbg !66
  %178 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %177) #5, !dbg !66
  %179 = fadd float %178, 1.000000e+00, !dbg !66
  %180 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %179) #6, !dbg !66, !srcloc !51
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !66
  %.not6.i42 = icmp eq i32 %181, 0, !dbg !66
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %180, float -2.000000e+00, float 1.000000e+00) #5, !dbg !66
  %183 = tail call float @llvm.nvvm.fma.rn.f(float %180, float -2.000000e+00, float 1.000000e+00) #5, !dbg !66
  %.03.i43 = select i1 %.not6.i42, float %183, float %182, !dbg !66
  %184 = fcmp oge float %.01.i40, 0x4022059680000000, !dbg !66
  %s.0.i44 = select i1 %184, float 1.000000e+00, float %.03.i43, !dbg !66
  %185 = bitcast float %s.0.i44 to i32, !dbg !66
  %186 = and i32 %49, -2147483648, !dbg !66
  %187 = or i32 %186, %185, !dbg !66
  %188 = bitcast i32 %187 to float, !dbg !66
  br label %__nv_tanhf.exit57, !dbg !66

__internal_fmad.exit3.i46:                        ; preds = %__nv_tanhf.exit38
  %189 = fmul float %50, %50, !dbg !66
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !66
  %.not1.i47 = icmp eq i32 %190, 0, !dbg !66
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %189, float 0xBFAAC795C0000000) #5, !dbg !66
  %192 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %189, float 0xBFAAC795C0000000) #5, !dbg !66
  %.06.i48 = select i1 %.not1.i47, float %192, float %191, !dbg !66
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !66
  %.not2.i49 = icmp eq i32 %193, 0, !dbg !66
  %194 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i48, float %189, float 0x3FC10B2820000000) #5, !dbg !66
  %195 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i48, float %189, float 0x3FC10B2820000000) #5, !dbg !66
  %.05.i50 = select i1 %.not2.i49, float %195, float %194, !dbg !66
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !66
  %.not3.i51 = icmp eq i32 %196, 0, !dbg !66
  %197 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i50, float %189, float 0xBFD5553DA0000000) #5, !dbg !66
  %198 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i50, float %189, float 0xBFD5553DA0000000) #5, !dbg !66
  %.0.i52 = select i1 %.not3.i51, float %198, float %197, !dbg !66
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !66
  %.not4.i53 = icmp eq i32 %199, 0, !dbg !66
  %200 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i52, float %189, float 0.000000e+00) #5, !dbg !66
  %201 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i52, float %189, float 0.000000e+00) #5, !dbg !66
  %.04.i54 = select i1 %.not4.i53, float %201, float %200, !dbg !66
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !66
  %.not5.i55 = icmp eq i32 %202, 0, !dbg !66
  %203 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i54, float %50, float %50) #5, !dbg !66
  %204 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i54, float %50, float %50) #5, !dbg !66
  %.02.i56 = select i1 %.not5.i55, float %204, float %203, !dbg !66
  br label %__nv_tanhf.exit57, !dbg !66

__nv_tanhf.exit57:                                ; preds = %__internal_fmad.exit1.i41, %__internal_fmad.exit3.i46
  %s.1.i45 = phi float [ %188, %__internal_fmad.exit1.i41 ], [ %.02.i56, %__internal_fmad.exit3.i46 ], !dbg !66
  %205 = bitcast i32 %45 to float, !dbg !34
  %206 = bitcast i32 %47 to float, !dbg !36
  %207 = fsub float %205, %206, !dbg !67
  %208 = fmul float %207, %207, !dbg !68
  %209 = fsub float 0.000000e+00, %208, !dbg !69
  %210 = bitcast i32 %58 to float, !dbg !46
  %211 = bitcast i32 %56 to float, !dbg !44
  %212 = bitcast i32 %54 to float, !dbg !42
  %213 = bitcast i32 %52 to float, !dbg !40
  %214 = lshr i32 %7, 5, !dbg !10
  %215 = and i32 %7, 31, !dbg !10
  %216 = fmul float %s.1.i45, 0x3FF7154760000000, !dbg !70
  %217 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %216) #5, !dbg !70
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %217) #5, !dbg !71
  %219 = fsub float %13, %213, !dbg !72
  %220 = fmul float %219, %219, !dbg !73
  %221 = fsub float 0.000000e+00, %220, !dbg !74
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %95) #5, !dbg !75
  %223 = fsub float %24, %212, !dbg !76
  %224 = fmul float %223, %223, !dbg !77
  %225 = fsub float 0.000000e+00, %224, !dbg !78
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %133) #5, !dbg !79
  %227 = fsub float %35, %211, !dbg !80
  %228 = fmul float %227, %227, !dbg !81
  %229 = fsub float 0.000000e+00, %228, !dbg !82
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %171) #5, !dbg !83
  %231 = fsub float %205, %210, !dbg !84
  %232 = fmul float %231, %231, !dbg !85
  %233 = fsub float 0.000000e+00, %232, !dbg !86
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %217) #5, !dbg !87
  %235 = insertelement <2 x float> poison, float %96, i64 0, !dbg !88
  %236 = insertelement <2 x float> %235, float %222, i64 1, !dbg !88
  %237 = insertelement <2 x float> poison, float %134, i64 0, !dbg !88
  %238 = insertelement <2 x float> %237, float %226, i64 1, !dbg !88
  %239 = fadd <2 x float> %236, %238, !dbg !88
  %240 = insertelement <2 x float> poison, float %172, i64 0, !dbg !89
  %241 = insertelement <2 x float> %240, float %230, i64 1, !dbg !89
  %242 = fadd <2 x float> %239, %241, !dbg !89
  %243 = insertelement <2 x float> poison, float %218, i64 0, !dbg !90
  %244 = insertelement <2 x float> %243, float %234, i64 1, !dbg !90
  %245 = fadd <2 x float> %242, %244, !dbg !90
  %shift = shufflevector <2 x float> %245, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !91
  %246 = fsub <2 x float> %245, %shift, !dbg !91
  %247 = extractelement <2 x float> %246, i64 0, !dbg !91
  %248 = bitcast float %247 to i32, !dbg !92
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 16, i32 31), !dbg !92
  %250 = bitcast i32 %249 to float, !dbg !92
  %251 = fadd float %247, %250, !dbg !96
  %252 = bitcast float %251 to i32, !dbg !92
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 8, i32 31), !dbg !92
  %254 = bitcast i32 %253 to float, !dbg !92
  %255 = fadd float %251, %254, !dbg !96
  %256 = bitcast float %255 to i32, !dbg !92
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !92
  %258 = bitcast i32 %257 to float, !dbg !92
  %259 = fadd float %255, %258, !dbg !96
  %260 = bitcast float %259 to i32, !dbg !92
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 2, i32 31), !dbg !92
  %262 = bitcast i32 %261 to float, !dbg !92
  %263 = fadd float %259, %262, !dbg !96
  %264 = bitcast float %263 to i32, !dbg !92
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !92
  %266 = bitcast i32 %265 to float, !dbg !92
  %267 = fadd float %263, %266, !dbg !96
  %268 = icmp eq i32 %215, 0, !dbg !92
  %269 = and i32 %214, 1, !dbg !92
  %270 = zext nneg i32 %269 to i64, !dbg !92
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i64 %270, !dbg !92
  %272 = bitcast float %267 to <1 x i32>, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 %268) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %273 = icmp slt i32 %7, 2, !dbg !92
  %274 = sext i32 %7 to i64, !dbg !92
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i64 %274, !dbg !92
  %276 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %275, i1 %273) #5, !dbg !92
  %277 = bitcast i32 %276 to float, !dbg !92
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !92
  %279 = bitcast i32 %278 to float, !dbg !92
  %280 = fadd float %277, %279, !dbg !96
  %281 = and i32 %7, 1, !dbg !92
  %282 = icmp eq i32 %281, 0, !dbg !92
  %283 = and i1 %273, %282, !dbg !92
  %284 = bitcast float %280 to <1 x i32>, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %284, i1 %283) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %285 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !92
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float 6.400000e+01) #5, !dbg !98
  %287 = fmul float %286, 5.000000e-01, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %urem = and i32 %7, 63, !dbg !101
  %288 = icmp eq i32 %urem, 0, !dbg !101
  %289 = bitcast float %287 to i32, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %0, i1 %288) #5, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cglrkfeiqad3ujtq4uoa3wylbw7fhy6kf7t2nzx7xegsxjkkkam2.py", directory: "inductor_cache/gl")
!4 = !{ptr @triton_per_fused_div_exp_mean_neg_pow_sub_sum_tanh_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_exp_mean_neg_pow_sub_sum_tanh_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_exp_mean_neg_pow_sub_sum_tanh_1", linkageName: "triton_per_fused_div_exp_mean_neg_pow_sub_sum_tanh_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 32, scope: !7)
!12 = !DILocation(line: 30, column: 30, scope: !7)
!13 = !DILocation(line: 30, column: 37, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 37, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 37, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 41, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 42, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 42, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 42, scope: !7)
!32 = !DILocation(line: 39, column: 35, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 42, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 42, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 42, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 38, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 42, scope: !7)
!43 = !DILocation(line: 44, column: 31, scope: !7)
!44 = !DILocation(line: 44, column: 42, scope: !7)
!45 = !DILocation(line: 45, column: 31, scope: !7)
!46 = !DILocation(line: 45, column: 42, scope: !7)
!47 = !DILocation(line: 46, column: 18, scope: !7)
!48 = !DILocation(line: 47, column: 18, scope: !7)
!49 = !DILocation(line: 48, column: 12, scope: !7)
!50 = !DILocation(line: 49, column: 26, scope: !7)
!51 = !{i32 21046}
!52 = !DILocation(line: 50, column: 23, scope: !7)
!53 = !DILocation(line: 51, column: 18, scope: !7)
!54 = !DILocation(line: 52, column: 19, scope: !7)
!55 = !DILocation(line: 53, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 13, scope: !7)
!57 = !DILocation(line: 55, column: 27, scope: !7)
!58 = !DILocation(line: 56, column: 24, scope: !7)
!59 = !DILocation(line: 57, column: 20, scope: !7)
!60 = !DILocation(line: 59, column: 20, scope: !7)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 13, scope: !7)
!63 = !DILocation(line: 62, column: 27, scope: !7)
!64 = !DILocation(line: 63, column: 24, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 27, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 13, scope: !7)
!70 = !DILocation(line: 70, column: 24, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 73, column: 19, scope: !7)
!73 = !DILocation(line: 74, column: 20, scope: !7)
!74 = !DILocation(line: 75, column: 13, scope: !7)
!75 = !DILocation(line: 76, column: 20, scope: !7)
!76 = !DILocation(line: 77, column: 19, scope: !7)
!77 = !DILocation(line: 78, column: 20, scope: !7)
!78 = !DILocation(line: 79, column: 13, scope: !7)
!79 = !DILocation(line: 80, column: 20, scope: !7)
!80 = !DILocation(line: 82, column: 20, scope: !7)
!81 = !DILocation(line: 83, column: 20, scope: !7)
!82 = !DILocation(line: 84, column: 13, scope: !7)
!83 = !DILocation(line: 85, column: 20, scope: !7)
!84 = !DILocation(line: 87, column: 20, scope: !7)
!85 = !DILocation(line: 88, column: 20, scope: !7)
!86 = !DILocation(line: 89, column: 13, scope: !7)
!87 = !DILocation(line: 90, column: 20, scope: !7)
!88 = !DILocation(line: 58, column: 19, scope: !7)
!89 = !DILocation(line: 65, column: 20, scope: !7)
!90 = !DILocation(line: 72, column: 20, scope: !7)
!91 = !DILocation(line: 92, column: 20, scope: !7)
!92 = !DILocation(line: 267, column: 36, scope: !93, inlinedAt: !95)
!93 = distinct !DILexicalBlockFile(scope: !7, file: !94, discriminator: 0)
!94 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!95 = !DILocation(line: 94, column: 26, scope: !7)
!96 = !DILocation(line: 256, column: 15, scope: !97, inlinedAt: !95)
!97 = distinct !DILexicalBlockFile(scope: !93, file: !94, discriminator: 0)
!98 = !DILocation(line: 96, column: 20, scope: !7)
!99 = !DILocation(line: 98, column: 20, scope: !7)
!100 = !DILocation(line: 99, column: 4, scope: !7)
!101 = !DILocation(line: 100, column: 71, scope: !7)
!102 = !DILocation(line: 100, column: 4, scope: !7)
