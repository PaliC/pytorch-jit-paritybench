; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_mul_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 131072, !dbg !14
  %.frozen1 = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen1, 131072, !dbg !14
  %14 = mul i32 %12, 131072, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = mul i32 %13, 131072, !dbg !15
  %.decomposed2 = sub i32 %.frozen1, %15, !dbg !15
  %16 = sdiv i32 %10, 4096, !dbg !16
  %17 = sdiv i32 %11, 4096, !dbg !16
  %18 = srem i32 %16, 32, !dbg !17
  %19 = srem i32 %17, 32, !dbg !17
  %20 = shl i32 %12, 18, !dbg !18
  %21 = shl i32 %13, 18, !dbg !18
  %22 = add i32 %20, %.decomposed, !dbg !19
  %23 = add i32 %21, %.decomposed2, !dbg !19
  %24 = sext i32 %22 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = sext i32 %23 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = bitcast i32 %32 to float, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !21
  %42 = bitcast i32 %38 to float, !dbg !21
  %43 = bitcast i32 %39 to float, !dbg !21
  %44 = bitcast i32 %40 to float, !dbg !21
  %45 = bitcast i32 %41 to float, !dbg !21
  %46 = shl nsw i32 %12, 6, !dbg !22
  %47 = shl nsw i32 %13, 6, !dbg !22
  %48 = add nsw i32 %18, %46, !dbg !23
  %49 = add nsw i32 %19, %47, !dbg !23
  %50 = sext i32 %48 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !24
  %52 = sext i32 %49 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !25
  %61 = bitcast i32 %60 to float, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !25
  %63 = bitcast i32 %62 to float, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !25
  %67 = bitcast i32 %66 to float, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = getelementptr i8, ptr addrspace(1) %51, i64 128, !dbg !26
  %71 = getelementptr i8, ptr addrspace(1) %53, i64 128, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %77 = bitcast i32 %76 to float, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !27
  %81 = bitcast i32 %80 to float, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !27
  %83 = bitcast i32 %82 to float, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !27
  %85 = bitcast i32 %84 to float, !dbg !27
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = add i32 %22, 131072, !dbg !28
  %89 = add i32 %23, 131072, !dbg !28
  %90 = sext i32 %88 to i64, !dbg !29
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !29
  %92 = sext i32 %89 to i64, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !29
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !30
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !30
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !30
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !30
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !30
  %99 = bitcast i32 %95 to float, !dbg !30
  %100 = bitcast i32 %96 to float, !dbg !30
  %101 = bitcast i32 %97 to float, !dbg !30
  %102 = bitcast i32 %98 to float, !dbg !30
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !30
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !30
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !30
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !30
  %108 = bitcast i32 %104 to float, !dbg !30
  %109 = bitcast i32 %105 to float, !dbg !30
  %110 = bitcast i32 %106 to float, !dbg !30
  %111 = bitcast i32 %107 to float, !dbg !30
  %112 = fcmp ogt float %55, %73, !dbg !31
  %113 = fcmp ogt float %57, %75, !dbg !31
  %114 = fcmp ogt float %59, %77, !dbg !31
  %115 = fcmp ogt float %61, %79, !dbg !31
  %116 = fcmp ogt float %63, %81, !dbg !31
  %117 = fcmp ogt float %65, %83, !dbg !31
  %118 = fcmp ogt float %67, %85, !dbg !31
  %119 = fcmp ogt float %69, %87, !dbg !31
  %120 = fcmp uno float %55, 0.000000e+00, !dbg !35
  %121 = fcmp uno float %57, 0.000000e+00, !dbg !35
  %122 = fcmp uno float %59, 0.000000e+00, !dbg !35
  %123 = fcmp uno float %61, 0.000000e+00, !dbg !35
  %124 = fcmp uno float %63, 0.000000e+00, !dbg !35
  %125 = fcmp uno float %65, 0.000000e+00, !dbg !35
  %126 = fcmp uno float %67, 0.000000e+00, !dbg !35
  %127 = fcmp uno float %69, 0.000000e+00, !dbg !35
  %128 = or i1 %120, %112, !dbg !36
  %129 = or i1 %121, %113, !dbg !36
  %130 = or i1 %122, %114, !dbg !36
  %131 = or i1 %123, %115, !dbg !36
  %132 = or i1 %124, %116, !dbg !36
  %133 = or i1 %125, %117, !dbg !36
  %134 = or i1 %126, %118, !dbg !36
  %135 = or i1 %127, %119, !dbg !36
  %136 = select i1 %128, float %55, float %73, !dbg !37
  %137 = select i1 %129, float %57, float %75, !dbg !37
  %138 = select i1 %130, float %59, float %77, !dbg !37
  %139 = select i1 %131, float %61, float %79, !dbg !37
  %140 = select i1 %132, float %63, float %81, !dbg !37
  %141 = select i1 %133, float %65, float %83, !dbg !37
  %142 = select i1 %134, float %67, float %85, !dbg !37
  %143 = select i1 %135, float %69, float %87, !dbg !37
  %144 = fsub float %55, %136, !dbg !38
  %145 = fsub float %57, %137, !dbg !38
  %146 = fsub float %59, %138, !dbg !38
  %147 = fsub float %61, %139, !dbg !38
  %148 = fsub float %63, %140, !dbg !38
  %149 = fsub float %65, %141, !dbg !38
  %150 = fsub float %67, %142, !dbg !38
  %151 = fsub float %69, %143, !dbg !38
  %152 = fmul float %144, 0x3FF7154760000000, !dbg !39
  %153 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %152) #1, !dbg !39
  %154 = fmul float %145, 0x3FF7154760000000, !dbg !39
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %154) #1, !dbg !39
  %156 = fmul float %146, 0x3FF7154760000000, !dbg !39
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #1, !dbg !39
  %158 = fmul float %147, 0x3FF7154760000000, !dbg !39
  %159 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %158) #1, !dbg !39
  %160 = fmul float %148, 0x3FF7154760000000, !dbg !39
  %161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %160) #1, !dbg !39
  %162 = fmul float %149, 0x3FF7154760000000, !dbg !39
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #1, !dbg !39
  %164 = fmul float %150, 0x3FF7154760000000, !dbg !39
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #1, !dbg !39
  %166 = fmul float %151, 0x3FF7154760000000, !dbg !39
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #1, !dbg !39
  %168 = fsub float %73, %136, !dbg !40
  %169 = fsub float %75, %137, !dbg !40
  %170 = fsub float %77, %138, !dbg !40
  %171 = fsub float %79, %139, !dbg !40
  %172 = fsub float %81, %140, !dbg !40
  %173 = fsub float %83, %141, !dbg !40
  %174 = fsub float %85, %142, !dbg !40
  %175 = fsub float %87, %143, !dbg !40
  %176 = fmul float %168, 0x3FF7154760000000, !dbg !41
  %177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %176) #1, !dbg !41
  %178 = fmul float %169, 0x3FF7154760000000, !dbg !41
  %179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %178) #1, !dbg !41
  %180 = fmul float %170, 0x3FF7154760000000, !dbg !41
  %181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %180) #1, !dbg !41
  %182 = fmul float %171, 0x3FF7154760000000, !dbg !41
  %183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %182) #1, !dbg !41
  %184 = fmul float %172, 0x3FF7154760000000, !dbg !41
  %185 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %184) #1, !dbg !41
  %186 = fmul float %173, 0x3FF7154760000000, !dbg !41
  %187 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %186) #1, !dbg !41
  %188 = fmul float %174, 0x3FF7154760000000, !dbg !41
  %189 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %188) #1, !dbg !41
  %190 = fmul float %175, 0x3FF7154760000000, !dbg !41
  %191 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %190) #1, !dbg !41
  %192 = fadd float %153, %177, !dbg !42
  %193 = fadd float %155, %179, !dbg !42
  %194 = fadd float %157, %181, !dbg !42
  %195 = fadd float %159, %183, !dbg !42
  %196 = fadd float %161, %185, !dbg !42
  %197 = fadd float %163, %187, !dbg !42
  %198 = fadd float %165, %189, !dbg !42
  %199 = fadd float %167, %191, !dbg !42
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %192) #1, !dbg !43
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float %193) #1, !dbg !43
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %194) #1, !dbg !43
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %195) #1, !dbg !43
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float %196) #1, !dbg !43
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %197) #1, !dbg !43
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %198) #1, !dbg !43
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %199) #1, !dbg !43
  %208 = fmul float %200, %33, !dbg !44
  %209 = fmul float %201, %34, !dbg !44
  %210 = fmul float %202, %35, !dbg !44
  %211 = fmul float %203, %36, !dbg !44
  %212 = fmul float %204, %42, !dbg !44
  %213 = fmul float %205, %43, !dbg !44
  %214 = fmul float %206, %44, !dbg !44
  %215 = fmul float %207, %45, !dbg !44
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %192) #1, !dbg !45
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %193) #1, !dbg !45
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %194) #1, !dbg !45
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %195) #1, !dbg !45
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %196) #1, !dbg !45
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %197) #1, !dbg !45
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %198) #1, !dbg !45
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %199) #1, !dbg !45
  %224 = fmul float %216, %99, !dbg !46
  %225 = fmul float %217, %100, !dbg !46
  %226 = fmul float %218, %101, !dbg !46
  %227 = fmul float %219, %102, !dbg !46
  %228 = fmul float %220, %108, !dbg !46
  %229 = fmul float %221, %109, !dbg !46
  %230 = fmul float %222, %110, !dbg !46
  %231 = fmul float %223, %111, !dbg !46
  %232 = fadd float %208, %224, !dbg !47
  %233 = fadd float %209, %225, !dbg !47
  %234 = fadd float %210, %226, !dbg !47
  %235 = fadd float %211, %227, !dbg !47
  %236 = fadd float %212, %228, !dbg !47
  %237 = fadd float %213, %229, !dbg !47
  %238 = fadd float %214, %230, !dbg !47
  %239 = fadd float %215, %231, !dbg !47
  %240 = sext i32 %10 to i64, !dbg !48
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %240, !dbg !48
  %242 = sext i32 %11 to i64, !dbg !48
  %243 = getelementptr float, ptr addrspace(1) %2, i64 %242, !dbg !48
  %244 = bitcast float %232 to i32, !dbg !49
  %245 = bitcast float %233 to i32, !dbg !49
  %246 = bitcast float %234 to i32, !dbg !49
  %247 = bitcast float %235 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %245, i32 %246, i32 %247, ptr addrspace(1) %241, i1 true) #1, !dbg !49
  %248 = bitcast float %236 to i32, !dbg !49
  %249 = bitcast float %237 to i32, !dbg !49
  %250 = bitcast float %238 to i32, !dbg !49
  %251 = bitcast float %239 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %248, i32 %249, i32 %250, i32 %251, ptr addrspace(1) %243, i1 true) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c56z7bcgqcwzogw5sd2oxrqwnaceqmymbnl2owwu3rkkxeyvfs2g.py", directory: "inductor_cache/56")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_4", linkageName: "triton_poi_fused__softmax_mul_sum_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 28, column: 42, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 47, scope: !7)
!22 = !DILocation(line: 29, column: 38, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 43, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 48, scope: !7)
!28 = !DILocation(line: 31, column: 45, scope: !7)
!29 = !DILocation(line: 31, column: 31, scope: !7)
!30 = !DILocation(line: 31, column: 57, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 32, column: 40, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 33, column: 18, scope: !7)
!39 = !DILocation(line: 34, column: 23, scope: !7)
!40 = !DILocation(line: 35, column: 18, scope: !7)
!41 = !DILocation(line: 36, column: 23, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 19, scope: !7)
!45 = !DILocation(line: 40, column: 19, scope: !7)
!46 = !DILocation(line: 41, column: 20, scope: !7)
!47 = !DILocation(line: 42, column: 20, scope: !7)
!48 = !DILocation(line: 43, column: 25, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 4, scope: !7)
