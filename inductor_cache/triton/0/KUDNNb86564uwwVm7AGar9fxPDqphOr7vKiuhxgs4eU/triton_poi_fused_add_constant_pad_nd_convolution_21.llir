; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_constant_pad_nd_convolution_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %12, 512, !dbg !13
  %17 = or disjoint i32 %12, 513, !dbg !13
  %18 = or disjoint i32 %12, 514, !dbg !13
  %19 = or disjoint i32 %12, 515, !dbg !13
  %20 = icmp slt i32 %12, 82944, !dbg !14
  %21 = icmp slt i32 %16, 82944, !dbg !14
  %22 = sdiv i32 %12, 9, !dbg !15
  %23 = sdiv i32 %13, 9, !dbg !15
  %24 = sdiv i32 %14, 9, !dbg !15
  %25 = sdiv i32 %15, 9, !dbg !15
  %26 = sdiv i32 %16, 9, !dbg !15
  %27 = sdiv i32 %17, 9, !dbg !15
  %28 = sdiv i32 %18, 9, !dbg !15
  %29 = sdiv i32 %19, 9, !dbg !15
  %30 = sdiv i32 %12, 81, !dbg !16
  %31 = sdiv i32 %13, 81, !dbg !16
  %32 = sdiv i32 %14, 81, !dbg !16
  %33 = sdiv i32 %15, 81, !dbg !16
  %34 = sdiv i32 %16, 81, !dbg !16
  %35 = sdiv i32 %17, 81, !dbg !16
  %36 = sdiv i32 %18, 81, !dbg !16
  %37 = sdiv i32 %19, 81, !dbg !16
  %38 = srem i32 %30, 256, !dbg !17
  %39 = srem i32 %31, 256, !dbg !17
  %40 = srem i32 %32, 256, !dbg !17
  %41 = srem i32 %33, 256, !dbg !17
  %42 = srem i32 %34, 256, !dbg !17
  %43 = srem i32 %35, 256, !dbg !17
  %44 = srem i32 %36, 256, !dbg !17
  %45 = srem i32 %37, 256, !dbg !17
  %46 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %47 = insertelement <2 x i32> %46, i32 %22, i64 1, !dbg !18
  %48 = srem <2 x i32> %47, splat (i32 9), !dbg !18
  %49 = icmp slt <2 x i32> %48, splat (i32 8), !dbg !19
  %50 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %51 = insertelement <2 x i32> %50, i32 %23, i64 1, !dbg !18
  %52 = srem <2 x i32> %51, splat (i32 9), !dbg !18
  %53 = icmp slt <2 x i32> %52, splat (i32 8), !dbg !19
  %54 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !18
  %55 = insertelement <2 x i32> %54, i32 %24, i64 1, !dbg !18
  %56 = srem <2 x i32> %55, splat (i32 9), !dbg !18
  %57 = icmp slt <2 x i32> %56, splat (i32 8), !dbg !19
  %58 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !18
  %59 = insertelement <2 x i32> %58, i32 %25, i64 1, !dbg !18
  %60 = srem <2 x i32> %59, splat (i32 9), !dbg !18
  %61 = icmp slt <2 x i32> %60, splat (i32 8), !dbg !19
  %62 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !18
  %63 = insertelement <2 x i32> %62, i32 %26, i64 1, !dbg !18
  %64 = srem <2 x i32> %63, splat (i32 9), !dbg !18
  %65 = icmp slt <2 x i32> %64, splat (i32 8), !dbg !19
  %66 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !18
  %67 = insertelement <2 x i32> %66, i32 %27, i64 1, !dbg !18
  %68 = srem <2 x i32> %67, splat (i32 9), !dbg !18
  %69 = icmp slt <2 x i32> %68, splat (i32 8), !dbg !19
  %70 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !18
  %71 = insertelement <2 x i32> %70, i32 %28, i64 1, !dbg !18
  %72 = srem <2 x i32> %71, splat (i32 9), !dbg !18
  %73 = icmp slt <2 x i32> %72, splat (i32 8), !dbg !19
  %74 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !18
  %75 = insertelement <2 x i32> %74, i32 %29, i64 1, !dbg !18
  %76 = srem <2 x i32> %75, splat (i32 9), !dbg !18
  %77 = icmp slt <2 x i32> %76, splat (i32 8), !dbg !19
  %shift = shufflevector <2 x i1> %49, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %78 = and <2 x i1> %49, %shift, !dbg !20
  %79 = extractelement <2 x i1> %78, i64 0, !dbg !20
  %shift1 = shufflevector <2 x i1> %53, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %80 = and <2 x i1> %53, %shift1, !dbg !20
  %81 = extractelement <2 x i1> %80, i64 0, !dbg !20
  %shift2 = shufflevector <2 x i1> %57, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %82 = and <2 x i1> %57, %shift2, !dbg !20
  %83 = extractelement <2 x i1> %82, i64 0, !dbg !20
  %shift3 = shufflevector <2 x i1> %61, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %84 = and <2 x i1> %61, %shift3, !dbg !20
  %85 = extractelement <2 x i1> %84, i64 0, !dbg !20
  %shift4 = shufflevector <2 x i1> %65, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %86 = and <2 x i1> %65, %shift4, !dbg !20
  %87 = extractelement <2 x i1> %86, i64 0, !dbg !20
  %shift5 = shufflevector <2 x i1> %69, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %88 = and <2 x i1> %69, %shift5, !dbg !20
  %89 = extractelement <2 x i1> %88, i64 0, !dbg !20
  %shift6 = shufflevector <2 x i1> %73, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %90 = and <2 x i1> %73, %shift6, !dbg !20
  %91 = extractelement <2 x i1> %90, i64 0, !dbg !20
  %shift7 = shufflevector <2 x i1> %77, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %92 = and <2 x i1> %77, %shift7, !dbg !20
  %93 = extractelement <2 x i1> %92, i64 0, !dbg !20
  %94 = extractelement <2 x i32> %48, i64 1, !dbg !21
  %95 = shl nsw i32 %94, 3, !dbg !21
  %96 = extractelement <2 x i32> %52, i64 1, !dbg !21
  %97 = shl nsw i32 %96, 3, !dbg !21
  %98 = extractelement <2 x i32> %56, i64 1, !dbg !21
  %99 = shl nsw i32 %98, 3, !dbg !21
  %100 = extractelement <2 x i32> %60, i64 1, !dbg !21
  %101 = shl nsw i32 %100, 3, !dbg !21
  %102 = extractelement <2 x i32> %64, i64 1, !dbg !21
  %103 = shl nsw i32 %102, 3, !dbg !21
  %104 = extractelement <2 x i32> %68, i64 1, !dbg !21
  %105 = shl nsw i32 %104, 3, !dbg !21
  %106 = extractelement <2 x i32> %72, i64 1, !dbg !21
  %107 = shl nsw i32 %106, 3, !dbg !21
  %108 = extractelement <2 x i32> %76, i64 1, !dbg !21
  %109 = shl nsw i32 %108, 3, !dbg !21
  %110 = shl nsw i32 %30, 6, !dbg !22
  %111 = shl nsw i32 %31, 6, !dbg !22
  %112 = shl nsw i32 %32, 6, !dbg !22
  %113 = shl nsw i32 %33, 6, !dbg !22
  %114 = shl nsw i32 %34, 6, !dbg !22
  %115 = shl nsw i32 %35, 6, !dbg !22
  %116 = shl nsw i32 %36, 6, !dbg !22
  %117 = shl nsw i32 %37, 6, !dbg !22
  %118 = extractelement <2 x i32> %48, i64 0, !dbg !23
  %119 = add nsw i32 %110, %118, !dbg !23
  %120 = add nsw i32 %119, %95, !dbg !24
  %121 = extractelement <2 x i32> %52, i64 0, !dbg !23
  %122 = add nsw i32 %111, %121, !dbg !23
  %123 = add nsw i32 %122, %97, !dbg !24
  %124 = extractelement <2 x i32> %56, i64 0, !dbg !23
  %125 = add nsw i32 %112, %124, !dbg !23
  %126 = add nsw i32 %125, %99, !dbg !24
  %127 = extractelement <2 x i32> %60, i64 0, !dbg !23
  %128 = add nsw i32 %113, %127, !dbg !23
  %129 = add nsw i32 %128, %101, !dbg !24
  %130 = extractelement <2 x i32> %64, i64 0, !dbg !23
  %131 = add nsw i32 %114, %130, !dbg !23
  %132 = add nsw i32 %131, %103, !dbg !24
  %133 = extractelement <2 x i32> %68, i64 0, !dbg !23
  %134 = add nsw i32 %115, %133, !dbg !23
  %135 = add nsw i32 %134, %105, !dbg !24
  %136 = extractelement <2 x i32> %72, i64 0, !dbg !23
  %137 = add nsw i32 %116, %136, !dbg !23
  %138 = add nsw i32 %137, %107, !dbg !24
  %139 = extractelement <2 x i32> %76, i64 0, !dbg !23
  %140 = add nsw i32 %117, %139, !dbg !23
  %141 = add nsw i32 %140, %109, !dbg !24
  %142 = sext i32 %120 to i64, !dbg !25
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !25
  %144 = sext i32 %123 to i64, !dbg !25
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !25
  %146 = sext i32 %126 to i64, !dbg !25
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !25
  %148 = sext i32 %129 to i64, !dbg !25
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !25
  %150 = sext i32 %132 to i64, !dbg !25
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !25
  %152 = sext i32 %135 to i64, !dbg !25
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !25
  %154 = sext i32 %138 to i64, !dbg !25
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !25
  %156 = sext i32 %141 to i64, !dbg !25
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !25
  %158 = and i1 %20, %79, !dbg !26
  %159 = and i1 %81, %20, !dbg !26
  %160 = and i1 %83, %20, !dbg !26
  %161 = and i1 %85, %20, !dbg !26
  %162 = and i1 %21, %87, !dbg !26
  %163 = and i1 %21, %89, !dbg !26
  %164 = and i1 %21, %91, !dbg !26
  %165 = and i1 %21, %93, !dbg !26
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %158, i32 0, i1 %158) #1, !dbg !27
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %159, i32 0, i1 %159) #1, !dbg !27
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %160, i32 0, i1 %160) #1, !dbg !27
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %161, i32 0, i1 %161) #1, !dbg !27
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %162, i32 0, i1 %162) #1, !dbg !27
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %163, i32 0, i1 %163) #1, !dbg !27
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %164, i32 0, i1 %164) #1, !dbg !27
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %165, i32 0, i1 %165) #1, !dbg !27
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !28
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !28
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !28
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !28
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !28
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !28
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !28
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !28
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %158, i32 0, i1 %158) #1, !dbg !29
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %159, i32 0, i1 %159) #1, !dbg !29
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %160, i32 0, i1 %160) #1, !dbg !29
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %161, i32 0, i1 %161) #1, !dbg !29
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %162, i32 0, i1 %162) #1, !dbg !29
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %163, i32 0, i1 %163) #1, !dbg !29
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %164, i32 0, i1 %164) #1, !dbg !29
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %165, i32 0, i1 %165) #1, !dbg !29
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !30
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !30
  %192 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !30
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !30
  %194 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !30
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !30
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !30
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !30
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %158, i32 0, i1 %158) #1, !dbg !31
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %159, i32 0, i1 %159) #1, !dbg !31
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %160, i32 0, i1 %160) #1, !dbg !31
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %161, i32 0, i1 %161) #1, !dbg !31
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %162, i32 0, i1 %162) #1, !dbg !31
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %163, i32 0, i1 %163) #1, !dbg !31
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %164, i32 0, i1 %164) #1, !dbg !31
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %165, i32 0, i1 %165) #1, !dbg !31
  %206 = sext i32 %38 to i64, !dbg !32
  %207 = getelementptr float, ptr addrspace(1) %3, i64 %206, !dbg !32
  %208 = sext i32 %39 to i64, !dbg !32
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %208, !dbg !32
  %210 = sext i32 %40 to i64, !dbg !32
  %211 = getelementptr float, ptr addrspace(1) %3, i64 %210, !dbg !32
  %212 = sext i32 %41 to i64, !dbg !32
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %212, !dbg !32
  %214 = sext i32 %42 to i64, !dbg !32
  %215 = getelementptr float, ptr addrspace(1) %3, i64 %214, !dbg !32
  %216 = sext i32 %43 to i64, !dbg !32
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %216, !dbg !32
  %218 = sext i32 %44 to i64, !dbg !32
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !32
  %220 = sext i32 %45 to i64, !dbg !32
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %220, !dbg !32
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %158, i32 0, i1 %158) #1, !dbg !33
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %159, i32 0, i1 %159) #1, !dbg !33
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %160, i32 0, i1 %160) #1, !dbg !33
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %161, i32 0, i1 %161) #1, !dbg !33
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %162, i32 0, i1 %162) #1, !dbg !33
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %163, i32 0, i1 %163) #1, !dbg !33
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %164, i32 0, i1 %164) #1, !dbg !33
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %165, i32 0, i1 %165) #1, !dbg !33
  %230 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !27
  %231 = insertelement <2 x i32> %230, i32 %198, i64 1, !dbg !27
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !27
  %233 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !29
  %234 = insertelement <2 x i32> %233, i32 %222, i64 1, !dbg !29
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !29
  %236 = fadd <2 x float> %232, %235, !dbg !34
  %237 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !27
  %238 = insertelement <2 x i32> %237, i32 %199, i64 1, !dbg !27
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !27
  %240 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !29
  %241 = insertelement <2 x i32> %240, i32 %223, i64 1, !dbg !29
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !29
  %243 = fadd <2 x float> %239, %242, !dbg !34
  %244 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !27
  %245 = insertelement <2 x i32> %244, i32 %200, i64 1, !dbg !27
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !27
  %247 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !29
  %248 = insertelement <2 x i32> %247, i32 %224, i64 1, !dbg !29
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !29
  %250 = fadd <2 x float> %246, %249, !dbg !34
  %251 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !27
  %252 = insertelement <2 x i32> %251, i32 %201, i64 1, !dbg !27
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !27
  %254 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !29
  %255 = insertelement <2 x i32> %254, i32 %225, i64 1, !dbg !29
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !29
  %257 = fadd <2 x float> %253, %256, !dbg !34
  %258 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !27
  %259 = insertelement <2 x i32> %258, i32 %202, i64 1, !dbg !27
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !27
  %261 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !29
  %262 = insertelement <2 x i32> %261, i32 %226, i64 1, !dbg !29
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !29
  %264 = fadd <2 x float> %260, %263, !dbg !34
  %265 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !27
  %266 = insertelement <2 x i32> %265, i32 %203, i64 1, !dbg !27
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !27
  %268 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !29
  %269 = insertelement <2 x i32> %268, i32 %227, i64 1, !dbg !29
  %270 = bitcast <2 x i32> %269 to <2 x float>, !dbg !29
  %271 = fadd <2 x float> %267, %270, !dbg !34
  %272 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !27
  %273 = insertelement <2 x i32> %272, i32 %204, i64 1, !dbg !27
  %274 = bitcast <2 x i32> %273 to <2 x float>, !dbg !27
  %275 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !29
  %276 = insertelement <2 x i32> %275, i32 %228, i64 1, !dbg !29
  %277 = bitcast <2 x i32> %276 to <2 x float>, !dbg !29
  %278 = fadd <2 x float> %274, %277, !dbg !34
  %279 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !27
  %280 = insertelement <2 x i32> %279, i32 %205, i64 1, !dbg !27
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !27
  %282 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !29
  %283 = insertelement <2 x i32> %282, i32 %229, i64 1, !dbg !29
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !29
  %285 = fadd <2 x float> %281, %284, !dbg !34
  %shift8 = shufflevector <2 x float> %236, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %286 = fadd <2 x float> %236, %shift8, !dbg !35
  %shift9 = shufflevector <2 x float> %243, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %287 = fadd <2 x float> %243, %shift9, !dbg !35
  %shift10 = shufflevector <2 x float> %250, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %288 = fadd <2 x float> %250, %shift10, !dbg !35
  %shift11 = shufflevector <2 x float> %257, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %289 = fadd <2 x float> %257, %shift11, !dbg !35
  %shift12 = shufflevector <2 x float> %264, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %290 = fadd <2 x float> %264, %shift12, !dbg !35
  %shift13 = shufflevector <2 x float> %271, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %291 = fadd <2 x float> %271, %shift13, !dbg !35
  %shift14 = shufflevector <2 x float> %278, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %292 = fadd <2 x float> %278, %shift14, !dbg !35
  %shift15 = shufflevector <2 x float> %285, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %293 = fadd <2 x float> %285, %shift15, !dbg !35
  %294 = sext i32 %12 to i64, !dbg !36
  %295 = getelementptr float, ptr addrspace(1) %4, i64 %294, !dbg !36
  %296 = sext i32 %16 to i64, !dbg !36
  %297 = getelementptr float, ptr addrspace(1) %4, i64 %296, !dbg !36
  %bc = bitcast <2 x float> %286 to <2 x i32>, !dbg !37
  %298 = extractelement <2 x i32> %bc, i64 0, !dbg !37
  %299 = select i1 %79, i32 %298, i32 0, !dbg !38
  %bc16 = bitcast <2 x float> %287 to <2 x i32>, !dbg !37
  %300 = extractelement <2 x i32> %bc16, i64 0, !dbg !37
  %301 = select i1 %81, i32 %300, i32 0, !dbg !38
  %bc17 = bitcast <2 x float> %288 to <2 x i32>, !dbg !37
  %302 = extractelement <2 x i32> %bc17, i64 0, !dbg !37
  %303 = select i1 %83, i32 %302, i32 0, !dbg !38
  %bc18 = bitcast <2 x float> %289 to <2 x i32>, !dbg !37
  %304 = extractelement <2 x i32> %bc18, i64 0, !dbg !37
  %305 = select i1 %85, i32 %304, i32 0, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %299, i32 %301, i32 %303, i32 %305, ptr addrspace(1) %295, i1 %20) #1, !dbg !37
  %bc19 = bitcast <2 x float> %290 to <2 x i32>, !dbg !37
  %306 = extractelement <2 x i32> %bc19, i64 0, !dbg !37
  %307 = select i1 %87, i32 %306, i32 0, !dbg !38
  %bc20 = bitcast <2 x float> %291 to <2 x i32>, !dbg !37
  %308 = extractelement <2 x i32> %bc20, i64 0, !dbg !37
  %309 = select i1 %89, i32 %308, i32 0, !dbg !38
  %bc21 = bitcast <2 x float> %292 to <2 x i32>, !dbg !37
  %310 = extractelement <2 x i32> %bc21, i64 0, !dbg !37
  %311 = select i1 %91, i32 %310, i32 0, !dbg !38
  %bc22 = bitcast <2 x float> %293 to <2 x i32>, !dbg !37
  %312 = extractelement <2 x i32> %bc22, i64 0, !dbg !37
  %313 = select i1 %93, i32 %312, i32 0, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %309, i32 %311, i32 %313, ptr addrspace(1) %297, i1 %21) #1, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfa4lva3dfxhvancoqlljnkxc4jytz3wmcyc7xpi64dmeqog4mkl.py", directory: "inductor_cache/fa")
!4 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_constant_pad_nd_convolution_21", linkageName: "triton_poi_fused_add_constant_pad_nd_convolution_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 37, scope: !7)
!22 = !DILocation(line: 35, column: 45, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 57, scope: !7)
!27 = !DILocation(line: 35, column: 50, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 50, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 50, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 25, scope: !7)
!37 = !DILocation(line: 44, column: 37, scope: !7)
!38 = !DILocation(line: 43, column: 34, scope: !7)
!39 = !DILocation(line: 44, column: 4, scope: !7)
