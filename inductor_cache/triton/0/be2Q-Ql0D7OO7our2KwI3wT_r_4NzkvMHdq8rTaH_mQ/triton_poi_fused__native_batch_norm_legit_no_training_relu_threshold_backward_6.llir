; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 512, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = icmp slt i32 %17, 64, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen, 128, !dbg !17
  %20 = mul i32 %19, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %20, !dbg !18
  %21 = shl i32 %17, 7, !dbg !19
  %22 = add i32 %.decomposed, %21, !dbg !20
  %23 = shl i32 %19, 13, !dbg !21
  %24 = add i32 %22, %23, !dbg !22
  %25 = sext i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !23
  %27 = and i1 %18, %16, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %27) #4, !dbg !25
  %29 = sext i32 %.decomposed to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !26
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %16) #4, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !28
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #4, !dbg !29
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !29
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !29
  %36 = bitcast i32 %34 to float, !dbg !29
  %37 = bitcast i32 %35 to float, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !30
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %16) #4, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !32
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %16) #4, !dbg !33
  %42 = fadd float %36, 0x3EE4F8B580000000, !dbg !34
  %43 = fadd float %37, 0x3EE4F8B580000000, !dbg !34
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %44, 0, !dbg !35
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %45, 0, !dbg !35
  br i1 %.not.i, label %51, label %46, !dbg !35

46:                                               ; preds = %9
  br i1 %.not1.i, label %49, label %47, !dbg !35

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

51:                                               ; preds = %9
  br i1 %.not1.i, label %54, label %52, !dbg !35

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %47, %49, %52, %54
  %.0.i = phi float [ %48, %47 ], [ %50, %49 ], [ %53, %52 ], [ %55, %54 ], !dbg !35
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i3 = icmp eq i32 %56, 0, !dbg !35
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i6 = icmp eq i32 %57, 0, !dbg !35
  br i1 %.not.i3, label %63, label %58, !dbg !35

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %61, label %59, !dbg !35

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %66, label %64, !dbg !35

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

__nv_sqrtf.exit7:                                 ; preds = %59, %61, %64, %66
  %.0.i5 = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !35
  %68 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %69 = extractvalue { i32, i32 } %31, 1, !dbg !27
  %70 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %71 = extractvalue { i32, i32 } %31, 0, !dbg !27
  %72 = extractvalue { i32, i32 } %41, 1, !dbg !33
  %73 = extractvalue { i32, i32 } %41, 0, !dbg !33
  %74 = extractvalue { i32, i32 } %39, 1, !dbg !31
  %75 = extractvalue { i32, i32 } %39, 0, !dbg !31
  %76 = and i32 %12, 127, !dbg !12
  %77 = or disjoint i32 %76, 128, !dbg !12
  %78 = or disjoint i32 %11, %77, !dbg !13
  %79 = icmp slt i32 %78, 512, !dbg !14
  %80 = and i1 %18, %79, !dbg !24
  %81 = or disjoint i32 %11, %76, !dbg !13
  %82 = icmp slt i32 %81, 512, !dbg !14
  %83 = and i1 %18, %82, !dbg !24
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !36
  %86 = shl i32 %81, 6, !dbg !37
  %87 = shl i32 %78, 6, !dbg !37
  %88 = add i32 %86, %17, !dbg !38
  %89 = add i32 %87, %17, !dbg !38
  %90 = sext i32 %88 to i64, !dbg !39
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %90, !dbg !39
  %92 = sext i32 %89 to i64, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %92, !dbg !39
  %.idx = shl nuw nsw i32 %14, 3, !dbg !40
  %94 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !40
  %95 = shl nuw nsw i32 %14, 1, !dbg !40
  %96 = or disjoint i32 %95, 2, !dbg !40
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %96, !dbg !40
  %.idx1 = shl nuw nsw i32 %76, 3, !dbg !40
  %98 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !40
  %.idx2 = shl nuw nsw i32 %77, 3, !dbg !40
  %99 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !40
  %100 = getelementptr i1, ptr addrspace(1) %6, i64 %25, !dbg !41
  %101 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !25
  %102 = insertelement <2 x i32> %101, i32 %68, i64 1, !dbg !25
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !25
  %104 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !27
  %105 = insertelement <2 x i32> %104, i32 %69, i64 1, !dbg !27
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !27
  %107 = fsub <2 x float> %103, %106, !dbg !42
  %108 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !33
  %109 = insertelement <2 x i32> %108, i32 %72, i64 1, !dbg !33
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !33
  %111 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !31
  %112 = insertelement <2 x i32> %111, i32 %74, i64 1, !dbg !31
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !31
  %114 = insertelement <2 x float> poison, float %84, i64 0, !dbg !43
  %115 = insertelement <2 x float> %114, float %85, i64 1, !dbg !43
  %116 = fmul <2 x float> %107, %115, !dbg !43
  %117 = fmul <2 x float> %116, %113, !dbg !44
  %118 = fadd <2 x float> %117, %110, !dbg !45
  %119 = fcmp olt <2 x float> %118, zeroinitializer, !dbg !46
  %120 = select <2 x i1> %119, <2 x float> zeroinitializer, <2 x float> %118, !dbg !50
  %121 = fcmp ole <2 x float> %120, zeroinitializer, !dbg !51
  %122 = extractelement <2 x float> %120, i64 0, !dbg !40
  %123 = bitcast float %122 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %123, i1 true) #4, !dbg !40
  %124 = extractelement <2 x float> %120, i64 1, !dbg !40
  %125 = bitcast float %124 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %125, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %126 = load i32, ptr addrspace(3) %98, align 8, !dbg !40
  %127 = load i32, ptr addrspace(3) %99, align 8, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %91, i1 %83) #4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %93, i1 %80) #4, !dbg !40
  %128 = zext <2 x i1> %121 to <2 x i8>, !dbg !52
  %129 = bitcast <2 x i8> %128 to i16, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %129, ptr addrspace(1) %100, i1 %27) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyvsddgmuafnna4wgc575ky3ugerudkqjrthn5vllpssswt3o76c.py", directory: "inductor_cache/yv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 62, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 52, column: 33, scope: !7)
!38 = !DILocation(line: 52, column: 30, scope: !7)
!39 = !DILocation(line: 52, column: 25, scope: !7)
!40 = !DILocation(line: 52, column: 45, scope: !7)
!41 = !DILocation(line: 53, column: 25, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 49, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 51, column: 21, scope: !7)
!52 = !DILocation(line: 53, column: 56, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
