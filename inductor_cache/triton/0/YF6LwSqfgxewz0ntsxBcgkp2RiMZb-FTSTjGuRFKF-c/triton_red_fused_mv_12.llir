; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = shl i32 %6, 12, !dbg !13
  %12 = zext nneg i32 %10 to i64, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !14
  %14 = or disjoint i64 %12, %13, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = or disjoint i64 %12, 2048, !dbg !20
  %28 = or disjoint i64 %27, %13, !dbg !15
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !18
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !19
  %41 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %42 = insertelement <2 x i32> %41, i32 %18, i64 1, !dbg !17
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !17
  %44 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %45 = insertelement <2 x i32> %44, i32 %24, i64 1, !dbg !19
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !19
  %47 = fmul <2 x float> %43, %46, !dbg !21
  %48 = fadd <2 x float> %47, zeroinitializer, !dbg !22
  %49 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !17
  %50 = insertelement <2 x i32> %49, i32 %32, i64 1, !dbg !17
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !17
  %52 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !19
  %53 = insertelement <2 x i32> %52, i32 %38, i64 1, !dbg !19
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !19
  %55 = fmul <2 x float> %51, %54, !dbg !21
  %56 = fadd <2 x float> %48, %55, !dbg !22
  %57 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %58 = insertelement <2 x i32> %57, i32 %19, i64 1, !dbg !17
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !17
  %60 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %61 = insertelement <2 x i32> %60, i32 %25, i64 1, !dbg !19
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !19
  %63 = fmul <2 x float> %59, %62, !dbg !21
  %64 = fadd <2 x float> %63, zeroinitializer, !dbg !22
  %65 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !17
  %66 = insertelement <2 x i32> %65, i32 %33, i64 1, !dbg !17
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !17
  %68 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %69 = insertelement <2 x i32> %68, i32 %39, i64 1, !dbg !19
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !19
  %71 = fmul <2 x float> %67, %70, !dbg !21
  %72 = fadd <2 x float> %64, %71, !dbg !22
  %73 = lshr i32 %8, 5, !dbg !12
  %74 = and i32 %8, 31, !dbg !12
  %shift = shufflevector <2 x float> %56, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %75 = fadd <2 x float> %56, %shift, !dbg !23
  %shift4 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %76 = fadd <2 x float> %shift4, %75, !dbg !23
  %77 = fadd <2 x float> %72, %76, !dbg !23
  %78 = extractelement <2 x float> %77, i64 0, !dbg !23
  %79 = select i1 %7, float %78, float 0.000000e+00, !dbg !23
  %80 = bitcast float %79 to i32, !dbg !28
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = fadd float %79, %82, !dbg !23
  %84 = bitcast float %83 to i32, !dbg !28
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !28
  %86 = bitcast i32 %85 to float, !dbg !28
  %87 = fadd float %83, %86, !dbg !23
  %88 = bitcast float %87 to i32, !dbg !28
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !28
  %90 = bitcast i32 %89 to float, !dbg !28
  %91 = fadd float %87, %90, !dbg !23
  %92 = bitcast float %91 to i32, !dbg !28
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !28
  %94 = bitcast i32 %93 to float, !dbg !28
  %95 = fadd float %91, %94, !dbg !23
  %96 = bitcast float %95 to i32, !dbg !28
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !28
  %98 = bitcast i32 %97 to float, !dbg !28
  %99 = fadd float %95, %98, !dbg !23
  %100 = icmp eq i32 %74, 0, !dbg !28
  %101 = and i32 %73, 15, !dbg !28
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !28
  %103 = bitcast float %99 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 %100) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %104 = icmp slt i32 %8, 16, !dbg !28
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !28
  %106 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %105, i1 %104) #3, !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = fadd float %107, %109, !dbg !23
  %111 = bitcast float %110 to i32, !dbg !28
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = fadd float %110, %113, !dbg !23
  %115 = bitcast float %114 to i32, !dbg !28
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !28
  %117 = bitcast i32 %116 to float, !dbg !28
  %118 = fadd float %114, %117, !dbg !23
  %119 = bitcast float %118 to i32, !dbg !28
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = fadd float %118, %121, !dbg !23
  %123 = and i32 %8, 15, !dbg !28
  %124 = icmp eq i32 %123, 0, !dbg !28
  %125 = and i1 %104, %124, !dbg !28
  %126 = bitcast float %122 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %126, i1 %125) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %127 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %128 = sext i32 %6 to i64, !dbg !29
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !29
  %urem = and i32 %8, 511, !dbg !30
  %130 = icmp eq i32 %urem, 0, !dbg !30
  %131 = and i1 %130, %7, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %129, i1 %131) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cshe7iaeg4rfo3sptqh7ocf6dz4owapxdvxrbzir72qmuxcv6xhq.py", directory: "inductor_cache/sh")
!4 = !{ptr @triton_red_fused_mv_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_12, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_12", linkageName: "triton_red_fused_mv_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 49, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 27, scope: !7)
!21 = !DILocation(line: 34, column: 22, scope: !7)
!22 = !DILocation(line: 36, column: 23, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 38, column: 25, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 39, column: 25, scope: !7)
!30 = !DILocation(line: 39, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
