; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %20 = sdiv i32 %.frozen, 784, !dbg !14
  %.frozen77 = freeze i32 %19, !dbg !14
  %21 = sdiv i32 %.frozen77, 784, !dbg !14
  %22 = srem i32 %20, 192, !dbg !15
  %23 = srem i32 %21, 192, !dbg !15
  %24 = mul i32 %20, 784, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = mul i32 %21, 784, !dbg !16
  %.decomposed78 = sub i32 %.frozen77, %25, !dbg !16
  %.frozen79 = freeze i32 %18, !dbg !17
  %26 = sdiv i32 %.frozen79, 150528, !dbg !17
  %.frozen80 = freeze i32 %19, !dbg !17
  %27 = sdiv i32 %.frozen80, 150528, !dbg !17
  %28 = icmp slt i32 %22, 96, !dbg !18
  %29 = icmp slt i32 %23, 96, !dbg !18
  %30 = mul i32 %26, 150528, !dbg !19
  %srem.decomposed = sub i32 %.frozen79, %30, !dbg !19
  %31 = mul i32 %27, 150528, !dbg !19
  %srem1.decomposed = sub i32 %.frozen80, %31, !dbg !19
  %32 = mul nsw i32 %26, 75264, !dbg !20
  %33 = mul nsw i32 %27, 75264, !dbg !20
  %34 = add nsw i32 %32, %srem.decomposed, !dbg !21
  %35 = add nsw i32 %33, %srem1.decomposed, !dbg !21
  %36 = sext i32 %34 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = sext i32 %35 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !22
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !23
  %42 = sext i32 %22 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !24
  %44 = sext i32 %23 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %28, i32 0, i1 %28) #3, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %28, i32 0, i1 %28) #3, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %28, i32 0, i1 %28) #3, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %28, i32 0, i1 %28) #3, !dbg !25
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %29, i32 0, i1 %29) #3, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %29, i32 0, i1 %29) #3, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %29, i32 0, i1 %29) #3, !dbg !25
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %29, i32 0, i1 %29) #3, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %28, i32 0, i1 %28) #3, !dbg !27
  %57 = bitcast i32 %56 to float, !dbg !27
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %28, i32 0, i1 %28) #3, !dbg !27
  %59 = bitcast i32 %58 to float, !dbg !27
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %28, i32 0, i1 %28) #3, !dbg !27
  %61 = bitcast i32 %60 to float, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %28, i32 0, i1 %28) #3, !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %29, i32 0, i1 %29) #3, !dbg !27
  %65 = bitcast i32 %64 to float, !dbg !27
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %29, i32 0, i1 %29) #3, !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %29, i32 0, i1 %29) #3, !dbg !27
  %69 = bitcast i32 %68 to float, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %29, i32 0, i1 %29) #3, !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = fadd float %57, 0x3EE4F8B580000000, !dbg !28
  %73 = fadd float %59, 0x3EE4F8B580000000, !dbg !28
  %74 = fadd float %61, 0x3EE4F8B580000000, !dbg !28
  %75 = fadd float %63, 0x3EE4F8B580000000, !dbg !28
  %76 = fadd float %65, 0x3EE4F8B580000000, !dbg !28
  %77 = fadd float %67, 0x3EE4F8B580000000, !dbg !28
  %78 = fadd float %69, 0x3EE4F8B580000000, !dbg !28
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !28
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %80, 0, !dbg !29
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %81, 0, !dbg !29
  br i1 %.not.i, label %87, label %82, !dbg !29

82:                                               ; preds = %12
  br i1 %.not1.i, label %85, label %83, !dbg !29

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

87:                                               ; preds = %12
  br i1 %.not1.i, label %90, label %88, !dbg !29

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !29
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i2 = icmp eq i32 %92, 0, !dbg !29
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i5 = icmp eq i32 %93, 0, !dbg !29
  br i1 %.not.i2, label %99, label %94, !dbg !29

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %97, label %95, !dbg !29

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %102, label %100, !dbg !29

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

__nv_sqrtf.exit6:                                 ; preds = %95, %97, %100, %102
  %.0.i4 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !29
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i7 = icmp eq i32 %104, 0, !dbg !29
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i10 = icmp eq i32 %105, 0, !dbg !29
  br i1 %.not.i7, label %111, label %106, !dbg !29

106:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %109, label %107, !dbg !29

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !29
  br label %__nv_sqrtf.exit11, !dbg !29

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !29
  br label %__nv_sqrtf.exit11, !dbg !29

111:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %114, label %112, !dbg !29

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !29
  br label %__nv_sqrtf.exit11, !dbg !29

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !29
  br label %__nv_sqrtf.exit11, !dbg !29

__nv_sqrtf.exit11:                                ; preds = %107, %109, %112, %114
  %.0.i9 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !29
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i12 = icmp eq i32 %116, 0, !dbg !29
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i15 = icmp eq i32 %117, 0, !dbg !29
  br i1 %.not.i12, label %123, label %118, !dbg !29

118:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %121, label %119, !dbg !29

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

123:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %126, label %124, !dbg !29

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

__nv_sqrtf.exit16:                                ; preds = %119, %121, %124, %126
  %.0.i14 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !29
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i17 = icmp eq i32 %128, 0, !dbg !29
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i20 = icmp eq i32 %129, 0, !dbg !29
  br i1 %.not.i17, label %135, label %130, !dbg !29

130:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %133, label %131, !dbg !29

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !29
  br label %__nv_sqrtf.exit21, !dbg !29

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !29
  br label %__nv_sqrtf.exit21, !dbg !29

135:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %138, label %136, !dbg !29

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !29
  br label %__nv_sqrtf.exit21, !dbg !29

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !29
  br label %__nv_sqrtf.exit21, !dbg !29

__nv_sqrtf.exit21:                                ; preds = %131, %133, %136, %138
  %.0.i19 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !29
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i22 = icmp eq i32 %140, 0, !dbg !29
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i25 = icmp eq i32 %141, 0, !dbg !29
  br i1 %.not.i22, label %147, label %142, !dbg !29

142:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %145, label %143, !dbg !29

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !29
  br label %__nv_sqrtf.exit26, !dbg !29

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !29
  br label %__nv_sqrtf.exit26, !dbg !29

147:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %150, label %148, !dbg !29

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !29
  br label %__nv_sqrtf.exit26, !dbg !29

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !29
  br label %__nv_sqrtf.exit26, !dbg !29

__nv_sqrtf.exit26:                                ; preds = %143, %145, %148, %150
  %.0.i24 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !29
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i27 = icmp eq i32 %152, 0, !dbg !29
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i30 = icmp eq i32 %153, 0, !dbg !29
  br i1 %.not.i27, label %159, label %154, !dbg !29

154:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %157, label %155, !dbg !29

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !29
  br label %__nv_sqrtf.exit31, !dbg !29

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !29
  br label %__nv_sqrtf.exit31, !dbg !29

159:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %162, label %160, !dbg !29

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !29
  br label %__nv_sqrtf.exit31, !dbg !29

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !29
  br label %__nv_sqrtf.exit31, !dbg !29

__nv_sqrtf.exit31:                                ; preds = %155, %157, %160, %162
  %.0.i29 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !29
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i32 = icmp eq i32 %164, 0, !dbg !29
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i35 = icmp eq i32 %165, 0, !dbg !29
  br i1 %.not.i32, label %171, label %166, !dbg !29

166:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %169, label %167, !dbg !29

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !29
  br label %__nv_sqrtf.exit36, !dbg !29

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !29
  br label %__nv_sqrtf.exit36, !dbg !29

171:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %174, label %172, !dbg !29

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !29
  br label %__nv_sqrtf.exit36, !dbg !29

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !29
  br label %__nv_sqrtf.exit36, !dbg !29

__nv_sqrtf.exit36:                                ; preds = %167, %169, %172, %174
  %.0.i34 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !29
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !30
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !30
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !30
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !30
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !30
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !30
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !30
  %184 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !31
  %185 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !31
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %28, i32 0, i1 %28) #3, !dbg !32
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %28, i32 0, i1 %28) #3, !dbg !32
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %28, i32 0, i1 %28) #3, !dbg !32
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %28, i32 0, i1 %28) #3, !dbg !32
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %29, i32 0, i1 %29) #3, !dbg !32
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %29, i32 0, i1 %29) #3, !dbg !32
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %29, i32 0, i1 %29) #3, !dbg !32
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %29, i32 0, i1 %29) #3, !dbg !32
  %194 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !33
  %195 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !33
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %28, i32 0, i1 %28) #3, !dbg !34
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %28, i32 0, i1 %28) #3, !dbg !34
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %28, i32 0, i1 %28) #3, !dbg !34
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %28, i32 0, i1 %28) #3, !dbg !34
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %29, i32 0, i1 %29) #3, !dbg !34
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %29, i32 0, i1 %29) #3, !dbg !34
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %29, i32 0, i1 %29) #3, !dbg !34
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %29, i32 0, i1 %29) #3, !dbg !34
  %204 = icmp sgt i32 %22, 95, !dbg !35
  %205 = icmp sgt i32 %23, 95, !dbg !35
  %206 = add nsw i32 %22, -96, !dbg !36
  %207 = add nsw i32 %23, -96, !dbg !36
  %208 = mul nsw i32 %206, 784, !dbg !37
  %209 = mul nsw i32 %207, 784, !dbg !37
  %210 = add nsw i32 %32, %.decomposed, !dbg !38
  %211 = add nsw i32 %210, %208, !dbg !39
  %212 = add nsw i32 %33, %.decomposed78, !dbg !38
  %213 = add nsw i32 %212, %209, !dbg !39
  %214 = sext i32 %211 to i64, !dbg !40
  %215 = getelementptr float, ptr addrspace(1) %5, i64 %214, !dbg !40
  %216 = sext i32 %213 to i64, !dbg !40
  %217 = getelementptr float, ptr addrspace(1) %5, i64 %216, !dbg !40
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %215, i1 %204, i32 0, i1 %204, i32 0, i1 %204, i32 0, i1 %204, i32 0, i1 %204) #3, !dbg !41
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %217, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205) #3, !dbg !41
  %220 = sext i32 %206 to i64, !dbg !42
  %221 = getelementptr float, ptr addrspace(1) %6, i64 %220, !dbg !42
  %222 = sext i32 %207 to i64, !dbg !42
  %223 = getelementptr float, ptr addrspace(1) %6, i64 %222, !dbg !42
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %204, i32 0, i1 %204) #3, !dbg !43
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %204, i32 0, i1 %204) #3, !dbg !43
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %204, i32 0, i1 %204) #3, !dbg !43
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %204, i32 0, i1 %204) #3, !dbg !43
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %205, i32 0, i1 %205) #3, !dbg !43
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %205, i32 0, i1 %205) #3, !dbg !43
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %205, i32 0, i1 %205) #3, !dbg !43
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %205, i32 0, i1 %205) #3, !dbg !43
  %232 = getelementptr float, ptr addrspace(1) %7, i64 %220, !dbg !44
  %233 = getelementptr float, ptr addrspace(1) %7, i64 %222, !dbg !44
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %204, i32 0, i1 %204) #3, !dbg !45
  %235 = bitcast i32 %234 to float, !dbg !45
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %204, i32 0, i1 %204) #3, !dbg !45
  %237 = bitcast i32 %236 to float, !dbg !45
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %204, i32 0, i1 %204) #3, !dbg !45
  %239 = bitcast i32 %238 to float, !dbg !45
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %204, i32 0, i1 %204) #3, !dbg !45
  %241 = bitcast i32 %240 to float, !dbg !45
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %205, i32 0, i1 %205) #3, !dbg !45
  %243 = bitcast i32 %242 to float, !dbg !45
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %205, i32 0, i1 %205) #3, !dbg !45
  %245 = bitcast i32 %244 to float, !dbg !45
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %205, i32 0, i1 %205) #3, !dbg !45
  %247 = bitcast i32 %246 to float, !dbg !45
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %205, i32 0, i1 %205) #3, !dbg !45
  %249 = bitcast i32 %248 to float, !dbg !45
  %250 = fadd float %235, 0x3EE4F8B580000000, !dbg !46
  %251 = fadd float %237, 0x3EE4F8B580000000, !dbg !46
  %252 = fadd float %239, 0x3EE4F8B580000000, !dbg !46
  %253 = fadd float %241, 0x3EE4F8B580000000, !dbg !46
  %254 = fadd float %243, 0x3EE4F8B580000000, !dbg !46
  %255 = fadd float %245, 0x3EE4F8B580000000, !dbg !46
  %256 = fadd float %247, 0x3EE4F8B580000000, !dbg !46
  %257 = fadd float %249, 0x3EE4F8B580000000, !dbg !46
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i37 = icmp eq i32 %258, 0, !dbg !47
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i40 = icmp eq i32 %259, 0, !dbg !47
  br i1 %.not.i37, label %265, label %260, !dbg !47

260:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %263, label %261, !dbg !47

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %250) #3, !dbg !47
  br label %__nv_sqrtf.exit41, !dbg !47

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %250) #3, !dbg !47
  br label %__nv_sqrtf.exit41, !dbg !47

265:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %268, label %266, !dbg !47

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %250) #3, !dbg !47
  br label %__nv_sqrtf.exit41, !dbg !47

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %250) #3, !dbg !47
  br label %__nv_sqrtf.exit41, !dbg !47

__nv_sqrtf.exit41:                                ; preds = %261, %263, %266, %268
  %.0.i39 = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !47
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i42 = icmp eq i32 %270, 0, !dbg !47
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i45 = icmp eq i32 %271, 0, !dbg !47
  br i1 %.not.i42, label %277, label %272, !dbg !47

272:                                              ; preds = %__nv_sqrtf.exit41
  br i1 %.not1.i45, label %275, label %273, !dbg !47

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %251) #3, !dbg !47
  br label %__nv_sqrtf.exit46, !dbg !47

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %251) #3, !dbg !47
  br label %__nv_sqrtf.exit46, !dbg !47

277:                                              ; preds = %__nv_sqrtf.exit41
  br i1 %.not1.i45, label %280, label %278, !dbg !47

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.f(float %251) #3, !dbg !47
  br label %__nv_sqrtf.exit46, !dbg !47

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.f(float %251) #3, !dbg !47
  br label %__nv_sqrtf.exit46, !dbg !47

__nv_sqrtf.exit46:                                ; preds = %273, %275, %278, %280
  %.0.i44 = phi float [ %274, %273 ], [ %276, %275 ], [ %279, %278 ], [ %281, %280 ], !dbg !47
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i47 = icmp eq i32 %282, 0, !dbg !47
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i50 = icmp eq i32 %283, 0, !dbg !47
  br i1 %.not.i47, label %289, label %284, !dbg !47

284:                                              ; preds = %__nv_sqrtf.exit46
  br i1 %.not1.i50, label %287, label %285, !dbg !47

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %252) #3, !dbg !47
  br label %__nv_sqrtf.exit51, !dbg !47

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %252) #3, !dbg !47
  br label %__nv_sqrtf.exit51, !dbg !47

289:                                              ; preds = %__nv_sqrtf.exit46
  br i1 %.not1.i50, label %292, label %290, !dbg !47

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %252) #3, !dbg !47
  br label %__nv_sqrtf.exit51, !dbg !47

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %252) #3, !dbg !47
  br label %__nv_sqrtf.exit51, !dbg !47

__nv_sqrtf.exit51:                                ; preds = %285, %287, %290, %292
  %.0.i49 = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !47
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i52 = icmp eq i32 %294, 0, !dbg !47
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i55 = icmp eq i32 %295, 0, !dbg !47
  br i1 %.not.i52, label %301, label %296, !dbg !47

296:                                              ; preds = %__nv_sqrtf.exit51
  br i1 %.not1.i55, label %299, label %297, !dbg !47

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %253) #3, !dbg !47
  br label %__nv_sqrtf.exit56, !dbg !47

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %253) #3, !dbg !47
  br label %__nv_sqrtf.exit56, !dbg !47

301:                                              ; preds = %__nv_sqrtf.exit51
  br i1 %.not1.i55, label %304, label %302, !dbg !47

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.f(float %253) #3, !dbg !47
  br label %__nv_sqrtf.exit56, !dbg !47

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.f(float %253) #3, !dbg !47
  br label %__nv_sqrtf.exit56, !dbg !47

__nv_sqrtf.exit56:                                ; preds = %297, %299, %302, %304
  %.0.i54 = phi float [ %298, %297 ], [ %300, %299 ], [ %303, %302 ], [ %305, %304 ], !dbg !47
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i57 = icmp eq i32 %306, 0, !dbg !47
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i60 = icmp eq i32 %307, 0, !dbg !47
  br i1 %.not.i57, label %313, label %308, !dbg !47

308:                                              ; preds = %__nv_sqrtf.exit56
  br i1 %.not1.i60, label %311, label %309, !dbg !47

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %254) #3, !dbg !47
  br label %__nv_sqrtf.exit61, !dbg !47

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %254) #3, !dbg !47
  br label %__nv_sqrtf.exit61, !dbg !47

313:                                              ; preds = %__nv_sqrtf.exit56
  br i1 %.not1.i60, label %316, label %314, !dbg !47

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.f(float %254) #3, !dbg !47
  br label %__nv_sqrtf.exit61, !dbg !47

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.f(float %254) #3, !dbg !47
  br label %__nv_sqrtf.exit61, !dbg !47

__nv_sqrtf.exit61:                                ; preds = %309, %311, %314, %316
  %.0.i59 = phi float [ %310, %309 ], [ %312, %311 ], [ %315, %314 ], [ %317, %316 ], !dbg !47
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i62 = icmp eq i32 %318, 0, !dbg !47
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i65 = icmp eq i32 %319, 0, !dbg !47
  br i1 %.not.i62, label %325, label %320, !dbg !47

320:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %323, label %321, !dbg !47

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %255) #3, !dbg !47
  br label %__nv_sqrtf.exit66, !dbg !47

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %255) #3, !dbg !47
  br label %__nv_sqrtf.exit66, !dbg !47

325:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %328, label %326, !dbg !47

326:                                              ; preds = %325
  %327 = tail call float @llvm.nvvm.sqrt.rn.f(float %255) #3, !dbg !47
  br label %__nv_sqrtf.exit66, !dbg !47

328:                                              ; preds = %325
  %329 = tail call float @llvm.nvvm.sqrt.approx.f(float %255) #3, !dbg !47
  br label %__nv_sqrtf.exit66, !dbg !47

__nv_sqrtf.exit66:                                ; preds = %321, %323, %326, %328
  %.0.i64 = phi float [ %322, %321 ], [ %324, %323 ], [ %327, %326 ], [ %329, %328 ], !dbg !47
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i67 = icmp eq i32 %330, 0, !dbg !47
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i70 = icmp eq i32 %331, 0, !dbg !47
  br i1 %.not.i67, label %337, label %332, !dbg !47

332:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %335, label %333, !dbg !47

333:                                              ; preds = %332
  %334 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %256) #3, !dbg !47
  br label %__nv_sqrtf.exit71, !dbg !47

335:                                              ; preds = %332
  %336 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %256) #3, !dbg !47
  br label %__nv_sqrtf.exit71, !dbg !47

337:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %340, label %338, !dbg !47

338:                                              ; preds = %337
  %339 = tail call float @llvm.nvvm.sqrt.rn.f(float %256) #3, !dbg !47
  br label %__nv_sqrtf.exit71, !dbg !47

340:                                              ; preds = %337
  %341 = tail call float @llvm.nvvm.sqrt.approx.f(float %256) #3, !dbg !47
  br label %__nv_sqrtf.exit71, !dbg !47

__nv_sqrtf.exit71:                                ; preds = %333, %335, %338, %340
  %.0.i69 = phi float [ %334, %333 ], [ %336, %335 ], [ %339, %338 ], [ %341, %340 ], !dbg !47
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i72 = icmp eq i32 %342, 0, !dbg !47
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i75 = icmp eq i32 %343, 0, !dbg !47
  br i1 %.not.i72, label %349, label %344, !dbg !47

344:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %347, label %345, !dbg !47

345:                                              ; preds = %344
  %346 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %257) #3, !dbg !47
  br label %__nv_sqrtf.exit76, !dbg !47

347:                                              ; preds = %344
  %348 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %257) #3, !dbg !47
  br label %__nv_sqrtf.exit76, !dbg !47

349:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %352, label %350, !dbg !47

350:                                              ; preds = %349
  %351 = tail call float @llvm.nvvm.sqrt.rn.f(float %257) #3, !dbg !47
  br label %__nv_sqrtf.exit76, !dbg !47

352:                                              ; preds = %349
  %353 = tail call float @llvm.nvvm.sqrt.approx.f(float %257) #3, !dbg !47
  br label %__nv_sqrtf.exit76, !dbg !47

__nv_sqrtf.exit76:                                ; preds = %345, %347, %350, %352
  %.0.i74 = phi float [ %346, %345 ], [ %348, %347 ], [ %351, %350 ], [ %353, %352 ], !dbg !47
  %354 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !41
  %355 = insertelement <16 x i32> poison, i32 %231, i64 0, !dbg !43
  %356 = insertelement <16 x i32> %355, i32 %230, i64 1, !dbg !43
  %357 = insertelement <16 x i32> %356, i32 %229, i64 2, !dbg !43
  %358 = insertelement <16 x i32> %357, i32 %228, i64 3, !dbg !43
  %359 = insertelement <16 x i32> %358, i32 %227, i64 4, !dbg !43
  %360 = insertelement <16 x i32> %359, i32 %226, i64 5, !dbg !43
  %361 = insertelement <16 x i32> %360, i32 %225, i64 6, !dbg !43
  %362 = insertelement <16 x i32> %361, i32 %224, i64 7, !dbg !43
  %363 = insertelement <16 x i32> %362, i32 %46, i64 8, !dbg !43
  %364 = insertelement <16 x i32> %363, i32 %47, i64 9, !dbg !43
  %365 = insertelement <16 x i32> %364, i32 %48, i64 10, !dbg !43
  %366 = insertelement <16 x i32> %365, i32 %49, i64 11, !dbg !43
  %367 = insertelement <16 x i32> %366, i32 %50, i64 12, !dbg !43
  %368 = insertelement <16 x i32> %367, i32 %51, i64 13, !dbg !43
  %369 = insertelement <16 x i32> %368, i32 %52, i64 14, !dbg !43
  %370 = insertelement <16 x i32> %369, i32 %53, i64 15, !dbg !43
  %371 = bitcast <16 x i32> %370 to <16 x float>, !dbg !43
  %372 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !41
  %373 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !41
  %374 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !41
  %375 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !41
  %376 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !41
  %377 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !41
  %378 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !41
  %379 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !23
  %380 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !23
  %381 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !23
  %382 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !23
  %383 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !23
  %384 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !23
  %385 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !23
  %386 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !23
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i39) #3, !dbg !48
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i44) #3, !dbg !48
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i49) #3, !dbg !48
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i54) #3, !dbg !48
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i59) #3, !dbg !48
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i64) #3, !dbg !48
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i69) #3, !dbg !48
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i74) #3, !dbg !48
  %395 = getelementptr float, ptr addrspace(1) %8, i64 %220, !dbg !49
  %396 = getelementptr float, ptr addrspace(1) %8, i64 %222, !dbg !49
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 %204, i32 0, i1 %204) #3, !dbg !50
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 %204, i32 0, i1 %204) #3, !dbg !50
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 %204, i32 0, i1 %204) #3, !dbg !50
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 %204, i32 0, i1 %204) #3, !dbg !50
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 %205, i32 0, i1 %205) #3, !dbg !50
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 %205, i32 0, i1 %205) #3, !dbg !50
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 %205, i32 0, i1 %205) #3, !dbg !50
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 %205, i32 0, i1 %205) #3, !dbg !50
  %405 = getelementptr float, ptr addrspace(1) %9, i64 %220, !dbg !51
  %406 = getelementptr float, ptr addrspace(1) %9, i64 %222, !dbg !51
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %405, i1 %204, i32 0, i1 %204) #3, !dbg !52
  %408 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %405, i1 %204, i32 0, i1 %204) #3, !dbg !52
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %405, i1 %204, i32 0, i1 %204) #3, !dbg !52
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %405, i1 %204, i32 0, i1 %204) #3, !dbg !52
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %406, i1 %205, i32 0, i1 %205) #3, !dbg !52
  %412 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %406, i1 %205, i32 0, i1 %205) #3, !dbg !52
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %406, i1 %205, i32 0, i1 %205) #3, !dbg !52
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %406, i1 %205, i32 0, i1 %205) #3, !dbg !52
  %415 = insertelement <16 x i32> poison, i32 %354, i64 0, !dbg !41
  %416 = insertelement <16 x i32> %415, i32 %372, i64 1, !dbg !41
  %417 = insertelement <16 x i32> %416, i32 %373, i64 2, !dbg !41
  %418 = insertelement <16 x i32> %417, i32 %374, i64 3, !dbg !41
  %419 = insertelement <16 x i32> %418, i32 %375, i64 4, !dbg !41
  %420 = insertelement <16 x i32> %419, i32 %376, i64 5, !dbg !41
  %421 = insertelement <16 x i32> %420, i32 %377, i64 6, !dbg !41
  %422 = insertelement <16 x i32> %421, i32 %378, i64 7, !dbg !41
  %423 = insertelement <16 x i32> %422, i32 %386, i64 8, !dbg !41
  %424 = insertelement <16 x i32> %423, i32 %385, i64 9, !dbg !41
  %425 = insertelement <16 x i32> %424, i32 %384, i64 10, !dbg !41
  %426 = insertelement <16 x i32> %425, i32 %383, i64 11, !dbg !41
  %427 = insertelement <16 x i32> %426, i32 %382, i64 12, !dbg !41
  %428 = insertelement <16 x i32> %427, i32 %381, i64 13, !dbg !41
  %429 = insertelement <16 x i32> %428, i32 %380, i64 14, !dbg !41
  %430 = insertelement <16 x i32> %429, i32 %379, i64 15, !dbg !41
  %431 = bitcast <16 x i32> %430 to <16 x float>, !dbg !41
  %432 = fsub <16 x float> %431, %371, !dbg !53
  %433 = insertelement <16 x float> poison, float %394, i64 0, !dbg !54
  %434 = insertelement <16 x float> %433, float %393, i64 1, !dbg !54
  %435 = insertelement <16 x float> %434, float %392, i64 2, !dbg !54
  %436 = insertelement <16 x float> %435, float %391, i64 3, !dbg !54
  %437 = insertelement <16 x float> %436, float %390, i64 4, !dbg !54
  %438 = insertelement <16 x float> %437, float %389, i64 5, !dbg !54
  %439 = insertelement <16 x float> %438, float %388, i64 6, !dbg !54
  %440 = insertelement <16 x float> %439, float %387, i64 7, !dbg !54
  %441 = insertelement <16 x float> %440, float %176, i64 8, !dbg !54
  %442 = insertelement <16 x float> %441, float %177, i64 9, !dbg !54
  %443 = insertelement <16 x float> %442, float %178, i64 10, !dbg !54
  %444 = insertelement <16 x float> %443, float %179, i64 11, !dbg !54
  %445 = insertelement <16 x float> %444, float %180, i64 12, !dbg !54
  %446 = insertelement <16 x float> %445, float %181, i64 13, !dbg !54
  %447 = insertelement <16 x float> %446, float %182, i64 14, !dbg !54
  %448 = insertelement <16 x float> %447, float %183, i64 15, !dbg !54
  %449 = fmul <16 x float> %432, %448, !dbg !54
  %450 = insertelement <16 x i32> poison, i32 %404, i64 0, !dbg !50
  %451 = insertelement <16 x i32> %450, i32 %403, i64 1, !dbg !50
  %452 = insertelement <16 x i32> %451, i32 %402, i64 2, !dbg !50
  %453 = insertelement <16 x i32> %452, i32 %401, i64 3, !dbg !50
  %454 = insertelement <16 x i32> %453, i32 %400, i64 4, !dbg !50
  %455 = insertelement <16 x i32> %454, i32 %399, i64 5, !dbg !50
  %456 = insertelement <16 x i32> %455, i32 %398, i64 6, !dbg !50
  %457 = insertelement <16 x i32> %456, i32 %397, i64 7, !dbg !50
  %458 = insertelement <16 x i32> %457, i32 %186, i64 8, !dbg !50
  %459 = insertelement <16 x i32> %458, i32 %187, i64 9, !dbg !50
  %460 = insertelement <16 x i32> %459, i32 %188, i64 10, !dbg !50
  %461 = insertelement <16 x i32> %460, i32 %189, i64 11, !dbg !50
  %462 = insertelement <16 x i32> %461, i32 %190, i64 12, !dbg !50
  %463 = insertelement <16 x i32> %462, i32 %191, i64 13, !dbg !50
  %464 = insertelement <16 x i32> %463, i32 %192, i64 14, !dbg !50
  %465 = insertelement <16 x i32> %464, i32 %193, i64 15, !dbg !50
  %466 = bitcast <16 x i32> %465 to <16 x float>, !dbg !50
  %467 = fmul <16 x float> %449, %466, !dbg !55
  %468 = insertelement <16 x i32> poison, i32 %414, i64 0, !dbg !52
  %469 = insertelement <16 x i32> %468, i32 %413, i64 1, !dbg !52
  %470 = insertelement <16 x i32> %469, i32 %412, i64 2, !dbg !52
  %471 = insertelement <16 x i32> %470, i32 %411, i64 3, !dbg !52
  %472 = insertelement <16 x i32> %471, i32 %410, i64 4, !dbg !52
  %473 = insertelement <16 x i32> %472, i32 %409, i64 5, !dbg !52
  %474 = insertelement <16 x i32> %473, i32 %408, i64 6, !dbg !52
  %475 = insertelement <16 x i32> %474, i32 %407, i64 7, !dbg !52
  %476 = insertelement <16 x i32> %475, i32 %196, i64 8, !dbg !52
  %477 = insertelement <16 x i32> %476, i32 %197, i64 9, !dbg !52
  %478 = insertelement <16 x i32> %477, i32 %198, i64 10, !dbg !52
  %479 = insertelement <16 x i32> %478, i32 %199, i64 11, !dbg !52
  %480 = insertelement <16 x i32> %479, i32 %200, i64 12, !dbg !52
  %481 = insertelement <16 x i32> %480, i32 %201, i64 13, !dbg !52
  %482 = insertelement <16 x i32> %481, i32 %202, i64 14, !dbg !52
  %483 = insertelement <16 x i32> %482, i32 %203, i64 15, !dbg !52
  %484 = bitcast <16 x i32> %483 to <16 x float>, !dbg !52
  %485 = fadd <16 x float> %467, %484, !dbg !56
  %486 = fcmp olt <16 x float> %485, zeroinitializer, !dbg !57
  %487 = extractelement <16 x i1> %486, i64 15, !dbg !61
  %488 = extractelement <16 x float> %485, i64 15, !dbg !61
  %489 = select i1 %487, float 0.000000e+00, float %488, !dbg !61
  %490 = extractelement <16 x i1> %486, i64 14, !dbg !61
  %491 = extractelement <16 x float> %485, i64 14, !dbg !61
  %492 = select i1 %490, float 0.000000e+00, float %491, !dbg !61
  %493 = extractelement <16 x i1> %486, i64 13, !dbg !61
  %494 = extractelement <16 x float> %485, i64 13, !dbg !61
  %495 = select i1 %493, float 0.000000e+00, float %494, !dbg !61
  %496 = extractelement <16 x i1> %486, i64 12, !dbg !61
  %497 = extractelement <16 x float> %485, i64 12, !dbg !61
  %498 = select i1 %496, float 0.000000e+00, float %497, !dbg !61
  %499 = extractelement <16 x i1> %486, i64 11, !dbg !61
  %500 = extractelement <16 x float> %485, i64 11, !dbg !61
  %501 = select i1 %499, float 0.000000e+00, float %500, !dbg !61
  %502 = extractelement <16 x i1> %486, i64 10, !dbg !61
  %503 = extractelement <16 x float> %485, i64 10, !dbg !61
  %504 = select i1 %502, float 0.000000e+00, float %503, !dbg !61
  %505 = extractelement <16 x i1> %486, i64 9, !dbg !61
  %506 = extractelement <16 x float> %485, i64 9, !dbg !61
  %507 = select i1 %505, float 0.000000e+00, float %506, !dbg !61
  %508 = extractelement <16 x i1> %486, i64 8, !dbg !61
  %509 = extractelement <16 x float> %485, i64 8, !dbg !61
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !61
  %511 = extractelement <16 x i1> %486, i64 7, !dbg !63
  %512 = extractelement <16 x float> %485, i64 7, !dbg !63
  %513 = select i1 %511, float 0.000000e+00, float %512, !dbg !63
  %514 = extractelement <16 x i1> %486, i64 6, !dbg !63
  %515 = extractelement <16 x float> %485, i64 6, !dbg !63
  %516 = select i1 %514, float 0.000000e+00, float %515, !dbg !63
  %517 = extractelement <16 x i1> %486, i64 5, !dbg !63
  %518 = extractelement <16 x float> %485, i64 5, !dbg !63
  %519 = select i1 %517, float 0.000000e+00, float %518, !dbg !63
  %520 = extractelement <16 x i1> %486, i64 4, !dbg !63
  %521 = extractelement <16 x float> %485, i64 4, !dbg !63
  %522 = select i1 %520, float 0.000000e+00, float %521, !dbg !63
  %523 = extractelement <16 x i1> %486, i64 3, !dbg !63
  %524 = extractelement <16 x float> %485, i64 3, !dbg !63
  %525 = select i1 %523, float 0.000000e+00, float %524, !dbg !63
  %526 = extractelement <16 x i1> %486, i64 2, !dbg !63
  %527 = extractelement <16 x float> %485, i64 2, !dbg !63
  %528 = select i1 %526, float 0.000000e+00, float %527, !dbg !63
  %529 = extractelement <16 x i1> %486, i64 1, !dbg !63
  %530 = extractelement <16 x float> %485, i64 1, !dbg !63
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !63
  %532 = extractelement <16 x i1> %486, i64 0, !dbg !63
  %533 = extractelement <16 x float> %485, i64 0, !dbg !63
  %534 = select i1 %532, float 0.000000e+00, float %533, !dbg !63
  %535 = select i1 %28, float %510, float %513, !dbg !64
  %536 = select i1 %28, float %507, float %516, !dbg !64
  %537 = select i1 %28, float %504, float %519, !dbg !64
  %538 = select i1 %28, float %501, float %522, !dbg !64
  %539 = select i1 %29, float %498, float %525, !dbg !64
  %540 = select i1 %29, float %495, float %528, !dbg !64
  %541 = select i1 %29, float %492, float %531, !dbg !64
  %542 = select i1 %29, float %489, float %534, !dbg !64
  %543 = sext i32 %18 to i64, !dbg !65
  %544 = getelementptr float, ptr addrspace(1) %10, i64 %543, !dbg !65
  %545 = sext i32 %19 to i64, !dbg !65
  %546 = getelementptr float, ptr addrspace(1) %10, i64 %545, !dbg !65
  %547 = bitcast float %535 to i32, !dbg !66
  %548 = bitcast float %536 to i32, !dbg !66
  %549 = bitcast float %537 to i32, !dbg !66
  %550 = bitcast float %538 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %547, i32 %548, i32 %549, i32 %550, ptr addrspace(1) %544, i1 true) #3, !dbg !66
  %551 = bitcast float %539 to i32, !dbg !66
  %552 = bitcast float %540 to i32, !dbg !66
  %553 = bitcast float %541 to i32, !dbg !66
  %554 = bitcast float %542 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %551, i32 %552, i32 %553, i32 %554, ptr addrspace(1) %546, i1 true) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjvchz22zzxeexj4mfrr43jlqlawyz2kkpa5xh57dwnrdbqaqrz5.py", directory: "inductor_cache/jv")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 57, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 27, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 53, column: 20, scope: !7)
!36 = !DILocation(line: 56, column: 49, scope: !7)
!37 = !DILocation(line: 56, column: 41, scope: !7)
!38 = !DILocation(line: 56, column: 36, scope: !7)
!39 = !DILocation(line: 56, column: 55, scope: !7)
!40 = !DILocation(line: 56, column: 31, scope: !7)
!41 = !DILocation(line: 56, column: 66, scope: !7)
!42 = !DILocation(line: 57, column: 31, scope: !7)
!43 = !DILocation(line: 57, column: 44, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 44, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 27, scope: !7)
!48 = !DILocation(line: 64, column: 20, scope: !7)
!49 = !DILocation(line: 68, column: 31, scope: !7)
!50 = !DILocation(line: 68, column: 44, scope: !7)
!51 = !DILocation(line: 70, column: 31, scope: !7)
!52 = !DILocation(line: 70, column: 44, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 71, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 73, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !62)
!62 = !DILocation(line: 50, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 77, column: 25, scope: !7)
!66 = !DILocation(line: 77, column: 37, scope: !7)
!67 = !DILocation(line: 77, column: 4, scope: !7)
