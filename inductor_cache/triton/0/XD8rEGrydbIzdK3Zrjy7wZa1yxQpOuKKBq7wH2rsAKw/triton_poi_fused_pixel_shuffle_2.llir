; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_pixel_shuffle_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 1020, !dbg !12
  %11 = and i32 %8, 255, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 256, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %16 = or disjoint i32 %13, 768, !dbg !13
  %17 = icmp slt i32 %12, 768, !dbg !14
  %18 = icmp slt i32 %13, 768, !dbg !14
  %19 = icmp slt i32 %14, 768, !dbg !14
  %20 = icmp slt i32 %15, 768, !dbg !14
  %21 = icmp slt i32 %7, 0, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 2, !dbg !16
  %24 = or disjoint i32 %23, 1, !dbg !17
  %25 = or disjoint i32 %23, 2, !dbg !17
  %26 = or disjoint i32 %23, 3, !dbg !17
  %27 = icmp slt i32 %23, 4, !dbg !18
  %28 = icmp slt i32 %24, 4, !dbg !18
  %29 = icmp slt i32 %25, 4, !dbg !18
  %30 = icmp slt i32 %26, 4, !dbg !18
  %31 = ashr exact i32 %12, 2, !dbg !19
  %32 = sdiv i32 %13, 4, !dbg !19
  %33 = sdiv i32 %14, 4, !dbg !19
  %34 = sdiv i32 %15, 4, !dbg !19
  %35 = sdiv i32 %16, 4, !dbg !19
  %36 = srem i32 %31, 4, !dbg !20
  %37 = srem i32 %32, 4, !dbg !20
  %38 = srem i32 %33, 4, !dbg !20
  %39 = srem i32 %34, 4, !dbg !20
  %40 = srem i32 %35, 4, !dbg !20
  %41 = sdiv i32 %12, 16, !dbg !21
  %42 = srem i32 %41, 4, !dbg !22
  %43 = sdiv i32 %12, 64, !dbg !23
  %44 = sdiv i32 %13, 64, !dbg !23
  %45 = sdiv i32 %14, 64, !dbg !23
  %46 = sdiv i32 %15, 64, !dbg !23
  %47 = sdiv i32 %16, 64, !dbg !23
  %48 = srem i32 %44, 3, !dbg !24
  %49 = srem i32 %45, 3, !dbg !24
  %50 = srem i32 %46, 3, !dbg !24
  %51 = srem i32 %47, 3, !dbg !24
  %52 = shl nsw i32 %42, 2, !dbg !25
  %53 = shl i32 %22, 6, !dbg !26
  %54 = shl i32 %24, 4, !dbg !26
  %55 = shl i32 %25, 4, !dbg !26
  %56 = shl i32 %26, 4, !dbg !26
  %57 = shl nsw i32 %36, 6, !dbg !27
  %58 = shl i32 %43, 8, !dbg !28
  %59 = add i32 %52, %58, !dbg !29
  %60 = add i32 %59, %53, !dbg !30
  %61 = add i32 %60, %57, !dbg !31
  %62 = add i32 %59, %54, !dbg !30
  %63 = add i32 %62, %57, !dbg !31
  %64 = add i32 %59, %55, !dbg !30
  %65 = add i32 %64, %57, !dbg !31
  %66 = add i32 %59, %56, !dbg !30
  %67 = add i32 %66, %57, !dbg !31
  %68 = sext i32 %61 to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !32
  %70 = sext i32 %63 to i64, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !32
  %72 = sext i32 %65 to i64, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !32
  %74 = sext i32 %67 to i64, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !32
  %76 = and i1 %27, %17, !dbg !33
  %77 = and i1 %17, %28, !dbg !33
  %78 = and i1 %17, %29, !dbg !33
  %79 = and i1 %17, %30, !dbg !33
  %80 = and i1 %27, %18, !dbg !33
  %81 = and i1 %19, %27, !dbg !33
  %82 = and i1 %20, %27, !dbg !33
  %83 = and i1 %21, %27, !dbg !33
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %76) #2, !dbg !34
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !34
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !34
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !34
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !34
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %77) #2, !dbg !34
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !34
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !34
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !34
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !34
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %78) #2, !dbg !34
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !34
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !34
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %79) #2, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !34
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !34
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !34
  %104 = shl i32 %8, 4, !dbg !34
  %105 = and i32 %104, 4080, !dbg !34
  %106 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %105, !dbg !34
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %105, !dbg !34
  %108 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !34
  %109 = or disjoint i32 %105, 4, !dbg !34
  %110 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %109, !dbg !34
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %109, !dbg !34
  %112 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !34
  %113 = or disjoint i32 %105, 8, !dbg !34
  %114 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %113, !dbg !34
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %113, !dbg !34
  %116 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !34
  %117 = or disjoint i32 %105, 12, !dbg !34
  %118 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %117, !dbg !34
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %117, !dbg !34
  %120 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !34
  %121 = or disjoint i32 %105, 1, !dbg !34
  %122 = getelementptr float, ptr addrspace(3) %106, i32 %121, !dbg !34
  %123 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !34
  %124 = or disjoint i32 %105, 5, !dbg !34
  %125 = lshr i32 %124, 2, !dbg !34
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !34
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !34
  %128 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !34
  %129 = or disjoint i32 %105, 9, !dbg !34
  %130 = lshr i32 %129, 2, !dbg !34
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !34
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !34
  %133 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !34
  %134 = or disjoint i32 %105, 13, !dbg !34
  %135 = lshr i32 %134, 2, !dbg !34
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !34
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !34
  %138 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !34
  %139 = or disjoint i32 %105, 2, !dbg !34
  %140 = getelementptr float, ptr addrspace(3) %106, i32 %139, !dbg !34
  %141 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !34
  %142 = or disjoint i32 %105, 6, !dbg !34
  %143 = lshr i32 %142, 2, !dbg !34
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !34
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !34
  %146 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !34
  %147 = or disjoint i32 %105, 10, !dbg !34
  %148 = lshr i32 %147, 2, !dbg !34
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !34
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !34
  %151 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !34
  %152 = or disjoint i32 %105, 14, !dbg !34
  %153 = lshr i32 %152, 2, !dbg !34
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !34
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !34
  %156 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !34
  %157 = or disjoint i32 %105, 3, !dbg !34
  %158 = getelementptr float, ptr addrspace(3) %106, i32 %157, !dbg !34
  %159 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !34
  %160 = or disjoint i32 %105, 7, !dbg !34
  %161 = lshr i32 %160, 2, !dbg !34
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !34
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !34
  %164 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !34
  %165 = or disjoint i32 %105, 11, !dbg !34
  %166 = lshr i32 %165, 2, !dbg !34
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !34
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !34
  %169 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !34
  %170 = or disjoint i32 %105, 15, !dbg !34
  %171 = lshr i32 %170, 2, !dbg !34
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !34
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !34
  %174 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %175 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !34
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %10, !dbg !34
  %177 = load float, ptr addrspace(3) %176, align 4, !dbg !34
  %178 = or disjoint i32 %10, 1, !dbg !34
  %179 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %178, !dbg !34
  %180 = load float, ptr addrspace(3) %179, align 4, !dbg !34
  %181 = or disjoint i32 %10, 2, !dbg !34
  %182 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %181, !dbg !34
  %183 = load float, ptr addrspace(3) %182, align 4, !dbg !34
  %184 = or disjoint i32 %10, 3, !dbg !34
  %185 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %184, !dbg !34
  %186 = load float, ptr addrspace(3) %185, align 4, !dbg !34
  %187 = or disjoint i32 %10, 1024, !dbg !34
  %188 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %187, !dbg !34
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %187, !dbg !34
  %190 = load float, ptr addrspace(3) %189, align 4, !dbg !34
  %191 = or disjoint i32 %10, 1025, !dbg !34
  %192 = lshr i32 %191, 2, !dbg !34
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %192, !dbg !34
  %194 = getelementptr inbounds float, ptr addrspace(3) %193, i32 %191, !dbg !34
  %195 = load float, ptr addrspace(3) %194, align 4, !dbg !34
  %196 = or disjoint i32 %10, 1026, !dbg !34
  %197 = lshr i32 %196, 2, !dbg !34
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %197, !dbg !34
  %199 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %196, !dbg !34
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !34
  %201 = or disjoint i32 %10, 1027, !dbg !34
  %202 = lshr i32 %201, 2, !dbg !34
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !34
  %204 = getelementptr inbounds float, ptr addrspace(3) %203, i32 %201, !dbg !34
  %205 = load float, ptr addrspace(3) %204, align 4, !dbg !34
  %206 = or disjoint i32 %10, 2048, !dbg !34
  %207 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %206, !dbg !34
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %206, !dbg !34
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !34
  %210 = or disjoint i32 %10, 2049, !dbg !34
  %211 = lshr i32 %210, 2, !dbg !34
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !34
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !34
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !34
  %215 = or disjoint i32 %10, 2050, !dbg !34
  %216 = lshr i32 %215, 2, !dbg !34
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !34
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !34
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !34
  %220 = or disjoint i32 %10, 2051, !dbg !34
  %221 = lshr i32 %220, 2, !dbg !34
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !34
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !34
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !34
  %225 = or disjoint i32 %10, 3072, !dbg !34
  %226 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %225, !dbg !34
  %227 = getelementptr inbounds float, ptr addrspace(3) %226, i32 %225, !dbg !34
  %228 = load float, ptr addrspace(3) %227, align 4, !dbg !34
  %229 = or disjoint i32 %10, 3073, !dbg !34
  %230 = lshr i32 %229, 2, !dbg !34
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %230, !dbg !34
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %229, !dbg !34
  %233 = load float, ptr addrspace(3) %232, align 4, !dbg !34
  %234 = or disjoint i32 %10, 3074, !dbg !34
  %235 = lshr i32 %234, 2, !dbg !34
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %235, !dbg !34
  %237 = getelementptr inbounds float, ptr addrspace(3) %236, i32 %234, !dbg !34
  %238 = load float, ptr addrspace(3) %237, align 4, !dbg !34
  %239 = or disjoint i32 %10, 3075, !dbg !34
  %240 = lshr i32 %239, 2, !dbg !34
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !34
  %242 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %239, !dbg !34
  %243 = load float, ptr addrspace(3) %242, align 4, !dbg !34
  %244 = add i32 %37, %22, !dbg !35
  %245 = shl i32 %244, 2, !dbg !35
  %246 = add i32 %22, %38, !dbg !35
  %247 = shl i32 %246, 2, !dbg !35
  %248 = add i32 %22, %39, !dbg !35
  %249 = shl i32 %248, 2, !dbg !35
  %250 = add i32 %22, %40, !dbg !35
  %251 = shl i32 %250, 2, !dbg !35
  %252 = shl nsw i32 %48, 4, !dbg !36
  %253 = shl nsw i32 %49, 4, !dbg !36
  %254 = shl nsw i32 %50, 4, !dbg !36
  %255 = shl nsw i32 %51, 4, !dbg !36
  %256 = add i32 %245, %252, !dbg !37
  %257 = add i32 %247, %253, !dbg !37
  %258 = add i32 %249, %254, !dbg !37
  %259 = add i32 %251, %255, !dbg !37
  %260 = sext i32 %256 to i64, !dbg !38
  %261 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !38
  %262 = sext i32 %257 to i64, !dbg !38
  %263 = getelementptr float, ptr addrspace(1) %1, i64 %262, !dbg !38
  %264 = sext i32 %258 to i64, !dbg !38
  %265 = getelementptr float, ptr addrspace(1) %1, i64 %264, !dbg !38
  %266 = sext i32 %259 to i64, !dbg !38
  %267 = getelementptr float, ptr addrspace(1) %1, i64 %266, !dbg !38
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %261, i1 %80) #2, !dbg !39
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !39
  %270 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !39
  %271 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !39
  %272 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !39
  %273 = bitcast i32 %269 to float, !dbg !39
  %274 = bitcast i32 %270 to float, !dbg !39
  %275 = bitcast i32 %271 to float, !dbg !39
  %276 = bitcast i32 %272 to float, !dbg !39
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %263, i1 %81) #2, !dbg !39
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !39
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !39
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !39
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !39
  %282 = bitcast i32 %278 to float, !dbg !39
  %283 = bitcast i32 %279 to float, !dbg !39
  %284 = bitcast i32 %280 to float, !dbg !39
  %285 = bitcast i32 %281 to float, !dbg !39
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %265, i1 %82) #2, !dbg !39
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !39
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !39
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !39
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !39
  %291 = bitcast i32 %287 to float, !dbg !39
  %292 = bitcast i32 %288 to float, !dbg !39
  %293 = bitcast i32 %289 to float, !dbg !39
  %294 = bitcast i32 %290 to float, !dbg !39
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %267, i1 %83) #2, !dbg !39
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !39
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !39
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !39
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !39
  %300 = bitcast i32 %296 to float, !dbg !39
  %301 = bitcast i32 %297 to float, !dbg !39
  %302 = bitcast i32 %298 to float, !dbg !39
  %303 = bitcast i32 %299 to float, !dbg !39
  %304 = fadd float %177, %273, !dbg !40
  %305 = fadd float %180, %274, !dbg !40
  %306 = fadd float %183, %275, !dbg !40
  %307 = fadd float %186, %276, !dbg !40
  %308 = fadd float %190, %282, !dbg !40
  %309 = fadd float %195, %283, !dbg !40
  %310 = fadd float %200, %284, !dbg !40
  %311 = fadd float %205, %285, !dbg !40
  %312 = fadd float %209, %291, !dbg !40
  %313 = fadd float %214, %292, !dbg !40
  %314 = fadd float %219, %293, !dbg !40
  %315 = fadd float %224, %294, !dbg !40
  %316 = fadd float %228, %300, !dbg !40
  %317 = fadd float %233, %301, !dbg !40
  %318 = fadd float %238, %302, !dbg !40
  %319 = fadd float %243, %303, !dbg !40
  %320 = add i32 %13, %22, !dbg !41
  %321 = shl i32 %320, 2, !dbg !41
  %322 = add i32 %22, %14, !dbg !41
  %323 = shl i32 %322, 2, !dbg !41
  %324 = add i32 %22, %15, !dbg !41
  %325 = shl i32 %324, 2, !dbg !41
  %326 = add i32 %22, %16, !dbg !41
  %327 = shl i32 %326, 2, !dbg !41
  %328 = sext i32 %321 to i64, !dbg !42
  %329 = getelementptr float, ptr addrspace(1) %2, i64 %328, !dbg !42
  %330 = sext i32 %323 to i64, !dbg !42
  %331 = getelementptr float, ptr addrspace(1) %2, i64 %330, !dbg !42
  %332 = sext i32 %325 to i64, !dbg !42
  %333 = getelementptr float, ptr addrspace(1) %2, i64 %332, !dbg !42
  %334 = sext i32 %327 to i64, !dbg !42
  %335 = getelementptr float, ptr addrspace(1) %2, i64 %334, !dbg !42
  %336 = bitcast float %304 to i32, !dbg !43
  %337 = bitcast float %305 to i32, !dbg !43
  %338 = bitcast float %306 to i32, !dbg !43
  %339 = bitcast float %307 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %336, i32 %337, i32 %338, i32 %339, ptr addrspace(1) %329, i1 %80) #2, !dbg !43
  %340 = bitcast float %308 to i32, !dbg !43
  %341 = bitcast float %309 to i32, !dbg !43
  %342 = bitcast float %310 to i32, !dbg !43
  %343 = bitcast float %311 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %341, i32 %342, i32 %343, ptr addrspace(1) %331, i1 %81) #2, !dbg !43
  %344 = bitcast float %312 to i32, !dbg !43
  %345 = bitcast float %313 to i32, !dbg !43
  %346 = bitcast float %314 to i32, !dbg !43
  %347 = bitcast float %315 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %345, i32 %346, i32 %347, ptr addrspace(1) %333, i1 %82) #2, !dbg !43
  %348 = bitcast float %316 to i32, !dbg !43
  %349 = bitcast float %317 to i32, !dbg !43
  %350 = bitcast float %318 to i32, !dbg !43
  %351 = bitcast float %319 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %348, i32 %349, i32 %350, i32 %351, ptr addrspace(1) %335, i1 %83) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7h2lfnbh4xkigtdvodn74teqg7oiwbp767dusslsrh2gizwwqsb.py", directory: "inductor_cache/7h")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_2", linkageName: "triton_poi_fused_pixel_shuffle_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 26, scope: !7)
!21 = !DILocation(line: 31, column: 21, scope: !7)
!22 = !DILocation(line: 31, column: 27, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 27, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 45, scope: !7)
!27 = !DILocation(line: 35, column: 53, scope: !7)
!28 = !DILocation(line: 35, column: 62, scope: !7)
!29 = !DILocation(line: 35, column: 42, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 58, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 75, scope: !7)
!34 = !DILocation(line: 35, column: 67, scope: !7)
!35 = !DILocation(line: 36, column: 35, scope: !7)
!36 = !DILocation(line: 36, column: 45, scope: !7)
!37 = !DILocation(line: 36, column: 42, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 50, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 30, scope: !7)
!42 = !DILocation(line: 38, column: 25, scope: !7)
!43 = !DILocation(line: 38, column: 43, scope: !7)
!44 = !DILocation(line: 38, column: 4, scope: !7)
