; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 1, !dbg !12
  %14 = shl nuw nsw i32 %13, 1, !dbg !12
  %.lobit1 = lshr i32 %12, 5, !dbg !12
  %15 = and i32 %.lobit1, 3, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 64, !dbg !14
  %19 = icmp slt i32 %17, 64, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 6, !dbg !16
  %22 = lshr i32 %12, 1, !dbg !17
  %23 = and i32 %22, 63, !dbg !17
  %24 = shl i32 %12, 1, !dbg !17
  %25 = and i32 %24, 62, !dbg !17
  %26 = or disjoint i32 %21, %23, !dbg !18
  %27 = or disjoint i32 %21, %25, !dbg !18
  %28 = icmp slt i32 %26, 64, !dbg !19
  %29 = icmp slt i32 %27, 64, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %30 = sdiv i32 %.frozen, 16, !dbg !20
  %31 = mul i32 %30, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = shl i32 %26, 4, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = shl i32 %30, 10, !dbg !24
  %35 = add i32 %33, %34, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = and i1 %18, %28, !dbg !27
  %39 = and i1 %19, %29, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %38) #4, !dbg !28
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %43 = shl nuw nsw i32 %13, 7, !dbg !28
  %44 = or disjoint i32 %43, %23, !dbg !28
  %45 = and i32 %24, 254, !dbg !28
  %.idx = shl nuw nsw i32 %13, 3, !dbg !28
  %46 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %47 = getelementptr float, ptr addrspace(3) %46, i32 %44, !dbg !28
  %48 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #4, !dbg !28
  %49 = or disjoint i32 %44, 64, !dbg !28
  %50 = lshr i32 %49, 6, !dbg !28
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i32 %50, !dbg !28
  %52 = getelementptr float, ptr addrspace(3) %51, i32 %49, !dbg !28
  %53 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %54 = lshr i32 %45, 6, !dbg !28
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !28
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %45, !dbg !28
  %57 = load float, ptr addrspace(3) %56, align 4, !dbg !28
  %58 = or disjoint i32 %45, 1, !dbg !28
  %59 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %58, !dbg !28
  %60 = load float, ptr addrspace(3) %59, align 4, !dbg !28
  %61 = shl i32 %17, 6, !dbg !29
  %62 = add i32 %27, %61, !dbg !30
  %63 = sext i32 %62 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !31
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %39) #4, !dbg !32
  %66 = sext i32 %27 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !33
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %29) #4, !dbg !34
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !35
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %29) #4, !dbg !36
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !36
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !36
  %73 = bitcast i32 %71 to float, !dbg !36
  %74 = bitcast i32 %72 to float, !dbg !36
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !37
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %29) #4, !dbg !38
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !39
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %77, i1 %29) #4, !dbg !40
  %79 = fadd float %73, 0x3EE4F8B580000000, !dbg !41
  %80 = fadd float %74, 0x3EE4F8B580000000, !dbg !41
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %81, 0, !dbg !42
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %82, 0, !dbg !42
  br i1 %.not.i, label %88, label %83, !dbg !42

83:                                               ; preds = %9
  br i1 %.not1.i, label %86, label %84, !dbg !42

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

88:                                               ; preds = %9
  br i1 %.not1.i, label %91, label %89, !dbg !42

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !42
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i3 = icmp eq i32 %93, 0, !dbg !42
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i6 = icmp eq i32 %94, 0, !dbg !42
  br i1 %.not.i3, label %100, label %95, !dbg !42

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %98, label %96, !dbg !42

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit7, !dbg !42

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit7, !dbg !42

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %103, label %101, !dbg !42

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit7, !dbg !42

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit7, !dbg !42

__nv_sqrtf.exit7:                                 ; preds = %96, %98, %101, %103
  %.0.i5 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !42
  %105 = extractvalue { i32, i32 } %65, 1, !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = extractvalue { i32, i32 } %68, 1, !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = fsub float %106, %108, !dbg !43
  %110 = extractvalue { i32, i32 } %65, 0, !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = extractvalue { i32, i32 } %68, 0, !dbg !34
  %113 = bitcast i32 %112 to float, !dbg !34
  %114 = fsub float %111, %113, !dbg !43
  %115 = extractvalue { i32, i32 } %78, 1, !dbg !40
  %116 = bitcast i32 %115 to float, !dbg !40
  %117 = extractvalue { i32, i32 } %78, 0, !dbg !40
  %118 = bitcast i32 %117 to float, !dbg !40
  %119 = extractvalue { i32, i32 } %76, 1, !dbg !38
  %120 = bitcast i32 %119 to float, !dbg !38
  %121 = extractvalue { i32, i32 } %76, 0, !dbg !38
  %122 = bitcast i32 %121 to float, !dbg !38
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !44
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !44
  %125 = fmul float %114, %123, !dbg !45
  %126 = fmul float %109, %124, !dbg !45
  %127 = fmul float %125, %122, !dbg !46
  %128 = fmul float %126, %120, !dbg !46
  %129 = fadd float %127, %118, !dbg !47
  %130 = fadd float %128, %116, !dbg !47
  %131 = fadd float %57, %129, !dbg !48
  %132 = fadd float %60, %130, !dbg !48
  %133 = getelementptr float, ptr addrspace(1) %6, i64 %63, !dbg !49
  %134 = bitcast float %131 to i32, !dbg !50
  %135 = bitcast float %132 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %134, i32 %135, ptr addrspace(1) %133, i1 %39) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csau6uhtgfznjxh7jglbzqlw7hzdjkq3kjpw6qsw5bknzvg4kp6j.py", directory: "inductor_cache/sa")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 38, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 43, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 26, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 19, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 45, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
