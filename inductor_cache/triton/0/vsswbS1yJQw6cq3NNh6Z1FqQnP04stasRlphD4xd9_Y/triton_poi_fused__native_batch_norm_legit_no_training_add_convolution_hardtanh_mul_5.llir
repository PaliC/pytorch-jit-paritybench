; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_hardtanh_mul_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = sdiv i32 %15, 16, !dbg !15
  %18 = srem i32 %17, 4, !dbg !16
  %19 = sext i32 %15 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %16) #3, !dbg !18
  %22 = sext i32 %18 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %16) #3, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %16) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !21
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %16) #3, !dbg !22
  %28 = sext i32 %17 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %16) #3, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %16) #3, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #3, !dbg !28
  %39 = bitcast i32 %38 to float, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #3, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #3, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #3, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %16) #3, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %16) #3, !dbg !32
  %48 = fcmp olt float %31, 0.000000e+00, !dbg !33
  %49 = fcmp olt float %33, 0.000000e+00, !dbg !33
  %50 = select i1 %48, float 0.000000e+00, float %31, !dbg !37
  %51 = select i1 %49, float 0.000000e+00, float %33, !dbg !37
  %52 = fsub float 0.000000e+00, %50, !dbg !38
  %53 = fsub float 0.000000e+00, %51, !dbg !38
  %54 = fmul float %52, 0x3FF7154760000000, !dbg !42
  %55 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %54) #3, !dbg !42
  %56 = fmul float %53, 0x3FF7154760000000, !dbg !42
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #3, !dbg !42
  %58 = fadd float %55, 1.000000e+00, !dbg !43
  %59 = fadd float %57, 1.000000e+00, !dbg !43
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %58) #3, !dbg !44
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %59) #3, !dbg !44
  %62 = fadd float %39, 0x3EE4F8B580000000, !dbg !45
  %63 = fadd float %41, 0x3EE4F8B580000000, !dbg !45
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %64, 0, !dbg !46
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %65, 0, !dbg !46
  br i1 %.not.i, label %71, label %66, !dbg !46

66:                                               ; preds = %9
  br i1 %.not1.i, label %69, label %67, !dbg !46

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

71:                                               ; preds = %9
  br i1 %.not1.i, label %74, label %72, !dbg !46

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !46
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i2 = icmp eq i32 %76, 0, !dbg !46
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i5 = icmp eq i32 %77, 0, !dbg !46
  br i1 %.not.i2, label %83, label %78, !dbg !46

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %81, label %79, !dbg !46

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !46
  br label %__nv_sqrtf.exit6, !dbg !46

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !46
  br label %__nv_sqrtf.exit6, !dbg !46

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %86, label %84, !dbg !46

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !46
  br label %__nv_sqrtf.exit6, !dbg !46

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !46
  br label %__nv_sqrtf.exit6, !dbg !46

__nv_sqrtf.exit6:                                 ; preds = %79, %81, %84, %86
  %.0.i4 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !46
  %88 = extractvalue { i32, i32 } %21, 1, !dbg !18
  %89 = bitcast i32 %88 to float, !dbg !18
  %90 = bitcast i32 %25 to float, !dbg !20
  %91 = fadd float %89, %90, !dbg !47
  %92 = bitcast i32 %36 to float, !dbg !26
  %93 = fsub float %91, %92, !dbg !48
  %94 = extractvalue { i32, i32 } %21, 0, !dbg !18
  %95 = bitcast i32 %94 to float, !dbg !18
  %96 = bitcast i32 %24 to float, !dbg !20
  %97 = fadd float %95, %96, !dbg !47
  %98 = bitcast i32 %35 to float, !dbg !26
  %99 = fsub float %97, %98, !dbg !48
  %100 = extractvalue { i32, i32 } %27, 1, !dbg !22
  %101 = bitcast i32 %100 to float, !dbg !22
  %102 = fmul float %61, %101, !dbg !49
  %103 = extractvalue { i32, i32 } %27, 0, !dbg !22
  %104 = bitcast i32 %103 to float, !dbg !22
  %105 = fmul float %60, %104, !dbg !49
  %106 = bitcast i32 %47 to float, !dbg !32
  %107 = bitcast i32 %46 to float, !dbg !32
  %108 = bitcast i32 %44 to float, !dbg !30
  %109 = bitcast i32 %43 to float, !dbg !30
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !50
  %112 = fmul float %99, %110, !dbg !51
  %113 = fmul float %93, %111, !dbg !51
  %114 = fmul float %112, %109, !dbg !52
  %115 = fmul float %113, %108, !dbg !52
  %116 = fadd float %114, %107, !dbg !53
  %117 = fadd float %115, %106, !dbg !53
  %.inv = fcmp ole float %116, 0.000000e+00, !dbg !54
  %118 = select i1 %.inv, float 0.000000e+00, float %116, !dbg !54
  %.inv1 = fcmp ole float %117, 0.000000e+00, !dbg !54
  %119 = select i1 %.inv1, float 0.000000e+00, float %117, !dbg !54
  %120 = fcmp olt float %118, 6.000000e+00, !dbg !56
  %121 = fcmp olt float %119, 6.000000e+00, !dbg !56
  %122 = fcmp uno float %118, 0.000000e+00, !dbg !58
  %123 = fcmp uno float %119, 0.000000e+00, !dbg !58
  %124 = or i1 %120, %122, !dbg !59
  %125 = or i1 %121, %123, !dbg !59
  %126 = select i1 %124, float %118, float 6.000000e+00, !dbg !60
  %127 = select i1 %125, float %119, float 6.000000e+00, !dbg !60
  %128 = fadd float %105, %126, !dbg !61
  %129 = fadd float %102, %127, !dbg !61
  %130 = bitcast float %97 to i32, !dbg !62
  %131 = bitcast float %91 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %130, i32 %131, ptr addrspace(1) %20, i1 %16) #3, !dbg !62
  %132 = bitcast float %128 to i32, !dbg !63
  %133 = bitcast float %129 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %132, i32 %133, ptr addrspace(1) %26, i1 %16) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crg2sjgqkovnrkgu7qkcjmlwbpiw6bgtxhcp6stsxtuabq3hud3q.py", directory: "inductor_cache/rg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_hardtanh_mul_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_hardtanh_mul_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_hardtanh_mul_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_hardtanh_mul_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 34, scope: !7)
!22 = !DILocation(line: 29, column: 39, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 37, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 47, column: 30, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = !DILocation(line: 38, column: 22, scope: !7)
!42 = !DILocation(line: 47, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 47, column: 20, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 47, column: 16, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 42, column: 20, scope: !7)
!46 = !DILocation(line: 43, column: 27, scope: !7)
!47 = !DILocation(line: 35, column: 18, scope: !7)
!48 = !DILocation(line: 40, column: 19, scope: !7)
!49 = !DILocation(line: 39, column: 18, scope: !7)
!50 = !DILocation(line: 45, column: 20, scope: !7)
!51 = !DILocation(line: 48, column: 20, scope: !7)
!52 = !DILocation(line: 49, column: 20, scope: !7)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !55)
!55 = !DILocation(line: 52, column: 42, scope: !7)
!56 = !DILocation(line: 110, column: 15, scope: !34, inlinedAt: !57)
!57 = !DILocation(line: 54, column: 42, scope: !7)
!58 = !DILocation(line: 112, column: 21, scope: !34, inlinedAt: !57)
!59 = !DILocation(line: 112, column: 16, scope: !34, inlinedAt: !57)
!60 = !DILocation(line: 113, column: 29, scope: !34, inlinedAt: !57)
!61 = !DILocation(line: 55, column: 19, scope: !7)
!62 = !DILocation(line: 56, column: 39, scope: !7)
!63 = !DILocation(line: 57, column: 40, scope: !7)
!64 = !DILocation(line: 57, column: 4, scope: !7)
