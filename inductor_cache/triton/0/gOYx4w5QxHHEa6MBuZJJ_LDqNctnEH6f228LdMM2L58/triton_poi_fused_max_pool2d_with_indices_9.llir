; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = icmp slt i32 %13, 295936, !dbg !14
  %18 = icmp slt i32 %15, 295936, !dbg !14
  %19 = icmp slt i32 %16, 295936, !dbg !14
  %20 = srem i32 %13, 256, !dbg !15
  %21 = srem i32 %14, 256, !dbg !15
  %22 = sdiv i32 %13, 73984, !dbg !16
  %23 = mul i32 %22, 278784, !dbg !17
  %24 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %25 = shufflevector <2 x i32> %24, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %26 = sdiv <2 x i32> %25, <i32 4352, i32 256>, !dbg !18
  %27 = srem <2 x i32> %26, splat (i32 17), !dbg !19
  %28 = extractelement <2 x i32> %27, i64 0, !dbg !20
  %29 = icmp sgt i32 %28, 0, !dbg !21
  %30 = icmp sgt <2 x i32> %27, <i32 -1, i32 0>, !dbg !22
  %31 = extractelement <2 x i1> %30, i64 1, !dbg !23
  %32 = and i1 %29, %31, !dbg !23
  %33 = extractelement <2 x i32> %27, i64 1, !dbg !20
  %34 = shl nsw i32 %33, 9, !dbg !24
  %35 = mul nsw i32 %28, 16896, !dbg !25
  %36 = add i32 %34, %23, !dbg !26
  %37 = add i32 %36, -8704, !dbg !27
  %38 = add i32 %37, %20, !dbg !28
  %39 = add i32 %38, %35, !dbg !29
  %40 = add i32 %37, %21, !dbg !28
  %41 = add i32 %40, %35, !dbg !29
  %42 = sext i32 %39 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !30
  %44 = sext i32 %41 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = and i1 %17, %32, !dbg !31
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46) #2, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !32
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !32
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !32
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !32
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46) #2, !dbg !32
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !32
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !32
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !32
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !32
  %57 = icmp sgt i32 %33, -1, !dbg !33
  %58 = and i1 %29, %57, !dbg !34
  %59 = add i32 %36, -8448, !dbg !35
  %60 = add i32 %59, %20, !dbg !36
  %61 = add i32 %60, %35, !dbg !37
  %62 = add i32 %59, %21, !dbg !36
  %63 = add i32 %62, %35, !dbg !37
  %64 = sext i32 %61 to i64, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !38
  %66 = sext i32 %63 to i64, !dbg !38
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !38
  %68 = and i1 %17, %58, !dbg !39
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68) #2, !dbg !40
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !40
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !40
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !40
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !40
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68) #2, !dbg !40
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !40
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !40
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !40
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !40
  %79 = extractelement <2 x i1> %30, i64 0, !dbg !41
  %80 = and i1 %79, %31, !dbg !41
  %81 = add i32 %36, -256, !dbg !42
  %82 = add i32 %81, %20, !dbg !43
  %83 = add i32 %82, %35, !dbg !44
  %84 = add i32 %81, %21, !dbg !43
  %85 = add i32 %84, %35, !dbg !44
  %86 = sext i32 %83 to i64, !dbg !45
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !45
  %88 = sext i32 %85 to i64, !dbg !45
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !45
  %90 = and i1 %17, %80, !dbg !46
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90) #2, !dbg !47
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !47
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !47
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !47
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !47
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90) #2, !dbg !47
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !47
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !47
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !47
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !47
  %101 = or i32 %28, %33, !dbg !20
  %102 = icmp sgt i32 %101, -1, !dbg !20
  %103 = add i32 %36, %20, !dbg !48
  %104 = add i32 %103, %35, !dbg !49
  %105 = add i32 %36, %21, !dbg !48
  %106 = add i32 %105, %35, !dbg !49
  %107 = sext i32 %104 to i64, !dbg !50
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !50
  %109 = sext i32 %106 to i64, !dbg !50
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !50
  %111 = and i1 %17, %102, !dbg !51
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111) #2, !dbg !52
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !52
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !52
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !52
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !52
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111) #2, !dbg !52
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !52
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !52
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !52
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !52
  %122 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !32
  %123 = insertelement <4 x i32> %122, i32 %49, i64 1, !dbg !32
  %124 = insertelement <4 x i32> %123, i32 %50, i64 2, !dbg !32
  %125 = insertelement <4 x i32> %124, i32 %51, i64 3, !dbg !32
  %126 = bitcast <4 x i32> %125 to <4 x float>, !dbg !32
  %127 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !40
  %128 = insertelement <4 x i32> %127, i32 %71, i64 1, !dbg !40
  %129 = insertelement <4 x i32> %128, i32 %72, i64 2, !dbg !40
  %130 = insertelement <4 x i32> %129, i32 %73, i64 3, !dbg !40
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !40
  %132 = fcmp ogt <4 x float> %131, %126, !dbg !53
  %133 = fcmp uno <4 x float> %131, zeroinitializer, !dbg !57
  %134 = or <4 x i1> %132, %133, !dbg !58
  %.v = select <4 x i1> %134, <4 x i32> %130, <4 x i32> %125, !dbg !59
  %135 = bitcast <4 x i32> %.v to <4 x float>, !dbg !59
  %136 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !47
  %137 = insertelement <4 x i32> %136, i32 %93, i64 1, !dbg !47
  %138 = insertelement <4 x i32> %137, i32 %94, i64 2, !dbg !47
  %139 = insertelement <4 x i32> %138, i32 %95, i64 3, !dbg !47
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !47
  %141 = fcmp olt <4 x float> %135, %140, !dbg !60
  %142 = fcmp uno <4 x float> %140, zeroinitializer, !dbg !62
  %143 = or <4 x i1> %142, %141, !dbg !63
  %.v15 = select <4 x i1> %143, <4 x i32> %139, <4 x i32> %.v, !dbg !64
  %144 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !64
  %145 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !52
  %146 = insertelement <4 x i32> %145, i32 %114, i64 1, !dbg !52
  %147 = insertelement <4 x i32> %146, i32 %115, i64 2, !dbg !52
  %148 = insertelement <4 x i32> %147, i32 %116, i64 3, !dbg !52
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !52
  %150 = fcmp olt <4 x float> %144, %149, !dbg !65
  %151 = extractelement <4 x i1> %150, i64 0, !dbg !67
  %152 = extractelement <4 x i1> %150, i64 1, !dbg !67
  %153 = extractelement <4 x i1> %150, i64 2, !dbg !67
  %154 = extractelement <4 x i1> %150, i64 3, !dbg !67
  %155 = zext <4 x i1> %132 to <4 x i8>, !dbg !68
  %156 = select <4 x i1> %141, <4 x i8> splat (i8 2), <4 x i8> %155, !dbg !69
  %157 = select <4 x i1> %150, <4 x i8> splat (i8 3), <4 x i8> %156, !dbg !70
  %158 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !32
  %159 = insertelement <4 x i32> %158, i32 %54, i64 1, !dbg !32
  %160 = insertelement <4 x i32> %159, i32 %55, i64 2, !dbg !32
  %161 = insertelement <4 x i32> %160, i32 %56, i64 3, !dbg !32
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !32
  %163 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !40
  %164 = insertelement <4 x i32> %163, i32 %76, i64 1, !dbg !40
  %165 = insertelement <4 x i32> %164, i32 %77, i64 2, !dbg !40
  %166 = insertelement <4 x i32> %165, i32 %78, i64 3, !dbg !40
  %167 = bitcast <4 x i32> %166 to <4 x float>, !dbg !40
  %168 = fcmp ogt <4 x float> %167, %162, !dbg !53
  %169 = fcmp uno <4 x float> %167, zeroinitializer, !dbg !57
  %170 = or <4 x i1> %168, %169, !dbg !58
  %.v16 = select <4 x i1> %170, <4 x i32> %166, <4 x i32> %161, !dbg !59
  %171 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !59
  %172 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !47
  %173 = insertelement <4 x i32> %172, i32 %98, i64 1, !dbg !47
  %174 = insertelement <4 x i32> %173, i32 %99, i64 2, !dbg !47
  %175 = insertelement <4 x i32> %174, i32 %100, i64 3, !dbg !47
  %176 = bitcast <4 x i32> %175 to <4 x float>, !dbg !47
  %177 = fcmp olt <4 x float> %171, %176, !dbg !60
  %178 = fcmp uno <4 x float> %176, zeroinitializer, !dbg !62
  %179 = or <4 x i1> %178, %177, !dbg !63
  %.v17 = select <4 x i1> %179, <4 x i32> %175, <4 x i32> %.v16, !dbg !64
  %180 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !64
  %181 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !52
  %182 = insertelement <4 x i32> %181, i32 %119, i64 1, !dbg !52
  %183 = insertelement <4 x i32> %182, i32 %120, i64 2, !dbg !52
  %184 = insertelement <4 x i32> %183, i32 %121, i64 3, !dbg !52
  %185 = bitcast <4 x i32> %184 to <4 x float>, !dbg !52
  %186 = fcmp olt <4 x float> %180, %185, !dbg !65
  %187 = shufflevector <4 x float> %185, <4 x float> %149, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !71
  %188 = fcmp uno <8 x float> %187, zeroinitializer, !dbg !71
  %189 = extractelement <8 x i1> %188, i64 7, !dbg !67
  %190 = or i1 %189, %151, !dbg !67
  %191 = extractelement <8 x i1> %188, i64 6, !dbg !67
  %192 = or i1 %191, %152, !dbg !67
  %193 = extractelement <8 x i1> %188, i64 5, !dbg !67
  %194 = or i1 %193, %153, !dbg !67
  %195 = extractelement <8 x i1> %188, i64 4, !dbg !67
  %196 = or i1 %195, %154, !dbg !67
  %197 = extractelement <4 x i1> %186, i64 0, !dbg !67
  %198 = extractelement <8 x i1> %188, i64 3, !dbg !67
  %199 = or i1 %198, %197, !dbg !67
  %200 = extractelement <4 x i1> %186, i64 1, !dbg !67
  %201 = extractelement <8 x i1> %188, i64 2, !dbg !67
  %202 = or i1 %201, %200, !dbg !67
  %203 = extractelement <4 x i1> %186, i64 2, !dbg !67
  %204 = extractelement <8 x i1> %188, i64 1, !dbg !67
  %205 = or i1 %204, %203, !dbg !67
  %206 = extractelement <4 x i1> %186, i64 3, !dbg !67
  %207 = extractelement <8 x i1> %188, i64 0, !dbg !67
  %208 = or i1 %207, %206, !dbg !67
  %209 = zext <4 x i1> %168 to <4 x i8>, !dbg !68
  %210 = select <4 x i1> %177, <4 x i8> splat (i8 2), <4 x i8> %209, !dbg !69
  %211 = select <4 x i1> %186, <4 x i8> splat (i8 3), <4 x i8> %210, !dbg !70
  %212 = sext i32 %15 to i64, !dbg !72
  %213 = getelementptr float, ptr addrspace(1) %1, i64 %212, !dbg !72
  %214 = sext i32 %16 to i64, !dbg !72
  %215 = getelementptr float, ptr addrspace(1) %1, i64 %214, !dbg !72
  %216 = zext nneg i32 %9 to i64, !dbg !73
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %216, !dbg !73
  %218 = extractelement <4 x i32> %.v15, i64 0, !dbg !73
  %219 = select i1 %190, i32 %113, i32 %218, !dbg !74
  %220 = extractelement <4 x i32> %.v15, i64 1, !dbg !73
  %221 = select i1 %192, i32 %114, i32 %220, !dbg !74
  %222 = extractelement <4 x i32> %.v15, i64 2, !dbg !73
  %223 = select i1 %194, i32 %115, i32 %222, !dbg !74
  %224 = extractelement <4 x i32> %.v15, i64 3, !dbg !73
  %225 = select i1 %196, i32 %116, i32 %224, !dbg !74
  %226 = extractelement <4 x i32> %.v17, i64 0, !dbg !73
  %227 = select i1 %199, i32 %118, i32 %226, !dbg !74
  %228 = extractelement <4 x i32> %.v17, i64 1, !dbg !73
  %229 = select i1 %202, i32 %119, i32 %228, !dbg !74
  %230 = extractelement <4 x i32> %.v17, i64 2, !dbg !73
  %231 = select i1 %205, i32 %120, i32 %230, !dbg !74
  %232 = extractelement <4 x i32> %.v17, i64 3, !dbg !73
  %233 = select i1 %208, i32 %121, i32 %232, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %217, i32 %219, i32 %221, i32 %223, i32 %225, i1 true) #2, !dbg !73
  %234 = getelementptr inbounds i8, ptr addrspace(3) %217, i64 16, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %234, i32 %227, i32 %229, i32 %231, i32 %233, i1 true) #2, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %235 = zext nneg i32 %11 to i64, !dbg !73
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %235, !dbg !73
  %237 = zext nneg i32 %12 to i64, !dbg !73
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %237, !dbg !73
  %239 = load <4 x i32>, ptr addrspace(3) %238, align 16, !dbg !73
  %.extract = load i32, ptr addrspace(3) %236, align 16, !dbg !73
  %240 = getelementptr inbounds i8, ptr addrspace(3) %236, i64 4, !dbg !73
  %.extract8 = load i32, ptr addrspace(3) %240, align 4, !dbg !73
  %241 = getelementptr inbounds i8, ptr addrspace(3) %236, i64 8, !dbg !73
  %.extract9 = load i32, ptr addrspace(3) %241, align 8, !dbg !73
  %242 = getelementptr inbounds i8, ptr addrspace(3) %236, i64 12, !dbg !73
  %.extract10 = load i32, ptr addrspace(3) %242, align 4, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %213, i1 %18) #2, !dbg !73
  %.extract11 = extractelement <4 x i32> %239, i64 0, !dbg !73
  %.extract12 = extractelement <4 x i32> %239, i64 1, !dbg !73
  %.extract13 = extractelement <4 x i32> %239, i64 2, !dbg !73
  %.extract14 = extractelement <4 x i32> %239, i64 3, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %215, i1 %19) #2, !dbg !73
  %243 = sext i32 %13 to i64, !dbg !75
  %244 = getelementptr i8, ptr addrspace(1) %2, i64 %243, !dbg !75
  %245 = bitcast <4 x i8> %157 to i32, !dbg !76
  %246 = bitcast <4 x i8> %211 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %245, i32 %246, ptr addrspace(1) %244, i1 %17) #2, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwn4agp7jwcvcc4fqupsffyylouiplvemywb2tq5jeccdfnhnizq.py", directory: "inductor_cache/wn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_9", linkageName: "triton_poi_fused_max_pool2d_with_indices_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 40, column: 73, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 29, scope: !7)
!20 = !DILocation(line: 55, column: 20, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 49, column: 21, scope: !7)
!23 = !DILocation(line: 39, column: 19, scope: !7)
!24 = !DILocation(line: 40, column: 50, scope: !7)
!25 = !DILocation(line: 40, column: 61, scope: !7)
!26 = !DILocation(line: 40, column: 41, scope: !7)
!27 = !DILocation(line: 40, column: 46, scope: !7)
!28 = !DILocation(line: 40, column: 55, scope: !7)
!29 = !DILocation(line: 40, column: 66, scope: !7)
!30 = !DILocation(line: 40, column: 31, scope: !7)
!31 = !DILocation(line: 40, column: 86, scope: !7)
!32 = !DILocation(line: 40, column: 78, scope: !7)
!33 = !DILocation(line: 42, column: 21, scope: !7)
!34 = !DILocation(line: 45, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 46, scope: !7)
!36 = !DILocation(line: 46, column: 55, scope: !7)
!37 = !DILocation(line: 46, column: 66, scope: !7)
!38 = !DILocation(line: 46, column: 31, scope: !7)
!39 = !DILocation(line: 46, column: 86, scope: !7)
!40 = !DILocation(line: 46, column: 78, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 53, column: 45, scope: !7)
!43 = !DILocation(line: 53, column: 54, scope: !7)
!44 = !DILocation(line: 53, column: 65, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 85, scope: !7)
!47 = !DILocation(line: 53, column: 77, scope: !7)
!48 = !DILocation(line: 56, column: 45, scope: !7)
!49 = !DILocation(line: 56, column: 56, scope: !7)
!50 = !DILocation(line: 56, column: 31, scope: !7)
!51 = !DILocation(line: 56, column: 76, scope: !7)
!52 = !DILocation(line: 56, column: 68, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 47, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!60 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !61)
!61 = !DILocation(line: 54, column: 42, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !61)
!65 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !66)
!66 = !DILocation(line: 57, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !66)
!68 = !DILocation(line: 61, column: 35, scope: !7)
!69 = !DILocation(line: 64, column: 35, scope: !7)
!70 = !DILocation(line: 67, column: 35, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !66)
!72 = !DILocation(line: 68, column: 25, scope: !7)
!73 = !DILocation(line: 68, column: 37, scope: !7)
!74 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !66)
!75 = !DILocation(line: 69, column: 25, scope: !7)
!76 = !DILocation(line: 69, column: 37, scope: !7)
!77 = !DILocation(line: 69, column: 4, scope: !7)
