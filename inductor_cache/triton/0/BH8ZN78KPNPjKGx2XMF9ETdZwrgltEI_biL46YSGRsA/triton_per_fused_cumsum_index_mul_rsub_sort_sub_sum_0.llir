; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bi/cbidvvppow55ovsd3ldirnuri4ao4mv2bleubtzbebhqnb6l54gp.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp18 < 256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = and i32 %8, 1, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 252, !dbg !12
  %13 = zext nneg i32 %12 to i64, !dbg !13
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !13
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #5, !dbg !14
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !14
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !14
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !14
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = trunc nuw nsw i32 %12 to i16, !dbg !17
  %27 = or disjoint i16 %26, 1, !dbg !17
  %28 = or disjoint i16 %26, 2, !dbg !17
  %29 = or disjoint i16 %26, 3, !dbg !17
  %30 = lshr i32 %8, 1, !dbg !18
  %.lobit = and i32 %30, 1, !dbg !18
  %31 = lshr i32 %8, 2, !dbg !18
  %.lobit1 = and i32 %31, 1, !dbg !18
  %32 = lshr i32 %8, 3, !dbg !18
  %.lobit2 = and i32 %32, 1, !dbg !18
  %33 = lshr i32 %8, 4, !dbg !18
  %.lobit3 = and i32 %33, 1, !dbg !18
  %.lobit4 = and i32 %9, 1, !dbg !18
  %34 = xor i32 %10, 1, !dbg !23
  %35 = xor i32 %.lobit, 1, !dbg !23
  %36 = xor i32 %.lobit1, 1, !dbg !23
  %37 = xor i32 %.lobit2, 1, !dbg !23
  %38 = xor i32 %.lobit3, 1, !dbg !23
  %39 = xor i32 %.lobit4, 1, !dbg !23
  %40 = trunc nuw nsw i32 %34 to i16, !dbg !25
  %41 = trunc nuw nsw i32 %35 to i16, !dbg !25
  %42 = trunc nuw nsw i32 %36 to i16, !dbg !25
  %43 = trunc nuw nsw i32 %37 to i16, !dbg !25
  %44 = trunc nuw nsw i32 %38 to i16, !dbg !25
  %45 = trunc nuw nsw i32 %39 to i16, !dbg !25
  %46 = trunc nuw nsw i32 %10 to i16, !dbg !26
  %47 = trunc nuw nsw i32 %.lobit to i16, !dbg !26
  %48 = trunc nuw nsw i32 %.lobit1 to i16, !dbg !26
  %49 = trunc nuw nsw i32 %.lobit2 to i16, !dbg !26
  %50 = trunc nuw nsw i32 %.lobit3 to i16, !dbg !26
  %51 = trunc nuw nsw i32 %.lobit4 to i16, !dbg !26
  %52 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !14
  %53 = insertelement <2 x i32> %52, i32 %18, i64 1, !dbg !14
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !14
  %55 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %56 = insertelement <2 x i32> %55, i32 %19, i64 1, !dbg !14
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !14
  %58 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !16
  %59 = insertelement <2 x i32> %58, i32 %24, i64 1, !dbg !16
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !16
  %61 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !16
  %62 = insertelement <2 x i32> %61, i32 %25, i64 1, !dbg !16
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !16
  %64 = fmul <2 x float> %60, splat (float 2.000000e+00), !dbg !27
  %65 = fmul <2 x float> %63, splat (float 2.000000e+00), !dbg !27
  %66 = fadd <2 x float> %64, splat (float -1.000000e+00), !dbg !28
  %67 = fadd <2 x float> %65, splat (float -1.000000e+00), !dbg !28
  %68 = fmul <2 x float> %66, %54, !dbg !29
  %69 = fmul <2 x float> %67, %57, !dbg !29
  %70 = fsub <2 x float> splat (float 1.000000e+00), %68, !dbg !30
  %71 = fsub <2 x float> splat (float 1.000000e+00), %69, !dbg !30
  %72 = shufflevector <2 x float> %71, <2 x float> %70, <2 x i32> <i32 0, i32 3>, !dbg !31
  %73 = bitcast <2 x float> %72 to <2 x i32>, !dbg !31
  %74 = shufflevector <2 x float> %70, <2 x float> %71, <2 x i32> <i32 0, i32 3>, !dbg !31
  %75 = bitcast <2 x float> %74 to <2 x i32>, !dbg !31
  %76 = fcmp olt <2 x float> %70, %71, !dbg !32
  %77 = fcmp uge <2 x float> %70, %71, !dbg !32
  %78 = shufflevector <2 x i1> %76, <2 x i1> %77, <2 x i32> <i32 0, i32 3>, !dbg !32
  %79 = xor <2 x i32> %73, %75, !dbg !33
  %80 = select <2 x i1> %78, <2 x i32> %79, <2 x i32> zeroinitializer, !dbg !34
  %81 = shufflevector <2 x i32> %75, <2 x i32> %73, <2 x i32> <i32 0, i32 3>, !dbg !35
  %82 = xor <2 x i32> %80, %81, !dbg !35
  %83 = shufflevector <2 x i32> %73, <2 x i32> %75, <2 x i32> <i32 0, i32 3>, !dbg !35
  %84 = xor <2 x i32> %80, %83, !dbg !35
  %85 = insertelement <2 x i16> poison, i16 %27, i64 0, !dbg !36
  %86 = insertelement <2 x i16> %85, i16 %29, i64 1, !dbg !36
  %87 = insertelement <2 x i16> poison, i16 %26, i64 0, !dbg !36
  %88 = insertelement <2 x i16> %87, i16 %28, i64 1, !dbg !36
  %89 = xor <2 x i16> %86, %88, !dbg !36
  %90 = select <2 x i1> %78, <2 x i16> %89, <2 x i16> zeroinitializer, !dbg !37
  %91 = xor <2 x i16> %90, %88, !dbg !38
  %92 = xor <2 x i16> %90, %86, !dbg !38
  %93 = extractelement <2 x i32> %82, i64 0, !dbg !39
  %94 = bitcast i32 %93 to float, !dbg !39
  %95 = extractelement <2 x i32> %84, i64 0, !dbg !39
  %96 = bitcast i32 %95 to float, !dbg !39
  %97 = extractelement <2 x i32> %82, i64 1, !dbg !40
  %98 = bitcast i32 %97 to float, !dbg !40
  %99 = extractelement <2 x i32> %84, i64 1, !dbg !40
  %100 = bitcast i32 %99 to float, !dbg !40
  %101 = trunc i32 %8 to i1, !dbg !41
  %102 = fcmp uge float %94, %98, !dbg !41
  %.not = xor i1 %102, %101, !dbg !41
  %103 = fcmp uge float %96, %100, !dbg !41
  %.not5 = xor i1 %103, %101, !dbg !41
  %104 = xor i32 %93, %97, !dbg !33
  %105 = xor i32 %95, %99, !dbg !33
  %106 = select i1 %.not, i32 0, i32 %104, !dbg !34
  %107 = select i1 %.not5, i32 0, i32 %105, !dbg !34
  %108 = xor i32 %106, %93, !dbg !35
  %109 = xor i32 %107, %95, !dbg !35
  %110 = xor i32 %106, %97, !dbg !35
  %111 = xor i32 %107, %99, !dbg !35
  %112 = extractelement <2 x i16> %91, i64 0, !dbg !36
  %113 = extractelement <2 x i16> %91, i64 1, !dbg !36
  %114 = xor i16 %112, %113, !dbg !36
  %115 = extractelement <2 x i16> %92, i64 0, !dbg !36
  %116 = extractelement <2 x i16> %92, i64 1, !dbg !36
  %117 = xor i16 %115, %116, !dbg !36
  %118 = select i1 %.not, i16 0, i16 %114, !dbg !37
  %119 = select i1 %.not5, i16 0, i16 %117, !dbg !37
  %120 = xor i16 %118, %112, !dbg !38
  %121 = xor i16 %119, %115, !dbg !38
  %122 = xor i16 %118, %113, !dbg !38
  %123 = xor i16 %119, %116, !dbg !38
  %124 = bitcast i32 %108 to float, !dbg !39
  %125 = bitcast i32 %110 to float, !dbg !39
  %126 = bitcast i32 %109 to float, !dbg !40
  %127 = bitcast i32 %111 to float, !dbg !40
  %128 = fcmp uge float %124, %126, !dbg !41
  %.not6 = xor i1 %128, %101, !dbg !41
  %129 = fcmp uge float %125, %127, !dbg !41
  %.not7 = xor i1 %129, %101, !dbg !41
  %130 = xor i32 %108, %109, !dbg !33
  %131 = xor i32 %110, %111, !dbg !33
  %132 = select i1 %.not6, i32 0, i32 %130, !dbg !34
  %133 = select i1 %.not7, i32 0, i32 %131, !dbg !34
  %134 = xor i32 %132, %108, !dbg !35
  %135 = xor i32 %132, %109, !dbg !35
  %136 = xor i32 %133, %110, !dbg !35
  %137 = xor i32 %133, %111, !dbg !35
  %138 = xor i16 %120, %121, !dbg !36
  %139 = xor i16 %122, %123, !dbg !36
  %140 = select i1 %.not6, i16 0, i16 %138, !dbg !37
  %141 = select i1 %.not7, i16 0, i16 %139, !dbg !37
  %142 = xor i16 %140, %120, !dbg !38
  %143 = xor i16 %140, %121, !dbg !38
  %144 = xor i16 %141, %122, !dbg !38
  %145 = xor i16 %141, %123, !dbg !38
  %146 = mul nuw nsw i32 %134, %34, !dbg !42
  %147 = mul nuw nsw i32 %135, %34, !dbg !42
  %148 = mul nuw nsw i32 %136, %34, !dbg !42
  %149 = mul nuw nsw i32 %137, %34, !dbg !42
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !43
  %151 = add i32 %146, %150, !dbg !46
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !43
  %153 = add i32 %147, %152, !dbg !46
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !43
  %155 = add i32 %148, %154, !dbg !46
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !43
  %157 = add i32 %149, %156, !dbg !46
  %158 = mul nuw nsw i32 %134, %10, !dbg !48
  %159 = mul nuw nsw i32 %135, %10, !dbg !48
  %160 = mul nuw nsw i32 %136, %10, !dbg !48
  %161 = mul nuw nsw i32 %137, %10, !dbg !48
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !43
  %163 = add i32 %158, %162, !dbg !46
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !43
  %165 = add i32 %159, %164, !dbg !46
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !43
  %167 = add i32 %160, %166, !dbg !46
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !43
  %169 = add i32 %161, %168, !dbg !46
  %170 = bitcast i32 %151 to float, !dbg !39
  %171 = bitcast i32 %153 to float, !dbg !39
  %172 = bitcast i32 %155 to float, !dbg !39
  %173 = bitcast i32 %157 to float, !dbg !39
  %174 = bitcast i32 %163 to float, !dbg !40
  %175 = bitcast i32 %165 to float, !dbg !40
  %176 = bitcast i32 %167 to float, !dbg !40
  %177 = bitcast i32 %169 to float, !dbg !40
  %178 = mul nuw nsw i16 %142, %40, !dbg !49
  %179 = mul nuw nsw i16 %143, %40, !dbg !49
  %180 = mul nuw nsw i16 %144, %40, !dbg !49
  %181 = mul nuw nsw i16 %145, %40, !dbg !49
  %182 = zext nneg i16 %178 to i32, !dbg !43
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !43
  %184 = trunc i32 %183 to i16, !dbg !43
  %185 = add i16 %178, %184, !dbg !46
  %186 = zext nneg i16 %179 to i32, !dbg !43
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !43
  %188 = trunc i32 %187 to i16, !dbg !43
  %189 = add i16 %179, %188, !dbg !46
  %190 = zext nneg i16 %180 to i32, !dbg !43
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 1, i32 31), !dbg !43
  %192 = trunc i32 %191 to i16, !dbg !43
  %193 = add i16 %180, %192, !dbg !46
  %194 = zext nneg i16 %181 to i32, !dbg !43
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !43
  %196 = trunc i32 %195 to i16, !dbg !43
  %197 = add i16 %181, %196, !dbg !46
  %198 = mul nuw nsw i16 %142, %46, !dbg !50
  %199 = mul nuw nsw i16 %143, %46, !dbg !50
  %200 = mul nuw nsw i16 %144, %46, !dbg !50
  %201 = mul nuw nsw i16 %145, %46, !dbg !50
  %202 = zext nneg i16 %198 to i32, !dbg !43
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !43
  %204 = trunc i32 %203 to i16, !dbg !43
  %205 = add i16 %198, %204, !dbg !46
  %206 = zext nneg i16 %199 to i32, !dbg !43
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !43
  %208 = trunc i32 %207 to i16, !dbg !43
  %209 = add i16 %199, %208, !dbg !46
  %210 = zext nneg i16 %200 to i32, !dbg !43
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 1, i32 31), !dbg !43
  %212 = trunc i32 %211 to i16, !dbg !43
  %213 = add i16 %200, %212, !dbg !46
  %214 = zext nneg i16 %201 to i32, !dbg !43
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !43
  %216 = trunc i32 %215 to i16, !dbg !43
  %217 = add i16 %201, %216, !dbg !46
  %218 = trunc i32 %30 to i1, !dbg !41
  %219 = fcmp uge float %170, %174, !dbg !41
  %.not8 = xor i1 %219, %218, !dbg !41
  %220 = fcmp uge float %171, %175, !dbg !41
  %.not9 = xor i1 %220, %218, !dbg !41
  %221 = fcmp uge float %172, %176, !dbg !41
  %.not10 = xor i1 %221, %218, !dbg !41
  %222 = fcmp uge float %173, %177, !dbg !41
  %.not11 = xor i1 %222, %218, !dbg !41
  %223 = xor i32 %151, %163, !dbg !33
  %224 = xor i32 %153, %165, !dbg !33
  %225 = xor i32 %155, %167, !dbg !33
  %226 = xor i32 %157, %169, !dbg !33
  %227 = select i1 %.not8, i32 0, i32 %223, !dbg !34
  %228 = select i1 %.not9, i32 0, i32 %224, !dbg !34
  %229 = select i1 %.not10, i32 0, i32 %225, !dbg !34
  %230 = select i1 %.not11, i32 0, i32 %226, !dbg !34
  %231 = xor i16 %185, %205, !dbg !36
  %232 = xor i16 %189, %209, !dbg !36
  %233 = xor i16 %193, %213, !dbg !36
  %234 = xor i16 %197, %217, !dbg !36
  %235 = select i1 %.not8, i16 0, i16 %231, !dbg !37
  %236 = select i1 %.not9, i16 0, i16 %232, !dbg !37
  %237 = select i1 %.not10, i16 0, i16 %233, !dbg !37
  %238 = select i1 %.not11, i16 0, i16 %234, !dbg !37
  %239 = trunc i32 %31 to i1, !dbg !41
  %240 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !35
  %241 = insertelement <2 x i32> %240, i32 %228, i64 1, !dbg !35
  %242 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !35
  %243 = insertelement <2 x i32> %242, i32 %135, i64 1, !dbg !35
  %244 = xor <2 x i32> %241, %243, !dbg !35
  %245 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !35
  %246 = insertelement <2 x i32> %245, i32 %230, i64 1, !dbg !35
  %247 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !35
  %248 = insertelement <2 x i32> %247, i32 %137, i64 1, !dbg !35
  %249 = xor <2 x i32> %246, %248, !dbg !35
  %250 = bitcast <2 x i32> %244 to <2 x float>, !dbg !39
  %251 = bitcast <2 x i32> %249 to <2 x float>, !dbg !40
  %252 = fcmp uge <2 x float> %250, %251, !dbg !41
  %253 = insertelement <2 x i1> poison, i1 %218, i64 0, !dbg !41
  %254 = shufflevector <2 x i1> %253, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !41
  %255 = xor <2 x i1> %252, %254, !dbg !41
  %256 = xor <2 x i32> %244, %249, !dbg !33
  %257 = select <2 x i1> %255, <2 x i32> zeroinitializer, <2 x i32> %256, !dbg !34
  %258 = xor <2 x i32> %257, %244, !dbg !35
  %259 = xor <2 x i32> %257, %249, !dbg !35
  %260 = shufflevector <2 x i32> %258, <2 x i32> %259, <2 x i32> <i32 0, i32 2>, !dbg !39
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !39
  %262 = shufflevector <2 x i32> %258, <2 x i32> %259, <2 x i32> <i32 1, i32 3>, !dbg !40
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !40
  %264 = fcmp uge <2 x float> %261, %263, !dbg !41
  %shift = shufflevector <2 x i32> %258, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %265 = xor <2 x i32> %258, %shift, !dbg !33
  %266 = extractelement <2 x i32> %265, i64 0, !dbg !33
  %shift93 = shufflevector <2 x i32> %259, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %267 = xor <2 x i32> %259, %shift93, !dbg !33
  %268 = extractelement <2 x i32> %267, i64 0, !dbg !33
  %269 = insertelement <2 x i1> poison, i1 %239, i64 0, !dbg !41
  %270 = shufflevector <2 x i1> %269, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !41
  %271 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !42
  %272 = shufflevector <2 x i32> %271, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !42
  %273 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !48
  %274 = shufflevector <2 x i32> %273, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !48
  %275 = insertelement <2 x i16> poison, i16 %237, i64 0, !dbg !38
  %276 = insertelement <2 x i16> %275, i16 %236, i64 1, !dbg !38
  %277 = insertelement <2 x i16> poison, i16 %144, i64 0, !dbg !38
  %278 = insertelement <2 x i16> %277, i16 %143, i64 1, !dbg !38
  %279 = xor <2 x i16> %276, %278, !dbg !38
  %280 = insertelement <2 x i16> poison, i16 %235, i64 0, !dbg !38
  %281 = insertelement <2 x i16> %280, i16 %238, i64 1, !dbg !38
  %282 = insertelement <2 x i16> poison, i16 %142, i64 0, !dbg !38
  %283 = insertelement <2 x i16> %282, i16 %145, i64 1, !dbg !38
  %284 = xor <2 x i16> %281, %283, !dbg !38
  %285 = xor <2 x i16> %279, %284, !dbg !36
  %286 = select <2 x i1> %255, <2 x i16> zeroinitializer, <2 x i16> %285, !dbg !37
  %287 = xor <2 x i16> %286, %279, !dbg !38
  %288 = xor <2 x i16> %286, %284, !dbg !38
  %289 = xor <2 x i1> %264, %254, !dbg !41
  %290 = extractelement <2 x i1> %289, i64 0, !dbg !34
  %291 = select i1 %290, i32 0, i32 %266, !dbg !34
  %292 = extractelement <2 x i1> %289, i64 1, !dbg !34
  %293 = select i1 %292, i32 0, i32 %268, !dbg !34
  %294 = insertelement <2 x i32> poison, i32 %291, i64 0, !dbg !35
  %295 = shufflevector <2 x i32> %294, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %296 = xor <2 x i32> %295, %258, !dbg !35
  %297 = insertelement <2 x i32> poison, i32 %293, i64 0, !dbg !35
  %298 = shufflevector <2 x i32> %297, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %299 = xor <2 x i32> %298, %259, !dbg !35
  %300 = shufflevector <2 x i16> %287, <2 x i16> poison, <2 x i32> <i32 1, i32 0>, !dbg !36
  %301 = xor <2 x i16> %300, %288, !dbg !36
  %302 = select <2 x i1> %289, <2 x i16> zeroinitializer, <2 x i16> %301, !dbg !37
  %303 = shufflevector <2 x i16> %302, <2 x i16> poison, <2 x i32> <i32 1, i32 0>, !dbg !38
  %304 = xor <2 x i16> %303, %287, !dbg !38
  %305 = xor <2 x i16> %302, %288, !dbg !38
  %306 = extractelement <2 x i32> %296, i64 0, !dbg !48
  %307 = mul nuw nsw i32 %306, %35, !dbg !42
  %308 = extractelement <2 x i32> %296, i64 1, !dbg !48
  %309 = mul nuw nsw i32 %308, %35, !dbg !42
  %310 = extractelement <2 x i32> %299, i64 0, !dbg !48
  %311 = mul nuw nsw i32 %310, %35, !dbg !42
  %312 = extractelement <2 x i32> %299, i64 1, !dbg !48
  %313 = mul nuw nsw i32 %312, %35, !dbg !42
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 2, i32 31), !dbg !43
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !43
  %316 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !46
  %317 = insertelement <2 x i32> %316, i32 %309, i64 1, !dbg !46
  %318 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !46
  %319 = insertelement <2 x i32> %318, i32 %315, i64 1, !dbg !46
  %320 = add <2 x i32> %317, %319, !dbg !46
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 2, i32 31), !dbg !43
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 2, i32 31), !dbg !43
  %323 = insertelement <2 x i32> poison, i32 %311, i64 0, !dbg !46
  %324 = insertelement <2 x i32> %323, i32 %313, i64 1, !dbg !46
  %325 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !46
  %326 = insertelement <2 x i32> %325, i32 %322, i64 1, !dbg !46
  %327 = add <2 x i32> %324, %326, !dbg !46
  %328 = mul nuw nsw i32 %306, %.lobit, !dbg !48
  %329 = mul nuw nsw i32 %308, %.lobit, !dbg !48
  %330 = mul nuw nsw i32 %310, %.lobit, !dbg !48
  %331 = mul nuw nsw i32 %312, %.lobit, !dbg !48
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !43
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 2, i32 31), !dbg !43
  %334 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !46
  %335 = insertelement <2 x i32> %334, i32 %329, i64 1, !dbg !46
  %336 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !46
  %337 = insertelement <2 x i32> %336, i32 %333, i64 1, !dbg !46
  %338 = add <2 x i32> %335, %337, !dbg !46
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !43
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 2, i32 31), !dbg !43
  %341 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !46
  %342 = insertelement <2 x i32> %341, i32 %331, i64 1, !dbg !46
  %343 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !46
  %344 = insertelement <2 x i32> %343, i32 %340, i64 1, !dbg !46
  %345 = add <2 x i32> %342, %344, !dbg !46
  %346 = bitcast <2 x i32> %320 to <2 x float>, !dbg !39
  %347 = bitcast <2 x i32> %327 to <2 x float>, !dbg !39
  %348 = bitcast <2 x i32> %338 to <2 x float>, !dbg !40
  %349 = bitcast <2 x i32> %345 to <2 x float>, !dbg !40
  %350 = extractelement <2 x i16> %305, i64 0, !dbg !50
  %351 = mul nuw nsw i16 %350, %41, !dbg !49
  %352 = extractelement <2 x i16> %304, i64 1, !dbg !50
  %353 = mul nuw nsw i16 %352, %41, !dbg !49
  %354 = extractelement <2 x i16> %304, i64 0, !dbg !50
  %355 = mul nuw nsw i16 %354, %41, !dbg !49
  %356 = extractelement <2 x i16> %305, i64 1, !dbg !50
  %357 = mul nuw nsw i16 %356, %41, !dbg !49
  %358 = zext i16 %351 to i32, !dbg !43
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !43
  %360 = trunc i32 %359 to i16, !dbg !43
  %361 = zext i16 %353 to i32, !dbg !43
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !43
  %363 = trunc i32 %362 to i16, !dbg !43
  %364 = zext i16 %355 to i32, !dbg !43
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !43
  %366 = trunc i32 %365 to i16, !dbg !43
  %367 = insertelement <2 x i16> poison, i16 %355, i64 0, !dbg !46
  %368 = insertelement <2 x i16> %367, i16 %353, i64 1, !dbg !46
  %369 = insertelement <2 x i16> poison, i16 %366, i64 0, !dbg !46
  %370 = insertelement <2 x i16> %369, i16 %363, i64 1, !dbg !46
  %371 = add <2 x i16> %368, %370, !dbg !46
  %372 = zext i16 %357 to i32, !dbg !43
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 2, i32 31), !dbg !43
  %374 = trunc i32 %373 to i16, !dbg !43
  %375 = insertelement <2 x i16> poison, i16 %351, i64 0, !dbg !46
  %376 = insertelement <2 x i16> %375, i16 %357, i64 1, !dbg !46
  %377 = insertelement <2 x i16> poison, i16 %360, i64 0, !dbg !46
  %378 = insertelement <2 x i16> %377, i16 %374, i64 1, !dbg !46
  %379 = add <2 x i16> %376, %378, !dbg !46
  %380 = mul nuw nsw i16 %350, %47, !dbg !50
  %381 = mul nuw nsw i16 %352, %47, !dbg !50
  %382 = mul nuw nsw i16 %354, %47, !dbg !50
  %383 = mul nuw nsw i16 %356, %47, !dbg !50
  %384 = zext i16 %380 to i32, !dbg !43
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 2, i32 31), !dbg !43
  %386 = trunc i32 %385 to i16, !dbg !43
  %387 = zext i16 %381 to i32, !dbg !43
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 2, i32 31), !dbg !43
  %389 = trunc i32 %388 to i16, !dbg !43
  %390 = zext i16 %382 to i32, !dbg !43
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 2, i32 31), !dbg !43
  %392 = trunc i32 %391 to i16, !dbg !43
  %393 = insertelement <2 x i16> poison, i16 %382, i64 0, !dbg !46
  %394 = insertelement <2 x i16> %393, i16 %381, i64 1, !dbg !46
  %395 = insertelement <2 x i16> poison, i16 %392, i64 0, !dbg !46
  %396 = insertelement <2 x i16> %395, i16 %389, i64 1, !dbg !46
  %397 = add <2 x i16> %394, %396, !dbg !46
  %398 = zext i16 %383 to i32, !dbg !43
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 2, i32 31), !dbg !43
  %400 = trunc i32 %399 to i16, !dbg !43
  %401 = insertelement <2 x i16> poison, i16 %380, i64 0, !dbg !46
  %402 = insertelement <2 x i16> %401, i16 %383, i64 1, !dbg !46
  %403 = insertelement <2 x i16> poison, i16 %386, i64 0, !dbg !46
  %404 = insertelement <2 x i16> %403, i16 %400, i64 1, !dbg !46
  %405 = add <2 x i16> %402, %404, !dbg !46
  %406 = fcmp uge <2 x float> %346, %348, !dbg !41
  %407 = xor <2 x i1> %406, %270, !dbg !41
  %408 = fcmp uge <2 x float> %347, %349, !dbg !41
  %409 = xor <2 x i1> %408, %270, !dbg !41
  %410 = xor <2 x i32> %320, %338, !dbg !33
  %411 = xor <2 x i32> %327, %345, !dbg !33
  %412 = select <2 x i1> %407, <2 x i32> zeroinitializer, <2 x i32> %410, !dbg !34
  %413 = select <2 x i1> %409, <2 x i32> zeroinitializer, <2 x i32> %411, !dbg !34
  %414 = xor <2 x i32> %412, %296, !dbg !35
  %415 = xor <2 x i32> %413, %299, !dbg !35
  %416 = xor <2 x i16> %371, %397, !dbg !36
  %417 = xor <2 x i16> %379, %405, !dbg !36
  %418 = shufflevector <2 x i1> %409, <2 x i1> %407, <2 x i32> <i32 0, i32 3>, !dbg !37
  %419 = select <2 x i1> %418, <2 x i16> zeroinitializer, <2 x i16> %416, !dbg !37
  %420 = shufflevector <2 x i1> %407, <2 x i1> %409, <2 x i32> <i32 0, i32 3>, !dbg !37
  %421 = select <2 x i1> %420, <2 x i16> zeroinitializer, <2 x i16> %417, !dbg !37
  %422 = xor <2 x i16> %419, %304, !dbg !38
  %423 = xor <2 x i16> %421, %305, !dbg !38
  %424 = mul nuw nsw <2 x i32> %414, %272, !dbg !42
  %425 = mul nuw nsw <2 x i32> %415, %272, !dbg !42
  %426 = extractelement <2 x i32> %424, i64 0, !dbg !43
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 1, i32 31), !dbg !43
  %428 = extractelement <2 x i32> %424, i64 1, !dbg !43
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 1, i32 31), !dbg !43
  %430 = insertelement <2 x i32> poison, i32 %427, i64 0, !dbg !46
  %431 = insertelement <2 x i32> %430, i32 %429, i64 1, !dbg !46
  %432 = add <2 x i32> %424, %431, !dbg !46
  %433 = extractelement <2 x i32> %425, i64 0, !dbg !43
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 1, i32 31), !dbg !43
  %435 = extractelement <2 x i32> %425, i64 1, !dbg !43
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 1, i32 31), !dbg !43
  %437 = insertelement <2 x i32> poison, i32 %434, i64 0, !dbg !46
  %438 = insertelement <2 x i32> %437, i32 %436, i64 1, !dbg !46
  %439 = add <2 x i32> %425, %438, !dbg !46
  %440 = mul nuw nsw <2 x i32> %414, %274, !dbg !48
  %441 = mul nuw nsw <2 x i32> %415, %274, !dbg !48
  %442 = extractelement <2 x i32> %440, i64 0, !dbg !43
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 1, i32 31), !dbg !43
  %444 = extractelement <2 x i32> %440, i64 1, !dbg !43
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 1, i32 31), !dbg !43
  %446 = insertelement <2 x i32> poison, i32 %443, i64 0, !dbg !46
  %447 = insertelement <2 x i32> %446, i32 %445, i64 1, !dbg !46
  %448 = add <2 x i32> %440, %447, !dbg !46
  %449 = extractelement <2 x i32> %441, i64 0, !dbg !43
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 1, i32 31), !dbg !43
  %451 = extractelement <2 x i32> %441, i64 1, !dbg !43
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 1, i32 31), !dbg !43
  %453 = insertelement <2 x i32> poison, i32 %450, i64 0, !dbg !46
  %454 = insertelement <2 x i32> %453, i32 %452, i64 1, !dbg !46
  %455 = add <2 x i32> %441, %454, !dbg !46
  %456 = bitcast <2 x i32> %432 to <2 x float>, !dbg !39
  %457 = bitcast <2 x i32> %439 to <2 x float>, !dbg !39
  %458 = bitcast <2 x i32> %448 to <2 x float>, !dbg !40
  %459 = bitcast <2 x i32> %455 to <2 x float>, !dbg !40
  %460 = insertelement <2 x i16> poison, i16 %40, i64 0, !dbg !49
  %461 = shufflevector <2 x i16> %460, <2 x i16> poison, <2 x i32> zeroinitializer, !dbg !49
  %462 = mul nuw nsw <2 x i16> %422, %461, !dbg !49
  %463 = mul nuw nsw <2 x i16> %423, %461, !dbg !49
  %464 = extractelement <2 x i16> %463, i64 0, !dbg !43
  %465 = zext i16 %464 to i32, !dbg !43
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 1, i32 31), !dbg !43
  %467 = extractelement <2 x i16> %462, i64 1, !dbg !43
  %468 = zext i16 %467 to i32, !dbg !43
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 1, i32 31), !dbg !43
  %470 = extractelement <2 x i16> %462, i64 0, !dbg !43
  %471 = zext i16 %470 to i32, !dbg !43
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 1, i32 31), !dbg !43
  %473 = trunc i32 %472 to i16, !dbg !43
  %474 = insertelement <2 x i16> poison, i16 %473, i64 0, !dbg !43
  %475 = trunc i32 %469 to i16, !dbg !43
  %476 = insertelement <2 x i16> %474, i16 %475, i64 1, !dbg !43
  %477 = add <2 x i16> %462, %476, !dbg !46
  %478 = extractelement <2 x i16> %463, i64 1, !dbg !43
  %479 = zext i16 %478 to i32, !dbg !43
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 1, i32 31), !dbg !43
  %481 = trunc i32 %466 to i16, !dbg !43
  %482 = insertelement <2 x i16> poison, i16 %481, i64 0, !dbg !43
  %483 = trunc i32 %480 to i16, !dbg !43
  %484 = insertelement <2 x i16> %482, i16 %483, i64 1, !dbg !43
  %485 = add <2 x i16> %463, %484, !dbg !46
  %486 = insertelement <2 x i16> poison, i16 %46, i64 0, !dbg !50
  %487 = shufflevector <2 x i16> %486, <2 x i16> poison, <2 x i32> zeroinitializer, !dbg !50
  %488 = mul nuw nsw <2 x i16> %422, %487, !dbg !50
  %489 = mul nuw nsw <2 x i16> %423, %487, !dbg !50
  %490 = extractelement <2 x i16> %489, i64 0, !dbg !43
  %491 = zext i16 %490 to i32, !dbg !43
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 1, i32 31), !dbg !43
  %493 = extractelement <2 x i16> %488, i64 1, !dbg !43
  %494 = zext i16 %493 to i32, !dbg !43
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 1, i32 31), !dbg !43
  %496 = extractelement <2 x i16> %488, i64 0, !dbg !43
  %497 = zext i16 %496 to i32, !dbg !43
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 1, i32 31), !dbg !43
  %499 = trunc i32 %498 to i16, !dbg !43
  %500 = insertelement <2 x i16> poison, i16 %499, i64 0, !dbg !43
  %501 = trunc i32 %495 to i16, !dbg !43
  %502 = insertelement <2 x i16> %500, i16 %501, i64 1, !dbg !43
  %503 = add <2 x i16> %488, %502, !dbg !46
  %504 = extractelement <2 x i16> %489, i64 1, !dbg !43
  %505 = zext i16 %504 to i32, !dbg !43
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 1, i32 31), !dbg !43
  %507 = insertelement <2 x i32> poison, i32 %492, i64 0, !dbg !43
  %508 = insertelement <2 x i32> %507, i32 %506, i64 1, !dbg !43
  %509 = trunc <2 x i32> %508 to <2 x i16>, !dbg !43
  %510 = add <2 x i16> %489, %509, !dbg !46
  %511 = fcmp uge <2 x float> %456, %458, !dbg !41
  %512 = xor <2 x i1> %511, %270, !dbg !41
  %513 = fcmp uge <2 x float> %457, %459, !dbg !41
  %514 = xor <2 x i1> %513, %270, !dbg !41
  %515 = xor <2 x i32> %432, %448, !dbg !33
  %516 = xor <2 x i32> %439, %455, !dbg !33
  %517 = select <2 x i1> %512, <2 x i32> zeroinitializer, <2 x i32> %515, !dbg !34
  %518 = select <2 x i1> %514, <2 x i32> zeroinitializer, <2 x i32> %516, !dbg !34
  %519 = xor <2 x i32> %517, %414, !dbg !35
  %520 = xor <2 x i32> %518, %415, !dbg !35
  %521 = xor <2 x i16> %503, %477, !dbg !36
  %522 = xor <2 x i16> %510, %485, !dbg !36
  %523 = shufflevector <2 x i1> %514, <2 x i1> %512, <2 x i32> <i32 0, i32 3>, !dbg !37
  %524 = select <2 x i1> %523, <2 x i16> zeroinitializer, <2 x i16> %521, !dbg !37
  %525 = shufflevector <2 x i1> %512, <2 x i1> %514, <2 x i32> <i32 0, i32 3>, !dbg !37
  %526 = select <2 x i1> %525, <2 x i16> zeroinitializer, <2 x i16> %522, !dbg !37
  %527 = xor <2 x i16> %524, %422, !dbg !38
  %528 = xor <2 x i16> %526, %423, !dbg !38
  %529 = bitcast <2 x i32> %519 to <2 x float>, !dbg !39
  %530 = bitcast <2 x i32> %520 to <2 x float>, !dbg !40
  %531 = fcmp uge <2 x float> %529, %530, !dbg !41
  %532 = xor <2 x i1> %531, %270, !dbg !41
  %533 = xor <2 x i32> %520, %519, !dbg !33
  %534 = select <2 x i1> %532, <2 x i32> zeroinitializer, <2 x i32> %533, !dbg !34
  %535 = xor <2 x i32> %534, %519, !dbg !35
  %536 = xor <2 x i32> %534, %520, !dbg !35
  %537 = xor <2 x i16> %528, %527, !dbg !36
  %538 = select <2 x i1> %532, <2 x i16> zeroinitializer, <2 x i16> %537, !dbg !37
  %539 = shufflevector <2 x i16> %528, <2 x i16> %527, <2 x i32> <i32 0, i32 3>, !dbg !38
  %540 = xor <2 x i16> %538, %539, !dbg !38
  %541 = shufflevector <2 x i16> %527, <2 x i16> %528, <2 x i32> <i32 0, i32 3>, !dbg !38
  %542 = xor <2 x i16> %538, %541, !dbg !38
  %543 = extractelement <2 x i32> %535, i64 0, !dbg !39
  %544 = bitcast i32 %543 to float, !dbg !39
  %545 = extractelement <2 x i32> %536, i64 0, !dbg !39
  %546 = bitcast i32 %545 to float, !dbg !39
  %547 = extractelement <2 x i32> %535, i64 1, !dbg !40
  %548 = bitcast i32 %547 to float, !dbg !40
  %549 = extractelement <2 x i32> %536, i64 1, !dbg !40
  %550 = bitcast i32 %549 to float, !dbg !40
  %551 = fcmp uge float %544, %548, !dbg !41
  %.not26 = xor i1 %551, %239, !dbg !41
  %552 = fcmp uge float %546, %550, !dbg !41
  %.not27 = xor i1 %552, %239, !dbg !41
  %553 = xor i32 %543, %547, !dbg !33
  %554 = xor i32 %545, %549, !dbg !33
  %555 = select i1 %.not26, i32 0, i32 %553, !dbg !34
  %556 = select i1 %.not27, i32 0, i32 %554, !dbg !34
  %557 = xor i32 %555, %543, !dbg !35
  %558 = xor i32 %555, %547, !dbg !35
  %559 = xor i32 %556, %545, !dbg !35
  %560 = xor i32 %556, %549, !dbg !35
  %561 = extractelement <2 x i16> %540, i64 0, !dbg !36
  %562 = extractelement <2 x i16> %540, i64 1, !dbg !36
  %563 = xor i16 %561, %562, !dbg !36
  %564 = extractelement <2 x i16> %542, i64 0, !dbg !36
  %565 = extractelement <2 x i16> %542, i64 1, !dbg !36
  %566 = xor i16 %564, %565, !dbg !36
  %567 = select i1 %.not26, i16 0, i16 %563, !dbg !37
  %568 = select i1 %.not27, i16 0, i16 %566, !dbg !37
  %569 = xor i16 %567, %561, !dbg !38
  %570 = xor i16 %567, %562, !dbg !38
  %571 = xor i16 %568, %564, !dbg !38
  %572 = xor i16 %568, %565, !dbg !38
  %573 = mul nuw nsw i32 %557, %36, !dbg !42
  %574 = mul nuw nsw i32 %558, %36, !dbg !42
  %575 = mul nuw nsw i32 %559, %36, !dbg !42
  %576 = mul nuw nsw i32 %560, %36, !dbg !42
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 4, i32 31), !dbg !43
  %578 = add i32 %573, %577, !dbg !46
  %579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %574, i32 4, i32 31), !dbg !43
  %580 = add i32 %574, %579, !dbg !46
  %581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 4, i32 31), !dbg !43
  %582 = add i32 %575, %581, !dbg !46
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 4, i32 31), !dbg !43
  %584 = add i32 %576, %583, !dbg !46
  %585 = mul nuw nsw i32 %557, %.lobit1, !dbg !48
  %586 = mul nuw nsw i32 %558, %.lobit1, !dbg !48
  %587 = mul nuw nsw i32 %559, %.lobit1, !dbg !48
  %588 = mul nuw nsw i32 %560, %.lobit1, !dbg !48
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 4, i32 31), !dbg !43
  %590 = add i32 %585, %589, !dbg !46
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 4, i32 31), !dbg !43
  %592 = add i32 %586, %591, !dbg !46
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 4, i32 31), !dbg !43
  %594 = add i32 %587, %593, !dbg !46
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 4, i32 31), !dbg !43
  %596 = add i32 %588, %595, !dbg !46
  %597 = bitcast i32 %578 to float, !dbg !39
  %598 = bitcast i32 %580 to float, !dbg !39
  %599 = bitcast i32 %582 to float, !dbg !39
  %600 = bitcast i32 %584 to float, !dbg !39
  %601 = bitcast i32 %590 to float, !dbg !40
  %602 = bitcast i32 %592 to float, !dbg !40
  %603 = bitcast i32 %594 to float, !dbg !40
  %604 = bitcast i32 %596 to float, !dbg !40
  %605 = mul nuw nsw i16 %569, %42, !dbg !49
  %606 = mul nuw nsw i16 %570, %42, !dbg !49
  %607 = mul nuw nsw i16 %571, %42, !dbg !49
  %608 = mul nuw nsw i16 %572, %42, !dbg !49
  %609 = zext i16 %605 to i32, !dbg !43
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 4, i32 31), !dbg !43
  %611 = trunc i32 %610 to i16, !dbg !43
  %612 = add i16 %605, %611, !dbg !46
  %613 = zext i16 %606 to i32, !dbg !43
  %614 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %613, i32 4, i32 31), !dbg !43
  %615 = trunc i32 %614 to i16, !dbg !43
  %616 = add i16 %606, %615, !dbg !46
  %617 = zext i16 %607 to i32, !dbg !43
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 4, i32 31), !dbg !43
  %619 = trunc i32 %618 to i16, !dbg !43
  %620 = add i16 %607, %619, !dbg !46
  %621 = zext i16 %608 to i32, !dbg !43
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %621, i32 4, i32 31), !dbg !43
  %623 = trunc i32 %622 to i16, !dbg !43
  %624 = add i16 %608, %623, !dbg !46
  %625 = mul nuw nsw i16 %569, %48, !dbg !50
  %626 = mul nuw nsw i16 %570, %48, !dbg !50
  %627 = mul nuw nsw i16 %571, %48, !dbg !50
  %628 = mul nuw nsw i16 %572, %48, !dbg !50
  %629 = zext i16 %625 to i32, !dbg !43
  %630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %629, i32 4, i32 31), !dbg !43
  %631 = trunc i32 %630 to i16, !dbg !43
  %632 = add i16 %625, %631, !dbg !46
  %633 = zext i16 %626 to i32, !dbg !43
  %634 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %633, i32 4, i32 31), !dbg !43
  %635 = trunc i32 %634 to i16, !dbg !43
  %636 = add i16 %626, %635, !dbg !46
  %637 = zext i16 %627 to i32, !dbg !43
  %638 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %637, i32 4, i32 31), !dbg !43
  %639 = trunc i32 %638 to i16, !dbg !43
  %640 = add i16 %627, %639, !dbg !46
  %641 = zext i16 %628 to i32, !dbg !43
  %642 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %641, i32 4, i32 31), !dbg !43
  %643 = trunc i32 %642 to i16, !dbg !43
  %644 = add i16 %628, %643, !dbg !46
  %645 = trunc i32 %32 to i1, !dbg !41
  %646 = fcmp uge float %597, %601, !dbg !41
  %.not28 = xor i1 %646, %645, !dbg !41
  %647 = fcmp uge float %598, %602, !dbg !41
  %.not29 = xor i1 %647, %645, !dbg !41
  %648 = fcmp uge float %599, %603, !dbg !41
  %.not30 = xor i1 %648, %645, !dbg !41
  %649 = fcmp uge float %600, %604, !dbg !41
  %.not31 = xor i1 %649, %645, !dbg !41
  %650 = xor i32 %578, %590, !dbg !33
  %651 = xor i32 %580, %592, !dbg !33
  %652 = xor i32 %582, %594, !dbg !33
  %653 = xor i32 %584, %596, !dbg !33
  %654 = select i1 %.not28, i32 0, i32 %650, !dbg !34
  %655 = select i1 %.not29, i32 0, i32 %651, !dbg !34
  %656 = select i1 %.not30, i32 0, i32 %652, !dbg !34
  %657 = select i1 %.not31, i32 0, i32 %653, !dbg !34
  %658 = xor i32 %654, %557, !dbg !35
  %659 = xor i32 %655, %558, !dbg !35
  %660 = xor i32 %656, %559, !dbg !35
  %661 = xor i32 %657, %560, !dbg !35
  %662 = xor i16 %612, %632, !dbg !36
  %663 = xor i16 %636, %616, !dbg !36
  %664 = xor i16 %640, %620, !dbg !36
  %665 = xor i16 %644, %624, !dbg !36
  %666 = select i1 %.not28, i16 0, i16 %662, !dbg !37
  %667 = select i1 %.not29, i16 0, i16 %663, !dbg !37
  %668 = select i1 %.not30, i16 0, i16 %664, !dbg !37
  %669 = select i1 %.not31, i16 0, i16 %665, !dbg !37
  %670 = xor i16 %666, %569, !dbg !38
  %671 = xor i16 %667, %570, !dbg !38
  %672 = xor i16 %668, %571, !dbg !38
  %673 = xor i16 %669, %572, !dbg !38
  %674 = mul nuw nsw i32 %658, %35, !dbg !42
  %675 = mul nuw nsw i32 %659, %35, !dbg !42
  %676 = mul nuw nsw i32 %660, %35, !dbg !42
  %677 = mul nuw nsw i32 %661, %35, !dbg !42
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 2, i32 31), !dbg !43
  %679 = add i32 %674, %678, !dbg !46
  %680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %675, i32 2, i32 31), !dbg !43
  %681 = add i32 %675, %680, !dbg !46
  %682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 2, i32 31), !dbg !43
  %683 = add i32 %676, %682, !dbg !46
  %684 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %677, i32 2, i32 31), !dbg !43
  %685 = add i32 %677, %684, !dbg !46
  %686 = mul nuw nsw i32 %658, %.lobit, !dbg !48
  %687 = mul nuw nsw i32 %659, %.lobit, !dbg !48
  %688 = mul nuw nsw i32 %660, %.lobit, !dbg !48
  %689 = mul nuw nsw i32 %661, %.lobit, !dbg !48
  %690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %686, i32 2, i32 31), !dbg !43
  %691 = add i32 %686, %690, !dbg !46
  %692 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %687, i32 2, i32 31), !dbg !43
  %693 = add i32 %692, %687, !dbg !46
  %694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %688, i32 2, i32 31), !dbg !43
  %695 = add i32 %694, %688, !dbg !46
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %689, i32 2, i32 31), !dbg !43
  %697 = add i32 %696, %689, !dbg !46
  %698 = bitcast i32 %679 to float, !dbg !39
  %699 = bitcast i32 %681 to float, !dbg !39
  %700 = bitcast i32 %683 to float, !dbg !39
  %701 = bitcast i32 %685 to float, !dbg !39
  %702 = bitcast i32 %691 to float, !dbg !40
  %703 = bitcast i32 %693 to float, !dbg !40
  %704 = bitcast i32 %695 to float, !dbg !40
  %705 = bitcast i32 %697 to float, !dbg !40
  %706 = mul nuw nsw i16 %670, %41, !dbg !49
  %707 = mul nuw nsw i16 %671, %41, !dbg !49
  %708 = mul nuw nsw i16 %672, %41, !dbg !49
  %709 = mul nuw nsw i16 %673, %41, !dbg !49
  %710 = zext i16 %706 to i32, !dbg !43
  %711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %710, i32 2, i32 31), !dbg !43
  %712 = trunc i32 %711 to i16, !dbg !43
  %713 = add i16 %706, %712, !dbg !46
  %714 = zext i16 %707 to i32, !dbg !43
  %715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %714, i32 2, i32 31), !dbg !43
  %716 = trunc i32 %715 to i16, !dbg !43
  %717 = add i16 %707, %716, !dbg !46
  %718 = zext i16 %708 to i32, !dbg !43
  %719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %718, i32 2, i32 31), !dbg !43
  %720 = trunc i32 %719 to i16, !dbg !43
  %721 = add i16 %708, %720, !dbg !46
  %722 = zext i16 %709 to i32, !dbg !43
  %723 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %722, i32 2, i32 31), !dbg !43
  %724 = trunc i32 %723 to i16, !dbg !43
  %725 = add i16 %709, %724, !dbg !46
  %726 = mul nuw nsw i16 %670, %47, !dbg !50
  %727 = mul nuw nsw i16 %671, %47, !dbg !50
  %728 = mul nuw nsw i16 %672, %47, !dbg !50
  %729 = mul nuw nsw i16 %673, %47, !dbg !50
  %730 = zext i16 %726 to i32, !dbg !43
  %731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %730, i32 2, i32 31), !dbg !43
  %732 = trunc i32 %731 to i16, !dbg !43
  %733 = add i16 %726, %732, !dbg !46
  %734 = zext i16 %727 to i32, !dbg !43
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 2, i32 31), !dbg !43
  %736 = trunc i32 %735 to i16, !dbg !43
  %737 = add i16 %727, %736, !dbg !46
  %738 = zext i16 %728 to i32, !dbg !43
  %739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %738, i32 2, i32 31), !dbg !43
  %740 = trunc i32 %739 to i16, !dbg !43
  %741 = add i16 %728, %740, !dbg !46
  %742 = zext i16 %729 to i32, !dbg !43
  %743 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %742, i32 2, i32 31), !dbg !43
  %744 = trunc i32 %743 to i16, !dbg !43
  %745 = add i16 %729, %744, !dbg !46
  %746 = fcmp uge float %698, %702, !dbg !41
  %.not32 = xor i1 %746, %645, !dbg !41
  %747 = fcmp uge float %699, %703, !dbg !41
  %.not33 = xor i1 %747, %645, !dbg !41
  %748 = fcmp uge float %700, %704, !dbg !41
  %.not34 = xor i1 %748, %645, !dbg !41
  %749 = fcmp uge float %701, %705, !dbg !41
  %.not35 = xor i1 %749, %645, !dbg !41
  %750 = xor i32 %679, %691, !dbg !33
  %751 = xor i32 %693, %681, !dbg !33
  %752 = xor i32 %695, %683, !dbg !33
  %753 = xor i32 %697, %685, !dbg !33
  %754 = select i1 %.not32, i32 0, i32 %750, !dbg !34
  %755 = select i1 %.not33, i32 0, i32 %751, !dbg !34
  %756 = select i1 %.not34, i32 0, i32 %752, !dbg !34
  %757 = select i1 %.not35, i32 0, i32 %753, !dbg !34
  %758 = xor i32 %754, %658, !dbg !35
  %759 = xor i32 %755, %659, !dbg !35
  %760 = xor i32 %756, %660, !dbg !35
  %761 = xor i32 %757, %661, !dbg !35
  %762 = xor i16 %733, %713, !dbg !36
  %763 = xor i16 %737, %717, !dbg !36
  %764 = xor i16 %741, %721, !dbg !36
  %765 = xor i16 %745, %725, !dbg !36
  %766 = select i1 %.not32, i16 0, i16 %762, !dbg !37
  %767 = select i1 %.not33, i16 0, i16 %763, !dbg !37
  %768 = select i1 %.not34, i16 0, i16 %764, !dbg !37
  %769 = select i1 %.not35, i16 0, i16 %765, !dbg !37
  %770 = mul nuw nsw i32 %758, %34, !dbg !42
  %771 = mul nuw nsw i32 %759, %34, !dbg !42
  %772 = mul nuw nsw i32 %760, %34, !dbg !42
  %773 = mul nuw nsw i32 %761, %34, !dbg !42
  %774 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %770, i32 1, i32 31), !dbg !43
  %775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 1, i32 31), !dbg !43
  %776 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %772, i32 1, i32 31), !dbg !43
  %777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %773, i32 1, i32 31), !dbg !43
  %778 = mul nuw nsw i32 %758, %10, !dbg !48
  %779 = mul nuw nsw i32 %759, %10, !dbg !48
  %780 = mul nuw nsw i32 %760, %10, !dbg !48
  %781 = mul nuw nsw i32 %761, %10, !dbg !48
  %782 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %778, i32 1, i32 31), !dbg !43
  %783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 1, i32 31), !dbg !43
  %784 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %780, i32 1, i32 31), !dbg !43
  %785 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %781, i32 1, i32 31), !dbg !43
  %786 = trunc i32 %33 to i1, !dbg !41
  %787 = insertelement <2 x i32> poison, i32 %759, i64 0, !dbg !35
  %788 = insertelement <2 x i32> %787, i32 %758, i64 1, !dbg !35
  %789 = insertelement <2 x i32> poison, i32 %761, i64 0, !dbg !35
  %790 = insertelement <2 x i32> %789, i32 %760, i64 1, !dbg !35
  %791 = insertelement <2 x i1> poison, i1 %645, i64 0, !dbg !41
  %792 = shufflevector <2 x i1> %791, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !41
  %793 = insertelement <2 x i16> poison, i16 %767, i64 0, !dbg !38
  %794 = insertelement <2 x i16> %793, i16 %766, i64 1, !dbg !38
  %795 = insertelement <2 x i16> poison, i16 %671, i64 0, !dbg !38
  %796 = insertelement <2 x i16> %795, i16 %670, i64 1, !dbg !38
  %797 = xor <2 x i16> %794, %796, !dbg !38
  %798 = insertelement <2 x i16> poison, i16 %769, i64 0, !dbg !38
  %799 = insertelement <2 x i16> %798, i16 %768, i64 1, !dbg !38
  %800 = insertelement <2 x i16> poison, i16 %673, i64 0, !dbg !38
  %801 = insertelement <2 x i16> %800, i16 %672, i64 1, !dbg !38
  %802 = xor <2 x i16> %799, %801, !dbg !38
  %803 = insertelement <2 x i32> poison, i32 %775, i64 0, !dbg !46
  %804 = insertelement <2 x i32> %803, i32 %774, i64 1, !dbg !46
  %805 = insertelement <2 x i32> poison, i32 %771, i64 0, !dbg !46
  %806 = insertelement <2 x i32> %805, i32 %770, i64 1, !dbg !46
  %807 = add <2 x i32> %804, %806, !dbg !46
  %808 = insertelement <2 x i32> poison, i32 %777, i64 0, !dbg !46
  %809 = insertelement <2 x i32> %808, i32 %776, i64 1, !dbg !46
  %810 = insertelement <2 x i32> poison, i32 %773, i64 0, !dbg !46
  %811 = insertelement <2 x i32> %810, i32 %772, i64 1, !dbg !46
  %812 = add <2 x i32> %809, %811, !dbg !46
  %813 = insertelement <2 x i32> poison, i32 %783, i64 0, !dbg !46
  %814 = insertelement <2 x i32> %813, i32 %782, i64 1, !dbg !46
  %815 = insertelement <2 x i32> poison, i32 %779, i64 0, !dbg !46
  %816 = insertelement <2 x i32> %815, i32 %778, i64 1, !dbg !46
  %817 = add <2 x i32> %814, %816, !dbg !46
  %818 = insertelement <2 x i32> poison, i32 %785, i64 0, !dbg !46
  %819 = insertelement <2 x i32> %818, i32 %784, i64 1, !dbg !46
  %820 = insertelement <2 x i32> poison, i32 %781, i64 0, !dbg !46
  %821 = insertelement <2 x i32> %820, i32 %780, i64 1, !dbg !46
  %822 = add <2 x i32> %819, %821, !dbg !46
  %823 = bitcast <2 x i32> %807 to <2 x float>, !dbg !39
  %824 = bitcast <2 x i32> %812 to <2 x float>, !dbg !39
  %825 = bitcast <2 x i32> %817 to <2 x float>, !dbg !40
  %826 = bitcast <2 x i32> %822 to <2 x float>, !dbg !40
  %827 = mul nuw nsw <2 x i16> %797, %461, !dbg !49
  %828 = mul nuw nsw <2 x i16> %802, %461, !dbg !49
  %829 = extractelement <2 x i16> %827, i64 1, !dbg !43
  %830 = zext i16 %829 to i32, !dbg !43
  %831 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %830, i32 1, i32 31), !dbg !43
  %832 = extractelement <2 x i16> %827, i64 0, !dbg !43
  %833 = zext i16 %832 to i32, !dbg !43
  %834 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %833, i32 1, i32 31), !dbg !43
  %835 = trunc i32 %834 to i16, !dbg !43
  %836 = insertelement <2 x i16> poison, i16 %835, i64 0, !dbg !43
  %837 = trunc i32 %831 to i16, !dbg !43
  %838 = insertelement <2 x i16> %836, i16 %837, i64 1, !dbg !43
  %839 = add <2 x i16> %827, %838, !dbg !46
  %840 = extractelement <2 x i16> %828, i64 1, !dbg !43
  %841 = zext i16 %840 to i32, !dbg !43
  %842 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %841, i32 1, i32 31), !dbg !43
  %843 = extractelement <2 x i16> %828, i64 0, !dbg !43
  %844 = zext i16 %843 to i32, !dbg !43
  %845 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %844, i32 1, i32 31), !dbg !43
  %846 = insertelement <2 x i32> poison, i32 %845, i64 0, !dbg !43
  %847 = insertelement <2 x i32> %846, i32 %842, i64 1, !dbg !43
  %848 = trunc <2 x i32> %847 to <2 x i16>, !dbg !43
  %849 = add <2 x i16> %828, %848, !dbg !46
  %850 = mul nuw nsw <2 x i16> %797, %487, !dbg !50
  %851 = mul nuw nsw <2 x i16> %802, %487, !dbg !50
  %852 = extractelement <2 x i16> %850, i64 1, !dbg !43
  %853 = zext i16 %852 to i32, !dbg !43
  %854 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %853, i32 1, i32 31), !dbg !43
  %855 = extractelement <2 x i16> %850, i64 0, !dbg !43
  %856 = zext i16 %855 to i32, !dbg !43
  %857 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %856, i32 1, i32 31), !dbg !43
  %858 = insertelement <2 x i32> poison, i32 %857, i64 0, !dbg !43
  %859 = insertelement <2 x i32> %858, i32 %854, i64 1, !dbg !43
  %860 = trunc <2 x i32> %859 to <2 x i16>, !dbg !43
  %861 = add <2 x i16> %850, %860, !dbg !46
  %862 = extractelement <2 x i16> %851, i64 1, !dbg !43
  %863 = zext i16 %862 to i32, !dbg !43
  %864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %863, i32 1, i32 31), !dbg !43
  %865 = extractelement <2 x i16> %851, i64 0, !dbg !43
  %866 = zext i16 %865 to i32, !dbg !43
  %867 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %866, i32 1, i32 31), !dbg !43
  %868 = trunc i32 %867 to i16, !dbg !43
  %869 = insertelement <2 x i16> poison, i16 %868, i64 0, !dbg !43
  %870 = trunc i32 %864 to i16, !dbg !43
  %871 = insertelement <2 x i16> %869, i16 %870, i64 1, !dbg !43
  %872 = add <2 x i16> %851, %871, !dbg !46
  %873 = fcmp uge <2 x float> %823, %825, !dbg !41
  %874 = xor <2 x i1> %873, %792, !dbg !41
  %875 = fcmp uge <2 x float> %824, %826, !dbg !41
  %876 = xor <2 x i1> %875, %792, !dbg !41
  %877 = xor <2 x i32> %817, %807, !dbg !33
  %878 = extractelement <2 x i32> %877, i64 1, !dbg !33
  %879 = xor <2 x i32> %817, %807, !dbg !33
  %880 = extractelement <2 x i32> %879, i64 0, !dbg !33
  %881 = xor <2 x i32> %822, %812, !dbg !33
  %882 = extractelement <2 x i32> %881, i64 1, !dbg !33
  %883 = xor <2 x i32> %822, %812, !dbg !33
  %884 = extractelement <2 x i32> %883, i64 0, !dbg !33
  %885 = extractelement <2 x i1> %874, i64 1, !dbg !34
  %886 = select i1 %885, i32 0, i32 %878, !dbg !34
  %887 = extractelement <2 x i1> %874, i64 0, !dbg !34
  %888 = select i1 %887, i32 0, i32 %880, !dbg !34
  %889 = extractelement <2 x i1> %876, i64 1, !dbg !34
  %890 = select i1 %889, i32 0, i32 %882, !dbg !34
  %891 = extractelement <2 x i1> %876, i64 0, !dbg !34
  %892 = select i1 %891, i32 0, i32 %884, !dbg !34
  %893 = xor <2 x i16> %861, %839, !dbg !36
  %894 = xor <2 x i16> %872, %849, !dbg !36
  %895 = select <2 x i1> %874, <2 x i16> zeroinitializer, <2 x i16> %893, !dbg !37
  %896 = select <2 x i1> %876, <2 x i16> zeroinitializer, <2 x i16> %894, !dbg !37
  %897 = xor <2 x i16> %895, %797, !dbg !38
  %898 = xor <2 x i16> %896, %802, !dbg !38
  %899 = xor <2 x i16> %898, %897, !dbg !36
  %900 = insertelement <2 x i32> poison, i32 %888, i64 0, !dbg !35
  %901 = insertelement <2 x i32> %900, i32 %886, i64 1, !dbg !35
  %902 = xor <2 x i32> %901, %788, !dbg !35
  %903 = insertelement <2 x i32> poison, i32 %892, i64 0, !dbg !35
  %904 = insertelement <2 x i32> %903, i32 %890, i64 1, !dbg !35
  %905 = xor <2 x i32> %904, %790, !dbg !35
  %906 = bitcast <2 x i32> %902 to <2 x float>, !dbg !39
  %907 = bitcast <2 x i32> %905 to <2 x float>, !dbg !40
  %908 = fcmp uge <2 x float> %906, %907, !dbg !41
  %909 = xor <2 x i1> %908, %792, !dbg !41
  %910 = xor <2 x i32> %905, %902, !dbg !33
  %911 = select <2 x i1> %909, <2 x i32> zeroinitializer, <2 x i32> %910, !dbg !34
  %912 = xor <2 x i32> %911, %902, !dbg !35
  %913 = xor <2 x i32> %911, %905, !dbg !35
  %914 = select <2 x i1> %909, <2 x i16> zeroinitializer, <2 x i16> %899, !dbg !37
  %915 = shufflevector <2 x i16> %897, <2 x i16> %898, <2 x i32> <i32 0, i32 3>, !dbg !38
  %916 = xor <2 x i16> %914, %915, !dbg !38
  %917 = shufflevector <2 x i16> %898, <2 x i16> %897, <2 x i32> <i32 0, i32 3>, !dbg !38
  %918 = xor <2 x i16> %914, %917, !dbg !38
  %919 = shufflevector <2 x i16> %918, <2 x i16> poison, <2 x i32> <i32 1, i32 0>, !dbg !38
  %920 = shufflevector <2 x i32> %912, <2 x i32> %913, <2 x i32> <i32 1, i32 3>, !dbg !39
  %921 = bitcast <2 x i32> %920 to <2 x float>, !dbg !39
  %922 = shufflevector <2 x i32> %912, <2 x i32> %913, <2 x i32> <i32 0, i32 2>, !dbg !40
  %923 = bitcast <2 x i32> %922 to <2 x float>, !dbg !40
  %924 = fcmp uge <2 x float> %921, %923, !dbg !41
  %925 = xor <2 x i1> %924, %792, !dbg !41
  %shift94 = shufflevector <2 x i32> %912, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %926 = xor <2 x i32> %912, %shift94, !dbg !33
  %927 = extractelement <2 x i32> %926, i64 0, !dbg !33
  %shift95 = shufflevector <2 x i32> %913, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %928 = xor <2 x i32> %913, %shift95, !dbg !33
  %929 = extractelement <2 x i32> %928, i64 0, !dbg !33
  %930 = extractelement <2 x i1> %925, i64 0, !dbg !34
  %931 = select i1 %930, i32 0, i32 %927, !dbg !34
  %932 = extractelement <2 x i1> %925, i64 1, !dbg !34
  %933 = select i1 %932, i32 0, i32 %929, !dbg !34
  %934 = insertelement <2 x i32> poison, i32 %931, i64 0, !dbg !35
  %935 = shufflevector <2 x i32> %934, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %936 = xor <2 x i32> %935, %912, !dbg !35
  %937 = insertelement <2 x i32> poison, i32 %933, i64 0, !dbg !35
  %938 = shufflevector <2 x i32> %937, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %939 = xor <2 x i32> %938, %913, !dbg !35
  %940 = xor <2 x i16> %916, %919, !dbg !36
  %941 = select <2 x i1> %925, <2 x i16> zeroinitializer, <2 x i16> %940, !dbg !37
  %942 = extractelement <2 x i32> %936, i64 1, !dbg !48
  %943 = mul nuw nsw i32 %942, %37, !dbg !42
  %944 = extractelement <2 x i32> %936, i64 0, !dbg !48
  %945 = mul nuw nsw i32 %944, %37, !dbg !42
  %946 = extractelement <2 x i32> %939, i64 1, !dbg !48
  %947 = mul nuw nsw i32 %946, %37, !dbg !42
  %948 = extractelement <2 x i32> %939, i64 0, !dbg !48
  %949 = mul nuw nsw i32 %948, %37, !dbg !42
  %950 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %943, i32 8, i32 31), !dbg !43
  %951 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 8, i32 31), !dbg !43
  %952 = insertelement <2 x i32> poison, i32 %945, i64 0, !dbg !46
  %953 = insertelement <2 x i32> %952, i32 %943, i64 1, !dbg !46
  %954 = insertelement <2 x i32> poison, i32 %951, i64 0, !dbg !46
  %955 = insertelement <2 x i32> %954, i32 %950, i64 1, !dbg !46
  %956 = add <2 x i32> %953, %955, !dbg !46
  %957 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %947, i32 8, i32 31), !dbg !43
  %958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %949, i32 8, i32 31), !dbg !43
  %959 = insertelement <2 x i32> poison, i32 %949, i64 0, !dbg !46
  %960 = insertelement <2 x i32> %959, i32 %947, i64 1, !dbg !46
  %961 = insertelement <2 x i32> poison, i32 %958, i64 0, !dbg !46
  %962 = insertelement <2 x i32> %961, i32 %957, i64 1, !dbg !46
  %963 = add <2 x i32> %960, %962, !dbg !46
  %964 = mul nuw nsw i32 %942, %.lobit2, !dbg !48
  %965 = mul nuw nsw i32 %944, %.lobit2, !dbg !48
  %966 = mul nuw nsw i32 %946, %.lobit2, !dbg !48
  %967 = mul nuw nsw i32 %948, %.lobit2, !dbg !48
  %968 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %964, i32 8, i32 31), !dbg !43
  %969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %965, i32 8, i32 31), !dbg !43
  %970 = insertelement <2 x i32> poison, i32 %965, i64 0, !dbg !46
  %971 = insertelement <2 x i32> %970, i32 %964, i64 1, !dbg !46
  %972 = insertelement <2 x i32> poison, i32 %969, i64 0, !dbg !46
  %973 = insertelement <2 x i32> %972, i32 %968, i64 1, !dbg !46
  %974 = add <2 x i32> %971, %973, !dbg !46
  %975 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %966, i32 8, i32 31), !dbg !43
  %976 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %967, i32 8, i32 31), !dbg !43
  %977 = insertelement <2 x i32> poison, i32 %967, i64 0, !dbg !46
  %978 = insertelement <2 x i32> %977, i32 %966, i64 1, !dbg !46
  %979 = insertelement <2 x i32> poison, i32 %976, i64 0, !dbg !46
  %980 = insertelement <2 x i32> %979, i32 %975, i64 1, !dbg !46
  %981 = add <2 x i32> %978, %980, !dbg !46
  %982 = bitcast <2 x i32> %956 to <2 x float>, !dbg !39
  %983 = bitcast <2 x i32> %963 to <2 x float>, !dbg !39
  %984 = bitcast <2 x i32> %974 to <2 x float>, !dbg !40
  %985 = bitcast <2 x i32> %981 to <2 x float>, !dbg !40
  %986 = fcmp uge <2 x float> %982, %984, !dbg !41
  %987 = insertelement <2 x i1> poison, i1 %786, i64 0, !dbg !41
  %988 = shufflevector <2 x i1> %987, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !41
  %989 = xor <2 x i1> %986, %988, !dbg !41
  %990 = fcmp uge <2 x float> %983, %985, !dbg !41
  %991 = xor <2 x i1> %990, %988, !dbg !41
  %992 = xor <2 x i32> %956, %974, !dbg !33
  %993 = xor <2 x i32> %963, %981, !dbg !33
  %994 = select <2 x i1> %989, <2 x i32> zeroinitializer, <2 x i32> %992, !dbg !34
  %995 = select <2 x i1> %991, <2 x i32> zeroinitializer, <2 x i32> %993, !dbg !34
  %996 = xor <2 x i32> %994, %936, !dbg !35
  %997 = xor <2 x i32> %995, %939, !dbg !35
  %998 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !42
  %999 = shufflevector <2 x i32> %998, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !42
  %1000 = mul nuw nsw <2 x i32> %996, %999, !dbg !42
  %1001 = mul nuw nsw <2 x i32> %997, %999, !dbg !42
  %1002 = extractelement <2 x i32> %1000, i64 1, !dbg !43
  %1003 = extractelement <2 x i32> %1000, i64 0, !dbg !43
  %1004 = extractelement <2 x i32> %1001, i64 1, !dbg !43
  %1005 = extractelement <2 x i32> %1001, i64 0, !dbg !43
  %1006 = insertelement <2 x i32> poison, i32 %.lobit1, i64 0, !dbg !48
  %1007 = shufflevector <2 x i32> %1006, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !48
  %1008 = mul nuw nsw <2 x i32> %996, %1007, !dbg !48
  %1009 = mul nuw nsw <2 x i32> %997, %1007, !dbg !48
  %1010 = extractelement <2 x i32> %1008, i64 1, !dbg !43
  %1011 = extractelement <2 x i32> %1008, i64 0, !dbg !43
  %1012 = extractelement <2 x i32> %1009, i64 1, !dbg !43
  %1013 = extractelement <2 x i32> %1009, i64 0, !dbg !43
  %1014 = shufflevector <2 x i16> %941, <2 x i16> poison, <2 x i32> <i32 1, i32 0>, !dbg !38
  %1015 = xor <2 x i16> %941, %916, !dbg !38
  %1016 = xor <2 x i16> %1014, %918, !dbg !38
  %1017 = extractelement <2 x i16> %1016, i64 1, !dbg !50
  %1018 = mul nuw nsw i16 %1017, %43, !dbg !49
  %1019 = extractelement <2 x i16> %1015, i64 0, !dbg !50
  %1020 = mul nuw nsw i16 %1019, %43, !dbg !49
  %1021 = extractelement <2 x i16> %1015, i64 1, !dbg !50
  %1022 = mul nuw nsw i16 %1021, %43, !dbg !49
  %1023 = extractelement <2 x i16> %1016, i64 0, !dbg !50
  %1024 = mul nuw nsw i16 %1023, %43, !dbg !49
  %1025 = zext i16 %1018 to i32, !dbg !43
  %1026 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1025, i32 8, i32 31), !dbg !43
  %1027 = trunc i32 %1026 to i16, !dbg !43
  %1028 = add i16 %1018, %1027, !dbg !46
  %1029 = zext i16 %1020 to i32, !dbg !43
  %1030 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1029, i32 8, i32 31), !dbg !43
  %1031 = trunc i32 %1030 to i16, !dbg !43
  %1032 = add i16 %1020, %1031, !dbg !46
  %1033 = zext i16 %1022 to i32, !dbg !43
  %1034 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1033, i32 8, i32 31), !dbg !43
  %1035 = trunc i32 %1034 to i16, !dbg !43
  %1036 = add i16 %1022, %1035, !dbg !46
  %1037 = zext i16 %1024 to i32, !dbg !43
  %1038 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1037, i32 8, i32 31), !dbg !43
  %1039 = trunc i32 %1038 to i16, !dbg !43
  %1040 = add i16 %1024, %1039, !dbg !46
  %1041 = mul nuw nsw i16 %1017, %49, !dbg !50
  %1042 = mul nuw nsw i16 %1019, %49, !dbg !50
  %1043 = mul nuw nsw i16 %1021, %49, !dbg !50
  %1044 = mul nuw nsw i16 %1023, %49, !dbg !50
  %1045 = zext i16 %1041 to i32, !dbg !43
  %1046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 8, i32 31), !dbg !43
  %1047 = trunc i32 %1046 to i16, !dbg !43
  %1048 = add i16 %1041, %1047, !dbg !46
  %1049 = zext i16 %1042 to i32, !dbg !43
  %1050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1049, i32 8, i32 31), !dbg !43
  %1051 = trunc i32 %1050 to i16, !dbg !43
  %1052 = add i16 %1042, %1051, !dbg !46
  %1053 = zext i16 %1043 to i32, !dbg !43
  %1054 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1053, i32 8, i32 31), !dbg !43
  %1055 = trunc i32 %1054 to i16, !dbg !43
  %1056 = add i16 %1043, %1055, !dbg !46
  %1057 = zext i16 %1044 to i32, !dbg !43
  %1058 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1057, i32 8, i32 31), !dbg !43
  %1059 = trunc i32 %1058 to i16, !dbg !43
  %1060 = add i16 %1044, %1059, !dbg !46
  %1061 = xor i16 %1048, %1028, !dbg !36
  %1062 = xor i16 %1052, %1032, !dbg !36
  %1063 = xor i16 %1056, %1036, !dbg !36
  %1064 = xor i16 %1060, %1040, !dbg !36
  %1065 = shufflevector <2 x i1> %989, <2 x i1> %991, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1066 = insertelement <2 x i16> poison, i16 %1062, i64 0, !dbg !37
  %1067 = insertelement <2 x i16> %1066, i16 %1063, i64 1, !dbg !37
  %1068 = select <2 x i1> %1065, <2 x i16> zeroinitializer, <2 x i16> %1067, !dbg !37
  %1069 = shufflevector <2 x i1> %991, <2 x i1> %989, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1070 = insertelement <2 x i16> poison, i16 %1064, i64 0, !dbg !37
  %1071 = insertelement <2 x i16> %1070, i16 %1061, i64 1, !dbg !37
  %1072 = select <2 x i1> %1069, <2 x i16> zeroinitializer, <2 x i16> %1071, !dbg !37
  %1073 = xor <2 x i16> %1068, %1015, !dbg !38
  %1074 = xor <2 x i16> %1072, %1016, !dbg !38
  %1075 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1002, i32 4, i32 31), !dbg !43
  %1076 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1003, i32 4, i32 31), !dbg !43
  %1077 = insertelement <2 x i32> poison, i32 %1076, i64 0, !dbg !46
  %1078 = insertelement <2 x i32> %1077, i32 %1075, i64 1, !dbg !46
  %1079 = add <2 x i32> %1078, %1000, !dbg !46
  %1080 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1004, i32 4, i32 31), !dbg !43
  %1081 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1005, i32 4, i32 31), !dbg !43
  %1082 = insertelement <2 x i32> poison, i32 %1081, i64 0, !dbg !46
  %1083 = insertelement <2 x i32> %1082, i32 %1080, i64 1, !dbg !46
  %1084 = add <2 x i32> %1083, %1001, !dbg !46
  %1085 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1010, i32 4, i32 31), !dbg !43
  %1086 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1011, i32 4, i32 31), !dbg !43
  %1087 = insertelement <2 x i32> poison, i32 %1086, i64 0, !dbg !46
  %1088 = insertelement <2 x i32> %1087, i32 %1085, i64 1, !dbg !46
  %1089 = add <2 x i32> %1088, %1008, !dbg !46
  %1090 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1012, i32 4, i32 31), !dbg !43
  %1091 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1013, i32 4, i32 31), !dbg !43
  %1092 = insertelement <2 x i32> poison, i32 %1091, i64 0, !dbg !46
  %1093 = insertelement <2 x i32> %1092, i32 %1090, i64 1, !dbg !46
  %1094 = add <2 x i32> %1093, %1009, !dbg !46
  %1095 = bitcast <2 x i32> %1079 to <2 x float>, !dbg !39
  %1096 = bitcast <2 x i32> %1084 to <2 x float>, !dbg !39
  %1097 = bitcast <2 x i32> %1089 to <2 x float>, !dbg !40
  %1098 = bitcast <2 x i32> %1094 to <2 x float>, !dbg !40
  %1099 = extractelement <2 x i16> %1074, i64 1, !dbg !50
  %1100 = mul nuw nsw i16 %1099, %42, !dbg !49
  %1101 = extractelement <2 x i16> %1073, i64 0, !dbg !50
  %1102 = mul nuw nsw i16 %1101, %42, !dbg !49
  %1103 = extractelement <2 x i16> %1073, i64 1, !dbg !50
  %1104 = mul nuw nsw i16 %1103, %42, !dbg !49
  %1105 = extractelement <2 x i16> %1074, i64 0, !dbg !50
  %1106 = mul nuw nsw i16 %1105, %42, !dbg !49
  %1107 = zext i16 %1100 to i32, !dbg !43
  %1108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1107, i32 4, i32 31), !dbg !43
  %1109 = trunc i32 %1108 to i16, !dbg !43
  %1110 = add i16 %1100, %1109, !dbg !46
  %1111 = zext i16 %1102 to i32, !dbg !43
  %1112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1111, i32 4, i32 31), !dbg !43
  %1113 = trunc i32 %1112 to i16, !dbg !43
  %1114 = add i16 %1102, %1113, !dbg !46
  %1115 = zext i16 %1104 to i32, !dbg !43
  %1116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1115, i32 4, i32 31), !dbg !43
  %1117 = trunc i32 %1116 to i16, !dbg !43
  %1118 = add i16 %1104, %1117, !dbg !46
  %1119 = zext i16 %1106 to i32, !dbg !43
  %1120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1119, i32 4, i32 31), !dbg !43
  %1121 = trunc i32 %1120 to i16, !dbg !43
  %1122 = add i16 %1106, %1121, !dbg !46
  %1123 = mul nuw nsw i16 %1099, %48, !dbg !50
  %1124 = mul nuw nsw i16 %1101, %48, !dbg !50
  %1125 = mul nuw nsw i16 %1103, %48, !dbg !50
  %1126 = mul nuw nsw i16 %1105, %48, !dbg !50
  %1127 = zext i16 %1123 to i32, !dbg !43
  %1128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1127, i32 4, i32 31), !dbg !43
  %1129 = trunc i32 %1128 to i16, !dbg !43
  %1130 = add i16 %1123, %1129, !dbg !46
  %1131 = zext i16 %1124 to i32, !dbg !43
  %1132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1131, i32 4, i32 31), !dbg !43
  %1133 = trunc i32 %1132 to i16, !dbg !43
  %1134 = add i16 %1124, %1133, !dbg !46
  %1135 = zext i16 %1125 to i32, !dbg !43
  %1136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1135, i32 4, i32 31), !dbg !43
  %1137 = trunc i32 %1136 to i16, !dbg !43
  %1138 = add i16 %1125, %1137, !dbg !46
  %1139 = zext i16 %1126 to i32, !dbg !43
  %1140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1139, i32 4, i32 31), !dbg !43
  %1141 = trunc i32 %1140 to i16, !dbg !43
  %1142 = add i16 %1126, %1141, !dbg !46
  %1143 = fcmp uge <2 x float> %1095, %1097, !dbg !41
  %1144 = xor <2 x i1> %1143, %988, !dbg !41
  %1145 = fcmp uge <2 x float> %1096, %1098, !dbg !41
  %1146 = xor <2 x i1> %1145, %988, !dbg !41
  %1147 = xor <2 x i32> %1089, %1079, !dbg !33
  %1148 = xor <2 x i32> %1094, %1084, !dbg !33
  %1149 = select <2 x i1> %1144, <2 x i32> zeroinitializer, <2 x i32> %1147, !dbg !34
  %1150 = select <2 x i1> %1146, <2 x i32> zeroinitializer, <2 x i32> %1148, !dbg !34
  %1151 = xor <2 x i32> %1149, %996, !dbg !35
  %1152 = xor <2 x i32> %1150, %997, !dbg !35
  %1153 = insertelement <2 x i16> poison, i16 %1134, i64 0, !dbg !36
  %1154 = insertelement <2 x i16> %1153, i16 %1138, i64 1, !dbg !36
  %1155 = insertelement <2 x i16> poison, i16 %1114, i64 0, !dbg !36
  %1156 = insertelement <2 x i16> %1155, i16 %1118, i64 1, !dbg !36
  %1157 = xor <2 x i16> %1154, %1156, !dbg !36
  %1158 = insertelement <2 x i16> poison, i16 %1142, i64 0, !dbg !36
  %1159 = insertelement <2 x i16> %1158, i16 %1130, i64 1, !dbg !36
  %1160 = insertelement <2 x i16> poison, i16 %1122, i64 0, !dbg !36
  %1161 = insertelement <2 x i16> %1160, i16 %1110, i64 1, !dbg !36
  %1162 = xor <2 x i16> %1159, %1161, !dbg !36
  %1163 = shufflevector <2 x i1> %1144, <2 x i1> %1146, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1164 = select <2 x i1> %1163, <2 x i16> zeroinitializer, <2 x i16> %1157, !dbg !37
  %1165 = shufflevector <2 x i1> %1146, <2 x i1> %1144, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1166 = select <2 x i1> %1165, <2 x i16> zeroinitializer, <2 x i16> %1162, !dbg !37
  %1167 = xor <2 x i16> %1164, %1073, !dbg !38
  %1168 = xor <2 x i16> %1166, %1074, !dbg !38
  %1169 = extractelement <2 x i32> %1151, i64 1, !dbg !48
  %1170 = mul nuw nsw i32 %1169, %35, !dbg !42
  %1171 = extractelement <2 x i32> %1151, i64 0, !dbg !48
  %1172 = mul nuw nsw i32 %1171, %35, !dbg !42
  %1173 = extractelement <2 x i32> %1152, i64 1, !dbg !48
  %1174 = mul nuw nsw i32 %1173, %35, !dbg !42
  %1175 = extractelement <2 x i32> %1152, i64 0, !dbg !48
  %1176 = mul nuw nsw i32 %1175, %35, !dbg !42
  %1177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1170, i32 2, i32 31), !dbg !43
  %1178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1172, i32 2, i32 31), !dbg !43
  %1179 = insertelement <2 x i32> poison, i32 %1178, i64 0, !dbg !46
  %1180 = insertelement <2 x i32> %1179, i32 %1177, i64 1, !dbg !46
  %1181 = insertelement <2 x i32> poison, i32 %1172, i64 0, !dbg !46
  %1182 = insertelement <2 x i32> %1181, i32 %1170, i64 1, !dbg !46
  %1183 = add <2 x i32> %1180, %1182, !dbg !46
  %1184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1174, i32 2, i32 31), !dbg !43
  %1185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1176, i32 2, i32 31), !dbg !43
  %1186 = insertelement <2 x i32> poison, i32 %1185, i64 0, !dbg !46
  %1187 = insertelement <2 x i32> %1186, i32 %1184, i64 1, !dbg !46
  %1188 = insertelement <2 x i32> poison, i32 %1176, i64 0, !dbg !46
  %1189 = insertelement <2 x i32> %1188, i32 %1174, i64 1, !dbg !46
  %1190 = add <2 x i32> %1187, %1189, !dbg !46
  %1191 = mul nuw nsw i32 %1169, %.lobit, !dbg !48
  %1192 = mul nuw nsw i32 %1171, %.lobit, !dbg !48
  %1193 = mul nuw nsw i32 %1173, %.lobit, !dbg !48
  %1194 = mul nuw nsw i32 %1175, %.lobit, !dbg !48
  %1195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1191, i32 2, i32 31), !dbg !43
  %1196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 2, i32 31), !dbg !43
  %1197 = insertelement <2 x i32> poison, i32 %1196, i64 0, !dbg !46
  %1198 = insertelement <2 x i32> %1197, i32 %1195, i64 1, !dbg !46
  %1199 = insertelement <2 x i32> poison, i32 %1192, i64 0, !dbg !46
  %1200 = insertelement <2 x i32> %1199, i32 %1191, i64 1, !dbg !46
  %1201 = add <2 x i32> %1198, %1200, !dbg !46
  %1202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1193, i32 2, i32 31), !dbg !43
  %1203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1194, i32 2, i32 31), !dbg !43
  %1204 = insertelement <2 x i32> poison, i32 %1203, i64 0, !dbg !46
  %1205 = insertelement <2 x i32> %1204, i32 %1202, i64 1, !dbg !46
  %1206 = insertelement <2 x i32> poison, i32 %1194, i64 0, !dbg !46
  %1207 = insertelement <2 x i32> %1206, i32 %1193, i64 1, !dbg !46
  %1208 = add <2 x i32> %1205, %1207, !dbg !46
  %1209 = bitcast <2 x i32> %1183 to <2 x float>, !dbg !39
  %1210 = bitcast <2 x i32> %1190 to <2 x float>, !dbg !39
  %1211 = bitcast <2 x i32> %1201 to <2 x float>, !dbg !40
  %1212 = bitcast <2 x i32> %1208 to <2 x float>, !dbg !40
  %1213 = extractelement <2 x i16> %1168, i64 1, !dbg !50
  %1214 = mul nuw nsw i16 %1213, %41, !dbg !49
  %1215 = extractelement <2 x i16> %1167, i64 0, !dbg !50
  %1216 = mul nuw nsw i16 %1215, %41, !dbg !49
  %1217 = extractelement <2 x i16> %1167, i64 1, !dbg !50
  %1218 = mul nuw nsw i16 %1217, %41, !dbg !49
  %1219 = extractelement <2 x i16> %1168, i64 0, !dbg !50
  %1220 = mul nuw nsw i16 %1219, %41, !dbg !49
  %1221 = zext i16 %1214 to i32, !dbg !43
  %1222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1221, i32 2, i32 31), !dbg !43
  %1223 = trunc i32 %1222 to i16, !dbg !43
  %1224 = zext i16 %1216 to i32, !dbg !43
  %1225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1224, i32 2, i32 31), !dbg !43
  %1226 = trunc i32 %1225 to i16, !dbg !43
  %1227 = zext i16 %1218 to i32, !dbg !43
  %1228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1227, i32 2, i32 31), !dbg !43
  %1229 = trunc i32 %1228 to i16, !dbg !43
  %1230 = insertelement <2 x i16> poison, i16 %1216, i64 0, !dbg !46
  %1231 = insertelement <2 x i16> %1230, i16 %1218, i64 1, !dbg !46
  %1232 = insertelement <2 x i16> poison, i16 %1226, i64 0, !dbg !46
  %1233 = insertelement <2 x i16> %1232, i16 %1229, i64 1, !dbg !46
  %1234 = add <2 x i16> %1231, %1233, !dbg !46
  %1235 = zext i16 %1220 to i32, !dbg !43
  %1236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1235, i32 2, i32 31), !dbg !43
  %1237 = trunc i32 %1236 to i16, !dbg !43
  %1238 = insertelement <2 x i16> poison, i16 %1220, i64 0, !dbg !46
  %1239 = insertelement <2 x i16> %1238, i16 %1214, i64 1, !dbg !46
  %1240 = insertelement <2 x i16> poison, i16 %1237, i64 0, !dbg !46
  %1241 = insertelement <2 x i16> %1240, i16 %1223, i64 1, !dbg !46
  %1242 = add <2 x i16> %1239, %1241, !dbg !46
  %1243 = mul nuw nsw i16 %1213, %47, !dbg !50
  %1244 = mul nuw nsw i16 %1215, %47, !dbg !50
  %1245 = mul nuw nsw i16 %1217, %47, !dbg !50
  %1246 = mul nuw nsw i16 %1219, %47, !dbg !50
  %1247 = zext i16 %1243 to i32, !dbg !43
  %1248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1247, i32 2, i32 31), !dbg !43
  %1249 = trunc i32 %1248 to i16, !dbg !43
  %1250 = zext i16 %1244 to i32, !dbg !43
  %1251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1250, i32 2, i32 31), !dbg !43
  %1252 = trunc i32 %1251 to i16, !dbg !43
  %1253 = zext i16 %1245 to i32, !dbg !43
  %1254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1253, i32 2, i32 31), !dbg !43
  %1255 = trunc i32 %1254 to i16, !dbg !43
  %1256 = insertelement <2 x i16> poison, i16 %1244, i64 0, !dbg !46
  %1257 = insertelement <2 x i16> %1256, i16 %1245, i64 1, !dbg !46
  %1258 = insertelement <2 x i16> poison, i16 %1252, i64 0, !dbg !46
  %1259 = insertelement <2 x i16> %1258, i16 %1255, i64 1, !dbg !46
  %1260 = add <2 x i16> %1257, %1259, !dbg !46
  %1261 = zext i16 %1246 to i32, !dbg !43
  %1262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1261, i32 2, i32 31), !dbg !43
  %1263 = trunc i32 %1262 to i16, !dbg !43
  %1264 = insertelement <2 x i16> poison, i16 %1246, i64 0, !dbg !46
  %1265 = insertelement <2 x i16> %1264, i16 %1243, i64 1, !dbg !46
  %1266 = insertelement <2 x i16> poison, i16 %1263, i64 0, !dbg !46
  %1267 = insertelement <2 x i16> %1266, i16 %1249, i64 1, !dbg !46
  %1268 = add <2 x i16> %1265, %1267, !dbg !46
  %1269 = fcmp uge <2 x float> %1209, %1211, !dbg !41
  %1270 = xor <2 x i1> %1269, %988, !dbg !41
  %1271 = fcmp uge <2 x float> %1210, %1212, !dbg !41
  %1272 = xor <2 x i1> %1271, %988, !dbg !41
  %1273 = xor <2 x i32> %1201, %1183, !dbg !33
  %1274 = xor <2 x i32> %1208, %1190, !dbg !33
  %1275 = select <2 x i1> %1270, <2 x i32> zeroinitializer, <2 x i32> %1273, !dbg !34
  %1276 = select <2 x i1> %1272, <2 x i32> zeroinitializer, <2 x i32> %1274, !dbg !34
  %1277 = xor <2 x i32> %1275, %1151, !dbg !35
  %1278 = xor <2 x i32> %1276, %1152, !dbg !35
  %1279 = xor <2 x i16> %1260, %1234, !dbg !36
  %1280 = xor <2 x i16> %1268, %1242, !dbg !36
  %1281 = shufflevector <2 x i1> %1270, <2 x i1> %1272, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1282 = select <2 x i1> %1281, <2 x i16> zeroinitializer, <2 x i16> %1279, !dbg !37
  %1283 = shufflevector <2 x i1> %1272, <2 x i1> %1270, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1284 = select <2 x i1> %1283, <2 x i16> zeroinitializer, <2 x i16> %1280, !dbg !37
  %1285 = xor <2 x i16> %1282, %1167, !dbg !38
  %1286 = xor <2 x i16> %1284, %1168, !dbg !38
  %1287 = mul nuw nsw <2 x i32> %1277, %272, !dbg !42
  %1288 = mul nuw nsw <2 x i32> %1278, %272, !dbg !42
  %1289 = extractelement <2 x i32> %1287, i64 1, !dbg !43
  %1290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1289, i32 1, i32 31), !dbg !43
  %1291 = extractelement <2 x i32> %1287, i64 0, !dbg !43
  %1292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1291, i32 1, i32 31), !dbg !43
  %1293 = insertelement <2 x i32> poison, i32 %1292, i64 0, !dbg !46
  %1294 = insertelement <2 x i32> %1293, i32 %1290, i64 1, !dbg !46
  %1295 = add <2 x i32> %1294, %1287, !dbg !46
  %1296 = extractelement <2 x i32> %1288, i64 1, !dbg !43
  %1297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1296, i32 1, i32 31), !dbg !43
  %1298 = extractelement <2 x i32> %1288, i64 0, !dbg !43
  %1299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1298, i32 1, i32 31), !dbg !43
  %1300 = insertelement <2 x i32> poison, i32 %1299, i64 0, !dbg !46
  %1301 = insertelement <2 x i32> %1300, i32 %1297, i64 1, !dbg !46
  %1302 = add <2 x i32> %1301, %1288, !dbg !46
  %1303 = mul nuw nsw <2 x i32> %1277, %274, !dbg !48
  %1304 = mul nuw nsw <2 x i32> %1278, %274, !dbg !48
  %1305 = extractelement <2 x i32> %1303, i64 1, !dbg !43
  %1306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1305, i32 1, i32 31), !dbg !43
  %1307 = extractelement <2 x i32> %1303, i64 0, !dbg !43
  %1308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1307, i32 1, i32 31), !dbg !43
  %1309 = insertelement <2 x i32> poison, i32 %1308, i64 0, !dbg !46
  %1310 = insertelement <2 x i32> %1309, i32 %1306, i64 1, !dbg !46
  %1311 = add <2 x i32> %1310, %1303, !dbg !46
  %1312 = extractelement <2 x i32> %1304, i64 1, !dbg !43
  %1313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1312, i32 1, i32 31), !dbg !43
  %1314 = extractelement <2 x i32> %1304, i64 0, !dbg !43
  %1315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1314, i32 1, i32 31), !dbg !43
  %1316 = insertelement <2 x i32> poison, i32 %1315, i64 0, !dbg !46
  %1317 = insertelement <2 x i32> %1316, i32 %1313, i64 1, !dbg !46
  %1318 = add <2 x i32> %1317, %1304, !dbg !46
  %1319 = bitcast <2 x i32> %1295 to <2 x float>, !dbg !39
  %1320 = bitcast <2 x i32> %1302 to <2 x float>, !dbg !39
  %1321 = bitcast <2 x i32> %1311 to <2 x float>, !dbg !40
  %1322 = bitcast <2 x i32> %1318 to <2 x float>, !dbg !40
  %1323 = mul nuw nsw <2 x i16> %1285, %461, !dbg !49
  %1324 = mul nuw nsw <2 x i16> %1286, %461, !dbg !49
  %1325 = extractelement <2 x i16> %1324, i64 1, !dbg !43
  %1326 = zext i16 %1325 to i32, !dbg !43
  %1327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1326, i32 1, i32 31), !dbg !43
  %1328 = extractelement <2 x i16> %1323, i64 0, !dbg !43
  %1329 = zext i16 %1328 to i32, !dbg !43
  %1330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1329, i32 1, i32 31), !dbg !43
  %1331 = extractelement <2 x i16> %1323, i64 1, !dbg !43
  %1332 = zext i16 %1331 to i32, !dbg !43
  %1333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1332, i32 1, i32 31), !dbg !43
  %1334 = trunc i32 %1330 to i16, !dbg !43
  %1335 = insertelement <2 x i16> poison, i16 %1334, i64 0, !dbg !43
  %1336 = trunc i32 %1333 to i16, !dbg !43
  %1337 = insertelement <2 x i16> %1335, i16 %1336, i64 1, !dbg !43
  %1338 = add <2 x i16> %1323, %1337, !dbg !46
  %1339 = extractelement <2 x i16> %1324, i64 0, !dbg !43
  %1340 = zext i16 %1339 to i32, !dbg !43
  %1341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1340, i32 1, i32 31), !dbg !43
  %1342 = trunc i32 %1341 to i16, !dbg !43
  %1343 = insertelement <2 x i16> poison, i16 %1342, i64 0, !dbg !43
  %1344 = trunc i32 %1327 to i16, !dbg !43
  %1345 = insertelement <2 x i16> %1343, i16 %1344, i64 1, !dbg !43
  %1346 = add <2 x i16> %1324, %1345, !dbg !46
  %1347 = mul nuw nsw <2 x i16> %1285, %487, !dbg !50
  %1348 = mul nuw nsw <2 x i16> %1286, %487, !dbg !50
  %1349 = extractelement <2 x i16> %1348, i64 1, !dbg !43
  %1350 = zext i16 %1349 to i32, !dbg !43
  %1351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1350, i32 1, i32 31), !dbg !43
  %1352 = extractelement <2 x i16> %1347, i64 0, !dbg !43
  %1353 = zext i16 %1352 to i32, !dbg !43
  %1354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1353, i32 1, i32 31), !dbg !43
  %1355 = extractelement <2 x i16> %1347, i64 1, !dbg !43
  %1356 = zext i16 %1355 to i32, !dbg !43
  %1357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1356, i32 1, i32 31), !dbg !43
  %1358 = insertelement <2 x i32> poison, i32 %1354, i64 0, !dbg !43
  %1359 = insertelement <2 x i32> %1358, i32 %1357, i64 1, !dbg !43
  %1360 = trunc <2 x i32> %1359 to <2 x i16>, !dbg !43
  %1361 = add <2 x i16> %1347, %1360, !dbg !46
  %1362 = extractelement <2 x i16> %1348, i64 0, !dbg !43
  %1363 = zext i16 %1362 to i32, !dbg !43
  %1364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1363, i32 1, i32 31), !dbg !43
  %1365 = trunc i32 %1364 to i16, !dbg !43
  %1366 = insertelement <2 x i16> poison, i16 %1365, i64 0, !dbg !43
  %1367 = trunc i32 %1351 to i16, !dbg !43
  %1368 = insertelement <2 x i16> %1366, i16 %1367, i64 1, !dbg !43
  %1369 = add <2 x i16> %1348, %1368, !dbg !46
  %1370 = fcmp uge <2 x float> %1319, %1321, !dbg !41
  %1371 = xor <2 x i1> %1370, %988, !dbg !41
  %1372 = fcmp uge <2 x float> %1320, %1322, !dbg !41
  %1373 = xor <2 x i1> %1372, %988, !dbg !41
  %1374 = xor <2 x i32> %1311, %1295, !dbg !33
  %1375 = xor <2 x i32> %1318, %1302, !dbg !33
  %1376 = select <2 x i1> %1371, <2 x i32> zeroinitializer, <2 x i32> %1374, !dbg !34
  %1377 = select <2 x i1> %1373, <2 x i32> zeroinitializer, <2 x i32> %1375, !dbg !34
  %1378 = xor <2 x i32> %1376, %1277, !dbg !35
  %1379 = xor <2 x i32> %1377, %1278, !dbg !35
  %1380 = xor <2 x i16> %1361, %1338, !dbg !36
  %1381 = xor <2 x i16> %1369, %1346, !dbg !36
  %1382 = shufflevector <2 x i1> %1371, <2 x i1> %1373, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1383 = select <2 x i1> %1382, <2 x i16> zeroinitializer, <2 x i16> %1380, !dbg !37
  %1384 = shufflevector <2 x i1> %1373, <2 x i1> %1371, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1385 = select <2 x i1> %1384, <2 x i16> zeroinitializer, <2 x i16> %1381, !dbg !37
  %1386 = xor <2 x i16> %1383, %1285, !dbg !38
  %1387 = xor <2 x i16> %1385, %1286, !dbg !38
  %1388 = bitcast <2 x i32> %1378 to <2 x float>, !dbg !39
  %1389 = bitcast <2 x i32> %1379 to <2 x float>, !dbg !40
  %1390 = fcmp uge <2 x float> %1388, %1389, !dbg !41
  %1391 = xor <2 x i1> %1390, %988, !dbg !41
  %1392 = xor <2 x i32> %1379, %1378, !dbg !33
  %1393 = select <2 x i1> %1391, <2 x i32> zeroinitializer, <2 x i32> %1392, !dbg !34
  %1394 = xor <2 x i16> %1386, %1387, !dbg !36
  %1395 = select <2 x i1> %1391, <2 x i16> zeroinitializer, <2 x i16> %1394, !dbg !37
  %1396 = shufflevector <2 x i16> %1386, <2 x i16> %1387, <2 x i32> <i32 0, i32 3>, !dbg !38
  %1397 = xor <2 x i16> %1395, %1396, !dbg !38
  %1398 = shufflevector <2 x i16> %1387, <2 x i16> %1386, <2 x i32> <i32 0, i32 3>, !dbg !38
  %1399 = xor <2 x i16> %1395, %1398, !dbg !38
  %1400 = extractelement <2 x i16> %1397, i64 0, !dbg !36
  %1401 = extractelement <2 x i16> %1397, i64 1, !dbg !36
  %1402 = xor i16 %1400, %1401, !dbg !36
  %1403 = extractelement <2 x i16> %1399, i64 0, !dbg !36
  %1404 = extractelement <2 x i16> %1399, i64 1, !dbg !36
  %1405 = xor i16 %1403, %1404, !dbg !36
  %1406 = trunc i32 %9 to i1, !dbg !41
  %1407 = xor <2 x i32> %1393, %1378, !dbg !35
  %1408 = xor <2 x i32> %1393, %1379, !dbg !35
  %1409 = extractelement <2 x i32> %1407, i64 1, !dbg !39
  %1410 = bitcast i32 %1409 to float, !dbg !39
  %1411 = extractelement <2 x i32> %1408, i64 1, !dbg !39
  %1412 = bitcast i32 %1411 to float, !dbg !39
  %1413 = extractelement <2 x i32> %1407, i64 0, !dbg !40
  %1414 = bitcast i32 %1413 to float, !dbg !40
  %1415 = extractelement <2 x i32> %1408, i64 0, !dbg !40
  %1416 = bitcast i32 %1415 to float, !dbg !40
  %1417 = fcmp uge float %1410, %1414, !dbg !41
  %.not62 = xor i1 %1417, %786, !dbg !41
  %1418 = fcmp uge float %1412, %1416, !dbg !41
  %.not63 = xor i1 %1418, %786, !dbg !41
  %1419 = xor i32 %1413, %1409, !dbg !33
  %1420 = xor i32 %1415, %1411, !dbg !33
  %1421 = select i1 %.not62, i32 0, i32 %1419, !dbg !34
  %1422 = select i1 %.not63, i32 0, i32 %1420, !dbg !34
  %1423 = insertelement <2 x i32> poison, i32 %1421, i64 0, !dbg !35
  %1424 = shufflevector <2 x i32> %1423, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %1425 = xor <2 x i32> %1424, %1407, !dbg !35
  %1426 = insertelement <2 x i32> poison, i32 %1422, i64 0, !dbg !35
  %1427 = shufflevector <2 x i32> %1426, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %1428 = xor <2 x i32> %1427, %1408, !dbg !35
  %1429 = select i1 %.not62, i16 0, i16 %1402, !dbg !37
  %1430 = select i1 %.not63, i16 0, i16 %1405, !dbg !37
  %1431 = xor i16 %1429, %1401, !dbg !38
  %1432 = xor i16 %1429, %1400, !dbg !38
  %1433 = xor i16 %1430, %1404, !dbg !38
  %1434 = xor i16 %1430, %1403, !dbg !38
  %1435 = mul nuw nsw i16 %1431, %44, !dbg !49
  %1436 = mul nuw nsw i16 %1432, %44, !dbg !49
  %1437 = mul nuw nsw i16 %1433, %44, !dbg !49
  %1438 = mul nuw nsw i16 %1434, %44, !dbg !49
  %1439 = zext i16 %1435 to i32, !dbg !43
  %1440 = zext i16 %1436 to i32, !dbg !43
  %1441 = zext i16 %1437 to i32, !dbg !43
  %1442 = zext i16 %1438 to i32, !dbg !43
  %1443 = mul nuw nsw i16 %1431, %50, !dbg !50
  %1444 = mul nuw nsw i16 %1432, %50, !dbg !50
  %1445 = mul nuw nsw i16 %1433, %50, !dbg !50
  %1446 = mul nuw nsw i16 %1434, %50, !dbg !50
  %1447 = zext i16 %1443 to i32, !dbg !43
  %1448 = zext i16 %1444 to i32, !dbg !43
  %1449 = zext i16 %1445 to i32, !dbg !43
  %1450 = zext i16 %1446 to i32, !dbg !43
  %1451 = insertelement <2 x i1> poison, i1 %1406, i64 0, !dbg !41
  %1452 = shufflevector <2 x i1> %1451, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !41
  %1453 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !42
  %1454 = shufflevector <2 x i32> %1453, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !42
  %1455 = mul nuw nsw <2 x i32> %1428, %1454, !dbg !42
  %1456 = extractelement <2 x i32> %1455, i64 1, !dbg !43
  %1457 = extractelement <2 x i32> %1455, i64 0, !dbg !43
  %1458 = insertelement <2 x i32> poison, i32 %.lobit3, i64 0, !dbg !48
  %1459 = shufflevector <2 x i32> %1458, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !48
  %1460 = mul nuw nsw <2 x i32> %1428, %1459, !dbg !48
  %1461 = extractelement <2 x i32> %1460, i64 1, !dbg !43
  %1462 = extractelement <2 x i32> %1460, i64 0, !dbg !43
  %1463 = mul nuw nsw <2 x i32> %1425, %1454, !dbg !42
  %1464 = extractelement <2 x i32> %1463, i64 1, !dbg !43
  %1465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1464, i32 16, i32 31), !dbg !43
  %1466 = extractelement <2 x i32> %1463, i64 0, !dbg !43
  %1467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1466, i32 16, i32 31), !dbg !43
  %1468 = insertelement <2 x i32> poison, i32 %1467, i64 0, !dbg !46
  %1469 = insertelement <2 x i32> %1468, i32 %1465, i64 1, !dbg !46
  %1470 = add <2 x i32> %1463, %1469, !dbg !46
  %1471 = mul nuw nsw <2 x i32> %1425, %1459, !dbg !48
  %1472 = bitcast <2 x i32> %1470 to <2 x float>, !dbg !39
  %1473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1456, i32 16, i32 31), !dbg !43
  %1474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1457, i32 16, i32 31), !dbg !43
  %1475 = insertelement <2 x i32> poison, i32 %1474, i64 0, !dbg !46
  %1476 = insertelement <2 x i32> %1475, i32 %1473, i64 1, !dbg !46
  %1477 = add <2 x i32> %1455, %1476, !dbg !46
  %1478 = extractelement <2 x i32> %1471, i64 1, !dbg !43
  %1479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1478, i32 16, i32 31), !dbg !43
  %1480 = extractelement <2 x i32> %1471, i64 0, !dbg !43
  %1481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1480, i32 16, i32 31), !dbg !43
  %1482 = insertelement <2 x i32> poison, i32 %1481, i64 0, !dbg !46
  %1483 = insertelement <2 x i32> %1482, i32 %1479, i64 1, !dbg !46
  %1484 = add <2 x i32> %1471, %1483, !dbg !46
  %1485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1461, i32 16, i32 31), !dbg !43
  %1486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1462, i32 16, i32 31), !dbg !43
  %1487 = insertelement <2 x i32> poison, i32 %1486, i64 0, !dbg !46
  %1488 = insertelement <2 x i32> %1487, i32 %1485, i64 1, !dbg !46
  %1489 = add <2 x i32> %1460, %1488, !dbg !46
  %1490 = bitcast <2 x i32> %1477 to <2 x float>, !dbg !39
  %1491 = bitcast <2 x i32> %1484 to <2 x float>, !dbg !40
  %1492 = bitcast <2 x i32> %1489 to <2 x float>, !dbg !40
  %1493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1439, i32 16, i32 31), !dbg !43
  %1494 = trunc i32 %1493 to i16, !dbg !43
  %1495 = add i16 %1435, %1494, !dbg !46
  %1496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1440, i32 16, i32 31), !dbg !43
  %1497 = trunc i32 %1496 to i16, !dbg !43
  %1498 = add i16 %1436, %1497, !dbg !46
  %1499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1441, i32 16, i32 31), !dbg !43
  %1500 = trunc i32 %1499 to i16, !dbg !43
  %1501 = add i16 %1437, %1500, !dbg !46
  %1502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1442, i32 16, i32 31), !dbg !43
  %1503 = trunc i32 %1502 to i16, !dbg !43
  %1504 = add i16 %1438, %1503, !dbg !46
  %1505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1447, i32 16, i32 31), !dbg !43
  %1506 = trunc i32 %1505 to i16, !dbg !43
  %1507 = add i16 %1443, %1506, !dbg !46
  %1508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1448, i32 16, i32 31), !dbg !43
  %1509 = trunc i32 %1508 to i16, !dbg !43
  %1510 = add i16 %1444, %1509, !dbg !46
  %1511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1449, i32 16, i32 31), !dbg !43
  %1512 = trunc i32 %1511 to i16, !dbg !43
  %1513 = add i16 %1445, %1512, !dbg !46
  %1514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1450, i32 16, i32 31), !dbg !43
  %1515 = trunc i32 %1514 to i16, !dbg !43
  %1516 = add i16 %1446, %1515, !dbg !46
  %1517 = fcmp uge <2 x float> %1472, %1491, !dbg !41
  %1518 = xor <2 x i1> %1517, %1452, !dbg !41
  %1519 = fcmp uge <2 x float> %1490, %1492, !dbg !41
  %1520 = xor <2 x i1> %1519, %1452, !dbg !41
  %1521 = xor <2 x i32> %1470, %1484, !dbg !33
  %1522 = xor <2 x i32> %1477, %1489, !dbg !33
  %1523 = select <2 x i1> %1518, <2 x i32> zeroinitializer, <2 x i32> %1521, !dbg !34
  %1524 = select <2 x i1> %1520, <2 x i32> zeroinitializer, <2 x i32> %1522, !dbg !34
  %1525 = xor <2 x i32> %1523, %1425, !dbg !35
  %1526 = xor <2 x i32> %1524, %1428, !dbg !35
  %1527 = xor i16 %1507, %1495, !dbg !36
  %1528 = xor i16 %1510, %1498, !dbg !36
  %1529 = xor i16 %1513, %1501, !dbg !36
  %1530 = xor i16 %1516, %1504, !dbg !36
  %1531 = extractelement <2 x i1> %1518, i64 1, !dbg !37
  %1532 = select i1 %1531, i16 0, i16 %1527, !dbg !37
  %1533 = extractelement <2 x i1> %1518, i64 0, !dbg !37
  %1534 = select i1 %1533, i16 0, i16 %1528, !dbg !37
  %1535 = extractelement <2 x i1> %1520, i64 1, !dbg !37
  %1536 = select i1 %1535, i16 0, i16 %1529, !dbg !37
  %1537 = extractelement <2 x i1> %1520, i64 0, !dbg !37
  %1538 = select i1 %1537, i16 0, i16 %1530, !dbg !37
  %1539 = extractelement <2 x i32> %1525, i64 1, !dbg !48
  %1540 = mul nuw nsw i32 %1539, %37, !dbg !42
  %1541 = extractelement <2 x i32> %1525, i64 0, !dbg !48
  %1542 = mul nuw nsw i32 %1541, %37, !dbg !42
  %1543 = extractelement <2 x i32> %1526, i64 1, !dbg !48
  %1544 = mul nuw nsw i32 %1543, %37, !dbg !42
  %1545 = extractelement <2 x i32> %1526, i64 0, !dbg !48
  %1546 = mul nuw nsw i32 %1545, %37, !dbg !42
  %1547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1540, i32 8, i32 31), !dbg !43
  %1548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1542, i32 8, i32 31), !dbg !43
  %1549 = insertelement <2 x i32> poison, i32 %1548, i64 0, !dbg !46
  %1550 = insertelement <2 x i32> %1549, i32 %1547, i64 1, !dbg !46
  %1551 = insertelement <2 x i32> poison, i32 %1542, i64 0, !dbg !46
  %1552 = insertelement <2 x i32> %1551, i32 %1540, i64 1, !dbg !46
  %1553 = add <2 x i32> %1550, %1552, !dbg !46
  %1554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1544, i32 8, i32 31), !dbg !43
  %1555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1546, i32 8, i32 31), !dbg !43
  %1556 = insertelement <2 x i32> poison, i32 %1555, i64 0, !dbg !46
  %1557 = insertelement <2 x i32> %1556, i32 %1554, i64 1, !dbg !46
  %1558 = insertelement <2 x i32> poison, i32 %1546, i64 0, !dbg !46
  %1559 = insertelement <2 x i32> %1558, i32 %1544, i64 1, !dbg !46
  %1560 = add <2 x i32> %1557, %1559, !dbg !46
  %1561 = mul nuw nsw i32 %1539, %.lobit2, !dbg !48
  %1562 = mul nuw nsw i32 %1541, %.lobit2, !dbg !48
  %1563 = mul nuw nsw i32 %1543, %.lobit2, !dbg !48
  %1564 = mul nuw nsw i32 %1545, %.lobit2, !dbg !48
  %1565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1561, i32 8, i32 31), !dbg !43
  %1566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1562, i32 8, i32 31), !dbg !43
  %1567 = insertelement <2 x i32> poison, i32 %1566, i64 0, !dbg !46
  %1568 = insertelement <2 x i32> %1567, i32 %1565, i64 1, !dbg !46
  %1569 = insertelement <2 x i32> poison, i32 %1562, i64 0, !dbg !46
  %1570 = insertelement <2 x i32> %1569, i32 %1561, i64 1, !dbg !46
  %1571 = add <2 x i32> %1568, %1570, !dbg !46
  %1572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1563, i32 8, i32 31), !dbg !43
  %1573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1564, i32 8, i32 31), !dbg !43
  %1574 = insertelement <2 x i32> poison, i32 %1573, i64 0, !dbg !46
  %1575 = insertelement <2 x i32> %1574, i32 %1572, i64 1, !dbg !46
  %1576 = insertelement <2 x i32> poison, i32 %1564, i64 0, !dbg !46
  %1577 = insertelement <2 x i32> %1576, i32 %1563, i64 1, !dbg !46
  %1578 = add <2 x i32> %1575, %1577, !dbg !46
  %1579 = bitcast <2 x i32> %1553 to <2 x float>, !dbg !39
  %1580 = bitcast <2 x i32> %1560 to <2 x float>, !dbg !39
  %1581 = bitcast <2 x i32> %1571 to <2 x float>, !dbg !40
  %1582 = bitcast <2 x i32> %1578 to <2 x float>, !dbg !40
  %1583 = fcmp uge <2 x float> %1579, %1581, !dbg !41
  %1584 = xor <2 x i1> %1583, %1452, !dbg !41
  %1585 = fcmp uge <2 x float> %1580, %1582, !dbg !41
  %1586 = xor <2 x i1> %1585, %1452, !dbg !41
  %1587 = xor <2 x i32> %1571, %1553, !dbg !33
  %1588 = xor <2 x i32> %1578, %1560, !dbg !33
  %1589 = select <2 x i1> %1584, <2 x i32> zeroinitializer, <2 x i32> %1587, !dbg !34
  %1590 = select <2 x i1> %1586, <2 x i32> zeroinitializer, <2 x i32> %1588, !dbg !34
  %1591 = xor <2 x i32> %1589, %1525, !dbg !35
  %1592 = xor <2 x i32> %1590, %1526, !dbg !35
  %1593 = mul nuw nsw <2 x i32> %1591, %999, !dbg !42
  %1594 = mul nuw nsw <2 x i32> %1592, %999, !dbg !42
  %1595 = extractelement <2 x i32> %1593, i64 1, !dbg !43
  %1596 = extractelement <2 x i32> %1593, i64 0, !dbg !43
  %1597 = extractelement <2 x i32> %1594, i64 1, !dbg !43
  %1598 = extractelement <2 x i32> %1594, i64 0, !dbg !43
  %1599 = mul nuw nsw <2 x i32> %1591, %1007, !dbg !48
  %1600 = mul nuw nsw <2 x i32> %1592, %1007, !dbg !48
  %1601 = extractelement <2 x i32> %1599, i64 1, !dbg !43
  %1602 = extractelement <2 x i32> %1599, i64 0, !dbg !43
  %1603 = extractelement <2 x i32> %1600, i64 1, !dbg !43
  %1604 = extractelement <2 x i32> %1600, i64 0, !dbg !43
  %1605 = insertelement <2 x i16> poison, i16 %1534, i64 0, !dbg !38
  %1606 = insertelement <2 x i16> %1605, i16 %1536, i64 1, !dbg !38
  %1607 = insertelement <2 x i16> poison, i16 %1432, i64 0, !dbg !38
  %1608 = insertelement <2 x i16> %1607, i16 %1433, i64 1, !dbg !38
  %1609 = xor <2 x i16> %1606, %1608, !dbg !38
  %1610 = insertelement <2 x i16> poison, i16 %1538, i64 0, !dbg !38
  %1611 = insertelement <2 x i16> %1610, i16 %1532, i64 1, !dbg !38
  %1612 = insertelement <2 x i16> poison, i16 %1434, i64 0, !dbg !38
  %1613 = insertelement <2 x i16> %1612, i16 %1431, i64 1, !dbg !38
  %1614 = xor <2 x i16> %1611, %1613, !dbg !38
  %1615 = extractelement <2 x i16> %1614, i64 1, !dbg !50
  %1616 = mul nuw nsw i16 %1615, %43, !dbg !49
  %1617 = extractelement <2 x i16> %1609, i64 0, !dbg !50
  %1618 = mul nuw nsw i16 %1617, %43, !dbg !49
  %1619 = extractelement <2 x i16> %1609, i64 1, !dbg !50
  %1620 = mul nuw nsw i16 %1619, %43, !dbg !49
  %1621 = extractelement <2 x i16> %1614, i64 0, !dbg !50
  %1622 = mul nuw nsw i16 %1621, %43, !dbg !49
  %1623 = zext i16 %1616 to i32, !dbg !43
  %1624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1623, i32 8, i32 31), !dbg !43
  %1625 = trunc i32 %1624 to i16, !dbg !43
  %1626 = add i16 %1616, %1625, !dbg !46
  %1627 = zext i16 %1618 to i32, !dbg !43
  %1628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1627, i32 8, i32 31), !dbg !43
  %1629 = trunc i32 %1628 to i16, !dbg !43
  %1630 = add i16 %1618, %1629, !dbg !46
  %1631 = zext i16 %1620 to i32, !dbg !43
  %1632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1631, i32 8, i32 31), !dbg !43
  %1633 = trunc i32 %1632 to i16, !dbg !43
  %1634 = add i16 %1620, %1633, !dbg !46
  %1635 = zext i16 %1622 to i32, !dbg !43
  %1636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1635, i32 8, i32 31), !dbg !43
  %1637 = trunc i32 %1636 to i16, !dbg !43
  %1638 = add i16 %1622, %1637, !dbg !46
  %1639 = mul nuw nsw i16 %1615, %49, !dbg !50
  %1640 = mul nuw nsw i16 %1617, %49, !dbg !50
  %1641 = mul nuw nsw i16 %1619, %49, !dbg !50
  %1642 = mul nuw nsw i16 %1621, %49, !dbg !50
  %1643 = zext i16 %1639 to i32, !dbg !43
  %1644 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1643, i32 8, i32 31), !dbg !43
  %1645 = trunc i32 %1644 to i16, !dbg !43
  %1646 = add i16 %1639, %1645, !dbg !46
  %1647 = zext i16 %1640 to i32, !dbg !43
  %1648 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1647, i32 8, i32 31), !dbg !43
  %1649 = trunc i32 %1648 to i16, !dbg !43
  %1650 = add i16 %1640, %1649, !dbg !46
  %1651 = zext i16 %1641 to i32, !dbg !43
  %1652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1651, i32 8, i32 31), !dbg !43
  %1653 = trunc i32 %1652 to i16, !dbg !43
  %1654 = add i16 %1641, %1653, !dbg !46
  %1655 = zext i16 %1642 to i32, !dbg !43
  %1656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1655, i32 8, i32 31), !dbg !43
  %1657 = trunc i32 %1656 to i16, !dbg !43
  %1658 = add i16 %1642, %1657, !dbg !46
  %1659 = xor i16 %1646, %1626, !dbg !36
  %1660 = xor i16 %1650, %1630, !dbg !36
  %1661 = xor i16 %1654, %1634, !dbg !36
  %1662 = xor i16 %1658, %1638, !dbg !36
  %1663 = shufflevector <2 x i1> %1584, <2 x i1> %1586, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1664 = insertelement <2 x i16> poison, i16 %1660, i64 0, !dbg !37
  %1665 = insertelement <2 x i16> %1664, i16 %1661, i64 1, !dbg !37
  %1666 = select <2 x i1> %1663, <2 x i16> zeroinitializer, <2 x i16> %1665, !dbg !37
  %1667 = shufflevector <2 x i1> %1586, <2 x i1> %1584, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1668 = insertelement <2 x i16> poison, i16 %1662, i64 0, !dbg !37
  %1669 = insertelement <2 x i16> %1668, i16 %1659, i64 1, !dbg !37
  %1670 = select <2 x i1> %1667, <2 x i16> zeroinitializer, <2 x i16> %1669, !dbg !37
  %1671 = xor <2 x i16> %1666, %1609, !dbg !38
  %1672 = xor <2 x i16> %1670, %1614, !dbg !38
  %1673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1595, i32 4, i32 31), !dbg !43
  %1674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1596, i32 4, i32 31), !dbg !43
  %1675 = insertelement <2 x i32> poison, i32 %1674, i64 0, !dbg !46
  %1676 = insertelement <2 x i32> %1675, i32 %1673, i64 1, !dbg !46
  %1677 = add <2 x i32> %1676, %1593, !dbg !46
  %1678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1597, i32 4, i32 31), !dbg !43
  %1679 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1598, i32 4, i32 31), !dbg !43
  %1680 = insertelement <2 x i32> poison, i32 %1679, i64 0, !dbg !46
  %1681 = insertelement <2 x i32> %1680, i32 %1678, i64 1, !dbg !46
  %1682 = add <2 x i32> %1681, %1594, !dbg !46
  %1683 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1601, i32 4, i32 31), !dbg !43
  %1684 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1602, i32 4, i32 31), !dbg !43
  %1685 = insertelement <2 x i32> poison, i32 %1684, i64 0, !dbg !46
  %1686 = insertelement <2 x i32> %1685, i32 %1683, i64 1, !dbg !46
  %1687 = add <2 x i32> %1686, %1599, !dbg !46
  %1688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1603, i32 4, i32 31), !dbg !43
  %1689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1604, i32 4, i32 31), !dbg !43
  %1690 = insertelement <2 x i32> poison, i32 %1689, i64 0, !dbg !46
  %1691 = insertelement <2 x i32> %1690, i32 %1688, i64 1, !dbg !46
  %1692 = add <2 x i32> %1691, %1600, !dbg !46
  %1693 = bitcast <2 x i32> %1677 to <2 x float>, !dbg !39
  %1694 = bitcast <2 x i32> %1682 to <2 x float>, !dbg !39
  %1695 = bitcast <2 x i32> %1687 to <2 x float>, !dbg !40
  %1696 = bitcast <2 x i32> %1692 to <2 x float>, !dbg !40
  %1697 = extractelement <2 x i16> %1672, i64 1, !dbg !50
  %1698 = mul nuw nsw i16 %1697, %42, !dbg !49
  %1699 = extractelement <2 x i16> %1671, i64 0, !dbg !50
  %1700 = mul nuw nsw i16 %1699, %42, !dbg !49
  %1701 = extractelement <2 x i16> %1671, i64 1, !dbg !50
  %1702 = mul nuw nsw i16 %1701, %42, !dbg !49
  %1703 = extractelement <2 x i16> %1672, i64 0, !dbg !50
  %1704 = mul nuw nsw i16 %1703, %42, !dbg !49
  %1705 = zext i16 %1698 to i32, !dbg !43
  %1706 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1705, i32 4, i32 31), !dbg !43
  %1707 = trunc i32 %1706 to i16, !dbg !43
  %1708 = add i16 %1698, %1707, !dbg !46
  %1709 = zext i16 %1700 to i32, !dbg !43
  %1710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1709, i32 4, i32 31), !dbg !43
  %1711 = trunc i32 %1710 to i16, !dbg !43
  %1712 = add i16 %1700, %1711, !dbg !46
  %1713 = zext i16 %1702 to i32, !dbg !43
  %1714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1713, i32 4, i32 31), !dbg !43
  %1715 = trunc i32 %1714 to i16, !dbg !43
  %1716 = add i16 %1702, %1715, !dbg !46
  %1717 = zext i16 %1704 to i32, !dbg !43
  %1718 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1717, i32 4, i32 31), !dbg !43
  %1719 = trunc i32 %1718 to i16, !dbg !43
  %1720 = add i16 %1704, %1719, !dbg !46
  %1721 = mul nuw nsw i16 %1697, %48, !dbg !50
  %1722 = mul nuw nsw i16 %1699, %48, !dbg !50
  %1723 = mul nuw nsw i16 %1701, %48, !dbg !50
  %1724 = mul nuw nsw i16 %1703, %48, !dbg !50
  %1725 = zext i16 %1721 to i32, !dbg !43
  %1726 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1725, i32 4, i32 31), !dbg !43
  %1727 = trunc i32 %1726 to i16, !dbg !43
  %1728 = add i16 %1721, %1727, !dbg !46
  %1729 = zext i16 %1722 to i32, !dbg !43
  %1730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1729, i32 4, i32 31), !dbg !43
  %1731 = trunc i32 %1730 to i16, !dbg !43
  %1732 = add i16 %1722, %1731, !dbg !46
  %1733 = zext i16 %1723 to i32, !dbg !43
  %1734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1733, i32 4, i32 31), !dbg !43
  %1735 = trunc i32 %1734 to i16, !dbg !43
  %1736 = add i16 %1723, %1735, !dbg !46
  %1737 = zext i16 %1724 to i32, !dbg !43
  %1738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1737, i32 4, i32 31), !dbg !43
  %1739 = trunc i32 %1738 to i16, !dbg !43
  %1740 = add i16 %1724, %1739, !dbg !46
  %1741 = fcmp uge <2 x float> %1693, %1695, !dbg !41
  %1742 = xor <2 x i1> %1741, %1452, !dbg !41
  %1743 = fcmp uge <2 x float> %1694, %1696, !dbg !41
  %1744 = xor <2 x i1> %1743, %1452, !dbg !41
  %1745 = xor <2 x i32> %1687, %1677, !dbg !33
  %1746 = xor <2 x i32> %1692, %1682, !dbg !33
  %1747 = select <2 x i1> %1742, <2 x i32> zeroinitializer, <2 x i32> %1745, !dbg !34
  %1748 = select <2 x i1> %1744, <2 x i32> zeroinitializer, <2 x i32> %1746, !dbg !34
  %1749 = xor <2 x i32> %1747, %1591, !dbg !35
  %1750 = xor <2 x i32> %1748, %1592, !dbg !35
  %1751 = insertelement <2 x i16> poison, i16 %1732, i64 0, !dbg !36
  %1752 = insertelement <2 x i16> %1751, i16 %1736, i64 1, !dbg !36
  %1753 = insertelement <2 x i16> poison, i16 %1712, i64 0, !dbg !36
  %1754 = insertelement <2 x i16> %1753, i16 %1716, i64 1, !dbg !36
  %1755 = xor <2 x i16> %1752, %1754, !dbg !36
  %1756 = insertelement <2 x i16> poison, i16 %1740, i64 0, !dbg !36
  %1757 = insertelement <2 x i16> %1756, i16 %1728, i64 1, !dbg !36
  %1758 = insertelement <2 x i16> poison, i16 %1720, i64 0, !dbg !36
  %1759 = insertelement <2 x i16> %1758, i16 %1708, i64 1, !dbg !36
  %1760 = xor <2 x i16> %1757, %1759, !dbg !36
  %1761 = shufflevector <2 x i1> %1742, <2 x i1> %1744, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1762 = select <2 x i1> %1761, <2 x i16> zeroinitializer, <2 x i16> %1755, !dbg !37
  %1763 = shufflevector <2 x i1> %1744, <2 x i1> %1742, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1764 = select <2 x i1> %1763, <2 x i16> zeroinitializer, <2 x i16> %1760, !dbg !37
  %1765 = xor <2 x i16> %1762, %1671, !dbg !38
  %1766 = xor <2 x i16> %1764, %1672, !dbg !38
  %1767 = extractelement <2 x i32> %1749, i64 1, !dbg !48
  %1768 = mul nuw nsw i32 %1767, %35, !dbg !42
  %1769 = extractelement <2 x i32> %1749, i64 0, !dbg !48
  %1770 = mul nuw nsw i32 %1769, %35, !dbg !42
  %1771 = extractelement <2 x i32> %1750, i64 1, !dbg !48
  %1772 = mul nuw nsw i32 %1771, %35, !dbg !42
  %1773 = extractelement <2 x i32> %1750, i64 0, !dbg !48
  %1774 = mul nuw nsw i32 %1773, %35, !dbg !42
  %1775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1768, i32 2, i32 31), !dbg !43
  %1776 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1770, i32 2, i32 31), !dbg !43
  %1777 = insertelement <2 x i32> poison, i32 %1776, i64 0, !dbg !46
  %1778 = insertelement <2 x i32> %1777, i32 %1775, i64 1, !dbg !46
  %1779 = insertelement <2 x i32> poison, i32 %1770, i64 0, !dbg !46
  %1780 = insertelement <2 x i32> %1779, i32 %1768, i64 1, !dbg !46
  %1781 = add <2 x i32> %1778, %1780, !dbg !46
  %1782 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1772, i32 2, i32 31), !dbg !43
  %1783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1774, i32 2, i32 31), !dbg !43
  %1784 = insertelement <2 x i32> poison, i32 %1783, i64 0, !dbg !46
  %1785 = insertelement <2 x i32> %1784, i32 %1782, i64 1, !dbg !46
  %1786 = insertelement <2 x i32> poison, i32 %1774, i64 0, !dbg !46
  %1787 = insertelement <2 x i32> %1786, i32 %1772, i64 1, !dbg !46
  %1788 = add <2 x i32> %1785, %1787, !dbg !46
  %1789 = mul nuw nsw i32 %1767, %.lobit, !dbg !48
  %1790 = mul nuw nsw i32 %1769, %.lobit, !dbg !48
  %1791 = mul nuw nsw i32 %1771, %.lobit, !dbg !48
  %1792 = mul nuw nsw i32 %1773, %.lobit, !dbg !48
  %1793 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1789, i32 2, i32 31), !dbg !43
  %1794 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1790, i32 2, i32 31), !dbg !43
  %1795 = insertelement <2 x i32> poison, i32 %1794, i64 0, !dbg !46
  %1796 = insertelement <2 x i32> %1795, i32 %1793, i64 1, !dbg !46
  %1797 = insertelement <2 x i32> poison, i32 %1790, i64 0, !dbg !46
  %1798 = insertelement <2 x i32> %1797, i32 %1789, i64 1, !dbg !46
  %1799 = add <2 x i32> %1796, %1798, !dbg !46
  %1800 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1791, i32 2, i32 31), !dbg !43
  %1801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1792, i32 2, i32 31), !dbg !43
  %1802 = insertelement <2 x i32> poison, i32 %1801, i64 0, !dbg !46
  %1803 = insertelement <2 x i32> %1802, i32 %1800, i64 1, !dbg !46
  %1804 = insertelement <2 x i32> poison, i32 %1792, i64 0, !dbg !46
  %1805 = insertelement <2 x i32> %1804, i32 %1791, i64 1, !dbg !46
  %1806 = add <2 x i32> %1803, %1805, !dbg !46
  %1807 = bitcast <2 x i32> %1781 to <2 x float>, !dbg !39
  %1808 = bitcast <2 x i32> %1788 to <2 x float>, !dbg !39
  %1809 = bitcast <2 x i32> %1799 to <2 x float>, !dbg !40
  %1810 = bitcast <2 x i32> %1806 to <2 x float>, !dbg !40
  %1811 = extractelement <2 x i16> %1766, i64 1, !dbg !50
  %1812 = mul nuw nsw i16 %1811, %41, !dbg !49
  %1813 = extractelement <2 x i16> %1765, i64 0, !dbg !50
  %1814 = mul nuw nsw i16 %1813, %41, !dbg !49
  %1815 = extractelement <2 x i16> %1765, i64 1, !dbg !50
  %1816 = mul nuw nsw i16 %1815, %41, !dbg !49
  %1817 = extractelement <2 x i16> %1766, i64 0, !dbg !50
  %1818 = mul nuw nsw i16 %1817, %41, !dbg !49
  %1819 = zext i16 %1812 to i32, !dbg !43
  %1820 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1819, i32 2, i32 31), !dbg !43
  %1821 = trunc i32 %1820 to i16, !dbg !43
  %1822 = zext i16 %1814 to i32, !dbg !43
  %1823 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1822, i32 2, i32 31), !dbg !43
  %1824 = trunc i32 %1823 to i16, !dbg !43
  %1825 = zext i16 %1816 to i32, !dbg !43
  %1826 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1825, i32 2, i32 31), !dbg !43
  %1827 = trunc i32 %1826 to i16, !dbg !43
  %1828 = insertelement <2 x i16> poison, i16 %1814, i64 0, !dbg !46
  %1829 = insertelement <2 x i16> %1828, i16 %1816, i64 1, !dbg !46
  %1830 = insertelement <2 x i16> poison, i16 %1824, i64 0, !dbg !46
  %1831 = insertelement <2 x i16> %1830, i16 %1827, i64 1, !dbg !46
  %1832 = add <2 x i16> %1829, %1831, !dbg !46
  %1833 = zext i16 %1818 to i32, !dbg !43
  %1834 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1833, i32 2, i32 31), !dbg !43
  %1835 = trunc i32 %1834 to i16, !dbg !43
  %1836 = insertelement <2 x i16> poison, i16 %1818, i64 0, !dbg !46
  %1837 = insertelement <2 x i16> %1836, i16 %1812, i64 1, !dbg !46
  %1838 = insertelement <2 x i16> poison, i16 %1835, i64 0, !dbg !46
  %1839 = insertelement <2 x i16> %1838, i16 %1821, i64 1, !dbg !46
  %1840 = add <2 x i16> %1837, %1839, !dbg !46
  %1841 = mul nuw nsw i16 %1811, %47, !dbg !50
  %1842 = mul nuw nsw i16 %1813, %47, !dbg !50
  %1843 = mul nuw nsw i16 %1815, %47, !dbg !50
  %1844 = mul nuw nsw i16 %1817, %47, !dbg !50
  %1845 = zext i16 %1841 to i32, !dbg !43
  %1846 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1845, i32 2, i32 31), !dbg !43
  %1847 = trunc i32 %1846 to i16, !dbg !43
  %1848 = zext i16 %1842 to i32, !dbg !43
  %1849 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1848, i32 2, i32 31), !dbg !43
  %1850 = trunc i32 %1849 to i16, !dbg !43
  %1851 = zext i16 %1843 to i32, !dbg !43
  %1852 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1851, i32 2, i32 31), !dbg !43
  %1853 = trunc i32 %1852 to i16, !dbg !43
  %1854 = insertelement <2 x i16> poison, i16 %1842, i64 0, !dbg !46
  %1855 = insertelement <2 x i16> %1854, i16 %1843, i64 1, !dbg !46
  %1856 = insertelement <2 x i16> poison, i16 %1850, i64 0, !dbg !46
  %1857 = insertelement <2 x i16> %1856, i16 %1853, i64 1, !dbg !46
  %1858 = add <2 x i16> %1855, %1857, !dbg !46
  %1859 = zext i16 %1844 to i32, !dbg !43
  %1860 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1859, i32 2, i32 31), !dbg !43
  %1861 = trunc i32 %1860 to i16, !dbg !43
  %1862 = insertelement <2 x i16> poison, i16 %1844, i64 0, !dbg !46
  %1863 = insertelement <2 x i16> %1862, i16 %1841, i64 1, !dbg !46
  %1864 = insertelement <2 x i16> poison, i16 %1861, i64 0, !dbg !46
  %1865 = insertelement <2 x i16> %1864, i16 %1847, i64 1, !dbg !46
  %1866 = add <2 x i16> %1863, %1865, !dbg !46
  %1867 = fcmp uge <2 x float> %1807, %1809, !dbg !41
  %1868 = xor <2 x i1> %1867, %1452, !dbg !41
  %1869 = fcmp uge <2 x float> %1808, %1810, !dbg !41
  %1870 = xor <2 x i1> %1869, %1452, !dbg !41
  %1871 = xor <2 x i32> %1799, %1781, !dbg !33
  %1872 = xor <2 x i32> %1806, %1788, !dbg !33
  %1873 = select <2 x i1> %1868, <2 x i32> zeroinitializer, <2 x i32> %1871, !dbg !34
  %1874 = select <2 x i1> %1870, <2 x i32> zeroinitializer, <2 x i32> %1872, !dbg !34
  %1875 = xor <2 x i32> %1873, %1749, !dbg !35
  %1876 = xor <2 x i32> %1874, %1750, !dbg !35
  %1877 = xor <2 x i16> %1858, %1832, !dbg !36
  %1878 = xor <2 x i16> %1866, %1840, !dbg !36
  %1879 = shufflevector <2 x i1> %1868, <2 x i1> %1870, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1880 = select <2 x i1> %1879, <2 x i16> zeroinitializer, <2 x i16> %1877, !dbg !37
  %1881 = shufflevector <2 x i1> %1870, <2 x i1> %1868, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1882 = select <2 x i1> %1881, <2 x i16> zeroinitializer, <2 x i16> %1878, !dbg !37
  %1883 = xor <2 x i16> %1880, %1765, !dbg !38
  %1884 = xor <2 x i16> %1882, %1766, !dbg !38
  %1885 = mul nuw nsw <2 x i32> %1875, %272, !dbg !42
  %1886 = mul nuw nsw <2 x i32> %1876, %272, !dbg !42
  %1887 = extractelement <2 x i32> %1885, i64 1, !dbg !43
  %1888 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1887, i32 1, i32 31), !dbg !43
  %1889 = extractelement <2 x i32> %1885, i64 0, !dbg !43
  %1890 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1889, i32 1, i32 31), !dbg !43
  %1891 = insertelement <2 x i32> poison, i32 %1890, i64 0, !dbg !46
  %1892 = insertelement <2 x i32> %1891, i32 %1888, i64 1, !dbg !46
  %1893 = add <2 x i32> %1892, %1885, !dbg !46
  %1894 = extractelement <2 x i32> %1886, i64 1, !dbg !43
  %1895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1894, i32 1, i32 31), !dbg !43
  %1896 = extractelement <2 x i32> %1886, i64 0, !dbg !43
  %1897 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1896, i32 1, i32 31), !dbg !43
  %1898 = insertelement <2 x i32> poison, i32 %1897, i64 0, !dbg !46
  %1899 = insertelement <2 x i32> %1898, i32 %1895, i64 1, !dbg !46
  %1900 = add <2 x i32> %1899, %1886, !dbg !46
  %1901 = mul nuw nsw <2 x i32> %1875, %274, !dbg !48
  %1902 = mul nuw nsw <2 x i32> %1876, %274, !dbg !48
  %1903 = extractelement <2 x i32> %1901, i64 1, !dbg !43
  %1904 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1903, i32 1, i32 31), !dbg !43
  %1905 = extractelement <2 x i32> %1901, i64 0, !dbg !43
  %1906 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1905, i32 1, i32 31), !dbg !43
  %1907 = insertelement <2 x i32> poison, i32 %1906, i64 0, !dbg !46
  %1908 = insertelement <2 x i32> %1907, i32 %1904, i64 1, !dbg !46
  %1909 = add <2 x i32> %1908, %1901, !dbg !46
  %1910 = extractelement <2 x i32> %1902, i64 1, !dbg !43
  %1911 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1910, i32 1, i32 31), !dbg !43
  %1912 = extractelement <2 x i32> %1902, i64 0, !dbg !43
  %1913 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1912, i32 1, i32 31), !dbg !43
  %1914 = insertelement <2 x i32> poison, i32 %1913, i64 0, !dbg !46
  %1915 = insertelement <2 x i32> %1914, i32 %1911, i64 1, !dbg !46
  %1916 = add <2 x i32> %1915, %1902, !dbg !46
  %1917 = bitcast <2 x i32> %1893 to <2 x float>, !dbg !39
  %1918 = bitcast <2 x i32> %1900 to <2 x float>, !dbg !39
  %1919 = bitcast <2 x i32> %1909 to <2 x float>, !dbg !40
  %1920 = bitcast <2 x i32> %1916 to <2 x float>, !dbg !40
  %1921 = mul nuw nsw <2 x i16> %1883, %461, !dbg !49
  %1922 = mul nuw nsw <2 x i16> %1884, %461, !dbg !49
  %1923 = extractelement <2 x i16> %1922, i64 1, !dbg !43
  %1924 = zext i16 %1923 to i32, !dbg !43
  %1925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1924, i32 1, i32 31), !dbg !43
  %1926 = extractelement <2 x i16> %1921, i64 0, !dbg !43
  %1927 = zext i16 %1926 to i32, !dbg !43
  %1928 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1927, i32 1, i32 31), !dbg !43
  %1929 = extractelement <2 x i16> %1921, i64 1, !dbg !43
  %1930 = zext i16 %1929 to i32, !dbg !43
  %1931 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1930, i32 1, i32 31), !dbg !43
  %1932 = trunc i32 %1928 to i16, !dbg !43
  %1933 = insertelement <2 x i16> poison, i16 %1932, i64 0, !dbg !43
  %1934 = trunc i32 %1931 to i16, !dbg !43
  %1935 = insertelement <2 x i16> %1933, i16 %1934, i64 1, !dbg !43
  %1936 = add <2 x i16> %1921, %1935, !dbg !46
  %1937 = extractelement <2 x i16> %1922, i64 0, !dbg !43
  %1938 = zext i16 %1937 to i32, !dbg !43
  %1939 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1938, i32 1, i32 31), !dbg !43
  %1940 = trunc i32 %1939 to i16, !dbg !43
  %1941 = insertelement <2 x i16> poison, i16 %1940, i64 0, !dbg !43
  %1942 = trunc i32 %1925 to i16, !dbg !43
  %1943 = insertelement <2 x i16> %1941, i16 %1942, i64 1, !dbg !43
  %1944 = add <2 x i16> %1922, %1943, !dbg !46
  %1945 = mul nuw nsw <2 x i16> %1883, %487, !dbg !50
  %1946 = mul nuw nsw <2 x i16> %1884, %487, !dbg !50
  %1947 = extractelement <2 x i16> %1946, i64 1, !dbg !43
  %1948 = zext i16 %1947 to i32, !dbg !43
  %1949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1948, i32 1, i32 31), !dbg !43
  %1950 = extractelement <2 x i16> %1945, i64 0, !dbg !43
  %1951 = zext i16 %1950 to i32, !dbg !43
  %1952 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1951, i32 1, i32 31), !dbg !43
  %1953 = extractelement <2 x i16> %1945, i64 1, !dbg !43
  %1954 = zext i16 %1953 to i32, !dbg !43
  %1955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1954, i32 1, i32 31), !dbg !43
  %1956 = insertelement <2 x i32> poison, i32 %1952, i64 0, !dbg !43
  %1957 = insertelement <2 x i32> %1956, i32 %1955, i64 1, !dbg !43
  %1958 = trunc <2 x i32> %1957 to <2 x i16>, !dbg !43
  %1959 = add <2 x i16> %1945, %1958, !dbg !46
  %1960 = extractelement <2 x i16> %1946, i64 0, !dbg !43
  %1961 = zext i16 %1960 to i32, !dbg !43
  %1962 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1961, i32 1, i32 31), !dbg !43
  %1963 = trunc i32 %1962 to i16, !dbg !43
  %1964 = insertelement <2 x i16> poison, i16 %1963, i64 0, !dbg !43
  %1965 = trunc i32 %1949 to i16, !dbg !43
  %1966 = insertelement <2 x i16> %1964, i16 %1965, i64 1, !dbg !43
  %1967 = add <2 x i16> %1946, %1966, !dbg !46
  %1968 = fcmp uge <2 x float> %1917, %1919, !dbg !41
  %1969 = xor <2 x i1> %1968, %1452, !dbg !41
  %1970 = fcmp uge <2 x float> %1918, %1920, !dbg !41
  %1971 = xor <2 x i1> %1970, %1452, !dbg !41
  %1972 = xor <2 x i32> %1909, %1893, !dbg !33
  %1973 = xor <2 x i32> %1916, %1900, !dbg !33
  %1974 = select <2 x i1> %1969, <2 x i32> zeroinitializer, <2 x i32> %1972, !dbg !34
  %1975 = select <2 x i1> %1971, <2 x i32> zeroinitializer, <2 x i32> %1973, !dbg !34
  %1976 = xor <2 x i32> %1974, %1875, !dbg !35
  %1977 = xor <2 x i32> %1975, %1876, !dbg !35
  %1978 = xor <2 x i16> %1959, %1936, !dbg !36
  %1979 = xor <2 x i16> %1967, %1944, !dbg !36
  %1980 = shufflevector <2 x i1> %1969, <2 x i1> %1971, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1981 = select <2 x i1> %1980, <2 x i16> zeroinitializer, <2 x i16> %1978, !dbg !37
  %1982 = shufflevector <2 x i1> %1971, <2 x i1> %1969, <2 x i32> <i32 0, i32 3>, !dbg !37
  %1983 = select <2 x i1> %1982, <2 x i16> zeroinitializer, <2 x i16> %1979, !dbg !37
  %1984 = xor <2 x i16> %1981, %1883, !dbg !38
  %1985 = xor <2 x i16> %1983, %1884, !dbg !38
  %1986 = bitcast <2 x i32> %1976 to <2 x float>, !dbg !39
  %1987 = bitcast <2 x i32> %1977 to <2 x float>, !dbg !40
  %1988 = fcmp uge <2 x float> %1986, %1987, !dbg !41
  %1989 = xor <2 x i1> %1988, %1452, !dbg !41
  %1990 = xor <2 x i32> %1976, %1977, !dbg !33
  %1991 = select <2 x i1> %1989, <2 x i32> zeroinitializer, <2 x i32> %1990, !dbg !34
  %1992 = xor <2 x i32> %1991, %1976, !dbg !35
  %1993 = xor <2 x i32> %1991, %1977, !dbg !35
  %1994 = xor <2 x i16> %1984, %1985, !dbg !36
  %1995 = select <2 x i1> %1989, <2 x i16> zeroinitializer, <2 x i16> %1994, !dbg !37
  %1996 = shufflevector <2 x i16> %1984, <2 x i16> %1985, <2 x i32> <i32 0, i32 3>, !dbg !38
  %1997 = xor <2 x i16> %1995, %1996, !dbg !38
  %1998 = shufflevector <2 x i16> %1985, <2 x i16> %1984, <2 x i32> <i32 0, i32 3>, !dbg !38
  %1999 = xor <2 x i16> %1995, %1998, !dbg !38
  %2000 = extractelement <2 x i32> %1992, i64 1, !dbg !39
  %2001 = bitcast i32 %2000 to float, !dbg !39
  %2002 = extractelement <2 x i32> %1993, i64 1, !dbg !39
  %2003 = bitcast i32 %2002 to float, !dbg !39
  %2004 = extractelement <2 x i32> %1992, i64 0, !dbg !40
  %2005 = bitcast i32 %2004 to float, !dbg !40
  %2006 = extractelement <2 x i32> %1993, i64 0, !dbg !40
  %2007 = bitcast i32 %2006 to float, !dbg !40
  %2008 = fcmp uge float %2001, %2005, !dbg !41
  %.not86 = xor i1 %2008, %1406, !dbg !41
  %2009 = fcmp uge float %2003, %2007, !dbg !41
  %.not87 = xor i1 %2009, %1406, !dbg !41
  %2010 = xor i32 %2004, %2000, !dbg !33
  %2011 = xor i32 %2006, %2002, !dbg !33
  %2012 = select i1 %.not86, i32 0, i32 %2010, !dbg !34
  %2013 = select i1 %.not87, i32 0, i32 %2011, !dbg !34
  %2014 = xor i32 %2012, %2000, !dbg !35
  %2015 = xor i32 %2012, %2004, !dbg !35
  %2016 = xor i32 %2013, %2002, !dbg !35
  %2017 = xor i32 %2013, %2006, !dbg !35
  %2018 = extractelement <2 x i16> %1997, i64 0, !dbg !36
  %2019 = extractelement <2 x i16> %1997, i64 1, !dbg !36
  %2020 = xor i16 %2018, %2019, !dbg !36
  %2021 = extractelement <2 x i16> %1999, i64 0, !dbg !36
  %2022 = extractelement <2 x i16> %1999, i64 1, !dbg !36
  %2023 = xor i16 %2021, %2022, !dbg !36
  %2024 = select i1 %.not86, i16 0, i16 %2020, !dbg !37
  %2025 = select i1 %.not87, i16 0, i16 %2023, !dbg !37
  %2026 = xor i16 %2024, %2019, !dbg !38
  %2027 = xor i16 %2024, %2018, !dbg !38
  %2028 = xor i16 %2025, %2022, !dbg !38
  %2029 = xor i16 %2025, %2021, !dbg !38
  %2030 = mul nuw nsw i32 %2014, %39, !dbg !42
  %2031 = mul nuw nsw i32 %2015, %39, !dbg !42
  %2032 = mul nuw nsw i32 %2016, %39, !dbg !42
  %2033 = mul nuw nsw i32 %2017, %39, !dbg !42
  %2034 = shl i32 %8, 3, !dbg !43
  %2035 = and i32 %2034, 248, !dbg !43
  %2036 = or disjoint i32 %2035, %.lobit4, !dbg !43
  %2037 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2036, !dbg !43
  %2038 = insertelement <1 x i32> poison, i32 %2030, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2037, <1 x i32> %2038, i1 true) #5, !dbg !43
  %2039 = or disjoint i32 %2035, 2, !dbg !43
  %2040 = or disjoint i32 %2039, %.lobit4, !dbg !43
  %2041 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2040, !dbg !43
  %2042 = insertelement <1 x i32> poison, i32 %2031, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2041, <1 x i32> %2042, i1 true) #5, !dbg !43
  %2043 = or disjoint i32 %2035, 4, !dbg !43
  %2044 = or disjoint i32 %2043, %.lobit4, !dbg !43
  %2045 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2044, !dbg !43
  %2046 = insertelement <1 x i32> poison, i32 %2032, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2045, <1 x i32> %2046, i1 true) #5, !dbg !43
  %2047 = or disjoint i32 %2035, 6, !dbg !43
  %2048 = or disjoint i32 %2047, %.lobit4, !dbg !43
  %2049 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2048, !dbg !43
  %2050 = insertelement <1 x i32> poison, i32 %2033, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2049, <1 x i32> %2050, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2051 = icmp slt i32 %8, 256, !dbg !43
  %2052 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %2053 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %2052, i1 %2051) #5, !dbg !43
  %2054 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2053, i32 1, i32 31), !dbg !43
  %2055 = add i32 %2054, %2053, !dbg !46
  %2056 = icmp eq i32 %10, 0, !dbg !43
  %2057 = and i1 %2051, %2056, !dbg !43
  %2058 = insertelement <1 x i32> poison, i32 %2055, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2052, <1 x i32> %2058, i1 %2057) #5, !dbg !43
  %2059 = add i32 %8, 64, !dbg !43
  %2060 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2059, !dbg !43
  %2061 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %2060, i1 %2051) #5, !dbg !43
  %2062 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2061, i32 1, i32 31), !dbg !43
  %2063 = add i32 %2062, %2061, !dbg !46
  %2064 = insertelement <1 x i32> poison, i32 %2063, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2060, <1 x i32> %2064, i1 %2057) #5, !dbg !43
  %2065 = add i32 %8, 128, !dbg !43
  %2066 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2065, !dbg !43
  %2067 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %2066, i1 %2051) #5, !dbg !43
  %2068 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2067, i32 1, i32 31), !dbg !43
  %2069 = add i32 %2068, %2067, !dbg !46
  %2070 = insertelement <1 x i32> poison, i32 %2069, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2066, <1 x i32> %2070, i1 %2057) #5, !dbg !43
  %2071 = add i32 %8, 192, !dbg !43
  %2072 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2071, !dbg !43
  %2073 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %2072, i1 %2051) #5, !dbg !43
  %2074 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2073, i32 1, i32 31), !dbg !43
  %2075 = add i32 %2074, %2073, !dbg !46
  %2076 = insertelement <1 x i32> poison, i32 %2075, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2072, <1 x i32> %2076, i1 %2057) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2077 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2035, !dbg !43
  %2078 = load i32, ptr addrspace(3) %2077, align 16, !dbg !43
  %2079 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2039, !dbg !43
  %2080 = load i32, ptr addrspace(3) %2079, align 8, !dbg !43
  %2081 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2043, !dbg !43
  %2082 = load i32, ptr addrspace(3) %2081, align 16, !dbg !43
  %2083 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %2047, !dbg !43
  %2084 = load i32, ptr addrspace(3) %2083, align 8, !dbg !43
  %2085 = mul nuw nsw i32 %2014, %.lobit4, !dbg !48
  %2086 = mul nuw nsw i32 %2015, %.lobit4, !dbg !48
  %2087 = mul nuw nsw i32 %2016, %.lobit4, !dbg !48
  %2088 = mul nuw nsw i32 %2017, %.lobit4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2089 = insertelement <1 x i32> poison, i32 %2085, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2037, <1 x i32> %2089, i1 true) #5, !dbg !43
  %2090 = insertelement <1 x i32> poison, i32 %2086, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2041, <1 x i32> %2090, i1 true) #5, !dbg !43
  %2091 = insertelement <1 x i32> poison, i32 %2087, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2045, <1 x i32> %2091, i1 true) #5, !dbg !43
  %2092 = insertelement <1 x i32> poison, i32 %2088, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2049, <1 x i32> %2092, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2093 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %2052, i1 %2051) #5, !dbg !43
  %2094 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2093, i32 1, i32 31), !dbg !43
  %2095 = add i32 %2094, %2093, !dbg !46
  %2096 = insertelement <1 x i32> poison, i32 %2095, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2052, <1 x i32> %2096, i1 %2057) #5, !dbg !43
  %2097 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %2060, i1 %2051) #5, !dbg !43
  %2098 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2097, i32 1, i32 31), !dbg !43
  %2099 = add i32 %2098, %2097, !dbg !46
  %2100 = insertelement <1 x i32> poison, i32 %2099, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2060, <1 x i32> %2100, i1 %2057) #5, !dbg !43
  %2101 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %2066, i1 %2051) #5, !dbg !43
  %2102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2101, i32 1, i32 31), !dbg !43
  %2103 = add i32 %2102, %2101, !dbg !46
  %2104 = insertelement <1 x i32> poison, i32 %2103, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2066, <1 x i32> %2104, i1 %2057) #5, !dbg !43
  %2105 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %2072, i1 %2051) #5, !dbg !43
  %2106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2105, i32 1, i32 31), !dbg !43
  %2107 = add i32 %2106, %2105, !dbg !46
  %2108 = insertelement <1 x i32> poison, i32 %2107, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2072, <1 x i32> %2108, i1 %2057) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2109 = load i32, ptr addrspace(3) %2077, align 16, !dbg !43
  %2110 = load i32, ptr addrspace(3) %2079, align 8, !dbg !43
  %2111 = load i32, ptr addrspace(3) %2081, align 16, !dbg !43
  %2112 = load i32, ptr addrspace(3) %2083, align 8, !dbg !43
  %2113 = bitcast i32 %2078 to float, !dbg !39
  %2114 = bitcast i32 %2080 to float, !dbg !39
  %2115 = bitcast i32 %2082 to float, !dbg !39
  %2116 = bitcast i32 %2084 to float, !dbg !39
  %2117 = bitcast i32 %2109 to float, !dbg !40
  %2118 = bitcast i32 %2110 to float, !dbg !40
  %2119 = bitcast i32 %2111 to float, !dbg !40
  %2120 = bitcast i32 %2112 to float, !dbg !40
  %2121 = mul nuw nsw i16 %2026, %45, !dbg !49
  %2122 = mul nuw nsw i16 %2027, %45, !dbg !49
  %2123 = mul nuw nsw i16 %2028, %45, !dbg !49
  %2124 = mul nuw nsw i16 %2029, %45, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2125 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2036, !dbg !43
  %2126 = insertelement <1 x i16> poison, i16 %2121, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2125, <1 x i16> %2126, i1 true) #5, !dbg !43
  %2127 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2040, !dbg !43
  %2128 = insertelement <1 x i16> poison, i16 %2122, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2127, <1 x i16> %2128, i1 true) #5, !dbg !43
  %2129 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2044, !dbg !43
  %2130 = insertelement <1 x i16> poison, i16 %2123, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2129, <1 x i16> %2130, i1 true) #5, !dbg !43
  %2131 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2048, !dbg !43
  %2132 = insertelement <1 x i16> poison, i16 %2124, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2131, <1 x i16> %2132, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2133 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %2134 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %2133, i1 %2051) #5, !dbg !43
  %2135 = zext i16 %2134 to i32, !dbg !43
  %2136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2135, i32 1, i32 31), !dbg !43
  %2137 = trunc i32 %2136 to i16, !dbg !43
  %2138 = add i16 %2134, %2137, !dbg !46
  %2139 = insertelement <1 x i16> poison, i16 %2138, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2133, <1 x i16> %2139, i1 %2057) #5, !dbg !43
  %2140 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2059, !dbg !43
  %2141 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %2140, i1 %2051) #5, !dbg !43
  %2142 = zext i16 %2141 to i32, !dbg !43
  %2143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2142, i32 1, i32 31), !dbg !43
  %2144 = trunc i32 %2143 to i16, !dbg !43
  %2145 = add i16 %2141, %2144, !dbg !46
  %2146 = insertelement <1 x i16> poison, i16 %2145, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2140, <1 x i16> %2146, i1 %2057) #5, !dbg !43
  %2147 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2065, !dbg !43
  %2148 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %2147, i1 %2051) #5, !dbg !43
  %2149 = zext i16 %2148 to i32, !dbg !43
  %2150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2149, i32 1, i32 31), !dbg !43
  %2151 = trunc i32 %2150 to i16, !dbg !43
  %2152 = add i16 %2148, %2151, !dbg !46
  %2153 = insertelement <1 x i16> poison, i16 %2152, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2147, <1 x i16> %2153, i1 %2057) #5, !dbg !43
  %2154 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2071, !dbg !43
  %2155 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %2154, i1 %2051) #5, !dbg !43
  %2156 = zext i16 %2155 to i32, !dbg !43
  %2157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2156, i32 1, i32 31), !dbg !43
  %2158 = trunc i32 %2157 to i16, !dbg !43
  %2159 = add i16 %2155, %2158, !dbg !46
  %2160 = insertelement <1 x i16> poison, i16 %2159, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2154, <1 x i16> %2160, i1 %2057) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2161 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2035, !dbg !43
  %2162 = load i16, ptr addrspace(3) %2161, align 16, !dbg !43
  %2163 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2039, !dbg !43
  %2164 = load i16, ptr addrspace(3) %2163, align 4, !dbg !43
  %2165 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2043, !dbg !43
  %2166 = load i16, ptr addrspace(3) %2165, align 8, !dbg !43
  %2167 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %2047, !dbg !43
  %2168 = load i16, ptr addrspace(3) %2167, align 4, !dbg !43
  %2169 = mul nuw nsw i16 %2026, %51, !dbg !50
  %2170 = mul nuw nsw i16 %2027, %51, !dbg !50
  %2171 = mul nuw nsw i16 %2028, %51, !dbg !50
  %2172 = mul nuw nsw i16 %2029, %51, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2173 = insertelement <1 x i16> poison, i16 %2169, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2125, <1 x i16> %2173, i1 true) #5, !dbg !43
  %2174 = insertelement <1 x i16> poison, i16 %2170, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2127, <1 x i16> %2174, i1 true) #5, !dbg !43
  %2175 = insertelement <1 x i16> poison, i16 %2171, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2129, <1 x i16> %2175, i1 true) #5, !dbg !43
  %2176 = insertelement <1 x i16> poison, i16 %2172, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2131, <1 x i16> %2176, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2177 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %2133, i1 %2051) #5, !dbg !43
  %2178 = zext i16 %2177 to i32, !dbg !43
  %2179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2178, i32 1, i32 31), !dbg !43
  %2180 = trunc i32 %2179 to i16, !dbg !43
  %2181 = add i16 %2177, %2180, !dbg !46
  %2182 = insertelement <1 x i16> poison, i16 %2181, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2133, <1 x i16> %2182, i1 %2057) #5, !dbg !43
  %2183 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %2140, i1 %2051) #5, !dbg !43
  %2184 = zext i16 %2183 to i32, !dbg !43
  %2185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2184, i32 1, i32 31), !dbg !43
  %2186 = trunc i32 %2185 to i16, !dbg !43
  %2187 = add i16 %2183, %2186, !dbg !46
  %2188 = insertelement <1 x i16> poison, i16 %2187, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2140, <1 x i16> %2188, i1 %2057) #5, !dbg !43
  %2189 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %2147, i1 %2051) #5, !dbg !43
  %2190 = zext i16 %2189 to i32, !dbg !43
  %2191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2190, i32 1, i32 31), !dbg !43
  %2192 = trunc i32 %2191 to i16, !dbg !43
  %2193 = add i16 %2189, %2192, !dbg !46
  %2194 = insertelement <1 x i16> poison, i16 %2193, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2147, <1 x i16> %2194, i1 %2057) #5, !dbg !43
  %2195 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %2154, i1 %2051) #5, !dbg !43
  %2196 = zext i16 %2195 to i32, !dbg !43
  %2197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2196, i32 1, i32 31), !dbg !43
  %2198 = trunc i32 %2197 to i16, !dbg !43
  %2199 = add i16 %2195, %2198, !dbg !46
  %2200 = insertelement <1 x i16> poison, i16 %2199, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %2154, <1 x i16> %2200, i1 %2057) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %2201 = load i16, ptr addrspace(3) %2161, align 16, !dbg !43
  %2202 = load i16, ptr addrspace(3) %2163, align 4, !dbg !43
  %2203 = load i16, ptr addrspace(3) %2165, align 8, !dbg !43
  %2204 = load i16, ptr addrspace(3) %2167, align 4, !dbg !43
  %2205 = fcmp olt float %2113, %2117, !dbg !32
  %2206 = fcmp olt float %2114, %2118, !dbg !32
  %2207 = fcmp olt float %2115, %2119, !dbg !32
  %2208 = fcmp olt float %2116, %2120, !dbg !32
  %2209 = xor i32 %2109, %2078, !dbg !33
  %2210 = xor i32 %2110, %2080, !dbg !33
  %2211 = xor i32 %2111, %2082, !dbg !33
  %2212 = xor i32 %2112, %2084, !dbg !33
  %2213 = select i1 %2205, i32 %2209, i32 0, !dbg !34
  %2214 = select i1 %2206, i32 %2210, i32 0, !dbg !34
  %2215 = select i1 %2207, i32 %2211, i32 0, !dbg !34
  %2216 = select i1 %2208, i32 %2212, i32 0, !dbg !34
  %2217 = xor i32 %2213, %2014, !dbg !35
  %2218 = xor i32 %2214, %2015, !dbg !35
  %2219 = xor i32 %2215, %2016, !dbg !35
  %2220 = xor i32 %2216, %2017, !dbg !35
  %2221 = xor i16 %2201, %2162, !dbg !36
  %2222 = xor i16 %2202, %2164, !dbg !36
  %2223 = xor i16 %2203, %2166, !dbg !36
  %2224 = xor i16 %2204, %2168, !dbg !36
  %2225 = select i1 %2205, i16 %2221, i16 0, !dbg !37
  %2226 = select i1 %2206, i16 %2222, i16 0, !dbg !37
  %2227 = select i1 %2207, i16 %2223, i16 0, !dbg !37
  %2228 = select i1 %2208, i16 %2224, i16 0, !dbg !37
  %2229 = xor i16 %2225, %2026, !dbg !38
  %2230 = xor i16 %2226, %2027, !dbg !38
  %2231 = xor i16 %2227, %2028, !dbg !38
  %2232 = xor i16 %2228, %2029, !dbg !38
  %2233 = mul nuw nsw i32 %2217, %38, !dbg !42
  %2234 = mul nuw nsw i32 %2218, %38, !dbg !42
  %2235 = mul nuw nsw i32 %2219, %38, !dbg !42
  %2236 = mul nuw nsw i32 %2220, %38, !dbg !42
  %2237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2233, i32 16, i32 31), !dbg !43
  %2238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2234, i32 16, i32 31), !dbg !43
  %2239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2235, i32 16, i32 31), !dbg !43
  %2240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2236, i32 16, i32 31), !dbg !43
  %2241 = mul nuw nsw i32 %2217, %.lobit3, !dbg !48
  %2242 = mul nuw nsw i32 %2218, %.lobit3, !dbg !48
  %2243 = mul nuw nsw i32 %2219, %.lobit3, !dbg !48
  %2244 = mul nuw nsw i32 %2220, %.lobit3, !dbg !48
  %2245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2241, i32 16, i32 31), !dbg !43
  %2246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2242, i32 16, i32 31), !dbg !43
  %2247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2243, i32 16, i32 31), !dbg !43
  %2248 = add i32 %2247, %2243, !dbg !46
  %2249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2244, i32 16, i32 31), !dbg !43
  %2250 = add i32 %2249, %2244, !dbg !46
  %2251 = insertelement <2 x i32> poison, i32 %2237, i64 0, !dbg !46
  %2252 = insertelement <2 x i32> %2251, i32 %2238, i64 1, !dbg !46
  %2253 = insertelement <2 x i32> poison, i32 %2233, i64 0, !dbg !46
  %2254 = insertelement <2 x i32> %2253, i32 %2234, i64 1, !dbg !46
  %2255 = add <2 x i32> %2252, %2254, !dbg !46
  %2256 = bitcast <2 x i32> %2255 to <2 x float>, !dbg !39
  %2257 = insertelement <2 x i32> poison, i32 %2239, i64 0, !dbg !46
  %2258 = insertelement <2 x i32> %2257, i32 %2240, i64 1, !dbg !46
  %2259 = insertelement <2 x i32> poison, i32 %2235, i64 0, !dbg !46
  %2260 = insertelement <2 x i32> %2259, i32 %2236, i64 1, !dbg !46
  %2261 = add <2 x i32> %2258, %2260, !dbg !46
  %2262 = bitcast <2 x i32> %2261 to <2 x float>, !dbg !39
  %2263 = insertelement <2 x i32> poison, i32 %2245, i64 0, !dbg !46
  %2264 = insertelement <2 x i32> %2263, i32 %2246, i64 1, !dbg !46
  %2265 = insertelement <2 x i32> poison, i32 %2241, i64 0, !dbg !46
  %2266 = insertelement <2 x i32> %2265, i32 %2242, i64 1, !dbg !46
  %2267 = add <2 x i32> %2264, %2266, !dbg !46
  %2268 = bitcast <2 x i32> %2267 to <2 x float>, !dbg !40
  %2269 = mul nuw nsw i16 %2229, %44, !dbg !49
  %2270 = mul nuw nsw i16 %2230, %44, !dbg !49
  %2271 = mul nuw nsw i16 %2231, %44, !dbg !49
  %2272 = mul nuw nsw i16 %2232, %44, !dbg !49
  %2273 = zext i16 %2269 to i32, !dbg !43
  %2274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2273, i32 16, i32 31), !dbg !43
  %2275 = trunc i32 %2274 to i16, !dbg !43
  %2276 = add i16 %2269, %2275, !dbg !46
  %2277 = zext i16 %2270 to i32, !dbg !43
  %2278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2277, i32 16, i32 31), !dbg !43
  %2279 = trunc i32 %2278 to i16, !dbg !43
  %2280 = add i16 %2270, %2279, !dbg !46
  %2281 = zext i16 %2271 to i32, !dbg !43
  %2282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2281, i32 16, i32 31), !dbg !43
  %2283 = trunc i32 %2282 to i16, !dbg !43
  %2284 = add i16 %2271, %2283, !dbg !46
  %2285 = zext i16 %2272 to i32, !dbg !43
  %2286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2285, i32 16, i32 31), !dbg !43
  %2287 = trunc i32 %2286 to i16, !dbg !43
  %2288 = add i16 %2272, %2287, !dbg !46
  %2289 = mul nuw nsw i16 %2229, %50, !dbg !50
  %2290 = mul nuw nsw i16 %2230, %50, !dbg !50
  %2291 = mul nuw nsw i16 %2231, %50, !dbg !50
  %2292 = mul nuw nsw i16 %2232, %50, !dbg !50
  %2293 = zext i16 %2289 to i32, !dbg !43
  %2294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2293, i32 16, i32 31), !dbg !43
  %2295 = trunc i32 %2294 to i16, !dbg !43
  %2296 = add i16 %2289, %2295, !dbg !46
  %2297 = zext i16 %2290 to i32, !dbg !43
  %2298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2297, i32 16, i32 31), !dbg !43
  %2299 = trunc i32 %2298 to i16, !dbg !43
  %2300 = add i16 %2290, %2299, !dbg !46
  %2301 = zext i16 %2291 to i32, !dbg !43
  %2302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2301, i32 16, i32 31), !dbg !43
  %2303 = trunc i32 %2302 to i16, !dbg !43
  %2304 = add i16 %2291, %2303, !dbg !46
  %2305 = zext i16 %2292 to i32, !dbg !43
  %2306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2305, i32 16, i32 31), !dbg !43
  %2307 = trunc i32 %2306 to i16, !dbg !43
  %2308 = add i16 %2292, %2307, !dbg !46
  %2309 = fcmp olt <2 x float> %2256, %2268, !dbg !32
  %2310 = xor <2 x i32> %2267, %2255, !dbg !33
  %2311 = select <2 x i1> %2309, <2 x i32> %2310, <2 x i32> zeroinitializer, !dbg !34
  %2312 = insertelement <2 x i32> poison, i32 %2248, i64 0, !dbg !32
  %2313 = insertelement <2 x i32> %2312, i32 %2250, i64 1, !dbg !32
  %2314 = bitcast <2 x i32> %2313 to <2 x float>, !dbg !32
  %2315 = fcmp olt <2 x float> %2262, %2314, !dbg !32
  %2316 = insertelement <2 x i32> poison, i32 %2248, i64 0, !dbg !33
  %2317 = insertelement <2 x i32> %2316, i32 %2250, i64 1, !dbg !33
  %2318 = xor <2 x i32> %2317, %2261, !dbg !33
  %2319 = select <2 x i1> %2315, <2 x i32> %2318, <2 x i32> zeroinitializer, !dbg !34
  %2320 = xor i16 %2296, %2276, !dbg !36
  %2321 = xor i16 %2300, %2280, !dbg !36
  %2322 = xor i16 %2304, %2284, !dbg !36
  %2323 = xor i16 %2308, %2288, !dbg !36
  %2324 = extractelement <2 x i1> %2309, i64 0, !dbg !37
  %2325 = select i1 %2324, i16 %2320, i16 0, !dbg !37
  %2326 = extractelement <2 x i1> %2309, i64 1, !dbg !37
  %2327 = select i1 %2326, i16 %2321, i16 0, !dbg !37
  %2328 = extractelement <2 x i1> %2315, i64 0, !dbg !37
  %2329 = select i1 %2328, i16 %2322, i16 0, !dbg !37
  %2330 = extractelement <2 x i1> %2315, i64 1, !dbg !37
  %2331 = select i1 %2330, i16 %2323, i16 0, !dbg !37
  %2332 = xor i16 %2325, %2229, !dbg !38
  %2333 = xor i16 %2327, %2230, !dbg !38
  %2334 = xor i16 %2329, %2231, !dbg !38
  %2335 = xor i16 %2331, %2232, !dbg !38
  %2336 = mul nuw nsw i16 %2332, %43, !dbg !49
  %2337 = mul nuw nsw i16 %2333, %43, !dbg !49
  %2338 = mul nuw nsw i16 %2334, %43, !dbg !49
  %2339 = mul nuw nsw i16 %2335, %43, !dbg !49
  %2340 = zext i16 %2336 to i32, !dbg !43
  %2341 = zext i16 %2337 to i32, !dbg !43
  %2342 = zext i16 %2338 to i32, !dbg !43
  %2343 = zext i16 %2339 to i32, !dbg !43
  %2344 = mul nuw nsw i16 %2332, %49, !dbg !50
  %2345 = mul nuw nsw i16 %2333, %49, !dbg !50
  %2346 = mul nuw nsw i16 %2334, %49, !dbg !50
  %2347 = mul nuw nsw i16 %2335, %49, !dbg !50
  %2348 = zext i16 %2344 to i32, !dbg !43
  %2349 = zext i16 %2345 to i32, !dbg !43
  %2350 = zext i16 %2346 to i32, !dbg !43
  %2351 = zext i16 %2347 to i32, !dbg !43
  %2352 = insertelement <2 x i32> poison, i32 %2217, i64 0, !dbg !35
  %2353 = insertelement <2 x i32> %2352, i32 %2218, i64 1, !dbg !35
  %2354 = xor <2 x i32> %2311, %2353, !dbg !35
  %2355 = insertelement <2 x i32> poison, i32 %2219, i64 0, !dbg !35
  %2356 = insertelement <2 x i32> %2355, i32 %2220, i64 1, !dbg !35
  %2357 = xor <2 x i32> %2319, %2356, !dbg !35
  %2358 = extractelement <2 x i32> %2354, i64 0, !dbg !48
  %2359 = mul nuw nsw i32 %2358, %37, !dbg !42
  %2360 = extractelement <2 x i32> %2354, i64 1, !dbg !48
  %2361 = mul nuw nsw i32 %2360, %37, !dbg !42
  %2362 = extractelement <2 x i32> %2357, i64 0, !dbg !48
  %2363 = mul nuw nsw i32 %2362, %37, !dbg !42
  %2364 = extractelement <2 x i32> %2357, i64 1, !dbg !48
  %2365 = mul nuw nsw i32 %2364, %37, !dbg !42
  %2366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2359, i32 8, i32 31), !dbg !43
  %2367 = add i32 %2366, %2359, !dbg !46
  %2368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2361, i32 8, i32 31), !dbg !43
  %2369 = add i32 %2368, %2361, !dbg !46
  %2370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2363, i32 8, i32 31), !dbg !43
  %2371 = add i32 %2370, %2363, !dbg !46
  %2372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2365, i32 8, i32 31), !dbg !43
  %2373 = add i32 %2372, %2365, !dbg !46
  %2374 = mul nuw nsw i32 %2358, %.lobit2, !dbg !48
  %2375 = mul nuw nsw i32 %2360, %.lobit2, !dbg !48
  %2376 = mul nuw nsw i32 %2362, %.lobit2, !dbg !48
  %2377 = mul nuw nsw i32 %2364, %.lobit2, !dbg !48
  %2378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2374, i32 8, i32 31), !dbg !43
  %2379 = add i32 %2378, %2374, !dbg !46
  %2380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2375, i32 8, i32 31), !dbg !43
  %2381 = add i32 %2380, %2375, !dbg !46
  %2382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2376, i32 8, i32 31), !dbg !43
  %2383 = add i32 %2382, %2376, !dbg !46
  %2384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2377, i32 8, i32 31), !dbg !43
  %2385 = add i32 %2384, %2377, !dbg !46
  %2386 = bitcast i32 %2367 to float, !dbg !39
  %2387 = bitcast i32 %2369 to float, !dbg !39
  %2388 = bitcast i32 %2371 to float, !dbg !39
  %2389 = bitcast i32 %2373 to float, !dbg !39
  %2390 = bitcast i32 %2379 to float, !dbg !40
  %2391 = bitcast i32 %2381 to float, !dbg !40
  %2392 = bitcast i32 %2383 to float, !dbg !40
  %2393 = bitcast i32 %2385 to float, !dbg !40
  %2394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2340, i32 8, i32 31), !dbg !43
  %2395 = trunc i32 %2394 to i16, !dbg !43
  %2396 = add i16 %2336, %2395, !dbg !46
  %2397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2341, i32 8, i32 31), !dbg !43
  %2398 = trunc i32 %2397 to i16, !dbg !43
  %2399 = add i16 %2337, %2398, !dbg !46
  %2400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2342, i32 8, i32 31), !dbg !43
  %2401 = trunc i32 %2400 to i16, !dbg !43
  %2402 = add i16 %2338, %2401, !dbg !46
  %2403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2343, i32 8, i32 31), !dbg !43
  %2404 = trunc i32 %2403 to i16, !dbg !43
  %2405 = add i16 %2339, %2404, !dbg !46
  %2406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2348, i32 8, i32 31), !dbg !43
  %2407 = trunc i32 %2406 to i16, !dbg !43
  %2408 = add i16 %2344, %2407, !dbg !46
  %2409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2349, i32 8, i32 31), !dbg !43
  %2410 = trunc i32 %2409 to i16, !dbg !43
  %2411 = add i16 %2345, %2410, !dbg !46
  %2412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2350, i32 8, i32 31), !dbg !43
  %2413 = trunc i32 %2412 to i16, !dbg !43
  %2414 = add i16 %2346, %2413, !dbg !46
  %2415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2351, i32 8, i32 31), !dbg !43
  %2416 = trunc i32 %2415 to i16, !dbg !43
  %2417 = add i16 %2347, %2416, !dbg !46
  %2418 = fcmp olt float %2386, %2390, !dbg !32
  %2419 = fcmp olt float %2387, %2391, !dbg !32
  %2420 = fcmp olt float %2388, %2392, !dbg !32
  %2421 = fcmp olt float %2389, %2393, !dbg !32
  %2422 = insertelement <2 x i32> poison, i32 %2379, i64 0, !dbg !33
  %2423 = insertelement <2 x i32> %2422, i32 %2381, i64 1, !dbg !33
  %2424 = insertelement <2 x i32> poison, i32 %2367, i64 0, !dbg !33
  %2425 = insertelement <2 x i32> %2424, i32 %2369, i64 1, !dbg !33
  %2426 = xor <2 x i32> %2423, %2425, !dbg !33
  %2427 = insertelement <2 x i32> poison, i32 %2383, i64 0, !dbg !33
  %2428 = insertelement <2 x i32> %2427, i32 %2385, i64 1, !dbg !33
  %2429 = insertelement <2 x i32> poison, i32 %2371, i64 0, !dbg !33
  %2430 = insertelement <2 x i32> %2429, i32 %2373, i64 1, !dbg !33
  %2431 = xor <2 x i32> %2428, %2430, !dbg !33
  %2432 = insertelement <2 x i1> poison, i1 %2418, i64 0, !dbg !34
  %2433 = insertelement <2 x i1> %2432, i1 %2419, i64 1, !dbg !34
  %2434 = select <2 x i1> %2433, <2 x i32> %2426, <2 x i32> zeroinitializer, !dbg !34
  %2435 = insertelement <2 x i1> poison, i1 %2420, i64 0, !dbg !34
  %2436 = insertelement <2 x i1> %2435, i1 %2421, i64 1, !dbg !34
  %2437 = select <2 x i1> %2436, <2 x i32> %2431, <2 x i32> zeroinitializer, !dbg !34
  %2438 = xor <2 x i32> %2434, %2354, !dbg !35
  %2439 = xor <2 x i32> %2437, %2357, !dbg !35
  %2440 = xor i16 %2408, %2396, !dbg !36
  %2441 = xor i16 %2411, %2399, !dbg !36
  %2442 = xor i16 %2414, %2402, !dbg !36
  %2443 = xor i16 %2417, %2405, !dbg !36
  %2444 = select i1 %2418, i16 %2440, i16 0, !dbg !37
  %2445 = select i1 %2419, i16 %2441, i16 0, !dbg !37
  %2446 = select i1 %2420, i16 %2442, i16 0, !dbg !37
  %2447 = select i1 %2421, i16 %2443, i16 0, !dbg !37
  %2448 = xor i16 %2444, %2332, !dbg !38
  %2449 = xor i16 %2445, %2333, !dbg !38
  %2450 = xor i16 %2446, %2334, !dbg !38
  %2451 = xor i16 %2447, %2335, !dbg !38
  %2452 = extractelement <2 x i32> %2438, i64 0, !dbg !48
  %2453 = mul nuw nsw i32 %2452, %36, !dbg !42
  %2454 = extractelement <2 x i32> %2438, i64 1, !dbg !48
  %2455 = mul nuw nsw i32 %2454, %36, !dbg !42
  %2456 = extractelement <2 x i32> %2439, i64 0, !dbg !48
  %2457 = mul nuw nsw i32 %2456, %36, !dbg !42
  %2458 = extractelement <2 x i32> %2439, i64 1, !dbg !48
  %2459 = mul nuw nsw i32 %2458, %36, !dbg !42
  %2460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2453, i32 4, i32 31), !dbg !43
  %2461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2455, i32 4, i32 31), !dbg !43
  %2462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2457, i32 4, i32 31), !dbg !43
  %2463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2459, i32 4, i32 31), !dbg !43
  %2464 = mul nuw nsw i32 %2452, %.lobit1, !dbg !48
  %2465 = mul nuw nsw i32 %2454, %.lobit1, !dbg !48
  %2466 = mul nuw nsw i32 %2456, %.lobit1, !dbg !48
  %2467 = mul nuw nsw i32 %2458, %.lobit1, !dbg !48
  %2468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2464, i32 4, i32 31), !dbg !43
  %2469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2465, i32 4, i32 31), !dbg !43
  %2470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2466, i32 4, i32 31), !dbg !43
  %2471 = add i32 %2470, %2466, !dbg !46
  %2472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2467, i32 4, i32 31), !dbg !43
  %2473 = add i32 %2472, %2467, !dbg !46
  %2474 = insertelement <2 x i32> poison, i32 %2460, i64 0, !dbg !46
  %2475 = insertelement <2 x i32> %2474, i32 %2461, i64 1, !dbg !46
  %2476 = insertelement <2 x i32> poison, i32 %2453, i64 0, !dbg !46
  %2477 = insertelement <2 x i32> %2476, i32 %2455, i64 1, !dbg !46
  %2478 = add <2 x i32> %2475, %2477, !dbg !46
  %2479 = bitcast <2 x i32> %2478 to <2 x float>, !dbg !39
  %2480 = insertelement <2 x i32> poison, i32 %2462, i64 0, !dbg !46
  %2481 = insertelement <2 x i32> %2480, i32 %2463, i64 1, !dbg !46
  %2482 = insertelement <2 x i32> poison, i32 %2457, i64 0, !dbg !46
  %2483 = insertelement <2 x i32> %2482, i32 %2459, i64 1, !dbg !46
  %2484 = add <2 x i32> %2481, %2483, !dbg !46
  %2485 = bitcast <2 x i32> %2484 to <2 x float>, !dbg !39
  %2486 = insertelement <2 x i32> poison, i32 %2468, i64 0, !dbg !46
  %2487 = insertelement <2 x i32> %2486, i32 %2469, i64 1, !dbg !46
  %2488 = insertelement <2 x i32> poison, i32 %2464, i64 0, !dbg !46
  %2489 = insertelement <2 x i32> %2488, i32 %2465, i64 1, !dbg !46
  %2490 = add <2 x i32> %2487, %2489, !dbg !46
  %2491 = bitcast <2 x i32> %2490 to <2 x float>, !dbg !40
  %2492 = mul nuw nsw i16 %2448, %42, !dbg !49
  %2493 = mul nuw nsw i16 %2449, %42, !dbg !49
  %2494 = mul nuw nsw i16 %2450, %42, !dbg !49
  %2495 = mul nuw nsw i16 %2451, %42, !dbg !49
  %2496 = zext i16 %2492 to i32, !dbg !43
  %2497 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2496, i32 4, i32 31), !dbg !43
  %2498 = zext i16 %2493 to i32, !dbg !43
  %2499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2498, i32 4, i32 31), !dbg !43
  %2500 = trunc i32 %2499 to i16, !dbg !43
  %2501 = add i16 %2493, %2500, !dbg !46
  %2502 = zext i16 %2494 to i32, !dbg !43
  %2503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2502, i32 4, i32 31), !dbg !43
  %2504 = trunc i32 %2503 to i16, !dbg !43
  %2505 = add i16 %2494, %2504, !dbg !46
  %2506 = zext i16 %2495 to i32, !dbg !43
  %2507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2506, i32 4, i32 31), !dbg !43
  %2508 = insertelement <2 x i32> poison, i32 %2497, i64 0, !dbg !43
  %2509 = insertelement <2 x i32> %2508, i32 %2507, i64 1, !dbg !43
  %2510 = trunc <2 x i32> %2509 to <2 x i16>, !dbg !43
  %2511 = insertelement <2 x i16> poison, i16 %2492, i64 0, !dbg !46
  %2512 = insertelement <2 x i16> %2511, i16 %2495, i64 1, !dbg !46
  %2513 = add <2 x i16> %2512, %2510, !dbg !46
  %2514 = mul nuw nsw i16 %2448, %48, !dbg !50
  %2515 = mul nuw nsw i16 %2449, %48, !dbg !50
  %2516 = mul nuw nsw i16 %2450, %48, !dbg !50
  %2517 = mul nuw nsw i16 %2451, %48, !dbg !50
  %2518 = zext i16 %2514 to i32, !dbg !43
  %2519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2518, i32 4, i32 31), !dbg !43
  %2520 = zext i16 %2515 to i32, !dbg !43
  %2521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2520, i32 4, i32 31), !dbg !43
  %2522 = trunc i32 %2521 to i16, !dbg !43
  %2523 = add i16 %2515, %2522, !dbg !46
  %2524 = zext i16 %2516 to i32, !dbg !43
  %2525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2524, i32 4, i32 31), !dbg !43
  %2526 = trunc i32 %2525 to i16, !dbg !43
  %2527 = add i16 %2516, %2526, !dbg !46
  %2528 = zext i16 %2517 to i32, !dbg !43
  %2529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2528, i32 4, i32 31), !dbg !43
  %2530 = insertelement <2 x i32> poison, i32 %2519, i64 0, !dbg !43
  %2531 = insertelement <2 x i32> %2530, i32 %2529, i64 1, !dbg !43
  %2532 = trunc <2 x i32> %2531 to <2 x i16>, !dbg !43
  %2533 = insertelement <2 x i16> poison, i16 %2514, i64 0, !dbg !46
  %2534 = insertelement <2 x i16> %2533, i16 %2517, i64 1, !dbg !46
  %2535 = add <2 x i16> %2534, %2532, !dbg !46
  %2536 = fcmp olt <2 x float> %2479, %2491, !dbg !32
  %2537 = insertelement <2 x i32> poison, i32 %2471, i64 0, !dbg !32
  %2538 = insertelement <2 x i32> %2537, i32 %2473, i64 1, !dbg !32
  %2539 = bitcast <2 x i32> %2538 to <2 x float>, !dbg !32
  %2540 = fcmp olt <2 x float> %2485, %2539, !dbg !32
  %2541 = xor <2 x i32> %2490, %2478, !dbg !33
  %2542 = insertelement <2 x i32> poison, i32 %2471, i64 0, !dbg !33
  %2543 = insertelement <2 x i32> %2542, i32 %2473, i64 1, !dbg !33
  %2544 = xor <2 x i32> %2543, %2484, !dbg !33
  %2545 = select <2 x i1> %2536, <2 x i32> %2541, <2 x i32> zeroinitializer, !dbg !34
  %2546 = select <2 x i1> %2540, <2 x i32> %2544, <2 x i32> zeroinitializer, !dbg !34
  %2547 = xor <2 x i32> %2545, %2438, !dbg !35
  %2548 = xor <2 x i32> %2546, %2439, !dbg !35
  %2549 = insertelement <2 x i16> poison, i16 %2527, i64 0, !dbg !36
  %2550 = insertelement <2 x i16> %2549, i16 %2523, i64 1, !dbg !36
  %2551 = insertelement <2 x i16> poison, i16 %2505, i64 0, !dbg !36
  %2552 = insertelement <2 x i16> %2551, i16 %2501, i64 1, !dbg !36
  %2553 = xor <2 x i16> %2550, %2552, !dbg !36
  %2554 = shufflevector <2 x i1> %2540, <2 x i1> %2536, <2 x i32> <i32 0, i32 3>, !dbg !37
  %2555 = select <2 x i1> %2554, <2 x i16> %2553, <2 x i16> zeroinitializer, !dbg !37
  %2556 = insertelement <2 x i16> poison, i16 %2450, i64 0, !dbg !38
  %2557 = insertelement <2 x i16> %2556, i16 %2449, i64 1, !dbg !38
  %2558 = xor <2 x i16> %2555, %2557, !dbg !38
  %2559 = xor <2 x i16> %2535, %2513, !dbg !36
  %2560 = shufflevector <2 x i1> %2536, <2 x i1> %2540, <2 x i32> <i32 0, i32 3>, !dbg !37
  %2561 = select <2 x i1> %2560, <2 x i16> %2559, <2 x i16> zeroinitializer, !dbg !37
  %2562 = insertelement <2 x i16> poison, i16 %2448, i64 0, !dbg !38
  %2563 = insertelement <2 x i16> %2562, i16 %2451, i64 1, !dbg !38
  %2564 = xor <2 x i16> %2561, %2563, !dbg !38
  %2565 = extractelement <2 x i32> %2547, i64 0, !dbg !48
  %2566 = mul nuw nsw i32 %2565, %35, !dbg !42
  %2567 = extractelement <2 x i32> %2547, i64 1, !dbg !48
  %2568 = mul nuw nsw i32 %2567, %35, !dbg !42
  %2569 = extractelement <2 x i32> %2548, i64 0, !dbg !48
  %2570 = mul nuw nsw i32 %2569, %35, !dbg !42
  %2571 = extractelement <2 x i32> %2548, i64 1, !dbg !48
  %2572 = mul nuw nsw i32 %2571, %35, !dbg !42
  %2573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2566, i32 2, i32 31), !dbg !43
  %2574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2568, i32 2, i32 31), !dbg !43
  %2575 = insertelement <2 x i32> poison, i32 %2573, i64 0, !dbg !46
  %2576 = insertelement <2 x i32> %2575, i32 %2574, i64 1, !dbg !46
  %2577 = insertelement <2 x i32> poison, i32 %2566, i64 0, !dbg !46
  %2578 = insertelement <2 x i32> %2577, i32 %2568, i64 1, !dbg !46
  %2579 = add <2 x i32> %2576, %2578, !dbg !46
  %2580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2570, i32 2, i32 31), !dbg !43
  %2581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2572, i32 2, i32 31), !dbg !43
  %2582 = insertelement <2 x i32> poison, i32 %2580, i64 0, !dbg !46
  %2583 = insertelement <2 x i32> %2582, i32 %2581, i64 1, !dbg !46
  %2584 = insertelement <2 x i32> poison, i32 %2570, i64 0, !dbg !46
  %2585 = insertelement <2 x i32> %2584, i32 %2572, i64 1, !dbg !46
  %2586 = add <2 x i32> %2583, %2585, !dbg !46
  %2587 = mul nuw nsw i32 %2565, %.lobit, !dbg !48
  %2588 = mul nuw nsw i32 %2567, %.lobit, !dbg !48
  %2589 = mul nuw nsw i32 %2569, %.lobit, !dbg !48
  %2590 = mul nuw nsw i32 %2571, %.lobit, !dbg !48
  %2591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2587, i32 2, i32 31), !dbg !43
  %2592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2588, i32 2, i32 31), !dbg !43
  %2593 = insertelement <2 x i32> poison, i32 %2591, i64 0, !dbg !46
  %2594 = insertelement <2 x i32> %2593, i32 %2592, i64 1, !dbg !46
  %2595 = insertelement <2 x i32> poison, i32 %2587, i64 0, !dbg !46
  %2596 = insertelement <2 x i32> %2595, i32 %2588, i64 1, !dbg !46
  %2597 = add <2 x i32> %2594, %2596, !dbg !46
  %2598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2589, i32 2, i32 31), !dbg !43
  %2599 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2590, i32 2, i32 31), !dbg !43
  %2600 = insertelement <2 x i32> poison, i32 %2598, i64 0, !dbg !46
  %2601 = insertelement <2 x i32> %2600, i32 %2599, i64 1, !dbg !46
  %2602 = insertelement <2 x i32> poison, i32 %2589, i64 0, !dbg !46
  %2603 = insertelement <2 x i32> %2602, i32 %2590, i64 1, !dbg !46
  %2604 = add <2 x i32> %2601, %2603, !dbg !46
  %2605 = bitcast <2 x i32> %2579 to <2 x float>, !dbg !39
  %2606 = bitcast <2 x i32> %2586 to <2 x float>, !dbg !39
  %2607 = bitcast <2 x i32> %2597 to <2 x float>, !dbg !40
  %2608 = bitcast <2 x i32> %2604 to <2 x float>, !dbg !40
  %2609 = extractelement <2 x i16> %2564, i64 0, !dbg !50
  %2610 = mul nuw nsw i16 %2609, %41, !dbg !49
  %2611 = extractelement <2 x i16> %2558, i64 1, !dbg !50
  %2612 = mul nuw nsw i16 %2611, %41, !dbg !49
  %2613 = extractelement <2 x i16> %2558, i64 0, !dbg !50
  %2614 = mul nuw nsw i16 %2613, %41, !dbg !49
  %2615 = extractelement <2 x i16> %2564, i64 1, !dbg !50
  %2616 = mul nuw nsw i16 %2615, %41, !dbg !49
  %2617 = zext i16 %2610 to i32, !dbg !43
  %2618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2617, i32 2, i32 31), !dbg !43
  %2619 = zext i16 %2612 to i32, !dbg !43
  %2620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2619, i32 2, i32 31), !dbg !43
  %2621 = trunc i32 %2620 to i16, !dbg !43
  %2622 = add i16 %2612, %2621, !dbg !46
  %2623 = zext i16 %2614 to i32, !dbg !43
  %2624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2623, i32 2, i32 31), !dbg !43
  %2625 = trunc i32 %2624 to i16, !dbg !43
  %2626 = add i16 %2614, %2625, !dbg !46
  %2627 = zext i16 %2616 to i32, !dbg !43
  %2628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2627, i32 2, i32 31), !dbg !43
  %2629 = insertelement <2 x i32> poison, i32 %2618, i64 0, !dbg !43
  %2630 = insertelement <2 x i32> %2629, i32 %2628, i64 1, !dbg !43
  %2631 = trunc <2 x i32> %2630 to <2 x i16>, !dbg !43
  %2632 = insertelement <2 x i16> poison, i16 %2610, i64 0, !dbg !46
  %2633 = insertelement <2 x i16> %2632, i16 %2616, i64 1, !dbg !46
  %2634 = add <2 x i16> %2633, %2631, !dbg !46
  %2635 = mul nuw nsw i16 %2609, %47, !dbg !50
  %2636 = mul nuw nsw i16 %2611, %47, !dbg !50
  %2637 = mul nuw nsw i16 %2613, %47, !dbg !50
  %2638 = mul nuw nsw i16 %2615, %47, !dbg !50
  %2639 = zext i16 %2635 to i32, !dbg !43
  %2640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2639, i32 2, i32 31), !dbg !43
  %2641 = zext i16 %2636 to i32, !dbg !43
  %2642 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2641, i32 2, i32 31), !dbg !43
  %2643 = trunc i32 %2642 to i16, !dbg !43
  %2644 = add i16 %2636, %2643, !dbg !46
  %2645 = zext i16 %2637 to i32, !dbg !43
  %2646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2645, i32 2, i32 31), !dbg !43
  %2647 = trunc i32 %2646 to i16, !dbg !43
  %2648 = add i16 %2637, %2647, !dbg !46
  %2649 = zext i16 %2638 to i32, !dbg !43
  %2650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2649, i32 2, i32 31), !dbg !43
  %2651 = insertelement <2 x i32> poison, i32 %2640, i64 0, !dbg !43
  %2652 = insertelement <2 x i32> %2651, i32 %2650, i64 1, !dbg !43
  %2653 = trunc <2 x i32> %2652 to <2 x i16>, !dbg !43
  %2654 = insertelement <2 x i16> poison, i16 %2635, i64 0, !dbg !46
  %2655 = insertelement <2 x i16> %2654, i16 %2638, i64 1, !dbg !46
  %2656 = add <2 x i16> %2655, %2653, !dbg !46
  %2657 = fcmp olt <2 x float> %2605, %2607, !dbg !32
  %2658 = fcmp olt <2 x float> %2606, %2608, !dbg !32
  %2659 = xor <2 x i32> %2597, %2579, !dbg !33
  %2660 = xor <2 x i32> %2604, %2586, !dbg !33
  %2661 = select <2 x i1> %2657, <2 x i32> %2659, <2 x i32> zeroinitializer, !dbg !34
  %2662 = select <2 x i1> %2658, <2 x i32> %2660, <2 x i32> zeroinitializer, !dbg !34
  %2663 = xor <2 x i32> %2661, %2547, !dbg !35
  %2664 = xor <2 x i32> %2662, %2548, !dbg !35
  %2665 = insertelement <2 x i16> poison, i16 %2648, i64 0, !dbg !36
  %2666 = insertelement <2 x i16> %2665, i16 %2644, i64 1, !dbg !36
  %2667 = insertelement <2 x i16> poison, i16 %2626, i64 0, !dbg !36
  %2668 = insertelement <2 x i16> %2667, i16 %2622, i64 1, !dbg !36
  %2669 = xor <2 x i16> %2666, %2668, !dbg !36
  %2670 = shufflevector <2 x i1> %2658, <2 x i1> %2657, <2 x i32> <i32 0, i32 3>, !dbg !37
  %2671 = select <2 x i1> %2670, <2 x i16> %2669, <2 x i16> zeroinitializer, !dbg !37
  %2672 = xor <2 x i16> %2656, %2634, !dbg !36
  %2673 = shufflevector <2 x i1> %2657, <2 x i1> %2658, <2 x i32> <i32 0, i32 3>, !dbg !37
  %2674 = select <2 x i1> %2673, <2 x i16> %2672, <2 x i16> zeroinitializer, !dbg !37
  %2675 = xor <2 x i16> %2671, %2558, !dbg !38
  %2676 = xor <2 x i16> %2674, %2564, !dbg !38
  %2677 = extractelement <2 x i32> %2663, i64 0, !dbg !48
  %2678 = mul nuw nsw i32 %2677, %34, !dbg !42
  %2679 = extractelement <2 x i32> %2663, i64 1, !dbg !48
  %2680 = mul nuw nsw i32 %2679, %34, !dbg !42
  %2681 = extractelement <2 x i32> %2664, i64 0, !dbg !48
  %2682 = mul nuw nsw i32 %2681, %34, !dbg !42
  %2683 = extractelement <2 x i32> %2664, i64 1, !dbg !48
  %2684 = mul nuw nsw i32 %2683, %34, !dbg !42
  %2685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2678, i32 1, i32 31), !dbg !43
  %2686 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2680, i32 1, i32 31), !dbg !43
  %2687 = insertelement <2 x i32> poison, i32 %2685, i64 0, !dbg !46
  %2688 = insertelement <2 x i32> %2687, i32 %2686, i64 1, !dbg !46
  %2689 = insertelement <2 x i32> poison, i32 %2678, i64 0, !dbg !46
  %2690 = insertelement <2 x i32> %2689, i32 %2680, i64 1, !dbg !46
  %2691 = add <2 x i32> %2688, %2690, !dbg !46
  %2692 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2682, i32 1, i32 31), !dbg !43
  %2693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2684, i32 1, i32 31), !dbg !43
  %2694 = insertelement <2 x i32> poison, i32 %2692, i64 0, !dbg !46
  %2695 = insertelement <2 x i32> %2694, i32 %2693, i64 1, !dbg !46
  %2696 = insertelement <2 x i32> poison, i32 %2682, i64 0, !dbg !46
  %2697 = insertelement <2 x i32> %2696, i32 %2684, i64 1, !dbg !46
  %2698 = add <2 x i32> %2695, %2697, !dbg !46
  %2699 = mul nuw nsw i32 %2677, %10, !dbg !48
  %2700 = mul nuw nsw i32 %2679, %10, !dbg !48
  %2701 = mul nuw nsw i32 %2681, %10, !dbg !48
  %2702 = mul nuw nsw i32 %2683, %10, !dbg !48
  %2703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2699, i32 1, i32 31), !dbg !43
  %2704 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2700, i32 1, i32 31), !dbg !43
  %2705 = insertelement <2 x i32> poison, i32 %2703, i64 0, !dbg !46
  %2706 = insertelement <2 x i32> %2705, i32 %2704, i64 1, !dbg !46
  %2707 = insertelement <2 x i32> poison, i32 %2699, i64 0, !dbg !46
  %2708 = insertelement <2 x i32> %2707, i32 %2700, i64 1, !dbg !46
  %2709 = add <2 x i32> %2706, %2708, !dbg !46
  %2710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2701, i32 1, i32 31), !dbg !43
  %2711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2702, i32 1, i32 31), !dbg !43
  %2712 = insertelement <2 x i32> poison, i32 %2710, i64 0, !dbg !46
  %2713 = insertelement <2 x i32> %2712, i32 %2711, i64 1, !dbg !46
  %2714 = insertelement <2 x i32> poison, i32 %2701, i64 0, !dbg !46
  %2715 = insertelement <2 x i32> %2714, i32 %2702, i64 1, !dbg !46
  %2716 = add <2 x i32> %2713, %2715, !dbg !46
  %2717 = bitcast <2 x i32> %2691 to <2 x float>, !dbg !39
  %2718 = bitcast <2 x i32> %2698 to <2 x float>, !dbg !39
  %2719 = bitcast <2 x i32> %2709 to <2 x float>, !dbg !40
  %2720 = bitcast <2 x i32> %2716 to <2 x float>, !dbg !40
  %2721 = mul nuw nsw <2 x i16> %2675, %461, !dbg !49
  %2722 = mul nuw nsw <2 x i16> %2676, %461, !dbg !49
  %2723 = extractelement <2 x i16> %2722, i64 0, !dbg !43
  %2724 = zext i16 %2723 to i32, !dbg !43
  %2725 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2724, i32 1, i32 31), !dbg !43
  %2726 = extractelement <2 x i16> %2721, i64 1, !dbg !43
  %2727 = zext i16 %2726 to i32, !dbg !43
  %2728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2727, i32 1, i32 31), !dbg !43
  %2729 = extractelement <2 x i16> %2721, i64 0, !dbg !43
  %2730 = zext i16 %2729 to i32, !dbg !43
  %2731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2730, i32 1, i32 31), !dbg !43
  %2732 = trunc i32 %2731 to i16, !dbg !43
  %2733 = insertelement <2 x i16> poison, i16 %2732, i64 0, !dbg !43
  %2734 = trunc i32 %2728 to i16, !dbg !43
  %2735 = insertelement <2 x i16> %2733, i16 %2734, i64 1, !dbg !43
  %2736 = add <2 x i16> %2721, %2735, !dbg !46
  %2737 = extractelement <2 x i16> %2722, i64 1, !dbg !43
  %2738 = zext i16 %2737 to i32, !dbg !43
  %2739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2738, i32 1, i32 31), !dbg !43
  %2740 = trunc i32 %2725 to i16, !dbg !43
  %2741 = insertelement <2 x i16> poison, i16 %2740, i64 0, !dbg !43
  %2742 = trunc i32 %2739 to i16, !dbg !43
  %2743 = insertelement <2 x i16> %2741, i16 %2742, i64 1, !dbg !43
  %2744 = add <2 x i16> %2722, %2743, !dbg !46
  %2745 = mul nuw nsw <2 x i16> %2675, %487, !dbg !50
  %2746 = mul nuw nsw <2 x i16> %2676, %487, !dbg !50
  %2747 = extractelement <2 x i16> %2746, i64 0, !dbg !43
  %2748 = zext i16 %2747 to i32, !dbg !43
  %2749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2748, i32 1, i32 31), !dbg !43
  %2750 = extractelement <2 x i16> %2745, i64 1, !dbg !43
  %2751 = zext i16 %2750 to i32, !dbg !43
  %2752 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2751, i32 1, i32 31), !dbg !43
  %2753 = extractelement <2 x i16> %2745, i64 0, !dbg !43
  %2754 = zext i16 %2753 to i32, !dbg !43
  %2755 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2754, i32 1, i32 31), !dbg !43
  %2756 = insertelement <2 x i32> poison, i32 %2755, i64 0, !dbg !43
  %2757 = insertelement <2 x i32> %2756, i32 %2752, i64 1, !dbg !43
  %2758 = trunc <2 x i32> %2757 to <2 x i16>, !dbg !43
  %2759 = add <2 x i16> %2745, %2758, !dbg !46
  %2760 = extractelement <2 x i16> %2746, i64 1, !dbg !43
  %2761 = zext i16 %2760 to i32, !dbg !43
  %2762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2761, i32 1, i32 31), !dbg !43
  %2763 = insertelement <2 x i32> poison, i32 %2749, i64 0, !dbg !43
  %2764 = insertelement <2 x i32> %2763, i32 %2762, i64 1, !dbg !43
  %2765 = trunc <2 x i32> %2764 to <2 x i16>, !dbg !43
  %2766 = add <2 x i16> %2746, %2765, !dbg !46
  %2767 = fcmp olt <2 x float> %2717, %2719, !dbg !32
  %2768 = fcmp olt <2 x float> %2718, %2720, !dbg !32
  %2769 = xor <2 x i32> %2709, %2691, !dbg !33
  %2770 = xor <2 x i32> %2716, %2698, !dbg !33
  %2771 = select <2 x i1> %2767, <2 x i32> %2769, <2 x i32> zeroinitializer, !dbg !34
  %2772 = select <2 x i1> %2768, <2 x i32> %2770, <2 x i32> zeroinitializer, !dbg !34
  %2773 = xor <2 x i32> %2771, %2663, !dbg !35
  %2774 = xor <2 x i32> %2772, %2664, !dbg !35
  %2775 = xor <2 x i16> %2759, %2736, !dbg !36
  %2776 = xor <2 x i16> %2766, %2744, !dbg !36
  %2777 = shufflevector <2 x i1> %2768, <2 x i1> %2767, <2 x i32> <i32 0, i32 3>, !dbg !37
  %2778 = select <2 x i1> %2777, <2 x i16> %2775, <2 x i16> zeroinitializer, !dbg !37
  %2779 = shufflevector <2 x i1> %2767, <2 x i1> %2768, <2 x i32> <i32 0, i32 3>, !dbg !37
  %2780 = select <2 x i1> %2779, <2 x i16> %2776, <2 x i16> zeroinitializer, !dbg !37
  %2781 = xor <2 x i16> %2778, %2675, !dbg !38
  %2782 = xor <2 x i16> %2780, %2676, !dbg !38
  %2783 = bitcast <2 x i32> %2773 to <2 x float>, !dbg !39
  %2784 = bitcast <2 x i32> %2774 to <2 x float>, !dbg !40
  %2785 = fcmp olt <2 x float> %2783, %2784, !dbg !32
  %2786 = xor <2 x i16> %2782, %2781, !dbg !36
  %2787 = select <2 x i1> %2785, <2 x i16> %2786, <2 x i16> zeroinitializer, !dbg !37
  %2788 = shufflevector <2 x i16> %2782, <2 x i16> %2781, <2 x i32> <i32 0, i32 3>, !dbg !38
  %2789 = xor <2 x i16> %2787, %2788, !dbg !38
  %2790 = xor <2 x i32> %2774, %2773, !dbg !33
  %2791 = select <2 x i1> %2785, <2 x i32> %2790, <2 x i32> zeroinitializer, !dbg !34
  %2792 = xor <2 x i32> %2791, %2774, !dbg !35
  %2793 = xor <2 x i32> %2791, %2773, !dbg !35
  %2794 = bitcast <2 x i32> %2793 to <2 x float>, !dbg !39
  %2795 = bitcast <2 x i32> %2792 to <2 x float>, !dbg !39
  %shift96 = shufflevector <2 x float> %2794, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %2796 = fcmp ogt <2 x float> %shift96, %2794, !dbg !32
  %2797 = extractelement <2 x i1> %2796, i64 0, !dbg !32
  %shift97 = shufflevector <2 x float> %2795, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %2798 = fcmp ogt <2 x float> %shift97, %2795, !dbg !32
  %2799 = extractelement <2 x i1> %2798, i64 0, !dbg !32
  %shift98 = shufflevector <2 x i16> %2789, <2 x i16> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %2800 = xor <2 x i16> %shift98, %2789, !dbg !36
  %2801 = extractelement <2 x i16> %2800, i64 0, !dbg !36
  %2802 = select i1 %2797, i16 %2801, i16 0, !dbg !37
  %2803 = insertelement <2 x i16> poison, i16 %2802, i64 0, !dbg !38
  %2804 = shufflevector <2 x i16> %2803, <2 x i16> poison, <2 x i32> zeroinitializer, !dbg !38
  %2805 = xor <2 x i16> %2804, %2789, !dbg !38
  %2806 = sext <2 x i16> %2805 to <2 x i32>, !dbg !51
  %2807 = add nsw <2 x i32> %2806, splat (i32 256), !dbg !52
  %2808 = icmp slt <2 x i16> %2805, zeroinitializer, !dbg !53
  %2809 = select <2 x i1> %2808, <2 x i32> %2807, <2 x i32> %2806, !dbg !54
  %2810 = shufflevector <2 x i16> %2781, <2 x i16> %2782, <2 x i32> <i32 0, i32 3>, !dbg !38
  %2811 = xor <2 x i16> %2787, %2810, !dbg !38
  %shift99 = shufflevector <2 x i16> %2811, <2 x i16> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %2812 = xor <2 x i16> %shift99, %2811, !dbg !36
  %2813 = extractelement <2 x i16> %2812, i64 0, !dbg !36
  %2814 = select i1 %2799, i16 %2813, i16 0, !dbg !37
  %2815 = insertelement <2 x i16> poison, i16 %2814, i64 0, !dbg !38
  %2816 = shufflevector <2 x i16> %2815, <2 x i16> poison, <2 x i32> zeroinitializer, !dbg !38
  %2817 = xor <2 x i16> %2816, %2811, !dbg !38
  %2818 = sext <2 x i16> %2817 to <2 x i32>, !dbg !51
  %2819 = add nsw <2 x i32> %2818, splat (i32 256), !dbg !52
  %2820 = icmp slt <2 x i16> %2817, zeroinitializer, !dbg !53
  %2821 = select <2 x i1> %2820, <2 x i32> %2819, <2 x i32> %2818, !dbg !54
  %2822 = shufflevector <2 x i32> %2809, <2 x i32> %2821, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !55
  %2823 = sext <4 x i32> %2822 to <4 x i64>, !dbg !55
  %2824 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %2823), !dbg !55
  %.not88 = icmp ult i64 %2824, 256, !dbg !55
  br i1 %.not88, label %2826, label %2825, !dbg !55

2825:                                             ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 54, ptr nonnull @assertFunc_0, i64 1), !dbg !55
  unreachable, !dbg !55

2826:                                             ; preds = %7
  %2827 = extractelement <2 x i32> %2792, i64 0, !dbg !33
  %2828 = extractelement <2 x i32> %2792, i64 1, !dbg !33
  %2829 = xor i32 %2828, %2827, !dbg !33
  %2830 = select i1 %2799, i32 %2829, i32 0, !dbg !34
  %2831 = xor i32 %2830, %2828, !dbg !35
  %2832 = xor i32 %2830, %2827, !dbg !35
  %2833 = extractelement <2 x i32> %2793, i64 0, !dbg !33
  %2834 = extractelement <2 x i32> %2793, i64 1, !dbg !33
  %2835 = xor i32 %2834, %2833, !dbg !33
  %2836 = select i1 %2797, i32 %2835, i32 0, !dbg !34
  %2837 = xor i32 %2836, %2834, !dbg !35
  %2838 = xor i32 %2836, %2833, !dbg !35
  %2839 = and i32 %8, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %2840 = extractelement <2 x i32> %2809, i64 0, !dbg !56
  %2841 = sext i32 %2840 to i64, !dbg !56
  %2842 = getelementptr float, ptr addrspace(1) %1, i64 %2841, !dbg !56
  %2843 = extractelement <2 x i32> %2809, i64 1, !dbg !56
  %2844 = sext i32 %2843 to i64, !dbg !56
  %2845 = getelementptr float, ptr addrspace(1) %1, i64 %2844, !dbg !56
  %2846 = extractelement <2 x i32> %2821, i64 0, !dbg !56
  %2847 = sext i32 %2846 to i64, !dbg !56
  %2848 = getelementptr float, ptr addrspace(1) %1, i64 %2847, !dbg !56
  %2849 = extractelement <2 x i32> %2821, i64 1, !dbg !56
  %2850 = sext i32 %2849 to i64, !dbg !56
  %2851 = getelementptr float, ptr addrspace(1) %1, i64 %2850, !dbg !56
  %2852 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2842, i1 true) #5, !dbg !57
  %2853 = bitcast i32 %2852 to float, !dbg !57
  %2854 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2845, i1 true) #5, !dbg !57
  %2855 = bitcast i32 %2854 to float, !dbg !57
  %2856 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2848, i1 true) #5, !dbg !57
  %2857 = bitcast i32 %2856 to float, !dbg !57
  %2858 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2851, i1 true) #5, !dbg !57
  %2859 = bitcast i32 %2858 to float, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %2860 = fadd float %2853, %2855, !dbg !61
  %2861 = fadd float %2860, %2857, !dbg !61
  %2862 = fadd float %2861, %2859, !dbg !61
  %2863 = bitcast float %2862 to i32, !dbg !58
  %2864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2863, i32 16, i32 31), !dbg !58
  %2865 = bitcast i32 %2864 to float, !dbg !58
  %2866 = fadd float %2862, %2865, !dbg !61
  %2867 = bitcast float %2866 to i32, !dbg !58
  %2868 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2867, i32 8, i32 31), !dbg !58
  %2869 = bitcast i32 %2868 to float, !dbg !58
  %2870 = fadd float %2866, %2869, !dbg !61
  %2871 = bitcast float %2870 to i32, !dbg !58
  %2872 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2871, i32 4, i32 31), !dbg !58
  %2873 = bitcast i32 %2872 to float, !dbg !58
  %2874 = fadd float %2870, %2873, !dbg !61
  %2875 = bitcast float %2874 to i32, !dbg !58
  %2876 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2875, i32 2, i32 31), !dbg !58
  %2877 = bitcast i32 %2876 to float, !dbg !58
  %2878 = fadd float %2874, %2877, !dbg !61
  %2879 = bitcast float %2878 to i32, !dbg !58
  %2880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2879, i32 1, i32 31), !dbg !58
  %2881 = bitcast i32 %2880 to float, !dbg !58
  %2882 = fadd float %2878, %2881, !dbg !61
  %2883 = icmp eq i32 %2839, 0, !dbg !58
  %2884 = getelementptr float, ptr addrspace(3) @global_smem, i32 %.lobit4, !dbg !58
  %2885 = bitcast float %2882 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2884, <1 x i32> %2885, i1 %2883) #5, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %2886 = icmp slt i32 %8, 2, !dbg !58
  %2887 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %2052, i1 %2886) #5, !dbg !58
  %2888 = bitcast i32 %2887 to float, !dbg !58
  %2889 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2887, i32 1, i32 31), !dbg !58
  %2890 = bitcast i32 %2889 to float, !dbg !58
  %2891 = fadd float %2888, %2890, !dbg !61
  %2892 = and i1 %2886, %2056, !dbg !58
  %2893 = bitcast float %2891 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2052, <1 x i32> %2893, i1 %2892) #5, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %2894 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !58
  %2895 = fadd float %2894, 0.000000e+00, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %2896 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2863, i32 1, i32 0), !dbg !65
  %2897 = bitcast i32 %2896 to float, !dbg !65
  %2898 = fadd float %2862, %2897, !dbg !66
  %2899 = select i1 %2883, float %2862, float %2898, !dbg !65
  %2900 = bitcast float %2899 to i32, !dbg !65
  %2901 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2900, i32 2, i32 0), !dbg !65
  %2902 = bitcast i32 %2901 to float, !dbg !65
  %2903 = icmp samesign ugt i32 %2839, 1, !dbg !65
  %2904 = fadd float %2899, %2902, !dbg !66
  %2905 = select i1 %2903, float %2904, float %2899, !dbg !65
  %2906 = bitcast float %2905 to i32, !dbg !65
  %2907 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2906, i32 4, i32 0), !dbg !65
  %2908 = bitcast i32 %2907 to float, !dbg !65
  %2909 = icmp samesign ugt i32 %2839, 3, !dbg !65
  %2910 = fadd float %2905, %2908, !dbg !66
  %2911 = select i1 %2909, float %2910, float %2905, !dbg !65
  %2912 = bitcast float %2911 to i32, !dbg !65
  %2913 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2912, i32 8, i32 0), !dbg !65
  %2914 = bitcast i32 %2913 to float, !dbg !65
  %2915 = icmp samesign ugt i32 %2839, 7, !dbg !65
  %2916 = fadd float %2911, %2914, !dbg !66
  %2917 = select i1 %2915, float %2916, float %2911, !dbg !65
  %2918 = bitcast float %2917 to i32, !dbg !65
  %2919 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2918, i32 16, i32 0), !dbg !65
  %2920 = bitcast i32 %2919 to float, !dbg !65
  %2921 = icmp samesign ugt i32 %2839, 15, !dbg !65
  %2922 = fadd float %2917, %2920, !dbg !66
  %2923 = select i1 %2921, float %2922, float %2917, !dbg !65
  %2924 = icmp eq i32 %2839, 31, !dbg !65
  %2925 = bitcast float %2923 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2884, <1 x i32> %2925, i1 %2924) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %.not91 = icmp eq i32 %.lobit4, 0, !dbg !65
  %2926 = or i32 %.lobit4, %2839, !dbg !65
  %.not90 = icmp eq i32 %2926, 0, !dbg !65
  %2927 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !65
  %2928 = fadd float %2927, %2923, !dbg !66
  %2929 = select i1 %.not91, float %2923, float %2928, !dbg !65
  %2930 = bitcast float %2929 to i32, !dbg !65
  %2931 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2930, i32 1, i32 0), !dbg !65
  %2932 = bitcast i32 %2931 to float, !dbg !65
  %2933 = select i1 %2883, float %2927, float %2932, !dbg !65
  %2934 = fadd float %2861, %2933, !dbg !66
  %2935 = select i1 %.not90, float %2861, float %2934, !dbg !65
  %2936 = fadd float %2860, %2933, !dbg !66
  %2937 = select i1 %.not90, float %2860, float %2936, !dbg !65
  %2938 = fadd float %2933, %2853, !dbg !66
  %2939 = fsub float 1.000000e+00, %2853, !dbg !68
  %2940 = fsub float 1.000000e+00, %2855, !dbg !68
  %2941 = fsub float 1.000000e+00, %2857, !dbg !68
  %2942 = fsub float 1.000000e+00, %2859, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %2943 = fadd float %2939, %2940, !dbg !70
  %2944 = fadd float %2943, %2941, !dbg !70
  %2945 = fadd float %2944, %2942, !dbg !70
  %2946 = bitcast float %2945 to i32, !dbg !69
  %2947 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2946, i32 1, i32 0), !dbg !69
  %2948 = bitcast i32 %2947 to float, !dbg !69
  %2949 = fadd float %2945, %2948, !dbg !70
  %2950 = select i1 %2883, float %2945, float %2949, !dbg !69
  %2951 = bitcast float %2950 to i32, !dbg !69
  %2952 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2951, i32 2, i32 0), !dbg !69
  %2953 = bitcast i32 %2952 to float, !dbg !69
  %2954 = fadd float %2950, %2953, !dbg !70
  %2955 = select i1 %2903, float %2954, float %2950, !dbg !69
  %2956 = bitcast float %2955 to i32, !dbg !69
  %2957 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2956, i32 4, i32 0), !dbg !69
  %2958 = bitcast i32 %2957 to float, !dbg !69
  %2959 = fadd float %2955, %2958, !dbg !70
  %2960 = select i1 %2909, float %2959, float %2955, !dbg !69
  %2961 = bitcast float %2960 to i32, !dbg !69
  %2962 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2961, i32 8, i32 0), !dbg !69
  %2963 = bitcast i32 %2962 to float, !dbg !69
  %2964 = fadd float %2960, %2963, !dbg !70
  %2965 = select i1 %2915, float %2964, float %2960, !dbg !69
  %2966 = bitcast float %2965 to i32, !dbg !69
  %2967 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2966, i32 16, i32 0), !dbg !69
  %2968 = bitcast i32 %2967 to float, !dbg !69
  %2969 = fadd float %2965, %2968, !dbg !70
  %2970 = select i1 %2921, float %2969, float %2965, !dbg !69
  %2971 = bitcast float %2970 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2884, <1 x i32> %2971, i1 %2924) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %2972 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !69
  %2973 = fadd float %2972, %2970, !dbg !70
  %2974 = select i1 %.not91, float %2970, float %2973, !dbg !69
  %2975 = bitcast float %2974 to i32, !dbg !69
  %2976 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %2975, i32 1, i32 0), !dbg !69
  %2977 = bitcast i32 %2976 to float, !dbg !69
  %2978 = select i1 %2883, float %2972, float %2977, !dbg !69
  %2979 = fadd float %2944, %2978, !dbg !70
  %2980 = select i1 %.not90, float %2944, float %2979, !dbg !69
  %2981 = fadd float %2943, %2978, !dbg !70
  %2982 = select i1 %.not90, float %2943, float %2981, !dbg !69
  %2983 = fadd float %2939, %2978, !dbg !70
  %2984 = select i1 %.not90, float %2939, float %2983, !dbg !69
  %2985 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2838, i32 %2837, i32 %2832, i32 %2831, ptr addrspace(1) %2985, i1 true) #5, !dbg !72
  %2986 = getelementptr float, ptr addrspace(1) %4, i64 %13, !dbg !73
  %2987 = bitcast float %2938 to i32, !dbg !74
  %2988 = select i1 %.not90, i32 %2852, i32 %2987, !dbg !65
  %2989 = bitcast float %2937 to i32, !dbg !74
  %2990 = bitcast float %2935 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2988, i32 %2989, i32 %2990, i32 %2930, ptr addrspace(1) %2986, i1 true) #5, !dbg !74
  %2991 = getelementptr float, ptr addrspace(1) %5, i64 %13, !dbg !75
  %2992 = bitcast float %2984 to i32, !dbg !76
  %2993 = bitcast float %2982 to i32, !dbg !76
  %2994 = bitcast float %2980 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2992, i32 %2993, i32 %2994, i32 %2975, ptr addrspace(1) %2991, i1 true) #5, !dbg !76
  %urem = and i32 %8, 63, !dbg !77
  %2995 = icmp eq i32 %urem, 0, !dbg !77
  %2996 = bitcast float %2895 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %2996, ptr addrspace(1) %3, i1 %2995) #5, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbidvvppow55ovsd3ldirnuri4ao4mv2bleubtzbebhqnb6l54gp.py", directory: "inductor_cache/bi")
!4 = !{ptr @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0", linkageName: "triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0", scope: !3, file: !3, line: 24, type: !9, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 32, column: 26, scope: !11)
!13 = !DILocation(line: 36, column: 30, scope: !11)
!14 = !DILocation(line: 36, column: 35, scope: !11)
!15 = !DILocation(line: 37, column: 30, scope: !11)
!16 = !DILocation(line: 37, column: 35, scope: !11)
!17 = !DILocation(line: 45, column: 19, scope: !11)
!18 = !DILocation(line: 575, column: 44, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = distinct !DILexicalBlockFile(scope: !11, file: !20, discriminator: 0)
!22 = !DILocation(line: 48, column: 71, scope: !11)
!23 = !DILocation(line: 505, column: 21, scope: !24, inlinedAt: !22)
!24 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!25 = !DILocation(line: 516, column: 36, scope: !24, inlinedAt: !22)
!26 = !DILocation(line: 519, column: 37, scope: !24, inlinedAt: !22)
!27 = !DILocation(line: 39, column: 18, scope: !11)
!28 = !DILocation(line: 41, column: 18, scope: !11)
!29 = !DILocation(line: 42, column: 18, scope: !11)
!30 = !DILocation(line: 43, column: 18, scope: !11)
!31 = !DILocation(line: 502, column: 14, scope: !24, inlinedAt: !22)
!32 = !DILocation(line: 536, column: 22, scope: !24, inlinedAt: !22)
!33 = !DILocation(line: 548, column: 38, scope: !24, inlinedAt: !22)
!34 = !DILocation(line: 548, column: 46, scope: !24, inlinedAt: !22)
!35 = !DILocation(line: 548, column: 15, scope: !24, inlinedAt: !22)
!36 = !DILocation(line: 549, column: 48, scope: !24, inlinedAt: !22)
!37 = !DILocation(line: 549, column: 59, scope: !24, inlinedAt: !22)
!38 = !DILocation(line: 549, column: 22, scope: !24, inlinedAt: !22)
!39 = !DILocation(line: 510, column: 20, scope: !24, inlinedAt: !22)
!40 = !DILocation(line: 511, column: 22, scope: !24, inlinedAt: !22)
!41 = !DILocation(line: 547, column: 28, scope: !24, inlinedAt: !22)
!42 = !DILocation(line: 506, column: 40, scope: !24, inlinedAt: !22)
!43 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !22)
!44 = distinct !DILexicalBlockFile(scope: !24, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !22)
!47 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!48 = !DILocation(line: 507, column: 41, scope: !24, inlinedAt: !22)
!49 = !DILocation(line: 516, column: 23, scope: !24, inlinedAt: !22)
!50 = !DILocation(line: 519, column: 23, scope: !24, inlinedAt: !22)
!51 = !DILocation(line: 49, column: 21, scope: !11)
!52 = !DILocation(line: 51, column: 20, scope: !11)
!53 = !DILocation(line: 52, column: 20, scope: !11)
!54 = !DILocation(line: 53, column: 35, scope: !11)
!55 = !DILocation(line: 54, column: 51, scope: !11)
!56 = !DILocation(line: 55, column: 31, scope: !11)
!57 = !DILocation(line: 55, column: 39, scope: !11)
!58 = !DILocation(line: 267, column: 36, scope: !59, inlinedAt: !60)
!59 = distinct !DILexicalBlockFile(scope: !11, file: !45, discriminator: 0)
!60 = !DILocation(line: 57, column: 59, scope: !11)
!61 = !DILocation(line: 256, column: 15, scope: !62, inlinedAt: !60)
!62 = distinct !DILexicalBlockFile(scope: !59, file: !45, discriminator: 0)
!63 = !DILocation(line: 73, column: 15, scope: !21, inlinedAt: !64)
!64 = !DILocation(line: 57, column: 45, scope: !11)
!65 = !DILocation(line: 60, column: 46, scope: !11)
!66 = !DILocation(line: 13, column: 20, scope: !67, inlinedAt: !65)
!67 = distinct !DILexicalBlockFile(scope: !11, file: !3, discriminator: 0)
!68 = !DILocation(line: 61, column: 19, scope: !11)
!69 = !DILocation(line: 64, column: 46, scope: !11)
!70 = !DILocation(line: 13, column: 20, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 65, column: 25, scope: !11)
!72 = !DILocation(line: 65, column: 64, scope: !11)
!73 = !DILocation(line: 66, column: 25, scope: !11)
!74 = !DILocation(line: 66, column: 64, scope: !11)
!75 = !DILocation(line: 67, column: 25, scope: !11)
!76 = !DILocation(line: 67, column: 64, scope: !11)
!77 = !DILocation(line: 68, column: 60, scope: !11)
!78 = !DILocation(line: 68, column: 4, scope: !11)
