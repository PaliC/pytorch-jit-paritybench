; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = lshr i32 %12, 3, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 5, !dbg !15
  %21 = or disjoint i32 %20, %16, !dbg !16
  %22 = or disjoint i32 %20, %17, !dbg !16
  %23 = icmp slt i32 %21, 64, !dbg !17
  %24 = icmp slt i32 %22, 64, !dbg !17
  %.frozen = freeze i32 %18, !dbg !18
  %25 = sdiv i32 %.frozen, 256, !dbg !18
  %26 = mul i32 %25, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %21, 8, !dbg !20
  %28 = shl i32 %22, 8, !dbg !20
  %29 = shl i32 %25, 14, !dbg !21
  %30 = add i32 %29, %.decomposed, !dbg !22
  %31 = add i32 %30, %27, !dbg !23
  %32 = add i32 %30, %28, !dbg !23
  %33 = sext i32 %31 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = sext i32 %32 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %23) #4, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %24) #4, !dbg !25
  %39 = sext i32 %.decomposed to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !28
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !29
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !29
  %48 = bitcast i32 %44 to float, !dbg !29
  %49 = bitcast i32 %45 to float, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !30
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !32
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #4, !dbg !33
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !34
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %60, 0, !dbg !35
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %61, 0, !dbg !35
  br i1 %.not.i, label %67, label %62, !dbg !35

62:                                               ; preds = %9
  br i1 %.not1.i, label %65, label %63, !dbg !35

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

67:                                               ; preds = %9
  br i1 %.not1.i, label %70, label %68, !dbg !35

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !35
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i8 = icmp eq i32 %72, 0, !dbg !35
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i11 = icmp eq i32 %73, 0, !dbg !35
  br i1 %.not.i8, label %79, label %74, !dbg !35

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %77, label %75, !dbg !35

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %82, label %80, !dbg !35

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

__nv_sqrtf.exit12:                                ; preds = %75, %77, %80, %82
  %.0.i10 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !35
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i13 = icmp eq i32 %84, 0, !dbg !35
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i16 = icmp eq i32 %85, 0, !dbg !35
  br i1 %.not.i13, label %91, label %86, !dbg !35

86:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %89, label %87, !dbg !35

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

91:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %94, label %92, !dbg !35

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

__nv_sqrtf.exit17:                                ; preds = %87, %89, %92, %94
  %.0.i15 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i18 = icmp eq i32 %96, 0, !dbg !35
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i21 = icmp eq i32 %97, 0, !dbg !35
  br i1 %.not.i18, label %103, label %98, !dbg !35

98:                                               ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %101, label %99, !dbg !35

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

103:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %106, label %104, !dbg !35

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

__nv_sqrtf.exit22:                                ; preds = %99, %101, %104, %106
  %.0.i20 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !35
  %108 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %110 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %111 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %118 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %120 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !31
  %127 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !31
  %128 = or disjoint i32 %20, %14, !dbg !16
  %129 = icmp slt i32 %128, 64, !dbg !17
  %130 = or disjoint i32 %11, %17, !dbg !13
  %131 = or disjoint i32 %11, %16, !dbg !13
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !36
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !36
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !36
  %136 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !27
  %137 = insertelement <4 x i32> %136, i32 %111, i64 1, !dbg !27
  %138 = insertelement <4 x i32> %137, i32 %113, i64 2, !dbg !27
  %139 = insertelement <4 x i32> %138, i32 %115, i64 3, !dbg !27
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !27
  %141 = shufflevector <4 x float> %140, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %142 = insertelement <8 x i32> poison, i32 %108, i64 0, !dbg !25
  %143 = insertelement <8 x i32> %142, i32 %110, i64 1, !dbg !25
  %144 = insertelement <8 x i32> %143, i32 %112, i64 2, !dbg !25
  %145 = insertelement <8 x i32> %144, i32 %114, i64 3, !dbg !25
  %146 = insertelement <8 x i32> %145, i32 %116, i64 4, !dbg !25
  %147 = insertelement <8 x i32> %146, i32 %117, i64 5, !dbg !25
  %148 = insertelement <8 x i32> %147, i32 %118, i64 6, !dbg !25
  %149 = insertelement <8 x i32> %148, i32 %119, i64 7, !dbg !25
  %150 = bitcast <8 x i32> %149 to <8 x float>, !dbg !25
  %151 = fsub <8 x float> %150, %141, !dbg !37
  %152 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !33
  %153 = insertelement <4 x i32> %152, i32 %121, i64 1, !dbg !33
  %154 = insertelement <4 x i32> %153, i32 %122, i64 2, !dbg !33
  %155 = insertelement <4 x i32> %154, i32 %123, i64 3, !dbg !33
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !33
  %157 = shufflevector <4 x float> %156, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %158 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !31
  %159 = insertelement <4 x i32> %158, i32 %125, i64 1, !dbg !31
  %160 = insertelement <4 x i32> %159, i32 %126, i64 2, !dbg !31
  %161 = insertelement <4 x i32> %160, i32 %127, i64 3, !dbg !31
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !31
  %163 = shufflevector <4 x float> %162, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %164 = insertelement <8 x float> poison, float %135, i64 0, !dbg !38
  %165 = insertelement <8 x float> %164, float %134, i64 1, !dbg !38
  %166 = insertelement <8 x float> %165, float %133, i64 2, !dbg !38
  %167 = insertelement <8 x float> %166, float %132, i64 3, !dbg !38
  %168 = shufflevector <8 x float> %167, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %169 = fmul <8 x float> %151, %168, !dbg !38
  %170 = fmul <8 x float> %169, %163, !dbg !39
  %171 = fadd <8 x float> %170, %157, !dbg !40
  %172 = fcmp ole <8 x float> %171, zeroinitializer, !dbg !41
  %173 = select <8 x i1> %172, <8 x float> zeroinitializer, <8 x float> %171, !dbg !41
  %174 = fcmp olt <8 x float> %173, splat (float 6.000000e+00), !dbg !45
  %175 = extractelement <8 x float> %173, i64 7, !dbg !47
  %176 = fcmp uno float %175, 0.000000e+00, !dbg !47
  %177 = extractelement <8 x float> %173, i64 6, !dbg !47
  %178 = fcmp uno float %177, 0.000000e+00, !dbg !47
  %179 = extractelement <8 x float> %173, i64 5, !dbg !47
  %180 = fcmp uno float %179, 0.000000e+00, !dbg !47
  %181 = extractelement <8 x float> %173, i64 4, !dbg !47
  %182 = fcmp uno float %181, 0.000000e+00, !dbg !47
  %183 = extractelement <8 x float> %173, i64 3, !dbg !47
  %184 = fcmp uno float %183, 0.000000e+00, !dbg !47
  %185 = extractelement <8 x float> %173, i64 2, !dbg !47
  %186 = fcmp uno float %185, 0.000000e+00, !dbg !47
  %187 = extractelement <8 x float> %173, i64 1, !dbg !47
  %188 = fcmp uno float %187, 0.000000e+00, !dbg !47
  %189 = extractelement <8 x float> %173, i64 0, !dbg !47
  %190 = fcmp uno float %189, 0.000000e+00, !dbg !47
  %191 = extractelement <8 x i1> %174, i64 7, !dbg !48
  %192 = or i1 %191, %176, !dbg !48
  %193 = extractelement <8 x i1> %174, i64 6, !dbg !48
  %194 = or i1 %193, %178, !dbg !48
  %195 = extractelement <8 x i1> %174, i64 5, !dbg !48
  %196 = or i1 %195, %180, !dbg !48
  %197 = extractelement <8 x i1> %174, i64 4, !dbg !48
  %198 = or i1 %197, %182, !dbg !48
  %199 = extractelement <8 x i1> %174, i64 3, !dbg !48
  %200 = or i1 %199, %184, !dbg !48
  %201 = extractelement <8 x i1> %174, i64 2, !dbg !48
  %202 = or i1 %201, %186, !dbg !48
  %203 = extractelement <8 x i1> %174, i64 1, !dbg !48
  %204 = or i1 %203, %188, !dbg !48
  %205 = extractelement <8 x i1> %174, i64 0, !dbg !48
  %206 = or i1 %205, %190, !dbg !48
  %207 = select i1 %192, float %175, float 6.000000e+00, !dbg !49
  %208 = select i1 %194, float %177, float 6.000000e+00, !dbg !49
  %209 = select i1 %196, float %179, float 6.000000e+00, !dbg !49
  %210 = select i1 %198, float %181, float 6.000000e+00, !dbg !49
  %211 = select i1 %200, float %183, float 6.000000e+00, !dbg !49
  %212 = select i1 %202, float %185, float 6.000000e+00, !dbg !49
  %213 = select i1 %204, float %187, float 6.000000e+00, !dbg !49
  %214 = select i1 %206, float %189, float 6.000000e+00, !dbg !49
  %215 = shl i32 %131, 6, !dbg !50
  %216 = shl i32 %130, 6, !dbg !50
  %217 = add i32 %128, %215, !dbg !51
  %218 = add i32 %128, %216, !dbg !51
  %219 = sext i32 %217 to i64, !dbg !52
  %220 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !52
  %221 = sext i32 %218 to i64, !dbg !52
  %222 = getelementptr float, ptr addrspace(1) %5, i64 %221, !dbg !52
  %223 = shl i32 %12, 7, !dbg !53
  %224 = and i32 %223, 896, !dbg !53
  %225 = or disjoint i32 %224, %16, !dbg !53
  %226 = and i32 %13, 508, !dbg !53
  %227 = lshr exact i32 %224, 3, !dbg !53
  %228 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %227, !dbg !53
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %225, !dbg !53
  %230 = bitcast float %207 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #4, !dbg !53
  %231 = or disjoint i32 %225, 32, !dbg !53
  %232 = lshr i32 %231, 5, !dbg !53
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !53
  %234 = getelementptr float, ptr addrspace(3) %233, i32 %231, !dbg !53
  %235 = bitcast float %208 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !53
  %236 = or disjoint i32 %225, 64, !dbg !53
  %237 = lshr i32 %236, 5, !dbg !53
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !53
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %236, !dbg !53
  %240 = bitcast float %209 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #4, !dbg !53
  %241 = or disjoint i32 %225, 96, !dbg !53
  %242 = lshr i32 %241, 5, !dbg !53
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !53
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !53
  %245 = bitcast float %210 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !53
  %246 = or disjoint i32 %225, 16, !dbg !53
  %247 = getelementptr float, ptr addrspace(3) %228, i32 %246, !dbg !53
  %248 = bitcast float %211 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !53
  %249 = or disjoint i32 %225, 48, !dbg !53
  %250 = lshr i32 %249, 5, !dbg !53
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %250, !dbg !53
  %252 = getelementptr float, ptr addrspace(3) %251, i32 %249, !dbg !53
  %253 = bitcast float %212 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !53
  %254 = or disjoint i32 %225, 80, !dbg !53
  %255 = lshr i32 %254, 5, !dbg !53
  %256 = getelementptr float, ptr addrspace(3) @global_smem, i32 %255, !dbg !53
  %257 = getelementptr float, ptr addrspace(3) %256, i32 %254, !dbg !53
  %258 = bitcast float %213 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #4, !dbg !53
  %259 = or disjoint i32 %225, 112, !dbg !53
  %260 = lshr i32 %259, 5, !dbg !53
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %260, !dbg !53
  %262 = getelementptr float, ptr addrspace(3) %261, i32 %259, !dbg !53
  %263 = bitcast float %214 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %264 = lshr i32 %226, 5, !dbg !53
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !53
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %226, !dbg !53
  %267 = load i32, ptr addrspace(3) %266, align 4, !dbg !53
  %268 = or disjoint i32 %226, 1, !dbg !53
  %269 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %268, !dbg !53
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !53
  %271 = or disjoint i32 %226, 2, !dbg !53
  %272 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %271, !dbg !53
  %273 = load i32, ptr addrspace(3) %272, align 4, !dbg !53
  %274 = or disjoint i32 %226, 3, !dbg !53
  %275 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %274, !dbg !53
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !53
  %277 = or disjoint i32 %226, 512, !dbg !53
  %278 = lshr i32 %277, 5, !dbg !53
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !53
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !53
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !53
  %282 = or disjoint i32 %226, 513, !dbg !53
  %283 = lshr i32 %282, 5, !dbg !53
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !53
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !53
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !53
  %287 = or disjoint i32 %226, 514, !dbg !53
  %288 = lshr i32 %287, 5, !dbg !53
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !53
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !53
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !53
  %292 = or disjoint i32 %226, 515, !dbg !53
  %293 = lshr i32 %292, 5, !dbg !53
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !53
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !53
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %270, i32 %273, i32 %276, ptr addrspace(1) %220, i1 %129) #4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %286, i32 %291, i32 %296, ptr addrspace(1) %222, i1 %129) #4, !dbg !53
  %297 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !54
  %298 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !54
  %299 = bitcast float %207 to i32, !dbg !55
  %300 = bitcast float %208 to i32, !dbg !55
  %301 = bitcast float %209 to i32, !dbg !55
  %302 = bitcast float %210 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %299, i32 %300, i32 %301, i32 %302, ptr addrspace(1) %297, i1 %23) #4, !dbg !55
  %303 = bitcast float %211 to i32, !dbg !55
  %304 = bitcast float %212 to i32, !dbg !55
  %305 = bitcast float %213 to i32, !dbg !55
  %306 = bitcast float %214 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %303, i32 %304, i32 %305, i32 %306, ptr addrspace(1) %298, i1 %24) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpknmvqg7o7ryzve5e4ilo6o5kibt3mf532coh37zavfxdjwata5.py", directory: "inductor_cache/pk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 110, column: 15, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 112, column: 21, scope: !42, inlinedAt: !46)
!48 = !DILocation(line: 112, column: 16, scope: !42, inlinedAt: !46)
!49 = !DILocation(line: 113, column: 29, scope: !42, inlinedAt: !46)
!50 = !DILocation(line: 52, column: 33, scope: !7)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 52, column: 45, scope: !7)
!54 = !DILocation(line: 53, column: 25, scope: !7)
!55 = !DILocation(line: 53, column: 57, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
