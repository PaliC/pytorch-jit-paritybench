; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_gelu_native_group_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = lshr i32 %13, 2, !dbg !13
  %15 = shl i32 %10, 4, !dbg !14
  %16 = or disjoint i32 %15, %13, !dbg !15
  %17 = sext i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11) #5, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11) #5, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = zext nneg i32 %14 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !23
  %34 = bitcast i32 %33 to float, !dbg !23
  %35 = fadd float %20, %26, !dbg !24
  %36 = fadd float %22, %28, !dbg !24
  %37 = select i1 %11, float %35, float 0.000000e+00, !dbg !25
  %38 = select i1 %11, float %36, float 0.000000e+00, !dbg !25
  %39 = bitcast float %37 to i32, !dbg !26
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 8, i32 31), !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = fadd float %37, %41, !dbg !30
  %43 = bitcast float %42 to i32, !dbg !26
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 4, i32 31), !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = fadd float %42, %45, !dbg !30
  %47 = bitcast float %46 to i32, !dbg !26
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !26
  %49 = bitcast i32 %48 to float, !dbg !26
  %50 = fadd float %46, %49, !dbg !30
  %51 = bitcast float %50 to i32, !dbg !26
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !26
  %53 = bitcast i32 %52 to float, !dbg !26
  %54 = fadd float %50, %53, !dbg !30
  %55 = bitcast float %38 to i32, !dbg !26
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !26
  %57 = bitcast i32 %56 to float, !dbg !26
  %58 = fadd float %38, %57, !dbg !30
  %59 = bitcast float %58 to i32, !dbg !26
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = fadd float %58, %61, !dbg !30
  %63 = bitcast float %62 to i32, !dbg !26
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !26
  %65 = bitcast i32 %64 to float, !dbg !26
  %66 = fadd float %62, %65, !dbg !30
  %67 = bitcast float %66 to i32, !dbg !26
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !26
  %69 = bitcast i32 %68 to float, !dbg !26
  %70 = fadd float %66, %69, !dbg !30
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 1.600000e+01) #5, !dbg !32
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 1.600000e+01) #5, !dbg !32
  %73 = fsub float %35, %71, !dbg !33
  %74 = fsub float %36, %72, !dbg !33
  %75 = fmul float %73, %73, !dbg !34
  %76 = fmul float %74, %74, !dbg !34
  %77 = select i1 %11, float %75, float 0.000000e+00, !dbg !35
  %78 = select i1 %11, float %76, float 0.000000e+00, !dbg !35
  %79 = bitcast float %77 to i32, !dbg !36
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 8, i32 31), !dbg !36
  %81 = bitcast i32 %80 to float, !dbg !36
  %82 = fadd float %77, %81, !dbg !38
  %83 = bitcast float %82 to i32, !dbg !36
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 4, i32 31), !dbg !36
  %85 = bitcast i32 %84 to float, !dbg !36
  %86 = fadd float %82, %85, !dbg !38
  %87 = bitcast float %86 to i32, !dbg !36
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 2, i32 31), !dbg !36
  %89 = bitcast i32 %88 to float, !dbg !36
  %90 = fadd float %86, %89, !dbg !38
  %91 = bitcast float %90 to i32, !dbg !36
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !36
  %93 = bitcast i32 %92 to float, !dbg !36
  %94 = fadd float %90, %93, !dbg !38
  %95 = bitcast float %78 to i32, !dbg !36
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !36
  %97 = bitcast i32 %96 to float, !dbg !36
  %98 = fadd float %78, %97, !dbg !38
  %99 = bitcast float %98 to i32, !dbg !36
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !36
  %101 = bitcast i32 %100 to float, !dbg !36
  %102 = fadd float %98, %101, !dbg !38
  %103 = bitcast float %102 to i32, !dbg !36
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !36
  %105 = bitcast i32 %104 to float, !dbg !36
  %106 = fadd float %102, %105, !dbg !38
  %107 = bitcast float %106 to i32, !dbg !36
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !36
  %109 = bitcast i32 %108 to float, !dbg !36
  %110 = fadd float %106, %109, !dbg !38
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 1.600000e+01) #5, !dbg !39
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 1.600000e+01) #5, !dbg !39
  %113 = fadd float %111, 0x3EE4F8B580000000, !dbg !40
  %114 = fadd float %112, 0x3EE4F8B580000000, !dbg !40
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %115, 0, !dbg !41
  br i1 %.not.i, label %118, label %116, !dbg !41

116:                                              ; preds = %9
  %117 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %113), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

118:                                              ; preds = %9
  %119 = tail call float @llvm.nvvm.rsqrt.approx.f(float %113), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %116, %118
  %.0.i = phi float [ %117, %116 ], [ %119, %118 ], !dbg !41
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i1 = icmp eq i32 %120, 0, !dbg !41
  br i1 %.not.i1, label %123, label %121, !dbg !41

121:                                              ; preds = %__nv_rsqrtf.exit
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %114), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

123:                                              ; preds = %__nv_rsqrtf.exit
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %114), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

__nv_rsqrtf.exit3:                                ; preds = %121, %123
  %.0.i2 = phi float [ %122, %121 ], [ %124, %123 ], !dbg !41
  %125 = fmul float %73, %.0.i, !dbg !42
  %126 = fmul float %125, %31, !dbg !43
  %127 = fadd float %126, %34, !dbg !44
  %128 = fmul float %127, 0x3FE6A09E60000000, !dbg !45
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i4 = icmp eq i32 %129, 0, !dbg !46
  %130 = tail call float @llvm.nvvm.fabs.ftz.f(float %128) #5, !dbg !46
  %131 = tail call float @llvm.nvvm.fabs.f(float %128) #5, !dbg !46
  %.0.i5 = select i1 %.not.i4, float %131, float %130, !dbg !46
  %132 = fcmp oge float %.0.i5, 0x3FF00C1FC0000000, !dbg !46
  br i1 %132, label %__nv_fabsf.exit1.i, label %134, !dbg !46

__nv_fabsf.exit1.i:                               ; preds = %__nv_rsqrtf.exit3
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not1.i = icmp eq i32 %133, 0, !dbg !46
  %.01.i = select i1 %.not1.i, float %131, float %130, !dbg !46
  br label %__internal_fmad.exit.i, !dbg !46

134:                                              ; preds = %__nv_rsqrtf.exit3
  %135 = fmul float %128, %128, !dbg !46
  br label %__internal_fmad.exit.i, !dbg !46

__internal_fmad.exit.i:                           ; preds = %134, %__nv_fabsf.exit1.i
  %136 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %134 ], !dbg !46
  %137 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %134 ], !dbg !46
  %138 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %134 ], !dbg !46
  %139 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %134 ], !dbg !46
  %140 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %134 ], !dbg !46
  %141 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %134 ], !dbg !46
  %142 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %134 ], !dbg !46
  %143 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %135, %134 ], !dbg !46
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not2.i = icmp eq i32 %144, 0, !dbg !46
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %142, float %143, float %141) #5, !dbg !46
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %142, float %143, float %141) #5, !dbg !46
  %.02.i = select i1 %.not2.i, float %146, float %145, !dbg !46
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not3.i = icmp eq i32 %147, 0, !dbg !46
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %143, float %140) #5, !dbg !46
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %143, float %140) #5, !dbg !46
  %.03.i = select i1 %.not3.i, float %149, float %148, !dbg !46
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not4.i = icmp eq i32 %150, 0, !dbg !46
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %143, float %139) #5, !dbg !46
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %143, float %139) #5, !dbg !46
  %.04.i = select i1 %.not4.i, float %152, float %151, !dbg !46
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not5.i = icmp eq i32 %153, 0, !dbg !46
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %143, float %138) #5, !dbg !46
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %143, float %138) #5, !dbg !46
  %.05.i = select i1 %.not5.i, float %155, float %154, !dbg !46
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not6.i = icmp eq i32 %156, 0, !dbg !46
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %143, float %137) #5, !dbg !46
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %143, float %137) #5, !dbg !46
  %.06.i = select i1 %.not6.i, float %158, float %157, !dbg !46
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not7.i = icmp eq i32 %159, 0, !dbg !46
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %143, float %136) #5, !dbg !46
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %143, float %136) #5, !dbg !46
  %.07.i = select i1 %.not7.i, float %161, float %160, !dbg !46
  %162 = fneg float %143, !dbg !46
  %163 = select i1 %132, float %162, float %128, !dbg !46
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not8.i = icmp eq i32 %164, 0, !dbg !46
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %163, float %163) #5, !dbg !46
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %163, float %163) #5, !dbg !46
  %.08.i = select i1 %.not8.i, float %166, float %165, !dbg !46
  br i1 %132, label %167, label %__nv_erff.exit, !dbg !46

167:                                              ; preds = %__internal_fmad.exit.i
  %168 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #5, !dbg !46
  %169 = fsub float 1.000000e+00, %168, !dbg !46
  %170 = bitcast float %169 to i32, !dbg !46
  %171 = bitcast float %128 to i32, !dbg !46
  %172 = and i32 %171, -2147483648, !dbg !46
  %173 = or i32 %172, %170, !dbg !46
  %174 = bitcast i32 %173 to float, !dbg !46
  br label %__nv_erff.exit, !dbg !46

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %167
  %r.0.i = phi float [ %174, %167 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !46
  %175 = fmul float %127, 5.000000e-01, !dbg !47
  %176 = fadd float %r.0.i, 1.000000e+00, !dbg !48
  %177 = fmul float %175, %176, !dbg !49
  %178 = and i32 %12, 48, !dbg !50
  %179 = icmp eq i32 %178, 0, !dbg !50
  %180 = bitcast float %35 to i32, !dbg !50
  %181 = and i1 %179, %11, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %18, i1 %181) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %182 = sext i32 %10 to i64, !dbg !52
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !52
  %urem = and i32 %12, 63, !dbg !53
  %184 = icmp eq i32 %urem, 0, !dbg !53
  %185 = bitcast float %.0.i2 to i32, !dbg !53
  %186 = and i1 %184, %11, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %183, i1 %186) #5, !dbg !53
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !54
  %188 = bitcast float %177 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %187, i1 %181) #5, !dbg !55
  %189 = getelementptr float, ptr addrspace(1) %6, i64 %182, !dbg !56
  %190 = bitcast float %72 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %189, i1 %186) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c56ly42o5crbpbjdwpmlxw5eecxjq2zg5fkedtpqrycuy3alvxq5.py", directory: "inductor_cache/56")
!4 = !{ptr @triton_per_fused_convolution_gelu_native_group_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_gelu_native_group_norm_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_gelu_native_group_norm_1", linkageName: "triton_per_fused_convolution_gelu_native_group_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 40, column: 33, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 41, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 49, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !37)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 28, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 58, column: 20, scope: !7)
!45 = !DILocation(line: 62, column: 20, scope: !7)
!46 = !DILocation(line: 63, column: 26, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 65, column: 20, scope: !7)
!49 = !DILocation(line: 66, column: 20, scope: !7)
!50 = !DILocation(line: 67, column: 47, scope: !7)
!51 = !DILocation(line: 68, column: 4, scope: !7)
!52 = !DILocation(line: 69, column: 28, scope: !7)
!53 = !DILocation(line: 69, column: 40, scope: !7)
!54 = !DILocation(line: 70, column: 28, scope: !7)
!55 = !DILocation(line: 70, column: 48, scope: !7)
!56 = !DILocation(line: 71, column: 25, scope: !7)
!57 = !DILocation(line: 71, column: 37, scope: !7)
!58 = !DILocation(line: 71, column: 4, scope: !7)
