; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_tanh_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 2, !dbg !12
  %15 = and i32 %13, 14, !dbg !12
  %16 = lshr i32 %12, 1, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = or disjoint i32 %11, %15, !dbg !13
  %19 = or disjoint i32 %11, %17, !dbg !13
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = icmp slt i32 %19, 16, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 2, !dbg !16
  %24 = lshr i32 %12, 3, !dbg !17
  %25 = and i32 %24, 3, !dbg !17
  %26 = or disjoint i32 %23, %25, !dbg !18
  %27 = or disjoint i32 %23, %14, !dbg !18
  %28 = icmp slt i32 %26, 4, !dbg !19
  %29 = icmp slt i32 %27, 4, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %30 = sdiv i32 %.frozen, 4, !dbg !20
  %31 = mul i32 %30, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = srem i32 %19, 4, !dbg !21
  %33 = shl i32 %26, 2, !dbg !22
  %34 = add i32 %33, %.decomposed, !dbg !23
  %35 = shl i32 %30, 4, !dbg !24
  %36 = add i32 %34, %35, !dbg !25
  %37 = sext i32 %36 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = and i1 %20, %28, !dbg !27
  %40 = and i1 %21, %29, !dbg !27
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %39) #4, !dbg !28
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !28
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !28
  %44 = bitcast i32 %42 to float, !dbg !28
  %45 = bitcast i32 %43 to float, !dbg !28
  %46 = sext i32 %26 to i64, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %28) #4, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %28) #4, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = shl nsw i32 %32, 2, !dbg !31
  %52 = add i32 %51, %27, !dbg !32
  %53 = sext i32 %52 to i64, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !33
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %40) #4, !dbg !34
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !34
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !34
  %58 = bitcast i32 %56 to float, !dbg !34
  %59 = bitcast i32 %57 to float, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !35
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %40) #4, !dbg !36
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !36
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !36
  %64 = bitcast i32 %62 to float, !dbg !36
  %65 = bitcast i32 %63 to float, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !37
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %40) #4, !dbg !38
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !38
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !38
  %70 = bitcast i32 %68 to float, !dbg !38
  %71 = bitcast i32 %69 to float, !dbg !38
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !39
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %40) #4, !dbg !40
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !40
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !40
  %76 = bitcast i32 %74 to float, !dbg !40
  %77 = bitcast i32 %75 to float, !dbg !40
  %78 = fadd float %44, %50, !dbg !41
  %79 = fadd float %45, %50, !dbg !41
  %80 = shl i32 %12, 3, !dbg !41
  %81 = and i32 %80, 56, !dbg !41
  %82 = or disjoint i32 %81, %25, !dbg !41
  %83 = and i32 %13, 62, !dbg !41
  %84 = lshr exact i32 %81, 2, !dbg !41
  %85 = add nuw nsw i32 %84, %82, !dbg !41
  %86 = zext nneg i32 %85 to i64, !dbg !41
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %86, !dbg !41
  %88 = bitcast float %78 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !41
  %89 = or disjoint i32 %82, 4, !dbg !41
  %90 = lshr i32 %89, 2, !dbg !41
  %91 = add nuw nsw i32 %90, %89, !dbg !41
  %92 = zext nneg i32 %91 to i64, !dbg !41
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %92, !dbg !41
  %94 = bitcast float %79 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %95 = lshr i32 %83, 2, !dbg !41
  %96 = add nuw nsw i32 %95, %83, !dbg !41
  %97 = zext nneg i32 %96 to i64, !dbg !41
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !41
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !41
  %100 = or disjoint i32 %83, 1, !dbg !41
  %101 = add nuw nsw i32 %100, %95, !dbg !41
  %102 = zext nneg i32 %101 to i64, !dbg !41
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %102, !dbg !41
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !41
  %105 = fsub float %99, %58, !dbg !42
  %106 = fsub float %104, %59, !dbg !42
  %107 = fadd float %64, 0x3EE4F8B580000000, !dbg !43
  %108 = fadd float %65, 0x3EE4F8B580000000, !dbg !43
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %109, 0, !dbg !44
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %110, 0, !dbg !44
  br i1 %.not.i, label %116, label %111, !dbg !44

111:                                              ; preds = %9
  br i1 %.not1.i, label %114, label %112, !dbg !44

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

116:                                              ; preds = %9
  br i1 %.not1.i, label %119, label %117, !dbg !44

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %112, %114, %117, %119
  %.0.i = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !44
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i3 = icmp eq i32 %121, 0, !dbg !44
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i6 = icmp eq i32 %122, 0, !dbg !44
  br i1 %.not.i3, label %128, label %123, !dbg !44

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %126, label %124, !dbg !44

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #4, !dbg !44
  br label %__nv_sqrtf.exit7, !dbg !44

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #4, !dbg !44
  br label %__nv_sqrtf.exit7, !dbg !44

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %131, label %129, !dbg !44

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #4, !dbg !44
  br label %__nv_sqrtf.exit7, !dbg !44

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #4, !dbg !44
  br label %__nv_sqrtf.exit7, !dbg !44

__nv_sqrtf.exit7:                                 ; preds = %124, %126, %129, %131
  %.0.i5 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !44
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !45
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !45
  %135 = fmul float %105, %133, !dbg !46
  %136 = fmul float %106, %134, !dbg !46
  %137 = fmul float %135, %70, !dbg !47
  %138 = fmul float %136, %71, !dbg !47
  %139 = fadd float %137, %76, !dbg !48
  %140 = fadd float %138, %77, !dbg !48
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i8 = icmp eq i32 %141, 0, !dbg !49
  %142 = tail call float @llvm.nvvm.fabs.ftz.f(float %139) #4, !dbg !49
  %143 = tail call float @llvm.nvvm.fabs.f(float %139) #4, !dbg !49
  %.01.i = select i1 %.not.i8, float %143, float %142, !dbg !49
  %144 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !49
  br i1 %144, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !49

__internal_fmad.exit1.i:                          ; preds = %__nv_sqrtf.exit7
  %145 = fmul float %.01.i, 0x4007154760000000, !dbg !49
  %146 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %145) #4, !dbg !49
  %147 = fadd float %146, 1.000000e+00, !dbg !49
  %148 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %147) #5, !dbg !49, !srcloc !50
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not6.i = icmp eq i32 %149, 0, !dbg !49
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %148, float -2.000000e+00, float 1.000000e+00) #4, !dbg !49
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %148, float -2.000000e+00, float 1.000000e+00) #4, !dbg !49
  %.03.i = select i1 %.not6.i, float %151, float %150, !dbg !49
  %152 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !49
  %s.0.i = select i1 %152, float 1.000000e+00, float %.03.i, !dbg !49
  %153 = bitcast float %s.0.i to i32, !dbg !49
  %154 = bitcast float %139 to i32, !dbg !49
  %155 = and i32 %154, -2147483648, !dbg !49
  %156 = or i32 %155, %153, !dbg !49
  br label %__nv_tanhf.exit, !dbg !49

__internal_fmad.exit3.i:                          ; preds = %__nv_sqrtf.exit7
  %157 = fmul float %139, %139, !dbg !49
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not1.i9 = icmp eq i32 %158, 0, !dbg !49
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %157, float 0xBFAAC795C0000000) #4, !dbg !49
  %160 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %157, float 0xBFAAC795C0000000) #4, !dbg !49
  %.06.i = select i1 %.not1.i9, float %160, float %159, !dbg !49
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not2.i10 = icmp eq i32 %161, 0, !dbg !49
  %162 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %157, float 0x3FC10B2820000000) #4, !dbg !49
  %163 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %157, float 0x3FC10B2820000000) #4, !dbg !49
  %.05.i = select i1 %.not2.i10, float %163, float %162, !dbg !49
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not3.i = icmp eq i32 %164, 0, !dbg !49
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %157, float 0xBFD5553DA0000000) #4, !dbg !49
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %157, float 0xBFD5553DA0000000) #4, !dbg !49
  %.0.i11 = select i1 %.not3.i, float %166, float %165, !dbg !49
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not4.i = icmp eq i32 %167, 0, !dbg !49
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i11, float %157, float 0.000000e+00) #4, !dbg !49
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i11, float %157, float 0.000000e+00) #4, !dbg !49
  %.04.i = select i1 %.not4.i, float %169, float %168, !dbg !49
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not5.i = icmp eq i32 %170, 0, !dbg !49
  %171 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %139, float %139) #4, !dbg !49
  %172 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %139, float %139) #4, !dbg !49
  %.02.i = select i1 %.not5.i, float %172, float %171, !dbg !49
  %173 = bitcast float %.02.i to i32, !dbg !51
  br label %__nv_tanhf.exit, !dbg !49

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi i32 [ %156, %__internal_fmad.exit1.i ], [ %173, %__internal_fmad.exit3.i ], !dbg !49
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i12 = icmp eq i32 %174, 0, !dbg !49
  %175 = tail call float @llvm.nvvm.fabs.ftz.f(float %140) #4, !dbg !49
  %176 = tail call float @llvm.nvvm.fabs.f(float %140) #4, !dbg !49
  %.01.i13 = select i1 %.not.i12, float %176, float %175, !dbg !49
  %177 = fcmp ult float %.01.i13, 0x3FE3333340000000, !dbg !49
  br i1 %177, label %__internal_fmad.exit3.i19, label %__internal_fmad.exit1.i14, !dbg !49

__internal_fmad.exit1.i14:                        ; preds = %__nv_tanhf.exit
  %178 = fmul float %.01.i13, 0x4007154760000000, !dbg !49
  %179 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %178) #4, !dbg !49
  %180 = fadd float %179, 1.000000e+00, !dbg !49
  %181 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %180) #5, !dbg !49, !srcloc !50
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not6.i15 = icmp eq i32 %182, 0, !dbg !49
  %183 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %181, float -2.000000e+00, float 1.000000e+00) #4, !dbg !49
  %184 = tail call float @llvm.nvvm.fma.rn.f(float %181, float -2.000000e+00, float 1.000000e+00) #4, !dbg !49
  %.03.i16 = select i1 %.not6.i15, float %184, float %183, !dbg !49
  %185 = fcmp oge float %.01.i13, 0x4022059680000000, !dbg !49
  %s.0.i17 = select i1 %185, float 1.000000e+00, float %.03.i16, !dbg !49
  %186 = bitcast float %s.0.i17 to i32, !dbg !49
  %187 = bitcast float %140 to i32, !dbg !49
  %188 = and i32 %187, -2147483648, !dbg !49
  %189 = or i32 %188, %186, !dbg !49
  br label %__nv_tanhf.exit30, !dbg !49

__internal_fmad.exit3.i19:                        ; preds = %__nv_tanhf.exit
  %190 = fmul float %140, %140, !dbg !49
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not1.i20 = icmp eq i32 %191, 0, !dbg !49
  %192 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %190, float 0xBFAAC795C0000000) #4, !dbg !49
  %193 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %190, float 0xBFAAC795C0000000) #4, !dbg !49
  %.06.i21 = select i1 %.not1.i20, float %193, float %192, !dbg !49
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not2.i22 = icmp eq i32 %194, 0, !dbg !49
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i21, float %190, float 0x3FC10B2820000000) #4, !dbg !49
  %196 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i21, float %190, float 0x3FC10B2820000000) #4, !dbg !49
  %.05.i23 = select i1 %.not2.i22, float %196, float %195, !dbg !49
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not3.i24 = icmp eq i32 %197, 0, !dbg !49
  %198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i23, float %190, float 0xBFD5553DA0000000) #4, !dbg !49
  %199 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i23, float %190, float 0xBFD5553DA0000000) #4, !dbg !49
  %.0.i25 = select i1 %.not3.i24, float %199, float %198, !dbg !49
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not4.i26 = icmp eq i32 %200, 0, !dbg !49
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i25, float %190, float 0.000000e+00) #4, !dbg !49
  %202 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i25, float %190, float 0.000000e+00) #4, !dbg !49
  %.04.i27 = select i1 %.not4.i26, float %202, float %201, !dbg !49
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not5.i28 = icmp eq i32 %203, 0, !dbg !49
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i27, float %140, float %140) #4, !dbg !49
  %205 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i27, float %140, float %140) #4, !dbg !49
  %.02.i29 = select i1 %.not5.i28, float %205, float %204, !dbg !49
  %206 = bitcast float %.02.i29 to i32, !dbg !51
  br label %__nv_tanhf.exit30, !dbg !49

__nv_tanhf.exit30:                                ; preds = %__internal_fmad.exit1.i14, %__internal_fmad.exit3.i19
  %s.1.i18 = phi i32 [ %189, %__internal_fmad.exit1.i14 ], [ %206, %__internal_fmad.exit3.i19 ], !dbg !49
  %207 = shl i32 %19, 2, !dbg !52
  %208 = add i32 %27, %207, !dbg !53
  %209 = sext i32 %208 to i64, !dbg !54
  %210 = getelementptr float, ptr addrspace(1) %6, i64 %209, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %s.1.i, i32 %s.1.i18, ptr addrspace(1) %210, i1 %40) #4, !dbg !51
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciox76d3mgnwxxootkieaz244h73s27eiihj76gujcd6263ieuur.py", directory: "inductor_cache/io")
!4 = !{ptr @triton_poi_fused_tanh_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_tanh_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_tanh_1", linkageName: "triton_poi_fused_tanh_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 58, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 37, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 42, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 42, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 43, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 43, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 26, scope: !7)
!45 = !DILocation(line: 44, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 19, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 27, scope: !7)
!50 = !{i32 21046}
!51 = !DILocation(line: 51, column: 44, scope: !7)
!52 = !DILocation(line: 51, column: 32, scope: !7)
!53 = !DILocation(line: 51, column: 30, scope: !7)
!54 = !DILocation(line: 51, column: 25, scope: !7)
!55 = !DILocation(line: 51, column: 4, scope: !7)
