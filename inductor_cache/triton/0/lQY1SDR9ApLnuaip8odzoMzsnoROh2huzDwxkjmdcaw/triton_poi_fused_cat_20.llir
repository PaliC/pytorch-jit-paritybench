; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %17 = sdiv i32 %.frozen, 1024, !dbg !14
  %18 = mul i32 %17, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %.frozen46 = freeze i32 %16, !dbg !14
  %19 = sdiv i32 %.frozen46, 1024, !dbg !14
  %20 = mul i32 %19, 1024, !dbg !15
  %.decomposed47 = sub i32 %.frozen46, %20, !dbg !15
  %21 = sdiv i32 %15, 8192, !dbg !16
  %22 = sdiv i32 %16, 8192, !dbg !16
  %23 = srem i32 %21, 8, !dbg !17
  %24 = srem i32 %22, 8, !dbg !17
  %25 = srem i32 %17, 8, !dbg !18
  %26 = srem i32 %19, 8, !dbg !18
  %27 = sdiv i32 %15, 65536, !dbg !19
  %28 = sdiv i32 %16, 65536, !dbg !19
  %29 = icmp slt i32 %.decomposed, 512, !dbg !20
  %30 = icmp slt i32 %.decomposed47, 512, !dbg !20
  %31 = shl nsw i32 %17, 9, !dbg !21
  %32 = shl nsw i32 %19, 9, !dbg !21
  %33 = add nsw i32 %31, %.decomposed, !dbg !22
  %34 = add nsw i32 %32, %.decomposed47, !dbg !22
  %35 = sext i32 %33 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !24
  %41 = icmp sgt i32 %.decomposed, 511, !dbg !25
  %42 = icmp sgt i32 %.decomposed47, 511, !dbg !25
  %43 = sext i32 %23 to i64, !dbg !26
  %44 = getelementptr i64, ptr addrspace(1) %1, i64 %43, !dbg !26
  %45 = sext i32 %24 to i64, !dbg !26
  %46 = getelementptr i64, ptr addrspace(1) %1, i64 %45, !dbg !26
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %41, i1 %41) #3, !dbg !27
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %41, i1 %41) #3, !dbg !27
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %41, i1 %41) #3, !dbg !27
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %41, i1 %41) #3, !dbg !27
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 %42, i1 %42) #3, !dbg !27
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 %42, i1 %42) #3, !dbg !27
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 %42, i1 %42) #3, !dbg !27
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 %42, i1 %42) #3, !dbg !27
  %55 = lshr i64 %47, 61, !dbg !28
  %56 = and i64 %55, 4, !dbg !28
  %57 = add i64 %56, %47, !dbg !28
  %58 = lshr i64 %51, 61, !dbg !28
  %59 = and i64 %58, 4, !dbg !28
  %60 = add i64 %59, %51, !dbg !28
  %61 = sext i32 %25 to i64, !dbg !29
  %62 = getelementptr i64, ptr addrspace(1) %1, i64 %61, !dbg !29
  %63 = sext i32 %26 to i64, !dbg !29
  %64 = getelementptr i64, ptr addrspace(1) %1, i64 %63, !dbg !29
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %62, i1 %41, i1 %41) #3, !dbg !30
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %62, i1 %41, i1 %41) #3, !dbg !30
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %62, i1 %41, i1 %41) #3, !dbg !30
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %62, i1 %41, i1 %41) #3, !dbg !30
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %64, i1 %42, i1 %42) #3, !dbg !30
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %64, i1 %42, i1 %42) #3, !dbg !30
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %64, i1 %42, i1 %42) #3, !dbg !30
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %64, i1 %42, i1 %42) #3, !dbg !30
  %73 = lshr i64 %65, 61, !dbg !31
  %74 = and i64 %73, 4, !dbg !31
  %75 = add i64 %74, %65, !dbg !31
  %76 = lshr i64 %69, 61, !dbg !31
  %77 = and i64 %76, 4, !dbg !31
  %78 = add i64 %77, %69, !dbg !31
  %79 = shl nsw i32 %27, 13, !dbg !32
  %80 = shl nsw i32 %28, 13, !dbg !32
  %81 = sext i32 %79 to i64, !dbg !33
  %82 = sext i32 %80 to i64, !dbg !33
  %83 = add nsw i32 %.decomposed, -512, !dbg !34
  %84 = add nsw i32 %.decomposed47, -512, !dbg !34
  %85 = sext i32 %83 to i64, !dbg !35
  %86 = sext i32 %84 to i64, !dbg !35
  %.idx = shl i64 %75, 11, !dbg !36
  %87 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !36
  %.idx1 = shl i64 %57, 13, !dbg !36
  %88 = getelementptr i8, ptr addrspace(1) %87, i64 %.idx1, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %81, !dbg !36
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %85, !dbg !36
  %.idx2 = shl i64 %78, 11, !dbg !36
  %91 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx2, !dbg !36
  %.idx3 = shl i64 %60, 13, !dbg !36
  %92 = getelementptr i8, ptr addrspace(1) %91, i64 %.idx3, !dbg !36
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %82, !dbg !36
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %86, !dbg !36
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !37
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !37
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !38
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !38
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !39
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !39
  %101 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !40
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !40
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !41
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !41
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !41
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !41
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !41
  %108 = bitcast i32 %104 to float, !dbg !41
  %109 = bitcast i32 %105 to float, !dbg !41
  %110 = bitcast i32 %106 to float, !dbg !41
  %111 = bitcast i32 %107 to float, !dbg !41
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !41
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !41
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !41
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !41
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !41
  %117 = bitcast i32 %113 to float, !dbg !41
  %118 = bitcast i32 %114 to float, !dbg !41
  %119 = bitcast i32 %115 to float, !dbg !41
  %120 = bitcast i32 %116 to float, !dbg !41
  %121 = fadd float %108, 0x3EE4F8B580000000, !dbg !42
  %122 = fadd float %109, 0x3EE4F8B580000000, !dbg !42
  %123 = fadd float %110, 0x3EE4F8B580000000, !dbg !42
  %124 = fadd float %111, 0x3EE4F8B580000000, !dbg !42
  %125 = fadd float %117, 0x3EE4F8B580000000, !dbg !42
  %126 = fadd float %118, 0x3EE4F8B580000000, !dbg !42
  %127 = fadd float %119, 0x3EE4F8B580000000, !dbg !42
  %128 = fadd float %120, 0x3EE4F8B580000000, !dbg !42
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %129, 0, !dbg !43
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %130, 0, !dbg !43
  br i1 %.not.i, label %136, label %131, !dbg !43

131:                                              ; preds = %9
  br i1 %.not1.i, label %134, label %132, !dbg !43

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

136:                                              ; preds = %9
  br i1 %.not1.i, label %139, label %137, !dbg !43

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %132, %134, %137, %139
  %.0.i = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !43
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i4 = icmp eq i32 %141, 0, !dbg !43
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i7 = icmp eq i32 %142, 0, !dbg !43
  br i1 %.not.i4, label %148, label %143, !dbg !43

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %146, label %144, !dbg !43

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

148:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %151, label %149, !dbg !43

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

__nv_sqrtf.exit8:                                 ; preds = %144, %146, %149, %151
  %.0.i6 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !43
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i9 = icmp eq i32 %153, 0, !dbg !43
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i12 = icmp eq i32 %154, 0, !dbg !43
  br i1 %.not.i9, label %160, label %155, !dbg !43

155:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %158, label %156, !dbg !43

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

160:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %163, label %161, !dbg !43

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

__nv_sqrtf.exit13:                                ; preds = %156, %158, %161, %163
  %.0.i11 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !43
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i14 = icmp eq i32 %165, 0, !dbg !43
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i17 = icmp eq i32 %166, 0, !dbg !43
  br i1 %.not.i14, label %172, label %167, !dbg !43

167:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %170, label %168, !dbg !43

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

172:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %175, label %173, !dbg !43

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

__nv_sqrtf.exit18:                                ; preds = %168, %170, %173, %175
  %.0.i16 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !43
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i19 = icmp eq i32 %177, 0, !dbg !43
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i22 = icmp eq i32 %178, 0, !dbg !43
  br i1 %.not.i19, label %184, label %179, !dbg !43

179:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %182, label %180, !dbg !43

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

184:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %187, label %185, !dbg !43

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

__nv_sqrtf.exit23:                                ; preds = %180, %182, %185, %187
  %.0.i21 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !43
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i24 = icmp eq i32 %189, 0, !dbg !43
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i27 = icmp eq i32 %190, 0, !dbg !43
  br i1 %.not.i24, label %196, label %191, !dbg !43

191:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %194, label %192, !dbg !43

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

196:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %199, label %197, !dbg !43

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

__nv_sqrtf.exit28:                                ; preds = %192, %194, %197, %199
  %.0.i26 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !43
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i29 = icmp eq i32 %201, 0, !dbg !43
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i32 = icmp eq i32 %202, 0, !dbg !43
  br i1 %.not.i29, label %208, label %203, !dbg !43

203:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %206, label %204, !dbg !43

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

208:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %211, label %209, !dbg !43

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

__nv_sqrtf.exit33:                                ; preds = %204, %206, %209, %211
  %.0.i31 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !43
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i34 = icmp eq i32 %213, 0, !dbg !43
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i37 = icmp eq i32 %214, 0, !dbg !43
  br i1 %.not.i34, label %220, label %215, !dbg !43

215:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %218, label %216, !dbg !43

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

220:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %223, label %221, !dbg !43

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

__nv_sqrtf.exit38:                                ; preds = %216, %218, %221, %223
  %.0.i36 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !43
  %225 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !37
  %226 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !39
  %227 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !37
  %228 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !39
  %229 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !37
  %230 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !39
  %231 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !37
  %232 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !39
  %233 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !37
  %234 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !39
  %235 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !37
  %236 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !39
  %237 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !37
  %238 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !39
  %239 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !37
  %240 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !39
  %241 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %242 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %243 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %244 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %245 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %246 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %247 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %248 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !44
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !44
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !44
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #3, !dbg !44
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #3, !dbg !44
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #3, !dbg !44
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #3, !dbg !44
  %257 = getelementptr float, ptr addrspace(1) %5, i64 %85, !dbg !45
  %258 = getelementptr float, ptr addrspace(1) %5, i64 %86, !dbg !45
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %257, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !46
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !46
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !46
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !46
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !46
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %258, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !46
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !46
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !46
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !46
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !46
  %269 = getelementptr float, ptr addrspace(1) %6, i64 %85, !dbg !47
  %270 = getelementptr float, ptr addrspace(1) %6, i64 %86, !dbg !47
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %269, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !48
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !48
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !48
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !48
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %270, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !48
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !48
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !48
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !48
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !48
  %281 = insertelement <8 x i32> poison, i32 %225, i64 0, !dbg !37
  %282 = insertelement <8 x i32> %281, i32 %227, i64 1, !dbg !37
  %283 = insertelement <8 x i32> %282, i32 %229, i64 2, !dbg !37
  %284 = insertelement <8 x i32> %283, i32 %231, i64 3, !dbg !37
  %285 = insertelement <8 x i32> %284, i32 %233, i64 4, !dbg !37
  %286 = insertelement <8 x i32> %285, i32 %235, i64 5, !dbg !37
  %287 = insertelement <8 x i32> %286, i32 %237, i64 6, !dbg !37
  %288 = insertelement <8 x i32> %287, i32 %239, i64 7, !dbg !37
  %289 = bitcast <8 x i32> %288 to <8 x float>, !dbg !37
  %290 = insertelement <8 x i32> poison, i32 %226, i64 0, !dbg !39
  %291 = insertelement <8 x i32> %290, i32 %228, i64 1, !dbg !39
  %292 = insertelement <8 x i32> %291, i32 %230, i64 2, !dbg !39
  %293 = insertelement <8 x i32> %292, i32 %232, i64 3, !dbg !39
  %294 = insertelement <8 x i32> %293, i32 %234, i64 4, !dbg !39
  %295 = insertelement <8 x i32> %294, i32 %236, i64 5, !dbg !39
  %296 = insertelement <8 x i32> %295, i32 %238, i64 6, !dbg !39
  %297 = insertelement <8 x i32> %296, i32 %240, i64 7, !dbg !39
  %298 = bitcast <8 x i32> %297 to <8 x float>, !dbg !39
  %299 = fsub <8 x float> %289, %298, !dbg !49
  %300 = insertelement <8 x float> poison, float %256, i64 0, !dbg !50
  %301 = insertelement <8 x float> %300, float %255, i64 1, !dbg !50
  %302 = insertelement <8 x float> %301, float %254, i64 2, !dbg !50
  %303 = insertelement <8 x float> %302, float %253, i64 3, !dbg !50
  %304 = insertelement <8 x float> %303, float %252, i64 4, !dbg !50
  %305 = insertelement <8 x float> %304, float %251, i64 5, !dbg !50
  %306 = insertelement <8 x float> %305, float %250, i64 6, !dbg !50
  %307 = insertelement <8 x float> %306, float %249, i64 7, !dbg !50
  %308 = fmul <8 x float> %299, %307, !dbg !50
  %309 = insertelement <8 x i32> poison, i32 %268, i64 0, !dbg !46
  %310 = insertelement <8 x i32> %309, i32 %267, i64 1, !dbg !46
  %311 = insertelement <8 x i32> %310, i32 %266, i64 2, !dbg !46
  %312 = insertelement <8 x i32> %311, i32 %265, i64 3, !dbg !46
  %313 = insertelement <8 x i32> %312, i32 %263, i64 4, !dbg !46
  %314 = insertelement <8 x i32> %313, i32 %262, i64 5, !dbg !46
  %315 = insertelement <8 x i32> %314, i32 %261, i64 6, !dbg !46
  %316 = insertelement <8 x i32> %315, i32 %260, i64 7, !dbg !46
  %317 = bitcast <8 x i32> %316 to <8 x float>, !dbg !46
  %318 = fmul <8 x float> %308, %317, !dbg !51
  %319 = insertelement <8 x i32> poison, i32 %280, i64 0, !dbg !48
  %320 = insertelement <8 x i32> %319, i32 %279, i64 1, !dbg !48
  %321 = insertelement <8 x i32> %320, i32 %278, i64 2, !dbg !48
  %322 = insertelement <8 x i32> %321, i32 %277, i64 3, !dbg !48
  %323 = insertelement <8 x i32> %322, i32 %275, i64 4, !dbg !48
  %324 = insertelement <8 x i32> %323, i32 %274, i64 5, !dbg !48
  %325 = insertelement <8 x i32> %324, i32 %273, i64 6, !dbg !48
  %326 = insertelement <8 x i32> %325, i32 %272, i64 7, !dbg !48
  %327 = bitcast <8 x i32> %326 to <8 x float>, !dbg !48
  %328 = fadd <8 x float> %318, %327, !dbg !52
  %329 = fcmp olt <8 x float> %328, zeroinitializer, !dbg !53
  %330 = extractelement <8 x i1> %329, i64 7, !dbg !57
  %331 = extractelement <8 x i1> %329, i64 6, !dbg !57
  %332 = extractelement <8 x i1> %329, i64 5, !dbg !57
  %333 = extractelement <8 x i1> %329, i64 4, !dbg !57
  %334 = extractelement <8 x i1> %329, i64 3, !dbg !57
  %335 = extractelement <8 x i1> %329, i64 2, !dbg !57
  %336 = extractelement <8 x i1> %329, i64 1, !dbg !57
  %337 = extractelement <8 x i1> %329, i64 0, !dbg !57
  %338 = sext i32 %15 to i64, !dbg !58
  %339 = getelementptr float, ptr addrspace(1) %7, i64 %338, !dbg !58
  %340 = sext i32 %16 to i64, !dbg !58
  %341 = getelementptr float, ptr addrspace(1) %7, i64 %340, !dbg !58
  %bc = bitcast <8 x float> %328 to <8 x i32>, !dbg !59
  %342 = extractelement <8 x i32> %bc, i64 7, !dbg !59
  %343 = select i1 %330, i32 0, i32 %342, !dbg !57
  %344 = select i1 %29, i32 %248, i32 %343, !dbg !60
  %bc39 = bitcast <8 x float> %328 to <8 x i32>, !dbg !59
  %345 = extractelement <8 x i32> %bc39, i64 6, !dbg !59
  %346 = select i1 %331, i32 0, i32 %345, !dbg !57
  %347 = select i1 %29, i32 %247, i32 %346, !dbg !60
  %bc40 = bitcast <8 x float> %328 to <8 x i32>, !dbg !59
  %348 = extractelement <8 x i32> %bc40, i64 5, !dbg !59
  %349 = select i1 %332, i32 0, i32 %348, !dbg !57
  %350 = select i1 %29, i32 %246, i32 %349, !dbg !60
  %bc41 = bitcast <8 x float> %328 to <8 x i32>, !dbg !59
  %351 = extractelement <8 x i32> %bc41, i64 4, !dbg !59
  %352 = select i1 %333, i32 0, i32 %351, !dbg !57
  %353 = select i1 %29, i32 %245, i32 %352, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %347, i32 %350, i32 %353, ptr addrspace(1) %339, i1 true) #3, !dbg !59
  %bc42 = bitcast <8 x float> %328 to <8 x i32>, !dbg !59
  %354 = extractelement <8 x i32> %bc42, i64 3, !dbg !59
  %355 = select i1 %334, i32 0, i32 %354, !dbg !57
  %356 = select i1 %30, i32 %244, i32 %355, !dbg !60
  %bc43 = bitcast <8 x float> %328 to <8 x i32>, !dbg !59
  %357 = extractelement <8 x i32> %bc43, i64 2, !dbg !59
  %358 = select i1 %335, i32 0, i32 %357, !dbg !57
  %359 = select i1 %30, i32 %243, i32 %358, !dbg !60
  %bc44 = bitcast <8 x float> %328 to <8 x i32>, !dbg !59
  %360 = extractelement <8 x i32> %bc44, i64 1, !dbg !59
  %361 = select i1 %336, i32 0, i32 %360, !dbg !57
  %362 = select i1 %30, i32 %242, i32 %361, !dbg !60
  %bc45 = bitcast <8 x float> %328 to <8 x i32>, !dbg !59
  %363 = extractelement <8 x i32> %bc45, i64 0, !dbg !59
  %364 = select i1 %337, i32 0, i32 %363, !dbg !57
  %365 = select i1 %30, i32 %241, i32 %364, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %356, i32 %359, i32 %362, i32 %365, ptr addrspace(1) %341, i1 true) #3, !dbg !59
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4dduc3xzrcg2zl7meenkgfu7jlofx435z4ycvzbvayizd6fbqro.py", directory: "inductor_cache/4d")
!4 = !{ptr @triton_poi_fused_cat_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_20", linkageName: "triton_poi_fused_cat_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 34, scope: !7)
!22 = !DILocation(line: 35, column: 40, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 46, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 35, scope: !7)
!28 = !DILocation(line: 43, column: 35, scope: !7)
!29 = !DILocation(line: 44, column: 31, scope: !7)
!30 = !DILocation(line: 44, column: 36, scope: !7)
!31 = !DILocation(line: 47, column: 35, scope: !7)
!32 = !DILocation(line: 48, column: 61, scope: !7)
!33 = !DILocation(line: 48, column: 56, scope: !7)
!34 = !DILocation(line: 48, column: 76, scope: !7)
!35 = !DILocation(line: 48, column: 67, scope: !7)
!36 = !DILocation(line: 48, column: 31, scope: !7)
!37 = !DILocation(line: 48, column: 82, scope: !7)
!38 = !DILocation(line: 49, column: 31, scope: !7)
!39 = !DILocation(line: 49, column: 45, scope: !7)
!40 = !DILocation(line: 51, column: 31, scope: !7)
!41 = !DILocation(line: 51, column: 45, scope: !7)
!42 = !DILocation(line: 53, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 27, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 31, scope: !7)
!46 = !DILocation(line: 60, column: 45, scope: !7)
!47 = !DILocation(line: 62, column: 31, scope: !7)
!48 = !DILocation(line: 62, column: 45, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 65, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 69, column: 25, scope: !7)
!59 = !DILocation(line: 69, column: 37, scope: !7)
!60 = !DILocation(line: 68, column: 33, scope: !7)
!61 = !DILocation(line: 69, column: 4, scope: !7)
