; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 1, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 6, !dbg !12
  %.lobit = and i32 %12, 1, !dbg !12
  %13 = or disjoint i32 %10, %.lobit, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %16 = shl i32 %15, 7, !dbg !16
  %17 = shl i32 %11, 1, !dbg !17
  %18 = and i32 %17, 126, !dbg !17
  %19 = and i32 %11, 127, !dbg !17
  %20 = or disjoint i32 %16, %18, !dbg !18
  %21 = or disjoint i32 %16, %19, !dbg !18
  %22 = icmp slt i32 %20, 128, !dbg !19
  %23 = icmp slt i32 %21, 128, !dbg !19
  %24 = shl i32 %13, 7, !dbg !20
  %25 = add i32 %20, %24, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = and i1 %14, %22, !dbg !23
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %28) #4, !dbg !24
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !24
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !24
  %32 = and i32 %17, 254, !dbg !24
  %33 = lshr i32 %32, 7, !dbg !24
  %34 = or disjoint i32 %33, %32, !dbg !24
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %34, !dbg !24
  %36 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %36, i1 true) #4, !dbg !24
  %37 = or disjoint i32 %32, 1, !dbg !24
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %33, !dbg !24
  %39 = getelementptr inbounds float, ptr addrspace(3) %38, i32 %37, !dbg !24
  %40 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %40, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !24
  %42 = load float, ptr addrspace(3) %41, align 4, !dbg !24
  %43 = getelementptr inbounds i8, ptr addrspace(3) %41, i32 516, !dbg !24
  %44 = load float, ptr addrspace(3) %43, align 4, !dbg !24
  %45 = sext i32 %21 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %23) #4, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %23) #4, !dbg !28
  %50 = bitcast i32 %49 to float, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #4, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %23) #4, !dbg !32
  %55 = fadd float %50, 0x3EE4F8B580000000, !dbg !33
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %56, 0, !dbg !34
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %57, 0, !dbg !34
  br i1 %.not.i, label %63, label %58, !dbg !34

58:                                               ; preds = %8
  br i1 %.not1.i, label %61, label %59, !dbg !34

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !34

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !34
  %68 = bitcast i32 %47 to float, !dbg !26
  %69 = fsub float %44, %68, !dbg !35
  %70 = fsub float %42, %68, !dbg !35
  %71 = bitcast i32 %54 to float, !dbg !32
  %72 = bitcast i32 %52 to float, !dbg !30
  %73 = icmp slt i32 %10, 256, !dbg !14
  %74 = and i1 %73, %23, !dbg !23
  %.frozen = freeze i32 %10, !dbg !36
  %75 = sdiv i32 %.frozen, 64, !dbg !36
  %76 = mul i32 %75, 64, !dbg !37
  %.decomposed = sub i32 %.frozen, %76, !dbg !37
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %78 = fmul float %70, %77, !dbg !39
  %79 = fmul float %69, %77, !dbg !39
  %80 = fmul float %78, %72, !dbg !40
  %81 = fmul float %79, %72, !dbg !40
  %82 = fadd float %80, %71, !dbg !41
  %83 = fadd float %81, %71, !dbg !41
  %84 = fcmp ogt float %82, 0.000000e+00, !dbg !42
  %85 = fcmp ogt float %83, 0.000000e+00, !dbg !42
  %86 = fmul float %82, 0x3FB99999A0000000, !dbg !43
  %87 = fmul float %83, 0x3FB99999A0000000, !dbg !43
  %88 = select i1 %84, float %82, float %86, !dbg !44
  %89 = select i1 %85, float %83, float %87, !dbg !44
  %90 = shl i32 %21, 6, !dbg !45
  %91 = shl i32 %75, 13, !dbg !46
  %92 = add i32 %91, %.decomposed, !dbg !47
  %93 = add i32 %92, %90, !dbg !48
  %94 = sext i32 %93 to i64, !dbg !49
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %94, !dbg !49
  %96 = bitcast float %88 to i32, !dbg !50
  %97 = bitcast float %89 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %96, i32 %97, ptr addrspace(1) %95, i1 %74) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crersk6dy6pydaxnv7d6yuurru7mbeqrxk33pkat4vtup7lys4qy.py", directory: "inductor_cache/re")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 35, scope: !7)
!45 = !DILocation(line: 53, column: 33, scope: !7)
!46 = !DILocation(line: 53, column: 43, scope: !7)
!47 = !DILocation(line: 53, column: 30, scope: !7)
!48 = !DILocation(line: 53, column: 38, scope: !7)
!49 = !DILocation(line: 53, column: 25, scope: !7)
!50 = !DILocation(line: 53, column: 55, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
