; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %10, 256, !dbg !12
  %13 = or disjoint i32 %10, 384, !dbg !12
  %14 = or disjoint i32 %10, 512, !dbg !12
  %15 = or disjoint i32 %10, 640, !dbg !12
  %16 = or disjoint i32 %10, 768, !dbg !12
  %17 = or disjoint i32 %10, 896, !dbg !12
  %18 = shl i32 %9, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %8, %10, !dbg !13
  %21 = or disjoint i32 %8, %11, !dbg !13
  %22 = or disjoint i32 %8, %12, !dbg !13
  %23 = or disjoint i32 %8, %13, !dbg !13
  %24 = or disjoint i32 %8, %14, !dbg !13
  %25 = or disjoint i32 %8, %15, !dbg !13
  %26 = or disjoint i32 %8, %16, !dbg !13
  %27 = or disjoint i32 %8, %17, !dbg !13
  %28 = or disjoint i32 %8, %19, !dbg !13
  %29 = or disjoint i32 %28, 512, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = icmp slt i32 %30, 1088, !dbg !15
  %.frozen = freeze i32 %28, !dbg !16
  %32 = sdiv i32 %.frozen, 4096, !dbg !16
  %33 = mul i32 %32, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %.frozen15 = freeze i32 %29, !dbg !16
  %34 = sdiv i32 %.frozen15, 4096, !dbg !16
  %35 = mul i32 %34, 4096, !dbg !17
  %.decomposed16 = sub i32 %.frozen15, %35, !dbg !17
  %36 = mul i32 %20, 1088, !dbg !18
  %37 = mul i32 %21, 1088, !dbg !18
  %38 = mul i32 %22, 1088, !dbg !18
  %39 = mul i32 %23, 1088, !dbg !18
  %40 = mul i32 %24, 1088, !dbg !18
  %41 = mul i32 %25, 1088, !dbg !18
  %42 = mul i32 %26, 1088, !dbg !18
  %43 = mul i32 %27, 1088, !dbg !18
  %44 = add i32 %36, %30, !dbg !19
  %45 = add i32 %37, %30, !dbg !19
  %46 = add i32 %38, %30, !dbg !19
  %47 = add i32 %39, %30, !dbg !19
  %48 = add i32 %40, %30, !dbg !19
  %49 = add i32 %41, %30, !dbg !19
  %50 = add i32 %42, %30, !dbg !19
  %51 = add i32 %43, %30, !dbg !19
  %52 = sext i32 %44 to i64, !dbg !20
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !20
  %54 = sext i32 %45 to i64, !dbg !20
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !20
  %56 = sext i32 %46 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !20
  %58 = sext i32 %47 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = sext i32 %48 to i64, !dbg !20
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !20
  %62 = sext i32 %49 to i64, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !20
  %64 = sext i32 %50 to i64, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !20
  %66 = sext i32 %51 to i64, !dbg !20
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %31) #2, !dbg !21
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %31) #2, !dbg !21
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %31) #2, !dbg !21
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %31) #2, !dbg !21
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %31) #2, !dbg !21
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %31) #2, !dbg !21
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %31) #2, !dbg !21
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %31) #2, !dbg !21
  %76 = sext i32 %30 to i64, !dbg !22
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !22
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %31) #2, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !24
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !24
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !24
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !24
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %31) #2, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %31) #2, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %31) #2, !dbg !25
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %31) #2, !dbg !25
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %31) #2, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %31) #2, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %31) #2, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %31) #2, !dbg !25
  %95 = insertelement <8 x i32> poison, i32 %75, i64 0, !dbg !21
  %96 = insertelement <8 x i32> %95, i32 %74, i64 1, !dbg !21
  %97 = insertelement <8 x i32> %96, i32 %73, i64 2, !dbg !21
  %98 = insertelement <8 x i32> %97, i32 %72, i64 3, !dbg !21
  %99 = insertelement <8 x i32> %98, i32 %71, i64 4, !dbg !21
  %100 = insertelement <8 x i32> %99, i32 %70, i64 5, !dbg !21
  %101 = insertelement <8 x i32> %100, i32 %69, i64 6, !dbg !21
  %102 = insertelement <8 x i32> %101, i32 %68, i64 7, !dbg !21
  %103 = bitcast <8 x i32> %102 to <8 x float>, !dbg !21
  %104 = insertelement <8 x i32> poison, i32 %94, i64 0, !dbg !25
  %105 = insertelement <8 x i32> %104, i32 %93, i64 1, !dbg !25
  %106 = insertelement <8 x i32> %105, i32 %92, i64 2, !dbg !25
  %107 = insertelement <8 x i32> %106, i32 %91, i64 3, !dbg !25
  %108 = insertelement <8 x i32> %107, i32 %90, i64 4, !dbg !25
  %109 = insertelement <8 x i32> %108, i32 %89, i64 5, !dbg !25
  %110 = insertelement <8 x i32> %109, i32 %88, i64 6, !dbg !25
  %111 = insertelement <8 x i32> %110, i32 %87, i64 7, !dbg !25
  %112 = bitcast <8 x i32> %111 to <8 x float>, !dbg !25
  %113 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !26
  %114 = bitcast <8 x i32> %113 to <8 x float>, !dbg !26
  %115 = shufflevector <8 x float> %114, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !26
  %116 = fadd <8 x float> %115, %103, !dbg !26
  %117 = fadd <8 x float> %116, %112, !dbg !27
  %118 = fcmp olt <8 x float> %117, zeroinitializer, !dbg !28
  %119 = extractelement <8 x i1> %118, i64 7, !dbg !32
  %120 = extractelement <8 x float> %117, i64 7, !dbg !32
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !32
  %122 = extractelement <8 x i1> %118, i64 6, !dbg !32
  %123 = extractelement <8 x float> %117, i64 6, !dbg !32
  %124 = select i1 %122, float 0.000000e+00, float %123, !dbg !32
  %125 = extractelement <8 x i1> %118, i64 5, !dbg !32
  %126 = extractelement <8 x float> %117, i64 5, !dbg !32
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !32
  %128 = extractelement <8 x i1> %118, i64 4, !dbg !32
  %129 = extractelement <8 x float> %117, i64 4, !dbg !32
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !32
  %131 = extractelement <8 x i1> %118, i64 3, !dbg !32
  %132 = extractelement <8 x float> %117, i64 3, !dbg !32
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !32
  %134 = extractelement <8 x i1> %118, i64 2, !dbg !32
  %135 = extractelement <8 x float> %117, i64 2, !dbg !32
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !32
  %137 = extractelement <8 x i1> %118, i64 1, !dbg !32
  %138 = extractelement <8 x float> %117, i64 1, !dbg !32
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !32
  %140 = extractelement <8 x i1> %118, i64 0, !dbg !32
  %141 = extractelement <8 x float> %117, i64 0, !dbg !32
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !32
  %143 = shl i32 %30, 12, !dbg !33
  %144 = add i32 %.decomposed, %143, !dbg !34
  %145 = mul i32 %32, 4456448, !dbg !35
  %146 = mul i32 %34, 4456448, !dbg !35
  %147 = add i32 %144, %145, !dbg !36
  %148 = add i32 %146, %.decomposed16, !dbg !34
  %149 = add i32 %148, %143, !dbg !36
  %150 = sext i32 %147 to i64, !dbg !37
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !37
  %152 = sext i32 %149 to i64, !dbg !37
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !37
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !38
  %155 = bitcast float %121 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !38
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !38
  %157 = bitcast float %124 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !38
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !38
  %159 = bitcast float %127 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !38
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !38
  %161 = bitcast float %130 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !38
  %163 = load <4 x i32>, ptr addrspace(3) %162, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %164 = bitcast float %133 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %164, i1 true) #2, !dbg !38
  %165 = bitcast float %136 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %165, i1 true) #2, !dbg !38
  %166 = bitcast float %139 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %166, i1 true) #2, !dbg !38
  %167 = bitcast float %142 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %167, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %168 = load <4 x i32>, ptr addrspace(3) %162, align 16, !dbg !38
  %.extract = extractelement <4 x i32> %163, i64 0, !dbg !38
  %.extract8 = extractelement <4 x i32> %163, i64 1, !dbg !38
  %.extract9 = extractelement <4 x i32> %163, i64 2, !dbg !38
  %.extract10 = extractelement <4 x i32> %163, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %151, i1 %31) #2, !dbg !38
  %.extract11 = extractelement <4 x i32> %168, i64 0, !dbg !38
  %.extract12 = extractelement <4 x i32> %168, i64 1, !dbg !38
  %.extract13 = extractelement <4 x i32> %168, i64 2, !dbg !38
  %.extract14 = extractelement <4 x i32> %168, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %153, i1 %31) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccd7nykkkmuelwk53fsppfnlfiiafrpk6o356i7mmlttjr7tuws6.py", directory: "inductor_cache/cd")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_relu_6", linkageName: "triton_poi_fused_add_convolution_mul_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 45, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 40, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 41, column: 35, scope: !7)
!34 = !DILocation(line: 41, column: 30, scope: !7)
!35 = !DILocation(line: 41, column: 48, scope: !7)
!36 = !DILocation(line: 41, column: 40, scope: !7)
!37 = !DILocation(line: 41, column: 25, scope: !7)
!38 = !DILocation(line: 41, column: 59, scope: !7)
!39 = !DILocation(line: 41, column: 4, scope: !7)
