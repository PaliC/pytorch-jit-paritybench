; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 1704, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = lshr i32 %12, 5, !dbg !17
  %20 = and i32 %19, 3, !dbg !17
  %21 = or disjoint i32 %18, %20, !dbg !18
  %22 = or disjoint i32 %21, 4, !dbg !18
  %23 = or disjoint i32 %21, 8, !dbg !18
  %24 = or disjoint i32 %21, 12, !dbg !18
  %25 = icmp slt i32 %21, 16, !dbg !19
  %26 = icmp slt i32 %22, 16, !dbg !19
  %27 = icmp slt i32 %23, 16, !dbg !19
  %28 = icmp slt i32 %24, 16, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %29 = sdiv i32 %.frozen, 426, !dbg !20
  %30 = mul i32 %29, 426, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = mul i32 %21, 426, !dbg !22
  %32 = mul i32 %22, 426, !dbg !22
  %33 = mul i32 %23, 426, !dbg !22
  %34 = mul i32 %24, 426, !dbg !22
  %35 = mul i32 %29, 6816, !dbg !23
  %36 = add i32 %35, %.decomposed, !dbg !24
  %37 = add i32 %36, %31, !dbg !25
  %38 = add i32 %36, %32, !dbg !25
  %39 = add i32 %36, %33, !dbg !25
  %40 = add i32 %36, %34, !dbg !25
  %41 = sext i32 %37 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !26
  %43 = sext i32 %38 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %39 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %40 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = and i1 %16, %25, !dbg !27
  %50 = and i1 %26, %16, !dbg !27
  %51 = and i1 %27, %16, !dbg !27
  %52 = and i1 %28, %16, !dbg !27
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %49) #4, !dbg !28
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %50) #4, !dbg !28
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %51) #4, !dbg !28
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %52) #4, !dbg !28
  %57 = sext i32 %.decomposed to i64, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !29
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %16) #4, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !31
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %16) #4, !dbg !32
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !32
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !32
  %64 = bitcast i32 %62 to float, !dbg !32
  %65 = bitcast i32 %63 to float, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !33
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %16) #4, !dbg !34
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !35
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %16) #4, !dbg !36
  %70 = fadd float %64, 0x3EE4F8B580000000, !dbg !37
  %71 = fadd float %65, 0x3EE4F8B580000000, !dbg !37
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %72, 0, !dbg !38
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %73, 0, !dbg !38
  br i1 %.not.i, label %79, label %74, !dbg !38

74:                                               ; preds = %9
  br i1 %.not1.i, label %77, label %75, !dbg !38

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

79:                                               ; preds = %9
  br i1 %.not1.i, label %82, label %80, !dbg !38

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !38
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i10 = icmp eq i32 %84, 0, !dbg !38
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i13 = icmp eq i32 %85, 0, !dbg !38
  br i1 %.not.i10, label %91, label %86, !dbg !38

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %89, label %87, !dbg !38

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !38
  br label %__nv_sqrtf.exit14, !dbg !38

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !38
  br label %__nv_sqrtf.exit14, !dbg !38

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %94, label %92, !dbg !38

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !38
  br label %__nv_sqrtf.exit14, !dbg !38

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !38
  br label %__nv_sqrtf.exit14, !dbg !38

__nv_sqrtf.exit14:                                ; preds = %87, %89, %92, %94
  %.0.i12 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !38
  %96 = extractvalue { i32, i32 } %56, 1, !dbg !28
  %97 = extractvalue { i32, i32 } %59, 1, !dbg !30
  %98 = extractvalue { i32, i32 } %56, 0, !dbg !28
  %99 = extractvalue { i32, i32 } %59, 0, !dbg !30
  %100 = extractvalue { i32, i32 } %55, 1, !dbg !28
  %101 = extractvalue { i32, i32 } %55, 0, !dbg !28
  %102 = extractvalue { i32, i32 } %54, 1, !dbg !28
  %103 = extractvalue { i32, i32 } %54, 0, !dbg !28
  %104 = extractvalue { i32, i32 } %53, 1, !dbg !28
  %105 = extractvalue { i32, i32 } %53, 0, !dbg !28
  %106 = extractvalue { i32, i32 } %69, 1, !dbg !36
  %107 = extractvalue { i32, i32 } %69, 0, !dbg !36
  %108 = extractvalue { i32, i32 } %67, 1, !dbg !34
  %109 = extractvalue { i32, i32 } %67, 0, !dbg !34
  %110 = shl i32 %12, 2, !dbg !17
  %111 = and i32 %110, 12, !dbg !17
  %112 = or disjoint i32 %18, %111, !dbg !18
  %113 = icmp slt i32 %112, 16, !dbg !19
  %114 = lshr i32 %12, 2, !dbg !12
  %115 = and i32 %114, 31, !dbg !12
  %116 = or disjoint i32 %115, %11, !dbg !13
  %117 = or disjoint i32 %116, 32, !dbg !13
  %118 = icmp slt i32 %117, 1704, !dbg !14
  %119 = and i1 %118, %113, !dbg !27
  %120 = icmp slt i32 %116, 1704, !dbg !14
  %121 = and i1 %120, %113, !dbg !27
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !39
  %124 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !30
  %125 = insertelement <2 x i32> %124, i32 %99, i64 1, !dbg !30
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !30
  %127 = shufflevector <2 x float> %126, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %128 = insertelement <8 x i32> poison, i32 %96, i64 0, !dbg !28
  %129 = insertelement <8 x i32> %128, i32 %98, i64 1, !dbg !28
  %130 = insertelement <8 x i32> %129, i32 %100, i64 2, !dbg !28
  %131 = insertelement <8 x i32> %130, i32 %101, i64 3, !dbg !28
  %132 = insertelement <8 x i32> %131, i32 %102, i64 4, !dbg !28
  %133 = insertelement <8 x i32> %132, i32 %103, i64 5, !dbg !28
  %134 = insertelement <8 x i32> %133, i32 %104, i64 6, !dbg !28
  %135 = insertelement <8 x i32> %134, i32 %105, i64 7, !dbg !28
  %136 = bitcast <8 x i32> %135 to <8 x float>, !dbg !28
  %137 = fsub <8 x float> %136, %127, !dbg !40
  %138 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !36
  %139 = insertelement <2 x i32> %138, i32 %107, i64 1, !dbg !36
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !36
  %141 = shufflevector <2 x float> %140, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !36
  %142 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !34
  %143 = insertelement <2 x i32> %142, i32 %109, i64 1, !dbg !34
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !34
  %145 = shufflevector <2 x float> %144, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %146 = insertelement <8 x float> poison, float %123, i64 0, !dbg !41
  %147 = insertelement <8 x float> %146, float %122, i64 1, !dbg !41
  %148 = shufflevector <8 x float> %147, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !41
  %149 = fmul <8 x float> %137, %148, !dbg !41
  %150 = fmul <8 x float> %149, %145, !dbg !42
  %151 = fadd <8 x float> %150, %141, !dbg !43
  %152 = fcmp ole <8 x float> %151, zeroinitializer, !dbg !44
  %153 = select <8 x i1> %152, <8 x float> zeroinitializer, <8 x float> %151, !dbg !44
  %154 = fcmp olt <8 x float> %153, splat (float 6.000000e+00), !dbg !48
  %155 = extractelement <8 x float> %153, i64 7, !dbg !50
  %156 = fcmp uno float %155, 0.000000e+00, !dbg !50
  %157 = extractelement <8 x float> %153, i64 6, !dbg !50
  %158 = fcmp uno float %157, 0.000000e+00, !dbg !50
  %159 = extractelement <8 x float> %153, i64 5, !dbg !50
  %160 = fcmp uno float %159, 0.000000e+00, !dbg !50
  %161 = extractelement <8 x float> %153, i64 4, !dbg !50
  %162 = fcmp uno float %161, 0.000000e+00, !dbg !50
  %163 = extractelement <8 x float> %153, i64 3, !dbg !50
  %164 = fcmp uno float %163, 0.000000e+00, !dbg !50
  %165 = extractelement <8 x float> %153, i64 2, !dbg !50
  %166 = fcmp uno float %165, 0.000000e+00, !dbg !50
  %167 = extractelement <8 x float> %153, i64 1, !dbg !50
  %168 = fcmp uno float %167, 0.000000e+00, !dbg !50
  %169 = extractelement <8 x float> %153, i64 0, !dbg !50
  %170 = fcmp uno float %169, 0.000000e+00, !dbg !50
  %171 = extractelement <8 x i1> %154, i64 7, !dbg !51
  %172 = or i1 %171, %156, !dbg !51
  %173 = extractelement <8 x i1> %154, i64 6, !dbg !51
  %174 = or i1 %173, %158, !dbg !51
  %175 = extractelement <8 x i1> %154, i64 5, !dbg !51
  %176 = or i1 %175, %160, !dbg !51
  %177 = extractelement <8 x i1> %154, i64 4, !dbg !51
  %178 = or i1 %177, %162, !dbg !51
  %179 = extractelement <8 x i1> %154, i64 3, !dbg !51
  %180 = or i1 %179, %164, !dbg !51
  %181 = extractelement <8 x i1> %154, i64 2, !dbg !51
  %182 = or i1 %181, %166, !dbg !51
  %183 = extractelement <8 x i1> %154, i64 1, !dbg !51
  %184 = or i1 %183, %168, !dbg !51
  %185 = extractelement <8 x i1> %154, i64 0, !dbg !51
  %186 = or i1 %185, %170, !dbg !51
  %187 = select i1 %172, float %155, float 6.000000e+00, !dbg !52
  %188 = select i1 %174, float %157, float 6.000000e+00, !dbg !52
  %189 = select i1 %176, float %159, float 6.000000e+00, !dbg !52
  %190 = select i1 %178, float %161, float 6.000000e+00, !dbg !52
  %191 = select i1 %180, float %163, float 6.000000e+00, !dbg !52
  %192 = select i1 %182, float %165, float 6.000000e+00, !dbg !52
  %193 = select i1 %184, float %167, float 6.000000e+00, !dbg !52
  %194 = select i1 %186, float %169, float 6.000000e+00, !dbg !52
  %195 = shl i32 %116, 4, !dbg !53
  %196 = shl i32 %117, 4, !dbg !53
  %197 = add i32 %112, %195, !dbg !54
  %198 = add i32 %112, %196, !dbg !54
  %199 = sext i32 %197 to i64, !dbg !55
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !55
  %201 = sext i32 %198 to i64, !dbg !55
  %202 = getelementptr float, ptr addrspace(1) %5, i64 %201, !dbg !55
  %203 = shl i32 %12, 5, !dbg !56
  %204 = and i32 %203, 992, !dbg !56
  %205 = or disjoint i32 %204, %20, !dbg !56
  %206 = and i32 %110, 508, !dbg !56
  %207 = lshr exact i32 %204, 2, !dbg !56
  %208 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %207, !dbg !56
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %205, !dbg !56
  %210 = bitcast float %187 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #4, !dbg !56
  %211 = or disjoint i32 %205, 16, !dbg !56
  %212 = lshr i32 %211, 4, !dbg !56
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !56
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %211, !dbg !56
  %215 = bitcast float %188 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #4, !dbg !56
  %216 = or disjoint i32 %205, 4, !dbg !56
  %217 = getelementptr float, ptr addrspace(3) %208, i32 %216, !dbg !56
  %218 = bitcast float %189 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #4, !dbg !56
  %219 = or disjoint i32 %205, 20, !dbg !56
  %220 = lshr i32 %219, 4, !dbg !56
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !56
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %219, !dbg !56
  %223 = bitcast float %190 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #4, !dbg !56
  %224 = or disjoint i32 %205, 8, !dbg !56
  %225 = getelementptr float, ptr addrspace(3) %208, i32 %224, !dbg !56
  %226 = bitcast float %191 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #4, !dbg !56
  %227 = or disjoint i32 %205, 24, !dbg !56
  %228 = lshr i32 %227, 4, !dbg !56
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !56
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %227, !dbg !56
  %231 = bitcast float %192 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !56
  %232 = or disjoint i32 %205, 12, !dbg !56
  %233 = getelementptr float, ptr addrspace(3) %208, i32 %232, !dbg !56
  %234 = bitcast float %193 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #4, !dbg !56
  %235 = or disjoint i32 %205, 28, !dbg !56
  %236 = lshr i32 %235, 4, !dbg !56
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !56
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %235, !dbg !56
  %239 = bitcast float %194 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %240 = lshr i32 %206, 4, !dbg !56
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !56
  %242 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %206, !dbg !56
  %243 = load i32, ptr addrspace(3) %242, align 4, !dbg !56
  %244 = or disjoint i32 %206, 1, !dbg !56
  %245 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %244, !dbg !56
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !56
  %247 = or disjoint i32 %206, 2, !dbg !56
  %248 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %247, !dbg !56
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !56
  %250 = or disjoint i32 %206, 3, !dbg !56
  %251 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %250, !dbg !56
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !56
  %253 = or disjoint i32 %206, 512, !dbg !56
  %254 = lshr i32 %253, 4, !dbg !56
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !56
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %253, !dbg !56
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !56
  %258 = or disjoint i32 %206, 513, !dbg !56
  %259 = lshr i32 %258, 4, !dbg !56
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !56
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %258, !dbg !56
  %262 = load i32, ptr addrspace(3) %261, align 4, !dbg !56
  %263 = or disjoint i32 %206, 514, !dbg !56
  %264 = lshr i32 %263, 4, !dbg !56
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !56
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %263, !dbg !56
  %267 = load i32, ptr addrspace(3) %266, align 4, !dbg !56
  %268 = or disjoint i32 %206, 515, !dbg !56
  %269 = lshr i32 %268, 4, !dbg !56
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !56
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %268, !dbg !56
  %272 = load i32, ptr addrspace(3) %271, align 4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %243, i32 %246, i32 %249, i32 %252, ptr addrspace(1) %200, i1 %121) #4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %262, i32 %267, i32 %272, ptr addrspace(1) %202, i1 %119) #4, !dbg !56
  %273 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !57
  %274 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !57
  %275 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !57
  %276 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !57
  %277 = bitcast float %187 to i32, !dbg !58
  %278 = bitcast float %188 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %277, i32 %278, ptr addrspace(1) %273, i1 %49) #4, !dbg !58
  %279 = bitcast float %189 to i32, !dbg !58
  %280 = bitcast float %190 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %279, i32 %280, ptr addrspace(1) %274, i1 %50) #4, !dbg !58
  %281 = bitcast float %191 to i32, !dbg !58
  %282 = bitcast float %192 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %281, i32 %282, ptr addrspace(1) %275, i1 %51) #4, !dbg !58
  %283 = bitcast float %193 to i32, !dbg !58
  %284 = bitcast float %194 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %283, i32 %284, ptr addrspace(1) %276, i1 %52) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2pzzijc735sxjb72dr6so7ubglxiju7skdcarifq5m7re7d4efi.py", directory: "inductor_cache/2p")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!51 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!53 = !DILocation(line: 52, column: 33, scope: !7)
!54 = !DILocation(line: 52, column: 30, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 52, column: 45, scope: !7)
!57 = !DILocation(line: 53, column: 25, scope: !7)
!58 = !DILocation(line: 53, column: 56, scope: !7)
!59 = !DILocation(line: 53, column: 4, scope: !7)
