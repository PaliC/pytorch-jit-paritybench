; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %11 = and i32 %8, 128, !dbg !12
  %.lobit = lshr exact i32 %11, 7, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %.lobit, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 4, !dbg !13
  %16 = or disjoint i32 %13, 6, !dbg !13
  %17 = icmp slt i32 %12, 8, !dbg !14
  %18 = icmp slt i32 %13, 8, !dbg !14
  %19 = icmp slt i32 %14, 8, !dbg !14
  %20 = icmp slt i32 %15, 8, !dbg !14
  %21 = icmp slt i32 %16, 8, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 9, !dbg !16
  %24 = lshr i32 %8, 2, !dbg !17
  %25 = and i32 %24, 31, !dbg !17
  %26 = lshr exact i32 %11, 2, !dbg !17
  %27 = or disjoint i32 %25, %26, !dbg !17
  %28 = or disjoint i32 %27, 64, !dbg !17
  %29 = or disjoint i32 %27, 128, !dbg !17
  %30 = or disjoint i32 %27, 192, !dbg !17
  %31 = or disjoint i32 %27, 256, !dbg !17
  %32 = or disjoint i32 %27, 320, !dbg !17
  %33 = or disjoint i32 %27, 384, !dbg !17
  %34 = or disjoint i32 %27, 448, !dbg !17
  %35 = shl i32 %8, 2, !dbg !17
  %36 = and i32 %35, 508, !dbg !17
  %37 = or disjoint i32 %23, %27, !dbg !18
  %38 = or disjoint i32 %23, %28, !dbg !18
  %39 = or disjoint i32 %23, %29, !dbg !18
  %40 = or disjoint i32 %23, %30, !dbg !18
  %41 = or disjoint i32 %23, %31, !dbg !18
  %42 = or disjoint i32 %23, %32, !dbg !18
  %43 = or disjoint i32 %23, %33, !dbg !18
  %44 = or disjoint i32 %23, %34, !dbg !18
  %45 = or disjoint i32 %23, %36, !dbg !18
  %46 = shl i32 %37, 1, !dbg !19
  %47 = shl i32 %38, 1, !dbg !19
  %48 = shl i32 %39, 1, !dbg !19
  %49 = shl i32 %40, 1, !dbg !19
  %50 = shl i32 %41, 1, !dbg !19
  %51 = shl i32 %42, 1, !dbg !19
  %52 = shl i32 %43, 1, !dbg !19
  %53 = shl i32 %44, 1, !dbg !19
  %54 = shl i32 %12, 12, !dbg !20
  %55 = add i32 %46, %54, !dbg !21
  %56 = add i32 %47, %54, !dbg !21
  %57 = add i32 %48, %54, !dbg !21
  %58 = add i32 %49, %54, !dbg !21
  %59 = add i32 %50, %54, !dbg !21
  %60 = add i32 %51, %54, !dbg !21
  %61 = add i32 %52, %54, !dbg !21
  %62 = add i32 %53, %54, !dbg !21
  %63 = sext i32 %55 to i64, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !22
  %65 = sext i32 %56 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !22
  %67 = sext i32 %57 to i64, !dbg !22
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !22
  %69 = sext i32 %58 to i64, !dbg !22
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !22
  %71 = sext i32 %59 to i64, !dbg !22
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !22
  %73 = sext i32 %60 to i64, !dbg !22
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !22
  %75 = sext i32 %61 to i64, !dbg !22
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !22
  %77 = sext i32 %62 to i64, !dbg !22
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !22
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %17) #2, !dbg !23
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !23
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !23
  %82 = bitcast i32 %80 to float, !dbg !23
  %83 = bitcast i32 %81 to float, !dbg !23
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %17) #2, !dbg !23
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !23
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !23
  %87 = bitcast i32 %85 to float, !dbg !23
  %88 = bitcast i32 %86 to float, !dbg !23
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %17) #2, !dbg !23
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !23
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !23
  %92 = bitcast i32 %90 to float, !dbg !23
  %93 = bitcast i32 %91 to float, !dbg !23
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %17) #2, !dbg !23
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !23
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !23
  %97 = bitcast i32 %95 to float, !dbg !23
  %98 = bitcast i32 %96 to float, !dbg !23
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %17) #2, !dbg !23
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !23
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !23
  %102 = bitcast i32 %100 to float, !dbg !23
  %103 = bitcast i32 %101 to float, !dbg !23
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %17) #2, !dbg !23
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !23
  %106 = extractvalue { i32, i32 } %104, 1, !dbg !23
  %107 = bitcast i32 %105 to float, !dbg !23
  %108 = bitcast i32 %106 to float, !dbg !23
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %17) #2, !dbg !23
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !23
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !23
  %112 = bitcast i32 %110 to float, !dbg !23
  %113 = bitcast i32 %111 to float, !dbg !23
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 %17) #2, !dbg !23
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !23
  %116 = extractvalue { i32, i32 } %114, 1, !dbg !23
  %117 = bitcast i32 %115 to float, !dbg !23
  %118 = bitcast i32 %116 to float, !dbg !23
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %1, i1 %17) #2, !dbg !24
  %120 = extractvalue { i32, i32 } %119, 0, !dbg !24
  %121 = extractvalue { i32, i32 } %119, 1, !dbg !24
  %122 = bitcast i32 %120 to float, !dbg !24
  %123 = bitcast i32 %121 to float, !dbg !24
  %124 = fadd float %82, %122, !dbg !25
  %125 = fadd float %83, %123, !dbg !25
  %126 = fadd float %87, %122, !dbg !25
  %127 = fadd float %88, %123, !dbg !25
  %128 = fadd float %92, %122, !dbg !25
  %129 = fadd float %93, %123, !dbg !25
  %130 = fadd float %97, %122, !dbg !25
  %131 = fadd float %98, %123, !dbg !25
  %132 = fadd float %102, %122, !dbg !25
  %133 = fadd float %103, %123, !dbg !25
  %134 = fadd float %107, %122, !dbg !25
  %135 = fadd float %108, %123, !dbg !25
  %136 = fadd float %112, %122, !dbg !25
  %137 = fadd float %113, %123, !dbg !25
  %138 = fadd float %117, %122, !dbg !25
  %139 = fadd float %118, %123, !dbg !25
  %140 = shl i32 %13, 12, !dbg !26
  %141 = shl i32 %14, 12, !dbg !26
  %142 = shl i32 %15, 12, !dbg !26
  %143 = shl i32 %16, 12, !dbg !26
  %144 = add i32 %45, %140, !dbg !27
  %145 = add i32 %45, %141, !dbg !27
  %146 = add i32 %45, %142, !dbg !27
  %147 = add i32 %45, %143, !dbg !27
  %148 = sext i32 %144 to i64, !dbg !28
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !28
  %150 = sext i32 %145 to i64, !dbg !28
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !28
  %152 = sext i32 %146 to i64, !dbg !28
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !28
  %154 = sext i32 %147 to i64, !dbg !28
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !28
  %156 = shl i32 %8, 10, !dbg !29
  %157 = and i32 %156, 3072, !dbg !29
  %158 = or disjoint i32 %157, %25, !dbg !29
  %159 = or disjoint i32 %158, %26, !dbg !29
  %160 = and i32 %35, 1020, !dbg !29
  %161 = lshr exact i32 %157, 7, !dbg !29
  %162 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %161, !dbg !29
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %159, !dbg !29
  %164 = bitcast float %124 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !29
  %165 = or disjoint i32 %159, 512, !dbg !29
  %166 = lshr i32 %165, 9, !dbg !29
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !29
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !29
  %169 = bitcast float %125 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !29
  %170 = or disjoint i32 %159, 64, !dbg !29
  %171 = getelementptr float, ptr addrspace(3) %162, i32 %170, !dbg !29
  %172 = bitcast float %126 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !29
  %173 = or disjoint i32 %159, 576, !dbg !29
  %174 = lshr i32 %173, 9, !dbg !29
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !29
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %173, !dbg !29
  %177 = bitcast float %127 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !29
  %178 = or disjoint i32 %159, 128, !dbg !29
  %179 = getelementptr float, ptr addrspace(3) %162, i32 %178, !dbg !29
  %180 = bitcast float %128 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !29
  %181 = or disjoint i32 %159, 640, !dbg !29
  %182 = lshr i32 %181, 9, !dbg !29
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !29
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %181, !dbg !29
  %185 = bitcast float %129 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !29
  %186 = or disjoint i32 %159, 192, !dbg !29
  %187 = getelementptr float, ptr addrspace(3) %162, i32 %186, !dbg !29
  %188 = bitcast float %130 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !29
  %189 = or disjoint i32 %159, 704, !dbg !29
  %190 = lshr i32 %189, 9, !dbg !29
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !29
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !29
  %193 = bitcast float %131 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !29
  %194 = or disjoint i32 %159, 256, !dbg !29
  %195 = getelementptr float, ptr addrspace(3) %162, i32 %194, !dbg !29
  %196 = bitcast float %132 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !29
  %197 = or disjoint i32 %159, 768, !dbg !29
  %198 = lshr i32 %197, 9, !dbg !29
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %198, !dbg !29
  %200 = getelementptr float, ptr addrspace(3) %199, i32 %197, !dbg !29
  %201 = bitcast float %133 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !29
  %202 = or disjoint i32 %159, 320, !dbg !29
  %203 = getelementptr float, ptr addrspace(3) %162, i32 %202, !dbg !29
  %204 = bitcast float %134 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !29
  %205 = or disjoint i32 %159, 832, !dbg !29
  %206 = lshr i32 %205, 9, !dbg !29
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %206, !dbg !29
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %205, !dbg !29
  %209 = bitcast float %135 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !29
  %210 = or disjoint i32 %159, 384, !dbg !29
  %211 = getelementptr float, ptr addrspace(3) %162, i32 %210, !dbg !29
  %212 = bitcast float %136 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #2, !dbg !29
  %213 = or disjoint i32 %159, 896, !dbg !29
  %214 = lshr i32 %213, 9, !dbg !29
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !29
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %213, !dbg !29
  %217 = bitcast float %137 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !29
  %218 = or disjoint i32 %159, 448, !dbg !29
  %219 = getelementptr float, ptr addrspace(3) %162, i32 %218, !dbg !29
  %220 = bitcast float %138 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #2, !dbg !29
  %221 = or disjoint i32 %159, 960, !dbg !29
  %222 = lshr i32 %221, 9, !dbg !29
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !29
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %221, !dbg !29
  %225 = bitcast float %139 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %226 = lshr i32 %160, 9, !dbg !29
  %227 = or disjoint i32 %226, %160, !dbg !29
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !29
  %229 = load i32, ptr addrspace(3) %228, align 4, !dbg !29
  %230 = or disjoint i32 %160, 1, !dbg !29
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !29
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %230, !dbg !29
  %233 = load i32, ptr addrspace(3) %232, align 4, !dbg !29
  %234 = or disjoint i32 %227, 2, !dbg !29
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !29
  %236 = load i32, ptr addrspace(3) %235, align 4, !dbg !29
  %237 = or disjoint i32 %160, 3, !dbg !29
  %238 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %237, !dbg !29
  %239 = load i32, ptr addrspace(3) %238, align 4, !dbg !29
  %240 = or disjoint i32 %160, 1024, !dbg !29
  %241 = lshr i32 %240, 9, !dbg !29
  %242 = or disjoint i32 %241, %240, !dbg !29
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !29
  %244 = load i32, ptr addrspace(3) %243, align 4, !dbg !29
  %245 = or disjoint i32 %160, 1025, !dbg !29
  %246 = lshr i32 %245, 9, !dbg !29
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !29
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !29
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !29
  %250 = or disjoint i32 %160, 1026, !dbg !29
  %251 = lshr i32 %250, 9, !dbg !29
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !29
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %250, !dbg !29
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !29
  %255 = or disjoint i32 %160, 1027, !dbg !29
  %256 = lshr i32 %255, 9, !dbg !29
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !29
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %255, !dbg !29
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !29
  %260 = or disjoint i32 %160, 2048, !dbg !29
  %261 = lshr i32 %260, 9, !dbg !29
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !29
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !29
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !29
  %265 = or disjoint i32 %160, 2049, !dbg !29
  %266 = lshr i32 %265, 9, !dbg !29
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !29
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !29
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !29
  %270 = or disjoint i32 %160, 2050, !dbg !29
  %271 = lshr i32 %270, 9, !dbg !29
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !29
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !29
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !29
  %275 = or disjoint i32 %160, 2051, !dbg !29
  %276 = lshr i32 %275, 9, !dbg !29
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !29
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !29
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !29
  %280 = or disjoint i32 %160, 3072, !dbg !29
  %281 = lshr i32 %280, 9, !dbg !29
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !29
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !29
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !29
  %285 = or disjoint i32 %160, 3073, !dbg !29
  %286 = lshr i32 %285, 9, !dbg !29
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !29
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !29
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !29
  %290 = or disjoint i32 %160, 3074, !dbg !29
  %291 = lshr i32 %290, 9, !dbg !29
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !29
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !29
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !29
  %295 = or disjoint i32 %160, 3075, !dbg !29
  %296 = lshr i32 %295, 9, !dbg !29
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !29
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !29
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %229, i32 %233, i32 %236, i32 %239, ptr addrspace(1) %149, i1 %18) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %249, i32 %254, i32 %259, ptr addrspace(1) %151, i1 %19) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %264, i32 %269, i32 %274, i32 %279, ptr addrspace(1) %153, i1 %20) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %289, i32 %294, i32 %299, ptr addrspace(1) %155, i1 %21) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch3tzwbeqyu6zcmsjml3bh3zqxbcon54l2vrsjrriuxjhihf6dc3.py", directory: "inductor_cache/h3")
!4 = !{ptr @triton_poi_fused_convolution_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_48, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_48", linkageName: "triton_poi_fused_convolution_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 25, scope: !7)
!29 = !DILocation(line: 35, column: 46, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
