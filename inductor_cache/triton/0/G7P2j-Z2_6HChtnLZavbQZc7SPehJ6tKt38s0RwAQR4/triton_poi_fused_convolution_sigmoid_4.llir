; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_sigmoid_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = sdiv i32 %9, 4096, !dbg !14
  %11 = srem i32 %10, 3, !dbg !15
  %12 = sext i32 %9 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #1, !dbg !17
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !17
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !17
  %19 = bitcast i32 %15 to float, !dbg !17
  %20 = bitcast i32 %16 to float, !dbg !17
  %21 = bitcast i32 %17 to float, !dbg !17
  %22 = bitcast i32 %18 to float, !dbg !17
  %23 = sext i32 %11 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = fadd float %19, %26, !dbg !20
  %34 = fadd float %20, %28, !dbg !20
  %35 = fadd float %21, %30, !dbg !20
  %36 = fadd float %22, %32, !dbg !20
  %37 = fsub float 0.000000e+00, %33, !dbg !21
  %38 = fsub float 0.000000e+00, %34, !dbg !21
  %39 = fsub float 0.000000e+00, %35, !dbg !21
  %40 = fsub float 0.000000e+00, %36, !dbg !21
  %41 = fmul float %37, 0x3FF7154760000000, !dbg !25
  %42 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %41) #1, !dbg !25
  %43 = fmul float %38, 0x3FF7154760000000, !dbg !25
  %44 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %43) #1, !dbg !25
  %45 = fmul float %39, 0x3FF7154760000000, !dbg !25
  %46 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %45) #1, !dbg !25
  %47 = fmul float %40, 0x3FF7154760000000, !dbg !25
  %48 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %47) #1, !dbg !25
  %49 = fadd float %42, 1.000000e+00, !dbg !26
  %50 = fadd float %44, 1.000000e+00, !dbg !26
  %51 = fadd float %46, 1.000000e+00, !dbg !26
  %52 = fadd float %48, 1.000000e+00, !dbg !26
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %49) #1, !dbg !27
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %50) #1, !dbg !27
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %51) #1, !dbg !27
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %52) #1, !dbg !27
  %57 = bitcast float %53 to i32, !dbg !28
  %58 = bitcast float %54 to i32, !dbg !28
  %59 = bitcast float %55 to i32, !dbg !28
  %60 = bitcast float %56 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %57, i32 %58, i32 %59, i32 %60, ptr addrspace(1) %13, i1 true) #1, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci5bhva46kp7ajyuwyu6dur5upbp5zikuyo2gcrpmatjpid7tvn6.py", directory: "inductor_cache/i5")
!4 = !{ptr @triton_poi_fused_convolution_sigmoid_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_sigmoid_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_sigmoid_4", linkageName: "triton_poi_fused_convolution_sigmoid_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 18, scope: !7)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = !DILocation(line: 29, column: 22, scope: !7)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 30, column: 39, scope: !7)
!29 = !DILocation(line: 30, column: 4, scope: !7)
