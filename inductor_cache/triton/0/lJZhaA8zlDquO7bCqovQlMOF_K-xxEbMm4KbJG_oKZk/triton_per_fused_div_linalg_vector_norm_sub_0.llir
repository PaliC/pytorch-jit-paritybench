; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_linalg_vector_norm_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #5, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !14
  %27 = bitcast i32 %23 to float, !dbg !14
  %28 = bitcast i32 %24 to float, !dbg !14
  %29 = bitcast i32 %25 to float, !dbg !14
  %30 = bitcast i32 %26 to float, !dbg !14
  %31 = fsub float %17, %27, !dbg !15
  %32 = fsub float %18, %28, !dbg !15
  %33 = fsub float %19, %29, !dbg !15
  %34 = fsub float %20, %30, !dbg !15
  %35 = fmul float %31, %31, !dbg !16
  %36 = fmul float %32, %32, !dbg !16
  %37 = fmul float %33, %33, !dbg !16
  %38 = fmul float %34, %34, !dbg !16
  %39 = fadd float %35, %36, !dbg !17
  %40 = fadd float %37, %39, !dbg !17
  %41 = fadd float %38, %40, !dbg !17
  %42 = bitcast float %41 to i32, !dbg !22
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !22
  %44 = bitcast i32 %43 to float, !dbg !22
  %45 = fadd float %41, %44, !dbg !17
  %46 = bitcast float %45 to i32, !dbg !22
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = fadd float %45, %48, !dbg !17
  %50 = bitcast float %49 to i32, !dbg !22
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = fadd float %49, %52, !dbg !17
  %54 = bitcast float %53 to i32, !dbg !22
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = fadd float %53, %56, !dbg !17
  %58 = bitcast float %57 to i32, !dbg !22
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !22
  %60 = bitcast i32 %59 to float, !dbg !22
  %61 = fadd float %57, %60, !dbg !17
  %62 = icmp eq i32 %6, 0, !dbg !22
  %63 = and i32 %7, 1, !dbg !22
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !22
  %65 = bitcast float %61 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 %62) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %66 = icmp slt i32 %5, 2, !dbg !22
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !22
  %68 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %67, i1 %66) #5, !dbg !22
  %69 = bitcast i32 %68 to float, !dbg !22
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !22
  %71 = bitcast i32 %70 to float, !dbg !22
  %72 = fadd float %69, %71, !dbg !17
  %73 = and i32 %5, 1, !dbg !22
  %74 = icmp eq i32 %73, 0, !dbg !22
  %75 = and i1 %66, %74, !dbg !22
  %76 = bitcast float %72 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %76, i1 %75) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %77 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %78 = fadd float %77, 0.000000e+00, !dbg !23
  %79 = fmul float %17, %17, !dbg !27
  %80 = fmul float %18, %18, !dbg !27
  %81 = fmul float %19, %19, !dbg !27
  %82 = fmul float %20, %20, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %83 = fadd float %79, %80, !dbg !30
  %84 = fadd float %81, %83, !dbg !30
  %85 = fadd float %82, %84, !dbg !30
  %86 = bitcast float %85 to i32, !dbg !28
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !28
  %88 = bitcast i32 %87 to float, !dbg !28
  %89 = fadd float %85, %88, !dbg !30
  %90 = bitcast float %89 to i32, !dbg !28
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !28
  %92 = bitcast i32 %91 to float, !dbg !28
  %93 = fadd float %89, %92, !dbg !30
  %94 = bitcast float %93 to i32, !dbg !28
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !28
  %96 = bitcast i32 %95 to float, !dbg !28
  %97 = fadd float %93, %96, !dbg !30
  %98 = bitcast float %97 to i32, !dbg !28
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = fadd float %97, %100, !dbg !30
  %102 = bitcast float %101 to i32, !dbg !28
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = fadd float %101, %104, !dbg !30
  %106 = bitcast float %105 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %106, i1 %62) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %67, i1 %66) #5, !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = fadd float %108, %110, !dbg !30
  %112 = bitcast float %111 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %112, i1 %75) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %113 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %114 = fadd float %113, 0.000000e+00, !dbg !31
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i = icmp eq i32 %115, 0, !dbg !33
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i = icmp eq i32 %116, 0, !dbg !33
  br i1 %.not.i, label %122, label %117, !dbg !33

117:                                              ; preds = %4
  br i1 %.not1.i, label %120, label %118, !dbg !33

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

122:                                              ; preds = %4
  br i1 %.not1.i, label %125, label %123, !dbg !33

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %118, %120, %123, %125
  %.0.i = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !33
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i1 = icmp eq i32 %127, 0, !dbg !34
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !34
  %.not1.i4 = icmp eq i32 %128, 0, !dbg !34
  br i1 %.not.i1, label %134, label %129, !dbg !34

129:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %132, label %130, !dbg !34

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #5, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #5, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

134:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %137, label %135, !dbg !34

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #5, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #5, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %130, %132, %135, %137
  %.0.i3 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !34
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %.0.i, float %.0.i3) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %urem = and i32 %5, 63, !dbg !37
  %140 = icmp eq i32 %urem, 0, !dbg !37
  %141 = bitcast float %139 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %0, i1 %140) #5, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c677nvrb23yows4uylde4hydw6jqoafst77lssdgl4jiydabl4jh.py", directory: "inductor_cache/67")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_sub_0", linkageName: "triton_per_fused_div_linalg_vector_norm_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 18, scope: !7)
!17 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !21)
!18 = distinct !DILexicalBlockFile(scope: !20, file: !19, discriminator: 0)
!19 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!20 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!21 = !DILocation(line: 36, column: 57, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !21)
!23 = !DILocation(line: 73, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 36, column: 44, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !29)
!29 = !DILocation(line: 39, column: 58, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !29)
!31 = !DILocation(line: 73, column: 15, scope: !24, inlinedAt: !32)
!32 = !DILocation(line: 39, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 27, scope: !7)
!34 = !DILocation(line: 41, column: 27, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 4, scope: !7)
!37 = !DILocation(line: 44, column: 63, scope: !7)
!38 = !DILocation(line: 44, column: 4, scope: !7)
