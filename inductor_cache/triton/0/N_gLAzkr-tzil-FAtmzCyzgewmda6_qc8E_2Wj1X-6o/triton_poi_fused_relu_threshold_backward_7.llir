; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %9 = and i32 %.lobit1, 3, !dbg !12
  %10 = or disjoint i32 %7, 4, !dbg !13
  %11 = or disjoint i32 %7, 8, !dbg !13
  %12 = or disjoint i32 %7, 12, !dbg !13
  %13 = or disjoint i32 %7, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = icmp slt i32 %7, 4608, !dbg !14
  %18 = icmp slt i32 %13, 4608, !dbg !14
  %19 = icmp slt i32 %14, 4608, !dbg !14
  %20 = icmp slt i32 %15, 4608, !dbg !14
  %21 = icmp slt i32 %16, 4608, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 8, !dbg !16
  %24 = and i32 %8, 255, !dbg !17
  %25 = shl i32 %8, 2, !dbg !17
  %26 = and i32 %25, 252, !dbg !17
  %27 = or disjoint i32 %23, %24, !dbg !18
  %28 = or disjoint i32 %23, %26, !dbg !18
  %.frozen = freeze i32 %7, !dbg !19
  %29 = sdiv i32 %.frozen, 1152, !dbg !19
  %30 = mul i32 %29, 1152, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = srem i32 %10, 1152, !dbg !20
  %32 = srem i32 %11, 1152, !dbg !20
  %33 = srem i32 %12, 1152, !dbg !20
  %34 = mul i32 %27, 1152, !dbg !21
  %35 = mul i32 %29, 4718592, !dbg !22
  %36 = add i32 %34, %35, !dbg !23
  %37 = add i32 %36, %.decomposed, !dbg !24
  %38 = add i32 %36, %31, !dbg !24
  %39 = add i32 %36, %32, !dbg !24
  %40 = add i32 %36, %33, !dbg !24
  %41 = sext i32 %37 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %38 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %39 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %40 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %17) #2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %17) #2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %17) #2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %17) #2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = shl i32 %13, 12, !dbg !27
  %70 = shl i32 %14, 12, !dbg !27
  %71 = shl i32 %15, 12, !dbg !27
  %72 = shl i32 %16, 12, !dbg !27
  %73 = add i32 %28, %69, !dbg !28
  %74 = add i32 %28, %70, !dbg !28
  %75 = add i32 %28, %71, !dbg !28
  %76 = add i32 %28, %72, !dbg !28
  %77 = sext i32 %73 to i64, !dbg !29
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !29
  %79 = sext i32 %74 to i64, !dbg !29
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !29
  %81 = sext i32 %75 to i64, !dbg !29
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !29
  %83 = sext i32 %76 to i64, !dbg !29
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !29
  %85 = and i32 %25, 1020, !dbg !30
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !30
  %87 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 1028, !dbg !30
  %88 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 2056, !dbg !30
  %89 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 3084, !dbg !30
  %90 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 4112, !dbg !30
  %91 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 5140, !dbg !30
  %92 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 6168, !dbg !30
  %93 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 7196, !dbg !30
  %94 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 8224, !dbg !30
  %95 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 9252, !dbg !30
  %96 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 10280, !dbg !30
  %97 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 11308, !dbg !30
  %98 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 12336, !dbg !30
  %99 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 13364, !dbg !30
  %100 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 14392, !dbg !30
  %101 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 15420, !dbg !30
  %102 = lshr i32 %85, 8, !dbg !30
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !30
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %85, !dbg !30
  %105 = or disjoint i32 %85, 1, !dbg !30
  %106 = getelementptr float, ptr addrspace(3) %103, i32 %105, !dbg !30
  %107 = or disjoint i32 %85, 2, !dbg !30
  %108 = getelementptr float, ptr addrspace(3) %103, i32 %107, !dbg !30
  %109 = or disjoint i32 %85, 3, !dbg !30
  %110 = getelementptr float, ptr addrspace(3) %103, i32 %109, !dbg !30
  %111 = or disjoint i32 %85, 1024, !dbg !30
  %112 = lshr i32 %111, 8, !dbg !30
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !30
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !30
  %115 = or disjoint i32 %85, 1025, !dbg !30
  %116 = lshr i32 %115, 8, !dbg !30
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !30
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !30
  %119 = or disjoint i32 %85, 1026, !dbg !30
  %120 = lshr i32 %119, 8, !dbg !30
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !30
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %119, !dbg !30
  %123 = or disjoint i32 %85, 1027, !dbg !30
  %124 = lshr i32 %123, 8, !dbg !30
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !30
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !30
  %127 = or disjoint i32 %85, 2048, !dbg !30
  %128 = lshr i32 %127, 8, !dbg !30
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !30
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !30
  %131 = or disjoint i32 %85, 2049, !dbg !30
  %132 = lshr i32 %131, 8, !dbg !30
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !30
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !30
  %135 = or disjoint i32 %85, 2050, !dbg !30
  %136 = lshr i32 %135, 8, !dbg !30
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !30
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %135, !dbg !30
  %139 = or disjoint i32 %85, 2051, !dbg !30
  %140 = lshr i32 %139, 8, !dbg !30
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !30
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !30
  %143 = or disjoint i32 %85, 3072, !dbg !30
  %144 = lshr i32 %143, 8, !dbg !30
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !30
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !30
  %147 = or disjoint i32 %85, 3073, !dbg !30
  %148 = lshr i32 %147, 8, !dbg !30
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !30
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !30
  %151 = or disjoint i32 %85, 3074, !dbg !30
  %152 = lshr i32 %151, 8, !dbg !30
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !30
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !30
  %155 = or disjoint i32 %85, 3075, !dbg !30
  %156 = lshr i32 %155, 8, !dbg !30
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !30
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %155, !dbg !30
  %159 = getelementptr i1, ptr addrspace(1) %2, i64 %41, !dbg !31
  %160 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !26
  %161 = insertelement <4 x i32> %160, i32 %51, i64 1, !dbg !26
  %162 = insertelement <4 x i32> %161, i32 %52, i64 2, !dbg !26
  %163 = insertelement <4 x i32> %162, i32 %53, i64 3, !dbg !26
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !26
  %165 = fcmp olt <4 x float> %164, zeroinitializer, !dbg !32
  %166 = select <4 x i1> %165, <4 x float> zeroinitializer, <4 x float> %164, !dbg !36
  %167 = fcmp ole <4 x float> %166, zeroinitializer, !dbg !37
  %168 = extractelement <4 x float> %166, i64 0, !dbg !30
  %169 = bitcast float %168 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %169, i1 true) #2, !dbg !30
  %170 = extractelement <4 x float> %166, i64 1, !dbg !30
  %171 = bitcast float %170 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %171, i1 true) #2, !dbg !30
  %172 = extractelement <4 x float> %166, i64 2, !dbg !30
  %173 = bitcast float %172 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %173, i1 true) #2, !dbg !30
  %174 = extractelement <4 x float> %166, i64 3, !dbg !30
  %175 = bitcast float %174 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %175, i1 true) #2, !dbg !30
  %176 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !26
  %177 = insertelement <4 x i32> %176, i32 %56, i64 1, !dbg !26
  %178 = insertelement <4 x i32> %177, i32 %57, i64 2, !dbg !26
  %179 = insertelement <4 x i32> %178, i32 %58, i64 3, !dbg !26
  %180 = bitcast <4 x i32> %179 to <4 x float>, !dbg !26
  %181 = fcmp olt <4 x float> %180, zeroinitializer, !dbg !32
  %182 = select <4 x i1> %181, <4 x float> zeroinitializer, <4 x float> %180, !dbg !36
  %183 = fcmp ole <4 x float> %182, zeroinitializer, !dbg !37
  %184 = extractelement <4 x float> %182, i64 0, !dbg !30
  %185 = bitcast float %184 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %185, i1 true) #2, !dbg !30
  %186 = extractelement <4 x float> %182, i64 1, !dbg !30
  %187 = bitcast float %186 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %187, i1 true) #2, !dbg !30
  %188 = extractelement <4 x float> %182, i64 2, !dbg !30
  %189 = bitcast float %188 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %189, i1 true) #2, !dbg !30
  %190 = extractelement <4 x float> %182, i64 3, !dbg !30
  %191 = bitcast float %190 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %191, i1 true) #2, !dbg !30
  %192 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !26
  %193 = insertelement <4 x i32> %192, i32 %61, i64 1, !dbg !26
  %194 = insertelement <4 x i32> %193, i32 %62, i64 2, !dbg !26
  %195 = insertelement <4 x i32> %194, i32 %63, i64 3, !dbg !26
  %196 = bitcast <4 x i32> %195 to <4 x float>, !dbg !26
  %197 = fcmp olt <4 x float> %196, zeroinitializer, !dbg !32
  %198 = select <4 x i1> %197, <4 x float> zeroinitializer, <4 x float> %196, !dbg !36
  %199 = fcmp ole <4 x float> %198, zeroinitializer, !dbg !37
  %200 = extractelement <4 x float> %198, i64 0, !dbg !30
  %201 = bitcast float %200 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %201, i1 true) #2, !dbg !30
  %202 = extractelement <4 x float> %198, i64 1, !dbg !30
  %203 = bitcast float %202 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %203, i1 true) #2, !dbg !30
  %204 = extractelement <4 x float> %198, i64 2, !dbg !30
  %205 = bitcast float %204 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %205, i1 true) #2, !dbg !30
  %206 = extractelement <4 x float> %198, i64 3, !dbg !30
  %207 = bitcast float %206 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %207, i1 true) #2, !dbg !30
  %208 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !26
  %209 = insertelement <4 x i32> %208, i32 %66, i64 1, !dbg !26
  %210 = insertelement <4 x i32> %209, i32 %67, i64 2, !dbg !26
  %211 = insertelement <4 x i32> %210, i32 %68, i64 3, !dbg !26
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !26
  %213 = fcmp olt <4 x float> %212, zeroinitializer, !dbg !32
  %214 = select <4 x i1> %213, <4 x float> zeroinitializer, <4 x float> %212, !dbg !36
  %215 = fcmp ole <4 x float> %214, zeroinitializer, !dbg !37
  %216 = extractelement <4 x float> %214, i64 0, !dbg !30
  %217 = bitcast float %216 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %217, i1 true) #2, !dbg !30
  %218 = extractelement <4 x float> %214, i64 1, !dbg !30
  %219 = bitcast float %218 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %219, i1 true) #2, !dbg !30
  %220 = extractelement <4 x float> %214, i64 2, !dbg !30
  %221 = bitcast float %220 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %221, i1 true) #2, !dbg !30
  %222 = extractelement <4 x float> %214, i64 3, !dbg !30
  %223 = bitcast float %222 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %223, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %224 = load i32, ptr addrspace(3) %104, align 4, !dbg !30
  %225 = load i32, ptr addrspace(3) %106, align 4, !dbg !30
  %226 = load i32, ptr addrspace(3) %108, align 4, !dbg !30
  %227 = load i32, ptr addrspace(3) %110, align 4, !dbg !30
  %228 = load i32, ptr addrspace(3) %114, align 4, !dbg !30
  %229 = load i32, ptr addrspace(3) %118, align 4, !dbg !30
  %230 = load i32, ptr addrspace(3) %122, align 4, !dbg !30
  %231 = load i32, ptr addrspace(3) %126, align 4, !dbg !30
  %232 = load i32, ptr addrspace(3) %130, align 4, !dbg !30
  %233 = load i32, ptr addrspace(3) %134, align 4, !dbg !30
  %234 = load i32, ptr addrspace(3) %138, align 4, !dbg !30
  %235 = load i32, ptr addrspace(3) %142, align 4, !dbg !30
  %236 = load i32, ptr addrspace(3) %146, align 4, !dbg !30
  %237 = load i32, ptr addrspace(3) %150, align 4, !dbg !30
  %238 = load i32, ptr addrspace(3) %154, align 4, !dbg !30
  %239 = load i32, ptr addrspace(3) %158, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %224, i32 %225, i32 %226, i32 %227, ptr addrspace(1) %78, i1 %18) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %228, i32 %229, i32 %230, i32 %231, ptr addrspace(1) %80, i1 %19) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %233, i32 %234, i32 %235, ptr addrspace(1) %82, i1 %20) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %236, i32 %237, i32 %238, i32 %239, ptr addrspace(1) %84, i1 %21) #2, !dbg !30
  %240 = zext <4 x i1> %167 to <4 x i8>, !dbg !38
  %241 = bitcast <4 x i8> %240 to i32, !dbg !38
  %242 = zext <4 x i1> %183 to <4 x i8>, !dbg !38
  %243 = bitcast <4 x i8> %242 to i32, !dbg !38
  %244 = zext <4 x i1> %199 to <4 x i8>, !dbg !38
  %245 = bitcast <4 x i8> %244 to i32, !dbg !38
  %246 = zext <4 x i1> %215 to <4 x i8>, !dbg !38
  %247 = bitcast <4 x i8> %246 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %241, i32 %243, i32 %245, i32 %247, ptr addrspace(1) %159, i1 %17) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czomb7ro22ciqvmhk6qe5jp2ylauaaf3wnw4euhgxcdwgwzvl33n.py", directory: "inductor_cache/zo")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_7", linkageName: "triton_poi_fused_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 53, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 58, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 25, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 38, column: 25, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 34, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 36, column: 19, scope: !7)
!38 = !DILocation(line: 38, column: 59, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
