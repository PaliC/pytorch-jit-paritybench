; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_relu_threshold_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, 16, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = srem i32 %10, 4, !dbg !13
  %15 = shl i32 %10, 4, !dbg !14
  %16 = or disjoint i32 %15, %13, !dbg !15
  %17 = sext i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11) #4, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11) #4, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = sext i32 %14 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #4, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %11) #4, !dbg !21
  %28 = select i1 %11, float %20, float 0.000000e+00, !dbg !22
  %29 = select i1 %11, float %22, float 0.000000e+00, !dbg !22
  %30 = bitcast float %28 to i32, !dbg !23
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 8, i32 31), !dbg !23
  %32 = bitcast i32 %31 to float, !dbg !23
  %33 = fadd float %28, %32, !dbg !27
  %34 = bitcast float %33 to i32, !dbg !23
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 4, i32 31), !dbg !23
  %36 = bitcast i32 %35 to float, !dbg !23
  %37 = fadd float %33, %36, !dbg !27
  %38 = bitcast float %37 to i32, !dbg !23
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 2, i32 31), !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = fadd float %37, %40, !dbg !27
  %42 = bitcast float %41 to i32, !dbg !23
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = fadd float %41, %44, !dbg !27
  %46 = bitcast float %29 to i32, !dbg !23
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !23
  %48 = bitcast i32 %47 to float, !dbg !23
  %49 = fadd float %29, %48, !dbg !27
  %50 = bitcast float %49 to i32, !dbg !23
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !23
  %52 = bitcast i32 %51 to float, !dbg !23
  %53 = fadd float %49, %52, !dbg !27
  %54 = bitcast float %53 to i32, !dbg !23
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !23
  %56 = bitcast i32 %55 to float, !dbg !23
  %57 = fadd float %53, %56, !dbg !27
  %58 = bitcast float %57 to i32, !dbg !23
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !23
  %60 = bitcast i32 %59 to float, !dbg !23
  %61 = fadd float %57, %60, !dbg !27
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.600000e+01) #4, !dbg !29
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 1.600000e+01) #4, !dbg !29
  %64 = fsub float %20, %62, !dbg !30
  %65 = fsub float %22, %63, !dbg !30
  %66 = fmul float %64, %64, !dbg !31
  %67 = fmul float %65, %65, !dbg !31
  %68 = select i1 %11, float %66, float 0.000000e+00, !dbg !32
  %69 = select i1 %11, float %67, float 0.000000e+00, !dbg !32
  %70 = bitcast float %68 to i32, !dbg !33
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 8, i32 31), !dbg !33
  %72 = bitcast i32 %71 to float, !dbg !33
  %73 = fadd float %68, %72, !dbg !35
  %74 = bitcast float %73 to i32, !dbg !33
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 4, i32 31), !dbg !33
  %76 = bitcast i32 %75 to float, !dbg !33
  %77 = fadd float %73, %76, !dbg !35
  %78 = bitcast float %77 to i32, !dbg !33
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !33
  %80 = bitcast i32 %79 to float, !dbg !33
  %81 = fadd float %77, %80, !dbg !35
  %82 = bitcast float %81 to i32, !dbg !33
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !33
  %84 = bitcast i32 %83 to float, !dbg !33
  %85 = fadd float %81, %84, !dbg !35
  %86 = bitcast float %69 to i32, !dbg !33
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !33
  %88 = bitcast i32 %87 to float, !dbg !33
  %89 = fadd float %69, %88, !dbg !35
  %90 = bitcast float %89 to i32, !dbg !33
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !33
  %92 = bitcast i32 %91 to float, !dbg !33
  %93 = fadd float %89, %92, !dbg !35
  %94 = bitcast float %93 to i32, !dbg !33
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !33
  %96 = bitcast i32 %95 to float, !dbg !33
  %97 = fadd float %93, %96, !dbg !35
  %98 = bitcast float %97 to i32, !dbg !33
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !33
  %100 = bitcast i32 %99 to float, !dbg !33
  %101 = fadd float %97, %100, !dbg !35
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 1.600000e+01) #4, !dbg !36
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 1.600000e+01) #4, !dbg !36
  %104 = fadd float %102, 0x3EE4F8B580000000, !dbg !37
  %105 = fadd float %103, 0x3EE4F8B580000000, !dbg !37
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %106, 0, !dbg !38
  br i1 %.not.i, label %109, label %107, !dbg !38

107:                                              ; preds = %9
  %108 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %104), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

109:                                              ; preds = %9
  %110 = tail call float @llvm.nvvm.rsqrt.approx.f(float %104), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %107, %109
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], !dbg !38
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i1 = icmp eq i32 %111, 0, !dbg !38
  br i1 %.not.i1, label %114, label %112, !dbg !38

112:                                              ; preds = %__nv_rsqrtf.exit
  %113 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %105), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

114:                                              ; preds = %__nv_rsqrtf.exit
  %115 = tail call float @llvm.nvvm.rsqrt.approx.f(float %105), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

__nv_rsqrtf.exit3:                                ; preds = %112, %114
  %.0.i2 = phi float [ %113, %112 ], [ %115, %114 ], !dbg !38
  %116 = bitcast i32 %27 to float, !dbg !21
  %117 = bitcast i32 %25 to float, !dbg !19
  %118 = fmul float %64, %.0.i, !dbg !39
  %119 = fmul float %118, %117, !dbg !40
  %120 = fadd float %119, %116, !dbg !41
  %121 = fcmp olt float %120, 0.000000e+00, !dbg !42
  %122 = select i1 %121, float 0.000000e+00, float %120, !dbg !46
  %123 = fcmp ole float %122, 0.000000e+00, !dbg !47
  %124 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !48
  %125 = and i32 %12, 48, !dbg !49
  %126 = icmp eq i32 %125, 0, !dbg !49
  %127 = bitcast float %122 to i32, !dbg !49
  %128 = and i1 %126, %11, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %124, i1 %128) #4, !dbg !49
  %129 = getelementptr i1, ptr addrspace(1) %5, i64 %17, !dbg !50
  %130 = zext i1 %123 to i8, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %130, ptr addrspace(1) %129, i1 %128) #4, !dbg !51
  %131 = sext i32 %10 to i64, !dbg !52
  %132 = getelementptr float, ptr addrspace(1) %6, i64 %131, !dbg !52
  %urem = and i32 %12, 63, !dbg !53
  %133 = icmp eq i32 %urem, 0, !dbg !53
  %134 = bitcast float %.0.i2 to i32, !dbg !53
  %135 = and i1 %133, %11, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %132, i1 %135) #4, !dbg !53
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %131, !dbg !54
  %137 = bitcast float %63 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %136, i1 %135) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clgvkhldtzmo6cpwkmf6ngdpdeiver63qxrjocquby6ymdutjrpt.py", directory: "inductor_cache/lg")
!4 = !{ptr @triton_per_fused_native_group_norm_relu_threshold_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_relu_threshold_backward_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_relu_threshold_backward_0", linkageName: "triton_per_fused_native_group_norm_relu_threshold_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 38, column: 33, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 39, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 42, column: 19, scope: !7)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 35, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !34)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 28, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 58, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 60, column: 21, scope: !7)
!48 = !DILocation(line: 61, column: 25, scope: !7)
!49 = !DILocation(line: 61, column: 45, scope: !7)
!50 = !DILocation(line: 62, column: 25, scope: !7)
!51 = !DILocation(line: 62, column: 45, scope: !7)
!52 = !DILocation(line: 63, column: 25, scope: !7)
!53 = !DILocation(line: 63, column: 37, scope: !7)
!54 = !DILocation(line: 64, column: 25, scope: !7)
!55 = !DILocation(line: 64, column: 37, scope: !7)
!56 = !DILocation(line: 64, column: 4, scope: !7)
