; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_sort_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 1, !dbg !12
  %9 = and i32 %7, 3, !dbg !12
  %10 = and i32 %7, 31, !dbg !12
  %11 = lshr i32 %7, 2, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %7, 32, !dbg !12
  %14 = lshr exact i32 %13, 2, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !12
  %16 = or disjoint i32 %6, %10, !dbg !13
  %17 = or disjoint i32 %6, %15, !dbg !13
  %18 = or disjoint i32 %17, 16, !dbg !13
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = icmp slt i32 %17, 512, !dbg !14
  %21 = icmp slt i32 %18, 512, !dbg !14
  %.lobit2 = lshr exact i32 %13, 5, !dbg !15
  %22 = icmp eq i32 %13, 0, !dbg !16
  %23 = icmp ne i32 %9, 3, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %24 = sdiv i32 %.frozen, 8, !dbg !17
  %25 = mul i32 %24, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = mul i32 %24, 10, !dbg !19
  %27 = add i32 %26, %.decomposed, !dbg !20
  %28 = add i32 %27, %.lobit2, !dbg !21
  %29 = add i32 %27, 2, !dbg !20
  %30 = add i32 %29, %.lobit2, !dbg !21
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = sext i32 %30 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = and i1 %22, %19, !dbg !23
  %36 = and i1 %23, %20, !dbg !23
  %37 = and i1 %23, %21, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %19, i32 0, i1 %19) #3, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35) #3, !dbg !24
  %40 = shl i32 %7, 2, !dbg !24
  %41 = and i32 %40, 124, !dbg !24
  %42 = or disjoint i32 %41, %.lobit2, !dbg !24
  %43 = and i32 %7, 63, !dbg !24
  %44 = lshr exact i32 %41, 2, !dbg !24
  %45 = add nuw nsw i32 %44, %42, !dbg !24
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %45, !dbg !24
  %47 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #3, !dbg !24
  %48 = or disjoint i32 %42, 2, !dbg !24
  %49 = add nuw nsw i32 %48, %44, !dbg !24
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49, !dbg !24
  %51 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %52 = lshr i32 %43, 2, !dbg !24
  %53 = add nuw nsw i32 %52, %43, !dbg !24
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53, !dbg !24
  %55 = load i32, ptr addrspace(3) %54, align 4, !dbg !24
  %56 = or disjoint i32 %43, 64, !dbg !24
  %57 = lshr i32 %56, 2, !dbg !24
  %58 = add nuw nsw i32 %57, %56, !dbg !24
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58, !dbg !24
  %60 = load i32, ptr addrspace(3) %59, align 4, !dbg !24
  %61 = trunc nuw nsw i32 %9 to i16, !dbg !25
  %62 = lshr i32 %7, 1, !dbg !26
  %63 = xor i32 %8, 1, !dbg !31
  %64 = mul nuw nsw i32 %55, %63, !dbg !33
  %65 = mul nuw nsw i32 %60, %63, !dbg !33
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !34
  %67 = add i32 %66, %64, !dbg !37
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !34
  %69 = add i32 %68, %65, !dbg !37
  %70 = mul nuw nsw i32 %55, %8, !dbg !39
  %71 = mul nuw nsw i32 %60, %8, !dbg !39
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !34
  %73 = add i32 %72, %70, !dbg !37
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !34
  %75 = add i32 %74, %71, !dbg !37
  %76 = bitcast i32 %67 to float, !dbg !40
  %77 = bitcast i32 %69 to float, !dbg !40
  %78 = bitcast i32 %73 to float, !dbg !41
  %79 = bitcast i32 %75 to float, !dbg !41
  %80 = trunc i32 %62 to i16, !dbg !42
  %81 = and i16 %80, 1, !dbg !42
  %82 = xor i16 %81, 1, !dbg !42
  %83 = trunc nuw nsw i32 %63 to i16, !dbg !42
  %84 = mul nuw nsw i16 %83, %61, !dbg !43
  %85 = zext nneg i16 %84 to i32, !dbg !34
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !34
  %87 = trunc i32 %86 to i16, !dbg !34
  %88 = add i16 %84, %87, !dbg !37
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !34
  %90 = trunc i32 %89 to i16, !dbg !34
  %91 = add i16 %84, %90, !dbg !37
  %92 = trunc nuw nsw i32 %8 to i16, !dbg !44
  %93 = mul nuw nsw i16 %61, %92, !dbg !45
  %94 = zext nneg i16 %93 to i32, !dbg !34
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !34
  %96 = trunc i32 %95 to i16, !dbg !34
  %97 = add i16 %93, %96, !dbg !37
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !34
  %99 = trunc i32 %98 to i16, !dbg !34
  %100 = add i16 %93, %99, !dbg !37
  %101 = icmp slt i16 %88, 3, !dbg !46
  %102 = icmp slt i16 %91, 3, !dbg !46
  %103 = icmp slt i16 %97, 3, !dbg !47
  %104 = icmp slt i16 %100, 3, !dbg !47
  %105 = fcmp ogt float %76, %78, !dbg !48
  %106 = fcmp ogt float %77, %79, !dbg !48
  %107 = xor i1 %101, true, !dbg !49
  %108 = and i1 %103, %107, !dbg !49
  %109 = xor i1 %102, true, !dbg !49
  %110 = and i1 %104, %109, !dbg !49
  %111 = xor i1 %101, %103, !dbg !50
  %112 = xor i1 %111, true, !dbg !50
  %113 = xor i1 %102, %104, !dbg !50
  %114 = xor i1 %113, true, !dbg !50
  %115 = and i1 %105, %112, !dbg !51
  %116 = and i1 %106, %114, !dbg !51
  %117 = or i1 %108, %115, !dbg !52
  %118 = or i1 %110, %116, !dbg !52
  %119 = trunc i32 %62 to i1, !dbg !53
  %120 = xor i1 %117, %119, !dbg !53
  %121 = xor i1 %118, %119, !dbg !53
  %122 = xor i32 %73, %67, !dbg !54
  %123 = xor i32 %75, %69, !dbg !54
  %124 = select i1 %120, i32 %122, i32 0, !dbg !55
  %125 = select i1 %121, i32 %123, i32 0, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %126 = shl i32 %7, 5, !dbg !55
  %127 = and i32 %126, 96, !dbg !55
  %128 = or disjoint i32 %127, %12, !dbg !55
  %129 = or disjoint i32 %128, %14, !dbg !55
  %130 = lshr exact i32 %127, 5, !dbg !55
  %131 = add nuw nsw i32 %129, %130, !dbg !55
  %132 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %131, !dbg !55
  %133 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #3, !dbg !55
  %134 = or disjoint i32 %129, 16, !dbg !55
  %135 = add nuw nsw i32 %134, %130, !dbg !55
  %136 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %135, !dbg !55
  %137 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #3, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %138 = lshr i32 %43, 5, !dbg !55
  %139 = add nuw nsw i32 %138, %43, !dbg !55
  %140 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %139, !dbg !55
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !55
  %142 = lshr i32 %56, 5, !dbg !55
  %143 = add nuw nsw i32 %142, %56, !dbg !55
  %144 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %143, !dbg !55
  %145 = load i32, ptr addrspace(3) %144, align 4, !dbg !55
  %146 = xor i32 %141, %38, !dbg !56
  %147 = xor i32 %145, %39, !dbg !56
  %148 = xor i16 %97, %88, !dbg !57
  %149 = xor i16 %100, %91, !dbg !57
  %150 = select i1 %120, i16 %148, i16 0, !dbg !58
  %151 = select i1 %121, i16 %149, i16 0, !dbg !58
  %152 = xor i16 %150, %61, !dbg !59
  %153 = xor i16 %151, %61, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %154 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %131, !dbg !59
  %155 = insertelement <1 x i16> poison, i16 %152, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %154, <1 x i16> %155, i1 true) #3, !dbg !59
  %156 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %135, !dbg !59
  %157 = insertelement <1 x i16> poison, i16 %153, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %156, <1 x i16> %157, i1 true) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %158 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %139, !dbg !59
  %159 = load i16, ptr addrspace(3) %158, align 2, !dbg !59
  %160 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %143, !dbg !59
  %161 = load i16, ptr addrspace(3) %160, align 2, !dbg !59
  %162 = bitcast i32 %146 to float, !dbg !40
  %163 = bitcast i32 %147 to float, !dbg !41
  %164 = mul nuw nsw i16 %152, %82, !dbg !43
  %165 = mul nuw nsw i16 %153, %82, !dbg !43
  %166 = zext i16 %164 to i32, !dbg !34
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 2, i32 31), !dbg !34
  %168 = trunc i32 %167 to i16, !dbg !34
  %169 = add i16 %164, %168, !dbg !37
  %170 = zext i16 %165 to i32, !dbg !34
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !34
  %172 = trunc i32 %171 to i16, !dbg !34
  %173 = add i16 %165, %172, !dbg !37
  %174 = mul nuw nsw i16 %152, %81, !dbg !45
  %175 = mul nuw nsw i16 %153, %81, !dbg !45
  %176 = zext i16 %174 to i32, !dbg !34
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !34
  %178 = trunc i32 %177 to i16, !dbg !34
  %179 = add i16 %174, %178, !dbg !37
  %180 = zext i16 %175 to i32, !dbg !34
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !34
  %182 = trunc i32 %181 to i16, !dbg !34
  %183 = add i16 %175, %182, !dbg !37
  %184 = icmp slt i16 %169, 3, !dbg !46
  %185 = icmp slt i16 %173, 3, !dbg !46
  %186 = icmp slt i16 %179, 3, !dbg !47
  %187 = icmp slt i16 %183, 3, !dbg !47
  %188 = fcmp ogt float %162, %163, !dbg !48
  %189 = xor i1 %184, true, !dbg !49
  %190 = and i1 %186, %189, !dbg !49
  %191 = xor i1 %185, true, !dbg !49
  %192 = and i1 %187, %191, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %193 = zext i1 %190 to i8, !dbg !49
  %194 = zext i1 %192 to i8, !dbg !49
  %195 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %131, !dbg !49
  %196 = insertelement <1 x i8> poison, i8 %193, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %195, <1 x i8> %196, i1 true) #3, !dbg !49
  %197 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %135, !dbg !49
  %198 = insertelement <1 x i8> poison, i8 %194, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %197, <1 x i8> %198, i1 true) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %199 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %139, !dbg !49
  %200 = load i8, ptr addrspace(3) %199, align 1, !dbg !49
  %201 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %143, !dbg !49
  %202 = load i8, ptr addrspace(3) %201, align 1, !dbg !49
  %203 = trunc i8 %200 to i1, !dbg !49
  %204 = trunc i8 %202 to i1, !dbg !49
  %205 = xor i1 %184, %186, !dbg !50
  %206 = xor i1 %205, true, !dbg !50
  %207 = xor i1 %185, %187, !dbg !50
  %208 = xor i1 %207, true, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %209 = zext i1 %206 to i8, !dbg !50
  %210 = zext i1 %208 to i8, !dbg !50
  %211 = insertelement <1 x i8> poison, i8 %209, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %195, <1 x i8> %211, i1 true) #3, !dbg !50
  %212 = insertelement <1 x i8> poison, i8 %210, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %197, <1 x i8> %212, i1 true) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %213 = load i8, ptr addrspace(3) %199, align 1, !dbg !50
  %214 = load i8, ptr addrspace(3) %201, align 1, !dbg !50
  %215 = trunc i8 %213 to i1, !dbg !50
  %216 = trunc i8 %214 to i1, !dbg !50
  %217 = and i1 %188, %215, !dbg !51
  %218 = and i1 %188, %216, !dbg !51
  %219 = or i1 %217, %203, !dbg !52
  %220 = or i1 %218, %204, !dbg !52
  %221 = select i1 %219, i32 %147, i32 %146, !dbg !56
  %222 = select i1 %220, i32 %146, i32 %147, !dbg !56
  %223 = xor i16 %179, %169, !dbg !57
  %224 = xor i16 %183, %173, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %225 = insertelement <1 x i16> poison, i16 %223, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %154, <1 x i16> %225, i1 true) #3, !dbg !57
  %226 = insertelement <1 x i16> poison, i16 %224, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %156, <1 x i16> %226, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %227 = load i16, ptr addrspace(3) %158, align 2, !dbg !57
  %228 = load i16, ptr addrspace(3) %160, align 2, !dbg !57
  %229 = select i1 %219, i16 %227, i16 0, !dbg !58
  %230 = select i1 %220, i16 %228, i16 0, !dbg !58
  %231 = xor i16 %229, %159, !dbg !59
  %232 = xor i16 %230, %161, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %233 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %45, !dbg !59
  %234 = insertelement <1 x i16> poison, i16 %231, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %233, <1 x i16> %234, i1 true) #3, !dbg !59
  %235 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %49, !dbg !59
  %236 = insertelement <1 x i16> poison, i16 %232, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %235, <1 x i16> %236, i1 true) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %237 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %53, !dbg !59
  %238 = load i16, ptr addrspace(3) %237, align 2, !dbg !59
  %239 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %58, !dbg !59
  %240 = load i16, ptr addrspace(3) %239, align 2, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %241 = insertelement <1 x i32> poison, i32 %221, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %241, i1 true) #3, !dbg !60
  %242 = insertelement <1 x i32> poison, i32 %222, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %242, i1 true) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %243 = load i32, ptr addrspace(3) %54, align 4, !dbg !60
  %244 = load i32, ptr addrspace(3) %59, align 4, !dbg !60
  %245 = mul nuw nsw i32 %243, %63, !dbg !33
  %246 = mul nuw nsw i32 %244, %63, !dbg !33
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 1, i32 31), !dbg !34
  %248 = add i32 %247, %245, !dbg !37
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 1, i32 31), !dbg !34
  %250 = add i32 %249, %246, !dbg !37
  %251 = mul nuw nsw i32 %243, %8, !dbg !39
  %252 = mul nuw nsw i32 %244, %8, !dbg !39
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !34
  %254 = add i32 %253, %251, !dbg !37
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !34
  %256 = add i32 %255, %252, !dbg !37
  %257 = bitcast i32 %248 to float, !dbg !40
  %258 = bitcast i32 %250 to float, !dbg !40
  %259 = bitcast i32 %254 to float, !dbg !41
  %260 = bitcast i32 %256 to float, !dbg !41
  %261 = mul nuw nsw i16 %238, %83, !dbg !43
  %262 = mul nuw nsw i16 %240, %83, !dbg !43
  %263 = zext i16 %261 to i32, !dbg !34
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 1, i32 31), !dbg !34
  %265 = trunc i32 %264 to i16, !dbg !34
  %266 = add i16 %261, %265, !dbg !37
  %267 = zext i16 %262 to i32, !dbg !34
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !34
  %269 = trunc i32 %268 to i16, !dbg !34
  %270 = add i16 %262, %269, !dbg !37
  %271 = mul nuw nsw i16 %238, %92, !dbg !45
  %272 = mul nuw nsw i16 %240, %92, !dbg !45
  %273 = zext i16 %271 to i32, !dbg !34
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !34
  %275 = trunc i32 %274 to i16, !dbg !34
  %276 = add i16 %271, %275, !dbg !37
  %277 = zext i16 %272 to i32, !dbg !34
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 1, i32 31), !dbg !34
  %279 = trunc i32 %278 to i16, !dbg !34
  %280 = add i16 %272, %279, !dbg !37
  %281 = icmp slt i16 %266, 3, !dbg !46
  %282 = icmp slt i16 %270, 3, !dbg !46
  %283 = icmp slt i16 %276, 3, !dbg !47
  %284 = icmp slt i16 %280, 3, !dbg !47
  %285 = fcmp ogt float %257, %259, !dbg !48
  %286 = fcmp ogt float %258, %260, !dbg !48
  %287 = xor i1 %281, true, !dbg !49
  %288 = and i1 %283, %287, !dbg !49
  %289 = xor i1 %282, true, !dbg !49
  %290 = and i1 %284, %289, !dbg !49
  %291 = xor i1 %281, %283, !dbg !50
  %292 = xor i1 %291, true, !dbg !50
  %293 = xor i1 %282, %284, !dbg !50
  %294 = xor i1 %293, true, !dbg !50
  %295 = and i1 %285, %292, !dbg !51
  %296 = and i1 %286, %294, !dbg !51
  %297 = or i1 %288, %295, !dbg !52
  %298 = or i1 %290, %296, !dbg !52
  %299 = xor i16 %276, %266, !dbg !57
  %300 = xor i16 %280, %270, !dbg !57
  %301 = select i1 %297, i16 %299, i16 0, !dbg !58
  %302 = select i1 %298, i16 %300, i16 0, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %303 = insertelement <1 x i16> poison, i16 %301, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %154, <1 x i16> %303, i1 true) #3, !dbg !58
  %304 = insertelement <1 x i16> poison, i16 %302, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %156, <1 x i16> %304, i1 true) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %305 = load i16, ptr addrspace(3) %158, align 2, !dbg !58
  %306 = load i16, ptr addrspace(3) %160, align 2, !dbg !58
  %307 = xor i16 %305, %231, !dbg !59
  %308 = xor i16 %306, %232, !dbg !59
  %309 = mul i32 %17, 3, !dbg !61
  %310 = mul i32 %18, 3, !dbg !61
  %311 = add i32 %309, %9, !dbg !62
  %312 = add i32 %310, %9, !dbg !62
  %313 = sext i32 %311 to i64, !dbg !63
  %314 = getelementptr i16, ptr addrspace(1) %1, i64 %313, !dbg !63
  %315 = sext i32 %312 to i64, !dbg !63
  %316 = getelementptr i16, ptr addrspace(1) %1, i64 %315, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %317 = insertelement <1 x i16> poison, i16 %307, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %233, <1 x i16> %317, i1 true) #3, !dbg !64
  %318 = insertelement <1 x i16> poison, i16 %308, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %235, <1 x i16> %318, i1 true) #3, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %319 = load i16, ptr addrspace(3) %237, align 2, !dbg !64
  %320 = load i16, ptr addrspace(3) %239, align 2, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %319, ptr addrspace(1) %314, i1 %36) #3, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %320, ptr addrspace(1) %316, i1 %37) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmfpbriu5l7n7aqripryac7hspwe6imvcqnmw6qqwc42q7q6sqkw.py", directory: "inductor_cache/mf")
!4 = !{ptr @triton_per_fused_sort_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_sort_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_sort_1", linkageName: "triton_per_fused_sort_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 40, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 33, column: 48, scope: !7)
!25 = !DILocation(line: 35, column: 19, scope: !7)
!26 = !DILocation(line: 575, column: 44, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 38, column: 69, scope: !7)
!31 = !DILocation(line: 505, column: 21, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!33 = !DILocation(line: 506, column: 40, scope: !32, inlinedAt: !30)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !30)
!35 = distinct !DILexicalBlockFile(scope: !32, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !30)
!38 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!39 = !DILocation(line: 507, column: 41, scope: !32, inlinedAt: !30)
!40 = !DILocation(line: 510, column: 20, scope: !32, inlinedAt: !30)
!41 = !DILocation(line: 511, column: 22, scope: !32, inlinedAt: !30)
!42 = !DILocation(line: 516, column: 36, scope: !32, inlinedAt: !30)
!43 = !DILocation(line: 516, column: 23, scope: !32, inlinedAt: !30)
!44 = !DILocation(line: 519, column: 37, scope: !32, inlinedAt: !30)
!45 = !DILocation(line: 519, column: 23, scope: !32, inlinedAt: !30)
!46 = !DILocation(line: 529, column: 37, scope: !32, inlinedAt: !30)
!47 = !DILocation(line: 530, column: 39, scope: !32, inlinedAt: !30)
!48 = !DILocation(line: 538, column: 22, scope: !32, inlinedAt: !30)
!49 = !DILocation(line: 544, column: 31, scope: !32, inlinedAt: !30)
!50 = !DILocation(line: 545, column: 29, scope: !32, inlinedAt: !30)
!51 = !DILocation(line: 545, column: 48, scope: !32, inlinedAt: !30)
!52 = !DILocation(line: 545, column: 8, scope: !32, inlinedAt: !30)
!53 = !DILocation(line: 547, column: 28, scope: !32, inlinedAt: !30)
!54 = !DILocation(line: 548, column: 38, scope: !32, inlinedAt: !30)
!55 = !DILocation(line: 548, column: 46, scope: !32, inlinedAt: !30)
!56 = !DILocation(line: 548, column: 15, scope: !32, inlinedAt: !30)
!57 = !DILocation(line: 549, column: 48, scope: !32, inlinedAt: !30)
!58 = !DILocation(line: 549, column: 59, scope: !32, inlinedAt: !30)
!59 = !DILocation(line: 549, column: 22, scope: !32, inlinedAt: !30)
!60 = !DILocation(line: 551, column: 18, scope: !32, inlinedAt: !30)
!61 = !DILocation(line: 39, column: 32, scope: !7)
!62 = !DILocation(line: 39, column: 30, scope: !7)
!63 = !DILocation(line: 39, column: 25, scope: !7)
!64 = !DILocation(line: 39, column: 43, scope: !7)
!65 = !DILocation(line: 39, column: 4, scope: !7)
