; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_mul_pow_rsqrt_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = and i32 %9, 7, !dbg !12
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = or disjoint i32 %8, %14, !dbg !13
  %17 = icmp slt i32 %16, 16, !dbg !14
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = shl i32 %9, 2, !dbg !15
  %20 = and i32 %19, 60, !dbg !15
  %21 = srem i32 %15, 4, !dbg !16
  %22 = sdiv i32 %16, 4, !dbg !17
  %23 = shl nsw i32 %21, 6, !dbg !18
  %24 = or disjoint i32 %23, %20, !dbg !19
  %25 = sext i32 %24 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !21
  %32 = bitcast i32 %28 to float, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = shl nsw i32 %22, 2, !dbg !22
  %37 = or disjoint i32 %36, 1, !dbg !23
  %38 = or disjoint i32 %36, 2, !dbg !23
  %39 = or disjoint i32 %36, 3, !dbg !23
  %40 = sext i32 %36 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !24
  %42 = sext i32 %37 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !24
  %44 = sext i32 %38 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !24
  %46 = sext i32 %39 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %49 = bitcast i32 %48 to float, !dbg !25
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %51 = bitcast i32 %50 to float, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = fmul float %32, 1.250000e-01, !dbg !26
  %57 = fmul float %33, 1.250000e-01, !dbg !26
  %58 = fmul float %34, 1.250000e-01, !dbg !26
  %59 = fmul float %35, 1.250000e-01, !dbg !26
  %60 = shl i32 %9, 5, !dbg !26
  %61 = and i32 %60, 480, !dbg !26
  %62 = or disjoint i32 %61, %13, !dbg !26
  %63 = and i32 %9, 127, !dbg !26
  %64 = lshr exact i32 %61, 1, !dbg !26
  %65 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %64, !dbg !26
  %66 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %62, !dbg !26
  %67 = bitcast float %56 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #5, !dbg !26
  %68 = or disjoint i32 %62, 8, !dbg !26
  %69 = lshr i32 %68, 3, !dbg !26
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !26
  %71 = getelementptr inbounds float, ptr addrspace(3) %70, i32 %68, !dbg !26
  %72 = bitcast float %57 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #5, !dbg !26
  %73 = or disjoint i32 %62, 16, !dbg !26
  %74 = lshr i32 %73, 3, !dbg !26
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74, !dbg !26
  %76 = getelementptr inbounds float, ptr addrspace(3) %75, i32 %73, !dbg !26
  %77 = bitcast float %58 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #5, !dbg !26
  %78 = or disjoint i32 %62, 24, !dbg !26
  %79 = lshr i32 %78, 3, !dbg !26
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79, !dbg !26
  %81 = getelementptr inbounds float, ptr addrspace(3) %80, i32 %78, !dbg !26
  %82 = bitcast float %59 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %83 = lshr i32 %63, 3, !dbg !26
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %83, !dbg !26
  %85 = getelementptr inbounds float, ptr addrspace(3) %84, i32 %63, !dbg !26
  %86 = load float, ptr addrspace(3) %85, align 4, !dbg !26
  %87 = or disjoint i32 %63, 128, !dbg !26
  %88 = lshr i32 %87, 3, !dbg !26
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %88, !dbg !26
  %90 = getelementptr inbounds float, ptr addrspace(3) %89, i32 %87, !dbg !26
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !26
  %92 = or disjoint i32 %63, 256, !dbg !26
  %93 = lshr i32 %92, 3, !dbg !26
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %93, !dbg !26
  %95 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %92, !dbg !26
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !26
  %97 = or disjoint i32 %63, 384, !dbg !26
  %98 = lshr i32 %97, 3, !dbg !26
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !26
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %97, !dbg !26
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  %102 = fmul float %86, %49, !dbg !27
  %103 = fmul float %91, %51, !dbg !27
  %104 = fmul float %96, %53, !dbg !27
  %105 = fmul float %101, %55, !dbg !27
  %106 = fmul float %102, %102, !dbg !28
  %107 = fmul float %103, %103, !dbg !28
  %108 = fmul float %104, %104, !dbg !28
  %109 = fmul float %105, %105, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %110 = fadd float %106, %107, !dbg !33
  %111 = fadd float %110, %108, !dbg !33
  %112 = fadd float %111, %109, !dbg !33
  %113 = select i1 %17, float %112, float 0.000000e+00, !dbg !33
  %114 = bitcast float %113 to i32, !dbg !29
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = fadd float %113, %116, !dbg !33
  %118 = bitcast float %117 to i32, !dbg !29
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = fadd float %117, %120, !dbg !33
  %122 = icmp samesign ult i32 %10, 8, !dbg !29
  %123 = and i32 %11, 3, !dbg !29
  %124 = shl nuw nsw i32 %14, 2, !dbg !29
  %125 = or disjoint i32 %124, %123, !dbg !29
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !29
  %127 = bitcast float %121 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 %122) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %128 = icmp slt i32 %9, 32, !dbg !29
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  %130 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %129, i1 %128) #5, !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !29
  %133 = bitcast i32 %132 to float, !dbg !29
  %134 = fadd float %131, %133, !dbg !33
  %135 = bitcast float %134 to i32, !dbg !29
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = fadd float %134, %137, !dbg !33
  %139 = and i32 %9, 3, !dbg !29
  %140 = icmp eq i32 %139, 0, !dbg !29
  %141 = and i1 %128, %140, !dbg !29
  %142 = bitcast float %138 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %142, i1 %141) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !29
  %144 = load float, ptr addrspace(3) %143, align 16, !dbg !29
  %145 = fadd float %144, 0x3E45798EE0000000, !dbg !35
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %146, 0, !dbg !36
  br i1 %.not.i, label %149, label %147, !dbg !36

147:                                              ; preds = %6
  %148 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

149:                                              ; preds = %6
  %150 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %147, %149
  %.0.i = phi float [ %148, %147 ], [ %150, %149 ], !dbg !36
  %151 = lshr i32 %10, 3, !dbg !29
  %152 = lshr i32 %9, 3, !dbg !15
  %153 = fmul float %102, %.0.i, !dbg !37
  %154 = fmul float %103, %.0.i, !dbg !37
  %155 = fmul float %104, %.0.i, !dbg !37
  %156 = fmul float %105, %.0.i, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %157 = sext i32 %16 to i64, !dbg !39
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !39
  %159 = shl nuw nsw i32 %123, 2, !dbg !40
  %160 = or disjoint i32 %159, %151, !dbg !40
  %161 = icmp eq i32 %160, 0, !dbg !40
  %162 = bitcast float %.0.i to i32, !dbg !40
  %163 = and i1 %161, %17, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %158, i1 %163) #5, !dbg !40
  %164 = shl i32 %15, 6, !dbg !41
  %165 = or disjoint i32 %164, %20, !dbg !42
  %166 = sext i32 %165 to i64, !dbg !43
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %166, !dbg !43
  %168 = shl i32 %9, 6, !dbg !44
  %169 = and i32 %168, 448, !dbg !44
  %170 = and i32 %152, 15, !dbg !44
  %171 = or disjoint i32 %170, %169, !dbg !44
  %172 = and i32 %19, 508, !dbg !44
  %173 = lshr exact i32 %169, 2, !dbg !44
  %174 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %173, !dbg !44
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %171, !dbg !44
  %176 = bitcast float %153 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #5, !dbg !44
  %177 = or disjoint i32 %171, 16, !dbg !44
  %178 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %177, !dbg !44
  %179 = bitcast float %154 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #5, !dbg !44
  %180 = or disjoint i32 %171, 32, !dbg !44
  %181 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %180, !dbg !44
  %182 = bitcast float %155 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #5, !dbg !44
  %183 = or disjoint i32 %171, 48, !dbg !44
  %184 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %183, !dbg !44
  %185 = bitcast float %156 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %186 = lshr i32 %19, 4, !dbg !44
  %187 = and i32 %186, 28, !dbg !44
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !44
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %172, !dbg !44
  %.extract = load i32, ptr addrspace(3) %189, align 16, !dbg !44
  %190 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 4, !dbg !44
  %.extract7 = load i32, ptr addrspace(3) %190, align 4, !dbg !44
  %191 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 8, !dbg !44
  %.extract8 = load i32, ptr addrspace(3) %191, align 8, !dbg !44
  %192 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 12, !dbg !44
  %.extract9 = load i32, ptr addrspace(3) %192, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %167, i1 %18) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqcz2id4lilpbutqds6ozpbkznutd32f6ye2pk37kdkdy43p6s6.py", directory: "inductor_cache/qq")
!4 = !{ptr @triton_per_fused_add_mul_pow_rsqrt_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mul_pow_rsqrt_sum_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mul_pow_rsqrt_sum_2", linkageName: "triton_per_fused_add_mul_pow_rsqrt_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 38, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 43, scope: !7)
!22 = !DILocation(line: 35, column: 37, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 42, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 42, column: 24, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 28, scope: !7)
!37 = !DILocation(line: 46, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 4, scope: !7)
!39 = !DILocation(line: 48, column: 28, scope: !7)
!40 = !DILocation(line: 48, column: 40, scope: !7)
!41 = !DILocation(line: 49, column: 33, scope: !7)
!42 = !DILocation(line: 49, column: 30, scope: !7)
!43 = !DILocation(line: 49, column: 25, scope: !7)
!44 = !DILocation(line: 49, column: 45, scope: !7)
!45 = !DILocation(line: 49, column: 4, scope: !7)
