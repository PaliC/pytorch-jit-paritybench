; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_relu_32(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %17 = sdiv i32 %.frozen, 10, !dbg !14
  %.frozen1 = freeze i32 %11, !dbg !14
  %18 = sdiv i32 %.frozen1, 10, !dbg !14
  %.frozen3 = freeze i32 %13, !dbg !14
  %19 = sdiv i32 %.frozen3, 10, !dbg !14
  %.frozen5 = freeze i32 %15, !dbg !14
  %20 = sdiv i32 %.frozen5, 10, !dbg !14
  %21 = mul i32 %17, 10, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %22 = mul i32 %18, 10, !dbg !15
  %.decomposed2 = sub i32 %.frozen1, %22, !dbg !15
  %23 = mul i32 %19, 10, !dbg !15
  %.decomposed4 = sub i32 %.frozen3, %23, !dbg !15
  %24 = mul i32 %20, 10, !dbg !15
  %.decomposed6 = sub i32 %.frozen5, %24, !dbg !15
  %25 = sdiv i32 %9, 100, !dbg !16
  %26 = sdiv i32 %13, 100, !dbg !16
  %27 = add nsw i32 %.decomposed, -1, !dbg !17
  %28 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !18
  %29 = insertelement <2 x i32> %28, i32 %10, i64 1, !dbg !18
  %30 = srem <2 x i32> %29, splat (i32 10), !dbg !18
  %31 = add nsw <2 x i32> %30, splat (i32 -1), !dbg !19
  %32 = extractelement <2 x i32> %31, i64 0, !dbg !17
  %33 = or i32 %32, %27, !dbg !17
  %34 = icmp ult i32 %33, 8, !dbg !17
  %35 = extractelement <2 x i32> %31, i64 1, !dbg !17
  %36 = or i32 %32, %35, !dbg !17
  %37 = icmp ult i32 %36, 8, !dbg !17
  %38 = add nsw i32 %.decomposed2, -1, !dbg !17
  %39 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !18
  %40 = insertelement <2 x i32> %39, i32 %12, i64 1, !dbg !18
  %41 = srem <2 x i32> %40, splat (i32 10), !dbg !18
  %42 = add nsw <2 x i32> %41, splat (i32 -1), !dbg !19
  %43 = extractelement <2 x i32> %42, i64 0, !dbg !17
  %44 = or i32 %43, %38, !dbg !17
  %45 = icmp ult i32 %44, 8, !dbg !17
  %46 = extractelement <2 x i32> %42, i64 1, !dbg !17
  %47 = or i32 %43, %46, !dbg !17
  %48 = icmp ult i32 %47, 8, !dbg !17
  %49 = add nsw i32 %.decomposed4, -1, !dbg !17
  %50 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !18
  %51 = insertelement <2 x i32> %50, i32 %14, i64 1, !dbg !18
  %52 = srem <2 x i32> %51, splat (i32 10), !dbg !18
  %53 = add nsw <2 x i32> %52, splat (i32 -1), !dbg !19
  %54 = extractelement <2 x i32> %53, i64 0, !dbg !17
  %55 = or i32 %54, %49, !dbg !17
  %56 = icmp ult i32 %55, 8, !dbg !17
  %57 = extractelement <2 x i32> %53, i64 1, !dbg !17
  %58 = or i32 %54, %57, !dbg !17
  %59 = icmp ult i32 %58, 8, !dbg !17
  %60 = add nsw i32 %.decomposed6, -1, !dbg !17
  %61 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !18
  %62 = insertelement <2 x i32> %61, i32 %16, i64 1, !dbg !18
  %63 = srem <2 x i32> %62, splat (i32 10), !dbg !18
  %64 = add nsw <2 x i32> %63, splat (i32 -1), !dbg !19
  %65 = extractelement <2 x i32> %64, i64 0, !dbg !17
  %66 = or i32 %65, %60, !dbg !17
  %67 = icmp ult i32 %66, 8, !dbg !17
  %68 = extractelement <2 x i32> %64, i64 1, !dbg !17
  %69 = or i32 %65, %68, !dbg !17
  %70 = icmp ult i32 %69, 8, !dbg !17
  %71 = extractelement <2 x i32> %30, i64 0, !dbg !20
  %72 = shl nsw i32 %71, 3, !dbg !20
  %73 = extractelement <2 x i32> %41, i64 0, !dbg !20
  %74 = shl nsw i32 %73, 3, !dbg !20
  %75 = extractelement <2 x i32> %52, i64 0, !dbg !20
  %76 = shl nsw i32 %75, 3, !dbg !20
  %77 = extractelement <2 x i32> %63, i64 0, !dbg !20
  %78 = shl nsw i32 %77, 3, !dbg !20
  %79 = shl nsw i32 %25, 6, !dbg !21
  %80 = shl nsw i32 %26, 6, !dbg !21
  %81 = add nsw i32 %79, -9, !dbg !22
  %82 = add nsw i32 %81, %.decomposed, !dbg !23
  %83 = add nsw i32 %82, %72, !dbg !24
  %84 = extractelement <2 x i32> %30, i64 1, !dbg !23
  %85 = add nsw i32 %81, %84, !dbg !23
  %86 = add nsw i32 %85, %72, !dbg !24
  %87 = add nsw i32 %81, %.decomposed2, !dbg !23
  %88 = add nsw i32 %87, %74, !dbg !24
  %89 = extractelement <2 x i32> %41, i64 1, !dbg !23
  %90 = add nsw i32 %81, %89, !dbg !23
  %91 = add nsw i32 %90, %74, !dbg !24
  %92 = add nsw i32 %80, -9, !dbg !22
  %93 = add nsw i32 %92, %.decomposed4, !dbg !23
  %94 = add nsw i32 %93, %76, !dbg !24
  %95 = extractelement <2 x i32> %52, i64 1, !dbg !23
  %96 = add nsw i32 %92, %95, !dbg !23
  %97 = add nsw i32 %96, %76, !dbg !24
  %98 = add nsw i32 %92, %.decomposed6, !dbg !23
  %99 = add nsw i32 %98, %78, !dbg !24
  %100 = extractelement <2 x i32> %63, i64 1, !dbg !23
  %101 = add nsw i32 %92, %100, !dbg !23
  %102 = add nsw i32 %101, %78, !dbg !24
  %103 = sext i32 %83 to i64, !dbg !25
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !25
  %105 = sext i32 %86 to i64, !dbg !25
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !25
  %107 = sext i32 %88 to i64, !dbg !25
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !25
  %109 = sext i32 %91 to i64, !dbg !25
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !25
  %111 = sext i32 %94 to i64, !dbg !25
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !25
  %113 = sext i32 %97 to i64, !dbg !25
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !25
  %115 = sext i32 %99 to i64, !dbg !25
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !25
  %117 = sext i32 %102 to i64, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %34, i32 0, i1 %34) #1, !dbg !26
  %120 = bitcast i32 %119 to float, !dbg !26
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %37, i32 0, i1 %37) #1, !dbg !26
  %122 = bitcast i32 %121 to float, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %45, i32 0, i1 %45) #1, !dbg !26
  %124 = bitcast i32 %123 to float, !dbg !26
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %48, i32 0, i1 %48) #1, !dbg !26
  %126 = bitcast i32 %125 to float, !dbg !26
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %56, i32 0, i1 %56) #1, !dbg !26
  %128 = bitcast i32 %127 to float, !dbg !26
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %59, i32 0, i1 %59) #1, !dbg !26
  %130 = bitcast i32 %129 to float, !dbg !26
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %67, i32 0, i1 %67) #1, !dbg !26
  %132 = bitcast i32 %131 to float, !dbg !26
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %70, i32 0, i1 %70) #1, !dbg !26
  %134 = bitcast i32 %133 to float, !dbg !26
  %135 = fcmp olt float %120, 0.000000e+00, !dbg !27
  %136 = fcmp olt float %122, 0.000000e+00, !dbg !27
  %137 = fcmp olt float %124, 0.000000e+00, !dbg !27
  %138 = fcmp olt float %126, 0.000000e+00, !dbg !27
  %139 = fcmp olt float %128, 0.000000e+00, !dbg !27
  %140 = fcmp olt float %130, 0.000000e+00, !dbg !27
  %141 = fcmp olt float %132, 0.000000e+00, !dbg !27
  %142 = fcmp olt float %134, 0.000000e+00, !dbg !27
  %143 = select i1 %135, float 0.000000e+00, float %120, !dbg !31
  %144 = select i1 %136, float 0.000000e+00, float %122, !dbg !31
  %145 = select i1 %137, float 0.000000e+00, float %124, !dbg !31
  %146 = select i1 %138, float 0.000000e+00, float %126, !dbg !31
  %147 = select i1 %139, float 0.000000e+00, float %128, !dbg !31
  %148 = select i1 %140, float 0.000000e+00, float %130, !dbg !31
  %149 = select i1 %141, float 0.000000e+00, float %132, !dbg !31
  %150 = select i1 %142, float 0.000000e+00, float %134, !dbg !31
  %151 = sext i32 %9 to i64, !dbg !32
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !32
  %153 = sext i32 %13 to i64, !dbg !32
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !32
  %155 = bitcast float %143 to i32, !dbg !33
  %156 = select i1 %34, i32 %155, i32 0, !dbg !34
  %157 = bitcast float %144 to i32, !dbg !33
  %158 = select i1 %37, i32 %157, i32 0, !dbg !34
  %159 = bitcast float %145 to i32, !dbg !33
  %160 = select i1 %45, i32 %159, i32 0, !dbg !34
  %161 = bitcast float %146 to i32, !dbg !33
  %162 = select i1 %48, i32 %161, i32 0, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %158, i32 %160, i32 %162, ptr addrspace(1) %152, i1 true) #1, !dbg !33
  %163 = bitcast float %147 to i32, !dbg !33
  %164 = select i1 %56, i32 %163, i32 0, !dbg !34
  %165 = bitcast float %148 to i32, !dbg !33
  %166 = select i1 %59, i32 %165, i32 0, !dbg !34
  %167 = bitcast float %149 to i32, !dbg !33
  %168 = select i1 %67, i32 %167, i32 0, !dbg !34
  %169 = bitcast float %150 to i32, !dbg !33
  %170 = select i1 %70, i32 %169, i32 0, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %164, i32 %166, i32 %168, i32 %170, ptr addrspace(1) %154, i1 true) #1, !dbg !33
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6ez2r4aeotgovq564xscgonbmngugtnbsnznoh3r3evf2hcupsz.py", directory: "inductor_cache/6e")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_relu_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_relu_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_relu_32", linkageName: "triton_poi_fused_constant_pad_nd_relu_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 38, column: 19, scope: !7)
!18 = !DILocation(line: 24, column: 27, scope: !7)
!19 = !DILocation(line: 36, column: 18, scope: !7)
!20 = !DILocation(line: 39, column: 45, scope: !7)
!21 = !DILocation(line: 39, column: 53, scope: !7)
!22 = !DILocation(line: 39, column: 38, scope: !7)
!23 = !DILocation(line: 39, column: 43, scope: !7)
!24 = !DILocation(line: 39, column: 50, scope: !7)
!25 = !DILocation(line: 39, column: 31, scope: !7)
!26 = !DILocation(line: 39, column: 58, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 41, column: 42, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 44, column: 25, scope: !7)
!33 = !DILocation(line: 44, column: 37, scope: !7)
!34 = !DILocation(line: 43, column: 35, scope: !7)
!35 = !DILocation(line: 44, column: 4, scope: !7)
