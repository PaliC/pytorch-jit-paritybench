; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 16, !dbg !13
  %14 = or disjoint i32 %12, 32, !dbg !13
  %15 = or disjoint i32 %12, 48, !dbg !13
  %16 = or disjoint i32 %12, 64, !dbg !13
  %17 = or disjoint i32 %12, 80, !dbg !13
  %18 = or disjoint i32 %12, 96, !dbg !13
  %19 = or disjoint i32 %12, 112, !dbg !13
  %20 = or disjoint i32 %12, 128, !dbg !13
  %21 = or disjoint i32 %12, 144, !dbg !13
  %22 = or disjoint i32 %12, 160, !dbg !13
  %23 = or disjoint i32 %12, 176, !dbg !13
  %24 = or disjoint i32 %12, 192, !dbg !13
  %25 = or disjoint i32 %12, 208, !dbg !13
  %26 = or disjoint i32 %12, 224, !dbg !13
  %27 = or disjoint i32 %12, 240, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %29 = shl i32 %28, 4, !dbg !15
  %30 = and i32 %9, 15, !dbg !16
  %31 = or disjoint i32 %29, %30, !dbg !17
  %32 = icmp slt i32 %31, 9, !dbg !18
  %33 = sdiv i32 %12, 512, !dbg !19
  %34 = sdiv i32 %13, 512, !dbg !19
  %35 = sdiv i32 %14, 512, !dbg !19
  %36 = sdiv i32 %15, 512, !dbg !19
  %37 = sdiv i32 %16, 512, !dbg !19
  %38 = sdiv i32 %17, 512, !dbg !19
  %39 = sdiv i32 %18, 512, !dbg !19
  %40 = sdiv i32 %19, 512, !dbg !19
  %41 = sdiv i32 %20, 512, !dbg !19
  %42 = sdiv i32 %21, 512, !dbg !19
  %43 = sdiv i32 %22, 512, !dbg !19
  %44 = sdiv i32 %23, 512, !dbg !19
  %45 = sdiv i32 %24, 512, !dbg !19
  %46 = sdiv i32 %25, 512, !dbg !19
  %47 = sdiv i32 %26, 512, !dbg !19
  %48 = sdiv i32 %27, 512, !dbg !19
  %49 = mul i32 %12, 9, !dbg !20
  %50 = mul i32 %13, 9, !dbg !20
  %51 = mul i32 %14, 9, !dbg !20
  %52 = mul i32 %15, 9, !dbg !20
  %53 = mul i32 %16, 9, !dbg !20
  %54 = mul i32 %17, 9, !dbg !20
  %55 = mul i32 %18, 9, !dbg !20
  %56 = mul i32 %19, 9, !dbg !20
  %57 = mul i32 %20, 9, !dbg !20
  %58 = mul i32 %21, 9, !dbg !20
  %59 = mul i32 %22, 9, !dbg !20
  %60 = mul i32 %23, 9, !dbg !20
  %61 = mul i32 %24, 9, !dbg !20
  %62 = mul i32 %25, 9, !dbg !20
  %63 = mul i32 %26, 9, !dbg !20
  %64 = mul i32 %27, 9, !dbg !20
  %65 = add i32 %31, %49, !dbg !21
  %66 = add i32 %31, %50, !dbg !21
  %67 = add i32 %31, %51, !dbg !21
  %68 = add i32 %31, %52, !dbg !21
  %69 = add i32 %31, %53, !dbg !21
  %70 = add i32 %31, %54, !dbg !21
  %71 = add i32 %31, %55, !dbg !21
  %72 = add i32 %31, %56, !dbg !21
  %73 = add i32 %31, %57, !dbg !21
  %74 = add i32 %31, %58, !dbg !21
  %75 = add i32 %31, %59, !dbg !21
  %76 = add i32 %31, %60, !dbg !21
  %77 = add i32 %31, %61, !dbg !21
  %78 = add i32 %31, %62, !dbg !21
  %79 = add i32 %31, %63, !dbg !21
  %80 = add i32 %31, %64, !dbg !21
  %81 = sext i32 %65 to i64, !dbg !22
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !22
  %83 = sext i32 %66 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !22
  %85 = sext i32 %67 to i64, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !22
  %87 = sext i32 %68 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !22
  %89 = sext i32 %69 to i64, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !22
  %91 = sext i32 %70 to i64, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !22
  %93 = sext i32 %71 to i64, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !22
  %95 = sext i32 %72 to i64, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !22
  %97 = sext i32 %73 to i64, !dbg !22
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !22
  %99 = sext i32 %74 to i64, !dbg !22
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !22
  %101 = sext i32 %75 to i64, !dbg !22
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !22
  %103 = sext i32 %76 to i64, !dbg !22
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !22
  %105 = sext i32 %77 to i64, !dbg !22
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !22
  %107 = sext i32 %78 to i64, !dbg !22
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !22
  %109 = sext i32 %79 to i64, !dbg !22
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !22
  %111 = sext i32 %80 to i64, !dbg !22
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !22
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %32) #4, !dbg !23
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %32) #4, !dbg !23
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %32) #4, !dbg !23
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %32) #4, !dbg !23
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %32) #4, !dbg !23
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %32) #4, !dbg !23
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %32) #4, !dbg !23
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %32) #4, !dbg !23
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %32) #4, !dbg !23
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %32) #4, !dbg !23
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %32) #4, !dbg !23
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %32) #4, !dbg !23
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %32) #4, !dbg !23
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %32) #4, !dbg !23
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %32) #4, !dbg !23
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %32) #4, !dbg !23
  %129 = mul nsw i32 %33, 9, !dbg !24
  %130 = mul nsw i32 %34, 9, !dbg !24
  %131 = mul nsw i32 %35, 9, !dbg !24
  %132 = mul nsw i32 %36, 9, !dbg !24
  %133 = mul nsw i32 %37, 9, !dbg !24
  %134 = mul nsw i32 %38, 9, !dbg !24
  %135 = mul nsw i32 %39, 9, !dbg !24
  %136 = mul nsw i32 %40, 9, !dbg !24
  %137 = mul nsw i32 %41, 9, !dbg !24
  %138 = mul nsw i32 %42, 9, !dbg !24
  %139 = mul nsw i32 %43, 9, !dbg !24
  %140 = mul nsw i32 %44, 9, !dbg !24
  %141 = mul nsw i32 %45, 9, !dbg !24
  %142 = mul nsw i32 %46, 9, !dbg !24
  %143 = mul nsw i32 %47, 9, !dbg !24
  %144 = mul nsw i32 %48, 9, !dbg !24
  %145 = add i32 %129, %31, !dbg !25
  %146 = add i32 %31, %130, !dbg !25
  %147 = add i32 %31, %131, !dbg !25
  %148 = add i32 %31, %132, !dbg !25
  %149 = add i32 %31, %133, !dbg !25
  %150 = add i32 %31, %134, !dbg !25
  %151 = add i32 %31, %135, !dbg !25
  %152 = add i32 %31, %136, !dbg !25
  %153 = add i32 %31, %137, !dbg !25
  %154 = add i32 %31, %138, !dbg !25
  %155 = add i32 %31, %139, !dbg !25
  %156 = add i32 %31, %140, !dbg !25
  %157 = add i32 %31, %141, !dbg !25
  %158 = add i32 %31, %142, !dbg !25
  %159 = add i32 %31, %143, !dbg !25
  %160 = add i32 %31, %144, !dbg !25
  %161 = sext i32 %145 to i64, !dbg !26
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !26
  %163 = sext i32 %146 to i64, !dbg !26
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !26
  %165 = sext i32 %147 to i64, !dbg !26
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !26
  %167 = sext i32 %148 to i64, !dbg !26
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !26
  %169 = sext i32 %149 to i64, !dbg !26
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !26
  %171 = sext i32 %150 to i64, !dbg !26
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !26
  %173 = sext i32 %151 to i64, !dbg !26
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !26
  %175 = sext i32 %152 to i64, !dbg !26
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !26
  %177 = sext i32 %153 to i64, !dbg !26
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !26
  %179 = sext i32 %154 to i64, !dbg !26
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !26
  %181 = sext i32 %155 to i64, !dbg !26
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !26
  %183 = sext i32 %156 to i64, !dbg !26
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %183, !dbg !26
  %185 = sext i32 %157 to i64, !dbg !26
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !26
  %187 = sext i32 %158 to i64, !dbg !26
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !26
  %189 = sext i32 %159 to i64, !dbg !26
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !26
  %191 = sext i32 %160 to i64, !dbg !26
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !26
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %32) #4, !dbg !27
  %194 = bitcast i32 %193 to float, !dbg !27
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %32) #4, !dbg !27
  %196 = bitcast i32 %195 to float, !dbg !27
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %32) #4, !dbg !27
  %198 = bitcast i32 %197 to float, !dbg !27
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %32) #4, !dbg !27
  %200 = bitcast i32 %199 to float, !dbg !27
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %32) #4, !dbg !27
  %202 = bitcast i32 %201 to float, !dbg !27
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %32) #4, !dbg !27
  %204 = bitcast i32 %203 to float, !dbg !27
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %32) #4, !dbg !27
  %206 = bitcast i32 %205 to float, !dbg !27
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %32) #4, !dbg !27
  %208 = bitcast i32 %207 to float, !dbg !27
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %32) #4, !dbg !27
  %210 = bitcast i32 %209 to float, !dbg !27
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %32) #4, !dbg !27
  %212 = bitcast i32 %211 to float, !dbg !27
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %32) #4, !dbg !27
  %214 = bitcast i32 %213 to float, !dbg !27
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %32) #4, !dbg !27
  %216 = bitcast i32 %215 to float, !dbg !27
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %32) #4, !dbg !27
  %218 = bitcast i32 %217 to float, !dbg !27
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %32) #4, !dbg !27
  %220 = bitcast i32 %219 to float, !dbg !27
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %32) #4, !dbg !27
  %222 = bitcast i32 %221 to float, !dbg !27
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %32) #4, !dbg !27
  %224 = bitcast i32 %223 to float, !dbg !27
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i = icmp eq i32 %225, 0, !dbg !28
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i = icmp eq i32 %226, 0, !dbg !28
  br i1 %.not.i, label %232, label %227, !dbg !28

227:                                              ; preds = %6
  br i1 %.not1.i, label %230, label %228, !dbg !28

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

232:                                              ; preds = %6
  br i1 %.not1.i, label %235, label %233, !dbg !28

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %228, %230, %233, %235
  %.0.i = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !28
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i34 = icmp eq i32 %237, 0, !dbg !28
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i37 = icmp eq i32 %238, 0, !dbg !28
  br i1 %.not.i34, label %244, label %239, !dbg !28

239:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %242, label %240, !dbg !28

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %196) #4, !dbg !28
  br label %__nv_sqrtf.exit38, !dbg !28

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %196) #4, !dbg !28
  br label %__nv_sqrtf.exit38, !dbg !28

244:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %247, label %245, !dbg !28

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.f(float %196) #4, !dbg !28
  br label %__nv_sqrtf.exit38, !dbg !28

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.f(float %196) #4, !dbg !28
  br label %__nv_sqrtf.exit38, !dbg !28

__nv_sqrtf.exit38:                                ; preds = %240, %242, %245, %247
  %.0.i36 = phi float [ %241, %240 ], [ %243, %242 ], [ %246, %245 ], [ %248, %247 ], !dbg !28
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i39 = icmp eq i32 %249, 0, !dbg !28
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i42 = icmp eq i32 %250, 0, !dbg !28
  br i1 %.not.i39, label %256, label %251, !dbg !28

251:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %254, label %252, !dbg !28

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %198) #4, !dbg !28
  br label %__nv_sqrtf.exit43, !dbg !28

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %198) #4, !dbg !28
  br label %__nv_sqrtf.exit43, !dbg !28

256:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %259, label %257, !dbg !28

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %198) #4, !dbg !28
  br label %__nv_sqrtf.exit43, !dbg !28

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %198) #4, !dbg !28
  br label %__nv_sqrtf.exit43, !dbg !28

__nv_sqrtf.exit43:                                ; preds = %252, %254, %257, %259
  %.0.i41 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !28
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i44 = icmp eq i32 %261, 0, !dbg !28
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i47 = icmp eq i32 %262, 0, !dbg !28
  br i1 %.not.i44, label %268, label %263, !dbg !28

263:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %266, label %264, !dbg !28

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %200) #4, !dbg !28
  br label %__nv_sqrtf.exit48, !dbg !28

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %200) #4, !dbg !28
  br label %__nv_sqrtf.exit48, !dbg !28

268:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %271, label %269, !dbg !28

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %200) #4, !dbg !28
  br label %__nv_sqrtf.exit48, !dbg !28

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %200) #4, !dbg !28
  br label %__nv_sqrtf.exit48, !dbg !28

__nv_sqrtf.exit48:                                ; preds = %264, %266, %269, %271
  %.0.i46 = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !28
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i49 = icmp eq i32 %273, 0, !dbg !28
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i52 = icmp eq i32 %274, 0, !dbg !28
  br i1 %.not.i49, label %280, label %275, !dbg !28

275:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %278, label %276, !dbg !28

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %202) #4, !dbg !28
  br label %__nv_sqrtf.exit53, !dbg !28

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %202) #4, !dbg !28
  br label %__nv_sqrtf.exit53, !dbg !28

280:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %283, label %281, !dbg !28

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %202) #4, !dbg !28
  br label %__nv_sqrtf.exit53, !dbg !28

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %202) #4, !dbg !28
  br label %__nv_sqrtf.exit53, !dbg !28

__nv_sqrtf.exit53:                                ; preds = %276, %278, %281, %283
  %.0.i51 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !28
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i54 = icmp eq i32 %285, 0, !dbg !28
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i57 = icmp eq i32 %286, 0, !dbg !28
  br i1 %.not.i54, label %292, label %287, !dbg !28

287:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %290, label %288, !dbg !28

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #4, !dbg !28
  br label %__nv_sqrtf.exit58, !dbg !28

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #4, !dbg !28
  br label %__nv_sqrtf.exit58, !dbg !28

292:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %295, label %293, !dbg !28

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #4, !dbg !28
  br label %__nv_sqrtf.exit58, !dbg !28

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #4, !dbg !28
  br label %__nv_sqrtf.exit58, !dbg !28

__nv_sqrtf.exit58:                                ; preds = %288, %290, %293, %295
  %.0.i56 = phi float [ %289, %288 ], [ %291, %290 ], [ %294, %293 ], [ %296, %295 ], !dbg !28
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i59 = icmp eq i32 %297, 0, !dbg !28
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i62 = icmp eq i32 %298, 0, !dbg !28
  br i1 %.not.i59, label %304, label %299, !dbg !28

299:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %302, label %300, !dbg !28

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #4, !dbg !28
  br label %__nv_sqrtf.exit63, !dbg !28

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #4, !dbg !28
  br label %__nv_sqrtf.exit63, !dbg !28

304:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %307, label %305, !dbg !28

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #4, !dbg !28
  br label %__nv_sqrtf.exit63, !dbg !28

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #4, !dbg !28
  br label %__nv_sqrtf.exit63, !dbg !28

__nv_sqrtf.exit63:                                ; preds = %300, %302, %305, %307
  %.0.i61 = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !28
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i64 = icmp eq i32 %309, 0, !dbg !28
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i67 = icmp eq i32 %310, 0, !dbg !28
  br i1 %.not.i64, label %316, label %311, !dbg !28

311:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %314, label %312, !dbg !28

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %208) #4, !dbg !28
  br label %__nv_sqrtf.exit68, !dbg !28

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %208) #4, !dbg !28
  br label %__nv_sqrtf.exit68, !dbg !28

316:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %319, label %317, !dbg !28

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %208) #4, !dbg !28
  br label %__nv_sqrtf.exit68, !dbg !28

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %208) #4, !dbg !28
  br label %__nv_sqrtf.exit68, !dbg !28

__nv_sqrtf.exit68:                                ; preds = %312, %314, %317, %319
  %.0.i66 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !28
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i69 = icmp eq i32 %321, 0, !dbg !28
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i72 = icmp eq i32 %322, 0, !dbg !28
  br i1 %.not.i69, label %328, label %323, !dbg !28

323:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %326, label %324, !dbg !28

324:                                              ; preds = %323
  %325 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %210) #4, !dbg !28
  br label %__nv_sqrtf.exit73, !dbg !28

326:                                              ; preds = %323
  %327 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %210) #4, !dbg !28
  br label %__nv_sqrtf.exit73, !dbg !28

328:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %331, label %329, !dbg !28

329:                                              ; preds = %328
  %330 = tail call float @llvm.nvvm.sqrt.rn.f(float %210) #4, !dbg !28
  br label %__nv_sqrtf.exit73, !dbg !28

331:                                              ; preds = %328
  %332 = tail call float @llvm.nvvm.sqrt.approx.f(float %210) #4, !dbg !28
  br label %__nv_sqrtf.exit73, !dbg !28

__nv_sqrtf.exit73:                                ; preds = %324, %326, %329, %331
  %.0.i71 = phi float [ %325, %324 ], [ %327, %326 ], [ %330, %329 ], [ %332, %331 ], !dbg !28
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i74 = icmp eq i32 %333, 0, !dbg !28
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i77 = icmp eq i32 %334, 0, !dbg !28
  br i1 %.not.i74, label %340, label %335, !dbg !28

335:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %338, label %336, !dbg !28

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %212) #4, !dbg !28
  br label %__nv_sqrtf.exit78, !dbg !28

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %212) #4, !dbg !28
  br label %__nv_sqrtf.exit78, !dbg !28

340:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %343, label %341, !dbg !28

341:                                              ; preds = %340
  %342 = tail call float @llvm.nvvm.sqrt.rn.f(float %212) #4, !dbg !28
  br label %__nv_sqrtf.exit78, !dbg !28

343:                                              ; preds = %340
  %344 = tail call float @llvm.nvvm.sqrt.approx.f(float %212) #4, !dbg !28
  br label %__nv_sqrtf.exit78, !dbg !28

__nv_sqrtf.exit78:                                ; preds = %336, %338, %341, %343
  %.0.i76 = phi float [ %337, %336 ], [ %339, %338 ], [ %342, %341 ], [ %344, %343 ], !dbg !28
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i79 = icmp eq i32 %345, 0, !dbg !28
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i82 = icmp eq i32 %346, 0, !dbg !28
  br i1 %.not.i79, label %352, label %347, !dbg !28

347:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %350, label %348, !dbg !28

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %214) #4, !dbg !28
  br label %__nv_sqrtf.exit83, !dbg !28

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %214) #4, !dbg !28
  br label %__nv_sqrtf.exit83, !dbg !28

352:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %355, label %353, !dbg !28

353:                                              ; preds = %352
  %354 = tail call float @llvm.nvvm.sqrt.rn.f(float %214) #4, !dbg !28
  br label %__nv_sqrtf.exit83, !dbg !28

355:                                              ; preds = %352
  %356 = tail call float @llvm.nvvm.sqrt.approx.f(float %214) #4, !dbg !28
  br label %__nv_sqrtf.exit83, !dbg !28

__nv_sqrtf.exit83:                                ; preds = %348, %350, %353, %355
  %.0.i81 = phi float [ %349, %348 ], [ %351, %350 ], [ %354, %353 ], [ %356, %355 ], !dbg !28
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i84 = icmp eq i32 %357, 0, !dbg !28
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i87 = icmp eq i32 %358, 0, !dbg !28
  br i1 %.not.i84, label %364, label %359, !dbg !28

359:                                              ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %362, label %360, !dbg !28

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %216) #4, !dbg !28
  br label %__nv_sqrtf.exit88, !dbg !28

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %216) #4, !dbg !28
  br label %__nv_sqrtf.exit88, !dbg !28

364:                                              ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %367, label %365, !dbg !28

365:                                              ; preds = %364
  %366 = tail call float @llvm.nvvm.sqrt.rn.f(float %216) #4, !dbg !28
  br label %__nv_sqrtf.exit88, !dbg !28

367:                                              ; preds = %364
  %368 = tail call float @llvm.nvvm.sqrt.approx.f(float %216) #4, !dbg !28
  br label %__nv_sqrtf.exit88, !dbg !28

__nv_sqrtf.exit88:                                ; preds = %360, %362, %365, %367
  %.0.i86 = phi float [ %361, %360 ], [ %363, %362 ], [ %366, %365 ], [ %368, %367 ], !dbg !28
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i89 = icmp eq i32 %369, 0, !dbg !28
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i92 = icmp eq i32 %370, 0, !dbg !28
  br i1 %.not.i89, label %376, label %371, !dbg !28

371:                                              ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %374, label %372, !dbg !28

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #4, !dbg !28
  br label %__nv_sqrtf.exit93, !dbg !28

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #4, !dbg !28
  br label %__nv_sqrtf.exit93, !dbg !28

376:                                              ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %379, label %377, !dbg !28

377:                                              ; preds = %376
  %378 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #4, !dbg !28
  br label %__nv_sqrtf.exit93, !dbg !28

379:                                              ; preds = %376
  %380 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #4, !dbg !28
  br label %__nv_sqrtf.exit93, !dbg !28

__nv_sqrtf.exit93:                                ; preds = %372, %374, %377, %379
  %.0.i91 = phi float [ %373, %372 ], [ %375, %374 ], [ %378, %377 ], [ %380, %379 ], !dbg !28
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i94 = icmp eq i32 %381, 0, !dbg !28
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i97 = icmp eq i32 %382, 0, !dbg !28
  br i1 %.not.i94, label %388, label %383, !dbg !28

383:                                              ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %386, label %384, !dbg !28

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #4, !dbg !28
  br label %__nv_sqrtf.exit98, !dbg !28

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #4, !dbg !28
  br label %__nv_sqrtf.exit98, !dbg !28

388:                                              ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %391, label %389, !dbg !28

389:                                              ; preds = %388
  %390 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #4, !dbg !28
  br label %__nv_sqrtf.exit98, !dbg !28

391:                                              ; preds = %388
  %392 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #4, !dbg !28
  br label %__nv_sqrtf.exit98, !dbg !28

__nv_sqrtf.exit98:                                ; preds = %384, %386, %389, %391
  %.0.i96 = phi float [ %385, %384 ], [ %387, %386 ], [ %390, %389 ], [ %392, %391 ], !dbg !28
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i99 = icmp eq i32 %393, 0, !dbg !28
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i102 = icmp eq i32 %394, 0, !dbg !28
  br i1 %.not.i99, label %400, label %395, !dbg !28

395:                                              ; preds = %__nv_sqrtf.exit98
  br i1 %.not1.i102, label %398, label %396, !dbg !28

396:                                              ; preds = %395
  %397 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #4, !dbg !28
  br label %__nv_sqrtf.exit103, !dbg !28

398:                                              ; preds = %395
  %399 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #4, !dbg !28
  br label %__nv_sqrtf.exit103, !dbg !28

400:                                              ; preds = %__nv_sqrtf.exit98
  br i1 %.not1.i102, label %403, label %401, !dbg !28

401:                                              ; preds = %400
  %402 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #4, !dbg !28
  br label %__nv_sqrtf.exit103, !dbg !28

403:                                              ; preds = %400
  %404 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #4, !dbg !28
  br label %__nv_sqrtf.exit103, !dbg !28

__nv_sqrtf.exit103:                               ; preds = %396, %398, %401, %403
  %.0.i101 = phi float [ %397, %396 ], [ %399, %398 ], [ %402, %401 ], [ %404, %403 ], !dbg !28
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i104 = icmp eq i32 %405, 0, !dbg !28
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i107 = icmp eq i32 %406, 0, !dbg !28
  br i1 %.not.i104, label %412, label %407, !dbg !28

407:                                              ; preds = %__nv_sqrtf.exit103
  br i1 %.not1.i107, label %410, label %408, !dbg !28

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #4, !dbg !28
  br label %__nv_sqrtf.exit108, !dbg !28

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #4, !dbg !28
  br label %__nv_sqrtf.exit108, !dbg !28

412:                                              ; preds = %__nv_sqrtf.exit103
  br i1 %.not1.i107, label %415, label %413, !dbg !28

413:                                              ; preds = %412
  %414 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #4, !dbg !28
  br label %__nv_sqrtf.exit108, !dbg !28

415:                                              ; preds = %412
  %416 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #4, !dbg !28
  br label %__nv_sqrtf.exit108, !dbg !28

__nv_sqrtf.exit108:                               ; preds = %408, %410, %413, %415
  %.0.i106 = phi float [ %409, %408 ], [ %411, %410 ], [ %414, %413 ], [ %416, %415 ], !dbg !28
  %417 = bitcast i32 %128 to float, !dbg !23
  %418 = bitcast i32 %127 to float, !dbg !23
  %419 = bitcast i32 %126 to float, !dbg !23
  %420 = bitcast i32 %125 to float, !dbg !23
  %421 = bitcast i32 %124 to float, !dbg !23
  %422 = bitcast i32 %123 to float, !dbg !23
  %423 = bitcast i32 %122 to float, !dbg !23
  %424 = bitcast i32 %121 to float, !dbg !23
  %425 = bitcast i32 %120 to float, !dbg !23
  %426 = bitcast i32 %119 to float, !dbg !23
  %427 = bitcast i32 %118 to float, !dbg !23
  %428 = bitcast i32 %117 to float, !dbg !23
  %429 = bitcast i32 %116 to float, !dbg !23
  %430 = bitcast i32 %115 to float, !dbg !23
  %431 = bitcast i32 %114 to float, !dbg !23
  %432 = bitcast i32 %113 to float, !dbg !23
  %433 = shl i32 %9, 2, !dbg !12
  %434 = and i32 %433, 252, !dbg !12
  %435 = or disjoint i32 %8, %434, !dbg !13
  %.frozen = freeze i32 %435, !dbg !19
  %436 = sdiv i32 %.frozen, 512, !dbg !19
  %437 = mul i32 %436, 512, !dbg !29
  %.decomposed = sub i32 %.frozen, %437, !dbg !29
  %.lobit13 = lshr i32 %9, 6, !dbg !16
  %438 = and i32 %.lobit13, 3, !dbg !16
  %439 = or disjoint i32 %438, %29, !dbg !17
  %440 = icmp slt i32 %29, 0, !dbg !18
  %441 = or disjoint i32 %439, 8, !dbg !17
  %442 = icmp slt i32 %441, 9, !dbg !18
  %443 = or disjoint i32 %439, 4, !dbg !17
  %444 = icmp slt i32 %443, 9, !dbg !18
  %445 = icmp slt i32 %439, 9, !dbg !18
  %446 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !30
  %447 = fadd float %.0.i36, 0x3DDB7CDFE0000000, !dbg !30
  %448 = fadd float %.0.i41, 0x3DDB7CDFE0000000, !dbg !30
  %449 = fadd float %.0.i46, 0x3DDB7CDFE0000000, !dbg !30
  %450 = fadd float %.0.i51, 0x3DDB7CDFE0000000, !dbg !30
  %451 = fadd float %.0.i56, 0x3DDB7CDFE0000000, !dbg !30
  %452 = fadd float %.0.i61, 0x3DDB7CDFE0000000, !dbg !30
  %453 = fadd float %.0.i66, 0x3DDB7CDFE0000000, !dbg !30
  %454 = fadd float %.0.i71, 0x3DDB7CDFE0000000, !dbg !30
  %455 = fadd float %.0.i76, 0x3DDB7CDFE0000000, !dbg !30
  %456 = fadd float %.0.i81, 0x3DDB7CDFE0000000, !dbg !30
  %457 = fadd float %.0.i86, 0x3DDB7CDFE0000000, !dbg !30
  %458 = fadd float %.0.i91, 0x3DDB7CDFE0000000, !dbg !30
  %459 = fadd float %.0.i96, 0x3DDB7CDFE0000000, !dbg !30
  %460 = fadd float %.0.i101, 0x3DDB7CDFE0000000, !dbg !30
  %461 = fadd float %.0.i106, 0x3DDB7CDFE0000000, !dbg !30
  %462 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %432, float %446) #4, !dbg !31
  %463 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %431, float %447) #4, !dbg !31
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float %448) #4, !dbg !31
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %429, float %449) #4, !dbg !31
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float %450) #4, !dbg !31
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %427, float %451) #4, !dbg !31
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %426, float %452) #4, !dbg !31
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %425, float %453) #4, !dbg !31
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float %454) #4, !dbg !31
  %471 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %423, float %455) #4, !dbg !31
  %472 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %422, float %456) #4, !dbg !31
  %473 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %421, float %457) #4, !dbg !31
  %474 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %420, float %458) #4, !dbg !31
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float %459) #4, !dbg !31
  %476 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %418, float %460) #4, !dbg !31
  %477 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float %461) #4, !dbg !31
  %478 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !32
  %479 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !32
  %480 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !32
  %481 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !32
  %482 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !32
  %483 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !32
  %484 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !32
  %485 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !32
  %486 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !32
  %487 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !32
  %488 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !32
  %489 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !32
  %490 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !32
  %491 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !32
  %492 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !32
  %493 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !32
  %494 = bitcast float %462 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %494, ptr addrspace(1) %478, i1 %32) #4, !dbg !33
  %495 = bitcast float %463 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %495, ptr addrspace(1) %479, i1 %32) #4, !dbg !33
  %496 = bitcast float %464 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %496, ptr addrspace(1) %480, i1 %32) #4, !dbg !33
  %497 = bitcast float %465 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %497, ptr addrspace(1) %481, i1 %32) #4, !dbg !33
  %498 = bitcast float %466 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %498, ptr addrspace(1) %482, i1 %32) #4, !dbg !33
  %499 = bitcast float %467 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %499, ptr addrspace(1) %483, i1 %32) #4, !dbg !33
  %500 = bitcast float %468 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %500, ptr addrspace(1) %484, i1 %32) #4, !dbg !33
  %501 = bitcast float %469 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %501, ptr addrspace(1) %485, i1 %32) #4, !dbg !33
  %502 = bitcast float %470 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %502, ptr addrspace(1) %486, i1 %32) #4, !dbg !33
  %503 = bitcast float %471 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %503, ptr addrspace(1) %487, i1 %32) #4, !dbg !33
  %504 = bitcast float %472 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %504, ptr addrspace(1) %488, i1 %32) #4, !dbg !33
  %505 = bitcast float %473 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %505, ptr addrspace(1) %489, i1 %32) #4, !dbg !33
  %506 = bitcast float %474 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %506, ptr addrspace(1) %490, i1 %32) #4, !dbg !33
  %507 = bitcast float %475 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %507, ptr addrspace(1) %491, i1 %32) #4, !dbg !33
  %508 = bitcast float %476 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %508, ptr addrspace(1) %492, i1 %32) #4, !dbg !33
  %509 = bitcast float %477 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %509, ptr addrspace(1) %493, i1 %32) #4, !dbg !33
  %510 = shl i32 %439, 9, !dbg !34
  %511 = shl i32 %443, 9, !dbg !34
  %512 = shl i32 %441, 9, !dbg !34
  %513 = or disjoint i32 %510, 6144, !dbg !34
  %514 = mul i32 %436, 4608, !dbg !35
  %515 = add i32 %514, %.decomposed, !dbg !36
  %516 = add i32 %515, %510, !dbg !37
  %517 = add i32 %515, %511, !dbg !37
  %518 = add i32 %515, %512, !dbg !37
  %519 = add i32 %515, %513, !dbg !37
  %520 = sext i32 %516 to i64, !dbg !38
  %521 = getelementptr float, ptr addrspace(1) %3, i64 %520, !dbg !38
  %522 = sext i32 %517 to i64, !dbg !38
  %523 = getelementptr float, ptr addrspace(1) %3, i64 %522, !dbg !38
  %524 = sext i32 %518 to i64, !dbg !38
  %525 = getelementptr float, ptr addrspace(1) %3, i64 %524, !dbg !38
  %526 = sext i32 %519 to i64, !dbg !38
  %527 = getelementptr float, ptr addrspace(1) %3, i64 %526, !dbg !38
  %528 = shl i32 %9, 8, !dbg !39
  %529 = and i32 %528, 3840, !dbg !39
  %530 = or disjoint i32 %529, %11, !dbg !39
  %531 = and i32 %433, 1020, !dbg !39
  %532 = lshr exact i32 %529, 4, !dbg !39
  %533 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %532, !dbg !39
  %534 = getelementptr float, ptr addrspace(3) %533, i32 %530, !dbg !39
  %535 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %534, <1 x i32> %535, i1 true) #4, !dbg !39
  %536 = or disjoint i32 %530, 16, !dbg !39
  %537 = getelementptr float, ptr addrspace(3) %533, i32 %536, !dbg !39
  %538 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %538, i1 true) #4, !dbg !39
  %539 = or disjoint i32 %530, 32, !dbg !39
  %540 = getelementptr float, ptr addrspace(3) %533, i32 %539, !dbg !39
  %541 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %540, <1 x i32> %541, i1 true) #4, !dbg !39
  %542 = or disjoint i32 %530, 48, !dbg !39
  %543 = getelementptr float, ptr addrspace(3) %533, i32 %542, !dbg !39
  %544 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 true) #4, !dbg !39
  %545 = or disjoint i32 %530, 64, !dbg !39
  %546 = getelementptr float, ptr addrspace(3) %533, i32 %545, !dbg !39
  %547 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %547, i1 true) #4, !dbg !39
  %548 = or disjoint i32 %530, 80, !dbg !39
  %549 = getelementptr float, ptr addrspace(3) %533, i32 %548, !dbg !39
  %550 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %550, i1 true) #4, !dbg !39
  %551 = or disjoint i32 %530, 96, !dbg !39
  %552 = getelementptr float, ptr addrspace(3) %533, i32 %551, !dbg !39
  %553 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %552, <1 x i32> %553, i1 true) #4, !dbg !39
  %554 = or disjoint i32 %530, 112, !dbg !39
  %555 = getelementptr float, ptr addrspace(3) %533, i32 %554, !dbg !39
  %556 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %556, i1 true) #4, !dbg !39
  %557 = or disjoint i32 %530, 128, !dbg !39
  %558 = getelementptr float, ptr addrspace(3) %533, i32 %557, !dbg !39
  %559 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %558, <1 x i32> %559, i1 true) #4, !dbg !39
  %560 = or disjoint i32 %530, 144, !dbg !39
  %561 = getelementptr float, ptr addrspace(3) %533, i32 %560, !dbg !39
  %562 = insertelement <1 x i32> poison, i32 %122, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %562, i1 true) #4, !dbg !39
  %563 = or disjoint i32 %530, 160, !dbg !39
  %564 = getelementptr float, ptr addrspace(3) %533, i32 %563, !dbg !39
  %565 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %564, <1 x i32> %565, i1 true) #4, !dbg !39
  %566 = or disjoint i32 %530, 176, !dbg !39
  %567 = getelementptr float, ptr addrspace(3) %533, i32 %566, !dbg !39
  %568 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %568, i1 true) #4, !dbg !39
  %569 = or disjoint i32 %530, 192, !dbg !39
  %570 = getelementptr float, ptr addrspace(3) %533, i32 %569, !dbg !39
  %571 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %570, <1 x i32> %571, i1 true) #4, !dbg !39
  %572 = or disjoint i32 %530, 208, !dbg !39
  %573 = getelementptr float, ptr addrspace(3) %533, i32 %572, !dbg !39
  %574 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %573, <1 x i32> %574, i1 true) #4, !dbg !39
  %575 = or disjoint i32 %530, 224, !dbg !39
  %576 = getelementptr float, ptr addrspace(3) %533, i32 %575, !dbg !39
  %577 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %577, i1 true) #4, !dbg !39
  %578 = or disjoint i32 %530, 240, !dbg !39
  %579 = getelementptr float, ptr addrspace(3) %533, i32 %578, !dbg !39
  %580 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %579, <1 x i32> %580, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %581 = lshr i32 %433, 6, !dbg !39
  %582 = and i32 %581, 12, !dbg !39
  %583 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %582, !dbg !39
  %584 = getelementptr inbounds float, ptr addrspace(3) %583, i32 %531, !dbg !39
  %585 = or disjoint i32 %531, 1024, !dbg !39
  %586 = lshr i32 %585, 6, !dbg !39
  %587 = and i32 %586, 28, !dbg !39
  %588 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %587, !dbg !39
  %589 = getelementptr inbounds float, ptr addrspace(3) %588, i32 %585, !dbg !39
  %590 = load <4 x i32>, ptr addrspace(3) %589, align 16, !dbg !39
  %591 = or disjoint i32 %531, 2048, !dbg !39
  %592 = lshr i32 %591, 6, !dbg !39
  %593 = and i32 %592, 44, !dbg !39
  %594 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %593, !dbg !39
  %595 = getelementptr inbounds float, ptr addrspace(3) %594, i32 %591, !dbg !39
  %596 = load <4 x i32>, ptr addrspace(3) %595, align 16, !dbg !39
  %597 = or disjoint i32 %531, 3072, !dbg !39
  %598 = lshr i32 %597, 6, !dbg !39
  %599 = and i32 %598, 60, !dbg !39
  %600 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %599, !dbg !39
  %601 = getelementptr inbounds float, ptr addrspace(3) %600, i32 %597, !dbg !39
  %602 = load <4 x i32>, ptr addrspace(3) %601, align 16, !dbg !39
  %.extract = load i32, ptr addrspace(3) %584, align 16, !dbg !39
  %603 = getelementptr inbounds i8, ptr addrspace(3) %584, i32 4, !dbg !39
  %.extract19 = load i32, ptr addrspace(3) %603, align 4, !dbg !39
  %604 = getelementptr inbounds i8, ptr addrspace(3) %584, i32 8, !dbg !39
  %.extract20 = load i32, ptr addrspace(3) %604, align 8, !dbg !39
  %605 = getelementptr inbounds i8, ptr addrspace(3) %584, i32 12, !dbg !39
  %.extract21 = load i32, ptr addrspace(3) %605, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %521, i1 %445) #4, !dbg !39
  %.extract22 = extractelement <4 x i32> %590, i64 0, !dbg !39
  %.extract23 = extractelement <4 x i32> %590, i64 1, !dbg !39
  %.extract24 = extractelement <4 x i32> %590, i64 2, !dbg !39
  %.extract25 = extractelement <4 x i32> %590, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %523, i1 %444) #4, !dbg !39
  %.extract26 = extractelement <4 x i32> %596, i64 0, !dbg !39
  %.extract27 = extractelement <4 x i32> %596, i64 1, !dbg !39
  %.extract28 = extractelement <4 x i32> %596, i64 2, !dbg !39
  %.extract29 = extractelement <4 x i32> %596, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %525, i1 %442) #4, !dbg !39
  %.extract30 = extractelement <4 x i32> %602, i64 0, !dbg !39
  %.extract31 = extractelement <4 x i32> %602, i64 1, !dbg !39
  %.extract32 = extractelement <4 x i32> %602, i64 2, !dbg !39
  %.extract33 = extractelement <4 x i32> %602, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %527, i1 %440) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5jxyuzwle4rs3d4dupwf64vu4vgvdiw77pkfjhi3fqylmcssmu4.py", directory: "inductor_cache/5j")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_31", linkageName: "triton_poi_fused_add_convolution_div_sqrt_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 37, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 31, column: 19, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 25, scope: !7)
!33 = !DILocation(line: 38, column: 43, scope: !7)
!34 = !DILocation(line: 39, column: 34, scope: !7)
!35 = !DILocation(line: 39, column: 44, scope: !7)
!36 = !DILocation(line: 39, column: 30, scope: !7)
!37 = !DILocation(line: 39, column: 39, scope: !7)
!38 = !DILocation(line: 39, column: 25, scope: !7)
!39 = !DILocation(line: 39, column: 55, scope: !7)
!40 = !DILocation(line: 39, column: 4, scope: !7)
