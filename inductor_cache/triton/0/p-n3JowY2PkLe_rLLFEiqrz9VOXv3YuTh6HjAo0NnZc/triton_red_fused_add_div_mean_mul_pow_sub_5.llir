; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_mean_mul_pow_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 63, !dbg !10
  %8 = or disjoint i32 %7, 64, !dbg !10
  %9 = or disjoint i32 %7, 128, !dbg !10
  %10 = or disjoint i32 %7, 192, !dbg !10
  %11 = shl i32 %6, 2, !dbg !10
  %12 = and i32 %11, 252, !dbg !10
  %13 = and i32 %6, 60, !dbg !11
  %14 = and i32 %8, 124, !dbg !11
  %15 = and i32 %9, 188, !dbg !11
  %16 = and i32 %10, 252, !dbg !11
  %17 = zext nneg i32 %12 to i64, !dbg !12
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !12
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !13
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !13
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !13
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !13
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !13
  %.idx = shl nuw nsw i32 %12, 3, !dbg !13
  %24 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !13
  %25 = insertelement <1 x i32> poison, i32 %20, i64 0, !dbg !13
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %25, i1 true) #5, !dbg !13
  %26 = shl nuw nsw i32 %12, 1, !dbg !13
  %27 = or disjoint i32 %26, 2, !dbg !13
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !13
  %29 = insertelement <1 x i32> poison, i32 %21, i64 0, !dbg !13
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %29, i1 true) #5, !dbg !13
  %30 = or disjoint i32 %26, 4, !dbg !13
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30, !dbg !13
  %32 = insertelement <1 x i32> poison, i32 %22, i64 0, !dbg !13
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %32, i1 true) #5, !dbg !13
  %33 = or disjoint i32 %26, 6, !dbg !13
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %33, !dbg !13
  %35 = insertelement <1 x i32> poison, i32 %23, i64 0, !dbg !13
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %35, i1 true) #5, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !13
  %.idx1 = shl nuw nsw i32 %7, 3, !dbg !13
  %36 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !13
  %37 = load float, ptr addrspace(3) %36, align 8, !dbg !13
  %.idx2 = shl nuw nsw i32 %8, 3, !dbg !13
  %38 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !13
  %39 = load float, ptr addrspace(3) %38, align 8, !dbg !13
  %.idx3 = shl nuw nsw i32 %9, 3, !dbg !13
  %40 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !13
  %41 = load float, ptr addrspace(3) %40, align 8, !dbg !13
  %.idx4 = shl nuw nsw i32 %10, 3, !dbg !13
  %42 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !13
  %43 = load float, ptr addrspace(3) %42, align 8, !dbg !13
  %44 = zext nneg i32 %13 to i64, !dbg !14
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !14
  %46 = zext nneg i32 %14 to i64, !dbg !14
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !14
  %48 = zext nneg i32 %15 to i64, !dbg !14
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !14
  %50 = zext nneg i32 %16 to i64, !dbg !14
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !14
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 true, i32 0, i1 true) #5, !dbg !15
  %53 = bitcast i32 %52 to float, !dbg !15
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 true, i32 0, i1 true) #5, !dbg !15
  %55 = bitcast i32 %54 to float, !dbg !15
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true) #5, !dbg !15
  %57 = bitcast i32 %56 to float, !dbg !15
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 true, i32 0, i1 true) #5, !dbg !15
  %59 = bitcast i32 %58 to float, !dbg !15
  %60 = or disjoint i32 %13, 1, !dbg !16
  %61 = or disjoint i32 %14, 1, !dbg !16
  %62 = or disjoint i32 %15, 1, !dbg !16
  %63 = or disjoint i32 %16, 1, !dbg !16
  %64 = zext nneg i32 %60 to i64, !dbg !17
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !17
  %66 = zext nneg i32 %61 to i64, !dbg !17
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !17
  %68 = zext nneg i32 %62 to i64, !dbg !17
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !17
  %70 = zext nneg i32 %63 to i64, !dbg !17
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !17
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 true, i32 0, i1 true) #5, !dbg !18
  %73 = bitcast i32 %72 to float, !dbg !18
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 true, i32 0, i1 true) #5, !dbg !18
  %75 = bitcast i32 %74 to float, !dbg !18
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true) #5, !dbg !18
  %77 = bitcast i32 %76 to float, !dbg !18
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 true, i32 0, i1 true) #5, !dbg !18
  %79 = bitcast i32 %78 to float, !dbg !18
  %80 = or disjoint i32 %13, 2, !dbg !19
  %81 = or disjoint i32 %14, 2, !dbg !19
  %82 = or disjoint i32 %15, 2, !dbg !19
  %83 = or disjoint i32 %16, 2, !dbg !19
  %84 = zext nneg i32 %80 to i64, !dbg !20
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !20
  %86 = zext nneg i32 %81 to i64, !dbg !20
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !20
  %88 = zext nneg i32 %82 to i64, !dbg !20
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !20
  %90 = zext nneg i32 %83 to i64, !dbg !20
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !20
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 true, i32 0, i1 true) #5, !dbg !21
  %93 = bitcast i32 %92 to float, !dbg !21
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 true, i32 0, i1 true) #5, !dbg !21
  %95 = bitcast i32 %94 to float, !dbg !21
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 true, i32 0, i1 true) #5, !dbg !21
  %97 = bitcast i32 %96 to float, !dbg !21
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 true, i32 0, i1 true) #5, !dbg !21
  %99 = bitcast i32 %98 to float, !dbg !21
  %100 = or disjoint i32 %13, 3, !dbg !22
  %101 = or i32 %7, 67, !dbg !22
  %102 = or i32 %7, 131, !dbg !22
  %103 = or i32 %7, 195, !dbg !22
  %104 = zext nneg i32 %100 to i64, !dbg !23
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !23
  %106 = zext nneg i32 %101 to i64, !dbg !23
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !23
  %108 = zext nneg i32 %102 to i64, !dbg !23
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !23
  %110 = zext nneg i32 %103 to i64, !dbg !23
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !23
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 true, i32 0, i1 true) #5, !dbg !24
  %113 = bitcast i32 %112 to float, !dbg !24
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 true, i32 0, i1 true) #5, !dbg !24
  %115 = bitcast i32 %114 to float, !dbg !24
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 true, i32 0, i1 true) #5, !dbg !24
  %117 = bitcast i32 %116 to float, !dbg !24
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 true, i32 0, i1 true) #5, !dbg !24
  %119 = bitcast i32 %118 to float, !dbg !24
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !25
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !26
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !26
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %126 = insertelement <1 x i32> poison, i32 %122, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %126, i1 true) #5, !dbg !26
  %127 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %127, i1 true) #5, !dbg !26
  %128 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %128, i1 true) #5, !dbg !26
  %129 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %129, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %130 = load float, ptr addrspace(3) %36, align 8, !dbg !26
  %131 = load float, ptr addrspace(3) %38, align 8, !dbg !26
  %132 = load float, ptr addrspace(3) %40, align 8, !dbg !26
  %133 = load float, ptr addrspace(3) %42, align 8, !dbg !26
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !27
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !27
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !27
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !27
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 true, i32 0, i1 true) #5, !dbg !28
  %139 = bitcast i32 %138 to float, !dbg !28
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 true, i32 0, i1 true) #5, !dbg !28
  %141 = bitcast i32 %140 to float, !dbg !28
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 true, i32 0, i1 true) #5, !dbg !28
  %143 = bitcast i32 %142 to float, !dbg !28
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 true, i32 0, i1 true) #5, !dbg !28
  %145 = bitcast i32 %144 to float, !dbg !28
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !29
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !29
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !29
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !29
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 true, i32 0, i1 true) #5, !dbg !30
  %151 = bitcast i32 %150 to float, !dbg !30
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 true, i32 0, i1 true) #5, !dbg !30
  %153 = bitcast i32 %152 to float, !dbg !30
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 true, i32 0, i1 true) #5, !dbg !30
  %155 = bitcast i32 %154 to float, !dbg !30
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 true, i32 0, i1 true) #5, !dbg !30
  %157 = bitcast i32 %156 to float, !dbg !30
  %158 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !31
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !31
  %160 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !31
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !31
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 true, i32 0, i1 true) #5, !dbg !32
  %163 = bitcast i32 %162 to float, !dbg !32
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 true, i32 0, i1 true) #5, !dbg !32
  %165 = bitcast i32 %164 to float, !dbg !32
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 true, i32 0, i1 true) #5, !dbg !32
  %167 = bitcast i32 %166 to float, !dbg !32
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 true, i32 0, i1 true) #5, !dbg !32
  %169 = bitcast i32 %168 to float, !dbg !32
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !33
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !33
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !33
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !33
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 true, i32 0, i1 true) #5, !dbg !34
  %175 = bitcast i32 %174 to float, !dbg !34
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 true, i32 0, i1 true) #5, !dbg !34
  %177 = bitcast i32 %176 to float, !dbg !34
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 true, i32 0, i1 true) #5, !dbg !34
  %179 = bitcast i32 %178 to float, !dbg !34
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 true, i32 0, i1 true) #5, !dbg !34
  %181 = bitcast i32 %180 to float, !dbg !34
  %182 = fmul float %53, %53, !dbg !35
  %183 = fmul float %55, %55, !dbg !35
  %184 = fmul float %57, %57, !dbg !35
  %185 = fmul float %59, %59, !dbg !35
  %186 = fmul float %73, %73, !dbg !36
  %187 = fmul float %75, %75, !dbg !36
  %188 = fmul float %77, %77, !dbg !36
  %189 = fmul float %79, %79, !dbg !36
  %190 = fadd float %182, %186, !dbg !37
  %191 = fadd float %183, %187, !dbg !37
  %192 = fadd float %184, %188, !dbg !37
  %193 = fadd float %185, %189, !dbg !37
  %194 = fmul float %93, %93, !dbg !38
  %195 = fmul float %95, %95, !dbg !38
  %196 = fmul float %97, %97, !dbg !38
  %197 = fmul float %99, %99, !dbg !38
  %198 = fadd float %190, %194, !dbg !39
  %199 = fadd float %191, %195, !dbg !39
  %200 = fadd float %192, %196, !dbg !39
  %201 = fadd float %193, %197, !dbg !39
  %202 = fmul float %113, %113, !dbg !40
  %203 = fmul float %115, %115, !dbg !40
  %204 = fmul float %117, %117, !dbg !40
  %205 = fmul float %119, %119, !dbg !40
  %206 = fadd float %198, %202, !dbg !41
  %207 = fadd float %199, %203, !dbg !41
  %208 = fadd float %200, %204, !dbg !41
  %209 = fadd float %201, %205, !dbg !41
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %210, 0, !dbg !42
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i = icmp eq i32 %211, 0, !dbg !42
  br i1 %.not.i, label %217, label %212, !dbg !42

212:                                              ; preds = %5
  br i1 %.not1.i, label %215, label %213, !dbg !42

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

217:                                              ; preds = %5
  br i1 %.not1.i, label %220, label %218, !dbg !42

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %213, %215, %218, %220
  %.0.i = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !42
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i8 = icmp eq i32 %222, 0, !dbg !42
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i11 = icmp eq i32 %223, 0, !dbg !42
  br i1 %.not.i8, label %229, label %224, !dbg !42

224:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %227, label %225, !dbg !42

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %207) #5, !dbg !42
  br label %__nv_sqrtf.exit12, !dbg !42

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %207) #5, !dbg !42
  br label %__nv_sqrtf.exit12, !dbg !42

229:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %232, label %230, !dbg !42

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %207) #5, !dbg !42
  br label %__nv_sqrtf.exit12, !dbg !42

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %207) #5, !dbg !42
  br label %__nv_sqrtf.exit12, !dbg !42

__nv_sqrtf.exit12:                                ; preds = %225, %227, %230, %232
  %.0.i10 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !42
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i13 = icmp eq i32 %234, 0, !dbg !42
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i16 = icmp eq i32 %235, 0, !dbg !42
  br i1 %.not.i13, label %241, label %236, !dbg !42

236:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %239, label %237, !dbg !42

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %208) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %208) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

241:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %244, label %242, !dbg !42

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %208) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %208) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

__nv_sqrtf.exit17:                                ; preds = %237, %239, %242, %244
  %.0.i15 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !42
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i18 = icmp eq i32 %246, 0, !dbg !42
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i21 = icmp eq i32 %247, 0, !dbg !42
  br i1 %.not.i18, label %253, label %248, !dbg !42

248:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %251, label %249, !dbg !42

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %209) #5, !dbg !42
  br label %__nv_sqrtf.exit22, !dbg !42

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %209) #5, !dbg !42
  br label %__nv_sqrtf.exit22, !dbg !42

253:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %256, label %254, !dbg !42

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %209) #5, !dbg !42
  br label %__nv_sqrtf.exit22, !dbg !42

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %209) #5, !dbg !42
  br label %__nv_sqrtf.exit22, !dbg !42

__nv_sqrtf.exit22:                                ; preds = %249, %251, %254, %256
  %.0.i20 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !42
  %258 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !43
  %259 = fcmp ogt float %.0.i10, 0x3D71979980000000, !dbg !43
  %260 = fcmp ogt float %.0.i15, 0x3D71979980000000, !dbg !43
  %261 = fcmp ogt float %.0.i20, 0x3D71979980000000, !dbg !43
  %262 = fcmp uno float %.0.i, 0.000000e+00, !dbg !47
  %263 = fcmp uno float %.0.i10, 0.000000e+00, !dbg !47
  %264 = fcmp uno float %.0.i15, 0.000000e+00, !dbg !47
  %265 = fcmp uno float %.0.i20, 0.000000e+00, !dbg !47
  %266 = or i1 %258, %262, !dbg !48
  %267 = or i1 %259, %263, !dbg !48
  %268 = or i1 %260, %264, !dbg !48
  %269 = or i1 %261, %265, !dbg !48
  %270 = select i1 %266, float %.0.i, float 0x3D71979980000000, !dbg !49
  %271 = select i1 %267, float %.0.i10, float 0x3D71979980000000, !dbg !49
  %272 = select i1 %268, float %.0.i15, float 0x3D71979980000000, !dbg !49
  %273 = select i1 %269, float %.0.i20, float 0x3D71979980000000, !dbg !49
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float %270) #5, !dbg !50
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float %271) #5, !dbg !50
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %272) #5, !dbg !50
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %273) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %7, !dbg !50
  %279 = bitcast float %274 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #5, !dbg !50
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %8, !dbg !50
  %281 = bitcast float %275 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #5, !dbg !50
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !50
  %283 = bitcast float %276 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #5, !dbg !50
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !50
  %285 = bitcast float %277 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !50
  %287 = load <4 x float>, ptr addrspace(3) %286, align 16, !dbg !50
  %288 = fmul float %139, %139, !dbg !51
  %289 = fmul float %141, %141, !dbg !51
  %290 = fmul float %143, %143, !dbg !51
  %291 = fmul float %145, %145, !dbg !51
  %292 = fmul float %151, %151, !dbg !52
  %293 = fmul float %153, %153, !dbg !52
  %294 = fmul float %155, %155, !dbg !52
  %295 = fmul float %157, %157, !dbg !52
  %296 = fadd float %288, %292, !dbg !53
  %297 = fadd float %289, %293, !dbg !53
  %298 = fadd float %290, %294, !dbg !53
  %299 = fadd float %291, %295, !dbg !53
  %300 = fmul float %163, %163, !dbg !54
  %301 = fmul float %165, %165, !dbg !54
  %302 = fmul float %167, %167, !dbg !54
  %303 = fmul float %169, %169, !dbg !54
  %304 = fadd float %296, %300, !dbg !55
  %305 = fadd float %297, %301, !dbg !55
  %306 = fadd float %298, %302, !dbg !55
  %307 = fadd float %299, %303, !dbg !55
  %308 = fmul float %175, %175, !dbg !56
  %309 = fmul float %177, %177, !dbg !56
  %310 = fmul float %179, %179, !dbg !56
  %311 = fmul float %181, %181, !dbg !56
  %312 = fadd float %304, %308, !dbg !57
  %313 = fadd float %305, %309, !dbg !57
  %314 = fadd float %306, %310, !dbg !57
  %315 = fadd float %307, %311, !dbg !57
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i23 = icmp eq i32 %316, 0, !dbg !58
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !58
  %.not1.i26 = icmp eq i32 %317, 0, !dbg !58
  br i1 %.not.i23, label %323, label %318, !dbg !58

318:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %321, label %319, !dbg !58

319:                                              ; preds = %318
  %320 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %312) #5, !dbg !58
  br label %__nv_sqrtf.exit27, !dbg !58

321:                                              ; preds = %318
  %322 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %312) #5, !dbg !58
  br label %__nv_sqrtf.exit27, !dbg !58

323:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %326, label %324, !dbg !58

324:                                              ; preds = %323
  %325 = tail call float @llvm.nvvm.sqrt.rn.f(float %312) #5, !dbg !58
  br label %__nv_sqrtf.exit27, !dbg !58

326:                                              ; preds = %323
  %327 = tail call float @llvm.nvvm.sqrt.approx.f(float %312) #5, !dbg !58
  br label %__nv_sqrtf.exit27, !dbg !58

__nv_sqrtf.exit27:                                ; preds = %319, %321, %324, %326
  %.0.i25 = phi float [ %320, %319 ], [ %322, %321 ], [ %325, %324 ], [ %327, %326 ], !dbg !58
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i28 = icmp eq i32 %328, 0, !dbg !58
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !58
  %.not1.i31 = icmp eq i32 %329, 0, !dbg !58
  br i1 %.not.i28, label %335, label %330, !dbg !58

330:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %333, label %331, !dbg !58

331:                                              ; preds = %330
  %332 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %313) #5, !dbg !58
  br label %__nv_sqrtf.exit32, !dbg !58

333:                                              ; preds = %330
  %334 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %313) #5, !dbg !58
  br label %__nv_sqrtf.exit32, !dbg !58

335:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %338, label %336, !dbg !58

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.f(float %313) #5, !dbg !58
  br label %__nv_sqrtf.exit32, !dbg !58

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.f(float %313) #5, !dbg !58
  br label %__nv_sqrtf.exit32, !dbg !58

__nv_sqrtf.exit32:                                ; preds = %331, %333, %336, %338
  %.0.i30 = phi float [ %332, %331 ], [ %334, %333 ], [ %337, %336 ], [ %339, %338 ], !dbg !58
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i33 = icmp eq i32 %340, 0, !dbg !58
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !58
  %.not1.i36 = icmp eq i32 %341, 0, !dbg !58
  br i1 %.not.i33, label %347, label %342, !dbg !58

342:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %345, label %343, !dbg !58

343:                                              ; preds = %342
  %344 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %314) #5, !dbg !58
  br label %__nv_sqrtf.exit37, !dbg !58

345:                                              ; preds = %342
  %346 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %314) #5, !dbg !58
  br label %__nv_sqrtf.exit37, !dbg !58

347:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %350, label %348, !dbg !58

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.f(float %314) #5, !dbg !58
  br label %__nv_sqrtf.exit37, !dbg !58

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.f(float %314) #5, !dbg !58
  br label %__nv_sqrtf.exit37, !dbg !58

__nv_sqrtf.exit37:                                ; preds = %343, %345, %348, %350
  %.0.i35 = phi float [ %344, %343 ], [ %346, %345 ], [ %349, %348 ], [ %351, %350 ], !dbg !58
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i38 = icmp eq i32 %352, 0, !dbg !58
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !58
  %.not1.i41 = icmp eq i32 %353, 0, !dbg !58
  br i1 %.not.i38, label %359, label %354, !dbg !58

354:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %357, label %355, !dbg !58

355:                                              ; preds = %354
  %356 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %315) #5, !dbg !58
  br label %__nv_sqrtf.exit42, !dbg !58

357:                                              ; preds = %354
  %358 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %315) #5, !dbg !58
  br label %__nv_sqrtf.exit42, !dbg !58

359:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %362, label %360, !dbg !58

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.f(float %315) #5, !dbg !58
  br label %__nv_sqrtf.exit42, !dbg !58

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.f(float %315) #5, !dbg !58
  br label %__nv_sqrtf.exit42, !dbg !58

__nv_sqrtf.exit42:                                ; preds = %355, %357, %360, %362
  %.0.i40 = phi float [ %356, %355 ], [ %358, %357 ], [ %361, %360 ], [ %363, %362 ], !dbg !58
  %364 = extractelement <4 x float> %287, i64 3, !dbg !50
  %365 = bitcast i32 %125 to float, !dbg !26
  %366 = fsub float %364, %365, !dbg !59
  %367 = fadd float %366, %365, !dbg !60
  %368 = extractelement <4 x float> %287, i64 2, !dbg !50
  %369 = bitcast i32 %124 to float, !dbg !26
  %370 = fsub float %368, %369, !dbg !59
  %371 = fadd float %370, %369, !dbg !60
  %372 = extractelement <4 x float> %287, i64 1, !dbg !50
  %373 = bitcast i32 %123 to float, !dbg !26
  %374 = fsub float %372, %373, !dbg !59
  %375 = fadd float %374, %373, !dbg !60
  %376 = extractelement <4 x float> %287, i64 0, !dbg !50
  %377 = bitcast i32 %122 to float, !dbg !26
  %378 = fsub float %376, %377, !dbg !59
  %379 = fadd float %378, %377, !dbg !60
  %380 = lshr i32 %6, 5, !dbg !10
  %381 = and i32 %6, 31, !dbg !10
  %382 = fcmp ogt float %.0.i25, 0x3D71979980000000, !dbg !61
  %383 = fcmp ogt float %.0.i30, 0x3D71979980000000, !dbg !61
  %384 = fcmp ogt float %.0.i35, 0x3D71979980000000, !dbg !61
  %385 = fcmp ogt float %.0.i40, 0x3D71979980000000, !dbg !61
  %386 = fcmp uno float %.0.i25, 0.000000e+00, !dbg !63
  %387 = fcmp uno float %.0.i30, 0.000000e+00, !dbg !63
  %388 = fcmp uno float %.0.i35, 0.000000e+00, !dbg !63
  %389 = fcmp uno float %.0.i40, 0.000000e+00, !dbg !63
  %390 = or i1 %382, %386, !dbg !64
  %391 = or i1 %383, %387, !dbg !64
  %392 = or i1 %384, %388, !dbg !64
  %393 = or i1 %385, %389, !dbg !64
  %394 = select i1 %390, float %.0.i25, float 0x3D71979980000000, !dbg !65
  %395 = select i1 %391, float %.0.i30, float 0x3D71979980000000, !dbg !65
  %396 = select i1 %392, float %.0.i35, float 0x3D71979980000000, !dbg !65
  %397 = select i1 %393, float %.0.i40, float 0x3D71979980000000, !dbg !65
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %394) #5, !dbg !66
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %395) #5, !dbg !66
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %396) #5, !dbg !66
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %397) #5, !dbg !66
  %402 = fsub float %274, %398, !dbg !67
  %403 = fsub float %275, %399, !dbg !67
  %404 = fsub float %276, %400, !dbg !67
  %405 = fsub float %277, %401, !dbg !67
  %406 = fmul float %402, %402, !dbg !68
  %407 = fmul float %403, %403, !dbg !68
  %408 = fmul float %404, %404, !dbg !68
  %409 = fmul float %405, %405, !dbg !68
  %410 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !69
  %411 = bitcast float %379 to i32, !dbg !70
  %412 = bitcast float %375 to i32, !dbg !70
  %413 = bitcast float %371 to i32, !dbg !70
  %414 = bitcast float %367 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %411, i32 %412, i32 %413, i32 %414, ptr addrspace(1) %410, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %415 = fadd float %406, %407, !dbg !75
  %416 = fadd float %415, %408, !dbg !75
  %417 = fadd float %416, %409, !dbg !75
  %418 = bitcast float %417 to i32, !dbg !71
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 16, i32 31), !dbg !71
  %420 = bitcast i32 %419 to float, !dbg !71
  %421 = fadd float %417, %420, !dbg !75
  %422 = bitcast float %421 to i32, !dbg !71
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 8, i32 31), !dbg !71
  %424 = bitcast i32 %423 to float, !dbg !71
  %425 = fadd float %421, %424, !dbg !75
  %426 = bitcast float %425 to i32, !dbg !71
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 4, i32 31), !dbg !71
  %428 = bitcast i32 %427 to float, !dbg !71
  %429 = fadd float %425, %428, !dbg !75
  %430 = bitcast float %429 to i32, !dbg !71
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 2, i32 31), !dbg !71
  %432 = bitcast i32 %431 to float, !dbg !71
  %433 = fadd float %429, %432, !dbg !75
  %434 = bitcast float %433 to i32, !dbg !71
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 1, i32 31), !dbg !71
  %436 = bitcast i32 %435 to float, !dbg !71
  %437 = fadd float %433, %436, !dbg !75
  %438 = icmp eq i32 %381, 0, !dbg !71
  %439 = and i32 %380, 1, !dbg !71
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %439, !dbg !71
  %441 = bitcast float %437 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 %438) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %442 = icmp slt i32 %6, 2, !dbg !71
  %443 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !71
  %444 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %443, i1 %442) #5, !dbg !71
  %445 = bitcast i32 %444 to float, !dbg !71
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 1, i32 31), !dbg !71
  %447 = bitcast i32 %446 to float, !dbg !71
  %448 = fadd float %445, %447, !dbg !75
  %449 = and i32 %6, 1, !dbg !71
  %450 = icmp eq i32 %449, 0, !dbg !71
  %451 = and i1 %442, %450, !dbg !71
  %452 = bitcast float %448 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %452, i1 %451) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %453 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %453, float 2.560000e+02) #5, !dbg !77
  %455 = fmul float %454, 2.500000e-01, !dbg !78
  %456 = fadd float %454, %455, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %457 = icmp eq i32 %7, 0, !dbg !81
  %458 = bitcast float %456 to i32, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %458, ptr addrspace(1) %0, i1 %457) #5, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py", directory: "inductor_cache/pz")
!4 = !{ptr @triton_red_fused_add_div_mean_mul_pow_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_mean_mul_pow_sub_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_mean_mul_pow_sub_5", linkageName: "triton_red_fused_add_div_mean_mul_pow_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 33, column: 36, scope: !7)
!12 = !DILocation(line: 32, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 33, column: 34, scope: !7)
!15 = !DILocation(line: 33, column: 41, scope: !7)
!16 = !DILocation(line: 34, column: 38, scope: !7)
!17 = !DILocation(line: 34, column: 34, scope: !7)
!18 = !DILocation(line: 34, column: 45, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 35, column: 34, scope: !7)
!21 = !DILocation(line: 35, column: 45, scope: !7)
!22 = !DILocation(line: 36, column: 38, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 45, scope: !7)
!25 = !DILocation(line: 37, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 40, scope: !7)
!27 = !DILocation(line: 38, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 42, scope: !7)
!29 = !DILocation(line: 39, column: 35, scope: !7)
!30 = !DILocation(line: 39, column: 46, scope: !7)
!31 = !DILocation(line: 40, column: 35, scope: !7)
!32 = !DILocation(line: 40, column: 46, scope: !7)
!33 = !DILocation(line: 41, column: 35, scope: !7)
!34 = !DILocation(line: 41, column: 46, scope: !7)
!35 = !DILocation(line: 42, column: 22, scope: !7)
!36 = !DILocation(line: 43, column: 22, scope: !7)
!37 = !DILocation(line: 44, column: 22, scope: !7)
!38 = !DILocation(line: 45, column: 22, scope: !7)
!39 = !DILocation(line: 46, column: 22, scope: !7)
!40 = !DILocation(line: 47, column: 23, scope: !7)
!41 = !DILocation(line: 48, column: 23, scope: !7)
!42 = !DILocation(line: 49, column: 31, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 51, column: 46, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 52, column: 23, scope: !7)
!51 = !DILocation(line: 55, column: 24, scope: !7)
!52 = !DILocation(line: 56, column: 24, scope: !7)
!53 = !DILocation(line: 57, column: 24, scope: !7)
!54 = !DILocation(line: 58, column: 24, scope: !7)
!55 = !DILocation(line: 59, column: 24, scope: !7)
!56 = !DILocation(line: 60, column: 24, scope: !7)
!57 = !DILocation(line: 61, column: 24, scope: !7)
!58 = !DILocation(line: 62, column: 31, scope: !7)
!59 = !DILocation(line: 53, column: 24, scope: !7)
!60 = !DILocation(line: 54, column: 24, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !62)
!62 = !DILocation(line: 63, column: 46, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !62)
!66 = !DILocation(line: 64, column: 24, scope: !7)
!67 = !DILocation(line: 65, column: 24, scope: !7)
!68 = !DILocation(line: 66, column: 24, scope: !7)
!69 = !DILocation(line: 70, column: 29, scope: !7)
!70 = !DILocation(line: 70, column: 76, scope: !7)
!71 = !DILocation(line: 267, column: 36, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!74 = !DILocation(line: 71, column: 27, scope: !7)
!75 = !DILocation(line: 256, column: 15, scope: !76, inlinedAt: !74)
!76 = distinct !DILexicalBlockFile(scope: !72, file: !73, discriminator: 0)
!77 = !DILocation(line: 73, column: 20, scope: !7)
!78 = !DILocation(line: 75, column: 20, scope: !7)
!79 = !DILocation(line: 76, column: 20, scope: !7)
!80 = !DILocation(line: 77, column: 4, scope: !7)
!81 = !DILocation(line: 78, column: 71, scope: !7)
!82 = !DILocation(line: 78, column: 4, scope: !7)
