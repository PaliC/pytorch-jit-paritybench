; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_div_pow_relu_sub_sum_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = shl i32 %8, 2, !dbg !14
  %17 = and i32 %16, 60, !dbg !14
  %18 = shl i32 %13, 6, !dbg !15
  %19 = shl i32 %14, 6, !dbg !15
  %20 = or disjoint i32 %18, %17, !dbg !16
  %21 = or disjoint i32 %19, %17, !dbg !16
  %22 = sext i32 %20 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = sext i32 %21 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %36 = zext nneg i32 %17 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %43 = insertelement <8 x i32> poison, i32 %35, i64 0, !dbg !18
  %44 = insertelement <8 x i32> %43, i32 %34, i64 1, !dbg !18
  %45 = insertelement <8 x i32> %44, i32 %33, i64 2, !dbg !18
  %46 = insertelement <8 x i32> %45, i32 %32, i64 3, !dbg !18
  %47 = insertelement <8 x i32> %46, i32 %30, i64 4, !dbg !18
  %48 = insertelement <8 x i32> %47, i32 %29, i64 5, !dbg !18
  %49 = insertelement <8 x i32> %48, i32 %28, i64 6, !dbg !18
  %50 = insertelement <8 x i32> %49, i32 %27, i64 7, !dbg !18
  %51 = bitcast <8 x i32> %50 to <8 x float>, !dbg !18
  %52 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !20
  %53 = insertelement <4 x i32> %52, i32 %41, i64 1, !dbg !20
  %54 = insertelement <4 x i32> %53, i32 %40, i64 2, !dbg !20
  %55 = insertelement <4 x i32> %54, i32 %39, i64 3, !dbg !20
  %56 = bitcast <4 x i32> %55 to <4 x float>, !dbg !20
  %57 = shufflevector <4 x float> %56, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !20
  %58 = fadd <8 x float> %57, %51, !dbg !21
  %59 = fcmp olt <8 x float> %58, zeroinitializer, !dbg !22
  %60 = extractelement <8 x i1> %59, i64 7, !dbg !26
  %61 = extractelement <8 x float> %58, i64 7, !dbg !26
  %62 = select i1 %60, float 0.000000e+00, float %61, !dbg !26
  %63 = extractelement <8 x i1> %59, i64 6, !dbg !26
  %64 = extractelement <8 x float> %58, i64 6, !dbg !26
  %65 = select i1 %63, float 0.000000e+00, float %64, !dbg !26
  %66 = extractelement <8 x i1> %59, i64 5, !dbg !26
  %67 = extractelement <8 x float> %58, i64 5, !dbg !26
  %68 = select i1 %66, float 0.000000e+00, float %67, !dbg !26
  %69 = extractelement <8 x i1> %59, i64 4, !dbg !26
  %70 = extractelement <8 x float> %58, i64 4, !dbg !26
  %71 = select i1 %69, float 0.000000e+00, float %70, !dbg !26
  %72 = extractelement <8 x i1> %59, i64 3, !dbg !26
  %73 = extractelement <8 x float> %58, i64 3, !dbg !26
  %74 = select i1 %72, float 0.000000e+00, float %73, !dbg !26
  %75 = extractelement <8 x i1> %59, i64 2, !dbg !26
  %76 = extractelement <8 x float> %58, i64 2, !dbg !26
  %77 = select i1 %75, float 0.000000e+00, float %76, !dbg !26
  %78 = extractelement <8 x i1> %59, i64 1, !dbg !26
  %79 = extractelement <8 x float> %58, i64 1, !dbg !26
  %80 = select i1 %78, float 0.000000e+00, float %79, !dbg !26
  %81 = extractelement <8 x i1> %59, i64 0, !dbg !26
  %82 = extractelement <8 x float> %58, i64 0, !dbg !26
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !26
  %84 = fmul float %62, %62, !dbg !27
  %85 = fmul float %65, %65, !dbg !27
  %86 = fmul float %68, %68, !dbg !27
  %87 = fmul float %71, %71, !dbg !27
  %88 = fmul float %74, %74, !dbg !27
  %89 = fmul float %77, %77, !dbg !27
  %90 = fmul float %80, %80, !dbg !27
  %91 = fmul float %83, %83, !dbg !27
  %92 = fadd float %84, %85, !dbg !28
  %93 = fadd float %86, %92, !dbg !28
  %94 = fadd float %87, %93, !dbg !28
  %95 = fadd float %88, %89, !dbg !28
  %96 = fadd float %90, %95, !dbg !28
  %97 = fadd float %91, %96, !dbg !28
  %98 = bitcast float %94 to i32, !dbg !33
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !33
  %100 = bitcast i32 %99 to float, !dbg !33
  %101 = fadd float %94, %100, !dbg !28
  %102 = bitcast float %101 to i32, !dbg !33
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !33
  %104 = bitcast i32 %103 to float, !dbg !33
  %105 = fadd float %101, %104, !dbg !28
  %106 = bitcast float %105 to i32, !dbg !33
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !33
  %108 = bitcast i32 %107 to float, !dbg !33
  %109 = fadd float %105, %108, !dbg !28
  %110 = bitcast float %109 to i32, !dbg !33
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !33
  %112 = bitcast i32 %111 to float, !dbg !33
  %113 = fadd float %109, %112, !dbg !28
  %114 = bitcast float %97 to i32, !dbg !33
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = fadd float %97, %116, !dbg !28
  %118 = bitcast float %117 to i32, !dbg !33
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !33
  %120 = bitcast i32 %119 to float, !dbg !33
  %121 = fadd float %117, %120, !dbg !28
  %122 = bitcast float %121 to i32, !dbg !33
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !33
  %124 = bitcast i32 %123 to float, !dbg !33
  %125 = fadd float %121, %124, !dbg !28
  %126 = bitcast float %125 to i32, !dbg !33
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !33
  %128 = bitcast i32 %127 to float, !dbg !33
  %129 = fadd float %125, %128, !dbg !28
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !34
  %131 = bitcast float %113 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #3, !dbg !34
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !34
  %133 = bitcast float %129 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  %135 = load i32, ptr addrspace(3) %134, align 4, !dbg !34
  %136 = bitcast float %62 to i32, !dbg !35
  %137 = bitcast float %65 to i32, !dbg !35
  %138 = bitcast float %68 to i32, !dbg !35
  %139 = bitcast float %71 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %136, i32 %137, i32 %138, i32 %139, ptr addrspace(1) %23, i1 true) #3, !dbg !35
  %140 = bitcast float %74 to i32, !dbg !35
  %141 = bitcast float %77 to i32, !dbg !35
  %142 = bitcast float %80 to i32, !dbg !35
  %143 = bitcast float %83 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %140, i32 %141, i32 %142, i32 %143, ptr addrspace(1) %25, i1 true) #3, !dbg !35
  %144 = sext i32 %15 to i64, !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !36
  %146 = and i32 %8, 224, !dbg !37
  %147 = icmp eq i32 %146, 0, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %145, i1 %147) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnpqo6mwi43ljty3msuqxymwtiitfmr4bj532t7yrwlru7fw3ydv.py", directory: "inductor_cache/np")
!4 = !{ptr @triton_per_fused_convolution_div_pow_relu_sub_sum_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_div_pow_relu_sub_sum_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_div_pow_relu_sub_sum_8", linkageName: "triton_per_fused_convolution_div_pow_relu_sub_sum_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 39, scope: !7)
!17 = !DILocation(line: 31, column: 34, scope: !7)
!18 = !DILocation(line: 31, column: 47, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 35, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 38, column: 24, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 38, column: 27, scope: !7)
!35 = !DILocation(line: 39, column: 47, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 4, scope: !7)
