; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !13
  %16 = icmp slt i32 %15, 2048, !dbg !14
  %17 = sdiv i32 %15, 4, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %18 = sdiv i32 %.frozen, 512, !dbg !16
  %19 = mul i32 %18, 512, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl nsw i32 %18, 7, !dbg !18
  %21 = add nsw i32 %20, %srem.decomposed, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !21
  %25 = insertelement <2 x i32> %24, i32 %17, i64 1, !dbg !21
  %26 = srem <2 x i32> %25, <i32 4, i32 128>, !dbg !21
  %27 = extractelement <2 x i32> %26, i64 1, !dbg !22
  %28 = icmp slt i32 %27, 32, !dbg !23
  %29 = and i1 %16, %28, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %29, i32 0, i1 %29) #1, !dbg !25
  %31 = bitcast i32 %30 to float, !dbg !25
  %32 = sext i32 %27 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %29, i32 0, i1 %29) #1, !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = fadd float %31, %35, !dbg !28
  %37 = and i32 %27, -32, !dbg !29
  %38 = icmp eq i32 %37, 32, !dbg !29
  %39 = insertelement <2 x i32> <i32 poison, i32 -32>, i32 %20, i64 0, !dbg !30
  %40 = add nsw <2 x i32> %39, %26, !dbg !30
  %41 = extractelement <2 x i32> %40, i64 1, !dbg !31
  %42 = shl nsw i32 %41, 2, !dbg !31
  %43 = extractelement <2 x i32> %40, i64 0, !dbg !32
  %44 = add nsw i32 %43, %42, !dbg !33
  %45 = sext i32 %44 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !34
  %47 = and i1 %16, %38, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 0, i1 %47) #1, !dbg !36
  %49 = bitcast i32 %48 to float, !dbg !36
  %50 = sext i32 %41 to i64, !dbg !37
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !37
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %47, i32 0, i1 %47) #1, !dbg !38
  %53 = bitcast i32 %52 to float, !dbg !38
  %54 = fadd float %49, %53, !dbg !39
  %55 = icmp eq i32 %37, 64, !dbg !40
  %56 = add nsw i32 %27, -64, !dbg !41
  %57 = shl nsw i32 %56, 2, !dbg !42
  %58 = add nsw i32 %43, %57, !dbg !43
  %59 = sext i32 %58 to i64, !dbg !44
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !44
  %61 = and i1 %16, %55, !dbg !45
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61) #1, !dbg !46
  %63 = bitcast i32 %62 to float, !dbg !46
  %64 = sext i32 %56 to i64, !dbg !47
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %64, !dbg !47
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %61, i32 0, i1 %61) #1, !dbg !48
  %67 = bitcast i32 %66 to float, !dbg !48
  %68 = fadd float %63, %67, !dbg !49
  %69 = icmp sgt i32 %27, 95, !dbg !22
  %70 = add nsw i32 %27, -96, !dbg !50
  %71 = shl nsw i32 %70, 2, !dbg !51
  %72 = add nsw i32 %43, %71, !dbg !32
  %73 = sext i32 %72 to i64, !dbg !52
  %74 = getelementptr float, ptr addrspace(1) %6, i64 %73, !dbg !52
  %75 = and i1 %16, %69, !dbg !53
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75) #1, !dbg !54
  %77 = bitcast i32 %76 to float, !dbg !54
  %78 = sext i32 %70 to i64, !dbg !55
  %79 = getelementptr float, ptr addrspace(1) %7, i64 %78, !dbg !55
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %75, i32 0, i1 %75) #1, !dbg !56
  %81 = bitcast i32 %80 to float, !dbg !56
  %82 = fadd float %77, %81, !dbg !57
  %83 = select i1 %69, float %82, float 0.000000e+00, !dbg !58
  %84 = select i1 %55, float %68, float %83, !dbg !59
  %85 = select i1 %38, float %54, float %84, !dbg !59
  %86 = select i1 %28, float %36, float %85, !dbg !59
  %87 = sext i32 %15 to i64, !dbg !60
  %88 = getelementptr float, ptr addrspace(1) %8, i64 %87, !dbg !60
  %89 = bitcast float %86 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %88, i1 %16) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz2sgulrx2mutifjo2ggspkrqzdx2liyisbolg76oww37gbnk6jq.py", directory: "inductor_cache/z2")
!4 = !{ptr @triton_poi_fused_cat_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_9", linkageName: "triton_poi_fused_cat_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 44, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 56, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 20, scope: !7)
!30 = !DILocation(line: 42, column: 36, scope: !7)
!31 = !DILocation(line: 42, column: 39, scope: !7)
!32 = !DILocation(line: 59, column: 53, scope: !7)
!33 = !DILocation(line: 42, column: 53, scope: !7)
!34 = !DILocation(line: 42, column: 31, scope: !7)
!35 = !DILocation(line: 42, column: 70, scope: !7)
!36 = !DILocation(line: 42, column: 62, scope: !7)
!37 = !DILocation(line: 43, column: 31, scope: !7)
!38 = !DILocation(line: 43, column: 44, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 47, scope: !7)
!42 = !DILocation(line: 51, column: 39, scope: !7)
!43 = !DILocation(line: 51, column: 53, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 70, scope: !7)
!46 = !DILocation(line: 51, column: 62, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 47, scope: !7)
!51 = !DILocation(line: 59, column: 39, scope: !7)
!52 = !DILocation(line: 59, column: 31, scope: !7)
!53 = !DILocation(line: 59, column: 70, scope: !7)
!54 = !DILocation(line: 59, column: 62, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 44, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 35, scope: !7)
!59 = !DILocation(line: 0, scope: !7)
!60 = !DILocation(line: 67, column: 25, scope: !7)
!61 = !DILocation(line: 67, column: 37, scope: !7)
!62 = !DILocation(line: 67, column: 4, scope: !7)
