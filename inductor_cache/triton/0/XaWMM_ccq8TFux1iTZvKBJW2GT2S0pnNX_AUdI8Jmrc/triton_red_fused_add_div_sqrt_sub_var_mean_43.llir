; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_sqrt_sub_var_mean_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 2048, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = shl i32 %6, 12, !dbg !13
  %13 = or disjoint i32 %12, %11
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %18 = bitcast i32 %17 to float, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = bitcast i32 %19 to float, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %22 = bitcast i32 %21 to float, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %24 = bitcast i32 %23 to float, !dbg !15
  %25 = select i1 %7, float %24, float 0.000000e+00, !dbg !16
  %26 = select i1 %7, float %22, float 0.000000e+00, !dbg !16
  %27 = select i1 %7, float %20, float 0.000000e+00, !dbg !16
  %28 = select i1 %7, float %18, float 0.000000e+00, !dbg !16
  %29 = or disjoint i32 %13, 2048, !dbg !17
  %30 = sext i32 %29 to i64, !dbg !14
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !14
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !15
  %34 = bitcast i32 %33 to float, !dbg !15
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !15
  %36 = bitcast i32 %35 to float, !dbg !15
  %37 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !15
  %38 = bitcast i32 %37 to float, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !15
  %40 = bitcast i32 %39 to float, !dbg !15
  %41 = fsub float %40, %25, !dbg !18
  %42 = fsub float %38, %26, !dbg !18
  %43 = fsub float %36, %27, !dbg !18
  %44 = fsub float %34, %28, !dbg !18
  %45 = select i1 %7, float 2.000000e+00, float 1.000000e+00, !dbg !22
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %45) #5, !dbg !23
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %45) #5, !dbg !23
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %45) #5, !dbg !23
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %45) #5, !dbg !23
  %50 = fadd float %25, %46, !dbg !24
  %51 = fsub float %40, %50, !dbg !25
  %52 = fmul float %41, %51, !dbg !26
  %53 = fadd float %52, 0.000000e+00, !dbg !27
  %54 = fadd float %26, %47, !dbg !24
  %55 = fsub float %38, %54, !dbg !25
  %56 = fmul float %42, %55, !dbg !26
  %57 = fadd float %56, 0.000000e+00, !dbg !27
  %58 = fadd float %27, %48, !dbg !24
  %59 = fsub float %36, %58, !dbg !25
  %60 = fmul float %43, %59, !dbg !26
  %61 = fadd float %60, 0.000000e+00, !dbg !27
  %62 = fadd float %28, %49, !dbg !24
  %63 = fsub float %34, %62, !dbg !25
  %64 = fmul float %44, %63, !dbg !26
  %65 = fadd float %64, 0.000000e+00, !dbg !27
  %66 = select i1 %7, float %50, float 0.000000e+00, !dbg !16
  %67 = select i1 %7, float %54, float 0.000000e+00, !dbg !16
  %68 = select i1 %7, float %58, float 0.000000e+00, !dbg !16
  %69 = select i1 %7, float %62, float 0.000000e+00, !dbg !16
  %70 = select i1 %7, float %61, float 0.000000e+00, !dbg !28
  %71 = select i1 %7, float %65, float 0.000000e+00, !dbg !28
  %72 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %73 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %74 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %75 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %76 = lshr i32 %8, 5, !dbg !12
  %77 = fsub float %67, %66, !dbg !29
  %78 = select i1 %7, float 4.000000e+00, float 0.000000e+00, !dbg !32
  %79 = fcmp oeq float %78, 0.000000e+00, !dbg !33
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %78) #5, !dbg !34
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !35
  %82 = fmul float %77, %81, !dbg !36
  %83 = fadd float %66, %82, !dbg !37
  %84 = fadd float %53, %57, !dbg !38
  %85 = select i1 %7, float %84, float 0.000000e+00, !dbg !38
  %86 = fmul float %77, %77, !dbg !39
  %87 = fmul float %86, %72, !dbg !40
  %88 = fmul float %87, %81, !dbg !41
  %89 = fadd float %85, %88, !dbg !42
  %90 = fsub float %68, %83, !dbg !29
  %91 = select i1 %7, float 6.000000e+00, float 0.000000e+00, !dbg !32
  %92 = fcmp oeq float %91, 0.000000e+00, !dbg !33
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %91) #5, !dbg !34
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !35
  %95 = fmul float %94, %90, !dbg !36
  %96 = fadd float %83, %95, !dbg !37
  %97 = fadd float %70, %89, !dbg !38
  %98 = fmul float %90, %90, !dbg !39
  %99 = fmul float %78, %98, !dbg !40
  %100 = fmul float %94, %99, !dbg !41
  %101 = fadd float %97, %100, !dbg !42
  %102 = fsub float %69, %96, !dbg !29
  %103 = select i1 %7, float 8.000000e+00, float 0.000000e+00, !dbg !32
  %104 = fcmp oeq float %103, 0.000000e+00, !dbg !33
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %103) #5, !dbg !34
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !35
  %107 = fmul float %106, %102, !dbg !36
  %108 = fadd float %96, %107, !dbg !37
  %109 = fadd float %71, %101, !dbg !38
  %110 = fmul float %102, %102, !dbg !39
  %111 = fmul float %91, %110, !dbg !40
  %112 = fmul float %106, %111, !dbg !41
  %113 = fadd float %109, %112, !dbg !42
  %114 = bitcast float %108 to i32, !dbg !43
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !43
  %116 = bitcast i32 %115 to float, !dbg !43
  %117 = bitcast float %113 to i32, !dbg !43
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !43
  %119 = bitcast i32 %118 to float, !dbg !43
  %120 = bitcast float %103 to i32, !dbg !43
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !43
  %122 = bitcast i32 %121 to float, !dbg !43
  %123 = fsub float %116, %108, !dbg !29
  %124 = fadd float %103, %122, !dbg !32
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !33
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %124) #5, !dbg !34
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !35
  %128 = fmul float %127, %123, !dbg !36
  %129 = fadd float %108, %128, !dbg !37
  %130 = fadd float %113, %119, !dbg !38
  %131 = fmul float %123, %123, !dbg !39
  %132 = fmul float %103, %131, !dbg !40
  %133 = fmul float %127, %132, !dbg !41
  %134 = fadd float %130, %133, !dbg !42
  %135 = bitcast float %129 to i32, !dbg !43
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !43
  %137 = bitcast i32 %136 to float, !dbg !43
  %138 = bitcast float %134 to i32, !dbg !43
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !43
  %140 = bitcast i32 %139 to float, !dbg !43
  %141 = bitcast float %124 to i32, !dbg !43
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !43
  %143 = bitcast i32 %142 to float, !dbg !43
  %144 = fsub float %137, %129, !dbg !29
  %145 = fadd float %124, %143, !dbg !32
  %146 = fcmp oeq float %145, 0.000000e+00, !dbg !33
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %145) #5, !dbg !34
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !35
  %149 = fmul float %144, %148, !dbg !36
  %150 = fadd float %129, %149, !dbg !37
  %151 = fadd float %134, %140, !dbg !38
  %152 = fmul float %144, %144, !dbg !39
  %153 = fmul float %124, %152, !dbg !40
  %154 = fmul float %148, %153, !dbg !41
  %155 = fadd float %151, %154, !dbg !42
  %156 = bitcast float %150 to i32, !dbg !43
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !43
  %158 = bitcast i32 %157 to float, !dbg !43
  %159 = bitcast float %155 to i32, !dbg !43
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !43
  %161 = bitcast i32 %160 to float, !dbg !43
  %162 = bitcast float %145 to i32, !dbg !43
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  %165 = fsub float %158, %150, !dbg !29
  %166 = fadd float %145, %164, !dbg !32
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !33
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %166) #5, !dbg !34
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !35
  %170 = fmul float %165, %169, !dbg !36
  %171 = fadd float %150, %170, !dbg !37
  %172 = fadd float %155, %161, !dbg !38
  %173 = fmul float %165, %165, !dbg !39
  %174 = fmul float %145, %173, !dbg !40
  %175 = fmul float %169, %174, !dbg !41
  %176 = fadd float %172, %175, !dbg !42
  %177 = bitcast float %171 to i32, !dbg !43
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !43
  %179 = bitcast i32 %178 to float, !dbg !43
  %180 = bitcast float %176 to i32, !dbg !43
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !43
  %182 = bitcast i32 %181 to float, !dbg !43
  %183 = bitcast float %166 to i32, !dbg !43
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !43
  %185 = bitcast i32 %184 to float, !dbg !43
  %186 = fsub float %179, %171, !dbg !29
  %187 = fadd float %166, %185, !dbg !32
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !33
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %187) #5, !dbg !34
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !35
  %191 = fmul float %186, %190, !dbg !36
  %192 = fadd float %171, %191, !dbg !37
  %193 = fadd float %176, %182, !dbg !38
  %194 = fmul float %186, %186, !dbg !39
  %195 = fmul float %166, %194, !dbg !40
  %196 = fmul float %190, %195, !dbg !41
  %197 = fadd float %193, %196, !dbg !42
  %198 = bitcast float %192 to i32, !dbg !43
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 1, i32 31), !dbg !43
  %200 = bitcast i32 %199 to float, !dbg !43
  %201 = bitcast float %197 to i32, !dbg !43
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !43
  %203 = bitcast i32 %202 to float, !dbg !43
  %204 = bitcast float %187 to i32, !dbg !43
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = fsub float %200, %192, !dbg !29
  %208 = fadd float %187, %206, !dbg !32
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !33
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %208) #5, !dbg !34
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !35
  %212 = fmul float %207, %211, !dbg !36
  %213 = fadd float %192, %212, !dbg !37
  %214 = fadd float %197, %203, !dbg !38
  %215 = fmul float %207, %207, !dbg !39
  %216 = fmul float %187, %215, !dbg !40
  %217 = fmul float %211, %216, !dbg !41
  %218 = fadd float %214, %217, !dbg !42
  %219 = icmp eq i32 %9, 0, !dbg !43
  %220 = and i32 %76, 15, !dbg !43
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !43
  %222 = bitcast float %213 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 %219) #5, !dbg !43
  %223 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %220, !dbg !43
  %224 = bitcast float %218 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 %219) #5, !dbg !43
  %225 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %220, !dbg !43
  %226 = bitcast float %208 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 %219) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %227 = icmp slt i32 %8, 16, !dbg !43
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %229 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %228, i1 %227) #5, !dbg !43
  %230 = bitcast i32 %229 to float, !dbg !43
  %231 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %8, !dbg !43
  %232 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %231, i1 %227) #5, !dbg !43
  %233 = bitcast i32 %232 to float, !dbg !43
  %234 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %8, !dbg !43
  %235 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %234, i1 %227) #5, !dbg !43
  %236 = bitcast i32 %235 to float, !dbg !43
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !43
  %238 = bitcast i32 %237 to float, !dbg !43
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !43
  %240 = bitcast i32 %239 to float, !dbg !43
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !43
  %242 = bitcast i32 %241 to float, !dbg !43
  %243 = fsub float %238, %230, !dbg !29
  %244 = fadd float %236, %242, !dbg !32
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !33
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %244) #5, !dbg !34
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !35
  %248 = fmul float %243, %247, !dbg !36
  %249 = fadd float %248, %230, !dbg !37
  %250 = fadd float %233, %240, !dbg !38
  %251 = fmul float %243, %243, !dbg !39
  %252 = fmul float %251, %236, !dbg !40
  %253 = fmul float %252, %247, !dbg !41
  %254 = fadd float %250, %253, !dbg !42
  %255 = bitcast float %249 to i32, !dbg !43
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 4, i32 31), !dbg !43
  %257 = bitcast i32 %256 to float, !dbg !43
  %258 = bitcast float %254 to i32, !dbg !43
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !43
  %260 = bitcast i32 %259 to float, !dbg !43
  %261 = bitcast float %244 to i32, !dbg !43
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !43
  %263 = bitcast i32 %262 to float, !dbg !43
  %264 = fsub float %257, %249, !dbg !29
  %265 = fadd float %244, %263, !dbg !32
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !33
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %265) #5, !dbg !34
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !35
  %269 = fmul float %264, %268, !dbg !36
  %270 = fadd float %249, %269, !dbg !37
  %271 = fadd float %254, %260, !dbg !38
  %272 = fmul float %264, %264, !dbg !39
  %273 = fmul float %244, %272, !dbg !40
  %274 = fmul float %268, %273, !dbg !41
  %275 = fadd float %271, %274, !dbg !42
  %276 = bitcast float %270 to i32, !dbg !43
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !43
  %278 = bitcast i32 %277 to float, !dbg !43
  %279 = bitcast float %275 to i32, !dbg !43
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !43
  %281 = bitcast i32 %280 to float, !dbg !43
  %282 = bitcast float %265 to i32, !dbg !43
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !43
  %284 = bitcast i32 %283 to float, !dbg !43
  %285 = fsub float %278, %270, !dbg !29
  %286 = fadd float %265, %284, !dbg !32
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !33
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float %286) #5, !dbg !34
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !35
  %290 = fmul float %285, %289, !dbg !36
  %291 = fadd float %270, %290, !dbg !37
  %292 = fadd float %275, %281, !dbg !38
  %293 = fmul float %285, %285, !dbg !39
  %294 = fmul float %265, %293, !dbg !40
  %295 = fmul float %289, %294, !dbg !41
  %296 = fadd float %292, %295, !dbg !42
  %297 = bitcast float %291 to i32, !dbg !43
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 1, i32 31), !dbg !43
  %299 = bitcast i32 %298 to float, !dbg !43
  %300 = bitcast float %296 to i32, !dbg !43
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !43
  %302 = bitcast i32 %301 to float, !dbg !43
  %303 = bitcast float %286 to i32, !dbg !43
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !43
  %305 = bitcast i32 %304 to float, !dbg !43
  %306 = fsub float %299, %291, !dbg !29
  %307 = fadd float %286, %305, !dbg !32
  %308 = fcmp oeq float %307, 0.000000e+00, !dbg !33
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float %307) #5, !dbg !34
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !35
  %311 = fmul float %306, %310, !dbg !36
  %312 = fadd float %291, %311, !dbg !37
  %313 = fadd float %296, %302, !dbg !38
  %314 = fmul float %306, %306, !dbg !39
  %315 = fmul float %286, %314, !dbg !40
  %316 = fmul float %310, %315, !dbg !41
  %317 = fadd float %313, %316, !dbg !42
  %318 = and i32 %8, 15, !dbg !43
  %319 = icmp eq i32 %318, 0, !dbg !43
  %320 = and i1 %227, %319, !dbg !43
  %321 = bitcast float %312 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %321, i1 %320) #5, !dbg !43
  %322 = bitcast float %317 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %322, i1 %320) #5, !dbg !43
  %323 = bitcast float %307 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %323, i1 %320) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %324 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %325 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !43
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 4.096000e+03) #5, !dbg !44
  %327 = fadd float %326, 0x3DDB7CDFE0000000, !dbg !45
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %328, 0, !dbg !46
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !46
  %.not1.i = icmp eq i32 %329, 0, !dbg !46
  br i1 %.not.i, label %335, label %330, !dbg !46

330:                                              ; preds = %5
  br i1 %.not1.i, label %333, label %331, !dbg !46

331:                                              ; preds = %330
  %332 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %327) #5, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

333:                                              ; preds = %330
  %334 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %327) #5, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

335:                                              ; preds = %5
  br i1 %.not1.i, label %338, label %336, !dbg !46

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.f(float %327) #5, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.f(float %327) #5, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %331, %333, %336, %338
  %.0.i = phi float [ %332, %331 ], [ %334, %333 ], [ %337, %336 ], [ %339, %338 ], !dbg !46
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !46
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !46
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !46
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i24 = icmp eq i32 %346, 0, !dbg !46
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !46
  %.not1.i27 = icmp eq i32 %347, 0, !dbg !46
  br i1 %.not.i24, label %353, label %348, !dbg !46

348:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %351, label %349, !dbg !46

349:                                              ; preds = %348
  %350 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %327) #5, !dbg !46
  br label %__nv_sqrtf.exit28, !dbg !46

351:                                              ; preds = %348
  %352 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %327) #5, !dbg !46
  br label %__nv_sqrtf.exit28, !dbg !46

353:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %356, label %354, !dbg !46

354:                                              ; preds = %353
  %355 = tail call float @llvm.nvvm.sqrt.rn.f(float %327) #5, !dbg !46
  br label %__nv_sqrtf.exit28, !dbg !46

356:                                              ; preds = %353
  %357 = tail call float @llvm.nvvm.sqrt.approx.f(float %327) #5, !dbg !46
  br label %__nv_sqrtf.exit28, !dbg !46

__nv_sqrtf.exit28:                                ; preds = %349, %351, %354, %356
  %.0.i26 = phi float [ %350, %349 ], [ %352, %351 ], [ %355, %354 ], [ %357, %356 ], !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %358 = sext i32 %6 to i64, !dbg !48
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !48
  %urem = and i32 %8, 511, !dbg !49
  %360 = icmp eq i32 %urem, 0, !dbg !49
  %361 = bitcast float %.0.i to i32, !dbg !49
  %362 = and i1 %360, %7, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %359, i1 %362) #5, !dbg !49
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !50
  %364 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !50
  %365 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !50
  %366 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !50
  %367 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !50
  %368 = bitcast i32 %364 to float, !dbg !50
  %369 = bitcast i32 %365 to float, !dbg !50
  %370 = bitcast i32 %366 to float, !dbg !50
  %371 = bitcast i32 %367 to float, !dbg !50
  %372 = fsub float %368, %324, !dbg !51
  %373 = fsub float %369, %324, !dbg !51
  %374 = fsub float %370, %324, !dbg !51
  %375 = fsub float %371, %324, !dbg !51
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float %.0.i26) #5, !dbg !52
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %.0.i26) #5, !dbg !52
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %.0.i26) #5, !dbg !52
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float %.0.i26) #5, !dbg !52
  %380 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !53
  %381 = bitcast float %376 to i32, !dbg !54
  %382 = bitcast float %377 to i32, !dbg !54
  %383 = bitcast float %378 to i32, !dbg !54
  %384 = bitcast float %379 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %381, i32 %382, i32 %383, i32 %384, ptr addrspace(1) %380, i1 %7) #5, !dbg !54
  %385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !50
  %386 = extractvalue { i32, i32, i32, i32 } %385, 0, !dbg !50
  %387 = extractvalue { i32, i32, i32, i32 } %385, 1, !dbg !50
  %388 = extractvalue { i32, i32, i32, i32 } %385, 2, !dbg !50
  %389 = extractvalue { i32, i32, i32, i32 } %385, 3, !dbg !50
  %390 = bitcast i32 %386 to float, !dbg !50
  %391 = bitcast i32 %387 to float, !dbg !50
  %392 = bitcast i32 %388 to float, !dbg !50
  %393 = bitcast i32 %389 to float, !dbg !50
  %394 = fsub float %390, %324, !dbg !51
  %395 = fsub float %391, %324, !dbg !51
  %396 = fsub float %392, %324, !dbg !51
  %397 = fsub float %393, %324, !dbg !51
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float %.0.i26) #5, !dbg !52
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float %.0.i26) #5, !dbg !52
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %396, float %.0.i26) #5, !dbg !52
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %397, float %.0.i26) #5, !dbg !52
  %402 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !53
  %403 = bitcast float %398 to i32, !dbg !54
  %404 = bitcast float %399 to i32, !dbg !54
  %405 = bitcast float %400 to i32, !dbg !54
  %406 = bitcast float %401 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %403, i32 %404, i32 %405, i32 %406, ptr addrspace(1) %402, i1 %7) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7h2be2qykmxenerxfsdirqt2yt33yvw2bl2mtyyamtrom4ducph.py", directory: "inductor_cache/7h")
!4 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_43, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_43, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_sqrt_sub_var_mean_43", linkageName: "triton_red_fused_add_div_sqrt_sub_var_mean_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 34, scope: !7)
!15 = !DILocation(line: 34, column: 49, scope: !7)
!16 = !DILocation(line: 39, column: 60, scope: !7)
!17 = !DILocation(line: 34, column: 39, scope: !7)
!18 = !DILocation(line: 183, column: 24, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 37, column: 51, scope: !7)
!22 = !DILocation(line: 41, column: 64, scope: !7)
!23 = !DILocation(line: 185, column: 34, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 185, column: 26, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 186, column: 39, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 186, column: 31, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 186, column: 22, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 40, column: 56, scope: !7)
!29 = !DILocation(line: 192, column: 21, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!31 = !DILocation(line: 43, column: 41, scope: !7)
!32 = !DILocation(line: 193, column: 28, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 194, column: 39, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 194, column: 60, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 194, column: 49, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 196, column: 25, scope: !30, inlinedAt: !31)
!37 = !DILocation(line: 196, column: 17, scope: !30, inlinedAt: !31)
!38 = !DILocation(line: 197, column: 15, scope: !30, inlinedAt: !31)
!39 = !DILocation(line: 197, column: 30, scope: !30, inlinedAt: !31)
!40 = !DILocation(line: 197, column: 38, scope: !30, inlinedAt: !31)
!41 = !DILocation(line: 197, column: 49, scope: !30, inlinedAt: !31)
!42 = !DILocation(line: 197, column: 22, scope: !30, inlinedAt: !31)
!43 = !DILocation(line: 204, column: 46, scope: !19, inlinedAt: !31)
!44 = !DILocation(line: 49, column: 18, scope: !7)
!45 = !DILocation(line: 51, column: 18, scope: !7)
!46 = !DILocation(line: 52, column: 26, scope: !7)
!47 = !DILocation(line: 53, column: 4, scope: !7)
!48 = !DILocation(line: 54, column: 28, scope: !7)
!49 = !DILocation(line: 54, column: 39, scope: !7)
!50 = !DILocation(line: 59, column: 50, scope: !7)
!51 = !DILocation(line: 60, column: 24, scope: !7)
!52 = !DILocation(line: 61, column: 24, scope: !7)
!53 = !DILocation(line: 62, column: 29, scope: !7)
!54 = !DILocation(line: 62, column: 51, scope: !7)
!55 = !DILocation(line: 55, column: 4, scope: !7)
