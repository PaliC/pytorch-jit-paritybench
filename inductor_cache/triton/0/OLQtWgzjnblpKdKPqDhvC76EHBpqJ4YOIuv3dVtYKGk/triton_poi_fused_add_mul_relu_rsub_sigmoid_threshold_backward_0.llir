; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_relu_rsub_sigmoid_threshold_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %15 = sext i32 %13 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %14) #1, !dbg !16
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !16
  %20 = bitcast i32 %18 to float, !dbg !16
  %21 = bitcast i32 %19 to float, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !17
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %14) #1, !dbg !18
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !18
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %14) #1, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %30 = fsub float 0.000000e+00, %20, !dbg !21
  %31 = fsub float 0.000000e+00, %21, !dbg !21
  %32 = fmul float %30, 0x3FF7154760000000, !dbg !25
  %33 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %32) #1, !dbg !25
  %34 = fmul float %31, 0x3FF7154760000000, !dbg !25
  %35 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %34) #1, !dbg !25
  %36 = fadd float %33, 1.000000e+00, !dbg !26
  %37 = fadd float %35, 1.000000e+00, !dbg !26
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %36) #1, !dbg !27
  %39 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %37) #1, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !29
  %42 = getelementptr i1, ptr addrspace(1) %5, i64 %15, !dbg !30
  %43 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !18
  %44 = insertelement <2 x i32> %43, i32 %25, i64 1, !dbg !18
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !18
  %46 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !20
  %47 = insertelement <2 x i32> %46, i32 %29, i64 1, !dbg !20
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !20
  %49 = insertelement <2 x float> poison, float %38, i64 0, !dbg !31
  %50 = insertelement <2 x float> %49, float %39, i64 1, !dbg !31
  %51 = fmul <2 x float> %50, %45, !dbg !31
  %52 = fsub <2 x float> splat (float 1.000000e+00), %50, !dbg !32
  %53 = fmul <2 x float> %52, %48, !dbg !33
  %54 = fadd <2 x float> %51, %53, !dbg !34
  %55 = fcmp olt <2 x float> %54, zeroinitializer, !dbg !35
  %56 = select <2 x i1> %55, <2 x float> zeroinitializer, <2 x float> %54, !dbg !39
  %57 = fcmp ole <2 x float> %56, zeroinitializer, !dbg !40
  %bc = bitcast <2 x float> %54 to <2 x i32>, !dbg !41
  %58 = extractelement <2 x i32> %bc, i64 0, !dbg !41
  %bc1 = bitcast <2 x float> %54 to <2 x i32>, !dbg !41
  %59 = extractelement <2 x i32> %bc1, i64 1, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %58, i32 %59, ptr addrspace(1) %40, i1 %14) #1, !dbg !41
  %bc2 = bitcast <2 x float> %56 to <2 x i32>, !dbg !42
  %60 = extractelement <2 x i32> %bc2, i64 0, !dbg !42
  %bc3 = bitcast <2 x float> %56 to <2 x i32>, !dbg !42
  %61 = extractelement <2 x i32> %bc3, i64 1, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %60, i32 %61, ptr addrspace(1) %41, i1 %14) #1, !dbg !42
  %62 = zext <2 x i1> %57 to <2 x i8>, !dbg !43
  %63 = bitcast <2 x i8> %62 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %63, ptr addrspace(1) %42, i1 %14) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chppvivvzofvsj5xc4sbfophi5qi7kgz7ydx5bwm5vbgogsazs3k.py", directory: "inductor_cache/hp")
!4 = !{ptr @triton_poi_fused_add_mul_relu_rsub_sigmoid_threshold_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_relu_rsub_sigmoid_threshold_backward_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_relu_rsub_sigmoid_threshold_backward_0", linkageName: "triton_poi_fused_add_mul_relu_rsub_sigmoid_threshold_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = !DILocation(line: 28, column: 22, scope: !7)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 38, column: 25, scope: !7)
!29 = !DILocation(line: 39, column: 25, scope: !7)
!30 = !DILocation(line: 40, column: 25, scope: !7)
!31 = !DILocation(line: 29, column: 18, scope: !7)
!32 = !DILocation(line: 31, column: 18, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 35, column: 41, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 37, column: 21, scope: !7)
!41 = !DILocation(line: 38, column: 36, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 4, scope: !7)
