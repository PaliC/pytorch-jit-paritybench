; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_convolution_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 1, !dbg !11
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %11 = shl i32 %10, 9, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = and i32 %12, 127, !dbg !14
  %14 = icmp slt i32 %11, 0, !dbg !15
  %.frozen = freeze i32 %9, !dbg !16
  %15 = sdiv i32 %.frozen, 768, !dbg !16
  %16 = mul i32 %15, 768, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = mul i32 %8, 578, !dbg !18
  %18 = add i32 %17, 289, !dbg !18
  %19 = or disjoint i32 %11, %13, !dbg !19
  %20 = or disjoint i32 %19, 128, !dbg !19
  %21 = or disjoint i32 %19, 256, !dbg !19
  %22 = or disjoint i32 %19, 384, !dbg !19
  %23 = icmp slt i32 %19, 289, !dbg !15
  %24 = icmp slt i32 %20, 289, !dbg !15
  %25 = icmp slt i32 %21, 289, !dbg !15
  %26 = sdiv i32 %19, 17, !dbg !20
  %27 = sdiv i32 %20, 17, !dbg !20
  %28 = sdiv i32 %21, 17, !dbg !20
  %29 = sdiv i32 %22, 17, !dbg !20
  %30 = insertelement <4 x i32> poison, i32 %22, i64 0, !dbg !21
  %31 = insertelement <4 x i32> %30, i32 %21, i64 1, !dbg !21
  %32 = insertelement <4 x i32> %31, i32 %20, i64 2, !dbg !21
  %33 = insertelement <4 x i32> %32, i32 %19, i64 3, !dbg !21
  %34 = srem <4 x i32> %33, splat (i32 17), !dbg !21
  %35 = add i32 %19, %17, !dbg !22
  %36 = add i32 %17, %20, !dbg !22
  %37 = add i32 %17, %21, !dbg !22
  %38 = add i32 %17, %22, !dbg !22
  %39 = add i32 %19, %18, !dbg !22
  %40 = add i32 %18, %20, !dbg !22
  %41 = add i32 %18, %21, !dbg !22
  %42 = add i32 %18, %22, !dbg !22
  %43 = sext i32 %35 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = sext i32 %36 to i64, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !23
  %47 = sext i32 %37 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = sext i32 %38 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %39 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %40 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %41 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %42 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %23) #1, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %24) #1, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %25) #1, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %14) #1, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %23) #1, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %24) #1, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %25) #1, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %14) #1, !dbg !24
  %67 = extractelement <4 x i32> %34, i64 3, !dbg !25
  %68 = icmp sgt i32 %67, 0, !dbg !26
  %69 = extractelement <4 x i32> %34, i64 2, !dbg !25
  %70 = icmp sgt i32 %69, 0, !dbg !26
  %71 = extractelement <4 x i32> %34, i64 1, !dbg !25
  %72 = icmp sgt i32 %71, 0, !dbg !26
  %73 = extractelement <4 x i32> %34, i64 0, !dbg !25
  %74 = icmp sgt i32 %73, 0, !dbg !26
  %75 = add i32 %19, -18, !dbg !27
  %76 = add nuw nsw i32 %19, 110, !dbg !27
  %77 = add nuw nsw i32 %19, 238, !dbg !27
  %78 = add nuw nsw i32 %19, 366, !dbg !27
  %79 = add i32 %75, %17, !dbg !28
  %80 = add i32 %17, %76, !dbg !28
  %81 = add i32 %17, %77, !dbg !28
  %82 = add i32 %17, %78, !dbg !28
  %83 = add i32 %75, %18, !dbg !28
  %84 = add i32 %18, %76, !dbg !28
  %85 = add i32 %18, %77, !dbg !28
  %86 = add i32 %18, %78, !dbg !28
  %87 = sext i32 %79 to i64, !dbg !29
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !29
  %89 = sext i32 %80 to i64, !dbg !29
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !29
  %91 = sext i32 %81 to i64, !dbg !29
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !29
  %93 = sext i32 %82 to i64, !dbg !29
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !29
  %95 = sext i32 %83 to i64, !dbg !29
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !29
  %97 = sext i32 %84 to i64, !dbg !29
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !29
  %99 = sext i32 %85 to i64, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !29
  %101 = sext i32 %86 to i64, !dbg !29
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !29
  %103 = add i32 %19, -17, !dbg !30
  %104 = icmp ult i32 %103, 272, !dbg !30
  %105 = and i1 %104, %68, !dbg !30
  %106 = add nuw nsw i32 %19, 111, !dbg !30
  %107 = icmp ult i32 %19, 161, !dbg !30
  %108 = and i1 %107, %70, !dbg !30
  %109 = add nuw nsw i32 %19, 239, !dbg !30
  %110 = icmp ult i32 %19, 33, !dbg !30
  %111 = and i1 %110, %72, !dbg !30
  %112 = add nuw nsw i32 %19, 367, !dbg !30
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %105, i32 0, i1 %105) #1, !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %108, i32 0, i1 %108) #1, !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %111, i32 0, i1 %111) #1, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 false, i32 0, i1 false) #1, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %105, i32 0, i1 %105) #1, !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %108, i32 0, i1 %108) #1, !dbg !31
  %124 = bitcast i32 %123 to float, !dbg !31
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %111, i32 0, i1 %111) #1, !dbg !31
  %126 = bitcast i32 %125 to float, !dbg !31
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 false, i32 0, i1 false) #1, !dbg !31
  %128 = bitcast i32 %127 to float, !dbg !31
  %129 = icmp sgt i32 %67, -1, !dbg !32
  %130 = icmp sgt i32 %69, -1, !dbg !32
  %131 = icmp sgt i32 %71, -1, !dbg !32
  %132 = icmp sgt i32 %73, -1, !dbg !32
  %133 = add i32 %103, %17, !dbg !33
  %134 = add i32 %17, %106, !dbg !33
  %135 = add i32 %17, %109, !dbg !33
  %136 = add i32 %17, %112, !dbg !33
  %137 = add i32 %103, %18, !dbg !33
  %138 = add i32 %18, %106, !dbg !33
  %139 = add i32 %18, %109, !dbg !33
  %140 = add i32 %18, %112, !dbg !33
  %141 = sext i32 %133 to i64, !dbg !34
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !34
  %143 = sext i32 %134 to i64, !dbg !34
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !34
  %145 = sext i32 %135 to i64, !dbg !34
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !34
  %147 = sext i32 %136 to i64, !dbg !34
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !34
  %149 = sext i32 %137 to i64, !dbg !34
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !34
  %151 = sext i32 %138 to i64, !dbg !34
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !34
  %153 = sext i32 %139 to i64, !dbg !34
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !34
  %155 = sext i32 %140 to i64, !dbg !34
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !34
  %157 = and i1 %104, %129, !dbg !35
  %158 = and i1 %107, %130, !dbg !35
  %159 = and i1 %110, %131, !dbg !35
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %157, i32 0, i1 %157) #1, !dbg !36
  %161 = bitcast i32 %160 to float, !dbg !36
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %158, i32 0, i1 %158) #1, !dbg !36
  %163 = bitcast i32 %162 to float, !dbg !36
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %159, i32 0, i1 %159) #1, !dbg !36
  %165 = bitcast i32 %164 to float, !dbg !36
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 false, i32 0, i1 false) #1, !dbg !36
  %167 = bitcast i32 %166 to float, !dbg !36
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %157, i32 0, i1 %157) #1, !dbg !36
  %169 = bitcast i32 %168 to float, !dbg !36
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %158, i32 0, i1 %158) #1, !dbg !36
  %171 = bitcast i32 %170 to float, !dbg !36
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %159, i32 0, i1 %159) #1, !dbg !36
  %173 = bitcast i32 %172 to float, !dbg !36
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 false, i32 0, i1 false) #1, !dbg !36
  %175 = bitcast i32 %174 to float, !dbg !36
  %176 = fadd float %114, %161, !dbg !37
  %177 = fadd float %116, %163, !dbg !37
  %178 = fadd float %118, %165, !dbg !37
  %179 = fadd float %120, %167, !dbg !37
  %180 = fadd float %122, %169, !dbg !37
  %181 = fadd float %124, %171, !dbg !37
  %182 = fadd float %126, %173, !dbg !37
  %183 = fadd float %128, %175, !dbg !37
  %184 = add nsw <4 x i32> %34, splat (i32 1), !dbg !38
  %185 = icmp ult <4 x i32> %184, splat (i32 17), !dbg !38
  %186 = add i32 %19, -16, !dbg !39
  %187 = add nuw nsw i32 %19, 112, !dbg !39
  %188 = add nuw nsw i32 %19, 240, !dbg !39
  %189 = add nuw nsw i32 %19, 368, !dbg !39
  %190 = add i32 %186, %17, !dbg !40
  %191 = add i32 %17, %187, !dbg !40
  %192 = add i32 %17, %188, !dbg !40
  %193 = add i32 %17, %189, !dbg !40
  %194 = add i32 %186, %18, !dbg !40
  %195 = add i32 %18, %187, !dbg !40
  %196 = add i32 %18, %188, !dbg !40
  %197 = add i32 %18, %189, !dbg !40
  %198 = sext i32 %190 to i64, !dbg !41
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !41
  %200 = sext i32 %191 to i64, !dbg !41
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !41
  %202 = sext i32 %192 to i64, !dbg !41
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !41
  %204 = sext i32 %193 to i64, !dbg !41
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !41
  %206 = sext i32 %194 to i64, !dbg !41
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !41
  %208 = sext i32 %195 to i64, !dbg !41
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !41
  %210 = sext i32 %196 to i64, !dbg !41
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !41
  %212 = sext i32 %197 to i64, !dbg !41
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !41
  %214 = extractelement <4 x i1> %185, i64 3, !dbg !42
  %215 = and i1 %104, %214, !dbg !42
  %216 = extractelement <4 x i1> %185, i64 2, !dbg !42
  %217 = and i1 %107, %216, !dbg !42
  %218 = extractelement <4 x i1> %185, i64 1, !dbg !42
  %219 = and i1 %110, %218, !dbg !42
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %215, i32 0, i1 %215) #1, !dbg !43
  %221 = bitcast i32 %220 to float, !dbg !43
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %217, i32 0, i1 %217) #1, !dbg !43
  %223 = bitcast i32 %222 to float, !dbg !43
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %219, i32 0, i1 %219) #1, !dbg !43
  %225 = bitcast i32 %224 to float, !dbg !43
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 false, i32 0, i1 false) #1, !dbg !43
  %227 = bitcast i32 %226 to float, !dbg !43
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %215, i32 0, i1 %215) #1, !dbg !43
  %229 = bitcast i32 %228 to float, !dbg !43
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %217, i32 0, i1 %217) #1, !dbg !43
  %231 = bitcast i32 %230 to float, !dbg !43
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %219, i32 0, i1 %219) #1, !dbg !43
  %233 = bitcast i32 %232 to float, !dbg !43
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 false, i32 0, i1 false) #1, !dbg !43
  %235 = bitcast i32 %234 to float, !dbg !43
  %236 = fadd float %176, %221, !dbg !44
  %237 = fadd float %177, %223, !dbg !44
  %238 = fadd float %178, %225, !dbg !44
  %239 = fadd float %179, %227, !dbg !44
  %240 = fadd float %180, %229, !dbg !44
  %241 = fadd float %181, %231, !dbg !44
  %242 = fadd float %182, %233, !dbg !44
  %243 = fadd float %183, %235, !dbg !44
  %244 = icmp ult i32 %19, 289, !dbg !45
  %245 = icmp ult i32 %20, 289, !dbg !45
  %246 = icmp ult i32 %21, 289, !dbg !45
  %247 = and i1 %244, %68, !dbg !46
  %248 = and i1 %245, %70, !dbg !46
  %249 = and i1 %246, %72, !dbg !46
  %250 = add i32 %19, -1, !dbg !47
  %251 = add nuw nsw i32 %19, 127, !dbg !47
  %252 = add nuw nsw i32 %19, 255, !dbg !47
  %253 = add nuw nsw i32 %19, 383, !dbg !47
  %254 = add i32 %250, %17, !dbg !48
  %255 = add i32 %17, %251, !dbg !48
  %256 = add i32 %17, %252, !dbg !48
  %257 = add i32 %17, %253, !dbg !48
  %258 = add i32 %250, %18, !dbg !48
  %259 = add i32 %18, %251, !dbg !48
  %260 = add i32 %18, %252, !dbg !48
  %261 = add i32 %18, %253, !dbg !48
  %262 = sext i32 %254 to i64, !dbg !49
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !49
  %264 = sext i32 %255 to i64, !dbg !49
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !49
  %266 = sext i32 %256 to i64, !dbg !49
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !49
  %268 = sext i32 %257 to i64, !dbg !49
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !49
  %270 = sext i32 %258 to i64, !dbg !49
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !49
  %272 = sext i32 %259 to i64, !dbg !49
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !49
  %274 = sext i32 %260 to i64, !dbg !49
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !49
  %276 = sext i32 %261 to i64, !dbg !49
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !49
  %278 = add i32 %19, 400, !dbg !50
  %279 = icmp ult i32 %278, 305, !dbg !50
  %280 = and i1 %279, %74, !dbg !50
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %263, i1 %247, i32 0, i1 %247) #1, !dbg !51
  %282 = bitcast i32 %281 to float, !dbg !51
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %248, i32 0, i1 %248) #1, !dbg !51
  %284 = bitcast i32 %283 to float, !dbg !51
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %249, i32 0, i1 %249) #1, !dbg !51
  %286 = bitcast i32 %285 to float, !dbg !51
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %280, i32 0, i1 %280) #1, !dbg !51
  %288 = bitcast i32 %287 to float, !dbg !51
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %247, i32 0, i1 %247) #1, !dbg !51
  %290 = bitcast i32 %289 to float, !dbg !51
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %248, i32 0, i1 %248) #1, !dbg !51
  %292 = bitcast i32 %291 to float, !dbg !51
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %275, i1 %249, i32 0, i1 %249) #1, !dbg !51
  %294 = bitcast i32 %293 to float, !dbg !51
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %280, i32 0, i1 %280) #1, !dbg !51
  %296 = bitcast i32 %295 to float, !dbg !51
  %297 = fadd float %236, %282, !dbg !52
  %298 = fadd float %237, %284, !dbg !52
  %299 = fadd float %238, %286, !dbg !52
  %300 = fadd float %239, %288, !dbg !52
  %301 = fadd float %240, %290, !dbg !52
  %302 = fadd float %241, %292, !dbg !52
  %303 = fadd float %242, %294, !dbg !52
  %304 = fadd float %243, %296, !dbg !52
  %305 = and i1 %244, %129, !dbg !53
  %306 = and i1 %245, %130, !dbg !53
  %307 = and i1 %246, %131, !dbg !53
  %308 = and i1 %279, %132, !dbg !54
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %305, i32 0, i1 %305) #1, !dbg !55
  %310 = bitcast i32 %309 to float, !dbg !55
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %306, i32 0, i1 %306) #1, !dbg !55
  %312 = bitcast i32 %311 to float, !dbg !55
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %307, i32 0, i1 %307) #1, !dbg !55
  %314 = bitcast i32 %313 to float, !dbg !55
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %308, i32 0, i1 %308) #1, !dbg !55
  %316 = bitcast i32 %315 to float, !dbg !55
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %305, i32 0, i1 %305) #1, !dbg !55
  %318 = bitcast i32 %317 to float, !dbg !55
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %306, i32 0, i1 %306) #1, !dbg !55
  %320 = bitcast i32 %319 to float, !dbg !55
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %307, i32 0, i1 %307) #1, !dbg !55
  %322 = bitcast i32 %321 to float, !dbg !55
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %308, i32 0, i1 %308) #1, !dbg !55
  %324 = bitcast i32 %323 to float, !dbg !55
  %325 = fadd float %297, %310, !dbg !56
  %326 = fadd float %298, %312, !dbg !56
  %327 = fadd float %299, %314, !dbg !56
  %328 = fadd float %300, %316, !dbg !56
  %329 = fadd float %301, %318, !dbg !56
  %330 = fadd float %302, %320, !dbg !56
  %331 = fadd float %303, %322, !dbg !56
  %332 = fadd float %304, %324, !dbg !56
  %333 = and i1 %244, %214, !dbg !57
  %334 = and i1 %245, %216, !dbg !57
  %335 = and i1 %246, %218, !dbg !57
  %336 = add nuw nsw i32 %19, 1, !dbg !58
  %337 = add nuw nsw i32 %19, 129, !dbg !58
  %338 = add nuw nsw i32 %19, 257, !dbg !58
  %339 = add i32 %19, 385, !dbg !58
  %340 = add i32 %336, %17, !dbg !59
  %341 = add i32 %17, %337, !dbg !59
  %342 = add i32 %17, %338, !dbg !59
  %343 = add i32 %17, %339, !dbg !59
  %344 = add i32 %336, %18, !dbg !59
  %345 = add i32 %18, %337, !dbg !59
  %346 = add i32 %18, %338, !dbg !59
  %347 = add i32 %18, %339, !dbg !59
  %348 = sext i32 %340 to i64, !dbg !60
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !60
  %350 = sext i32 %341 to i64, !dbg !60
  %351 = getelementptr float, ptr addrspace(1) %0, i64 %350, !dbg !60
  %352 = sext i32 %342 to i64, !dbg !60
  %353 = getelementptr float, ptr addrspace(1) %0, i64 %352, !dbg !60
  %354 = sext i32 %343 to i64, !dbg !60
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !60
  %356 = sext i32 %344 to i64, !dbg !60
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %356, !dbg !60
  %358 = sext i32 %345 to i64, !dbg !60
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !60
  %360 = sext i32 %346 to i64, !dbg !60
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !60
  %362 = sext i32 %347 to i64, !dbg !60
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !60
  %364 = extractelement <4 x i1> %185, i64 0, !dbg !61
  %365 = and i1 %279, %364, !dbg !62
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 %333, i32 0, i1 %333) #1, !dbg !63
  %367 = bitcast i32 %366 to float, !dbg !63
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %351, i1 %334, i32 0, i1 %334) #1, !dbg !63
  %369 = bitcast i32 %368 to float, !dbg !63
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %353, i1 %335, i32 0, i1 %335) #1, !dbg !63
  %371 = bitcast i32 %370 to float, !dbg !63
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %355, i1 %365, i32 0, i1 %365) #1, !dbg !63
  %373 = bitcast i32 %372 to float, !dbg !63
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %357, i1 %333, i32 0, i1 %333) #1, !dbg !63
  %375 = bitcast i32 %374 to float, !dbg !63
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %359, i1 %334, i32 0, i1 %334) #1, !dbg !63
  %377 = bitcast i32 %376 to float, !dbg !63
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %361, i1 %335, i32 0, i1 %335) #1, !dbg !63
  %379 = bitcast i32 %378 to float, !dbg !63
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %363, i1 %365, i32 0, i1 %365) #1, !dbg !63
  %381 = bitcast i32 %380 to float, !dbg !63
  %382 = fadd float %325, %367, !dbg !64
  %383 = fadd float %326, %369, !dbg !64
  %384 = fadd float %327, %371, !dbg !64
  %385 = fadd float %328, %373, !dbg !64
  %386 = fadd float %329, %375, !dbg !64
  %387 = fadd float %330, %377, !dbg !64
  %388 = fadd float %331, %379, !dbg !64
  %389 = fadd float %332, %381, !dbg !64
  %390 = icmp ult i32 %19, 272, !dbg !65
  %391 = icmp ult i32 %20, 272, !dbg !65
  %392 = icmp ult i32 %21, 272, !dbg !65
  %393 = and i1 %390, %68, !dbg !66
  %394 = and i1 %391, %70, !dbg !66
  %395 = and i1 %392, %72, !dbg !66
  %396 = add nuw nsw i32 %19, 16, !dbg !67
  %397 = add nuw nsw i32 %19, 144, !dbg !67
  %398 = add nuw nsw i32 %19, 272, !dbg !67
  %399 = add i32 %396, %17, !dbg !68
  %400 = add i32 %17, %397, !dbg !68
  %401 = add i32 %17, %398, !dbg !68
  %402 = add i32 %17, %278, !dbg !68
  %403 = add i32 %396, %18, !dbg !68
  %404 = add i32 %18, %397, !dbg !68
  %405 = add i32 %18, %398, !dbg !68
  %406 = add i32 %18, %278, !dbg !68
  %407 = sext i32 %399 to i64, !dbg !69
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !69
  %409 = sext i32 %400 to i64, !dbg !69
  %410 = getelementptr float, ptr addrspace(1) %0, i64 %409, !dbg !69
  %411 = sext i32 %401 to i64, !dbg !69
  %412 = getelementptr float, ptr addrspace(1) %0, i64 %411, !dbg !69
  %413 = sext i32 %402 to i64, !dbg !69
  %414 = getelementptr float, ptr addrspace(1) %0, i64 %413, !dbg !69
  %415 = sext i32 %403 to i64, !dbg !69
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !69
  %417 = sext i32 %404 to i64, !dbg !69
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !69
  %419 = sext i32 %405 to i64, !dbg !69
  %420 = getelementptr float, ptr addrspace(1) %0, i64 %419, !dbg !69
  %421 = sext i32 %406 to i64, !dbg !69
  %422 = getelementptr float, ptr addrspace(1) %0, i64 %421, !dbg !69
  %423 = add i32 %19, 417, !dbg !70
  %424 = icmp ult i32 %423, 305, !dbg !70
  %425 = and i1 %424, %74, !dbg !70
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %408, i1 %393, i32 0, i1 %393) #1, !dbg !71
  %427 = bitcast i32 %426 to float, !dbg !71
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %410, i1 %394, i32 0, i1 %394) #1, !dbg !71
  %429 = bitcast i32 %428 to float, !dbg !71
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %412, i1 %395, i32 0, i1 %395) #1, !dbg !71
  %431 = bitcast i32 %430 to float, !dbg !71
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %414, i1 %425, i32 0, i1 %425) #1, !dbg !71
  %433 = bitcast i32 %432 to float, !dbg !71
  %434 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %416, i1 %393, i32 0, i1 %393) #1, !dbg !71
  %435 = bitcast i32 %434 to float, !dbg !71
  %436 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %418, i1 %394, i32 0, i1 %394) #1, !dbg !71
  %437 = bitcast i32 %436 to float, !dbg !71
  %438 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %420, i1 %395, i32 0, i1 %395) #1, !dbg !71
  %439 = bitcast i32 %438 to float, !dbg !71
  %440 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %422, i1 %425, i32 0, i1 %425) #1, !dbg !71
  %441 = bitcast i32 %440 to float, !dbg !71
  %442 = fadd float %382, %427, !dbg !72
  %443 = fadd float %383, %429, !dbg !72
  %444 = fadd float %384, %431, !dbg !72
  %445 = fadd float %385, %433, !dbg !72
  %446 = fadd float %386, %435, !dbg !72
  %447 = fadd float %387, %437, !dbg !72
  %448 = fadd float %388, %439, !dbg !72
  %449 = fadd float %389, %441, !dbg !72
  %450 = and i1 %390, %129, !dbg !73
  %451 = and i1 %391, %130, !dbg !73
  %452 = and i1 %392, %131, !dbg !73
  %453 = add nuw nsw i32 %19, 17, !dbg !74
  %454 = add nuw nsw i32 %19, 145, !dbg !74
  %455 = add nuw nsw i32 %19, 273, !dbg !74
  %456 = add i32 %19, 401, !dbg !74
  %457 = add i32 %453, %17, !dbg !75
  %458 = add i32 %17, %454, !dbg !75
  %459 = add i32 %17, %455, !dbg !75
  %460 = add i32 %17, %456, !dbg !75
  %461 = add i32 %453, %18, !dbg !75
  %462 = add i32 %18, %454, !dbg !75
  %463 = add i32 %18, %455, !dbg !75
  %464 = add i32 %18, %456, !dbg !75
  %465 = sext i32 %457 to i64, !dbg !76
  %466 = getelementptr float, ptr addrspace(1) %0, i64 %465, !dbg !76
  %467 = sext i32 %458 to i64, !dbg !76
  %468 = getelementptr float, ptr addrspace(1) %0, i64 %467, !dbg !76
  %469 = sext i32 %459 to i64, !dbg !76
  %470 = getelementptr float, ptr addrspace(1) %0, i64 %469, !dbg !76
  %471 = sext i32 %460 to i64, !dbg !76
  %472 = getelementptr float, ptr addrspace(1) %0, i64 %471, !dbg !76
  %473 = sext i32 %461 to i64, !dbg !76
  %474 = getelementptr float, ptr addrspace(1) %0, i64 %473, !dbg !76
  %475 = sext i32 %462 to i64, !dbg !76
  %476 = getelementptr float, ptr addrspace(1) %0, i64 %475, !dbg !76
  %477 = sext i32 %463 to i64, !dbg !76
  %478 = getelementptr float, ptr addrspace(1) %0, i64 %477, !dbg !76
  %479 = sext i32 %464 to i64, !dbg !76
  %480 = getelementptr float, ptr addrspace(1) %0, i64 %479, !dbg !76
  %481 = and i1 %424, %132, !dbg !77
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %466, i1 %450, i32 0, i1 %450) #1, !dbg !78
  %483 = bitcast i32 %482 to float, !dbg !78
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %451, i32 0, i1 %451) #1, !dbg !78
  %485 = bitcast i32 %484 to float, !dbg !78
  %486 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %470, i1 %452, i32 0, i1 %452) #1, !dbg !78
  %487 = bitcast i32 %486 to float, !dbg !78
  %488 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %481, i32 0, i1 %481) #1, !dbg !78
  %489 = bitcast i32 %488 to float, !dbg !78
  %490 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %474, i1 %450, i32 0, i1 %450) #1, !dbg !78
  %491 = bitcast i32 %490 to float, !dbg !78
  %492 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %476, i1 %451, i32 0, i1 %451) #1, !dbg !78
  %493 = bitcast i32 %492 to float, !dbg !78
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %452, i32 0, i1 %452) #1, !dbg !78
  %495 = bitcast i32 %494 to float, !dbg !78
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %480, i1 %481, i32 0, i1 %481) #1, !dbg !78
  %497 = bitcast i32 %496 to float, !dbg !78
  %498 = fadd float %442, %483, !dbg !79
  %499 = fadd float %443, %485, !dbg !79
  %500 = fadd float %444, %487, !dbg !79
  %501 = fadd float %445, %489, !dbg !79
  %502 = fadd float %446, %491, !dbg !79
  %503 = fadd float %447, %493, !dbg !79
  %504 = fadd float %448, %495, !dbg !79
  %505 = fadd float %449, %497, !dbg !79
  %506 = and i1 %390, %214, !dbg !80
  %507 = and i1 %391, %216, !dbg !80
  %508 = and i1 %392, %218, !dbg !80
  %509 = add nuw nsw i32 %19, 18, !dbg !81
  %510 = add nuw nsw i32 %19, 146, !dbg !81
  %511 = add nuw nsw i32 %19, 274, !dbg !81
  %512 = add i32 %19, 402, !dbg !81
  %513 = add i32 %509, %17, !dbg !82
  %514 = add i32 %17, %510, !dbg !82
  %515 = add i32 %17, %511, !dbg !82
  %516 = add i32 %17, %512, !dbg !82
  %517 = add i32 %509, %18, !dbg !82
  %518 = add i32 %18, %510, !dbg !82
  %519 = add i32 %18, %511, !dbg !82
  %520 = add i32 %18, %512, !dbg !82
  %521 = sext i32 %513 to i64, !dbg !83
  %522 = getelementptr float, ptr addrspace(1) %0, i64 %521, !dbg !83
  %523 = sext i32 %514 to i64, !dbg !83
  %524 = getelementptr float, ptr addrspace(1) %0, i64 %523, !dbg !83
  %525 = sext i32 %515 to i64, !dbg !83
  %526 = getelementptr float, ptr addrspace(1) %0, i64 %525, !dbg !83
  %527 = sext i32 %516 to i64, !dbg !83
  %528 = getelementptr float, ptr addrspace(1) %0, i64 %527, !dbg !83
  %529 = sext i32 %517 to i64, !dbg !83
  %530 = getelementptr float, ptr addrspace(1) %0, i64 %529, !dbg !83
  %531 = sext i32 %518 to i64, !dbg !83
  %532 = getelementptr float, ptr addrspace(1) %0, i64 %531, !dbg !83
  %533 = sext i32 %519 to i64, !dbg !83
  %534 = getelementptr float, ptr addrspace(1) %0, i64 %533, !dbg !83
  %535 = sext i32 %520 to i64, !dbg !83
  %536 = getelementptr float, ptr addrspace(1) %0, i64 %535, !dbg !83
  %537 = and i1 %424, %364, !dbg !61
  %538 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %506, i32 0, i1 %506) #1, !dbg !84
  %539 = bitcast i32 %538 to float, !dbg !84
  %540 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %524, i1 %507, i32 0, i1 %507) #1, !dbg !84
  %541 = bitcast i32 %540 to float, !dbg !84
  %542 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %526, i1 %508, i32 0, i1 %508) #1, !dbg !84
  %543 = bitcast i32 %542 to float, !dbg !84
  %544 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %528, i1 %537, i32 0, i1 %537) #1, !dbg !84
  %545 = bitcast i32 %544 to float, !dbg !84
  %546 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %530, i1 %506, i32 0, i1 %506) #1, !dbg !84
  %547 = bitcast i32 %546 to float, !dbg !84
  %548 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %532, i1 %507, i32 0, i1 %507) #1, !dbg !84
  %549 = bitcast i32 %548 to float, !dbg !84
  %550 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %534, i1 %508, i32 0, i1 %508) #1, !dbg !84
  %551 = bitcast i32 %550 to float, !dbg !84
  %552 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %536, i1 %537, i32 0, i1 %537) #1, !dbg !84
  %553 = bitcast i32 %552 to float, !dbg !84
  %554 = fadd float %498, %539, !dbg !85
  %555 = fadd float %499, %541, !dbg !85
  %556 = fadd float %500, %543, !dbg !85
  %557 = fadd float %501, %545, !dbg !85
  %558 = fadd float %502, %547, !dbg !85
  %559 = fadd float %503, %549, !dbg !85
  %560 = fadd float %504, %551, !dbg !85
  %561 = fadd float %505, %553, !dbg !85
  %562 = mul nsw i32 %67, %26, !dbg !86
  %563 = mul nsw i32 %69, %27, !dbg !86
  %564 = mul nsw i32 %71, %28, !dbg !86
  %565 = mul nsw i32 %73, %29, !dbg !86
  %566 = add nsw i32 %67, 2, !dbg !87
  %567 = add nsw i32 %69, 2, !dbg !87
  %568 = add nsw i32 %71, 2, !dbg !87
  %569 = add nsw i32 %73, 2, !dbg !87
  %570 = icmp sgt i32 %73, 15, !dbg !88
  %571 = select i1 %570, i32 18, i32 0, !dbg !89
  %572 = icmp slt i32 %73, 16, !dbg !90
  %573 = select i1 %572, i32 %569, i32 0, !dbg !91
  %574 = add nsw i32 %571, %573, !dbg !92
  %575 = add nsw i32 %26, 2, !dbg !93
  %576 = add nsw i32 %27, 2, !dbg !93
  %577 = add nsw i32 %28, 2, !dbg !93
  %578 = add nsw i32 %29, 2, !dbg !93
  %579 = shufflevector <4 x i32> %34, <4 x i32> poison, <2 x i32> <i32 3, i32 poison>, !dbg !90
  %580 = insertelement <2 x i32> %579, i32 271, i64 1, !dbg !90
  %581 = insertelement <2 x i32> <i32 16, i32 poison>, i32 %19, i64 1, !dbg !90
  %582 = icmp slt <2 x i32> %580, %581, !dbg !90
  %583 = insertelement <2 x i32> <i32 poison, i32 18>, i32 %566, i64 0, !dbg !91
  %584 = select <2 x i1> %582, <2 x i32> %583, <2 x i32> zeroinitializer, !dbg !91
  %585 = insertelement <2 x i32> %580, i32 272, i64 1, !dbg !88
  %586 = insertelement <2 x i32> %581, i32 15, i64 0, !dbg !88
  %587 = icmp sgt <2 x i32> %585, %586, !dbg !88
  %588 = insertelement <2 x i32> <i32 18, i32 poison>, i32 %575, i64 1, !dbg !89
  %589 = select <2 x i1> %587, <2 x i32> %588, <2 x i32> zeroinitializer, !dbg !89
  %590 = add nsw <2 x i32> %589, %584, !dbg !92
  %591 = shufflevector <4 x i32> %34, <4 x i32> poison, <2 x i32> <i32 2, i32 poison>, !dbg !90
  %592 = insertelement <2 x i32> %591, i32 271, i64 1, !dbg !90
  %593 = insertelement <2 x i32> <i32 16, i32 poison>, i32 %20, i64 1, !dbg !90
  %594 = icmp slt <2 x i32> %592, %593, !dbg !90
  %595 = insertelement <2 x i32> <i32 poison, i32 18>, i32 %567, i64 0, !dbg !91
  %596 = select <2 x i1> %594, <2 x i32> %595, <2 x i32> zeroinitializer, !dbg !91
  %597 = insertelement <2 x i32> %592, i32 272, i64 1, !dbg !88
  %598 = insertelement <2 x i32> %593, i32 15, i64 0, !dbg !88
  %599 = icmp sgt <2 x i32> %597, %598, !dbg !88
  %600 = insertelement <2 x i32> <i32 18, i32 poison>, i32 %576, i64 1, !dbg !89
  %601 = select <2 x i1> %599, <2 x i32> %600, <2 x i32> zeroinitializer, !dbg !89
  %602 = add nsw <2 x i32> %601, %596, !dbg !92
  %603 = shufflevector <4 x i32> <i32 poison, i32 271, i32 poison, i32 poison>, <4 x i32> %34, <2 x i32> <i32 5, i32 1>, !dbg !90
  %604 = insertelement <2 x i32> <i32 16, i32 poison>, i32 %21, i64 1, !dbg !90
  %605 = icmp slt <2 x i32> %603, %604, !dbg !90
  %606 = insertelement <2 x i32> <i32 poison, i32 18>, i32 %568, i64 0, !dbg !91
  %607 = select <2 x i1> %605, <2 x i32> %606, <2 x i32> zeroinitializer, !dbg !91
  %608 = insertelement <2 x i32> %603, i32 272, i64 1, !dbg !88
  %609 = insertelement <2 x i32> %604, i32 15, i64 0, !dbg !88
  %610 = icmp sgt <2 x i32> %608, %609, !dbg !88
  %611 = insertelement <2 x i32> <i32 18, i32 poison>, i32 %577, i64 1, !dbg !89
  %612 = select <2 x i1> %610, <2 x i32> %611, <2 x i32> zeroinitializer, !dbg !89
  %613 = add nsw <2 x i32> %612, %607, !dbg !92
  %614 = select i1 %14, i32 %578, i32 18, !dbg !94
  %615 = extractelement <2 x i32> %590, i64 0, !dbg !95
  %616 = extractelement <2 x i32> %590, i64 1, !dbg !96
  %617 = mul i32 %615, %616, !dbg !97
  %618 = extractelement <2 x i32> %602, i64 0, !dbg !95
  %619 = extractelement <2 x i32> %602, i64 1, !dbg !96
  %620 = mul i32 %618, %619, !dbg !97
  %621 = extractelement <2 x i32> %613, i64 0, !dbg !95
  %622 = extractelement <2 x i32> %613, i64 1, !dbg !96
  %623 = mul i32 %621, %622, !dbg !97
  %624 = mul i32 %574, %614, !dbg !97
  %.neg15 = mul nsw i32 %616, %67, !dbg !96
  %.neg16 = mul i32 %615, %26, !dbg !96
  %.neg18 = mul nsw i32 %619, %69, !dbg !96
  %.neg19 = mul i32 %618, %27, !dbg !96
  %.neg21 = mul nsw i32 %622, %71, !dbg !96
  %.neg22 = mul i32 %621, %28, !dbg !96
  %.neg24 = mul nsw i32 %614, %73, !dbg !96
  %.neg25 = mul i32 %574, %29, !dbg !96
  %reass.add = add i32 %.neg15, %.neg16
  %625 = add nsw i32 %26, %67, !dbg !25
  %reass.sub33 = sub i32 %562, %625, !dbg !25
  %626 = add i32 %reass.sub33, 1, !dbg !25
  %627 = add i32 %626, %615, !dbg !95
  %628 = add i32 %627, %616, !dbg !96
  %629 = add i32 %628, %617, !dbg !98
  %630 = sub i32 %629, %reass.add, !dbg !99
  %reass.add27 = add i32 %.neg18, %.neg19
  %631 = add nsw i32 %27, %69, !dbg !25
  %reass.sub = sub i32 %563, %631, !dbg !25
  %632 = add i32 %reass.sub, 1, !dbg !25
  %633 = add i32 %632, %618, !dbg !95
  %634 = add i32 %633, %619, !dbg !96
  %635 = add i32 %634, %620, !dbg !98
  %636 = sub i32 %635, %reass.add27, !dbg !99
  %reass.add29 = add i32 %.neg21, %.neg22
  %637 = add nsw i32 %28, %71, !dbg !25
  %reass.sub34 = sub i32 %564, %637, !dbg !25
  %638 = add i32 %reass.sub34, 1, !dbg !25
  %639 = add i32 %638, %621, !dbg !95
  %640 = add i32 %639, %622, !dbg !96
  %641 = add i32 %640, %623, !dbg !98
  %642 = sub i32 %641, %reass.add29, !dbg !99
  %reass.add31 = add i32 %.neg24, %.neg25
  %643 = add nsw i32 %29, %73, !dbg !25
  %reass.sub35 = sub i32 %565, %643, !dbg !25
  %644 = add i32 %reass.sub35, 1, !dbg !25
  %645 = add i32 %644, %574, !dbg !95
  %646 = add i32 %645, %614, !dbg !96
  %647 = add i32 %646, %624, !dbg !98
  %648 = sub i32 %647, %reass.add31, !dbg !99
  %649 = sitofp i32 %630 to float, !dbg !100
  %650 = sitofp i32 %636 to float, !dbg !100
  %651 = sitofp i32 %642 to float, !dbg !100
  %652 = sitofp i32 %648 to float, !dbg !100
  %653 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %554, float %649) #1, !dbg !100
  %654 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %555, float %650) #1, !dbg !100
  %655 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %556, float %651) #1, !dbg !100
  %656 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %557, float %652) #1, !dbg !100
  %657 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %558, float %649) #1, !dbg !100
  %658 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %559, float %650) #1, !dbg !100
  %659 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %560, float %651) #1, !dbg !100
  %660 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %561, float %652) #1, !dbg !100
  %661 = mul i32 %19, 768, !dbg !101
  %662 = mul i32 %20, 768, !dbg !101
  %663 = mul i32 %21, 768, !dbg !101
  %664 = mul i32 %22, 768, !dbg !101
  %665 = mul i32 %15, 221952, !dbg !102
  %666 = add i32 %665, %.decomposed, !dbg !103
  %667 = add i32 %666, %661, !dbg !104
  %668 = add i32 %666, %662, !dbg !104
  %669 = add i32 %666, %663, !dbg !104
  %670 = add i32 %666, %664, !dbg !104
  %671 = sext i32 %667 to i64, !dbg !105
  %672 = getelementptr float, ptr addrspace(1) %1, i64 %671, !dbg !105
  %673 = sext i32 %668 to i64, !dbg !105
  %674 = getelementptr float, ptr addrspace(1) %1, i64 %673, !dbg !105
  %675 = sext i32 %669 to i64, !dbg !105
  %676 = getelementptr float, ptr addrspace(1) %1, i64 %675, !dbg !105
  %677 = sext i32 %670 to i64, !dbg !105
  %678 = getelementptr float, ptr addrspace(1) %1, i64 %677, !dbg !105
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %59, i32 %63, ptr addrspace(1) %672, i1 %23) #1, !dbg !106
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %60, i32 %64, ptr addrspace(1) %674, i1 %24) #1, !dbg !106
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %61, i32 %65, ptr addrspace(1) %676, i1 %25) #1, !dbg !106
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %62, i32 %66, ptr addrspace(1) %678, i1 %14) #1, !dbg !106
  %679 = getelementptr float, ptr addrspace(1) %2, i64 %671, !dbg !107
  %680 = getelementptr float, ptr addrspace(1) %2, i64 %673, !dbg !107
  %681 = getelementptr float, ptr addrspace(1) %2, i64 %675, !dbg !107
  %682 = getelementptr float, ptr addrspace(1) %2, i64 %677, !dbg !107
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %59, i32 %63, ptr addrspace(1) %679, i1 %23) #1, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %60, i32 %64, ptr addrspace(1) %680, i1 %24) #1, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %61, i32 %65, ptr addrspace(1) %681, i1 %25) #1, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %62, i32 %66, ptr addrspace(1) %682, i1 %14) #1, !dbg !108
  %683 = getelementptr float, ptr addrspace(1) %3, i64 %671, !dbg !109
  %684 = getelementptr float, ptr addrspace(1) %3, i64 %673, !dbg !109
  %685 = getelementptr float, ptr addrspace(1) %3, i64 %675, !dbg !109
  %686 = getelementptr float, ptr addrspace(1) %3, i64 %677, !dbg !109
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %59, i32 %63, ptr addrspace(1) %683, i1 %23) #1, !dbg !110
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %60, i32 %64, ptr addrspace(1) %684, i1 %24) #1, !dbg !110
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %61, i32 %65, ptr addrspace(1) %685, i1 %25) #1, !dbg !110
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %62, i32 %66, ptr addrspace(1) %686, i1 %14) #1, !dbg !110
  %687 = getelementptr float, ptr addrspace(1) %4, i64 %671, !dbg !111
  %688 = getelementptr float, ptr addrspace(1) %4, i64 %673, !dbg !111
  %689 = getelementptr float, ptr addrspace(1) %4, i64 %675, !dbg !111
  %690 = getelementptr float, ptr addrspace(1) %4, i64 %677, !dbg !111
  %691 = bitcast float %653 to i32, !dbg !112
  %692 = bitcast float %657 to i32, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %691, i32 %692, ptr addrspace(1) %687, i1 %23) #1, !dbg !112
  %693 = bitcast float %654 to i32, !dbg !112
  %694 = bitcast float %658 to i32, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %693, i32 %694, ptr addrspace(1) %688, i1 %24) #1, !dbg !112
  %695 = bitcast float %655 to i32, !dbg !112
  %696 = bitcast float %659 to i32, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %695, i32 %696, ptr addrspace(1) %689, i1 %25) #1, !dbg !112
  %697 = bitcast float %656 to i32, !dbg !112
  %698 = bitcast float %660 to i32, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %697, i32 %698, ptr addrspace(1) %690, i1 %14) #1, !dbg !112
  ret void, !dbg !113
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4rnneett6okjia5wtfz2xfhswrwg2hoxr24ssxgxzupp5utevyy.py", directory: "inductor_cache/4r")
!4 = !{ptr @triton_poi_fused_avg_pool2d_convolution_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_convolution_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_convolution_29", linkageName: "triton_poi_fused_avg_pool2d_convolution_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 39, scope: !7)
!19 = !DILocation(line: 26, column: 23, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 44, scope: !7)
!25 = !DILocation(line: 87, column: 40, scope: !7)
!26 = !DILocation(line: 42, column: 19, scope: !7)
!27 = !DILocation(line: 46, column: 39, scope: !7)
!28 = !DILocation(line: 46, column: 44, scope: !7)
!29 = !DILocation(line: 46, column: 31, scope: !7)
!30 = !DILocation(line: 46, column: 61, scope: !7)
!31 = !DILocation(line: 46, column: 53, scope: !7)
!32 = !DILocation(line: 48, column: 21, scope: !7)
!33 = !DILocation(line: 52, column: 44, scope: !7)
!34 = !DILocation(line: 52, column: 31, scope: !7)
!35 = !DILocation(line: 52, column: 61, scope: !7)
!36 = !DILocation(line: 52, column: 53, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 20, scope: !7)
!39 = !DILocation(line: 59, column: 39, scope: !7)
!40 = !DILocation(line: 59, column: 44, scope: !7)
!41 = !DILocation(line: 59, column: 31, scope: !7)
!42 = !DILocation(line: 59, column: 61, scope: !7)
!43 = !DILocation(line: 59, column: 53, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 64, column: 20, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 38, scope: !7)
!48 = !DILocation(line: 66, column: 43, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 60, scope: !7)
!51 = !DILocation(line: 66, column: 52, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 69, column: 53, scope: !7)
!55 = !DILocation(line: 69, column: 45, scope: !7)
!56 = !DILocation(line: 70, column: 20, scope: !7)
!57 = !DILocation(line: 71, column: 20, scope: !7)
!58 = !DILocation(line: 72, column: 35, scope: !7)
!59 = !DILocation(line: 72, column: 40, scope: !7)
!60 = !DILocation(line: 72, column: 31, scope: !7)
!61 = !DILocation(line: 85, column: 58, scope: !7)
!62 = !DILocation(line: 72, column: 57, scope: !7)
!63 = !DILocation(line: 72, column: 49, scope: !7)
!64 = !DILocation(line: 73, column: 20, scope: !7)
!65 = !DILocation(line: 77, column: 20, scope: !7)
!66 = !DILocation(line: 78, column: 20, scope: !7)
!67 = !DILocation(line: 79, column: 36, scope: !7)
!68 = !DILocation(line: 79, column: 41, scope: !7)
!69 = !DILocation(line: 79, column: 31, scope: !7)
!70 = !DILocation(line: 79, column: 58, scope: !7)
!71 = !DILocation(line: 79, column: 50, scope: !7)
!72 = !DILocation(line: 80, column: 20, scope: !7)
!73 = !DILocation(line: 81, column: 20, scope: !7)
!74 = !DILocation(line: 82, column: 36, scope: !7)
!75 = !DILocation(line: 82, column: 41, scope: !7)
!76 = !DILocation(line: 82, column: 31, scope: !7)
!77 = !DILocation(line: 82, column: 58, scope: !7)
!78 = !DILocation(line: 82, column: 50, scope: !7)
!79 = !DILocation(line: 83, column: 20, scope: !7)
!80 = !DILocation(line: 84, column: 20, scope: !7)
!81 = !DILocation(line: 85, column: 36, scope: !7)
!82 = !DILocation(line: 85, column: 41, scope: !7)
!83 = !DILocation(line: 85, column: 31, scope: !7)
!84 = !DILocation(line: 85, column: 50, scope: !7)
!85 = !DILocation(line: 86, column: 20, scope: !7)
!86 = !DILocation(line: 87, column: 43, scope: !7)
!87 = !DILocation(line: 87, column: 70, scope: !7)
!88 = !DILocation(line: 87, column: 66, scope: !7)
!89 = !DILocation(line: 87, column: 57, scope: !7)
!90 = !DILocation(line: 87, column: 101, scope: !7)
!91 = !DILocation(line: 87, column: 89, scope: !7)
!92 = !DILocation(line: 87, column: 77, scope: !7)
!93 = !DILocation(line: 87, column: 129, scope: !7)
!94 = !DILocation(line: 87, column: 136, scope: !7)
!95 = !DILocation(line: 87, column: 48, scope: !7)
!96 = !DILocation(line: 87, column: 240, scope: !7)
!97 = !DILocation(line: 87, column: 108, scope: !7)
!98 = !DILocation(line: 87, column: 311, scope: !7)
!99 = !DILocation(line: 87, column: 372, scope: !7)
!100 = !DILocation(line: 88, column: 20, scope: !7)
!101 = !DILocation(line: 89, column: 34, scope: !7)
!102 = !DILocation(line: 89, column: 46, scope: !7)
!103 = !DILocation(line: 89, column: 30, scope: !7)
!104 = !DILocation(line: 89, column: 39, scope: !7)
!105 = !DILocation(line: 89, column: 25, scope: !7)
!106 = !DILocation(line: 89, column: 57, scope: !7)
!107 = !DILocation(line: 90, column: 25, scope: !7)
!108 = !DILocation(line: 90, column: 57, scope: !7)
!109 = !DILocation(line: 91, column: 25, scope: !7)
!110 = !DILocation(line: 91, column: 57, scope: !7)
!111 = !DILocation(line: 92, column: 25, scope: !7)
!112 = !DILocation(line: 92, column: 58, scope: !7)
!113 = !DILocation(line: 92, column: 4, scope: !7)
