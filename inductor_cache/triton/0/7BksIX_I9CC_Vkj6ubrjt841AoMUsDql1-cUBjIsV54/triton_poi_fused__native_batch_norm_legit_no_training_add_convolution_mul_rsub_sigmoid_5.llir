; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_rsub_sigmoid_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = sdiv i32 %17, 4096, !dbg !14
  %20 = sdiv i32 %18, 4096, !dbg !14
  %21 = srem i32 %19, 64, !dbg !15
  %22 = srem i32 %20, 64, !dbg !15
  %23 = sext i32 %17 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = sext i32 %18 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !17
  %29 = sext i32 %21 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !18
  %31 = sext i32 %22 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !23
  %56 = bitcast i32 %55 to float, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !23
  %60 = bitcast i32 %59 to float, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !23
  %62 = bitcast i32 %61 to float, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !23
  %64 = bitcast i32 %63 to float, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !23
  %68 = bitcast i32 %67 to float, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !27
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !27
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !27
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !27
  %89 = sext i32 %19 to i64, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %7, i64 %89, !dbg !28
  %91 = sext i32 %20 to i64, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %7, i64 %91, !dbg !28
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !29
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !29
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !29
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !29
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !29
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !29
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !30
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !31
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !31
  %105 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !32
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !33
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %109 = fadd float %54, 0x3EE4F8B580000000, !dbg !34
  %110 = fadd float %56, 0x3EE4F8B580000000, !dbg !34
  %111 = fadd float %58, 0x3EE4F8B580000000, !dbg !34
  %112 = fadd float %60, 0x3EE4F8B580000000, !dbg !34
  %113 = fadd float %62, 0x3EE4F8B580000000, !dbg !34
  %114 = fadd float %64, 0x3EE4F8B580000000, !dbg !34
  %115 = fadd float %66, 0x3EE4F8B580000000, !dbg !34
  %116 = fadd float %68, 0x3EE4F8B580000000, !dbg !34
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %117, 0, !dbg !35
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %118, 0, !dbg !35
  br i1 %.not.i, label %124, label %119, !dbg !35

119:                                              ; preds = %11
  br i1 %.not1.i, label %122, label %120, !dbg !35

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

124:                                              ; preds = %11
  br i1 %.not1.i, label %127, label %125, !dbg !35

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %120, %122, %125, %127
  %.0.i = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !35
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %129, 0, !dbg !35
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %130, 0, !dbg !35
  br i1 %.not.i1, label %136, label %131, !dbg !35

131:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %134, label %132, !dbg !35

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

136:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %139, label %137, !dbg !35

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %132, %134, %137, %139
  %.0.i3 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %141, 0, !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %142, 0, !dbg !35
  br i1 %.not.i6, label %148, label %143, !dbg !35

143:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %146, label %144, !dbg !35

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

148:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %151, label %149, !dbg !35

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %144, %146, %149, %151
  %.0.i8 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %153, 0, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %154, 0, !dbg !35
  br i1 %.not.i11, label %160, label %155, !dbg !35

155:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %158, label %156, !dbg !35

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

160:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %163, label %161, !dbg !35

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %156, %158, %161, %163
  %.0.i13 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %165, 0, !dbg !35
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i19 = icmp eq i32 %166, 0, !dbg !35
  br i1 %.not.i16, label %172, label %167, !dbg !35

167:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %170, label %168, !dbg !35

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

172:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %175, label %173, !dbg !35

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %168, %170, %173, %175
  %.0.i18 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !35
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i21 = icmp eq i32 %177, 0, !dbg !35
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i24 = icmp eq i32 %178, 0, !dbg !35
  br i1 %.not.i21, label %184, label %179, !dbg !35

179:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %182, label %180, !dbg !35

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

184:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %187, label %185, !dbg !35

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %180, %182, %185, %187
  %.0.i23 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !35
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i26 = icmp eq i32 %189, 0, !dbg !35
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i29 = icmp eq i32 %190, 0, !dbg !35
  br i1 %.not.i26, label %196, label %191, !dbg !35

191:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %194, label %192, !dbg !35

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

196:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %199, label %197, !dbg !35

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %192, %194, %197, %199
  %.0.i28 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !35
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i31 = icmp eq i32 %201, 0, !dbg !35
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i34 = icmp eq i32 %202, 0, !dbg !35
  br i1 %.not.i31, label %208, label %203, !dbg !35

203:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %206, label %204, !dbg !35

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

208:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %211, label %209, !dbg !35

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %204, %206, %209, %211
  %.0.i33 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !35
  %213 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %214 = bitcast i32 %213 to float, !dbg !17
  %215 = bitcast i32 %40 to float, !dbg !19
  %216 = fadd float %214, %215, !dbg !36
  %217 = bitcast i32 %50 to float, !dbg !21
  %218 = fsub float %216, %217, !dbg !37
  %219 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %220 = bitcast i32 %219 to float, !dbg !17
  %221 = bitcast i32 %39 to float, !dbg !19
  %222 = fadd float %220, %221, !dbg !36
  %223 = bitcast i32 %49 to float, !dbg !21
  %224 = fsub float %222, %223, !dbg !37
  %225 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %226 = bitcast i32 %225 to float, !dbg !17
  %227 = bitcast i32 %38 to float, !dbg !19
  %228 = fadd float %226, %227, !dbg !36
  %229 = bitcast i32 %48 to float, !dbg !21
  %230 = fsub float %228, %229, !dbg !37
  %231 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %232 = bitcast i32 %231 to float, !dbg !17
  %233 = bitcast i32 %37 to float, !dbg !19
  %234 = fadd float %232, %233, !dbg !36
  %235 = bitcast i32 %47 to float, !dbg !21
  %236 = fsub float %234, %235, !dbg !37
  %237 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %238 = bitcast i32 %237 to float, !dbg !17
  %239 = bitcast i32 %36 to float, !dbg !19
  %240 = fadd float %238, %239, !dbg !36
  %241 = bitcast i32 %46 to float, !dbg !21
  %242 = fsub float %240, %241, !dbg !37
  %243 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %244 = bitcast i32 %243 to float, !dbg !17
  %245 = bitcast i32 %35 to float, !dbg !19
  %246 = fadd float %244, %245, !dbg !36
  %247 = bitcast i32 %45 to float, !dbg !21
  %248 = fsub float %246, %247, !dbg !37
  %249 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %250 = bitcast i32 %249 to float, !dbg !17
  %251 = bitcast i32 %34 to float, !dbg !19
  %252 = fadd float %250, %251, !dbg !36
  %253 = bitcast i32 %44 to float, !dbg !21
  %254 = fsub float %252, %253, !dbg !37
  %255 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %256 = bitcast i32 %255 to float, !dbg !17
  %257 = bitcast i32 %33 to float, !dbg !19
  %258 = fadd float %256, %257, !dbg !36
  %259 = bitcast i32 %43 to float, !dbg !21
  %260 = fsub float %258, %259, !dbg !37
  %261 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !33
  %262 = bitcast i32 %261 to float, !dbg !33
  %263 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !33
  %264 = bitcast i32 %263 to float, !dbg !33
  %265 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !33
  %266 = bitcast i32 %265 to float, !dbg !33
  %267 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !33
  %268 = bitcast i32 %267 to float, !dbg !33
  %269 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !33
  %270 = bitcast i32 %269 to float, !dbg !33
  %271 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !33
  %272 = bitcast i32 %271 to float, !dbg !33
  %273 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !33
  %274 = bitcast i32 %273 to float, !dbg !33
  %275 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !33
  %276 = bitcast i32 %275 to float, !dbg !33
  %277 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !31
  %278 = bitcast i32 %277 to float, !dbg !31
  %279 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !31
  %280 = bitcast i32 %279 to float, !dbg !31
  %281 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !31
  %282 = bitcast i32 %281 to float, !dbg !31
  %283 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !31
  %284 = bitcast i32 %283 to float, !dbg !31
  %285 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !31
  %286 = bitcast i32 %285 to float, !dbg !31
  %287 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !31
  %288 = bitcast i32 %287 to float, !dbg !31
  %289 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !31
  %290 = bitcast i32 %289 to float, !dbg !31
  %291 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !31
  %292 = bitcast i32 %291 to float, !dbg !31
  %293 = bitcast i32 %100 to float, !dbg !29
  %294 = bitcast i32 %99 to float, !dbg !29
  %295 = bitcast i32 %98 to float, !dbg !29
  %296 = bitcast i32 %97 to float, !dbg !29
  %297 = bitcast i32 %96 to float, !dbg !29
  %298 = bitcast i32 %95 to float, !dbg !29
  %299 = bitcast i32 %94 to float, !dbg !29
  %300 = bitcast i32 %93 to float, !dbg !29
  %301 = bitcast i32 %88 to float, !dbg !27
  %302 = bitcast i32 %87 to float, !dbg !27
  %303 = bitcast i32 %86 to float, !dbg !27
  %304 = bitcast i32 %85 to float, !dbg !27
  %305 = bitcast i32 %84 to float, !dbg !27
  %306 = bitcast i32 %83 to float, !dbg !27
  %307 = bitcast i32 %82 to float, !dbg !27
  %308 = bitcast i32 %81 to float, !dbg !27
  %309 = bitcast i32 %78 to float, !dbg !25
  %310 = bitcast i32 %77 to float, !dbg !25
  %311 = bitcast i32 %76 to float, !dbg !25
  %312 = bitcast i32 %75 to float, !dbg !25
  %313 = bitcast i32 %74 to float, !dbg !25
  %314 = bitcast i32 %73 to float, !dbg !25
  %315 = bitcast i32 %72 to float, !dbg !25
  %316 = bitcast i32 %71 to float, !dbg !25
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !38
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !38
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !38
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !38
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !38
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !38
  %325 = fmul float %260, %317, !dbg !39
  %326 = fmul float %254, %318, !dbg !39
  %327 = fmul float %248, %319, !dbg !39
  %328 = fmul float %242, %320, !dbg !39
  %329 = fmul float %236, %321, !dbg !39
  %330 = fmul float %230, %322, !dbg !39
  %331 = fmul float %224, %323, !dbg !39
  %332 = fmul float %218, %324, !dbg !39
  %333 = fmul float %325, %316, !dbg !40
  %334 = fmul float %326, %315, !dbg !40
  %335 = fmul float %327, %314, !dbg !40
  %336 = fmul float %328, %313, !dbg !40
  %337 = fmul float %329, %312, !dbg !40
  %338 = fmul float %330, %311, !dbg !40
  %339 = fmul float %331, %310, !dbg !40
  %340 = fmul float %332, %309, !dbg !40
  %341 = fadd float %333, %308, !dbg !41
  %342 = fadd float %334, %307, !dbg !41
  %343 = fadd float %335, %306, !dbg !41
  %344 = fadd float %336, %305, !dbg !41
  %345 = fadd float %337, %304, !dbg !41
  %346 = fadd float %338, %303, !dbg !41
  %347 = fadd float %339, %302, !dbg !41
  %348 = fadd float %340, %301, !dbg !41
  %349 = fadd float %341, %300, !dbg !42
  %350 = fadd float %342, %299, !dbg !42
  %351 = fadd float %343, %298, !dbg !42
  %352 = fadd float %344, %297, !dbg !42
  %353 = fadd float %345, %296, !dbg !42
  %354 = fadd float %346, %295, !dbg !42
  %355 = fadd float %347, %294, !dbg !42
  %356 = fadd float %348, %293, !dbg !42
  %357 = fsub float 0.000000e+00, %349, !dbg !43
  %358 = fsub float 0.000000e+00, %350, !dbg !43
  %359 = fsub float 0.000000e+00, %351, !dbg !43
  %360 = fsub float 0.000000e+00, %352, !dbg !43
  %361 = fsub float 0.000000e+00, %353, !dbg !43
  %362 = fsub float 0.000000e+00, %354, !dbg !43
  %363 = fsub float 0.000000e+00, %355, !dbg !43
  %364 = fsub float 0.000000e+00, %356, !dbg !43
  %365 = fmul float %357, 0x3FF7154760000000, !dbg !47
  %366 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %365) #3, !dbg !47
  %367 = fmul float %358, 0x3FF7154760000000, !dbg !47
  %368 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %367) #3, !dbg !47
  %369 = fmul float %359, 0x3FF7154760000000, !dbg !47
  %370 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %369) #3, !dbg !47
  %371 = fmul float %360, 0x3FF7154760000000, !dbg !47
  %372 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %371) #3, !dbg !47
  %373 = fmul float %361, 0x3FF7154760000000, !dbg !47
  %374 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %373) #3, !dbg !47
  %375 = fmul float %362, 0x3FF7154760000000, !dbg !47
  %376 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %375) #3, !dbg !47
  %377 = fmul float %363, 0x3FF7154760000000, !dbg !47
  %378 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %377) #3, !dbg !47
  %379 = fmul float %364, 0x3FF7154760000000, !dbg !47
  %380 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %379) #3, !dbg !47
  %381 = fadd float %366, 1.000000e+00, !dbg !48
  %382 = fadd float %368, 1.000000e+00, !dbg !48
  %383 = fadd float %370, 1.000000e+00, !dbg !48
  %384 = fadd float %372, 1.000000e+00, !dbg !48
  %385 = fadd float %374, 1.000000e+00, !dbg !48
  %386 = fadd float %376, 1.000000e+00, !dbg !48
  %387 = fadd float %378, 1.000000e+00, !dbg !48
  %388 = fadd float %380, 1.000000e+00, !dbg !48
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %381) #3, !dbg !49
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %382) #3, !dbg !49
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %383) #3, !dbg !49
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %384) #3, !dbg !49
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %385) #3, !dbg !49
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %386) #3, !dbg !49
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %387) #3, !dbg !49
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %388) #3, !dbg !49
  %397 = fmul float %389, %292, !dbg !50
  %398 = fmul float %390, %290, !dbg !50
  %399 = fmul float %391, %288, !dbg !50
  %400 = fmul float %392, %286, !dbg !50
  %401 = fmul float %393, %284, !dbg !50
  %402 = fmul float %394, %282, !dbg !50
  %403 = fmul float %395, %280, !dbg !50
  %404 = fmul float %396, %278, !dbg !50
  %405 = fsub float 1.000000e+00, %389, !dbg !51
  %406 = fsub float 1.000000e+00, %390, !dbg !51
  %407 = fsub float 1.000000e+00, %391, !dbg !51
  %408 = fsub float 1.000000e+00, %392, !dbg !51
  %409 = fsub float 1.000000e+00, %393, !dbg !51
  %410 = fsub float 1.000000e+00, %394, !dbg !51
  %411 = fsub float 1.000000e+00, %395, !dbg !51
  %412 = fsub float 1.000000e+00, %396, !dbg !51
  %413 = fmul float %405, %276, !dbg !52
  %414 = fmul float %406, %274, !dbg !52
  %415 = fmul float %407, %272, !dbg !52
  %416 = fmul float %408, %270, !dbg !52
  %417 = fmul float %409, %268, !dbg !52
  %418 = fmul float %410, %266, !dbg !52
  %419 = fmul float %411, %264, !dbg !52
  %420 = fmul float %412, %262, !dbg !52
  %421 = fadd float %397, %413, !dbg !53
  %422 = fadd float %398, %414, !dbg !53
  %423 = fadd float %399, %415, !dbg !53
  %424 = fadd float %400, %416, !dbg !53
  %425 = fadd float %401, %417, !dbg !53
  %426 = fadd float %402, %418, !dbg !53
  %427 = fadd float %403, %419, !dbg !53
  %428 = fadd float %404, %420, !dbg !53
  %429 = bitcast float %258 to i32, !dbg !54
  %430 = bitcast float %252 to i32, !dbg !54
  %431 = bitcast float %246 to i32, !dbg !54
  %432 = bitcast float %240 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %429, i32 %430, i32 %431, i32 %432, ptr addrspace(1) %24, i1 true) #3, !dbg !54
  %433 = bitcast float %234 to i32, !dbg !54
  %434 = bitcast float %228 to i32, !dbg !54
  %435 = bitcast float %222 to i32, !dbg !54
  %436 = bitcast float %216 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %433, i32 %434, i32 %435, i32 %436, ptr addrspace(1) %26, i1 true) #3, !dbg !54
  %437 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !55
  %438 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !55
  %439 = bitcast float %421 to i32, !dbg !56
  %440 = bitcast float %422 to i32, !dbg !56
  %441 = bitcast float %423 to i32, !dbg !56
  %442 = bitcast float %424 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %439, i32 %440, i32 %441, i32 %442, ptr addrspace(1) %437, i1 true) #3, !dbg !56
  %443 = bitcast float %425 to i32, !dbg !56
  %444 = bitcast float %426 to i32, !dbg !56
  %445 = bitcast float %427 to i32, !dbg !56
  %446 = bitcast float %428 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %443, i32 %444, i32 %445, i32 %446, ptr addrspace(1) %438, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clyp3s65ka6e6abtlkdskjxvmrz5sxma6chrm47xwzjlbctpdbtq.py", directory: "inductor_cache/ly")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_rsub_sigmoid_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_rsub_sigmoid_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_rsub_sigmoid_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_rsub_sigmoid_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 49, column: 23, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 51, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 20, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 54, column: 39, scope: !7)
!55 = !DILocation(line: 55, column: 28, scope: !7)
!56 = !DILocation(line: 55, column: 40, scope: !7)
!57 = !DILocation(line: 55, column: 4, scope: !7)
