; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_linalg_vector_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 1, !dbg !12
  %11 = and i32 %10, 6, !dbg !12
  %12 = and i32 %8, 7, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %13, 64, !dbg !14
  %15 = lshr i32 %8, 5, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %16 = sdiv i32 %.frozen, 16, !dbg !16
  %17 = mul i32 %16, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = shl i32 %8, 2, !dbg !18
  %19 = and i32 %18, 240, !dbg !18
  %20 = add nsw i32 %.decomposed, %19, !dbg !19
  %21 = shl i32 %16, 8, !dbg !20
  %22 = add i32 %20, %21, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = bitcast i32 %27 to float, !dbg !23
  %30 = sext i32 %.decomposed to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %14) #5, !dbg !25
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = fadd float %28, %35, !dbg !26
  %38 = fadd float %29, %36, !dbg !26
  %39 = fmul float %37, %37, !dbg !27
  %40 = fmul float %38, %38, !dbg !27
  %41 = select i1 %14, float %39, float 0.000000e+00, !dbg !28
  %42 = select i1 %14, float %40, float 0.000000e+00, !dbg !28
  %43 = bitcast float %41 to i32, !dbg !29
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !29
  %45 = bitcast i32 %44 to float, !dbg !29
  %46 = fadd float %41, %45, !dbg !33
  %47 = bitcast float %46 to i32, !dbg !29
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !29
  %49 = bitcast i32 %48 to float, !dbg !29
  %50 = fadd float %46, %49, !dbg !33
  %51 = bitcast float %50 to i32, !dbg !29
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = fadd float %50, %53, !dbg !33
  %55 = bitcast float %42 to i32, !dbg !29
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 16, i32 31), !dbg !29
  %57 = bitcast i32 %56 to float, !dbg !29
  %58 = fadd float %42, %57, !dbg !33
  %59 = bitcast float %58 to i32, !dbg !29
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = fadd float %58, %61, !dbg !33
  %63 = bitcast float %62 to i32, !dbg !29
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !29
  %65 = bitcast i32 %64 to float, !dbg !29
  %66 = fadd float %62, %65, !dbg !33
  %67 = icmp samesign ult i32 %9, 4, !dbg !29
  %68 = and i32 %15, 1, !dbg !29
  %69 = shl nuw nsw i32 %11, 1, !dbg !29
  %70 = or disjoint i32 %69, %68, !dbg !29
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !29
  %72 = bitcast float %54 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 %67) #5, !dbg !29
  %73 = or disjoint i32 %69, 2, !dbg !29
  %74 = or disjoint i32 %73, %68, !dbg !29
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !29
  %76 = bitcast float %66 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 %67) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %77 = icmp slt i32 %8, 16, !dbg !29
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !29
  %79 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %77) #5, !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !29
  %82 = bitcast i32 %81 to float, !dbg !29
  %83 = fadd float %80, %82, !dbg !33
  %84 = and i32 %8, 1, !dbg !29
  %85 = icmp eq i32 %84, 0, !dbg !29
  %86 = and i1 %77, %85, !dbg !29
  %87 = bitcast float %83 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %87, i1 %86) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !29
  %89 = load i32, ptr addrspace(3) %88, align 16, !dbg !29
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !29
  %91 = load i32, ptr addrspace(3) %90, align 8, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !35
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %92, i32 %89, i32 %91, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %95, 0, !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i = icmp eq i32 %96, 0, !dbg !35
  br i1 %.not.i, label %102, label %97, !dbg !35

97:                                               ; preds = %5
  br i1 %.not1.i, label %100, label %98, !dbg !35

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

102:                                              ; preds = %5
  br i1 %.not1.i, label %105, label %103, !dbg !35

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !35
  %107 = or disjoint i32 %7, %12, !dbg !13
  %108 = icmp slt i32 %107, 64, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %109 = sext i32 %107 to i64, !dbg !37
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !37
  %111 = lshr i32 %9, 3, !dbg !38
  %112 = shl nuw nsw i32 %68, 2, !dbg !38
  %113 = or disjoint i32 %112, %111, !dbg !38
  %114 = icmp eq i32 %113, 0, !dbg !38
  %115 = bitcast float %.0.i to i32, !dbg !38
  %116 = and i1 %114, %108, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %110, i1 %116) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cschpzbtze7kug66gcspll3gnbjp64deizp3e5capbwkzhtymbfu.py", directory: "inductor_cache/sc")
!4 = !{ptr @triton_per_fused_add_linalg_vector_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_linalg_vector_norm_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_linalg_vector_norm_1", linkageName: "triton_per_fused_add_linalg_vector_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 52, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 33, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 39, column: 24, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 41, column: 4, scope: !7)
!37 = !DILocation(line: 42, column: 28, scope: !7)
!38 = !DILocation(line: 42, column: 39, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
