#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0)
#loc1 = loc(unknown)
#loc50 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":68:27)
#loc53 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":69:27)
#loc55 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":70:27)
#loc65 = loc(callsite(#loc1 at #loc50))
#loc68 = loc(callsite(#loc1 at #loc53))
#loc70 = loc(callsite(#loc1 at #loc55))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_mul_sub_sum_19(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg11: i32 loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<7.812500e-03> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<6.10351563E-5> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<8192> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c8192_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc8)
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc9)
    %9 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc10)
    %10 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc11)
    %11 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc12)
    %12 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc13)
    %13 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc14)
    %14 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc15)
    %15:3 = scf.for %arg13 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg14 = %cst, %arg15 = %cst, %arg16 = %cst) -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>)  : i32 {
      %32 = tt.splat %arg13 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc17)
      %33 = arith.addi %32, %3 : tensor<1x2048xi32, #blocked> loc(#loc17)
      %34 = arith.cmpi slt, %33, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc18)
      %35 = arith.addi %33, %5 : tensor<1x2048xi32, #blocked> loc(#loc6)
      %36 = tt.addptr %6, %35 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc7)
      %37 = arith.andi %34, %7 : tensor<1x2048xi1, #blocked> loc(#loc8)
      %38 = tt.load %36, %37, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc19)
      %39 = tt.addptr %8, %35 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc9)
      %40 = tt.load %39, %37, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc20)
      %41 = tt.addptr %9, %35 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc10)
      %42 = tt.load %41, %37, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc21)
      %43 = tt.addptr %10, %35 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc11)
      %44 = tt.load %43, %37, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc22)
      %45 = tt.addptr %11, %35 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc12)
      %46 = tt.load %45, %37, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc23)
      %47 = tt.addptr %12, %35 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc13)
      %48 = tt.load %47, %37, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc24)
      %49 = tt.addptr %13, %35 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc14)
      %50 = tt.load %49, %37, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc25)
      %51 = tt.addptr %14, %35 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc15)
      %52 = tt.load %51, %37, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc26)
      %53 = arith.mulf %40, %cst_0 : tensor<1x2048xf32, #blocked> loc(#loc27)
      %54 = arith.subf %38, %53 : tensor<1x2048xf32, #blocked> loc(#loc28)
      %55 = arith.mulf %42, %cst_0 : tensor<1x2048xf32, #blocked> loc(#loc29)
      %56 = arith.subf %54, %55 : tensor<1x2048xf32, #blocked> loc(#loc30)
      %57 = arith.mulf %44, %cst_1 : tensor<1x2048xf32, #blocked> loc(#loc31)
      %58 = arith.addf %56, %57 : tensor<1x2048xf32, #blocked> loc(#loc32)
      %59 = arith.mulf %48, %cst_0 : tensor<1x2048xf32, #blocked> loc(#loc33)
      %60 = arith.subf %46, %59 : tensor<1x2048xf32, #blocked> loc(#loc34)
      %61 = arith.mulf %50, %cst_0 : tensor<1x2048xf32, #blocked> loc(#loc35)
      %62 = arith.subf %60, %61 : tensor<1x2048xf32, #blocked> loc(#loc36)
      %63 = arith.mulf %52, %cst_1 : tensor<1x2048xf32, #blocked> loc(#loc37)
      %64 = arith.addf %62, %63 : tensor<1x2048xf32, #blocked> loc(#loc38)
      %65 = arith.mulf %58, %64 : tensor<1x2048xf32, #blocked> loc(#loc39)
      %66 = arith.addf %arg14, %65 : tensor<1x2048xf32, #blocked> loc(#loc40)
      %67 = arith.select %37, %66, %arg14 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc41)
      %68 = arith.mulf %58, %58 : tensor<1x2048xf32, #blocked> loc(#loc42)
      %69 = arith.addf %arg15, %68 : tensor<1x2048xf32, #blocked> loc(#loc43)
      %70 = arith.select %37, %69, %arg15 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc44)
      %71 = arith.mulf %64, %64 : tensor<1x2048xf32, #blocked> loc(#loc45)
      %72 = arith.addf %arg16, %71 : tensor<1x2048xf32, #blocked> loc(#loc46)
      %73 = arith.select %37, %72, %arg16 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc47)
      scf.yield %67, %70, %73 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc48)
    } loc(#loc16)
    %16 = "tt.reduce"(%15#0) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32 loc(callsite(#loc1 at #loc50)), %arg14: f32 loc(callsite(#loc1 at #loc50))):
      %32 = arith.addf %arg13, %arg14 : f32 loc(#loc71)
      tt.reduce.return %32 : f32 loc(#loc64)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc64)
    %17 = triton_gpu.convert_layout %16 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc52)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc52)
    %19 = "tt.reduce"(%15#1) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32 loc(callsite(#loc1 at #loc53)), %arg14: f32 loc(callsite(#loc1 at #loc53))):
      %32 = arith.addf %arg13, %arg14 : f32 loc(#loc72)
      tt.reduce.return %32 : f32 loc(#loc67)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc67)
    %20 = triton_gpu.convert_layout %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc54)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc54)
    %22 = "tt.reduce"(%15#2) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32 loc(callsite(#loc1 at #loc55)), %arg14: f32 loc(callsite(#loc1 at #loc55))):
      %32 = arith.addf %arg13, %arg14 : f32 loc(#loc73)
      tt.reduce.return %32 : f32 loc(#loc69)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc69)
    %23 = triton_gpu.convert_layout %22 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc56)
    %24 = tt.expand_dims %23 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc56)
    %25 = tt.addptr %arg8, %0 : !tt.ptr<f32>, i32 loc(#loc57)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc58)
    %27 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc58)
    tt.store %26, %18, %27 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc58)
    %28 = tt.addptr %arg9, %0 : !tt.ptr<f32>, i32 loc(#loc59)
    %29 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc60)
    tt.store %29, %21, %27 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc60)
    %30 = tt.addptr %arg10, %0 : !tt.ptr<f32>, i32 loc(#loc61)
    %31 = tt.splat %30 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc62)
    tt.store %31, %24, %27 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":22:28)
#loc3 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":24:21)
#loc4 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":25:33)
#loc5 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":34:44)
#loc6 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":34:39)
#loc7 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":34:34)
#loc8 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":34:57)
#loc9 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":35:34)
#loc10 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":36:34)
#loc11 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":37:34)
#loc12 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":38:35)
#loc13 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":39:35)
#loc14 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":40:35)
#loc15 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":41:35)
#loc16 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":30:36)
#loc17 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":31:27)
#loc18 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":32:25)
#loc19 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":34:49)
#loc20 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":35:49)
#loc21 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":36:49)
#loc22 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":37:49)
#loc23 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":38:50)
#loc24 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":39:50)
#loc25 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":40:50)
#loc26 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":41:50)
#loc27 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":43:22)
#loc28 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":44:22)
#loc29 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":45:22)
#loc30 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":46:22)
#loc31 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":48:23)
#loc32 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":49:23)
#loc33 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":50:24)
#loc34 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":51:24)
#loc35 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":52:24)
#loc36 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":53:24)
#loc37 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":54:24)
#loc38 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":55:24)
#loc39 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":56:24)
#loc40 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":58:25)
#loc41 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":59:48)
#loc42 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":60:24)
#loc43 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":62:25)
#loc44 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":63:48)
#loc45 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":64:24)
#loc46 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":66:25)
#loc47 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":67:48)
#loc48 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":67:8)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc52 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":68:30)
#loc54 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":69:30)
#loc56 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":70:30)
#loc57 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":71:25)
#loc58 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":71:37)
#loc59 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":72:25)
#loc60 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":72:37)
#loc61 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":73:25)
#loc62 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":73:37)
#loc63 = loc("inductor_cache/c4/cc4cxnivmqnkcuni2wbcuxq5h6gsvxt3dhyelkngo5rb6fen6wm4.py":73:4)
#loc64 = loc(callsite(#loc49 at #loc50))
#loc66 = loc(callsite(#loc51 at #loc49))
#loc67 = loc(callsite(#loc49 at #loc53))
#loc69 = loc(callsite(#loc49 at #loc55))
#loc71 = loc(callsite(#loc66 at #loc50))
#loc72 = loc(callsite(#loc66 at #loc53))
#loc73 = loc(callsite(#loc66 at #loc55))
