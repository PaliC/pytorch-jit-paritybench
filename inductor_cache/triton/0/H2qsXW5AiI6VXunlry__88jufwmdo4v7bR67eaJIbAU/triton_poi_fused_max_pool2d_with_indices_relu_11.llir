; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 1, !dbg !12
  %10 = and i32 %8, 127, !dbg !12
  %11 = lshr i32 %8, 1, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 64, !dbg !13
  %16 = icmp slt i32 %13, 100, !dbg !14
  %17 = icmp slt i32 %14, 100, !dbg !14
  %18 = icmp slt i32 %15, 100, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 1, !dbg !16
  %21 = or disjoint i32 %20, %9, !dbg !17
  %22 = icmp slt i32 %20, 128, !dbg !18
  %23 = icmp slt i32 %21, 128, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %24 = sdiv i32 %.frozen, 5, !dbg !19
  %25 = mul i32 %24, 5, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %.frozen4 = freeze i32 %14, !dbg !21
  %26 = sdiv i32 %.frozen4, 25, !dbg !21
  %.frozen6 = freeze i32 %15, !dbg !21
  %27 = sdiv i32 %.frozen6, 25, !dbg !21
  %28 = mul i32 %26, 25, !dbg !22
  %.decomposed5 = sub i32 %.frozen4, %28, !dbg !22
  %29 = mul i32 %27, 25, !dbg !22
  %.decomposed7 = sub i32 %.frozen6, %29, !dbg !22
  %30 = shl nsw i32 %.decomposed, 8, !dbg !23
  %31 = add i32 %30, %20, !dbg !24
  %32 = mul i32 %24, 2560, !dbg !25
  %33 = add i32 %31, %32, !dbg !26
  %34 = sext i32 %33 to i64, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !27
  %36 = and i1 %22, %16, !dbg !28
  %37 = and i1 %17, %23, !dbg !28
  %38 = and i1 %18, %23, !dbg !28
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %36) #2, !dbg !29
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !29
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !29
  %42 = add i32 %31, 128, !dbg !30
  %43 = add i32 %42, %32, !dbg !31
  %44 = sext i32 %43 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !32
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %36) #2, !dbg !33
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !33
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !33
  %49 = add i32 %31, 1280, !dbg !34
  %50 = add i32 %49, %32, !dbg !35
  %51 = sext i32 %50 to i64, !dbg !36
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !36
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %36) #2, !dbg !37
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !37
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !37
  %56 = add i32 %31, 1408, !dbg !38
  %57 = add i32 %56, %32, !dbg !39
  %58 = sext i32 %57 to i64, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !40
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %36) #2, !dbg !41
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !41
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !41
  %63 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !29
  %64 = insertelement <2 x i32> %63, i32 %41, i64 1, !dbg !29
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !29
  %66 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !33
  %67 = insertelement <2 x i32> %66, i32 %48, i64 1, !dbg !33
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !33
  %69 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !37
  %70 = insertelement <2 x i32> %69, i32 %55, i64 1, !dbg !37
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !37
  %72 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !41
  %73 = insertelement <2 x i32> %72, i32 %62, i64 1, !dbg !41
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !41
  %75 = fcmp ogt <2 x float> %68, %65, !dbg !42
  %76 = zext <2 x i1> %75 to <2 x i8>, !dbg !43
  %77 = fcmp uno <2 x float> %68, zeroinitializer, !dbg !44
  %78 = or <2 x i1> %75, %77, !dbg !48
  %.v = select <2 x i1> %78, <2 x i32> %67, <2 x i32> %64, !dbg !49
  %79 = bitcast <2 x i32> %.v to <2 x float>, !dbg !49
  %80 = fcmp olt <2 x float> %79, %71, !dbg !50
  %81 = select <2 x i1> %80, <2 x i8> splat (i8 2), <2 x i8> %76, !dbg !51
  %82 = fcmp uno <2 x float> %71, zeroinitializer, !dbg !52
  %83 = or <2 x i1> %82, %80, !dbg !54
  %.v3 = select <2 x i1> %83, <2 x i32> %70, <2 x i32> %.v, !dbg !55
  %84 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !55
  %85 = fcmp olt <2 x float> %84, %74, !dbg !56
  %86 = select <2 x i1> %85, <2 x i8> splat (i8 3), <2 x i8> %81, !dbg !57
  %87 = bitcast i32 %61 to float, !dbg !58
  %88 = fcmp uno float %87, 0.000000e+00, !dbg !58
  %89 = bitcast i32 %62 to float, !dbg !58
  %90 = fcmp uno float %89, 0.000000e+00, !dbg !58
  %91 = extractelement <2 x i1> %85, i64 0, !dbg !60
  %92 = or i1 %88, %91, !dbg !60
  %93 = extractelement <2 x i1> %85, i64 1, !dbg !60
  %94 = or i1 %90, %93, !dbg !60
  %95 = extractelement <2 x float> %84, i64 0, !dbg !61
  %96 = select i1 %92, float %87, float %95, !dbg !61
  %97 = extractelement <2 x float> %84, i64 1, !dbg !61
  %98 = select i1 %94, float %89, float %97, !dbg !61
  %99 = fcmp olt float %96, 0.000000e+00, !dbg !62
  %100 = fcmp olt float %98, 0.000000e+00, !dbg !62
  %101 = select i1 %99, float 0.000000e+00, float %96, !dbg !64
  %102 = select i1 %100, float 0.000000e+00, float %98, !dbg !64
  %103 = shl i32 %13, 7, !dbg !65
  %104 = add i32 %103, %20, !dbg !66
  %105 = sext i32 %104 to i64, !dbg !67
  %106 = getelementptr i8, ptr addrspace(1) %1, i64 %105, !dbg !67
  %107 = bitcast <2 x i8> %86 to i16, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %107, ptr addrspace(1) %106, i1 %36) #2, !dbg !68
  %108 = mul i32 %21, 25, !dbg !69
  %109 = add i32 %108, %.decomposed5, !dbg !70
  %110 = mul i32 %26, 3200, !dbg !71
  %111 = mul i32 %27, 3200, !dbg !71
  %112 = add i32 %109, %110, !dbg !72
  %113 = add i32 %111, %.decomposed7, !dbg !70
  %114 = add i32 %113, %108, !dbg !72
  %115 = sext i32 %112 to i64, !dbg !73
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !73
  %117 = sext i32 %114 to i64, !dbg !73
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !73
  %119 = shl i32 %8, 1, !dbg !74
  %120 = and i32 %119, 254, !dbg !74
  %121 = lshr exact i32 %120, 1, !dbg !74
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !74
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %120, !dbg !74
  %124 = bitcast float %101 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !74
  %125 = or disjoint i32 %120, 1, !dbg !74
  %126 = getelementptr float, ptr addrspace(3) %122, i32 %125, !dbg !74
  %127 = bitcast float %102 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %128 = lshr i32 %10, 1, !dbg !74
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !74
  %130 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %10, !dbg !74
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !74
  %132 = or disjoint i32 %10, 128, !dbg !74
  %133 = lshr i32 %132, 1, !dbg !74
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !74
  %135 = getelementptr inbounds float, ptr addrspace(3) %134, i32 %132, !dbg !74
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %116, i1 %37) #2, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %118, i1 %38) #2, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyrb2epqdgq3emzqbxibuvgtlyureccubdfj5b4j4dkzfgctbisv.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_relu_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 62, scope: !7)
!29 = !DILocation(line: 34, column: 54, scope: !7)
!30 = !DILocation(line: 35, column: 41, scope: !7)
!31 = !DILocation(line: 35, column: 50, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 60, scope: !7)
!34 = !DILocation(line: 36, column: 42, scope: !7)
!35 = !DILocation(line: 36, column: 51, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 61, scope: !7)
!38 = !DILocation(line: 37, column: 43, scope: !7)
!39 = !DILocation(line: 37, column: 52, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 62, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 42, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 43, column: 18, scope: !7)
!51 = !DILocation(line: 45, column: 33, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !53)
!53 = !DILocation(line: 46, column: 41, scope: !7)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !53)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 20, scope: !7)
!57 = !DILocation(line: 49, column: 35, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !59)
!59 = !DILocation(line: 50, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !59)
!61 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !59)
!62 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !63)
!63 = !DILocation(line: 52, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !63)
!65 = !DILocation(line: 53, column: 34, scope: !7)
!66 = !DILocation(line: 53, column: 30, scope: !7)
!67 = !DILocation(line: 53, column: 25, scope: !7)
!68 = !DILocation(line: 53, column: 46, scope: !7)
!69 = !DILocation(line: 54, column: 33, scope: !7)
!70 = !DILocation(line: 54, column: 30, scope: !7)
!71 = !DILocation(line: 54, column: 43, scope: !7)
!72 = !DILocation(line: 54, column: 38, scope: !7)
!73 = !DILocation(line: 54, column: 25, scope: !7)
!74 = !DILocation(line: 54, column: 55, scope: !7)
!75 = !DILocation(line: 54, column: 4, scope: !7)
