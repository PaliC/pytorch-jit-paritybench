; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__log_softmax_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %11 = sdiv i32 %.frozen, 4096, !dbg !14
  %12 = srem i32 %11, 6, !dbg !15
  %13 = mul i32 %11, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = sdiv i32 %10, 8192, !dbg !17
  %15 = srem i32 %14, 3, !dbg !18
  %16 = sext i32 %10 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !20
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !20
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !20
  %21 = bitcast i32 %19 to float, !dbg !20
  %22 = bitcast i32 %20 to float, !dbg !20
  %23 = sext i32 %12 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = shl nsw i32 %14, 13, !dbg !23
  %30 = add i32 %29, %.decomposed, !dbg !24
  %31 = sext i32 %30 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !26
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !26
  %36 = shl nsw i32 %15, 1, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !29
  %41 = add i32 %30, 4096, !dbg !30
  %42 = sext i32 %41 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !31
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !32
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !32
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !32
  %47 = or disjoint i32 %36, 1, !dbg !33
  %48 = sext i32 %47 to i64, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !35
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !35
  %52 = fadd float %21, %26, !dbg !36
  %53 = fadd float %22, %28, !dbg !36
  %54 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !26
  %55 = insertelement <2 x i32> %54, i32 %45, i64 1, !dbg !26
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !26
  %57 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !29
  %58 = insertelement <2 x i32> %57, i32 %50, i64 1, !dbg !29
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !29
  %60 = fadd <2 x float> %56, %59, !dbg !37
  %61 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !26
  %62 = insertelement <2 x i32> %61, i32 %46, i64 1, !dbg !26
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !26
  %64 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !29
  %65 = insertelement <2 x i32> %64, i32 %51, i64 1, !dbg !29
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !29
  %67 = fadd <2 x float> %63, %66, !dbg !37
  %68 = extractelement <2 x float> %60, i64 0, !dbg !38
  %69 = extractelement <2 x float> %60, i64 1, !dbg !38
  %70 = fcmp ogt float %68, %69, !dbg !42
  %71 = extractelement <2 x float> %67, i64 0, !dbg !38
  %72 = extractelement <2 x float> %67, i64 1, !dbg !38
  %73 = fcmp ogt float %71, %72, !dbg !42
  %74 = fcmp uno float %68, 0.000000e+00, !dbg !43
  %75 = fcmp uno float %71, 0.000000e+00, !dbg !43
  %76 = or i1 %74, %70, !dbg !44
  %77 = or i1 %75, %73, !dbg !44
  %78 = select i1 %76, float %68, float %69, !dbg !38
  %79 = select i1 %77, float %71, float %72, !dbg !38
  %80 = fsub float %52, %78, !dbg !45
  %81 = fsub float %53, %79, !dbg !45
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !46
  %83 = bitcast float %80 to i32, !dbg !47
  %84 = bitcast float %81 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %83, i32 %84, ptr addrspace(1) %82, i1 true) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5b2xdcr2wsire7btvrk345j7d4kl2g5jbrchdlljeyygiqz54aq.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused__log_softmax_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__log_softmax_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__log_softmax_0", linkageName: "triton_poi_fused__log_softmax_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 40, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 45, scope: !7)
!27 = !DILocation(line: 32, column: 32, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 37, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 52, scope: !7)
!33 = !DILocation(line: 34, column: 34, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 41, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 38, column: 40, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 39, column: 19, scope: !7)
!46 = !DILocation(line: 40, column: 25, scope: !7)
!47 = !DILocation(line: 40, column: 37, scope: !7)
!48 = !DILocation(line: 40, column: 4, scope: !7)
