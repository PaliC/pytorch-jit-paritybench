; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 8, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 1, !dbg !12
  %23 = and i32 %22, 254, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %25 = sdiv i32 %24, 1024, !dbg !14
  %26 = srem i32 %25, 4, !dbg !15
  %.frozen = freeze i32 %24, !dbg !16
  %27 = sdiv i32 %.frozen, 32, !dbg !16
  %28 = srem i32 %27, 32, !dbg !17
  %29 = mul i32 %27, 32, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = sext i32 %24 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %33 = sext i32 %26 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !27
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !28
  %44 = sext i32 %28 to i64, !dbg !29
  %45 = getelementptr i64, ptr addrspace(1) %5, i64 %44, !dbg !29
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %48 = sext i32 %.decomposed to i64, !dbg !31
  %49 = getelementptr i64, ptr addrspace(1) %5, i64 %48, !dbg !31
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !32
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !33
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %56 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !35
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %11, i64 %33, !dbg !37
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !38
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !38
  %62 = getelementptr float, ptr addrspace(1) %12, i64 %33, !dbg !39
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !40
  %64 = bitcast i32 %63 to float, !dbg !40
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !40
  %66 = bitcast i32 %65 to float, !dbg !40
  %67 = getelementptr float, ptr addrspace(1) %13, i64 %33, !dbg !41
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !42
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !42
  %70 = getelementptr float, ptr addrspace(1) %14, i64 %33, !dbg !43
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !44
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !44
  %73 = lshr i64 %46, 59, !dbg !45
  %74 = and i64 %73, 16, !dbg !45
  %75 = add i64 %74, %46, !dbg !45
  %76 = lshr i64 %51, 59, !dbg !46
  %77 = and i64 %76, 16, !dbg !46
  %78 = lshr i64 %52, 59, !dbg !46
  %79 = and i64 %78, 16, !dbg !46
  %80 = shl i64 %75, 4, !dbg !47
  %81 = shl nsw i32 %25, 8, !dbg !48
  %82 = sext i32 %81 to i64, !dbg !49
  %83 = add i64 %80, %82, !dbg !46
  %84 = add i64 %83, %51, !dbg !50
  %85 = add i64 %84, %77, !dbg !49
  %86 = add i64 %83, %52, !dbg !50
  %87 = add i64 %86, %79, !dbg !49
  %88 = getelementptr float, ptr addrspace(1) %6, i64 %85, !dbg !51
  %89 = getelementptr float, ptr addrspace(1) %6, i64 %87, !dbg !51
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !52
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !52
  %92 = getelementptr float, ptr addrspace(1) %8, i64 %85, !dbg !53
  %93 = getelementptr float, ptr addrspace(1) %8, i64 %87, !dbg !53
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !54
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !54
  %96 = getelementptr float, ptr addrspace(1) %10, i64 %85, !dbg !55
  %97 = getelementptr float, ptr addrspace(1) %10, i64 %87, !dbg !55
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !56
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !56
  %100 = fadd float %64, 0x3EE4F8B580000000, !dbg !57
  %101 = fadd float %66, 0x3EE4F8B580000000, !dbg !57
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i = icmp eq i32 %102, 0, !dbg !58
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i = icmp eq i32 %103, 0, !dbg !58
  br i1 %.not.i, label %109, label %104, !dbg !58

104:                                              ; preds = %18
  br i1 %.not1.i, label %107, label %105, !dbg !58

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

109:                                              ; preds = %18
  br i1 %.not1.i, label %112, label %110, !dbg !58

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %105, %107, %110, %112
  %.0.i = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !58
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i1 = icmp eq i32 %114, 0, !dbg !58
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i4 = icmp eq i32 %115, 0, !dbg !58
  br i1 %.not.i1, label %121, label %116, !dbg !58

116:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %119, label %117, !dbg !58

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

121:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %124, label %122, !dbg !58

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

__nv_sqrtf.exit5:                                 ; preds = %117, %119, %122, %124
  %.0.i3 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !58
  %126 = extractvalue { i32, i32 } %32, 1, !dbg !20
  %127 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !22
  %128 = insertelement <2 x i32> %127, i32 %91, i64 1, !dbg !22
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !22
  %130 = extractvalue { i32, i32 } %38, 1, !dbg !24
  %131 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !26
  %132 = insertelement <2 x i32> %131, i32 %95, i64 1, !dbg !26
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !26
  %134 = extractvalue { i32, i32 } %43, 1, !dbg !28
  %135 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !20
  %136 = insertelement <2 x i32> %135, i32 %55, i64 1, !dbg !20
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !20
  %138 = fadd <2 x float> %137, %129, !dbg !59
  %139 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !24
  %140 = insertelement <2 x i32> %139, i32 %58, i64 1, !dbg !24
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !24
  %142 = fadd <2 x float> %141, %133, !dbg !60
  %143 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !28
  %144 = insertelement <2 x i32> %143, i32 %99, i64 1, !dbg !28
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !28
  %146 = fadd <2 x float> %142, %145, !dbg !61
  %147 = fadd <2 x float> %138, %146, !dbg !62
  %shift = shufflevector <2 x float> %147, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %148 = fadd <2 x float> %147, %shift, !dbg !63
  %149 = extractelement <2 x float> %148, i64 0, !dbg !63
  %150 = bitcast i32 %61 to float, !dbg !38
  %151 = fsub float %149, %150, !dbg !64
  %152 = extractvalue { i32, i32 } %32, 0, !dbg !20
  %153 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !22
  %154 = insertelement <2 x i32> %153, i32 %90, i64 1, !dbg !22
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !22
  %156 = extractvalue { i32, i32 } %38, 0, !dbg !24
  %157 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !26
  %158 = insertelement <2 x i32> %157, i32 %94, i64 1, !dbg !26
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !26
  %160 = extractvalue { i32, i32 } %43, 0, !dbg !28
  %161 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !20
  %162 = insertelement <2 x i32> %161, i32 %54, i64 1, !dbg !20
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !20
  %164 = fadd <2 x float> %163, %155, !dbg !59
  %165 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !24
  %166 = insertelement <2 x i32> %165, i32 %57, i64 1, !dbg !24
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !24
  %168 = fadd <2 x float> %167, %159, !dbg !60
  %169 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !28
  %170 = insertelement <2 x i32> %169, i32 %98, i64 1, !dbg !28
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !28
  %172 = fadd <2 x float> %168, %171, !dbg !61
  %173 = fadd <2 x float> %164, %172, !dbg !62
  %shift6 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %174 = fadd <2 x float> %173, %shift6, !dbg !63
  %175 = extractelement <2 x float> %174, i64 0, !dbg !63
  %176 = bitcast i32 %60 to float, !dbg !38
  %177 = fsub float %175, %176, !dbg !64
  %178 = bitcast i32 %72 to float, !dbg !44
  %179 = bitcast i32 %71 to float, !dbg !44
  %180 = bitcast i32 %69 to float, !dbg !42
  %181 = bitcast i32 %68 to float, !dbg !42
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !65
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !65
  %184 = fmul float %177, %182, !dbg !66
  %185 = fmul float %151, %183, !dbg !66
  %186 = fmul float %184, %181, !dbg !67
  %187 = fmul float %185, %180, !dbg !67
  %188 = fadd float %186, %179, !dbg !68
  %189 = fadd float %187, %178, !dbg !68
  %190 = fcmp olt float %188, 0.000000e+00, !dbg !69
  %191 = fcmp olt float %189, 0.000000e+00, !dbg !69
  %192 = select i1 %190, float 0.000000e+00, float %188, !dbg !73
  %193 = select i1 %191, float 0.000000e+00, float %189, !dbg !73
  %194 = bitcast float %175 to i32, !dbg !74
  %195 = bitcast float %149 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %194, i32 %195, ptr addrspace(1) %31, i1 true) #3, !dbg !74
  %196 = getelementptr float, ptr addrspace(1) %15, i64 %30, !dbg !75
  %197 = bitcast float %192 to i32, !dbg !76
  %198 = bitcast float %193 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %197, i32 %198, ptr addrspace(1) %196, i1 true) #3, !dbg !76
  %199 = getelementptr float, ptr addrspace(1) %16, i64 %30, !dbg !77
  %200 = bitcast float %177 to i32, !dbg !78
  %201 = bitcast float %151 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %200, i32 %201, ptr addrspace(1) %199, i1 true) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn3cwelu4vtaoz33gbznqkcdtdb5hogmqvktkecehr5m67p53qy7.py", directory: "inductor_cache/n3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_39, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_39", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 49, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 42, scope: !7)
!48 = !DILocation(line: 53, column: 54, scope: !7)
!49 = !DILocation(line: 53, column: 50, scope: !7)
!50 = !DILocation(line: 53, column: 39, scope: !7)
!51 = !DILocation(line: 53, column: 31, scope: !7)
!52 = !DILocation(line: 53, column: 59, scope: !7)
!53 = !DILocation(line: 55, column: 31, scope: !7)
!54 = !DILocation(line: 55, column: 59, scope: !7)
!55 = !DILocation(line: 57, column: 31, scope: !7)
!56 = !DILocation(line: 57, column: 59, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 27, scope: !7)
!59 = !DILocation(line: 42, column: 18, scope: !7)
!60 = !DILocation(line: 43, column: 18, scope: !7)
!61 = !DILocation(line: 44, column: 18, scope: !7)
!62 = !DILocation(line: 45, column: 18, scope: !7)
!63 = !DILocation(line: 60, column: 19, scope: !7)
!64 = !DILocation(line: 61, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 20, scope: !7)
!68 = !DILocation(line: 71, column: 20, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 73, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 74, column: 40, scope: !7)
!75 = !DILocation(line: 75, column: 25, scope: !7)
!76 = !DILocation(line: 75, column: 37, scope: !7)
!77 = !DILocation(line: 76, column: 25, scope: !7)
!78 = !DILocation(line: 76, column: 37, scope: !7)
!79 = !DILocation(line: 76, column: 4, scope: !7)
