; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_69(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 4224, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %23 = icmp slt i32 %22, 4, !dbg !16
  %.frozen = freeze i32 %20, !dbg !17
  %24 = sdiv i32 %.frozen, 1056, !dbg !17
  %25 = mul i32 %24, 1056, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = icmp slt i32 %.decomposed, 176, !dbg !19
  %27 = mul i32 %22, 176, !dbg !20
  %28 = mul nsw i32 %24, 704, !dbg !21
  %29 = add i32 %28, %27, !dbg !22
  %30 = add i32 %29, %.decomposed, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = and i1 %23, %26, !dbg !25
  %34 = and i1 %21, %33, !dbg !26
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !27
  %36 = add nsw i32 %.decomposed, -176, !dbg !28
  %37 = icmp ult i32 %36, 176, !dbg !28
  %38 = add i32 %29, %36, !dbg !29
  %39 = sext i32 %38 to i64, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !30
  %41 = and i1 %23, %37, !dbg !31
  %42 = and i1 %21, %41, !dbg !32
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !33
  %44 = add nsw i32 %.decomposed, -352, !dbg !34
  %45 = icmp ult i32 %44, 176, !dbg !34
  %46 = add i32 %29, %44, !dbg !35
  %47 = sext i32 %46 to i64, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !36
  %49 = and i1 %23, %45, !dbg !37
  %50 = and i1 %21, %49, !dbg !38
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !39
  %52 = add nsw i32 %.decomposed, -528, !dbg !40
  %53 = icmp ult i32 %52, 176, !dbg !40
  %54 = add i32 %29, %52, !dbg !41
  %55 = sext i32 %54 to i64, !dbg !42
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !42
  %57 = and i1 %23, %53, !dbg !43
  %58 = and i1 %21, %57, !dbg !44
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #3, !dbg !45
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !46
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #3, !dbg !47
  %62 = add nsw i32 %.decomposed, -704, !dbg !48
  %63 = icmp ult i32 %62, 176, !dbg !48
  %64 = add i32 %29, %62, !dbg !49
  %65 = sext i32 %64 to i64, !dbg !50
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !50
  %67 = and i1 %23, %63, !dbg !51
  %68 = and i1 %21, %67, !dbg !52
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !53
  %70 = icmp sgt i32 %.decomposed, 879, !dbg !54
  %71 = add nsw i32 %.decomposed, -880, !dbg !55
  %72 = add i32 %29, %71, !dbg !56
  %73 = sext i32 %72 to i64, !dbg !57
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !57
  %75 = and i1 %23, %70, !dbg !58
  %76 = and i1 %21, %75, !dbg !59
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !60
  %78 = sext i32 %71 to i64, !dbg !61
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %78, !dbg !61
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !62
  %81 = getelementptr float, ptr addrspace(1) %7, i64 %78, !dbg !63
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !64
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !64
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !64
  %85 = bitcast i32 %83 to float, !dbg !64
  %86 = bitcast i32 %84 to float, !dbg !64
  %87 = fadd float %85, 0x3F50624DE0000000, !dbg !65
  %88 = fadd float %86, 0x3F50624DE0000000, !dbg !65
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i = icmp eq i32 %89, 0, !dbg !66
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i = icmp eq i32 %90, 0, !dbg !66
  br i1 %.not.i, label %96, label %91, !dbg !66

91:                                               ; preds = %14
  br i1 %.not1.i, label %94, label %92, !dbg !66

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

96:                                               ; preds = %14
  br i1 %.not1.i, label %99, label %97, !dbg !66

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

__nv_sqrtf.exit:                                  ; preds = %92, %94, %97, %99
  %.0.i = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !66
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i1 = icmp eq i32 %101, 0, !dbg !66
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i4 = icmp eq i32 %102, 0, !dbg !66
  br i1 %.not.i1, label %108, label %103, !dbg !66

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !66

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %111, label %109, !dbg !66

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

__nv_sqrtf.exit5:                                 ; preds = %104, %106, %109, %111
  %.0.i3 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !66
  %113 = extractvalue { i32, i32 } %77, 1, !dbg !60
  %114 = bitcast i32 %113 to float, !dbg !60
  %115 = extractvalue { i32, i32 } %80, 1, !dbg !62
  %116 = bitcast i32 %115 to float, !dbg !62
  %117 = fsub float %114, %116, !dbg !67
  %118 = extractvalue { i32, i32 } %77, 0, !dbg !60
  %119 = bitcast i32 %118 to float, !dbg !60
  %120 = extractvalue { i32, i32 } %80, 0, !dbg !62
  %121 = bitcast i32 %120 to float, !dbg !62
  %122 = fsub float %119, %121, !dbg !67
  %123 = extractvalue { i32, i32 } %69, 1, !dbg !53
  %124 = bitcast i32 %123 to float, !dbg !53
  %125 = fadd float %124, %124, !dbg !68
  %126 = extractvalue { i32, i32 } %69, 0, !dbg !53
  %127 = bitcast i32 %126 to float, !dbg !53
  %128 = fadd float %127, %127, !dbg !68
  %129 = extractvalue { i32, i32 } %59, 1, !dbg !45
  %130 = bitcast i32 %129 to float, !dbg !45
  %131 = extractvalue { i32, i32 } %61, 1, !dbg !47
  %132 = bitcast i32 %131 to float, !dbg !47
  %133 = fadd float %130, %132, !dbg !69
  %134 = extractvalue { i32, i32 } %59, 0, !dbg !45
  %135 = bitcast i32 %134 to float, !dbg !45
  %136 = extractvalue { i32, i32 } %61, 0, !dbg !47
  %137 = bitcast i32 %136 to float, !dbg !47
  %138 = fadd float %135, %137, !dbg !69
  %139 = extractvalue { i32, i32 } %51, 1, !dbg !39
  %140 = bitcast i32 %139 to float, !dbg !39
  %141 = extractvalue { i32, i32 } %51, 0, !dbg !39
  %142 = bitcast i32 %141 to float, !dbg !39
  %143 = extractvalue { i32, i32 } %43, 1, !dbg !33
  %144 = bitcast i32 %143 to float, !dbg !33
  %145 = extractvalue { i32, i32 } %43, 0, !dbg !33
  %146 = bitcast i32 %145 to float, !dbg !33
  %147 = extractvalue { i32, i32 } %35, 1, !dbg !27
  %148 = bitcast i32 %147 to float, !dbg !27
  %149 = extractvalue { i32, i32 } %35, 0, !dbg !27
  %150 = bitcast i32 %149 to float, !dbg !27
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !70
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !70
  %153 = fmul float %122, %151, !dbg !71
  %154 = fmul float %117, %152, !dbg !71
  %155 = getelementptr float, ptr addrspace(1) %8, i64 %78, !dbg !72
  %156 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %155, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !73
  %157 = extractvalue { i32, i32 } %156, 0, !dbg !73
  %158 = extractvalue { i32, i32 } %156, 1, !dbg !73
  %159 = bitcast i32 %157 to float, !dbg !73
  %160 = bitcast i32 %158 to float, !dbg !73
  %161 = fmul float %153, %159, !dbg !74
  %162 = fmul float %154, %160, !dbg !74
  %163 = getelementptr float, ptr addrspace(1) %9, i64 %78, !dbg !75
  %164 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %163, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !76
  %165 = extractvalue { i32, i32 } %164, 0, !dbg !76
  %166 = extractvalue { i32, i32 } %164, 1, !dbg !76
  %167 = bitcast i32 %165 to float, !dbg !76
  %168 = bitcast i32 %166 to float, !dbg !76
  %169 = fadd float %161, %167, !dbg !77
  %170 = fadd float %162, %168, !dbg !77
  %171 = getelementptr float, ptr addrspace(1) %10, i64 %73, !dbg !78
  %172 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %171, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !79
  %173 = extractvalue { i32, i32 } %172, 0, !dbg !79
  %174 = extractvalue { i32, i32 } %172, 1, !dbg !79
  %175 = bitcast i32 %173 to float, !dbg !79
  %176 = bitcast i32 %174 to float, !dbg !79
  %177 = fadd float %169, %175, !dbg !80
  %178 = fadd float %170, %176, !dbg !80
  %179 = select i1 %70, float %177, float 0.000000e+00, !dbg !81
  %180 = select i1 %70, float %178, float 0.000000e+00, !dbg !81
  %181 = select i1 %63, float %128, float %179, !dbg !82
  %182 = select i1 %63, float %125, float %180, !dbg !82
  %183 = select i1 %53, float %138, float %181, !dbg !82
  %184 = select i1 %53, float %133, float %182, !dbg !82
  %185 = select i1 %45, float %142, float %183, !dbg !83
  %186 = select i1 %45, float %140, float %184, !dbg !83
  %187 = select i1 %37, float %146, float %185, !dbg !84
  %188 = select i1 %37, float %144, float %186, !dbg !84
  %189 = select i1 %26, float %150, float %187, !dbg !85
  %190 = select i1 %26, float %148, float %188, !dbg !85
  %191 = fcmp olt float %189, 0.000000e+00, !dbg !86
  %192 = fcmp olt float %190, 0.000000e+00, !dbg !86
  %193 = select i1 %191, float 0.000000e+00, float %189, !dbg !90
  %194 = select i1 %192, float 0.000000e+00, float %190, !dbg !90
  %195 = mul i32 %22, 1056, !dbg !91
  %196 = add i32 %.decomposed, %195, !dbg !92
  %197 = mul i32 %24, 4224, !dbg !93
  %198 = add i32 %196, %197, !dbg !94
  %199 = sext i32 %198 to i64, !dbg !95
  %200 = getelementptr float, ptr addrspace(1) %11, i64 %199, !dbg !95
  %201 = and i1 %23, %21, !dbg !96
  %202 = bitcast float %193 to i32, !dbg !97
  %203 = bitcast float %194 to i32, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %202, i32 %203, ptr addrspace(1) %200, i1 %201) #3, !dbg !97
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgizacpeirqiao7npwqaacsndnktyubhe7wmkisi5bzquxqg43hk.py", directory: "inductor_cache/gi")
!4 = !{ptr @triton_poi_fused_cat_relu_69, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_69, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_69", linkageName: "triton_poi_fused_cat_relu_69", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 36, column: 18, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 39, scope: !7)
!23 = !DILocation(line: 37, column: 49, scope: !7)
!24 = !DILocation(line: 37, column: 30, scope: !7)
!25 = !DILocation(line: 37, column: 62, scope: !7)
!26 = !DILocation(line: 37, column: 70, scope: !7)
!27 = !DILocation(line: 37, column: 55, scope: !7)
!28 = !DILocation(line: 41, column: 18, scope: !7)
!29 = !DILocation(line: 42, column: 50, scope: !7)
!30 = !DILocation(line: 42, column: 31, scope: !7)
!31 = !DILocation(line: 42, column: 72, scope: !7)
!32 = !DILocation(line: 42, column: 80, scope: !7)
!33 = !DILocation(line: 42, column: 65, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 50, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 73, scope: !7)
!38 = !DILocation(line: 47, column: 81, scope: !7)
!39 = !DILocation(line: 47, column: 65, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 50, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 73, scope: !7)
!44 = !DILocation(line: 52, column: 81, scope: !7)
!45 = !DILocation(line: 52, column: 65, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 65, scope: !7)
!48 = !DILocation(line: 60, column: 20, scope: !7)
!49 = !DILocation(line: 61, column: 50, scope: !7)
!50 = !DILocation(line: 61, column: 31, scope: !7)
!51 = !DILocation(line: 61, column: 73, scope: !7)
!52 = !DILocation(line: 61, column: 81, scope: !7)
!53 = !DILocation(line: 61, column: 65, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 68, column: 59, scope: !7)
!56 = !DILocation(line: 68, column: 50, scope: !7)
!57 = !DILocation(line: 68, column: 31, scope: !7)
!58 = !DILocation(line: 68, column: 73, scope: !7)
!59 = !DILocation(line: 68, column: 81, scope: !7)
!60 = !DILocation(line: 68, column: 65, scope: !7)
!61 = !DILocation(line: 69, column: 31, scope: !7)
!62 = !DILocation(line: 69, column: 80, scope: !7)
!63 = !DILocation(line: 71, column: 31, scope: !7)
!64 = !DILocation(line: 71, column: 80, scope: !7)
!65 = !DILocation(line: 73, column: 20, scope: !7)
!66 = !DILocation(line: 74, column: 27, scope: !7)
!67 = !DILocation(line: 70, column: 20, scope: !7)
!68 = !DILocation(line: 62, column: 20, scope: !7)
!69 = !DILocation(line: 54, column: 20, scope: !7)
!70 = !DILocation(line: 76, column: 20, scope: !7)
!71 = !DILocation(line: 79, column: 20, scope: !7)
!72 = !DILocation(line: 80, column: 31, scope: !7)
!73 = !DILocation(line: 80, column: 80, scope: !7)
!74 = !DILocation(line: 81, column: 20, scope: !7)
!75 = !DILocation(line: 82, column: 31, scope: !7)
!76 = !DILocation(line: 82, column: 80, scope: !7)
!77 = !DILocation(line: 83, column: 20, scope: !7)
!78 = !DILocation(line: 84, column: 32, scope: !7)
!79 = !DILocation(line: 84, column: 66, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 87, column: 35, scope: !7)
!82 = !DILocation(line: 0, scope: !7)
!83 = !DILocation(line: 90, column: 35, scope: !7)
!84 = !DILocation(line: 91, column: 34, scope: !7)
!85 = !DILocation(line: 92, column: 33, scope: !7)
!86 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !89)
!87 = distinct !DILexicalBlockFile(scope: !7, file: !88, discriminator: 0)
!88 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!89 = !DILocation(line: 94, column: 42, scope: !7)
!90 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !89)
!91 = !DILocation(line: 95, column: 35, scope: !7)
!92 = !DILocation(line: 95, column: 30, scope: !7)
!93 = !DILocation(line: 95, column: 45, scope: !7)
!94 = !DILocation(line: 95, column: 40, scope: !7)
!95 = !DILocation(line: 95, column: 25, scope: !7)
!96 = !DILocation(line: 95, column: 65, scope: !7)
!97 = !DILocation(line: 95, column: 57, scope: !7)
!98 = !DILocation(line: 95, column: 4, scope: !7)
