; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_linalg_vector_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = icmp slt i32 %5, 16, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.frozen = freeze i32 %5, !dbg !13
  %8 = sdiv i32 %.frozen, 4, !dbg !13
  %9 = mul i32 %8, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %9, !dbg !14
  %10 = shl i32 %7, 2, !dbg !15
  %11 = and i32 %10, 60, !dbg !15
  %12 = add nsw i32 %.decomposed, %11, !dbg !16
  %13 = shl i32 %8, 6, !dbg !17
  %14 = add i32 %12, %13, !dbg !18
  %15 = sext i32 %14 to i64, !dbg !19
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !19
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %6, i32 0, i1 %6) #2, !dbg !20
  %18 = bitcast i32 %17 to float, !dbg !20
  %19 = tail call float @llvm.fabs.f32(float %18), !dbg !21
  %20 = select i1 %6, float %19, float 0.000000e+00, !dbg !22
  %21 = bitcast float %20 to i32, !dbg !23
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 8, i32 31), !dbg !23
  %23 = bitcast i32 %22 to float, !dbg !23
  %24 = fadd float %20, %23, !dbg !27
  %25 = bitcast float %24 to i32, !dbg !23
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 4, i32 31), !dbg !23
  %27 = bitcast i32 %26 to float, !dbg !23
  %28 = fadd float %24, %27, !dbg !27
  %29 = bitcast float %28 to i32, !dbg !23
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 2, i32 31), !dbg !23
  %31 = bitcast i32 %30 to float, !dbg !23
  %32 = fadd float %28, %31, !dbg !27
  %33 = bitcast float %32 to i32, !dbg !23
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 1, i32 31), !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = fadd float %32, %35, !dbg !27
  %37 = sext i32 %5 to i64, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !29
  %39 = and i32 %7, 63, !dbg !30
  %40 = icmp eq i32 %39, 0, !dbg !30
  %41 = bitcast float %36 to i32, !dbg !30
  %42 = and i1 %40, %6, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %41, ptr addrspace(1) %38, i1 %42) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py", directory: "inductor_cache/cg")
!4 = !{ptr @triton_per_fused_linalg_vector_norm_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_linalg_vector_norm_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_linalg_vector_norm_3", linkageName: "triton_per_fused_linalg_vector_norm_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 37, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 45, scope: !7)
!18 = !DILocation(line: 33, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 50, scope: !7)
!21 = !DILocation(line: 34, column: 23, scope: !7)
!22 = !DILocation(line: 36, column: 33, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 37, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 38, column: 25, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 4, scope: !7)
