; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_38(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = add i32 %9, -5376, !dbg !14
  %12 = add i32 %9, -4864, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = add i32 %9, -4608, !dbg !16
  %18 = add i32 %9, -4096, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = add i32 %9, -3840, !dbg !18
  %24 = add i32 %9, -3328, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = add i32 %9, -768, !dbg !20
  %30 = add i32 %9, -256, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = sext i32 %9 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %10 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = add i32 %9, 768, !dbg !23
  %40 = add i32 %9, 1280, !dbg !23
  %41 = sext i32 %39 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %40 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = add i32 %9, 3840, !dbg !25
  %46 = add i32 %9, 4352, !dbg !25
  %47 = sext i32 %45 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %46 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = add i32 %9, 4608, !dbg !27
  %52 = add i32 %9, 5120, !dbg !27
  %53 = sext i32 %51 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %52 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = add i32 %9, 5376, !dbg !29
  %58 = add i32 %9, 5888, !dbg !29
  %59 = sext i32 %57 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !30
  %61 = sext i32 %58 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !30
  %63 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !31
  %64 = shufflevector <2 x i32> %63, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %65 = sdiv <2 x i32> %64, <i32 768, i32 4608>, !dbg !31
  %66 = srem <2 x i32> %65, splat (i32 6), !dbg !32
  %67 = extractelement <2 x i32> %66, i64 1, !dbg !33
  %68 = icmp sgt i32 %67, 0, !dbg !34
  %69 = extractelement <2 x i32> %66, i64 0, !dbg !33
  %70 = icmp sgt i32 %69, 0, !dbg !35
  %71 = and i1 %68, %70, !dbg !36
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !37
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !37
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !37
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !37
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !37
  %77 = bitcast i32 %73 to float, !dbg !37
  %78 = bitcast i32 %74 to float, !dbg !37
  %79 = bitcast i32 %75 to float, !dbg !37
  %80 = bitcast i32 %76 to float, !dbg !37
  %81 = icmp sgt i32 %69, -1, !dbg !38
  %82 = and i1 %68, %81, !dbg !39
  %83 = icmp sgt i32 %67, -1, !dbg !40
  %84 = and i1 %83, %70, !dbg !41
  %85 = or i32 %67, %69, !dbg !42
  %86 = icmp sgt i32 %85, -1, !dbg !42
  %87 = mul nsw i32 %69, %67, !dbg !43
  %88 = add nsw <2 x i32> %66, splat (i32 2), !dbg !44
  %89 = icmp sgt <2 x i32> %66, splat (i32 4), !dbg !45
  %90 = select <2 x i1> %89, <2 x i32> splat (i32 7), <2 x i32> zeroinitializer, !dbg !46
  %91 = icmp slt <2 x i32> %66, splat (i32 5), !dbg !47
  %92 = select <2 x i1> %91, <2 x i32> %88, <2 x i32> zeroinitializer, !dbg !48
  %93 = add nsw <2 x i32> %90, %92, !dbg !49
  %94 = extractelement <2 x i32> %93, i64 0, !dbg !50
  %95 = extractelement <2 x i32> %93, i64 1, !dbg !51
  %96 = mul nsw i32 %94, %95, !dbg !52
  %97 = shufflevector <2 x i32> %66, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !51
  %98 = mul nsw <2 x i32> %93, %97, !dbg !51
  %99 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !31
  %100 = shufflevector <2 x i32> %99, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %101 = sdiv <2 x i32> %100, <i32 768, i32 4608>, !dbg !31
  %102 = srem <2 x i32> %101, splat (i32 6), !dbg !32
  %103 = extractelement <2 x i32> %102, i64 1, !dbg !33
  %104 = icmp sgt i32 %103, 0, !dbg !34
  %105 = extractelement <2 x i32> %102, i64 0, !dbg !33
  %106 = icmp sgt i32 %105, 0, !dbg !35
  %107 = and i1 %104, %106, !dbg !36
  %108 = icmp sgt i32 %105, -1, !dbg !38
  %109 = and i1 %104, %108, !dbg !39
  %110 = icmp sgt i32 %103, -1, !dbg !40
  %111 = and i1 %110, %106, !dbg !41
  %112 = or i32 %103, %105, !dbg !42
  %113 = icmp sgt i32 %112, -1, !dbg !42
  %114 = shufflevector <2 x i32> %102, <2 x i32> %66, <4 x i32> <i32 1, i32 3, i32 0, i32 2>, !dbg !53
  %115 = add nsw <4 x i32> %114, splat (i32 1), !dbg !53
  %116 = icmp ult <4 x i32> %115, splat (i32 6), !dbg !53
  %117 = extractelement <4 x i1> %116, i64 3, !dbg !54
  %118 = and i1 %68, %117, !dbg !54
  %119 = and i1 %83, %117, !dbg !55
  %120 = extractelement <4 x i1> %116, i64 1, !dbg !56
  %121 = and i1 %70, %120, !dbg !56
  %122 = and i1 %81, %120, !dbg !57
  %123 = and i1 %120, %117, !dbg !58
  %124 = extractelement <4 x i1> %116, i64 2, !dbg !54
  %125 = and i1 %104, %124, !dbg !54
  %126 = and i1 %110, %124, !dbg !55
  %127 = extractelement <4 x i1> %116, i64 0, !dbg !56
  %128 = and i1 %106, %127, !dbg !56
  %129 = and i1 %108, %127, !dbg !57
  %130 = and i1 %127, %124, !dbg !58
  %131 = mul nsw i32 %105, %103, !dbg !43
  %132 = add nsw <2 x i32> %102, splat (i32 2), !dbg !44
  %133 = icmp sgt <2 x i32> %102, splat (i32 4), !dbg !45
  %134 = select <2 x i1> %133, <2 x i32> splat (i32 7), <2 x i32> zeroinitializer, !dbg !46
  %135 = icmp slt <2 x i32> %102, splat (i32 5), !dbg !47
  %136 = select <2 x i1> %135, <2 x i32> %132, <2 x i32> zeroinitializer, !dbg !48
  %137 = add nsw <2 x i32> %134, %136, !dbg !49
  %138 = extractelement <2 x i32> %137, i64 0, !dbg !50
  %139 = extractelement <2 x i32> %137, i64 1, !dbg !51
  %140 = mul nsw i32 %138, %139, !dbg !52
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #1, !dbg !37
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !37
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !37
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !37
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !37
  %146 = bitcast i32 %142 to float, !dbg !37
  %147 = bitcast i32 %143 to float, !dbg !37
  %148 = bitcast i32 %144 to float, !dbg !37
  %149 = bitcast i32 %145 to float, !dbg !37
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !59
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !59
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !59
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !59
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !59
  %155 = bitcast i32 %151 to float, !dbg !59
  %156 = bitcast i32 %152 to float, !dbg !59
  %157 = bitcast i32 %153 to float, !dbg !59
  %158 = bitcast i32 %154 to float, !dbg !59
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #1, !dbg !59
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !59
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !59
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !59
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !59
  %164 = bitcast i32 %160 to float, !dbg !59
  %165 = bitcast i32 %161 to float, !dbg !59
  %166 = bitcast i32 %162 to float, !dbg !59
  %167 = bitcast i32 %163 to float, !dbg !59
  %168 = fadd float %77, %155, !dbg !60
  %169 = fadd float %78, %156, !dbg !60
  %170 = fadd float %79, %157, !dbg !60
  %171 = fadd float %80, %158, !dbg !60
  %172 = fadd float %146, %164, !dbg !60
  %173 = fadd float %147, %165, !dbg !60
  %174 = fadd float %148, %166, !dbg !60
  %175 = fadd float %149, %167, !dbg !60
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #1, !dbg !61
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !61
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !61
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !61
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !61
  %181 = bitcast i32 %177 to float, !dbg !61
  %182 = bitcast i32 %178 to float, !dbg !61
  %183 = bitcast i32 %179 to float, !dbg !61
  %184 = bitcast i32 %180 to float, !dbg !61
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125) #1, !dbg !61
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !61
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !61
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !61
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !61
  %190 = bitcast i32 %186 to float, !dbg !61
  %191 = bitcast i32 %187 to float, !dbg !61
  %192 = bitcast i32 %188 to float, !dbg !61
  %193 = bitcast i32 %189 to float, !dbg !61
  %194 = fadd float %168, %181, !dbg !62
  %195 = fadd float %169, %182, !dbg !62
  %196 = fadd float %170, %183, !dbg !62
  %197 = fadd float %171, %184, !dbg !62
  %198 = fadd float %172, %190, !dbg !62
  %199 = fadd float %173, %191, !dbg !62
  %200 = fadd float %174, %192, !dbg !62
  %201 = fadd float %175, %193, !dbg !62
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #1, !dbg !63
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !63
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !63
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !63
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !63
  %207 = bitcast i32 %203 to float, !dbg !63
  %208 = bitcast i32 %204 to float, !dbg !63
  %209 = bitcast i32 %205 to float, !dbg !63
  %210 = bitcast i32 %206 to float, !dbg !63
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #1, !dbg !63
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !63
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !63
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !63
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !63
  %216 = bitcast i32 %212 to float, !dbg !63
  %217 = bitcast i32 %213 to float, !dbg !63
  %218 = bitcast i32 %214 to float, !dbg !63
  %219 = bitcast i32 %215 to float, !dbg !63
  %220 = fadd float %194, %207, !dbg !64
  %221 = fadd float %195, %208, !dbg !64
  %222 = fadd float %196, %209, !dbg !64
  %223 = fadd float %197, %210, !dbg !64
  %224 = fadd float %198, %216, !dbg !64
  %225 = fadd float %199, %217, !dbg !64
  %226 = fadd float %200, %218, !dbg !64
  %227 = fadd float %201, %219, !dbg !64
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !65
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !65
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !65
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !65
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !65
  %233 = bitcast i32 %229 to float, !dbg !65
  %234 = bitcast i32 %230 to float, !dbg !65
  %235 = bitcast i32 %231 to float, !dbg !65
  %236 = bitcast i32 %232 to float, !dbg !65
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113) #1, !dbg !65
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !65
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !65
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !65
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !65
  %242 = bitcast i32 %238 to float, !dbg !65
  %243 = bitcast i32 %239 to float, !dbg !65
  %244 = bitcast i32 %240 to float, !dbg !65
  %245 = bitcast i32 %241 to float, !dbg !65
  %246 = fadd float %220, %233, !dbg !66
  %247 = fadd float %221, %234, !dbg !66
  %248 = fadd float %222, %235, !dbg !66
  %249 = fadd float %223, %236, !dbg !66
  %250 = fadd float %224, %242, !dbg !66
  %251 = fadd float %225, %243, !dbg !66
  %252 = fadd float %226, %244, !dbg !66
  %253 = fadd float %227, %245, !dbg !66
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #1, !dbg !67
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !67
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !67
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !67
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !67
  %259 = bitcast i32 %255 to float, !dbg !67
  %260 = bitcast i32 %256 to float, !dbg !67
  %261 = bitcast i32 %257 to float, !dbg !67
  %262 = bitcast i32 %258 to float, !dbg !67
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #1, !dbg !67
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !67
  %265 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !67
  %266 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !67
  %267 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !67
  %268 = bitcast i32 %264 to float, !dbg !67
  %269 = bitcast i32 %265 to float, !dbg !67
  %270 = bitcast i32 %266 to float, !dbg !67
  %271 = bitcast i32 %267 to float, !dbg !67
  %272 = fadd float %246, %259, !dbg !68
  %273 = fadd float %247, %260, !dbg !68
  %274 = fadd float %248, %261, !dbg !68
  %275 = fadd float %249, %262, !dbg !68
  %276 = fadd float %250, %268, !dbg !68
  %277 = fadd float %251, %269, !dbg !68
  %278 = fadd float %252, %270, !dbg !68
  %279 = fadd float %253, %271, !dbg !68
  %280 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #1, !dbg !69
  %281 = extractvalue { i32, i32, i32, i32 } %280, 0, !dbg !69
  %282 = extractvalue { i32, i32, i32, i32 } %280, 1, !dbg !69
  %283 = extractvalue { i32, i32, i32, i32 } %280, 2, !dbg !69
  %284 = extractvalue { i32, i32, i32, i32 } %280, 3, !dbg !69
  %285 = bitcast i32 %281 to float, !dbg !69
  %286 = bitcast i32 %282 to float, !dbg !69
  %287 = bitcast i32 %283 to float, !dbg !69
  %288 = bitcast i32 %284 to float, !dbg !69
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #1, !dbg !69
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !69
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !69
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !69
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !69
  %294 = bitcast i32 %290 to float, !dbg !69
  %295 = bitcast i32 %291 to float, !dbg !69
  %296 = bitcast i32 %292 to float, !dbg !69
  %297 = bitcast i32 %293 to float, !dbg !69
  %298 = fadd float %272, %285, !dbg !70
  %299 = fadd float %273, %286, !dbg !70
  %300 = fadd float %274, %287, !dbg !70
  %301 = fadd float %275, %288, !dbg !70
  %302 = fadd float %276, %294, !dbg !70
  %303 = fadd float %277, %295, !dbg !70
  %304 = fadd float %278, %296, !dbg !70
  %305 = fadd float %279, %297, !dbg !70
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #1, !dbg !71
  %307 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !71
  %308 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !71
  %309 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !71
  %310 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !71
  %311 = bitcast i32 %307 to float, !dbg !71
  %312 = bitcast i32 %308 to float, !dbg !71
  %313 = bitcast i32 %309 to float, !dbg !71
  %314 = bitcast i32 %310 to float, !dbg !71
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #1, !dbg !71
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !71
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !71
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !71
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !71
  %320 = bitcast i32 %316 to float, !dbg !71
  %321 = bitcast i32 %317 to float, !dbg !71
  %322 = bitcast i32 %318 to float, !dbg !71
  %323 = bitcast i32 %319 to float, !dbg !71
  %324 = fadd float %298, %311, !dbg !72
  %325 = fadd float %299, %312, !dbg !72
  %326 = fadd float %300, %313, !dbg !72
  %327 = fadd float %301, %314, !dbg !72
  %328 = fadd float %302, %320, !dbg !72
  %329 = fadd float %303, %321, !dbg !72
  %330 = fadd float %304, %322, !dbg !72
  %331 = fadd float %305, %323, !dbg !72
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #1, !dbg !73
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !73
  %334 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !73
  %335 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !73
  %336 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !73
  %337 = bitcast i32 %333 to float, !dbg !73
  %338 = bitcast i32 %334 to float, !dbg !73
  %339 = bitcast i32 %335 to float, !dbg !73
  %340 = bitcast i32 %336 to float, !dbg !73
  %341 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #1, !dbg !73
  %342 = extractvalue { i32, i32, i32, i32 } %341, 0, !dbg !73
  %343 = extractvalue { i32, i32, i32, i32 } %341, 1, !dbg !73
  %344 = extractvalue { i32, i32, i32, i32 } %341, 2, !dbg !73
  %345 = extractvalue { i32, i32, i32, i32 } %341, 3, !dbg !73
  %346 = bitcast i32 %342 to float, !dbg !73
  %347 = bitcast i32 %343 to float, !dbg !73
  %348 = bitcast i32 %344 to float, !dbg !73
  %349 = bitcast i32 %345 to float, !dbg !73
  %350 = fadd float %324, %337, !dbg !74
  %351 = fadd float %325, %338, !dbg !74
  %352 = fadd float %326, %339, !dbg !74
  %353 = fadd float %327, %340, !dbg !74
  %354 = fadd float %328, %346, !dbg !74
  %355 = fadd float %329, %347, !dbg !74
  %356 = fadd float %330, %348, !dbg !74
  %357 = fadd float %331, %349, !dbg !74
  %358 = shufflevector <2 x i32> %102, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !51
  %359 = mul nsw <2 x i32> %137, %358, !dbg !51
  %shift = shufflevector <2 x i32> %98, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %360 = add nsw <2 x i32> %shift, %98
  %reass.add = extractelement <2 x i32> %360, i64 0
  %361 = add nsw i32 %67, %69, !dbg !33
  %reass.sub15 = sub nsw i32 %87, %361, !dbg !33
  %362 = add nsw i32 %reass.sub15, 1, !dbg !33
  %363 = add nsw i32 %362, %94, !dbg !50
  %364 = add nsw i32 %363, %95, !dbg !51
  %365 = add nsw i32 %364, %96, !dbg !75
  %366 = sub nsw i32 %365, %reass.add, !dbg !76
  %shift16 = shufflevector <2 x i32> %359, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %367 = add nsw <2 x i32> %shift16, %359
  %reass.add13 = extractelement <2 x i32> %367, i64 0
  %368 = add nsw i32 %103, %105, !dbg !33
  %reass.sub = sub nsw i32 %131, %368, !dbg !33
  %369 = add nsw i32 %reass.sub, 1, !dbg !33
  %370 = add nsw i32 %369, %138, !dbg !50
  %371 = add nsw i32 %370, %139, !dbg !51
  %372 = add nsw i32 %371, %140, !dbg !75
  %373 = sub nsw i32 %372, %reass.add13, !dbg !76
  %374 = sitofp i32 %366 to float, !dbg !77
  %375 = sitofp i32 %373 to float, !dbg !77
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float %374) #1, !dbg !77
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float %374) #1, !dbg !77
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %374) #1, !dbg !77
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float %374) #1, !dbg !77
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %375) #1, !dbg !77
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %355, float %375) #1, !dbg !77
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %375) #1, !dbg !77
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float %375) #1, !dbg !77
  %384 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !78
  %385 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !78
  %386 = bitcast float %376 to i32, !dbg !79
  %387 = bitcast float %377 to i32, !dbg !79
  %388 = bitcast float %378 to i32, !dbg !79
  %389 = bitcast float %379 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %386, i32 %387, i32 %388, i32 %389, ptr addrspace(1) %384, i1 true) #1, !dbg !79
  %390 = bitcast float %380 to i32, !dbg !79
  %391 = bitcast float %381 to i32, !dbg !79
  %392 = bitcast float %382 to i32, !dbg !79
  %393 = bitcast float %383 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %390, i32 %391, i32 %392, i32 %393, ptr addrspace(1) %385, i1 true) #1, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv7zcw6pb2ksjwbrqwfgvfe4kyfoalupjfchaskooxdyevd6mjwe.py", directory: "inductor_cache/v7")
!4 = !{ptr @triton_poi_fused_avg_pool2d_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_38", linkageName: "triton_poi_fused_avg_pool2d_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 41, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 41, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 41, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 58, column: 40, scope: !7)
!21 = !DILocation(line: 58, column: 31, scope: !7)
!22 = !DILocation(line: 61, column: 31, scope: !7)
!23 = !DILocation(line: 64, column: 37, scope: !7)
!24 = !DILocation(line: 64, column: 31, scope: !7)
!25 = !DILocation(line: 71, column: 38, scope: !7)
!26 = !DILocation(line: 71, column: 31, scope: !7)
!27 = !DILocation(line: 74, column: 38, scope: !7)
!28 = !DILocation(line: 74, column: 31, scope: !7)
!29 = !DILocation(line: 77, column: 38, scope: !7)
!30 = !DILocation(line: 77, column: 31, scope: !7)
!31 = !DILocation(line: 24, column: 21, scope: !7)
!32 = !DILocation(line: 24, column: 29, scope: !7)
!33 = !DILocation(line: 79, column: 40, scope: !7)
!34 = !DILocation(line: 29, column: 19, scope: !7)
!35 = !DILocation(line: 34, column: 19, scope: !7)
!36 = !DILocation(line: 37, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 46, scope: !7)
!38 = !DILocation(line: 40, column: 21, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 54, column: 21, scope: !7)
!41 = !DILocation(line: 57, column: 20, scope: !7)
!42 = !DILocation(line: 60, column: 20, scope: !7)
!43 = !DILocation(line: 79, column: 43, scope: !7)
!44 = !DILocation(line: 79, column: 124, scope: !7)
!45 = !DILocation(line: 79, column: 120, scope: !7)
!46 = !DILocation(line: 79, column: 112, scope: !7)
!47 = !DILocation(line: 79, column: 155, scope: !7)
!48 = !DILocation(line: 79, column: 143, scope: !7)
!49 = !DILocation(line: 79, column: 131, scope: !7)
!50 = !DILocation(line: 79, column: 48, scope: !7)
!51 = !DILocation(line: 79, column: 231, scope: !7)
!52 = !DILocation(line: 79, column: 105, scope: !7)
!53 = !DILocation(line: 69, column: 20, scope: !7)
!54 = !DILocation(line: 50, column: 19, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 70, column: 20, scope: !7)
!57 = !DILocation(line: 73, column: 20, scope: !7)
!58 = !DILocation(line: 76, column: 20, scope: !7)
!59 = !DILocation(line: 44, column: 46, scope: !7)
!60 = !DILocation(line: 45, column: 20, scope: !7)
!61 = !DILocation(line: 51, column: 46, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 58, column: 45, scope: !7)
!64 = !DILocation(line: 59, column: 20, scope: !7)
!65 = !DILocation(line: 61, column: 36, scope: !7)
!66 = !DILocation(line: 62, column: 20, scope: !7)
!67 = !DILocation(line: 64, column: 42, scope: !7)
!68 = !DILocation(line: 65, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 43, scope: !7)
!70 = !DILocation(line: 72, column: 20, scope: !7)
!71 = !DILocation(line: 74, column: 43, scope: !7)
!72 = !DILocation(line: 75, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 43, scope: !7)
!74 = !DILocation(line: 78, column: 20, scope: !7)
!75 = !DILocation(line: 79, column: 299, scope: !7)
!76 = !DILocation(line: 79, column: 357, scope: !7)
!77 = !DILocation(line: 80, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 25, scope: !7)
!79 = !DILocation(line: 81, column: 37, scope: !7)
!80 = !DILocation(line: 81, column: 4, scope: !7)
