; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 9, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 510, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = srem i32 %23, 32, !dbg !14
  %25 = sext i32 %23 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !15
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !16
  %28 = sext i32 %24 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !17
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !19
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !20
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !20
  %35 = bitcast i32 %33 to float, !dbg !20
  %36 = bitcast i32 %34 to float, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !21
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !23
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !25
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !27
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !29
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !30
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !30
  %49 = bitcast i32 %47 to float, !dbg !30
  %50 = bitcast i32 %48 to float, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !31
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !33
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !35
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %12, i64 %28, !dbg !37
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !38
  %59 = getelementptr float, ptr addrspace(1) %13, i64 %28, !dbg !39
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !40
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !40
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !40
  %63 = bitcast i32 %61 to float, !dbg !40
  %64 = bitcast i32 %62 to float, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %14, i64 %28, !dbg !41
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !42
  %67 = getelementptr float, ptr addrspace(1) %15, i64 %28, !dbg !43
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !44
  %69 = fadd float %35, 0x3EE4F8B580000000, !dbg !45
  %70 = fadd float %36, 0x3EE4F8B580000000, !dbg !45
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %71, 0, !dbg !46
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %72, 0, !dbg !46
  br i1 %.not.i, label %78, label %73, !dbg !46

73:                                               ; preds = %17
  br i1 %.not1.i, label %76, label %74, !dbg !46

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

78:                                               ; preds = %17
  br i1 %.not1.i, label %81, label %79, !dbg !46

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !46
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %83, 0, !dbg !46
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !46
  br i1 %.not.i1, label %90, label %85, !dbg !46

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !46

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !46

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !46
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %97 = fadd float %49, 0x3EE4F8B580000000, !dbg !48
  %98 = fadd float %50, 0x3EE4F8B580000000, !dbg !48
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i6 = icmp eq i32 %99, 0, !dbg !49
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i9 = icmp eq i32 %100, 0, !dbg !49
  br i1 %.not.i6, label %106, label %101, !dbg !49

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !49

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

106:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %109, label %107, !dbg !49

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

__nv_sqrtf.exit10:                                ; preds = %102, %104, %107, %109
  %.0.i8 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !49
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i11 = icmp eq i32 %111, 0, !dbg !49
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i14 = icmp eq i32 %112, 0, !dbg !49
  br i1 %.not.i11, label %118, label %113, !dbg !49

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !49

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

118:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %121, label %119, !dbg !49

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

__nv_sqrtf.exit15:                                ; preds = %114, %116, %119, %121
  %.0.i13 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !49
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !50
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !50
  %125 = fadd float %63, 0x3EE4F8B580000000, !dbg !51
  %126 = fadd float %64, 0x3EE4F8B580000000, !dbg !51
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i16 = icmp eq i32 %127, 0, !dbg !52
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i19 = icmp eq i32 %128, 0, !dbg !52
  br i1 %.not.i16, label %134, label %129, !dbg !52

129:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %132, label %130, !dbg !52

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !52
  br label %__nv_sqrtf.exit20, !dbg !52

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !52
  br label %__nv_sqrtf.exit20, !dbg !52

134:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %137, label %135, !dbg !52

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !52
  br label %__nv_sqrtf.exit20, !dbg !52

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !52
  br label %__nv_sqrtf.exit20, !dbg !52

__nv_sqrtf.exit20:                                ; preds = %130, %132, %135, %137
  %.0.i18 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !52
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i21 = icmp eq i32 %139, 0, !dbg !52
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i24 = icmp eq i32 %140, 0, !dbg !52
  br i1 %.not.i21, label %146, label %141, !dbg !52

141:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %144, label %142, !dbg !52

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !52
  br label %__nv_sqrtf.exit25, !dbg !52

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !52
  br label %__nv_sqrtf.exit25, !dbg !52

146:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %149, label %147, !dbg !52

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !52
  br label %__nv_sqrtf.exit25, !dbg !52

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !52
  br label %__nv_sqrtf.exit25, !dbg !52

__nv_sqrtf.exit25:                                ; preds = %142, %144, %147, %149
  %.0.i23 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !52
  %151 = extractvalue { i32, i32 } %56, 1, !dbg !36
  %152 = extractvalue { i32, i32 } %58, 1, !dbg !38
  %153 = extractvalue { i32, i32 } %56, 0, !dbg !36
  %154 = extractvalue { i32, i32 } %58, 0, !dbg !38
  %155 = extractvalue { i32, i32 } %27, 1, !dbg !16
  %156 = extractvalue { i32, i32 } %30, 1, !dbg !18
  %157 = extractvalue { i32, i32 } %38, 1, !dbg !22
  %158 = extractvalue { i32, i32 } %40, 1, !dbg !24
  %159 = extractvalue { i32, i32 } %42, 1, !dbg !26
  %160 = bitcast i32 %159 to float, !dbg !26
  %161 = extractvalue { i32, i32 } %44, 1, !dbg !28
  %162 = bitcast i32 %161 to float, !dbg !28
  %163 = fsub float %160, %162, !dbg !53
  %164 = fmul float %163, %124, !dbg !54
  %165 = extractvalue { i32, i32 } %52, 1, !dbg !32
  %166 = bitcast i32 %165 to float, !dbg !32
  %167 = fmul float %164, %166, !dbg !55
  %168 = extractvalue { i32, i32 } %54, 1, !dbg !34
  %169 = bitcast i32 %168 to float, !dbg !34
  %170 = fadd float %167, %169, !dbg !56
  %171 = extractvalue { i32, i32 } %27, 0, !dbg !16
  %172 = extractvalue { i32, i32 } %30, 0, !dbg !18
  %173 = extractvalue { i32, i32 } %38, 0, !dbg !22
  %174 = extractvalue { i32, i32 } %40, 0, !dbg !24
  %175 = extractvalue { i32, i32 } %42, 0, !dbg !26
  %176 = bitcast i32 %175 to float, !dbg !26
  %177 = extractvalue { i32, i32 } %44, 0, !dbg !28
  %178 = bitcast i32 %177 to float, !dbg !28
  %179 = fsub float %176, %178, !dbg !53
  %180 = fmul float %179, %123, !dbg !54
  %181 = extractvalue { i32, i32 } %52, 0, !dbg !32
  %182 = bitcast i32 %181 to float, !dbg !32
  %183 = fmul float %180, %182, !dbg !55
  %184 = extractvalue { i32, i32 } %54, 0, !dbg !34
  %185 = bitcast i32 %184 to float, !dbg !34
  %186 = fadd float %183, %185, !dbg !56
  %187 = extractvalue { i32, i32 } %68, 1, !dbg !44
  %188 = extractvalue { i32, i32 } %68, 0, !dbg !44
  %189 = extractvalue { i32, i32 } %66, 1, !dbg !42
  %190 = extractvalue { i32, i32 } %66, 0, !dbg !42
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !57
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !57
  %193 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !16
  %194 = insertelement <2 x i32> %193, i32 %153, i64 1, !dbg !16
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !16
  %196 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !18
  %197 = insertelement <2 x i32> %196, i32 %154, i64 1, !dbg !18
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !18
  %199 = fsub <2 x float> %195, %198, !dbg !58
  %200 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !24
  %201 = insertelement <2 x i32> %200, i32 %188, i64 1, !dbg !24
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !24
  %203 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !22
  %204 = insertelement <2 x i32> %203, i32 %190, i64 1, !dbg !22
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !22
  %206 = insertelement <2 x float> poison, float %95, i64 0, !dbg !59
  %207 = insertelement <2 x float> %206, float %191, i64 1, !dbg !59
  %208 = fmul <2 x float> %199, %207, !dbg !59
  %209 = fmul <2 x float> %208, %205, !dbg !60
  %210 = fadd <2 x float> %209, %202, !dbg !61
  %211 = extractelement <2 x float> %210, i64 0, !dbg !62
  %212 = fadd float %211, %186, !dbg !62
  %213 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !16
  %214 = insertelement <2 x i32> %213, i32 %151, i64 1, !dbg !16
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !16
  %216 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !18
  %217 = insertelement <2 x i32> %216, i32 %152, i64 1, !dbg !18
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !18
  %219 = fsub <2 x float> %215, %218, !dbg !58
  %220 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !24
  %221 = insertelement <2 x i32> %220, i32 %187, i64 1, !dbg !24
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !24
  %223 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !22
  %224 = insertelement <2 x i32> %223, i32 %189, i64 1, !dbg !22
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !22
  %226 = insertelement <2 x float> poison, float %96, i64 0, !dbg !59
  %227 = insertelement <2 x float> %226, float %192, i64 1, !dbg !59
  %228 = fmul <2 x float> %219, %227, !dbg !59
  %229 = fmul <2 x float> %228, %225, !dbg !60
  %230 = fadd <2 x float> %229, %222, !dbg !61
  %231 = extractelement <2 x float> %230, i64 0, !dbg !62
  %232 = fadd float %231, %170, !dbg !62
  %233 = extractelement <2 x float> %210, i64 1, !dbg !63
  %234 = fadd float %212, %233, !dbg !63
  %235 = extractelement <2 x float> %230, i64 1, !dbg !63
  %236 = fadd float %232, %235, !dbg !63
  %237 = fsub float 0.000000e+00, %234, !dbg !64
  %238 = fsub float 0.000000e+00, %236, !dbg !64
  %239 = fmul float %237, 0x3FF7154760000000, !dbg !68
  %240 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %239) #3, !dbg !68
  %241 = fmul float %238, 0x3FF7154760000000, !dbg !68
  %242 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %241) #3, !dbg !68
  %243 = fadd float %240, 1.000000e+00, !dbg !69
  %244 = fadd float %242, 1.000000e+00, !dbg !69
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %243) #3, !dbg !70
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %244) #3, !dbg !70
  %247 = fmul float %234, %245, !dbg !71
  %248 = fmul float %236, %246, !dbg !71
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !72
  %250 = bitcast float %247 to i32, !dbg !73
  %251 = bitcast float %248 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %250, i32 %251, ptr addrspace(1) %249, i1 true) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr4bvqt3lbapchsof7ppea7yspun7kcukp5kt2g2tfvu24fr7a3s.py", directory: "inductor_cache/r4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 32, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 39, column: 32, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 40, column: 32, scope: !7)
!44 = !DILocation(line: 40, column: 37, scope: !7)
!45 = !DILocation(line: 43, column: 18, scope: !7)
!46 = !DILocation(line: 44, column: 26, scope: !7)
!47 = !DILocation(line: 46, column: 18, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 27, scope: !7)
!50 = !DILocation(line: 55, column: 19, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 27, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 19, scope: !7)
!58 = !DILocation(line: 41, column: 18, scope: !7)
!59 = !DILocation(line: 49, column: 19, scope: !7)
!60 = !DILocation(line: 50, column: 20, scope: !7)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 60, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 47, column: 30, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!67 = !DILocation(line: 70, column: 23, scope: !7)
!68 = !DILocation(line: 47, column: 29, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 47, column: 20, scope: !65, inlinedAt: !67)
!70 = !DILocation(line: 47, column: 16, scope: !65, inlinedAt: !67)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 28, scope: !7)
!73 = !DILocation(line: 72, column: 40, scope: !7)
!74 = !DILocation(line: 72, column: 4, scope: !7)
