#loc = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":19:0)
module {
  tt.func public @triton_poi_fused_mul_native_layer_norm_silu_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<256xi32> loc(#loc1)
    %cst_2 = arith.constant dense<256> : tensor<256xi32> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_2 : tensor<256xi32> loc(#loc6)
    %6 = arith.divsi %4, %cst_1 : tensor<256xi32> loc(#loc7)
    %7 = arith.remsi %4, %cst_1 : tensor<256xi32> loc(#loc8)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc9)
    %9 = tt.addptr %8, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc9)
    %10 = tt.load %9, %5 : tensor<256x!tt.ptr<f32>> loc(#loc10)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc11)
    %12 = tt.addptr %11, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc11)
    %13 = tt.load %12, %5 : tensor<256x!tt.ptr<f32>> loc(#loc12)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc13)
    %15 = tt.addptr %14, %6 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc13)
    %16 = tt.load %15, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc14)
    %17 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc15)
    %18 = tt.addptr %17, %6 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc15)
    %19 = tt.load %18, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc16)
    %20 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc17)
    %21 = tt.addptr %20, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc17)
    %22 = tt.load %21, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc18)
    %23 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc19)
    %24 = tt.addptr %23, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc19)
    %25 = tt.load %24, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc20)
    %26 = arith.subf %cst, %10 : tensor<256xf32> loc(#loc37)
    %27 = math.exp %26 : tensor<256xf32> loc(#loc38)
    %28 = arith.addf %27, %cst_0 : tensor<256xf32> loc(#loc39)
    %29 = arith.divf %cst_0, %28 : tensor<256xf32> loc(#loc40)
    %30 = arith.mulf %10, %29 : tensor<256xf32> loc(#loc26)
    %31 = arith.mulf %30, %13 : tensor<256xf32> loc(#loc27)
    %32 = arith.subf %31, %16 : tensor<256xf32> loc(#loc28)
    %33 = arith.addf %19, %cst_0 : tensor<256xf32> loc(#loc29)
    %34 = tt.extern_elementwise %33 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<256xf32>) -> tensor<256xf32> loc(#loc30)
    %35 = arith.mulf %32, %34 : tensor<256xf32> loc(#loc31)
    %36 = arith.mulf %35, %22 : tensor<256xf32> loc(#loc32)
    %37 = arith.addf %36, %25 : tensor<256xf32> loc(#loc33)
    %38 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc34)
    %39 = tt.addptr %38, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc34)
    tt.store %39, %37, %5 : tensor<256x!tt.ptr<f32>> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":21:28)
#loc3 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":21:33)
#loc4 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":22:36)
#loc5 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":22:23)
#loc6 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":23:21)
#loc7 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":25:19)
#loc8 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":26:19)
#loc9 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":27:30)
#loc10 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":27:35)
#loc11 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":28:30)
#loc12 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":28:35)
#loc13 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":29:30)
#loc14 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":29:35)
#loc15 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":30:30)
#loc16 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":30:35)
#loc17 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":31:31)
#loc18 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":31:36)
#loc19 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":32:31)
#loc20 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":32:36)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc22 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":33:22)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc26 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":34:18)
#loc27 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":35:18)
#loc28 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":36:18)
#loc29 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":38:18)
#loc30 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":39:28)
#loc31 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":40:19)
#loc32 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":41:20)
#loc33 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":42:20)
#loc34 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":43:25)
#loc35 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":43:37)
#loc36 = loc("inductor_cache/x6/cx6ypsbtro5tvi4jqn6sq4gax2lzeookfuno4kh5mgogvk5dvl33.py":43:4)
#loc37 = loc(callsite(#loc21 at #loc22))
#loc38 = loc(callsite(#loc23 at #loc22))
#loc39 = loc(callsite(#loc24 at #loc22))
#loc40 = loc(callsite(#loc25 at #loc22))
