; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 252, !dbg !12
  %13 = and i32 %10, 15, !dbg !12
  %14 = and i32 %10, 255, !dbg !12
  %15 = lshr i32 %10, 4, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %16, 32, !dbg !12
  %19 = or disjoint i32 %16, 48, !dbg !12
  %20 = or disjoint i32 %16, 64, !dbg !12
  %21 = or disjoint i32 %16, 80, !dbg !12
  %22 = or disjoint i32 %16, 96, !dbg !12
  %23 = or disjoint i32 %16, 112, !dbg !12
  %24 = or disjoint i32 %16, 128, !dbg !12
  %25 = or disjoint i32 %16, 144, !dbg !12
  %26 = or disjoint i32 %16, 160, !dbg !12
  %27 = or disjoint i32 %16, 176, !dbg !12
  %28 = or disjoint i32 %16, 192, !dbg !12
  %29 = or disjoint i32 %16, 208, !dbg !12
  %30 = or disjoint i32 %16, 224, !dbg !12
  %31 = or disjoint i32 %16, 240, !dbg !12
  %32 = or disjoint i32 %9, %12, !dbg !13
  %33 = or disjoint i32 %9, %14, !dbg !13
  %34 = or disjoint i32 %9, %16, !dbg !13
  %35 = or disjoint i32 %9, %17, !dbg !13
  %36 = or disjoint i32 %9, %18, !dbg !13
  %37 = or disjoint i32 %9, %19, !dbg !13
  %38 = or disjoint i32 %9, %20, !dbg !13
  %39 = or disjoint i32 %9, %21, !dbg !13
  %40 = or disjoint i32 %9, %22, !dbg !13
  %41 = or disjoint i32 %9, %23, !dbg !13
  %42 = or disjoint i32 %9, %24, !dbg !13
  %43 = or disjoint i32 %9, %25, !dbg !13
  %44 = or disjoint i32 %9, %26, !dbg !13
  %45 = or disjoint i32 %9, %27, !dbg !13
  %46 = or disjoint i32 %9, %28, !dbg !13
  %47 = or disjoint i32 %9, %29, !dbg !13
  %48 = or disjoint i32 %9, %30, !dbg !13
  %49 = or disjoint i32 %9, %31, !dbg !13
  %50 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %51 = shl i32 %50, 4, !dbg !15
  %52 = lshr i32 %10, 6, !dbg !16
  %53 = and i32 %52, 3, !dbg !16
  %54 = or disjoint i32 %51, %53, !dbg !17
  %55 = or disjoint i32 %54, 4, !dbg !17
  %56 = or disjoint i32 %54, 8, !dbg !17
  %57 = or disjoint i32 %51, %13, !dbg !17
  %58 = icmp slt i32 %54, 9, !dbg !18
  %59 = icmp slt i32 %55, 9, !dbg !18
  %60 = icmp slt i32 %56, 9, !dbg !18
  %61 = icmp slt i32 %51, 0, !dbg !18
  %62 = icmp slt i32 %57, 9, !dbg !18
  %.frozen = freeze i32 %32, !dbg !19
  %63 = sdiv i32 %.frozen, 64, !dbg !19
  %64 = mul i32 %63, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %64, !dbg !20
  %65 = sdiv i32 %33, 64, !dbg !19
  %66 = shl i32 %54, 6, !dbg !21
  %67 = shl i32 %55, 6, !dbg !21
  %68 = shl i32 %56, 6, !dbg !21
  %69 = or disjoint i32 %66, 768, !dbg !21
  %70 = mul i32 %63, 576, !dbg !22
  %71 = add i32 %70, %.decomposed, !dbg !23
  %72 = add i32 %71, %66, !dbg !24
  %73 = add i32 %71, %67, !dbg !24
  %74 = add i32 %71, %68, !dbg !24
  %75 = add i32 %71, %69, !dbg !24
  %76 = sext i32 %72 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !25
  %78 = sext i32 %73 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !25
  %80 = sext i32 %74 to i64, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !25
  %82 = sext i32 %75 to i64, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !25
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %58) #2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %59) #2, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !26
  %98 = bitcast i32 %94 to float, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = bitcast i32 %96 to float, !dbg !26
  %101 = bitcast i32 %97 to float, !dbg !26
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %60) #2, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !26
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !26
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !26
  %107 = bitcast i32 %103 to float, !dbg !26
  %108 = bitcast i32 %104 to float, !dbg !26
  %109 = bitcast i32 %105 to float, !dbg !26
  %110 = bitcast i32 %106 to float, !dbg !26
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %61) #2, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !26
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !26
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !26
  %116 = bitcast i32 %112 to float, !dbg !26
  %117 = bitcast i32 %113 to float, !dbg !26
  %118 = bitcast i32 %114 to float, !dbg !26
  %119 = bitcast i32 %115 to float, !dbg !26
  %120 = shl i32 %10, 6, !dbg !26
  %121 = and i32 %120, 4032, !dbg !26
  %122 = or disjoint i32 %121, %53, !dbg !26
  %123 = lshr exact i32 %121, 2, !dbg !26
  %124 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %123, !dbg !26
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !26
  %126 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !26
  %127 = or disjoint i32 %122, 16, !dbg !26
  %128 = lshr i32 %127, 4, !dbg !26
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !26
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !26
  %131 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !26
  %132 = or disjoint i32 %122, 32, !dbg !26
  %133 = lshr i32 %132, 4, !dbg !26
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !26
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %132, !dbg !26
  %136 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !26
  %137 = or disjoint i32 %122, 48, !dbg !26
  %138 = lshr i32 %137, 4, !dbg !26
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !26
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %137, !dbg !26
  %141 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !26
  %142 = or disjoint i32 %122, 4, !dbg !26
  %143 = getelementptr float, ptr addrspace(3) %124, i32 %142, !dbg !26
  %144 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !26
  %145 = or disjoint i32 %122, 20, !dbg !26
  %146 = lshr i32 %145, 4, !dbg !26
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !26
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !26
  %149 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !26
  %150 = or disjoint i32 %122, 36, !dbg !26
  %151 = lshr i32 %150, 4, !dbg !26
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !26
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %150, !dbg !26
  %154 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !26
  %155 = or disjoint i32 %122, 52, !dbg !26
  %156 = lshr i32 %155, 4, !dbg !26
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !26
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %155, !dbg !26
  %159 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !26
  %160 = or disjoint i32 %122, 8, !dbg !26
  %161 = getelementptr float, ptr addrspace(3) %124, i32 %160, !dbg !26
  %162 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !26
  %163 = or disjoint i32 %122, 24, !dbg !26
  %164 = lshr i32 %163, 4, !dbg !26
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !26
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %163, !dbg !26
  %167 = insertelement <1 x i32> poison, i32 %104, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !26
  %168 = or disjoint i32 %122, 40, !dbg !26
  %169 = lshr i32 %168, 4, !dbg !26
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !26
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %168, !dbg !26
  %172 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !26
  %173 = or disjoint i32 %122, 56, !dbg !26
  %174 = lshr i32 %173, 4, !dbg !26
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !26
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %173, !dbg !26
  %177 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !26
  %178 = or disjoint i32 %122, 12, !dbg !26
  %179 = getelementptr float, ptr addrspace(3) %124, i32 %178, !dbg !26
  %180 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !26
  %181 = or disjoint i32 %122, 28, !dbg !26
  %182 = lshr i32 %181, 4, !dbg !26
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !26
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %181, !dbg !26
  %185 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !26
  %186 = or disjoint i32 %122, 44, !dbg !26
  %187 = lshr i32 %186, 4, !dbg !26
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !26
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %186, !dbg !26
  %190 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !26
  %191 = or disjoint i32 %122, 60, !dbg !26
  %192 = lshr i32 %191, 4, !dbg !26
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !26
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %191, !dbg !26
  %195 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %196 = lshr i32 %14, 4, !dbg !26
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !26
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %14, !dbg !26
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !26
  %200 = or disjoint i32 %14, 256, !dbg !26
  %201 = lshr i32 %200, 4, !dbg !26
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !26
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !26
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !26
  %205 = or disjoint i32 %14, 512, !dbg !26
  %206 = lshr i32 %205, 4, !dbg !26
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !26
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !26
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !26
  %210 = or disjoint i32 %14, 768, !dbg !26
  %211 = lshr i32 %210, 4, !dbg !26
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !26
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !26
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !26
  %215 = or disjoint i32 %14, 1024, !dbg !26
  %216 = lshr i32 %215, 4, !dbg !26
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !26
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !26
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !26
  %220 = or disjoint i32 %14, 1280, !dbg !26
  %221 = lshr i32 %220, 4, !dbg !26
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !26
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !26
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !26
  %225 = or disjoint i32 %14, 1536, !dbg !26
  %226 = lshr i32 %225, 4, !dbg !26
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !26
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !26
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !26
  %230 = or disjoint i32 %14, 1792, !dbg !26
  %231 = lshr i32 %230, 4, !dbg !26
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !26
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !26
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !26
  %235 = or disjoint i32 %14, 2048, !dbg !26
  %236 = lshr i32 %235, 4, !dbg !26
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !26
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !26
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !26
  %240 = or disjoint i32 %14, 2304, !dbg !26
  %241 = lshr i32 %240, 4, !dbg !26
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !26
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !26
  %244 = load float, ptr addrspace(3) %243, align 4, !dbg !26
  %245 = or disjoint i32 %14, 2560, !dbg !26
  %246 = lshr i32 %245, 4, !dbg !26
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !26
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !26
  %249 = load float, ptr addrspace(3) %248, align 4, !dbg !26
  %250 = or disjoint i32 %14, 2816, !dbg !26
  %251 = lshr i32 %250, 4, !dbg !26
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !26
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %250, !dbg !26
  %254 = load float, ptr addrspace(3) %253, align 4, !dbg !26
  %255 = or disjoint i32 %14, 3072, !dbg !26
  %256 = lshr i32 %255, 4, !dbg !26
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !26
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %255, !dbg !26
  %259 = load float, ptr addrspace(3) %258, align 4, !dbg !26
  %260 = or disjoint i32 %14, 3328, !dbg !26
  %261 = lshr i32 %260, 4, !dbg !26
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !26
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !26
  %264 = load float, ptr addrspace(3) %263, align 4, !dbg !26
  %265 = or disjoint i32 %14, 3584, !dbg !26
  %266 = lshr i32 %265, 4, !dbg !26
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !26
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !26
  %269 = load float, ptr addrspace(3) %268, align 4, !dbg !26
  %270 = or disjoint i32 %14, 3840, !dbg !26
  %271 = lshr i32 %270, 4, !dbg !26
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !26
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !26
  %274 = load float, ptr addrspace(3) %273, align 4, !dbg !26
  %275 = sext i32 %65 to i64, !dbg !27
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %275, !dbg !27
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #2, !dbg !28
  %278 = bitcast i32 %277 to float, !dbg !28
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %275, !dbg !29
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 true) #2, !dbg !30
  %281 = bitcast i32 %280 to float, !dbg !30
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %281) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.idx = shl nuw nsw i32 %14, 3, !dbg !32
  %283 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !32
  %284 = bitcast float %282 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.idx3 = shl nuw nsw i32 %16, 3, !dbg !32
  %285 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !32
  %286 = load float, ptr addrspace(3) %285, align 8, !dbg !32
  %.idx4 = shl nuw nsw i32 %17, 3, !dbg !32
  %287 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !32
  %288 = load float, ptr addrspace(3) %287, align 8, !dbg !32
  %.idx5 = shl nuw nsw i32 %18, 3, !dbg !32
  %289 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !32
  %290 = load float, ptr addrspace(3) %289, align 8, !dbg !32
  %.idx6 = shl nuw nsw i32 %19, 3, !dbg !32
  %291 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !32
  %292 = load float, ptr addrspace(3) %291, align 8, !dbg !32
  %.idx7 = shl nuw nsw i32 %20, 3, !dbg !32
  %293 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !32
  %294 = load float, ptr addrspace(3) %293, align 8, !dbg !32
  %.idx8 = shl nuw nsw i32 %21, 3, !dbg !32
  %295 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !32
  %296 = load float, ptr addrspace(3) %295, align 8, !dbg !32
  %.idx9 = shl nuw nsw i32 %22, 3, !dbg !32
  %297 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !32
  %298 = load float, ptr addrspace(3) %297, align 8, !dbg !32
  %.idx10 = shl nuw nsw i32 %23, 3, !dbg !32
  %299 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !32
  %300 = load float, ptr addrspace(3) %299, align 8, !dbg !32
  %.idx11 = shl nuw nsw i32 %24, 3, !dbg !32
  %301 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !32
  %302 = load float, ptr addrspace(3) %301, align 8, !dbg !32
  %.idx12 = shl nuw nsw i32 %25, 3, !dbg !32
  %303 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !32
  %304 = load float, ptr addrspace(3) %303, align 8, !dbg !32
  %.idx13 = shl nuw nsw i32 %26, 3, !dbg !32
  %305 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !32
  %306 = load float, ptr addrspace(3) %305, align 8, !dbg !32
  %.idx14 = shl nuw nsw i32 %27, 3, !dbg !32
  %307 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !32
  %308 = load float, ptr addrspace(3) %307, align 8, !dbg !32
  %.idx15 = shl nuw nsw i32 %28, 3, !dbg !32
  %309 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx15, !dbg !32
  %310 = load float, ptr addrspace(3) %309, align 8, !dbg !32
  %.idx16 = shl nuw nsw i32 %29, 3, !dbg !32
  %311 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !32
  %312 = load float, ptr addrspace(3) %311, align 8, !dbg !32
  %.idx17 = shl nuw nsw i32 %30, 3, !dbg !32
  %313 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx17, !dbg !32
  %314 = load float, ptr addrspace(3) %313, align 8, !dbg !32
  %.idx18 = shl nuw nsw i32 %31, 3, !dbg !32
  %315 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx18, !dbg !32
  %316 = load float, ptr addrspace(3) %315, align 8, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %284, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %319 = load float, ptr addrspace(3) %318, align 16, !dbg !32
  %320 = getelementptr inbounds i8, ptr addrspace(3) %318, i32 4, !dbg !32
  %321 = load float, ptr addrspace(3) %320, align 4, !dbg !32
  %322 = getelementptr inbounds i8, ptr addrspace(3) %318, i32 8, !dbg !32
  %323 = load float, ptr addrspace(3) %322, align 8, !dbg !32
  %324 = getelementptr inbounds i8, ptr addrspace(3) %318, i32 12, !dbg !32
  %325 = load float, ptr addrspace(3) %324, align 4, !dbg !32
  %326 = fmul float %199, %286, !dbg !32
  %327 = fmul float %204, %288, !dbg !32
  %328 = fmul float %209, %290, !dbg !32
  %329 = fmul float %214, %292, !dbg !32
  %330 = fmul float %219, %294, !dbg !32
  %331 = fmul float %224, %296, !dbg !32
  %332 = fmul float %229, %298, !dbg !32
  %333 = fmul float %234, %300, !dbg !32
  %334 = fmul float %239, %302, !dbg !32
  %335 = fmul float %244, %304, !dbg !32
  %336 = fmul float %249, %306, !dbg !32
  %337 = fmul float %254, %308, !dbg !32
  %338 = fmul float %259, %310, !dbg !32
  %339 = fmul float %264, %312, !dbg !32
  %340 = fmul float %269, %314, !dbg !32
  %341 = fmul float %274, %316, !dbg !32
  %342 = fmul float %319, %89, !dbg !32
  %343 = fmul float %321, %90, !dbg !32
  %344 = fmul float %323, %91, !dbg !32
  %345 = fmul float %325, %92, !dbg !32
  %346 = fmul float %319, %98, !dbg !32
  %347 = fmul float %321, %99, !dbg !32
  %348 = fmul float %323, %100, !dbg !32
  %349 = fmul float %325, %101, !dbg !32
  %350 = fmul float %319, %107, !dbg !32
  %351 = fmul float %321, %108, !dbg !32
  %352 = fmul float %323, %109, !dbg !32
  %353 = fmul float %325, %110, !dbg !32
  %354 = fmul float %319, %116, !dbg !32
  %355 = fmul float %321, %117, !dbg !32
  %356 = fmul float %323, %118, !dbg !32
  %357 = fmul float %325, %119, !dbg !32
  %358 = mul i32 %34, 9, !dbg !33
  %359 = mul i32 %35, 9, !dbg !33
  %360 = mul i32 %36, 9, !dbg !33
  %361 = mul i32 %37, 9, !dbg !33
  %362 = mul i32 %38, 9, !dbg !33
  %363 = mul i32 %39, 9, !dbg !33
  %364 = mul i32 %40, 9, !dbg !33
  %365 = mul i32 %41, 9, !dbg !33
  %366 = mul i32 %42, 9, !dbg !33
  %367 = mul i32 %43, 9, !dbg !33
  %368 = mul i32 %44, 9, !dbg !33
  %369 = mul i32 %45, 9, !dbg !33
  %370 = mul i32 %46, 9, !dbg !33
  %371 = mul i32 %47, 9, !dbg !33
  %372 = mul i32 %48, 9, !dbg !33
  %373 = mul i32 %49, 9, !dbg !33
  %374 = add i32 %57, %358, !dbg !34
  %375 = add i32 %57, %359, !dbg !34
  %376 = add i32 %57, %360, !dbg !34
  %377 = add i32 %57, %361, !dbg !34
  %378 = add i32 %57, %362, !dbg !34
  %379 = add i32 %57, %363, !dbg !34
  %380 = add i32 %57, %364, !dbg !34
  %381 = add i32 %57, %365, !dbg !34
  %382 = add i32 %57, %366, !dbg !34
  %383 = add i32 %57, %367, !dbg !34
  %384 = add i32 %57, %368, !dbg !34
  %385 = add i32 %57, %369, !dbg !34
  %386 = add i32 %57, %370, !dbg !34
  %387 = add i32 %57, %371, !dbg !34
  %388 = add i32 %57, %372, !dbg !34
  %389 = add i32 %57, %373, !dbg !34
  %390 = sext i32 %374 to i64, !dbg !35
  %391 = getelementptr float, ptr addrspace(1) %3, i64 %390, !dbg !35
  %392 = sext i32 %375 to i64, !dbg !35
  %393 = getelementptr float, ptr addrspace(1) %3, i64 %392, !dbg !35
  %394 = sext i32 %376 to i64, !dbg !35
  %395 = getelementptr float, ptr addrspace(1) %3, i64 %394, !dbg !35
  %396 = sext i32 %377 to i64, !dbg !35
  %397 = getelementptr float, ptr addrspace(1) %3, i64 %396, !dbg !35
  %398 = sext i32 %378 to i64, !dbg !35
  %399 = getelementptr float, ptr addrspace(1) %3, i64 %398, !dbg !35
  %400 = sext i32 %379 to i64, !dbg !35
  %401 = getelementptr float, ptr addrspace(1) %3, i64 %400, !dbg !35
  %402 = sext i32 %380 to i64, !dbg !35
  %403 = getelementptr float, ptr addrspace(1) %3, i64 %402, !dbg !35
  %404 = sext i32 %381 to i64, !dbg !35
  %405 = getelementptr float, ptr addrspace(1) %3, i64 %404, !dbg !35
  %406 = sext i32 %382 to i64, !dbg !35
  %407 = getelementptr float, ptr addrspace(1) %3, i64 %406, !dbg !35
  %408 = sext i32 %383 to i64, !dbg !35
  %409 = getelementptr float, ptr addrspace(1) %3, i64 %408, !dbg !35
  %410 = sext i32 %384 to i64, !dbg !35
  %411 = getelementptr float, ptr addrspace(1) %3, i64 %410, !dbg !35
  %412 = sext i32 %385 to i64, !dbg !35
  %413 = getelementptr float, ptr addrspace(1) %3, i64 %412, !dbg !35
  %414 = sext i32 %386 to i64, !dbg !35
  %415 = getelementptr float, ptr addrspace(1) %3, i64 %414, !dbg !35
  %416 = sext i32 %387 to i64, !dbg !35
  %417 = getelementptr float, ptr addrspace(1) %3, i64 %416, !dbg !35
  %418 = sext i32 %388 to i64, !dbg !35
  %419 = getelementptr float, ptr addrspace(1) %3, i64 %418, !dbg !35
  %420 = sext i32 %389 to i64, !dbg !35
  %421 = getelementptr float, ptr addrspace(1) %3, i64 %420, !dbg !35
  %422 = bitcast float %326 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %422, ptr addrspace(1) %391, i1 %62) #2, !dbg !36
  %423 = bitcast float %327 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %423, ptr addrspace(1) %393, i1 %62) #2, !dbg !36
  %424 = bitcast float %328 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %424, ptr addrspace(1) %395, i1 %62) #2, !dbg !36
  %425 = bitcast float %329 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %425, ptr addrspace(1) %397, i1 %62) #2, !dbg !36
  %426 = bitcast float %330 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %426, ptr addrspace(1) %399, i1 %62) #2, !dbg !36
  %427 = bitcast float %331 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %427, ptr addrspace(1) %401, i1 %62) #2, !dbg !36
  %428 = bitcast float %332 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %403, i1 %62) #2, !dbg !36
  %429 = bitcast float %333 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %405, i1 %62) #2, !dbg !36
  %430 = bitcast float %334 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %430, ptr addrspace(1) %407, i1 %62) #2, !dbg !36
  %431 = bitcast float %335 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %409, i1 %62) #2, !dbg !36
  %432 = bitcast float %336 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %432, ptr addrspace(1) %411, i1 %62) #2, !dbg !36
  %433 = bitcast float %337 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %433, ptr addrspace(1) %413, i1 %62) #2, !dbg !36
  %434 = bitcast float %338 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %434, ptr addrspace(1) %415, i1 %62) #2, !dbg !36
  %435 = bitcast float %339 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %435, ptr addrspace(1) %417, i1 %62) #2, !dbg !36
  %436 = bitcast float %340 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %436, ptr addrspace(1) %419, i1 %62) #2, !dbg !36
  %437 = bitcast float %341 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %437, ptr addrspace(1) %421, i1 %62) #2, !dbg !36
  %438 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !37
  %439 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !37
  %440 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !37
  %441 = getelementptr float, ptr addrspace(1) %4, i64 %82, !dbg !37
  %442 = bitcast float %342 to i32, !dbg !38
  %443 = bitcast float %343 to i32, !dbg !38
  %444 = bitcast float %344 to i32, !dbg !38
  %445 = bitcast float %345 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %442, i32 %443, i32 %444, i32 %445, ptr addrspace(1) %438, i1 %58) #2, !dbg !38
  %446 = bitcast float %346 to i32, !dbg !38
  %447 = bitcast float %347 to i32, !dbg !38
  %448 = bitcast float %348 to i32, !dbg !38
  %449 = bitcast float %349 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %446, i32 %447, i32 %448, i32 %449, ptr addrspace(1) %439, i1 %59) #2, !dbg !38
  %450 = bitcast float %350 to i32, !dbg !38
  %451 = bitcast float %351 to i32, !dbg !38
  %452 = bitcast float %352 to i32, !dbg !38
  %453 = bitcast float %353 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %450, i32 %451, i32 %452, i32 %453, ptr addrspace(1) %440, i1 %60) #2, !dbg !38
  %454 = bitcast float %354 to i32, !dbg !38
  %455 = bitcast float %355 to i32, !dbg !38
  %456 = bitcast float %356 to i32, !dbg !38
  %457 = bitcast float %357 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %454, i32 %455, i32 %456, i32 %457, ptr addrspace(1) %441, i1 %61) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr2slcyfqcxay5z2lweres6njbu6xj5cufli2shmey7xl56rhgvu.py", directory: "inductor_cache/r2")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_14", linkageName: "triton_poi_fused__weight_norm_interface_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 32, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 43, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 53, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
