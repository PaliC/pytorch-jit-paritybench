; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %21 = sdiv i32 %.frozen, 4, !dbg !14
  %22 = srem i32 %21, 4, !dbg !15
  %23 = mul i32 %21, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = sdiv i32 %20, 16, !dbg !17
  %25 = srem i32 %24, 256, !dbg !18
  %26 = sext i32 %22 to i64, !dbg !19
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %30 = sext i32 %.decomposed to i64, !dbg !21
  %31 = getelementptr i64, ptr addrspace(1) %2, i64 %30, !dbg !21
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !22
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !22
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !22
  %35 = sext i32 %25 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %39 = getelementptr i64, ptr addrspace(1) %6, i64 %26, !dbg !25
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !26
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !26
  %42 = getelementptr i64, ptr addrspace(1) %7, i64 %30, !dbg !27
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !28
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !28
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !29
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !30
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !30
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !32
  %52 = bitcast i32 %51 to float, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !32
  %54 = bitcast i32 %53 to float, !dbg !32
  %55 = sext i32 %20 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %10, i64 %55, !dbg !33
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !34
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !34
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !34
  %60 = bitcast i32 %58 to float, !dbg !34
  %61 = bitcast i32 %59 to float, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %11, i64 %35, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !36
  %64 = bitcast i32 %63 to float, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !36
  %66 = bitcast i32 %65 to float, !dbg !36
  %67 = getelementptr float, ptr addrspace(1) %12, i64 %55, !dbg !37
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !38
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !38
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !38
  %71 = bitcast i32 %69 to float, !dbg !38
  %72 = bitcast i32 %70 to float, !dbg !38
  %73 = lshr i64 %28, 62, !dbg !39
  %74 = and i64 %73, 2, !dbg !39
  %75 = add i64 %74, %28, !dbg !39
  %76 = lshr i64 %33, 62, !dbg !40
  %77 = and i64 %76, 2, !dbg !40
  %78 = add i64 %77, %33, !dbg !40
  %79 = lshr i64 %34, 62, !dbg !40
  %80 = and i64 %79, 2, !dbg !40
  %81 = add i64 %80, %34, !dbg !40
  %82 = shl i64 %75, 1, !dbg !41
  %83 = shl nsw i32 %24, 2, !dbg !42
  %84 = sext i32 %83 to i64, !dbg !43
  %85 = add i64 %82, %84, !dbg !44
  %86 = add i64 %85, %78, !dbg !43
  %87 = add i64 %85, %81, !dbg !43
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !45
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !45
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !46
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %86, !dbg !47
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %87, !dbg !47
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !48
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !48
  %96 = lshr i64 %40, 62, !dbg !49
  %97 = and i64 %96, 2, !dbg !49
  %98 = add i64 %97, %40, !dbg !49
  %99 = shl i64 %98, 1, !dbg !50
  %100 = add i64 %99, %84, !dbg !51
  %101 = add i64 %100, %78, !dbg !52
  %102 = add i64 %100, %81, !dbg !52
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !53
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !53
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !54
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !54
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !55
  %108 = getelementptr float, ptr addrspace(1) %5, i64 %102, !dbg !55
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !56
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !56
  %111 = lshr i64 %44, 62, !dbg !57
  %112 = and i64 %111, 2, !dbg !57
  %113 = add i64 %112, %44, !dbg !57
  %114 = lshr i64 %45, 62, !dbg !57
  %115 = and i64 %114, 2, !dbg !57
  %116 = add i64 %115, %45, !dbg !57
  %117 = add i64 %100, %113, !dbg !58
  %118 = add i64 %100, %116, !dbg !58
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !59
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %118, !dbg !59
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !60
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #1, !dbg !60
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %117, !dbg !61
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %118, !dbg !61
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !62
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !62
  %127 = add i64 %85, %113, !dbg !63
  %128 = add i64 %85, %116, !dbg !63
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !64
  %130 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !64
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !65
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !65
  %133 = getelementptr float, ptr addrspace(1) %5, i64 %127, !dbg !66
  %134 = getelementptr float, ptr addrspace(1) %5, i64 %128, !dbg !66
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !67
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !67
  %137 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !46
  %138 = insertelement <2 x i32> %137, i32 %105, i64 1, !dbg !46
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !46
  %140 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !68
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !68
  %142 = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %143 = fadd <2 x float> %142, %139, !dbg !68
  %144 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !48
  %145 = insertelement <2 x i32> %144, i32 %109, i64 1, !dbg !48
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !48
  %147 = fadd <2 x float> %143, %146, !dbg !69
  %148 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !65
  %149 = insertelement <2 x i32> %148, i32 %121, i64 1, !dbg !65
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !65
  %151 = fadd <2 x float> %142, %150, !dbg !70
  %152 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !67
  %153 = insertelement <2 x i32> %152, i32 %125, i64 1, !dbg !67
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !67
  %155 = fadd <2 x float> %151, %154, !dbg !71
  %156 = fsub <2 x float> %155, %147, !dbg !72
  %157 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !73
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !73
  %159 = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %160 = fmul <2 x float> %156, %159, !dbg !73
  %161 = fadd <2 x float> %147, %160, !dbg !74
  %162 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !46
  %163 = insertelement <2 x i32> %162, i32 %106, i64 1, !dbg !46
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !46
  %165 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !68
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !68
  %167 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %168 = fadd <2 x float> %167, %164, !dbg !68
  %169 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !48
  %170 = insertelement <2 x i32> %169, i32 %110, i64 1, !dbg !48
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !48
  %172 = fadd <2 x float> %168, %171, !dbg !69
  %173 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !65
  %174 = insertelement <2 x i32> %173, i32 %122, i64 1, !dbg !65
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !65
  %176 = fadd <2 x float> %167, %175, !dbg !70
  %177 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !67
  %178 = insertelement <2 x i32> %177, i32 %126, i64 1, !dbg !67
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !67
  %180 = fadd <2 x float> %176, %179, !dbg !71
  %181 = fsub <2 x float> %180, %172, !dbg !72
  %182 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !73
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !73
  %184 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %185 = fmul <2 x float> %181, %184, !dbg !73
  %186 = fadd <2 x float> %172, %185, !dbg !74
  %187 = extractelement <2 x float> %161, i64 0, !dbg !75
  %188 = extractelement <2 x float> %161, i64 1, !dbg !76
  %189 = fsub float %187, %188, !dbg !75
  %190 = extractelement <2 x float> %186, i64 0, !dbg !75
  %191 = extractelement <2 x float> %186, i64 1, !dbg !76
  %192 = fsub float %190, %191, !dbg !75
  %193 = fmul float %189, %52, !dbg !77
  %194 = fmul float %192, %54, !dbg !77
  %195 = fadd float %188, %193, !dbg !76
  %196 = fadd float %191, %194, !dbg !76
  %197 = fadd float %60, %64, !dbg !78
  %198 = fadd float %61, %66, !dbg !78
  %199 = fadd float %197, %71, !dbg !79
  %200 = fadd float %198, %72, !dbg !79
  %201 = fadd float %199, %195, !dbg !80
  %202 = fadd float %200, %196, !dbg !80
  %203 = fcmp olt float %201, 0.000000e+00, !dbg !81
  %204 = fcmp olt float %202, 0.000000e+00, !dbg !81
  %205 = select i1 %203, float 0.000000e+00, float %201, !dbg !85
  %206 = select i1 %204, float 0.000000e+00, float %202, !dbg !85
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !86
  %208 = bitcast float %205 to i32, !dbg !87
  %209 = bitcast float %206 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %208, i32 %209, ptr addrspace(1) %207, i1 true) #1, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl47rdu4vnao2crvc4ftcurgvumnyyxuu7vy67rvqdmxboeagtbr.py", directory: "inductor_cache/l4")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 32, scope: !7)
!36 = !DILocation(line: 37, column: 37, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 42, column: 32, scope: !7)
!40 = !DILocation(line: 45, column: 32, scope: !7)
!41 = !DILocation(line: 46, column: 39, scope: !7)
!42 = !DILocation(line: 46, column: 48, scope: !7)
!43 = !DILocation(line: 46, column: 46, scope: !7)
!44 = !DILocation(line: 46, column: 37, scope: !7)
!45 = !DILocation(line: 46, column: 30, scope: !7)
!46 = !DILocation(line: 46, column: 53, scope: !7)
!47 = !DILocation(line: 48, column: 31, scope: !7)
!48 = !DILocation(line: 48, column: 54, scope: !7)
!49 = !DILocation(line: 52, column: 35, scope: !7)
!50 = !DILocation(line: 53, column: 40, scope: !7)
!51 = !DILocation(line: 53, column: 38, scope: !7)
!52 = !DILocation(line: 53, column: 48, scope: !7)
!53 = !DILocation(line: 53, column: 31, scope: !7)
!54 = !DILocation(line: 53, column: 55, scope: !7)
!55 = !DILocation(line: 55, column: 31, scope: !7)
!56 = !DILocation(line: 55, column: 55, scope: !7)
!57 = !DILocation(line: 59, column: 35, scope: !7)
!58 = !DILocation(line: 60, column: 49, scope: !7)
!59 = !DILocation(line: 60, column: 31, scope: !7)
!60 = !DILocation(line: 60, column: 56, scope: !7)
!61 = !DILocation(line: 62, column: 31, scope: !7)
!62 = !DILocation(line: 62, column: 56, scope: !7)
!63 = !DILocation(line: 67, column: 48, scope: !7)
!64 = !DILocation(line: 67, column: 31, scope: !7)
!65 = !DILocation(line: 67, column: 55, scope: !7)
!66 = !DILocation(line: 69, column: 31, scope: !7)
!67 = !DILocation(line: 69, column: 55, scope: !7)
!68 = !DILocation(line: 47, column: 19, scope: !7)
!69 = !DILocation(line: 49, column: 20, scope: !7)
!70 = !DILocation(line: 68, column: 20, scope: !7)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 71, column: 20, scope: !7)
!73 = !DILocation(line: 72, column: 20, scope: !7)
!74 = !DILocation(line: 73, column: 20, scope: !7)
!75 = !DILocation(line: 74, column: 20, scope: !7)
!76 = !DILocation(line: 76, column: 20, scope: !7)
!77 = !DILocation(line: 75, column: 20, scope: !7)
!78 = !DILocation(line: 77, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 81, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 82, column: 28, scope: !7)
!87 = !DILocation(line: 82, column: 40, scope: !7)
!88 = !DILocation(line: 82, column: 4, scope: !7)
