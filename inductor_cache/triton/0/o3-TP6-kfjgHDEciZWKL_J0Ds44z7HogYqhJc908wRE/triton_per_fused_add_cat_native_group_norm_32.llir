; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_cat_native_group_norm_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 3, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 5, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = and i32 %14, 7, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = icmp slt i32 %18, 128, !dbg !14
  %20 = shl i32 %14, 2, !dbg !15
  %21 = and i32 %20, 12, !dbg !15
  %22 = and i32 %20, 124, !dbg !15
  %23 = lshr i32 %22, 4, !dbg !16
  %.frozen = freeze i32 %18, !dbg !17
  %24 = sdiv i32 %.frozen, 32, !dbg !17
  %25 = mul i32 %24, 32, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = shl i32 %18, 7, !dbg !19
  %27 = or disjoint i32 %26, %22, !dbg !20
  %28 = sext i32 %27 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !21
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %41 = shl nsw i32 %.decomposed, 3, !dbg !25
  %42 = or disjoint i32 %41, %23, !dbg !26
  %43 = icmp slt i32 %42, 128, !dbg !27
  %44 = shl nsw i32 %42, 4, !dbg !28
  %45 = shl i32 %24, 11, !dbg !29
  %46 = or disjoint i32 %45, %21, !dbg !30
  %47 = add i32 %46, %44, !dbg !31
  %48 = sext i32 %47 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !32
  %50 = and i1 %19, %43, !dbg !33
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #5, !dbg !34
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !34
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !34
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !34
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !34
  %56 = and i32 %.decomposed, 536870904, !dbg !35
  %57 = icmp eq i32 %56, 16, !dbg !35
  %58 = or disjoint i32 %23, -128, !dbg !36
  %59 = add nsw i32 %58, %41, !dbg !37
  %60 = shl nsw i32 %59, 4, !dbg !38
  %61 = shl i32 %24, 10, !dbg !39
  %62 = or disjoint i32 %61, %21, !dbg !40
  %63 = add i32 %62, %60, !dbg !41
  %64 = sext i32 %63 to i64, !dbg !42
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !42
  %66 = and i1 %19, %57, !dbg !43
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #5, !dbg !44
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !44
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !44
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !44
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !44
  %72 = icmp sgt i32 %42, 191, !dbg !45
  %73 = or disjoint i32 %23, -192, !dbg !46
  %74 = add nsw i32 %73, %41, !dbg !47
  %75 = shl nsw i32 %74, 4, !dbg !48
  %76 = add i32 %62, %75, !dbg !49
  %77 = sext i32 %76 to i64, !dbg !50
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !50
  %79 = and i1 %19, %72, !dbg !51
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #5, !dbg !52
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !52
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !52
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !52
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !52
  %85 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !22
  %86 = insertelement <2 x i32> %85, i32 %32, i64 1, !dbg !22
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !22
  %88 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !24
  %89 = insertelement <2 x i32> %88, i32 %38, i64 1, !dbg !24
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !24
  %91 = insertelement <2 x i1> poison, i1 %57, i64 0, !dbg !53
  %92 = shufflevector <2 x i1> %91, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !53
  %93 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !53
  %94 = insertelement <2 x i32> %93, i32 %69, i64 1, !dbg !53
  %95 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !53
  %96 = insertelement <2 x i32> %95, i32 %82, i64 1, !dbg !53
  %97 = select <2 x i1> %92, <2 x i32> %94, <2 x i32> %96, !dbg !53
  %98 = insertelement <2 x i1> poison, i1 %43, i64 0, !dbg !54
  %99 = shufflevector <2 x i1> %98, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !54
  %100 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !54
  %101 = insertelement <2 x i32> %100, i32 %53, i64 1, !dbg !54
  %102 = select <2 x i1> %99, <2 x i32> %101, <2 x i32> %97, !dbg !54
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !54
  %104 = fadd <2 x float> %87, %90, !dbg !55
  %105 = fadd <2 x float> %104, %103, !dbg !56
  %106 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !22
  %107 = insertelement <2 x i32> %106, i32 %33, i64 1, !dbg !22
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !22
  %109 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !24
  %110 = insertelement <2 x i32> %109, i32 %39, i64 1, !dbg !24
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !24
  %112 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !53
  %113 = insertelement <2 x i32> %112, i32 %70, i64 1, !dbg !53
  %114 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !53
  %115 = insertelement <2 x i32> %114, i32 %83, i64 1, !dbg !53
  %116 = select <2 x i1> %92, <2 x i32> %113, <2 x i32> %115, !dbg !53
  %117 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !54
  %118 = insertelement <2 x i32> %117, i32 %54, i64 1, !dbg !54
  %119 = select <2 x i1> %99, <2 x i32> %118, <2 x i32> %116, !dbg !54
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !54
  %121 = fadd <2 x float> %108, %111, !dbg !55
  %122 = fadd <2 x float> %121, %120, !dbg !56
  %123 = extractelement <2 x float> %105, i64 0, !dbg !57
  %124 = extractelement <2 x float> %105, i64 1, !dbg !57
  %125 = fadd float %123, %124, !dbg !57
  %126 = extractelement <2 x float> %122, i64 1, !dbg !57
  %127 = fadd float %126, %125, !dbg !57
  %128 = extractelement <2 x float> %122, i64 0, !dbg !57
  %129 = fadd float %128, %127, !dbg !57
  %130 = select i1 %19, float %129, float 0.000000e+00, !dbg !57
  %131 = bitcast float %130 to i32, !dbg !62
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 16, i32 31), !dbg !62
  %133 = bitcast i32 %132 to float, !dbg !62
  %134 = fadd float %130, %133, !dbg !57
  %135 = bitcast float %134 to i32, !dbg !62
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !62
  %137 = bitcast i32 %136 to float, !dbg !62
  %138 = fadd float %134, %137, !dbg !57
  %139 = bitcast float %138 to i32, !dbg !62
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !62
  %141 = bitcast i32 %140 to float, !dbg !62
  %142 = fadd float %138, %141, !dbg !57
  %143 = bitcast float %142 to i32, !dbg !62
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !62
  %145 = bitcast i32 %144 to float, !dbg !62
  %146 = fadd float %142, %145, !dbg !57
  %147 = bitcast float %146 to i32, !dbg !62
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !62
  %149 = bitcast i32 %148 to float, !dbg !62
  %150 = fadd float %146, %149, !dbg !57
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !63
  %152 = bitcast float %150 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !63
  %154 = load float, ptr addrspace(3) %153, align 4, !dbg !63
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 1.280000e+02) #5, !dbg !63
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 1.280000e+02) #5, !dbg !63
  %157 = fsub float %123, %156, !dbg !64
  %158 = fsub float %124, %156, !dbg !64
  %159 = fsub float %126, %156, !dbg !64
  %160 = fsub float %128, %156, !dbg !64
  %161 = fmul float %157, %157, !dbg !65
  %162 = fmul float %158, %158, !dbg !65
  %163 = fmul float %159, %159, !dbg !65
  %164 = fmul float %160, %160, !dbg !65
  %165 = fadd float %161, %162, !dbg !66
  %166 = fadd float %163, %165, !dbg !66
  %167 = fadd float %164, %166, !dbg !66
  %168 = select i1 %19, float %167, float 0.000000e+00, !dbg !66
  %169 = bitcast float %168 to i32, !dbg !68
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 16, i32 31), !dbg !68
  %171 = bitcast i32 %170 to float, !dbg !68
  %172 = fadd float %168, %171, !dbg !66
  %173 = bitcast float %172 to i32, !dbg !68
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !68
  %175 = bitcast i32 %174 to float, !dbg !68
  %176 = fadd float %172, %175, !dbg !66
  %177 = bitcast float %176 to i32, !dbg !68
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 4, i32 31), !dbg !68
  %179 = bitcast i32 %178 to float, !dbg !68
  %180 = fadd float %176, %179, !dbg !66
  %181 = bitcast float %180 to i32, !dbg !68
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !68
  %183 = bitcast i32 %182 to float, !dbg !68
  %184 = fadd float %180, %183, !dbg !66
  %185 = bitcast float %184 to i32, !dbg !68
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 1, i32 31), !dbg !68
  %187 = bitcast i32 %186 to float, !dbg !68
  %188 = fadd float %184, %187, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %189 = bitcast float %188 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %189, i1 true) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %190 = load float, ptr addrspace(3) %153, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %189, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %191 = load i32, ptr addrspace(3) %153, align 4, !dbg !70
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float 1.280000e+02) #5, !dbg !71
  %193 = fadd float %192, 0x3EE4F8B580000000, !dbg !72
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !69
  %.not.i = icmp eq i32 %194, 0, !dbg !69
  br i1 %.not.i, label %197, label %195, !dbg !69

195:                                              ; preds = %11
  %196 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %193), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

197:                                              ; preds = %11
  %198 = tail call float @llvm.nvvm.rsqrt.approx.f(float %193), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

__nv_rsqrtf.exit:                                 ; preds = %195, %197
  %.0.i = phi float [ %196, %195 ], [ %198, %197 ], !dbg !69
  %199 = or disjoint i32 %13, %17, !dbg !13
  %200 = icmp slt i32 %199, 128, !dbg !14
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !73
  %202 = bitcast float %123 to i32, !dbg !74
  %203 = bitcast float %124 to i32, !dbg !74
  %204 = bitcast float %126 to i32, !dbg !74
  %205 = bitcast float %128 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %203, i32 %204, i32 %205, ptr addrspace(1) %201, i1 %19) #5, !dbg !74
  %206 = sext i32 %199 to i64, !dbg !75
  %207 = getelementptr float, ptr addrspace(1) %8, i64 %206, !dbg !75
  %208 = and i32 %14, 248, !dbg !76
  %209 = icmp eq i32 %208, 0, !dbg !76
  %210 = bitcast float %.0.i to i32, !dbg !76
  %211 = and i1 %209, %200, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %207, i1 %211) #5, !dbg !76
  %212 = getelementptr float, ptr addrspace(1) %6, i64 %206, !dbg !77
  %213 = bitcast float %155 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %212, i1 %211) #5, !dbg !78
  %214 = getelementptr float, ptr addrspace(1) %7, i64 %206, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %191, ptr addrspace(1) %214, i1 %211) #5, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvrjszbwmee3ndhwzicg77dkpdoe57l4hxi6qiya6hgzo4czsjbe.py", directory: "inductor_cache/vr")
!4 = !{ptr @triton_per_fused_add_cat_native_group_norm_32, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_cat_native_group_norm_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_cat_native_group_norm_32", linkageName: "triton_per_fused_add_cat_native_group_norm_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 40, scope: !7)
!20 = !DILocation(line: 35, column: 36, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 45, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 45, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 16, scope: !7)
!27 = !DILocation(line: 41, column: 18, scope: !7)
!28 = !DILocation(line: 42, column: 39, scope: !7)
!29 = !DILocation(line: 42, column: 57, scope: !7)
!30 = !DILocation(line: 42, column: 35, scope: !7)
!31 = !DILocation(line: 42, column: 52, scope: !7)
!32 = !DILocation(line: 42, column: 30, scope: !7)
!33 = !DILocation(line: 42, column: 69, scope: !7)
!34 = !DILocation(line: 42, column: 62, scope: !7)
!35 = !DILocation(line: 46, column: 18, scope: !7)
!36 = !DILocation(line: 47, column: 49, scope: !7)
!37 = !DILocation(line: 47, column: 54, scope: !7)
!38 = !DILocation(line: 47, column: 40, scope: !7)
!39 = !DILocation(line: 47, column: 67, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 62, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 79, scope: !7)
!44 = !DILocation(line: 47, column: 72, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 49, scope: !7)
!47 = !DILocation(line: 51, column: 54, scope: !7)
!48 = !DILocation(line: 51, column: 40, scope: !7)
!49 = !DILocation(line: 51, column: 62, scope: !7)
!50 = !DILocation(line: 51, column: 31, scope: !7)
!51 = !DILocation(line: 51, column: 80, scope: !7)
!52 = !DILocation(line: 51, column: 72, scope: !7)
!53 = !DILocation(line: 52, column: 34, scope: !7)
!54 = !DILocation(line: 53, column: 33, scope: !7)
!55 = !DILocation(line: 54, column: 20, scope: !7)
!56 = !DILocation(line: 55, column: 20, scope: !7)
!57 = !DILocation(line: 256, column: 15, scope: !58, inlinedAt: !61)
!58 = distinct !DILexicalBlockFile(scope: !60, file: !59, discriminator: 0)
!59 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!60 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!61 = !DILocation(line: 60, column: 26, scope: !7)
!62 = !DILocation(line: 267, column: 36, scope: !60, inlinedAt: !61)
!63 = !DILocation(line: 63, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 256, column: 15, scope: !58, inlinedAt: !67)
!67 = !DILocation(line: 68, column: 26, scope: !7)
!68 = !DILocation(line: 267, column: 36, scope: !60, inlinedAt: !67)
!69 = !DILocation(line: 73, column: 28, scope: !7)
!70 = !DILocation(line: 68, column: 29, scope: !7)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 74, column: 25, scope: !7)
!74 = !DILocation(line: 74, column: 46, scope: !7)
!75 = !DILocation(line: 75, column: 25, scope: !7)
!76 = !DILocation(line: 75, column: 37, scope: !7)
!77 = !DILocation(line: 76, column: 25, scope: !7)
!78 = !DILocation(line: 76, column: 37, scope: !7)
!79 = !DILocation(line: 77, column: 25, scope: !7)
!80 = !DILocation(line: 77, column: 37, scope: !7)
!81 = !DILocation(line: 77, column: 4, scope: !7)
