; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = icmp slt i32 %13, 123904, !dbg !14
  %18 = icmp slt i32 %15, 123904, !dbg !14
  %19 = icmp slt i32 %16, 123904, !dbg !14
  %20 = srem i32 %13, 64, !dbg !15
  %21 = srem i32 %14, 64, !dbg !15
  %22 = sext i32 %13 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = sext i32 %14 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = sext i32 %15 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !16
  %28 = sext i32 %16 to i64, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 %17) #2, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %17) #2, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !17
  %40 = sext i32 %20 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !18
  %42 = sext i32 %21 to i64, !dbg !18
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !18
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %17) #2, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !19
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %17) #2, !dbg !19
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !19
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !19
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !19
  %54 = getelementptr i1, ptr addrspace(1) %2, i64 %22, !dbg !20
  %55 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !17
  %56 = insertelement <4 x i32> %55, i32 %32, i64 1, !dbg !17
  %57 = insertelement <4 x i32> %56, i32 %33, i64 2, !dbg !17
  %58 = insertelement <4 x i32> %57, i32 %34, i64 3, !dbg !17
  %59 = bitcast <4 x i32> %58 to <4 x float>, !dbg !17
  %60 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !19
  %61 = insertelement <4 x i32> %60, i32 %46, i64 1, !dbg !19
  %62 = insertelement <4 x i32> %61, i32 %47, i64 2, !dbg !19
  %63 = insertelement <4 x i32> %62, i32 %48, i64 3, !dbg !19
  %64 = bitcast <4 x i32> %63 to <4 x float>, !dbg !19
  %65 = fadd <4 x float> %59, %64, !dbg !21
  %66 = fcmp ogt <4 x float> %65, zeroinitializer, !dbg !22
  %67 = extractelement <4 x float> %65, i64 0, !dbg !23
  %68 = fmul float %67, 0x3F847AE140000000, !dbg !24
  %69 = extractelement <4 x float> %65, i64 1, !dbg !23
  %70 = fmul float %69, 0x3F847AE140000000, !dbg !24
  %71 = extractelement <4 x float> %65, i64 2, !dbg !23
  %72 = fmul float %71, 0x3F847AE140000000, !dbg !24
  %73 = extractelement <4 x float> %65, i64 3, !dbg !23
  %74 = fmul float %73, 0x3F847AE140000000, !dbg !24
  %75 = extractelement <4 x i1> %66, i64 0, !dbg !23
  %76 = select i1 %75, float %67, float %68, !dbg !23
  %77 = extractelement <4 x i1> %66, i64 1, !dbg !23
  %78 = select i1 %77, float %69, float %70, !dbg !23
  %79 = extractelement <4 x i1> %66, i64 2, !dbg !23
  %80 = select i1 %79, float %71, float %72, !dbg !23
  %81 = extractelement <4 x i1> %66, i64 3, !dbg !23
  %82 = select i1 %81, float %73, float %74, !dbg !23
  %83 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !17
  %84 = insertelement <4 x i32> %83, i32 %37, i64 1, !dbg !17
  %85 = insertelement <4 x i32> %84, i32 %38, i64 2, !dbg !17
  %86 = insertelement <4 x i32> %85, i32 %39, i64 3, !dbg !17
  %87 = bitcast <4 x i32> %86 to <4 x float>, !dbg !17
  %88 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !19
  %89 = insertelement <4 x i32> %88, i32 %51, i64 1, !dbg !19
  %90 = insertelement <4 x i32> %89, i32 %52, i64 2, !dbg !19
  %91 = insertelement <4 x i32> %90, i32 %53, i64 3, !dbg !19
  %92 = bitcast <4 x i32> %91 to <4 x float>, !dbg !19
  %93 = fadd <4 x float> %87, %92, !dbg !21
  %94 = fcmp ogt <4 x float> %93, zeroinitializer, !dbg !22
  %95 = extractelement <4 x float> %93, i64 0, !dbg !23
  %96 = fmul float %95, 0x3F847AE140000000, !dbg !24
  %97 = extractelement <4 x float> %93, i64 1, !dbg !23
  %98 = fmul float %97, 0x3F847AE140000000, !dbg !24
  %99 = extractelement <4 x float> %93, i64 2, !dbg !23
  %100 = fmul float %99, 0x3F847AE140000000, !dbg !24
  %101 = extractelement <4 x float> %93, i64 3, !dbg !23
  %102 = fmul float %101, 0x3F847AE140000000, !dbg !24
  %103 = extractelement <4 x i1> %94, i64 0, !dbg !23
  %104 = select i1 %103, float %95, float %96, !dbg !23
  %105 = extractelement <4 x i1> %94, i64 1, !dbg !23
  %106 = select i1 %105, float %97, float %98, !dbg !23
  %107 = extractelement <4 x i1> %94, i64 2, !dbg !23
  %108 = select i1 %107, float %99, float %100, !dbg !23
  %109 = extractelement <4 x i1> %94, i64 3, !dbg !23
  %110 = select i1 %109, float %101, float %102, !dbg !23
  %111 = zext <4 x i1> %66 to <4 x i8>, !dbg !25
  %112 = bitcast <4 x i8> %111 to i32, !dbg !25
  %113 = zext <4 x i1> %94 to <4 x i8>, !dbg !25
  %114 = bitcast <4 x i8> %113 to i32, !dbg !25
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %112, i32 %114, ptr addrspace(1) %54, i1 %17) #2, !dbg !25
  %115 = zext nneg i32 %9 to i64, !dbg !26
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !26
  %117 = bitcast float %76 to i32, !dbg !26
  %118 = bitcast float %78 to i32, !dbg !26
  %119 = bitcast float %80 to i32, !dbg !26
  %120 = bitcast float %82 to i32, !dbg !26
  %121 = bitcast float %104 to i32, !dbg !26
  %122 = bitcast float %106 to i32, !dbg !26
  %123 = bitcast float %108 to i32, !dbg !26
  %124 = bitcast float %110 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %116, i32 %117, i32 %118, i32 %119, i32 %120, i1 true) #2, !dbg !26
  %125 = getelementptr inbounds i8, ptr addrspace(3) %116, i64 16, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %125, i32 %121, i32 %122, i32 %123, i32 %124, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %126 = zext nneg i32 %11 to i64, !dbg !26
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !26
  %128 = zext nneg i32 %12 to i64, !dbg !26
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %128, !dbg !26
  %130 = load <4 x i32>, ptr addrspace(3) %129, align 16, !dbg !26
  %.extract = load i32, ptr addrspace(3) %127, align 16, !dbg !26
  %131 = getelementptr inbounds i8, ptr addrspace(3) %127, i64 4, !dbg !26
  %.extract8 = load i32, ptr addrspace(3) %131, align 4, !dbg !26
  %132 = getelementptr inbounds i8, ptr addrspace(3) %127, i64 8, !dbg !26
  %.extract9 = load i32, ptr addrspace(3) %132, align 8, !dbg !26
  %133 = getelementptr inbounds i8, ptr addrspace(3) %127, i64 12, !dbg !26
  %.extract10 = load i32, ptr addrspace(3) %133, align 4, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %27, i1 %18) #2, !dbg !26
  %.extract11 = extractelement <4 x i32> %130, i64 0, !dbg !26
  %.extract12 = extractelement <4 x i32> %130, i64 1, !dbg !26
  %.extract13 = extractelement <4 x i32> %130, i64 2, !dbg !26
  %.extract14 = extractelement <4 x i32> %130, i64 3, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %29, i1 %19) #2, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4bwh3j7sk2uhq2csctmyt7bnov6gdr2s7s2kfhzytnwmq265nuv.py", directory: "inductor_cache/4b")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_5", linkageName: "triton_poi_fused_convolution_leaky_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 25, scope: !7)
!21 = !DILocation(line: 28, column: 18, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 33, column: 32, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 39, scope: !7)
!27 = !DILocation(line: 35, column: 4, scope: !7)
