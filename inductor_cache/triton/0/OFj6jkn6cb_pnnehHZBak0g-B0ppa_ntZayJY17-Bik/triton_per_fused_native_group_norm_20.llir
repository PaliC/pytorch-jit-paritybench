; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = or disjoint i32 %10, 64, !dbg !12
  %12 = and i32 %8, 127, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = icmp slt i32 %13, 128, !dbg !14
  %16 = icmp slt i32 %14, 128, !dbg !14
  %17 = shl i32 %8, 2, !dbg !15
  %18 = and i32 %17, 12, !dbg !15
  %19 = shl i32 %13, 4, !dbg !16
  %20 = shl i32 %14, 4, !dbg !16
  %21 = or disjoint i32 %19, %18, !dbg !17
  %22 = or disjoint i32 %20, %18, !dbg !17
  %23 = sext i32 %21 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !18
  %25 = sext i32 %22 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = fadd float %32, %33, !dbg !20
  %46 = fadd float %45, %34, !dbg !20
  %47 = fadd float %46, %35, !dbg !20
  %48 = select i1 %15, float %47, float 0.000000e+00, !dbg !20
  %49 = fadd float %41, %42, !dbg !20
  %50 = fadd float %49, %43, !dbg !20
  %51 = fadd float %50, %44, !dbg !20
  %52 = select i1 %16, float %51, float 0.000000e+00, !dbg !20
  %53 = bitcast float %48 to i32, !dbg !25
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = fadd float %48, %55, !dbg !20
  %57 = bitcast float %56 to i32, !dbg !25
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = fadd float %56, %59, !dbg !20
  %61 = bitcast float %52 to i32, !dbg !25
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !25
  %63 = bitcast i32 %62 to float, !dbg !25
  %64 = fadd float %52, %63, !dbg !20
  %65 = bitcast float %64 to i32, !dbg !25
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !25
  %67 = bitcast i32 %66 to float, !dbg !25
  %68 = fadd float %64, %67, !dbg !20
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %70 = bitcast float %60 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #5, !dbg !26
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %72 = bitcast float %68 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %74 = load float, ptr addrspace(3) %73, align 4, !dbg !26
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 1.600000e+01) #5, !dbg !26
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 1.600000e+01) #5, !dbg !26
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 1.600000e+01) #5, !dbg !26
  %78 = fsub float %32, %76, !dbg !27
  %79 = fsub float %33, %76, !dbg !27
  %80 = fsub float %34, %76, !dbg !27
  %81 = fsub float %35, %76, !dbg !27
  %82 = fsub float %41, %77, !dbg !27
  %83 = fsub float %42, %77, !dbg !27
  %84 = fsub float %43, %77, !dbg !27
  %85 = fsub float %44, %77, !dbg !27
  %86 = fmul float %78, %78, !dbg !28
  %87 = fmul float %79, %79, !dbg !28
  %88 = fmul float %80, %80, !dbg !28
  %89 = fmul float %81, %81, !dbg !28
  %90 = fmul float %82, %82, !dbg !28
  %91 = fmul float %83, %83, !dbg !28
  %92 = fmul float %84, %84, !dbg !28
  %93 = fmul float %85, %85, !dbg !28
  %94 = fadd float %86, %87, !dbg !29
  %95 = fadd float %88, %94, !dbg !29
  %96 = fadd float %89, %95, !dbg !29
  %97 = select i1 %15, float %96, float 0.000000e+00, !dbg !29
  %98 = fadd float %90, %91, !dbg !29
  %99 = fadd float %92, %98, !dbg !29
  %100 = fadd float %93, %99, !dbg !29
  %101 = select i1 %16, float %100, float 0.000000e+00, !dbg !29
  %102 = bitcast float %97 to i32, !dbg !31
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = fadd float %97, %104, !dbg !29
  %106 = bitcast float %105 to i32, !dbg !31
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = fadd float %105, %108, !dbg !29
  %110 = bitcast float %101 to i32, !dbg !31
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !31
  %112 = bitcast i32 %111 to float, !dbg !31
  %113 = fadd float %101, %112, !dbg !29
  %114 = bitcast float %113 to i32, !dbg !31
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = fadd float %113, %116, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %118 = bitcast float %109 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %118, i1 true) #5, !dbg !32
  %119 = bitcast float %117 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %119, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %120 = load float, ptr addrspace(3) %73, align 4, !dbg !32
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 1.600000e+01) #5, !dbg !33
  %122 = fadd float %121, 0x3EE4F8B580000000, !dbg !34
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %123, 0, !dbg !32
  br i1 %.not.i, label %126, label %124, !dbg !32

124:                                              ; preds = %5
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %122), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

126:                                              ; preds = %5
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %122), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %124, %126
  %.0.i = phi float [ %125, %124 ], [ %127, %126 ], !dbg !32
  %128 = or disjoint i32 %7, %12, !dbg !13
  %129 = icmp slt i32 %128, 128, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %130 = sext i32 %128 to i64, !dbg !36
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !36
  %132 = and i32 %8, 128, !dbg !37
  %133 = icmp eq i32 %132, 0, !dbg !37
  %134 = bitcast float %.0.i to i32, !dbg !37
  %135 = and i1 %133, %129, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %131, i1 %135) #5, !dbg !37
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !38
  %137 = bitcast float %75 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %136, i1 %135) #5, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmr3zaapde5j7s22q65pgej6jacjvn7wyrepkn7ztnsvvwfgtalq.py", directory: "inductor_cache/mr")
!4 = !{ptr @triton_per_fused_native_group_norm_20, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_20, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_20", linkageName: "triton_per_fused_native_group_norm_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 49, column: 28, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 50, column: 4, scope: !7)
!36 = !DILocation(line: 51, column: 28, scope: !7)
!37 = !DILocation(line: 51, column: 40, scope: !7)
!38 = !DILocation(line: 52, column: 25, scope: !7)
!39 = !DILocation(line: 52, column: 37, scope: !7)
!40 = !DILocation(line: 52, column: 4, scope: !7)
