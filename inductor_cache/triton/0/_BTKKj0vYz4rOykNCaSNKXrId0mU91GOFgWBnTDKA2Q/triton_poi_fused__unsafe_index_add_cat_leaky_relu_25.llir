; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_cat_leaky_relu_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 2, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen, 16, !dbg !14
  %15 = srem i32 %14, 16, !dbg !15
  %16 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = srem i32 %13, 16, !dbg !16
  %.frozen4 = freeze i32 %12, !dbg !17
  %18 = sdiv i32 %.frozen4, 256, !dbg !17
  %19 = srem i32 %18, 64, !dbg !18
  %.frozen6 = freeze i32 %12, !dbg !19
  %20 = sdiv i32 %.frozen6, 16384, !dbg !19
  %21 = mul i32 %18, 256, !dbg !20
  %.decomposed5 = sub i32 %.frozen4, %21, !dbg !20
  %22 = sext i32 %15 to i64, !dbg !21
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !22
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !22
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !22
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !22
  %28 = sext i32 %.decomposed to i64, !dbg !23
  %29 = getelementptr i64, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = sext i32 %17 to i64, !dbg !23
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !24
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !24
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !24
  %35 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !24
  %36 = extractvalue { i64, i64 } %35, 0, !dbg !24
  %37 = extractvalue { i64, i64 } %35, 1, !dbg !24
  %38 = lshr i64 %24, 60, !dbg !25
  %39 = and i64 %38, 8, !dbg !25
  %40 = add i64 %39, %24, !dbg !25
  %41 = lshr i64 %33, 60, !dbg !26
  %42 = and i64 %41, 8, !dbg !26
  %43 = lshr i64 %34, 60, !dbg !26
  %44 = and i64 %43, 8, !dbg !26
  %45 = lshr i64 %36, 60, !dbg !26
  %46 = and i64 %45, 8, !dbg !26
  %47 = lshr i64 %37, 60, !dbg !26
  %48 = and i64 %47, 8, !dbg !26
  %49 = shl i64 %40, 3, !dbg !27
  %50 = shl nsw i32 %18, 6, !dbg !28
  %51 = sext i32 %50 to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %52, i64 %42, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %53, i64 %49, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %51, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %56, i64 %44, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %49, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %51, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %46, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %49, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %51, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %48, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %49, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %51, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = fcmp ogt float %69, 0.000000e+00, !dbg !32
  %77 = fcmp ogt float %71, 0.000000e+00, !dbg !32
  %78 = fcmp ogt float %73, 0.000000e+00, !dbg !32
  %79 = fcmp ogt float %75, 0.000000e+00, !dbg !32
  %80 = fmul float %69, 0x3FC99999A0000000, !dbg !33
  %81 = fmul float %71, 0x3FC99999A0000000, !dbg !33
  %82 = fmul float %73, 0x3FC99999A0000000, !dbg !33
  %83 = fmul float %75, 0x3FC99999A0000000, !dbg !33
  %84 = select i1 %76, float %69, float %80, !dbg !34
  %85 = select i1 %77, float %71, float %81, !dbg !34
  %86 = select i1 %78, float %73, float %82, !dbg !34
  %87 = select i1 %79, float %75, float %83, !dbg !34
  %88 = icmp slt i32 %19, 48, !dbg !35
  %89 = mul i32 %20, 16384, !dbg !36
  %srem.decomposed = sub i32 %.frozen6, %89, !dbg !36
  %90 = mul nsw i32 %20, 12288, !dbg !37
  %91 = add nsw i32 %90, %srem.decomposed, !dbg !38
  %92 = sext i32 %91 to i64, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !39
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #1, !dbg !40
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !40
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !40
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !40
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !40
  %99 = icmp sgt i32 %19, 47, !dbg !41
  %100 = shl nsw i32 %19, 8, !dbg !42
  %101 = shl nsw i32 %20, 12, !dbg !43
  %102 = add nsw i32 %.decomposed5, -12288, !dbg !42
  %103 = add nsw i32 %102, %101, !dbg !44
  %104 = add nsw i32 %103, %100, !dbg !45
  %105 = sext i32 %104 to i64, !dbg !46
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !46
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #1, !dbg !47
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !47
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !47
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !47
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !47
  %.v = select i1 %88, i32 %95, i32 %108, !dbg !48
  %112 = bitcast i32 %.v to float, !dbg !48
  %.v1 = select i1 %88, i32 %96, i32 %109, !dbg !48
  %113 = bitcast i32 %.v1 to float, !dbg !48
  %.v2 = select i1 %88, i32 %97, i32 %110, !dbg !48
  %114 = bitcast i32 %.v2 to float, !dbg !48
  %.v3 = select i1 %88, i32 %98, i32 %111, !dbg !48
  %115 = bitcast i32 %.v3 to float, !dbg !48
  %116 = fadd float %84, %112, !dbg !49
  %117 = fadd float %85, %113, !dbg !49
  %118 = fadd float %86, %114, !dbg !49
  %119 = fadd float %87, %115, !dbg !49
  %120 = sext i32 %12 to i64, !dbg !50
  %121 = getelementptr float, ptr addrspace(1) %4, i64 %120, !dbg !50
  %122 = bitcast float %116 to i32, !dbg !51
  %123 = bitcast float %117 to i32, !dbg !51
  %124 = bitcast float %118 to i32, !dbg !51
  %125 = bitcast float %119 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %122, i32 %123, i32 %124, i32 %125, ptr addrspace(1) %121, i1 true) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdykkn5hopi42so23zatyrrdcqqncoyslqgz272msl6ha4uxawfe.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_cat_leaky_relu_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_cat_leaky_relu_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_cat_leaky_relu_25", linkageName: "triton_poi_fused__unsafe_index_add_cat_leaky_relu_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 32, scope: !7)
!26 = !DILocation(line: 39, column: 32, scope: !7)
!27 = !DILocation(line: 40, column: 39, scope: !7)
!28 = !DILocation(line: 40, column: 49, scope: !7)
!29 = !DILocation(line: 40, column: 46, scope: !7)
!30 = !DILocation(line: 40, column: 30, scope: !7)
!31 = !DILocation(line: 40, column: 54, scope: !7)
!32 = !DILocation(line: 42, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 34, scope: !7)
!35 = !DILocation(line: 50, column: 20, scope: !7)
!36 = !DILocation(line: 51, column: 36, scope: !7)
!37 = !DILocation(line: 51, column: 53, scope: !7)
!38 = !DILocation(line: 51, column: 47, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 58, scope: !7)
!41 = !DILocation(line: 52, column: 21, scope: !7)
!42 = !DILocation(line: 55, column: 41, scope: !7)
!43 = !DILocation(line: 55, column: 60, scope: !7)
!44 = !DILocation(line: 55, column: 36, scope: !7)
!45 = !DILocation(line: 55, column: 55, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 65, scope: !7)
!48 = !DILocation(line: 56, column: 35, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 25, scope: !7)
!51 = !DILocation(line: 58, column: 37, scope: !7)
!52 = !DILocation(line: 58, column: 4, scope: !7)
