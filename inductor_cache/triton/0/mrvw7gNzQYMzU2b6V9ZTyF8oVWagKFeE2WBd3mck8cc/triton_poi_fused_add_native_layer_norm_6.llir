; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %13, 256, !dbg !12
  %16 = or disjoint i32 %13, 384, !dbg !12
  %17 = shl i32 %12, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %11, %13, !dbg !13
  %20 = or disjoint i32 %11, %14, !dbg !13
  %21 = or disjoint i32 %11, %15, !dbg !13
  %22 = or disjoint i32 %11, %16, !dbg !13
  %23 = or disjoint i32 %11, %18, !dbg !13
  %24 = icmp slt i32 %19, 384, !dbg !14
  %25 = icmp slt i32 %20, 384, !dbg !14
  %26 = icmp slt i32 %21, 384, !dbg !14
  %27 = icmp slt i32 %22, 384, !dbg !14
  %28 = icmp slt i32 %23, 384, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %30 = shl i32 %29, 1, !dbg !16
  %31 = icmp slt i32 %30, 256, !dbg !17
  %.frozen = freeze i32 %23, !dbg !18
  %32 = sdiv i32 %.frozen, 96, !dbg !18
  %33 = mul i32 %32, 96, !dbg !19
  %.decomposed = sub i32 %.frozen, %33, !dbg !19
  %.frozen40 = freeze i32 %19, !dbg !18
  %34 = sdiv i32 %.frozen40, 96, !dbg !18
  %35 = mul i32 %34, 96, !dbg !19
  %.decomposed41 = sub i32 %.frozen40, %35, !dbg !19
  %.frozen42 = freeze i32 %20, !dbg !18
  %36 = sdiv i32 %.frozen42, 96, !dbg !18
  %37 = mul i32 %36, 96, !dbg !19
  %.decomposed43 = sub i32 %.frozen42, %37, !dbg !19
  %.frozen44 = freeze i32 %21, !dbg !18
  %38 = sdiv i32 %.frozen44, 96, !dbg !18
  %39 = mul i32 %38, 96, !dbg !19
  %.decomposed45 = sub i32 %.frozen44, %39, !dbg !19
  %.frozen46 = freeze i32 %22, !dbg !18
  %40 = sdiv i32 %.frozen46, 96, !dbg !18
  %41 = mul i32 %40, 96, !dbg !19
  %.decomposed47 = sub i32 %.frozen46, %41, !dbg !19
  %.frozen48 = freeze i32 %30, !dbg !20
  %42 = sdiv i32 %.frozen48, 16, !dbg !20
  %43 = mul i32 %42, 16, !dbg !21
  %.decomposed49 = sub i32 %.frozen48, %43, !dbg !21
  %44 = shl i32 %19, 8, !dbg !22
  %45 = shl i32 %20, 8, !dbg !22
  %46 = shl i32 %21, 8, !dbg !22
  %47 = shl i32 %22, 8, !dbg !22
  %48 = add i32 %44, %30, !dbg !23
  %49 = add i32 %45, %30, !dbg !23
  %50 = add i32 %46, %30, !dbg !23
  %51 = add i32 %47, %30, !dbg !23
  %52 = sext i32 %48 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %49 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = sext i32 %50 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = sext i32 %51 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = and i1 %31, %24, !dbg !25
  %61 = and i1 %31, %25, !dbg !25
  %62 = and i1 %31, %26, !dbg !25
  %63 = and i1 %31, %27, !dbg !25
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %60) #4, !dbg !26
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %61) #4, !dbg !26
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %62) #4, !dbg !26
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %63) #4, !dbg !26
  %68 = sext i32 %.decomposed to i64, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %28) #4, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = shl nsw i32 %.decomposed41, 8, !dbg !29
  %76 = shl nsw i32 %.decomposed43, 8, !dbg !29
  %77 = shl nsw i32 %.decomposed45, 8, !dbg !29
  %78 = shl nsw i32 %.decomposed47, 8, !dbg !29
  %79 = add i32 %75, %30, !dbg !30
  %80 = add i32 %76, %30, !dbg !30
  %81 = add i32 %77, %30, !dbg !30
  %82 = add i32 %78, %30, !dbg !30
  %83 = sext i32 %79 to i64, !dbg !31
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !31
  %85 = sext i32 %80 to i64, !dbg !31
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !31
  %87 = sext i32 %81 to i64, !dbg !31
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !31
  %89 = sext i32 %82 to i64, !dbg !31
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !31
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %84, i1 %60) #4, !dbg !32
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %86, i1 %61) #4, !dbg !32
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %88, i1 %62) #4, !dbg !32
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %90, i1 %63) #4, !dbg !32
  %95 = srem i32 %42, 8, !dbg !33
  %96 = shl nsw i32 %95, 3, !dbg !34
  %97 = shl nsw i32 %.decomposed41, 6, !dbg !35
  %98 = shl nsw i32 %.decomposed43, 6, !dbg !35
  %99 = shl nsw i32 %.decomposed45, 6, !dbg !35
  %100 = shl nsw i32 %.decomposed47, 6, !dbg !35
  %.lhs.trunc = trunc nsw i32 %.decomposed49 to i8, !dbg !36
  %101 = srem i8 %.lhs.trunc, 8, !dbg !36
  %.sext = sext i8 %101 to i32, !dbg !36
  %102 = add nsw i32 %96, %.sext, !dbg !37
  %103 = add nsw i32 %102, %97, !dbg !38
  %104 = add nsw i32 %102, %98, !dbg !38
  %105 = add nsw i32 %102, %99, !dbg !38
  %106 = add nsw i32 %102, %100, !dbg !38
  %107 = sext i32 %103 to i64, !dbg !39
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !39
  %109 = sext i32 %104 to i64, !dbg !39
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !39
  %111 = sext i32 %105 to i64, !dbg !39
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !39
  %113 = sext i32 %106 to i64, !dbg !39
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !39
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %108, i1 %60) #4, !dbg !40
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %110, i1 %61) #4, !dbg !40
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %112, i1 %62) #4, !dbg !40
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %114, i1 %63) #4, !dbg !40
  %119 = shl i32 %34, 8, !dbg !41
  %120 = shl i32 %36, 8, !dbg !41
  %121 = shl i32 %38, 8, !dbg !41
  %122 = shl i32 %40, 8, !dbg !41
  %123 = add i32 %119, %30, !dbg !42
  %124 = add i32 %120, %30, !dbg !42
  %125 = add i32 %121, %30, !dbg !42
  %126 = add i32 %122, %30, !dbg !42
  %127 = sext i32 %123 to i64, !dbg !43
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %127, !dbg !43
  %129 = sext i32 %124 to i64, !dbg !43
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !43
  %131 = sext i32 %125 to i64, !dbg !43
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %131, !dbg !43
  %133 = sext i32 %126 to i64, !dbg !43
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %133, !dbg !43
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %128, i1 %60) #4, !dbg !44
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %130, i1 %61) #4, !dbg !44
  %137 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %132, i1 %62) #4, !dbg !44
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %134, i1 %63) #4, !dbg !44
  %139 = getelementptr float, ptr addrspace(1) %5, i64 %127, !dbg !45
  %140 = getelementptr float, ptr addrspace(1) %5, i64 %129, !dbg !45
  %141 = getelementptr float, ptr addrspace(1) %5, i64 %131, !dbg !45
  %142 = getelementptr float, ptr addrspace(1) %5, i64 %133, !dbg !45
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %139, i1 %60) #4, !dbg !46
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !46
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !46
  %146 = bitcast i32 %144 to float, !dbg !46
  %147 = bitcast i32 %145 to float, !dbg !46
  %148 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %140, i1 %61) #4, !dbg !46
  %149 = extractvalue { i32, i32 } %148, 0, !dbg !46
  %150 = extractvalue { i32, i32 } %148, 1, !dbg !46
  %151 = bitcast i32 %149 to float, !dbg !46
  %152 = bitcast i32 %150 to float, !dbg !46
  %153 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %141, i1 %62) #4, !dbg !46
  %154 = extractvalue { i32, i32 } %153, 0, !dbg !46
  %155 = extractvalue { i32, i32 } %153, 1, !dbg !46
  %156 = bitcast i32 %154 to float, !dbg !46
  %157 = bitcast i32 %155 to float, !dbg !46
  %158 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %142, i1 %63) #4, !dbg !46
  %159 = extractvalue { i32, i32 } %158, 0, !dbg !46
  %160 = extractvalue { i32, i32 } %158, 1, !dbg !46
  %161 = bitcast i32 %159 to float, !dbg !46
  %162 = bitcast i32 %160 to float, !dbg !46
  %.idx = shl nuw nsw i32 %18, 3, !dbg !47
  %163 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !47
  %164 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #4, !dbg !47
  %165 = shl nuw nsw i32 %18, 1, !dbg !47
  %166 = or disjoint i32 %165, 2, !dbg !47
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !47
  %168 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #4, !dbg !47
  %169 = or disjoint i32 %165, 4, !dbg !47
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !47
  %171 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #4, !dbg !47
  %172 = or disjoint i32 %165, 6, !dbg !47
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !47
  %174 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %.idx1 = shl nuw nsw i32 %13, 3, !dbg !47
  %175 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !47
  %176 = load float, ptr addrspace(3) %175, align 8, !dbg !47
  %.idx2 = shl nuw nsw i32 %14, 3, !dbg !47
  %177 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !47
  %178 = load float, ptr addrspace(3) %177, align 8, !dbg !47
  %.idx3 = shl nuw nsw i32 %15, 3, !dbg !47
  %179 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !47
  %180 = load float, ptr addrspace(3) %179, align 8, !dbg !47
  %.idx4 = shl nuw nsw i32 %16, 3, !dbg !47
  %181 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !47
  %182 = load float, ptr addrspace(3) %181, align 8, !dbg !47
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 9.600000e+01) #4, !dbg !48
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 9.600000e+01) #4, !dbg !48
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 9.600000e+01) #4, !dbg !48
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 9.600000e+01) #4, !dbg !48
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 9.600000e+01) #4, !dbg !48
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 9.600000e+01) #4, !dbg !48
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float 9.600000e+01) #4, !dbg !48
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 9.600000e+01) #4, !dbg !48
  %191 = fadd float %183, 0x3EB0C6F7A0000000, !dbg !49
  %192 = fadd float %184, 0x3EB0C6F7A0000000, !dbg !49
  %193 = fadd float %185, 0x3EB0C6F7A0000000, !dbg !49
  %194 = fadd float %186, 0x3EB0C6F7A0000000, !dbg !49
  %195 = fadd float %187, 0x3EB0C6F7A0000000, !dbg !49
  %196 = fadd float %188, 0x3EB0C6F7A0000000, !dbg !49
  %197 = fadd float %189, 0x3EB0C6F7A0000000, !dbg !49
  %198 = fadd float %190, 0x3EB0C6F7A0000000, !dbg !49
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i = icmp eq i32 %199, 0, !dbg !50
  br i1 %.not.i, label %202, label %200, !dbg !50

200:                                              ; preds = %9
  %201 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %191), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

202:                                              ; preds = %9
  %203 = tail call float @llvm.nvvm.rsqrt.approx.f(float %191), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %200, %202
  %.0.i = phi float [ %201, %200 ], [ %203, %202 ], !dbg !50
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i19 = icmp eq i32 %204, 0, !dbg !50
  br i1 %.not.i19, label %207, label %205, !dbg !50

205:                                              ; preds = %__nv_rsqrtf.exit
  %206 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %192), !dbg !50
  br label %__nv_rsqrtf.exit21, !dbg !50

207:                                              ; preds = %__nv_rsqrtf.exit
  %208 = tail call float @llvm.nvvm.rsqrt.approx.f(float %192), !dbg !50
  br label %__nv_rsqrtf.exit21, !dbg !50

__nv_rsqrtf.exit21:                               ; preds = %205, %207
  %.0.i20 = phi float [ %206, %205 ], [ %208, %207 ], !dbg !50
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i22 = icmp eq i32 %209, 0, !dbg !50
  br i1 %.not.i22, label %212, label %210, !dbg !50

210:                                              ; preds = %__nv_rsqrtf.exit21
  %211 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %193), !dbg !50
  br label %__nv_rsqrtf.exit24, !dbg !50

212:                                              ; preds = %__nv_rsqrtf.exit21
  %213 = tail call float @llvm.nvvm.rsqrt.approx.f(float %193), !dbg !50
  br label %__nv_rsqrtf.exit24, !dbg !50

__nv_rsqrtf.exit24:                               ; preds = %210, %212
  %.0.i23 = phi float [ %211, %210 ], [ %213, %212 ], !dbg !50
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i25 = icmp eq i32 %214, 0, !dbg !50
  br i1 %.not.i25, label %217, label %215, !dbg !50

215:                                              ; preds = %__nv_rsqrtf.exit24
  %216 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %194), !dbg !50
  br label %__nv_rsqrtf.exit27, !dbg !50

217:                                              ; preds = %__nv_rsqrtf.exit24
  %218 = tail call float @llvm.nvvm.rsqrt.approx.f(float %194), !dbg !50
  br label %__nv_rsqrtf.exit27, !dbg !50

__nv_rsqrtf.exit27:                               ; preds = %215, %217
  %.0.i26 = phi float [ %216, %215 ], [ %218, %217 ], !dbg !50
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i28 = icmp eq i32 %219, 0, !dbg !50
  br i1 %.not.i28, label %222, label %220, !dbg !50

220:                                              ; preds = %__nv_rsqrtf.exit27
  %221 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %195), !dbg !50
  br label %__nv_rsqrtf.exit30, !dbg !50

222:                                              ; preds = %__nv_rsqrtf.exit27
  %223 = tail call float @llvm.nvvm.rsqrt.approx.f(float %195), !dbg !50
  br label %__nv_rsqrtf.exit30, !dbg !50

__nv_rsqrtf.exit30:                               ; preds = %220, %222
  %.0.i29 = phi float [ %221, %220 ], [ %223, %222 ], !dbg !50
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i31 = icmp eq i32 %224, 0, !dbg !50
  br i1 %.not.i31, label %227, label %225, !dbg !50

225:                                              ; preds = %__nv_rsqrtf.exit30
  %226 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %196), !dbg !50
  br label %__nv_rsqrtf.exit33, !dbg !50

227:                                              ; preds = %__nv_rsqrtf.exit30
  %228 = tail call float @llvm.nvvm.rsqrt.approx.f(float %196), !dbg !50
  br label %__nv_rsqrtf.exit33, !dbg !50

__nv_rsqrtf.exit33:                               ; preds = %225, %227
  %.0.i32 = phi float [ %226, %225 ], [ %228, %227 ], !dbg !50
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i34 = icmp eq i32 %229, 0, !dbg !50
  br i1 %.not.i34, label %232, label %230, !dbg !50

230:                                              ; preds = %__nv_rsqrtf.exit33
  %231 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %197), !dbg !50
  br label %__nv_rsqrtf.exit36, !dbg !50

232:                                              ; preds = %__nv_rsqrtf.exit33
  %233 = tail call float @llvm.nvvm.rsqrt.approx.f(float %197), !dbg !50
  br label %__nv_rsqrtf.exit36, !dbg !50

__nv_rsqrtf.exit36:                               ; preds = %230, %232
  %.0.i35 = phi float [ %231, %230 ], [ %233, %232 ], !dbg !50
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i37 = icmp eq i32 %234, 0, !dbg !50
  br i1 %.not.i37, label %237, label %235, !dbg !50

235:                                              ; preds = %__nv_rsqrtf.exit36
  %236 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %198), !dbg !50
  br label %__nv_rsqrtf.exit39, !dbg !50

237:                                              ; preds = %__nv_rsqrtf.exit36
  %238 = tail call float @llvm.nvvm.rsqrt.approx.f(float %198), !dbg !50
  br label %__nv_rsqrtf.exit39, !dbg !50

__nv_rsqrtf.exit39:                               ; preds = %235, %237
  %.0.i38 = phi float [ %236, %235 ], [ %238, %237 ], !dbg !50
  %239 = extractvalue { i32, i32 } %67, 1, !dbg !26
  %240 = bitcast i32 %239 to float, !dbg !26
  %241 = fadd float %182, %240, !dbg !47
  %242 = extractvalue { i32, i32 } %94, 1, !dbg !32
  %243 = bitcast i32 %242 to float, !dbg !32
  %244 = extractvalue { i32, i32 } %118, 1, !dbg !40
  %245 = bitcast i32 %244 to float, !dbg !40
  %246 = fadd float %243, %245, !dbg !51
  %247 = fadd float %246, %241, !dbg !52
  %248 = extractvalue { i32, i32 } %138, 1, !dbg !44
  %249 = bitcast i32 %248 to float, !dbg !44
  %250 = fsub float %247, %249, !dbg !53
  %251 = extractvalue { i32, i32 } %67, 0, !dbg !26
  %252 = bitcast i32 %251 to float, !dbg !26
  %253 = fadd float %182, %252, !dbg !47
  %254 = extractvalue { i32, i32 } %94, 0, !dbg !32
  %255 = bitcast i32 %254 to float, !dbg !32
  %256 = extractvalue { i32, i32 } %118, 0, !dbg !40
  %257 = bitcast i32 %256 to float, !dbg !40
  %258 = fadd float %255, %257, !dbg !51
  %259 = fadd float %258, %253, !dbg !52
  %260 = extractvalue { i32, i32 } %138, 0, !dbg !44
  %261 = bitcast i32 %260 to float, !dbg !44
  %262 = fsub float %259, %261, !dbg !53
  %263 = extractvalue { i32, i32 } %66, 1, !dbg !26
  %264 = bitcast i32 %263 to float, !dbg !26
  %265 = fadd float %180, %264, !dbg !47
  %266 = extractvalue { i32, i32 } %93, 1, !dbg !32
  %267 = bitcast i32 %266 to float, !dbg !32
  %268 = extractvalue { i32, i32 } %117, 1, !dbg !40
  %269 = bitcast i32 %268 to float, !dbg !40
  %270 = fadd float %267, %269, !dbg !51
  %271 = fadd float %270, %265, !dbg !52
  %272 = extractvalue { i32, i32 } %137, 1, !dbg !44
  %273 = bitcast i32 %272 to float, !dbg !44
  %274 = fsub float %271, %273, !dbg !53
  %275 = extractvalue { i32, i32 } %66, 0, !dbg !26
  %276 = bitcast i32 %275 to float, !dbg !26
  %277 = fadd float %180, %276, !dbg !47
  %278 = extractvalue { i32, i32 } %93, 0, !dbg !32
  %279 = bitcast i32 %278 to float, !dbg !32
  %280 = extractvalue { i32, i32 } %117, 0, !dbg !40
  %281 = bitcast i32 %280 to float, !dbg !40
  %282 = fadd float %279, %281, !dbg !51
  %283 = fadd float %282, %277, !dbg !52
  %284 = extractvalue { i32, i32 } %137, 0, !dbg !44
  %285 = bitcast i32 %284 to float, !dbg !44
  %286 = fsub float %283, %285, !dbg !53
  %287 = extractvalue { i32, i32 } %65, 1, !dbg !26
  %288 = bitcast i32 %287 to float, !dbg !26
  %289 = fadd float %178, %288, !dbg !47
  %290 = extractvalue { i32, i32 } %92, 1, !dbg !32
  %291 = bitcast i32 %290 to float, !dbg !32
  %292 = extractvalue { i32, i32 } %116, 1, !dbg !40
  %293 = bitcast i32 %292 to float, !dbg !40
  %294 = fadd float %291, %293, !dbg !51
  %295 = fadd float %294, %289, !dbg !52
  %296 = extractvalue { i32, i32 } %136, 1, !dbg !44
  %297 = bitcast i32 %296 to float, !dbg !44
  %298 = fsub float %295, %297, !dbg !53
  %299 = extractvalue { i32, i32 } %65, 0, !dbg !26
  %300 = bitcast i32 %299 to float, !dbg !26
  %301 = fadd float %178, %300, !dbg !47
  %302 = extractvalue { i32, i32 } %92, 0, !dbg !32
  %303 = bitcast i32 %302 to float, !dbg !32
  %304 = extractvalue { i32, i32 } %116, 0, !dbg !40
  %305 = bitcast i32 %304 to float, !dbg !40
  %306 = fadd float %303, %305, !dbg !51
  %307 = fadd float %306, %301, !dbg !52
  %308 = extractvalue { i32, i32 } %136, 0, !dbg !44
  %309 = bitcast i32 %308 to float, !dbg !44
  %310 = fsub float %307, %309, !dbg !53
  %311 = extractvalue { i32, i32 } %64, 1, !dbg !26
  %312 = bitcast i32 %311 to float, !dbg !26
  %313 = fadd float %176, %312, !dbg !47
  %314 = extractvalue { i32, i32 } %91, 1, !dbg !32
  %315 = bitcast i32 %314 to float, !dbg !32
  %316 = extractvalue { i32, i32 } %115, 1, !dbg !40
  %317 = bitcast i32 %316 to float, !dbg !40
  %318 = fadd float %315, %317, !dbg !51
  %319 = fadd float %318, %313, !dbg !52
  %320 = extractvalue { i32, i32 } %135, 1, !dbg !44
  %321 = bitcast i32 %320 to float, !dbg !44
  %322 = fsub float %319, %321, !dbg !53
  %323 = extractvalue { i32, i32 } %64, 0, !dbg !26
  %324 = bitcast i32 %323 to float, !dbg !26
  %325 = fadd float %176, %324, !dbg !47
  %326 = extractvalue { i32, i32 } %91, 0, !dbg !32
  %327 = bitcast i32 %326 to float, !dbg !32
  %328 = extractvalue { i32, i32 } %115, 0, !dbg !40
  %329 = bitcast i32 %328 to float, !dbg !40
  %330 = fadd float %327, %329, !dbg !51
  %331 = fadd float %330, %325, !dbg !52
  %332 = extractvalue { i32, i32 } %135, 0, !dbg !44
  %333 = bitcast i32 %332 to float, !dbg !44
  %334 = fsub float %331, %333, !dbg !53
  %335 = or disjoint i32 %30, 1, !dbg !54
  %336 = icmp slt i32 %335, 256, !dbg !17
  %337 = and i1 %28, %336, !dbg !25
  %338 = and i1 %31, %28, !dbg !25
  %339 = fmul float %334, %.0.i, !dbg !55
  %340 = fmul float %322, %.0.i20, !dbg !55
  %341 = fmul float %310, %.0.i23, !dbg !55
  %342 = fmul float %298, %.0.i26, !dbg !55
  %343 = fmul float %286, %.0.i29, !dbg !55
  %344 = fmul float %274, %.0.i32, !dbg !55
  %345 = fmul float %262, %.0.i35, !dbg !55
  %346 = fmul float %250, %.0.i38, !dbg !55
  %347 = mul i32 %29, 192, !dbg !56
  %348 = mul i32 %335, 96, !dbg !56
  %349 = add i32 %.decomposed, %347, !dbg !57
  %350 = mul i32 %32, 24576, !dbg !58
  %351 = add i32 %349, %350, !dbg !59
  %352 = add i32 %350, %.decomposed, !dbg !57
  %353 = add i32 %352, %348, !dbg !59
  %354 = sext i32 %351 to i64, !dbg !60
  %355 = getelementptr float, ptr addrspace(1) %6, i64 %354, !dbg !60
  %356 = sext i32 %353 to i64, !dbg !60
  %357 = getelementptr float, ptr addrspace(1) %6, i64 %356, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !61
  %359 = bitcast float %339 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #4, !dbg !61
  %360 = getelementptr inbounds i8, ptr addrspace(3) %358, i32 2064, !dbg !61
  %361 = bitcast float %340 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #4, !dbg !61
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !61
  %363 = bitcast float %341 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #4, !dbg !61
  %364 = getelementptr inbounds i8, ptr addrspace(3) %358, i32 2576, !dbg !61
  %365 = bitcast float %342 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %364, <1 x i32> %365, i1 true) #4, !dbg !61
  %366 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !61
  %367 = bitcast float %343 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #4, !dbg !61
  %368 = getelementptr inbounds i8, ptr addrspace(3) %358, i32 3088, !dbg !61
  %369 = bitcast float %344 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #4, !dbg !61
  %370 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !61
  %371 = bitcast float %345 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %370, <1 x i32> %371, i1 true) #4, !dbg !61
  %372 = getelementptr inbounds i8, ptr addrspace(3) %358, i32 3600, !dbg !61
  %373 = bitcast float %346 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !61
  %375 = or disjoint i32 %18, 512, !dbg !61
  %376 = getelementptr float, ptr addrspace(3) @global_smem, i32 %375, !dbg !61
  %377 = getelementptr i8, ptr addrspace(3) %376, i32 16, !dbg !61
  %378 = load <4 x i32>, ptr addrspace(3) %377, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %374, align 16, !dbg !61
  %379 = getelementptr inbounds i8, ptr addrspace(3) %374, i32 4, !dbg !61
  %.extract12 = load i32, ptr addrspace(3) %379, align 4, !dbg !61
  %380 = getelementptr inbounds i8, ptr addrspace(3) %374, i32 8, !dbg !61
  %.extract13 = load i32, ptr addrspace(3) %380, align 8, !dbg !61
  %381 = getelementptr inbounds i8, ptr addrspace(3) %374, i32 12, !dbg !61
  %.extract14 = load i32, ptr addrspace(3) %381, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %355, i1 %338) #4, !dbg !61
  %.extract15 = extractelement <4 x i32> %378, i64 0, !dbg !61
  %.extract16 = extractelement <4 x i32> %378, i64 1, !dbg !61
  %.extract17 = extractelement <4 x i32> %378, i64 2, !dbg !61
  %.extract18 = extractelement <4 x i32> %378, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %357, i1 %337) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqagfqrxmk4oz574kcj6lbqhuvtghy34uofns6i45r76zc37svnb.py", directory: "inductor_cache/qa")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_6", linkageName: "triton_poi_fused_add_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 33, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 39, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 52, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 39, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 36, column: 44, scope: !7)
!33 = !DILocation(line: 37, column: 39, scope: !7)
!34 = !DILocation(line: 37, column: 34, scope: !7)
!35 = !DILocation(line: 37, column: 48, scope: !7)
!36 = !DILocation(line: 37, column: 60, scope: !7)
!37 = !DILocation(line: 37, column: 45, scope: !7)
!38 = !DILocation(line: 37, column: 55, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 66, scope: !7)
!41 = !DILocation(line: 38, column: 39, scope: !7)
!42 = !DILocation(line: 38, column: 35, scope: !7)
!43 = !DILocation(line: 38, column: 30, scope: !7)
!44 = !DILocation(line: 38, column: 44, scope: !7)
!45 = !DILocation(line: 39, column: 30, scope: !7)
!46 = !DILocation(line: 39, column: 44, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 48, column: 28, scope: !7)
!51 = !DILocation(line: 41, column: 18, scope: !7)
!52 = !DILocation(line: 42, column: 18, scope: !7)
!53 = !DILocation(line: 43, column: 18, scope: !7)
!54 = !DILocation(line: 26, column: 23, scope: !7)
!55 = !DILocation(line: 49, column: 19, scope: !7)
!56 = !DILocation(line: 50, column: 33, scope: !7)
!57 = !DILocation(line: 50, column: 30, scope: !7)
!58 = !DILocation(line: 50, column: 44, scope: !7)
!59 = !DILocation(line: 50, column: 38, scope: !7)
!60 = !DILocation(line: 50, column: 25, scope: !7)
!61 = !DILocation(line: 50, column: 56, scope: !7)
!62 = !DILocation(line: 50, column: 4, scope: !7)
