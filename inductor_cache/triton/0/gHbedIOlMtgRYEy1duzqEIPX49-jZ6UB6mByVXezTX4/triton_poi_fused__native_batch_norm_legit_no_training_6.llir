; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = icmp slt i32 %14, 4608, !dbg !14
  %17 = icmp slt i32 %15, 4608, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %19 = sdiv i32 %.frozen, 1152, !dbg !16
  %20 = mul i32 %19, 1152, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %.frozen40 = freeze i32 %15, !dbg !16
  %21 = sdiv i32 %.frozen40, 1152, !dbg !16
  %22 = mul i32 %21, 1152, !dbg !17
  %.decomposed41 = sub i32 %.frozen40, %22, !dbg !17
  %23 = mul i32 %18, 1152, !dbg !18
  %24 = add i32 %.decomposed, %23, !dbg !19
  %25 = mul i32 %19, 4718592, !dbg !20
  %26 = mul i32 %21, 4718592, !dbg !20
  %27 = add i32 %24, %25, !dbg !21
  %28 = add i32 %26, %.decomposed41, !dbg !19
  %29 = add i32 %28, %23, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %16) #4, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %17) #4, !dbg !23
  %36 = sext i32 %.decomposed to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !24
  %38 = sext i32 %.decomposed41 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %16) #4, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %17) #4, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %16) #4, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = bitcast i32 %47 to float, !dbg !27
  %52 = bitcast i32 %48 to float, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %17) #4, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = bitcast i32 %56 to float, !dbg !27
  %61 = bitcast i32 %57 to float, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !28
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %16) #4, !dbg !29
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %17) #4, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !30
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %16) #4, !dbg !31
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %17) #4, !dbg !31
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !32
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !32
  %72 = fadd float %51, 0x3EE4F8B580000000, !dbg !32
  %73 = fadd float %52, 0x3EE4F8B580000000, !dbg !32
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !32
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !32
  %76 = fadd float %60, 0x3EE4F8B580000000, !dbg !32
  %77 = fadd float %61, 0x3EE4F8B580000000, !dbg !32
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %78, 0, !dbg !33
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %79, 0, !dbg !33
  br i1 %.not.i, label %85, label %80, !dbg !33

80:                                               ; preds = %8
  br i1 %.not1.i, label %83, label %81, !dbg !33

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

85:                                               ; preds = %8
  br i1 %.not1.i, label %88, label %86, !dbg !33

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !33
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i5 = icmp eq i32 %90, 0, !dbg !33
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i8 = icmp eq i32 %91, 0, !dbg !33
  br i1 %.not.i5, label %97, label %92, !dbg !33

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %95, label %93, !dbg !33

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %100, label %98, !dbg !33

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

__nv_sqrtf.exit9:                                 ; preds = %93, %95, %98, %100
  %.0.i7 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i10 = icmp eq i32 %102, 0, !dbg !33
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i13 = icmp eq i32 %103, 0, !dbg !33
  br i1 %.not.i10, label %109, label %104, !dbg !33

104:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %107, label %105, !dbg !33

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

109:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %112, label %110, !dbg !33

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

__nv_sqrtf.exit14:                                ; preds = %105, %107, %110, %112
  %.0.i12 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !33
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %114, 0, !dbg !33
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %115, 0, !dbg !33
  br i1 %.not.i15, label %121, label %116, !dbg !33

116:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %119, label %117, !dbg !33

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

121:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %124, label %122, !dbg !33

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %117, %119, %122, %124
  %.0.i17 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !33
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i20 = icmp eq i32 %126, 0, !dbg !33
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i23 = icmp eq i32 %127, 0, !dbg !33
  br i1 %.not.i20, label %133, label %128, !dbg !33

128:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %131, label %129, !dbg !33

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

133:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %136, label %134, !dbg !33

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

__nv_sqrtf.exit24:                                ; preds = %129, %131, %134, %136
  %.0.i22 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !33
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i25 = icmp eq i32 %138, 0, !dbg !33
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i28 = icmp eq i32 %139, 0, !dbg !33
  br i1 %.not.i25, label %145, label %140, !dbg !33

140:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %143, label %141, !dbg !33

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

145:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %148, label %146, !dbg !33

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

__nv_sqrtf.exit29:                                ; preds = %141, %143, %146, %148
  %.0.i27 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !33
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i30 = icmp eq i32 %150, 0, !dbg !33
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i33 = icmp eq i32 %151, 0, !dbg !33
  br i1 %.not.i30, label %157, label %152, !dbg !33

152:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %155, label %153, !dbg !33

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

157:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %160, label %158, !dbg !33

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

__nv_sqrtf.exit34:                                ; preds = %153, %155, %158, %160
  %.0.i32 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !33
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i35 = icmp eq i32 %162, 0, !dbg !33
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i38 = icmp eq i32 %163, 0, !dbg !33
  br i1 %.not.i35, label %169, label %164, !dbg !33

164:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %167, label %165, !dbg !33

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

169:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %172, label %170, !dbg !33

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

__nv_sqrtf.exit39:                                ; preds = %165, %167, %170, %172
  %.0.i37 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !33
  %174 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %175 = bitcast i32 %174 to float, !dbg !23
  %176 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %177 = bitcast i32 %176 to float, !dbg !25
  %178 = fsub float %175, %177, !dbg !34
  %179 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %180 = bitcast i32 %179 to float, !dbg !23
  %181 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %182 = bitcast i32 %181 to float, !dbg !25
  %183 = fsub float %180, %182, !dbg !34
  %184 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %185 = bitcast i32 %184 to float, !dbg !23
  %186 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %187 = bitcast i32 %186 to float, !dbg !25
  %188 = fsub float %185, %187, !dbg !34
  %189 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %190 = bitcast i32 %189 to float, !dbg !23
  %191 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %192 = bitcast i32 %191 to float, !dbg !25
  %193 = fsub float %190, %192, !dbg !34
  %194 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %195 = bitcast i32 %194 to float, !dbg !23
  %196 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %197 = bitcast i32 %196 to float, !dbg !25
  %198 = fsub float %195, %197, !dbg !34
  %199 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %200 = bitcast i32 %199 to float, !dbg !23
  %201 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %202 = bitcast i32 %201 to float, !dbg !25
  %203 = fsub float %200, %202, !dbg !34
  %204 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %205 = bitcast i32 %204 to float, !dbg !23
  %206 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %207 = bitcast i32 %206 to float, !dbg !25
  %208 = fsub float %205, %207, !dbg !34
  %209 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %210 = bitcast i32 %209 to float, !dbg !23
  %211 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %212 = bitcast i32 %211 to float, !dbg !25
  %213 = fsub float %210, %212, !dbg !34
  %214 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !31
  %215 = bitcast i32 %214 to float, !dbg !31
  %216 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !31
  %217 = bitcast i32 %216 to float, !dbg !31
  %218 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !31
  %219 = bitcast i32 %218 to float, !dbg !31
  %220 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !31
  %221 = bitcast i32 %220 to float, !dbg !31
  %222 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %223 = bitcast i32 %222 to float, !dbg !31
  %224 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %225 = bitcast i32 %224 to float, !dbg !31
  %226 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %227 = bitcast i32 %226 to float, !dbg !31
  %228 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %229 = bitcast i32 %228 to float, !dbg !31
  %230 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !29
  %231 = bitcast i32 %230 to float, !dbg !29
  %232 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !29
  %233 = bitcast i32 %232 to float, !dbg !29
  %234 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !29
  %235 = bitcast i32 %234 to float, !dbg !29
  %236 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !29
  %237 = bitcast i32 %236 to float, !dbg !29
  %238 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !29
  %239 = bitcast i32 %238 to float, !dbg !29
  %240 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !29
  %241 = bitcast i32 %240 to float, !dbg !29
  %242 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !29
  %243 = bitcast i32 %242 to float, !dbg !29
  %244 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !29
  %245 = bitcast i32 %244 to float, !dbg !29
  %246 = and i32 %11, 127, !dbg !12
  %247 = or disjoint i32 %246, %10, !dbg !13
  %248 = or disjoint i32 %247, 896, !dbg !13
  %249 = icmp slt i32 %248, 4608, !dbg !14
  %250 = or disjoint i32 %247, 768, !dbg !13
  %251 = icmp slt i32 %250, 4608, !dbg !14
  %252 = or disjoint i32 %247, 640, !dbg !13
  %253 = icmp slt i32 %252, 4608, !dbg !14
  %254 = or disjoint i32 %247, 512, !dbg !13
  %255 = icmp slt i32 %254, 4608, !dbg !14
  %256 = or disjoint i32 %246, 384, !dbg !12
  %257 = or disjoint i32 %10, %256, !dbg !13
  %258 = icmp slt i32 %257, 4608, !dbg !14
  %259 = or disjoint i32 %246, 256, !dbg !12
  %260 = or disjoint i32 %10, %259, !dbg !13
  %261 = icmp slt i32 %260, 4608, !dbg !14
  %262 = or disjoint i32 %246, 128, !dbg !12
  %263 = or disjoint i32 %10, %262, !dbg !13
  %264 = icmp slt i32 %263, 4608, !dbg !14
  %265 = icmp slt i32 %247, 4608, !dbg !14
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !35
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !35
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !35
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !35
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !35
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !35
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !35
  %274 = fmul float %213, %266, !dbg !36
  %275 = fmul float %208, %267, !dbg !36
  %276 = fmul float %203, %268, !dbg !36
  %277 = fmul float %198, %269, !dbg !36
  %278 = fmul float %193, %270, !dbg !36
  %279 = fmul float %188, %271, !dbg !36
  %280 = fmul float %183, %272, !dbg !36
  %281 = fmul float %178, %273, !dbg !36
  %282 = fmul float %274, %245, !dbg !37
  %283 = fmul float %275, %243, !dbg !37
  %284 = fmul float %276, %241, !dbg !37
  %285 = fmul float %277, %239, !dbg !37
  %286 = fmul float %278, %237, !dbg !37
  %287 = fmul float %279, %235, !dbg !37
  %288 = fmul float %280, %233, !dbg !37
  %289 = fmul float %281, %231, !dbg !37
  %290 = fadd float %282, %229, !dbg !38
  %291 = fadd float %283, %227, !dbg !38
  %292 = fadd float %284, %225, !dbg !38
  %293 = fadd float %285, %223, !dbg !38
  %294 = fadd float %286, %221, !dbg !38
  %295 = fadd float %287, %219, !dbg !38
  %296 = fadd float %288, %217, !dbg !38
  %297 = fadd float %289, %215, !dbg !38
  %298 = shl i32 %247, 12, !dbg !39
  %299 = shl i32 %263, 12, !dbg !39
  %300 = shl i32 %260, 12, !dbg !39
  %301 = shl i32 %257, 12, !dbg !39
  %302 = shl i32 %254, 12, !dbg !39
  %303 = shl i32 %252, 12, !dbg !39
  %304 = shl i32 %250, 12, !dbg !39
  %305 = shl i32 %248, 12, !dbg !39
  %306 = add i32 %298, %18, !dbg !40
  %307 = add i32 %299, %18, !dbg !40
  %308 = add i32 %300, %18, !dbg !40
  %309 = add i32 %301, %18, !dbg !40
  %310 = add i32 %302, %18, !dbg !40
  %311 = add i32 %303, %18, !dbg !40
  %312 = add i32 %304, %18, !dbg !40
  %313 = add i32 %305, %18, !dbg !40
  %314 = sext i32 %306 to i64, !dbg !41
  %315 = getelementptr float, ptr addrspace(1) %5, i64 %314, !dbg !41
  %316 = sext i32 %307 to i64, !dbg !41
  %317 = getelementptr float, ptr addrspace(1) %5, i64 %316, !dbg !41
  %318 = sext i32 %308 to i64, !dbg !41
  %319 = getelementptr float, ptr addrspace(1) %5, i64 %318, !dbg !41
  %320 = sext i32 %309 to i64, !dbg !41
  %321 = getelementptr float, ptr addrspace(1) %5, i64 %320, !dbg !41
  %322 = sext i32 %310 to i64, !dbg !41
  %323 = getelementptr float, ptr addrspace(1) %5, i64 %322, !dbg !41
  %324 = sext i32 %311 to i64, !dbg !41
  %325 = getelementptr float, ptr addrspace(1) %5, i64 %324, !dbg !41
  %326 = sext i32 %312 to i64, !dbg !41
  %327 = getelementptr float, ptr addrspace(1) %5, i64 %326, !dbg !41
  %328 = sext i32 %313 to i64, !dbg !41
  %329 = getelementptr float, ptr addrspace(1) %5, i64 %328, !dbg !41
  %.idx = shl nuw nsw i32 %13, 3, !dbg !42
  %330 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !42
  %331 = bitcast float %290 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 true) #4, !dbg !42
  %332 = shl nuw nsw i32 %13, 1, !dbg !42
  %333 = or disjoint i32 %332, 2, !dbg !42
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !42
  %335 = bitcast float %291 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !42
  %336 = or disjoint i32 %332, 4, !dbg !42
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !42
  %338 = bitcast float %292 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #4, !dbg !42
  %339 = or disjoint i32 %332, 6, !dbg !42
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %339, !dbg !42
  %341 = bitcast float %293 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %.idx1 = shl nuw nsw i32 %246, 3, !dbg !42
  %342 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !42
  %343 = load i32, ptr addrspace(3) %342, align 8, !dbg !42
  %.idx2 = shl nuw nsw i32 %262, 3, !dbg !42
  %344 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !42
  %345 = load i32, ptr addrspace(3) %344, align 8, !dbg !42
  %.idx3 = shl nuw nsw i32 %259, 3, !dbg !42
  %346 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !42
  %347 = load i32, ptr addrspace(3) %346, align 8, !dbg !42
  %.idx4 = shl nuw nsw i32 %256, 3, !dbg !42
  %348 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !42
  %349 = load i32, ptr addrspace(3) %348, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %350 = bitcast float %294 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %350, i1 true) #4, !dbg !42
  %351 = bitcast float %295 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %351, i1 true) #4, !dbg !42
  %352 = bitcast float %296 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %352, i1 true) #4, !dbg !42
  %353 = bitcast float %297 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %353, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %354 = load i32, ptr addrspace(3) %342, align 8, !dbg !42
  %355 = load i32, ptr addrspace(3) %344, align 8, !dbg !42
  %356 = load i32, ptr addrspace(3) %346, align 8, !dbg !42
  %357 = load i32, ptr addrspace(3) %348, align 8, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %343, ptr addrspace(1) %315, i1 %265) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %345, ptr addrspace(1) %317, i1 %264) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %347, ptr addrspace(1) %319, i1 %261) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %321, i1 %258) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %323, i1 %255) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %355, ptr addrspace(1) %325, i1 %253) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %327, i1 %251) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %357, ptr addrspace(1) %329, i1 %249) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ocwiuleqzntgzekup23gflhwa264nfoqcltloxkydgdq7eaeql.py", directory: "inductor_cache/7o")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 53, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 58, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 35, scope: !7)
!40 = !DILocation(line: 48, column: 30, scope: !7)
!41 = !DILocation(line: 48, column: 25, scope: !7)
!42 = !DILocation(line: 48, column: 47, scope: !7)
!43 = !DILocation(line: 48, column: 4, scope: !7)
