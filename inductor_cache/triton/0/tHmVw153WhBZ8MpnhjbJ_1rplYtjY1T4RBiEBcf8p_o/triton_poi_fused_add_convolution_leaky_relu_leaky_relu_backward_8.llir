; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_leaky_relu_leaky_relu_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 1016, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %8, %13, !dbg !13
  %18 = or disjoint i32 %8, %14, !dbg !13
  %19 = sdiv i32 %15, 256, !dbg !14
  %20 = srem i32 %19, 128, !dbg !15
  %21 = sext i32 %15 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = sext i32 %16 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #2, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #2, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %35 = sext i32 %20 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !18
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !19
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !20
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %47 = sext i32 %17 to i64, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !20
  %49 = sext i32 %18 to i64, !dbg !20
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !20
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !21
  %56 = bitcast i32 %52 to float, !dbg !21
  %57 = bitcast i32 %53 to float, !dbg !21
  %58 = bitcast i32 %54 to float, !dbg !21
  %59 = bitcast i32 %55 to float, !dbg !21
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !21
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !21
  %65 = bitcast i32 %61 to float, !dbg !21
  %66 = bitcast i32 %62 to float, !dbg !21
  %67 = bitcast i32 %63 to float, !dbg !21
  %68 = bitcast i32 %64 to float, !dbg !21
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !23
  %71 = bitcast i32 %70 to float, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !23
  %73 = bitcast i32 %72 to float, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !23
  %75 = bitcast i32 %74 to float, !dbg !23
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !23
  %77 = bitcast i32 %76 to float, !dbg !23
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !23
  %79 = bitcast i32 %78 to float, !dbg !23
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !23
  %81 = bitcast i32 %80 to float, !dbg !23
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !23
  %83 = bitcast i32 %82 to float, !dbg !23
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !23
  %85 = bitcast i32 %84 to float, !dbg !23
  %86 = fadd float %56, %71, !dbg !24
  %87 = fadd float %57, %73, !dbg !24
  %88 = fadd float %58, %75, !dbg !24
  %89 = fadd float %59, %77, !dbg !24
  %90 = fadd float %65, %79, !dbg !24
  %91 = fadd float %66, %81, !dbg !24
  %92 = fadd float %67, %83, !dbg !24
  %93 = fadd float %68, %85, !dbg !24
  %94 = zext nneg i32 %11 to i64, !dbg !25
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !25
  %96 = getelementptr inbounds i8, ptr addrspace(3) %95, i64 16, !dbg !25
  %97 = zext nneg i32 %13 to i64, !dbg !25
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !25
  %99 = zext nneg i32 %14 to i64, !dbg !25
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !25
  %101 = getelementptr inbounds i8, ptr addrspace(3) %98, i64 4, !dbg !25
  %102 = getelementptr inbounds i8, ptr addrspace(3) %98, i64 8, !dbg !25
  %103 = getelementptr inbounds i8, ptr addrspace(3) %98, i64 12, !dbg !25
  %104 = getelementptr i1, ptr addrspace(1) %4, i64 %21, !dbg !26
  %105 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !17
  %106 = insertelement <4 x i32> %105, i32 %27, i64 1, !dbg !17
  %107 = insertelement <4 x i32> %106, i32 %28, i64 2, !dbg !17
  %108 = insertelement <4 x i32> %107, i32 %29, i64 3, !dbg !17
  %109 = bitcast <4 x i32> %108 to <4 x float>, !dbg !17
  %110 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !19
  %111 = insertelement <4 x i32> %110, i32 %38, i64 1, !dbg !19
  %112 = insertelement <4 x i32> %111, i32 %39, i64 2, !dbg !19
  %113 = insertelement <4 x i32> %112, i32 %40, i64 3, !dbg !19
  %114 = bitcast <4 x i32> %113 to <4 x float>, !dbg !19
  %115 = fadd <4 x float> %109, %114, !dbg !27
  %116 = fcmp ogt <4 x float> %115, zeroinitializer, !dbg !28
  %117 = fmul <4 x float> %115, splat (float 0x3F847AE140000000), !dbg !29
  %118 = select <4 x i1> %116, <4 x float> %115, <4 x float> %117, !dbg !30
  %119 = extractelement <4 x float> %118, i64 0, !dbg !31
  %120 = fadd float %119, %86, !dbg !31
  %121 = extractelement <4 x float> %118, i64 1, !dbg !31
  %122 = fadd float %121, %87, !dbg !31
  %123 = extractelement <4 x float> %118, i64 2, !dbg !31
  %124 = fadd float %123, %88, !dbg !31
  %125 = extractelement <4 x float> %118, i64 3, !dbg !31
  %126 = fadd float %125, %89, !dbg !31
  %127 = fcmp ogt <4 x float> %118, zeroinitializer, !dbg !32
  %128 = bitcast float %120 to i32, !dbg !25
  %129 = bitcast float %122 to i32, !dbg !25
  %130 = bitcast float %124 to i32, !dbg !25
  %131 = bitcast float %126 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %95, i32 %128, i32 %129, i32 %130, i32 %131, i1 true) #2, !dbg !25
  %132 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !17
  %133 = insertelement <4 x i32> %132, i32 %32, i64 1, !dbg !17
  %134 = insertelement <4 x i32> %133, i32 %33, i64 2, !dbg !17
  %135 = insertelement <4 x i32> %134, i32 %34, i64 3, !dbg !17
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !17
  %137 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !19
  %138 = insertelement <4 x i32> %137, i32 %42, i64 1, !dbg !19
  %139 = insertelement <4 x i32> %138, i32 %43, i64 2, !dbg !19
  %140 = insertelement <4 x i32> %139, i32 %44, i64 3, !dbg !19
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !19
  %142 = fadd <4 x float> %136, %141, !dbg !27
  %143 = fcmp ogt <4 x float> %142, zeroinitializer, !dbg !28
  %144 = fmul <4 x float> %142, splat (float 0x3F847AE140000000), !dbg !29
  %145 = select <4 x i1> %143, <4 x float> %142, <4 x float> %144, !dbg !30
  %146 = extractelement <4 x float> %145, i64 0, !dbg !31
  %147 = fadd float %146, %90, !dbg !31
  %148 = extractelement <4 x float> %145, i64 1, !dbg !31
  %149 = fadd float %148, %91, !dbg !31
  %150 = extractelement <4 x float> %145, i64 2, !dbg !31
  %151 = fadd float %150, %92, !dbg !31
  %152 = extractelement <4 x float> %145, i64 3, !dbg !31
  %153 = fadd float %152, %93, !dbg !31
  %154 = fcmp ogt <4 x float> %145, zeroinitializer, !dbg !32
  %155 = bitcast float %147 to i32, !dbg !25
  %156 = bitcast float %149 to i32, !dbg !25
  %157 = bitcast float %151 to i32, !dbg !25
  %158 = bitcast float %153 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %96, i32 %155, i32 %156, i32 %157, i32 %158, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %159 = load <4 x i32>, ptr addrspace(3) %100, align 16, !dbg !25
  %.extract = load i32, ptr addrspace(3) %98, align 16, !dbg !25
  %.extract8 = load i32, ptr addrspace(3) %101, align 4, !dbg !25
  %.extract9 = load i32, ptr addrspace(3) %102, align 8, !dbg !25
  %.extract10 = load i32, ptr addrspace(3) %103, align 4, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %48, i1 true) #2, !dbg !25
  %.extract11 = extractelement <4 x i32> %159, i64 0, !dbg !25
  %.extract12 = extractelement <4 x i32> %159, i64 1, !dbg !25
  %.extract13 = extractelement <4 x i32> %159, i64 2, !dbg !25
  %.extract14 = extractelement <4 x i32> %159, i64 3, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %50, i1 true) #2, !dbg !25
  %160 = zext <4 x i1> %127 to <4 x i8>, !dbg !33
  %161 = bitcast <4 x i8> %160 to i32, !dbg !33
  %162 = zext <4 x i1> %154 to <4 x i8>, !dbg !33
  %163 = bitcast <4 x i8> %162 to i32, !dbg !33
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %161, i32 %163, ptr addrspace(1) %104, i1 true) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbiiccbrnlcwabqna26q7fgmhueokaarnm4kzspsgyvgvece5drg.py", directory: "inductor_cache/bi")
!4 = !{ptr @triton_poi_fused_add_convolution_leaky_relu_leaky_relu_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_leaky_relu_leaky_relu_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_leaky_relu_leaky_relu_backward_8", linkageName: "triton_poi_fused_add_convolution_leaky_relu_leaky_relu_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 19, scope: !7)
!25 = !DILocation(line: 39, column: 40, scope: !7)
!26 = !DILocation(line: 40, column: 25, scope: !7)
!27 = !DILocation(line: 30, column: 18, scope: !7)
!28 = !DILocation(line: 32, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 32, scope: !7)
!31 = !DILocation(line: 37, column: 19, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 37, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
