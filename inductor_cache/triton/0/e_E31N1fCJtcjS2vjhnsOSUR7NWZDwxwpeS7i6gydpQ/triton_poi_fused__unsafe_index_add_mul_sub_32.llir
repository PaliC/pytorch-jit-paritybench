; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %15 = sdiv i32 %.frozen, 32, !dbg !14
  %16 = srem i32 %15, 32, !dbg !15
  %17 = mul i32 %15, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %14, 32, !dbg !16
  %19 = sdiv i32 %13, 1024, !dbg !17
  %20 = sext i32 %16 to i64, !dbg !18
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !19
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !19
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !19
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !19
  %26 = sext i32 %.decomposed to i64, !dbg !20
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = sext i32 %18 to i64, !dbg !20
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !20
  %30 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !21
  %31 = extractvalue { i64, i64 } %30, 0, !dbg !21
  %32 = extractvalue { i64, i64 } %30, 1, !dbg !21
  %33 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %34 = extractvalue { i64, i64 } %33, 0, !dbg !21
  %35 = extractvalue { i64, i64 } %33, 1, !dbg !21
  %36 = getelementptr i64, ptr addrspace(1) %3, i64 %26, !dbg !22
  %37 = getelementptr i64, ptr addrspace(1) %3, i64 %28, !dbg !22
  %38 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !23
  %39 = extractvalue { i64, i64 } %38, 0, !dbg !23
  %40 = extractvalue { i64, i64 } %38, 1, !dbg !23
  %41 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !23
  %42 = extractvalue { i64, i64 } %41, 0, !dbg !23
  %43 = extractvalue { i64, i64 } %41, 1, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = bitcast i32 %48 to float, !dbg !25
  %53 = bitcast i32 %49 to float, !dbg !25
  %54 = lshr i64 %22, 59, !dbg !26
  %55 = and i64 %54, 16, !dbg !26
  %56 = add i64 %55, %22, !dbg !26
  %57 = lshr i64 %31, 59, !dbg !27
  %58 = and i64 %57, 16, !dbg !27
  %59 = lshr i64 %32, 59, !dbg !27
  %60 = and i64 %59, 16, !dbg !27
  %61 = lshr i64 %34, 59, !dbg !27
  %62 = and i64 %61, 16, !dbg !27
  %63 = lshr i64 %35, 59, !dbg !27
  %64 = and i64 %63, 16, !dbg !27
  %65 = shl i64 %56, 4, !dbg !28
  %66 = shl nsw i32 %19, 8, !dbg !29
  %67 = sext i32 %66 to i64, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %58, !dbg !31
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %65, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %67, !dbg !31
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %60, !dbg !31
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %65, !dbg !31
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %67, !dbg !31
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !31
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %62, !dbg !31
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %65, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %67, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %64, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %65, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %67, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !32
  %85 = bitcast i32 %84 to float, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !32
  %89 = bitcast i32 %88 to float, !dbg !32
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !32
  %91 = bitcast i32 %90 to float, !dbg !32
  %92 = lshr i64 %39, 59, !dbg !33
  %93 = and i64 %92, 16, !dbg !33
  %94 = lshr i64 %40, 59, !dbg !33
  %95 = and i64 %94, 16, !dbg !33
  %96 = lshr i64 %42, 59, !dbg !33
  %97 = and i64 %96, 16, !dbg !33
  %98 = lshr i64 %43, 59, !dbg !33
  %99 = and i64 %98, 16, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !34
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %93, !dbg !34
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %65, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %67, !dbg !34
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !34
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %95, !dbg !34
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %65, !dbg !34
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %67, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !34
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %97, !dbg !34
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %65, !dbg !34
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %67, !dbg !34
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !34
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %99, !dbg !34
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %65, !dbg !34
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %67, !dbg !34
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !35
  %117 = bitcast i32 %116 to float, !dbg !35
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !35
  %119 = bitcast i32 %118 to float, !dbg !35
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !35
  %121 = bitcast i32 %120 to float, !dbg !35
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !35
  %123 = bitcast i32 %122 to float, !dbg !35
  %124 = fsub float %117, %85, !dbg !36
  %125 = fsub float %119, %87, !dbg !36
  %126 = fsub float %121, %89, !dbg !36
  %127 = fsub float %123, %91, !dbg !36
  %128 = fmul float %124, %50, !dbg !37
  %129 = fmul float %125, %51, !dbg !37
  %130 = fmul float %126, %52, !dbg !37
  %131 = fmul float %127, %53, !dbg !37
  %132 = fadd float %128, %85, !dbg !38
  %133 = fadd float %129, %87, !dbg !38
  %134 = fadd float %130, %89, !dbg !38
  %135 = fadd float %131, %91, !dbg !38
  %136 = sext i32 %13 to i64, !dbg !39
  %137 = getelementptr float, ptr addrspace(1) %5, i64 %136, !dbg !39
  %138 = bitcast float %132 to i32, !dbg !40
  %139 = bitcast float %133 to i32, !dbg !40
  %140 = bitcast float %134 to i32, !dbg !40
  %141 = bitcast float %135 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %138, i32 %139, i32 %140, i32 %141, ptr addrspace(1) %137, i1 true) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co5gqir74sfth4vyu73yxi5w7eeq7dnssp434hjafzwgsqbbaxhw.py", directory: "inductor_cache/o5")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_32", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 32, scope: !7)
!27 = !DILocation(line: 38, column: 32, scope: !7)
!28 = !DILocation(line: 39, column: 40, scope: !7)
!29 = !DILocation(line: 39, column: 51, scope: !7)
!30 = !DILocation(line: 39, column: 47, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 56, scope: !7)
!33 = !DILocation(line: 42, column: 35, scope: !7)
!34 = !DILocation(line: 43, column: 31, scope: !7)
!35 = !DILocation(line: 43, column: 58, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 25, scope: !7)
!40 = !DILocation(line: 47, column: 37, scope: !7)
!41 = !DILocation(line: 47, column: 4, scope: !7)
