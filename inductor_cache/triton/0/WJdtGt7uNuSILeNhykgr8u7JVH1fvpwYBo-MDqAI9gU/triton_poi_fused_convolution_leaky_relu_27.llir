; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 5, !dbg !16
  %20 = shl i32 %9, 3, !dbg !17
  %21 = and i32 %20, 24, !dbg !17
  %22 = lshr i32 %9, 3, !dbg !17
  %23 = and i32 %22, 15, !dbg !17
  %24 = or disjoint i32 %19, %21, !dbg !18
  %25 = or disjoint i32 %24, 4, !dbg !18
  %26 = or disjoint i32 %19, %23, !dbg !18
  %27 = or disjoint i32 %26, 16, !dbg !18
  %28 = icmp slt i32 %24, 512, !dbg !19
  %29 = icmp slt i32 %26, 512, !dbg !19
  %30 = icmp slt i32 %27, 512, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %31 = sdiv i32 %.frozen, 64, !dbg !20
  %32 = mul i32 %31, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %33 = shl i32 %14, 9, !dbg !22
  %34 = add i32 %24, %33, !dbg !23
  %35 = add i32 %33, %25, !dbg !23
  %36 = sext i32 %34 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = sext i32 %35 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = and i1 %16, %28, !dbg !25
  %41 = and i1 %17, %29, !dbg !25
  %42 = and i1 %30, %17, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %40) #2, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = sext i32 %24 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !27
  %55 = sext i32 %25 to i64, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %28) #2, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %28) #2, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = getelementptr i1, ptr addrspace(1) %2, i64 %36, !dbg !29
  %68 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !26
  %69 = insertelement <4 x i32> %68, i32 %45, i64 1, !dbg !26
  %70 = insertelement <4 x i32> %69, i32 %46, i64 2, !dbg !26
  %71 = insertelement <4 x i32> %70, i32 %47, i64 3, !dbg !26
  %72 = bitcast <4 x i32> %71 to <4 x float>, !dbg !26
  %73 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !28
  %74 = insertelement <4 x i32> %73, i32 %59, i64 1, !dbg !28
  %75 = insertelement <4 x i32> %74, i32 %60, i64 2, !dbg !28
  %76 = insertelement <4 x i32> %75, i32 %61, i64 3, !dbg !28
  %77 = bitcast <4 x i32> %76 to <4 x float>, !dbg !28
  %78 = fadd <4 x float> %72, %77, !dbg !30
  %79 = fcmp ogt <4 x float> %78, zeroinitializer, !dbg !31
  %80 = extractelement <4 x float> %78, i64 0, !dbg !32
  %81 = fmul float %80, 0x3FC99999A0000000, !dbg !33
  %82 = extractelement <4 x float> %78, i64 1, !dbg !32
  %83 = fmul float %82, 0x3FC99999A0000000, !dbg !33
  %84 = extractelement <4 x float> %78, i64 2, !dbg !32
  %85 = fmul float %84, 0x3FC99999A0000000, !dbg !33
  %86 = extractelement <4 x float> %78, i64 3, !dbg !32
  %87 = fmul float %86, 0x3FC99999A0000000, !dbg !33
  %88 = extractelement <4 x i1> %79, i64 0, !dbg !32
  %89 = select i1 %88, float %80, float %81, !dbg !32
  %90 = extractelement <4 x i1> %79, i64 1, !dbg !32
  %91 = select i1 %90, float %82, float %83, !dbg !32
  %92 = extractelement <4 x i1> %79, i64 2, !dbg !32
  %93 = select i1 %92, float %84, float %85, !dbg !32
  %94 = extractelement <4 x i1> %79, i64 3, !dbg !32
  %95 = select i1 %94, float %86, float %87, !dbg !32
  %96 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !26
  %97 = insertelement <4 x i32> %96, i32 %50, i64 1, !dbg !26
  %98 = insertelement <4 x i32> %97, i32 %51, i64 2, !dbg !26
  %99 = insertelement <4 x i32> %98, i32 %52, i64 3, !dbg !26
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !26
  %101 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !28
  %102 = insertelement <4 x i32> %101, i32 %64, i64 1, !dbg !28
  %103 = insertelement <4 x i32> %102, i32 %65, i64 2, !dbg !28
  %104 = insertelement <4 x i32> %103, i32 %66, i64 3, !dbg !28
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !28
  %106 = fadd <4 x float> %100, %105, !dbg !30
  %107 = fcmp ogt <4 x float> %106, zeroinitializer, !dbg !31
  %108 = extractelement <4 x float> %106, i64 0, !dbg !32
  %109 = fmul float %108, 0x3FC99999A0000000, !dbg !33
  %110 = extractelement <4 x float> %106, i64 1, !dbg !32
  %111 = fmul float %110, 0x3FC99999A0000000, !dbg !33
  %112 = extractelement <4 x float> %106, i64 2, !dbg !32
  %113 = fmul float %112, 0x3FC99999A0000000, !dbg !33
  %114 = extractelement <4 x float> %106, i64 3, !dbg !32
  %115 = fmul float %114, 0x3FC99999A0000000, !dbg !33
  %116 = extractelement <4 x i1> %107, i64 0, !dbg !32
  %117 = select i1 %116, float %108, float %109, !dbg !32
  %118 = extractelement <4 x i1> %107, i64 1, !dbg !32
  %119 = select i1 %118, float %110, float %111, !dbg !32
  %120 = extractelement <4 x i1> %107, i64 2, !dbg !32
  %121 = select i1 %120, float %112, float %113, !dbg !32
  %122 = extractelement <4 x i1> %107, i64 3, !dbg !32
  %123 = select i1 %122, float %114, float %115, !dbg !32
  %124 = zext <4 x i1> %79 to <4 x i8>, !dbg !34
  %125 = bitcast <4 x i8> %124 to i32, !dbg !34
  %126 = zext <4 x i1> %107 to <4 x i8>, !dbg !34
  %127 = bitcast <4 x i8> %126 to i32, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %125, i32 %127, ptr addrspace(1) %67, i1 %40) #2, !dbg !34
  %128 = shl i32 %26, 6, !dbg !35
  %129 = shl i32 %27, 6, !dbg !35
  %130 = shl i32 %31, 15, !dbg !36
  %131 = add i32 %130, %.decomposed, !dbg !37
  %132 = add i32 %131, %128, !dbg !38
  %133 = add i32 %131, %129, !dbg !38
  %134 = sext i32 %132 to i64, !dbg !39
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !39
  %136 = sext i32 %133 to i64, !dbg !39
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !39
  %138 = shl i32 %9, 8, !dbg !40
  %139 = and i32 %138, 768, !dbg !40
  %140 = or disjoint i32 %139, %11, !dbg !40
  %141 = and i32 %12, 508, !dbg !40
  %142 = lshr exact i32 %139, 1, !dbg !40
  %143 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %142, !dbg !40
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %140, !dbg !40
  %145 = bitcast float %89 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !40
  %146 = or disjoint i32 %140, 32, !dbg !40
  %147 = lshr i32 %146, 3, !dbg !40
  %148 = and i32 %147, 100, !dbg !40
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !40
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %146, !dbg !40
  %151 = bitcast float %91 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !40
  %152 = or disjoint i32 %140, 64, !dbg !40
  %153 = lshr i32 %152, 3, !dbg !40
  %154 = and i32 %153, 104, !dbg !40
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !40
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %152, !dbg !40
  %157 = bitcast float %93 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !40
  %158 = or disjoint i32 %140, 96, !dbg !40
  %159 = lshr i32 %158, 3, !dbg !40
  %160 = and i32 %159, 108, !dbg !40
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !40
  %162 = getelementptr float, ptr addrspace(3) %161, i32 %158, !dbg !40
  %163 = bitcast float %95 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !40
  %164 = or disjoint i32 %140, 128, !dbg !40
  %165 = lshr i32 %164, 3, !dbg !40
  %166 = and i32 %165, 112, !dbg !40
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !40
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %164, !dbg !40
  %169 = bitcast float %117 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !40
  %170 = or disjoint i32 %140, 160, !dbg !40
  %171 = lshr i32 %170, 3, !dbg !40
  %172 = and i32 %171, 116, !dbg !40
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !40
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %170, !dbg !40
  %175 = bitcast float %119 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !40
  %176 = or disjoint i32 %140, 192, !dbg !40
  %177 = lshr i32 %176, 3, !dbg !40
  %178 = and i32 %177, 120, !dbg !40
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !40
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %176, !dbg !40
  %181 = bitcast float %121 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !40
  %182 = or disjoint i32 %140, 224, !dbg !40
  %183 = lshr i32 %182, 3, !dbg !40
  %184 = and i32 %183, 124, !dbg !40
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !40
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %182, !dbg !40
  %187 = bitcast float %123 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %188 = lshr i32 %12, 3, !dbg !40
  %189 = and i32 %188, 60, !dbg !40
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !40
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %141, !dbg !40
  %192 = or disjoint i32 %141, 512, !dbg !40
  %193 = lshr i32 %192, 3, !dbg !40
  %194 = and i32 %193, 124, !dbg !40
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !40
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %192, !dbg !40
  %197 = load <4 x i32>, ptr addrspace(3) %196, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %191, align 16, !dbg !40
  %198 = getelementptr inbounds i8, ptr addrspace(3) %191, i32 4, !dbg !40
  %.extract10 = load i32, ptr addrspace(3) %198, align 4, !dbg !40
  %199 = getelementptr inbounds i8, ptr addrspace(3) %191, i32 8, !dbg !40
  %.extract11 = load i32, ptr addrspace(3) %199, align 8, !dbg !40
  %200 = getelementptr inbounds i8, ptr addrspace(3) %191, i32 12, !dbg !40
  %.extract12 = load i32, ptr addrspace(3) %200, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %135, i1 %41) #2, !dbg !40
  %.extract13 = extractelement <4 x i32> %197, i64 0, !dbg !40
  %.extract14 = extractelement <4 x i32> %197, i64 1, !dbg !40
  %.extract15 = extractelement <4 x i32> %197, i64 2, !dbg !40
  %.extract16 = extractelement <4 x i32> %197, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %137, i1 %42) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csnv7xak3ajfacpz54ybn5r32qvqs6r5t2oxgx6z5nmxl4luk2i7.py", directory: "inductor_cache/sn")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_27", linkageName: "triton_poi_fused_convolution_leaky_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 33, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 38, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
