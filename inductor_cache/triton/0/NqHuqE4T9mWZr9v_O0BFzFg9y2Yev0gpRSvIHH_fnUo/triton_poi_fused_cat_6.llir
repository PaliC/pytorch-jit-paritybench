; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = sdiv i32 %13, 1024, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 165888, !dbg !15
  %16 = mul i32 %15, 165888, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl nsw i32 %15, 17, !dbg !17
  %18 = add nsw i32 %17, %srem.decomposed, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = shl nsw i32 %15, 15, !dbg !20
  %22 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !21
  %23 = insertelement <2 x i32> %22, i32 %14, i64 1, !dbg !21
  %24 = srem <2 x i32> %23, <i32 1024, i32 162>, !dbg !21
  %25 = extractelement <2 x i32> %24, i64 1, !dbg !22
  %26 = icmp slt i32 %25, 128, !dbg !23
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #1, !dbg !24
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !24
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !24
  %30 = and i32 %25, -32, !dbg !25
  %31 = icmp eq i32 %30, 128, !dbg !25
  %32 = insertelement <2 x i32> <i32 poison, i32 -128>, i32 %21, i64 0, !dbg !26
  %33 = add nsw <2 x i32> %32, %24, !dbg !26
  %34 = extractelement <2 x i32> %33, i64 1, !dbg !27
  %35 = shl nsw i32 %34, 10, !dbg !27
  %36 = extractelement <2 x i32> %33, i64 0, !dbg !28
  %37 = add nsw i32 %36, %35, !dbg !28
  %38 = sext i32 %37 to i64, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !29
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !30
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !30
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !30
  %43 = bitcast i32 %41 to float, !dbg !30
  %44 = bitcast i32 %42 to float, !dbg !30
  %45 = sext i32 %34 to i64, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %31, i32 0, i1 %31) #1, !dbg !32
  %48 = bitcast i32 %47 to float, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %31, i32 0, i1 %31) #1, !dbg !32
  %50 = bitcast i32 %49 to float, !dbg !32
  %51 = fadd float %43, %48, !dbg !33
  %52 = fadd float %44, %50, !dbg !33
  %53 = fcmp ogt float %51, 0.000000e+00, !dbg !34
  %54 = fcmp ogt float %52, 0.000000e+00, !dbg !34
  %55 = fmul float %51, 0x3FB99999A0000000, !dbg !35
  %56 = fmul float %52, 0x3FB99999A0000000, !dbg !35
  %57 = select i1 %53, float %51, float %55, !dbg !36
  %58 = select i1 %54, float %52, float %56, !dbg !36
  %59 = icmp sgt i32 %25, 159, !dbg !22
  %60 = add nsw i32 %25, -160, !dbg !37
  %61 = shl nsw i32 %60, 10, !dbg !38
  %62 = shl nsw i32 %15, 11, !dbg !39
  %63 = extractelement <2 x i32> %24, i64 0, !dbg !40
  %64 = add nsw i32 %62, %63, !dbg !40
  %65 = add nsw i32 %64, %61, !dbg !41
  %66 = sext i32 %65 to i64, !dbg !42
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !42
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !43
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !43
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !43
  %71 = bitcast i32 %69 to float, !dbg !43
  %72 = bitcast i32 %70 to float, !dbg !43
  %73 = sext i32 %60 to i64, !dbg !44
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !44
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %59, i32 0, i1 %59) #1, !dbg !45
  %76 = bitcast i32 %75 to float, !dbg !45
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %59, i32 0, i1 %59) #1, !dbg !45
  %78 = bitcast i32 %77 to float, !dbg !45
  %79 = fadd float %71, %76, !dbg !46
  %80 = fadd float %72, %78, !dbg !46
  %81 = select i1 %59, float %79, float 0.000000e+00, !dbg !47
  %82 = select i1 %59, float %80, float 0.000000e+00, !dbg !47
  %83 = select i1 %31, float %57, float %81, !dbg !48
  %84 = select i1 %31, float %58, float %82, !dbg !48
  %85 = sext i32 %13 to i64, !dbg !49
  %86 = getelementptr float, ptr addrspace(1) %5, i64 %85, !dbg !49
  %87 = bitcast float %83 to i32, !dbg !50
  %88 = select i1 %26, i32 %28, i32 %87, !dbg !51
  %89 = bitcast float %84 to i32, !dbg !50
  %90 = select i1 %26, i32 %29, i32 %89, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %90, ptr addrspace(1) %86, i1 true) #1, !dbg !50
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmqx6ini3jpvdv23hhvnvacf3m4h4y44wltgoq2zxv4ao2bvuwcv.py", directory: "inductor_cache/mq")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 38, column: 63, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 48, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 42, scope: !7)
!28 = !DILocation(line: 38, column: 57, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 68, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 35, scope: !7)
!37 = !DILocation(line: 51, column: 51, scope: !7)
!38 = !DILocation(line: 51, column: 42, scope: !7)
!39 = !DILocation(line: 51, column: 62, scope: !7)
!40 = !DILocation(line: 51, column: 36, scope: !7)
!41 = !DILocation(line: 51, column: 57, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 67, scope: !7)
!44 = !DILocation(line: 52, column: 31, scope: !7)
!45 = !DILocation(line: 52, column: 45, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 35, scope: !7)
!48 = !DILocation(line: 0, scope: !7)
!49 = !DILocation(line: 58, column: 25, scope: !7)
!50 = !DILocation(line: 58, column: 37, scope: !7)
!51 = !DILocation(line: 57, column: 33, scope: !7)
!52 = !DILocation(line: 58, column: 4, scope: !7)
