; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = or disjoint i32 %11, 4, !dbg !13
  %14 = or disjoint i32 %11, 8, !dbg !13
  %15 = or disjoint i32 %11, 12, !dbg !13
  %16 = icmp slt i32 %11, 512, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 8, !dbg !16
  %19 = and i32 %12, 255, !dbg !17
  %20 = or disjoint i32 %18, %19, !dbg !18
  %21 = icmp slt i32 %20, 256, !dbg !19
  %.frozen = freeze i32 %11, !dbg !20
  %22 = sdiv i32 %.frozen, 128, !dbg !20
  %23 = mul i32 %22, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %23, !dbg !21
  %24 = srem i32 %13, 128, !dbg !21
  %25 = srem i32 %14, 128, !dbg !21
  %26 = srem i32 %15, 128, !dbg !21
  %27 = shl i32 %20, 7, !dbg !22
  %28 = shl i32 %22, 15, !dbg !23
  %29 = add i32 %27, %28, !dbg !24
  %30 = add i32 %29, %.decomposed, !dbg !25
  %31 = add i32 %29, %24, !dbg !25
  %32 = add i32 %29, %25, !dbg !25
  %33 = add i32 %29, %26, !dbg !25
  %34 = sext i32 %30 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = sext i32 %31 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = sext i32 %32 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %33 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = and i1 %16, %21, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %42) #4, !dbg !28
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %42) #4, !dbg !28
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %42) #4, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %42) #4, !dbg !28
  %47 = sext i32 %.decomposed to i64, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !29
  %49 = sext i32 %24 to i64, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !29
  %51 = sext i32 %25 to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !29
  %53 = sext i32 %26 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %16) #4, !dbg !30
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %16) #4, !dbg !30
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %16) #4, !dbg !30
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %16) #4, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !31
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !31
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %16) #4, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !32
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !32
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !32
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !32
  %68 = bitcast i32 %64 to float, !dbg !32
  %69 = bitcast i32 %65 to float, !dbg !32
  %70 = bitcast i32 %66 to float, !dbg !32
  %71 = bitcast i32 %67 to float, !dbg !32
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %16) #4, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !32
  %77 = bitcast i32 %73 to float, !dbg !32
  %78 = bitcast i32 %74 to float, !dbg !32
  %79 = bitcast i32 %75 to float, !dbg !32
  %80 = bitcast i32 %76 to float, !dbg !32
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %16) #4, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !32
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !32
  %86 = bitcast i32 %82 to float, !dbg !32
  %87 = bitcast i32 %83 to float, !dbg !32
  %88 = bitcast i32 %84 to float, !dbg !32
  %89 = bitcast i32 %85 to float, !dbg !32
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %16) #4, !dbg !32
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !32
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !32
  %95 = bitcast i32 %91 to float, !dbg !32
  %96 = bitcast i32 %92 to float, !dbg !32
  %97 = bitcast i32 %93 to float, !dbg !32
  %98 = bitcast i32 %94 to float, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !33
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !33
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %16) #4, !dbg !34
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %16) #4, !dbg !34
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %16) #4, !dbg !34
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %16) #4, !dbg !34
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !35
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !35
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !35
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !35
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %16) #4, !dbg !36
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %16) #4, !dbg !36
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %16) #4, !dbg !36
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %16) #4, !dbg !36
  %115 = fadd float %68, 0x3EE4F8B580000000, !dbg !37
  %116 = fadd float %69, 0x3EE4F8B580000000, !dbg !37
  %117 = fadd float %70, 0x3EE4F8B580000000, !dbg !37
  %118 = fadd float %71, 0x3EE4F8B580000000, !dbg !37
  %119 = fadd float %77, 0x3EE4F8B580000000, !dbg !37
  %120 = fadd float %78, 0x3EE4F8B580000000, !dbg !37
  %121 = fadd float %79, 0x3EE4F8B580000000, !dbg !37
  %122 = fadd float %80, 0x3EE4F8B580000000, !dbg !37
  %123 = fadd float %86, 0x3EE4F8B580000000, !dbg !37
  %124 = fadd float %87, 0x3EE4F8B580000000, !dbg !37
  %125 = fadd float %88, 0x3EE4F8B580000000, !dbg !37
  %126 = fadd float %89, 0x3EE4F8B580000000, !dbg !37
  %127 = fadd float %95, 0x3EE4F8B580000000, !dbg !37
  %128 = fadd float %96, 0x3EE4F8B580000000, !dbg !37
  %129 = fadd float %97, 0x3EE4F8B580000000, !dbg !37
  %130 = fadd float %98, 0x3EE4F8B580000000, !dbg !37
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %131, 0, !dbg !38
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %132, 0, !dbg !38
  br i1 %.not.i, label %138, label %133, !dbg !38

133:                                              ; preds = %9
  br i1 %.not1.i, label %136, label %134, !dbg !38

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

138:                                              ; preds = %9
  br i1 %.not1.i, label %141, label %139, !dbg !38

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %134, %136, %139, %141
  %.0.i = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !38
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %143, 0, !dbg !38
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %144, 0, !dbg !38
  br i1 %.not.i3, label %150, label %145, !dbg !38

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %148, label %146, !dbg !38

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

150:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %153, label %151, !dbg !38

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %146, %148, %151, %153
  %.0.i5 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !38
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i8 = icmp eq i32 %155, 0, !dbg !38
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i11 = icmp eq i32 %156, 0, !dbg !38
  br i1 %.not.i8, label %162, label %157, !dbg !38

157:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %160, label %158, !dbg !38

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

162:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %165, label %163, !dbg !38

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

__nv_sqrtf.exit12:                                ; preds = %158, %160, %163, %165
  %.0.i10 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !38
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i13 = icmp eq i32 %167, 0, !dbg !38
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i16 = icmp eq i32 %168, 0, !dbg !38
  br i1 %.not.i13, label %174, label %169, !dbg !38

169:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %172, label %170, !dbg !38

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

174:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %177, label %175, !dbg !38

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

__nv_sqrtf.exit17:                                ; preds = %170, %172, %175, %177
  %.0.i15 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !38
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i18 = icmp eq i32 %179, 0, !dbg !38
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i21 = icmp eq i32 %180, 0, !dbg !38
  br i1 %.not.i18, label %186, label %181, !dbg !38

181:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %184, label %182, !dbg !38

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

186:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %189, label %187, !dbg !38

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

__nv_sqrtf.exit22:                                ; preds = %182, %184, %187, %189
  %.0.i20 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !38
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i23 = icmp eq i32 %191, 0, !dbg !38
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i26 = icmp eq i32 %192, 0, !dbg !38
  br i1 %.not.i23, label %198, label %193, !dbg !38

193:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %196, label %194, !dbg !38

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

198:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %201, label %199, !dbg !38

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

__nv_sqrtf.exit27:                                ; preds = %194, %196, %199, %201
  %.0.i25 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !38
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i28 = icmp eq i32 %203, 0, !dbg !38
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i31 = icmp eq i32 %204, 0, !dbg !38
  br i1 %.not.i28, label %210, label %205, !dbg !38

205:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %208, label %206, !dbg !38

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

210:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %213, label %211, !dbg !38

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

__nv_sqrtf.exit32:                                ; preds = %206, %208, %211, %213
  %.0.i30 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !38
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i33 = icmp eq i32 %215, 0, !dbg !38
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i36 = icmp eq i32 %216, 0, !dbg !38
  br i1 %.not.i33, label %222, label %217, !dbg !38

217:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %220, label %218, !dbg !38

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

222:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %225, label %223, !dbg !38

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

__nv_sqrtf.exit37:                                ; preds = %218, %220, %223, %225
  %.0.i35 = phi float [ %219, %218 ], [ %221, %220 ], [ %224, %223 ], [ %226, %225 ], !dbg !38
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i38 = icmp eq i32 %227, 0, !dbg !38
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i41 = icmp eq i32 %228, 0, !dbg !38
  br i1 %.not.i38, label %234, label %229, !dbg !38

229:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %232, label %230, !dbg !38

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

234:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %237, label %235, !dbg !38

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

__nv_sqrtf.exit42:                                ; preds = %230, %232, %235, %237
  %.0.i40 = phi float [ %231, %230 ], [ %233, %232 ], [ %236, %235 ], [ %238, %237 ], !dbg !38
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i43 = icmp eq i32 %239, 0, !dbg !38
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i46 = icmp eq i32 %240, 0, !dbg !38
  br i1 %.not.i43, label %246, label %241, !dbg !38

241:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %244, label %242, !dbg !38

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #4, !dbg !38
  br label %__nv_sqrtf.exit47, !dbg !38

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #4, !dbg !38
  br label %__nv_sqrtf.exit47, !dbg !38

246:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %249, label %247, !dbg !38

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #4, !dbg !38
  br label %__nv_sqrtf.exit47, !dbg !38

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #4, !dbg !38
  br label %__nv_sqrtf.exit47, !dbg !38

__nv_sqrtf.exit47:                                ; preds = %242, %244, %247, %249
  %.0.i45 = phi float [ %243, %242 ], [ %245, %244 ], [ %248, %247 ], [ %250, %249 ], !dbg !38
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i48 = icmp eq i32 %251, 0, !dbg !38
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i51 = icmp eq i32 %252, 0, !dbg !38
  br i1 %.not.i48, label %258, label %253, !dbg !38

253:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %256, label %254, !dbg !38

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !38
  br label %__nv_sqrtf.exit52, !dbg !38

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !38
  br label %__nv_sqrtf.exit52, !dbg !38

258:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %261, label %259, !dbg !38

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !38
  br label %__nv_sqrtf.exit52, !dbg !38

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !38
  br label %__nv_sqrtf.exit52, !dbg !38

__nv_sqrtf.exit52:                                ; preds = %254, %256, %259, %261
  %.0.i50 = phi float [ %255, %254 ], [ %257, %256 ], [ %260, %259 ], [ %262, %261 ], !dbg !38
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i53 = icmp eq i32 %263, 0, !dbg !38
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i56 = icmp eq i32 %264, 0, !dbg !38
  br i1 %.not.i53, label %270, label %265, !dbg !38

265:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %268, label %266, !dbg !38

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !38
  br label %__nv_sqrtf.exit57, !dbg !38

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !38
  br label %__nv_sqrtf.exit57, !dbg !38

270:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %273, label %271, !dbg !38

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !38
  br label %__nv_sqrtf.exit57, !dbg !38

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !38
  br label %__nv_sqrtf.exit57, !dbg !38

__nv_sqrtf.exit57:                                ; preds = %266, %268, %271, %273
  %.0.i55 = phi float [ %267, %266 ], [ %269, %268 ], [ %272, %271 ], [ %274, %273 ], !dbg !38
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i58 = icmp eq i32 %275, 0, !dbg !38
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i61 = icmp eq i32 %276, 0, !dbg !38
  br i1 %.not.i58, label %282, label %277, !dbg !38

277:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %280, label %278, !dbg !38

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !38
  br label %__nv_sqrtf.exit62, !dbg !38

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !38
  br label %__nv_sqrtf.exit62, !dbg !38

282:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %285, label %283, !dbg !38

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !38
  br label %__nv_sqrtf.exit62, !dbg !38

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !38
  br label %__nv_sqrtf.exit62, !dbg !38

__nv_sqrtf.exit62:                                ; preds = %278, %280, %283, %285
  %.0.i60 = phi float [ %279, %278 ], [ %281, %280 ], [ %284, %283 ], [ %286, %285 ], !dbg !38
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i63 = icmp eq i32 %287, 0, !dbg !38
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i66 = icmp eq i32 %288, 0, !dbg !38
  br i1 %.not.i63, label %294, label %289, !dbg !38

289:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %292, label %290, !dbg !38

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !38
  br label %__nv_sqrtf.exit67, !dbg !38

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !38
  br label %__nv_sqrtf.exit67, !dbg !38

294:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %297, label %295, !dbg !38

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !38
  br label %__nv_sqrtf.exit67, !dbg !38

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !38
  br label %__nv_sqrtf.exit67, !dbg !38

__nv_sqrtf.exit67:                                ; preds = %290, %292, %295, %297
  %.0.i65 = phi float [ %291, %290 ], [ %293, %292 ], [ %296, %295 ], [ %298, %297 ], !dbg !38
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i68 = icmp eq i32 %299, 0, !dbg !38
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i71 = icmp eq i32 %300, 0, !dbg !38
  br i1 %.not.i68, label %306, label %301, !dbg !38

301:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %304, label %302, !dbg !38

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #4, !dbg !38
  br label %__nv_sqrtf.exit72, !dbg !38

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #4, !dbg !38
  br label %__nv_sqrtf.exit72, !dbg !38

306:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %309, label %307, !dbg !38

307:                                              ; preds = %306
  %308 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #4, !dbg !38
  br label %__nv_sqrtf.exit72, !dbg !38

309:                                              ; preds = %306
  %310 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #4, !dbg !38
  br label %__nv_sqrtf.exit72, !dbg !38

__nv_sqrtf.exit72:                                ; preds = %302, %304, %307, %309
  %.0.i70 = phi float [ %303, %302 ], [ %305, %304 ], [ %308, %307 ], [ %310, %309 ], !dbg !38
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i73 = icmp eq i32 %311, 0, !dbg !38
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i76 = icmp eq i32 %312, 0, !dbg !38
  br i1 %.not.i73, label %318, label %313, !dbg !38

313:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %316, label %314, !dbg !38

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #4, !dbg !38
  br label %__nv_sqrtf.exit77, !dbg !38

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #4, !dbg !38
  br label %__nv_sqrtf.exit77, !dbg !38

318:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %321, label %319, !dbg !38

319:                                              ; preds = %318
  %320 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #4, !dbg !38
  br label %__nv_sqrtf.exit77, !dbg !38

321:                                              ; preds = %318
  %322 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #4, !dbg !38
  br label %__nv_sqrtf.exit77, !dbg !38

__nv_sqrtf.exit77:                                ; preds = %314, %316, %319, %321
  %.0.i75 = phi float [ %315, %314 ], [ %317, %316 ], [ %320, %319 ], [ %322, %321 ], !dbg !38
  %323 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %324 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %325 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %326 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %327 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %328 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %329 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %330 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %331 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !28
  %332 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !30
  %333 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !28
  %334 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !30
  %335 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !28
  %336 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !30
  %337 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !28
  %338 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !30
  %339 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !28
  %340 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !30
  %341 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !28
  %342 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !30
  %343 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !28
  %344 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !30
  %345 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !28
  %346 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !30
  %347 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %348 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !30
  %349 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %350 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !30
  %351 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %352 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !30
  %353 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %354 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !30
  %355 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !36
  %356 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !36
  %357 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !36
  %358 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !36
  %359 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !36
  %360 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !36
  %361 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !36
  %362 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !36
  %363 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !36
  %364 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !36
  %365 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !36
  %366 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !36
  %367 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !36
  %368 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !36
  %369 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !36
  %370 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !36
  %371 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !34
  %372 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !34
  %373 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !34
  %374 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !34
  %375 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !34
  %376 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !34
  %377 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !34
  %378 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !34
  %379 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !34
  %380 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !34
  %381 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !34
  %382 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !34
  %383 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !34
  %384 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !34
  %385 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !34
  %386 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !34
  %387 = shl i32 %12, 2, !dbg !17
  %388 = and i32 %387, 252, !dbg !17
  %389 = or disjoint i32 %18, %388, !dbg !18
  %390 = icmp slt i32 %389, 256, !dbg !19
  %.lobit1 = lshr i32 %12, 6, !dbg !12
  %391 = and i32 %.lobit1, 3, !dbg !12
  %392 = or disjoint i32 %391, %11, !dbg !13
  %393 = or disjoint i32 %392, 12, !dbg !13
  %394 = icmp slt i32 %393, 512, !dbg !14
  %395 = and i1 %394, %390, !dbg !27
  %396 = or disjoint i32 %392, 8, !dbg !13
  %397 = icmp slt i32 %396, 512, !dbg !14
  %398 = and i1 %397, %390, !dbg !27
  %399 = or disjoint i32 %392, 4, !dbg !13
  %400 = icmp slt i32 %399, 512, !dbg !14
  %401 = and i1 %400, %390, !dbg !27
  %402 = icmp slt i32 %392, 512, !dbg !14
  %403 = and i1 %402, %390, !dbg !27
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !39
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !39
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !39
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !39
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !39
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !39
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !39
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !39
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !39
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !39
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #4, !dbg !39
  %416 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #4, !dbg !39
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #4, !dbg !39
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i70) #4, !dbg !39
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i75) #4, !dbg !39
  %420 = shl i32 %392, 8, !dbg !40
  %421 = shl i32 %399, 8, !dbg !40
  %422 = shl i32 %396, 8, !dbg !40
  %423 = shl i32 %393, 8, !dbg !40
  %424 = add i32 %389, %420, !dbg !41
  %425 = add i32 %389, %421, !dbg !41
  %426 = add i32 %389, %422, !dbg !41
  %427 = add i32 %389, %423, !dbg !41
  %428 = sext i32 %424 to i64, !dbg !42
  %429 = getelementptr float, ptr addrspace(1) %5, i64 %428, !dbg !42
  %430 = sext i32 %425 to i64, !dbg !42
  %431 = getelementptr float, ptr addrspace(1) %5, i64 %430, !dbg !42
  %432 = sext i32 %426 to i64, !dbg !42
  %433 = getelementptr float, ptr addrspace(1) %5, i64 %432, !dbg !42
  %434 = sext i32 %427 to i64, !dbg !42
  %435 = getelementptr float, ptr addrspace(1) %5, i64 %434, !dbg !42
  %436 = and i32 %387, 1020, !dbg !43
  %437 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !43
  %438 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 1028, !dbg !43
  %439 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 2056, !dbg !43
  %440 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 3084, !dbg !43
  %441 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 4112, !dbg !43
  %442 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 5140, !dbg !43
  %443 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 6168, !dbg !43
  %444 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 7196, !dbg !43
  %445 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 8224, !dbg !43
  %446 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 9252, !dbg !43
  %447 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 10280, !dbg !43
  %448 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 11308, !dbg !43
  %449 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 12336, !dbg !43
  %450 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 13364, !dbg !43
  %451 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 14392, !dbg !43
  %452 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 15420, !dbg !43
  %453 = lshr i32 %436, 8, !dbg !43
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !43
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %436, !dbg !43
  %456 = or disjoint i32 %436, 1, !dbg !43
  %457 = getelementptr float, ptr addrspace(3) %454, i32 %456, !dbg !43
  %458 = or disjoint i32 %436, 2, !dbg !43
  %459 = getelementptr float, ptr addrspace(3) %454, i32 %458, !dbg !43
  %460 = or disjoint i32 %436, 3, !dbg !43
  %461 = getelementptr float, ptr addrspace(3) %454, i32 %460, !dbg !43
  %462 = or disjoint i32 %436, 1024, !dbg !43
  %463 = lshr i32 %462, 8, !dbg !43
  %464 = getelementptr float, ptr addrspace(3) @global_smem, i32 %463, !dbg !43
  %465 = getelementptr float, ptr addrspace(3) %464, i32 %462, !dbg !43
  %466 = or disjoint i32 %436, 1025, !dbg !43
  %467 = lshr i32 %466, 8, !dbg !43
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %467, !dbg !43
  %469 = getelementptr float, ptr addrspace(3) %468, i32 %466, !dbg !43
  %470 = or disjoint i32 %436, 1026, !dbg !43
  %471 = lshr i32 %470, 8, !dbg !43
  %472 = getelementptr float, ptr addrspace(3) @global_smem, i32 %471, !dbg !43
  %473 = getelementptr float, ptr addrspace(3) %472, i32 %470, !dbg !43
  %474 = or disjoint i32 %436, 1027, !dbg !43
  %475 = lshr i32 %474, 8, !dbg !43
  %476 = getelementptr float, ptr addrspace(3) @global_smem, i32 %475, !dbg !43
  %477 = getelementptr float, ptr addrspace(3) %476, i32 %474, !dbg !43
  %478 = or disjoint i32 %436, 2048, !dbg !43
  %479 = lshr i32 %478, 8, !dbg !43
  %480 = getelementptr float, ptr addrspace(3) @global_smem, i32 %479, !dbg !43
  %481 = getelementptr float, ptr addrspace(3) %480, i32 %478, !dbg !43
  %482 = or disjoint i32 %436, 2049, !dbg !43
  %483 = lshr i32 %482, 8, !dbg !43
  %484 = getelementptr float, ptr addrspace(3) @global_smem, i32 %483, !dbg !43
  %485 = getelementptr float, ptr addrspace(3) %484, i32 %482, !dbg !43
  %486 = or disjoint i32 %436, 2050, !dbg !43
  %487 = lshr i32 %486, 8, !dbg !43
  %488 = getelementptr float, ptr addrspace(3) @global_smem, i32 %487, !dbg !43
  %489 = getelementptr float, ptr addrspace(3) %488, i32 %486, !dbg !43
  %490 = or disjoint i32 %436, 2051, !dbg !43
  %491 = lshr i32 %490, 8, !dbg !43
  %492 = getelementptr float, ptr addrspace(3) @global_smem, i32 %491, !dbg !43
  %493 = getelementptr float, ptr addrspace(3) %492, i32 %490, !dbg !43
  %494 = or disjoint i32 %436, 3072, !dbg !43
  %495 = lshr i32 %494, 8, !dbg !43
  %496 = getelementptr float, ptr addrspace(3) @global_smem, i32 %495, !dbg !43
  %497 = getelementptr float, ptr addrspace(3) %496, i32 %494, !dbg !43
  %498 = or disjoint i32 %436, 3073, !dbg !43
  %499 = lshr i32 %498, 8, !dbg !43
  %500 = getelementptr float, ptr addrspace(3) @global_smem, i32 %499, !dbg !43
  %501 = getelementptr float, ptr addrspace(3) %500, i32 %498, !dbg !43
  %502 = or disjoint i32 %436, 3074, !dbg !43
  %503 = lshr i32 %502, 8, !dbg !43
  %504 = getelementptr float, ptr addrspace(3) @global_smem, i32 %503, !dbg !43
  %505 = getelementptr float, ptr addrspace(3) %504, i32 %502, !dbg !43
  %506 = or disjoint i32 %436, 3075, !dbg !43
  %507 = lshr i32 %506, 8, !dbg !43
  %508 = getelementptr float, ptr addrspace(3) @global_smem, i32 %507, !dbg !43
  %509 = getelementptr float, ptr addrspace(3) %508, i32 %506, !dbg !43
  %510 = getelementptr i1, ptr addrspace(1) %6, i64 %34, !dbg !44
  %511 = insertelement <4 x i32> poison, i32 %353, i64 0, !dbg !28
  %512 = insertelement <4 x i32> %511, i32 %351, i64 1, !dbg !28
  %513 = insertelement <4 x i32> %512, i32 %349, i64 2, !dbg !28
  %514 = insertelement <4 x i32> %513, i32 %347, i64 3, !dbg !28
  %515 = bitcast <4 x i32> %514 to <4 x float>, !dbg !28
  %516 = insertelement <4 x i32> poison, i32 %354, i64 0, !dbg !30
  %517 = insertelement <4 x i32> %516, i32 %352, i64 1, !dbg !30
  %518 = insertelement <4 x i32> %517, i32 %350, i64 2, !dbg !30
  %519 = insertelement <4 x i32> %518, i32 %348, i64 3, !dbg !30
  %520 = bitcast <4 x i32> %519 to <4 x float>, !dbg !30
  %521 = fsub <4 x float> %515, %520, !dbg !45
  %522 = insertelement <4 x i32> poison, i32 %370, i64 0, !dbg !36
  %523 = insertelement <4 x i32> %522, i32 %369, i64 1, !dbg !36
  %524 = insertelement <4 x i32> %523, i32 %368, i64 2, !dbg !36
  %525 = insertelement <4 x i32> %524, i32 %367, i64 3, !dbg !36
  %526 = bitcast <4 x i32> %525 to <4 x float>, !dbg !36
  %527 = insertelement <4 x i32> poison, i32 %386, i64 0, !dbg !34
  %528 = insertelement <4 x i32> %527, i32 %385, i64 1, !dbg !34
  %529 = insertelement <4 x i32> %528, i32 %384, i64 2, !dbg !34
  %530 = insertelement <4 x i32> %529, i32 %383, i64 3, !dbg !34
  %531 = bitcast <4 x i32> %530 to <4 x float>, !dbg !34
  %532 = insertelement <4 x float> poison, float %404, i64 0, !dbg !46
  %533 = insertelement <4 x float> %532, float %405, i64 1, !dbg !46
  %534 = insertelement <4 x float> %533, float %406, i64 2, !dbg !46
  %535 = insertelement <4 x float> %534, float %407, i64 3, !dbg !46
  %536 = fmul <4 x float> %521, %535, !dbg !46
  %537 = fmul <4 x float> %536, %531, !dbg !47
  %538 = fadd <4 x float> %537, %526, !dbg !48
  %539 = fcmp olt <4 x float> %538, zeroinitializer, !dbg !49
  %540 = select <4 x i1> %539, <4 x float> zeroinitializer, <4 x float> %538, !dbg !53
  %541 = fcmp ole <4 x float> %540, zeroinitializer, !dbg !54
  %542 = extractelement <4 x float> %540, i64 0, !dbg !43
  %543 = bitcast float %542 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %543, i1 true) #4, !dbg !43
  %544 = extractelement <4 x float> %540, i64 1, !dbg !43
  %545 = bitcast float %544 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %545, i1 true) #4, !dbg !43
  %546 = extractelement <4 x float> %540, i64 2, !dbg !43
  %547 = bitcast float %546 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %547, i1 true) #4, !dbg !43
  %548 = extractelement <4 x float> %540, i64 3, !dbg !43
  %549 = bitcast float %548 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %549, i1 true) #4, !dbg !43
  %550 = insertelement <4 x i32> poison, i32 %345, i64 0, !dbg !28
  %551 = insertelement <4 x i32> %550, i32 %343, i64 1, !dbg !28
  %552 = insertelement <4 x i32> %551, i32 %341, i64 2, !dbg !28
  %553 = insertelement <4 x i32> %552, i32 %339, i64 3, !dbg !28
  %554 = bitcast <4 x i32> %553 to <4 x float>, !dbg !28
  %555 = insertelement <4 x i32> poison, i32 %346, i64 0, !dbg !30
  %556 = insertelement <4 x i32> %555, i32 %344, i64 1, !dbg !30
  %557 = insertelement <4 x i32> %556, i32 %342, i64 2, !dbg !30
  %558 = insertelement <4 x i32> %557, i32 %340, i64 3, !dbg !30
  %559 = bitcast <4 x i32> %558 to <4 x float>, !dbg !30
  %560 = fsub <4 x float> %554, %559, !dbg !45
  %561 = insertelement <4 x i32> poison, i32 %366, i64 0, !dbg !36
  %562 = insertelement <4 x i32> %561, i32 %365, i64 1, !dbg !36
  %563 = insertelement <4 x i32> %562, i32 %364, i64 2, !dbg !36
  %564 = insertelement <4 x i32> %563, i32 %363, i64 3, !dbg !36
  %565 = bitcast <4 x i32> %564 to <4 x float>, !dbg !36
  %566 = insertelement <4 x i32> poison, i32 %382, i64 0, !dbg !34
  %567 = insertelement <4 x i32> %566, i32 %381, i64 1, !dbg !34
  %568 = insertelement <4 x i32> %567, i32 %380, i64 2, !dbg !34
  %569 = insertelement <4 x i32> %568, i32 %379, i64 3, !dbg !34
  %570 = bitcast <4 x i32> %569 to <4 x float>, !dbg !34
  %571 = insertelement <4 x float> poison, float %408, i64 0, !dbg !46
  %572 = insertelement <4 x float> %571, float %409, i64 1, !dbg !46
  %573 = insertelement <4 x float> %572, float %410, i64 2, !dbg !46
  %574 = insertelement <4 x float> %573, float %411, i64 3, !dbg !46
  %575 = fmul <4 x float> %560, %574, !dbg !46
  %576 = fmul <4 x float> %575, %570, !dbg !47
  %577 = fadd <4 x float> %576, %565, !dbg !48
  %578 = fcmp olt <4 x float> %577, zeroinitializer, !dbg !49
  %579 = select <4 x i1> %578, <4 x float> zeroinitializer, <4 x float> %577, !dbg !53
  %580 = fcmp ole <4 x float> %579, zeroinitializer, !dbg !54
  %581 = extractelement <4 x float> %579, i64 0, !dbg !43
  %582 = bitcast float %581 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %582, i1 true) #4, !dbg !43
  %583 = extractelement <4 x float> %579, i64 1, !dbg !43
  %584 = bitcast float %583 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %584, i1 true) #4, !dbg !43
  %585 = extractelement <4 x float> %579, i64 2, !dbg !43
  %586 = bitcast float %585 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %586, i1 true) #4, !dbg !43
  %587 = extractelement <4 x float> %579, i64 3, !dbg !43
  %588 = bitcast float %587 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %588, i1 true) #4, !dbg !43
  %589 = insertelement <4 x i32> poison, i32 %337, i64 0, !dbg !28
  %590 = insertelement <4 x i32> %589, i32 %335, i64 1, !dbg !28
  %591 = insertelement <4 x i32> %590, i32 %333, i64 2, !dbg !28
  %592 = insertelement <4 x i32> %591, i32 %331, i64 3, !dbg !28
  %593 = bitcast <4 x i32> %592 to <4 x float>, !dbg !28
  %594 = insertelement <4 x i32> poison, i32 %338, i64 0, !dbg !30
  %595 = insertelement <4 x i32> %594, i32 %336, i64 1, !dbg !30
  %596 = insertelement <4 x i32> %595, i32 %334, i64 2, !dbg !30
  %597 = insertelement <4 x i32> %596, i32 %332, i64 3, !dbg !30
  %598 = bitcast <4 x i32> %597 to <4 x float>, !dbg !30
  %599 = fsub <4 x float> %593, %598, !dbg !45
  %600 = insertelement <4 x i32> poison, i32 %362, i64 0, !dbg !36
  %601 = insertelement <4 x i32> %600, i32 %361, i64 1, !dbg !36
  %602 = insertelement <4 x i32> %601, i32 %360, i64 2, !dbg !36
  %603 = insertelement <4 x i32> %602, i32 %359, i64 3, !dbg !36
  %604 = bitcast <4 x i32> %603 to <4 x float>, !dbg !36
  %605 = insertelement <4 x i32> poison, i32 %378, i64 0, !dbg !34
  %606 = insertelement <4 x i32> %605, i32 %377, i64 1, !dbg !34
  %607 = insertelement <4 x i32> %606, i32 %376, i64 2, !dbg !34
  %608 = insertelement <4 x i32> %607, i32 %375, i64 3, !dbg !34
  %609 = bitcast <4 x i32> %608 to <4 x float>, !dbg !34
  %610 = insertelement <4 x float> poison, float %412, i64 0, !dbg !46
  %611 = insertelement <4 x float> %610, float %413, i64 1, !dbg !46
  %612 = insertelement <4 x float> %611, float %414, i64 2, !dbg !46
  %613 = insertelement <4 x float> %612, float %415, i64 3, !dbg !46
  %614 = fmul <4 x float> %599, %613, !dbg !46
  %615 = fmul <4 x float> %614, %609, !dbg !47
  %616 = fadd <4 x float> %615, %604, !dbg !48
  %617 = fcmp olt <4 x float> %616, zeroinitializer, !dbg !49
  %618 = select <4 x i1> %617, <4 x float> zeroinitializer, <4 x float> %616, !dbg !53
  %619 = fcmp ole <4 x float> %618, zeroinitializer, !dbg !54
  %620 = extractelement <4 x float> %618, i64 0, !dbg !43
  %621 = bitcast float %620 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %445, <1 x i32> %621, i1 true) #4, !dbg !43
  %622 = extractelement <4 x float> %618, i64 1, !dbg !43
  %623 = bitcast float %622 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %623, i1 true) #4, !dbg !43
  %624 = extractelement <4 x float> %618, i64 2, !dbg !43
  %625 = bitcast float %624 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %625, i1 true) #4, !dbg !43
  %626 = extractelement <4 x float> %618, i64 3, !dbg !43
  %627 = bitcast float %626 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %627, i1 true) #4, !dbg !43
  %628 = insertelement <4 x i32> poison, i32 %329, i64 0, !dbg !28
  %629 = insertelement <4 x i32> %628, i32 %327, i64 1, !dbg !28
  %630 = insertelement <4 x i32> %629, i32 %325, i64 2, !dbg !28
  %631 = insertelement <4 x i32> %630, i32 %323, i64 3, !dbg !28
  %632 = bitcast <4 x i32> %631 to <4 x float>, !dbg !28
  %633 = insertelement <4 x i32> poison, i32 %330, i64 0, !dbg !30
  %634 = insertelement <4 x i32> %633, i32 %328, i64 1, !dbg !30
  %635 = insertelement <4 x i32> %634, i32 %326, i64 2, !dbg !30
  %636 = insertelement <4 x i32> %635, i32 %324, i64 3, !dbg !30
  %637 = bitcast <4 x i32> %636 to <4 x float>, !dbg !30
  %638 = fsub <4 x float> %632, %637, !dbg !45
  %639 = insertelement <4 x i32> poison, i32 %358, i64 0, !dbg !36
  %640 = insertelement <4 x i32> %639, i32 %357, i64 1, !dbg !36
  %641 = insertelement <4 x i32> %640, i32 %356, i64 2, !dbg !36
  %642 = insertelement <4 x i32> %641, i32 %355, i64 3, !dbg !36
  %643 = bitcast <4 x i32> %642 to <4 x float>, !dbg !36
  %644 = insertelement <4 x i32> poison, i32 %374, i64 0, !dbg !34
  %645 = insertelement <4 x i32> %644, i32 %373, i64 1, !dbg !34
  %646 = insertelement <4 x i32> %645, i32 %372, i64 2, !dbg !34
  %647 = insertelement <4 x i32> %646, i32 %371, i64 3, !dbg !34
  %648 = bitcast <4 x i32> %647 to <4 x float>, !dbg !34
  %649 = insertelement <4 x float> poison, float %416, i64 0, !dbg !46
  %650 = insertelement <4 x float> %649, float %417, i64 1, !dbg !46
  %651 = insertelement <4 x float> %650, float %418, i64 2, !dbg !46
  %652 = insertelement <4 x float> %651, float %419, i64 3, !dbg !46
  %653 = fmul <4 x float> %638, %652, !dbg !46
  %654 = fmul <4 x float> %653, %648, !dbg !47
  %655 = fadd <4 x float> %654, %643, !dbg !48
  %656 = fcmp olt <4 x float> %655, zeroinitializer, !dbg !49
  %657 = select <4 x i1> %656, <4 x float> zeroinitializer, <4 x float> %655, !dbg !53
  %658 = fcmp ole <4 x float> %657, zeroinitializer, !dbg !54
  %659 = extractelement <4 x float> %657, i64 0, !dbg !43
  %660 = bitcast float %659 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %660, i1 true) #4, !dbg !43
  %661 = extractelement <4 x float> %657, i64 1, !dbg !43
  %662 = bitcast float %661 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %662, i1 true) #4, !dbg !43
  %663 = extractelement <4 x float> %657, i64 2, !dbg !43
  %664 = bitcast float %663 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %451, <1 x i32> %664, i1 true) #4, !dbg !43
  %665 = extractelement <4 x float> %657, i64 3, !dbg !43
  %666 = bitcast float %665 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, <1 x i32> %666, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %667 = load i32, ptr addrspace(3) %455, align 4, !dbg !43
  %668 = load i32, ptr addrspace(3) %457, align 4, !dbg !43
  %669 = load i32, ptr addrspace(3) %459, align 4, !dbg !43
  %670 = load i32, ptr addrspace(3) %461, align 4, !dbg !43
  %671 = load i32, ptr addrspace(3) %465, align 4, !dbg !43
  %672 = load i32, ptr addrspace(3) %469, align 4, !dbg !43
  %673 = load i32, ptr addrspace(3) %473, align 4, !dbg !43
  %674 = load i32, ptr addrspace(3) %477, align 4, !dbg !43
  %675 = load i32, ptr addrspace(3) %481, align 4, !dbg !43
  %676 = load i32, ptr addrspace(3) %485, align 4, !dbg !43
  %677 = load i32, ptr addrspace(3) %489, align 4, !dbg !43
  %678 = load i32, ptr addrspace(3) %493, align 4, !dbg !43
  %679 = load i32, ptr addrspace(3) %497, align 4, !dbg !43
  %680 = load i32, ptr addrspace(3) %501, align 4, !dbg !43
  %681 = load i32, ptr addrspace(3) %505, align 4, !dbg !43
  %682 = load i32, ptr addrspace(3) %509, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %667, i32 %668, i32 %669, i32 %670, ptr addrspace(1) %429, i1 %403) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %671, i32 %672, i32 %673, i32 %674, ptr addrspace(1) %431, i1 %401) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %675, i32 %676, i32 %677, i32 %678, ptr addrspace(1) %433, i1 %398) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %679, i32 %680, i32 %681, i32 %682, ptr addrspace(1) %435, i1 %395) #4, !dbg !43
  %683 = zext <4 x i1> %541 to <4 x i8>, !dbg !55
  %684 = bitcast <4 x i8> %683 to i32, !dbg !55
  %685 = zext <4 x i1> %580 to <4 x i8>, !dbg !55
  %686 = bitcast <4 x i8> %685 to i32, !dbg !55
  %687 = zext <4 x i1> %619 to <4 x i8>, !dbg !55
  %688 = bitcast <4 x i8> %687 to i32, !dbg !55
  %689 = zext <4 x i1> %658 to <4 x i8>, !dbg !55
  %690 = bitcast <4 x i8> %689 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %684, i32 %686, i32 %688, i32 %690, ptr addrspace(1) %510, i1 %42) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb32sqeg2dgy6jchzo4b3vv4azdcocm5qwndndtgxcnweh35fzed.py", directory: "inductor_cache/b3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 63, scope: !7)
!28 = !DILocation(line: 32, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 52, column: 34, scope: !7)
!41 = !DILocation(line: 52, column: 30, scope: !7)
!42 = !DILocation(line: 52, column: 25, scope: !7)
!43 = !DILocation(line: 52, column: 46, scope: !7)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 49, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 51, column: 21, scope: !7)
!55 = !DILocation(line: 53, column: 57, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
