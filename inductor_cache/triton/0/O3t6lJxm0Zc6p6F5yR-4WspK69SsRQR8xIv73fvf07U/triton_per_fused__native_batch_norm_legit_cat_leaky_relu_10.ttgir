#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":19:0)
#loc1 = loc(unknown)
#loc13 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":38:24)
#loc20 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":46:26)
#loc43 = loc(callsite(#loc1 at #loc13))
#loc46 = loc(callsite(#loc1 at #loc20))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_cat_leaky_relu_10(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c32768_i32 = arith.constant 32768 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<2.000000e-01> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c256_i32 : i32 loc(#loc5)
    %5 = arith.divsi %0, %c256_i32 : i32 loc(#loc6)
    %6 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<1x64xi32, #blocked> loc(#loc8)
    %8 = arith.addi %3, %7 : tensor<1x64xi32, #blocked> loc(#loc8)
    %9 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %8 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc10)
    %12 = tt.load %10, %11, %cst_0 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.select %11, %12, %cst_0 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc11)
    %14 = "tt.reduce"(%13) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc13)), %arg8: f32 loc(callsite(#loc1 at #loc13))):
      %54 = arith.addf %arg7, %arg8 : f32 loc(#loc47)
      tt.reduce.return %54 : f32 loc(#loc42)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc42)
    %15 = triton_gpu.convert_layout %14 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc16)
    %17 = tt.expand_dims %14 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc16)
    %18 = arith.divf %16, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc15)
    %19 = arith.divf %17, %cst : tensor<1x1xf32, #blocked> loc(#loc15)
    %20 = tt.broadcast %19 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc17)
    %21 = arith.subf %12, %20 : tensor<1x64xf32, #blocked> loc(#loc17)
    %22 = arith.mulf %21, %21 : tensor<1x64xf32, #blocked> loc(#loc18)
    %23 = arith.select %11, %22, %cst_0 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc19)
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc20)), %arg8: f32 loc(callsite(#loc1 at #loc20))):
      %54 = arith.addf %arg7, %arg8 : f32 loc(#loc48)
      tt.reduce.return %54 : f32 loc(#loc45)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc45)
    %25 = triton_gpu.convert_layout %24 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc22)
    %27 = tt.expand_dims %24 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc22)
    %28 = arith.divf %26, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc23)
    %29 = arith.divf %27, %cst : tensor<1x1xf32, #blocked> loc(#loc23)
    %30 = arith.addf %28, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc24)
    %31 = arith.addf %29, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc24)
    %32 = tt.extern_elementwise %30 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc21)
    %33 = tt.extern_elementwise %31 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc25)
    %35 = arith.mulf %21, %34 : tensor<1x64xf32, #blocked> loc(#loc25)
    %36 = arith.cmpf ogt, %35, %cst_0 : tensor<1x64xf32, #blocked> loc(#loc26)
    %37 = arith.mulf %35, %cst_1 : tensor<1x64xf32, #blocked> loc(#loc27)
    %38 = arith.select %36, %35, %37 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc28)
    %39 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc29)
    %40 = tt.addptr %39, %8 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc29)
    tt.store %40, %38, %11 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc30)
    %41 = arith.muli %4, %c64_i32 : i32 loc(#loc31)
    %42 = tt.splat %41 : i32 -> tensor<1x64xi32, #blocked> loc(#loc32)
    %43 = arith.addi %3, %42 : tensor<1x64xi32, #blocked> loc(#loc32)
    %44 = arith.muli %5, %c32768_i32 : i32 loc(#loc33)
    %45 = tt.splat %44 : i32 -> tensor<1x64xi32, #blocked> loc(#loc34)
    %46 = arith.addi %43, %45 : tensor<1x64xi32, #blocked> loc(#loc34)
    %47 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc35)
    %48 = tt.addptr %47, %46 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc35)
    tt.store %48, %38, %11 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc36)
    %49 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc37)
    %50 = tt.splat %49 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %51 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc38)
    tt.store %50, %32, %51 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %52 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc39)
    %53 = tt.splat %52 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.store %53, %18, %51 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":23:28)
#loc3 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":25:21)
#loc4 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":26:34)
#loc5 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":31:19)
#loc6 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":32:19)
#loc7 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":33:38)
#loc8 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":33:35)
#loc9 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":33:30)
#loc10 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":33:43)
#loc11 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":37:33)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":41:19)
#loc16 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":38:27)
#loc17 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":42:19)
#loc18 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":43:20)
#loc19 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":45:35)
#loc21 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":52:28)
#loc22 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":46:29)
#loc23 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":49:20)
#loc24 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":51:20)
#loc25 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":53:20)
#loc26 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":55:20)
#loc27 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":57:20)
#loc28 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":58:35)
#loc29 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":59:25)
#loc30 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":59:45)
#loc31 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":60:33)
#loc32 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":60:30)
#loc33 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":60:44)
#loc34 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":60:38)
#loc35 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":60:25)
#loc36 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":60:56)
#loc37 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":61:25)
#loc38 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":61:37)
#loc39 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":62:25)
#loc40 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":62:37)
#loc41 = loc("inductor_cache/es/cesir5htylmrjcws73go3dsgbwf7d3qllm4la4zeidwjyqfa6zej.py":62:4)
#loc42 = loc(callsite(#loc12 at #loc13))
#loc44 = loc(callsite(#loc14 at #loc12))
#loc45 = loc(callsite(#loc12 at #loc20))
#loc47 = loc(callsite(#loc44 at #loc13))
#loc48 = loc(callsite(#loc44 at #loc20))
