; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25(ptr addrspace(1) %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) nocapture readnone %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 1020, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 2, !dbg !15
  %20 = or disjoint i32 %19, 1, !dbg !16
  %21 = or disjoint i32 %19, 2, !dbg !16
  %22 = or disjoint i32 %19, 3, !dbg !16
  %23 = icmp slt i32 %19, 4, !dbg !17
  %24 = icmp slt i32 %20, 4, !dbg !17
  %25 = icmp slt i32 %21, 4, !dbg !17
  %26 = icmp slt i32 %22, 4, !dbg !17
  %27 = ashr exact i32 %19, 1, !dbg !18
  %.frozen = freeze i32 %20, !dbg !18
  %28 = sdiv i32 %.frozen, 2, !dbg !18
  %29 = ashr exact i32 %21, 1, !dbg !18
  %.frozen1 = freeze i32 %22, !dbg !18
  %30 = sdiv i32 %.frozen1, 2, !dbg !18
  %31 = mul i32 %28, 2, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = mul i32 %30, 2, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %32, !dbg !19
  %.frozen3 = freeze i32 %17, !dbg !20
  %33 = sdiv i32 %.frozen3, 256, !dbg !20
  %34 = mul i32 %33, 256, !dbg !21
  %.decomposed4 = sub i32 %.frozen3, %34, !dbg !21
  %35 = sext i32 %17 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = sext i32 %.decomposed to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !24
  %48 = sext i32 %.decomposed2 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %23) #2, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %23) #2, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %23) #2, !dbg !25
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %23) #2, !dbg !25
  %54 = bitcast i32 %53 to float, !dbg !25
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %24) #2, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %24) #2, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %24) #2, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %24) #2, !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %25) #2, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %25) #2, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %25) #2, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %25) #2, !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %26) #2, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %26) #2, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %26) #2, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %26) #2, !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = sext i32 %27 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %7, i64 %70, !dbg !26
  %72 = sext i32 %28 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %7, i64 %72, !dbg !26
  %74 = sext i32 %29 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %7, i64 %74, !dbg !26
  %76 = sext i32 %30 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %7, i64 %76, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %23) #2, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %23) #2, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %23) #2, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %23) #2, !dbg !27
  %82 = bitcast i32 %81 to float, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %24) #2, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %24) #2, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %24) #2, !dbg !27
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %24) #2, !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #2, !dbg !27
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #2, !dbg !27
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #2, !dbg !27
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #2, !dbg !27
  %92 = bitcast i32 %91 to float, !dbg !27
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %26) #2, !dbg !27
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %26) #2, !dbg !27
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %26) #2, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %26) #2, !dbg !27
  %97 = bitcast i32 %96 to float, !dbg !27
  %98 = shl i32 %20, 8, !dbg !28
  %99 = shl i32 %21, 8, !dbg !28
  %100 = shl i32 %22, 8, !dbg !28
  %101 = shl i32 %33, 10, !dbg !29
  %102 = add i32 %101, %.decomposed4, !dbg !30
  %103 = add i32 %33, %18, !dbg !31
  %104 = shl i32 %103, 10, !dbg !31
  %105 = add i32 %104, %.decomposed4, !dbg !31
  %106 = add i32 %102, %98, !dbg !31
  %107 = add i32 %102, %99, !dbg !31
  %108 = add i32 %102, %100, !dbg !31
  %109 = sext i32 %105 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !32
  %111 = sext i32 %106 to i64, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !32
  %113 = sext i32 %107 to i64, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !32
  %115 = sext i32 %108 to i64, !dbg !32
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !32
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %23) #2, !dbg !33
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !33
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !33
  %122 = bitcast i32 %118 to float, !dbg !33
  %123 = bitcast i32 %119 to float, !dbg !33
  %124 = bitcast i32 %120 to float, !dbg !33
  %125 = bitcast i32 %121 to float, !dbg !33
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %24) #2, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !33
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !33
  %131 = bitcast i32 %127 to float, !dbg !33
  %132 = bitcast i32 %128 to float, !dbg !33
  %133 = bitcast i32 %129 to float, !dbg !33
  %134 = bitcast i32 %130 to float, !dbg !33
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %25) #2, !dbg !33
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !33
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !33
  %140 = bitcast i32 %136 to float, !dbg !33
  %141 = bitcast i32 %137 to float, !dbg !33
  %142 = bitcast i32 %138 to float, !dbg !33
  %143 = bitcast i32 %139 to float, !dbg !33
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %26) #2, !dbg !33
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !33
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !33
  %149 = bitcast i32 %145 to float, !dbg !33
  %150 = bitcast i32 %146 to float, !dbg !33
  %151 = bitcast i32 %147 to float, !dbg !33
  %152 = bitcast i32 %148 to float, !dbg !33
  %153 = sext i32 %.decomposed4 to i64, !dbg !34
  %154 = getelementptr float, ptr addrspace(1) %8, i64 %153, !dbg !34
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 true) #2, !dbg !35
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !35
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !35
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !35
  %160 = bitcast i32 %156 to float, !dbg !35
  %161 = bitcast i32 %157 to float, !dbg !35
  %162 = bitcast i32 %158 to float, !dbg !35
  %163 = bitcast i32 %159 to float, !dbg !35
  %164 = fsub float %42, %42, !dbg !36
  %165 = fsub float %43, %43, !dbg !36
  %166 = fsub float %44, %44, !dbg !36
  %167 = fsub float %45, %45, !dbg !36
  %168 = fmul float %164, %54, !dbg !37
  %169 = fmul float %165, %54, !dbg !37
  %170 = fmul float %166, %54, !dbg !37
  %171 = fmul float %167, %54, !dbg !37
  %172 = fmul float %164, %59, !dbg !37
  %173 = fmul float %165, %59, !dbg !37
  %174 = fmul float %166, %59, !dbg !37
  %175 = fmul float %167, %59, !dbg !37
  %176 = fmul float %164, %64, !dbg !37
  %177 = fmul float %165, %64, !dbg !37
  %178 = fmul float %166, %64, !dbg !37
  %179 = fmul float %167, %64, !dbg !37
  %180 = fmul float %164, %69, !dbg !37
  %181 = fmul float %165, %69, !dbg !37
  %182 = fmul float %166, %69, !dbg !37
  %183 = fmul float %167, %69, !dbg !37
  %184 = fadd float %168, %42, !dbg !38
  %185 = fadd float %169, %43, !dbg !38
  %186 = fadd float %170, %44, !dbg !38
  %187 = fadd float %171, %45, !dbg !38
  %188 = fadd float %172, %42, !dbg !38
  %189 = fadd float %173, %43, !dbg !38
  %190 = fadd float %174, %44, !dbg !38
  %191 = fadd float %175, %45, !dbg !38
  %192 = fadd float %176, %42, !dbg !38
  %193 = fadd float %177, %43, !dbg !38
  %194 = fadd float %178, %44, !dbg !38
  %195 = fadd float %179, %45, !dbg !38
  %196 = fadd float %180, %42, !dbg !38
  %197 = fadd float %181, %43, !dbg !38
  %198 = fadd float %182, %44, !dbg !38
  %199 = fadd float %183, %45, !dbg !38
  %200 = fsub float %184, %184, !dbg !39
  %201 = fsub float %185, %185, !dbg !39
  %202 = fsub float %186, %186, !dbg !39
  %203 = fsub float %187, %187, !dbg !39
  %204 = fsub float %188, %188, !dbg !39
  %205 = fsub float %189, %189, !dbg !39
  %206 = fsub float %190, %190, !dbg !39
  %207 = fsub float %191, %191, !dbg !39
  %208 = fsub float %192, %192, !dbg !39
  %209 = fsub float %193, %193, !dbg !39
  %210 = fsub float %194, %194, !dbg !39
  %211 = fsub float %195, %195, !dbg !39
  %212 = fsub float %196, %196, !dbg !39
  %213 = fsub float %197, %197, !dbg !39
  %214 = fsub float %198, %198, !dbg !39
  %215 = fsub float %199, %199, !dbg !39
  %216 = fmul float %200, %82, !dbg !40
  %217 = fmul float %201, %82, !dbg !40
  %218 = fmul float %202, %82, !dbg !40
  %219 = fmul float %203, %82, !dbg !40
  %220 = fmul float %204, %87, !dbg !40
  %221 = fmul float %205, %87, !dbg !40
  %222 = fmul float %206, %87, !dbg !40
  %223 = fmul float %207, %87, !dbg !40
  %224 = fmul float %208, %92, !dbg !40
  %225 = fmul float %209, %92, !dbg !40
  %226 = fmul float %210, %92, !dbg !40
  %227 = fmul float %211, %92, !dbg !40
  %228 = fmul float %212, %97, !dbg !40
  %229 = fmul float %213, %97, !dbg !40
  %230 = fmul float %214, %97, !dbg !40
  %231 = fmul float %215, %97, !dbg !40
  %232 = fadd float %184, %216, !dbg !41
  %233 = fadd float %185, %217, !dbg !41
  %234 = fadd float %186, %218, !dbg !41
  %235 = fadd float %187, %219, !dbg !41
  %236 = fadd float %188, %220, !dbg !41
  %237 = fadd float %189, %221, !dbg !41
  %238 = fadd float %190, %222, !dbg !41
  %239 = fadd float %191, %223, !dbg !41
  %240 = fadd float %192, %224, !dbg !41
  %241 = fadd float %193, %225, !dbg !41
  %242 = fadd float %194, %226, !dbg !41
  %243 = fadd float %195, %227, !dbg !41
  %244 = fadd float %196, %228, !dbg !41
  %245 = fadd float %197, %229, !dbg !41
  %246 = fadd float %198, %230, !dbg !41
  %247 = fadd float %199, %231, !dbg !41
  %248 = fadd float %122, %160, !dbg !42
  %249 = fadd float %123, %161, !dbg !42
  %250 = fadd float %124, %162, !dbg !42
  %251 = fadd float %125, %163, !dbg !42
  %252 = fadd float %131, %160, !dbg !42
  %253 = fadd float %132, %161, !dbg !42
  %254 = fadd float %133, %162, !dbg !42
  %255 = fadd float %134, %163, !dbg !42
  %256 = fadd float %140, %160, !dbg !42
  %257 = fadd float %141, %161, !dbg !42
  %258 = fadd float %142, %162, !dbg !42
  %259 = fadd float %143, %163, !dbg !42
  %260 = fadd float %149, %160, !dbg !42
  %261 = fadd float %150, %161, !dbg !42
  %262 = fadd float %151, %162, !dbg !42
  %263 = fadd float %152, %163, !dbg !42
  %264 = fadd float %232, %248, !dbg !43
  %265 = fadd float %233, %249, !dbg !43
  %266 = fadd float %234, %250, !dbg !43
  %267 = fadd float %235, %251, !dbg !43
  %268 = fadd float %236, %252, !dbg !43
  %269 = fadd float %237, %253, !dbg !43
  %270 = fadd float %238, %254, !dbg !43
  %271 = fadd float %239, %255, !dbg !43
  %272 = fadd float %240, %256, !dbg !43
  %273 = fadd float %241, %257, !dbg !43
  %274 = fadd float %242, %258, !dbg !43
  %275 = fadd float %243, %259, !dbg !43
  %276 = fadd float %244, %260, !dbg !43
  %277 = fadd float %245, %261, !dbg !43
  %278 = fadd float %246, %262, !dbg !43
  %279 = fadd float %247, %263, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %280 = bitcast float %264 to i32, !dbg !45
  %281 = bitcast float %265 to i32, !dbg !45
  %282 = bitcast float %266 to i32, !dbg !45
  %283 = bitcast float %267 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %281, i32 %282, i32 %283, ptr addrspace(1) %110, i1 %23) #2, !dbg !45
  %284 = bitcast float %268 to i32, !dbg !45
  %285 = bitcast float %269 to i32, !dbg !45
  %286 = bitcast float %270 to i32, !dbg !45
  %287 = bitcast float %271 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %285, i32 %286, i32 %287, ptr addrspace(1) %112, i1 %24) #2, !dbg !45
  %288 = bitcast float %272 to i32, !dbg !45
  %289 = bitcast float %273 to i32, !dbg !45
  %290 = bitcast float %274 to i32, !dbg !45
  %291 = bitcast float %275 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %289, i32 %290, i32 %291, ptr addrspace(1) %114, i1 %25) #2, !dbg !45
  %292 = bitcast float %276 to i32, !dbg !45
  %293 = bitcast float %277 to i32, !dbg !45
  %294 = bitcast float %278 to i32, !dbg !45
  %295 = bitcast float %279 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %116, i1 %26) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c53qykjszpxtilaljhmx22eftahqhncootwyrskvstsx26he4io4.py", directory: "inductor_cache/53")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_25", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 30, scope: !7)
!23 = !DILocation(line: 36, column: 35, scope: !7)
!24 = !DILocation(line: 38, column: 31, scope: !7)
!25 = !DILocation(line: 38, column: 36, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 36, scope: !7)
!28 = !DILocation(line: 41, column: 44, scope: !7)
!29 = !DILocation(line: 41, column: 54, scope: !7)
!30 = !DILocation(line: 41, column: 40, scope: !7)
!31 = !DILocation(line: 41, column: 49, scope: !7)
!32 = !DILocation(line: 41, column: 35, scope: !7)
!33 = !DILocation(line: 41, column: 59, scope: !7)
!34 = !DILocation(line: 42, column: 31, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 19, scope: !7)
!37 = !DILocation(line: 54, column: 20, scope: !7)
!38 = !DILocation(line: 55, column: 19, scope: !7)
!39 = !DILocation(line: 59, column: 20, scope: !7)
!40 = !DILocation(line: 60, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 20, scope: !7)
!42 = !DILocation(line: 62, column: 20, scope: !7)
!43 = !DILocation(line: 63, column: 20, scope: !7)
!44 = !DILocation(line: 64, column: 4, scope: !7)
!45 = !DILocation(line: 65, column: 59, scope: !7)
!46 = !DILocation(line: 65, column: 4, scope: !7)
