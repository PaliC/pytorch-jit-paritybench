; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = and i32 %14, 124, !dbg !12
  %17 = lshr i32 %13, 3, !dbg !12
  %18 = and i32 %17, 3, !dbg !12
  %19 = and i32 %13, 32, !dbg !12
  %20 = lshr exact i32 %19, 3, !dbg !12
  %21 = and i32 %13, 64, !dbg !12
  %22 = lshr exact i32 %21, 3, !dbg !12
  %23 = and i32 %13, 128, !dbg !12
  %24 = lshr exact i32 %23, 3, !dbg !12
  %25 = or disjoint i32 %20, %18, !dbg !12
  %26 = or disjoint i32 %25, %22, !dbg !12
  %27 = or disjoint i32 %26, %24, !dbg !12
  %28 = or disjoint i32 %12, %16, !dbg !13
  %29 = or disjoint i32 %12, %27, !dbg !13
  %30 = or i32 %29, 32, !dbg !13
  %31 = or i32 %29, 64, !dbg !13
  %32 = or i32 %29, 96, !dbg !13
  %33 = icmp slt i32 %28, 128, !dbg !14
  %34 = icmp slt i32 %29, 128, !dbg !14
  %35 = icmp slt i32 %30, 128, !dbg !14
  %36 = icmp slt i32 %31, 128, !dbg !14
  %37 = icmp slt i32 %32, 128, !dbg !14
  %38 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %39 = shl i32 %38, 5, !dbg !16
  %.lobit1 = lshr exact i32 %19, 5, !dbg !17
  %40 = lshr exact i32 %21, 5, !dbg !17
  %41 = or disjoint i32 %.lobit1, %40, !dbg !17
  %42 = lshr exact i32 %23, 5, !dbg !17
  %43 = or disjoint i32 %41, %42, !dbg !17
  %44 = or disjoint i32 %39, %43, !dbg !18
  %45 = or disjoint i32 %44, 8, !dbg !18
  %46 = or disjoint i32 %44, 16, !dbg !18
  %47 = or disjoint i32 %44, 24, !dbg !18
  %48 = or disjoint i32 %39, %15, !dbg !18
  %49 = icmp slt i32 %44, 64, !dbg !19
  %50 = icmp slt i32 %45, 64, !dbg !19
  %51 = icmp slt i32 %46, 64, !dbg !19
  %52 = icmp slt i32 %47, 64, !dbg !19
  %53 = icmp slt i32 %48, 64, !dbg !19
  %.frozen = freeze i32 %28, !dbg !20
  %54 = sdiv i32 %.frozen, 32, !dbg !20
  %55 = mul i32 %54, 32, !dbg !21
  %.decomposed = sub i32 %.frozen, %55, !dbg !21
  %.frozen48 = freeze i32 %29, !dbg !20
  %56 = sdiv i32 %.frozen48, 32, !dbg !20
  %57 = mul i32 %56, 32, !dbg !21
  %.decomposed49 = sub i32 %.frozen48, %57, !dbg !21
  %58 = sdiv i32 %30, 32, !dbg !20
  %59 = sdiv i32 %31, 32, !dbg !20
  %60 = sdiv i32 %32, 32, !dbg !20
  %61 = shl i32 %44, 5, !dbg !22
  %62 = shl i32 %45, 5, !dbg !22
  %63 = shl i32 %46, 5, !dbg !22
  %64 = shl i32 %47, 5, !dbg !22
  %65 = shl i32 %54, 11, !dbg !23
  %66 = add i32 %65, %.decomposed, !dbg !24
  %67 = add i32 %66, %61, !dbg !25
  %68 = add i32 %66, %62, !dbg !25
  %69 = add i32 %66, %63, !dbg !25
  %70 = add i32 %66, %64, !dbg !25
  %71 = sext i32 %67 to i64, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !26
  %73 = sext i32 %68 to i64, !dbg !26
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !26
  %75 = sext i32 %69 to i64, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !26
  %77 = sext i32 %70 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !26
  %79 = and i1 %33, %49, !dbg !27
  %80 = and i1 %50, %33, !dbg !27
  %81 = and i1 %51, %33, !dbg !27
  %82 = and i1 %52, %33, !dbg !27
  %83 = and i1 %34, %53, !dbg !27
  %84 = and i1 %35, %53, !dbg !27
  %85 = and i1 %36, %53, !dbg !27
  %86 = and i1 %37, %53, !dbg !27
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %79) #4, !dbg !28
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %80) #4, !dbg !28
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %81) #4, !dbg !28
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %82) #4, !dbg !28
  %91 = sext i32 %.decomposed to i64, !dbg !29
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !29
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %33) #4, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !31
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %33) #4, !dbg !32
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !32
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !32
  %100 = bitcast i32 %96 to float, !dbg !32
  %101 = bitcast i32 %97 to float, !dbg !32
  %102 = bitcast i32 %98 to float, !dbg !32
  %103 = bitcast i32 %99 to float, !dbg !32
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !33
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %33) #4, !dbg !34
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %91, !dbg !35
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %33) #4, !dbg !36
  %108 = add i32 %48, 6144, !dbg !37
  %109 = shl nsw i32 %.decomposed49, 6, !dbg !38
  %110 = shl i32 %56, 13, !dbg !39
  %111 = shl i32 %58, 13, !dbg !39
  %112 = shl i32 %59, 13, !dbg !39
  %113 = shl i32 %60, 13, !dbg !39
  %114 = add i32 %110, %109, !dbg !40
  %115 = add i32 %114, %108, !dbg !41
  %116 = add i32 %111, %109, !dbg !40
  %117 = add i32 %116, %108, !dbg !41
  %118 = add i32 %112, %109, !dbg !40
  %119 = add i32 %118, %108, !dbg !41
  %120 = add i32 %113, %109, !dbg !40
  %121 = add i32 %120, %108, !dbg !41
  %122 = sext i32 %115 to i64, !dbg !42
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %122, !dbg !42
  %124 = sext i32 %117 to i64, !dbg !42
  %125 = getelementptr float, ptr addrspace(1) %5, i64 %124, !dbg !42
  %126 = sext i32 %119 to i64, !dbg !42
  %127 = getelementptr float, ptr addrspace(1) %5, i64 %126, !dbg !42
  %128 = sext i32 %121 to i64, !dbg !42
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %128, !dbg !42
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %83) #4, !dbg !43
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %84) #4, !dbg !43
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %85) #4, !dbg !43
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %86) #4, !dbg !43
  %134 = fadd float %100, 0x3EE4F8B580000000, !dbg !44
  %135 = fadd float %101, 0x3EE4F8B580000000, !dbg !44
  %136 = fadd float %102, 0x3EE4F8B580000000, !dbg !44
  %137 = fadd float %103, 0x3EE4F8B580000000, !dbg !44
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %138, 0, !dbg !45
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %139, 0, !dbg !45
  br i1 %.not.i, label %145, label %140, !dbg !45

140:                                              ; preds = %10
  br i1 %.not1.i, label %143, label %141, !dbg !45

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

145:                                              ; preds = %10
  br i1 %.not1.i, label %148, label %146, !dbg !45

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %141, %143, %146, %148
  %.0.i = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !45
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i33 = icmp eq i32 %150, 0, !dbg !45
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i36 = icmp eq i32 %151, 0, !dbg !45
  br i1 %.not.i33, label %157, label %152, !dbg !45

152:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %155, label %153, !dbg !45

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

157:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %160, label %158, !dbg !45

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

__nv_sqrtf.exit37:                                ; preds = %153, %155, %158, %160
  %.0.i35 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !45
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i38 = icmp eq i32 %162, 0, !dbg !45
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i41 = icmp eq i32 %163, 0, !dbg !45
  br i1 %.not.i38, label %169, label %164, !dbg !45

164:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %167, label %165, !dbg !45

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

169:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %172, label %170, !dbg !45

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

__nv_sqrtf.exit42:                                ; preds = %165, %167, %170, %172
  %.0.i40 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !45
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i43 = icmp eq i32 %174, 0, !dbg !45
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i46 = icmp eq i32 %175, 0, !dbg !45
  br i1 %.not.i43, label %181, label %176, !dbg !45

176:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %179, label %177, !dbg !45

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

181:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %184, label %182, !dbg !45

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

__nv_sqrtf.exit47:                                ; preds = %177, %179, %182, %184
  %.0.i45 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !45
  %186 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !28
  %187 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !30
  %188 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !28
  %189 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !30
  %190 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !28
  %191 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !28
  %193 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !30
  %194 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !28
  %195 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !28
  %196 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !28
  %197 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !28
  %198 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %199 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %200 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %201 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %202 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !28
  %203 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !28
  %204 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !28
  %205 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !28
  %206 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !43
  %207 = bitcast i32 %206 to float, !dbg !43
  %208 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !43
  %209 = bitcast i32 %208 to float, !dbg !43
  %210 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !43
  %211 = bitcast i32 %210 to float, !dbg !43
  %212 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !43
  %213 = bitcast i32 %212 to float, !dbg !43
  %214 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !43
  %215 = bitcast i32 %214 to float, !dbg !43
  %216 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !43
  %217 = bitcast i32 %216 to float, !dbg !43
  %218 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !43
  %219 = bitcast i32 %218 to float, !dbg !43
  %220 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !43
  %221 = bitcast i32 %220 to float, !dbg !43
  %222 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !43
  %223 = bitcast i32 %222 to float, !dbg !43
  %224 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !43
  %225 = bitcast i32 %224 to float, !dbg !43
  %226 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !43
  %227 = bitcast i32 %226 to float, !dbg !43
  %228 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !43
  %229 = bitcast i32 %228 to float, !dbg !43
  %230 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !43
  %231 = bitcast i32 %230 to float, !dbg !43
  %232 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !43
  %233 = bitcast i32 %232 to float, !dbg !43
  %234 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !43
  %235 = bitcast i32 %234 to float, !dbg !43
  %236 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !43
  %237 = bitcast i32 %236 to float, !dbg !43
  %238 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !36
  %239 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !36
  %240 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !36
  %241 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !36
  %242 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !34
  %243 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !34
  %244 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !34
  %245 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !34
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !46
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !46
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !46
  %250 = insertelement <4 x i32> poison, i32 %187, i64 0, !dbg !30
  %251 = insertelement <4 x i32> %250, i32 %189, i64 1, !dbg !30
  %252 = insertelement <4 x i32> %251, i32 %191, i64 2, !dbg !30
  %253 = insertelement <4 x i32> %252, i32 %193, i64 3, !dbg !30
  %254 = bitcast <4 x i32> %253 to <4 x float>, !dbg !30
  %255 = shufflevector <4 x float> %254, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %256 = insertelement <16 x i32> poison, i32 %186, i64 0, !dbg !28
  %257 = insertelement <16 x i32> %256, i32 %188, i64 1, !dbg !28
  %258 = insertelement <16 x i32> %257, i32 %190, i64 2, !dbg !28
  %259 = insertelement <16 x i32> %258, i32 %192, i64 3, !dbg !28
  %260 = insertelement <16 x i32> %259, i32 %194, i64 4, !dbg !28
  %261 = insertelement <16 x i32> %260, i32 %195, i64 5, !dbg !28
  %262 = insertelement <16 x i32> %261, i32 %196, i64 6, !dbg !28
  %263 = insertelement <16 x i32> %262, i32 %197, i64 7, !dbg !28
  %264 = insertelement <16 x i32> %263, i32 %198, i64 8, !dbg !28
  %265 = insertelement <16 x i32> %264, i32 %199, i64 9, !dbg !28
  %266 = insertelement <16 x i32> %265, i32 %200, i64 10, !dbg !28
  %267 = insertelement <16 x i32> %266, i32 %201, i64 11, !dbg !28
  %268 = insertelement <16 x i32> %267, i32 %202, i64 12, !dbg !28
  %269 = insertelement <16 x i32> %268, i32 %203, i64 13, !dbg !28
  %270 = insertelement <16 x i32> %269, i32 %204, i64 14, !dbg !28
  %271 = insertelement <16 x i32> %270, i32 %205, i64 15, !dbg !28
  %272 = bitcast <16 x i32> %271 to <16 x float>, !dbg !28
  %273 = fsub <16 x float> %272, %255, !dbg !47
  %274 = insertelement <4 x i32> poison, i32 %238, i64 0, !dbg !36
  %275 = insertelement <4 x i32> %274, i32 %239, i64 1, !dbg !36
  %276 = insertelement <4 x i32> %275, i32 %240, i64 2, !dbg !36
  %277 = insertelement <4 x i32> %276, i32 %241, i64 3, !dbg !36
  %278 = bitcast <4 x i32> %277 to <4 x float>, !dbg !36
  %279 = shufflevector <4 x float> %278, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %280 = insertelement <4 x i32> poison, i32 %242, i64 0, !dbg !34
  %281 = insertelement <4 x i32> %280, i32 %243, i64 1, !dbg !34
  %282 = insertelement <4 x i32> %281, i32 %244, i64 2, !dbg !34
  %283 = insertelement <4 x i32> %282, i32 %245, i64 3, !dbg !34
  %284 = bitcast <4 x i32> %283 to <4 x float>, !dbg !34
  %285 = shufflevector <4 x float> %284, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %286 = insertelement <16 x float> poison, float %249, i64 0, !dbg !48
  %287 = insertelement <16 x float> %286, float %248, i64 1, !dbg !48
  %288 = insertelement <16 x float> %287, float %247, i64 2, !dbg !48
  %289 = insertelement <16 x float> %288, float %246, i64 3, !dbg !48
  %290 = shufflevector <16 x float> %289, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !48
  %291 = fmul <16 x float> %273, %290, !dbg !48
  %292 = fmul <16 x float> %291, %285, !dbg !49
  %293 = fadd <16 x float> %292, %279, !dbg !50
  %294 = fcmp olt <16 x float> %293, zeroinitializer, !dbg !51
  %295 = extractelement <16 x i1> %294, i64 15, !dbg !55
  %296 = extractelement <16 x float> %293, i64 15, !dbg !55
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !55
  %298 = extractelement <16 x i1> %294, i64 14, !dbg !55
  %299 = extractelement <16 x float> %293, i64 14, !dbg !55
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !55
  %301 = extractelement <16 x i1> %294, i64 13, !dbg !55
  %302 = extractelement <16 x float> %293, i64 13, !dbg !55
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !55
  %304 = extractelement <16 x i1> %294, i64 12, !dbg !55
  %305 = extractelement <16 x float> %293, i64 12, !dbg !55
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !55
  %307 = extractelement <16 x i1> %294, i64 11, !dbg !55
  %308 = extractelement <16 x float> %293, i64 11, !dbg !55
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !55
  %310 = extractelement <16 x i1> %294, i64 10, !dbg !55
  %311 = extractelement <16 x float> %293, i64 10, !dbg !55
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !55
  %313 = extractelement <16 x i1> %294, i64 9, !dbg !55
  %314 = extractelement <16 x float> %293, i64 9, !dbg !55
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !55
  %316 = extractelement <16 x i1> %294, i64 8, !dbg !55
  %317 = extractelement <16 x float> %293, i64 8, !dbg !55
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !55
  %319 = extractelement <16 x i1> %294, i64 7, !dbg !55
  %320 = extractelement <16 x float> %293, i64 7, !dbg !55
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !55
  %322 = extractelement <16 x i1> %294, i64 6, !dbg !55
  %323 = extractelement <16 x float> %293, i64 6, !dbg !55
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !55
  %325 = extractelement <16 x i1> %294, i64 5, !dbg !55
  %326 = extractelement <16 x float> %293, i64 5, !dbg !55
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !55
  %328 = extractelement <16 x i1> %294, i64 4, !dbg !55
  %329 = extractelement <16 x float> %293, i64 4, !dbg !55
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !55
  %331 = extractelement <16 x i1> %294, i64 3, !dbg !55
  %332 = extractelement <16 x float> %293, i64 3, !dbg !55
  %333 = select i1 %331, float 0.000000e+00, float %332, !dbg !55
  %334 = extractelement <16 x i1> %294, i64 2, !dbg !55
  %335 = extractelement <16 x float> %293, i64 2, !dbg !55
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !55
  %337 = extractelement <16 x i1> %294, i64 1, !dbg !55
  %338 = extractelement <16 x float> %293, i64 1, !dbg !55
  %339 = select i1 %337, float 0.000000e+00, float %338, !dbg !55
  %340 = extractelement <16 x i1> %294, i64 0, !dbg !55
  %341 = extractelement <16 x float> %293, i64 0, !dbg !55
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !55
  %343 = shl i32 %13, 7, !dbg !55
  %344 = and i32 %343, 3968, !dbg !55
  %345 = or disjoint i32 %344, %.lobit1, !dbg !55
  %346 = or disjoint i32 %345, %40, !dbg !55
  %347 = or disjoint i32 %346, %42, !dbg !55
  %348 = and i32 %14, 1020, !dbg !55
  %349 = lshr exact i32 %344, 3, !dbg !55
  %350 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %349, !dbg !55
  %351 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %347, !dbg !55
  %352 = bitcast float %297 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 true) #4, !dbg !55
  %353 = or disjoint i32 %347, 32, !dbg !55
  %354 = lshr i32 %353, 5, !dbg !55
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %354, !dbg !55
  %356 = getelementptr inbounds float, ptr addrspace(3) %355, i32 %353, !dbg !55
  %357 = bitcast float %300 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #4, !dbg !55
  %358 = or disjoint i32 %347, 64, !dbg !55
  %359 = lshr i32 %358, 5, !dbg !55
  %360 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %359, !dbg !55
  %361 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %358, !dbg !55
  %362 = bitcast float %303 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #4, !dbg !55
  %363 = or disjoint i32 %347, 96, !dbg !55
  %364 = lshr i32 %363, 5, !dbg !55
  %365 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %364, !dbg !55
  %366 = getelementptr inbounds float, ptr addrspace(3) %365, i32 %363, !dbg !55
  %367 = bitcast float %306 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #4, !dbg !55
  %368 = or disjoint i32 %347, 8, !dbg !55
  %369 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %368, !dbg !55
  %370 = bitcast float %309 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #4, !dbg !55
  %371 = or disjoint i32 %347, 40, !dbg !55
  %372 = lshr i32 %371, 5, !dbg !55
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %372, !dbg !55
  %374 = getelementptr inbounds float, ptr addrspace(3) %373, i32 %371, !dbg !55
  %375 = bitcast float %312 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #4, !dbg !55
  %376 = or disjoint i32 %347, 72, !dbg !55
  %377 = lshr i32 %376, 5, !dbg !55
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %377, !dbg !55
  %379 = getelementptr inbounds float, ptr addrspace(3) %378, i32 %376, !dbg !55
  %380 = bitcast float %315 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #4, !dbg !55
  %381 = or disjoint i32 %347, 104, !dbg !55
  %382 = lshr i32 %381, 5, !dbg !55
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %382, !dbg !55
  %384 = getelementptr inbounds float, ptr addrspace(3) %383, i32 %381, !dbg !55
  %385 = bitcast float %318 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !55
  %386 = or disjoint i32 %347, 16, !dbg !55
  %387 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %386, !dbg !55
  %388 = bitcast float %321 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 true) #4, !dbg !55
  %389 = or disjoint i32 %347, 48, !dbg !55
  %390 = lshr i32 %389, 5, !dbg !55
  %391 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %390, !dbg !55
  %392 = getelementptr inbounds float, ptr addrspace(3) %391, i32 %389, !dbg !55
  %393 = bitcast float %324 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #4, !dbg !55
  %394 = or disjoint i32 %347, 80, !dbg !55
  %395 = lshr i32 %394, 5, !dbg !55
  %396 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %395, !dbg !55
  %397 = getelementptr inbounds float, ptr addrspace(3) %396, i32 %394, !dbg !55
  %398 = bitcast float %327 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %398, i1 true) #4, !dbg !55
  %399 = or disjoint i32 %347, 112, !dbg !55
  %400 = lshr i32 %399, 5, !dbg !55
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %400, !dbg !55
  %402 = getelementptr inbounds float, ptr addrspace(3) %401, i32 %399, !dbg !55
  %403 = bitcast float %330 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #4, !dbg !55
  %404 = or disjoint i32 %347, 24, !dbg !55
  %405 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %404, !dbg !55
  %406 = bitcast float %333 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 true) #4, !dbg !55
  %407 = or disjoint i32 %347, 56, !dbg !55
  %408 = lshr i32 %407, 5, !dbg !55
  %409 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %408, !dbg !55
  %410 = getelementptr inbounds float, ptr addrspace(3) %409, i32 %407, !dbg !55
  %411 = bitcast float %336 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #4, !dbg !55
  %412 = or disjoint i32 %347, 88, !dbg !55
  %413 = lshr i32 %412, 5, !dbg !55
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %413, !dbg !55
  %415 = getelementptr inbounds float, ptr addrspace(3) %414, i32 %412, !dbg !55
  %416 = bitcast float %339 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 true) #4, !dbg !55
  %417 = or disjoint i32 %347, 120, !dbg !55
  %418 = lshr i32 %417, 5, !dbg !55
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %418, !dbg !55
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %417, !dbg !55
  %421 = bitcast float %342 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %422 = lshr i32 %348, 5, !dbg !55
  %423 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %422, !dbg !55
  %424 = getelementptr inbounds float, ptr addrspace(3) %423, i32 %348, !dbg !55
  %425 = load float, ptr addrspace(3) %424, align 4, !dbg !55
  %426 = or disjoint i32 %348, 1, !dbg !55
  %427 = getelementptr inbounds float, ptr addrspace(3) %423, i32 %426, !dbg !55
  %428 = load float, ptr addrspace(3) %427, align 4, !dbg !55
  %429 = or disjoint i32 %348, 2, !dbg !55
  %430 = getelementptr inbounds float, ptr addrspace(3) %423, i32 %429, !dbg !55
  %431 = load float, ptr addrspace(3) %430, align 4, !dbg !55
  %432 = or disjoint i32 %348, 3, !dbg !55
  %433 = getelementptr inbounds float, ptr addrspace(3) %423, i32 %432, !dbg !55
  %434 = load float, ptr addrspace(3) %433, align 4, !dbg !55
  %435 = or disjoint i32 %348, 1024, !dbg !55
  %436 = lshr i32 %435, 5, !dbg !55
  %437 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %436, !dbg !55
  %438 = getelementptr inbounds float, ptr addrspace(3) %437, i32 %435, !dbg !55
  %439 = load float, ptr addrspace(3) %438, align 4, !dbg !55
  %440 = or disjoint i32 %348, 1025, !dbg !55
  %441 = lshr i32 %440, 5, !dbg !55
  %442 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %441, !dbg !55
  %443 = getelementptr inbounds float, ptr addrspace(3) %442, i32 %440, !dbg !55
  %444 = load float, ptr addrspace(3) %443, align 4, !dbg !55
  %445 = or disjoint i32 %348, 1026, !dbg !55
  %446 = lshr i32 %445, 5, !dbg !55
  %447 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %446, !dbg !55
  %448 = getelementptr inbounds float, ptr addrspace(3) %447, i32 %445, !dbg !55
  %449 = load float, ptr addrspace(3) %448, align 4, !dbg !55
  %450 = or disjoint i32 %348, 1027, !dbg !55
  %451 = lshr i32 %450, 5, !dbg !55
  %452 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %451, !dbg !55
  %453 = getelementptr inbounds float, ptr addrspace(3) %452, i32 %450, !dbg !55
  %454 = load float, ptr addrspace(3) %453, align 4, !dbg !55
  %455 = or disjoint i32 %348, 2048, !dbg !55
  %456 = lshr i32 %455, 5, !dbg !55
  %457 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %456, !dbg !55
  %458 = getelementptr inbounds float, ptr addrspace(3) %457, i32 %455, !dbg !55
  %459 = load float, ptr addrspace(3) %458, align 4, !dbg !55
  %460 = or disjoint i32 %348, 2049, !dbg !55
  %461 = lshr i32 %460, 5, !dbg !55
  %462 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %461, !dbg !55
  %463 = getelementptr inbounds float, ptr addrspace(3) %462, i32 %460, !dbg !55
  %464 = load float, ptr addrspace(3) %463, align 4, !dbg !55
  %465 = or disjoint i32 %348, 2050, !dbg !55
  %466 = lshr i32 %465, 5, !dbg !55
  %467 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %466, !dbg !55
  %468 = getelementptr inbounds float, ptr addrspace(3) %467, i32 %465, !dbg !55
  %469 = load float, ptr addrspace(3) %468, align 4, !dbg !55
  %470 = or disjoint i32 %348, 2051, !dbg !55
  %471 = lshr i32 %470, 5, !dbg !55
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %471, !dbg !55
  %473 = getelementptr inbounds float, ptr addrspace(3) %472, i32 %470, !dbg !55
  %474 = load float, ptr addrspace(3) %473, align 4, !dbg !55
  %475 = or disjoint i32 %348, 3072, !dbg !55
  %476 = lshr i32 %475, 5, !dbg !55
  %477 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %476, !dbg !55
  %478 = getelementptr inbounds float, ptr addrspace(3) %477, i32 %475, !dbg !55
  %479 = load float, ptr addrspace(3) %478, align 4, !dbg !55
  %480 = or disjoint i32 %348, 3073, !dbg !55
  %481 = lshr i32 %480, 5, !dbg !55
  %482 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %481, !dbg !55
  %483 = getelementptr inbounds float, ptr addrspace(3) %482, i32 %480, !dbg !55
  %484 = load float, ptr addrspace(3) %483, align 4, !dbg !55
  %485 = or disjoint i32 %348, 3074, !dbg !55
  %486 = lshr i32 %485, 5, !dbg !55
  %487 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %486, !dbg !55
  %488 = getelementptr inbounds float, ptr addrspace(3) %487, i32 %485, !dbg !55
  %489 = load float, ptr addrspace(3) %488, align 4, !dbg !55
  %490 = or disjoint i32 %348, 3075, !dbg !55
  %491 = lshr i32 %490, 5, !dbg !55
  %492 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %491, !dbg !55
  %493 = getelementptr inbounds float, ptr addrspace(3) %492, i32 %490, !dbg !55
  %494 = load float, ptr addrspace(3) %493, align 4, !dbg !55
  %495 = fadd float %425, %237, !dbg !56
  %496 = fadd float %428, %235, !dbg !56
  %497 = fadd float %431, %233, !dbg !56
  %498 = fadd float %434, %231, !dbg !56
  %499 = fadd float %439, %229, !dbg !56
  %500 = fadd float %444, %227, !dbg !56
  %501 = fadd float %449, %225, !dbg !56
  %502 = fadd float %454, %223, !dbg !56
  %503 = fadd float %459, %221, !dbg !56
  %504 = fadd float %464, %219, !dbg !56
  %505 = fadd float %469, %217, !dbg !56
  %506 = fadd float %474, %215, !dbg !56
  %507 = fadd float %479, %213, !dbg !56
  %508 = fadd float %484, %211, !dbg !56
  %509 = fadd float %489, %209, !dbg !56
  %510 = fadd float %494, %207, !dbg !56
  %511 = add i32 %114, %48, !dbg !57
  %512 = add i32 %116, %48, !dbg !57
  %513 = add i32 %118, %48, !dbg !57
  %514 = add i32 %120, %48, !dbg !57
  %515 = sext i32 %511 to i64, !dbg !58
  %516 = getelementptr float, ptr addrspace(1) %6, i64 %515, !dbg !58
  %517 = sext i32 %512 to i64, !dbg !58
  %518 = getelementptr float, ptr addrspace(1) %6, i64 %517, !dbg !58
  %519 = sext i32 %513 to i64, !dbg !58
  %520 = getelementptr float, ptr addrspace(1) %6, i64 %519, !dbg !58
  %521 = sext i32 %514 to i64, !dbg !58
  %522 = getelementptr float, ptr addrspace(1) %6, i64 %521, !dbg !58
  %523 = bitcast float %425 to i32, !dbg !59
  %524 = bitcast float %428 to i32, !dbg !59
  %525 = bitcast float %431 to i32, !dbg !59
  %526 = bitcast float %434 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %523, i32 %524, i32 %525, i32 %526, ptr addrspace(1) %516, i1 %83) #4, !dbg !59
  %527 = bitcast float %439 to i32, !dbg !59
  %528 = bitcast float %444 to i32, !dbg !59
  %529 = bitcast float %449 to i32, !dbg !59
  %530 = bitcast float %454 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %527, i32 %528, i32 %529, i32 %530, ptr addrspace(1) %518, i1 %84) #4, !dbg !59
  %531 = bitcast float %459 to i32, !dbg !59
  %532 = bitcast float %464 to i32, !dbg !59
  %533 = bitcast float %469 to i32, !dbg !59
  %534 = bitcast float %474 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %531, i32 %532, i32 %533, i32 %534, ptr addrspace(1) %520, i1 %85) #4, !dbg !59
  %535 = bitcast float %479 to i32, !dbg !59
  %536 = bitcast float %484 to i32, !dbg !59
  %537 = bitcast float %489 to i32, !dbg !59
  %538 = bitcast float %494 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %535, i32 %536, i32 %537, i32 %538, ptr addrspace(1) %522, i1 %86) #4, !dbg !59
  %539 = getelementptr float, ptr addrspace(1) %7, i64 %71, !dbg !60
  %540 = getelementptr float, ptr addrspace(1) %7, i64 %73, !dbg !60
  %541 = getelementptr float, ptr addrspace(1) %7, i64 %75, !dbg !60
  %542 = getelementptr float, ptr addrspace(1) %7, i64 %77, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %543 = shl i32 %13, 9, !dbg !61
  %544 = and i32 %543, 3584, !dbg !61
  %545 = or disjoint i32 %544, %18, !dbg !61
  %546 = or disjoint i32 %545, %20, !dbg !61
  %547 = or disjoint i32 %546, %22, !dbg !61
  %548 = or disjoint i32 %547, %24, !dbg !61
  %549 = lshr exact i32 %544, 3, !dbg !61
  %550 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %549, !dbg !61
  %551 = getelementptr float, ptr addrspace(3) %550, i32 %548, !dbg !61
  %552 = bitcast float %495 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %551, <1 x i32> %552, i1 true) #4, !dbg !61
  %553 = or disjoint i32 %548, 128, !dbg !61
  %554 = lshr i32 %553, 5, !dbg !61
  %555 = and i32 %554, 134217724, !dbg !61
  %556 = getelementptr float, ptr addrspace(3) @global_smem, i32 %555, !dbg !61
  %557 = getelementptr float, ptr addrspace(3) %556, i32 %553, !dbg !61
  %558 = bitcast float %496 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %557, <1 x i32> %558, i1 true) #4, !dbg !61
  %559 = or disjoint i32 %548, 256, !dbg !61
  %560 = lshr i32 %559, 5, !dbg !61
  %561 = and i32 %560, 134217724, !dbg !61
  %562 = getelementptr float, ptr addrspace(3) @global_smem, i32 %561, !dbg !61
  %563 = getelementptr float, ptr addrspace(3) %562, i32 %559, !dbg !61
  %564 = bitcast float %497 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %563, <1 x i32> %564, i1 true) #4, !dbg !61
  %565 = or disjoint i32 %548, 384, !dbg !61
  %566 = lshr i32 %565, 5, !dbg !61
  %567 = and i32 %566, 134217724, !dbg !61
  %568 = getelementptr float, ptr addrspace(3) @global_smem, i32 %567, !dbg !61
  %569 = getelementptr float, ptr addrspace(3) %568, i32 %565, !dbg !61
  %570 = bitcast float %498 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %569, <1 x i32> %570, i1 true) #4, !dbg !61
  %571 = or disjoint i32 %548, 32, !dbg !61
  %572 = getelementptr float, ptr addrspace(3) %550, i32 %571, !dbg !61
  %573 = bitcast float %499 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %572, <1 x i32> %573, i1 true) #4, !dbg !61
  %574 = or disjoint i32 %548, 160, !dbg !61
  %575 = lshr i32 %574, 5, !dbg !61
  %576 = and i32 %575, 134217724, !dbg !61
  %577 = getelementptr float, ptr addrspace(3) @global_smem, i32 %576, !dbg !61
  %578 = getelementptr float, ptr addrspace(3) %577, i32 %574, !dbg !61
  %579 = bitcast float %500 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %578, <1 x i32> %579, i1 true) #4, !dbg !61
  %580 = or disjoint i32 %548, 288, !dbg !61
  %581 = lshr i32 %580, 5, !dbg !61
  %582 = and i32 %581, 134217724, !dbg !61
  %583 = getelementptr float, ptr addrspace(3) @global_smem, i32 %582, !dbg !61
  %584 = getelementptr float, ptr addrspace(3) %583, i32 %580, !dbg !61
  %585 = bitcast float %501 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %584, <1 x i32> %585, i1 true) #4, !dbg !61
  %586 = or disjoint i32 %548, 416, !dbg !61
  %587 = lshr i32 %586, 5, !dbg !61
  %588 = and i32 %587, 134217724, !dbg !61
  %589 = getelementptr float, ptr addrspace(3) @global_smem, i32 %588, !dbg !61
  %590 = getelementptr float, ptr addrspace(3) %589, i32 %586, !dbg !61
  %591 = bitcast float %502 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %590, <1 x i32> %591, i1 true) #4, !dbg !61
  %592 = or disjoint i32 %548, 64, !dbg !61
  %593 = getelementptr float, ptr addrspace(3) %550, i32 %592, !dbg !61
  %594 = bitcast float %503 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %593, <1 x i32> %594, i1 true) #4, !dbg !61
  %595 = or disjoint i32 %548, 192, !dbg !61
  %596 = lshr i32 %595, 5, !dbg !61
  %597 = and i32 %596, 134217724, !dbg !61
  %598 = getelementptr float, ptr addrspace(3) @global_smem, i32 %597, !dbg !61
  %599 = getelementptr float, ptr addrspace(3) %598, i32 %595, !dbg !61
  %600 = bitcast float %504 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %599, <1 x i32> %600, i1 true) #4, !dbg !61
  %601 = or disjoint i32 %548, 320, !dbg !61
  %602 = lshr i32 %601, 5, !dbg !61
  %603 = and i32 %602, 134217724, !dbg !61
  %604 = getelementptr float, ptr addrspace(3) @global_smem, i32 %603, !dbg !61
  %605 = getelementptr float, ptr addrspace(3) %604, i32 %601, !dbg !61
  %606 = bitcast float %505 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %605, <1 x i32> %606, i1 true) #4, !dbg !61
  %607 = or disjoint i32 %548, 448, !dbg !61
  %608 = lshr i32 %607, 5, !dbg !61
  %609 = and i32 %608, 134217724, !dbg !61
  %610 = getelementptr float, ptr addrspace(3) @global_smem, i32 %609, !dbg !61
  %611 = getelementptr float, ptr addrspace(3) %610, i32 %607, !dbg !61
  %612 = bitcast float %506 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %611, <1 x i32> %612, i1 true) #4, !dbg !61
  %613 = or disjoint i32 %548, 96, !dbg !61
  %614 = getelementptr float, ptr addrspace(3) %550, i32 %613, !dbg !61
  %615 = bitcast float %507 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %614, <1 x i32> %615, i1 true) #4, !dbg !61
  %616 = or disjoint i32 %548, 224, !dbg !61
  %617 = lshr i32 %616, 5, !dbg !61
  %618 = and i32 %617, 134217724, !dbg !61
  %619 = getelementptr float, ptr addrspace(3) @global_smem, i32 %618, !dbg !61
  %620 = getelementptr float, ptr addrspace(3) %619, i32 %616, !dbg !61
  %621 = bitcast float %508 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %620, <1 x i32> %621, i1 true) #4, !dbg !61
  %622 = or disjoint i32 %548, 352, !dbg !61
  %623 = lshr i32 %622, 5, !dbg !61
  %624 = and i32 %623, 134217724, !dbg !61
  %625 = getelementptr float, ptr addrspace(3) @global_smem, i32 %624, !dbg !61
  %626 = getelementptr float, ptr addrspace(3) %625, i32 %622, !dbg !61
  %627 = bitcast float %509 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %626, <1 x i32> %627, i1 true) #4, !dbg !61
  %628 = or disjoint i32 %548, 480, !dbg !61
  %629 = lshr i32 %628, 5, !dbg !61
  %630 = and i32 %629, 134217724, !dbg !61
  %631 = getelementptr float, ptr addrspace(3) @global_smem, i32 %630, !dbg !61
  %632 = getelementptr float, ptr addrspace(3) %631, i32 %628, !dbg !61
  %633 = bitcast float %510 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %633, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %634 = lshr i32 %14, 5, !dbg !61
  %635 = and i32 %634, 28, !dbg !61
  %636 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %635, !dbg !61
  %637 = getelementptr inbounds float, ptr addrspace(3) %636, i32 %348, !dbg !61
  %638 = and i32 %436, 60, !dbg !61
  %639 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %638, !dbg !61
  %640 = getelementptr inbounds float, ptr addrspace(3) %639, i32 %435, !dbg !61
  %641 = load <4 x i32>, ptr addrspace(3) %640, align 16, !dbg !61
  %642 = and i32 %456, 92, !dbg !61
  %643 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %642, !dbg !61
  %644 = getelementptr inbounds float, ptr addrspace(3) %643, i32 %455, !dbg !61
  %645 = load <4 x i32>, ptr addrspace(3) %644, align 16, !dbg !61
  %646 = and i32 %476, 124, !dbg !61
  %647 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %646, !dbg !61
  %648 = getelementptr inbounds float, ptr addrspace(3) %647, i32 %475, !dbg !61
  %649 = load <4 x i32>, ptr addrspace(3) %648, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %637, align 16, !dbg !61
  %650 = getelementptr inbounds i8, ptr addrspace(3) %637, i32 4, !dbg !61
  %.extract18 = load i32, ptr addrspace(3) %650, align 4, !dbg !61
  %651 = getelementptr inbounds i8, ptr addrspace(3) %637, i32 8, !dbg !61
  %.extract19 = load i32, ptr addrspace(3) %651, align 8, !dbg !61
  %652 = getelementptr inbounds i8, ptr addrspace(3) %637, i32 12, !dbg !61
  %.extract20 = load i32, ptr addrspace(3) %652, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %539, i1 %79) #4, !dbg !61
  %.extract21 = extractelement <4 x i32> %641, i64 0, !dbg !61
  %.extract22 = extractelement <4 x i32> %641, i64 1, !dbg !61
  %.extract23 = extractelement <4 x i32> %641, i64 2, !dbg !61
  %.extract24 = extractelement <4 x i32> %641, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %540, i1 %80) #4, !dbg !61
  %.extract25 = extractelement <4 x i32> %645, i64 0, !dbg !61
  %.extract26 = extractelement <4 x i32> %645, i64 1, !dbg !61
  %.extract27 = extractelement <4 x i32> %645, i64 2, !dbg !61
  %.extract28 = extractelement <4 x i32> %645, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %541, i1 %81) #4, !dbg !61
  %.extract29 = extractelement <4 x i32> %649, i64 0, !dbg !61
  %.extract30 = extractelement <4 x i32> %649, i64 1, !dbg !61
  %.extract31 = extractelement <4 x i32> %649, i64 2, !dbg !61
  %.extract32 = extractelement <4 x i32> %649, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %542, i1 %82) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbn65sa2g7vs66mfkvakocc4bntguzcbgtsqg56noybo4odbaqn3.py", directory: "inductor_cache/bn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 48, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 61, scope: !7)
!28 = !DILocation(line: 31, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 38, scope: !7)
!38 = !DILocation(line: 36, column: 46, scope: !7)
!39 = !DILocation(line: 36, column: 56, scope: !7)
!40 = !DILocation(line: 36, column: 43, scope: !7)
!41 = !DILocation(line: 36, column: 51, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 61, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 26, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 37, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 38, scope: !7)
!58 = !DILocation(line: 51, column: 25, scope: !7)
!59 = !DILocation(line: 51, column: 55, scope: !7)
!60 = !DILocation(line: 52, column: 25, scope: !7)
!61 = !DILocation(line: 52, column: 55, scope: !7)
!62 = !DILocation(line: 52, column: 4, scope: !7)
