; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 3, !dbg !12
  %15 = and i32 %14, 1016, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = icmp slt i32 %16, 115200, !dbg !14
  %19 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %20 = shufflevector <2 x i32> %19, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %21 = sdiv <2 x i32> %20, <i32 1920, i32 128>, !dbg !15
  %22 = srem <2 x i32> %21, splat (i32 15), !dbg !16
  %23 = srem i32 %16, 128, !dbg !17
  %24 = srem i32 %17, 128, !dbg !17
  %25 = sdiv i32 %16, 28800, !dbg !18
  %26 = sext i32 %16 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %28 = sext i32 %17 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %18) #4, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %18) #4, !dbg !20
  %32 = sext i32 %23 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !21
  %34 = sext i32 %24 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %18) #4, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %18) #4, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %45 = bitcast i32 %41 to float, !dbg !24
  %46 = bitcast i32 %42 to float, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %18) #4, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %18) #4, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %18) #4, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !27
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %18) #4, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %18) #4, !dbg !28
  %66 = extractelement <2 x i32> %22, i64 0, !dbg !29
  %67 = shl nsw i32 %66, 1, !dbg !30
  %68 = icmp sgt i32 %66, 0, !dbg !31
  %69 = extractelement <2 x i32> %22, i64 1, !dbg !29
  %70 = shl nsw i32 %69, 1, !dbg !32
  %71 = icmp sgt i32 %69, 0, !dbg !33
  %72 = and i1 %68, %71, !dbg !34
  %73 = shl nsw i32 %69, 8, !dbg !35
  %74 = mul nsw i32 %66, 7424, !dbg !36
  %75 = mul i32 %25, 107648, !dbg !37
  %76 = add i32 %73, %75, !dbg !38
  %77 = add i32 %76, -3840, !dbg !39
  %78 = add i32 %77, %23, !dbg !40
  %79 = add i32 %78, %74, !dbg !41
  %80 = add i32 %77, %24, !dbg !40
  %81 = add i32 %80, %74, !dbg !41
  %82 = sext i32 %79 to i64, !dbg !42
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !42
  %84 = sext i32 %81 to i64, !dbg !42
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !42
  %86 = and i1 %18, %72, !dbg !43
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86) #4, !dbg !44
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86) #4, !dbg !44
  %89 = icmp sgt i32 %69, -1, !dbg !45
  %90 = and i1 %68, %89, !dbg !46
  %91 = add i32 %76, -3712, !dbg !47
  %92 = add i32 %91, %23, !dbg !48
  %93 = add i32 %92, %74, !dbg !49
  %94 = add i32 %91, %24, !dbg !48
  %95 = add i32 %94, %74, !dbg !49
  %96 = sext i32 %93 to i64, !dbg !50
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !50
  %98 = sext i32 %95 to i64, !dbg !50
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !50
  %100 = and i1 %18, %90, !dbg !51
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %100, i32 -8388608, i1 %100, i32 -8388608, i1 %100, i32 -8388608, i1 %100, i32 -8388608, i1 %100) #4, !dbg !52
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %100, i32 -8388608, i1 %100, i32 -8388608, i1 %100, i32 -8388608, i1 %100, i32 -8388608, i1 %100) #4, !dbg !52
  %103 = or disjoint i32 %70, 1, !dbg !53
  %104 = icmp slt i32 %103, 29, !dbg !54
  %105 = and i1 %89, %104, !dbg !55
  %106 = and i1 %68, %105, !dbg !56
  %107 = add i32 %76, -3584, !dbg !57
  %108 = add i32 %107, %23, !dbg !58
  %109 = add i32 %108, %74, !dbg !59
  %110 = add i32 %107, %24, !dbg !58
  %111 = add i32 %110, %74, !dbg !59
  %112 = sext i32 %109 to i64, !dbg !60
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !60
  %114 = sext i32 %111 to i64, !dbg !60
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !60
  %116 = and i1 %18, %106, !dbg !61
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116) #4, !dbg !62
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116) #4, !dbg !62
  %119 = icmp sgt i32 %66, -1, !dbg !63
  %120 = and i1 %119, %71, !dbg !64
  %121 = add i32 %76, -128, !dbg !65
  %122 = add i32 %121, %23, !dbg !66
  %123 = add i32 %122, %74, !dbg !67
  %124 = add i32 %121, %24, !dbg !66
  %125 = add i32 %124, %74, !dbg !67
  %126 = sext i32 %123 to i64, !dbg !68
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !68
  %128 = sext i32 %125 to i64, !dbg !68
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !68
  %130 = and i1 %18, %120, !dbg !69
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130) #4, !dbg !70
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130) #4, !dbg !70
  %133 = or i32 %66, %69, !dbg !29
  %134 = icmp sgt i32 %133, -1, !dbg !29
  %135 = add i32 %76, %23, !dbg !71
  %136 = add i32 %135, %74, !dbg !72
  %137 = add i32 %76, %24, !dbg !71
  %138 = add i32 %137, %74, !dbg !72
  %139 = sext i32 %136 to i64, !dbg !73
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !73
  %141 = sext i32 %138 to i64, !dbg !73
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !73
  %143 = and i1 %18, %134, !dbg !74
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %143, i32 -8388608, i1 %143, i32 -8388608, i1 %143, i32 -8388608, i1 %143, i32 -8388608, i1 %143) #4, !dbg !75
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %143, i32 -8388608, i1 %143, i32 -8388608, i1 %143, i32 -8388608, i1 %143, i32 -8388608, i1 %143) #4, !dbg !75
  %146 = and i1 %119, %105, !dbg !76
  %147 = add i32 %76, 128, !dbg !77
  %148 = add i32 %147, %23, !dbg !78
  %149 = add i32 %148, %74, !dbg !79
  %150 = add i32 %147, %24, !dbg !78
  %151 = add i32 %150, %74, !dbg !79
  %152 = sext i32 %149 to i64, !dbg !80
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !80
  %154 = sext i32 %151 to i64, !dbg !80
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !80
  %156 = and i1 %18, %146, !dbg !81
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %153, i1 %156, i32 -8388608, i1 %156, i32 -8388608, i1 %156, i32 -8388608, i1 %156, i32 -8388608, i1 %156) #4, !dbg !82
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %155, i1 %156, i32 -8388608, i1 %156, i32 -8388608, i1 %156, i32 -8388608, i1 %156, i32 -8388608, i1 %156) #4, !dbg !82
  %159 = or disjoint i32 %67, 1, !dbg !83
  %160 = icmp slt i32 %159, 29, !dbg !84
  %161 = and i1 %119, %160, !dbg !85
  %162 = and i1 %71, %161, !dbg !86
  %163 = add i32 %76, 3584, !dbg !87
  %164 = add i32 %163, %23, !dbg !88
  %165 = add i32 %164, %74, !dbg !89
  %166 = add i32 %163, %24, !dbg !88
  %167 = add i32 %166, %74, !dbg !89
  %168 = sext i32 %165 to i64, !dbg !90
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %168, !dbg !90
  %170 = sext i32 %167 to i64, !dbg !90
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !90
  %172 = and i1 %18, %162, !dbg !91
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %169, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172) #4, !dbg !92
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %171, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172) #4, !dbg !92
  %175 = and i1 %89, %161, !dbg !93
  %176 = add i32 %76, 3712, !dbg !94
  %177 = add i32 %176, %23, !dbg !95
  %178 = add i32 %177, %74, !dbg !96
  %179 = add i32 %176, %24, !dbg !95
  %180 = add i32 %179, %74, !dbg !96
  %181 = sext i32 %178 to i64, !dbg !97
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !97
  %183 = sext i32 %180 to i64, !dbg !97
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %183, !dbg !97
  %185 = and i1 %18, %175, !dbg !98
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %185, i32 -8388608, i1 %185, i32 -8388608, i1 %185, i32 -8388608, i1 %185, i32 -8388608, i1 %185) #4, !dbg !99
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %184, i1 %185, i32 -8388608, i1 %185, i32 -8388608, i1 %185, i32 -8388608, i1 %185, i32 -8388608, i1 %185) #4, !dbg !99
  %188 = and i1 %161, %105, !dbg !100
  %189 = add i32 %76, 3840, !dbg !101
  %190 = add i32 %189, %23, !dbg !102
  %191 = add i32 %190, %74, !dbg !103
  %192 = add i32 %189, %24, !dbg !102
  %193 = add i32 %192, %74, !dbg !103
  %194 = sext i32 %191 to i64, !dbg !104
  %195 = getelementptr float, ptr addrspace(1) %1, i64 %194, !dbg !104
  %196 = sext i32 %193 to i64, !dbg !104
  %197 = getelementptr float, ptr addrspace(1) %1, i64 %196, !dbg !104
  %198 = and i1 %18, %188, !dbg !105
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198) #4, !dbg !106
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198) #4, !dbg !106
  %201 = fadd float %45, 0x3EE4F8B580000000, !dbg !107
  %202 = fadd float %46, 0x3EE4F8B580000000, !dbg !107
  %203 = fadd float %47, 0x3EE4F8B580000000, !dbg !107
  %204 = fadd float %48, 0x3EE4F8B580000000, !dbg !107
  %205 = fadd float %54, 0x3EE4F8B580000000, !dbg !107
  %206 = fadd float %55, 0x3EE4F8B580000000, !dbg !107
  %207 = fadd float %56, 0x3EE4F8B580000000, !dbg !107
  %208 = fadd float %57, 0x3EE4F8B580000000, !dbg !107
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i = icmp eq i32 %209, 0, !dbg !108
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i = icmp eq i32 %210, 0, !dbg !108
  br i1 %.not.i, label %216, label %211, !dbg !108

211:                                              ; preds = %10
  br i1 %.not1.i, label %214, label %212, !dbg !108

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %201) #4, !dbg !108
  br label %__nv_sqrtf.exit, !dbg !108

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %201) #4, !dbg !108
  br label %__nv_sqrtf.exit, !dbg !108

216:                                              ; preds = %10
  br i1 %.not1.i, label %219, label %217, !dbg !108

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %201) #4, !dbg !108
  br label %__nv_sqrtf.exit, !dbg !108

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %201) #4, !dbg !108
  br label %__nv_sqrtf.exit, !dbg !108

__nv_sqrtf.exit:                                  ; preds = %212, %214, %217, %219
  %.0.i = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !108
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i30 = icmp eq i32 %221, 0, !dbg !108
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i33 = icmp eq i32 %222, 0, !dbg !108
  br i1 %.not.i30, label %228, label %223, !dbg !108

223:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %226, label %224, !dbg !108

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %202) #4, !dbg !108
  br label %__nv_sqrtf.exit34, !dbg !108

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %202) #4, !dbg !108
  br label %__nv_sqrtf.exit34, !dbg !108

228:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %231, label %229, !dbg !108

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %202) #4, !dbg !108
  br label %__nv_sqrtf.exit34, !dbg !108

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %202) #4, !dbg !108
  br label %__nv_sqrtf.exit34, !dbg !108

__nv_sqrtf.exit34:                                ; preds = %224, %226, %229, %231
  %.0.i32 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !108
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i35 = icmp eq i32 %233, 0, !dbg !108
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i38 = icmp eq i32 %234, 0, !dbg !108
  br i1 %.not.i35, label %240, label %235, !dbg !108

235:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %238, label %236, !dbg !108

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %203) #4, !dbg !108
  br label %__nv_sqrtf.exit39, !dbg !108

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %203) #4, !dbg !108
  br label %__nv_sqrtf.exit39, !dbg !108

240:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %243, label %241, !dbg !108

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %203) #4, !dbg !108
  br label %__nv_sqrtf.exit39, !dbg !108

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %203) #4, !dbg !108
  br label %__nv_sqrtf.exit39, !dbg !108

__nv_sqrtf.exit39:                                ; preds = %236, %238, %241, %243
  %.0.i37 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !108
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i40 = icmp eq i32 %245, 0, !dbg !108
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i43 = icmp eq i32 %246, 0, !dbg !108
  br i1 %.not.i40, label %252, label %247, !dbg !108

247:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %250, label %248, !dbg !108

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #4, !dbg !108
  br label %__nv_sqrtf.exit44, !dbg !108

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #4, !dbg !108
  br label %__nv_sqrtf.exit44, !dbg !108

252:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %255, label %253, !dbg !108

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #4, !dbg !108
  br label %__nv_sqrtf.exit44, !dbg !108

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #4, !dbg !108
  br label %__nv_sqrtf.exit44, !dbg !108

__nv_sqrtf.exit44:                                ; preds = %248, %250, %253, %255
  %.0.i42 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !108
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i45 = icmp eq i32 %257, 0, !dbg !108
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i48 = icmp eq i32 %258, 0, !dbg !108
  br i1 %.not.i45, label %264, label %259, !dbg !108

259:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %262, label %260, !dbg !108

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %205) #4, !dbg !108
  br label %__nv_sqrtf.exit49, !dbg !108

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %205) #4, !dbg !108
  br label %__nv_sqrtf.exit49, !dbg !108

264:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %267, label %265, !dbg !108

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %205) #4, !dbg !108
  br label %__nv_sqrtf.exit49, !dbg !108

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %205) #4, !dbg !108
  br label %__nv_sqrtf.exit49, !dbg !108

__nv_sqrtf.exit49:                                ; preds = %260, %262, %265, %267
  %.0.i47 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !108
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i50 = icmp eq i32 %269, 0, !dbg !108
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i53 = icmp eq i32 %270, 0, !dbg !108
  br i1 %.not.i50, label %276, label %271, !dbg !108

271:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %274, label %272, !dbg !108

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #4, !dbg !108
  br label %__nv_sqrtf.exit54, !dbg !108

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #4, !dbg !108
  br label %__nv_sqrtf.exit54, !dbg !108

276:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %279, label %277, !dbg !108

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #4, !dbg !108
  br label %__nv_sqrtf.exit54, !dbg !108

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #4, !dbg !108
  br label %__nv_sqrtf.exit54, !dbg !108

__nv_sqrtf.exit54:                                ; preds = %272, %274, %277, %279
  %.0.i52 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !108
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i55 = icmp eq i32 %281, 0, !dbg !108
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i58 = icmp eq i32 %282, 0, !dbg !108
  br i1 %.not.i55, label %288, label %283, !dbg !108

283:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %286, label %284, !dbg !108

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %207) #4, !dbg !108
  br label %__nv_sqrtf.exit59, !dbg !108

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %207) #4, !dbg !108
  br label %__nv_sqrtf.exit59, !dbg !108

288:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %291, label %289, !dbg !108

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %207) #4, !dbg !108
  br label %__nv_sqrtf.exit59, !dbg !108

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %207) #4, !dbg !108
  br label %__nv_sqrtf.exit59, !dbg !108

__nv_sqrtf.exit59:                                ; preds = %284, %286, %289, %291
  %.0.i57 = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !108
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i60 = icmp eq i32 %293, 0, !dbg !108
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i63 = icmp eq i32 %294, 0, !dbg !108
  br i1 %.not.i60, label %300, label %295, !dbg !108

295:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %298, label %296, !dbg !108

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %208) #4, !dbg !108
  br label %__nv_sqrtf.exit64, !dbg !108

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %208) #4, !dbg !108
  br label %__nv_sqrtf.exit64, !dbg !108

300:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %303, label %301, !dbg !108

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.f(float %208) #4, !dbg !108
  br label %__nv_sqrtf.exit64, !dbg !108

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.f(float %208) #4, !dbg !108
  br label %__nv_sqrtf.exit64, !dbg !108

__nv_sqrtf.exit64:                                ; preds = %296, %298, %301, %303
  %.0.i62 = phi float [ %297, %296 ], [ %299, %298 ], [ %302, %301 ], [ %304, %303 ], !dbg !108
  %305 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %306 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %307 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %308 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %309 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %310 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %311 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %312 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %313 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %314 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %315 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %316 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %317 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %318 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %319 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %320 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %321 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !52
  %322 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !44
  %323 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !62
  %324 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !70
  %325 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !75
  %326 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !82
  %327 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !92
  %328 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !99
  %329 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !106
  %330 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !52
  %331 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !44
  %332 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !62
  %333 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !70
  %334 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !75
  %335 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !82
  %336 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !92
  %337 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !99
  %338 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !106
  %339 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !52
  %340 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !44
  %341 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !62
  %342 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !70
  %343 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !75
  %344 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !82
  %345 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !92
  %346 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !99
  %347 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !106
  %348 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !52
  %349 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !44
  %350 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !62
  %351 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !70
  %352 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !75
  %353 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !82
  %354 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !92
  %355 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !99
  %356 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !106
  %357 = insertelement <4 x i32> poison, i32 %348, i64 0, !dbg !52
  %358 = insertelement <4 x i32> %357, i32 %339, i64 1, !dbg !52
  %359 = insertelement <4 x i32> %358, i32 %330, i64 2, !dbg !52
  %360 = insertelement <4 x i32> %359, i32 %321, i64 3, !dbg !52
  %361 = bitcast <4 x i32> %360 to <4 x float>, !dbg !52
  %362 = insertelement <4 x i32> poison, i32 %349, i64 0, !dbg !44
  %363 = insertelement <4 x i32> %362, i32 %340, i64 1, !dbg !44
  %364 = insertelement <4 x i32> %363, i32 %331, i64 2, !dbg !44
  %365 = insertelement <4 x i32> %364, i32 %322, i64 3, !dbg !44
  %366 = bitcast <4 x i32> %365 to <4 x float>, !dbg !44
  %367 = fcmp ogt <4 x float> %361, %366, !dbg !109
  %368 = insertelement <4 x i32> poison, i32 %351, i64 0, !dbg !70
  %369 = insertelement <4 x i32> %368, i32 %342, i64 1, !dbg !70
  %370 = insertelement <4 x i32> %369, i32 %333, i64 2, !dbg !70
  %371 = insertelement <4 x i32> %370, i32 %324, i64 3, !dbg !70
  %372 = bitcast <4 x i32> %371 to <4 x float>, !dbg !70
  %373 = fcmp uno <4 x float> %361, zeroinitializer, !dbg !113
  %374 = or <4 x i1> %367, %373, !dbg !114
  %.v = select <4 x i1> %374, <4 x i32> %360, <4 x i32> %365, !dbg !115
  %375 = bitcast <4 x i32> %.v to <4 x float>, !dbg !115
  %376 = insertelement <4 x i32> poison, i32 %350, i64 0, !dbg !62
  %377 = insertelement <4 x i32> %376, i32 %341, i64 1, !dbg !62
  %378 = insertelement <4 x i32> %377, i32 %332, i64 2, !dbg !62
  %379 = insertelement <4 x i32> %378, i32 %323, i64 3, !dbg !62
  %380 = bitcast <4 x i32> %379 to <4 x float>, !dbg !62
  %381 = fcmp olt <4 x float> %375, %380, !dbg !116
  %382 = fcmp uno <4 x float> %380, zeroinitializer, !dbg !118
  %383 = or <4 x i1> %382, %381, !dbg !119
  %.v65 = select <4 x i1> %383, <4 x i32> %379, <4 x i32> %.v, !dbg !120
  %384 = bitcast <4 x i32> %.v65 to <4 x float>, !dbg !120
  %385 = fcmp olt <4 x float> %384, %372, !dbg !121
  %386 = insertelement <4 x i32> poison, i32 %352, i64 0, !dbg !75
  %387 = insertelement <4 x i32> %386, i32 %343, i64 1, !dbg !75
  %388 = insertelement <4 x i32> %387, i32 %334, i64 2, !dbg !75
  %389 = insertelement <4 x i32> %388, i32 %325, i64 3, !dbg !75
  %390 = bitcast <4 x i32> %389 to <4 x float>, !dbg !75
  %391 = fcmp uno <4 x float> %372, zeroinitializer, !dbg !123
  %392 = or <4 x i1> %391, %385, !dbg !124
  %.v66 = select <4 x i1> %392, <4 x i32> %371, <4 x i32> %.v65, !dbg !125
  %393 = bitcast <4 x i32> %.v66 to <4 x float>, !dbg !125
  %394 = fcmp olt <4 x float> %393, %390, !dbg !126
  %395 = fcmp uno <4 x float> %390, zeroinitializer, !dbg !128
  %396 = or <4 x i1> %395, %394, !dbg !129
  %.v67 = select <4 x i1> %396, <4 x i32> %389, <4 x i32> %.v66, !dbg !130
  %397 = bitcast <4 x i32> %.v67 to <4 x float>, !dbg !130
  %398 = insertelement <4 x i32> poison, i32 %353, i64 0, !dbg !82
  %399 = insertelement <4 x i32> %398, i32 %344, i64 1, !dbg !82
  %400 = insertelement <4 x i32> %399, i32 %335, i64 2, !dbg !82
  %401 = insertelement <4 x i32> %400, i32 %326, i64 3, !dbg !82
  %402 = bitcast <4 x i32> %401 to <4 x float>, !dbg !82
  %403 = fcmp olt <4 x float> %397, %402, !dbg !131
  %404 = fcmp uno <4 x float> %402, zeroinitializer, !dbg !133
  %405 = or <4 x i1> %404, %403, !dbg !134
  %.v68 = select <4 x i1> %405, <4 x i32> %401, <4 x i32> %.v67, !dbg !135
  %406 = bitcast <4 x i32> %.v68 to <4 x float>, !dbg !135
  %407 = insertelement <4 x i32> poison, i32 %354, i64 0, !dbg !92
  %408 = insertelement <4 x i32> %407, i32 %345, i64 1, !dbg !92
  %409 = insertelement <4 x i32> %408, i32 %336, i64 2, !dbg !92
  %410 = insertelement <4 x i32> %409, i32 %327, i64 3, !dbg !92
  %411 = bitcast <4 x i32> %410 to <4 x float>, !dbg !92
  %412 = fcmp olt <4 x float> %406, %411, !dbg !136
  %413 = fcmp uno <4 x float> %411, zeroinitializer, !dbg !138
  %414 = or <4 x i1> %413, %412, !dbg !139
  %.v69 = select <4 x i1> %414, <4 x i32> %410, <4 x i32> %.v68, !dbg !140
  %415 = bitcast <4 x i32> %.v69 to <4 x float>, !dbg !140
  %416 = insertelement <4 x i32> poison, i32 %355, i64 0, !dbg !99
  %417 = insertelement <4 x i32> %416, i32 %346, i64 1, !dbg !99
  %418 = insertelement <4 x i32> %417, i32 %337, i64 2, !dbg !99
  %419 = insertelement <4 x i32> %418, i32 %328, i64 3, !dbg !99
  %420 = bitcast <4 x i32> %419 to <4 x float>, !dbg !99
  %421 = fcmp olt <4 x float> %415, %420, !dbg !141
  %422 = fcmp uno <4 x float> %420, zeroinitializer, !dbg !143
  %423 = or <4 x i1> %422, %421, !dbg !144
  %.v70 = select <4 x i1> %423, <4 x i32> %419, <4 x i32> %.v69, !dbg !145
  %424 = bitcast <4 x i32> %.v70 to <4 x float>, !dbg !145
  %425 = insertelement <4 x i32> poison, i32 %356, i64 0, !dbg !106
  %426 = insertelement <4 x i32> %425, i32 %347, i64 1, !dbg !106
  %427 = insertelement <4 x i32> %426, i32 %338, i64 2, !dbg !106
  %428 = insertelement <4 x i32> %427, i32 %329, i64 3, !dbg !106
  %429 = bitcast <4 x i32> %428 to <4 x float>, !dbg !106
  %430 = fcmp olt <4 x float> %424, %429, !dbg !146
  %431 = zext <4 x i1> %367 to <4 x i8>, !dbg !148
  %432 = select <4 x i1> %381, <4 x i8> splat (i8 2), <4 x i8> %431, !dbg !149
  %433 = select <4 x i1> %385, <4 x i8> splat (i8 3), <4 x i8> %432, !dbg !150
  %434 = select <4 x i1> %394, <4 x i8> splat (i8 4), <4 x i8> %433, !dbg !151
  %435 = select <4 x i1> %403, <4 x i8> splat (i8 5), <4 x i8> %434, !dbg !152
  %436 = select <4 x i1> %412, <4 x i8> splat (i8 6), <4 x i8> %435, !dbg !153
  %437 = select <4 x i1> %421, <4 x i8> splat (i8 7), <4 x i8> %436, !dbg !154
  %438 = select <4 x i1> %430, <4 x i8> splat (i8 8), <4 x i8> %437, !dbg !155
  %439 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !52
  %440 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !44
  %441 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !62
  %442 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !70
  %443 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !75
  %444 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !82
  %445 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !92
  %446 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !99
  %447 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !106
  %448 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !52
  %449 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !44
  %450 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !62
  %451 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !70
  %452 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !75
  %453 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !82
  %454 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !92
  %455 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !99
  %456 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !106
  %457 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !52
  %458 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !44
  %459 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !62
  %460 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !70
  %461 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !75
  %462 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !82
  %463 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !92
  %464 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !99
  %465 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !106
  %466 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !52
  %467 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !44
  %468 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !62
  %469 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !70
  %470 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !75
  %471 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !82
  %472 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !92
  %473 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !99
  %474 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !106
  %475 = insertelement <4 x i32> poison, i32 %466, i64 0, !dbg !52
  %476 = insertelement <4 x i32> %475, i32 %457, i64 1, !dbg !52
  %477 = insertelement <4 x i32> %476, i32 %448, i64 2, !dbg !52
  %478 = insertelement <4 x i32> %477, i32 %439, i64 3, !dbg !52
  %479 = bitcast <4 x i32> %478 to <4 x float>, !dbg !52
  %480 = insertelement <4 x i32> poison, i32 %467, i64 0, !dbg !44
  %481 = insertelement <4 x i32> %480, i32 %458, i64 1, !dbg !44
  %482 = insertelement <4 x i32> %481, i32 %449, i64 2, !dbg !44
  %483 = insertelement <4 x i32> %482, i32 %440, i64 3, !dbg !44
  %484 = bitcast <4 x i32> %483 to <4 x float>, !dbg !44
  %485 = fcmp ogt <4 x float> %479, %484, !dbg !109
  %486 = insertelement <4 x i32> poison, i32 %469, i64 0, !dbg !70
  %487 = insertelement <4 x i32> %486, i32 %460, i64 1, !dbg !70
  %488 = insertelement <4 x i32> %487, i32 %451, i64 2, !dbg !70
  %489 = insertelement <4 x i32> %488, i32 %442, i64 3, !dbg !70
  %490 = bitcast <4 x i32> %489 to <4 x float>, !dbg !70
  %491 = fcmp uno <4 x float> %479, zeroinitializer, !dbg !113
  %492 = or <4 x i1> %485, %491, !dbg !114
  %.v71 = select <4 x i1> %492, <4 x i32> %478, <4 x i32> %483, !dbg !115
  %493 = bitcast <4 x i32> %.v71 to <4 x float>, !dbg !115
  %494 = insertelement <4 x i32> poison, i32 %468, i64 0, !dbg !62
  %495 = insertelement <4 x i32> %494, i32 %459, i64 1, !dbg !62
  %496 = insertelement <4 x i32> %495, i32 %450, i64 2, !dbg !62
  %497 = insertelement <4 x i32> %496, i32 %441, i64 3, !dbg !62
  %498 = bitcast <4 x i32> %497 to <4 x float>, !dbg !62
  %499 = fcmp olt <4 x float> %493, %498, !dbg !116
  %500 = fcmp uno <4 x float> %498, zeroinitializer, !dbg !118
  %501 = or <4 x i1> %500, %499, !dbg !119
  %.v72 = select <4 x i1> %501, <4 x i32> %497, <4 x i32> %.v71, !dbg !120
  %502 = bitcast <4 x i32> %.v72 to <4 x float>, !dbg !120
  %503 = fcmp olt <4 x float> %502, %490, !dbg !121
  %504 = insertelement <4 x i32> poison, i32 %470, i64 0, !dbg !75
  %505 = insertelement <4 x i32> %504, i32 %461, i64 1, !dbg !75
  %506 = insertelement <4 x i32> %505, i32 %452, i64 2, !dbg !75
  %507 = insertelement <4 x i32> %506, i32 %443, i64 3, !dbg !75
  %508 = bitcast <4 x i32> %507 to <4 x float>, !dbg !75
  %509 = fcmp uno <4 x float> %490, zeroinitializer, !dbg !123
  %510 = or <4 x i1> %509, %503, !dbg !124
  %.v73 = select <4 x i1> %510, <4 x i32> %489, <4 x i32> %.v72, !dbg !125
  %511 = bitcast <4 x i32> %.v73 to <4 x float>, !dbg !125
  %512 = fcmp olt <4 x float> %511, %508, !dbg !126
  %513 = fcmp uno <4 x float> %508, zeroinitializer, !dbg !128
  %514 = or <4 x i1> %513, %512, !dbg !129
  %.v74 = select <4 x i1> %514, <4 x i32> %507, <4 x i32> %.v73, !dbg !130
  %515 = bitcast <4 x i32> %.v74 to <4 x float>, !dbg !130
  %516 = insertelement <4 x i32> poison, i32 %471, i64 0, !dbg !82
  %517 = insertelement <4 x i32> %516, i32 %462, i64 1, !dbg !82
  %518 = insertelement <4 x i32> %517, i32 %453, i64 2, !dbg !82
  %519 = insertelement <4 x i32> %518, i32 %444, i64 3, !dbg !82
  %520 = bitcast <4 x i32> %519 to <4 x float>, !dbg !82
  %521 = fcmp olt <4 x float> %515, %520, !dbg !131
  %522 = fcmp uno <4 x float> %520, zeroinitializer, !dbg !133
  %523 = or <4 x i1> %522, %521, !dbg !134
  %.v75 = select <4 x i1> %523, <4 x i32> %519, <4 x i32> %.v74, !dbg !135
  %524 = bitcast <4 x i32> %.v75 to <4 x float>, !dbg !135
  %525 = insertelement <4 x i32> poison, i32 %472, i64 0, !dbg !92
  %526 = insertelement <4 x i32> %525, i32 %463, i64 1, !dbg !92
  %527 = insertelement <4 x i32> %526, i32 %454, i64 2, !dbg !92
  %528 = insertelement <4 x i32> %527, i32 %445, i64 3, !dbg !92
  %529 = bitcast <4 x i32> %528 to <4 x float>, !dbg !92
  %530 = fcmp olt <4 x float> %524, %529, !dbg !136
  %531 = fcmp uno <4 x float> %529, zeroinitializer, !dbg !138
  %532 = or <4 x i1> %531, %530, !dbg !139
  %.v76 = select <4 x i1> %532, <4 x i32> %528, <4 x i32> %.v75, !dbg !140
  %533 = bitcast <4 x i32> %.v76 to <4 x float>, !dbg !140
  %534 = insertelement <4 x i32> poison, i32 %473, i64 0, !dbg !99
  %535 = insertelement <4 x i32> %534, i32 %464, i64 1, !dbg !99
  %536 = insertelement <4 x i32> %535, i32 %455, i64 2, !dbg !99
  %537 = insertelement <4 x i32> %536, i32 %446, i64 3, !dbg !99
  %538 = bitcast <4 x i32> %537 to <4 x float>, !dbg !99
  %539 = fcmp olt <4 x float> %533, %538, !dbg !141
  %540 = fcmp uno <4 x float> %538, zeroinitializer, !dbg !143
  %541 = or <4 x i1> %540, %539, !dbg !144
  %.v77 = select <4 x i1> %541, <4 x i32> %537, <4 x i32> %.v76, !dbg !145
  %542 = bitcast <4 x i32> %.v77 to <4 x float>, !dbg !145
  %543 = insertelement <4 x i32> poison, i32 %474, i64 0, !dbg !106
  %544 = insertelement <4 x i32> %543, i32 %465, i64 1, !dbg !106
  %545 = insertelement <4 x i32> %544, i32 %456, i64 2, !dbg !106
  %546 = insertelement <4 x i32> %545, i32 %447, i64 3, !dbg !106
  %547 = bitcast <4 x i32> %546 to <4 x float>, !dbg !106
  %548 = fcmp olt <4 x float> %542, %547, !dbg !146
  %549 = zext <4 x i1> %485 to <4 x i8>, !dbg !148
  %550 = select <4 x i1> %499, <4 x i8> splat (i8 2), <4 x i8> %549, !dbg !149
  %551 = select <4 x i1> %503, <4 x i8> splat (i8 3), <4 x i8> %550, !dbg !150
  %552 = select <4 x i1> %512, <4 x i8> splat (i8 4), <4 x i8> %551, !dbg !151
  %553 = select <4 x i1> %521, <4 x i8> splat (i8 5), <4 x i8> %552, !dbg !152
  %554 = select <4 x i1> %530, <4 x i8> splat (i8 6), <4 x i8> %553, !dbg !153
  %555 = select <4 x i1> %539, <4 x i8> splat (i8 7), <4 x i8> %554, !dbg !154
  %556 = select <4 x i1> %548, <4 x i8> splat (i8 8), <4 x i8> %555, !dbg !155
  %557 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %558 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %559 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %560 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %561 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !28
  %562 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !28
  %563 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !28
  %564 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !28
  %565 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %566 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %567 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %568 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %569 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %570 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %571 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %572 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %573 = shl i32 %13, 2, !dbg !12
  %574 = and i32 %573, 508, !dbg !12
  %575 = or disjoint i32 %574, 512, !dbg !12
  %576 = or disjoint i32 %12, %575, !dbg !13
  %577 = icmp slt i32 %576, 115200, !dbg !14
  %578 = or disjoint i32 %12, %574, !dbg !13
  %579 = icmp slt i32 %578, 115200, !dbg !14
  %580 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !156
  %581 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !156
  %582 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !156
  %583 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !156
  %584 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !156
  %585 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !156
  %586 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !156
  %587 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !156
  %588 = insertelement <8 x i32> poison, i32 %305, i64 0, !dbg !20
  %589 = insertelement <8 x i32> %588, i32 %307, i64 1, !dbg !20
  %590 = insertelement <8 x i32> %589, i32 %309, i64 2, !dbg !20
  %591 = insertelement <8 x i32> %590, i32 %311, i64 3, !dbg !20
  %592 = insertelement <8 x i32> %591, i32 %313, i64 4, !dbg !20
  %593 = insertelement <8 x i32> %592, i32 %315, i64 5, !dbg !20
  %594 = insertelement <8 x i32> %593, i32 %317, i64 6, !dbg !20
  %595 = insertelement <8 x i32> %594, i32 %319, i64 7, !dbg !20
  %596 = bitcast <8 x i32> %595 to <8 x float>, !dbg !20
  %597 = insertelement <8 x i32> poison, i32 %306, i64 0, !dbg !22
  %598 = insertelement <8 x i32> %597, i32 %308, i64 1, !dbg !22
  %599 = insertelement <8 x i32> %598, i32 %310, i64 2, !dbg !22
  %600 = insertelement <8 x i32> %599, i32 %312, i64 3, !dbg !22
  %601 = insertelement <8 x i32> %600, i32 %314, i64 4, !dbg !22
  %602 = insertelement <8 x i32> %601, i32 %316, i64 5, !dbg !22
  %603 = insertelement <8 x i32> %602, i32 %318, i64 6, !dbg !22
  %604 = insertelement <8 x i32> %603, i32 %320, i64 7, !dbg !22
  %605 = bitcast <8 x i32> %604 to <8 x float>, !dbg !22
  %606 = fsub <8 x float> %596, %605, !dbg !157
  %607 = shufflevector <4 x float> %429, <4 x float> %547, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !158
  %608 = fcmp uno <8 x float> %607, zeroinitializer, !dbg !158
  %609 = shufflevector <4 x i1> %430, <4 x i1> %548, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !159
  %610 = or <8 x i1> %608, %609, !dbg !159
  %611 = shufflevector <4 x float> %424, <4 x float> %542, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !160
  %612 = select <8 x i1> %610, <8 x float> %607, <8 x float> %611, !dbg !160
  %613 = insertelement <8 x i32> poison, i32 %557, i64 0, !dbg !28
  %614 = insertelement <8 x i32> %613, i32 %558, i64 1, !dbg !28
  %615 = insertelement <8 x i32> %614, i32 %559, i64 2, !dbg !28
  %616 = insertelement <8 x i32> %615, i32 %560, i64 3, !dbg !28
  %617 = insertelement <8 x i32> %616, i32 %561, i64 4, !dbg !28
  %618 = insertelement <8 x i32> %617, i32 %562, i64 5, !dbg !28
  %619 = insertelement <8 x i32> %618, i32 %563, i64 6, !dbg !28
  %620 = insertelement <8 x i32> %619, i32 %564, i64 7, !dbg !28
  %621 = bitcast <8 x i32> %620 to <8 x float>, !dbg !28
  %622 = insertelement <8 x i32> poison, i32 %565, i64 0, !dbg !26
  %623 = insertelement <8 x i32> %622, i32 %566, i64 1, !dbg !26
  %624 = insertelement <8 x i32> %623, i32 %567, i64 2, !dbg !26
  %625 = insertelement <8 x i32> %624, i32 %568, i64 3, !dbg !26
  %626 = insertelement <8 x i32> %625, i32 %569, i64 4, !dbg !26
  %627 = insertelement <8 x i32> %626, i32 %570, i64 5, !dbg !26
  %628 = insertelement <8 x i32> %627, i32 %571, i64 6, !dbg !26
  %629 = insertelement <8 x i32> %628, i32 %572, i64 7, !dbg !26
  %630 = bitcast <8 x i32> %629 to <8 x float>, !dbg !26
  %631 = insertelement <8 x float> poison, float %587, i64 0, !dbg !161
  %632 = insertelement <8 x float> %631, float %586, i64 1, !dbg !161
  %633 = insertelement <8 x float> %632, float %585, i64 2, !dbg !161
  %634 = insertelement <8 x float> %633, float %584, i64 3, !dbg !161
  %635 = insertelement <8 x float> %634, float %583, i64 4, !dbg !161
  %636 = insertelement <8 x float> %635, float %582, i64 5, !dbg !161
  %637 = insertelement <8 x float> %636, float %581, i64 6, !dbg !161
  %638 = insertelement <8 x float> %637, float %580, i64 7, !dbg !161
  %639 = fmul <8 x float> %606, %638, !dbg !161
  %640 = fmul <8 x float> %639, %630, !dbg !162
  %641 = fadd <8 x float> %640, %621, !dbg !163
  %642 = fadd <8 x float> %612, %641, !dbg !164
  %643 = fcmp olt <8 x float> %642, zeroinitializer, !dbg !165
  %644 = extractelement <8 x i1> %643, i64 7, !dbg !167
  %645 = extractelement <8 x float> %642, i64 7, !dbg !168
  %646 = extractelement <8 x i1> %643, i64 6, !dbg !167
  %647 = extractelement <8 x float> %642, i64 6, !dbg !168
  %648 = extractelement <8 x i1> %643, i64 5, !dbg !167
  %649 = extractelement <8 x float> %642, i64 5, !dbg !168
  %650 = extractelement <8 x i1> %643, i64 4, !dbg !167
  %651 = extractelement <8 x float> %642, i64 4, !dbg !168
  %652 = extractelement <8 x i1> %643, i64 3, !dbg !167
  %653 = extractelement <8 x float> %642, i64 3, !dbg !168
  %654 = extractelement <8 x i1> %643, i64 2, !dbg !167
  %655 = extractelement <8 x float> %642, i64 2, !dbg !168
  %656 = extractelement <8 x i1> %643, i64 1, !dbg !167
  %657 = extractelement <8 x float> %642, i64 1, !dbg !168
  %658 = extractelement <8 x i1> %643, i64 0, !dbg !167
  %659 = extractelement <8 x float> %642, i64 0, !dbg !168
  %660 = getelementptr i8, ptr addrspace(1) %7, i64 %26, !dbg !169
  %661 = bitcast <4 x i8> %556 to i32, !dbg !170
  %662 = bitcast <4 x i8> %438 to i32, !dbg !170
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %661, i32 %662, ptr addrspace(1) %660, i1 %18) #4, !dbg !170
  %663 = sext i32 %578 to i64, !dbg !171
  %664 = getelementptr float, ptr addrspace(1) %0, i64 %663, !dbg !171
  %665 = sext i32 %576 to i64, !dbg !171
  %666 = getelementptr float, ptr addrspace(1) %0, i64 %665, !dbg !171
  %667 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !168
  %668 = bitcast float %645 to i32, !dbg !168
  %669 = bitcast float %647 to i32, !dbg !168
  %670 = bitcast float %649 to i32, !dbg !168
  %671 = bitcast float %651 to i32, !dbg !168
  %672 = bitcast float %653 to i32, !dbg !168
  %673 = bitcast float %655 to i32, !dbg !168
  %674 = bitcast float %657 to i32, !dbg !168
  %675 = bitcast float %659 to i32, !dbg !168
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %667, i32 %668, i32 %669, i32 %670, i32 %671, i1 true) #4, !dbg !168
  %676 = getelementptr inbounds i8, ptr addrspace(3) %667, i32 16, !dbg !168
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %676, i32 %672, i32 %673, i32 %674, i32 %675, i1 true) #4, !dbg !168
  tail call void @llvm.nvvm.barrier0(), !dbg !168
  %677 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %574, !dbg !168
  %678 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %575, !dbg !168
  %679 = load <4 x i32>, ptr addrspace(3) %678, align 16, !dbg !168
  %.extract = load i32, ptr addrspace(3) %677, align 16, !dbg !168
  %680 = getelementptr inbounds i8, ptr addrspace(3) %677, i32 4, !dbg !168
  %.extract8 = load i32, ptr addrspace(3) %680, align 4, !dbg !168
  %681 = getelementptr inbounds i8, ptr addrspace(3) %677, i32 8, !dbg !168
  %.extract9 = load i32, ptr addrspace(3) %681, align 8, !dbg !168
  %682 = getelementptr inbounds i8, ptr addrspace(3) %677, i32 12, !dbg !168
  %.extract10 = load i32, ptr addrspace(3) %682, align 4, !dbg !168
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %664, i1 %579) #4, !dbg !168
  %.extract11 = extractelement <4 x i32> %679, i64 0, !dbg !168
  %.extract12 = extractelement <4 x i32> %679, i64 1, !dbg !168
  %.extract13 = extractelement <4 x i32> %679, i64 2, !dbg !168
  %.extract14 = extractelement <4 x i32> %679, i64 3, !dbg !168
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %666, i1 %577) #4, !dbg !168
  %683 = getelementptr float, ptr addrspace(1) %8, i64 %663, !dbg !172
  %684 = getelementptr float, ptr addrspace(1) %8, i64 %665, !dbg !172
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %685 = bitcast float %645 to i32, !dbg !173
  %686 = select i1 %644, i32 0, i32 %685, !dbg !167
  %687 = bitcast float %647 to i32, !dbg !173
  %688 = select i1 %646, i32 0, i32 %687, !dbg !167
  %689 = bitcast float %649 to i32, !dbg !173
  %690 = select i1 %648, i32 0, i32 %689, !dbg !167
  %691 = bitcast float %651 to i32, !dbg !173
  %692 = select i1 %650, i32 0, i32 %691, !dbg !167
  %693 = bitcast float %653 to i32, !dbg !173
  %694 = select i1 %652, i32 0, i32 %693, !dbg !167
  %695 = bitcast float %655 to i32, !dbg !173
  %696 = select i1 %654, i32 0, i32 %695, !dbg !167
  %697 = bitcast float %657 to i32, !dbg !173
  %698 = select i1 %656, i32 0, i32 %697, !dbg !167
  %699 = bitcast float %659 to i32, !dbg !173
  %700 = select i1 %658, i32 0, i32 %699, !dbg !167
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %667, i32 %686, i32 %688, i32 %690, i32 %692, i1 true) #4, !dbg !173
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %676, i32 %694, i32 %696, i32 %698, i32 %700, i1 true) #4, !dbg !173
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %701 = load <4 x i32>, ptr addrspace(3) %678, align 16, !dbg !173
  %.extract22 = load i32, ptr addrspace(3) %677, align 16, !dbg !173
  %.extract23 = load i32, ptr addrspace(3) %680, align 4, !dbg !173
  %.extract24 = load i32, ptr addrspace(3) %681, align 8, !dbg !173
  %.extract25 = load i32, ptr addrspace(3) %682, align 4, !dbg !173
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %683, i1 %579) #4, !dbg !173
  %.extract26 = extractelement <4 x i32> %701, i64 0, !dbg !173
  %.extract27 = extractelement <4 x i32> %701, i64 1, !dbg !173
  %.extract28 = extractelement <4 x i32> %701, i64 2, !dbg !173
  %.extract29 = extractelement <4 x i32> %701, i64 3, !dbg !173
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %684, i1 %577) #4, !dbg !173
  ret void, !dbg !174
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5a6p5oza4hgfdaeirgoykflot3jmqo7alaadtd2kps5stzzsqjy.py", directory: "inductor_cache/5a")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 67, column: 20, scope: !7)
!30 = !DILocation(line: 34, column: 20, scope: !7)
!31 = !DILocation(line: 36, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 50, scope: !7)
!36 = !DILocation(line: 45, column: 60, scope: !7)
!37 = !DILocation(line: 45, column: 72, scope: !7)
!38 = !DILocation(line: 45, column: 41, scope: !7)
!39 = !DILocation(line: 45, column: 46, scope: !7)
!40 = !DILocation(line: 45, column: 55, scope: !7)
!41 = !DILocation(line: 45, column: 65, scope: !7)
!42 = !DILocation(line: 45, column: 31, scope: !7)
!43 = !DILocation(line: 45, column: 85, scope: !7)
!44 = !DILocation(line: 45, column: 77, scope: !7)
!45 = !DILocation(line: 47, column: 21, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 46, scope: !7)
!48 = !DILocation(line: 51, column: 55, scope: !7)
!49 = !DILocation(line: 51, column: 65, scope: !7)
!50 = !DILocation(line: 51, column: 31, scope: !7)
!51 = !DILocation(line: 51, column: 85, scope: !7)
!52 = !DILocation(line: 51, column: 77, scope: !7)
!53 = !DILocation(line: 53, column: 16, scope: !7)
!54 = !DILocation(line: 55, column: 20, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 19, scope: !7)
!57 = !DILocation(line: 58, column: 46, scope: !7)
!58 = !DILocation(line: 58, column: 55, scope: !7)
!59 = !DILocation(line: 58, column: 65, scope: !7)
!60 = !DILocation(line: 58, column: 31, scope: !7)
!61 = !DILocation(line: 58, column: 85, scope: !7)
!62 = !DILocation(line: 58, column: 77, scope: !7)
!63 = !DILocation(line: 61, column: 21, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 45, scope: !7)
!66 = !DILocation(line: 65, column: 54, scope: !7)
!67 = !DILocation(line: 65, column: 64, scope: !7)
!68 = !DILocation(line: 65, column: 31, scope: !7)
!69 = !DILocation(line: 65, column: 84, scope: !7)
!70 = !DILocation(line: 65, column: 76, scope: !7)
!71 = !DILocation(line: 68, column: 45, scope: !7)
!72 = !DILocation(line: 68, column: 55, scope: !7)
!73 = !DILocation(line: 68, column: 31, scope: !7)
!74 = !DILocation(line: 68, column: 75, scope: !7)
!75 = !DILocation(line: 68, column: 67, scope: !7)
!76 = !DILocation(line: 70, column: 20, scope: !7)
!77 = !DILocation(line: 71, column: 42, scope: !7)
!78 = !DILocation(line: 71, column: 51, scope: !7)
!79 = !DILocation(line: 71, column: 61, scope: !7)
!80 = !DILocation(line: 71, column: 31, scope: !7)
!81 = !DILocation(line: 71, column: 81, scope: !7)
!82 = !DILocation(line: 71, column: 73, scope: !7)
!83 = !DILocation(line: 73, column: 16, scope: !7)
!84 = !DILocation(line: 75, column: 20, scope: !7)
!85 = !DILocation(line: 76, column: 20, scope: !7)
!86 = !DILocation(line: 77, column: 20, scope: !7)
!87 = !DILocation(line: 78, column: 43, scope: !7)
!88 = !DILocation(line: 78, column: 52, scope: !7)
!89 = !DILocation(line: 78, column: 62, scope: !7)
!90 = !DILocation(line: 78, column: 31, scope: !7)
!91 = !DILocation(line: 78, column: 82, scope: !7)
!92 = !DILocation(line: 78, column: 74, scope: !7)
!93 = !DILocation(line: 80, column: 20, scope: !7)
!94 = !DILocation(line: 81, column: 43, scope: !7)
!95 = !DILocation(line: 81, column: 52, scope: !7)
!96 = !DILocation(line: 81, column: 62, scope: !7)
!97 = !DILocation(line: 81, column: 31, scope: !7)
!98 = !DILocation(line: 81, column: 82, scope: !7)
!99 = !DILocation(line: 81, column: 74, scope: !7)
!100 = !DILocation(line: 83, column: 20, scope: !7)
!101 = !DILocation(line: 84, column: 43, scope: !7)
!102 = !DILocation(line: 84, column: 52, scope: !7)
!103 = !DILocation(line: 84, column: 62, scope: !7)
!104 = !DILocation(line: 84, column: 31, scope: !7)
!105 = !DILocation(line: 84, column: 82, scope: !7)
!106 = !DILocation(line: 84, column: 74, scope: !7)
!107 = !DILocation(line: 113, column: 20, scope: !7)
!108 = !DILocation(line: 114, column: 27, scope: !7)
!109 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !112)
!110 = distinct !DILexicalBlockFile(scope: !7, file: !111, discriminator: 0)
!111 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!112 = !DILocation(line: 52, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !110, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !110, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !117)
!117 = !DILocation(line: 59, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !110, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !110, inlinedAt: !117)
!120 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !117)
!121 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !122)
!122 = !DILocation(line: 66, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !110, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !110, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !122)
!126 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !127)
!127 = !DILocation(line: 69, column: 42, scope: !7)
!128 = !DILocation(line: 120, column: 21, scope: !110, inlinedAt: !127)
!129 = !DILocation(line: 120, column: 16, scope: !110, inlinedAt: !127)
!130 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !127)
!131 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !132)
!132 = !DILocation(line: 72, column: 42, scope: !7)
!133 = !DILocation(line: 120, column: 21, scope: !110, inlinedAt: !132)
!134 = !DILocation(line: 120, column: 16, scope: !110, inlinedAt: !132)
!135 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !132)
!136 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !137)
!137 = !DILocation(line: 79, column: 42, scope: !7)
!138 = !DILocation(line: 120, column: 21, scope: !110, inlinedAt: !137)
!139 = !DILocation(line: 120, column: 16, scope: !110, inlinedAt: !137)
!140 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !137)
!141 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !142)
!142 = !DILocation(line: 82, column: 42, scope: !7)
!143 = !DILocation(line: 120, column: 21, scope: !110, inlinedAt: !142)
!144 = !DILocation(line: 120, column: 16, scope: !110, inlinedAt: !142)
!145 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !142)
!146 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !147)
!147 = !DILocation(line: 85, column: 42, scope: !7)
!148 = !DILocation(line: 89, column: 35, scope: !7)
!149 = !DILocation(line: 92, column: 35, scope: !7)
!150 = !DILocation(line: 95, column: 35, scope: !7)
!151 = !DILocation(line: 98, column: 35, scope: !7)
!152 = !DILocation(line: 101, column: 35, scope: !7)
!153 = !DILocation(line: 104, column: 35, scope: !7)
!154 = !DILocation(line: 107, column: 35, scope: !7)
!155 = !DILocation(line: 110, column: 35, scope: !7)
!156 = !DILocation(line: 116, column: 20, scope: !7)
!157 = !DILocation(line: 111, column: 20, scope: !7)
!158 = !DILocation(line: 120, column: 21, scope: !110, inlinedAt: !147)
!159 = !DILocation(line: 120, column: 16, scope: !110, inlinedAt: !147)
!160 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !147)
!161 = !DILocation(line: 119, column: 20, scope: !7)
!162 = !DILocation(line: 120, column: 20, scope: !7)
!163 = !DILocation(line: 121, column: 20, scope: !7)
!164 = !DILocation(line: 122, column: 20, scope: !7)
!165 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !166)
!166 = !DILocation(line: 124, column: 42, scope: !7)
!167 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !166)
!168 = !DILocation(line: 126, column: 40, scope: !7)
!169 = !DILocation(line: 125, column: 25, scope: !7)
!170 = !DILocation(line: 125, column: 37, scope: !7)
!171 = !DILocation(line: 126, column: 28, scope: !7)
!172 = !DILocation(line: 127, column: 25, scope: !7)
!173 = !DILocation(line: 127, column: 37, scope: !7)
!174 = !DILocation(line: 127, column: 4, scope: !7)
