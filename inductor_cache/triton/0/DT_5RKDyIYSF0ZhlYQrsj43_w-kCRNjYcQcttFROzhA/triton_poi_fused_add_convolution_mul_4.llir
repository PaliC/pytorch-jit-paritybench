; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %10, %12, !dbg !13
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = icmp slt i32 %19, 16, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %21 = sdiv i32 %.frozen, 512, !dbg !16
  %22 = mul i32 %21, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = sdiv i32 %16, 512, !dbg !16
  %24 = sdiv i32 %17, 512, !dbg !16
  %25 = shl i32 %16, 4, !dbg !18
  %26 = shl i32 %17, 4, !dbg !18
  %27 = add i32 %25, %19, !dbg !19
  %28 = add i32 %26, %19, !dbg !19
  %29 = sext i32 %27 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = sext i32 %28 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #2, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #2, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = shl i32 %19, 9, !dbg !22
  %38 = add i32 %.decomposed, %37, !dbg !23
  %39 = shl i32 %21, 13, !dbg !24
  %40 = add i32 %38, %39, !dbg !25
  %41 = sext i32 %40 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !26
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %20) #2, !dbg !27
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !27
  %.idx = shl nuw nsw i32 %15, 3, !dbg !27
  %46 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !27
  %47 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #2, !dbg !27
  %48 = shl nuw nsw i32 %15, 1, !dbg !27
  %49 = or disjoint i32 %48, 2, !dbg !27
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49, !dbg !27
  %51 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %.idx1 = shl nuw nsw i32 %12, 3, !dbg !27
  %52 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !27
  %53 = load float, ptr addrspace(3) %52, align 8, !dbg !27
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !27
  %54 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !27
  %55 = load float, ptr addrspace(3) %54, align 8, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !28
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %20) #2, !dbg !29
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !29
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !29
  %60 = bitcast i32 %58 to float, !dbg !29
  %61 = bitcast i32 %59 to float, !dbg !29
  %62 = sext i32 %.decomposed to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !30
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #2, !dbg !31
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !31
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !31
  %67 = bitcast i32 %65 to float, !dbg !31
  %68 = bitcast i32 %66 to float, !dbg !31
  %69 = shl nsw i32 %23, 2, !dbg !32
  %70 = shl nsw i32 %24, 2, !dbg !32
  %71 = or disjoint i32 %69, 3, !dbg !33
  %72 = or disjoint i32 %70, 3, !dbg !33
  %73 = sext i32 %71 to i64, !dbg !34
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !34
  %75 = sext i32 %72 to i64, !dbg !34
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !34
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #2, !dbg !35
  %78 = bitcast i32 %77 to float, !dbg !35
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #2, !dbg !35
  %80 = bitcast i32 %79 to float, !dbg !35
  %81 = fadd float %60, %67, !dbg !36
  %82 = fadd float %61, %68, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %83 = bitcast float %81 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %83, i1 true) #2, !dbg !36
  %84 = bitcast float %82 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %84, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %85 = load float, ptr addrspace(3) %52, align 8, !dbg !36
  %86 = load float, ptr addrspace(3) %54, align 8, !dbg !36
  %87 = fmul float %85, %78, !dbg !37
  %88 = fmul float %86, %80, !dbg !37
  %89 = fadd float %53, %87, !dbg !38
  %90 = fadd float %55, %88, !dbg !38
  %91 = fadd float %89, %34, !dbg !39
  %92 = fadd float %90, %36, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !40
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !40
  %95 = bitcast float %91 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %93, i1 %20) #2, !dbg !41
  %96 = bitcast float %92 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %94, i1 %20) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cevbcvbo2pygphozyqc2m3xhua7bzw3vwrslzyas422wu5ngoh2f.py", directory: "inductor_cache/ev")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_4", linkageName: "triton_poi_fused_add_convolution_mul_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 49, scope: !7)
!25 = !DILocation(line: 33, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 54, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 54, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 34, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 25, scope: !7)
!41 = !DILocation(line: 41, column: 44, scope: !7)
!42 = !DILocation(line: 41, column: 4, scope: !7)
