; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 2, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %9, 3, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 4, !dbg !14
  %14 = shl i32 %12, 2, !dbg !15
  %15 = sext i32 %14 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %13) #1, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %13) #1, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !20
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %13) #1, !dbg !21
  %22 = or disjoint i32 %14, 1, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %13) #1, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !25
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %13) #1, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !27
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %13) #1, !dbg !28
  %30 = or disjoint i32 %14, 2, !dbg !29
  %31 = sext i32 %30 to i64, !dbg !30
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !30
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #1, !dbg !31
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !32
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %13) #1, !dbg !33
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !34
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !35
  %38 = or disjoint i32 %14, 3, !dbg !36
  %39 = sext i32 %38 to i64, !dbg !37
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !37
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %13) #1, !dbg !38
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !39
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %13) #1, !dbg !40
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !41
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %13) #1, !dbg !42
  %46 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %47 = insertelement <2 x i32> %46, i32 %25, i64 1, !dbg !17
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !17
  %49 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !19
  %50 = insertelement <2 x i32> %49, i32 %27, i64 1, !dbg !19
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !19
  %52 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !21
  %53 = insertelement <2 x i32> %52, i32 %29, i64 1, !dbg !21
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !21
  %55 = fadd <2 x float> %48, %51, !dbg !43
  %56 = fmul <2 x float> %55, %54, !dbg !44
  %57 = extractelement <2 x float> %56, i64 0, !dbg !45
  %58 = extractelement <2 x float> %56, i64 1, !dbg !46
  %59 = fadd float %57, %58, !dbg !47
  %60 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !31
  %61 = insertelement <2 x i32> %60, i32 %41, i64 1, !dbg !31
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !31
  %63 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !33
  %64 = insertelement <2 x i32> %63, i32 %43, i64 1, !dbg !33
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !33
  %66 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !35
  %67 = insertelement <2 x i32> %66, i32 %45, i64 1, !dbg !35
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !35
  %69 = fadd <2 x float> %62, %65, !dbg !48
  %70 = fmul <2 x float> %69, %68, !dbg !49
  %71 = extractelement <2 x float> %70, i64 0, !dbg !50
  %72 = fadd float %59, %71, !dbg !51
  %73 = extractelement <2 x float> %70, i64 1, !dbg !52
  %74 = fadd float %72, %73, !dbg !53
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 4.000000e+00) #1, !dbg !54
  %76 = fsub float %57, %75, !dbg !45
  %77 = fmul float %76, %76, !dbg !55
  %78 = fsub float %58, %75, !dbg !46
  %79 = fmul float %78, %78, !dbg !56
  %80 = fadd float %77, %79, !dbg !57
  %81 = fsub float %71, %75, !dbg !50
  %82 = fmul float %81, %81, !dbg !58
  %83 = fadd float %82, %80, !dbg !59
  %84 = fsub float %73, %75, !dbg !52
  %85 = fmul float %84, %84, !dbg !60
  %86 = fadd float %85, %83, !dbg !61
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 4.000000e+00) #1, !dbg !62
  %88 = sext i32 %12 to i64, !dbg !63
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !63
  %90 = icmp eq i32 %10, 0, !dbg !64
  %91 = bitcast float %75 to i32, !dbg !64
  %92 = and i1 %90, %13, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %89, i1 %92) #1, !dbg !64
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !65
  %94 = bitcast float %87 to i32, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %93, i1 %92) #1, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cntntp5re3nuarpvdavuh6axtc7vyfr5qwnyrv5x6fcumuj6pqqc.py", directory: "inductor_cache/nt")
!4 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_native_layer_norm_0", linkageName: "triton_poi_fused_add_mul_native_layer_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 42, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 42, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 42, scope: !7)
!36 = !DILocation(line: 34, column: 35, scope: !7)
!37 = !DILocation(line: 34, column: 31, scope: !7)
!38 = !DILocation(line: 34, column: 42, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 42, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 42, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 50, column: 19, scope: !7)
!46 = !DILocation(line: 52, column: 19, scope: !7)
!47 = !DILocation(line: 41, column: 19, scope: !7)
!48 = !DILocation(line: 42, column: 20, scope: !7)
!49 = !DILocation(line: 43, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 44, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 49, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 20, scope: !7)
!56 = !DILocation(line: 53, column: 20, scope: !7)
!57 = !DILocation(line: 54, column: 20, scope: !7)
!58 = !DILocation(line: 56, column: 20, scope: !7)
!59 = !DILocation(line: 57, column: 20, scope: !7)
!60 = !DILocation(line: 59, column: 20, scope: !7)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 20, scope: !7)
!63 = !DILocation(line: 62, column: 25, scope: !7)
!64 = !DILocation(line: 62, column: 37, scope: !7)
!65 = !DILocation(line: 63, column: 25, scope: !7)
!66 = !DILocation(line: 63, column: 37, scope: !7)
!67 = !DILocation(line: 63, column: 4, scope: !7)
