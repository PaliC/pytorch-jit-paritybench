; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 1020, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 2, !dbg !15
  %17 = or disjoint i32 %16, 1, !dbg !16
  %18 = or disjoint i32 %16, 2, !dbg !16
  %19 = or disjoint i32 %16, 3, !dbg !16
  %20 = icmp slt i32 %16, 4, !dbg !17
  %21 = icmp slt i32 %17, 4, !dbg !17
  %22 = icmp slt i32 %18, 4, !dbg !17
  %23 = icmp slt i32 %19, 4, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %24 = sdiv i32 %.frozen, 1280, !dbg !18
  %25 = mul i32 %24, 1280, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = mul i32 %15, 5120, !dbg !20
  %27 = mul i32 %17, 1280, !dbg !20
  %28 = mul i32 %18, 1280, !dbg !20
  %29 = mul i32 %19, 1280, !dbg !20
  %30 = mul i32 %24, 5120, !dbg !21
  %31 = add i32 %30, %.decomposed, !dbg !22
  %32 = add i32 %31, %26, !dbg !23
  %33 = add i32 %31, %27, !dbg !23
  %34 = add i32 %31, %28, !dbg !23
  %35 = add i32 %31, %29, !dbg !23
  %36 = sext i32 %32 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = sext i32 %33 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = sext i32 %34 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %35 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %20) #4, !dbg !25
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %21) #4, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %22) #4, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %23) #4, !dbg !25
  %48 = sext i32 %.decomposed to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #4, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !29
  %57 = bitcast i32 %53 to float, !dbg !29
  %58 = bitcast i32 %54 to float, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !30
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !32
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !33
  %65 = fadd float %57, 0x3EE4F8B580000000, !dbg !34
  %66 = fadd float %58, 0x3EE4F8B580000000, !dbg !34
  %67 = fadd float %59, 0x3EE4F8B580000000, !dbg !34
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !34
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %69, 0, !dbg !35
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %70, 0, !dbg !35
  br i1 %.not.i, label %76, label %71, !dbg !35

71:                                               ; preds = %8
  br i1 %.not1.i, label %74, label %72, !dbg !35

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !35

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i16 = icmp eq i32 %81, 0, !dbg !35
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i19 = icmp eq i32 %82, 0, !dbg !35
  br i1 %.not.i16, label %88, label %83, !dbg !35

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %86, label %84, !dbg !35

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %91, label %89, !dbg !35

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %84, %86, %89, %91
  %.0.i18 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !35
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i21 = icmp eq i32 %93, 0, !dbg !35
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i24 = icmp eq i32 %94, 0, !dbg !35
  br i1 %.not.i21, label %100, label %95, !dbg !35

95:                                               ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %98, label %96, !dbg !35

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

100:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %103, label %101, !dbg !35

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %96, %98, %101, %103
  %.0.i23 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i26 = icmp eq i32 %105, 0, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i29 = icmp eq i32 %106, 0, !dbg !35
  br i1 %.not.i26, label %112, label %107, !dbg !35

107:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %110, label %108, !dbg !35

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

112:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %115, label %113, !dbg !35

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %108, %110, %113, %115
  %.0.i28 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !35
  %117 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %118 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %119 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %120 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %121 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %122 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %123 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %124 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %125 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %126 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %127 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %128 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %129 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %130 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %131 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !25
  %134 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !25
  %136 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !33
  %138 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !33
  %141 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !31
  %145 = and i32 %11, 255, !dbg !12
  %146 = or disjoint i32 %145, 768, !dbg !12
  %147 = or disjoint i32 %10, %146, !dbg !13
  %148 = or disjoint i32 %145, 512, !dbg !12
  %149 = or disjoint i32 %10, %148, !dbg !13
  %150 = or disjoint i32 %145, 256, !dbg !12
  %151 = or disjoint i32 %10, %150, !dbg !13
  %152 = or disjoint i32 %10, %145, !dbg !13
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !36
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !36
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !36
  %157 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !27
  %158 = insertelement <4 x i32> %157, i32 %120, i64 1, !dbg !27
  %159 = insertelement <4 x i32> %158, i32 %122, i64 2, !dbg !27
  %160 = insertelement <4 x i32> %159, i32 %124, i64 3, !dbg !27
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !27
  %162 = shufflevector <4 x float> %161, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %163 = insertelement <16 x i32> poison, i32 %117, i64 0, !dbg !25
  %164 = insertelement <16 x i32> %163, i32 %119, i64 1, !dbg !25
  %165 = insertelement <16 x i32> %164, i32 %121, i64 2, !dbg !25
  %166 = insertelement <16 x i32> %165, i32 %123, i64 3, !dbg !25
  %167 = insertelement <16 x i32> %166, i32 %125, i64 4, !dbg !25
  %168 = insertelement <16 x i32> %167, i32 %126, i64 5, !dbg !25
  %169 = insertelement <16 x i32> %168, i32 %127, i64 6, !dbg !25
  %170 = insertelement <16 x i32> %169, i32 %128, i64 7, !dbg !25
  %171 = insertelement <16 x i32> %170, i32 %129, i64 8, !dbg !25
  %172 = insertelement <16 x i32> %171, i32 %130, i64 9, !dbg !25
  %173 = insertelement <16 x i32> %172, i32 %131, i64 10, !dbg !25
  %174 = insertelement <16 x i32> %173, i32 %132, i64 11, !dbg !25
  %175 = insertelement <16 x i32> %174, i32 %133, i64 12, !dbg !25
  %176 = insertelement <16 x i32> %175, i32 %134, i64 13, !dbg !25
  %177 = insertelement <16 x i32> %176, i32 %135, i64 14, !dbg !25
  %178 = insertelement <16 x i32> %177, i32 %136, i64 15, !dbg !25
  %179 = bitcast <16 x i32> %178 to <16 x float>, !dbg !25
  %180 = fsub <16 x float> %179, %162, !dbg !37
  %181 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !33
  %182 = insertelement <4 x i32> %181, i32 %138, i64 1, !dbg !33
  %183 = insertelement <4 x i32> %182, i32 %139, i64 2, !dbg !33
  %184 = insertelement <4 x i32> %183, i32 %140, i64 3, !dbg !33
  %185 = bitcast <4 x i32> %184 to <4 x float>, !dbg !33
  %186 = shufflevector <4 x float> %185, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %187 = insertelement <4 x i32> poison, i32 %141, i64 0, !dbg !31
  %188 = insertelement <4 x i32> %187, i32 %142, i64 1, !dbg !31
  %189 = insertelement <4 x i32> %188, i32 %143, i64 2, !dbg !31
  %190 = insertelement <4 x i32> %189, i32 %144, i64 3, !dbg !31
  %191 = bitcast <4 x i32> %190 to <4 x float>, !dbg !31
  %192 = shufflevector <4 x float> %191, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %193 = insertelement <16 x float> poison, float %156, i64 0, !dbg !38
  %194 = insertelement <16 x float> %193, float %155, i64 1, !dbg !38
  %195 = insertelement <16 x float> %194, float %154, i64 2, !dbg !38
  %196 = insertelement <16 x float> %195, float %153, i64 3, !dbg !38
  %197 = shufflevector <16 x float> %196, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %198 = fmul <16 x float> %180, %197, !dbg !38
  %199 = fmul <16 x float> %198, %192, !dbg !39
  %200 = fadd <16 x float> %199, %186, !dbg !40
  %201 = fcmp ole <16 x float> %200, zeroinitializer, !dbg !41
  %202 = select <16 x i1> %201, <16 x float> zeroinitializer, <16 x float> %200, !dbg !41
  %203 = fcmp olt <16 x float> %202, splat (float 6.000000e+00), !dbg !45
  %204 = extractelement <16 x float> %202, i64 15, !dbg !47
  %205 = fcmp uno float %204, 0.000000e+00, !dbg !48
  %206 = extractelement <16 x float> %202, i64 14, !dbg !47
  %207 = fcmp uno float %206, 0.000000e+00, !dbg !48
  %208 = extractelement <16 x float> %202, i64 13, !dbg !47
  %209 = fcmp uno float %208, 0.000000e+00, !dbg !48
  %210 = extractelement <16 x float> %202, i64 12, !dbg !47
  %211 = fcmp uno float %210, 0.000000e+00, !dbg !48
  %212 = extractelement <16 x float> %202, i64 11, !dbg !47
  %213 = fcmp uno float %212, 0.000000e+00, !dbg !48
  %214 = extractelement <16 x float> %202, i64 10, !dbg !47
  %215 = fcmp uno float %214, 0.000000e+00, !dbg !48
  %216 = extractelement <16 x float> %202, i64 9, !dbg !47
  %217 = fcmp uno float %216, 0.000000e+00, !dbg !48
  %218 = extractelement <16 x float> %202, i64 8, !dbg !47
  %219 = fcmp uno float %218, 0.000000e+00, !dbg !48
  %220 = extractelement <16 x float> %202, i64 7, !dbg !47
  %221 = fcmp uno float %220, 0.000000e+00, !dbg !48
  %222 = extractelement <16 x float> %202, i64 6, !dbg !47
  %223 = fcmp uno float %222, 0.000000e+00, !dbg !48
  %224 = extractelement <16 x float> %202, i64 5, !dbg !47
  %225 = fcmp uno float %224, 0.000000e+00, !dbg !48
  %226 = extractelement <16 x float> %202, i64 4, !dbg !47
  %227 = fcmp uno float %226, 0.000000e+00, !dbg !48
  %228 = extractelement <16 x float> %202, i64 3, !dbg !47
  %229 = fcmp uno float %228, 0.000000e+00, !dbg !48
  %230 = extractelement <16 x float> %202, i64 2, !dbg !47
  %231 = fcmp uno float %230, 0.000000e+00, !dbg !48
  %232 = extractelement <16 x float> %202, i64 1, !dbg !47
  %233 = fcmp uno float %232, 0.000000e+00, !dbg !48
  %234 = extractelement <16 x float> %202, i64 0, !dbg !47
  %235 = fcmp uno float %234, 0.000000e+00, !dbg !48
  %236 = extractelement <16 x i1> %203, i64 15, !dbg !49
  %237 = or i1 %236, %205, !dbg !49
  %238 = extractelement <16 x i1> %203, i64 14, !dbg !49
  %239 = or i1 %238, %207, !dbg !49
  %240 = extractelement <16 x i1> %203, i64 13, !dbg !49
  %241 = or i1 %240, %209, !dbg !49
  %242 = extractelement <16 x i1> %203, i64 12, !dbg !49
  %243 = or i1 %242, %211, !dbg !49
  %244 = extractelement <16 x i1> %203, i64 11, !dbg !49
  %245 = or i1 %244, %213, !dbg !49
  %246 = extractelement <16 x i1> %203, i64 10, !dbg !49
  %247 = or i1 %246, %215, !dbg !49
  %248 = extractelement <16 x i1> %203, i64 9, !dbg !49
  %249 = or i1 %248, %217, !dbg !49
  %250 = extractelement <16 x i1> %203, i64 8, !dbg !49
  %251 = or i1 %250, %219, !dbg !49
  %252 = extractelement <16 x i1> %203, i64 7, !dbg !49
  %253 = or i1 %252, %221, !dbg !49
  %254 = extractelement <16 x i1> %203, i64 6, !dbg !49
  %255 = or i1 %254, %223, !dbg !49
  %256 = extractelement <16 x i1> %203, i64 5, !dbg !49
  %257 = or i1 %256, %225, !dbg !49
  %258 = extractelement <16 x i1> %203, i64 4, !dbg !49
  %259 = or i1 %258, %227, !dbg !49
  %260 = extractelement <16 x i1> %203, i64 3, !dbg !49
  %261 = or i1 %260, %229, !dbg !49
  %262 = extractelement <16 x i1> %203, i64 2, !dbg !49
  %263 = or i1 %262, %231, !dbg !49
  %264 = extractelement <16 x i1> %203, i64 1, !dbg !49
  %265 = or i1 %264, %233, !dbg !49
  %266 = extractelement <16 x i1> %203, i64 0, !dbg !49
  %267 = or i1 %266, %235, !dbg !49
  %268 = add i32 %152, %15, !dbg !50
  %269 = shl i32 %268, 2, !dbg !50
  %270 = add i32 %151, %15, !dbg !50
  %271 = shl i32 %270, 2, !dbg !50
  %272 = add i32 %149, %15, !dbg !50
  %273 = shl i32 %272, 2, !dbg !50
  %274 = add i32 %147, %15, !dbg !50
  %275 = shl i32 %274, 2, !dbg !50
  %276 = sext i32 %269 to i64, !dbg !51
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %276, !dbg !51
  %278 = sext i32 %271 to i64, !dbg !51
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %278, !dbg !51
  %280 = sext i32 %273 to i64, !dbg !51
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %280, !dbg !51
  %282 = sext i32 %275 to i64, !dbg !51
  %283 = getelementptr float, ptr addrspace(1) %5, i64 %282, !dbg !51
  %284 = shl i32 %11, 4, !dbg !47
  %285 = and i32 %284, 4080, !dbg !47
  %286 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %285, !dbg !47
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %285, !dbg !47
  %288 = bitcast float %204 to i32, !dbg !47
  %289 = select i1 %237, i32 %288, i32 1086324736, !dbg !52
  %290 = insertelement <1 x i32> poison, i32 %289, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %290, i1 true) #4, !dbg !47
  %291 = or disjoint i32 %285, 4, !dbg !47
  %292 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %291, !dbg !47
  %293 = getelementptr float, ptr addrspace(3) %292, i32 %291, !dbg !47
  %294 = bitcast float %206 to i32, !dbg !47
  %295 = select i1 %239, i32 %294, i32 1086324736, !dbg !52
  %296 = insertelement <1 x i32> poison, i32 %295, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %296, i1 true) #4, !dbg !47
  %297 = or disjoint i32 %285, 8, !dbg !47
  %298 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %297, !dbg !47
  %299 = getelementptr float, ptr addrspace(3) %298, i32 %297, !dbg !47
  %300 = bitcast float %208 to i32, !dbg !47
  %301 = select i1 %241, i32 %300, i32 1086324736, !dbg !52
  %302 = insertelement <1 x i32> poison, i32 %301, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %302, i1 true) #4, !dbg !47
  %303 = or disjoint i32 %285, 12, !dbg !47
  %304 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %303, !dbg !47
  %305 = getelementptr float, ptr addrspace(3) %304, i32 %303, !dbg !47
  %306 = bitcast float %210 to i32, !dbg !47
  %307 = select i1 %243, i32 %306, i32 1086324736, !dbg !52
  %308 = insertelement <1 x i32> poison, i32 %307, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %308, i1 true) #4, !dbg !47
  %309 = or disjoint i32 %285, 1, !dbg !47
  %310 = getelementptr float, ptr addrspace(3) %286, i32 %309, !dbg !47
  %311 = bitcast float %212 to i32, !dbg !47
  %312 = select i1 %245, i32 %311, i32 1086324736, !dbg !52
  %313 = insertelement <1 x i32> poison, i32 %312, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %313, i1 true) #4, !dbg !47
  %314 = or disjoint i32 %285, 5, !dbg !47
  %315 = lshr i32 %314, 2, !dbg !47
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i32 %315, !dbg !47
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %314, !dbg !47
  %318 = bitcast float %214 to i32, !dbg !47
  %319 = select i1 %247, i32 %318, i32 1086324736, !dbg !52
  %320 = insertelement <1 x i32> poison, i32 %319, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %320, i1 true) #4, !dbg !47
  %321 = or disjoint i32 %285, 9, !dbg !47
  %322 = lshr i32 %321, 2, !dbg !47
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i32 %322, !dbg !47
  %324 = getelementptr float, ptr addrspace(3) %323, i32 %321, !dbg !47
  %325 = bitcast float %216 to i32, !dbg !47
  %326 = select i1 %249, i32 %325, i32 1086324736, !dbg !52
  %327 = insertelement <1 x i32> poison, i32 %326, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %327, i1 true) #4, !dbg !47
  %328 = or disjoint i32 %285, 13, !dbg !47
  %329 = lshr i32 %328, 2, !dbg !47
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %329, !dbg !47
  %331 = getelementptr float, ptr addrspace(3) %330, i32 %328, !dbg !47
  %332 = bitcast float %218 to i32, !dbg !47
  %333 = select i1 %251, i32 %332, i32 1086324736, !dbg !52
  %334 = insertelement <1 x i32> poison, i32 %333, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %334, i1 true) #4, !dbg !47
  %335 = or disjoint i32 %285, 2, !dbg !47
  %336 = getelementptr float, ptr addrspace(3) %286, i32 %335, !dbg !47
  %337 = bitcast float %220 to i32, !dbg !47
  %338 = select i1 %253, i32 %337, i32 1086324736, !dbg !52
  %339 = insertelement <1 x i32> poison, i32 %338, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %339, i1 true) #4, !dbg !47
  %340 = or disjoint i32 %285, 6, !dbg !47
  %341 = lshr i32 %340, 2, !dbg !47
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i32 %341, !dbg !47
  %343 = getelementptr float, ptr addrspace(3) %342, i32 %340, !dbg !47
  %344 = bitcast float %222 to i32, !dbg !47
  %345 = select i1 %255, i32 %344, i32 1086324736, !dbg !52
  %346 = insertelement <1 x i32> poison, i32 %345, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %346, i1 true) #4, !dbg !47
  %347 = or disjoint i32 %285, 10, !dbg !47
  %348 = lshr i32 %347, 2, !dbg !47
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i32 %348, !dbg !47
  %350 = getelementptr float, ptr addrspace(3) %349, i32 %347, !dbg !47
  %351 = bitcast float %224 to i32, !dbg !47
  %352 = select i1 %257, i32 %351, i32 1086324736, !dbg !52
  %353 = insertelement <1 x i32> poison, i32 %352, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %353, i1 true) #4, !dbg !47
  %354 = or disjoint i32 %285, 14, !dbg !47
  %355 = lshr i32 %354, 2, !dbg !47
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %355, !dbg !47
  %357 = getelementptr float, ptr addrspace(3) %356, i32 %354, !dbg !47
  %358 = bitcast float %226 to i32, !dbg !47
  %359 = select i1 %259, i32 %358, i32 1086324736, !dbg !52
  %360 = insertelement <1 x i32> poison, i32 %359, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %360, i1 true) #4, !dbg !47
  %361 = or disjoint i32 %285, 3, !dbg !47
  %362 = getelementptr float, ptr addrspace(3) %286, i32 %361, !dbg !47
  %363 = bitcast float %228 to i32, !dbg !47
  %364 = select i1 %261, i32 %363, i32 1086324736, !dbg !52
  %365 = insertelement <1 x i32> poison, i32 %364, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %365, i1 true) #4, !dbg !47
  %366 = or disjoint i32 %285, 7, !dbg !47
  %367 = lshr i32 %366, 2, !dbg !47
  %368 = getelementptr float, ptr addrspace(3) @global_smem, i32 %367, !dbg !47
  %369 = getelementptr float, ptr addrspace(3) %368, i32 %366, !dbg !47
  %370 = bitcast float %230 to i32, !dbg !47
  %371 = select i1 %263, i32 %370, i32 1086324736, !dbg !52
  %372 = insertelement <1 x i32> poison, i32 %371, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %372, i1 true) #4, !dbg !47
  %373 = or disjoint i32 %285, 11, !dbg !47
  %374 = lshr i32 %373, 2, !dbg !47
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !47
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %373, !dbg !47
  %377 = bitcast float %232 to i32, !dbg !47
  %378 = select i1 %265, i32 %377, i32 1086324736, !dbg !52
  %379 = insertelement <1 x i32> poison, i32 %378, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %379, i1 true) #4, !dbg !47
  %380 = or disjoint i32 %285, 15, !dbg !47
  %381 = lshr i32 %380, 2, !dbg !47
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i32 %381, !dbg !47
  %383 = getelementptr float, ptr addrspace(3) %382, i32 %380, !dbg !47
  %384 = bitcast float %234 to i32, !dbg !47
  %385 = select i1 %267, i32 %384, i32 1086324736, !dbg !52
  %386 = insertelement <1 x i32> poison, i32 %385, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %386, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %387 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !47
  %388 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %13, !dbg !47
  %389 = load i32, ptr addrspace(3) %388, align 4, !dbg !47
  %390 = or disjoint i32 %13, 1, !dbg !47
  %391 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %390, !dbg !47
  %392 = load i32, ptr addrspace(3) %391, align 4, !dbg !47
  %393 = or disjoint i32 %13, 2, !dbg !47
  %394 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %393, !dbg !47
  %395 = load i32, ptr addrspace(3) %394, align 4, !dbg !47
  %396 = or disjoint i32 %13, 3, !dbg !47
  %397 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %396, !dbg !47
  %398 = load i32, ptr addrspace(3) %397, align 4, !dbg !47
  %399 = or disjoint i32 %13, 1024, !dbg !47
  %400 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %399, !dbg !47
  %401 = getelementptr inbounds float, ptr addrspace(3) %400, i32 %399, !dbg !47
  %402 = load i32, ptr addrspace(3) %401, align 4, !dbg !47
  %403 = or disjoint i32 %13, 1025, !dbg !47
  %404 = lshr i32 %403, 2, !dbg !47
  %405 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %404, !dbg !47
  %406 = getelementptr inbounds float, ptr addrspace(3) %405, i32 %403, !dbg !47
  %407 = load i32, ptr addrspace(3) %406, align 4, !dbg !47
  %408 = or disjoint i32 %13, 1026, !dbg !47
  %409 = lshr i32 %408, 2, !dbg !47
  %410 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %409, !dbg !47
  %411 = getelementptr inbounds float, ptr addrspace(3) %410, i32 %408, !dbg !47
  %412 = load i32, ptr addrspace(3) %411, align 4, !dbg !47
  %413 = or disjoint i32 %13, 1027, !dbg !47
  %414 = lshr i32 %413, 2, !dbg !47
  %415 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %414, !dbg !47
  %416 = getelementptr inbounds float, ptr addrspace(3) %415, i32 %413, !dbg !47
  %417 = load i32, ptr addrspace(3) %416, align 4, !dbg !47
  %418 = or disjoint i32 %13, 2048, !dbg !47
  %419 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %418, !dbg !47
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %418, !dbg !47
  %421 = load i32, ptr addrspace(3) %420, align 4, !dbg !47
  %422 = or disjoint i32 %13, 2049, !dbg !47
  %423 = lshr i32 %422, 2, !dbg !47
  %424 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %423, !dbg !47
  %425 = getelementptr inbounds float, ptr addrspace(3) %424, i32 %422, !dbg !47
  %426 = load i32, ptr addrspace(3) %425, align 4, !dbg !47
  %427 = or disjoint i32 %13, 2050, !dbg !47
  %428 = lshr i32 %427, 2, !dbg !47
  %429 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %428, !dbg !47
  %430 = getelementptr inbounds float, ptr addrspace(3) %429, i32 %427, !dbg !47
  %431 = load i32, ptr addrspace(3) %430, align 4, !dbg !47
  %432 = or disjoint i32 %13, 2051, !dbg !47
  %433 = lshr i32 %432, 2, !dbg !47
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %433, !dbg !47
  %435 = getelementptr inbounds float, ptr addrspace(3) %434, i32 %432, !dbg !47
  %436 = load i32, ptr addrspace(3) %435, align 4, !dbg !47
  %437 = or disjoint i32 %13, 3072, !dbg !47
  %438 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %437, !dbg !47
  %439 = getelementptr inbounds float, ptr addrspace(3) %438, i32 %437, !dbg !47
  %440 = load i32, ptr addrspace(3) %439, align 4, !dbg !47
  %441 = or disjoint i32 %13, 3073, !dbg !47
  %442 = lshr i32 %441, 2, !dbg !47
  %443 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %442, !dbg !47
  %444 = getelementptr inbounds float, ptr addrspace(3) %443, i32 %441, !dbg !47
  %445 = load i32, ptr addrspace(3) %444, align 4, !dbg !47
  %446 = or disjoint i32 %13, 3074, !dbg !47
  %447 = lshr i32 %446, 2, !dbg !47
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %447, !dbg !47
  %449 = getelementptr inbounds float, ptr addrspace(3) %448, i32 %446, !dbg !47
  %450 = load i32, ptr addrspace(3) %449, align 4, !dbg !47
  %451 = or disjoint i32 %13, 3075, !dbg !47
  %452 = lshr i32 %451, 2, !dbg !47
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %452, !dbg !47
  %454 = getelementptr inbounds float, ptr addrspace(3) %453, i32 %451, !dbg !47
  %455 = load i32, ptr addrspace(3) %454, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %389, i32 %392, i32 %395, i32 %398, ptr addrspace(1) %277, i1 %20) #4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %402, i32 %407, i32 %412, i32 %417, ptr addrspace(1) %279, i1 %20) #4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %421, i32 %426, i32 %431, i32 %436, ptr addrspace(1) %281, i1 %20) #4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %445, i32 %450, i32 %455, ptr addrspace(1) %283, i1 %20) #4, !dbg !47
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmi7c53vhcddsjxkclu5e5tguj6b36wovp2dtu5zgobgwof2thou.py", directory: "inductor_cache/mi")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 110, column: 15, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 52, column: 44, scope: !7)
!48 = !DILocation(line: 112, column: 21, scope: !42, inlinedAt: !46)
!49 = !DILocation(line: 112, column: 16, scope: !42, inlinedAt: !46)
!50 = !DILocation(line: 52, column: 30, scope: !7)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 113, column: 29, scope: !42, inlinedAt: !46)
!53 = !DILocation(line: 52, column: 4, scope: !7)
