; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 1, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %.lobit = and i32 %14, 1, !dbg !12
  %15 = or disjoint i32 %12, %.lobit, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 7, !dbg !16
  %19 = shl i32 %13, 1, !dbg !17
  %20 = and i32 %19, 126, !dbg !17
  %21 = and i32 %13, 127, !dbg !17
  %22 = or disjoint i32 %18, %20, !dbg !18
  %23 = or disjoint i32 %18, %21, !dbg !18
  %24 = icmp slt i32 %22, 128, !dbg !19
  %25 = icmp slt i32 %23, 128, !dbg !19
  %26 = shl i32 %15, 7, !dbg !20
  %27 = add i32 %22, %26, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = and i1 %16, %24, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %30) #4, !dbg !24
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %34 = and i32 %19, 254, !dbg !24
  %35 = lshr i32 %34, 7, !dbg !24
  %36 = or disjoint i32 %35, %34, !dbg !24
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %36, !dbg !24
  %38 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %38, i1 true) #4, !dbg !24
  %39 = or disjoint i32 %34, 1, !dbg !24
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %35, !dbg !24
  %41 = getelementptr inbounds float, ptr addrspace(3) %40, i32 %39, !dbg !24
  %42 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %42, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !24
  %44 = load float, ptr addrspace(3) %43, align 4, !dbg !24
  %45 = getelementptr inbounds i8, ptr addrspace(3) %43, i32 516, !dbg !24
  %46 = load float, ptr addrspace(3) %45, align 4, !dbg !24
  %47 = sext i32 %23 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %25) #4, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %25) #4, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %25) #4, !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %25) #4, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #4, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !35
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %30) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %61 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %61, i1 true) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !37
  %63 = load float, ptr addrspace(3) %62, align 8, !dbg !37
  %64 = or disjoint i32 %20, 1, !dbg !37
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !37
  %66 = load float, ptr addrspace(3) %65, align 4, !dbg !37
  %67 = fadd float %54, 0x3F50624DE0000000, !dbg !38
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %68, 0, !dbg !39
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i = icmp eq i32 %69, 0, !dbg !39
  br i1 %.not.i, label %75, label %70, !dbg !39

70:                                               ; preds = %10
  br i1 %.not1.i, label %73, label %71, !dbg !39

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

75:                                               ; preds = %10
  br i1 %.not1.i, label %78, label %76, !dbg !39

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !39
  %80 = bitcast i32 %49 to float, !dbg !26
  %81 = fadd float %46, %80, !dbg !37
  %82 = bitcast i32 %51 to float, !dbg !28
  %83 = fsub float %81, %82, !dbg !40
  %84 = fadd float %44, %80, !dbg !37
  %85 = fsub float %84, %82, !dbg !40
  %86 = bitcast i32 %33 to float, !dbg !24
  %87 = fadd float %66, %86, !dbg !37
  %88 = bitcast i32 %32 to float, !dbg !24
  %89 = fadd float %63, %88, !dbg !37
  %90 = extractvalue { i32, i32 } %60, 1, !dbg !36
  %91 = bitcast i32 %90 to float, !dbg !36
  %92 = extractvalue { i32, i32 } %60, 0, !dbg !36
  %93 = bitcast i32 %92 to float, !dbg !36
  %94 = bitcast i32 %58 to float, !dbg !34
  %95 = bitcast i32 %56 to float, !dbg !32
  %96 = icmp slt i32 %12, 256, !dbg !14
  %97 = and i1 %96, %25, !dbg !23
  %.frozen = freeze i32 %12, !dbg !41
  %98 = sdiv i32 %.frozen, 64, !dbg !41
  %99 = mul i32 %98, 64, !dbg !42
  %.decomposed = sub i32 %.frozen, %99, !dbg !42
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %101 = fmul float %85, %100, !dbg !44
  %102 = fmul float %83, %100, !dbg !44
  %103 = fmul float %101, %95, !dbg !45
  %104 = fmul float %102, %95, !dbg !45
  %105 = fadd float %103, %94, !dbg !46
  %106 = fadd float %104, %94, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %107 = bitcast float %105 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %107, i1 true) #4, !dbg !46
  %108 = bitcast float %106 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %108, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %109 = load float, ptr addrspace(3) %37, align 4, !dbg !46
  %110 = load float, ptr addrspace(3) %41, align 4, !dbg !46
  %111 = fadd float %109, %93, !dbg !47
  %112 = fadd float %110, %91, !dbg !47
  %113 = fcmp olt float %111, 0.000000e+00, !dbg !48
  %114 = fcmp olt float %112, 0.000000e+00, !dbg !48
  %115 = select i1 %113, float 0.000000e+00, float %111, !dbg !52
  %116 = select i1 %114, float 0.000000e+00, float %112, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %117 = bitcast float %89 to i32, !dbg !54
  %118 = bitcast float %87 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %118, ptr addrspace(1) %29, i1 %30) #4, !dbg !54
  %119 = shl i32 %23, 6, !dbg !55
  %120 = shl i32 %98, 13, !dbg !56
  %121 = add i32 %120, %.decomposed, !dbg !57
  %122 = add i32 %121, %119, !dbg !58
  %123 = sext i32 %122 to i64, !dbg !59
  %124 = getelementptr float, ptr addrspace(1) %7, i64 %123, !dbg !59
  %125 = shl i32 %13, 2, !dbg !60
  %126 = and i32 %125, 252, !dbg !60
  %127 = or disjoint i32 %126, %.lobit, !dbg !60
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !60
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %127, !dbg !60
  %130 = bitcast float %115 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #4, !dbg !60
  %131 = or disjoint i32 %127, 2, !dbg !60
  %132 = or disjoint i32 %126, 2, !dbg !60
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !60
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !60
  %135 = bitcast float %116 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %.idx = shl nuw nsw i32 %34, 3, !dbg !60
  %136 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !60
  %.extract = load i32, ptr addrspace(3) %136, align 16, !dbg !60
  %137 = getelementptr inbounds i8, ptr addrspace(3) %136, i32 4, !dbg !60
  %.extract3 = load i32, ptr addrspace(3) %137, align 4, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract3, ptr addrspace(1) %124, i1 %97) #4, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cha5qjameu5f3izoqxxhva6chl4cn5sj6a7i4evb4nu3k46iuo7w.py", directory: "inductor_cache/ha")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 45, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 43, column: 26, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 31, column: 19, scope: !7)
!42 = !DILocation(line: 30, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 48, column: 19, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 53, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 54, column: 4, scope: !7)
!54 = !DILocation(line: 55, column: 48, scope: !7)
!55 = !DILocation(line: 56, column: 33, scope: !7)
!56 = !DILocation(line: 56, column: 43, scope: !7)
!57 = !DILocation(line: 56, column: 30, scope: !7)
!58 = !DILocation(line: 56, column: 38, scope: !7)
!59 = !DILocation(line: 56, column: 25, scope: !7)
!60 = !DILocation(line: 56, column: 55, scope: !7)
!61 = !DILocation(line: 56, column: 4, scope: !7)
