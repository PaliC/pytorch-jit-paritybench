; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 1024, !dbg !14
  %15 = icmp slt i32 %13, 1024, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen, 256, !dbg !15
  %17 = mul i32 %16, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = shl i32 %10, 8, !dbg !17
  %19 = and i32 %18, 1792, !dbg !17
  %20 = shl i32 %16, 12, !dbg !18
  %21 = add i32 %20, %.decomposed, !dbg !19
  %22 = add i32 %21, %19, !dbg !20
  %23 = add i32 %21, 2048, !dbg !19
  %24 = add nuw i32 %23, %19, !dbg !20
  %25 = sext i32 %22 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = fadd float %34, %43, !dbg !23
  %48 = fadd float %35, %44, !dbg !23
  %49 = fadd float %36, %45, !dbg !23
  %50 = fadd float %37, %46, !dbg !23
  %51 = and i32 %10, 7, !dbg !28
  %52 = shl nuw nsw i32 %9, 3, !dbg !28
  %53 = or disjoint i32 %52, %51, !dbg !28
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !28
  %55 = bitcast float %47 to i32, !dbg !28
  %56 = select i1 %14, i32 %55, i32 0, !dbg !23
  %57 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %57, i1 true) #3, !dbg !28
  %58 = or disjoint i32 %52, 8, !dbg !28
  %59 = or disjoint i32 %58, %51, !dbg !28
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !28
  %61 = bitcast float %48 to i32, !dbg !28
  %62 = select i1 %14, i32 %61, i32 0, !dbg !23
  %63 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %63, i1 true) #3, !dbg !28
  %64 = or disjoint i32 %52, 16, !dbg !28
  %65 = or disjoint i32 %64, %51, !dbg !28
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !28
  %67 = bitcast float %49 to i32, !dbg !28
  %68 = select i1 %14, i32 %67, i32 0, !dbg !23
  %69 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %69, i1 true) #3, !dbg !28
  %70 = or disjoint i32 %52, 24, !dbg !28
  %71 = or disjoint i32 %70, %51, !dbg !28
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !28
  %73 = bitcast float %50 to i32, !dbg !28
  %74 = select i1 %14, i32 %73, i32 0, !dbg !23
  %75 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %75, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %76 = icmp slt i32 %7, 1024, !dbg !28
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !28
  %78 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %76) #3, !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = fadd float %79, %81, !dbg !23
  %83 = bitcast float %82 to i32, !dbg !28
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = fadd float %82, %85, !dbg !23
  %87 = bitcast float %86 to i32, !dbg !28
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !28
  %89 = bitcast i32 %88 to float, !dbg !28
  %90 = fadd float %86, %89, !dbg !23
  %91 = and i32 %7, 7, !dbg !28
  %92 = icmp eq i32 %91, 0, !dbg !28
  %93 = and i1 %76, %92, !dbg !28
  %94 = bitcast float %90 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %94, i1 %93) #3, !dbg !28
  %95 = getelementptr i8, ptr addrspace(3) %77, i32 1024, !dbg !28
  %96 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %76) #3, !dbg !28
  %97 = bitcast i32 %96 to float, !dbg !28
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = fadd float %97, %99, !dbg !23
  %101 = bitcast float %100 to i32, !dbg !28
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = fadd float %100, %103, !dbg !23
  %105 = bitcast float %104 to i32, !dbg !28
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = fadd float %104, %107, !dbg !23
  %109 = bitcast float %108 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %109, i1 %93) #3, !dbg !28
  %110 = getelementptr i8, ptr addrspace(3) %77, i32 2048, !dbg !28
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %76) #3, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = fadd float %112, %114, !dbg !23
  %116 = bitcast float %115 to i32, !dbg !28
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = fadd float %115, %118, !dbg !23
  %120 = bitcast float %119 to i32, !dbg !28
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = fadd float %119, %122, !dbg !23
  %124 = bitcast float %123 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %124, i1 %93) #3, !dbg !28
  %125 = getelementptr i8, ptr addrspace(3) %77, i32 3072, !dbg !28
  %126 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %125, i1 %76) #3, !dbg !28
  %127 = bitcast i32 %126 to float, !dbg !28
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !28
  %129 = bitcast i32 %128 to float, !dbg !28
  %130 = fadd float %127, %129, !dbg !23
  %131 = bitcast float %130 to i32, !dbg !28
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = fadd float %130, %133, !dbg !23
  %135 = bitcast float %134 to i32, !dbg !28
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !28
  %137 = bitcast i32 %136 to float, !dbg !28
  %138 = fadd float %134, %137, !dbg !23
  %139 = bitcast float %138 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %139, i1 %93) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !28
  %141 = load i32, ptr addrspace(3) %140, align 16, !dbg !28
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !28
  %143 = load i32, ptr addrspace(3) %142, align 16, !dbg !28
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !28
  %145 = load i32, ptr addrspace(3) %144, align 16, !dbg !28
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !28
  %147 = load i32, ptr addrspace(3) %146, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %148, i32 %141, i32 %143, i32 %145, i32 %147, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %150 = load float, ptr addrspace(3) %149, align 4, !dbg !29
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 1.600000e+01) #3, !dbg !33
  %152 = fcmp olt float %151, 0.000000e+00, !dbg !34
  %153 = select i1 %152, float 0.000000e+00, float %151, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %154 = sext i32 %13 to i64, !dbg !36
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !36
  %156 = and i32 %7, 128, !dbg !37
  %157 = icmp eq i32 %156, 0, !dbg !37
  %158 = bitcast float %153 to i32, !dbg !37
  %159 = and i1 %157, %15, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %155, i1 %159) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crcb4mjgin7e57ozqqacxtbedharhvdctb43kelfvs6gxy2oethw.py", directory: "inductor_cache/rc")
!4 = !{ptr @triton_per_fused_mean_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_relu_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_relu_22", linkageName: "triton_per_fused_mean_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 40, column: 40, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 41, column: 4, scope: !7)
!36 = !DILocation(line: 42, column: 28, scope: !7)
!37 = !DILocation(line: 42, column: 39, scope: !7)
!38 = !DILocation(line: 42, column: 4, scope: !7)
