; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_dot_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 1, !dbg !10
  %9 = and i32 %8, 126, !dbg !10
  %10 = icmp samesign ult i32 %9, 100, !dbg !11
  %11 = zext nneg i32 %9 to i64, !dbg !12
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !12
  %13 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %12, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !13
  %14 = extractvalue { i32, i32 } %13, 0, !dbg !13
  %15 = extractvalue { i32, i32 } %13, 1, !dbg !13
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !14
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !15
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !15
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !15
  %20 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !13
  %21 = insertelement <2 x i32> %20, i32 %15, i64 1, !dbg !13
  %22 = bitcast <2 x i32> %21 to <2 x float>, !dbg !13
  %23 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !15
  %24 = insertelement <2 x i32> %23, i32 %19, i64 1, !dbg !15
  %25 = bitcast <2 x i32> %24 to <2 x float>, !dbg !15
  %26 = fmul <2 x float> %22, %25, !dbg !16
  %shift = shufflevector <2 x float> %26, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !17
  %27 = fadd <2 x float> %26, %shift, !dbg !17
  %28 = extractelement <2 x float> %27, i64 0, !dbg !17
  %29 = select i1 %10, float %28, float 0.000000e+00, !dbg !17
  %30 = bitcast float %29 to i32, !dbg !22
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 16, i32 31), !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = fadd float %29, %32, !dbg !17
  %34 = bitcast float %33 to i32, !dbg !22
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 8, i32 31), !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = fadd float %33, %36, !dbg !17
  %38 = bitcast float %37 to i32, !dbg !22
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 4, i32 31), !dbg !22
  %40 = bitcast i32 %39 to float, !dbg !22
  %41 = fadd float %37, %40, !dbg !17
  %42 = bitcast float %41 to i32, !dbg !22
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 2, i32 31), !dbg !22
  %44 = bitcast i32 %43 to float, !dbg !22
  %45 = fadd float %41, %44, !dbg !17
  %46 = bitcast float %45 to i32, !dbg !22
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = fadd float %45, %48, !dbg !17
  %50 = icmp eq i32 %6, 0, !dbg !22
  %51 = and i32 %7, 1, !dbg !22
  %52 = zext nneg i32 %51 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i64 %52, !dbg !22
  %54 = bitcast float %49 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 %50) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %55 = icmp slt i32 %5, 2, !dbg !22
  %56 = sext i32 %5 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !22
  %58 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %57, i1 %55) #3, !dbg !22
  %59 = bitcast i32 %58 to float, !dbg !22
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = fadd float %59, %61, !dbg !17
  %63 = and i32 %5, 1, !dbg !22
  %64 = icmp eq i32 %63, 0, !dbg !22
  %65 = and i1 %55, %64, !dbg !22
  %66 = bitcast float %62 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %66, i1 %65) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %67 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %urem = and i32 %5, 63, !dbg !23
  %68 = icmp eq i32 %urem, 0, !dbg !23
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %67, ptr addrspace(1) %2, i1 %68) #3, !dbg !23
  ret void, !dbg !24
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx4mqoy3asfg2rvja5pofeospitne2wg76c53brvnudldocw5pqh.py", directory: "inductor_cache/x4")
!4 = !{ptr @triton_per_fused_dot_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_dot_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_dot_4", linkageName: "triton_per_fused_dot_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 30, column: 30, scope: !7)
!13 = !DILocation(line: 30, column: 35, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 18, scope: !7)
!17 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !21)
!18 = distinct !DILexicalBlockFile(scope: !20, file: !19, discriminator: 0)
!19 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!20 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!21 = !DILocation(line: 35, column: 24, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !21)
!23 = !DILocation(line: 36, column: 67, scope: !7)
!24 = !DILocation(line: 36, column: 4, scope: !7)
