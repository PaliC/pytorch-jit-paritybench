; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %10 = mul i32 %9, %8, !dbg !13
  %11 = add i32 %10, %7, !dbg !14
  %12 = shl i32 %11, 10, !dbg !15
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %14 = shl i32 %13, 2, !dbg !16
  %15 = and i32 %14, 508, !dbg !16
  %16 = and i32 %13, 127, !dbg !16
  %17 = or disjoint i32 %16, 128, !dbg !16
  %18 = or disjoint i32 %16, 256, !dbg !16
  %19 = or disjoint i32 %16, 384, !dbg !16
  %20 = or disjoint i32 %12, %15, !dbg !17
  %21 = or disjoint i32 %20, 512, !dbg !17
  %22 = or disjoint i32 %12, %16, !dbg !17
  %23 = or disjoint i32 %12, %17, !dbg !17
  %24 = or disjoint i32 %12, %18, !dbg !17
  %25 = or disjoint i32 %12, %19, !dbg !17
  %26 = or disjoint i32 %22, 512, !dbg !17
  %27 = or disjoint i32 %22, 640, !dbg !17
  %28 = or disjoint i32 %22, 768, !dbg !17
  %29 = or disjoint i32 %22, 896, !dbg !17
  %30 = icmp slt i32 %20, 131072, !dbg !18
  %31 = icmp slt i32 %21, 131072, !dbg !18
  %32 = icmp slt i32 %22, 131072, !dbg !18
  %33 = icmp slt i32 %23, 131072, !dbg !18
  %34 = icmp slt i32 %24, 131072, !dbg !18
  %35 = icmp slt i32 %25, 131072, !dbg !18
  %36 = icmp slt i32 %26, 131072, !dbg !18
  %37 = icmp slt i32 %27, 131072, !dbg !18
  %38 = icmp slt i32 %28, 131072, !dbg !18
  %39 = icmp slt i32 %29, 131072, !dbg !18
  %40 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %41 = icmp slt i32 %40, 9, !dbg !20
  %.frozen = freeze i32 %20, !dbg !21
  %42 = sdiv i32 %.frozen, 256, !dbg !21
  %43 = mul i32 %42, 256, !dbg !22
  %.decomposed = sub i32 %.frozen, %43, !dbg !22
  %44 = sdiv i32 %21, 256, !dbg !21
  %45 = shl i32 %40, 8, !dbg !23
  %46 = add i32 %.decomposed, %45, !dbg !24
  %47 = mul i32 %42, 2304, !dbg !25
  %48 = mul i32 %44, 2304, !dbg !25
  %49 = add i32 %46, %47, !dbg !26
  %50 = add i32 %48, %.decomposed, !dbg !24
  %51 = add i32 %50, %45, !dbg !26
  %52 = sext i32 %49 to i64, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !27
  %54 = sext i32 %51 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !27
  %56 = and i1 %41, %30, !dbg !28
  %57 = and i1 %31, %41, !dbg !28
  %58 = and i1 %41, %32, !dbg !28
  %59 = and i1 %41, %33, !dbg !28
  %60 = and i1 %41, %34, !dbg !28
  %61 = and i1 %41, %35, !dbg !28
  %62 = and i1 %36, %41, !dbg !28
  %63 = and i1 %37, %41, !dbg !28
  %64 = and i1 %38, %41, !dbg !28
  %65 = and i1 %39, %41, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %56) #2, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !29
  %71 = bitcast i32 %67 to float, !dbg !29
  %72 = bitcast i32 %68 to float, !dbg !29
  %73 = bitcast i32 %69 to float, !dbg !29
  %74 = bitcast i32 %70 to float, !dbg !29
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %57) #2, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !29
  %80 = bitcast i32 %76 to float, !dbg !29
  %81 = bitcast i32 %77 to float, !dbg !29
  %82 = bitcast i32 %78 to float, !dbg !29
  %83 = bitcast i32 %79 to float, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !30
  %85 = bitcast i32 %84 to float, !dbg !30
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %85) #2, !dbg !31
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %85) #2, !dbg !31
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %85) #2, !dbg !31
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %85) #2, !dbg !31
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %85) #2, !dbg !31
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float %85) #2, !dbg !31
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %85) #2, !dbg !31
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %85) #2, !dbg !31
  %94 = mul i32 %22, 9, !dbg !32
  %95 = mul i32 %23, 9, !dbg !32
  %96 = mul i32 %24, 9, !dbg !32
  %97 = mul i32 %25, 9, !dbg !32
  %98 = mul i32 %26, 9, !dbg !32
  %99 = mul i32 %27, 9, !dbg !32
  %100 = mul i32 %28, 9, !dbg !32
  %101 = mul i32 %29, 9, !dbg !32
  %102 = add i32 %94, %40, !dbg !33
  %103 = add i32 %95, %40, !dbg !33
  %104 = add i32 %96, %40, !dbg !33
  %105 = add i32 %97, %40, !dbg !33
  %106 = add i32 %40, %98, !dbg !33
  %107 = add i32 %40, %99, !dbg !33
  %108 = add i32 %40, %100, !dbg !33
  %109 = add i32 %40, %101, !dbg !33
  %110 = sext i32 %102 to i64, !dbg !34
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !34
  %112 = sext i32 %103 to i64, !dbg !34
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !34
  %114 = sext i32 %104 to i64, !dbg !34
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !34
  %116 = sext i32 %105 to i64, !dbg !34
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !34
  %118 = sext i32 %106 to i64, !dbg !34
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !34
  %120 = sext i32 %107 to i64, !dbg !34
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !34
  %122 = sext i32 %108 to i64, !dbg !34
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !34
  %124 = sext i32 %109 to i64, !dbg !34
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !34
  %.idx = shl nuw nsw i32 %15, 3, !dbg !35
  %126 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !35
  %127 = bitcast float %86 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !35
  %128 = shl nuw nsw i32 %15, 1, !dbg !35
  %129 = or disjoint i32 %128, 2, !dbg !35
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %129, !dbg !35
  %131 = bitcast float %87 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !35
  %132 = or disjoint i32 %128, 4, !dbg !35
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %132, !dbg !35
  %134 = bitcast float %88 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !35
  %135 = or disjoint i32 %128, 6, !dbg !35
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !35
  %137 = bitcast float %89 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %.idx1 = shl nuw nsw i32 %16, 3, !dbg !35
  %138 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !35
  %139 = load i32, ptr addrspace(3) %138, align 8, !dbg !35
  %.idx2 = shl nuw nsw i32 %17, 3, !dbg !35
  %140 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !35
  %141 = load i32, ptr addrspace(3) %140, align 8, !dbg !35
  %.idx3 = shl nuw nsw i32 %18, 3, !dbg !35
  %142 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !35
  %143 = load i32, ptr addrspace(3) %142, align 8, !dbg !35
  %.idx4 = shl nuw nsw i32 %19, 3, !dbg !35
  %144 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !35
  %145 = load i32, ptr addrspace(3) %144, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %146 = bitcast float %90 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %146, i1 true) #2, !dbg !35
  %147 = bitcast float %91 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %147, i1 true) #2, !dbg !35
  %148 = bitcast float %92 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %148, i1 true) #2, !dbg !35
  %149 = bitcast float %93 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %149, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %150 = load i32, ptr addrspace(3) %138, align 8, !dbg !35
  %151 = load i32, ptr addrspace(3) %140, align 8, !dbg !35
  %152 = load i32, ptr addrspace(3) %142, align 8, !dbg !35
  %153 = load i32, ptr addrspace(3) %144, align 8, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %111, i1 %58) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %113, i1 %59) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %115, i1 %60) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %117, i1 %61) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %119, i1 %62) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %121, i1 %63) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %123, i1 %64) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %125, i1 %65) #2, !dbg !35
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !36
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !36
  %156 = bitcast float %86 to i32, !dbg !37
  %157 = bitcast float %87 to i32, !dbg !37
  %158 = bitcast float %88 to i32, !dbg !37
  %159 = bitcast float %89 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %157, i32 %158, i32 %159, ptr addrspace(1) %154, i1 %56) #2, !dbg !37
  %160 = bitcast float %90 to i32, !dbg !37
  %161 = bitcast float %91 to i32, !dbg !37
  %162 = bitcast float %92 to i32, !dbg !37
  %163 = bitcast float %93 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %160, i32 %161, i32 %162, i32 %163, ptr addrspace(1) %155, i1 %57) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5k5drpvhioohlytcynxgdftagqgno3q4r22niz5cxrqb5vmf35v.py", directory: "inductor_cache/5k")
!4 = !{ptr @triton_poi_fused_convolution_div_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_26", linkageName: "triton_poi_fused_convolution_div_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 27, column: 21, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 29, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 49, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 62, scope: !7)
!29 = !DILocation(line: 32, column: 54, scope: !7)
!30 = !DILocation(line: 33, column: 19, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 32, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 25, scope: !7)
!35 = !DILocation(line: 36, column: 43, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 55, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
