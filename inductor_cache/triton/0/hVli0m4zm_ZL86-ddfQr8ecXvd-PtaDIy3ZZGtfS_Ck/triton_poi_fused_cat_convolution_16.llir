; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = or disjoint i32 %17, 8, !dbg !13
  %19 = icmp slt i32 %16, 1536, !dbg !14
  %20 = icmp slt i32 %17, 1536, !dbg !14
  %21 = icmp slt i32 %18, 1536, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 4, !dbg !16
  %24 = lshr i32 %11, 3, !dbg !17
  %25 = and i32 %24, 15, !dbg !17
  %26 = and i32 %11, 15, !dbg !17
  %27 = or disjoint i32 %23, %25, !dbg !18
  %28 = or disjoint i32 %23, %26, !dbg !18
  %29 = icmp slt i32 %27, 9, !dbg !19
  %30 = icmp slt i32 %28, 9, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %31 = sdiv i32 %.frozen, 384, !dbg !20
  %32 = mul i32 %31, 384, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %33 = icmp slt i32 %.decomposed, 192, !dbg !22
  %34 = mul i32 %27, 192, !dbg !23
  %35 = mul i32 %31, 1728, !dbg !24
  %36 = add i32 %34, %35, !dbg !25
  %37 = add i32 %36, %.decomposed, !dbg !26
  %38 = sext i32 %37 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = and i1 %33, %29, !dbg !28
  %41 = and i1 %19, %40, !dbg !29
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #2, !dbg !30
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !30
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !30
  %45 = sext i32 %.decomposed to i64, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !31
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #2, !dbg !32
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !32
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !32
  %50 = icmp sgt i32 %.decomposed, 191, !dbg !33
  %51 = add nsw i32 %.decomposed, -192, !dbg !34
  %52 = add i32 %36, %51, !dbg !35
  %53 = sext i32 %52 to i64, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !36
  %55 = and i1 %50, %29, !dbg !37
  %56 = and i1 %19, %55, !dbg !38
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #2, !dbg !39
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !39
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !39
  %60 = sext i32 %51 to i64, !dbg !40
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !40
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #2, !dbg !41
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !41
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !41
  %65 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !39
  %66 = insertelement <4 x i32> %65, i32 %58, i64 1, !dbg !39
  %67 = insertelement <4 x i32> %66, i32 %44, i64 2, !dbg !39
  %68 = insertelement <4 x i32> %67, i32 %43, i64 3, !dbg !39
  %69 = bitcast <4 x i32> %68 to <4 x float>, !dbg !39
  %70 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !41
  %71 = insertelement <4 x i32> %70, i32 %63, i64 1, !dbg !41
  %72 = insertelement <4 x i32> %71, i32 %49, i64 2, !dbg !41
  %73 = insertelement <4 x i32> %72, i32 %48, i64 3, !dbg !41
  %74 = bitcast <4 x i32> %73 to <4 x float>, !dbg !41
  %75 = fadd <4 x float> %69, %74, !dbg !42
  %76 = fcmp olt <4 x float> %75, zeroinitializer, !dbg !43
  %77 = extractelement <4 x i1> %76, i64 3, !dbg !47
  %78 = extractelement <4 x float> %75, i64 3, !dbg !47
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !47
  %80 = extractelement <4 x i1> %76, i64 2, !dbg !47
  %81 = extractelement <4 x float> %75, i64 2, !dbg !47
  %82 = select i1 %80, float 0.000000e+00, float %81, !dbg !47
  %83 = extractelement <4 x i1> %76, i64 1, !dbg !49
  %84 = extractelement <4 x float> %75, i64 1, !dbg !49
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !49
  %86 = extractelement <4 x i1> %76, i64 0, !dbg !49
  %87 = extractelement <4 x float> %75, i64 0, !dbg !49
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !49
  %89 = select i1 %33, float %79, float %85, !dbg !50
  %90 = select i1 %33, float %82, float %88, !dbg !50
  %91 = mul i32 %17, 9, !dbg !51
  %92 = mul i32 %18, 9, !dbg !51
  %93 = add i32 %28, %91, !dbg !52
  %94 = add i32 %28, %92, !dbg !52
  %95 = sext i32 %93 to i64, !dbg !53
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !53
  %97 = sext i32 %94 to i64, !dbg !53
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %97, !dbg !53
  %99 = and i1 %20, %30, !dbg !54
  %100 = and i1 %21, %30, !dbg !54
  %101 = and i1 %19, %29, !dbg !54
  %102 = shl i32 %11, 5, !dbg !55
  %103 = and i32 %102, 224, !dbg !55
  %104 = or disjoint i32 %103, %25, !dbg !55
  %105 = and i32 %11, 127, !dbg !55
  %106 = lshr exact i32 %103, 2, !dbg !55
  %107 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %106, !dbg !55
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %104, !dbg !55
  %109 = bitcast float %89 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !55
  %110 = or disjoint i32 %104, 16, !dbg !55
  %111 = lshr i32 %110, 4, !dbg !55
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !55
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !55
  %114 = bitcast float %90 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %115 = lshr i32 %105, 4, !dbg !55
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !55
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %105, !dbg !55
  %118 = load i32, ptr addrspace(3) %117, align 4, !dbg !55
  %119 = or disjoint i32 %105, 128, !dbg !55
  %120 = lshr i32 %119, 4, !dbg !55
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !55
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %119, !dbg !55
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %96, i1 %99) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %98, i1 %100) #2, !dbg !55
  %124 = mul i32 %27, 384, !dbg !56
  %125 = add i32 %124, %.decomposed, !dbg !57
  %126 = mul i32 %31, 3456, !dbg !58
  %127 = add i32 %125, %126, !dbg !59
  %128 = sext i32 %127 to i64, !dbg !60
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %128, !dbg !60
  %130 = bitcast float %89 to i32, !dbg !61
  %131 = bitcast float %90 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %130, i32 %131, ptr addrspace(1) %129, i1 %101) #2, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py", directory: "inductor_cache/2v")
!4 = !{ptr @triton_poi_fused_cat_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_16", linkageName: "triton_poi_fused_cat_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 44, scope: !7)
!25 = !DILocation(line: 37, column: 39, scope: !7)
!26 = !DILocation(line: 37, column: 50, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 63, scope: !7)
!29 = !DILocation(line: 37, column: 71, scope: !7)
!30 = !DILocation(line: 37, column: 56, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 70, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 60, scope: !7)
!35 = !DILocation(line: 47, column: 51, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 74, scope: !7)
!38 = !DILocation(line: 47, column: 82, scope: !7)
!39 = !DILocation(line: 47, column: 66, scope: !7)
!40 = !DILocation(line: 48, column: 31, scope: !7)
!41 = !DILocation(line: 48, column: 80, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !48)
!48 = !DILocation(line: 41, column: 40, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 0, scope: !7)
!51 = !DILocation(line: 55, column: 32, scope: !7)
!52 = !DILocation(line: 55, column: 30, scope: !7)
!53 = !DILocation(line: 55, column: 25, scope: !7)
!54 = !DILocation(line: 55, column: 52, scope: !7)
!55 = !DILocation(line: 55, column: 44, scope: !7)
!56 = !DILocation(line: 56, column: 34, scope: !7)
!57 = !DILocation(line: 56, column: 30, scope: !7)
!58 = !DILocation(line: 56, column: 44, scope: !7)
!59 = !DILocation(line: 56, column: 39, scope: !7)
!60 = !DILocation(line: 56, column: 25, scope: !7)
!61 = !DILocation(line: 56, column: 56, scope: !7)
!62 = !DILocation(line: 56, column: 4, scope: !7)
