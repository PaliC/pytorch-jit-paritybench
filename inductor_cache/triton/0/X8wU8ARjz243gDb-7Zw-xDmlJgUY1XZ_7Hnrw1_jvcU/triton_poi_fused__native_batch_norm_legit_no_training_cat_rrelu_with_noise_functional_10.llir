; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = or disjoint i32 %15, 2, !dbg !13
  %18 = or disjoint i32 %15, 3, !dbg !13
  %19 = insertelement <4 x i32> poison, i32 %18, i64 0, !dbg !14
  %20 = insertelement <4 x i32> %19, i32 %17, i64 1, !dbg !14
  %21 = insertelement <4 x i32> %20, i32 %16, i64 2, !dbg !14
  %22 = insertelement <4 x i32> %21, i32 %15, i64 3, !dbg !14
  %23 = srem <4 x i32> %22, splat (i32 16), !dbg !14
  %24 = sdiv i32 %15, 16, !dbg !15
  %25 = srem i32 %24, 32, !dbg !16
  %26 = sdiv i32 %15, 512, !dbg !17
  %27 = extractelement <4 x i32> %23, i64 3, !dbg !18
  %28 = sext i32 %27 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !26
  %45 = icmp slt <4 x i32> %23, splat (i32 13), !dbg !27
  %46 = mul nsw i32 %24, 13, !dbg !28
  %47 = add nsw i32 %46, %27, !dbg !29
  %48 = extractelement <4 x i32> %23, i64 2, !dbg !18
  %49 = add nsw i32 %46, %48, !dbg !29
  %50 = extractelement <4 x i32> %23, i64 1, !dbg !18
  %51 = add nsw i32 %46, %50, !dbg !29
  %52 = extractelement <4 x i32> %23, i64 0, !dbg !18
  %53 = add nsw i32 %46, %52, !dbg !29
  %54 = sext i32 %47 to i64, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !30
  %56 = sext i32 %49 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !30
  %58 = sext i32 %51 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !30
  %60 = sext i32 %53 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !30
  %62 = extractelement <4 x i1> %45, i64 3, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %62, i32 0, i1 %62) #3, !dbg !31
  %64 = extractelement <4 x i1> %45, i64 2, !dbg !31
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %64, i32 0, i1 %64) #3, !dbg !31
  %66 = extractelement <4 x i1> %45, i64 1, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %66, i32 0, i1 %66) #3, !dbg !31
  %68 = extractelement <4 x i1> %45, i64 0, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %68, i32 0, i1 %68) #3, !dbg !31
  %70 = icmp sgt i32 %27, 12, !dbg !18
  %71 = icmp sgt i32 %48, 12, !dbg !18
  %72 = icmp sgt i32 %50, 12, !dbg !18
  %73 = icmp sgt i32 %52, 12, !dbg !18
  %74 = mul nsw i32 %25, 6, !dbg !32
  %75 = mul nsw i32 %26, 384, !dbg !33
  %76 = add nsw i32 %74, %75, !dbg !34
  %77 = add nsw i32 %27, -13, !dbg !35
  %78 = add nsw i32 %48, -13, !dbg !35
  %79 = add nsw i32 %50, -13, !dbg !35
  %80 = add nsw i32 %52, -13, !dbg !35
  %81 = add nsw i32 %76, %77, !dbg !36
  %82 = add nsw i32 %76, %78, !dbg !36
  %83 = add nsw i32 %76, %79, !dbg !36
  %84 = add nsw i32 %76, %80, !dbg !36
  %85 = sext i32 %81 to i64, !dbg !37
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !37
  %87 = sext i32 %82 to i64, !dbg !37
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !37
  %89 = sext i32 %83 to i64, !dbg !37
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !37
  %91 = sext i32 %84 to i64, !dbg !37
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !37
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %70, i32 0, i1 %70) #3, !dbg !38
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %71, i32 0, i1 %71) #3, !dbg !38
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %72, i32 0, i1 %72) #3, !dbg !38
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %73, i32 0, i1 %73) #3, !dbg !38
  %97 = add nsw i32 %76, 3, !dbg !39
  %98 = add nsw i32 %97, %77, !dbg !40
  %99 = add nsw i32 %97, %78, !dbg !40
  %100 = add nsw i32 %97, %79, !dbg !40
  %101 = add nsw i32 %97, %80, !dbg !40
  %102 = sext i32 %98 to i64, !dbg !41
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !41
  %104 = sext i32 %99 to i64, !dbg !41
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !41
  %106 = sext i32 %100 to i64, !dbg !41
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !41
  %108 = sext i32 %101 to i64, !dbg !41
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !41
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %70, i32 0, i1 %70) #3, !dbg !42
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %71, i32 0, i1 %71) #3, !dbg !42
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %72, i32 0, i1 %72) #3, !dbg !42
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %73, i32 0, i1 %73) #3, !dbg !42
  %114 = add nsw i32 %76, 192, !dbg !43
  %115 = add nsw i32 %114, %77, !dbg !44
  %116 = add nsw i32 %114, %78, !dbg !44
  %117 = add nsw i32 %114, %79, !dbg !44
  %118 = add nsw i32 %114, %80, !dbg !44
  %119 = sext i32 %115 to i64, !dbg !45
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !45
  %121 = sext i32 %116 to i64, !dbg !45
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !45
  %123 = sext i32 %117 to i64, !dbg !45
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !45
  %125 = sext i32 %118 to i64, !dbg !45
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !45
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %70, i32 0, i1 %70) #3, !dbg !46
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %71, i32 0, i1 %71) #3, !dbg !46
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %72, i32 0, i1 %72) #3, !dbg !46
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %73, i32 0, i1 %73) #3, !dbg !46
  %131 = add nsw i32 %76, 195, !dbg !47
  %132 = add nsw i32 %131, %77, !dbg !48
  %133 = add nsw i32 %131, %78, !dbg !48
  %134 = add nsw i32 %131, %79, !dbg !48
  %135 = add nsw i32 %131, %80, !dbg !48
  %136 = sext i32 %132 to i64, !dbg !49
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !49
  %138 = sext i32 %133 to i64, !dbg !49
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !49
  %140 = sext i32 %134 to i64, !dbg !49
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !49
  %142 = sext i32 %135 to i64, !dbg !49
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !49
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %70, i32 0, i1 %70) #3, !dbg !50
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %71, i32 0, i1 %71) #3, !dbg !50
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %72, i32 0, i1 %72) #3, !dbg !50
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %73, i32 0, i1 %73) #3, !dbg !50
  %148 = fadd float %37, 0x3EE4F8B580000000, !dbg !51
  %149 = fadd float %38, 0x3EE4F8B580000000, !dbg !51
  %150 = fadd float %39, 0x3EE4F8B580000000, !dbg !51
  %151 = fadd float %40, 0x3EE4F8B580000000, !dbg !51
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i = icmp eq i32 %152, 0, !dbg !52
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i = icmp eq i32 %153, 0, !dbg !52
  br i1 %.not.i, label %159, label %154, !dbg !52

154:                                              ; preds = %9
  br i1 %.not1.i, label %157, label %155, !dbg !52

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

159:                                              ; preds = %9
  br i1 %.not1.i, label %162, label %160, !dbg !52

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

__nv_sqrtf.exit:                                  ; preds = %155, %157, %160, %162
  %.0.i = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !52
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %164, 0, !dbg !52
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i4 = icmp eq i32 %165, 0, !dbg !52
  br i1 %.not.i1, label %171, label %166, !dbg !52

166:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %169, label %167, !dbg !52

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

171:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %174, label %172, !dbg !52

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

__nv_sqrtf.exit5:                                 ; preds = %167, %169, %172, %174
  %.0.i3 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !52
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i6 = icmp eq i32 %176, 0, !dbg !52
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i9 = icmp eq i32 %177, 0, !dbg !52
  br i1 %.not.i6, label %183, label %178, !dbg !52

178:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %181, label %179, !dbg !52

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

183:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %186, label %184, !dbg !52

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

__nv_sqrtf.exit10:                                ; preds = %179, %181, %184, %186
  %.0.i8 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !52
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i11 = icmp eq i32 %188, 0, !dbg !52
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i14 = icmp eq i32 %189, 0, !dbg !52
  br i1 %.not.i11, label %195, label %190, !dbg !52

190:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %193, label %191, !dbg !52

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

195:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %198, label %196, !dbg !52

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

__nv_sqrtf.exit15:                                ; preds = %191, %193, %196, %198
  %.0.i13 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !52
  %200 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !31
  %201 = insertelement <4 x i32> %200, i32 %67, i64 1, !dbg !31
  %202 = insertelement <4 x i32> %201, i32 %65, i64 2, !dbg !31
  %203 = insertelement <4 x i32> %202, i32 %63, i64 3, !dbg !31
  %204 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !42
  %205 = insertelement <4 x i32> %204, i32 %112, i64 1, !dbg !42
  %206 = insertelement <4 x i32> %205, i32 %111, i64 2, !dbg !42
  %207 = insertelement <4 x i32> %206, i32 %110, i64 3, !dbg !42
  %208 = bitcast <4 x i32> %207 to <4 x float>, !dbg !42
  %209 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !38
  %210 = insertelement <4 x i32> %209, i32 %95, i64 1, !dbg !38
  %211 = insertelement <4 x i32> %210, i32 %94, i64 2, !dbg !38
  %212 = insertelement <4 x i32> %211, i32 %93, i64 3, !dbg !38
  %213 = bitcast <4 x i32> %212 to <4 x float>, !dbg !38
  %214 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !46
  %215 = insertelement <4 x i32> %214, i32 %129, i64 1, !dbg !46
  %216 = insertelement <4 x i32> %215, i32 %128, i64 2, !dbg !46
  %217 = insertelement <4 x i32> %216, i32 %127, i64 3, !dbg !46
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !46
  %219 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !50
  %220 = insertelement <4 x i32> %219, i32 %146, i64 1, !dbg !50
  %221 = insertelement <4 x i32> %220, i32 %145, i64 2, !dbg !50
  %222 = insertelement <4 x i32> %221, i32 %144, i64 3, !dbg !50
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !50
  %224 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %225 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %226 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %227 = fcmp ogt <4 x float> %208, %213, !dbg !53
  %228 = fcmp uno <4 x float> %208, zeroinitializer, !dbg !57
  %229 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %230 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %231 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %232 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %233 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %234 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %235 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %236 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %237 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !58
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !58
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !58
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !58
  %242 = or <4 x i1> %227, %228, !dbg !59
  %.v = select <4 x i1> %242, <4 x i32> %207, <4 x i32> %212, !dbg !60
  %243 = bitcast <4 x i32> %.v to <4 x float>, !dbg !60
  %244 = fcmp olt <4 x float> %243, %218, !dbg !61
  %245 = fcmp uno <4 x float> %218, zeroinitializer, !dbg !63
  %246 = or <4 x i1> %244, %245, !dbg !64
  %.v16 = select <4 x i1> %246, <4 x i32> %217, <4 x i32> %.v, !dbg !65
  %247 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !65
  %248 = fcmp olt <4 x float> %247, %223, !dbg !66
  %249 = fcmp uno <4 x float> %223, zeroinitializer, !dbg !68
  %250 = or <4 x i1> %248, %249, !dbg !69
  %.v17 = select <4 x i1> %250, <4 x i32> %222, <4 x i32> %.v16, !dbg !70
  %.v18 = select <4 x i1> %45, <4 x i32> %203, <4 x i32> %.v17, !dbg !71
  %251 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !71
  %252 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !20
  %253 = insertelement <4 x i32> %252, i32 %225, i64 1, !dbg !20
  %254 = insertelement <4 x i32> %253, i32 %226, i64 2, !dbg !20
  %255 = insertelement <4 x i32> %254, i32 %229, i64 3, !dbg !20
  %256 = bitcast <4 x i32> %255 to <4 x float>, !dbg !20
  %257 = fsub <4 x float> %251, %256, !dbg !72
  %258 = insertelement <4 x i32> poison, i32 %230, i64 0, !dbg !26
  %259 = insertelement <4 x i32> %258, i32 %231, i64 1, !dbg !26
  %260 = insertelement <4 x i32> %259, i32 %232, i64 2, !dbg !26
  %261 = insertelement <4 x i32> %260, i32 %233, i64 3, !dbg !26
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !26
  %263 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !24
  %264 = insertelement <4 x i32> %263, i32 %235, i64 1, !dbg !24
  %265 = insertelement <4 x i32> %264, i32 %236, i64 2, !dbg !24
  %266 = insertelement <4 x i32> %265, i32 %237, i64 3, !dbg !24
  %267 = bitcast <4 x i32> %266 to <4 x float>, !dbg !24
  %268 = insertelement <4 x float> poison, float %241, i64 0, !dbg !73
  %269 = insertelement <4 x float> %268, float %240, i64 1, !dbg !73
  %270 = insertelement <4 x float> %269, float %239, i64 2, !dbg !73
  %271 = insertelement <4 x float> %270, float %238, i64 3, !dbg !73
  %272 = fmul <4 x float> %257, %271, !dbg !73
  %273 = fmul <4 x float> %272, %267, !dbg !74
  %274 = fadd <4 x float> %273, %262, !dbg !75
  %275 = fcmp ogt <4 x float> %274, zeroinitializer, !dbg !76
  %276 = extractelement <4 x float> %274, i64 3, !dbg !77
  %277 = fmul float %276, 0x3FCD555560000000, !dbg !78
  %278 = extractelement <4 x float> %274, i64 2, !dbg !77
  %279 = fmul float %278, 0x3FCD555560000000, !dbg !78
  %280 = extractelement <4 x float> %274, i64 1, !dbg !77
  %281 = fmul float %280, 0x3FCD555560000000, !dbg !78
  %282 = extractelement <4 x float> %274, i64 0, !dbg !77
  %283 = fmul float %282, 0x3FCD555560000000, !dbg !78
  %284 = extractelement <4 x i1> %275, i64 3, !dbg !77
  %285 = select i1 %284, float %276, float %277, !dbg !77
  %286 = extractelement <4 x i1> %275, i64 2, !dbg !77
  %287 = select i1 %286, float %278, float %279, !dbg !77
  %288 = extractelement <4 x i1> %275, i64 1, !dbg !77
  %289 = select i1 %288, float %280, float %281, !dbg !77
  %290 = extractelement <4 x i1> %275, i64 0, !dbg !77
  %291 = select i1 %290, float %282, float %283, !dbg !77
  %292 = sext i32 %15 to i64, !dbg !79
  %293 = getelementptr float, ptr addrspace(1) %7, i64 %292, !dbg !79
  %294 = extractelement <4 x i32> %.v18, i64 3, !dbg !80
  %295 = extractelement <4 x i32> %.v18, i64 2, !dbg !80
  %296 = extractelement <4 x i32> %.v18, i64 1, !dbg !80
  %297 = extractelement <4 x i32> %.v18, i64 0, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %295, i32 %296, i32 %297, ptr addrspace(1) %293, i1 true) #3, !dbg !80
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %292, !dbg !81
  %299 = bitcast float %285 to i32, !dbg !82
  %300 = bitcast float %287 to i32, !dbg !82
  %301 = bitcast float %289 to i32, !dbg !82
  %302 = bitcast float %291 to i32, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %299, i32 %300, i32 %301, i32 %302, ptr addrspace(1) %298, i1 true) #3, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "colh2mnjsgodft76d6d4kcv4eaev52ws44riozuoxgkie7zuhz67.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 33, scope: !7)
!29 = !DILocation(line: 38, column: 39, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 45, scope: !7)
!32 = !DILocation(line: 42, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 41, scope: !7)
!34 = !DILocation(line: 42, column: 37, scope: !7)
!35 = !DILocation(line: 42, column: 55, scope: !7)
!36 = !DILocation(line: 42, column: 47, scope: !7)
!37 = !DILocation(line: 42, column: 30, scope: !7)
!38 = !DILocation(line: 42, column: 61, scope: !7)
!39 = !DILocation(line: 43, column: 42, scope: !7)
!40 = !DILocation(line: 43, column: 52, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 66, scope: !7)
!43 = !DILocation(line: 45, column: 44, scope: !7)
!44 = !DILocation(line: 45, column: 54, scope: !7)
!45 = !DILocation(line: 45, column: 31, scope: !7)
!46 = !DILocation(line: 45, column: 68, scope: !7)
!47 = !DILocation(line: 47, column: 44, scope: !7)
!48 = !DILocation(line: 47, column: 54, scope: !7)
!49 = !DILocation(line: 47, column: 31, scope: !7)
!50 = !DILocation(line: 47, column: 68, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 27, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 44, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 57, column: 20, scope: !7)
!59 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !56)
!60 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!61 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !62)
!62 = !DILocation(line: 46, column: 42, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !62)
!66 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !67)
!67 = !DILocation(line: 48, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !67)
!71 = !DILocation(line: 51, column: 33, scope: !7)
!72 = !DILocation(line: 52, column: 20, scope: !7)
!73 = !DILocation(line: 60, column: 20, scope: !7)
!74 = !DILocation(line: 61, column: 20, scope: !7)
!75 = !DILocation(line: 62, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 67, column: 35, scope: !7)
!78 = !DILocation(line: 66, column: 20, scope: !7)
!79 = !DILocation(line: 68, column: 25, scope: !7)
!80 = !DILocation(line: 68, column: 37, scope: !7)
!81 = !DILocation(line: 69, column: 28, scope: !7)
!82 = !DILocation(line: 69, column: 40, scope: !7)
!83 = !DILocation(line: 69, column: 4, scope: !7)
