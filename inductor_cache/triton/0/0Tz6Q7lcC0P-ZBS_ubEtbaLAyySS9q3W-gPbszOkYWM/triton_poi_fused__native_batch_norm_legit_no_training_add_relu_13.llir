; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %14, 64, !dbg !12
  %16 = or disjoint i32 %14, 128, !dbg !12
  %17 = or disjoint i32 %14, 192, !dbg !12
  %18 = shl i32 %12, 2, !dbg !12
  %19 = and i32 %18, 12, !dbg !12
  %20 = or disjoint i32 %11, %14, !dbg !13
  %21 = or disjoint i32 %11, %15, !dbg !13
  %22 = or disjoint i32 %11, %16, !dbg !13
  %23 = or disjoint i32 %11, %17, !dbg !13
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %25 = shl i32 %24, 4, !dbg !15
  %26 = or disjoint i32 %25, %19, !dbg !16
  %27 = icmp slt i32 %26, 64, !dbg !17
  %28 = shl i32 %20, 6, !dbg !18
  %29 = shl i32 %21, 6, !dbg !18
  %30 = shl i32 %22, 6, !dbg !18
  %31 = shl i32 %23, 6, !dbg !18
  %32 = add i32 %26, %28, !dbg !19
  %33 = add i32 %26, %29, !dbg !19
  %34 = add i32 %26, %30, !dbg !19
  %35 = add i32 %26, %31, !dbg !19
  %36 = sext i32 %32 to i64, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !20
  %38 = sext i32 %33 to i64, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !20
  %40 = sext i32 %34 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = sext i32 %35 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %27) #4, !dbg !21
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %27) #4, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %27) #4, !dbg !21
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %27) #4, !dbg !21
  %48 = sext i32 %26 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !22
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %27) #4, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %27) #4, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %27) #4, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !28
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %27) #4, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !30
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %27) #4, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %27) #4, !dbg !31
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %27) #4, !dbg !31
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %27) #4, !dbg !31
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !32
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !32
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !32
  %76 = fadd float %60, 0x3EE4F8B580000000, !dbg !32
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %77, 0, !dbg !33
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %78, 0, !dbg !33
  br i1 %.not.i, label %84, label %79, !dbg !33

79:                                               ; preds = %9
  br i1 %.not1.i, label %82, label %80, !dbg !33

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

84:                                               ; preds = %9
  br i1 %.not1.i, label %87, label %85, !dbg !33

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !33
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i33 = icmp eq i32 %89, 0, !dbg !33
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i36 = icmp eq i32 %90, 0, !dbg !33
  br i1 %.not.i33, label %96, label %91, !dbg !33

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %94, label %92, !dbg !33

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %99, label %97, !dbg !33

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

__nv_sqrtf.exit37:                                ; preds = %92, %94, %97, %99
  %.0.i35 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !33
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i38 = icmp eq i32 %101, 0, !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i41 = icmp eq i32 %102, 0, !dbg !33
  br i1 %.not.i38, label %108, label %103, !dbg !33

103:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %106, label %104, !dbg !33

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

108:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %111, label %109, !dbg !33

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

__nv_sqrtf.exit42:                                ; preds = %104, %106, %109, %111
  %.0.i40 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !33
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i43 = icmp eq i32 %113, 0, !dbg !33
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i46 = icmp eq i32 %114, 0, !dbg !33
  br i1 %.not.i43, label %120, label %115, !dbg !33

115:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %118, label %116, !dbg !33

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

120:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %123, label %121, !dbg !33

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

__nv_sqrtf.exit47:                                ; preds = %116, %118, %121, %123
  %.0.i45 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !21
  %126 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !23
  %127 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !21
  %128 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !23
  %129 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !21
  %130 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !23
  %131 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !21
  %132 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !23
  %133 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %134 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %135 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %136 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %137 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %138 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %139 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %140 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %141 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !21
  %142 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !21
  %143 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !21
  %144 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !21
  %145 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !31
  %146 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !31
  %147 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !31
  %148 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !31
  %149 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !31
  %150 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !31
  %151 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !31
  %152 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !31
  %153 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !31
  %154 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !31
  %155 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !31
  %156 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !31
  %157 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !31
  %158 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !31
  %159 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !31
  %160 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !31
  %161 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !29
  %162 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !29
  %163 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !29
  %164 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !29
  %165 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !27
  %166 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !27
  %167 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !27
  %168 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !27
  %169 = and i32 %18, 252, !dbg !12
  %170 = or disjoint i32 %11, %169, !dbg !13
  %.frozen = freeze i32 %170, !dbg !34
  %171 = sdiv i32 %.frozen, 256, !dbg !34
  %172 = mul i32 %171, 256, !dbg !35
  %.decomposed = sub i32 %.frozen, %172, !dbg !35
  %.lobit12 = lshr i32 %12, 6, !dbg !36
  %173 = and i32 %.lobit12, 3, !dbg !36
  %174 = or disjoint i32 %173, %25, !dbg !16
  %175 = or disjoint i32 %174, 12, !dbg !16
  %176 = icmp slt i32 %175, 64, !dbg !17
  %177 = or disjoint i32 %174, 8, !dbg !16
  %178 = icmp slt i32 %177, 64, !dbg !17
  %179 = or disjoint i32 %174, 4, !dbg !16
  %180 = icmp slt i32 %179, 64, !dbg !17
  %181 = icmp slt i32 %174, 64, !dbg !17
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !37
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !37
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !37
  %186 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !23
  %187 = insertelement <4 x i32> %186, i32 %128, i64 1, !dbg !23
  %188 = insertelement <4 x i32> %187, i32 %130, i64 2, !dbg !23
  %189 = insertelement <4 x i32> %188, i32 %132, i64 3, !dbg !23
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !23
  %191 = shufflevector <4 x float> %190, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %192 = insertelement <16 x i32> poison, i32 %125, i64 0, !dbg !21
  %193 = insertelement <16 x i32> %192, i32 %127, i64 1, !dbg !21
  %194 = insertelement <16 x i32> %193, i32 %129, i64 2, !dbg !21
  %195 = insertelement <16 x i32> %194, i32 %131, i64 3, !dbg !21
  %196 = insertelement <16 x i32> %195, i32 %133, i64 4, !dbg !21
  %197 = insertelement <16 x i32> %196, i32 %134, i64 5, !dbg !21
  %198 = insertelement <16 x i32> %197, i32 %135, i64 6, !dbg !21
  %199 = insertelement <16 x i32> %198, i32 %136, i64 7, !dbg !21
  %200 = insertelement <16 x i32> %199, i32 %137, i64 8, !dbg !21
  %201 = insertelement <16 x i32> %200, i32 %138, i64 9, !dbg !21
  %202 = insertelement <16 x i32> %201, i32 %139, i64 10, !dbg !21
  %203 = insertelement <16 x i32> %202, i32 %140, i64 11, !dbg !21
  %204 = insertelement <16 x i32> %203, i32 %141, i64 12, !dbg !21
  %205 = insertelement <16 x i32> %204, i32 %142, i64 13, !dbg !21
  %206 = insertelement <16 x i32> %205, i32 %143, i64 14, !dbg !21
  %207 = insertelement <16 x i32> %206, i32 %144, i64 15, !dbg !21
  %208 = bitcast <16 x i32> %207 to <16 x float>, !dbg !21
  %209 = fsub <16 x float> %208, %191, !dbg !38
  %210 = insertelement <16 x i32> poison, i32 %145, i64 0, !dbg !31
  %211 = insertelement <16 x i32> %210, i32 %146, i64 1, !dbg !31
  %212 = insertelement <16 x i32> %211, i32 %147, i64 2, !dbg !31
  %213 = insertelement <16 x i32> %212, i32 %148, i64 3, !dbg !31
  %214 = insertelement <16 x i32> %213, i32 %149, i64 4, !dbg !31
  %215 = insertelement <16 x i32> %214, i32 %150, i64 5, !dbg !31
  %216 = insertelement <16 x i32> %215, i32 %151, i64 6, !dbg !31
  %217 = insertelement <16 x i32> %216, i32 %152, i64 7, !dbg !31
  %218 = insertelement <16 x i32> %217, i32 %153, i64 8, !dbg !31
  %219 = insertelement <16 x i32> %218, i32 %154, i64 9, !dbg !31
  %220 = insertelement <16 x i32> %219, i32 %155, i64 10, !dbg !31
  %221 = insertelement <16 x i32> %220, i32 %156, i64 11, !dbg !31
  %222 = insertelement <16 x i32> %221, i32 %157, i64 12, !dbg !31
  %223 = insertelement <16 x i32> %222, i32 %158, i64 13, !dbg !31
  %224 = insertelement <16 x i32> %223, i32 %159, i64 14, !dbg !31
  %225 = insertelement <16 x i32> %224, i32 %160, i64 15, !dbg !31
  %226 = bitcast <16 x i32> %225 to <16 x float>, !dbg !31
  %227 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !29
  %228 = insertelement <4 x i32> %227, i32 %162, i64 1, !dbg !29
  %229 = insertelement <4 x i32> %228, i32 %163, i64 2, !dbg !29
  %230 = insertelement <4 x i32> %229, i32 %164, i64 3, !dbg !29
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !29
  %232 = shufflevector <4 x float> %231, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %233 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !27
  %234 = insertelement <4 x i32> %233, i32 %166, i64 1, !dbg !27
  %235 = insertelement <4 x i32> %234, i32 %167, i64 2, !dbg !27
  %236 = insertelement <4 x i32> %235, i32 %168, i64 3, !dbg !27
  %237 = bitcast <4 x i32> %236 to <4 x float>, !dbg !27
  %238 = shufflevector <4 x float> %237, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %239 = insertelement <16 x float> poison, float %185, i64 0, !dbg !39
  %240 = insertelement <16 x float> %239, float %184, i64 1, !dbg !39
  %241 = insertelement <16 x float> %240, float %183, i64 2, !dbg !39
  %242 = insertelement <16 x float> %241, float %182, i64 3, !dbg !39
  %243 = shufflevector <16 x float> %242, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %244 = fmul <16 x float> %209, %243, !dbg !39
  %245 = fmul <16 x float> %244, %238, !dbg !40
  %246 = fadd <16 x float> %245, %232, !dbg !41
  %247 = fadd <16 x float> %246, %226, !dbg !42
  %248 = fcmp olt <16 x float> %247, zeroinitializer, !dbg !43
  %249 = extractelement <16 x i1> %248, i64 15, !dbg !47
  %250 = extractelement <16 x float> %247, i64 15, !dbg !47
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !47
  %252 = extractelement <16 x i1> %248, i64 14, !dbg !47
  %253 = extractelement <16 x float> %247, i64 14, !dbg !47
  %254 = select i1 %252, float 0.000000e+00, float %253, !dbg !47
  %255 = extractelement <16 x i1> %248, i64 13, !dbg !47
  %256 = extractelement <16 x float> %247, i64 13, !dbg !47
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !47
  %258 = extractelement <16 x i1> %248, i64 12, !dbg !47
  %259 = extractelement <16 x float> %247, i64 12, !dbg !47
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !47
  %261 = extractelement <16 x i1> %248, i64 11, !dbg !47
  %262 = extractelement <16 x float> %247, i64 11, !dbg !47
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !47
  %264 = extractelement <16 x i1> %248, i64 10, !dbg !47
  %265 = extractelement <16 x float> %247, i64 10, !dbg !47
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !47
  %267 = extractelement <16 x i1> %248, i64 9, !dbg !47
  %268 = extractelement <16 x float> %247, i64 9, !dbg !47
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !47
  %270 = extractelement <16 x i1> %248, i64 8, !dbg !47
  %271 = extractelement <16 x float> %247, i64 8, !dbg !47
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !47
  %273 = extractelement <16 x i1> %248, i64 7, !dbg !47
  %274 = extractelement <16 x float> %247, i64 7, !dbg !47
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !47
  %276 = extractelement <16 x i1> %248, i64 6, !dbg !47
  %277 = extractelement <16 x float> %247, i64 6, !dbg !47
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !47
  %279 = extractelement <16 x i1> %248, i64 5, !dbg !47
  %280 = extractelement <16 x float> %247, i64 5, !dbg !47
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !47
  %282 = extractelement <16 x i1> %248, i64 4, !dbg !47
  %283 = extractelement <16 x float> %247, i64 4, !dbg !47
  %284 = select i1 %282, float 0.000000e+00, float %283, !dbg !47
  %285 = extractelement <16 x i1> %248, i64 3, !dbg !47
  %286 = extractelement <16 x float> %247, i64 3, !dbg !47
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !47
  %288 = extractelement <16 x i1> %248, i64 2, !dbg !47
  %289 = extractelement <16 x float> %247, i64 2, !dbg !47
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !47
  %291 = extractelement <16 x i1> %248, i64 1, !dbg !47
  %292 = extractelement <16 x float> %247, i64 1, !dbg !47
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !47
  %294 = extractelement <16 x i1> %248, i64 0, !dbg !47
  %295 = extractelement <16 x float> %247, i64 0, !dbg !47
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !47
  %297 = shl i32 %174, 8, !dbg !48
  %298 = shl i32 %179, 8, !dbg !48
  %299 = shl i32 %177, 8, !dbg !48
  %300 = shl i32 %175, 8, !dbg !48
  %301 = shl i32 %171, 14, !dbg !49
  %302 = add i32 %301, %.decomposed, !dbg !50
  %303 = add i32 %302, %297, !dbg !51
  %304 = add i32 %302, %298, !dbg !51
  %305 = add i32 %302, %299, !dbg !51
  %306 = add i32 %302, %300, !dbg !51
  %307 = sext i32 %303 to i64, !dbg !52
  %308 = getelementptr float, ptr addrspace(1) %6, i64 %307, !dbg !52
  %309 = sext i32 %304 to i64, !dbg !52
  %310 = getelementptr float, ptr addrspace(1) %6, i64 %309, !dbg !52
  %311 = sext i32 %305 to i64, !dbg !52
  %312 = getelementptr float, ptr addrspace(1) %6, i64 %311, !dbg !52
  %313 = sext i32 %306 to i64, !dbg !52
  %314 = getelementptr float, ptr addrspace(1) %6, i64 %313, !dbg !52
  %315 = shl i32 %12, 10, !dbg !53
  %316 = and i32 %315, 3072, !dbg !53
  %317 = or disjoint i32 %316, %14, !dbg !53
  %318 = and i32 %18, 1020, !dbg !53
  %319 = lshr exact i32 %316, 4, !dbg !53
  %320 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %319, !dbg !53
  %321 = getelementptr float, ptr addrspace(3) %320, i32 %317, !dbg !53
  %322 = bitcast float %251 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !53
  %323 = or disjoint i32 %317, 256, !dbg !53
  %324 = lshr i32 %323, 6, !dbg !53
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i32 %324, !dbg !53
  %326 = getelementptr float, ptr addrspace(3) %325, i32 %323, !dbg !53
  %327 = bitcast float %254 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #4, !dbg !53
  %328 = or disjoint i32 %317, 512, !dbg !53
  %329 = lshr i32 %328, 6, !dbg !53
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %329, !dbg !53
  %331 = getelementptr float, ptr addrspace(3) %330, i32 %328, !dbg !53
  %332 = bitcast float %257 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #4, !dbg !53
  %333 = or disjoint i32 %317, 768, !dbg !53
  %334 = lshr i32 %333, 6, !dbg !53
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i32 %334, !dbg !53
  %336 = getelementptr float, ptr addrspace(3) %335, i32 %333, !dbg !53
  %337 = bitcast float %260 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #4, !dbg !53
  %338 = or disjoint i32 %317, 64, !dbg !53
  %339 = getelementptr float, ptr addrspace(3) %320, i32 %338, !dbg !53
  %340 = bitcast float %263 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !53
  %341 = or disjoint i32 %317, 320, !dbg !53
  %342 = lshr i32 %341, 6, !dbg !53
  %343 = and i32 %342, 52, !dbg !53
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i32 %343, !dbg !53
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %341, !dbg !53
  %346 = bitcast float %266 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #4, !dbg !53
  %347 = or disjoint i32 %317, 576, !dbg !53
  %348 = lshr i32 %347, 6, !dbg !53
  %349 = and i32 %348, 56, !dbg !53
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i32 %349, !dbg !53
  %351 = getelementptr float, ptr addrspace(3) %350, i32 %347, !dbg !53
  %352 = bitcast float %269 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 true) #4, !dbg !53
  %353 = or disjoint i32 %317, 832, !dbg !53
  %354 = lshr i32 %353, 6, !dbg !53
  %355 = and i32 %354, 60, !dbg !53
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %355, !dbg !53
  %357 = getelementptr float, ptr addrspace(3) %356, i32 %353, !dbg !53
  %358 = bitcast float %272 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 true) #4, !dbg !53
  %359 = or disjoint i32 %317, 128, !dbg !53
  %360 = getelementptr float, ptr addrspace(3) %320, i32 %359, !dbg !53
  %361 = bitcast float %275 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #4, !dbg !53
  %362 = or disjoint i32 %317, 384, !dbg !53
  %363 = lshr i32 %362, 6, !dbg !53
  %364 = and i32 %363, 52, !dbg !53
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i32 %364, !dbg !53
  %366 = getelementptr float, ptr addrspace(3) %365, i32 %362, !dbg !53
  %367 = bitcast float %278 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #4, !dbg !53
  %368 = or disjoint i32 %317, 640, !dbg !53
  %369 = lshr i32 %368, 6, !dbg !53
  %370 = and i32 %369, 56, !dbg !53
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i32 %370, !dbg !53
  %372 = getelementptr float, ptr addrspace(3) %371, i32 %368, !dbg !53
  %373 = bitcast float %281 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #4, !dbg !53
  %374 = or disjoint i32 %317, 896, !dbg !53
  %375 = lshr i32 %374, 6, !dbg !53
  %376 = and i32 %375, 60, !dbg !53
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i32 %376, !dbg !53
  %378 = getelementptr float, ptr addrspace(3) %377, i32 %374, !dbg !53
  %379 = bitcast float %284 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #4, !dbg !53
  %380 = or disjoint i32 %317, 192, !dbg !53
  %381 = getelementptr float, ptr addrspace(3) %320, i32 %380, !dbg !53
  %382 = bitcast float %287 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !53
  %383 = or disjoint i32 %317, 448, !dbg !53
  %384 = lshr i32 %383, 6, !dbg !53
  %385 = and i32 %384, 52, !dbg !53
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i32 %385, !dbg !53
  %387 = getelementptr float, ptr addrspace(3) %386, i32 %383, !dbg !53
  %388 = bitcast float %290 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 true) #4, !dbg !53
  %389 = or disjoint i32 %317, 704, !dbg !53
  %390 = lshr i32 %389, 6, !dbg !53
  %391 = and i32 %390, 56, !dbg !53
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i32 %391, !dbg !53
  %393 = getelementptr float, ptr addrspace(3) %392, i32 %389, !dbg !53
  %394 = bitcast float %293 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #4, !dbg !53
  %395 = or disjoint i32 %317, 960, !dbg !53
  %396 = lshr i32 %395, 6, !dbg !53
  %397 = and i32 %396, 60, !dbg !53
  %398 = getelementptr float, ptr addrspace(3) @global_smem, i32 %397, !dbg !53
  %399 = getelementptr float, ptr addrspace(3) %398, i32 %395, !dbg !53
  %400 = bitcast float %296 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %401 = lshr i32 %18, 6, !dbg !53
  %402 = and i32 %401, 12, !dbg !53
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %402, !dbg !53
  %404 = getelementptr inbounds float, ptr addrspace(3) %403, i32 %318, !dbg !53
  %405 = or disjoint i32 %318, 1024, !dbg !53
  %406 = lshr i32 %405, 6, !dbg !53
  %407 = and i32 %406, 28, !dbg !53
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %407, !dbg !53
  %409 = getelementptr inbounds float, ptr addrspace(3) %408, i32 %405, !dbg !53
  %410 = load <4 x i32>, ptr addrspace(3) %409, align 16, !dbg !53
  %411 = or disjoint i32 %318, 2048, !dbg !53
  %412 = lshr i32 %411, 6, !dbg !53
  %413 = and i32 %412, 44, !dbg !53
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %413, !dbg !53
  %415 = getelementptr inbounds float, ptr addrspace(3) %414, i32 %411, !dbg !53
  %416 = load <4 x i32>, ptr addrspace(3) %415, align 16, !dbg !53
  %417 = or disjoint i32 %318, 3072, !dbg !53
  %418 = lshr i32 %417, 6, !dbg !53
  %419 = and i32 %418, 60, !dbg !53
  %420 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %419, !dbg !53
  %421 = getelementptr inbounds float, ptr addrspace(3) %420, i32 %417, !dbg !53
  %422 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !53
  %.extract = load i32, ptr addrspace(3) %404, align 16, !dbg !53
  %423 = getelementptr inbounds i8, ptr addrspace(3) %404, i32 4, !dbg !53
  %.extract18 = load i32, ptr addrspace(3) %423, align 4, !dbg !53
  %424 = getelementptr inbounds i8, ptr addrspace(3) %404, i32 8, !dbg !53
  %.extract19 = load i32, ptr addrspace(3) %424, align 8, !dbg !53
  %425 = getelementptr inbounds i8, ptr addrspace(3) %404, i32 12, !dbg !53
  %.extract20 = load i32, ptr addrspace(3) %425, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %308, i1 %181) #4, !dbg !53
  %.extract21 = extractelement <4 x i32> %410, i64 0, !dbg !53
  %.extract22 = extractelement <4 x i32> %410, i64 1, !dbg !53
  %.extract23 = extractelement <4 x i32> %410, i64 2, !dbg !53
  %.extract24 = extractelement <4 x i32> %410, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %310, i1 %180) #4, !dbg !53
  %.extract25 = extractelement <4 x i32> %416, i64 0, !dbg !53
  %.extract26 = extractelement <4 x i32> %416, i64 1, !dbg !53
  %.extract27 = extractelement <4 x i32> %416, i64 2, !dbg !53
  %.extract28 = extractelement <4 x i32> %416, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %312, i1 %178) #4, !dbg !53
  %.extract29 = extractelement <4 x i32> %422, i64 0, !dbg !53
  %.extract30 = extractelement <4 x i32> %422, i64 1, !dbg !53
  %.extract31 = extractelement <4 x i32> %422, i64 2, !dbg !53
  %.extract32 = extractelement <4 x i32> %422, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %314, i1 %176) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu7hnqas3znf5cy2dqstsxg63oag5cvtztrqozssehtdz2whgeoq.py", directory: "inductor_cache/u7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 44, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 26, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 30, column: 19, scope: !7)
!36 = !DILocation(line: 26, column: 44, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 52, column: 34, scope: !7)
!49 = !DILocation(line: 52, column: 45, scope: !7)
!50 = !DILocation(line: 52, column: 30, scope: !7)
!51 = !DILocation(line: 52, column: 39, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 52, column: 57, scope: !7)
!54 = !DILocation(line: 52, column: 4, scope: !7)
