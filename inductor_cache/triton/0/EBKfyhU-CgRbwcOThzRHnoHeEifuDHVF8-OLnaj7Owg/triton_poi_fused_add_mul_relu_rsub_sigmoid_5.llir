; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_relu_rsub_sigmoid_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 1, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = and i32 %11, 16, !dbg !12
  %15 = lshr exact i32 %14, 1, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = and i32 %11, 1, !dbg !12
  %18 = and i32 %11, 15, !dbg !12
  %19 = or disjoint i32 %16, %10, !dbg !13
  %20 = or disjoint i32 %10, %18, !dbg !13
  %21 = icmp slt i32 %19, 16, !dbg !14
  %22 = icmp slt i32 %20, 16, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 1, !dbg !16
  %.lobit2 = lshr exact i32 %14, 4, !dbg !17
  %25 = or disjoint i32 %24, %17, !dbg !18
  %26 = or disjoint i32 %24, %.lobit2, !dbg !18
  %27 = icmp slt i32 %25, 4, !dbg !19
  %28 = icmp slt i32 %26, 4, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %29 = sdiv i32 %.frozen, 4, !dbg !20
  %30 = mul i32 %29, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = shl i32 %19, 2, !dbg !22
  %32 = add i32 %25, %31, !dbg !23
  %33 = sext i32 %32 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = and i1 %21, %27, !dbg !25
  %36 = and i1 %22, %28, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %35) #2, !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = sext i32 %25 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %27) #2, !dbg !28
  %42 = bitcast i32 %41 to float, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %35) #2, !dbg !30
  %45 = bitcast i32 %44 to float, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %27) #2, !dbg !32
  %48 = bitcast i32 %47 to float, !dbg !32
  %49 = shl i32 %26, 2, !dbg !33
  %50 = add i32 %49, %.decomposed, !dbg !34
  %51 = shl i32 %29, 4, !dbg !35
  %52 = add i32 %50, %51, !dbg !36
  %53 = sext i32 %52 to i64, !dbg !37
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %36) #2, !dbg !38
  %56 = bitcast i32 %55 to float, !dbg !38
  %57 = fadd float %38, %42, !dbg !39
  %58 = fsub float 0.000000e+00, %57, !dbg !40
  %59 = fmul float %58, 0x3FF7154760000000, !dbg !44
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #2, !dbg !44
  %61 = fadd float %60, 1.000000e+00, !dbg !45
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %61) #2, !dbg !46
  %63 = fadd float %45, %48, !dbg !47
  %64 = fcmp olt float %63, 0.000000e+00, !dbg !48
  %65 = select i1 %64, float 0.000000e+00, float %63, !dbg !52
  %66 = fmul float %62, %65, !dbg !53
  %67 = shl nuw nsw i32 %17, 4, !dbg !53
  %68 = or disjoint i32 %67, %13, !dbg !53
  %69 = or disjoint i32 %68, %15, !dbg !53
  %70 = and i32 %11, 31, !dbg !53
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !53
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %69, !dbg !53
  %73 = bitcast float %66 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %74 = lshr i32 %70, 4, !dbg !53
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74, !dbg !53
  %76 = getelementptr inbounds float, ptr addrspace(3) %75, i32 %70, !dbg !53
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !53
  %78 = fsub float 1.000000e+00, %62, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %79 = bitcast float %78 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %79, i1 true) #2, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %80 = load float, ptr addrspace(3) %76, align 4, !dbg !54
  %81 = fmul float %80, %56, !dbg !55
  %82 = fadd float %77, %81, !dbg !56
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %84 = shl i32 %11, 1, !dbg !58
  %85 = and i32 %84, 30, !dbg !58
  %86 = or disjoint i32 %85, %.lobit2, !dbg !58
  %87 = lshr exact i32 %85, 1, !dbg !58
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !58
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %86, !dbg !58
  %90 = bitcast float %82 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %91 = lshr i32 %70, 1, !dbg !58
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !58
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %70, !dbg !58
  %94 = load i32, ptr addrspace(3) %93, align 4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %83, i1 %35) #2, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjtknelayxaqtqtpatn66ffas43iylg4rmozrwltnan77kuxry4e.py", directory: "inductor_cache/jt")
!4 = !{ptr @triton_poi_fused_add_mul_relu_rsub_sigmoid_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_relu_rsub_sigmoid_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_relu_rsub_sigmoid_5", linkageName: "triton_poi_fused_add_mul_relu_rsub_sigmoid_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 42, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 38, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 46, scope: !7)
!36 = !DILocation(line: 36, column: 43, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 51, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 38, column: 22, scope: !7)
!44 = !DILocation(line: 47, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 47, column: 20, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 47, column: 16, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 41, column: 40, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 44, column: 20, scope: !7)
!55 = !DILocation(line: 45, column: 20, scope: !7)
!56 = !DILocation(line: 46, column: 19, scope: !7)
!57 = !DILocation(line: 47, column: 25, scope: !7)
!58 = !DILocation(line: 47, column: 44, scope: !7)
!59 = !DILocation(line: 47, column: 4, scope: !7)
