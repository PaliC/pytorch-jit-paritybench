//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_per_fused__native_batch_norm_legit_24 // -- Begin function triton_per_fused__native_batch_norm_legit_24
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
                                        // @triton_per_fused__native_batch_norm_legit_24
.visible .entry triton_per_fused__native_batch_norm_legit_24(
	.param .u64 .ptr .global .align 1 triton_per_fused__native_batch_norm_legit_24_param_0,
	.param .u64 .ptr .global .align 1 triton_per_fused__native_batch_norm_legit_24_param_1,
	.param .u64 .ptr .global .align 1 triton_per_fused__native_batch_norm_legit_24_param_2,
	.param .u32 triton_per_fused__native_batch_norm_legit_24_param_3,
	.param .u32 triton_per_fused__native_batch_norm_legit_24_param_4
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<25>;
	.reg .b32 	%r<131>;
	.reg .f32 	%f<70>;
	.reg .b64 	%rd<9>;
	.loc	1 19 0                          // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:19:0

// %bb.0:                               // %__nv_rsqrtf.exit
	ld.param.u64 	%rd4, [triton_per_fused__native_batch_norm_legit_24_param_0];
	ld.param.u64 	%rd5, [triton_per_fused__native_batch_norm_legit_24_param_1];
$L__tmp0:
	.loc	1 23 28                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:23:28
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	.loc	1 23 33                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:23:33
	shl.b32 	%r64, %r1, 5;
	ld.param.u64 	%rd6, [triton_per_fused__native_batch_norm_legit_24_param_2];
	.loc	1 24 44                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:24:44
	mov.u32 	%r65, %tid.x;
	and.b32  	%r66, %r65, 24;
	shl.b32 	%r67, %r65, 2;
	and.b32  	%r68, %r67, 28;
	and.b32  	%r69, %r65, 31;
	.loc	1 24 23                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:24:23
	or.b32  	%r70, %r64, %r68;
	.loc	1 25 21                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:25:21
	setp.lt.s32 	%p1, %r70, 1024;
	.loc	1 31 34                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:31:34
	shl.b32 	%r71, %r65, 5;
	and.b32  	%r72, %r71, 3840;
	.loc	1 31 51                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:31:51
	shr.s32 	%r74, %r70, 31;
	shr.u32 	%r75, %r74, 24;
	add.s32 	%r76, %r70, %r75;
	.loc	1 31 45                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:31:45
	shl.b32 	%r77, %r76, 4;
	and.b32  	%r78, %r77, -4096;
	.loc	1 31 65                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:31:65
	and.b32  	%r79, %r76, -256;
	sub.s32 	%r80, %r70, %r79;
	.loc	1 31 39                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:31:39
	add.s32 	%r81, %r80, %r72;
	.loc	1 31 60                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:31:60
	add.s32 	%r82, %r81, %r78;
	.loc	1 31 30                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:31:30
	mul.wide.s32 	%rd7, %r82, 4;
	add.s64 	%rd1, %rd5, %rd7;
	mov.b32 	%r6, 0;
	.loc	1 31 73                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:31:73
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	@%p1 ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r2, %r6;
	@!%p1 mov.u32 %r3, %r6;
	@!%p1 mov.u32 %r4, %r6;
	@!%p1 mov.u32 %r5, %r6;
	// end inline asm
	mov.b32 	%f1, %r2;
	mov.b32 	%f2, %r3;
	mov.b32 	%f3, %r4;
	mov.b32 	%f4, %r5;
	.loc	1 35 33                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:35:33
	selp.f32 	%f5, %f1, 0f00000000, %p1;
	selp.f32 	%f6, %f2, 0f00000000, %p1;
	selp.f32 	%f7, %f3, 0f00000000, %p1;
	selp.f32 	%f8, %f4, 0f00000000, %p1;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r83, %f5;
	shfl.sync.bfly.b32	%r84, %r83, 16, 31, -1;
	mov.b32 	%f9, %r84;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f10, %f5, %f9;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r85, %f10;
	shfl.sync.bfly.b32	%r86, %r85, 8, 31, -1;
	mov.b32 	%f11, %r86;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f12, %f10, %f11;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r87, %f6;
	shfl.sync.bfly.b32	%r88, %r87, 16, 31, -1;
	mov.b32 	%f13, %r88;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f14, %f6, %f13;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r89, %f14;
	shfl.sync.bfly.b32	%r90, %r89, 8, 31, -1;
	mov.b32 	%f15, %r90;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f16, %f14, %f15;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r91, %f7;
	shfl.sync.bfly.b32	%r92, %r91, 16, 31, -1;
	mov.b32 	%f17, %r92;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f18, %f7, %f17;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r93, %f18;
	shfl.sync.bfly.b32	%r94, %r93, 8, 31, -1;
	mov.b32 	%f19, %r94;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f20, %f18, %f19;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r95, %f8;
	shfl.sync.bfly.b32	%r96, %r95, 16, 31, -1;
	mov.b32 	%f21, %r96;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f22, %f8, %f21;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r97, %f22;
	shfl.sync.bfly.b32	%r98, %r97, 8, 31, -1;
	mov.b32 	%f23, %r98;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f24, %f22, %f23;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p6, %r66, 0;
	bfe.u32 	%r99, %r65, 5, 2;
	shl.b32 	%r100, %r99, 2;
	shl.b32 	%r101, %r68, 4;
	or.b32  	%r102, %r101, %r100;
	mov.u32 	%r103, global_smem;
	add.s32 	%r10, %r103, %r102;
	mov.b32 	%r11, %f12;
	// begin inline asm
	@%p6 st.shared.b32 [ %r10 + 0 ], %r11;
	// end inline asm
	add.s32 	%r12, %r10, 16;
	mov.b32 	%r13, %f16;
	// begin inline asm
	@%p6 st.shared.b32 [ %r12 + 0 ], %r13;
	// end inline asm
	add.s32 	%r14, %r10, 32;
	mov.b32 	%r15, %f20;
	// begin inline asm
	@%p6 st.shared.b32 [ %r14 + 0 ], %r15;
	// end inline asm
	add.s32 	%r16, %r10, 48;
	mov.b32 	%r17, %f24;
	// begin inline asm
	@%p6 st.shared.b32 [ %r16 + 0 ], %r17;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p10, %r65, 128;
	add.s32 	%r19, %r103, %r67;
	// begin inline asm
	@%p10 ld.shared.b32 %r18, [ %r19 + 0 ];
	// end inline asm
	mov.b32 	%f25, %r18;
	shfl.sync.bfly.b32	%r104, %r18, 2, 31, -1;
	mov.b32 	%f26, %r104;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f27, %f25, %f26;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r105, %f27;
	shfl.sync.bfly.b32	%r106, %r105, 1, 31, -1;
	mov.b32 	%f28, %r106;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f29, %f27, %f28;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r107, %r65, 3;
	setp.eq.s32 	%p22, %r107, 0;
	and.pred  	%p11, %p10, %p22;
	mov.b32 	%r21, %f29;
	// begin inline asm
	@%p11 st.shared.b32 [ %r19 + 0 ], %r21;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r108, %r103, %r101;
$L__tmp2:
	.loc	1 39 19                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:39:19
	ld.shared.u32 	%r23, [%r108];
	ld.shared.u32 	%r24, [%r108+16];
	ld.shared.u32 	%r25, [%r108+32];
	ld.shared.u32 	%r26, [%r108+48];
	bar.sync 	0;
	mad.lo.s32 	%r54, %r68, -12, %r108;
	mov.pred 	%p12, -1;
	// begin inline asm
	@%p12 st.shared.v4.b32 [ %r54 + 0 ], { %r23, %r24, %r25, %r26 };
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r109, %r69, 2;
	add.s32 	%r110, %r103, %r109;
	ld.shared.u32 	%r28, [%r110];
	mov.b32 	%r29, 1098907648;
	// begin inline asm
	div.full.f32 %r63, %r28, %r29;
	// end inline asm
	// begin inline asm
	div.full.f32 %r30, %r23, %r29;
	// end inline asm
	mov.b32 	%f30, %r30;
	// begin inline asm
	div.full.f32 %r33, %r24, %r29;
	// end inline asm
	mov.b32 	%f31, %r33;
	// begin inline asm
	div.full.f32 %r36, %r25, %r29;
	// end inline asm
	mov.b32 	%f32, %r36;
	// begin inline asm
	div.full.f32 %r39, %r26, %r29;
	// end inline asm
	mov.b32 	%f33, %r39;
	.loc	1 40 19                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:40:19
	sub.f32 	%f34, %f1, %f30;
	sub.f32 	%f35, %f2, %f31;
	sub.f32 	%f36, %f3, %f32;
	sub.f32 	%f37, %f4, %f33;
	.loc	1 41 20                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:41:20
	mul.f32 	%f38, %f34, %f34;
	mul.f32 	%f39, %f35, %f35;
	mul.f32 	%f40, %f36, %f36;
	mul.f32 	%f41, %f37, %f37;
	.loc	1 43 35                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:43:35
	selp.f32 	%f42, %f38, 0f00000000, %p1;
	selp.f32 	%f43, %f39, 0f00000000, %p1;
	selp.f32 	%f44, %f40, 0f00000000, %p1;
	selp.f32 	%f45, %f41, 0f00000000, %p1;
$L__tmp3:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	mov.b32 	%r111, %f42;
	shfl.sync.bfly.b32	%r112, %r111, 16, 31, -1;
	mov.b32 	%f46, %r112;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f47, %f42, %f46;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r113, %f47;
	shfl.sync.bfly.b32	%r114, %r113, 8, 31, -1;
	mov.b32 	%f48, %r114;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f49, %f47, %f48;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r115, %f43;
	shfl.sync.bfly.b32	%r116, %r115, 16, 31, -1;
	mov.b32 	%f50, %r116;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f51, %f43, %f50;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r117, %f51;
	shfl.sync.bfly.b32	%r118, %r117, 8, 31, -1;
	mov.b32 	%f52, %r118;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f53, %f51, %f52;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r119, %f44;
	shfl.sync.bfly.b32	%r120, %r119, 16, 31, -1;
	mov.b32 	%f54, %r120;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f55, %f44, %f54;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r121, %f55;
	shfl.sync.bfly.b32	%r122, %r121, 8, 31, -1;
	mov.b32 	%f56, %r122;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f57, %f55, %f56;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r123, %f45;
	shfl.sync.bfly.b32	%r124, %r123, 16, 31, -1;
	mov.b32 	%f58, %r124;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f59, %f45, %f58;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r125, %f59;
	shfl.sync.bfly.b32	%r126, %r125, 8, 31, -1;
	mov.b32 	%f60, %r126;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f61, %f59, %f60;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r43, %f49;
	// begin inline asm
	@%p6 st.shared.b32 [ %r10 + 0 ], %r43;
	// end inline asm
	mov.b32 	%r45, %f53;
	// begin inline asm
	@%p6 st.shared.b32 [ %r12 + 0 ], %r45;
	// end inline asm
	mov.b32 	%r47, %f57;
	// begin inline asm
	@%p6 st.shared.b32 [ %r14 + 0 ], %r47;
	// end inline asm
	mov.b32 	%r49, %f61;
	// begin inline asm
	@%p6 st.shared.b32 [ %r16 + 0 ], %r49;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r50, [ %r19 + 0 ];
	// end inline asm
	mov.b32 	%f62, %r50;
	shfl.sync.bfly.b32	%r127, %r50, 2, 31, -1;
	mov.b32 	%f63, %r127;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f64, %f62, %f63;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r128, %f64;
	shfl.sync.bfly.b32	%r129, %r128, 1, 31, -1;
	mov.b32 	%f65, %r129;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f66, %f64, %f65;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r53, %f66;
	// begin inline asm
	@%p11 st.shared.b32 [ %r19 + 0 ], %r53;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r55, [%r108];
	ld.shared.u32 	%r56, [%r108+16];
	ld.shared.u32 	%r57, [%r108+32];
	ld.shared.u32 	%r58, [%r108+48];
$L__tmp4:
	.loc	1 49 28                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:49:28
	bar.sync 	0;
	// begin inline asm
	@%p12 st.shared.v4.b32 [ %r54 + 0 ], { %r55, %r56, %r57, %r58 };
	// end inline asm
	bar.sync 	0;
	.loc	1 46 20                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:46:20
	ld.shared.u32 	%r60, [%r110];
	// begin inline asm
	div.full.f32 %r59, %r60, %r29;
	// end inline asm
	mov.b32 	%f67, %r59;
	.loc	1 48 20                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:48:20
	add.f32 	%f68, %f67, 0f3727C5AC;
	.loc	1 49 28                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:49:28
	rsqrt.approx.ftz.f32 	%f69, %f68;
	.loc	1 24 23                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:24:23
	or.b32  	%r130, %r64, %r69;
	.loc	1 25 21                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:25:21
	setp.lt.s32 	%p23, %r130, 1024;
	.loc	1 50 4                          // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:50:4
	bar.sync 	0;
	.loc	1 51 28                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:51:28
	mul.wide.s32 	%rd8, %r130, 4;
	add.s64 	%rd2, %rd4, %rd8;
	.loc	1 51 40                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:51:40
	setp.eq.s32 	%p24, %r99, 0;
	mov.b32 	%r62, %f69;
	and.pred  	%p20, %p24, %p23;
	// begin inline asm
	@%p20 st.global.b32 [ %rd2 + 0 ], { %r62 };
	// end inline asm
	.loc	1 52 25                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:52:25
	add.s64 	%rd3, %rd6, %rd8;
	.loc	1 52 37                         // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:52:37
	// begin inline asm
	@%p20 st.global.b32 [ %rd3 + 0 ], { %r63 };
	// end inline asm
	.loc	1 52 4                          // cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py:52:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/oc/cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 213                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xce DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 111
.b8 99
.b8 100
.b8 101
.b8 98
.b8 121
.b8 110
.b8 106
.b8 103
.b8 50
.b8 102
.b8 104
.b8 119
.b8 113
.b8 98
.b8 103
.b8 53
.b8 119
.b8 118
.b8 109
.b8 54
.b8 55
.b8 121
.b8 99
.b8 104
.b8 114
.b8 50
.b8 103
.b8 50
.b8 53
.b8 111
.b8 52
.b8 97
.b8 54
.b8 115
.b8 112
.b8 54
.b8 99
.b8 97
.b8 114
.b8 121
.b8 121
.b8 50
.b8 117
.b8 107
.b8 111
.b8 114
.b8 120
.b8 98
.b8 109
.b8 51
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 111
.b8 99
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x2f DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 101
.b8 114
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 95
.b8 110
.b8 97
.b8 116
.b8 105
.b8 118
.b8 101
.b8 95
.b8 98
.b8 97
.b8 116
.b8 99
.b8 104
.b8 95
.b8 110
.b8 111
.b8 114
.b8 109
.b8 95
.b8 108
.b8 101
.b8 103
.b8 105
.b8 116
.b8 95
.b8 50
.b8 52
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x92:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xa7:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 36                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xbf:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 44                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
