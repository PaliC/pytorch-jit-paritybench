; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_cat_leaky_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 128, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %9, 2, !dbg !12
  %12 = and i32 %11, 2044, !dbg !12
  %13 = shl i32 %7, 12, !dbg !13
  %14 = or disjoint i32 %13, %12
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !15
  %19 = bitcast i32 %18 to float, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !15
  %21 = bitcast i32 %20 to float, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !15
  %23 = bitcast i32 %22 to float, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !15
  %25 = bitcast i32 %24 to float, !dbg !15
  %26 = select i1 %8, float %25, float 0.000000e+00, !dbg !16
  %27 = select i1 %8, float %23, float 0.000000e+00, !dbg !16
  %28 = select i1 %8, float %21, float 0.000000e+00, !dbg !16
  %29 = select i1 %8, float %19, float 0.000000e+00, !dbg !16
  %30 = or disjoint i32 %14, 2048, !dbg !17
  %31 = sext i32 %30 to i64, !dbg !14
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !14
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !15
  %34 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !15
  %35 = bitcast i32 %34 to float, !dbg !15
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !15
  %37 = bitcast i32 %36 to float, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !15
  %39 = bitcast i32 %38 to float, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !15
  %41 = bitcast i32 %40 to float, !dbg !15
  %42 = fsub float %41, %26, !dbg !18
  %43 = fsub float %39, %27, !dbg !18
  %44 = fsub float %37, %28, !dbg !18
  %45 = fsub float %35, %29, !dbg !18
  %46 = select i1 %8, float 2.000000e+00, float 1.000000e+00, !dbg !22
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %46) #5, !dbg !23
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %46) #5, !dbg !23
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %46) #5, !dbg !23
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %46) #5, !dbg !23
  %51 = fadd float %26, %47, !dbg !24
  %52 = fsub float %41, %51, !dbg !25
  %53 = fmul float %42, %52, !dbg !26
  %54 = fadd float %53, 0.000000e+00, !dbg !27
  %55 = fadd float %27, %48, !dbg !24
  %56 = fsub float %39, %55, !dbg !25
  %57 = fmul float %43, %56, !dbg !26
  %58 = fadd float %57, 0.000000e+00, !dbg !27
  %59 = fadd float %28, %49, !dbg !24
  %60 = fsub float %37, %59, !dbg !25
  %61 = fmul float %44, %60, !dbg !26
  %62 = fadd float %61, 0.000000e+00, !dbg !27
  %63 = fadd float %29, %50, !dbg !24
  %64 = fsub float %35, %63, !dbg !25
  %65 = fmul float %45, %64, !dbg !26
  %66 = fadd float %65, 0.000000e+00, !dbg !27
  %67 = select i1 %8, float %51, float 0.000000e+00, !dbg !16
  %68 = select i1 %8, float %55, float 0.000000e+00, !dbg !16
  %69 = select i1 %8, float %59, float 0.000000e+00, !dbg !16
  %70 = select i1 %8, float %63, float 0.000000e+00, !dbg !16
  %71 = select i1 %8, float %62, float 0.000000e+00, !dbg !28
  %72 = select i1 %8, float %66, float 0.000000e+00, !dbg !28
  %73 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %74 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %75 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %76 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %77 = lshr i32 %9, 5, !dbg !12
  %78 = fsub float %68, %67, !dbg !29
  %79 = select i1 %8, float 4.000000e+00, float 0.000000e+00, !dbg !32
  %80 = fcmp oeq float %79, 0.000000e+00, !dbg !33
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %79) #5, !dbg !34
  %82 = select i1 %80, float 0.000000e+00, float %81, !dbg !35
  %83 = fmul float %78, %82, !dbg !36
  %84 = fadd float %67, %83, !dbg !37
  %85 = fadd float %54, %58, !dbg !38
  %86 = select i1 %8, float %85, float 0.000000e+00, !dbg !38
  %87 = fmul float %78, %78, !dbg !39
  %88 = fmul float %87, %73, !dbg !40
  %89 = fmul float %88, %82, !dbg !41
  %90 = fadd float %86, %89, !dbg !42
  %91 = fsub float %69, %84, !dbg !29
  %92 = select i1 %8, float 6.000000e+00, float 0.000000e+00, !dbg !32
  %93 = fcmp oeq float %92, 0.000000e+00, !dbg !33
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %92) #5, !dbg !34
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !35
  %96 = fmul float %95, %91, !dbg !36
  %97 = fadd float %84, %96, !dbg !37
  %98 = fadd float %71, %90, !dbg !38
  %99 = fmul float %91, %91, !dbg !39
  %100 = fmul float %79, %99, !dbg !40
  %101 = fmul float %95, %100, !dbg !41
  %102 = fadd float %98, %101, !dbg !42
  %103 = fsub float %70, %97, !dbg !29
  %104 = select i1 %8, float 8.000000e+00, float 0.000000e+00, !dbg !32
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !33
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %104) #5, !dbg !34
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !35
  %108 = fmul float %107, %103, !dbg !36
  %109 = fadd float %97, %108, !dbg !37
  %110 = fadd float %72, %102, !dbg !38
  %111 = fmul float %103, %103, !dbg !39
  %112 = fmul float %92, %111, !dbg !40
  %113 = fmul float %107, %112, !dbg !41
  %114 = fadd float %110, %113, !dbg !42
  %115 = bitcast float %109 to i32, !dbg !43
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !43
  %117 = bitcast i32 %116 to float, !dbg !43
  %118 = bitcast float %114 to i32, !dbg !43
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !43
  %120 = bitcast i32 %119 to float, !dbg !43
  %121 = bitcast float %104 to i32, !dbg !43
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 16, i32 31), !dbg !43
  %123 = bitcast i32 %122 to float, !dbg !43
  %124 = fsub float %117, %109, !dbg !29
  %125 = fadd float %104, %123, !dbg !32
  %126 = fcmp oeq float %125, 0.000000e+00, !dbg !33
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %125) #5, !dbg !34
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !35
  %129 = fmul float %128, %124, !dbg !36
  %130 = fadd float %109, %129, !dbg !37
  %131 = fadd float %114, %120, !dbg !38
  %132 = fmul float %124, %124, !dbg !39
  %133 = fmul float %104, %132, !dbg !40
  %134 = fmul float %128, %133, !dbg !41
  %135 = fadd float %131, %134, !dbg !42
  %136 = bitcast float %130 to i32, !dbg !43
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !43
  %138 = bitcast i32 %137 to float, !dbg !43
  %139 = bitcast float %135 to i32, !dbg !43
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !43
  %141 = bitcast i32 %140 to float, !dbg !43
  %142 = bitcast float %125 to i32, !dbg !43
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !43
  %144 = bitcast i32 %143 to float, !dbg !43
  %145 = fsub float %138, %130, !dbg !29
  %146 = fadd float %125, %144, !dbg !32
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !33
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %146) #5, !dbg !34
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !35
  %150 = fmul float %145, %149, !dbg !36
  %151 = fadd float %130, %150, !dbg !37
  %152 = fadd float %135, %141, !dbg !38
  %153 = fmul float %145, %145, !dbg !39
  %154 = fmul float %125, %153, !dbg !40
  %155 = fmul float %149, %154, !dbg !41
  %156 = fadd float %152, %155, !dbg !42
  %157 = bitcast float %151 to i32, !dbg !43
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 4, i32 31), !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = bitcast float %156 to i32, !dbg !43
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 4, i32 31), !dbg !43
  %162 = bitcast i32 %161 to float, !dbg !43
  %163 = bitcast float %146 to i32, !dbg !43
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !43
  %165 = bitcast i32 %164 to float, !dbg !43
  %166 = fsub float %159, %151, !dbg !29
  %167 = fadd float %146, %165, !dbg !32
  %168 = fcmp oeq float %167, 0.000000e+00, !dbg !33
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %167) #5, !dbg !34
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !35
  %171 = fmul float %166, %170, !dbg !36
  %172 = fadd float %151, %171, !dbg !37
  %173 = fadd float %156, %162, !dbg !38
  %174 = fmul float %166, %166, !dbg !39
  %175 = fmul float %146, %174, !dbg !40
  %176 = fmul float %170, %175, !dbg !41
  %177 = fadd float %173, %176, !dbg !42
  %178 = bitcast float %172 to i32, !dbg !43
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !43
  %180 = bitcast i32 %179 to float, !dbg !43
  %181 = bitcast float %177 to i32, !dbg !43
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !43
  %183 = bitcast i32 %182 to float, !dbg !43
  %184 = bitcast float %167 to i32, !dbg !43
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !43
  %186 = bitcast i32 %185 to float, !dbg !43
  %187 = fsub float %180, %172, !dbg !29
  %188 = fadd float %167, %186, !dbg !32
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !33
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %188) #5, !dbg !34
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !35
  %192 = fmul float %187, %191, !dbg !36
  %193 = fadd float %172, %192, !dbg !37
  %194 = fadd float %177, %183, !dbg !38
  %195 = fmul float %187, %187, !dbg !39
  %196 = fmul float %167, %195, !dbg !40
  %197 = fmul float %191, %196, !dbg !41
  %198 = fadd float %194, %197, !dbg !42
  %199 = bitcast float %193 to i32, !dbg !43
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !43
  %201 = bitcast i32 %200 to float, !dbg !43
  %202 = bitcast float %198 to i32, !dbg !43
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !43
  %204 = bitcast i32 %203 to float, !dbg !43
  %205 = bitcast float %188 to i32, !dbg !43
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !43
  %207 = bitcast i32 %206 to float, !dbg !43
  %208 = fsub float %201, %193, !dbg !29
  %209 = fadd float %188, %207, !dbg !32
  %210 = fcmp oeq float %209, 0.000000e+00, !dbg !33
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %209) #5, !dbg !34
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !35
  %213 = fmul float %208, %212, !dbg !36
  %214 = fadd float %193, %213, !dbg !37
  %215 = fadd float %198, %204, !dbg !38
  %216 = fmul float %208, %208, !dbg !39
  %217 = fmul float %188, %216, !dbg !40
  %218 = fmul float %212, %217, !dbg !41
  %219 = fadd float %215, %218, !dbg !42
  %220 = icmp eq i32 %10, 0, !dbg !43
  %221 = and i32 %77, 15, !dbg !43
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !43
  %223 = bitcast float %214 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 %220) #5, !dbg !43
  %224 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %221, !dbg !43
  %225 = bitcast float %219 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 %220) #5, !dbg !43
  %226 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %221, !dbg !43
  %227 = bitcast float %209 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 %220) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %228 = icmp slt i32 %9, 16, !dbg !43
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !43
  %230 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %229, i1 %228) #5, !dbg !43
  %231 = bitcast i32 %230 to float, !dbg !43
  %232 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %9, !dbg !43
  %233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %232, i1 %228) #5, !dbg !43
  %234 = bitcast i32 %233 to float, !dbg !43
  %235 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %9, !dbg !43
  %236 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %235, i1 %228) #5, !dbg !43
  %237 = bitcast i32 %236 to float, !dbg !43
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !43
  %239 = bitcast i32 %238 to float, !dbg !43
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !43
  %241 = bitcast i32 %240 to float, !dbg !43
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !43
  %243 = bitcast i32 %242 to float, !dbg !43
  %244 = fsub float %239, %231, !dbg !29
  %245 = fadd float %237, %243, !dbg !32
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !33
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %245) #5, !dbg !34
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !35
  %249 = fmul float %244, %248, !dbg !36
  %250 = fadd float %249, %231, !dbg !37
  %251 = fadd float %234, %241, !dbg !38
  %252 = fmul float %244, %244, !dbg !39
  %253 = fmul float %252, %237, !dbg !40
  %254 = fmul float %253, %248, !dbg !41
  %255 = fadd float %251, %254, !dbg !42
  %256 = bitcast float %250 to i32, !dbg !43
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !43
  %258 = bitcast i32 %257 to float, !dbg !43
  %259 = bitcast float %255 to i32, !dbg !43
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !43
  %261 = bitcast i32 %260 to float, !dbg !43
  %262 = bitcast float %245 to i32, !dbg !43
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !43
  %264 = bitcast i32 %263 to float, !dbg !43
  %265 = fsub float %258, %250, !dbg !29
  %266 = fadd float %245, %264, !dbg !32
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !33
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %266) #5, !dbg !34
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !35
  %270 = fmul float %265, %269, !dbg !36
  %271 = fadd float %250, %270, !dbg !37
  %272 = fadd float %255, %261, !dbg !38
  %273 = fmul float %265, %265, !dbg !39
  %274 = fmul float %245, %273, !dbg !40
  %275 = fmul float %269, %274, !dbg !41
  %276 = fadd float %272, %275, !dbg !42
  %277 = bitcast float %271 to i32, !dbg !43
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !43
  %279 = bitcast i32 %278 to float, !dbg !43
  %280 = bitcast float %276 to i32, !dbg !43
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !43
  %282 = bitcast i32 %281 to float, !dbg !43
  %283 = bitcast float %266 to i32, !dbg !43
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !43
  %285 = bitcast i32 %284 to float, !dbg !43
  %286 = fsub float %279, %271, !dbg !29
  %287 = fadd float %266, %285, !dbg !32
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !33
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %287) #5, !dbg !34
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !35
  %291 = fmul float %286, %290, !dbg !36
  %292 = fadd float %271, %291, !dbg !37
  %293 = fadd float %276, %282, !dbg !38
  %294 = fmul float %286, %286, !dbg !39
  %295 = fmul float %266, %294, !dbg !40
  %296 = fmul float %290, %295, !dbg !41
  %297 = fadd float %293, %296, !dbg !42
  %298 = bitcast float %292 to i32, !dbg !43
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !43
  %300 = bitcast i32 %299 to float, !dbg !43
  %301 = bitcast float %297 to i32, !dbg !43
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !43
  %303 = bitcast i32 %302 to float, !dbg !43
  %304 = bitcast float %287 to i32, !dbg !43
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 1, i32 31), !dbg !43
  %306 = bitcast i32 %305 to float, !dbg !43
  %307 = fsub float %300, %292, !dbg !29
  %308 = fadd float %287, %306, !dbg !32
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !33
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %308) #5, !dbg !34
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !35
  %312 = fmul float %307, %311, !dbg !36
  %313 = fadd float %292, %312, !dbg !37
  %314 = fadd float %297, %303, !dbg !38
  %315 = fmul float %307, %307, !dbg !39
  %316 = fmul float %287, %315, !dbg !40
  %317 = fmul float %311, %316, !dbg !41
  %318 = fadd float %314, %317, !dbg !42
  %319 = and i32 %9, 15, !dbg !43
  %320 = icmp eq i32 %319, 0, !dbg !43
  %321 = and i1 %228, %320, !dbg !43
  %322 = bitcast float %313 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %322, i1 %321) #5, !dbg !43
  %323 = bitcast float %318 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %323, i1 %321) #5, !dbg !43
  %324 = bitcast float %308 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %324, i1 %321) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %325 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %326 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !43
  %327 = sext i32 %7 to i64, !dbg !44
  %328 = getelementptr float, ptr addrspace(1) %1, i64 %327, !dbg !44
  %urem = and i32 %9, 511, !dbg !45
  %329 = icmp eq i32 %urem, 0, !dbg !45
  %330 = bitcast float %325 to i32, !dbg !45
  %331 = and i1 %329, %8, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %330, ptr addrspace(1) %328, i1 %331) #5, !dbg !45
  %.frozen = freeze i32 %7, !dbg !46
  %332 = sdiv i32 %.frozen, 32, !dbg !46
  %333 = mul i32 %332, 32, !dbg !47
  %.decomposed = sub i32 %.frozen, %333, !dbg !47
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 4.096000e+03) #5, !dbg !48
  %335 = fadd float %334, 0x3EE4F8B580000000, !dbg !49
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i15 = icmp eq i32 %339, 0, !dbg !50
  br i1 %.not.i15, label %342, label %340, !dbg !50

340:                                              ; preds = %__nv_rsqrtf.exit
  %341 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %335), !dbg !50
  br label %__nv_rsqrtf.exit17, !dbg !50

342:                                              ; preds = %__nv_rsqrtf.exit
  %343 = tail call float @llvm.nvvm.rsqrt.approx.f(float %335), !dbg !50
  br label %__nv_rsqrtf.exit17, !dbg !50

__nv_rsqrtf.exit17:                               ; preds = %340, %342
  %.0.i16 = phi float [ %341, %340 ], [ %343, %342 ], !dbg !50
  %344 = shl nsw i32 %.decomposed, 12, !dbg !51
  %345 = shl i32 %332, 18, !dbg !52
  %346 = add i32 %345, %344
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !53
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !53
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !53
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !53
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !53
  %352 = bitcast i32 %348 to float, !dbg !53
  %353 = bitcast i32 %349 to float, !dbg !53
  %354 = bitcast i32 %350 to float, !dbg !53
  %355 = bitcast i32 %351 to float, !dbg !53
  %356 = fsub float %352, %325, !dbg !54
  %357 = fsub float %353, %325, !dbg !54
  %358 = fsub float %354, %325, !dbg !54
  %359 = fsub float %355, %325, !dbg !54
  %360 = fmul float %.0.i16, %356, !dbg !55
  %361 = fmul float %.0.i16, %357, !dbg !55
  %362 = fmul float %.0.i16, %358, !dbg !55
  %363 = fmul float %.0.i16, %359, !dbg !55
  %364 = fcmp ogt float %360, 0.000000e+00, !dbg !56
  %365 = fcmp ogt float %361, 0.000000e+00, !dbg !56
  %366 = fcmp ogt float %362, 0.000000e+00, !dbg !56
  %367 = fcmp ogt float %363, 0.000000e+00, !dbg !56
  %368 = fmul float %360, 0x3FC99999A0000000, !dbg !57
  %369 = fmul float %361, 0x3FC99999A0000000, !dbg !57
  %370 = fmul float %362, 0x3FC99999A0000000, !dbg !57
  %371 = fmul float %363, 0x3FC99999A0000000, !dbg !57
  %372 = select i1 %364, float %360, float %368, !dbg !58
  %373 = select i1 %365, float %361, float %369, !dbg !58
  %374 = select i1 %366, float %362, float %370, !dbg !58
  %375 = select i1 %367, float %363, float %371, !dbg !58
  %376 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !59
  %377 = bitcast float %372 to i32, !dbg !60
  %378 = bitcast float %373 to i32, !dbg !60
  %379 = bitcast float %374 to i32, !dbg !60
  %380 = bitcast float %375 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %377, i32 %378, i32 %379, i32 %380, ptr addrspace(1) %376, i1 %8) #5, !dbg !60
  %381 = or disjoint i32 %346, %12, !dbg !61
  %382 = sext i32 %381 to i64, !dbg !62
  %383 = getelementptr float, ptr addrspace(1) %3, i64 %382, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %377, i32 %378, i32 %379, i32 %380, ptr addrspace(1) %383, i1 %8) #5, !dbg !63
  %384 = or disjoint i32 %12, 2048, !dbg !64
  %385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !53
  %386 = extractvalue { i32, i32, i32, i32 } %385, 0, !dbg !53
  %387 = extractvalue { i32, i32, i32, i32 } %385, 1, !dbg !53
  %388 = extractvalue { i32, i32, i32, i32 } %385, 2, !dbg !53
  %389 = extractvalue { i32, i32, i32, i32 } %385, 3, !dbg !53
  %390 = bitcast i32 %386 to float, !dbg !53
  %391 = bitcast i32 %387 to float, !dbg !53
  %392 = bitcast i32 %388 to float, !dbg !53
  %393 = bitcast i32 %389 to float, !dbg !53
  %394 = fsub float %390, %325, !dbg !54
  %395 = fsub float %391, %325, !dbg !54
  %396 = fsub float %392, %325, !dbg !54
  %397 = fsub float %393, %325, !dbg !54
  %398 = fmul float %.0.i16, %394, !dbg !55
  %399 = fmul float %.0.i16, %395, !dbg !55
  %400 = fmul float %.0.i16, %396, !dbg !55
  %401 = fmul float %.0.i16, %397, !dbg !55
  %402 = fcmp ogt float %398, 0.000000e+00, !dbg !56
  %403 = fcmp ogt float %399, 0.000000e+00, !dbg !56
  %404 = fcmp ogt float %400, 0.000000e+00, !dbg !56
  %405 = fcmp ogt float %401, 0.000000e+00, !dbg !56
  %406 = fmul float %398, 0x3FC99999A0000000, !dbg !57
  %407 = fmul float %399, 0x3FC99999A0000000, !dbg !57
  %408 = fmul float %400, 0x3FC99999A0000000, !dbg !57
  %409 = fmul float %401, 0x3FC99999A0000000, !dbg !57
  %410 = select i1 %402, float %398, float %406, !dbg !58
  %411 = select i1 %403, float %399, float %407, !dbg !58
  %412 = select i1 %404, float %400, float %408, !dbg !58
  %413 = select i1 %405, float %401, float %409, !dbg !58
  %414 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !59
  %415 = bitcast float %410 to i32, !dbg !60
  %416 = bitcast float %411 to i32, !dbg !60
  %417 = bitcast float %412 to i32, !dbg !60
  %418 = bitcast float %413 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %415, i32 %416, i32 %417, i32 %418, ptr addrspace(1) %414, i1 %8) #5, !dbg !60
  %419 = or disjoint i32 %346, %384, !dbg !61
  %420 = sext i32 %419 to i64, !dbg !62
  %421 = getelementptr float, ptr addrspace(1) %3, i64 %420, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %415, i32 %416, i32 %417, i32 %418, ptr addrspace(1) %421, i1 %8) #5, !dbg !63
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %.not.i18 = icmp eq i32 %422, 0, !dbg !65
  br i1 %.not.i18, label %425, label %423, !dbg !65

423:                                              ; preds = %__nv_rsqrtf.exit17
  %424 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %335), !dbg !65
  br label %__nv_rsqrtf.exit20, !dbg !65

425:                                              ; preds = %__nv_rsqrtf.exit17
  %426 = tail call float @llvm.nvvm.rsqrt.approx.f(float %335), !dbg !65
  br label %__nv_rsqrtf.exit20, !dbg !65

__nv_rsqrtf.exit20:                               ; preds = %423, %425
  %.0.i19 = phi float [ %424, %423 ], [ %426, %425 ], !dbg !65
  %427 = getelementptr float, ptr addrspace(1) %4, i64 %327, !dbg !66
  %428 = bitcast float %.0.i19 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %427, i1 %331) #5, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxe5fx7xlbejvcfxjxbfl23aquxke5sht5fr6vwjnowlqj25lnuq.py", directory: "inductor_cache/xe")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_cat_leaky_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_cat_leaky_relu_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_cat_leaky_relu_1", linkageName: "triton_red_fused__native_batch_norm_legit_cat_leaky_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 34, scope: !7)
!15 = !DILocation(line: 34, column: 49, scope: !7)
!16 = !DILocation(line: 39, column: 60, scope: !7)
!17 = !DILocation(line: 34, column: 39, scope: !7)
!18 = !DILocation(line: 183, column: 24, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 37, column: 51, scope: !7)
!22 = !DILocation(line: 41, column: 64, scope: !7)
!23 = !DILocation(line: 185, column: 34, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 185, column: 26, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 186, column: 39, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 186, column: 31, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 186, column: 22, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 40, column: 56, scope: !7)
!29 = !DILocation(line: 192, column: 21, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!31 = !DILocation(line: 43, column: 41, scope: !7)
!32 = !DILocation(line: 193, column: 28, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 194, column: 39, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 194, column: 60, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 194, column: 49, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 196, column: 25, scope: !30, inlinedAt: !31)
!37 = !DILocation(line: 196, column: 17, scope: !30, inlinedAt: !31)
!38 = !DILocation(line: 197, column: 15, scope: !30, inlinedAt: !31)
!39 = !DILocation(line: 197, column: 30, scope: !30, inlinedAt: !31)
!40 = !DILocation(line: 197, column: 38, scope: !30, inlinedAt: !31)
!41 = !DILocation(line: 197, column: 49, scope: !30, inlinedAt: !31)
!42 = !DILocation(line: 197, column: 22, scope: !30, inlinedAt: !31)
!43 = !DILocation(line: 204, column: 46, scope: !19, inlinedAt: !31)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 36, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 58, column: 22, scope: !7)
!49 = !DILocation(line: 60, column: 23, scope: !7)
!50 = !DILocation(line: 61, column: 32, scope: !7)
!51 = !DILocation(line: 69, column: 39, scope: !7)
!52 = !DILocation(line: 69, column: 51, scope: !7)
!53 = !DILocation(line: 55, column: 49, scope: !7)
!54 = !DILocation(line: 56, column: 22, scope: !7)
!55 = !DILocation(line: 62, column: 23, scope: !7)
!56 = !DILocation(line: 64, column: 24, scope: !7)
!57 = !DILocation(line: 66, column: 24, scope: !7)
!58 = !DILocation(line: 67, column: 39, scope: !7)
!59 = !DILocation(line: 68, column: 29, scope: !7)
!60 = !DILocation(line: 68, column: 51, scope: !7)
!61 = !DILocation(line: 69, column: 44, scope: !7)
!62 = !DILocation(line: 69, column: 29, scope: !7)
!63 = !DILocation(line: 69, column: 63, scope: !7)
!64 = !DILocation(line: 52, column: 27, scope: !7)
!65 = !DILocation(line: 74, column: 28, scope: !7)
!66 = !DILocation(line: 75, column: 25, scope: !7)
!67 = !DILocation(line: 75, column: 37, scope: !7)
!68 = !DILocation(line: 75, column: 4, scope: !7)
