; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = and i32 %11, 252, !dbg !12
  %14 = and i32 %8, 255, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %15, 64, !dbg !13
  %17 = or disjoint i32 %15, 128, !dbg !13
  %18 = or disjoint i32 %15, 192, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %14, !dbg !13
  %21 = icmp slt i32 %15, 256, !dbg !14
  %22 = icmp slt i32 %16, 256, !dbg !14
  %23 = icmp slt i32 %17, 256, !dbg !14
  %24 = icmp slt i32 %18, 256, !dbg !14
  %25 = icmp slt i32 %19, 256, !dbg !14
  %26 = icmp slt i32 %20, 256, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %28 = shl i32 %27, 4, !dbg !16
  %.lobit23 = lshr i32 %8, 6, !dbg !17
  %29 = and i32 %.lobit23, 3, !dbg !17
  %30 = or disjoint i32 %28, %12, !dbg !18
  %31 = or disjoint i32 %28, %29, !dbg !18
  %32 = or disjoint i32 %31, 4, !dbg !18
  %33 = or disjoint i32 %31, 8, !dbg !18
  %34 = or disjoint i32 %31, 12, !dbg !18
  %35 = icmp slt i32 %30, 68644, !dbg !19
  %36 = icmp slt i32 %31, 68644, !dbg !19
  %37 = icmp slt i32 %32, 68644, !dbg !19
  %38 = icmp slt i32 %33, 68644, !dbg !19
  %39 = icmp slt i32 %34, 68644, !dbg !19
  %.frozen = freeze i32 %19, !dbg !20
  %40 = sdiv i32 %.frozen, 64, !dbg !20
  %41 = mul i32 %40, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %41, !dbg !21
  %42 = srem i32 %20, 64, !dbg !21
  %43 = mul i32 %15, 68644, !dbg !22
  %44 = mul i32 %16, 68644, !dbg !22
  %45 = mul i32 %17, 68644, !dbg !22
  %46 = mul i32 %18, 68644, !dbg !22
  %47 = add i32 %30, %43, !dbg !23
  %48 = add i32 %30, %44, !dbg !23
  %49 = add i32 %30, %45, !dbg !23
  %50 = add i32 %30, %46, !dbg !23
  %51 = sext i32 %47 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %48 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %49 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %50 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = and i1 %21, %35, !dbg !25
  %60 = and i1 %22, %35, !dbg !25
  %61 = and i1 %23, %35, !dbg !25
  %62 = and i1 %24, %35, !dbg !25
  %63 = and i1 %25, %36, !dbg !25
  %64 = and i1 %37, %25, !dbg !25
  %65 = and i1 %38, %25, !dbg !25
  %66 = and i1 %39, %25, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %59) #2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %60) #2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !26
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %62) #2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !26
  %87 = shl i32 %8, 10, !dbg !26
  %88 = and i32 %87, 3072, !dbg !26
  %89 = or disjoint i32 %88, %10, !dbg !26
  %90 = and i32 %11, 1020, !dbg !26
  %91 = lshr exact i32 %88, 4, !dbg !26
  %92 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %91, !dbg !26
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %89, !dbg !26
  %94 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !26
  %95 = or disjoint i32 %89, 256, !dbg !26
  %96 = lshr i32 %95, 6, !dbg !26
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !26
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %95, !dbg !26
  %99 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !26
  %100 = or disjoint i32 %89, 512, !dbg !26
  %101 = lshr i32 %100, 6, !dbg !26
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !26
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !26
  %104 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !26
  %105 = or disjoint i32 %89, 768, !dbg !26
  %106 = lshr i32 %105, 6, !dbg !26
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !26
  %109 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !26
  %110 = or disjoint i32 %89, 64, !dbg !26
  %111 = getelementptr float, ptr addrspace(3) %92, i32 %110, !dbg !26
  %112 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !26
  %113 = or disjoint i32 %89, 320, !dbg !26
  %114 = lshr i32 %113, 6, !dbg !26
  %115 = and i32 %114, 52, !dbg !26
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !26
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %113, !dbg !26
  %118 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !26
  %119 = or disjoint i32 %89, 576, !dbg !26
  %120 = lshr i32 %119, 6, !dbg !26
  %121 = and i32 %120, 56, !dbg !26
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !26
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %119, !dbg !26
  %124 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !26
  %125 = or disjoint i32 %89, 832, !dbg !26
  %126 = lshr i32 %125, 6, !dbg !26
  %127 = and i32 %126, 60, !dbg !26
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !26
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %125, !dbg !26
  %130 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !26
  %131 = or disjoint i32 %89, 128, !dbg !26
  %132 = getelementptr float, ptr addrspace(3) %92, i32 %131, !dbg !26
  %133 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !26
  %134 = or disjoint i32 %89, 384, !dbg !26
  %135 = lshr i32 %134, 6, !dbg !26
  %136 = and i32 %135, 52, !dbg !26
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !26
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %134, !dbg !26
  %139 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !26
  %140 = or disjoint i32 %89, 640, !dbg !26
  %141 = lshr i32 %140, 6, !dbg !26
  %142 = and i32 %141, 56, !dbg !26
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !26
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %140, !dbg !26
  %145 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !26
  %146 = or disjoint i32 %89, 896, !dbg !26
  %147 = lshr i32 %146, 6, !dbg !26
  %148 = and i32 %147, 60, !dbg !26
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !26
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %146, !dbg !26
  %151 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !26
  %152 = or disjoint i32 %89, 192, !dbg !26
  %153 = getelementptr float, ptr addrspace(3) %92, i32 %152, !dbg !26
  %154 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !26
  %155 = or disjoint i32 %89, 448, !dbg !26
  %156 = lshr i32 %155, 6, !dbg !26
  %157 = and i32 %156, 52, !dbg !26
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !26
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %155, !dbg !26
  %160 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !26
  %161 = or disjoint i32 %89, 704, !dbg !26
  %162 = lshr i32 %161, 6, !dbg !26
  %163 = and i32 %162, 56, !dbg !26
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !26
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %161, !dbg !26
  %166 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !26
  %167 = or disjoint i32 %89, 960, !dbg !26
  %168 = lshr i32 %167, 6, !dbg !26
  %169 = and i32 %168, 60, !dbg !26
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !26
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %167, !dbg !26
  %172 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %173 = lshr i32 %11, 6, !dbg !26
  %174 = and i32 %173, 12, !dbg !26
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !26
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %90, !dbg !26
  %177 = or disjoint i32 %90, 1024, !dbg !26
  %178 = lshr i32 %177, 6, !dbg !26
  %179 = and i32 %178, 28, !dbg !26
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !26
  %181 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %177, !dbg !26
  %182 = or disjoint i32 %90, 2048, !dbg !26
  %183 = lshr i32 %182, 6, !dbg !26
  %184 = and i32 %183, 44, !dbg !26
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %184, !dbg !26
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %182, !dbg !26
  %187 = or disjoint i32 %90, 3072, !dbg !26
  %188 = lshr i32 %187, 6, !dbg !26
  %189 = and i32 %188, 60, !dbg !26
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !26
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %187, !dbg !26
  %192 = sext i32 %42 to i64, !dbg !27
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !27
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !28
  %196 = load <4 x float>, ptr addrspace(3) %176, align 16, !dbg !26
  %197 = load <4 x float>, ptr addrspace(3) %181, align 16, !dbg !26
  %198 = load <4 x float>, ptr addrspace(3) %186, align 16, !dbg !26
  %199 = load <4 x float>, ptr addrspace(3) %191, align 16, !dbg !26
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %26) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %201 = insertelement <1 x i32> poison, i32 %200, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %201, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %202 = load <4 x float>, ptr addrspace(3) %195, align 16, !dbg !28
  %203 = shufflevector <4 x float> %202, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %204 = shufflevector <4 x float> %199, <4 x float> %198, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %205 = shufflevector <4 x float> %197, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %206 = shufflevector <16 x float> %204, <16 x float> %205, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %207 = shufflevector <4 x float> %196, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %208 = shufflevector <16 x float> %206, <16 x float> %207, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !33
  %209 = fadd <16 x float> %208, %203, !dbg !33
  %210 = fcmp olt <16 x float> %209, zeroinitializer, !dbg !34
  %211 = extractelement <16 x i1> %210, i64 12, !dbg !28
  %212 = extractelement <16 x i1> %210, i64 13, !dbg !28
  %213 = extractelement <16 x i1> %210, i64 14, !dbg !28
  %214 = extractelement <16 x i1> %210, i64 15, !dbg !28
  %215 = extractelement <16 x i1> %210, i64 8, !dbg !28
  %216 = extractelement <16 x i1> %210, i64 9, !dbg !28
  %217 = extractelement <16 x i1> %210, i64 10, !dbg !28
  %218 = extractelement <16 x i1> %210, i64 11, !dbg !28
  %219 = extractelement <16 x i1> %210, i64 4, !dbg !28
  %220 = extractelement <16 x i1> %210, i64 5, !dbg !28
  %221 = extractelement <16 x i1> %210, i64 6, !dbg !28
  %222 = extractelement <16 x i1> %210, i64 7, !dbg !28
  %223 = extractelement <16 x i1> %210, i64 0, !dbg !28
  %224 = extractelement <16 x i1> %210, i64 1, !dbg !28
  %225 = extractelement <16 x i1> %210, i64 2, !dbg !28
  %226 = extractelement <16 x i1> %210, i64 3, !dbg !28
  %227 = shl i32 %31, 6, !dbg !35
  %228 = shl i32 %32, 6, !dbg !35
  %229 = shl i32 %33, 6, !dbg !35
  %230 = shl i32 %34, 6, !dbg !35
  %231 = mul i32 %40, 4393216, !dbg !36
  %232 = add i32 %231, %.decomposed, !dbg !37
  %233 = add i32 %232, %227, !dbg !38
  %234 = add i32 %232, %228, !dbg !38
  %235 = add i32 %232, %229, !dbg !38
  %236 = add i32 %232, %230, !dbg !38
  %237 = sext i32 %233 to i64, !dbg !39
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %237, !dbg !39
  %239 = sext i32 %234 to i64, !dbg !39
  %240 = getelementptr float, ptr addrspace(1) %2, i64 %239, !dbg !39
  %241 = sext i32 %235 to i64, !dbg !39
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !39
  %243 = sext i32 %236 to i64, !dbg !39
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !39
  %bc = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %245 = extractelement <16 x i32> %bc, i64 12, !dbg !40
  %246 = select i1 %211, i32 0, i32 %245, !dbg !28
  %bc23 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %247 = extractelement <16 x i32> %bc23, i64 13, !dbg !40
  %248 = select i1 %212, i32 0, i32 %247, !dbg !28
  %bc24 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %249 = extractelement <16 x i32> %bc24, i64 14, !dbg !40
  %250 = select i1 %213, i32 0, i32 %249, !dbg !28
  %bc25 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %251 = extractelement <16 x i32> %bc25, i64 15, !dbg !40
  %252 = select i1 %214, i32 0, i32 %251, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %248, i32 %250, i32 %252, ptr addrspace(1) %238, i1 %63) #2, !dbg !40
  %bc26 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %253 = extractelement <16 x i32> %bc26, i64 8, !dbg !40
  %254 = select i1 %215, i32 0, i32 %253, !dbg !28
  %bc27 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %255 = extractelement <16 x i32> %bc27, i64 9, !dbg !40
  %256 = select i1 %216, i32 0, i32 %255, !dbg !28
  %bc28 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %257 = extractelement <16 x i32> %bc28, i64 10, !dbg !40
  %258 = select i1 %217, i32 0, i32 %257, !dbg !28
  %bc29 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %259 = extractelement <16 x i32> %bc29, i64 11, !dbg !40
  %260 = select i1 %218, i32 0, i32 %259, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %256, i32 %258, i32 %260, ptr addrspace(1) %240, i1 %64) #2, !dbg !40
  %bc30 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %261 = extractelement <16 x i32> %bc30, i64 4, !dbg !40
  %262 = select i1 %219, i32 0, i32 %261, !dbg !28
  %bc31 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %263 = extractelement <16 x i32> %bc31, i64 5, !dbg !40
  %264 = select i1 %220, i32 0, i32 %263, !dbg !28
  %bc32 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %265 = extractelement <16 x i32> %bc32, i64 6, !dbg !40
  %266 = select i1 %221, i32 0, i32 %265, !dbg !28
  %bc33 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %267 = extractelement <16 x i32> %bc33, i64 7, !dbg !40
  %268 = select i1 %222, i32 0, i32 %267, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %264, i32 %266, i32 %268, ptr addrspace(1) %242, i1 %65) #2, !dbg !40
  %bc34 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %269 = extractelement <16 x i32> %bc34, i64 0, !dbg !40
  %270 = select i1 %223, i32 0, i32 %269, !dbg !28
  %bc35 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %271 = extractelement <16 x i32> %bc35, i64 1, !dbg !40
  %272 = select i1 %224, i32 0, i32 %271, !dbg !28
  %bc36 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %273 = extractelement <16 x i32> %bc36, i64 2, !dbg !40
  %274 = select i1 %225, i32 0, i32 %273, !dbg !28
  %bc37 = bitcast <16 x float> %209 to <16 x i32>, !dbg !40
  %275 = extractelement <16 x i32> %bc37, i64 3, !dbg !40
  %276 = select i1 %226, i32 0, i32 %275, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %270, i32 %272, i32 %274, i32 %276, ptr addrspace(1) %244, i1 %66) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_poi_fused_convolution_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_8", linkageName: "triton_poi_fused_convolution_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 46, scope: !7)
!37 = !DILocation(line: 37, column: 30, scope: !7)
!38 = !DILocation(line: 37, column: 38, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 57, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
