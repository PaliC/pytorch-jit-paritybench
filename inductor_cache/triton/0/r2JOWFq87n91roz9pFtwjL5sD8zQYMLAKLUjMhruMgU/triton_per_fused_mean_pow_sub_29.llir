; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 128, !dbg !14
  %12 = lshr i32 %8, 5, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %13 = sdiv i32 %.frozen, 64, !dbg !16
  %14 = mul i32 %13, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = shl nsw i32 %.decomposed, 3, !dbg !18
  %16 = shl i32 %12, 9, !dbg !19
  %17 = and i32 %16, 3584, !dbg !19
  %18 = or disjoint i32 %17, 4096, !dbg !19
  %19 = shl i32 %13, 13, !dbg !20
  %20 = or disjoint i32 %19, %17, !dbg !21
  %21 = add i32 %20, %15, !dbg !22
  %22 = or disjoint i32 %19, %18, !dbg !21
  %23 = add i32 %22, %15, !dbg !22
  %24 = or disjoint i32 %21, 1, !dbg !23
  %25 = or disjoint i32 %23, 1, !dbg !23
  %26 = or disjoint i32 %21, 2, !dbg !23
  %27 = or disjoint i32 %23, 2, !dbg !23
  %28 = or disjoint i32 %21, 3, !dbg !23
  %29 = or disjoint i32 %23, 3, !dbg !23
  %30 = or disjoint i32 %21, 4, !dbg !23
  %31 = or disjoint i32 %23, 4, !dbg !23
  %32 = or disjoint i32 %21, 5, !dbg !23
  %33 = or disjoint i32 %23, 5, !dbg !23
  %34 = or disjoint i32 %21, 6, !dbg !23
  %35 = or disjoint i32 %23, 6, !dbg !23
  %36 = or disjoint i32 %21, 7, !dbg !23
  %37 = or disjoint i32 %23, 7, !dbg !23
  %38 = sext i32 %21 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = sext i32 %23 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %24 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %25 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %26 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %27 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %28 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = sext i32 %29 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %30 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = sext i32 %31 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = sext i32 %32 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = sext i32 %33 to i64, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !24
  %62 = sext i32 %34 to i64, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !24
  %64 = sext i32 %35 to i64, !dbg !24
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !24
  %66 = sext i32 %36 to i64, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !24
  %68 = sext i32 %37 to i64, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %75 = bitcast i32 %74 to float, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %77 = bitcast i32 %76 to float, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %79 = bitcast i32 %78 to float, !dbg !25
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %92 = or disjoint i32 %15, 1, !dbg !26
  %93 = or disjoint i32 %15, 2, !dbg !26
  %94 = or disjoint i32 %15, 3, !dbg !26
  %95 = or disjoint i32 %15, 4, !dbg !26
  %96 = or disjoint i32 %15, 5, !dbg !26
  %97 = or disjoint i32 %15, 6, !dbg !26
  %98 = or disjoint i32 %15, 7, !dbg !26
  %99 = sext i32 %15 to i64, !dbg !27
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !27
  %101 = sext i32 %92 to i64, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !27
  %103 = sext i32 %93 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !27
  %105 = sext i32 %94 to i64, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !27
  %107 = sext i32 %95 to i64, !dbg !27
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !27
  %109 = sext i32 %96 to i64, !dbg !27
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !27
  %111 = sext i32 %97 to i64, !dbg !27
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !27
  %113 = sext i32 %98 to i64, !dbg !27
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !27
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %116 = bitcast i32 %115 to float, !dbg !28
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %120 = bitcast i32 %119 to float, !dbg !28
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %124 = bitcast i32 %123 to float, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %126 = bitcast i32 %125 to float, !dbg !28
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %137 = add nsw i32 %15, 16384, !dbg !29
  %138 = add i32 %20, %137, !dbg !30
  %139 = add i32 %22, %137, !dbg !30
  %140 = or disjoint i32 %138, 1, !dbg !31
  %141 = or disjoint i32 %139, 1, !dbg !31
  %142 = or disjoint i32 %138, 2, !dbg !31
  %143 = or disjoint i32 %139, 2, !dbg !31
  %144 = or disjoint i32 %138, 3, !dbg !31
  %145 = or disjoint i32 %139, 3, !dbg !31
  %146 = or disjoint i32 %138, 4, !dbg !31
  %147 = or disjoint i32 %139, 4, !dbg !31
  %148 = or disjoint i32 %138, 5, !dbg !31
  %149 = or disjoint i32 %139, 5, !dbg !31
  %150 = or disjoint i32 %138, 6, !dbg !31
  %151 = or disjoint i32 %139, 6, !dbg !31
  %152 = or disjoint i32 %138, 7, !dbg !31
  %153 = or disjoint i32 %139, 7, !dbg !31
  %154 = sext i32 %138 to i64, !dbg !32
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !32
  %156 = sext i32 %139 to i64, !dbg !32
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !32
  %158 = sext i32 %140 to i64, !dbg !32
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !32
  %160 = sext i32 %141 to i64, !dbg !32
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !32
  %162 = sext i32 %142 to i64, !dbg !32
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !32
  %164 = sext i32 %143 to i64, !dbg !32
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !32
  %166 = sext i32 %144 to i64, !dbg !32
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !32
  %168 = sext i32 %145 to i64, !dbg !32
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !32
  %170 = sext i32 %146 to i64, !dbg !32
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !32
  %172 = sext i32 %147 to i64, !dbg !32
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !32
  %174 = sext i32 %148 to i64, !dbg !32
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !32
  %176 = sext i32 %149 to i64, !dbg !32
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !32
  %178 = sext i32 %150 to i64, !dbg !32
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !32
  %180 = sext i32 %151 to i64, !dbg !32
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !32
  %182 = sext i32 %152 to i64, !dbg !32
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !32
  %184 = sext i32 %153 to i64, !dbg !32
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !32
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %187 = bitcast i32 %186 to float, !dbg !33
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %189 = bitcast i32 %188 to float, !dbg !33
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %191 = bitcast i32 %190 to float, !dbg !33
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %193 = bitcast i32 %192 to float, !dbg !33
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %195 = bitcast i32 %194 to float, !dbg !33
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %197 = bitcast i32 %196 to float, !dbg !33
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %11, i32 0, i1 %11) #3, !dbg !33
  %208 = fadd float %71, %116, !dbg !34
  %209 = fadd float %73, %118, !dbg !34
  %210 = fadd float %75, %120, !dbg !34
  %211 = fadd float %77, %122, !dbg !34
  %212 = fadd float %79, %124, !dbg !34
  %213 = fadd float %81, %126, !dbg !34
  %214 = fadd float %116, %187, !dbg !35
  %215 = fadd float %118, %189, !dbg !35
  %216 = fadd float %120, %191, !dbg !35
  %217 = fadd float %122, %193, !dbg !35
  %218 = fadd float %124, %195, !dbg !35
  %219 = fadd float %126, %197, !dbg !35
  %220 = fsub float %208, %214, !dbg !36
  %221 = fsub float %209, %215, !dbg !36
  %222 = fsub float %210, %216, !dbg !36
  %223 = fsub float %211, %217, !dbg !36
  %224 = fsub float %212, %218, !dbg !36
  %225 = fsub float %213, %219, !dbg !36
  %226 = fmul float %220, %220, !dbg !37
  %227 = fmul float %221, %221, !dbg !37
  %228 = fmul float %222, %222, !dbg !37
  %229 = fmul float %223, %223, !dbg !37
  %230 = fmul float %224, %224, !dbg !37
  %231 = fmul float %225, %225, !dbg !37
  %232 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !25
  %233 = insertelement <2 x i32> %232, i32 %83, i64 1, !dbg !25
  %234 = bitcast <2 x i32> %233 to <2 x float>, !dbg !25
  %235 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !28
  %236 = insertelement <2 x i32> %235, i32 %128, i64 1, !dbg !28
  %237 = bitcast <2 x i32> %236 to <2 x float>, !dbg !28
  %238 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !33
  %239 = insertelement <2 x i32> %238, i32 %199, i64 1, !dbg !33
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !33
  %241 = fadd <2 x float> %234, %237, !dbg !34
  %242 = fadd <2 x float> %237, %240, !dbg !35
  %243 = fsub <2 x float> %241, %242, !dbg !36
  %244 = fmul <2 x float> %243, %243, !dbg !37
  %245 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !25
  %246 = insertelement <2 x i32> %245, i32 %85, i64 1, !dbg !25
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !25
  %248 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !28
  %249 = insertelement <2 x i32> %248, i32 %130, i64 1, !dbg !28
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !28
  %251 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !33
  %252 = insertelement <2 x i32> %251, i32 %201, i64 1, !dbg !33
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !33
  %254 = fadd <2 x float> %247, %250, !dbg !34
  %255 = fadd <2 x float> %250, %253, !dbg !35
  %256 = fsub <2 x float> %254, %255, !dbg !36
  %257 = fmul <2 x float> %256, %256, !dbg !37
  %258 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !25
  %259 = insertelement <2 x i32> %258, i32 %87, i64 1, !dbg !25
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !25
  %261 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !28
  %262 = insertelement <2 x i32> %261, i32 %132, i64 1, !dbg !28
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !28
  %264 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !33
  %265 = insertelement <2 x i32> %264, i32 %203, i64 1, !dbg !33
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !33
  %267 = fadd <2 x float> %260, %263, !dbg !34
  %268 = fadd <2 x float> %263, %266, !dbg !35
  %269 = fsub <2 x float> %267, %268, !dbg !36
  %270 = fmul <2 x float> %269, %269, !dbg !37
  %271 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !25
  %272 = insertelement <2 x i32> %271, i32 %89, i64 1, !dbg !25
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !25
  %274 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !28
  %275 = insertelement <2 x i32> %274, i32 %134, i64 1, !dbg !28
  %276 = bitcast <2 x i32> %275 to <2 x float>, !dbg !28
  %277 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !33
  %278 = insertelement <2 x i32> %277, i32 %205, i64 1, !dbg !33
  %279 = bitcast <2 x i32> %278 to <2 x float>, !dbg !33
  %280 = fadd <2 x float> %273, %276, !dbg !34
  %281 = fadd <2 x float> %276, %279, !dbg !35
  %282 = fsub <2 x float> %280, %281, !dbg !36
  %283 = fmul <2 x float> %282, %282, !dbg !37
  %284 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !25
  %285 = insertelement <2 x i32> %284, i32 %91, i64 1, !dbg !25
  %286 = bitcast <2 x i32> %285 to <2 x float>, !dbg !25
  %287 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !28
  %288 = insertelement <2 x i32> %287, i32 %136, i64 1, !dbg !28
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !28
  %290 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !33
  %291 = insertelement <2 x i32> %290, i32 %207, i64 1, !dbg !33
  %292 = bitcast <2 x i32> %291 to <2 x float>, !dbg !33
  %293 = fadd <2 x float> %286, %289, !dbg !34
  %294 = fadd <2 x float> %289, %292, !dbg !35
  %295 = fsub <2 x float> %293, %294, !dbg !36
  %296 = fmul <2 x float> %295, %295, !dbg !37
  %297 = fadd float %226, %227, !dbg !38
  %298 = fadd float %297, %228, !dbg !38
  %299 = fadd float %298, %229, !dbg !38
  %300 = fadd float %299, %230, !dbg !38
  %301 = fadd float %300, %231, !dbg !38
  %302 = extractelement <2 x float> %244, i64 0, !dbg !38
  %303 = fadd float %301, %302, !dbg !38
  %304 = extractelement <2 x float> %244, i64 1, !dbg !38
  %305 = fadd float %303, %304, !dbg !38
  %306 = extractelement <2 x float> %257, i64 0, !dbg !38
  %307 = fadd float %305, %306, !dbg !38
  %308 = extractelement <2 x float> %257, i64 1, !dbg !38
  %309 = fadd float %307, %308, !dbg !38
  %310 = extractelement <2 x float> %270, i64 0, !dbg !38
  %311 = fadd float %309, %310, !dbg !38
  %312 = extractelement <2 x float> %270, i64 1, !dbg !38
  %313 = fadd float %311, %312, !dbg !38
  %314 = extractelement <2 x float> %283, i64 0, !dbg !38
  %315 = fadd float %313, %314, !dbg !38
  %316 = extractelement <2 x float> %283, i64 1, !dbg !38
  %317 = fadd float %315, %316, !dbg !38
  %318 = extractelement <2 x float> %296, i64 0, !dbg !38
  %319 = fadd float %317, %318, !dbg !38
  %320 = extractelement <2 x float> %296, i64 1, !dbg !38
  %321 = fadd float %319, %320, !dbg !38
  %322 = and i32 %12, 7, !dbg !43
  %323 = shl nuw nsw i32 %9, 3, !dbg !43
  %324 = or disjoint i32 %323, %322, !dbg !43
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i32 %324, !dbg !43
  %326 = bitcast float %321 to i32, !dbg !43
  %327 = select i1 %11, i32 %326, i32 0, !dbg !38
  %328 = insertelement <1 x i32> poison, i32 %327, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %328, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %329 = icmp slt i32 %8, 256, !dbg !43
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %331 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %330, i1 %329) #3, !dbg !43
  %332 = bitcast i32 %331 to float, !dbg !43
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !43
  %334 = bitcast i32 %333 to float, !dbg !43
  %335 = fadd float %332, %334, !dbg !38
  %336 = bitcast float %335 to i32, !dbg !43
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 2, i32 31), !dbg !43
  %338 = bitcast i32 %337 to float, !dbg !43
  %339 = fadd float %335, %338, !dbg !38
  %340 = bitcast float %339 to i32, !dbg !43
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 1, i32 31), !dbg !43
  %342 = bitcast i32 %341 to float, !dbg !43
  %343 = fadd float %339, %342, !dbg !38
  %344 = and i32 %8, 7, !dbg !43
  %345 = icmp eq i32 %344, 0, !dbg !43
  %346 = and i1 %329, %345, !dbg !43
  %347 = bitcast float %343 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %347, i1 %346) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %323, !dbg !43
  %349 = load i32, ptr addrspace(3) %348, align 16, !dbg !43
  %350 = sext i32 %10 to i64, !dbg !44
  %351 = getelementptr float, ptr addrspace(1) %2, i64 %350, !dbg !44
  %352 = icmp eq i32 %322, 0, !dbg !45
  %353 = and i1 %352, %11, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %351, i1 %353) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccogwlezhowuk6po6yzfpiritqemz3x5h7wa55psroiavpydgt7e.py", directory: "inductor_cache/co")
!4 = !{ptr @triton_per_fused_mean_pow_sub_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_29", linkageName: "triton_per_fused_mean_pow_sub_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 32, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 60, scope: !7)
!21 = !DILocation(line: 33, column: 37, scope: !7)
!22 = !DILocation(line: 33, column: 55, scope: !7)
!23 = !DILocation(line: 33, column: 97, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 109, scope: !7)
!26 = !DILocation(line: 34, column: 38, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 50, scope: !7)
!29 = !DILocation(line: 35, column: 38, scope: !7)
!30 = !DILocation(line: 35, column: 63, scope: !7)
!31 = !DILocation(line: 35, column: 105, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 117, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 43, column: 25, scope: !7)
!45 = !DILocation(line: 43, column: 37, scope: !7)
!46 = !DILocation(line: 43, column: 4, scope: !7)
