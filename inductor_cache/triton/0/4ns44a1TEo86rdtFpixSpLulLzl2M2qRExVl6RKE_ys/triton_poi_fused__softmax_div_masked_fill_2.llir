; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_div_masked_fill_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 64, !dbg !14
  %14 = srem i32 %11, 4, !dbg !15
  %15 = srem i32 %12, 4, !dbg !15
  %16 = sdiv i32 %11, 16, !dbg !16
  %17 = shl nsw i32 %14, 2, !dbg !17
  %18 = shl nsw i32 %15, 2, !dbg !17
  %19 = shl nsw i32 %16, 4, !dbg !18
  %20 = add i32 %17, %19, !dbg !19
  %21 = add i32 %19, %18, !dbg !19
  %22 = sext i32 %20 to i64, !dbg !20
  %23 = getelementptr i1, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = sext i32 %21 to i64, !dbg !20
  %25 = getelementptr i1, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %13) #1, !dbg !21
  %27 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %13) #1, !dbg !21
  %28 = shl i32 %11, 2, !dbg !22
  %29 = shl i32 %12, 2, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #1, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !24
  %36 = or disjoint i32 %17, 1, !dbg !25
  %37 = or disjoint i32 %18, 1, !dbg !25
  %38 = add i32 %36, %19, !dbg !26
  %39 = add i32 %37, %19, !dbg !26
  %40 = sext i32 %38 to i64, !dbg !27
  %41 = getelementptr i1, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr i1, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %13) #1, !dbg !28
  %45 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !28
  %46 = or disjoint i32 %28, 1, !dbg !29
  %47 = or disjoint i32 %29, 1, !dbg !29
  %48 = sext i32 %46 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !30
  %50 = sext i32 %47 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %13) #1, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %13) #1, !dbg !31
  %54 = or disjoint i32 %17, 2, !dbg !32
  %55 = or disjoint i32 %18, 2, !dbg !32
  %56 = add i32 %54, %19, !dbg !33
  %57 = add i32 %55, %19, !dbg !33
  %58 = sext i32 %56 to i64, !dbg !34
  %59 = getelementptr i1, ptr addrspace(1) %0, i64 %58, !dbg !34
  %60 = sext i32 %57 to i64, !dbg !34
  %61 = getelementptr i1, ptr addrspace(1) %0, i64 %60, !dbg !34
  %62 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %13) #1, !dbg !35
  %63 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !35
  %.not4 = icmp eq i8 %62, 0, !dbg !35
  %.not5 = icmp eq i8 %63, 0, !dbg !35
  %64 = or disjoint i32 %28, 2, !dbg !36
  %65 = or disjoint i32 %29, 2, !dbg !36
  %66 = sext i32 %64 to i64, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !37
  %68 = sext i32 %65 to i64, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %13) #1, !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %13) #1, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = or disjoint i32 %17, 3, !dbg !39
  %75 = or disjoint i32 %18, 3, !dbg !39
  %76 = add i32 %74, %19, !dbg !40
  %77 = add i32 %75, %19, !dbg !40
  %78 = sext i32 %76 to i64, !dbg !41
  %79 = getelementptr i1, ptr addrspace(1) %0, i64 %78, !dbg !41
  %80 = sext i32 %77 to i64, !dbg !41
  %81 = getelementptr i1, ptr addrspace(1) %0, i64 %80, !dbg !41
  %82 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %13) #1, !dbg !42
  %83 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %81, i1 %13) #1, !dbg !42
  %.not6 = icmp eq i8 %82, 0, !dbg !42
  %.not7 = icmp eq i8 %83, 0, !dbg !42
  %84 = or disjoint i32 %28, 3, !dbg !43
  %85 = or disjoint i32 %29, 3, !dbg !43
  %86 = sext i32 %84 to i64, !dbg !44
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !44
  %88 = sext i32 %85 to i64, !dbg !44
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !44
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %13) #1, !dbg !45
  %91 = bitcast i32 %90 to float, !dbg !45
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %13) #1, !dbg !45
  %93 = bitcast i32 %92 to float, !dbg !45
  %94 = insertelement <2 x i8> poison, i8 %26, i64 0, !dbg !21
  %95 = insertelement <2 x i8> %94, i8 %44, i64 1, !dbg !21
  %96 = icmp eq <2 x i8> %95, zeroinitializer, !dbg !21
  %97 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !24
  %98 = insertelement <2 x i32> %97, i32 %52, i64 1, !dbg !24
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !24
  %100 = select <2 x i1> %96, <2 x float> %99, <2 x float> splat (float -1.000000e+09), !dbg !46
  %101 = insertelement <2 x i8> poison, i8 %27, i64 0, !dbg !21
  %102 = insertelement <2 x i8> %101, i8 %45, i64 1, !dbg !21
  %103 = icmp eq <2 x i8> %102, zeroinitializer, !dbg !21
  %104 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %105 = insertelement <2 x i32> %104, i32 %53, i64 1, !dbg !24
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !24
  %107 = select <2 x i1> %103, <2 x float> %106, <2 x float> splat (float -1.000000e+09), !dbg !46
  %108 = extractelement <2 x float> %100, i64 0, !dbg !47
  %109 = extractelement <2 x float> %100, i64 1, !dbg !48
  %110 = fcmp ogt float %108, %109, !dbg !49
  %111 = extractelement <2 x float> %107, i64 0, !dbg !47
  %112 = extractelement <2 x float> %107, i64 1, !dbg !48
  %113 = fcmp ogt float %111, %112, !dbg !49
  %114 = fcmp uno float %108, 0.000000e+00, !dbg !53
  %115 = fcmp uno float %111, 0.000000e+00, !dbg !53
  %116 = or i1 %114, %110, !dbg !54
  %117 = or i1 %115, %113, !dbg !54
  %118 = select i1 %116, float %108, float %109, !dbg !55
  %119 = select i1 %117, float %111, float %112, !dbg !55
  %120 = select i1 %.not4, float %71, float -1.000000e+09, !dbg !56
  %121 = select i1 %.not5, float %73, float -1.000000e+09, !dbg !56
  %122 = fcmp ogt float %118, %120, !dbg !57
  %123 = fcmp ogt float %119, %121, !dbg !57
  %124 = fcmp uno float %118, 0.000000e+00, !dbg !59
  %125 = fcmp uno float %119, 0.000000e+00, !dbg !59
  %126 = or i1 %124, %122, !dbg !60
  %127 = or i1 %125, %123, !dbg !60
  %128 = select i1 %126, float %118, float %120, !dbg !61
  %129 = select i1 %127, float %119, float %121, !dbg !61
  %130 = select i1 %.not6, float %91, float -1.000000e+09, !dbg !62
  %131 = select i1 %.not7, float %93, float -1.000000e+09, !dbg !62
  %132 = fcmp ogt float %128, %130, !dbg !63
  %133 = fcmp ogt float %129, %131, !dbg !63
  %134 = fcmp uno float %128, 0.000000e+00, !dbg !65
  %135 = fcmp uno float %129, 0.000000e+00, !dbg !65
  %136 = or i1 %134, %132, !dbg !66
  %137 = or i1 %135, %133, !dbg !66
  %138 = select i1 %136, float %128, float %130, !dbg !67
  %139 = select i1 %137, float %129, float %131, !dbg !67
  %140 = fsub float %108, %138, !dbg !47
  %141 = fsub float %111, %139, !dbg !47
  %142 = fmul float %140, 0x3FF7154760000000, !dbg !68
  %143 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %142) #1, !dbg !68
  %144 = fmul float %141, 0x3FF7154760000000, !dbg !68
  %145 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %144) #1, !dbg !68
  %146 = fsub float %109, %138, !dbg !48
  %147 = fsub float %112, %139, !dbg !48
  %148 = fmul float %146, 0x3FF7154760000000, !dbg !69
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #1, !dbg !69
  %150 = fmul float %147, 0x3FF7154760000000, !dbg !69
  %151 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %150) #1, !dbg !69
  %152 = fadd float %143, %149, !dbg !70
  %153 = fadd float %145, %151, !dbg !70
  %154 = fsub float %120, %138, !dbg !71
  %155 = fsub float %121, %139, !dbg !71
  %156 = fmul float %154, 0x3FF7154760000000, !dbg !72
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #1, !dbg !72
  %158 = fmul float %155, 0x3FF7154760000000, !dbg !72
  %159 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %158) #1, !dbg !72
  %160 = fadd float %152, %157, !dbg !73
  %161 = fadd float %153, %159, !dbg !73
  %162 = fsub float %130, %138, !dbg !74
  %163 = fsub float %131, %139, !dbg !74
  %164 = fmul float %162, 0x3FF7154760000000, !dbg !75
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #1, !dbg !75
  %166 = fmul float %163, 0x3FF7154760000000, !dbg !75
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #1, !dbg !75
  %168 = fadd float %160, %165, !dbg !76
  %169 = fadd float %161, %167, !dbg !76
  %170 = sext i32 %11 to i64, !dbg !77
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %170, !dbg !77
  %172 = bitcast float %138 to i32, !dbg !78
  %173 = bitcast float %139 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %173, ptr addrspace(1) %171, i1 %13) #1, !dbg !78
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %170, !dbg !79
  %175 = bitcast float %168 to i32, !dbg !80
  %176 = bitcast float %169 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 %13) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxwi4jgiblzhi2gzgdqrp3oz43pas3rju2idgyz35j4dj57txsml.py", directory: "inductor_cache/xw")
!4 = !{ptr @triton_poi_fused__softmax_div_masked_fill_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_div_masked_fill_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_div_masked_fill_2", linkageName: "triton_poi_fused__softmax_div_masked_fill_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 40, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 32, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 37, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 41, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 49, scope: !7)
!29 = !DILocation(line: 30, column: 34, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 41, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 31, column: 42, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 50, scope: !7)
!36 = !DILocation(line: 32, column: 35, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 42, scope: !7)
!39 = !DILocation(line: 33, column: 35, scope: !7)
!40 = !DILocation(line: 33, column: 42, scope: !7)
!41 = !DILocation(line: 33, column: 31, scope: !7)
!42 = !DILocation(line: 33, column: 50, scope: !7)
!43 = !DILocation(line: 34, column: 35, scope: !7)
!44 = !DILocation(line: 34, column: 31, scope: !7)
!45 = !DILocation(line: 34, column: 42, scope: !7)
!46 = !DILocation(line: 38, column: 32, scope: !7)
!47 = !DILocation(line: 48, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 19, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 41, column: 41, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 43, column: 34, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !58)
!58 = !DILocation(line: 44, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !58)
!62 = !DILocation(line: 46, column: 34, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !64)
!64 = !DILocation(line: 47, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !64)
!68 = !DILocation(line: 49, column: 24, scope: !7)
!69 = !DILocation(line: 51, column: 24, scope: !7)
!70 = !DILocation(line: 52, column: 20, scope: !7)
!71 = !DILocation(line: 53, column: 20, scope: !7)
!72 = !DILocation(line: 54, column: 24, scope: !7)
!73 = !DILocation(line: 55, column: 20, scope: !7)
!74 = !DILocation(line: 56, column: 20, scope: !7)
!75 = !DILocation(line: 57, column: 24, scope: !7)
!76 = !DILocation(line: 58, column: 20, scope: !7)
!77 = !DILocation(line: 59, column: 25, scope: !7)
!78 = !DILocation(line: 59, column: 37, scope: !7)
!79 = !DILocation(line: 60, column: 25, scope: !7)
!80 = !DILocation(line: 60, column: 37, scope: !7)
!81 = !DILocation(line: 60, column: 4, scope: !7)
