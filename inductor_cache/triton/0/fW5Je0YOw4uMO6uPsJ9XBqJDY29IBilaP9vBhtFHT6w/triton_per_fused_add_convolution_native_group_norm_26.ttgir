#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0)
#loc1 = loc(unknown)
#loc22 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":43:58)
#loc29 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":50:59)
#loc43 = loc(callsite(#loc1 at #loc22))
#loc47 = loc(callsite(#loc1 at #loc29))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_convolution_native_group_norm_26(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 9.99999997E-7 : f32 loc(#loc1)
    %cst_0 = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc3)
    %2 = arith.divsi %1, %cst_2 : tensor<256xi32, #blocked> loc(#loc4)
    %3 = arith.remsi %0, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %0, %c256_i32 : i32 loc(#loc6)
    %5 = tt.splat %4 : i32 -> tensor<256xi32, #blocked> loc(#loc7)
    %6 = arith.addi %1, %5 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc8)
    %9 = tt.load %8 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = arith.muli %3, %c16_i32 : i32 loc(#loc10)
    %11 = tt.splat %10 : i32 -> tensor<256xi32, #blocked> loc(#loc11)
    %12 = arith.addi %2, %11 : tensor<256xi32, #blocked> loc(#loc11)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = tt.addptr %13, %12 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc12)
    %15 = tt.load %14 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %16 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %17 = tt.addptr %16, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc14)
    %18 = tt.load %17 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    %19 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %20 = tt.addptr %19, %12 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc16)
    %21 = tt.load %20 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc17)
    %22 = arith.addf %9, %15 : tensor<256xf32, #blocked> loc(#loc18)
    %23 = arith.addf %18, %21 : tensor<256xf32, #blocked> loc(#loc19)
    %24 = arith.addf %22, %23 : tensor<256xf32, #blocked> loc(#loc20)
    %25 = "tt.reduce"(%24) <{axis = 0 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc22)), %arg10: f32 loc(callsite(#loc1 at #loc22))):
      %45 = arith.addf %arg9, %arg10 : f32 loc(#loc49)
      tt.reduce.return %45 : f32 loc(#loc42)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc42)
    %26 = arith.addf %25, %cst_1 : f32 loc(#loc45)
    %27 = arith.divf %26, %cst_0 : f32 loc(#loc26)
    %28 = tt.splat %27 : f32 -> tensor<1xf32, #blocked1> loc(#loc26)
    %29 = tt.splat %27 : f32 -> tensor<256xf32, #blocked> loc(#loc27)
    %30 = arith.subf %24, %29 : tensor<256xf32, #blocked> loc(#loc27)
    %31 = arith.mulf %30, %30 : tensor<256xf32, #blocked> loc(#loc28)
    %32 = "tt.reduce"(%31) <{axis = 0 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc29)), %arg10: f32 loc(callsite(#loc1 at #loc29))):
      %45 = arith.addf %arg9, %arg10 : f32 loc(#loc50)
      tt.reduce.return %45 : f32 loc(#loc46)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc46)
    %33 = arith.addf %32, %cst_1 : f32 loc(#loc48)
    %34 = tt.splat %33 : f32 -> tensor<1xf32, #blocked1> loc(#loc48)
    %35 = arith.divf %33, %cst_0 : f32 loc(#loc31)
    %36 = arith.addf %35, %cst : f32 loc(#loc32)
    %37 = tt.extern_elementwise %36 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (f32) -> f32 loc(#loc33)
    %38 = tt.splat %37 : f32 -> tensor<1xf32, #blocked1> loc(#loc33)
    tt.store %8, %24 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc34)
    %39 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc35)
    %40 = tt.splat %39 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    tt.store %40, %38 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %41 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc37)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc37)
    tt.store %42, %28 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %43 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc39)
    %44 = tt.splat %43 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc39)
    tt.store %44, %34 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":24:28)
#loc3 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":27:26)
#loc4 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":32:19)
#loc5 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":33:19)
#loc6 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":34:43)
#loc7 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":34:39)
#loc8 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":34:34)
#loc9 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":34:48)
#loc10 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":35:38)
#loc11 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":35:35)
#loc12 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":35:30)
#loc13 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":35:43)
#loc14 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":36:30)
#loc15 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":36:44)
#loc16 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":37:30)
#loc17 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":37:43)
#loc18 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":38:18)
#loc19 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":39:18)
#loc20 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":40:18)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc25 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":43:45)
#loc26 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":46:20)
#loc27 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":47:19)
#loc28 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":48:20)
#loc30 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":50:45)
#loc31 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":52:20)
#loc32 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":54:20)
#loc33 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":55:28)
#loc34 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":56:48)
#loc35 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":57:25)
#loc36 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":57:37)
#loc37 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":58:25)
#loc38 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":58:37)
#loc39 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":59:25)
#loc40 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":59:37)
#loc41 = loc("inductor_cache/7c/c7cm27aw3elon5jjakfylarbi5axyciqbr23bvwo4pzymf2demsl.py":59:4)
#loc42 = loc(callsite(#loc21 at #loc22))
#loc44 = loc(callsite(#loc23 at #loc21))
#loc45 = loc(callsite(#loc24 at #loc25))
#loc46 = loc(callsite(#loc21 at #loc29))
#loc48 = loc(callsite(#loc24 at #loc30))
#loc49 = loc(callsite(#loc44 at #loc22))
#loc50 = loc(callsite(#loc44 at #loc29))
