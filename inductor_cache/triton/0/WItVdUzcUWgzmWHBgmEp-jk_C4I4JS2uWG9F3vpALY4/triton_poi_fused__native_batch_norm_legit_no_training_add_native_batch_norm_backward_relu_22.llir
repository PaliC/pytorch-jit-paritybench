; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = srem i32 %17, 640, !dbg !14
  %20 = srem i32 %18, 640, !dbg !14
  %21 = sext i32 %17 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = sext i32 %18 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !15
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %39 = sext i32 %19 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !23
  %41 = sext i32 %20 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %52 = bitcast i32 %48 to float, !dbg !26
  %53 = bitcast i32 %49 to float, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %61 = bitcast i32 %57 to float, !dbg !26
  %62 = bitcast i32 %58 to float, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !27
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !27
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !28
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %7, i64 %39, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %7, i64 %41, !dbg !29
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !30
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !30
  %73 = fadd float %52, 0x3EE4F8B580000000, !dbg !31
  %74 = fadd float %53, 0x3EE4F8B580000000, !dbg !31
  %75 = fadd float %54, 0x3EE4F8B580000000, !dbg !31
  %76 = fadd float %55, 0x3EE4F8B580000000, !dbg !31
  %77 = fadd float %61, 0x3EE4F8B580000000, !dbg !31
  %78 = fadd float %62, 0x3EE4F8B580000000, !dbg !31
  %79 = fadd float %63, 0x3EE4F8B580000000, !dbg !31
  %80 = fadd float %64, 0x3EE4F8B580000000, !dbg !31
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %81, 0, !dbg !32
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %82, 0, !dbg !32
  br i1 %.not.i, label %88, label %83, !dbg !32

83:                                               ; preds = %11
  br i1 %.not1.i, label %86, label %84, !dbg !32

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

88:                                               ; preds = %11
  br i1 %.not1.i, label %91, label %89, !dbg !32

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !32
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %93, 0, !dbg !32
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !32
  br i1 %.not.i1, label %100, label %95, !dbg !32

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !32

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !32

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !32
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i6 = icmp eq i32 %105, 0, !dbg !32
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i9 = icmp eq i32 %106, 0, !dbg !32
  br i1 %.not.i6, label %112, label %107, !dbg !32

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !32

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

112:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %115, label %113, !dbg !32

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %108, %110, %113, %115
  %.0.i8 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !32
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %117, 0, !dbg !32
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %118, 0, !dbg !32
  br i1 %.not.i11, label %124, label %119, !dbg !32

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !32

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

124:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %127, label %125, !dbg !32

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %120, %122, %125, %127
  %.0.i13 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !32
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i16 = icmp eq i32 %129, 0, !dbg !32
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i19 = icmp eq i32 %130, 0, !dbg !32
  br i1 %.not.i16, label %136, label %131, !dbg !32

131:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %134, label %132, !dbg !32

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

136:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %139, label %137, !dbg !32

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %132, %134, %137, %139
  %.0.i18 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !32
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i21 = icmp eq i32 %141, 0, !dbg !32
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i24 = icmp eq i32 %142, 0, !dbg !32
  br i1 %.not.i21, label %148, label %143, !dbg !32

143:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %146, label %144, !dbg !32

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

148:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %151, label %149, !dbg !32

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %144, %146, %149, %151
  %.0.i23 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !32
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i26 = icmp eq i32 %153, 0, !dbg !32
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i29 = icmp eq i32 %154, 0, !dbg !32
  br i1 %.not.i26, label %160, label %155, !dbg !32

155:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %158, label %156, !dbg !32

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

160:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %163, label %161, !dbg !32

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %156, %158, %161, %163
  %.0.i28 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !32
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i31 = icmp eq i32 %165, 0, !dbg !32
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i34 = icmp eq i32 %166, 0, !dbg !32
  br i1 %.not.i31, label %172, label %167, !dbg !32

167:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %170, label %168, !dbg !32

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

172:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %175, label %173, !dbg !32

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %168, %170, %173, %175
  %.0.i33 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %178 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %179 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %180 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %182 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %183 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %184 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %185 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %186 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %187 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %188 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %189 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %190 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %191 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %192 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %193 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %194 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %195 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %196 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %197 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %198 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %199 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %200 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %201 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %202 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %203 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %204 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %205 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %206 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %207 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %208 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %209 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %210 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %211 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %212 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %213 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %214 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %215 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %216 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %217 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !30
  %219 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !30
  %220 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !30
  %221 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !30
  %222 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !30
  %223 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !30
  %224 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !30
  %225 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %226 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %227 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %228 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %229 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %230 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %231 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %232 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !33
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !33
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !33
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !33
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !33
  %241 = insertelement <8 x i32> poison, i32 %177, i64 0, !dbg !16
  %242 = insertelement <8 x i32> %241, i32 %182, i64 1, !dbg !16
  %243 = insertelement <8 x i32> %242, i32 %187, i64 2, !dbg !16
  %244 = insertelement <8 x i32> %243, i32 %192, i64 3, !dbg !16
  %245 = insertelement <8 x i32> %244, i32 %197, i64 4, !dbg !16
  %246 = insertelement <8 x i32> %245, i32 %202, i64 5, !dbg !16
  %247 = insertelement <8 x i32> %246, i32 %207, i64 6, !dbg !16
  %248 = insertelement <8 x i32> %247, i32 %212, i64 7, !dbg !16
  %249 = bitcast <8 x i32> %248 to <8 x float>, !dbg !16
  %250 = insertelement <8 x i32> poison, i32 %178, i64 0, !dbg !18
  %251 = insertelement <8 x i32> %250, i32 %183, i64 1, !dbg !18
  %252 = insertelement <8 x i32> %251, i32 %188, i64 2, !dbg !18
  %253 = insertelement <8 x i32> %252, i32 %193, i64 3, !dbg !18
  %254 = insertelement <8 x i32> %253, i32 %198, i64 4, !dbg !18
  %255 = insertelement <8 x i32> %254, i32 %203, i64 5, !dbg !18
  %256 = insertelement <8 x i32> %255, i32 %208, i64 6, !dbg !18
  %257 = insertelement <8 x i32> %256, i32 %213, i64 7, !dbg !18
  %258 = bitcast <8 x i32> %257 to <8 x float>, !dbg !18
  %259 = fadd <8 x float> %249, %258, !dbg !34
  %260 = insertelement <8 x i32> poison, i32 %179, i64 0, !dbg !20
  %261 = insertelement <8 x i32> %260, i32 %184, i64 1, !dbg !20
  %262 = insertelement <8 x i32> %261, i32 %189, i64 2, !dbg !20
  %263 = insertelement <8 x i32> %262, i32 %194, i64 3, !dbg !20
  %264 = insertelement <8 x i32> %263, i32 %199, i64 4, !dbg !20
  %265 = insertelement <8 x i32> %264, i32 %204, i64 5, !dbg !20
  %266 = insertelement <8 x i32> %265, i32 %209, i64 6, !dbg !20
  %267 = insertelement <8 x i32> %266, i32 %214, i64 7, !dbg !20
  %268 = bitcast <8 x i32> %267 to <8 x float>, !dbg !20
  %269 = fadd <8 x float> %259, %268, !dbg !35
  %270 = insertelement <8 x i32> poison, i32 %180, i64 0, !dbg !22
  %271 = insertelement <8 x i32> %270, i32 %185, i64 1, !dbg !22
  %272 = insertelement <8 x i32> %271, i32 %190, i64 2, !dbg !22
  %273 = insertelement <8 x i32> %272, i32 %195, i64 3, !dbg !22
  %274 = insertelement <8 x i32> %273, i32 %200, i64 4, !dbg !22
  %275 = insertelement <8 x i32> %274, i32 %205, i64 5, !dbg !22
  %276 = insertelement <8 x i32> %275, i32 %210, i64 6, !dbg !22
  %277 = insertelement <8 x i32> %276, i32 %215, i64 7, !dbg !22
  %278 = bitcast <8 x i32> %277 to <8 x float>, !dbg !22
  %279 = fadd <8 x float> %269, %278, !dbg !36
  %280 = insertelement <8 x i32> poison, i32 %181, i64 0, !dbg !24
  %281 = insertelement <8 x i32> %280, i32 %186, i64 1, !dbg !24
  %282 = insertelement <8 x i32> %281, i32 %191, i64 2, !dbg !24
  %283 = insertelement <8 x i32> %282, i32 %196, i64 3, !dbg !24
  %284 = insertelement <8 x i32> %283, i32 %201, i64 4, !dbg !24
  %285 = insertelement <8 x i32> %284, i32 %206, i64 5, !dbg !24
  %286 = insertelement <8 x i32> %285, i32 %211, i64 6, !dbg !24
  %287 = insertelement <8 x i32> %286, i32 %216, i64 7, !dbg !24
  %288 = bitcast <8 x i32> %287 to <8 x float>, !dbg !24
  %289 = fsub <8 x float> %279, %288, !dbg !37
  %290 = insertelement <8 x i32> poison, i32 %217, i64 0, !dbg !30
  %291 = insertelement <8 x i32> %290, i32 %218, i64 1, !dbg !30
  %292 = insertelement <8 x i32> %291, i32 %219, i64 2, !dbg !30
  %293 = insertelement <8 x i32> %292, i32 %220, i64 3, !dbg !30
  %294 = insertelement <8 x i32> %293, i32 %221, i64 4, !dbg !30
  %295 = insertelement <8 x i32> %294, i32 %222, i64 5, !dbg !30
  %296 = insertelement <8 x i32> %295, i32 %223, i64 6, !dbg !30
  %297 = insertelement <8 x i32> %296, i32 %224, i64 7, !dbg !30
  %298 = bitcast <8 x i32> %297 to <8 x float>, !dbg !30
  %299 = insertelement <8 x i32> poison, i32 %225, i64 0, !dbg !28
  %300 = insertelement <8 x i32> %299, i32 %226, i64 1, !dbg !28
  %301 = insertelement <8 x i32> %300, i32 %227, i64 2, !dbg !28
  %302 = insertelement <8 x i32> %301, i32 %228, i64 3, !dbg !28
  %303 = insertelement <8 x i32> %302, i32 %229, i64 4, !dbg !28
  %304 = insertelement <8 x i32> %303, i32 %230, i64 5, !dbg !28
  %305 = insertelement <8 x i32> %304, i32 %231, i64 6, !dbg !28
  %306 = insertelement <8 x i32> %305, i32 %232, i64 7, !dbg !28
  %307 = bitcast <8 x i32> %306 to <8 x float>, !dbg !28
  %308 = insertelement <8 x float> poison, float %240, i64 0, !dbg !38
  %309 = insertelement <8 x float> %308, float %239, i64 1, !dbg !38
  %310 = insertelement <8 x float> %309, float %238, i64 2, !dbg !38
  %311 = insertelement <8 x float> %310, float %237, i64 3, !dbg !38
  %312 = insertelement <8 x float> %311, float %236, i64 4, !dbg !38
  %313 = insertelement <8 x float> %312, float %235, i64 5, !dbg !38
  %314 = insertelement <8 x float> %313, float %234, i64 6, !dbg !38
  %315 = insertelement <8 x float> %314, float %233, i64 7, !dbg !38
  %316 = fmul <8 x float> %289, %315, !dbg !38
  %317 = fmul <8 x float> %316, %307, !dbg !39
  %318 = fadd <8 x float> %317, %298, !dbg !40
  %319 = fcmp olt <8 x float> %318, zeroinitializer, !dbg !41
  %320 = extractelement <8 x i1> %319, i64 7, !dbg !45
  %321 = extractelement <8 x i1> %319, i64 6, !dbg !45
  %322 = extractelement <8 x i1> %319, i64 5, !dbg !45
  %323 = extractelement <8 x i1> %319, i64 4, !dbg !45
  %324 = extractelement <8 x i1> %319, i64 3, !dbg !45
  %325 = extractelement <8 x i1> %319, i64 2, !dbg !45
  %326 = extractelement <8 x i1> %319, i64 1, !dbg !45
  %327 = extractelement <8 x i1> %319, i64 0, !dbg !45
  %328 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !46
  %329 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !46
  %bc = bitcast <8 x float> %318 to <8 x i32>, !dbg !47
  %330 = extractelement <8 x i32> %bc, i64 7, !dbg !47
  %331 = select i1 %320, i32 0, i32 %330, !dbg !45
  %bc36 = bitcast <8 x float> %318 to <8 x i32>, !dbg !47
  %332 = extractelement <8 x i32> %bc36, i64 6, !dbg !47
  %333 = select i1 %321, i32 0, i32 %332, !dbg !45
  %bc37 = bitcast <8 x float> %318 to <8 x i32>, !dbg !47
  %334 = extractelement <8 x i32> %bc37, i64 5, !dbg !47
  %335 = select i1 %322, i32 0, i32 %334, !dbg !45
  %bc38 = bitcast <8 x float> %318 to <8 x i32>, !dbg !47
  %336 = extractelement <8 x i32> %bc38, i64 4, !dbg !47
  %337 = select i1 %323, i32 0, i32 %336, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %333, i32 %335, i32 %337, ptr addrspace(1) %328, i1 true) #3, !dbg !47
  %bc39 = bitcast <8 x float> %318 to <8 x i32>, !dbg !47
  %338 = extractelement <8 x i32> %bc39, i64 3, !dbg !47
  %339 = select i1 %324, i32 0, i32 %338, !dbg !45
  %bc40 = bitcast <8 x float> %318 to <8 x i32>, !dbg !47
  %340 = extractelement <8 x i32> %bc40, i64 2, !dbg !47
  %341 = select i1 %325, i32 0, i32 %340, !dbg !45
  %bc41 = bitcast <8 x float> %318 to <8 x i32>, !dbg !47
  %342 = extractelement <8 x i32> %bc41, i64 1, !dbg !47
  %343 = select i1 %326, i32 0, i32 %342, !dbg !45
  %bc42 = bitcast <8 x float> %318 to <8 x i32>, !dbg !47
  %344 = extractelement <8 x i32> %bc42, i64 0, !dbg !47
  %345 = select i1 %327, i32 0, i32 %344, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %341, i32 %343, i32 %345, ptr addrspace(1) %329, i1 true) #3, !dbg !47
  %346 = getelementptr float, ptr addrspace(1) %9, i64 %21, !dbg !48
  %347 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !48
  %bc43 = bitcast <8 x float> %289 to <8 x i32>, !dbg !49
  %348 = extractelement <8 x i32> %bc43, i64 7, !dbg !49
  %bc44 = bitcast <8 x float> %289 to <8 x i32>, !dbg !49
  %349 = extractelement <8 x i32> %bc44, i64 6, !dbg !49
  %bc45 = bitcast <8 x float> %289 to <8 x i32>, !dbg !49
  %350 = extractelement <8 x i32> %bc45, i64 5, !dbg !49
  %bc46 = bitcast <8 x float> %289 to <8 x i32>, !dbg !49
  %351 = extractelement <8 x i32> %bc46, i64 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %348, i32 %349, i32 %350, i32 %351, ptr addrspace(1) %346, i1 true) #3, !dbg !49
  %bc47 = bitcast <8 x float> %289 to <8 x i32>, !dbg !49
  %352 = extractelement <8 x i32> %bc47, i64 3, !dbg !49
  %bc48 = bitcast <8 x float> %289 to <8 x i32>, !dbg !49
  %353 = extractelement <8 x i32> %bc48, i64 2, !dbg !49
  %bc49 = bitcast <8 x float> %289 to <8 x i32>, !dbg !49
  %354 = extractelement <8 x i32> %bc49, i64 1, !dbg !49
  %bc50 = bitcast <8 x float> %289 to <8 x i32>, !dbg !49
  %355 = extractelement <8 x i32> %bc50, i64 0, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %352, i32 %353, i32 %354, i32 %355, ptr addrspace(1) %347, i1 true) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckccyewrooogdnlmurtrkxxnrw7ea6oqwdzdtd7umwrtxdy7ezpe.py", directory: "inductor_cache/kc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 27, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 37, scope: !7)
!48 = !DILocation(line: 51, column: 25, scope: !7)
!49 = !DILocation(line: 51, column: 36, scope: !7)
!50 = !DILocation(line: 51, column: 4, scope: !7)
