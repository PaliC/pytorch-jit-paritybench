; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = icmp slt i32 %12, 18432, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %15 = sdiv i32 %.frozen, 9, !dbg !15
  %.frozen1 = freeze i32 %13, !dbg !15
  %16 = sdiv i32 %.frozen1, 9, !dbg !15
  %17 = srem i32 %15, 512, !dbg !16
  %18 = srem i32 %16, 512, !dbg !16
  %19 = mul i32 %15, 9, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = mul i32 %16, 9, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %20, !dbg !17
  %21 = sdiv i32 %12, 4608, !dbg !18
  %22 = icmp slt i32 %17, 256, !dbg !19
  %23 = icmp slt i32 %18, 256, !dbg !19
  %24 = shl nsw i32 %.decomposed, 8, !dbg !20
  %25 = shl nsw i32 %.decomposed2, 8, !dbg !20
  %26 = mul nsw i32 %21, 2304, !dbg !21
  %27 = add nsw i32 %24, %26, !dbg !22
  %28 = add nsw i32 %26, %25, !dbg !22
  %29 = add nsw i32 %27, %17, !dbg !23
  %30 = add nsw i32 %28, %18, !dbg !23
  %31 = sext i32 %29 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = and i1 %14, %22, !dbg !25
  %36 = and i1 %23, %14, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %35, i32 0, i1 %35) #1, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %36, i32 0, i1 %36) #1, !dbg !26
  %39 = sext i32 %17 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !27
  %41 = sext i32 %18 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %35, i32 0, i1 %35) #1, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %36, i32 0, i1 %36) #1, !dbg !28
  %45 = icmp sgt i32 %17, 255, !dbg !29
  %46 = icmp sgt i32 %18, 255, !dbg !29
  %47 = add nsw i32 %17, -256, !dbg !30
  %48 = add nsw i32 %18, -256, !dbg !30
  %49 = add nsw i32 %27, %47, !dbg !31
  %50 = add nsw i32 %28, %48, !dbg !31
  %51 = sext i32 %49 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !32
  %53 = sext i32 %50 to i64, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !32
  %55 = and i1 %14, %45, !dbg !33
  %56 = and i1 %46, %14, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %55, i32 0, i1 %55) #1, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %56, i32 0, i1 %56) #1, !dbg !34
  %59 = sext i32 %47 to i64, !dbg !35
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !35
  %61 = sext i32 %48 to i64, !dbg !35
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %55, i32 0, i1 %55) #1, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %56, i32 0, i1 %56) #1, !dbg !36
  %65 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !34
  %66 = insertelement <4 x i32> %65, i32 %57, i64 1, !dbg !34
  %67 = insertelement <4 x i32> %66, i32 %38, i64 2, !dbg !34
  %68 = insertelement <4 x i32> %67, i32 %37, i64 3, !dbg !34
  %69 = bitcast <4 x i32> %68 to <4 x float>, !dbg !34
  %70 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !36
  %71 = insertelement <4 x i32> %70, i32 %63, i64 1, !dbg !36
  %72 = insertelement <4 x i32> %71, i32 %44, i64 2, !dbg !36
  %73 = insertelement <4 x i32> %72, i32 %43, i64 3, !dbg !36
  %74 = bitcast <4 x i32> %73 to <4 x float>, !dbg !36
  %75 = fadd <4 x float> %69, %74, !dbg !37
  %76 = fcmp olt <4 x float> %75, zeroinitializer, !dbg !38
  %77 = extractelement <4 x i1> %76, i64 3, !dbg !42
  %78 = extractelement <4 x float> %75, i64 3, !dbg !42
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !42
  %80 = extractelement <4 x i1> %76, i64 2, !dbg !42
  %81 = extractelement <4 x float> %75, i64 2, !dbg !42
  %82 = select i1 %80, float 0.000000e+00, float %81, !dbg !42
  %83 = extractelement <4 x i1> %76, i64 1, !dbg !44
  %84 = extractelement <4 x float> %75, i64 1, !dbg !44
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !44
  %86 = extractelement <4 x i1> %76, i64 0, !dbg !44
  %87 = extractelement <4 x float> %75, i64 0, !dbg !44
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !44
  %89 = select i1 %22, float %79, float %85, !dbg !45
  %90 = select i1 %23, float %82, float %88, !dbg !45
  %91 = sext i32 %12 to i64, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %91, !dbg !46
  %93 = bitcast float %89 to i32, !dbg !47
  %94 = bitcast float %90 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %93, i32 %94, ptr addrspace(1) %92, i1 %14) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmkrysqsyp5nabkbl45hb5aogi7w57sdpjqhazzfhtnliw6r4nbv.py", directory: "inductor_cache/mk")
!4 = !{ptr @triton_poi_fused_cat_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_28", linkageName: "triton_poi_fused_cat_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 50, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 63, scope: !7)
!26 = !DILocation(line: 33, column: 56, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 20, scope: !7)
!30 = !DILocation(line: 43, column: 60, scope: !7)
!31 = !DILocation(line: 43, column: 51, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 74, scope: !7)
!34 = !DILocation(line: 43, column: 66, scope: !7)
!35 = !DILocation(line: 44, column: 31, scope: !7)
!36 = !DILocation(line: 44, column: 45, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !43)
!43 = !DILocation(line: 37, column: 40, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 0, scope: !7)
!46 = !DILocation(line: 51, column: 25, scope: !7)
!47 = !DILocation(line: 51, column: 37, scope: !7)
!48 = !DILocation(line: 51, column: 4, scope: !7)
