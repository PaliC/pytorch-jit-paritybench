#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0)
#loc1 = loc(unknown)
#loc48 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":52:26)
#loc54 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":60:26)
#loc60 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":68:26)
#loc85 = loc(callsite(#loc1 at #loc48))
#loc88 = loc(callsite(#loc1 at #loc54))
#loc90 = loc(callsite(#loc1 at #loc60))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_mean_mul_sigmoid_std_sub_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0), %arg7: i32 loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<48> : tensor<1x16xi32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<1.500000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1.500000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<48> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<32> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<16> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = arith.muli %0, %c64_i32 : i32 loc(#loc5)
    %7 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked> loc(#loc6)
    %8 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc6)
    %9 = arith.addi %4, %7 : tensor<1x16xi32, #blocked> loc(#loc6)
    %10 = arith.addi %5, %8 : tensor<1x16xi32, #blocked1> loc(#loc6)
    %11 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %12 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %13 = tt.addptr %11, %9 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc7)
    %14 = tt.addptr %12, %10 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc7)
    %15 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc8)
    %16 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc8)
    %17 = tt.load %13, %15, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %18 = tt.load %14, %16, %cst_13 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %19 = arith.muli %0, %c4_i32 : i32 loc(#loc9)
    %20 = tt.addptr %arg4, %19 : !tt.ptr<f32>, i32 loc(#loc10)
    %21 = tt.splat %20 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %22 = tt.splat %20 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %23 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc11)
    %24 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc11)
    %25 = tt.load %21, %23 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %26 = tt.load %22, %24 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %27 = arith.addi %4, %cst_0 : tensor<1x16xi32, #blocked> loc(#loc12)
    %28 = arith.addi %5, %cst_12 : tensor<1x16xi32, #blocked1> loc(#loc12)
    %29 = arith.addi %27, %7 : tensor<1x16xi32, #blocked> loc(#loc13)
    %30 = arith.addi %28, %8 : tensor<1x16xi32, #blocked1> loc(#loc13)
    %31 = tt.addptr %11, %29 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc14)
    %32 = tt.addptr %12, %30 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc14)
    %33 = tt.load %31, %15, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %34 = tt.load %32, %16, %cst_13 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %35 = arith.addi %19, %c1_i32 : i32 loc(#loc16)
    %36 = tt.addptr %arg4, %35 : !tt.ptr<f32>, i32 loc(#loc17)
    %37 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %38 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %39 = tt.load %37, %23 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %40 = tt.load %38, %24 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %41 = arith.addi %4, %cst_1 : tensor<1x16xi32, #blocked> loc(#loc19)
    %42 = arith.addi %5, %cst_11 : tensor<1x16xi32, #blocked1> loc(#loc19)
    %43 = arith.addi %41, %7 : tensor<1x16xi32, #blocked> loc(#loc20)
    %44 = arith.addi %42, %8 : tensor<1x16xi32, #blocked1> loc(#loc20)
    %45 = tt.addptr %11, %43 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc21)
    %46 = tt.addptr %12, %44 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc21)
    %47 = tt.load %45, %15, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc22)
    %48 = tt.load %46, %16, %cst_13 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc22)
    %49 = arith.addi %19, %c2_i32 : i32 loc(#loc23)
    %50 = tt.addptr %arg4, %49 : !tt.ptr<f32>, i32 loc(#loc24)
    %51 = tt.splat %50 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %52 = tt.splat %50 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc25)
    %53 = tt.load %51, %23 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %54 = tt.load %52, %24 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc25)
    %55 = arith.addi %4, %cst_2 : tensor<1x16xi32, #blocked> loc(#loc26)
    %56 = arith.addi %5, %cst_10 : tensor<1x16xi32, #blocked1> loc(#loc26)
    %57 = arith.addi %55, %7 : tensor<1x16xi32, #blocked> loc(#loc27)
    %58 = arith.addi %56, %8 : tensor<1x16xi32, #blocked1> loc(#loc27)
    %59 = tt.addptr %11, %57 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc28)
    %60 = tt.addptr %12, %58 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc28)
    %61 = tt.load %59, %15, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc29)
    %62 = tt.load %60, %16, %cst_13 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %63 = arith.addi %19, %c3_i32 : i32 loc(#loc30)
    %64 = tt.addptr %arg4, %63 : !tt.ptr<f32>, i32 loc(#loc31)
    %65 = tt.splat %64 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc32)
    %66 = tt.splat %64 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %67 = tt.load %65, %23 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc32)
    %68 = tt.load %66, %24 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %69 = tt.addptr %arg5, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc33)
    %70 = tt.load %69 : !tt.ptr<f32> loc(#loc34)
    %71 = tt.splat %70 : f32 -> tensor<1x16xf32, #blocked> loc(#loc35)
    %72 = tt.addptr %arg6, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc36)
    %73 = tt.load %72 : !tt.ptr<f32> loc(#loc37)
    %74 = tt.splat %73 : f32 -> tensor<1x16xf32, #blocked> loc(#loc38)
    %75 = tt.broadcast %25 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc39)
    %76 = tt.broadcast %26 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc39)
    %77 = arith.mulf %17, %75 : tensor<1x16xf32, #blocked> loc(#loc39)
    %78 = arith.mulf %18, %76 : tensor<1x16xf32, #blocked1> loc(#loc39)
    %79 = tt.broadcast %39 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc40)
    %80 = tt.broadcast %40 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc40)
    %81 = arith.mulf %33, %79 : tensor<1x16xf32, #blocked> loc(#loc40)
    %82 = arith.mulf %34, %80 : tensor<1x16xf32, #blocked1> loc(#loc40)
    %83 = arith.addf %77, %81 : tensor<1x16xf32, #blocked> loc(#loc41)
    %84 = arith.addf %78, %82 : tensor<1x16xf32, #blocked1> loc(#loc41)
    %85 = tt.broadcast %53 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc42)
    %86 = tt.broadcast %54 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc42)
    %87 = arith.mulf %47, %85 : tensor<1x16xf32, #blocked> loc(#loc42)
    %88 = arith.mulf %48, %86 : tensor<1x16xf32, #blocked1> loc(#loc42)
    %89 = arith.addf %83, %87 : tensor<1x16xf32, #blocked> loc(#loc43)
    %90 = arith.addf %84, %88 : tensor<1x16xf32, #blocked1> loc(#loc43)
    %91 = tt.broadcast %67 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc44)
    %92 = tt.broadcast %68 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc44)
    %93 = arith.mulf %61, %91 : tensor<1x16xf32, #blocked> loc(#loc44)
    %94 = arith.mulf %62, %92 : tensor<1x16xf32, #blocked1> loc(#loc44)
    %95 = arith.addf %89, %93 : tensor<1x16xf32, #blocked> loc(#loc45)
    %96 = arith.addf %90, %94 : tensor<1x16xf32, #blocked1> loc(#loc45)
    %97 = arith.select %15, %95, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc46)
    %98 = arith.select %16, %96, %cst_13 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc46)
    %99 = "tt.reduce"(%97) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc48)), %arg10: f32 loc(callsite(#loc1 at #loc48))):
      %152 = arith.addf %arg9, %arg10 : f32 loc(#loc95)
      tt.reduce.return %152 : f32 loc(#loc84)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc84)
    %100 = "tt.reduce"(%98) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc48)), %arg10: f32 loc(callsite(#loc1 at #loc48))):
      %152 = arith.addf %arg9, %arg10 : f32 loc(#loc95)
      tt.reduce.return %152 : f32 loc(#loc84)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc84)
    %101 = tt.expand_dims %99 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc50)
    %102 = tt.expand_dims %100 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc50)
    %103 = arith.divf %101, %cst_8 : tensor<1x1xf32, #blocked> loc(#loc51)
    %104 = arith.divf %102, %cst_9 : tensor<1x1xf32, #blocked1> loc(#loc51)
    %105 = tt.broadcast %103 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc52)
    %106 = tt.broadcast %104 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc52)
    %107 = arith.subf %95, %105 : tensor<1x16xf32, #blocked> loc(#loc52)
    %108 = arith.subf %96, %106 : tensor<1x16xf32, #blocked1> loc(#loc52)
    %109 = arith.select %15, %107, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc53)
    %110 = arith.select %16, %108, %cst_13 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc53)
    %111 = "tt.reduce"(%109) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc54)), %arg10: f32 loc(callsite(#loc1 at #loc54))):
      %152 = arith.addf %arg9, %arg10 : f32 loc(#loc96)
      tt.reduce.return %152 : f32 loc(#loc87)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc87)
    %112 = "tt.reduce"(%110) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc54)), %arg10: f32 loc(callsite(#loc1 at #loc54))):
      %152 = arith.addf %arg9, %arg10 : f32 loc(#loc96)
      tt.reduce.return %152 : f32 loc(#loc87)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc87)
    %113 = tt.expand_dims %111 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc55)
    %114 = tt.expand_dims %112 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc55)
    %115 = arith.divf %113, %cst_8 : tensor<1x1xf32, #blocked> loc(#loc56)
    %116 = arith.divf %114, %cst_9 : tensor<1x1xf32, #blocked1> loc(#loc56)
    %117 = tt.broadcast %115 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc57)
    %118 = tt.broadcast %116 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc57)
    %119 = arith.subf %107, %117 : tensor<1x16xf32, #blocked> loc(#loc57)
    %120 = arith.subf %108, %118 : tensor<1x16xf32, #blocked1> loc(#loc57)
    %121 = arith.mulf %119, %119 : tensor<1x16xf32, #blocked> loc(#loc58)
    %122 = arith.mulf %120, %120 : tensor<1x16xf32, #blocked1> loc(#loc58)
    %123 = arith.select %15, %121, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc59)
    %124 = arith.select %16, %122, %cst_13 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc59)
    %125 = "tt.reduce"(%123) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc60)), %arg10: f32 loc(callsite(#loc1 at #loc60))):
      %152 = arith.addf %arg9, %arg10 : f32 loc(#loc97)
      tt.reduce.return %152 : f32 loc(#loc89)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc89)
    %126 = "tt.reduce"(%124) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc60)), %arg10: f32 loc(callsite(#loc1 at #loc60))):
      %152 = arith.addf %arg9, %arg10 : f32 loc(#loc97)
      tt.reduce.return %152 : f32 loc(#loc89)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc89)
    %127 = tt.expand_dims %125 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc61)
    %128 = tt.expand_dims %126 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc61)
    %129 = arith.divf %127, %cst_6 : tensor<1x1xf32, #blocked> loc(#loc62)
    %130 = arith.divf %128, %cst_7 : tensor<1x1xf32, #blocked1> loc(#loc62)
    %131 = tt.extern_elementwise %129 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc63)
    %132 = tt.extern_elementwise %130 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc63)
    %133 = arith.addf %131, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc64)
    %134 = arith.addf %132, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc64)
    %135 = tt.broadcast %133 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc65)
    %136 = arith.divf %107, %135 : tensor<1x16xf32, #blocked> loc(#loc65)
    %137 = arith.mulf %136, %71 : tensor<1x16xf32, #blocked> loc(#loc66)
    %138 = arith.addf %137, %74 : tensor<1x16xf32, #blocked> loc(#loc67)
    %139 = arith.subf %cst, %138 : tensor<1x16xf32, #blocked> loc(#loc91)
    %140 = math.exp %139 : tensor<1x16xf32, #blocked> loc(#loc92)
    %141 = arith.addf %140, %cst_3 : tensor<1x16xf32, #blocked> loc(#loc93)
    %142 = arith.divf %cst_3, %141 : tensor<1x16xf32, #blocked> loc(#loc94)
    gpu.barrier loc(#loc73)
    %143 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc74)
    %144 = tt.splat %143 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc75)
    tt.store %144, %104, %24 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc75)
    gpu.barrier loc(#loc76)
    %145 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc77)
    %146 = tt.splat %145 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc78)
    tt.store %146, %134, %24 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc78)
    %147 = arith.muli %0, %c16_i32 : i32 loc(#loc79)
    %148 = tt.splat %147 : i32 -> tensor<1x16xi32, #blocked> loc(#loc80)
    %149 = arith.addi %4, %148 : tensor<1x16xi32, #blocked> loc(#loc80)
    %150 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc81)
    %151 = tt.addptr %150, %149 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc81)
    tt.store %151, %142, %15 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc82)
    tt.return loc(#loc83)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":23:28)
#loc3 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":25:21)
#loc4 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":26:34)
#loc5 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":31:38)
#loc6 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":31:35)
#loc7 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":31:30)
#loc8 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":31:43)
#loc9 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":32:32)
#loc10 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":32:30)
#loc11 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":32:37)
#loc12 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":33:35)
#loc13 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":33:40)
#loc14 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":33:30)
#loc15 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":33:48)
#loc16 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":34:34)
#loc17 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":34:30)
#loc18 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":34:41)
#loc19 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":35:35)
#loc20 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":35:40)
#loc21 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":35:30)
#loc22 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":35:48)
#loc23 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":36:34)
#loc24 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":36:30)
#loc25 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":36:41)
#loc26 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":37:36)
#loc27 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":37:41)
#loc28 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":37:31)
#loc29 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":37:49)
#loc30 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":38:35)
#loc31 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":38:31)
#loc32 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":38:42)
#loc33 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":39:31)
#loc34 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":39:20)
#loc35 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":40:35)
#loc36 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":41:31)
#loc37 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":41:20)
#loc38 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":42:35)
#loc39 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":43:18)
#loc40 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":44:18)
#loc41 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":45:18)
#loc42 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":46:18)
#loc43 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":47:19)
#loc44 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":48:20)
#loc45 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":49:20)
#loc46 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":51:35)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc50 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":52:29)
#loc51 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":54:20)
#loc52 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":55:20)
#loc53 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":59:35)
#loc55 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":60:29)
#loc56 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":63:20)
#loc57 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":64:20)
#loc58 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":65:20)
#loc59 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":67:35)
#loc61 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":68:29)
#loc62 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":70:20)
#loc63 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":71:27)
#loc64 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":73:20)
#loc65 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":74:20)
#loc66 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":75:20)
#loc67 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":76:20)
#loc68 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc69 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":77:23)
#loc70 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc71 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc72 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc73 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":78:4)
#loc74 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":79:28)
#loc75 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":79:40)
#loc76 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":80:4)
#loc77 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":81:28)
#loc78 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":81:40)
#loc79 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":82:36)
#loc80 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":82:33)
#loc81 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":82:28)
#loc82 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":82:48)
#loc83 = loc("inductor_cache/zd/czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py":82:4)
#loc84 = loc(callsite(#loc47 at #loc48))
#loc86 = loc(callsite(#loc49 at #loc47))
#loc87 = loc(callsite(#loc47 at #loc54))
#loc89 = loc(callsite(#loc47 at #loc60))
#loc91 = loc(callsite(#loc68 at #loc69))
#loc92 = loc(callsite(#loc70 at #loc69))
#loc93 = loc(callsite(#loc71 at #loc69))
#loc94 = loc(callsite(#loc72 at #loc69))
#loc95 = loc(callsite(#loc86 at #loc48))
#loc96 = loc(callsite(#loc86 at #loc54))
#loc97 = loc(callsite(#loc86 at #loc60))
