; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mean_mul_sigmoid_std_sub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = shl i32 %10, 6, !dbg !13
  %15 = or disjoint i32 %14, %13, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %11, i32 0, i1 %11) #5, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %11, i32 0, i1 %11) #5, !dbg !16
  %21 = bitcast i32 %20 to float, !dbg !16
  %22 = shl i32 %10, 2, !dbg !17
  %23 = sext i32 %22 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #5, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #5, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = or disjoint i32 %15, 16, !dbg !20
  %30 = sext i32 %29 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %11, i32 0, i1 %11) #5, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %11, i32 0, i1 %11) #5, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = or disjoint i32 %22, 1, !dbg !23
  %37 = sext i32 %36 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %11) #5, !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %11) #5, !dbg !25
  %42 = bitcast i32 %41 to float, !dbg !25
  %43 = or disjoint i32 %15, 32, !dbg !26
  %44 = sext i32 %43 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %11, i32 0, i1 %11) #5, !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %11, i32 0, i1 %11) #5, !dbg !28
  %49 = bitcast i32 %48 to float, !dbg !28
  %50 = or disjoint i32 %22, 2, !dbg !29
  %51 = sext i32 %50 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %11) #5, !dbg !31
  %54 = bitcast i32 %53 to float, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %11) #5, !dbg !31
  %56 = bitcast i32 %55 to float, !dbg !31
  %57 = or disjoint i32 %15, 48, !dbg !32
  %58 = sext i32 %57 to i64, !dbg !33
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %11, i32 0, i1 %11) #5, !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %11, i32 0, i1 %11) #5, !dbg !34
  %63 = bitcast i32 %62 to float, !dbg !34
  %64 = or disjoint i32 %22, 3, !dbg !35
  %65 = sext i32 %64 to i64, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %11) #5, !dbg !37
  %68 = bitcast i32 %67 to float, !dbg !37
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %11) #5, !dbg !37
  %70 = bitcast i32 %69 to float, !dbg !37
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #5, !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #5, !dbg !39
  %73 = fmul float %19, %26, !dbg !40
  %74 = fmul float %21, %28, !dbg !40
  %75 = fmul float %33, %40, !dbg !41
  %76 = fmul float %35, %42, !dbg !41
  %77 = fadd float %73, %75, !dbg !42
  %78 = fadd float %74, %76, !dbg !42
  %79 = fmul float %47, %54, !dbg !43
  %80 = fmul float %49, %56, !dbg !43
  %81 = fadd float %77, %79, !dbg !44
  %82 = fadd float %78, %80, !dbg !44
  %83 = fmul float %61, %68, !dbg !45
  %84 = fmul float %63, %70, !dbg !45
  %85 = fadd float %81, %83, !dbg !46
  %86 = fadd float %82, %84, !dbg !46
  %87 = select i1 %11, float %85, float 0.000000e+00, !dbg !47
  %88 = select i1 %11, float %86, float 0.000000e+00, !dbg !47
  %89 = bitcast float %87 to i32, !dbg !48
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 8, i32 31), !dbg !48
  %91 = bitcast i32 %90 to float, !dbg !48
  %92 = fadd float %87, %91, !dbg !52
  %93 = bitcast float %92 to i32, !dbg !48
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 4, i32 31), !dbg !48
  %95 = bitcast i32 %94 to float, !dbg !48
  %96 = fadd float %92, %95, !dbg !52
  %97 = bitcast float %96 to i32, !dbg !48
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !48
  %99 = bitcast i32 %98 to float, !dbg !48
  %100 = fadd float %96, %99, !dbg !52
  %101 = bitcast float %100 to i32, !dbg !48
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !48
  %103 = bitcast i32 %102 to float, !dbg !48
  %104 = fadd float %100, %103, !dbg !52
  %105 = bitcast float %88 to i32, !dbg !48
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 8, i32 31), !dbg !48
  %107 = bitcast i32 %106 to float, !dbg !48
  %108 = fadd float %88, %107, !dbg !52
  %109 = bitcast float %108 to i32, !dbg !48
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !48
  %111 = bitcast i32 %110 to float, !dbg !48
  %112 = fadd float %108, %111, !dbg !52
  %113 = bitcast float %112 to i32, !dbg !48
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !48
  %115 = bitcast i32 %114 to float, !dbg !48
  %116 = fadd float %112, %115, !dbg !52
  %117 = bitcast float %116 to i32, !dbg !48
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !48
  %119 = bitcast i32 %118 to float, !dbg !48
  %120 = fadd float %116, %119, !dbg !52
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 1.600000e+01) #5, !dbg !54
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 1.600000e+01) #5, !dbg !54
  %123 = fsub float %85, %121, !dbg !55
  %124 = fsub float %86, %122, !dbg !55
  %125 = select i1 %11, float %123, float 0.000000e+00, !dbg !56
  %126 = select i1 %11, float %124, float 0.000000e+00, !dbg !56
  %127 = bitcast float %125 to i32, !dbg !57
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !57
  %129 = bitcast i32 %128 to float, !dbg !57
  %130 = fadd float %125, %129, !dbg !59
  %131 = bitcast float %130 to i32, !dbg !57
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !57
  %133 = bitcast i32 %132 to float, !dbg !57
  %134 = fadd float %130, %133, !dbg !59
  %135 = bitcast float %134 to i32, !dbg !57
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !57
  %137 = bitcast i32 %136 to float, !dbg !57
  %138 = fadd float %134, %137, !dbg !59
  %139 = bitcast float %138 to i32, !dbg !57
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !57
  %141 = bitcast i32 %140 to float, !dbg !57
  %142 = fadd float %138, %141, !dbg !59
  %143 = bitcast float %126 to i32, !dbg !57
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !57
  %145 = bitcast i32 %144 to float, !dbg !57
  %146 = fadd float %126, %145, !dbg !59
  %147 = bitcast float %146 to i32, !dbg !57
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !57
  %149 = bitcast i32 %148 to float, !dbg !57
  %150 = fadd float %146, %149, !dbg !59
  %151 = bitcast float %150 to i32, !dbg !57
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !57
  %153 = bitcast i32 %152 to float, !dbg !57
  %154 = fadd float %150, %153, !dbg !59
  %155 = bitcast float %154 to i32, !dbg !57
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !57
  %157 = bitcast i32 %156 to float, !dbg !57
  %158 = fadd float %154, %157, !dbg !59
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 1.600000e+01) #5, !dbg !60
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 1.600000e+01) #5, !dbg !60
  %161 = fsub float %123, %159, !dbg !61
  %162 = fsub float %124, %160, !dbg !61
  %163 = fmul float %161, %161, !dbg !62
  %164 = fmul float %162, %162, !dbg !62
  %165 = select i1 %11, float %163, float 0.000000e+00, !dbg !63
  %166 = select i1 %11, float %164, float 0.000000e+00, !dbg !63
  %167 = bitcast float %165 to i32, !dbg !64
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !64
  %169 = bitcast i32 %168 to float, !dbg !64
  %170 = fadd float %165, %169, !dbg !66
  %171 = bitcast float %170 to i32, !dbg !64
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 4, i32 31), !dbg !64
  %173 = bitcast i32 %172 to float, !dbg !64
  %174 = fadd float %170, %173, !dbg !66
  %175 = bitcast float %174 to i32, !dbg !64
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !64
  %177 = bitcast i32 %176 to float, !dbg !64
  %178 = fadd float %174, %177, !dbg !66
  %179 = bitcast float %178 to i32, !dbg !64
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !64
  %181 = bitcast i32 %180 to float, !dbg !64
  %182 = fadd float %178, %181, !dbg !66
  %183 = bitcast float %166 to i32, !dbg !64
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !64
  %185 = bitcast i32 %184 to float, !dbg !64
  %186 = fadd float %166, %185, !dbg !66
  %187 = bitcast float %186 to i32, !dbg !64
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 4, i32 31), !dbg !64
  %189 = bitcast i32 %188 to float, !dbg !64
  %190 = fadd float %186, %189, !dbg !66
  %191 = bitcast float %190 to i32, !dbg !64
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !64
  %193 = bitcast i32 %192 to float, !dbg !64
  %194 = fadd float %190, %193, !dbg !66
  %195 = bitcast float %194 to i32, !dbg !64
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !64
  %197 = bitcast i32 %196 to float, !dbg !64
  %198 = fadd float %194, %197, !dbg !66
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float 1.500000e+01) #5, !dbg !67
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 1.500000e+01) #5, !dbg !67
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !68
  %.not.i = icmp eq i32 %201, 0, !dbg !68
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !68
  %.not1.i = icmp eq i32 %202, 0, !dbg !68
  br i1 %.not.i, label %208, label %203, !dbg !68

203:                                              ; preds = %9
  br i1 %.not1.i, label %206, label %204, !dbg !68

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %199) #5, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %199) #5, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

208:                                              ; preds = %9
  br i1 %.not1.i, label %211, label %209, !dbg !68

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %199) #5, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %199) #5, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %204, %206, %209, %211
  %.0.i = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !68
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !68
  %.not.i1 = icmp eq i32 %213, 0, !dbg !68
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !68
  %.not1.i4 = icmp eq i32 %214, 0, !dbg !68
  br i1 %.not.i1, label %220, label %215, !dbg !68

215:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %218, label %216, !dbg !68

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %200) #5, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %200) #5, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

220:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %223, label %221, !dbg !68

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %200) #5, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %200) #5, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

__nv_sqrtf.exit5:                                 ; preds = %216, %218, %221, %223
  %.0.i3 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !68
  %225 = bitcast i32 %72 to float, !dbg !39
  %226 = bitcast i32 %71 to float, !dbg !38
  %227 = fadd float %.0.i, 0x3EE4F8B580000000, !dbg !69
  %228 = fadd float %.0.i3, 0x3EE4F8B580000000, !dbg !69
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %227) #5, !dbg !70
  %230 = fmul float %229, %226, !dbg !71
  %231 = fadd float %230, %225, !dbg !72
  %232 = fsub float 0.000000e+00, %231, !dbg !73
  %233 = fmul float %232, 0x3FF7154760000000, !dbg !75
  %234 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %233) #5, !dbg !75
  %235 = fadd float %234, 1.000000e+00, !dbg !76
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %235) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %237 = sext i32 %10 to i64, !dbg !79
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !79
  %urem = and i32 %12, 63, !dbg !80
  %239 = icmp eq i32 %urem, 0, !dbg !80
  %240 = bitcast float %122 to i32, !dbg !80
  %241 = and i1 %239, %11, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %240, ptr addrspace(1) %238, i1 %241) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !82
  %243 = bitcast float %228 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %243, ptr addrspace(1) %242, i1 %241) #5, !dbg !83
  %244 = shl i32 %10, 4, !dbg !84
  %245 = or disjoint i32 %244, %13, !dbg !85
  %246 = sext i32 %245 to i64, !dbg !86
  %247 = getelementptr float, ptr addrspace(1) %2, i64 %246, !dbg !86
  %248 = and i32 %12, 48, !dbg !87
  %249 = icmp eq i32 %248, 0, !dbg !87
  %250 = bitcast float %236 to i32, !dbg !87
  %251 = and i1 %249, %11, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %250, ptr addrspace(1) %247, i1 %251) #5, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czddjts674bn3domxal3442qfxifz5zslfqvrkvnlqonitvslz4h.py", directory: "inductor_cache/zd")
!4 = !{ptr @triton_per_fused_add_mean_mul_sigmoid_std_sub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_mul_sigmoid_std_sub_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_sigmoid_std_sub_sum_1", linkageName: "triton_per_fused_add_mean_mul_sigmoid_std_sub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 32, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 33, column: 40, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 48, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 41, scope: !7)
!26 = !DILocation(line: 35, column: 40, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 48, scope: !7)
!29 = !DILocation(line: 36, column: 34, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 41, scope: !7)
!32 = !DILocation(line: 37, column: 41, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 49, scope: !7)
!35 = !DILocation(line: 38, column: 35, scope: !7)
!36 = !DILocation(line: 38, column: 31, scope: !7)
!37 = !DILocation(line: 38, column: 42, scope: !7)
!38 = !DILocation(line: 39, column: 20, scope: !7)
!39 = !DILocation(line: 41, column: 20, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 45, column: 18, scope: !7)
!43 = !DILocation(line: 46, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 19, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 35, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = !DILocation(line: 52, column: 26, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !51)
!53 = distinct !DILexicalBlockFile(scope: !49, file: !50, discriminator: 0)
!54 = !DILocation(line: 54, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 35, scope: !7)
!57 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !58)
!58 = !DILocation(line: 60, column: 26, scope: !7)
!59 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !58)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !65)
!65 = !DILocation(line: 68, column: 26, scope: !7)
!66 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !65)
!67 = !DILocation(line: 70, column: 20, scope: !7)
!68 = !DILocation(line: 71, column: 27, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 75, column: 20, scope: !7)
!72 = !DILocation(line: 76, column: 20, scope: !7)
!73 = !DILocation(line: 47, column: 30, scope: !49, inlinedAt: !74)
!74 = !DILocation(line: 77, column: 23, scope: !7)
!75 = !DILocation(line: 47, column: 29, scope: !49, inlinedAt: !74)
!76 = !DILocation(line: 47, column: 20, scope: !49, inlinedAt: !74)
!77 = !DILocation(line: 47, column: 16, scope: !49, inlinedAt: !74)
!78 = !DILocation(line: 78, column: 4, scope: !7)
!79 = !DILocation(line: 79, column: 28, scope: !7)
!80 = !DILocation(line: 79, column: 40, scope: !7)
!81 = !DILocation(line: 80, column: 4, scope: !7)
!82 = !DILocation(line: 81, column: 28, scope: !7)
!83 = !DILocation(line: 81, column: 40, scope: !7)
!84 = !DILocation(line: 82, column: 36, scope: !7)
!85 = !DILocation(line: 82, column: 33, scope: !7)
!86 = !DILocation(line: 82, column: 28, scope: !7)
!87 = !DILocation(line: 82, column: 48, scope: !7)
!88 = !DILocation(line: 82, column: 4, scope: !7)
