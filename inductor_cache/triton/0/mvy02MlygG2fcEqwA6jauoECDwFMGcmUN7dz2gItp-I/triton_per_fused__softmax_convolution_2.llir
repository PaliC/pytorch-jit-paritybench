; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = icmp slt i32 %14, 64, !dbg !14
  %17 = shl i32 %9, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %19 = sdiv i32 %13, 16, !dbg !16
  %20 = sext i32 %13 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = sext i32 %14 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %15) #3, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %15) #3, !dbg !18
  %26 = bitcast i32 %25 to float, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %16) #3, !dbg !18
  %28 = bitcast i32 %27 to float, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = shl nsw i32 %19, 4, !dbg !20
  %32 = or disjoint i32 %31, %18, !dbg !21
  %33 = sext i32 %32 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !22
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !23
  %38 = bitcast i32 %36 to float, !dbg !23
  %39 = bitcast i32 %37 to float, !dbg !23
  %40 = fadd float %26, %30, !dbg !24
  %41 = fadd float %28, %30, !dbg !24
  %42 = fmul float %40, %38, !dbg !25
  %43 = fmul float %40, %39, !dbg !25
  %44 = select i1 %15, float %42, float 0xFFF0000000000000, !dbg !26
  %45 = select i1 %15, float %43, float 0xFFF0000000000000, !dbg !26
  %46 = fcmp ogt float %44, %45, !dbg !27
  %47 = fcmp uno float %44, 0.000000e+00, !dbg !32
  %48 = or i1 %46, %47, !dbg !33
  %49 = select i1 %48, float %44, float %45, !dbg !34
  %50 = bitcast float %49 to i32, !dbg !35
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !35
  %52 = bitcast i32 %51 to float, !dbg !35
  %53 = fcmp ogt float %49, %52, !dbg !27
  %54 = fcmp uno float %49, 0.000000e+00, !dbg !32
  %55 = or i1 %53, %54, !dbg !33
  %56 = select i1 %55, float %49, float %52, !dbg !34
  %57 = bitcast float %56 to i32, !dbg !35
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = fcmp ogt float %56, %59, !dbg !27
  %61 = fcmp uno float %56, 0.000000e+00, !dbg !32
  %62 = or i1 %60, %61, !dbg !33
  %63 = select i1 %62, float %56, float %59, !dbg !34
  %64 = bitcast float %63 to i32, !dbg !35
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !35
  %66 = bitcast i32 %65 to float, !dbg !35
  %67 = fcmp ogt float %63, %66, !dbg !27
  %68 = fcmp uno float %63, 0.000000e+00, !dbg !32
  %69 = or i1 %67, %68, !dbg !33
  %70 = select i1 %69, float %63, float %66, !dbg !34
  %71 = fsub float %42, %70, !dbg !36
  %72 = fsub float %43, %70, !dbg !36
  %73 = fmul float %71, 0x3FF7154760000000, !dbg !37
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #3, !dbg !37
  %75 = fmul float %72, 0x3FF7154760000000, !dbg !37
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #3, !dbg !37
  %77 = fadd float %74, %76, !dbg !38
  %78 = select i1 %15, float %77, float 0.000000e+00, !dbg !38
  %79 = bitcast float %78 to i32, !dbg !43
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !43
  %81 = bitcast i32 %80 to float, !dbg !43
  %82 = fadd float %78, %81, !dbg !38
  %83 = bitcast float %82 to i32, !dbg !43
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !43
  %85 = bitcast i32 %84 to float, !dbg !43
  %86 = fadd float %82, %85, !dbg !38
  %87 = bitcast float %86 to i32, !dbg !43
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !43
  %89 = bitcast i32 %88 to float, !dbg !43
  %90 = fadd float %86, %89, !dbg !38
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %90) #3, !dbg !44
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %90) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %93 = and i32 %9, 56, !dbg !46
  %94 = icmp eq i32 %93, 0, !dbg !46
  %95 = bitcast float %41 to i32, !dbg !46
  %96 = and i1 %94, %16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %23, i1 %96) #3, !dbg !46
  %97 = shl i32 %13, 4, !dbg !47
  %98 = or disjoint i32 %97, %18, !dbg !48
  %99 = sext i32 %98 to i64, !dbg !49
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !49
  %101 = bitcast float %91 to i32, !dbg !50
  %102 = bitcast float %92 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %100, i1 %15) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py", directory: "inductor_cache/6u")
!4 = !{ptr @triton_per_fused__softmax_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_convolution_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_convolution_2", linkageName: "triton_per_fused__softmax_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 35, column: 38, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 43, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 41, column: 34, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 42, column: 39, scope: !7)
!32 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !31)
!33 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !31)
!35 = !DILocation(line: 131, column: 29, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 24, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 48, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 4, scope: !7)
!46 = !DILocation(line: 51, column: 39, scope: !7)
!47 = !DILocation(line: 52, column: 33, scope: !7)
!48 = !DILocation(line: 52, column: 30, scope: !7)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 52, column: 4, scope: !7)
