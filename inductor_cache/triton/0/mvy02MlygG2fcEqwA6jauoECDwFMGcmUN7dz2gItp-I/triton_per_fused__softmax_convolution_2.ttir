#loc = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0)
#loc1 = loc(unknown)
#loc24 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":42:39)
#loc34 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":48:26)
#loc46 = loc(callsite(#loc1 at #loc24))
#loc52 = loc(callsite(#loc1 at #loc34))
module {
  tt.func public @triton_per_fused__softmax_convolution_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<8x16xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x16xf32> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<8x1xi32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<8x1xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<8x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_2 : tensor<8x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc9)
    %9 = arith.divsi %5, %cst_1 : tensor<8x1xi32> loc(#loc10)
    %10 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc11)
    %11 = tt.addptr %10, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc11)
    %12 = tt.load %11, %6 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>> loc(#loc12)
    %13 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc13)
    %14 = tt.load %13 : !tt.ptr<f32> loc(#loc14)
    %15 = tt.splat %14 : f32 -> tensor<8x1xf32> loc(#loc15)
    %16 = arith.muli %9, %cst_1 : tensor<8x1xi32> loc(#loc16)
    %17 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<8x16xi32> loc(#loc17)
    %18 = tt.broadcast %16 : tensor<8x1xi32> -> tensor<8x16xi32> loc(#loc17)
    %19 = arith.addi %17, %18 : tensor<8x16xi32> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.addptr %20, %19 : tensor<8x16x!tt.ptr<f32>>, tensor<8x16xi32> loc(#loc18)
    %22 = tt.broadcast %6 : tensor<8x1xi1> -> tensor<8x16xi1> loc(#loc19)
    %23 = tt.load %21, %22, %cst_0 evictionPolicy = evict_last : tensor<8x16x!tt.ptr<f32>> loc(#loc19)
    %24 = arith.addf %12, %15 : tensor<8x1xf32> loc(#loc20)
    %25 = tt.broadcast %24 : tensor<8x1xf32> -> tensor<8x16xf32> loc(#loc21)
    %26 = arith.mulf %25, %23 : tensor<8x16xf32> loc(#loc21)
    %27 = arith.select %22, %26, %cst : tensor<8x16xi1>, tensor<8x16xf32> loc(#loc22)
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc24)), %arg7: f32 loc(callsite(#loc1 at #loc24))):
      %43 = arith.cmpf ogt, %arg6, %arg7 : f32 loc(#loc54)
      %44 = arith.cmpf une, %arg6, %arg6 : f32 loc(#loc55)
      %45 = arith.ori %43, %44 : i1 loc(#loc56)
      %46 = arith.select %45, %arg6, %arg7 : f32 loc(#loc57)
      tt.reduce.return %46 : f32 loc(#loc45)
    }) : (tensor<8x16xf32>) -> tensor<8xf32> loc(#loc45)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc29)
    %30 = tt.broadcast %29 : tensor<8x1xf32> -> tensor<8x16xf32> loc(#loc30)
    %31 = arith.subf %26, %30 : tensor<8x16xf32> loc(#loc30)
    %32 = math.exp %31 : tensor<8x16xf32> loc(#loc31)
    %33 = arith.select %22, %32, %cst_0 : tensor<8x16xi1>, tensor<8x16xf32> loc(#loc32)
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc34)), %arg7: f32 loc(callsite(#loc1 at #loc34))):
      %43 = arith.addf %arg6, %arg7 : f32 loc(#loc58)
      tt.reduce.return %43 : f32 loc(#loc51)
    }) : (tensor<8x16xf32>) -> tensor<8xf32> loc(#loc51)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc36)
    %36 = tt.broadcast %35 : tensor<8x1xf32> -> tensor<8x16xf32> loc(#loc37)
    %37 = arith.divf %32, %36 : tensor<8x16xf32> loc(#loc37)
    gpu.barrier loc(#loc38)
    tt.store %11, %24, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc39)
    %38 = arith.muli %5, %cst_1 : tensor<8x1xi32> loc(#loc40)
    %39 = tt.broadcast %38 : tensor<8x1xi32> -> tensor<8x16xi32> loc(#loc41)
    %40 = arith.addi %17, %39 : tensor<8x16xi32> loc(#loc41)
    %41 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>> loc(#loc42)
    %42 = tt.addptr %41, %40 : tensor<8x16x!tt.ptr<f32>>, tensor<8x16xi32> loc(#loc42)
    tt.store %42, %37, %22 : tensor<8x16x!tt.ptr<f32>> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":23:28)
#loc3 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":23:33)
#loc4 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":24:36)
#loc5 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":24:44)
#loc6 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":24:23)
#loc7 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":25:21)
#loc8 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":26:26)
#loc9 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":26:34)
#loc10 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":31:19)
#loc11 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":32:34)
#loc12 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":32:39)
#loc13 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":33:30)
#loc14 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":33:19)
#loc15 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":34:33)
#loc16 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":35:38)
#loc17 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":35:35)
#loc18 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":35:30)
#loc19 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":35:43)
#loc20 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":36:18)
#loc21 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":37:18)
#loc22 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":41:34)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc29 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":42:42)
#loc30 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":43:19)
#loc31 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":45:24)
#loc32 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":47:35)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc36 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":48:29)
#loc37 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":49:20)
#loc38 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":50:4)
#loc39 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":51:39)
#loc40 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:33)
#loc41 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:30)
#loc42 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:25)
#loc43 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:45)
#loc44 = loc("inductor_cache/6u/c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py":52:4)
#loc45 = loc(callsite(#loc23 at #loc24))
#loc47 = loc(callsite(#loc25 at #loc23))
#loc48 = loc(callsite(#loc26 at #loc23))
#loc49 = loc(callsite(#loc27 at #loc23))
#loc50 = loc(callsite(#loc28 at #loc23))
#loc51 = loc(callsite(#loc33 at #loc34))
#loc53 = loc(callsite(#loc35 at #loc33))
#loc54 = loc(callsite(#loc47 at #loc24))
#loc55 = loc(callsite(#loc48 at #loc24))
#loc56 = loc(callsite(#loc49 at #loc24))
#loc57 = loc(callsite(#loc50 at #loc24))
#loc58 = loc(callsite(#loc53 at #loc34))
