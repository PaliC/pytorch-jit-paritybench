; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %21 = sdiv i32 %.frozen, 1024, !dbg !14
  %22 = srem i32 %21, 180, !dbg !15
  %23 = mul i32 %21, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %.frozen17 = freeze i32 %20, !dbg !17
  %24 = sdiv i32 %.frozen17, 184320, !dbg !17
  %25 = sext i32 %22 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !25
  %40 = icmp slt i32 %22, 108, !dbg !26
  %41 = mul i32 %24, 184320, !dbg !27
  %srem.decomposed = sub i32 %.frozen17, %41, !dbg !27
  %42 = mul nsw i32 %24, 110592, !dbg !28
  %43 = add nsw i32 %42, %srem.decomposed, !dbg !29
  %44 = sext i32 %43 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !31
  %47 = add nsw i32 %22, -108, !dbg !32
  %48 = icmp ult i32 %47, 12, !dbg !32
  %49 = shl nsw i32 %22, 10, !dbg !33
  %50 = mul nsw i32 %24, 12288, !dbg !34
  %51 = add nsw i32 %50, %.decomposed, !dbg !33
  %52 = add nsw i32 %51, -110592, !dbg !35
  %53 = add nsw i32 %52, %49, !dbg !36
  %54 = sext i32 %53 to i64, !dbg !37
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !37
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !38
  %57 = add nsw i32 %22, -120, !dbg !39
  %58 = icmp ult i32 %57, 12, !dbg !39
  %59 = add nsw i32 %51, -122880, !dbg !40
  %60 = add nsw i32 %59, %49, !dbg !41
  %61 = sext i32 %60 to i64, !dbg !42
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !42
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #3, !dbg !43
  %64 = add nsw i32 %22, -132, !dbg !44
  %65 = icmp ult i32 %64, 12, !dbg !44
  %66 = add nsw i32 %51, -135168, !dbg !45
  %67 = add nsw i32 %66, %49, !dbg !46
  %68 = sext i32 %67 to i64, !dbg !47
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !47
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #3, !dbg !48
  %71 = add nsw i32 %22, -144, !dbg !49
  %72 = icmp ult i32 %71, 12, !dbg !49
  %73 = add nsw i32 %51, -147456, !dbg !50
  %74 = add nsw i32 %73, %49, !dbg !51
  %75 = sext i32 %74 to i64, !dbg !52
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !52
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #3, !dbg !53
  %78 = add nsw i32 %22, -156, !dbg !54
  %79 = icmp ult i32 %78, 12, !dbg !54
  %80 = add nsw i32 %51, -159744, !dbg !55
  %81 = add nsw i32 %80, %49, !dbg !56
  %82 = sext i32 %81 to i64, !dbg !57
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %82, !dbg !57
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #3, !dbg !58
  %85 = icmp sgt i32 %22, 167, !dbg !59
  %86 = add nsw i32 %51, -172032, !dbg !60
  %87 = add nsw i32 %86, %49, !dbg !61
  %88 = sext i32 %87 to i64, !dbg !62
  %89 = getelementptr float, ptr addrspace(1) %6, i64 %88, !dbg !62
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #3, !dbg !63
  %91 = fadd float %31, 0x3EE4F8B580000000, !dbg !64
  %92 = fadd float %33, 0x3EE4F8B580000000, !dbg !64
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %93, 0, !dbg !65
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %94, 0, !dbg !65
  br i1 %.not.i, label %100, label %95, !dbg !65

95:                                               ; preds = %14
  br i1 %.not1.i, label %98, label %96, !dbg !65

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

100:                                              ; preds = %14
  br i1 %.not1.i, label %103, label %101, !dbg !65

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %96, %98, %101, %103
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !65
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i12 = icmp eq i32 %105, 0, !dbg !65
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i15 = icmp eq i32 %106, 0, !dbg !65
  br i1 %.not.i12, label %112, label %107, !dbg !65

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %110, label %108, !dbg !65

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !65
  br label %__nv_sqrtf.exit16, !dbg !65

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !65
  br label %__nv_sqrtf.exit16, !dbg !65

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %115, label %113, !dbg !65

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !65
  br label %__nv_sqrtf.exit16, !dbg !65

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !65
  br label %__nv_sqrtf.exit16, !dbg !65

__nv_sqrtf.exit16:                                ; preds = %108, %110, %113, %115
  %.0.i14 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !65
  %117 = extractvalue { i32, i32 } %46, 1, !dbg !31
  %118 = extractvalue { i32, i32 } %56, 1, !dbg !38
  %119 = extractvalue { i32, i32 } %63, 1, !dbg !43
  %120 = extractvalue { i32, i32 } %70, 1, !dbg !48
  %121 = extractvalue { i32, i32 } %77, 1, !dbg !53
  %122 = extractvalue { i32, i32 } %84, 1, !dbg !58
  %123 = extractvalue { i32, i32 } %90, 1, !dbg !63
  %.v1 = select i1 %79, i32 %122, i32 %123, !dbg !66
  %.v3 = select i1 %72, i32 %121, i32 %.v1, !dbg !67
  %.v5 = select i1 %65, i32 %120, i32 %.v3, !dbg !68
  %.v7 = select i1 %58, i32 %119, i32 %.v5, !dbg !69
  %.v9 = select i1 %48, i32 %118, i32 %.v7, !dbg !70
  %.v11 = select i1 %40, i32 %117, i32 %.v9, !dbg !71
  %124 = bitcast i32 %.v11 to float, !dbg !71
  %125 = bitcast i32 %28 to float, !dbg !19
  %126 = fsub float %124, %125, !dbg !72
  %127 = extractvalue { i32, i32 } %46, 0, !dbg !31
  %128 = extractvalue { i32, i32 } %56, 0, !dbg !38
  %129 = extractvalue { i32, i32 } %63, 0, !dbg !43
  %130 = extractvalue { i32, i32 } %70, 0, !dbg !48
  %131 = extractvalue { i32, i32 } %77, 0, !dbg !53
  %132 = extractvalue { i32, i32 } %84, 0, !dbg !58
  %133 = extractvalue { i32, i32 } %90, 0, !dbg !63
  %.v = select i1 %79, i32 %132, i32 %133, !dbg !66
  %.v2 = select i1 %72, i32 %131, i32 %.v, !dbg !67
  %.v4 = select i1 %65, i32 %130, i32 %.v2, !dbg !68
  %.v6 = select i1 %58, i32 %129, i32 %.v4, !dbg !69
  %.v8 = select i1 %48, i32 %128, i32 %.v6, !dbg !70
  %.v10 = select i1 %40, i32 %127, i32 %.v8, !dbg !71
  %134 = bitcast i32 %.v10 to float, !dbg !71
  %135 = bitcast i32 %27 to float, !dbg !19
  %136 = fsub float %134, %135, !dbg !72
  %137 = bitcast i32 %39 to float, !dbg !25
  %138 = bitcast i32 %38 to float, !dbg !25
  %139 = bitcast i32 %36 to float, !dbg !23
  %140 = bitcast i32 %35 to float, !dbg !23
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !73
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !73
  %143 = fmul float %136, %141, !dbg !74
  %144 = fmul float %126, %142, !dbg !74
  %145 = fmul float %143, %140, !dbg !75
  %146 = fmul float %144, %139, !dbg !75
  %147 = fadd float %145, %138, !dbg !76
  %148 = fadd float %146, %137, !dbg !76
  %149 = fcmp olt float %147, 0.000000e+00, !dbg !77
  %150 = fcmp olt float %148, 0.000000e+00, !dbg !77
  %151 = select i1 %149, float 0.000000e+00, float %147, !dbg !81
  %152 = select i1 %150, float 0.000000e+00, float %148, !dbg !81
  %153 = sext i32 %20 to i64, !dbg !82
  %154 = getelementptr float, ptr addrspace(1) %11, i64 %153, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v10, i32 %.v11, ptr addrspace(1) %154, i1 true) #3, !dbg !83
  %155 = getelementptr float, ptr addrspace(1) %12, i64 %153, !dbg !84
  %156 = bitcast float %151 to i32, !dbg !85
  %157 = bitcast float %152 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %157, ptr addrspace(1) %155, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c747mtuteayi3wmn2mr25ufwwjrvindfbkhybck3gd5ri3ehii7w.py", directory: "inductor_cache/74")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 32, scope: !7)
!25 = !DILocation(line: 31, column: 37, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 54, scope: !7)
!29 = !DILocation(line: 37, column: 47, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 59, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 42, scope: !7)
!34 = !DILocation(line: 42, column: 63, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 57, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 68, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 57, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 68, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 36, scope: !7)
!46 = !DILocation(line: 52, column: 57, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 68, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 36, scope: !7)
!51 = !DILocation(line: 57, column: 57, scope: !7)
!52 = !DILocation(line: 57, column: 31, scope: !7)
!53 = !DILocation(line: 57, column: 68, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 36, scope: !7)
!56 = !DILocation(line: 62, column: 57, scope: !7)
!57 = !DILocation(line: 62, column: 31, scope: !7)
!58 = !DILocation(line: 62, column: 68, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 36, scope: !7)
!61 = !DILocation(line: 66, column: 57, scope: !7)
!62 = !DILocation(line: 66, column: 31, scope: !7)
!63 = !DILocation(line: 66, column: 68, scope: !7)
!64 = !DILocation(line: 75, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 27, scope: !7)
!66 = !DILocation(line: 67, column: 35, scope: !7)
!67 = !DILocation(line: 68, column: 35, scope: !7)
!68 = !DILocation(line: 69, column: 35, scope: !7)
!69 = !DILocation(line: 70, column: 35, scope: !7)
!70 = !DILocation(line: 71, column: 34, scope: !7)
!71 = !DILocation(line: 72, column: 33, scope: !7)
!72 = !DILocation(line: 73, column: 20, scope: !7)
!73 = !DILocation(line: 78, column: 20, scope: !7)
!74 = !DILocation(line: 81, column: 20, scope: !7)
!75 = !DILocation(line: 82, column: 20, scope: !7)
!76 = !DILocation(line: 83, column: 20, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 85, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 86, column: 25, scope: !7)
!83 = !DILocation(line: 86, column: 37, scope: !7)
!84 = !DILocation(line: 87, column: 25, scope: !7)
!85 = !DILocation(line: 87, column: 37, scope: !7)
!86 = !DILocation(line: 87, column: 4, scope: !7)
