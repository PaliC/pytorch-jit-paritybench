; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_5(ptr addrspace(1) %0, i64 %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = lshr i32 %13, 5, !dbg !12
  %16 = and i32 %13, 63, !dbg !12
  %17 = icmp samesign ult i32 %16, 36, !dbg !13
  %18 = mul i32 %11, 36, !dbg !14
  %19 = add i32 %18, %16, !dbg !15
  %20 = sext i32 %19 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = and i1 %17, %12, !dbg !17
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22) #5, !dbg !18
  %24 = bitcast i32 %23 to float, !dbg !18
  %25 = sext i32 %11 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %12) #5, !dbg !20
  %28 = select i1 %22, float %24, float 0.000000e+00, !dbg !21
  %29 = bitcast float %28 to i32, !dbg !22
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 16, i32 31), !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = fadd float %28, %31, !dbg !26
  %33 = bitcast float %32 to i32, !dbg !22
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 8, i32 31), !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = fadd float %32, %35, !dbg !26
  %37 = bitcast float %36 to i32, !dbg !22
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 4, i32 31), !dbg !22
  %39 = bitcast i32 %38 to float, !dbg !22
  %40 = fadd float %36, %39, !dbg !26
  %41 = bitcast float %40 to i32, !dbg !22
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !22
  %43 = bitcast i32 %42 to float, !dbg !22
  %44 = fadd float %40, %43, !dbg !26
  %45 = bitcast float %44 to i32, !dbg !22
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 1, i32 31), !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = fadd float %44, %47, !dbg !26
  %49 = icmp eq i32 %14, 0, !dbg !22
  %50 = and i32 %15, 1, !dbg !22
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i32 %50, !dbg !22
  %52 = bitcast float %48 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 %49) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %53 = icmp slt i32 %13, 2, !dbg !22
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !22
  %55 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %54, i1 %53) #5, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 1, i32 31), !dbg !22
  %58 = bitcast i32 %57 to float, !dbg !22
  %59 = fadd float %56, %58, !dbg !26
  %60 = and i32 %13, 1, !dbg !22
  %61 = icmp eq i32 %60, 0, !dbg !22
  %62 = and i1 %53, %61, !dbg !22
  %63 = bitcast float %59 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %63, i1 %62) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %64 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 3.600000e+01) #5, !dbg !28
  %66 = fsub float %24, %65, !dbg !29
  %67 = fmul float %66, %66, !dbg !30
  %68 = select i1 %22, float %67, float 0.000000e+00, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %69 = bitcast float %68 to i32, !dbg !32
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = fadd float %68, %71, !dbg !34
  %73 = bitcast float %72 to i32, !dbg !32
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = fadd float %72, %75, !dbg !34
  %77 = bitcast float %76 to i32, !dbg !32
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = fadd float %76, %79, !dbg !34
  %81 = bitcast float %80 to i32, !dbg !32
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !32
  %83 = bitcast i32 %82 to float, !dbg !32
  %84 = fadd float %80, %83, !dbg !34
  %85 = bitcast float %84 to i32, !dbg !32
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = fadd float %84, %87, !dbg !34
  %89 = bitcast float %88 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %89, i1 %49) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %54, i1 %53) #5, !dbg !32
  %91 = bitcast i32 %90 to float, !dbg !32
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !32
  %93 = bitcast i32 %92 to float, !dbg !32
  %94 = fadd float %91, %93, !dbg !34
  %95 = bitcast float %94 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %95, i1 %62) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %96 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 3.500000e+01) #5, !dbg !35
  %98 = sitofp i64 %1 to float, !dbg !36
  %99 = fmul float %97, %98, !dbg !37
  %100 = fcmp ogt float %99, 0x3F1A36E2E0000000, !dbg !38
  %101 = fcmp uno float %99, 0.000000e+00, !dbg !42
  %102 = or i1 %100, %101, !dbg !43
  %103 = select i1 %102, float %99, float 0x3F1A36E2E0000000, !dbg !44
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i = icmp eq i32 %104, 0, !dbg !45
  br i1 %.not.i, label %107, label %105, !dbg !45

105:                                              ; preds = %10
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %103), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

107:                                              ; preds = %10
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %103), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %105, %107
  %.0.i = phi float [ %106, %105 ], [ %108, %107 ], !dbg !45
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i1 = icmp eq i32 %109, 0, !dbg !45
  br i1 %.not.i1, label %112, label %110, !dbg !45

110:                                              ; preds = %__nv_rsqrtf.exit
  %111 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %103), !dbg !45
  br label %__nv_rsqrtf.exit3, !dbg !45

112:                                              ; preds = %__nv_rsqrtf.exit
  %113 = tail call float @llvm.nvvm.rsqrt.approx.f(float %103), !dbg !45
  br label %__nv_rsqrtf.exit3, !dbg !45

__nv_rsqrtf.exit3:                                ; preds = %110, %112
  %.0.i2 = phi float [ %111, %110 ], [ %113, %112 ], !dbg !45
  %114 = bitcast i32 %27 to float, !dbg !20
  %115 = fcmp oeq float %99, 0x3F1A36E2E0000000, !dbg !46
  %116 = fcmp olt float %99, 0x3F1A36E2E0000000, !dbg !47
  %117 = fmul float %.0.i2, %114, !dbg !48
  %118 = fmul float %117, %24, !dbg !49
  %119 = fmul float %65, %117, !dbg !50
  %120 = fsub float %118, %119, !dbg !51
  %121 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !52
  %122 = icmp eq i32 %16, 0, !dbg !53
  %123 = bitcast float %.0.i to i32, !dbg !53
  %124 = and i1 %122, %12, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %121, i1 %124) #5, !dbg !53
  %125 = getelementptr i1, ptr addrspace(1) %5, i64 %25, !dbg !54
  %126 = zext i1 %115 to i8, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %126, ptr addrspace(1) %125, i1 %124) #5, !dbg !55
  %127 = getelementptr i1, ptr addrspace(1) %6, i64 %25, !dbg !56
  %128 = zext i1 %116 to i8, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %128, ptr addrspace(1) %127, i1 %124) #5, !dbg !57
  %129 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !58
  %130 = bitcast float %120 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %129, i1 %22) #5, !dbg !59
  %131 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !60
  %132 = bitcast float %65 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %131, i1 %124) #5, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py", directory: "inductor_cache/fk")
!4 = !{ptr @triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_5", linkageName: "triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 38, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 31, scope: !7)
!20 = !DILocation(line: 33, column: 36, scope: !7)
!21 = !DILocation(line: 37, column: 41, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 38, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 42, column: 19, scope: !7)
!30 = !DILocation(line: 43, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 43, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 46, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !33)
!35 = !DILocation(line: 48, column: 20, scope: !7)
!36 = !DILocation(line: 49, column: 21, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 52, column: 42, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 53, column: 28, scope: !7)
!46 = !DILocation(line: 54, column: 21, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 19, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 25, scope: !7)
!53 = !DILocation(line: 60, column: 37, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 37, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 37, scope: !7)
!58 = !DILocation(line: 63, column: 25, scope: !7)
!59 = !DILocation(line: 63, column: 45, scope: !7)
!60 = !DILocation(line: 64, column: 25, scope: !7)
!61 = !DILocation(line: 64, column: 37, scope: !7)
!62 = !DILocation(line: 64, column: 4, scope: !7)
