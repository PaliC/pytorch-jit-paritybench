#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0)
#loc1 = loc(unknown)
#loc15 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":38:24)
#loc22 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":46:26)
#loc51 = loc(callsite(#loc1 at #loc15))
#loc54 = loc(callsite(#loc1 at #loc22))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_5(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0), %arg1: i64 {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0), %arg5: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0), %arg6: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0), %arg8: i32 loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0), %arg9: i32 loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3.500000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-5> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<36> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c36_i32 = arith.constant 36 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<3.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-5> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<3.500000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.cmpi slt, %3, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.muli %0, %c36_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x64xi32, #blocked> loc(#loc7)
    %7 = arith.addi %3, %6 : tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %8, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc9)
    %11 = arith.andi %4, %10 : tensor<1x64xi1, #blocked> loc(#loc9)
    %12 = tt.load %9, %11, %cst_2 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc11)
    %14 = tt.splat %13 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc12)
    %16 = tt.load %14, %15 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %17 = arith.select %11, %12, %cst_2 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc13)
    %18 = "tt.reduce"(%17) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc15)), %arg11: f32 loc(callsite(#loc1 at #loc15))):
      %74 = arith.addf %arg10, %arg11 : f32 loc(#loc59)
      tt.reduce.return %74 : f32 loc(#loc50)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc50)
    %19 = triton_gpu.convert_layout %18 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc17)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc18)
    %21 = tt.expand_dims %18 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc18)
    %22 = arith.divf %20, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc17)
    %23 = arith.divf %21, %cst_3 : tensor<1x1xf32, #blocked> loc(#loc17)
    %24 = tt.broadcast %23 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc19)
    %25 = arith.subf %12, %24 : tensor<1x64xf32, #blocked> loc(#loc19)
    %26 = arith.mulf %25, %25 : tensor<1x64xf32, #blocked> loc(#loc20)
    %27 = arith.select %11, %26, %cst_2 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc21)
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc22)), %arg11: f32 loc(callsite(#loc1 at #loc22))):
      %74 = arith.addf %arg10, %arg11 : f32 loc(#loc60)
      tt.reduce.return %74 : f32 loc(#loc53)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc53)
    %29 = triton_gpu.convert_layout %28 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc24)
    %31 = tt.expand_dims %28 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc24)
    %32 = arith.divf %30, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc25)
    %33 = arith.divf %31, %cst : tensor<1x1xf32, #blocked> loc(#loc25)
    %34 = arith.sitofp %arg1 : i64 to f32 loc(#loc26)
    %35 = tt.splat %34 : f32 -> tensor<1x1xf32, #blocked1> loc(#loc27)
    %36 = tt.splat %34 : f32 -> tensor<1x1xf32, #blocked> loc(#loc27)
    %37 = arith.mulf %32, %35 : tensor<1x1xf32, #blocked1> loc(#loc27)
    %38 = arith.mulf %33, %36 : tensor<1x1xf32, #blocked> loc(#loc27)
    %39 = arith.cmpf ogt, %37, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc55)
    %40 = arith.cmpf ogt, %38, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc55)
    %41 = arith.cmpf une, %37, %37 : tensor<1x1xf32, #blocked1> loc(#loc56)
    %42 = arith.cmpf une, %38, %38 : tensor<1x1xf32, #blocked> loc(#loc56)
    %43 = arith.ori %39, %41 : tensor<1x1xi1, #blocked1> loc(#loc57)
    %44 = arith.ori %40, %42 : tensor<1x1xi1, #blocked> loc(#loc57)
    %45 = arith.select %43, %37, %cst_5 : tensor<1x1xi1, #blocked1>, tensor<1x1xf32, #blocked1> loc(#loc58)
    %46 = arith.select %44, %38, %cst_0 : tensor<1x1xi1, #blocked>, tensor<1x1xf32, #blocked> loc(#loc58)
    %47 = tt.extern_elementwise %45 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc23)
    %48 = tt.extern_elementwise %46 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc23)
    %49 = arith.cmpf oeq, %38, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc33)
    %50 = arith.cmpf olt, %38, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc34)
    %51 = arith.mulf %48, %16 : tensor<1x1xf32, #blocked> loc(#loc35)
    %52 = tt.broadcast %51 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc36)
    %53 = arith.mulf %12, %52 : tensor<1x64xf32, #blocked> loc(#loc36)
    %54 = arith.mulf %23, %51 : tensor<1x1xf32, #blocked> loc(#loc37)
    %55 = tt.broadcast %54 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc38)
    %56 = arith.subf %53, %55 : tensor<1x64xf32, #blocked> loc(#loc38)
    %57 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc39)
    %58 = tt.splat %57 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    %59 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc40)
    tt.store %58, %47, %59 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    %60 = tt.addptr %arg5, %0 : !tt.ptr<i1>, i32 loc(#loc41)
    %61 = tt.bitcast %60 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc42)
    %62 = triton_gpu.convert_layout %49 : tensor<1x1xi1, #blocked> -> tensor<1x1xi1, #blocked1> loc(#loc42)
    %63 = arith.extui %62 : tensor<1x1xi1, #blocked1> to tensor<1x1xi8, #blocked1> loc(#loc42)
    %64 = tt.splat %61 : !tt.ptr<i8> -> tensor<1x1x!tt.ptr<i8>, #blocked1> loc(#loc42)
    tt.store %64, %63, %59 : tensor<1x1x!tt.ptr<i8>, #blocked1> loc(#loc42)
    %65 = tt.addptr %arg6, %0 : !tt.ptr<i1>, i32 loc(#loc43)
    %66 = tt.bitcast %65 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc44)
    %67 = triton_gpu.convert_layout %50 : tensor<1x1xi1, #blocked> -> tensor<1x1xi1, #blocked1> loc(#loc44)
    %68 = arith.extui %67 : tensor<1x1xi1, #blocked1> to tensor<1x1xi8, #blocked1> loc(#loc44)
    %69 = tt.splat %66 : !tt.ptr<i8> -> tensor<1x1x!tt.ptr<i8>, #blocked1> loc(#loc44)
    tt.store %69, %68, %59 : tensor<1x1x!tt.ptr<i8>, #blocked1> loc(#loc44)
    %70 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc45)
    %71 = tt.addptr %70, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc45)
    tt.store %71, %56, %11 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc46)
    %72 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc47)
    %73 = tt.splat %72 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc48)
    tt.store %73, %22, %59 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc48)
    tt.return loc(#loc49)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":23:28)
#loc3 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":25:21)
#loc4 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":26:34)
#loc5 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":28:21)
#loc6 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":31:38)
#loc7 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":31:35)
#loc8 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":31:30)
#loc9 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":31:51)
#loc10 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":31:43)
#loc11 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":33:31)
#loc12 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":33:36)
#loc13 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":37:41)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc17 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":41:19)
#loc18 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":38:27)
#loc19 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":42:19)
#loc20 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":43:20)
#loc21 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":45:43)
#loc23 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":53:28)
#loc24 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":46:29)
#loc25 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":48:20)
#loc26 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":49:21)
#loc27 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":50:20)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc29 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":52:42)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc33 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":54:21)
#loc34 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":55:20)
#loc35 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":56:20)
#loc36 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":57:19)
#loc37 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":58:20)
#loc38 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":59:20)
#loc39 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":60:25)
#loc40 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":60:37)
#loc41 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":61:25)
#loc42 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":61:37)
#loc43 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":62:25)
#loc44 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":62:37)
#loc45 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":63:25)
#loc46 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":63:45)
#loc47 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":64:25)
#loc48 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":64:37)
#loc49 = loc("inductor_cache/fk/cfkidn5we3i6gom5z7ij4p2g2vwbqqrtzbykppnp4oh4zgqfnffa.py":64:4)
#loc50 = loc(callsite(#loc14 at #loc15))
#loc52 = loc(callsite(#loc16 at #loc14))
#loc53 = loc(callsite(#loc14 at #loc22))
#loc55 = loc(callsite(#loc28 at #loc29))
#loc56 = loc(callsite(#loc30 at #loc29))
#loc57 = loc(callsite(#loc31 at #loc29))
#loc58 = loc(callsite(#loc32 at #loc29))
#loc59 = loc(callsite(#loc52 at #loc15))
#loc60 = loc(callsite(#loc52 at #loc22))
