; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %21 = shl i32 %20, 7, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = and i32 %22, 127, !dbg !12
  %24 = or disjoint i32 %21, %23, !dbg !13
  %25 = icmp slt i32 %24, 3136, !dbg !14
  %.frozen = freeze i32 %24, !dbg !15
  %26 = sdiv i32 %.frozen, 14, !dbg !15
  %27 = srem i32 %26, 14, !dbg !16
  %28 = mul i32 %26, 14, !dbg !17
  %.decomposed = sub i32 %.frozen, %28, !dbg !17
  %29 = sdiv i32 %24, 196, !dbg !18
  %30 = srem i32 %29, 4, !dbg !19
  %31 = sext i32 %24 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %25) #3, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %25) #3, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %25) #3, !dbg !25
  %38 = sext i32 %27 to i64, !dbg !26
  %39 = getelementptr i64, ptr addrspace(1) %3, i64 %38, !dbg !26
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %25) #3, !dbg !27
  %41 = sext i32 %.decomposed to i64, !dbg !28
  %42 = getelementptr i64, ptr addrspace(1) %4, i64 %41, !dbg !28
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %25) #3, !dbg !29
  %44 = getelementptr i64, ptr addrspace(1) %8, i64 %38, !dbg !30
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %25) #3, !dbg !31
  %46 = getelementptr i64, ptr addrspace(1) %9, i64 %41, !dbg !32
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %25) #3, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %10, i64 %41, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %25) #3, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %11, i64 %38, !dbg !36
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %25) #3, !dbg !37
  %52 = sext i32 %30 to i64, !dbg !38
  %53 = getelementptr float, ptr addrspace(1) %12, i64 %52, !dbg !38
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %25) #3, !dbg !39
  %55 = getelementptr float, ptr addrspace(1) %13, i64 %52, !dbg !40
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %25) #3, !dbg !41
  %57 = bitcast i32 %56 to float, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %14, i64 %52, !dbg !42
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %25) #3, !dbg !43
  %60 = getelementptr float, ptr addrspace(1) %15, i64 %52, !dbg !44
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %25) #3, !dbg !45
  %62 = add i64 %40, 7, !dbg !46
  %63 = icmp slt i64 %40, 0, !dbg !47
  %64 = select i1 %63, i64 %62, i64 %40, !dbg !48
  %65 = add i64 %43, 7, !dbg !49
  %66 = icmp slt i64 %43, 0, !dbg !50
  %67 = select i1 %66, i64 %65, i64 %43, !dbg !51
  %68 = mul i64 %64, 7, !dbg !52
  %69 = mul nsw i32 %29, 49, !dbg !53
  %70 = sext i32 %69 to i64, !dbg !54
  %71 = add i64 %68, %70, !dbg !55
  %72 = add i64 %71, %67, !dbg !54
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %72, !dbg !56
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %25) #3, !dbg !57
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %72, !dbg !58
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #3, !dbg !59
  %77 = getelementptr float, ptr addrspace(1) %7, i64 %72, !dbg !60
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %25) #3, !dbg !61
  %79 = add i64 %45, 7, !dbg !62
  %80 = icmp slt i64 %45, 0, !dbg !63
  %81 = select i1 %80, i64 %79, i64 %45, !dbg !64
  %82 = mul i64 %81, 7, !dbg !65
  %83 = add i64 %67, %70, !dbg !66
  %84 = add i64 %83, %82, !dbg !67
  %85 = getelementptr float, ptr addrspace(1) %5, i64 %84, !dbg !68
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %25) #3, !dbg !69
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %84, !dbg !70
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %25) #3, !dbg !71
  %89 = getelementptr float, ptr addrspace(1) %7, i64 %84, !dbg !72
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %25) #3, !dbg !73
  %91 = add i64 %47, 7, !dbg !74
  %92 = icmp slt i64 %47, 0, !dbg !75
  %93 = select i1 %92, i64 %91, i64 %47, !dbg !76
  %94 = add i64 %82, %70, !dbg !77
  %95 = add i64 %94, %93, !dbg !78
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !79
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %25) #3, !dbg !80
  %98 = getelementptr float, ptr addrspace(1) %6, i64 %95, !dbg !81
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %25) #3, !dbg !82
  %100 = getelementptr float, ptr addrspace(1) %7, i64 %95, !dbg !83
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %25) #3, !dbg !84
  %102 = add i64 %71, %93, !dbg !85
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %102, !dbg !86
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %25) #3, !dbg !87
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %102, !dbg !88
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %25) #3, !dbg !89
  %107 = getelementptr float, ptr addrspace(1) %7, i64 %102, !dbg !90
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %25) #3, !dbg !91
  %109 = fadd float %57, 0x3EE4F8B580000000, !dbg !92
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !93
  %.not.i = icmp eq i32 %110, 0, !dbg !93
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !93
  %.not1.i = icmp eq i32 %111, 0, !dbg !93
  br i1 %.not.i, label %117, label %112, !dbg !93

112:                                              ; preds = %19
  br i1 %.not1.i, label %115, label %113, !dbg !93

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !93
  br label %__nv_sqrtf.exit, !dbg !93

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !93
  br label %__nv_sqrtf.exit, !dbg !93

117:                                              ; preds = %19
  br i1 %.not1.i, label %120, label %118, !dbg !93

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !93
  br label %__nv_sqrtf.exit, !dbg !93

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !93
  br label %__nv_sqrtf.exit, !dbg !93

__nv_sqrtf.exit:                                  ; preds = %113, %115, %118, %120
  %.0.i = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !93
  %122 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !59
  %123 = insertelement <2 x i32> %122, i32 %88, i64 1, !dbg !59
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !59
  %125 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !61
  %126 = insertelement <2 x i32> %125, i32 %90, i64 1, !dbg !61
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !61
  %128 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !57
  %129 = insertelement <2 x i32> %128, i32 %86, i64 1, !dbg !57
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !57
  %131 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !89
  %132 = insertelement <2 x i32> %131, i32 %99, i64 1, !dbg !89
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !89
  %134 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !91
  %135 = insertelement <2 x i32> %134, i32 %101, i64 1, !dbg !91
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !91
  %137 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !87
  %138 = insertelement <2 x i32> %137, i32 %97, i64 1, !dbg !87
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !87
  %140 = fadd <2 x float> %124, %127, !dbg !94
  %141 = fadd <2 x float> %140, %130, !dbg !95
  %142 = fadd <2 x float> %133, %136, !dbg !96
  %143 = fadd <2 x float> %142, %139, !dbg !97
  %144 = fsub <2 x float> %143, %141, !dbg !98
  %145 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !99
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !99
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %148 = fmul <2 x float> %144, %147, !dbg !99
  %149 = fadd <2 x float> %141, %148, !dbg !100
  %150 = extractelement <2 x float> %149, i64 0, !dbg !101
  %151 = extractelement <2 x float> %149, i64 1, !dbg !102
  %152 = fsub float %150, %151, !dbg !101
  %153 = bitcast i32 %51 to float, !dbg !37
  %154 = fmul float %152, %153, !dbg !103
  %155 = fadd float %151, %154, !dbg !102
  %156 = bitcast i32 %35 to float, !dbg !23
  %157 = bitcast i32 %37 to float, !dbg !25
  %158 = fadd float %156, %157, !dbg !104
  %159 = bitcast i32 %33 to float, !dbg !21
  %160 = fadd float %158, %159, !dbg !105
  %161 = fadd float %160, %155, !dbg !106
  %162 = bitcast i32 %54 to float, !dbg !39
  %163 = fsub float %161, %162, !dbg !107
  %164 = bitcast i32 %61 to float, !dbg !45
  %165 = bitcast i32 %59 to float, !dbg !43
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !108
  %167 = fmul float %163, %166, !dbg !109
  %168 = fmul float %167, %165, !dbg !110
  %169 = fadd float %168, %164, !dbg !111
  %170 = fcmp olt float %169, 0.000000e+00, !dbg !112
  %171 = select i1 %170, float 0.000000e+00, float %169, !dbg !116
  %172 = bitcast float %160 to i32, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %32, i1 %25) #3, !dbg !117
  %173 = getelementptr float, ptr addrspace(1) %16, i64 %31, !dbg !118
  %174 = bitcast float %171 to i32, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %173, i1 %25) #3, !dbg !119
  %175 = getelementptr float, ptr addrspace(1) %17, i64 %31, !dbg !120
  %176 = bitcast float %163 to i32, !dbg !121
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %175, i1 %25) #3, !dbg !121
  ret void, !dbg !122
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnveygaltxg3jfaamtv5iml7cngqn5rkxdfgz7plpqvfaeyak7dc.py", directory: "inductor_cache/nv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_native_batch_norm_backward_relu_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 28, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 39, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 32, scope: !7)
!37 = !DILocation(line: 37, column: 37, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 45, column: 18, scope: !7)
!47 = !DILocation(line: 46, column: 18, scope: !7)
!48 = !DILocation(line: 47, column: 32, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 35, scope: !7)
!52 = !DILocation(line: 51, column: 41, scope: !7)
!53 = !DILocation(line: 51, column: 51, scope: !7)
!54 = !DILocation(line: 51, column: 48, scope: !7)
!55 = !DILocation(line: 51, column: 39, scope: !7)
!56 = !DILocation(line: 51, column: 31, scope: !7)
!57 = !DILocation(line: 51, column: 56, scope: !7)
!58 = !DILocation(line: 52, column: 31, scope: !7)
!59 = !DILocation(line: 52, column: 56, scope: !7)
!60 = !DILocation(line: 53, column: 31, scope: !7)
!61 = !DILocation(line: 53, column: 56, scope: !7)
!62 = !DILocation(line: 56, column: 20, scope: !7)
!63 = !DILocation(line: 57, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 35, scope: !7)
!65 = !DILocation(line: 59, column: 41, scope: !7)
!66 = !DILocation(line: 59, column: 39, scope: !7)
!67 = !DILocation(line: 59, column: 49, scope: !7)
!68 = !DILocation(line: 59, column: 31, scope: !7)
!69 = !DILocation(line: 59, column: 57, scope: !7)
!70 = !DILocation(line: 60, column: 31, scope: !7)
!71 = !DILocation(line: 60, column: 57, scope: !7)
!72 = !DILocation(line: 61, column: 31, scope: !7)
!73 = !DILocation(line: 61, column: 57, scope: !7)
!74 = !DILocation(line: 64, column: 20, scope: !7)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 66, column: 35, scope: !7)
!77 = !DILocation(line: 67, column: 39, scope: !7)
!78 = !DILocation(line: 67, column: 49, scope: !7)
!79 = !DILocation(line: 67, column: 31, scope: !7)
!80 = !DILocation(line: 67, column: 57, scope: !7)
!81 = !DILocation(line: 68, column: 31, scope: !7)
!82 = !DILocation(line: 68, column: 57, scope: !7)
!83 = !DILocation(line: 69, column: 31, scope: !7)
!84 = !DILocation(line: 69, column: 57, scope: !7)
!85 = !DILocation(line: 75, column: 48, scope: !7)
!86 = !DILocation(line: 75, column: 31, scope: !7)
!87 = !DILocation(line: 75, column: 56, scope: !7)
!88 = !DILocation(line: 76, column: 31, scope: !7)
!89 = !DILocation(line: 76, column: 56, scope: !7)
!90 = !DILocation(line: 77, column: 31, scope: !7)
!91 = !DILocation(line: 77, column: 56, scope: !7)
!92 = !DILocation(line: 89, column: 20, scope: !7)
!93 = !DILocation(line: 90, column: 27, scope: !7)
!94 = !DILocation(line: 54, column: 20, scope: !7)
!95 = !DILocation(line: 55, column: 20, scope: !7)
!96 = !DILocation(line: 78, column: 20, scope: !7)
!97 = !DILocation(line: 79, column: 20, scope: !7)
!98 = !DILocation(line: 80, column: 20, scope: !7)
!99 = !DILocation(line: 81, column: 20, scope: !7)
!100 = !DILocation(line: 82, column: 20, scope: !7)
!101 = !DILocation(line: 83, column: 20, scope: !7)
!102 = !DILocation(line: 85, column: 20, scope: !7)
!103 = !DILocation(line: 84, column: 20, scope: !7)
!104 = !DILocation(line: 42, column: 18, scope: !7)
!105 = !DILocation(line: 43, column: 18, scope: !7)
!106 = !DILocation(line: 86, column: 20, scope: !7)
!107 = !DILocation(line: 87, column: 20, scope: !7)
!108 = !DILocation(line: 92, column: 20, scope: !7)
!109 = !DILocation(line: 95, column: 20, scope: !7)
!110 = !DILocation(line: 96, column: 20, scope: !7)
!111 = !DILocation(line: 97, column: 20, scope: !7)
!112 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !115)
!113 = distinct !DILexicalBlockFile(scope: !7, file: !114, discriminator: 0)
!114 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!115 = !DILocation(line: 99, column: 42, scope: !7)
!116 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !115)
!117 = !DILocation(line: 100, column: 39, scope: !7)
!118 = !DILocation(line: 101, column: 25, scope: !7)
!119 = !DILocation(line: 101, column: 37, scope: !7)
!120 = !DILocation(line: 102, column: 25, scope: !7)
!121 = !DILocation(line: 102, column: 37, scope: !7)
!122 = !DILocation(line: 102, column: 4, scope: !7)
