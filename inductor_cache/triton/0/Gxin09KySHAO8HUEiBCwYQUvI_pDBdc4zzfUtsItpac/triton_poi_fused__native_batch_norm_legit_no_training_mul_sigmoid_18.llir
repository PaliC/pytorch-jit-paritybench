; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = shl i32 %11, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %16, 32, !dbg !13
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = icmp slt i32 %17, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 4, !dbg !16
  %22 = or disjoint i32 %21, %15, !dbg !17
  %23 = icmp slt i32 %22, 16, !dbg !18
  %24 = shl i32 %16, 4, !dbg !19
  %25 = shl i32 %17, 4, !dbg !19
  %26 = add i32 %22, %24, !dbg !20
  %27 = add i32 %22, %25, !dbg !20
  %28 = sext i32 %26 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = and i1 %18, %23, !dbg !22
  %33 = and i1 %19, %23, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %32) #4, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %33) #4, !dbg !23
  %36 = sext i32 %22 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %23) #4, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %23) #4, !dbg !27
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %45 = bitcast i32 %41 to float, !dbg !27
  %46 = bitcast i32 %42 to float, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !28
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %23) #4, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !30
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %23) #4, !dbg !31
  %53 = fadd float %45, 0x3F50624DE0000000, !dbg !32
  %54 = fadd float %46, 0x3F50624DE0000000, !dbg !32
  %55 = fadd float %47, 0x3F50624DE0000000, !dbg !32
  %56 = fadd float %48, 0x3F50624DE0000000, !dbg !32
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %57, 0, !dbg !33
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %58, 0, !dbg !33
  br i1 %.not.i, label %64, label %59, !dbg !33

59:                                               ; preds = %8
  br i1 %.not1.i, label %62, label %60, !dbg !33

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

64:                                               ; preds = %8
  br i1 %.not1.i, label %67, label %65, !dbg !33

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !33
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i17 = icmp eq i32 %69, 0, !dbg !33
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i20 = icmp eq i32 %70, 0, !dbg !33
  br i1 %.not.i17, label %76, label %71, !dbg !33

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %74, label %72, !dbg !33

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit21, !dbg !33

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit21, !dbg !33

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %79, label %77, !dbg !33

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit21, !dbg !33

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit21, !dbg !33

__nv_sqrtf.exit21:                                ; preds = %72, %74, %77, %79
  %.0.i19 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !33
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i22 = icmp eq i32 %81, 0, !dbg !33
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i25 = icmp eq i32 %82, 0, !dbg !33
  br i1 %.not.i22, label %88, label %83, !dbg !33

83:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %86, label %84, !dbg !33

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit26, !dbg !33

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit26, !dbg !33

88:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %91, label %89, !dbg !33

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit26, !dbg !33

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit26, !dbg !33

__nv_sqrtf.exit26:                                ; preds = %84, %86, %89, %91
  %.0.i24 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !33
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i27 = icmp eq i32 %93, 0, !dbg !33
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i30 = icmp eq i32 %94, 0, !dbg !33
  br i1 %.not.i27, label %100, label %95, !dbg !33

95:                                               ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %98, label %96, !dbg !33

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit31, !dbg !33

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit31, !dbg !33

100:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %103, label %101, !dbg !33

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit31, !dbg !33

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit31, !dbg !33

__nv_sqrtf.exit31:                                ; preds = %96, %98, %101, %103
  %.0.i29 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !33
  %105 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %106 = bitcast i32 %105 to float, !dbg !23
  %107 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = fsub float %106, %108, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %111 = bitcast i32 %110 to float, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %113 = bitcast i32 %112 to float, !dbg !25
  %114 = fsub float %111, %113, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %116 = bitcast i32 %115 to float, !dbg !23
  %117 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %118 = bitcast i32 %117 to float, !dbg !25
  %119 = fsub float %116, %118, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %121 = bitcast i32 %120 to float, !dbg !23
  %122 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %123 = bitcast i32 %122 to float, !dbg !25
  %124 = fsub float %121, %123, !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %126 = bitcast i32 %125 to float, !dbg !23
  %127 = fsub float %126, %108, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %129 = bitcast i32 %128 to float, !dbg !23
  %130 = fsub float %129, %113, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %132 = bitcast i32 %131 to float, !dbg !23
  %133 = fsub float %132, %118, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %135 = bitcast i32 %134 to float, !dbg !23
  %136 = fsub float %135, %123, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !31
  %138 = bitcast i32 %137 to float, !dbg !31
  %139 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !31
  %140 = bitcast i32 %139 to float, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !31
  %142 = bitcast i32 %141 to float, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !31
  %144 = bitcast i32 %143 to float, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !29
  %146 = bitcast i32 %145 to float, !dbg !29
  %147 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !29
  %148 = bitcast i32 %147 to float, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !29
  %150 = bitcast i32 %149 to float, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !29
  %152 = bitcast i32 %151 to float, !dbg !29
  %153 = lshr i32 %11, 4, !dbg !35
  %154 = and i32 %153, 7, !dbg !35
  %155 = or disjoint i32 %154, %21, !dbg !17
  %156 = or disjoint i32 %155, 8, !dbg !17
  %157 = icmp slt i32 %156, 16, !dbg !18
  %158 = and i32 %14, 60, !dbg !12
  %159 = or disjoint i32 %10, %158, !dbg !13
  %160 = icmp slt i32 %159, 256, !dbg !14
  %161 = and i1 %160, %157, !dbg !22
  %162 = icmp slt i32 %155, 16, !dbg !18
  %163 = and i1 %160, %162, !dbg !22
  %.frozen = freeze i32 %159, !dbg !36
  %164 = sdiv i32 %.frozen, 64, !dbg !36
  %165 = mul i32 %164, 64, !dbg !37
  %.decomposed = sub i32 %.frozen, %165, !dbg !37
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #4, !dbg !38
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #4, !dbg !38
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #4, !dbg !38
  %170 = fmul float %136, %166, !dbg !39
  %171 = fmul float %133, %167, !dbg !39
  %172 = fmul float %130, %168, !dbg !39
  %173 = fmul float %127, %169, !dbg !39
  %174 = fmul float %124, %166, !dbg !39
  %175 = fmul float %119, %167, !dbg !39
  %176 = fmul float %114, %168, !dbg !39
  %177 = fmul float %109, %169, !dbg !39
  %178 = fmul float %170, %152, !dbg !40
  %179 = fmul float %171, %150, !dbg !40
  %180 = fmul float %172, %148, !dbg !40
  %181 = fmul float %173, %146, !dbg !40
  %182 = fmul float %174, %152, !dbg !40
  %183 = fmul float %175, %150, !dbg !40
  %184 = fmul float %176, %148, !dbg !40
  %185 = fmul float %177, %146, !dbg !40
  %186 = fadd float %178, %144, !dbg !41
  %187 = fadd float %179, %142, !dbg !41
  %188 = fadd float %180, %140, !dbg !41
  %189 = fadd float %181, %138, !dbg !41
  %190 = fadd float %182, %144, !dbg !41
  %191 = fadd float %183, %142, !dbg !41
  %192 = fadd float %184, %140, !dbg !41
  %193 = fadd float %185, %138, !dbg !41
  %194 = fsub float 0.000000e+00, %186, !dbg !42
  %195 = fsub float 0.000000e+00, %187, !dbg !42
  %196 = fsub float 0.000000e+00, %188, !dbg !42
  %197 = fsub float 0.000000e+00, %189, !dbg !42
  %198 = fsub float 0.000000e+00, %190, !dbg !42
  %199 = fsub float 0.000000e+00, %191, !dbg !42
  %200 = fsub float 0.000000e+00, %192, !dbg !42
  %201 = fsub float 0.000000e+00, %193, !dbg !42
  %202 = fmul float %194, 0x3FF7154760000000, !dbg !46
  %203 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %202) #4, !dbg !46
  %204 = fmul float %195, 0x3FF7154760000000, !dbg !46
  %205 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %204) #4, !dbg !46
  %206 = fmul float %196, 0x3FF7154760000000, !dbg !46
  %207 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %206) #4, !dbg !46
  %208 = fmul float %197, 0x3FF7154760000000, !dbg !46
  %209 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %208) #4, !dbg !46
  %210 = fmul float %198, 0x3FF7154760000000, !dbg !46
  %211 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %210) #4, !dbg !46
  %212 = fmul float %199, 0x3FF7154760000000, !dbg !46
  %213 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %212) #4, !dbg !46
  %214 = fmul float %200, 0x3FF7154760000000, !dbg !46
  %215 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %214) #4, !dbg !46
  %216 = fmul float %201, 0x3FF7154760000000, !dbg !46
  %217 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %216) #4, !dbg !46
  %218 = fadd float %203, 1.000000e+00, !dbg !47
  %219 = fadd float %205, 1.000000e+00, !dbg !47
  %220 = fadd float %207, 1.000000e+00, !dbg !47
  %221 = fadd float %209, 1.000000e+00, !dbg !47
  %222 = fadd float %211, 1.000000e+00, !dbg !47
  %223 = fadd float %213, 1.000000e+00, !dbg !47
  %224 = fadd float %215, 1.000000e+00, !dbg !47
  %225 = fadd float %217, 1.000000e+00, !dbg !47
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %218) #4, !dbg !48
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %219) #4, !dbg !48
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %220) #4, !dbg !48
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %221) #4, !dbg !48
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %222) #4, !dbg !48
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %223) #4, !dbg !48
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %224) #4, !dbg !48
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %225) #4, !dbg !48
  %234 = fmul float %186, %226, !dbg !49
  %235 = fmul float %187, %227, !dbg !49
  %236 = fmul float %188, %228, !dbg !49
  %237 = fmul float %189, %229, !dbg !49
  %238 = fmul float %190, %230, !dbg !49
  %239 = fmul float %191, %231, !dbg !49
  %240 = fmul float %192, %232, !dbg !49
  %241 = fmul float %193, %233, !dbg !49
  %242 = shl i32 %155, 6, !dbg !50
  %243 = shl i32 %156, 6, !dbg !50
  %244 = shl i32 %164, 10, !dbg !51
  %245 = add i32 %244, %.decomposed, !dbg !52
  %246 = add i32 %245, %242, !dbg !53
  %247 = add i32 %245, %243, !dbg !53
  %248 = sext i32 %246 to i64, !dbg !54
  %249 = getelementptr float, ptr addrspace(1) %5, i64 %248, !dbg !54
  %250 = sext i32 %247 to i64, !dbg !54
  %251 = getelementptr float, ptr addrspace(1) %5, i64 %250, !dbg !54
  %252 = shl i32 %11, 8, !dbg !55
  %253 = and i32 %252, 768, !dbg !55
  %254 = or disjoint i32 %253, %13, !dbg !55
  %255 = and i32 %14, 508, !dbg !55
  %256 = lshr exact i32 %253, 4, !dbg !55
  %257 = add nuw nsw i32 %256, %254, !dbg !55
  %258 = zext nneg i32 %257 to i64, !dbg !55
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %258, !dbg !55
  %260 = bitcast float %234 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !55
  %261 = or disjoint i32 %254, 64, !dbg !55
  %262 = lshr i32 %261, 4, !dbg !55
  %263 = and i32 %262, 52, !dbg !55
  %264 = add nuw nsw i32 %263, %261, !dbg !55
  %265 = zext nneg i32 %264 to i64, !dbg !55
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %265, !dbg !55
  %267 = bitcast float %235 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !55
  %268 = or disjoint i32 %254, 128, !dbg !55
  %269 = lshr i32 %268, 4, !dbg !55
  %270 = and i32 %269, 56, !dbg !55
  %271 = add nuw nsw i32 %270, %268, !dbg !55
  %272 = zext nneg i32 %271 to i64, !dbg !55
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %272, !dbg !55
  %274 = bitcast float %236 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !55
  %275 = or disjoint i32 %254, 192, !dbg !55
  %276 = lshr i32 %275, 4, !dbg !55
  %277 = and i32 %276, 60, !dbg !55
  %278 = add nuw nsw i32 %277, %275, !dbg !55
  %279 = zext nneg i32 %278 to i64, !dbg !55
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %279, !dbg !55
  %281 = bitcast float %237 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !55
  %282 = or disjoint i32 %254, 32, !dbg !55
  %283 = add nuw nsw i32 %282, %256, !dbg !55
  %284 = zext nneg i32 %283 to i64, !dbg !55
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %284, !dbg !55
  %286 = bitcast float %238 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !55
  %287 = or disjoint i32 %254, 96, !dbg !55
  %288 = lshr i32 %287, 4, !dbg !55
  %289 = and i32 %288, 52, !dbg !55
  %290 = add nuw nsw i32 %289, %287, !dbg !55
  %291 = zext nneg i32 %290 to i64, !dbg !55
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %291, !dbg !55
  %293 = bitcast float %239 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !55
  %294 = or disjoint i32 %254, 160, !dbg !55
  %295 = lshr i32 %294, 4, !dbg !55
  %296 = and i32 %295, 56, !dbg !55
  %297 = add nuw nsw i32 %296, %294, !dbg !55
  %298 = zext nneg i32 %297 to i64, !dbg !55
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %298, !dbg !55
  %300 = bitcast float %240 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #4, !dbg !55
  %301 = or disjoint i32 %254, 224, !dbg !55
  %302 = lshr i32 %301, 4, !dbg !55
  %303 = and i32 %302, 60, !dbg !55
  %304 = add nuw nsw i32 %303, %301, !dbg !55
  %305 = zext nneg i32 %304 to i64, !dbg !55
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %305, !dbg !55
  %307 = bitcast float %241 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %308 = lshr i32 %14, 4, !dbg !55
  %309 = and i32 %308, 28, !dbg !55
  %310 = add nuw nsw i32 %309, %255, !dbg !55
  %311 = zext nneg i32 %310 to i64, !dbg !55
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %311, !dbg !55
  %313 = or disjoint i32 %255, 512, !dbg !55
  %314 = lshr i32 %313, 4, !dbg !55
  %315 = and i32 %314, 60, !dbg !55
  %316 = add nuw nsw i32 %315, %313, !dbg !55
  %317 = zext nneg i32 %316 to i64, !dbg !55
  %318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %317, !dbg !55
  %319 = load <4 x i32>, ptr addrspace(3) %318, align 16, !dbg !55
  %.extract = load i32, ptr addrspace(3) %312, align 16, !dbg !55
  %320 = getelementptr inbounds i8, ptr addrspace(3) %312, i64 4, !dbg !55
  %.extract10 = load i32, ptr addrspace(3) %320, align 4, !dbg !55
  %321 = getelementptr inbounds i8, ptr addrspace(3) %312, i64 8, !dbg !55
  %.extract11 = load i32, ptr addrspace(3) %321, align 8, !dbg !55
  %322 = getelementptr inbounds i8, ptr addrspace(3) %312, i64 12, !dbg !55
  %.extract12 = load i32, ptr addrspace(3) %322, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %249, i1 %163) #4, !dbg !55
  %.extract13 = extractelement <4 x i32> %319, i64 0, !dbg !55
  %.extract14 = extractelement <4 x i32> %319, i64 1, !dbg !55
  %.extract15 = extractelement <4 x i32> %319, i64 2, !dbg !55
  %.extract16 = extractelement <4 x i32> %319, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %251, i1 %161) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckhqw2hv7agv32iasihejltia6bca76ipsgnfmskjyehvtb7vnao.py", directory: "inductor_cache/kh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 26, column: 44, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 48, column: 23, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 33, scope: !7)
!51 = !DILocation(line: 50, column: 43, scope: !7)
!52 = !DILocation(line: 50, column: 30, scope: !7)
!53 = !DILocation(line: 50, column: 38, scope: !7)
!54 = !DILocation(line: 50, column: 25, scope: !7)
!55 = !DILocation(line: 50, column: 55, scope: !7)
!56 = !DILocation(line: 50, column: 4, scope: !7)
