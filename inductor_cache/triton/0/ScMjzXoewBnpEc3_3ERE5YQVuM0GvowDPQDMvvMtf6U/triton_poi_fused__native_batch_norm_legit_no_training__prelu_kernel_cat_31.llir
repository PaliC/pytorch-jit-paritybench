; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 256, !dbg !14
  %21 = mul i32 %20, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %22 = sdiv i32 %19, 16384, !dbg !16
  %23 = sext i32 %.decomposed to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %30 = bitcast i32 %28 to float, !dbg !20
  %31 = bitcast i32 %29 to float, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !23
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !26
  %38 = icmp slt i32 %.decomposed, 128, !dbg !27
  %39 = shl nsw i32 %20, 7, !dbg !28
  %40 = add nsw i32 %39, %.decomposed, !dbg !29
  %41 = sext i32 %40 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !30
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !31
  %44 = icmp sgt i32 %.decomposed, 127, !dbg !32
  %45 = add nsw i32 %.decomposed, -128, !dbg !33
  %46 = add nsw i32 %39, %45, !dbg !34
  %47 = sext i32 %46 to i64, !dbg !35
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !35
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !36
  %50 = sext i32 %45 to i64, !dbg !37
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !37
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !38
  %53 = shl nsw i32 %22, 7, !dbg !39
  %54 = add nsw i32 %53, %45, !dbg !40
  %55 = sext i32 %54 to i64, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !41
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !42
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !42
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !42
  %60 = bitcast i32 %58 to float, !dbg !42
  %61 = bitcast i32 %59 to float, !dbg !42
  %62 = fsub float 0.000000e+00, %60, !dbg !43
  %63 = fsub float 0.000000e+00, %61, !dbg !43
  %64 = fmul float %62, 0x3FF7154760000000, !dbg !47
  %65 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %64) #3, !dbg !47
  %66 = fmul float %63, 0x3FF7154760000000, !dbg !47
  %67 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %66) #3, !dbg !47
  %68 = fadd float %65, 1.000000e+00, !dbg !48
  %69 = fadd float %67, 1.000000e+00, !dbg !48
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %68) #3, !dbg !49
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %69) #3, !dbg !49
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !50
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !51
  %74 = fadd float %30, 0x3EE4F8B580000000, !dbg !52
  %75 = fadd float %31, 0x3EE4F8B580000000, !dbg !52
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %76, 0, !dbg !53
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %77, 0, !dbg !53
  br i1 %.not.i, label %83, label %78, !dbg !53

78:                                               ; preds = %13
  br i1 %.not1.i, label %81, label %79, !dbg !53

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

83:                                               ; preds = %13
  br i1 %.not1.i, label %86, label %84, !dbg !53

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !53
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %88, 0, !dbg !53
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %89, 0, !dbg !53
  br i1 %.not.i1, label %95, label %90, !dbg !53

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !53

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !53

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %91, %93, %96, %98
  %.0.i3 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !53
  %100 = extractvalue { i32, i32 } %43, 1, !dbg !31
  %101 = bitcast i32 %100 to float, !dbg !31
  %102 = extractvalue { i32, i32 } %49, 1, !dbg !36
  %103 = bitcast i32 %102 to float, !dbg !36
  %104 = fcmp ogt float %103, 0.000000e+00, !dbg !54
  %105 = extractvalue { i32, i32 } %52, 1, !dbg !38
  %106 = bitcast i32 %105 to float, !dbg !38
  %107 = fmul float %103, %106, !dbg !55
  %108 = select i1 %104, float %103, float %107, !dbg !56
  %109 = fmul float %108, %71, !dbg !57
  %110 = extractvalue { i32, i32 } %73, 1, !dbg !51
  %111 = bitcast i32 %110 to float, !dbg !51
  %112 = fadd float %109, %111, !dbg !58
  %113 = select i1 %38, float %101, float %112, !dbg !59
  %114 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %115 = bitcast i32 %114 to float, !dbg !18
  %116 = fsub float %113, %115, !dbg !60
  %117 = extractvalue { i32, i32 } %43, 0, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = extractvalue { i32, i32 } %49, 0, !dbg !36
  %120 = bitcast i32 %119 to float, !dbg !36
  %121 = fcmp ogt float %120, 0.000000e+00, !dbg !54
  %122 = extractvalue { i32, i32 } %52, 0, !dbg !38
  %123 = bitcast i32 %122 to float, !dbg !38
  %124 = fmul float %120, %123, !dbg !55
  %125 = select i1 %121, float %120, float %124, !dbg !56
  %126 = fmul float %125, %70, !dbg !57
  %127 = extractvalue { i32, i32 } %73, 0, !dbg !51
  %128 = bitcast i32 %127 to float, !dbg !51
  %129 = fadd float %126, %128, !dbg !58
  %130 = select i1 %38, float %118, float %129, !dbg !59
  %131 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %132 = bitcast i32 %131 to float, !dbg !18
  %133 = fsub float %130, %132, !dbg !60
  %134 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %135 = bitcast i32 %134 to float, !dbg !26
  %136 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %137 = bitcast i32 %136 to float, !dbg !26
  %138 = extractvalue { i32, i32 } %35, 1, !dbg !24
  %139 = bitcast i32 %138 to float, !dbg !24
  %140 = extractvalue { i32, i32 } %35, 0, !dbg !24
  %141 = bitcast i32 %140 to float, !dbg !24
  %142 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %143 = bitcast i32 %142 to float, !dbg !22
  %144 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %145 = bitcast i32 %144 to float, !dbg !22
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !61
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !61
  %148 = fmul float %133, %146, !dbg !62
  %149 = fmul float %116, %147, !dbg !62
  %150 = fmul float %148, %145, !dbg !63
  %151 = fmul float %149, %143, !dbg !63
  %152 = fadd float %150, %141, !dbg !64
  %153 = fadd float %151, %139, !dbg !64
  %154 = fcmp ogt float %152, 0.000000e+00, !dbg !65
  %155 = fcmp ogt float %153, 0.000000e+00, !dbg !65
  %156 = fmul float %152, %137, !dbg !66
  %157 = fmul float %153, %135, !dbg !66
  %158 = select i1 %154, float %152, float %156, !dbg !67
  %159 = select i1 %155, float %153, float %157, !dbg !67
  %160 = sext i32 %19 to i64, !dbg !68
  %161 = getelementptr float, ptr addrspace(1) %11, i64 %160, !dbg !68
  %162 = bitcast float %130 to i32, !dbg !69
  %163 = bitcast float %113 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %161, i1 true) #3, !dbg !69
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !70
  %165 = bitcast float %158 to i32, !dbg !71
  %166 = bitcast float %159 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %166, ptr addrspace(1) %164, i1 true) #3, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb36f7zuh4elqkbaect2qxl47es3gzucui5rlzfbn7afnyfsdf25.py", directory: "inductor_cache/b3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_31", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 31, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 34, scope: !7)
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 46, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 49, scope: !7)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 42, column: 30, scope: !7)
!36 = !DILocation(line: 42, column: 55, scope: !7)
!37 = !DILocation(line: 45, column: 31, scope: !7)
!38 = !DILocation(line: 45, column: 45, scope: !7)
!39 = !DILocation(line: 48, column: 35, scope: !7)
!40 = !DILocation(line: 48, column: 41, scope: !7)
!41 = !DILocation(line: 48, column: 31, scope: !7)
!42 = !DILocation(line: 48, column: 56, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 49, column: 23, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 51, column: 31, scope: !7)
!51 = !DILocation(line: 51, column: 56, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 27, scope: !7)
!54 = !DILocation(line: 44, column: 19, scope: !7)
!55 = !DILocation(line: 46, column: 20, scope: !7)
!56 = !DILocation(line: 47, column: 34, scope: !7)
!57 = !DILocation(line: 50, column: 20, scope: !7)
!58 = !DILocation(line: 52, column: 20, scope: !7)
!59 = !DILocation(line: 55, column: 33, scope: !7)
!60 = !DILocation(line: 56, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 35, scope: !7)
!68 = !DILocation(line: 71, column: 25, scope: !7)
!69 = !DILocation(line: 71, column: 37, scope: !7)
!70 = !DILocation(line: 72, column: 28, scope: !7)
!71 = !DILocation(line: 72, column: 40, scope: !7)
!72 = !DILocation(line: 72, column: 4, scope: !7)
