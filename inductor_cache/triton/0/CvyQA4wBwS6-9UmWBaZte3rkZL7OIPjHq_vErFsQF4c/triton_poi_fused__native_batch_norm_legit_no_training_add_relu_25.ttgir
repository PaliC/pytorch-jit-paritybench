#blocked = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_25(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999974E-6> : tensor<256x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256x1xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<512> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<512> : tensor<256x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<256x1xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.get_program_id x : i32 loc(#loc4)
    %3 = arith.muli %2, %c256_i32 : i32 loc(#loc5)
    %4 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %5 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %6 = tt.expand_dims %4 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc6)
    %7 = tt.expand_dims %5 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %3 : i32 -> tensor<256x1xi32, #blocked> loc(#loc7)
    %9 = tt.splat %3 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc7)
    %10 = arith.addi %8, %6 : tensor<256x1xi32, #blocked> loc(#loc7)
    %11 = arith.addi %9, %7 : tensor<256x1xi32, #blocked1> loc(#loc7)
    %12 = arith.cmpi slt, %10, %cst_2 : tensor<256x1xi32, #blocked> loc(#loc8)
    %13 = arith.cmpi slt, %11, %cst_3 : tensor<256x1xi32, #blocked1> loc(#loc8)
    %14 = arith.remsi %0, %c4_i32 : i32 loc(#loc9)
    %15 = arith.divsi %0, %c4_i32 : i32 loc(#loc10)
    %16 = arith.muli %0, %c512_i32 : i32 loc(#loc11)
    %17 = tt.splat %16 : i32 -> tensor<256x1xi32, #blocked> loc(#loc12)
    %18 = arith.addi %10, %17 : tensor<256x1xi32, #blocked> loc(#loc12)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %20 = tt.addptr %19, %18 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc13)
    %21 = tt.splat %1 : i1 -> tensor<256x1xi1, #blocked> loc(#loc14)
    %22 = tt.splat %1 : i1 -> tensor<256x1xi1, #blocked1> loc(#loc14)
    %23 = arith.andi %12, %21 : tensor<256x1xi1, #blocked> loc(#loc14)
    %24 = arith.andi %13, %22 : tensor<256x1xi1, #blocked1> loc(#loc14)
    %25 = tt.load %20, %23 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %27 = tt.addptr %26, %10 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc16)
    %28 = tt.load %27, %12 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %29 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %30 = tt.addptr %29, %10 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc18)
    %31 = tt.load %30, %12 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %32 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %33 = tt.addptr %32, %10 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc20)
    %34 = tt.load %33, %12 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %35 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %36 = tt.addptr %35, %10 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc22)
    %37 = tt.load %36, %12 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %38 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    %39 = tt.addptr %38, %18 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc24)
    %40 = tt.load %39, %23 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %41 = arith.subf %25, %28 : tensor<256x1xf32, #blocked> loc(#loc26)
    %42 = arith.addf %31, %cst : tensor<256x1xf32, #blocked> loc(#loc27)
    %43 = tt.extern_elementwise %42 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<256x1xf32, #blocked>) -> tensor<256x1xf32, #blocked> loc(#loc28)
    %44 = arith.divf %cst_0, %43 : tensor<256x1xf32, #blocked> loc(#loc29)
    %45 = arith.mulf %41, %44 : tensor<256x1xf32, #blocked> loc(#loc30)
    %46 = arith.mulf %45, %34 : tensor<256x1xf32, #blocked> loc(#loc31)
    %47 = arith.addf %46, %37 : tensor<256x1xf32, #blocked> loc(#loc32)
    %48 = arith.addf %47, %40 : tensor<256x1xf32, #blocked> loc(#loc33)
    %49 = arith.cmpf ogt, %cst_1, %48 : tensor<256x1xf32, #blocked> loc(#loc44)
    %50 = arith.select %49, %cst_1, %48 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked> loc(#loc45)
    %51 = arith.muli %11, %cst_4 : tensor<256x1xi32, #blocked1> loc(#loc37)
    %52 = tt.splat %14 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc38)
    %53 = arith.addi %52, %51 : tensor<256x1xi32, #blocked1> loc(#loc38)
    %54 = arith.muli %15, %c2048_i32 : i32 loc(#loc39)
    %55 = tt.splat %54 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc40)
    %56 = arith.addi %53, %55 : tensor<256x1xi32, #blocked1> loc(#loc40)
    %57 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %58 = tt.addptr %57, %56 : tensor<256x1x!tt.ptr<f32>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc41)
    %59 = triton_gpu.convert_layout %50 : tensor<256x1xf32, #blocked> -> tensor<256x1xf32, #blocked1> loc(#loc42)
    tt.store %58, %59, %24 : tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":22:28)
#loc3 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":24:21)
#loc4 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":25:28)
#loc5 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":25:33)
#loc6 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":26:44)
#loc7 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":26:23)
#loc8 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":27:21)
#loc9 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":30:19)
#loc10 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":31:19)
#loc11 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":32:39)
#loc12 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":32:35)
#loc13 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":32:30)
#loc14 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":32:52)
#loc15 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":32:44)
#loc16 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":33:30)
#loc17 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":33:35)
#loc18 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":34:30)
#loc19 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":34:35)
#loc20 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":35:31)
#loc21 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":35:36)
#loc22 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":36:31)
#loc23 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":36:36)
#loc24 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":37:31)
#loc25 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":37:45)
#loc26 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":38:18)
#loc27 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":40:18)
#loc28 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":41:26)
#loc29 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":43:18)
#loc30 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":46:19)
#loc31 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":47:20)
#loc32 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":48:20)
#loc33 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":49:20)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc35 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":51:42)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc37 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":52:32)
#loc38 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":52:30)
#loc39 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":52:42)
#loc40 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":52:37)
#loc41 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":52:25)
#loc42 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":52:54)
#loc43 = loc("inductor_cache/4b/c4be44fvvlwcollvwjafqf26l634r3qyr7ffnwhy3itm2ezj6fkd.py":52:4)
#loc44 = loc(callsite(#loc34 at #loc35))
#loc45 = loc(callsite(#loc36 at #loc35))
