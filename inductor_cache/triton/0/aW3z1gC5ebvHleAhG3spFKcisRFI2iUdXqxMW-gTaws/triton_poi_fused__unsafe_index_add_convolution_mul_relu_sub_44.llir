; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_44(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %18 = or disjoint i32 %16, 512, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %19 = sdiv i32 %.frozen, 16, !dbg !14
  %20 = sdiv i32 %18, 16, !dbg !14
  %21 = srem i32 %19, 16, !dbg !15
  %22 = srem i32 %20, 16, !dbg !15
  %23 = mul i32 %19, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = srem i32 %17, 16, !dbg !16
  %25 = sdiv i32 %16, 256, !dbg !17
  %26 = sdiv i32 %18, 256, !dbg !17
  %27 = srem i32 %25, 1024, !dbg !18
  %28 = srem i32 %26, 1024, !dbg !18
  %29 = sext i32 %21 to i64, !dbg !19
  %30 = getelementptr i64, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = sext i32 %22 to i64, !dbg !19
  %32 = getelementptr i64, ptr addrspace(1) %1, i64 %31, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %41 = sext i32 %.decomposed to i64, !dbg !21
  %42 = getelementptr i64, ptr addrspace(1) %2, i64 %41, !dbg !21
  %43 = sext i32 %24 to i64, !dbg !21
  %44 = getelementptr i64, ptr addrspace(1) %2, i64 %43, !dbg !21
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !22
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !22
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !22
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !22
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !22
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !22
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !22
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !22
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !22
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !22
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !22
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !22
  %57 = sext i32 %27 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !23
  %59 = sext i32 %28 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !24
  %69 = getelementptr i64, ptr addrspace(1) %5, i64 %41, !dbg !25
  %70 = getelementptr i64, ptr addrspace(1) %5, i64 %43, !dbg !25
  %71 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !26
  %72 = extractvalue { i64, i64 } %71, 0, !dbg !26
  %73 = extractvalue { i64, i64 } %71, 1, !dbg !26
  %74 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !26
  %75 = extractvalue { i64, i64 } %74, 0, !dbg !26
  %76 = extractvalue { i64, i64 } %74, 1, !dbg !26
  %77 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !26
  %78 = extractvalue { i64, i64 } %77, 0, !dbg !26
  %79 = extractvalue { i64, i64 } %77, 1, !dbg !26
  %80 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !26
  %81 = extractvalue { i64, i64 } %80, 0, !dbg !26
  %82 = extractvalue { i64, i64 } %80, 1, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !27
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !28
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !28
  %94 = getelementptr i64, ptr addrspace(1) %7, i64 %29, !dbg !29
  %95 = getelementptr i64, ptr addrspace(1) %7, i64 %31, !dbg !29
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !30
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !30
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !30
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !30
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !31
  %105 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !31
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !32
  %107 = bitcast i32 %106 to float, !dbg !32
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !32
  %109 = bitcast i32 %108 to float, !dbg !32
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !32
  %113 = bitcast i32 %112 to float, !dbg !32
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %115 = bitcast i32 %114 to float, !dbg !32
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %117 = bitcast i32 %116 to float, !dbg !32
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %119 = bitcast i32 %118 to float, !dbg !32
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %121 = bitcast i32 %120 to float, !dbg !32
  %122 = lshr i64 %33, 60, !dbg !33
  %123 = and i64 %122, 8, !dbg !33
  %124 = add i64 %123, %33, !dbg !33
  %125 = lshr i64 %37, 60, !dbg !33
  %126 = and i64 %125, 8, !dbg !33
  %127 = add i64 %126, %37, !dbg !33
  %128 = lshr i64 %46, 60, !dbg !34
  %129 = and i64 %128, 8, !dbg !34
  %130 = lshr i64 %47, 60, !dbg !34
  %131 = and i64 %130, 8, !dbg !34
  %132 = lshr i64 %49, 60, !dbg !34
  %133 = and i64 %132, 8, !dbg !34
  %134 = lshr i64 %50, 60, !dbg !34
  %135 = and i64 %134, 8, !dbg !34
  %136 = lshr i64 %52, 60, !dbg !34
  %137 = and i64 %136, 8, !dbg !34
  %138 = lshr i64 %53, 60, !dbg !34
  %139 = and i64 %138, 8, !dbg !34
  %140 = lshr i64 %55, 60, !dbg !34
  %141 = and i64 %140, 8, !dbg !34
  %142 = lshr i64 %56, 60, !dbg !34
  %143 = and i64 %142, 8, !dbg !34
  %144 = shl i64 %124, 3, !dbg !35
  %145 = shl i64 %127, 3, !dbg !35
  %146 = shl nsw i32 %25, 6, !dbg !36
  %147 = shl nsw i32 %26, 6, !dbg !36
  %148 = sext i32 %146 to i64, !dbg !37
  %149 = sext i32 %147 to i64, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !38
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %129, !dbg !38
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %144, !dbg !38
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %148, !dbg !38
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !38
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %131, !dbg !38
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %144, !dbg !38
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %148, !dbg !38
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !38
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %133, !dbg !38
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %144, !dbg !38
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %148, !dbg !38
  %162 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !38
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %135, !dbg !38
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %144, !dbg !38
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %148, !dbg !38
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !38
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %137, !dbg !38
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %145, !dbg !38
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %149, !dbg !38
  %170 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !38
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %139, !dbg !38
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %145, !dbg !38
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %149, !dbg !38
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !38
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %141, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %145, !dbg !38
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %149, !dbg !38
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !38
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %143, !dbg !38
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %145, !dbg !38
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %149, !dbg !38
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #1, !dbg !39
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !39
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #1, !dbg !39
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #1, !dbg !39
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #1, !dbg !39
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #1, !dbg !39
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #1, !dbg !39
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #1, !dbg !39
  %190 = lshr i64 %72, 60, !dbg !40
  %191 = and i64 %190, 8, !dbg !40
  %192 = lshr i64 %73, 60, !dbg !40
  %193 = and i64 %192, 8, !dbg !40
  %194 = lshr i64 %75, 60, !dbg !40
  %195 = and i64 %194, 8, !dbg !40
  %196 = lshr i64 %76, 60, !dbg !40
  %197 = and i64 %196, 8, !dbg !40
  %198 = lshr i64 %78, 60, !dbg !40
  %199 = and i64 %198, 8, !dbg !40
  %200 = lshr i64 %79, 60, !dbg !40
  %201 = and i64 %200, 8, !dbg !40
  %202 = lshr i64 %81, 60, !dbg !40
  %203 = and i64 %202, 8, !dbg !40
  %204 = lshr i64 %82, 60, !dbg !40
  %205 = and i64 %204, 8, !dbg !40
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !41
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %191, !dbg !41
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %144, !dbg !41
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %148, !dbg !41
  %210 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !41
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %193, !dbg !41
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %144, !dbg !41
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %148, !dbg !41
  %214 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !41
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %195, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %144, !dbg !41
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %148, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !41
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %197, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %144, !dbg !41
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %148, !dbg !41
  %222 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !41
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %199, !dbg !41
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %145, !dbg !41
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %149, !dbg !41
  %226 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !41
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %201, !dbg !41
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %145, !dbg !41
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %149, !dbg !41
  %230 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !41
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %203, !dbg !41
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %145, !dbg !41
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %149, !dbg !41
  %234 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !41
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %205, !dbg !41
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %145, !dbg !41
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %149, !dbg !41
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 true) #1, !dbg !42
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 true) #1, !dbg !42
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #1, !dbg !42
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 true) #1, !dbg !42
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 true) #1, !dbg !42
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 true) #1, !dbg !42
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 true) #1, !dbg !42
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 true) #1, !dbg !42
  %246 = lshr i64 %96, 60, !dbg !43
  %247 = and i64 %246, 8, !dbg !43
  %248 = add i64 %247, %96, !dbg !43
  %249 = lshr i64 %100, 60, !dbg !43
  %250 = and i64 %249, 8, !dbg !43
  %251 = add i64 %250, %100, !dbg !43
  %252 = shl i64 %248, 3, !dbg !44
  %253 = shl i64 %251, 3, !dbg !44
  %254 = getelementptr float, ptr addrspace(1) %151, i64 %252, !dbg !45
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %148, !dbg !45
  %256 = getelementptr float, ptr addrspace(1) %155, i64 %252, !dbg !45
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %148, !dbg !45
  %258 = getelementptr float, ptr addrspace(1) %159, i64 %252, !dbg !45
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %148, !dbg !45
  %260 = getelementptr float, ptr addrspace(1) %163, i64 %252, !dbg !45
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %148, !dbg !45
  %262 = getelementptr float, ptr addrspace(1) %167, i64 %253, !dbg !45
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %149, !dbg !45
  %264 = getelementptr float, ptr addrspace(1) %171, i64 %253, !dbg !45
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %149, !dbg !45
  %266 = getelementptr float, ptr addrspace(1) %175, i64 %253, !dbg !45
  %267 = getelementptr float, ptr addrspace(1) %266, i64 %149, !dbg !45
  %268 = getelementptr float, ptr addrspace(1) %179, i64 %253, !dbg !45
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %149, !dbg !45
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 true) #1, !dbg !46
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #1, !dbg !46
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 true) #1, !dbg !46
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 true) #1, !dbg !46
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 true) #1, !dbg !46
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 true) #1, !dbg !46
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 true) #1, !dbg !46
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #1, !dbg !46
  %278 = getelementptr float, ptr addrspace(1) %207, i64 %252, !dbg !47
  %279 = getelementptr float, ptr addrspace(1) %278, i64 %148, !dbg !47
  %280 = getelementptr float, ptr addrspace(1) %211, i64 %252, !dbg !47
  %281 = getelementptr float, ptr addrspace(1) %280, i64 %148, !dbg !47
  %282 = getelementptr float, ptr addrspace(1) %215, i64 %252, !dbg !47
  %283 = getelementptr float, ptr addrspace(1) %282, i64 %148, !dbg !47
  %284 = getelementptr float, ptr addrspace(1) %219, i64 %252, !dbg !47
  %285 = getelementptr float, ptr addrspace(1) %284, i64 %148, !dbg !47
  %286 = getelementptr float, ptr addrspace(1) %223, i64 %253, !dbg !47
  %287 = getelementptr float, ptr addrspace(1) %286, i64 %149, !dbg !47
  %288 = getelementptr float, ptr addrspace(1) %227, i64 %253, !dbg !47
  %289 = getelementptr float, ptr addrspace(1) %288, i64 %149, !dbg !47
  %290 = getelementptr float, ptr addrspace(1) %231, i64 %253, !dbg !47
  %291 = getelementptr float, ptr addrspace(1) %290, i64 %149, !dbg !47
  %292 = getelementptr float, ptr addrspace(1) %235, i64 %253, !dbg !47
  %293 = getelementptr float, ptr addrspace(1) %292, i64 %149, !dbg !47
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 true) #1, !dbg !48
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 true) #1, !dbg !48
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 true) #1, !dbg !48
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 true) #1, !dbg !48
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 true) #1, !dbg !48
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 true) #1, !dbg !48
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 true) #1, !dbg !48
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 true) #1, !dbg !48
  %302 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !46
  %303 = insertelement <2 x i32> %302, i32 %182, i64 1, !dbg !46
  %304 = bitcast <2 x i32> %303 to <2 x float>, !dbg !46
  %305 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !49
  %306 = bitcast <2 x i32> %305 to <2 x float>, !dbg !49
  %307 = shufflevector <2 x float> %306, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %308 = fadd <2 x float> %307, %304, !dbg !49
  %309 = fcmp olt <2 x float> %308, zeroinitializer, !dbg !50
  %310 = select <2 x i1> %309, <2 x float> zeroinitializer, <2 x float> %308, !dbg !54
  %311 = insertelement <2 x i32> poison, i32 %294, i64 0, !dbg !48
  %312 = insertelement <2 x i32> %311, i32 %238, i64 1, !dbg !48
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !48
  %314 = fadd <2 x float> %307, %313, !dbg !55
  %315 = fcmp olt <2 x float> %314, zeroinitializer, !dbg !56
  %316 = select <2 x i1> %315, <2 x float> zeroinitializer, <2 x float> %314, !dbg !58
  %317 = fsub <2 x float> %316, %310, !dbg !59
  %318 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !60
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !60
  %320 = shufflevector <2 x float> %319, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %321 = fmul <2 x float> %317, %320, !dbg !60
  %322 = fadd <2 x float> %310, %321, !dbg !61
  %323 = insertelement <2 x i32> poison, i32 %271, i64 0, !dbg !46
  %324 = insertelement <2 x i32> %323, i32 %183, i64 1, !dbg !46
  %325 = bitcast <2 x i32> %324 to <2 x float>, !dbg !46
  %326 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !49
  %327 = bitcast <2 x i32> %326 to <2 x float>, !dbg !49
  %328 = shufflevector <2 x float> %327, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %329 = fadd <2 x float> %328, %325, !dbg !49
  %330 = fcmp olt <2 x float> %329, zeroinitializer, !dbg !50
  %331 = select <2 x i1> %330, <2 x float> zeroinitializer, <2 x float> %329, !dbg !54
  %332 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !48
  %333 = insertelement <2 x i32> %332, i32 %239, i64 1, !dbg !48
  %334 = bitcast <2 x i32> %333 to <2 x float>, !dbg !48
  %335 = fadd <2 x float> %328, %334, !dbg !55
  %336 = fcmp olt <2 x float> %335, zeroinitializer, !dbg !56
  %337 = select <2 x i1> %336, <2 x float> zeroinitializer, <2 x float> %335, !dbg !58
  %338 = fsub <2 x float> %337, %331, !dbg !59
  %339 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !60
  %340 = bitcast <2 x i32> %339 to <2 x float>, !dbg !60
  %341 = shufflevector <2 x float> %340, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %342 = fmul <2 x float> %338, %341, !dbg !60
  %343 = fadd <2 x float> %331, %342, !dbg !61
  %344 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !46
  %345 = insertelement <2 x i32> %344, i32 %184, i64 1, !dbg !46
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !46
  %347 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !49
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !49
  %349 = shufflevector <2 x float> %348, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %350 = fadd <2 x float> %349, %346, !dbg !49
  %351 = fcmp olt <2 x float> %350, zeroinitializer, !dbg !50
  %352 = select <2 x i1> %351, <2 x float> zeroinitializer, <2 x float> %350, !dbg !54
  %353 = insertelement <2 x i32> poison, i32 %296, i64 0, !dbg !48
  %354 = insertelement <2 x i32> %353, i32 %240, i64 1, !dbg !48
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !48
  %356 = fadd <2 x float> %349, %355, !dbg !55
  %357 = fcmp olt <2 x float> %356, zeroinitializer, !dbg !56
  %358 = select <2 x i1> %357, <2 x float> zeroinitializer, <2 x float> %356, !dbg !58
  %359 = fsub <2 x float> %358, %352, !dbg !59
  %360 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !60
  %361 = bitcast <2 x i32> %360 to <2 x float>, !dbg !60
  %362 = shufflevector <2 x float> %361, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %363 = fmul <2 x float> %359, %362, !dbg !60
  %364 = fadd <2 x float> %352, %363, !dbg !61
  %365 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !46
  %366 = insertelement <2 x i32> %365, i32 %185, i64 1, !dbg !46
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !46
  %368 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !49
  %369 = bitcast <2 x i32> %368 to <2 x float>, !dbg !49
  %370 = shufflevector <2 x float> %369, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %371 = fadd <2 x float> %370, %367, !dbg !49
  %372 = fcmp olt <2 x float> %371, zeroinitializer, !dbg !50
  %373 = select <2 x i1> %372, <2 x float> zeroinitializer, <2 x float> %371, !dbg !54
  %374 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !48
  %375 = insertelement <2 x i32> %374, i32 %241, i64 1, !dbg !48
  %376 = bitcast <2 x i32> %375 to <2 x float>, !dbg !48
  %377 = fadd <2 x float> %370, %376, !dbg !55
  %378 = fcmp olt <2 x float> %377, zeroinitializer, !dbg !56
  %379 = select <2 x i1> %378, <2 x float> zeroinitializer, <2 x float> %377, !dbg !58
  %380 = fsub <2 x float> %379, %373, !dbg !59
  %381 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !60
  %382 = bitcast <2 x i32> %381 to <2 x float>, !dbg !60
  %383 = shufflevector <2 x float> %382, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %384 = fmul <2 x float> %380, %383, !dbg !60
  %385 = fadd <2 x float> %373, %384, !dbg !61
  %386 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !46
  %387 = insertelement <2 x i32> %386, i32 %186, i64 1, !dbg !46
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !46
  %389 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !49
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !49
  %391 = shufflevector <2 x float> %390, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %392 = fadd <2 x float> %391, %388, !dbg !49
  %393 = fcmp olt <2 x float> %392, zeroinitializer, !dbg !50
  %394 = select <2 x i1> %393, <2 x float> zeroinitializer, <2 x float> %392, !dbg !54
  %395 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !48
  %396 = insertelement <2 x i32> %395, i32 %242, i64 1, !dbg !48
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !48
  %398 = fadd <2 x float> %391, %397, !dbg !55
  %399 = fcmp olt <2 x float> %398, zeroinitializer, !dbg !56
  %400 = select <2 x i1> %399, <2 x float> zeroinitializer, <2 x float> %398, !dbg !58
  %401 = fsub <2 x float> %400, %394, !dbg !59
  %402 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !60
  %403 = bitcast <2 x i32> %402 to <2 x float>, !dbg !60
  %404 = shufflevector <2 x float> %403, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %405 = fmul <2 x float> %401, %404, !dbg !60
  %406 = fadd <2 x float> %394, %405, !dbg !61
  %407 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !46
  %408 = insertelement <2 x i32> %407, i32 %187, i64 1, !dbg !46
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !46
  %410 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !49
  %411 = bitcast <2 x i32> %410 to <2 x float>, !dbg !49
  %412 = shufflevector <2 x float> %411, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %413 = fadd <2 x float> %412, %409, !dbg !49
  %414 = fcmp olt <2 x float> %413, zeroinitializer, !dbg !50
  %415 = select <2 x i1> %414, <2 x float> zeroinitializer, <2 x float> %413, !dbg !54
  %416 = insertelement <2 x i32> poison, i32 %299, i64 0, !dbg !48
  %417 = insertelement <2 x i32> %416, i32 %243, i64 1, !dbg !48
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !48
  %419 = fadd <2 x float> %412, %418, !dbg !55
  %420 = fcmp olt <2 x float> %419, zeroinitializer, !dbg !56
  %421 = select <2 x i1> %420, <2 x float> zeroinitializer, <2 x float> %419, !dbg !58
  %422 = fsub <2 x float> %421, %415, !dbg !59
  %423 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !60
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !60
  %425 = shufflevector <2 x float> %424, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %426 = fmul <2 x float> %422, %425, !dbg !60
  %427 = fadd <2 x float> %415, %426, !dbg !61
  %428 = insertelement <2 x i32> poison, i32 %276, i64 0, !dbg !46
  %429 = insertelement <2 x i32> %428, i32 %188, i64 1, !dbg !46
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !46
  %431 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !49
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !49
  %433 = shufflevector <2 x float> %432, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %434 = fadd <2 x float> %433, %430, !dbg !49
  %435 = fcmp olt <2 x float> %434, zeroinitializer, !dbg !50
  %436 = select <2 x i1> %435, <2 x float> zeroinitializer, <2 x float> %434, !dbg !54
  %437 = insertelement <2 x i32> poison, i32 %300, i64 0, !dbg !48
  %438 = insertelement <2 x i32> %437, i32 %244, i64 1, !dbg !48
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !48
  %440 = fadd <2 x float> %433, %439, !dbg !55
  %441 = fcmp olt <2 x float> %440, zeroinitializer, !dbg !56
  %442 = select <2 x i1> %441, <2 x float> zeroinitializer, <2 x float> %440, !dbg !58
  %443 = fsub <2 x float> %442, %436, !dbg !59
  %444 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !60
  %445 = bitcast <2 x i32> %444 to <2 x float>, !dbg !60
  %446 = shufflevector <2 x float> %445, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %447 = fmul <2 x float> %443, %446, !dbg !60
  %448 = fadd <2 x float> %436, %447, !dbg !61
  %449 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !46
  %450 = insertelement <2 x i32> %449, i32 %189, i64 1, !dbg !46
  %451 = bitcast <2 x i32> %450 to <2 x float>, !dbg !46
  %452 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !49
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !49
  %454 = shufflevector <2 x float> %453, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %455 = fadd <2 x float> %454, %451, !dbg !49
  %456 = fcmp olt <2 x float> %455, zeroinitializer, !dbg !50
  %457 = select <2 x i1> %456, <2 x float> zeroinitializer, <2 x float> %455, !dbg !54
  %458 = insertelement <2 x i32> poison, i32 %301, i64 0, !dbg !48
  %459 = insertelement <2 x i32> %458, i32 %245, i64 1, !dbg !48
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !48
  %461 = fadd <2 x float> %454, %460, !dbg !55
  %462 = fcmp olt <2 x float> %461, zeroinitializer, !dbg !56
  %463 = select <2 x i1> %462, <2 x float> zeroinitializer, <2 x float> %461, !dbg !58
  %464 = fsub <2 x float> %463, %457, !dbg !59
  %465 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !60
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !60
  %467 = shufflevector <2 x float> %466, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %468 = fmul <2 x float> %464, %467, !dbg !60
  %469 = fadd <2 x float> %457, %468, !dbg !61
  %470 = extractelement <2 x float> %322, i64 0, !dbg !62
  %471 = extractelement <2 x float> %322, i64 1, !dbg !63
  %472 = fsub float %470, %471, !dbg !62
  %473 = extractelement <2 x float> %343, i64 0, !dbg !62
  %474 = extractelement <2 x float> %343, i64 1, !dbg !63
  %475 = fsub float %473, %474, !dbg !62
  %476 = extractelement <2 x float> %364, i64 0, !dbg !62
  %477 = extractelement <2 x float> %364, i64 1, !dbg !63
  %478 = fsub float %476, %477, !dbg !62
  %479 = extractelement <2 x float> %385, i64 0, !dbg !62
  %480 = extractelement <2 x float> %385, i64 1, !dbg !63
  %481 = fsub float %479, %480, !dbg !62
  %482 = extractelement <2 x float> %406, i64 0, !dbg !62
  %483 = extractelement <2 x float> %406, i64 1, !dbg !63
  %484 = fsub float %482, %483, !dbg !62
  %485 = extractelement <2 x float> %427, i64 0, !dbg !62
  %486 = extractelement <2 x float> %427, i64 1, !dbg !63
  %487 = fsub float %485, %486, !dbg !62
  %488 = extractelement <2 x float> %448, i64 0, !dbg !62
  %489 = extractelement <2 x float> %448, i64 1, !dbg !63
  %490 = fsub float %488, %489, !dbg !62
  %491 = extractelement <2 x float> %469, i64 0, !dbg !62
  %492 = extractelement <2 x float> %469, i64 1, !dbg !63
  %493 = fsub float %491, %492, !dbg !62
  %494 = fmul float %472, %107, !dbg !64
  %495 = fmul float %475, %109, !dbg !64
  %496 = fmul float %478, %111, !dbg !64
  %497 = fmul float %481, %113, !dbg !64
  %498 = fmul float %484, %115, !dbg !64
  %499 = fmul float %487, %117, !dbg !64
  %500 = fmul float %490, %119, !dbg !64
  %501 = fmul float %493, %121, !dbg !64
  %502 = fadd float %471, %494, !dbg !63
  %503 = fadd float %474, %495, !dbg !63
  %504 = fadd float %477, %496, !dbg !63
  %505 = fadd float %480, %497, !dbg !63
  %506 = fadd float %483, %498, !dbg !63
  %507 = fadd float %486, %499, !dbg !63
  %508 = fadd float %489, %500, !dbg !63
  %509 = fadd float %492, %501, !dbg !63
  %510 = sext i32 %16 to i64, !dbg !65
  %511 = getelementptr float, ptr addrspace(1) %0, i64 %510, !dbg !65
  %512 = sext i32 %18 to i64, !dbg !65
  %513 = getelementptr float, ptr addrspace(1) %0, i64 %512, !dbg !65
  %514 = bitcast float %502 to i32, !dbg !66
  %515 = bitcast float %503 to i32, !dbg !66
  %516 = bitcast float %504 to i32, !dbg !66
  %517 = bitcast float %505 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %514, i32 %515, i32 %516, i32 %517, ptr addrspace(1) %511, i1 true) #1, !dbg !66
  %518 = bitcast float %506 to i32, !dbg !66
  %519 = bitcast float %507 to i32, !dbg !66
  %520 = bitcast float %508 to i32, !dbg !66
  %521 = bitcast float %509 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %518, i32 %519, i32 %520, i32 %521, ptr addrspace(1) %513, i1 true) #1, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cganx3rhc3sslu7w2rmksyrrrlroqhsxppz6ty4cva766e5l7jbo.py", directory: "inductor_cache/ga")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_44, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_44, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_44", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_44", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 32, scope: !7)
!35 = !DILocation(line: 43, column: 39, scope: !7)
!36 = !DILocation(line: 43, column: 49, scope: !7)
!37 = !DILocation(line: 43, column: 46, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 54, scope: !7)
!40 = !DILocation(line: 49, column: 35, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 56, scope: !7)
!43 = !DILocation(line: 58, column: 35, scope: !7)
!44 = !DILocation(line: 59, column: 40, scope: !7)
!45 = !DILocation(line: 59, column: 31, scope: !7)
!46 = !DILocation(line: 59, column: 56, scope: !7)
!47 = !DILocation(line: 62, column: 31, scope: !7)
!48 = !DILocation(line: 62, column: 57, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 61, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !57)
!57 = !DILocation(line: 64, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !57)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 20, scope: !7)
!62 = !DILocation(line: 68, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 69, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 28, scope: !7)
!66 = !DILocation(line: 71, column: 40, scope: !7)
!67 = !DILocation(line: 71, column: 4, scope: !7)
