; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_add_bitwise_and_gt_le_mean_mul_pow_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %24 = insertelement <2 x i32> %23, i32 %14, i64 1, !dbg !12
  %25 = bitcast <2 x i32> %24 to <2 x float>, !dbg !12
  %26 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !14
  %27 = insertelement <2 x i32> %26, i32 %20, i64 1, !dbg !14
  %28 = bitcast <2 x i32> %27 to <2 x float>, !dbg !14
  %29 = fadd <2 x float> %25, splat (float 4.000000e+00), !dbg !15
  %30 = fmul <2 x float> %29, %29, !dbg !16
  %31 = fcmp ogt <2 x float> %25, splat (float -4.000000e+00), !dbg !17
  %32 = fcmp ole <2 x float> %28, zeroinitializer, !dbg !18
  %33 = and <2 x i1> %31, %32, !dbg !19
  %34 = uitofp <2 x i1> %33 to <2 x float>, !dbg !20
  %35 = fmul <2 x float> %30, %34, !dbg !21
  %36 = fadd <2 x float> %25, splat (float -4.000000e+00), !dbg !22
  %37 = fmul <2 x float> %36, %36, !dbg !23
  %38 = fcmp ole <2 x float> %25, splat (float 4.000000e+00), !dbg !24
  %39 = fcmp ogt <2 x float> %28, zeroinitializer, !dbg !25
  %40 = and <2 x i1> %38, %39, !dbg !26
  %41 = uitofp <2 x i1> %40 to <2 x float>, !dbg !27
  %42 = fmul <2 x float> %37, %41, !dbg !28
  %43 = fadd <2 x float> %35, %42, !dbg !29
  %44 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !12
  %45 = insertelement <2 x i32> %44, i32 %15, i64 1, !dbg !12
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !12
  %47 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !14
  %48 = insertelement <2 x i32> %47, i32 %21, i64 1, !dbg !14
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !14
  %50 = fadd <2 x float> %46, splat (float 4.000000e+00), !dbg !15
  %51 = fmul <2 x float> %50, %50, !dbg !16
  %52 = fcmp ogt <2 x float> %46, splat (float -4.000000e+00), !dbg !17
  %53 = fcmp ole <2 x float> %49, zeroinitializer, !dbg !18
  %54 = and <2 x i1> %52, %53, !dbg !19
  %55 = uitofp <2 x i1> %54 to <2 x float>, !dbg !20
  %56 = fmul <2 x float> %51, %55, !dbg !21
  %57 = fadd <2 x float> %46, splat (float -4.000000e+00), !dbg !22
  %58 = fmul <2 x float> %57, %57, !dbg !23
  %59 = fcmp ole <2 x float> %46, splat (float 4.000000e+00), !dbg !24
  %60 = fcmp ogt <2 x float> %49, zeroinitializer, !dbg !25
  %61 = and <2 x i1> %59, %60, !dbg !26
  %62 = uitofp <2 x i1> %61 to <2 x float>, !dbg !27
  %63 = fmul <2 x float> %58, %62, !dbg !28
  %64 = fadd <2 x float> %56, %63, !dbg !29
  %shift = shufflevector <2 x float> %43, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %65 = fadd <2 x float> %43, %shift, !dbg !30
  %shift1 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %66 = fadd <2 x float> %shift1, %65, !dbg !30
  %67 = fadd <2 x float> %64, %66, !dbg !30
  %68 = extractelement <2 x float> %67, i64 0, !dbg !30
  %69 = bitcast float %68 to i32, !dbg !35
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !35
  %71 = bitcast i32 %70 to float, !dbg !35
  %72 = fadd float %68, %71, !dbg !30
  %73 = bitcast float %72 to i32, !dbg !35
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !35
  %75 = bitcast i32 %74 to float, !dbg !35
  %76 = fadd float %72, %75, !dbg !30
  %77 = bitcast float %76 to i32, !dbg !35
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !35
  %79 = bitcast i32 %78 to float, !dbg !35
  %80 = fadd float %76, %79, !dbg !30
  %81 = bitcast float %80 to i32, !dbg !35
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !35
  %83 = bitcast i32 %82 to float, !dbg !35
  %84 = fadd float %80, %83, !dbg !30
  %85 = bitcast float %84 to i32, !dbg !35
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !35
  %87 = bitcast i32 %86 to float, !dbg !35
  %88 = fadd float %84, %87, !dbg !30
  %89 = icmp eq i32 %6, 0, !dbg !35
  %90 = and i32 %7, 1, !dbg !35
  %91 = zext nneg i32 %90 to i64, !dbg !35
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i64 %91, !dbg !35
  %93 = bitcast float %88 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %89) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %94 = icmp slt i32 %5, 2, !dbg !35
  %95 = sext i32 %5 to i64, !dbg !35
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i64 %95, !dbg !35
  %97 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %96, i1 %94) #3, !dbg !35
  %98 = bitcast i32 %97 to float, !dbg !35
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !35
  %100 = bitcast i32 %99 to float, !dbg !35
  %101 = fadd float %98, %100, !dbg !30
  %102 = and i32 %5, 1, !dbg !35
  %103 = icmp eq i32 %102, 0, !dbg !35
  %104 = and i1 %94, %103, !dbg !35
  %105 = bitcast float %101 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %105, i1 %104) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %106 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %107 = fadd float %106, 0.000000e+00, !dbg !36
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 2.560000e+02) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %urem = and i32 %5, 63, !dbg !42
  %109 = icmp eq i32 %urem, 0, !dbg !42
  %110 = bitcast float %108 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %0, i1 %109) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czv2exr3nu7g6fl55zacp55thqxhmlyfrhpibovv37bh5jbttj4e.py", directory: "inductor_cache/zv")
!4 = !{ptr @triton_per_fused__to_copy_add_bitwise_and_gt_le_mean_mul_pow_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_add_bitwise_and_gt_le_mean_mul_pow_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_bitwise_and_gt_le_mean_mul_pow_sub_0", linkageName: "triton_per_fused__to_copy_add_bitwise_and_gt_le_mean_mul_pow_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 34, column: 18, scope: !7)
!16 = !DILocation(line: 35, column: 18, scope: !7)
!17 = !DILocation(line: 37, column: 18, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 40, column: 18, scope: !7)
!20 = !DILocation(line: 41, column: 20, scope: !7)
!21 = !DILocation(line: 42, column: 19, scope: !7)
!22 = !DILocation(line: 43, column: 19, scope: !7)
!23 = !DILocation(line: 44, column: 20, scope: !7)
!24 = !DILocation(line: 45, column: 20, scope: !7)
!25 = !DILocation(line: 46, column: 19, scope: !7)
!26 = !DILocation(line: 47, column: 20, scope: !7)
!27 = !DILocation(line: 48, column: 21, scope: !7)
!28 = !DILocation(line: 49, column: 20, scope: !7)
!29 = !DILocation(line: 50, column: 20, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!34 = !DILocation(line: 52, column: 59, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 52, column: 45, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 55, column: 4, scope: !7)
!42 = !DILocation(line: 56, column: 63, scope: !7)
!43 = !DILocation(line: 56, column: 4, scope: !7)
