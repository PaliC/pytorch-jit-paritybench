; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__log_softmax_12(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 16, !dbg !12
  %9 = shl i32 %7, 1, !dbg !12
  %10 = and i32 %9, 30, !dbg !12
  %11 = lshr i32 %7, 5, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = icmp slt i32 %12, 400, !dbg !14
  %14 = lshr i32 %7, 4, !dbg !15
  %15 = and i32 %14, 7, !dbg !15
  %16 = or disjoint i32 %15, 8, !dbg !15
  %17 = icmp samesign ult i32 %16, 10, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %18 = sdiv i32 %.frozen, 10, !dbg !17
  %19 = mul i32 %18, 10, !dbg !18
  %.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = mul nuw nsw i32 %15, 10, !dbg !19
  %21 = mul nuw nsw i32 %16, 10, !dbg !19
  %22 = mul i32 %18, 100, !dbg !20
  %23 = add i32 %22, %.decomposed, !dbg !21
  %24 = add i32 %23, %20, !dbg !22
  %25 = add i32 %23, %21, !dbg !22
  %26 = sext i32 %24 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = sext i32 %25 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = and i1 %17, %13, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !25
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %34 = bitcast i32 %32 to float, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #4, !dbg !25
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %39 = bitcast i32 %37 to float, !dbg !25
  %40 = bitcast i32 %38 to float, !dbg !25
  %41 = select i1 %13, float %34, float 0xFFF0000000000000, !dbg !26
  %42 = select i1 %13, float %35, float 0xFFF0000000000000, !dbg !26
  %43 = select i1 %30, float %39, float 0xFFF0000000000000, !dbg !26
  %44 = select i1 %30, float %40, float 0xFFF0000000000000, !dbg !26
  %45 = fcmp ogt float %41, %43, !dbg !27
  %46 = fcmp uno float %41, 0.000000e+00, !dbg !32
  %47 = or i1 %46, %45, !dbg !33
  %48 = select i1 %47, float %41, float %43, !dbg !34
  %49 = fcmp ogt float %42, %44, !dbg !27
  %50 = fcmp uno float %42, 0.000000e+00, !dbg !32
  %51 = or i1 %50, %49, !dbg !33
  %52 = select i1 %51, float %42, float %44, !dbg !34
  %53 = bitcast float %48 to i32, !dbg !35
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !35
  %55 = bitcast i32 %54 to float, !dbg !35
  %56 = fcmp ogt float %48, %55, !dbg !27
  %57 = fcmp uno float %48, 0.000000e+00, !dbg !32
  %58 = or i1 %56, %57, !dbg !33
  %59 = bitcast float %52 to i32, !dbg !35
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 16, i32 31), !dbg !35
  %61 = bitcast i32 %60 to float, !dbg !35
  %62 = fcmp ogt float %52, %61, !dbg !27
  %63 = fcmp uno float %52, 0.000000e+00, !dbg !32
  %64 = or i1 %62, %63, !dbg !33
  %65 = icmp eq i32 %8, 0, !dbg !35
  %66 = and i32 %11, 3, !dbg !35
  %67 = shl nuw nsw i32 %10, 2, !dbg !35
  %68 = or disjoint i32 %67, %66, !dbg !35
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !35
  %70 = select i1 %58, i32 %53, i32 %54, !dbg !34
  %71 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %71, i1 %65) #4, !dbg !35
  %72 = or disjoint i32 %67, 4, !dbg !35
  %73 = or disjoint i32 %72, %66, !dbg !35
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !35
  %75 = select i1 %64, i32 %59, i32 %60, !dbg !34
  %76 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %76, i1 %65) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %77 = icmp slt i32 %7, 128, !dbg !35
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !35
  %79 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %77) #4, !dbg !35
  %80 = bitcast i32 %79 to float, !dbg !35
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !35
  %82 = bitcast i32 %81 to float, !dbg !35
  %83 = fcmp ogt float %80, %82, !dbg !27
  %84 = fcmp uno float %80, 0.000000e+00, !dbg !32
  %85 = or i1 %84, %83, !dbg !33
  %86 = select i1 %85, float %80, float %82, !dbg !34
  %87 = bitcast float %86 to i32, !dbg !35
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !35
  %89 = bitcast i32 %88 to float, !dbg !35
  %90 = fcmp ogt float %86, %89, !dbg !27
  %91 = fcmp uno float %86, 0.000000e+00, !dbg !32
  %92 = or i1 %90, %91, !dbg !33
  %93 = and i32 %7, 3, !dbg !35
  %94 = icmp eq i32 %93, 0, !dbg !35
  %95 = and i1 %77, %94, !dbg !35
  %96 = select i1 %92, i32 %87, i32 %88, !dbg !34
  %97 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %97, i1 %95) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !35
  %99 = load float, ptr addrspace(3) %98, align 16, !dbg !35
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !35
  %101 = load float, ptr addrspace(3) %100, align 16, !dbg !35
  %102 = fsub float %34, %99, !dbg !36
  %103 = fsub float %35, %101, !dbg !36
  %104 = fsub float %39, %99, !dbg !36
  %105 = fsub float %40, %101, !dbg !36
  %106 = fmul float %102, 0x3FF7154760000000, !dbg !37
  %107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %106) #4, !dbg !37
  %108 = fmul float %103, 0x3FF7154760000000, !dbg !37
  %109 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %108) #4, !dbg !37
  %110 = fmul float %104, 0x3FF7154760000000, !dbg !37
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #4, !dbg !37
  %112 = fmul float %105, 0x3FF7154760000000, !dbg !37
  %113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #4, !dbg !37
  %114 = select i1 %13, float %107, float 0.000000e+00, !dbg !38
  %115 = select i1 %13, float %109, float 0.000000e+00, !dbg !38
  %116 = select i1 %30, float %111, float 0.000000e+00, !dbg !38
  %117 = select i1 %30, float %113, float 0.000000e+00, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %118 = fadd float %114, %116, !dbg !43
  %119 = fadd float %115, %117, !dbg !43
  %120 = bitcast float %118 to i32, !dbg !39
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !39
  %122 = bitcast i32 %121 to float, !dbg !39
  %123 = fadd float %118, %122, !dbg !43
  %124 = bitcast float %119 to i32, !dbg !39
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 16, i32 31), !dbg !39
  %126 = bitcast i32 %125 to float, !dbg !39
  %127 = fadd float %119, %126, !dbg !43
  %128 = bitcast float %123 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %128, i1 %65) #4, !dbg !39
  %129 = bitcast float %127 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %129, i1 %65) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %130 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %77) #4, !dbg !39
  %131 = bitcast i32 %130 to float, !dbg !39
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !39
  %133 = bitcast i32 %132 to float, !dbg !39
  %134 = fadd float %131, %133, !dbg !43
  %135 = bitcast float %134 to i32, !dbg !39
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !39
  %137 = bitcast i32 %136 to float, !dbg !39
  %138 = fadd float %134, %137, !dbg !43
  %139 = bitcast float %138 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %139, i1 %95) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %140 = load float, ptr addrspace(3) %98, align 16, !dbg !39
  %141 = load float, ptr addrspace(3) %100, align 16, !dbg !39
  %142 = fcmp olt float %140, 0x3810000000000000, !dbg !45
  %143 = fmul float %140, 0x4160000000000000, !dbg !45
  %.02.i = select i1 %142, float %143, float %140, !dbg !45
  %i.i.0.i = select i1 %142, float -2.300000e+01, float 0.000000e+00, !dbg !45
  %144 = bitcast float %.02.i to i32, !dbg !45
  %145 = add i32 %144, -1059760811, !dbg !45
  %146 = and i32 %145, -8388608, !dbg !45
  %147 = sub i32 %144, %146, !dbg !45
  %148 = bitcast i32 %147 to float, !dbg !45
  %149 = sitofp i32 %146 to float, !dbg !45
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %150, 0, !dbg !45
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %149, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !45
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %149, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !45
  %.08.i = select i1 %.not.i, float %152, float %151, !dbg !45
  %153 = fadd float %148, -1.000000e+00, !dbg !45
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not1.i = icmp eq i32 %154, 0, !dbg !45
  %155 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %153, float 0x3FC2073EC0000000) #4, !dbg !45
  %156 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %153, float 0x3FC2073EC0000000) #4, !dbg !45
  %.010.i = select i1 %.not1.i, float %156, float %155, !dbg !45
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not2.i = icmp eq i32 %157, 0, !dbg !45
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %153, float 0xBFBF19B980000000) #4, !dbg !45
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %153, float 0xBFBF19B980000000) #4, !dbg !45
  %.011.i = select i1 %.not2.i, float %159, float %158, !dbg !45
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not3.i = icmp eq i32 %160, 0, !dbg !45
  %161 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %153, float 0x3FC1E52AA0000000) #4, !dbg !45
  %162 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %153, float 0x3FC1E52AA0000000) #4, !dbg !45
  %.012.i = select i1 %.not3.i, float %162, float %161, !dbg !45
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not4.i = icmp eq i32 %163, 0, !dbg !45
  %164 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %153, float 0xBFC55B1720000000) #4, !dbg !45
  %165 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %153, float 0xBFC55B1720000000) #4, !dbg !45
  %.09.i = select i1 %.not4.i, float %165, float %164, !dbg !45
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not5.i = icmp eq i32 %166, 0, !dbg !45
  %167 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %153, float 0x3FC99DA160000000) #4, !dbg !45
  %168 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %153, float 0x3FC99DA160000000) #4, !dbg !45
  %.05.i = select i1 %.not5.i, float %168, float %167, !dbg !45
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not6.i = icmp eq i32 %169, 0, !dbg !45
  %170 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %153, float 0xBFCFFFE440000000) #4, !dbg !45
  %171 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %153, float 0xBFCFFFE440000000) #4, !dbg !45
  %.01.i = select i1 %.not6.i, float %171, float %170, !dbg !45
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not7.i = icmp eq i32 %172, 0, !dbg !45
  %173 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %153, float 0x3FD5554F00000000) #4, !dbg !45
  %174 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %153, float 0x3FD5554F00000000) #4, !dbg !45
  %.0.i = select i1 %.not7.i, float %174, float %173, !dbg !45
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not8.i = icmp eq i32 %175, 0, !dbg !45
  %176 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %153, float -5.000000e-01) #4, !dbg !45
  %177 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %153, float -5.000000e-01) #4, !dbg !45
  %.07.i = select i1 %.not8.i, float %177, float %176, !dbg !45
  %178 = fmul float %153, %.07.i, !dbg !45
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not9.i = icmp eq i32 %179, 0, !dbg !45
  %180 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %178, float %153, float %153) #4, !dbg !45
  %181 = tail call float @llvm.nvvm.fma.rn.f(float %178, float %153, float %153) #4, !dbg !45
  %.06.i = select i1 %.not9.i, float %181, float %180, !dbg !45
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not10.i = icmp eq i32 %182, 0, !dbg !45
  %183 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !45
  %184 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !45
  %.04.i = select i1 %.not10.i, float %184, float %183, !dbg !45
  %185 = icmp ugt i32 %144, 2139095039, !dbg !45
  br i1 %185, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !45

__nv_fmaf_rn.exit.i.i:                            ; preds = %4
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not11.i = icmp eq i32 %186, 0, !dbg !45
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %.03.i = select i1 %.not11.i, float %188, float %187, !dbg !45
  br label %__nv_logf.exit, !dbg !45

__nv_logf.exit:                                   ; preds = %4, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %4 ], !dbg !45
  %189 = fcmp olt float %141, 0x3810000000000000, !dbg !45
  %190 = fmul float %141, 0x4160000000000000, !dbg !45
  %.02.i9 = select i1 %189, float %190, float %141, !dbg !45
  %i.i.0.i10 = select i1 %189, float -2.300000e+01, float 0.000000e+00, !dbg !45
  %191 = bitcast float %.02.i9 to i32, !dbg !45
  %192 = add i32 %191, -1059760811, !dbg !45
  %193 = and i32 %192, -8388608, !dbg !45
  %194 = sub i32 %191, %193, !dbg !45
  %195 = bitcast i32 %194 to float, !dbg !45
  %196 = sitofp i32 %193 to float, !dbg !45
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i11 = icmp eq i32 %197, 0, !dbg !45
  %198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %196, float 0x3E80000000000000, float %i.i.0.i10) #4, !dbg !45
  %199 = tail call float @llvm.nvvm.fma.rn.f(float %196, float 0x3E80000000000000, float %i.i.0.i10) #4, !dbg !45
  %.08.i12 = select i1 %.not.i11, float %199, float %198, !dbg !45
  %200 = fadd float %195, -1.000000e+00, !dbg !45
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not1.i13 = icmp eq i32 %201, 0, !dbg !45
  %202 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %200, float 0x3FC2073EC0000000) #4, !dbg !45
  %203 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %200, float 0x3FC2073EC0000000) #4, !dbg !45
  %.010.i14 = select i1 %.not1.i13, float %203, float %202, !dbg !45
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not2.i15 = icmp eq i32 %204, 0, !dbg !45
  %205 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i14, float %200, float 0xBFBF19B980000000) #4, !dbg !45
  %206 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i14, float %200, float 0xBFBF19B980000000) #4, !dbg !45
  %.011.i16 = select i1 %.not2.i15, float %206, float %205, !dbg !45
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not3.i17 = icmp eq i32 %207, 0, !dbg !45
  %208 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i16, float %200, float 0x3FC1E52AA0000000) #4, !dbg !45
  %209 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i16, float %200, float 0x3FC1E52AA0000000) #4, !dbg !45
  %.012.i18 = select i1 %.not3.i17, float %209, float %208, !dbg !45
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not4.i19 = icmp eq i32 %210, 0, !dbg !45
  %211 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i18, float %200, float 0xBFC55B1720000000) #4, !dbg !45
  %212 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i18, float %200, float 0xBFC55B1720000000) #4, !dbg !45
  %.09.i20 = select i1 %.not4.i19, float %212, float %211, !dbg !45
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not5.i21 = icmp eq i32 %213, 0, !dbg !45
  %214 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i20, float %200, float 0x3FC99DA160000000) #4, !dbg !45
  %215 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i20, float %200, float 0x3FC99DA160000000) #4, !dbg !45
  %.05.i22 = select i1 %.not5.i21, float %215, float %214, !dbg !45
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not6.i23 = icmp eq i32 %216, 0, !dbg !45
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i22, float %200, float 0xBFCFFFE440000000) #4, !dbg !45
  %218 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i22, float %200, float 0xBFCFFFE440000000) #4, !dbg !45
  %.01.i24 = select i1 %.not6.i23, float %218, float %217, !dbg !45
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not7.i25 = icmp eq i32 %219, 0, !dbg !45
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i24, float %200, float 0x3FD5554F00000000) #4, !dbg !45
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i24, float %200, float 0x3FD5554F00000000) #4, !dbg !45
  %.0.i26 = select i1 %.not7.i25, float %221, float %220, !dbg !45
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not8.i27 = icmp eq i32 %222, 0, !dbg !45
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i26, float %200, float -5.000000e-01) #4, !dbg !45
  %224 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i26, float %200, float -5.000000e-01) #4, !dbg !45
  %.07.i28 = select i1 %.not8.i27, float %224, float %223, !dbg !45
  %225 = fmul float %200, %.07.i28, !dbg !45
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not9.i29 = icmp eq i32 %226, 0, !dbg !45
  %227 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %225, float %200, float %200) #4, !dbg !45
  %228 = tail call float @llvm.nvvm.fma.rn.f(float %225, float %200, float %200) #4, !dbg !45
  %.06.i30 = select i1 %.not9.i29, float %228, float %227, !dbg !45
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not10.i31 = icmp eq i32 %229, 0, !dbg !45
  %230 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i12, float 0x3FE62E4300000000, float %.06.i30) #4, !dbg !45
  %231 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i12, float 0x3FE62E4300000000, float %.06.i30) #4, !dbg !45
  %.04.i32 = select i1 %.not10.i31, float %231, float %230, !dbg !45
  %232 = icmp ugt i32 %191, 2139095039, !dbg !45
  br i1 %232, label %__nv_fmaf_rn.exit.i.i35, label %__nv_logf.exit38, !dbg !45

__nv_fmaf_rn.exit.i.i35:                          ; preds = %__nv_logf.exit
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not11.i36 = icmp eq i32 %233, 0, !dbg !45
  %234 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i9, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %235 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i9, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %.03.i37 = select i1 %.not11.i36, float %235, float %234, !dbg !45
  br label %__nv_logf.exit38, !dbg !45

__nv_logf.exit38:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i35
  %r.i.0.i33 = phi float [ %.03.i37, %__nv_fmaf_rn.exit.i.i35 ], [ %.04.i32, %__nv_logf.exit ], !dbg !45
  %236 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !45
  %r.i.1.i = select i1 %236, float 0xFFF0000000000000, float %r.i.0.i, !dbg !45
  %237 = and i32 %9, 14, !dbg !12
  %238 = icmp samesign ult i32 %237, 10, !dbg !16
  %239 = lshr i32 %7, 3, !dbg !12
  %240 = and i32 %239, 15, !dbg !12
  %241 = or disjoint i32 %240, %6, !dbg !13
  %242 = or disjoint i32 %241, 16, !dbg !13
  %243 = icmp slt i32 %242, 400, !dbg !14
  %244 = and i1 %238, %243, !dbg !24
  %245 = icmp slt i32 %241, 400, !dbg !14
  %246 = and i1 %238, %245, !dbg !24
  %247 = sdiv i32 %242, 100, !dbg !46
  %248 = sdiv i32 %241, 100, !dbg !46
  %.frozen39 = freeze i32 %242, !dbg !17
  %249 = sdiv i32 %.frozen39, 10, !dbg !17
  %250 = srem i32 %249, 10, !dbg !47
  %.frozen41 = freeze i32 %241, !dbg !17
  %251 = sdiv i32 %.frozen41, 10, !dbg !17
  %252 = srem i32 %251, 10, !dbg !47
  %253 = mul i32 %249, 10, !dbg !18
  %.decomposed40 = sub i32 %.frozen39, %253, !dbg !18
  %254 = mul i32 %251, 10, !dbg !18
  %.decomposed42 = sub i32 %.frozen41, %254, !dbg !18
  %255 = fcmp oeq float %.02.i9, 0.000000e+00, !dbg !45
  %r.i.1.i34 = select i1 %255, float 0xFFF0000000000000, float %r.i.0.i33, !dbg !45
  %256 = fsub float %102, %r.i.1.i, !dbg !48
  %257 = fsub float %103, %r.i.1.i34, !dbg !48
  %258 = fsub float %104, %r.i.1.i, !dbg !48
  %259 = fsub float %105, %r.i.1.i34, !dbg !48
  %260 = mul nsw i32 %252, 10, !dbg !49
  %261 = mul nsw i32 %250, 10, !dbg !49
  %262 = mul nsw i32 %.decomposed42, 100, !dbg !50
  %263 = mul nsw i32 %.decomposed40, 100, !dbg !50
  %264 = mul i32 %248, 1000, !dbg !51
  %265 = mul i32 %247, 1000, !dbg !51
  %266 = add nsw i32 %262, %237, !dbg !52
  %267 = add i32 %266, %264, !dbg !53
  %268 = add i32 %267, %260, !dbg !54
  %269 = add nsw i32 %263, %237, !dbg !52
  %270 = add i32 %269, %265, !dbg !53
  %271 = add i32 %270, %261, !dbg !54
  %272 = sext i32 %268 to i64, !dbg !55
  %273 = getelementptr float, ptr addrspace(1) %1, i64 %272, !dbg !55
  %274 = sext i32 %271 to i64, !dbg !55
  %275 = getelementptr float, ptr addrspace(1) %1, i64 %274, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %276 = shl i32 %7, 5, !dbg !56
  %277 = and i32 %276, 480, !dbg !56
  %278 = or disjoint i32 %277, %15, !dbg !56
  %279 = and i32 %9, 254, !dbg !56
  %280 = lshr exact i32 %277, 1, !dbg !56
  %281 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %280, !dbg !56
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %278, !dbg !56
  %283 = bitcast float %256 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !56
  %284 = or disjoint i32 %278, 16, !dbg !56
  %285 = lshr i32 %284, 3, !dbg !56
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !56
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %284, !dbg !56
  %288 = bitcast float %257 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #4, !dbg !56
  %289 = or disjoint i32 %278, 8, !dbg !56
  %290 = getelementptr float, ptr addrspace(3) %281, i32 %289, !dbg !56
  %291 = bitcast float %258 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #4, !dbg !56
  %292 = or disjoint i32 %278, 24, !dbg !56
  %293 = lshr i32 %292, 3, !dbg !56
  %294 = and i32 %293, 62, !dbg !56
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %294, !dbg !56
  %296 = getelementptr float, ptr addrspace(3) %295, i32 %292, !dbg !56
  %297 = bitcast float %259 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %298 = lshr i32 %9, 3, !dbg !56
  %299 = and i32 %298, 30, !dbg !56
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !56
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %279, !dbg !56
  %302 = or disjoint i32 %279, 256, !dbg !56
  %303 = lshr i32 %302, 3, !dbg !56
  %304 = and i32 %303, 62, !dbg !56
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !56
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %302, !dbg !56
  %307 = load <2 x i32>, ptr addrspace(3) %306, align 8, !dbg !56
  %.extract = load i32, ptr addrspace(3) %301, align 8, !dbg !56
  %308 = getelementptr inbounds i8, ptr addrspace(3) %301, i32 4, !dbg !56
  %.extract6 = load i32, ptr addrspace(3) %308, align 4, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %273, i1 %246) #4, !dbg !56
  %.extract7 = extractelement <2 x i32> %307, i64 0, !dbg !56
  %.extract8 = extractelement <2 x i32> %307, i64 1, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract7, i32 %.extract8, ptr addrspace(1) %275, i1 %244) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py", directory: "inductor_cache/l5")
!4 = !{ptr @triton_per_fused__log_softmax_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__log_softmax_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__log_softmax_12", linkageName: "triton_per_fused__log_softmax_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 35, column: 47, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 43, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 60, scope: !7)
!25 = !DILocation(line: 35, column: 52, scope: !7)
!26 = !DILocation(line: 37, column: 41, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 38, column: 37, scope: !7)
!32 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !31)
!33 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !31)
!35 = !DILocation(line: 131, column: 29, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 23, scope: !7)
!38 = !DILocation(line: 42, column: 41, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 43, column: 25, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 44, column: 24, scope: !7)
!46 = !DILocation(line: 34, column: 19, scope: !7)
!47 = !DILocation(line: 33, column: 27, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 33, scope: !7)
!50 = !DILocation(line: 46, column: 42, scope: !7)
!51 = !DILocation(line: 46, column: 52, scope: !7)
!52 = !DILocation(line: 46, column: 30, scope: !7)
!53 = !DILocation(line: 46, column: 38, scope: !7)
!54 = !DILocation(line: 46, column: 47, scope: !7)
!55 = !DILocation(line: 46, column: 25, scope: !7)
!56 = !DILocation(line: 46, column: 64, scope: !7)
!57 = !DILocation(line: 46, column: 4, scope: !7)
