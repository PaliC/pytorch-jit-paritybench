; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = icmp slt i32 %14, 42284, !dbg !14
  %19 = srem i32 %14, 11, !dbg !15
  %20 = srem i32 %15, 11, !dbg !15
  %21 = srem i32 %16, 11, !dbg !15
  %22 = srem i32 %17, 11, !dbg !15
  %23 = sext i32 %14 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %18) #3, !dbg !17
  %26 = sext i32 %19 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = sext i32 %20 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = sext i32 %21 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !18
  %32 = sext i32 %22 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %18) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %18) #3, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #3, !dbg !21
  %43 = bitcast i32 %42 to float, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #3, !dbg !21
  %45 = bitcast i32 %44 to float, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !21
  %49 = bitcast i32 %48 to float, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #3, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #3, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %18) #3, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #3, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %18) #3, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %18) #3, !dbg !25
  %66 = fadd float %43, 0x3F50624DE0000000, !dbg !26
  %67 = fadd float %45, 0x3F50624DE0000000, !dbg !26
  %68 = fadd float %47, 0x3F50624DE0000000, !dbg !26
  %69 = fadd float %49, 0x3F50624DE0000000, !dbg !26
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %70, 0, !dbg !27
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %71, 0, !dbg !27
  br i1 %.not.i, label %77, label %72, !dbg !27

72:                                               ; preds = %8
  br i1 %.not1.i, label %75, label %73, !dbg !27

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

77:                                               ; preds = %8
  br i1 %.not1.i, label %80, label %78, !dbg !27

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !27
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %82, 0, !dbg !27
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !27
  br i1 %.not.i1, label %89, label %84, !dbg !27

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !27

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !27

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !27
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i6 = icmp eq i32 %94, 0, !dbg !27
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i9 = icmp eq i32 %95, 0, !dbg !27
  br i1 %.not.i6, label %101, label %96, !dbg !27

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !27

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !27

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %97, %99, %102, %104
  %.0.i8 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !27
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i11 = icmp eq i32 %106, 0, !dbg !27
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i14 = icmp eq i32 %107, 0, !dbg !27
  br i1 %.not.i11, label %113, label %108, !dbg !27

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !27

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !27

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %109, %111, %114, %116
  %.0.i13 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %119 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !19
  %120 = insertelement <4 x i32> %119, i32 %36, i64 1, !dbg !19
  %121 = insertelement <4 x i32> %120, i32 %35, i64 2, !dbg !19
  %122 = insertelement <4 x i32> %121, i32 %34, i64 3, !dbg !19
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !19
  %124 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %125 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %126 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %127 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !25
  %128 = insertelement <4 x i32> %127, i32 %64, i64 1, !dbg !25
  %129 = insertelement <4 x i32> %128, i32 %63, i64 2, !dbg !25
  %130 = insertelement <4 x i32> %129, i32 %62, i64 3, !dbg !25
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !25
  %132 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !23
  %133 = insertelement <4 x i32> %132, i32 %56, i64 1, !dbg !23
  %134 = insertelement <4 x i32> %133, i32 %55, i64 2, !dbg !23
  %135 = insertelement <4 x i32> %134, i32 %54, i64 3, !dbg !23
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !23
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !28
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !28
  %141 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !17
  %142 = insertelement <4 x i32> %141, i32 %124, i64 1, !dbg !17
  %143 = insertelement <4 x i32> %142, i32 %125, i64 2, !dbg !17
  %144 = insertelement <4 x i32> %143, i32 %126, i64 3, !dbg !17
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !17
  %146 = fsub <4 x float> %145, %123, !dbg !29
  %147 = insertelement <4 x float> poison, float %140, i64 0, !dbg !30
  %148 = insertelement <4 x float> %147, float %139, i64 1, !dbg !30
  %149 = insertelement <4 x float> %148, float %138, i64 2, !dbg !30
  %150 = insertelement <4 x float> %149, float %137, i64 3, !dbg !30
  %151 = fmul <4 x float> %146, %150, !dbg !30
  %152 = fmul <4 x float> %151, %136, !dbg !31
  %153 = fadd <4 x float> %152, %131, !dbg !32
  %154 = fcmp olt <4 x float> %153, zeroinitializer, !dbg !33
  %155 = extractelement <4 x i1> %154, i64 3, !dbg !37
  %156 = extractelement <4 x float> %153, i64 3, !dbg !38
  %157 = extractelement <4 x i1> %154, i64 2, !dbg !37
  %158 = extractelement <4 x float> %153, i64 2, !dbg !38
  %159 = extractelement <4 x i1> %154, i64 1, !dbg !37
  %160 = extractelement <4 x float> %153, i64 1, !dbg !38
  %161 = extractelement <4 x i1> %154, i64 0, !dbg !37
  %162 = extractelement <4 x float> %153, i64 0, !dbg !38
  %163 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !39
  %164 = bitcast float %156 to i32, !dbg !38
  %165 = bitcast float %158 to i32, !dbg !38
  %166 = bitcast float %160 to i32, !dbg !38
  %167 = bitcast float %162 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %164, i32 %165, i32 %166, i32 %167, ptr addrspace(1) %163, i1 %18) #3, !dbg !38
  %168 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !40
  %169 = bitcast float %156 to i32, !dbg !41
  %170 = select i1 %155, i32 0, i32 %169, !dbg !37
  %171 = bitcast float %158 to i32, !dbg !41
  %172 = select i1 %157, i32 0, i32 %171, !dbg !37
  %173 = bitcast float %160 to i32, !dbg !41
  %174 = select i1 %159, i32 0, i32 %173, !dbg !37
  %175 = bitcast float %162 to i32, !dbg !41
  %176 = select i1 %161, i32 0, i32 %175, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %170, i32 %172, i32 %174, i32 %176, ptr addrspace(1) %168, i1 %18) #3, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cotpq7y7epylfc755mpzgoqbmhimq4f7bkhxapkxqgs6o4w7fq2l.py", directory: "inductor_cache/ot")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 43, column: 42, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 44, column: 37, scope: !7)
!39 = !DILocation(line: 44, column: 25, scope: !7)
!40 = !DILocation(line: 45, column: 25, scope: !7)
!41 = !DILocation(line: 45, column: 37, scope: !7)
!42 = !DILocation(line: 45, column: 4, scope: !7)
