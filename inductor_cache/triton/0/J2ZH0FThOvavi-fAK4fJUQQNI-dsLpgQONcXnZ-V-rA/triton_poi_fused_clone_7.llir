; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clone_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %21 = icmp slt i32 %13, 86528, !dbg !14
  %22 = icmp slt i32 %17, 86528, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %23 = sdiv i32 %.frozen, 26, !dbg !15
  %24 = mul i32 %23, 26, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %14, 26, !dbg !16
  %.frozen43 = freeze i32 %15, !dbg !15
  %26 = sdiv i32 %.frozen43, 26, !dbg !15
  %27 = mul i32 %26, 26, !dbg !16
  %.decomposed44 = sub i32 %.frozen43, %27, !dbg !16
  %28 = srem i32 %16, 26, !dbg !16
  %.frozen45 = freeze i32 %17, !dbg !15
  %29 = sdiv i32 %.frozen45, 26, !dbg !15
  %30 = mul i32 %29, 26, !dbg !16
  %.decomposed46 = sub i32 %.frozen45, %30, !dbg !16
  %31 = srem i32 %18, 26, !dbg !16
  %.frozen47 = freeze i32 %19, !dbg !15
  %32 = sdiv i32 %.frozen47, 26, !dbg !15
  %33 = mul i32 %32, 26, !dbg !16
  %.decomposed48 = sub i32 %.frozen47, %33, !dbg !16
  %34 = srem i32 %20, 26, !dbg !16
  %35 = srem i32 %23, 26, !dbg !17
  %36 = srem i32 %26, 26, !dbg !17
  %37 = srem i32 %29, 26, !dbg !17
  %38 = srem i32 %32, 26, !dbg !17
  %39 = sdiv i32 %13, 676, !dbg !18
  %40 = sdiv i32 %17, 676, !dbg !18
  %41 = srem i32 %39, 32, !dbg !19
  %42 = srem i32 %40, 32, !dbg !19
  %43 = mul nsw i32 %35, 28, !dbg !20
  %44 = mul nsw i32 %36, 28, !dbg !20
  %45 = mul nsw i32 %37, 28, !dbg !20
  %46 = mul nsw i32 %38, 28, !dbg !20
  %47 = mul i32 %39, 784, !dbg !21
  %48 = mul i32 %40, 784, !dbg !21
  %49 = add i32 %47, 29, !dbg !22
  %50 = add i32 %49, %.decomposed, !dbg !23
  %51 = add i32 %50, %43, !dbg !24
  %52 = add i32 %49, %25, !dbg !23
  %53 = add i32 %52, %43, !dbg !24
  %54 = add i32 %49, %.decomposed44, !dbg !23
  %55 = add i32 %54, %44, !dbg !24
  %56 = add i32 %49, %28, !dbg !23
  %57 = add i32 %56, %44, !dbg !24
  %58 = add i32 %48, 29, !dbg !22
  %59 = add i32 %58, %.decomposed46, !dbg !23
  %60 = add i32 %59, %45, !dbg !24
  %61 = add i32 %58, %31, !dbg !23
  %62 = add i32 %61, %45, !dbg !24
  %63 = add i32 %58, %.decomposed48, !dbg !23
  %64 = add i32 %63, %46, !dbg !24
  %65 = add i32 %58, %34, !dbg !23
  %66 = add i32 %65, %46, !dbg !24
  %67 = sext i32 %51 to i64, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !25
  %69 = sext i32 %53 to i64, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !25
  %71 = sext i32 %55 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = sext i32 %57 to i64, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !25
  %75 = sext i32 %60 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !25
  %77 = sext i32 %62 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !25
  %79 = sext i32 %64 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !25
  %81 = sext i32 %66 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %21) #3, !dbg !26
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %21) #3, !dbg !26
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %21) #3, !dbg !26
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %21) #3, !dbg !26
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %22) #3, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %22) #3, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %22) #3, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #3, !dbg !26
  %91 = sext i32 %41 to i64, !dbg !27
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !27
  %93 = sext i32 %42 to i64, !dbg !27
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !27
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %21) #3, !dbg !28
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %21) #3, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %21) #3, !dbg !28
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %21) #3, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %22) #3, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %22) #3, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %22) #3, !dbg !28
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %22) #3, !dbg !28
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !29
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !29
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %21) #3, !dbg !30
  %106 = bitcast i32 %105 to float, !dbg !30
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %21) #3, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %21) #3, !dbg !30
  %110 = bitcast i32 %109 to float, !dbg !30
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %21) #3, !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %22) #3, !dbg !30
  %114 = bitcast i32 %113 to float, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %22) #3, !dbg !30
  %116 = bitcast i32 %115 to float, !dbg !30
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %22) #3, !dbg !30
  %118 = bitcast i32 %117 to float, !dbg !30
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %22) #3, !dbg !30
  %120 = bitcast i32 %119 to float, !dbg !30
  %121 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !31
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %21) #3, !dbg !32
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %21) #3, !dbg !32
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %21) #3, !dbg !32
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %21) #3, !dbg !32
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %22) #3, !dbg !32
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %22) #3, !dbg !32
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %22) #3, !dbg !32
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %22) #3, !dbg !32
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %91, !dbg !33
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !33
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %21) #3, !dbg !34
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %21) #3, !dbg !34
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %21) #3, !dbg !34
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %21) #3, !dbg !34
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %22) #3, !dbg !34
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %22) #3, !dbg !34
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %22) #3, !dbg !34
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %22) #3, !dbg !34
  %141 = fadd float %106, 0x3EE4F8B580000000, !dbg !35
  %142 = fadd float %108, 0x3EE4F8B580000000, !dbg !35
  %143 = fadd float %110, 0x3EE4F8B580000000, !dbg !35
  %144 = fadd float %112, 0x3EE4F8B580000000, !dbg !35
  %145 = fadd float %114, 0x3EE4F8B580000000, !dbg !35
  %146 = fadd float %116, 0x3EE4F8B580000000, !dbg !35
  %147 = fadd float %118, 0x3EE4F8B580000000, !dbg !35
  %148 = fadd float %120, 0x3EE4F8B580000000, !dbg !35
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %149, 0, !dbg !36
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %150, 0, !dbg !36
  br i1 %.not.i, label %156, label %151, !dbg !36

151:                                              ; preds = %7
  br i1 %.not1.i, label %154, label %152, !dbg !36

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

156:                                              ; preds = %7
  br i1 %.not1.i, label %159, label %157, !dbg !36

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %152, %154, %157, %159
  %.0.i = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !36
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %161, 0, !dbg !36
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %162, 0, !dbg !36
  br i1 %.not.i1, label %168, label %163, !dbg !36

163:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %166, label %164, !dbg !36

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

168:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %171, label %169, !dbg !36

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %164, %166, %169, %171
  %.0.i3 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !36
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %173, 0, !dbg !36
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %174, 0, !dbg !36
  br i1 %.not.i6, label %180, label %175, !dbg !36

175:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %178, label %176, !dbg !36

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

180:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %183, label %181, !dbg !36

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %176, %178, %181, %183
  %.0.i8 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !36
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %185, 0, !dbg !36
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %186, 0, !dbg !36
  br i1 %.not.i11, label %192, label %187, !dbg !36

187:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %190, label %188, !dbg !36

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

192:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %195, label %193, !dbg !36

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %188, %190, %193, %195
  %.0.i13 = phi float [ %189, %188 ], [ %191, %190 ], [ %194, %193 ], [ %196, %195 ], !dbg !36
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i16 = icmp eq i32 %197, 0, !dbg !36
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i19 = icmp eq i32 %198, 0, !dbg !36
  br i1 %.not.i16, label %204, label %199, !dbg !36

199:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %202, label %200, !dbg !36

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

204:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %207, label %205, !dbg !36

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %200, %202, %205, %207
  %.0.i18 = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !36
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i21 = icmp eq i32 %209, 0, !dbg !36
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i24 = icmp eq i32 %210, 0, !dbg !36
  br i1 %.not.i21, label %216, label %211, !dbg !36

211:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %214, label %212, !dbg !36

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

216:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %219, label %217, !dbg !36

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

__nv_sqrtf.exit25:                                ; preds = %212, %214, %217, %219
  %.0.i23 = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !36
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i26 = icmp eq i32 %221, 0, !dbg !36
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i29 = icmp eq i32 %222, 0, !dbg !36
  br i1 %.not.i26, label %228, label %223, !dbg !36

223:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %226, label %224, !dbg !36

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

228:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %231, label %229, !dbg !36

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

__nv_sqrtf.exit30:                                ; preds = %224, %226, %229, %231
  %.0.i28 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !36
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i31 = icmp eq i32 %233, 0, !dbg !36
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i34 = icmp eq i32 %234, 0, !dbg !36
  br i1 %.not.i31, label %240, label %235, !dbg !36

235:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %238, label %236, !dbg !36

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

240:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %243, label %241, !dbg !36

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

__nv_sqrtf.exit35:                                ; preds = %236, %238, %241, %243
  %.0.i33 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !36
  %245 = insertelement <8 x i32> poison, i32 %90, i64 0, !dbg !26
  %246 = insertelement <8 x i32> %245, i32 %89, i64 1, !dbg !26
  %247 = insertelement <8 x i32> %246, i32 %88, i64 2, !dbg !26
  %248 = insertelement <8 x i32> %247, i32 %87, i64 3, !dbg !26
  %249 = insertelement <8 x i32> %248, i32 %86, i64 4, !dbg !26
  %250 = insertelement <8 x i32> %249, i32 %85, i64 5, !dbg !26
  %251 = insertelement <8 x i32> %250, i32 %84, i64 6, !dbg !26
  %252 = insertelement <8 x i32> %251, i32 %83, i64 7, !dbg !26
  %253 = bitcast <8 x i32> %252 to <8 x float>, !dbg !26
  %254 = insertelement <8 x i32> poison, i32 %102, i64 0, !dbg !28
  %255 = insertelement <8 x i32> %254, i32 %101, i64 1, !dbg !28
  %256 = insertelement <8 x i32> %255, i32 %100, i64 2, !dbg !28
  %257 = insertelement <8 x i32> %256, i32 %99, i64 3, !dbg !28
  %258 = insertelement <8 x i32> %257, i32 %98, i64 4, !dbg !28
  %259 = insertelement <8 x i32> %258, i32 %97, i64 5, !dbg !28
  %260 = insertelement <8 x i32> %259, i32 %96, i64 6, !dbg !28
  %261 = insertelement <8 x i32> %260, i32 %95, i64 7, !dbg !28
  %262 = bitcast <8 x i32> %261 to <8 x float>, !dbg !28
  %263 = insertelement <8 x i32> poison, i32 %140, i64 0, !dbg !34
  %264 = insertelement <8 x i32> %263, i32 %139, i64 1, !dbg !34
  %265 = insertelement <8 x i32> %264, i32 %138, i64 2, !dbg !34
  %266 = insertelement <8 x i32> %265, i32 %137, i64 3, !dbg !34
  %267 = insertelement <8 x i32> %266, i32 %136, i64 4, !dbg !34
  %268 = insertelement <8 x i32> %267, i32 %135, i64 5, !dbg !34
  %269 = insertelement <8 x i32> %268, i32 %134, i64 6, !dbg !34
  %270 = insertelement <8 x i32> %269, i32 %133, i64 7, !dbg !34
  %271 = bitcast <8 x i32> %270 to <8 x float>, !dbg !34
  %272 = insertelement <8 x i32> poison, i32 %130, i64 0, !dbg !32
  %273 = insertelement <8 x i32> %272, i32 %129, i64 1, !dbg !32
  %274 = insertelement <8 x i32> %273, i32 %128, i64 2, !dbg !32
  %275 = insertelement <8 x i32> %274, i32 %127, i64 3, !dbg !32
  %276 = insertelement <8 x i32> %275, i32 %126, i64 4, !dbg !32
  %277 = insertelement <8 x i32> %276, i32 %125, i64 5, !dbg !32
  %278 = insertelement <8 x i32> %277, i32 %124, i64 6, !dbg !32
  %279 = insertelement <8 x i32> %278, i32 %123, i64 7, !dbg !32
  %280 = bitcast <8 x i32> %279 to <8 x float>, !dbg !32
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %289 = fsub <8 x float> %253, %262, !dbg !38
  %290 = insertelement <8 x float> poison, float %288, i64 0, !dbg !39
  %291 = insertelement <8 x float> %290, float %287, i64 1, !dbg !39
  %292 = insertelement <8 x float> %291, float %286, i64 2, !dbg !39
  %293 = insertelement <8 x float> %292, float %285, i64 3, !dbg !39
  %294 = insertelement <8 x float> %293, float %284, i64 4, !dbg !39
  %295 = insertelement <8 x float> %294, float %283, i64 5, !dbg !39
  %296 = insertelement <8 x float> %295, float %282, i64 6, !dbg !39
  %297 = insertelement <8 x float> %296, float %281, i64 7, !dbg !39
  %298 = fmul <8 x float> %289, %297, !dbg !39
  %299 = fmul <8 x float> %298, %280, !dbg !40
  %300 = fadd <8 x float> %299, %271, !dbg !41
  %301 = fcmp olt <8 x float> %300, zeroinitializer, !dbg !42
  %302 = extractelement <8 x i1> %301, i64 7, !dbg !46
  %303 = extractelement <8 x i1> %301, i64 6, !dbg !46
  %304 = extractelement <8 x i1> %301, i64 5, !dbg !46
  %305 = extractelement <8 x i1> %301, i64 4, !dbg !46
  %306 = extractelement <8 x i1> %301, i64 3, !dbg !46
  %307 = extractelement <8 x i1> %301, i64 2, !dbg !46
  %308 = extractelement <8 x i1> %301, i64 1, !dbg !46
  %309 = extractelement <8 x i1> %301, i64 0, !dbg !46
  %310 = sext i32 %13 to i64, !dbg !47
  %311 = getelementptr float, ptr addrspace(1) %5, i64 %310, !dbg !47
  %312 = sext i32 %17 to i64, !dbg !47
  %313 = getelementptr float, ptr addrspace(1) %5, i64 %312, !dbg !47
  %bc = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %314 = extractelement <8 x i32> %bc, i64 7, !dbg !48
  %315 = select i1 %302, i32 0, i32 %314, !dbg !46
  %bc36 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %316 = extractelement <8 x i32> %bc36, i64 6, !dbg !48
  %317 = select i1 %303, i32 0, i32 %316, !dbg !46
  %bc37 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %318 = extractelement <8 x i32> %bc37, i64 5, !dbg !48
  %319 = select i1 %304, i32 0, i32 %318, !dbg !46
  %bc38 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %320 = extractelement <8 x i32> %bc38, i64 4, !dbg !48
  %321 = select i1 %305, i32 0, i32 %320, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %317, i32 %319, i32 %321, ptr addrspace(1) %311, i1 %21) #3, !dbg !48
  %bc39 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %322 = extractelement <8 x i32> %bc39, i64 3, !dbg !48
  %323 = select i1 %306, i32 0, i32 %322, !dbg !46
  %bc40 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %324 = extractelement <8 x i32> %bc40, i64 2, !dbg !48
  %325 = select i1 %307, i32 0, i32 %324, !dbg !46
  %bc41 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %326 = extractelement <8 x i32> %bc41, i64 1, !dbg !48
  %327 = select i1 %308, i32 0, i32 %326, !dbg !46
  %bc42 = bitcast <8 x float> %300 to <8 x i32>, !dbg !48
  %328 = extractelement <8 x i32> %bc42, i64 0, !dbg !48
  %329 = select i1 %309, i32 0, i32 %328, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %323, i32 %325, i32 %327, i32 %329, ptr addrspace(1) %313, i1 %22) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czfbb5gvsa47cynnxqjipshxilv5uyoqsoopub3suycfqphhcdqm.py", directory: "inductor_cache/zf")
!4 = !{ptr @triton_poi_fused_clone_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_7", linkageName: "triton_poi_fused_clone_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 28, scope: !7)
!20 = !DILocation(line: 29, column: 43, scope: !7)
!21 = !DILocation(line: 29, column: 52, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 29, column: 48, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 57, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 36, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 26, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 34, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 46, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 25, scope: !7)
!48 = !DILocation(line: 47, column: 37, scope: !7)
!49 = !DILocation(line: 47, column: 4, scope: !7)
