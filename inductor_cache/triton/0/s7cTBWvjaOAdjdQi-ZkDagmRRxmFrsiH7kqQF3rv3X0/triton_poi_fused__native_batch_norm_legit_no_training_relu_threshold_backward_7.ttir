#loc = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0)
module {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0), %arg6: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":19:0)) attributes {noinline = false} {
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c1048576_i32 = arith.constant 1048576 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst = arith.constant dense<1.000000e+00> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1024x1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32> loc(#loc1)
    %cst_2 = arith.constant dense<256> : tensor<1024x1xi32> loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = tt.get_program_id x : i32 loc(#loc3)
    %2 = arith.muli %1, %c1024_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc5)
    %4 = tt.expand_dims %3 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc6)
    %5 = tt.splat %2 : i32 -> tensor<1024x1xi32> loc(#loc7)
    %6 = arith.addi %5, %4 : tensor<1024x1xi32> loc(#loc7)
    %7 = arith.remsi %0, %c256_i32 : i32 loc(#loc8)
    %8 = arith.divsi %0, %c256_i32 : i32 loc(#loc9)
    %9 = arith.muli %6, %cst_2 : tensor<1024x1xi32> loc(#loc10)
    %10 = tt.splat %7 : i32 -> tensor<1024x1xi32> loc(#loc11)
    %11 = arith.addi %10, %9 : tensor<1024x1xi32> loc(#loc11)
    %12 = arith.muli %8, %c1048576_i32 : i32 loc(#loc12)
    %13 = tt.splat %12 : i32 -> tensor<1024x1xi32> loc(#loc13)
    %14 = arith.addi %11, %13 : tensor<1024x1xi32> loc(#loc13)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc14)
    %16 = tt.addptr %15, %14 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc14)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<1024x1x!tt.ptr<f32>> loc(#loc15)
    %18 = tt.addptr %arg1, %7 : !tt.ptr<f32>, i32 loc(#loc16)
    %19 = tt.splat %18 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc16)
    %20 = tt.load %19 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc17)
    %21 = tt.addptr %arg2, %7 : !tt.ptr<f32>, i32 loc(#loc18)
    %22 = tt.splat %21 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc18)
    %23 = tt.load %22 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc19)
    %24 = tt.addptr %arg3, %7 : !tt.ptr<f32>, i32 loc(#loc20)
    %25 = tt.splat %24 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc20)
    %26 = tt.load %25 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc21)
    %27 = tt.addptr %arg4, %7 : !tt.ptr<f32>, i32 loc(#loc22)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc22)
    %29 = tt.load %28 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc23)
    %30 = tt.broadcast %20 : tensor<1x1xf32> -> tensor<1024x1xf32> loc(#loc24)
    %31 = arith.subf %17, %30 : tensor<1024x1xf32> loc(#loc24)
    %32 = arith.addf %23, %cst_1 : tensor<1x1xf32> loc(#loc25)
    %33 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc26)
    %34 = arith.divf %cst, %33 : tensor<1x1xf32> loc(#loc27)
    %35 = tt.broadcast %34 : tensor<1x1xf32> -> tensor<1024x1xf32> loc(#loc28)
    %36 = arith.mulf %31, %35 : tensor<1024x1xf32> loc(#loc28)
    %37 = tt.broadcast %26 : tensor<1x1xf32> -> tensor<1024x1xf32> loc(#loc29)
    %38 = arith.mulf %36, %37 : tensor<1024x1xf32> loc(#loc29)
    %39 = tt.broadcast %29 : tensor<1x1xf32> -> tensor<1024x1xf32> loc(#loc30)
    %40 = arith.addf %38, %39 : tensor<1024x1xf32> loc(#loc30)
    %41 = arith.cmpf ogt, %cst_0, %40 : tensor<1024x1xf32> loc(#loc42)
    %42 = arith.select %41, %cst_0, %40 : tensor<1024x1xi1>, tensor<1024x1xf32> loc(#loc43)
    %43 = arith.cmpf ole, %42, %cst_0 : tensor<1024x1xf32> loc(#loc34)
    %44 = arith.muli %0, %c4096_i32 : i32 loc(#loc35)
    %45 = tt.splat %44 : i32 -> tensor<1024x1xi32> loc(#loc36)
    %46 = arith.addi %6, %45 : tensor<1024x1xi32> loc(#loc36)
    %47 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc37)
    %48 = tt.addptr %47, %46 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc37)
    tt.store %48, %42 : tensor<1024x1x!tt.ptr<f32>> loc(#loc38)
    %49 = tt.splat %arg6 : !tt.ptr<i1> -> tensor<1024x1x!tt.ptr<i1>> loc(#loc39)
    %50 = tt.addptr %49, %14 : tensor<1024x1x!tt.ptr<i1>>, tensor<1024x1xi32> loc(#loc39)
    %51 = tt.bitcast %50 : tensor<1024x1x!tt.ptr<i1>> -> tensor<1024x1x!tt.ptr<i8>> loc(#loc40)
    %52 = arith.extui %43 : tensor<1024x1xi1> to tensor<1024x1xi8> loc(#loc40)
    tt.store %51, %52 : tensor<1024x1x!tt.ptr<i8>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":22:28)
#loc3 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":25:28)
#loc4 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":25:33)
#loc5 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":26:36)
#loc6 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":26:44)
#loc7 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":26:23)
#loc8 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":29:19)
#loc9 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":30:19)
#loc10 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":32:39)
#loc11 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":32:35)
#loc12 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":32:52)
#loc13 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":32:44)
#loc14 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":32:30)
#loc15 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":32:57)
#loc16 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":33:30)
#loc17 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":33:35)
#loc18 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":34:30)
#loc19 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":34:35)
#loc20 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":35:31)
#loc21 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":35:36)
#loc22 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":36:31)
#loc23 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":36:36)
#loc24 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":37:18)
#loc25 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":39:18)
#loc26 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":40:26)
#loc27 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":42:18)
#loc28 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":45:19)
#loc29 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":46:20)
#loc30 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":47:20)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc32 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":49:42)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc34 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":51:21)
#loc35 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":52:35)
#loc36 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":52:30)
#loc37 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":52:25)
#loc38 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":52:47)
#loc39 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":53:25)
#loc40 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":53:59)
#loc41 = loc("inductor_cache/5b/c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py":53:4)
#loc42 = loc(callsite(#loc31 at #loc32))
#loc43 = loc(callsite(#loc33 at #loc32))
