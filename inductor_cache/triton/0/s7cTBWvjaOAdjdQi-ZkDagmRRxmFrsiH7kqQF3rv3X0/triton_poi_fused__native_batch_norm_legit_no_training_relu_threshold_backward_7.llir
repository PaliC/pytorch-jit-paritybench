; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %11 = shl i32 %10, 10, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = shl i32 %12, 2, !dbg !13
  %14 = and i32 %13, 508, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 513, !dbg !13
  %19 = or disjoint i32 %14, 514, !dbg !13
  %20 = or disjoint i32 %14, 515, !dbg !13
  %21 = or disjoint i32 %11, %14, !dbg !14
  %22 = or disjoint i32 %11, %15, !dbg !14
  %23 = or disjoint i32 %11, %16, !dbg !14
  %24 = or disjoint i32 %11, %17, !dbg !14
  %25 = or disjoint i32 %21, 512, !dbg !14
  %26 = or disjoint i32 %11, %18, !dbg !14
  %27 = or disjoint i32 %11, %19, !dbg !14
  %28 = or disjoint i32 %11, %20, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %29 = sdiv i32 %.frozen, 256, !dbg !15
  %30 = mul i32 %29, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %30, !dbg !16
  %31 = shl i32 %21, 8, !dbg !17
  %32 = shl i32 %22, 8, !dbg !17
  %33 = shl i32 %23, 8, !dbg !17
  %34 = shl i32 %24, 8, !dbg !17
  %35 = shl i32 %25, 8, !dbg !17
  %36 = shl i32 %26, 8, !dbg !17
  %37 = shl i32 %27, 8, !dbg !17
  %38 = shl i32 %28, 8, !dbg !17
  %39 = shl i32 %29, 20, !dbg !18
  %40 = add i32 %39, %.decomposed, !dbg !19
  %41 = add i32 %40, %31, !dbg !20
  %42 = add i32 %40, %32, !dbg !20
  %43 = add i32 %40, %33, !dbg !20
  %44 = add i32 %40, %34, !dbg !20
  %45 = add i32 %40, %35, !dbg !20
  %46 = add i32 %40, %36, !dbg !20
  %47 = add i32 %40, %37, !dbg !20
  %48 = add i32 %40, %38, !dbg !20
  %49 = sext i32 %41 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !21
  %51 = sext i32 %42 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !21
  %53 = sext i32 %43 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = sext i32 %44 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !21
  %57 = sext i32 %45 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = sext i32 %46 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !21
  %61 = sext i32 %47 to i64, !dbg !21
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !21
  %63 = sext i32 %48 to i64, !dbg !21
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !21
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #4, !dbg !22
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !22
  %73 = sext i32 %.decomposed to i64, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !23
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #4, !dbg !24
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #4, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #4, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #4, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !25
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #4, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #4, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #4, !dbg !26
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #4, !dbg !26
  %84 = bitcast i32 %83 to float, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !27
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #4, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #4, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #4, !dbg !28
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #4, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #4, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #4, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #4, !dbg !30
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #4, !dbg !30
  %95 = fadd float %84, 0x3EE4F8B580000000, !dbg !31
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i11 = icmp eq i32 %102, 0, !dbg !32
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i14 = icmp eq i32 %103, 0, !dbg !32
  br i1 %.not.i11, label %109, label %104, !dbg !32

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %107, label %105, !dbg !32

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #4, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #4, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %112, label %110, !dbg !32

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #4, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #4, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %105, %107, %110, %112
  %.0.i13 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !32
  %114 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !22
  %115 = insertelement <8 x i32> %114, i32 %71, i64 1, !dbg !22
  %116 = insertelement <8 x i32> %115, i32 %70, i64 2, !dbg !22
  %117 = insertelement <8 x i32> %116, i32 %69, i64 3, !dbg !22
  %118 = insertelement <8 x i32> %117, i32 %68, i64 4, !dbg !22
  %119 = insertelement <8 x i32> %118, i32 %67, i64 5, !dbg !22
  %120 = insertelement <8 x i32> %119, i32 %66, i64 6, !dbg !22
  %121 = insertelement <8 x i32> %120, i32 %65, i64 7, !dbg !22
  %122 = bitcast <8 x i32> %121 to <8 x float>, !dbg !22
  %123 = and i32 %12, 127, !dbg !13
  %124 = or disjoint i32 %123, 896, !dbg !13
  %125 = or disjoint i32 %11, %124, !dbg !14
  %126 = shl i32 %125, 8, !dbg !17
  %127 = add i32 %40, %126, !dbg !20
  %128 = or disjoint i32 %123, 768, !dbg !13
  %129 = or disjoint i32 %11, %128, !dbg !14
  %130 = shl i32 %129, 8, !dbg !17
  %131 = add i32 %40, %130, !dbg !20
  %132 = or disjoint i32 %123, 640, !dbg !13
  %133 = or disjoint i32 %11, %132, !dbg !14
  %134 = shl i32 %133, 8, !dbg !17
  %135 = add i32 %40, %134, !dbg !20
  %136 = or disjoint i32 %123, 512, !dbg !13
  %137 = or disjoint i32 %11, %136, !dbg !14
  %138 = shl i32 %137, 8, !dbg !17
  %139 = add i32 %40, %138, !dbg !20
  %140 = or disjoint i32 %123, 384, !dbg !13
  %141 = or disjoint i32 %11, %140, !dbg !14
  %142 = shl i32 %141, 8, !dbg !17
  %143 = add i32 %40, %142, !dbg !20
  %144 = or disjoint i32 %123, 256, !dbg !13
  %145 = or disjoint i32 %11, %144, !dbg !14
  %146 = shl i32 %145, 8, !dbg !17
  %147 = add i32 %40, %146, !dbg !20
  %148 = or disjoint i32 %123, 128, !dbg !13
  %149 = or disjoint i32 %11, %148, !dbg !14
  %150 = shl i32 %149, 8, !dbg !17
  %151 = add i32 %40, %150, !dbg !20
  %152 = or disjoint i32 %11, %123, !dbg !14
  %153 = shl i32 %152, 8, !dbg !17
  %154 = add i32 %40, %153, !dbg !20
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !33
  %156 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !34
  %157 = bitcast <8 x i32> %156 to <8 x float>, !dbg !34
  %158 = shufflevector <8 x float> %157, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !34
  %159 = fsub <8 x float> %122, %158, !dbg !34
  %160 = insertelement <8 x float> poison, float %155, i64 0, !dbg !35
  %161 = shufflevector <8 x float> %160, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !35
  %162 = fmul <8 x float> %159, %161, !dbg !35
  %163 = insertelement <8 x i32> poison, i32 %89, i64 0, !dbg !36
  %164 = bitcast <8 x i32> %163 to <8 x float>, !dbg !36
  %165 = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !36
  %166 = fmul <8 x float> %162, %165, !dbg !36
  %167 = insertelement <8 x i32> poison, i32 %94, i64 0, !dbg !37
  %168 = bitcast <8 x i32> %167 to <8 x float>, !dbg !37
  %169 = shufflevector <8 x float> %168, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %170 = fadd <8 x float> %166, %169, !dbg !37
  %171 = fcmp olt <8 x float> %170, zeroinitializer, !dbg !38
  %172 = select <8 x i1> %171, <8 x float> zeroinitializer, <8 x float> %170, !dbg !42
  %173 = fcmp ole <8 x float> %172, zeroinitializer, !dbg !43
  %174 = shl i32 %9, 12, !dbg !44
  %175 = add i32 %21, %174, !dbg !45
  %176 = add i32 %174, %25, !dbg !45
  %177 = sext i32 %175 to i64, !dbg !46
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %177, !dbg !46
  %179 = sext i32 %176 to i64, !dbg !46
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %179, !dbg !46
  %bc = bitcast <8 x float> %172 to <8 x i32>, !dbg !47
  %181 = extractelement <8 x i32> %bc, i64 7, !dbg !47
  %bc16 = bitcast <8 x float> %172 to <8 x i32>, !dbg !47
  %182 = extractelement <8 x i32> %bc16, i64 6, !dbg !47
  %bc17 = bitcast <8 x float> %172 to <8 x i32>, !dbg !47
  %183 = extractelement <8 x i32> %bc17, i64 5, !dbg !47
  %bc18 = bitcast <8 x float> %172 to <8 x i32>, !dbg !47
  %184 = extractelement <8 x i32> %bc18, i64 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %178, i1 true) #4, !dbg !47
  %bc19 = bitcast <8 x float> %172 to <8 x i32>, !dbg !47
  %185 = extractelement <8 x i32> %bc19, i64 3, !dbg !47
  %bc20 = bitcast <8 x float> %172 to <8 x i32>, !dbg !47
  %186 = extractelement <8 x i32> %bc20, i64 2, !dbg !47
  %bc21 = bitcast <8 x float> %172 to <8 x i32>, !dbg !47
  %187 = extractelement <8 x i32> %bc21, i64 1, !dbg !47
  %bc22 = bitcast <8 x float> %172 to <8 x i32>, !dbg !47
  %188 = extractelement <8 x i32> %bc22, i64 0, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %185, i32 %186, i32 %187, i32 %188, ptr addrspace(1) %180, i1 true) #4, !dbg !47
  %189 = sext i32 %154 to i64, !dbg !48
  %190 = getelementptr i1, ptr addrspace(1) %6, i64 %189, !dbg !48
  %191 = sext i32 %151 to i64, !dbg !48
  %192 = getelementptr i1, ptr addrspace(1) %6, i64 %191, !dbg !48
  %193 = sext i32 %147 to i64, !dbg !48
  %194 = getelementptr i1, ptr addrspace(1) %6, i64 %193, !dbg !48
  %195 = sext i32 %143 to i64, !dbg !48
  %196 = getelementptr i1, ptr addrspace(1) %6, i64 %195, !dbg !48
  %197 = sext i32 %139 to i64, !dbg !48
  %198 = getelementptr i1, ptr addrspace(1) %6, i64 %197, !dbg !48
  %199 = sext i32 %135 to i64, !dbg !48
  %200 = getelementptr i1, ptr addrspace(1) %6, i64 %199, !dbg !48
  %201 = sext i32 %131 to i64, !dbg !48
  %202 = getelementptr i1, ptr addrspace(1) %6, i64 %201, !dbg !48
  %203 = sext i32 %127 to i64, !dbg !48
  %204 = getelementptr i1, ptr addrspace(1) %6, i64 %203, !dbg !48
  %205 = extractelement <8 x i1> %173, i64 7, !dbg !49
  %206 = zext i1 %205 to i8, !dbg !49
  %207 = extractelement <8 x i1> %173, i64 6, !dbg !49
  %208 = zext i1 %207 to i8, !dbg !49
  %209 = extractelement <8 x i1> %173, i64 5, !dbg !49
  %210 = zext i1 %209 to i8, !dbg !49
  %211 = extractelement <8 x i1> %173, i64 4, !dbg !49
  %212 = zext i1 %211 to i8, !dbg !49
  %213 = extractelement <8 x i1> %173, i64 3, !dbg !49
  %214 = zext i1 %213 to i8, !dbg !49
  %215 = extractelement <8 x i1> %173, i64 2, !dbg !49
  %216 = zext i1 %215 to i8, !dbg !49
  %217 = extractelement <8 x i1> %173, i64 1, !dbg !49
  %218 = zext i1 %217 to i8, !dbg !49
  %219 = extractelement <8 x i1> %173, i64 0, !dbg !49
  %220 = zext i1 %219 to i8, !dbg !49
  %221 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %14, !dbg !49
  %222 = insertelement <1 x i8> poison, i8 %206, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %221, <1 x i8> %222, i1 true) #4, !dbg !49
  %223 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !49
  %224 = insertelement <1 x i8> poison, i8 %208, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %223, <1 x i8> %224, i1 true) #4, !dbg !49
  %225 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %16, !dbg !49
  %226 = insertelement <1 x i8> poison, i8 %210, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %225, <1 x i8> %226, i1 true) #4, !dbg !49
  %227 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %17, !dbg !49
  %228 = insertelement <1 x i8> poison, i8 %212, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %227, <1 x i8> %228, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %229 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %123, !dbg !49
  %230 = load i8, ptr addrspace(3) %229, align 1, !dbg !49
  %231 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %148, !dbg !49
  %232 = load i8, ptr addrspace(3) %231, align 1, !dbg !49
  %233 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %144, !dbg !49
  %234 = load i8, ptr addrspace(3) %233, align 1, !dbg !49
  %235 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %140, !dbg !49
  %236 = load i8, ptr addrspace(3) %235, align 1, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %237 = insertelement <1 x i8> poison, i8 %214, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %221, <1 x i8> %237, i1 true) #4, !dbg !49
  %238 = insertelement <1 x i8> poison, i8 %216, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %223, <1 x i8> %238, i1 true) #4, !dbg !49
  %239 = insertelement <1 x i8> poison, i8 %218, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %225, <1 x i8> %239, i1 true) #4, !dbg !49
  %240 = insertelement <1 x i8> poison, i8 %220, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %227, <1 x i8> %240, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %241 = load i8, ptr addrspace(3) %229, align 1, !dbg !49
  %242 = load i8, ptr addrspace(3) %231, align 1, !dbg !49
  %243 = load i8, ptr addrspace(3) %233, align 1, !dbg !49
  %244 = load i8, ptr addrspace(3) %235, align 1, !dbg !49
  %245 = and i8 %230, 1, !dbg !49
  %246 = and i8 %232, 1, !dbg !49
  %247 = and i8 %234, 1, !dbg !49
  %248 = and i8 %236, 1, !dbg !49
  %249 = and i8 %241, 1, !dbg !49
  %250 = and i8 %242, 1, !dbg !49
  %251 = and i8 %243, 1, !dbg !49
  %252 = and i8 %244, 1, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %245, ptr addrspace(1) %190, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %246, ptr addrspace(1) %192, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %247, ptr addrspace(1) %194, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %248, ptr addrspace(1) %196, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %249, ptr addrspace(1) %198, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %250, ptr addrspace(1) %200, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %251, ptr addrspace(1) %202, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %252, ptr addrspace(1) %204, i1 true) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 52, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 57, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 26, scope: !7)
!33 = !DILocation(line: 42, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 49, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 51, column: 21, scope: !7)
!44 = !DILocation(line: 52, column: 35, scope: !7)
!45 = !DILocation(line: 52, column: 30, scope: !7)
!46 = !DILocation(line: 52, column: 25, scope: !7)
!47 = !DILocation(line: 52, column: 47, scope: !7)
!48 = !DILocation(line: 53, column: 25, scope: !7)
!49 = !DILocation(line: 53, column: 59, scope: !7)
!50 = !DILocation(line: 53, column: 4, scope: !7)
