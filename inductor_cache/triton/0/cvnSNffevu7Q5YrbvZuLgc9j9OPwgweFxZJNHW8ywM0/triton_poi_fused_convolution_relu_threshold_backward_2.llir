; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = lshr i32 %10, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = lshr i32 %10, 2, !dbg !17
  %22 = and i32 %21, 31, !dbg !17
  %23 = and i32 %11, 28, !dbg !17
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = or disjoint i32 %20, %23, !dbg !18
  %26 = shl i32 %24, 2, !dbg !19
  %27 = shl i32 %15, 12, !dbg !20
  %28 = add i32 %26, %27, !dbg !21
  %29 = sext i32 %28 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %17) #2, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %17) #2, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %41 = shl i32 %16, 12, !dbg !25
  %42 = add i32 %25, %41, !dbg !26
  %43 = sext i32 %42 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !27
  %45 = shl i32 %10, 7, !dbg !28
  %46 = and i32 %45, 384, !dbg !28
  %47 = or disjoint i32 %46, %22, !dbg !28
  %48 = and i32 %11, 508, !dbg !28
  %49 = lshr exact i32 %46, 3, !dbg !28
  %50 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %49, !dbg !28
  %51 = getelementptr float, ptr addrspace(3) %50, i32 %47, !dbg !28
  %52 = or disjoint i32 %47, 32, !dbg !28
  %53 = lshr i32 %52, 5, !dbg !28
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !28
  %55 = getelementptr float, ptr addrspace(3) %54, i32 %52, !dbg !28
  %56 = or disjoint i32 %47, 64, !dbg !28
  %57 = lshr i32 %56, 5, !dbg !28
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57, !dbg !28
  %59 = getelementptr float, ptr addrspace(3) %58, i32 %56, !dbg !28
  %60 = or disjoint i32 %47, 96, !dbg !28
  %61 = lshr i32 %60, 5, !dbg !28
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !28
  %63 = getelementptr float, ptr addrspace(3) %62, i32 %60, !dbg !28
  %64 = lshr i32 %48, 5, !dbg !28
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !28
  %66 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %48, !dbg !28
  %67 = or disjoint i32 %48, 1, !dbg !28
  %68 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %67, !dbg !28
  %69 = or disjoint i32 %48, 2, !dbg !28
  %70 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %69, !dbg !28
  %71 = or disjoint i32 %48, 3, !dbg !28
  %72 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %71, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !29
  %74 = getelementptr i1, ptr addrspace(1) %4, i64 %29, !dbg !30
  %75 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !23
  %76 = insertelement <4 x i32> %75, i32 %33, i64 1, !dbg !23
  %77 = insertelement <4 x i32> %76, i32 %34, i64 2, !dbg !23
  %78 = insertelement <4 x i32> %77, i32 %35, i64 3, !dbg !23
  %79 = bitcast <4 x i32> %78 to <4 x float>, !dbg !23
  %80 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !24
  %81 = insertelement <4 x i32> %80, i32 %38, i64 1, !dbg !24
  %82 = insertelement <4 x i32> %81, i32 %39, i64 2, !dbg !24
  %83 = insertelement <4 x i32> %82, i32 %40, i64 3, !dbg !24
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !24
  %85 = fadd <4 x float> %79, %84, !dbg !31
  %86 = fcmp olt <4 x float> %85, zeroinitializer, !dbg !32
  %87 = select <4 x i1> %86, <4 x float> zeroinitializer, <4 x float> %85, !dbg !36
  %88 = fcmp ole <4 x float> %87, zeroinitializer, !dbg !37
  %89 = extractelement <4 x float> %85, i64 0, !dbg !28
  %90 = bitcast float %89 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %90, i1 true) #2, !dbg !28
  %91 = extractelement <4 x float> %85, i64 1, !dbg !28
  %92 = bitcast float %91 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %92, i1 true) #2, !dbg !28
  %93 = extractelement <4 x float> %85, i64 2, !dbg !28
  %94 = bitcast float %93 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %94, i1 true) #2, !dbg !28
  %95 = extractelement <4 x float> %85, i64 3, !dbg !28
  %96 = bitcast float %95 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %96, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %97 = load i32, ptr addrspace(3) %66, align 4, !dbg !28
  %98 = load i32, ptr addrspace(3) %68, align 4, !dbg !28
  %99 = load i32, ptr addrspace(3) %70, align 4, !dbg !28
  %100 = load i32, ptr addrspace(3) %72, align 4, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %97, i32 %98, i32 %99, i32 %100, ptr addrspace(1) %44, i1 %18) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %101 = extractelement <4 x float> %87, i64 0, !dbg !38
  %102 = bitcast float %101 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %102, i1 true) #2, !dbg !38
  %103 = extractelement <4 x float> %87, i64 1, !dbg !38
  %104 = bitcast float %103 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %104, i1 true) #2, !dbg !38
  %105 = extractelement <4 x float> %87, i64 2, !dbg !38
  %106 = bitcast float %105 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %106, i1 true) #2, !dbg !38
  %107 = extractelement <4 x float> %87, i64 3, !dbg !38
  %108 = bitcast float %107 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %108, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %109 = load i32, ptr addrspace(3) %66, align 4, !dbg !38
  %110 = load i32, ptr addrspace(3) %68, align 4, !dbg !38
  %111 = load i32, ptr addrspace(3) %70, align 4, !dbg !38
  %112 = load i32, ptr addrspace(3) %72, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %109, i32 %110, i32 %111, i32 %112, ptr addrspace(1) %73, i1 %18) #2, !dbg !38
  %113 = zext <4 x i1> %88 to <4 x i8>, !dbg !39
  %114 = bitcast <4 x i8> %113 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %74, i1 %17) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py", directory: "inductor_cache/mi")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_2", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 48, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 39, column: 35, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 25, scope: !7)
!28 = !DILocation(line: 39, column: 46, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 41, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 38, column: 19, scope: !7)
!38 = !DILocation(line: 40, column: 46, scope: !7)
!39 = !DILocation(line: 41, column: 54, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
