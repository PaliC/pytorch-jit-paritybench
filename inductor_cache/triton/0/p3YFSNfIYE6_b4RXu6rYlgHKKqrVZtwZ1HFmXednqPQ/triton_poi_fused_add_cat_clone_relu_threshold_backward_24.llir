; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = and i32 %18, 127, !dbg !12
  %20 = or disjoint i32 %19, 128, !dbg !12
  %21 = shl i32 %18, 2, !dbg !12
  %22 = and i32 %21, 252, !dbg !12
  %23 = or disjoint i32 %17, %19, !dbg !13
  %24 = or disjoint i32 %17, %20, !dbg !13
  %25 = or disjoint i32 %17, %22, !dbg !13
  %26 = icmp slt i32 %23, 256, !dbg !14
  %27 = icmp slt i32 %24, 256, !dbg !14
  %28 = icmp slt i32 %25, 256, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %30 = shl i32 %29, 1, !dbg !16
  %31 = lshr i32 %18, 6, !dbg !17
  %.lobit = and i32 %31, 1, !dbg !17
  %32 = or disjoint i32 %30, %.lobit, !dbg !18
  %33 = icmp slt i32 %30, 256, !dbg !19
  %34 = icmp slt i32 %32, 256, !dbg !19
  %.frozen = freeze i32 %25, !dbg !20
  %35 = sdiv i32 %.frozen, 64, !dbg !20
  %36 = mul i32 %35, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %36, !dbg !21
  %37 = shl i32 %23, 8, !dbg !22
  %38 = shl i32 %24, 8, !dbg !22
  %39 = add i32 %37, %30, !dbg !23
  %40 = add i32 %38, %30, !dbg !23
  %41 = sext i32 %39 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %10, i64 %41, !dbg !24
  %43 = sext i32 %40 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %10, i64 %43, !dbg !24
  %45 = and i1 %33, %26, !dbg !25
  %46 = and i1 %33, %27, !dbg !25
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %45) #4, !dbg !26
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !26
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !26
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %46) #4, !dbg !26
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !26
  %53 = and i32 %21, 508, !dbg !26
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !26
  %55 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #4, !dbg !26
  %56 = getelementptr inbounds i8, ptr addrspace(3) %54, i32 1040, !dbg !26
  %57 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #4, !dbg !26
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !26
  %59 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #4, !dbg !26
  %60 = getelementptr inbounds i8, ptr addrspace(3) %54, i32 1552, !dbg !26
  %61 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %62 = lshr i32 %21, 6, !dbg !26
  %63 = and i32 %62, 4, !dbg !26
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !26
  %65 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %53, !dbg !26
  %66 = load <4 x float>, ptr addrspace(3) %65, align 16, !dbg !26
  %67 = icmp slt i32 %.decomposed, 32, !dbg !27
  %68 = shl i32 %32, 5, !dbg !28
  %69 = shl i32 %35, 13, !dbg !29
  %70 = add i32 %68, %69, !dbg !30
  %71 = add i32 %70, %.decomposed, !dbg !31
  %72 = sext i32 %71 to i64, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !32
  %74 = and i1 %67, %34, !dbg !33
  %75 = and i1 %28, %74, !dbg !34
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !35
  %77 = sext i32 %.decomposed to i64, !dbg !36
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !36
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !37
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !38
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !39
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !39
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !39
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !39
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !39
  %86 = bitcast i32 %82 to float, !dbg !39
  %87 = bitcast i32 %83 to float, !dbg !39
  %88 = bitcast i32 %84 to float, !dbg !39
  %89 = bitcast i32 %85 to float, !dbg !39
  %90 = fadd float %86, 0x3EE4F8B580000000, !dbg !40
  %91 = fadd float %87, 0x3EE4F8B580000000, !dbg !40
  %92 = fadd float %88, 0x3EE4F8B580000000, !dbg !40
  %93 = fadd float %89, 0x3EE4F8B580000000, !dbg !40
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %94, 0, !dbg !41
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %95, 0, !dbg !41
  br i1 %.not.i, label %101, label %96, !dbg !41

96:                                               ; preds = %15
  br i1 %.not1.i, label %99, label %97, !dbg !41

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

101:                                              ; preds = %15
  br i1 %.not1.i, label %104, label %102, !dbg !41

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %97, %99, %102, %104
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !41
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i5 = icmp eq i32 %106, 0, !dbg !41
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i8 = icmp eq i32 %107, 0, !dbg !41
  br i1 %.not.i5, label %113, label %108, !dbg !41

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %111, label %109, !dbg !41

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %116, label %114, !dbg !41

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

__nv_sqrtf.exit9:                                 ; preds = %109, %111, %114, %116
  %.0.i7 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !41
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i10 = icmp eq i32 %118, 0, !dbg !41
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i13 = icmp eq i32 %119, 0, !dbg !41
  br i1 %.not.i10, label %125, label %120, !dbg !41

120:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %123, label %121, !dbg !41

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

125:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %128, label %126, !dbg !41

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

__nv_sqrtf.exit14:                                ; preds = %121, %123, %126, %128
  %.0.i12 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !41
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i15 = icmp eq i32 %130, 0, !dbg !41
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i18 = icmp eq i32 %131, 0, !dbg !41
  br i1 %.not.i15, label %137, label %132, !dbg !41

132:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %135, label %133, !dbg !41

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

137:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %140, label %138, !dbg !41

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

__nv_sqrtf.exit19:                                ; preds = %133, %135, %138, %140
  %.0.i17 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !41
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !42
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !42
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !42
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %77, !dbg !43
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !44
  %148 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !45
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %148, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !46
  %150 = icmp sgt i32 %.decomposed, 31, !dbg !47
  %151 = add nsw i32 %.decomposed, -32, !dbg !48
  %152 = add i32 %70, %151, !dbg !49
  %153 = sext i32 %152 to i64, !dbg !50
  %154 = getelementptr float, ptr addrspace(1) %5, i64 %153, !dbg !50
  %155 = and i1 %150, %34, !dbg !51
  %156 = and i1 %28, %155, !dbg !52
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156) #4, !dbg !53
  %158 = sext i32 %151 to i64, !dbg !54
  %159 = getelementptr float, ptr addrspace(1) %6, i64 %158, !dbg !54
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %159, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156) #4, !dbg !55
  %161 = getelementptr float, ptr addrspace(1) %7, i64 %158, !dbg !56
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156) #4, !dbg !57
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !57
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !57
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !57
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !57
  %167 = bitcast i32 %163 to float, !dbg !57
  %168 = bitcast i32 %164 to float, !dbg !57
  %169 = bitcast i32 %165 to float, !dbg !57
  %170 = bitcast i32 %166 to float, !dbg !57
  %171 = fadd float %167, 0x3EE4F8B580000000, !dbg !58
  %172 = fadd float %168, 0x3EE4F8B580000000, !dbg !58
  %173 = fadd float %169, 0x3EE4F8B580000000, !dbg !58
  %174 = fadd float %170, 0x3EE4F8B580000000, !dbg !58
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i20 = icmp eq i32 %175, 0, !dbg !59
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i23 = icmp eq i32 %176, 0, !dbg !59
  br i1 %.not.i20, label %182, label %177, !dbg !59

177:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %180, label %178, !dbg !59

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #4, !dbg !59
  br label %__nv_sqrtf.exit24, !dbg !59

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #4, !dbg !59
  br label %__nv_sqrtf.exit24, !dbg !59

182:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %185, label %183, !dbg !59

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #4, !dbg !59
  br label %__nv_sqrtf.exit24, !dbg !59

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #4, !dbg !59
  br label %__nv_sqrtf.exit24, !dbg !59

__nv_sqrtf.exit24:                                ; preds = %178, %180, %183, %185
  %.0.i22 = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !59
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i25 = icmp eq i32 %187, 0, !dbg !59
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i28 = icmp eq i32 %188, 0, !dbg !59
  br i1 %.not.i25, label %194, label %189, !dbg !59

189:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %192, label %190, !dbg !59

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #4, !dbg !59
  br label %__nv_sqrtf.exit29, !dbg !59

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #4, !dbg !59
  br label %__nv_sqrtf.exit29, !dbg !59

194:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %197, label %195, !dbg !59

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #4, !dbg !59
  br label %__nv_sqrtf.exit29, !dbg !59

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #4, !dbg !59
  br label %__nv_sqrtf.exit29, !dbg !59

__nv_sqrtf.exit29:                                ; preds = %190, %192, %195, %197
  %.0.i27 = phi float [ %191, %190 ], [ %193, %192 ], [ %196, %195 ], [ %198, %197 ], !dbg !59
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i30 = icmp eq i32 %199, 0, !dbg !59
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i33 = icmp eq i32 %200, 0, !dbg !59
  br i1 %.not.i30, label %206, label %201, !dbg !59

201:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %204, label %202, !dbg !59

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #4, !dbg !59
  br label %__nv_sqrtf.exit34, !dbg !59

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #4, !dbg !59
  br label %__nv_sqrtf.exit34, !dbg !59

206:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %209, label %207, !dbg !59

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #4, !dbg !59
  br label %__nv_sqrtf.exit34, !dbg !59

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #4, !dbg !59
  br label %__nv_sqrtf.exit34, !dbg !59

__nv_sqrtf.exit34:                                ; preds = %202, %204, %207, %209
  %.0.i32 = phi float [ %203, %202 ], [ %205, %204 ], [ %208, %207 ], [ %210, %209 ], !dbg !59
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i35 = icmp eq i32 %211, 0, !dbg !59
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i38 = icmp eq i32 %212, 0, !dbg !59
  br i1 %.not.i35, label %218, label %213, !dbg !59

213:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %216, label %214, !dbg !59

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #4, !dbg !59
  br label %__nv_sqrtf.exit39, !dbg !59

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #4, !dbg !59
  br label %__nv_sqrtf.exit39, !dbg !59

218:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %221, label %219, !dbg !59

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #4, !dbg !59
  br label %__nv_sqrtf.exit39, !dbg !59

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #4, !dbg !59
  br label %__nv_sqrtf.exit39, !dbg !59

__nv_sqrtf.exit39:                                ; preds = %214, %216, %219, %221
  %.0.i37 = phi float [ %215, %214 ], [ %217, %216 ], [ %220, %219 ], [ %222, %221 ], !dbg !59
  %223 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !53
  %224 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !55
  %225 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !53
  %226 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !55
  %227 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !53
  %228 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !55
  %229 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !53
  %230 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !55
  %231 = insertelement <4 x i32> poison, i32 %229, i64 0, !dbg !53
  %232 = insertelement <4 x i32> %231, i32 %227, i64 1, !dbg !53
  %233 = insertelement <4 x i32> %232, i32 %225, i64 2, !dbg !53
  %234 = insertelement <4 x i32> %233, i32 %223, i64 3, !dbg !53
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !53
  %236 = insertelement <4 x i32> poison, i32 %230, i64 0, !dbg !55
  %237 = insertelement <4 x i32> %236, i32 %228, i64 1, !dbg !55
  %238 = insertelement <4 x i32> %237, i32 %226, i64 2, !dbg !55
  %239 = insertelement <4 x i32> %238, i32 %224, i64 3, !dbg !55
  %240 = bitcast <4 x i32> %239 to <4 x float>, !dbg !55
  %241 = fsub <4 x float> %235, %240, !dbg !60
  %242 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !35
  %243 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !37
  %244 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !44
  %245 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !46
  %246 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !35
  %247 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !37
  %248 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !44
  %249 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !46
  %250 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !35
  %251 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !37
  %252 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !44
  %253 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !46
  %254 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !35
  %255 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !37
  %256 = insertelement <4 x i32> poison, i32 %254, i64 0, !dbg !35
  %257 = insertelement <4 x i32> %256, i32 %250, i64 1, !dbg !35
  %258 = insertelement <4 x i32> %257, i32 %246, i64 2, !dbg !35
  %259 = insertelement <4 x i32> %258, i32 %242, i64 3, !dbg !35
  %260 = bitcast <4 x i32> %259 to <4 x float>, !dbg !35
  %261 = insertelement <4 x i32> poison, i32 %255, i64 0, !dbg !37
  %262 = insertelement <4 x i32> %261, i32 %251, i64 1, !dbg !37
  %263 = insertelement <4 x i32> %262, i32 %247, i64 2, !dbg !37
  %264 = insertelement <4 x i32> %263, i32 %243, i64 3, !dbg !37
  %265 = bitcast <4 x i32> %264 to <4 x float>, !dbg !37
  %266 = fsub <4 x float> %260, %265, !dbg !61
  %267 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !44
  %268 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !46
  %269 = and i1 %28, %34, !dbg !25
  %.frozen40 = freeze i32 %24, !dbg !62
  %270 = sdiv i32 %.frozen40, 32, !dbg !62
  %271 = srem i32 %270, 2, !dbg !63
  %.frozen42 = freeze i32 %23, !dbg !62
  %272 = sdiv i32 %.frozen42, 32, !dbg !62
  %273 = srem i32 %272, 2, !dbg !63
  %274 = mul i32 %270, 32, !dbg !64
  %.decomposed41 = sub i32 %.frozen40, %274, !dbg !64
  %275 = mul i32 %272, 32, !dbg !64
  %.decomposed43 = sub i32 %.frozen42, %275, !dbg !64
  %276 = sdiv i32 %24, 64, !dbg !20
  %277 = sdiv i32 %23, 64, !dbg !20
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !65
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !65
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !65
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !65
  %282 = getelementptr float, ptr addrspace(1) %8, i64 %158, !dbg !66
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %282, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156) #4, !dbg !67
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !67
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !67
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !67
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !67
  %288 = getelementptr float, ptr addrspace(1) %9, i64 %158, !dbg !68
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %288, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156) #4, !dbg !69
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !69
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !69
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !69
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !69
  %294 = shl nsw i32 %273, 8, !dbg !70
  %295 = shl nsw i32 %271, 8, !dbg !70
  %296 = shl nsw i32 %.decomposed43, 9, !dbg !71
  %297 = shl nsw i32 %.decomposed41, 9, !dbg !71
  %298 = shl i32 %277, 14, !dbg !72
  %299 = shl i32 %276, 14, !dbg !72
  %300 = shl i32 %35, 14, !dbg !72
  %301 = add i32 %296, %30, !dbg !73
  %302 = add i32 %301, %298, !dbg !74
  %303 = add i32 %302, %294, !dbg !75
  %304 = add i32 %297, %30, !dbg !73
  %305 = add i32 %304, %299, !dbg !74
  %306 = add i32 %305, %295, !dbg !75
  %307 = sext i32 %303 to i64, !dbg !76
  %308 = getelementptr float, ptr addrspace(1) %11, i64 %307, !dbg !76
  %309 = sext i32 %306 to i64, !dbg !76
  %310 = getelementptr float, ptr addrspace(1) %11, i64 %309, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %311 = shl i32 %18, 3, !dbg !77
  %312 = and i32 %311, 504, !dbg !77
  %313 = or disjoint i32 %312, %.lobit, !dbg !77
  %314 = shl i32 %18, 1, !dbg !77
  %315 = and i32 %314, 254, !dbg !77
  %316 = lshr exact i32 %312, 1, !dbg !77
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !77
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %313, !dbg !77
  %319 = or disjoint i32 %313, 2, !dbg !77
  %320 = lshr i32 %319, 1, !dbg !77
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !77
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %319, !dbg !77
  %323 = or disjoint i32 %313, 4, !dbg !77
  %324 = lshr i32 %323, 1, !dbg !77
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %324, !dbg !77
  %326 = getelementptr inbounds float, ptr addrspace(3) %325, i32 %323, !dbg !77
  %327 = or disjoint i32 %313, 6, !dbg !77
  %328 = lshr i32 %327, 1, !dbg !77
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !77
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !77
  %331 = lshr exact i32 %315, 1, !dbg !77
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i32 %331, !dbg !77
  %333 = getelementptr float, ptr addrspace(3) %332, i32 %315, !dbg !77
  %334 = or disjoint i32 %315, 1, !dbg !77
  %335 = getelementptr float, ptr addrspace(3) %332, i32 %334, !dbg !77
  %336 = or disjoint i32 %315, 256, !dbg !77
  %337 = lshr exact i32 %336, 1, !dbg !77
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !77
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !77
  %340 = or disjoint i32 %315, 257, !dbg !77
  %341 = lshr i32 %340, 1, !dbg !77
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i32 %341, !dbg !77
  %343 = getelementptr float, ptr addrspace(3) %342, i32 %340, !dbg !77
  %344 = shl i32 %32, 6, !dbg !78
  %345 = add i32 %344, %.decomposed, !dbg !79
  %346 = add i32 %345, %300, !dbg !80
  %347 = sext i32 %346 to i64, !dbg !81
  %348 = getelementptr i1, ptr addrspace(1) %12, i64 %347, !dbg !81
  %349 = insertelement <4 x float> poison, float %142, i64 0, !dbg !82
  %350 = insertelement <4 x float> %349, float %143, i64 1, !dbg !82
  %351 = insertelement <4 x float> %350, float %144, i64 2, !dbg !82
  %352 = insertelement <4 x float> %351, float %145, i64 3, !dbg !82
  %353 = fmul <4 x float> %266, %352, !dbg !82
  %354 = insertelement <4 x i32> poison, i32 %267, i64 0, !dbg !44
  %355 = insertelement <4 x i32> %354, i32 %252, i64 1, !dbg !44
  %356 = insertelement <4 x i32> %355, i32 %248, i64 2, !dbg !44
  %357 = insertelement <4 x i32> %356, i32 %244, i64 3, !dbg !44
  %358 = bitcast <4 x i32> %357 to <4 x float>, !dbg !44
  %359 = fmul <4 x float> %353, %358, !dbg !83
  %360 = insertelement <4 x i32> poison, i32 %268, i64 0, !dbg !46
  %361 = insertelement <4 x i32> %360, i32 %253, i64 1, !dbg !46
  %362 = insertelement <4 x i32> %361, i32 %249, i64 2, !dbg !46
  %363 = insertelement <4 x i32> %362, i32 %245, i64 3, !dbg !46
  %364 = bitcast <4 x i32> %363 to <4 x float>, !dbg !46
  %365 = fadd <4 x float> %359, %364, !dbg !84
  %366 = fcmp olt <4 x float> %365, zeroinitializer, !dbg !85
  %367 = select <4 x i1> %366, <4 x float> zeroinitializer, <4 x float> %365, !dbg !89
  %368 = insertelement <4 x float> poison, float %278, i64 0, !dbg !90
  %369 = insertelement <4 x float> %368, float %279, i64 1, !dbg !90
  %370 = insertelement <4 x float> %369, float %280, i64 2, !dbg !90
  %371 = insertelement <4 x float> %370, float %281, i64 3, !dbg !90
  %372 = fmul <4 x float> %241, %371, !dbg !90
  %373 = insertelement <4 x i32> poison, i32 %284, i64 0, !dbg !67
  %374 = insertelement <4 x i32> %373, i32 %285, i64 1, !dbg !67
  %375 = insertelement <4 x i32> %374, i32 %286, i64 2, !dbg !67
  %376 = insertelement <4 x i32> %375, i32 %287, i64 3, !dbg !67
  %377 = bitcast <4 x i32> %376 to <4 x float>, !dbg !67
  %378 = fmul <4 x float> %372, %377, !dbg !91
  %379 = insertelement <4 x i32> poison, i32 %290, i64 0, !dbg !69
  %380 = insertelement <4 x i32> %379, i32 %291, i64 1, !dbg !69
  %381 = insertelement <4 x i32> %380, i32 %292, i64 2, !dbg !69
  %382 = insertelement <4 x i32> %381, i32 %293, i64 3, !dbg !69
  %383 = bitcast <4 x i32> %382 to <4 x float>, !dbg !69
  %384 = fadd <4 x float> %378, %383, !dbg !92
  %385 = fcmp olt <4 x float> %384, zeroinitializer, !dbg !93
  %386 = select <4 x i1> %385, <4 x float> zeroinitializer, <4 x float> %384, !dbg !95
  %387 = insertelement <4 x i1> poison, i1 %67, i64 0, !dbg !96
  %388 = shufflevector <4 x i1> %387, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !96
  %389 = select <4 x i1> %388, <4 x float> %367, <4 x float> %386, !dbg !96
  %390 = fadd <4 x float> %66, %389, !dbg !97
  %391 = fcmp olt <4 x float> %390, zeroinitializer, !dbg !98
  %392 = select <4 x i1> %391, <4 x float> zeroinitializer, <4 x float> %390, !dbg !100
  %393 = fcmp ole <4 x float> %392, zeroinitializer, !dbg !101
  %394 = extractelement <4 x float> %392, i64 0, !dbg !77
  %395 = bitcast float %394 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %395, i1 true) #4, !dbg !77
  %396 = extractelement <4 x float> %392, i64 1, !dbg !77
  %397 = bitcast float %396 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %397, i1 true) #4, !dbg !77
  %398 = extractelement <4 x float> %392, i64 2, !dbg !77
  %399 = bitcast float %398 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %399, i1 true) #4, !dbg !77
  %400 = extractelement <4 x float> %392, i64 3, !dbg !77
  %401 = bitcast float %400 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %401, i1 true) #4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %402 = load i32, ptr addrspace(3) %333, align 4, !dbg !77
  %403 = load i32, ptr addrspace(3) %335, align 4, !dbg !77
  %404 = load i32, ptr addrspace(3) %339, align 4, !dbg !77
  %405 = load i32, ptr addrspace(3) %343, align 4, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %402, i32 %403, ptr addrspace(1) %308, i1 %45) #4, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %404, i32 %405, ptr addrspace(1) %310, i1 %46) #4, !dbg !77
  %406 = zext <4 x i1> %393 to <4 x i8>, !dbg !102
  %407 = bitcast <4 x i8> %406 to i32, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %407, ptr addrspace(1) %348, i1 %269) #4, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3n5bdhyjvvhgnljbm753cgh52zhplljenxmbbyykjixhdc2cc2a.py", directory: "inductor_cache/3n")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_24", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 37, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 54, scope: !7)
!26 = !DILocation(line: 34, column: 46, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 33, scope: !7)
!29 = !DILocation(line: 40, column: 43, scope: !7)
!30 = !DILocation(line: 40, column: 38, scope: !7)
!31 = !DILocation(line: 40, column: 49, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 62, scope: !7)
!34 = !DILocation(line: 40, column: 70, scope: !7)
!35 = !DILocation(line: 40, column: 55, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 70, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 70, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 71, scope: !7)
!45 = !DILocation(line: 54, column: 31, scope: !7)
!46 = !DILocation(line: 54, column: 71, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 58, scope: !7)
!49 = !DILocation(line: 63, column: 50, scope: !7)
!50 = !DILocation(line: 63, column: 31, scope: !7)
!51 = !DILocation(line: 63, column: 72, scope: !7)
!52 = !DILocation(line: 63, column: 80, scope: !7)
!53 = !DILocation(line: 63, column: 64, scope: !7)
!54 = !DILocation(line: 64, column: 31, scope: !7)
!55 = !DILocation(line: 64, column: 79, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 66, column: 79, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 69, column: 27, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 42, column: 18, scope: !7)
!62 = !DILocation(line: 33, column: 21, scope: !7)
!63 = !DILocation(line: 33, column: 27, scope: !7)
!64 = !DILocation(line: 32, column: 19, scope: !7)
!65 = !DILocation(line: 71, column: 20, scope: !7)
!66 = !DILocation(line: 75, column: 31, scope: !7)
!67 = !DILocation(line: 75, column: 79, scope: !7)
!68 = !DILocation(line: 77, column: 31, scope: !7)
!69 = !DILocation(line: 77, column: 79, scope: !7)
!70 = !DILocation(line: 89, column: 34, scope: !7)
!71 = !DILocation(line: 89, column: 43, scope: !7)
!72 = !DILocation(line: 89, column: 54, scope: !7)
!73 = !DILocation(line: 89, column: 30, scope: !7)
!74 = !DILocation(line: 89, column: 39, scope: !7)
!75 = !DILocation(line: 89, column: 48, scope: !7)
!76 = !DILocation(line: 89, column: 25, scope: !7)
!77 = !DILocation(line: 89, column: 66, scope: !7)
!78 = !DILocation(line: 90, column: 33, scope: !7)
!79 = !DILocation(line: 90, column: 30, scope: !7)
!80 = !DILocation(line: 90, column: 38, scope: !7)
!81 = !DILocation(line: 90, column: 25, scope: !7)
!82 = !DILocation(line: 51, column: 19, scope: !7)
!83 = !DILocation(line: 53, column: 20, scope: !7)
!84 = !DILocation(line: 55, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 57, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!90 = !DILocation(line: 74, column: 20, scope: !7)
!91 = !DILocation(line: 76, column: 20, scope: !7)
!92 = !DILocation(line: 78, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !94)
!94 = !DILocation(line: 80, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !94)
!96 = !DILocation(line: 0, scope: !7)
!97 = !DILocation(line: 84, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !99)
!99 = !DILocation(line: 86, column: 42, scope: !7)
!100 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !99)
!101 = !DILocation(line: 88, column: 21, scope: !7)
!102 = !DILocation(line: 90, column: 56, scope: !7)
!103 = !DILocation(line: 90, column: 4, scope: !7)
