; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_44(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %15, 512, !dbg !13
  %20 = or disjoint i32 %15, 640, !dbg !13
  %21 = or disjoint i32 %15, 768, !dbg !13
  %22 = or disjoint i32 %15, 896, !dbg !13
  %23 = or disjoint i32 %7, %14, !dbg !13
  %24 = or disjoint i32 %23, 512, !dbg !13
  %25 = icmp slt i32 %15, 784, !dbg !14
  %26 = icmp slt i32 %16, 784, !dbg !14
  %27 = icmp slt i32 %17, 784, !dbg !14
  %28 = icmp slt i32 %18, 784, !dbg !14
  %29 = icmp slt i32 %19, 784, !dbg !14
  %30 = icmp slt i32 %20, 784, !dbg !14
  %31 = icmp slt i32 %21, 784, !dbg !14
  %32 = icmp slt i32 %7, 0, !dbg !14
  %33 = icmp slt i32 %23, 784, !dbg !14
  %34 = icmp slt i32 %24, 784, !dbg !14
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %36 = icmp slt i32 %35, 1088, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %37 = sdiv i32 %.frozen, 14, !dbg !17
  %38 = mul i32 %37, 14, !dbg !18
  %.decomposed = sub i32 %.frozen, %38, !dbg !18
  %.frozen15 = freeze i32 %16, !dbg !17
  %39 = sdiv i32 %.frozen15, 14, !dbg !17
  %40 = mul i32 %39, 14, !dbg !18
  %.decomposed16 = sub i32 %.frozen15, %40, !dbg !18
  %.frozen17 = freeze i32 %17, !dbg !17
  %41 = sdiv i32 %.frozen17, 14, !dbg !17
  %42 = mul i32 %41, 14, !dbg !18
  %.decomposed18 = sub i32 %.frozen17, %42, !dbg !18
  %.frozen19 = freeze i32 %18, !dbg !17
  %43 = sdiv i32 %.frozen19, 14, !dbg !17
  %44 = mul i32 %43, 14, !dbg !18
  %.decomposed20 = sub i32 %.frozen19, %44, !dbg !18
  %45 = sdiv i32 %19, 14, !dbg !17
  %46 = sdiv i32 %20, 14, !dbg !17
  %47 = sdiv i32 %21, 14, !dbg !17
  %48 = sdiv i32 %22, 14, !dbg !17
  %49 = srem i32 %37, 14, !dbg !19
  %50 = srem i32 %39, 14, !dbg !19
  %51 = srem i32 %41, 14, !dbg !19
  %52 = srem i32 %43, 14, !dbg !19
  %53 = sdiv i32 %15, 196, !dbg !20
  %54 = sdiv i32 %16, 196, !dbg !20
  %55 = sdiv i32 %17, 196, !dbg !20
  %56 = sdiv i32 %18, 196, !dbg !20
  %57 = sdiv i32 %19, 196, !dbg !20
  %58 = sdiv i32 %20, 196, !dbg !20
  %59 = sdiv i32 %21, 196, !dbg !20
  %60 = sdiv i32 %22, 196, !dbg !20
  %.frozen21 = freeze i32 %23, !dbg !20
  %61 = sdiv i32 %.frozen21, 196, !dbg !20
  %.frozen23 = freeze i32 %24, !dbg !20
  %62 = sdiv i32 %.frozen23, 196, !dbg !20
  %63 = mul i32 %61, 196, !dbg !21
  %.decomposed22 = sub i32 %.frozen21, %63, !dbg !21
  %64 = mul i32 %62, 196, !dbg !21
  %.decomposed24 = sub i32 %.frozen23, %64, !dbg !21
  %65 = mul nsw i32 %.decomposed, 2176, !dbg !22
  %66 = mul nsw i32 %.decomposed16, 2176, !dbg !22
  %67 = mul nsw i32 %.decomposed18, 2176, !dbg !22
  %68 = mul nsw i32 %.decomposed20, 2176, !dbg !22
  %69 = mul nsw i32 %49, 65280, !dbg !23
  %70 = mul nsw i32 %50, 65280, !dbg !23
  %71 = mul nsw i32 %51, 65280, !dbg !23
  %72 = mul nsw i32 %52, 65280, !dbg !23
  %73 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !18
  %74 = insertelement <2 x i32> %73, i32 %45, i64 1, !dbg !18
  %75 = srem <2 x i32> %74, splat (i32 14), !dbg !18
  %76 = mul nsw <2 x i32> %75, <i32 2176, i32 65280>, !dbg !22
  %77 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !18
  %78 = insertelement <2 x i32> %77, i32 %46, i64 1, !dbg !18
  %79 = srem <2 x i32> %78, splat (i32 14), !dbg !18
  %80 = mul nsw <2 x i32> %79, <i32 2176, i32 65280>, !dbg !22
  %81 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %82 = insertelement <2 x i32> %81, i32 %47, i64 1, !dbg !18
  %83 = srem <2 x i32> %82, splat (i32 14), !dbg !18
  %84 = mul nsw <2 x i32> %83, <i32 2176, i32 65280>, !dbg !22
  %85 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %86 = insertelement <2 x i32> %85, i32 %48, i64 1, !dbg !18
  %87 = srem <2 x i32> %86, splat (i32 14), !dbg !18
  %88 = mul nsw <2 x i32> %87, <i32 2176, i32 65280>, !dbg !22
  %89 = mul i32 %53, 979200, !dbg !24
  %90 = mul i32 %54, 979200, !dbg !24
  %91 = mul i32 %55, 979200, !dbg !24
  %92 = mul i32 %56, 979200, !dbg !24
  %93 = mul i32 %57, 979200, !dbg !24
  %94 = mul i32 %58, 979200, !dbg !24
  %95 = mul i32 %59, 979200, !dbg !24
  %96 = mul i32 %60, 979200, !dbg !24
  %97 = add i32 %89, %65, !dbg !25
  %98 = add i32 %97, %35, !dbg !26
  %99 = add i32 %98, %69, !dbg !27
  %100 = add i32 %90, %66, !dbg !25
  %101 = add i32 %100, %35, !dbg !26
  %102 = add i32 %101, %70, !dbg !27
  %103 = add i32 %91, %67, !dbg !25
  %104 = add i32 %103, %35, !dbg !26
  %105 = add i32 %104, %71, !dbg !27
  %106 = add i32 %92, %68, !dbg !25
  %107 = add i32 %106, %35, !dbg !26
  %108 = add i32 %107, %72, !dbg !27
  %109 = extractelement <2 x i32> %76, i64 0, !dbg !25
  %110 = add i32 %93, %109, !dbg !25
  %111 = extractelement <2 x i32> %76, i64 1, !dbg !26
  %112 = add i32 %110, %111, !dbg !26
  %113 = add i32 %112, %35, !dbg !27
  %114 = extractelement <2 x i32> %80, i64 0, !dbg !25
  %115 = add i32 %94, %114, !dbg !25
  %116 = extractelement <2 x i32> %80, i64 1, !dbg !26
  %117 = add i32 %115, %116, !dbg !26
  %118 = add i32 %117, %35, !dbg !27
  %119 = extractelement <2 x i32> %84, i64 0, !dbg !25
  %120 = add i32 %95, %119, !dbg !25
  %121 = extractelement <2 x i32> %84, i64 1, !dbg !26
  %122 = add i32 %120, %121, !dbg !26
  %123 = add i32 %122, %35, !dbg !27
  %124 = extractelement <2 x i32> %88, i64 0, !dbg !25
  %125 = add i32 %96, %124, !dbg !25
  %126 = extractelement <2 x i32> %88, i64 1, !dbg !26
  %127 = add i32 %125, %126, !dbg !26
  %128 = add i32 %127, %35, !dbg !27
  %129 = sext i32 %99 to i64, !dbg !28
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !28
  %131 = sext i32 %102 to i64, !dbg !28
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !28
  %133 = sext i32 %105 to i64, !dbg !28
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !28
  %135 = sext i32 %108 to i64, !dbg !28
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !28
  %137 = sext i32 %113 to i64, !dbg !28
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !28
  %139 = sext i32 %118 to i64, !dbg !28
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !28
  %141 = sext i32 %123 to i64, !dbg !28
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !28
  %143 = sext i32 %128 to i64, !dbg !28
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !28
  %145 = and i1 %36, %25, !dbg !29
  %146 = and i1 %36, %26, !dbg !29
  %147 = and i1 %36, %27, !dbg !29
  %148 = and i1 %36, %28, !dbg !29
  %149 = and i1 %29, %36, !dbg !29
  %150 = and i1 %30, %36, !dbg !29
  %151 = and i1 %31, %36, !dbg !29
  %152 = and i1 %32, %36, !dbg !29
  %153 = and i1 %36, %33, !dbg !29
  %154 = and i1 %34, %36, !dbg !29
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %145) #2, !dbg !30
  %156 = bitcast i32 %155 to float, !dbg !30
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %146) #2, !dbg !30
  %158 = bitcast i32 %157 to float, !dbg !30
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %147) #2, !dbg !30
  %160 = bitcast i32 %159 to float, !dbg !30
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %148) #2, !dbg !30
  %162 = bitcast i32 %161 to float, !dbg !30
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %149) #2, !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %150) #2, !dbg !30
  %166 = bitcast i32 %165 to float, !dbg !30
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %151) #2, !dbg !30
  %168 = bitcast i32 %167 to float, !dbg !30
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %152) #2, !dbg !30
  %170 = bitcast i32 %169 to float, !dbg !30
  %171 = add i32 %35, 1088, !dbg !31
  %172 = add i32 %97, %171, !dbg !32
  %173 = add i32 %172, %69, !dbg !33
  %174 = add i32 %100, %171, !dbg !32
  %175 = add i32 %174, %70, !dbg !33
  %176 = add i32 %103, %171, !dbg !32
  %177 = add i32 %176, %71, !dbg !33
  %178 = add i32 %106, %171, !dbg !32
  %179 = add i32 %178, %72, !dbg !33
  %180 = add i32 %112, %171, !dbg !33
  %181 = add i32 %117, %171, !dbg !33
  %182 = add i32 %122, %171, !dbg !33
  %183 = add i32 %127, %171, !dbg !33
  %184 = sext i32 %173 to i64, !dbg !34
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !34
  %186 = sext i32 %175 to i64, !dbg !34
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !34
  %188 = sext i32 %177 to i64, !dbg !34
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !34
  %190 = sext i32 %179 to i64, !dbg !34
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !34
  %192 = sext i32 %180 to i64, !dbg !34
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !34
  %194 = sext i32 %181 to i64, !dbg !34
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !34
  %196 = sext i32 %182 to i64, !dbg !34
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !34
  %198 = sext i32 %183 to i64, !dbg !34
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !34
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %145) #2, !dbg !35
  %201 = bitcast i32 %200 to float, !dbg !35
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %146) #2, !dbg !35
  %203 = bitcast i32 %202 to float, !dbg !35
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %147) #2, !dbg !35
  %205 = bitcast i32 %204 to float, !dbg !35
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %148) #2, !dbg !35
  %207 = bitcast i32 %206 to float, !dbg !35
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %149) #2, !dbg !35
  %209 = bitcast i32 %208 to float, !dbg !35
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %150) #2, !dbg !35
  %211 = bitcast i32 %210 to float, !dbg !35
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %151) #2, !dbg !35
  %213 = bitcast i32 %212 to float, !dbg !35
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %152) #2, !dbg !35
  %215 = bitcast i32 %214 to float, !dbg !35
  %216 = add i32 %35, 2176, !dbg !36
  %217 = add i32 %97, %216, !dbg !37
  %218 = add i32 %217, %69, !dbg !38
  %219 = add i32 %100, %216, !dbg !37
  %220 = add i32 %219, %70, !dbg !38
  %221 = add i32 %103, %216, !dbg !37
  %222 = add i32 %221, %71, !dbg !38
  %223 = add i32 %106, %216, !dbg !37
  %224 = add i32 %223, %72, !dbg !38
  %225 = add i32 %112, %216, !dbg !38
  %226 = add i32 %117, %216, !dbg !38
  %227 = add i32 %122, %216, !dbg !38
  %228 = add i32 %127, %216, !dbg !38
  %229 = sext i32 %218 to i64, !dbg !39
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !39
  %231 = sext i32 %220 to i64, !dbg !39
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !39
  %233 = sext i32 %222 to i64, !dbg !39
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !39
  %235 = sext i32 %224 to i64, !dbg !39
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !39
  %237 = sext i32 %225 to i64, !dbg !39
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !39
  %239 = sext i32 %226 to i64, !dbg !39
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !39
  %241 = sext i32 %227 to i64, !dbg !39
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !39
  %243 = sext i32 %228 to i64, !dbg !39
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !39
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %145) #2, !dbg !40
  %246 = bitcast i32 %245 to float, !dbg !40
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %146) #2, !dbg !40
  %248 = bitcast i32 %247 to float, !dbg !40
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %147) #2, !dbg !40
  %250 = bitcast i32 %249 to float, !dbg !40
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %148) #2, !dbg !40
  %252 = bitcast i32 %251 to float, !dbg !40
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %149) #2, !dbg !40
  %254 = bitcast i32 %253 to float, !dbg !40
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %150) #2, !dbg !40
  %256 = bitcast i32 %255 to float, !dbg !40
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %151) #2, !dbg !40
  %258 = bitcast i32 %257 to float, !dbg !40
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %152) #2, !dbg !40
  %260 = bitcast i32 %259 to float, !dbg !40
  %261 = add i32 %35, 32640, !dbg !41
  %262 = add i32 %97, %261, !dbg !42
  %263 = add i32 %262, %69, !dbg !43
  %264 = add i32 %100, %261, !dbg !42
  %265 = add i32 %264, %70, !dbg !43
  %266 = add i32 %103, %261, !dbg !42
  %267 = add i32 %266, %71, !dbg !43
  %268 = add i32 %106, %261, !dbg !42
  %269 = add i32 %268, %72, !dbg !43
  %270 = add i32 %112, %261, !dbg !43
  %271 = add i32 %117, %261, !dbg !43
  %272 = add i32 %122, %261, !dbg !43
  %273 = add i32 %127, %261, !dbg !43
  %274 = sext i32 %263 to i64, !dbg !44
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !44
  %276 = sext i32 %265 to i64, !dbg !44
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !44
  %278 = sext i32 %267 to i64, !dbg !44
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !44
  %280 = sext i32 %269 to i64, !dbg !44
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !44
  %282 = sext i32 %270 to i64, !dbg !44
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !44
  %284 = sext i32 %271 to i64, !dbg !44
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !44
  %286 = sext i32 %272 to i64, !dbg !44
  %287 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !44
  %288 = sext i32 %273 to i64, !dbg !44
  %289 = getelementptr float, ptr addrspace(1) %0, i64 %288, !dbg !44
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %145) #2, !dbg !45
  %291 = bitcast i32 %290 to float, !dbg !45
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %146) #2, !dbg !45
  %293 = bitcast i32 %292 to float, !dbg !45
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 %147) #2, !dbg !45
  %295 = bitcast i32 %294 to float, !dbg !45
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 %148) #2, !dbg !45
  %297 = bitcast i32 %296 to float, !dbg !45
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 %149) #2, !dbg !45
  %299 = bitcast i32 %298 to float, !dbg !45
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 %150) #2, !dbg !45
  %301 = bitcast i32 %300 to float, !dbg !45
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 %151) #2, !dbg !45
  %303 = bitcast i32 %302 to float, !dbg !45
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 %152) #2, !dbg !45
  %305 = bitcast i32 %304 to float, !dbg !45
  %306 = add i32 %35, 33728, !dbg !46
  %307 = add i32 %97, %306, !dbg !47
  %308 = add i32 %307, %69, !dbg !48
  %309 = add i32 %100, %306, !dbg !47
  %310 = add i32 %309, %70, !dbg !48
  %311 = add i32 %103, %306, !dbg !47
  %312 = add i32 %311, %71, !dbg !48
  %313 = add i32 %106, %306, !dbg !47
  %314 = add i32 %313, %72, !dbg !48
  %315 = add i32 %112, %306, !dbg !48
  %316 = add i32 %117, %306, !dbg !48
  %317 = add i32 %122, %306, !dbg !48
  %318 = add i32 %127, %306, !dbg !48
  %319 = sext i32 %308 to i64, !dbg !49
  %320 = getelementptr float, ptr addrspace(1) %0, i64 %319, !dbg !49
  %321 = sext i32 %310 to i64, !dbg !49
  %322 = getelementptr float, ptr addrspace(1) %0, i64 %321, !dbg !49
  %323 = sext i32 %312 to i64, !dbg !49
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !49
  %325 = sext i32 %314 to i64, !dbg !49
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !49
  %327 = sext i32 %315 to i64, !dbg !49
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !49
  %329 = sext i32 %316 to i64, !dbg !49
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !49
  %331 = sext i32 %317 to i64, !dbg !49
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !49
  %333 = sext i32 %318 to i64, !dbg !49
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !49
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %320, i1 %145) #2, !dbg !50
  %336 = bitcast i32 %335 to float, !dbg !50
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 %146) #2, !dbg !50
  %338 = bitcast i32 %337 to float, !dbg !50
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 %147) #2, !dbg !50
  %340 = bitcast i32 %339 to float, !dbg !50
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 %148) #2, !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 %149) #2, !dbg !50
  %344 = bitcast i32 %343 to float, !dbg !50
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 %150) #2, !dbg !50
  %346 = bitcast i32 %345 to float, !dbg !50
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %151) #2, !dbg !50
  %348 = bitcast i32 %347 to float, !dbg !50
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %152) #2, !dbg !50
  %350 = bitcast i32 %349 to float, !dbg !50
  %351 = add i32 %35, 34816, !dbg !51
  %352 = add i32 %97, %351, !dbg !52
  %353 = add i32 %352, %69, !dbg !53
  %354 = add i32 %100, %351, !dbg !52
  %355 = add i32 %354, %70, !dbg !53
  %356 = add i32 %103, %351, !dbg !52
  %357 = add i32 %356, %71, !dbg !53
  %358 = add i32 %106, %351, !dbg !52
  %359 = add i32 %358, %72, !dbg !53
  %360 = add i32 %112, %351, !dbg !53
  %361 = add i32 %117, %351, !dbg !53
  %362 = add i32 %122, %351, !dbg !53
  %363 = add i32 %127, %351, !dbg !53
  %364 = sext i32 %353 to i64, !dbg !54
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !54
  %366 = sext i32 %355 to i64, !dbg !54
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !54
  %368 = sext i32 %357 to i64, !dbg !54
  %369 = getelementptr float, ptr addrspace(1) %0, i64 %368, !dbg !54
  %370 = sext i32 %359 to i64, !dbg !54
  %371 = getelementptr float, ptr addrspace(1) %0, i64 %370, !dbg !54
  %372 = sext i32 %360 to i64, !dbg !54
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !54
  %374 = sext i32 %361 to i64, !dbg !54
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !54
  %376 = sext i32 %362 to i64, !dbg !54
  %377 = getelementptr float, ptr addrspace(1) %0, i64 %376, !dbg !54
  %378 = sext i32 %363 to i64, !dbg !54
  %379 = getelementptr float, ptr addrspace(1) %0, i64 %378, !dbg !54
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %145) #2, !dbg !55
  %381 = bitcast i32 %380 to float, !dbg !55
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %146) #2, !dbg !55
  %383 = bitcast i32 %382 to float, !dbg !55
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 %147) #2, !dbg !55
  %385 = bitcast i32 %384 to float, !dbg !55
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %371, i1 %148) #2, !dbg !55
  %387 = bitcast i32 %386 to float, !dbg !55
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %373, i1 %149) #2, !dbg !55
  %389 = bitcast i32 %388 to float, !dbg !55
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 %150) #2, !dbg !55
  %391 = bitcast i32 %390 to float, !dbg !55
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 %151) #2, !dbg !55
  %393 = bitcast i32 %392 to float, !dbg !55
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %379, i1 %152) #2, !dbg !55
  %395 = bitcast i32 %394 to float, !dbg !55
  %396 = add i32 %35, 65280, !dbg !56
  %397 = add i32 %97, %396, !dbg !57
  %398 = add i32 %397, %69, !dbg !58
  %399 = add i32 %100, %396, !dbg !57
  %400 = add i32 %399, %70, !dbg !58
  %401 = add i32 %103, %396, !dbg !57
  %402 = add i32 %401, %71, !dbg !58
  %403 = add i32 %106, %396, !dbg !57
  %404 = add i32 %403, %72, !dbg !58
  %405 = add i32 %112, %396, !dbg !58
  %406 = add i32 %117, %396, !dbg !58
  %407 = add i32 %122, %396, !dbg !58
  %408 = add i32 %127, %396, !dbg !58
  %409 = sext i32 %398 to i64, !dbg !59
  %410 = getelementptr float, ptr addrspace(1) %0, i64 %409, !dbg !59
  %411 = sext i32 %400 to i64, !dbg !59
  %412 = getelementptr float, ptr addrspace(1) %0, i64 %411, !dbg !59
  %413 = sext i32 %402 to i64, !dbg !59
  %414 = getelementptr float, ptr addrspace(1) %0, i64 %413, !dbg !59
  %415 = sext i32 %404 to i64, !dbg !59
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !59
  %417 = sext i32 %405 to i64, !dbg !59
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !59
  %419 = sext i32 %406 to i64, !dbg !59
  %420 = getelementptr float, ptr addrspace(1) %0, i64 %419, !dbg !59
  %421 = sext i32 %407 to i64, !dbg !59
  %422 = getelementptr float, ptr addrspace(1) %0, i64 %421, !dbg !59
  %423 = sext i32 %408 to i64, !dbg !59
  %424 = getelementptr float, ptr addrspace(1) %0, i64 %423, !dbg !59
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %410, i1 %145) #2, !dbg !60
  %426 = bitcast i32 %425 to float, !dbg !60
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %412, i1 %146) #2, !dbg !60
  %428 = bitcast i32 %427 to float, !dbg !60
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %414, i1 %147) #2, !dbg !60
  %430 = bitcast i32 %429 to float, !dbg !60
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %416, i1 %148) #2, !dbg !60
  %432 = bitcast i32 %431 to float, !dbg !60
  %433 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %418, i1 %149) #2, !dbg !60
  %434 = bitcast i32 %433 to float, !dbg !60
  %435 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %420, i1 %150) #2, !dbg !60
  %436 = bitcast i32 %435 to float, !dbg !60
  %437 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %422, i1 %151) #2, !dbg !60
  %438 = bitcast i32 %437 to float, !dbg !60
  %439 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %152) #2, !dbg !60
  %440 = bitcast i32 %439 to float, !dbg !60
  %441 = add i32 %35, 66368, !dbg !61
  %442 = add i32 %97, %441, !dbg !62
  %443 = add i32 %442, %69, !dbg !63
  %444 = add i32 %100, %441, !dbg !62
  %445 = add i32 %444, %70, !dbg !63
  %446 = add i32 %103, %441, !dbg !62
  %447 = add i32 %446, %71, !dbg !63
  %448 = add i32 %106, %441, !dbg !62
  %449 = add i32 %448, %72, !dbg !63
  %450 = add i32 %112, %441, !dbg !63
  %451 = add i32 %117, %441, !dbg !63
  %452 = add i32 %122, %441, !dbg !63
  %453 = add i32 %127, %441, !dbg !63
  %454 = sext i32 %443 to i64, !dbg !64
  %455 = getelementptr float, ptr addrspace(1) %0, i64 %454, !dbg !64
  %456 = sext i32 %445 to i64, !dbg !64
  %457 = getelementptr float, ptr addrspace(1) %0, i64 %456, !dbg !64
  %458 = sext i32 %447 to i64, !dbg !64
  %459 = getelementptr float, ptr addrspace(1) %0, i64 %458, !dbg !64
  %460 = sext i32 %449 to i64, !dbg !64
  %461 = getelementptr float, ptr addrspace(1) %0, i64 %460, !dbg !64
  %462 = sext i32 %450 to i64, !dbg !64
  %463 = getelementptr float, ptr addrspace(1) %0, i64 %462, !dbg !64
  %464 = sext i32 %451 to i64, !dbg !64
  %465 = getelementptr float, ptr addrspace(1) %0, i64 %464, !dbg !64
  %466 = sext i32 %452 to i64, !dbg !64
  %467 = getelementptr float, ptr addrspace(1) %0, i64 %466, !dbg !64
  %468 = sext i32 %453 to i64, !dbg !64
  %469 = getelementptr float, ptr addrspace(1) %0, i64 %468, !dbg !64
  %470 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %455, i1 %145) #2, !dbg !65
  %471 = bitcast i32 %470 to float, !dbg !65
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %457, i1 %146) #2, !dbg !65
  %473 = bitcast i32 %472 to float, !dbg !65
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %459, i1 %147) #2, !dbg !65
  %475 = bitcast i32 %474 to float, !dbg !65
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %461, i1 %148) #2, !dbg !65
  %477 = bitcast i32 %476 to float, !dbg !65
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %463, i1 %149) #2, !dbg !65
  %479 = bitcast i32 %478 to float, !dbg !65
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %465, i1 %150) #2, !dbg !65
  %481 = bitcast i32 %480 to float, !dbg !65
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %467, i1 %151) #2, !dbg !65
  %483 = bitcast i32 %482 to float, !dbg !65
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %469, i1 %152) #2, !dbg !65
  %485 = bitcast i32 %484 to float, !dbg !65
  %486 = add i32 %35, 67456, !dbg !66
  %487 = add i32 %97, %486, !dbg !67
  %488 = add i32 %487, %69, !dbg !68
  %489 = add i32 %100, %486, !dbg !67
  %490 = add i32 %489, %70, !dbg !68
  %491 = add i32 %103, %486, !dbg !67
  %492 = add i32 %491, %71, !dbg !68
  %493 = add i32 %106, %486, !dbg !67
  %494 = add i32 %493, %72, !dbg !68
  %495 = add i32 %112, %486, !dbg !68
  %496 = add i32 %117, %486, !dbg !68
  %497 = add i32 %122, %486, !dbg !68
  %498 = add i32 %127, %486, !dbg !68
  %499 = sext i32 %488 to i64, !dbg !69
  %500 = getelementptr float, ptr addrspace(1) %0, i64 %499, !dbg !69
  %501 = sext i32 %490 to i64, !dbg !69
  %502 = getelementptr float, ptr addrspace(1) %0, i64 %501, !dbg !69
  %503 = sext i32 %492 to i64, !dbg !69
  %504 = getelementptr float, ptr addrspace(1) %0, i64 %503, !dbg !69
  %505 = sext i32 %494 to i64, !dbg !69
  %506 = getelementptr float, ptr addrspace(1) %0, i64 %505, !dbg !69
  %507 = sext i32 %495 to i64, !dbg !69
  %508 = getelementptr float, ptr addrspace(1) %0, i64 %507, !dbg !69
  %509 = sext i32 %496 to i64, !dbg !69
  %510 = getelementptr float, ptr addrspace(1) %0, i64 %509, !dbg !69
  %511 = sext i32 %497 to i64, !dbg !69
  %512 = getelementptr float, ptr addrspace(1) %0, i64 %511, !dbg !69
  %513 = sext i32 %498 to i64, !dbg !69
  %514 = getelementptr float, ptr addrspace(1) %0, i64 %513, !dbg !69
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %500, i1 %145) #2, !dbg !70
  %516 = bitcast i32 %515 to float, !dbg !70
  %517 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %502, i1 %146) #2, !dbg !70
  %518 = bitcast i32 %517 to float, !dbg !70
  %519 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %504, i1 %147) #2, !dbg !70
  %520 = bitcast i32 %519 to float, !dbg !70
  %521 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %506, i1 %148) #2, !dbg !70
  %522 = bitcast i32 %521 to float, !dbg !70
  %523 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %508, i1 %149) #2, !dbg !70
  %524 = bitcast i32 %523 to float, !dbg !70
  %525 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %510, i1 %150) #2, !dbg !70
  %526 = bitcast i32 %525 to float, !dbg !70
  %527 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %512, i1 %151) #2, !dbg !70
  %528 = bitcast i32 %527 to float, !dbg !70
  %529 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %514, i1 %152) #2, !dbg !70
  %530 = bitcast i32 %529 to float, !dbg !70
  %531 = fcmp ogt float %201, %156, !dbg !71
  %532 = fcmp ogt float %203, %158, !dbg !71
  %533 = fcmp ogt float %205, %160, !dbg !71
  %534 = fcmp ogt float %207, %162, !dbg !71
  %535 = fcmp ogt float %209, %164, !dbg !71
  %536 = fcmp ogt float %211, %166, !dbg !71
  %537 = fcmp ogt float %213, %168, !dbg !71
  %538 = fcmp ogt float %215, %170, !dbg !71
  %539 = fcmp uno float %201, 0.000000e+00, !dbg !75
  %540 = fcmp uno float %203, 0.000000e+00, !dbg !75
  %541 = fcmp uno float %205, 0.000000e+00, !dbg !75
  %542 = fcmp uno float %207, 0.000000e+00, !dbg !75
  %543 = fcmp uno float %209, 0.000000e+00, !dbg !75
  %544 = fcmp uno float %211, 0.000000e+00, !dbg !75
  %545 = fcmp uno float %213, 0.000000e+00, !dbg !75
  %546 = fcmp uno float %215, 0.000000e+00, !dbg !75
  %547 = or i1 %531, %539, !dbg !76
  %548 = or i1 %532, %540, !dbg !76
  %549 = or i1 %533, %541, !dbg !76
  %550 = or i1 %534, %542, !dbg !76
  %551 = or i1 %535, %543, !dbg !76
  %552 = or i1 %536, %544, !dbg !76
  %553 = or i1 %537, %545, !dbg !76
  %554 = or i1 %538, %546, !dbg !76
  %555 = select i1 %547, float %201, float %156, !dbg !77
  %556 = select i1 %548, float %203, float %158, !dbg !77
  %557 = select i1 %549, float %205, float %160, !dbg !77
  %558 = select i1 %550, float %207, float %162, !dbg !77
  %559 = select i1 %551, float %209, float %164, !dbg !77
  %560 = select i1 %552, float %211, float %166, !dbg !77
  %561 = select i1 %553, float %213, float %168, !dbg !77
  %562 = select i1 %554, float %215, float %170, !dbg !77
  %563 = fcmp olt float %555, %246, !dbg !78
  %564 = fcmp olt float %556, %248, !dbg !78
  %565 = fcmp olt float %557, %250, !dbg !78
  %566 = fcmp olt float %558, %252, !dbg !78
  %567 = fcmp olt float %559, %254, !dbg !78
  %568 = fcmp olt float %560, %256, !dbg !78
  %569 = fcmp olt float %561, %258, !dbg !78
  %570 = fcmp olt float %562, %260, !dbg !78
  %571 = fcmp uno float %246, 0.000000e+00, !dbg !80
  %572 = fcmp uno float %248, 0.000000e+00, !dbg !80
  %573 = fcmp uno float %250, 0.000000e+00, !dbg !80
  %574 = fcmp uno float %252, 0.000000e+00, !dbg !80
  %575 = fcmp uno float %254, 0.000000e+00, !dbg !80
  %576 = fcmp uno float %256, 0.000000e+00, !dbg !80
  %577 = fcmp uno float %258, 0.000000e+00, !dbg !80
  %578 = fcmp uno float %260, 0.000000e+00, !dbg !80
  %579 = or i1 %563, %571, !dbg !81
  %580 = or i1 %564, %572, !dbg !81
  %581 = or i1 %565, %573, !dbg !81
  %582 = or i1 %566, %574, !dbg !81
  %583 = or i1 %567, %575, !dbg !81
  %584 = or i1 %568, %576, !dbg !81
  %585 = or i1 %569, %577, !dbg !81
  %586 = or i1 %570, %578, !dbg !81
  %587 = select i1 %579, float %246, float %555, !dbg !82
  %588 = select i1 %580, float %248, float %556, !dbg !82
  %589 = select i1 %581, float %250, float %557, !dbg !82
  %590 = select i1 %582, float %252, float %558, !dbg !82
  %591 = select i1 %583, float %254, float %559, !dbg !82
  %592 = select i1 %584, float %256, float %560, !dbg !82
  %593 = select i1 %585, float %258, float %561, !dbg !82
  %594 = select i1 %586, float %260, float %562, !dbg !82
  %595 = fcmp olt float %587, %291, !dbg !83
  %596 = fcmp olt float %588, %293, !dbg !83
  %597 = fcmp olt float %589, %295, !dbg !83
  %598 = fcmp olt float %590, %297, !dbg !83
  %599 = fcmp olt float %591, %299, !dbg !83
  %600 = fcmp olt float %592, %301, !dbg !83
  %601 = fcmp olt float %593, %303, !dbg !83
  %602 = fcmp olt float %594, %305, !dbg !83
  %603 = fcmp uno float %291, 0.000000e+00, !dbg !85
  %604 = fcmp uno float %293, 0.000000e+00, !dbg !85
  %605 = fcmp uno float %295, 0.000000e+00, !dbg !85
  %606 = fcmp uno float %297, 0.000000e+00, !dbg !85
  %607 = fcmp uno float %299, 0.000000e+00, !dbg !85
  %608 = fcmp uno float %301, 0.000000e+00, !dbg !85
  %609 = fcmp uno float %303, 0.000000e+00, !dbg !85
  %610 = fcmp uno float %305, 0.000000e+00, !dbg !85
  %611 = or i1 %595, %603, !dbg !86
  %612 = or i1 %596, %604, !dbg !86
  %613 = or i1 %597, %605, !dbg !86
  %614 = or i1 %598, %606, !dbg !86
  %615 = or i1 %599, %607, !dbg !86
  %616 = or i1 %600, %608, !dbg !86
  %617 = or i1 %601, %609, !dbg !86
  %618 = or i1 %602, %610, !dbg !86
  %619 = select i1 %611, float %291, float %587, !dbg !87
  %620 = select i1 %612, float %293, float %588, !dbg !87
  %621 = select i1 %613, float %295, float %589, !dbg !87
  %622 = select i1 %614, float %297, float %590, !dbg !87
  %623 = select i1 %615, float %299, float %591, !dbg !87
  %624 = select i1 %616, float %301, float %592, !dbg !87
  %625 = select i1 %617, float %303, float %593, !dbg !87
  %626 = select i1 %618, float %305, float %594, !dbg !87
  %627 = fcmp olt float %619, %336, !dbg !88
  %628 = fcmp olt float %620, %338, !dbg !88
  %629 = fcmp olt float %621, %340, !dbg !88
  %630 = fcmp olt float %622, %342, !dbg !88
  %631 = fcmp olt float %623, %344, !dbg !88
  %632 = fcmp olt float %624, %346, !dbg !88
  %633 = fcmp olt float %625, %348, !dbg !88
  %634 = fcmp olt float %626, %350, !dbg !88
  %635 = fcmp uno float %336, 0.000000e+00, !dbg !90
  %636 = fcmp uno float %338, 0.000000e+00, !dbg !90
  %637 = fcmp uno float %340, 0.000000e+00, !dbg !90
  %638 = fcmp uno float %342, 0.000000e+00, !dbg !90
  %639 = fcmp uno float %344, 0.000000e+00, !dbg !90
  %640 = fcmp uno float %346, 0.000000e+00, !dbg !90
  %641 = fcmp uno float %348, 0.000000e+00, !dbg !90
  %642 = fcmp uno float %350, 0.000000e+00, !dbg !90
  %643 = or i1 %627, %635, !dbg !91
  %644 = or i1 %628, %636, !dbg !91
  %645 = or i1 %629, %637, !dbg !91
  %646 = or i1 %630, %638, !dbg !91
  %647 = or i1 %631, %639, !dbg !91
  %648 = or i1 %632, %640, !dbg !91
  %649 = or i1 %633, %641, !dbg !91
  %650 = or i1 %634, %642, !dbg !91
  %651 = select i1 %643, float %336, float %619, !dbg !92
  %652 = select i1 %644, float %338, float %620, !dbg !92
  %653 = select i1 %645, float %340, float %621, !dbg !92
  %654 = select i1 %646, float %342, float %622, !dbg !92
  %655 = select i1 %647, float %344, float %623, !dbg !92
  %656 = select i1 %648, float %346, float %624, !dbg !92
  %657 = select i1 %649, float %348, float %625, !dbg !92
  %658 = select i1 %650, float %350, float %626, !dbg !92
  %659 = fcmp olt float %651, %381, !dbg !93
  %660 = fcmp olt float %652, %383, !dbg !93
  %661 = fcmp olt float %653, %385, !dbg !93
  %662 = fcmp olt float %654, %387, !dbg !93
  %663 = fcmp olt float %655, %389, !dbg !93
  %664 = fcmp olt float %656, %391, !dbg !93
  %665 = fcmp olt float %657, %393, !dbg !93
  %666 = fcmp olt float %658, %395, !dbg !93
  %667 = fcmp uno float %381, 0.000000e+00, !dbg !95
  %668 = fcmp uno float %383, 0.000000e+00, !dbg !95
  %669 = fcmp uno float %385, 0.000000e+00, !dbg !95
  %670 = fcmp uno float %387, 0.000000e+00, !dbg !95
  %671 = fcmp uno float %389, 0.000000e+00, !dbg !95
  %672 = fcmp uno float %391, 0.000000e+00, !dbg !95
  %673 = fcmp uno float %393, 0.000000e+00, !dbg !95
  %674 = fcmp uno float %395, 0.000000e+00, !dbg !95
  %675 = or i1 %659, %667, !dbg !96
  %676 = or i1 %660, %668, !dbg !96
  %677 = or i1 %661, %669, !dbg !96
  %678 = or i1 %662, %670, !dbg !96
  %679 = or i1 %663, %671, !dbg !96
  %680 = or i1 %664, %672, !dbg !96
  %681 = or i1 %665, %673, !dbg !96
  %682 = or i1 %666, %674, !dbg !96
  %683 = select i1 %675, float %381, float %651, !dbg !97
  %684 = select i1 %676, float %383, float %652, !dbg !97
  %685 = select i1 %677, float %385, float %653, !dbg !97
  %686 = select i1 %678, float %387, float %654, !dbg !97
  %687 = select i1 %679, float %389, float %655, !dbg !97
  %688 = select i1 %680, float %391, float %656, !dbg !97
  %689 = select i1 %681, float %393, float %657, !dbg !97
  %690 = select i1 %682, float %395, float %658, !dbg !97
  %691 = fcmp olt float %683, %426, !dbg !98
  %692 = fcmp olt float %684, %428, !dbg !98
  %693 = fcmp olt float %685, %430, !dbg !98
  %694 = fcmp olt float %686, %432, !dbg !98
  %695 = fcmp olt float %687, %434, !dbg !98
  %696 = fcmp olt float %688, %436, !dbg !98
  %697 = fcmp olt float %689, %438, !dbg !98
  %698 = fcmp olt float %690, %440, !dbg !98
  %699 = fcmp uno float %426, 0.000000e+00, !dbg !100
  %700 = fcmp uno float %428, 0.000000e+00, !dbg !100
  %701 = fcmp uno float %430, 0.000000e+00, !dbg !100
  %702 = fcmp uno float %432, 0.000000e+00, !dbg !100
  %703 = fcmp uno float %434, 0.000000e+00, !dbg !100
  %704 = fcmp uno float %436, 0.000000e+00, !dbg !100
  %705 = fcmp uno float %438, 0.000000e+00, !dbg !100
  %706 = fcmp uno float %440, 0.000000e+00, !dbg !100
  %707 = or i1 %691, %699, !dbg !101
  %708 = or i1 %692, %700, !dbg !101
  %709 = or i1 %693, %701, !dbg !101
  %710 = or i1 %694, %702, !dbg !101
  %711 = or i1 %695, %703, !dbg !101
  %712 = or i1 %696, %704, !dbg !101
  %713 = or i1 %697, %705, !dbg !101
  %714 = or i1 %698, %706, !dbg !101
  %715 = select i1 %707, float %426, float %683, !dbg !102
  %716 = select i1 %708, float %428, float %684, !dbg !102
  %717 = select i1 %709, float %430, float %685, !dbg !102
  %718 = select i1 %710, float %432, float %686, !dbg !102
  %719 = select i1 %711, float %434, float %687, !dbg !102
  %720 = select i1 %712, float %436, float %688, !dbg !102
  %721 = select i1 %713, float %438, float %689, !dbg !102
  %722 = select i1 %714, float %440, float %690, !dbg !102
  %723 = fcmp olt float %715, %471, !dbg !103
  %724 = fcmp olt float %716, %473, !dbg !103
  %725 = fcmp olt float %717, %475, !dbg !103
  %726 = fcmp olt float %718, %477, !dbg !103
  %727 = fcmp olt float %719, %479, !dbg !103
  %728 = fcmp olt float %720, %481, !dbg !103
  %729 = fcmp olt float %721, %483, !dbg !103
  %730 = fcmp olt float %722, %485, !dbg !103
  %731 = fcmp uno float %471, 0.000000e+00, !dbg !105
  %732 = fcmp uno float %473, 0.000000e+00, !dbg !105
  %733 = fcmp uno float %475, 0.000000e+00, !dbg !105
  %734 = fcmp uno float %477, 0.000000e+00, !dbg !105
  %735 = fcmp uno float %479, 0.000000e+00, !dbg !105
  %736 = fcmp uno float %481, 0.000000e+00, !dbg !105
  %737 = fcmp uno float %483, 0.000000e+00, !dbg !105
  %738 = fcmp uno float %485, 0.000000e+00, !dbg !105
  %739 = or i1 %723, %731, !dbg !106
  %740 = or i1 %724, %732, !dbg !106
  %741 = or i1 %725, %733, !dbg !106
  %742 = or i1 %726, %734, !dbg !106
  %743 = or i1 %727, %735, !dbg !106
  %744 = or i1 %728, %736, !dbg !106
  %745 = or i1 %729, %737, !dbg !106
  %746 = or i1 %730, %738, !dbg !106
  %747 = select i1 %739, float %471, float %715, !dbg !107
  %748 = select i1 %740, float %473, float %716, !dbg !107
  %749 = select i1 %741, float %475, float %717, !dbg !107
  %750 = select i1 %742, float %477, float %718, !dbg !107
  %751 = select i1 %743, float %479, float %719, !dbg !107
  %752 = select i1 %744, float %481, float %720, !dbg !107
  %753 = select i1 %745, float %483, float %721, !dbg !107
  %754 = select i1 %746, float %485, float %722, !dbg !107
  %755 = fcmp olt float %747, %516, !dbg !108
  %756 = fcmp olt float %748, %518, !dbg !108
  %757 = fcmp olt float %749, %520, !dbg !108
  %758 = fcmp olt float %750, %522, !dbg !108
  %759 = fcmp olt float %751, %524, !dbg !108
  %760 = fcmp olt float %752, %526, !dbg !108
  %761 = fcmp olt float %753, %528, !dbg !108
  %762 = fcmp olt float %754, %530, !dbg !108
  %763 = fcmp uno float %516, 0.000000e+00, !dbg !110
  %764 = fcmp uno float %518, 0.000000e+00, !dbg !110
  %765 = fcmp uno float %520, 0.000000e+00, !dbg !110
  %766 = fcmp uno float %522, 0.000000e+00, !dbg !110
  %767 = fcmp uno float %524, 0.000000e+00, !dbg !110
  %768 = fcmp uno float %526, 0.000000e+00, !dbg !110
  %769 = fcmp uno float %528, 0.000000e+00, !dbg !110
  %770 = fcmp uno float %530, 0.000000e+00, !dbg !110
  %771 = or i1 %755, %763, !dbg !111
  %772 = or i1 %756, %764, !dbg !111
  %773 = or i1 %757, %765, !dbg !111
  %774 = or i1 %758, %766, !dbg !111
  %775 = or i1 %759, %767, !dbg !111
  %776 = or i1 %760, %768, !dbg !111
  %777 = or i1 %761, %769, !dbg !111
  %778 = or i1 %762, %770, !dbg !111
  %779 = zext i1 %531 to i8, !dbg !112
  %780 = zext i1 %532 to i8, !dbg !112
  %781 = zext i1 %533 to i8, !dbg !112
  %782 = zext i1 %534 to i8, !dbg !112
  %783 = zext i1 %535 to i8, !dbg !112
  %784 = zext i1 %536 to i8, !dbg !112
  %785 = zext i1 %537 to i8, !dbg !112
  %786 = zext i1 %538 to i8, !dbg !112
  %787 = select i1 %563, i8 2, i8 %779, !dbg !113
  %788 = select i1 %564, i8 2, i8 %780, !dbg !113
  %789 = select i1 %565, i8 2, i8 %781, !dbg !113
  %790 = select i1 %566, i8 2, i8 %782, !dbg !113
  %791 = select i1 %567, i8 2, i8 %783, !dbg !113
  %792 = select i1 %568, i8 2, i8 %784, !dbg !113
  %793 = select i1 %569, i8 2, i8 %785, !dbg !113
  %794 = select i1 %570, i8 2, i8 %786, !dbg !113
  %795 = select i1 %595, i8 3, i8 %787, !dbg !114
  %796 = select i1 %596, i8 3, i8 %788, !dbg !114
  %797 = select i1 %597, i8 3, i8 %789, !dbg !114
  %798 = select i1 %598, i8 3, i8 %790, !dbg !114
  %799 = select i1 %599, i8 3, i8 %791, !dbg !114
  %800 = select i1 %600, i8 3, i8 %792, !dbg !114
  %801 = select i1 %601, i8 3, i8 %793, !dbg !114
  %802 = select i1 %602, i8 3, i8 %794, !dbg !114
  %803 = select i1 %627, i8 4, i8 %795, !dbg !115
  %804 = select i1 %628, i8 4, i8 %796, !dbg !115
  %805 = select i1 %629, i8 4, i8 %797, !dbg !115
  %806 = select i1 %630, i8 4, i8 %798, !dbg !115
  %807 = select i1 %631, i8 4, i8 %799, !dbg !115
  %808 = select i1 %632, i8 4, i8 %800, !dbg !115
  %809 = select i1 %633, i8 4, i8 %801, !dbg !115
  %810 = select i1 %634, i8 4, i8 %802, !dbg !115
  %811 = select i1 %659, i8 5, i8 %803, !dbg !116
  %812 = select i1 %660, i8 5, i8 %804, !dbg !116
  %813 = select i1 %661, i8 5, i8 %805, !dbg !116
  %814 = select i1 %662, i8 5, i8 %806, !dbg !116
  %815 = select i1 %663, i8 5, i8 %807, !dbg !116
  %816 = select i1 %664, i8 5, i8 %808, !dbg !116
  %817 = select i1 %665, i8 5, i8 %809, !dbg !116
  %818 = select i1 %666, i8 5, i8 %810, !dbg !116
  %819 = select i1 %691, i8 6, i8 %811, !dbg !117
  %820 = select i1 %692, i8 6, i8 %812, !dbg !117
  %821 = select i1 %693, i8 6, i8 %813, !dbg !117
  %822 = select i1 %694, i8 6, i8 %814, !dbg !117
  %823 = select i1 %695, i8 6, i8 %815, !dbg !117
  %824 = select i1 %696, i8 6, i8 %816, !dbg !117
  %825 = select i1 %697, i8 6, i8 %817, !dbg !117
  %826 = select i1 %698, i8 6, i8 %818, !dbg !117
  %827 = select i1 %723, i8 7, i8 %819, !dbg !118
  %828 = select i1 %724, i8 7, i8 %820, !dbg !118
  %829 = select i1 %725, i8 7, i8 %821, !dbg !118
  %830 = select i1 %726, i8 7, i8 %822, !dbg !118
  %831 = select i1 %727, i8 7, i8 %823, !dbg !118
  %832 = select i1 %728, i8 7, i8 %824, !dbg !118
  %833 = select i1 %729, i8 7, i8 %825, !dbg !118
  %834 = select i1 %730, i8 7, i8 %826, !dbg !118
  %835 = select i1 %755, i8 8, i8 %827, !dbg !119
  %836 = select i1 %756, i8 8, i8 %828, !dbg !119
  %837 = select i1 %757, i8 8, i8 %829, !dbg !119
  %838 = select i1 %758, i8 8, i8 %830, !dbg !119
  %839 = select i1 %759, i8 8, i8 %831, !dbg !119
  %840 = select i1 %760, i8 8, i8 %832, !dbg !119
  %841 = select i1 %761, i8 8, i8 %833, !dbg !119
  %842 = select i1 %762, i8 8, i8 %834, !dbg !119
  %843 = mul i32 %35, 196, !dbg !120
  %844 = add i32 %.decomposed22, %843, !dbg !121
  %845 = mul i32 %61, 407680, !dbg !122
  %846 = mul i32 %62, 407680, !dbg !122
  %847 = add i32 %844, %845, !dbg !123
  %848 = add i32 %846, %.decomposed24, !dbg !121
  %849 = add i32 %848, %843, !dbg !123
  %850 = sext i32 %847 to i64, !dbg !124
  %851 = getelementptr float, ptr addrspace(1) %1, i64 %850, !dbg !124
  %852 = sext i32 %849 to i64, !dbg !124
  %853 = getelementptr float, ptr addrspace(1) %1, i64 %852, !dbg !124
  %854 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !125
  %855 = bitcast float %747 to i32, !dbg !125
  %856 = select i1 %771, i32 %515, i32 %855, !dbg !126
  %857 = insertelement <1 x i32> poison, i32 %856, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %854, <1 x i32> %857, i1 true) #2, !dbg !125
  %858 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !125
  %859 = bitcast float %748 to i32, !dbg !125
  %860 = select i1 %772, i32 %517, i32 %859, !dbg !126
  %861 = insertelement <1 x i32> poison, i32 %860, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %858, <1 x i32> %861, i1 true) #2, !dbg !125
  %862 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !125
  %863 = bitcast float %749 to i32, !dbg !125
  %864 = select i1 %773, i32 %519, i32 %863, !dbg !126
  %865 = insertelement <1 x i32> poison, i32 %864, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %862, <1 x i32> %865, i1 true) #2, !dbg !125
  %866 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !125
  %867 = bitcast float %750 to i32, !dbg !125
  %868 = select i1 %774, i32 %521, i32 %867, !dbg !126
  %869 = insertelement <1 x i32> poison, i32 %868, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %866, <1 x i32> %869, i1 true) #2, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %870 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !125
  %871 = load <4 x i32>, ptr addrspace(3) %870, align 16, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %872 = bitcast float %751 to i32, !dbg !125
  %873 = select i1 %775, i32 %523, i32 %872, !dbg !126
  %874 = insertelement <1 x i32> poison, i32 %873, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %854, <1 x i32> %874, i1 true) #2, !dbg !125
  %875 = bitcast float %752 to i32, !dbg !125
  %876 = select i1 %776, i32 %525, i32 %875, !dbg !126
  %877 = insertelement <1 x i32> poison, i32 %876, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %858, <1 x i32> %877, i1 true) #2, !dbg !125
  %878 = bitcast float %753 to i32, !dbg !125
  %879 = select i1 %777, i32 %527, i32 %878, !dbg !126
  %880 = insertelement <1 x i32> poison, i32 %879, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %862, <1 x i32> %880, i1 true) #2, !dbg !125
  %881 = bitcast float %754 to i32, !dbg !125
  %882 = select i1 %778, i32 %529, i32 %881, !dbg !126
  %883 = insertelement <1 x i32> poison, i32 %882, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %866, <1 x i32> %883, i1 true) #2, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %884 = load <4 x i32>, ptr addrspace(3) %870, align 16, !dbg !125
  %.extract = extractelement <4 x i32> %871, i64 0, !dbg !125
  %.extract8 = extractelement <4 x i32> %871, i64 1, !dbg !125
  %.extract9 = extractelement <4 x i32> %871, i64 2, !dbg !125
  %.extract10 = extractelement <4 x i32> %871, i64 3, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %851, i1 %153) #2, !dbg !125
  %.extract11 = extractelement <4 x i32> %884, i64 0, !dbg !125
  %.extract12 = extractelement <4 x i32> %884, i64 1, !dbg !125
  %.extract13 = extractelement <4 x i32> %884, i64 2, !dbg !125
  %.extract14 = extractelement <4 x i32> %884, i64 3, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %853, i1 %154) #2, !dbg !125
  %885 = mul i32 %15, 1088, !dbg !127
  %886 = mul i32 %16, 1088, !dbg !127
  %887 = mul i32 %17, 1088, !dbg !127
  %888 = mul i32 %18, 1088, !dbg !127
  %889 = mul i32 %19, 1088, !dbg !127
  %890 = mul i32 %20, 1088, !dbg !127
  %891 = mul i32 %21, 1088, !dbg !127
  %892 = mul i32 %22, 1088, !dbg !127
  %893 = add i32 %885, %35, !dbg !128
  %894 = add i32 %886, %35, !dbg !128
  %895 = add i32 %887, %35, !dbg !128
  %896 = add i32 %888, %35, !dbg !128
  %897 = add i32 %35, %889, !dbg !128
  %898 = add i32 %35, %890, !dbg !128
  %899 = add i32 %35, %891, !dbg !128
  %900 = add i32 %35, %892, !dbg !128
  %901 = sext i32 %893 to i64, !dbg !129
  %902 = getelementptr i8, ptr addrspace(1) %2, i64 %901, !dbg !129
  %903 = sext i32 %894 to i64, !dbg !129
  %904 = getelementptr i8, ptr addrspace(1) %2, i64 %903, !dbg !129
  %905 = sext i32 %895 to i64, !dbg !129
  %906 = getelementptr i8, ptr addrspace(1) %2, i64 %905, !dbg !129
  %907 = sext i32 %896 to i64, !dbg !129
  %908 = getelementptr i8, ptr addrspace(1) %2, i64 %907, !dbg !129
  %909 = sext i32 %897 to i64, !dbg !129
  %910 = getelementptr i8, ptr addrspace(1) %2, i64 %909, !dbg !129
  %911 = sext i32 %898 to i64, !dbg !129
  %912 = getelementptr i8, ptr addrspace(1) %2, i64 %911, !dbg !129
  %913 = sext i32 %899 to i64, !dbg !129
  %914 = getelementptr i8, ptr addrspace(1) %2, i64 %913, !dbg !129
  %915 = sext i32 %900 to i64, !dbg !129
  %916 = getelementptr i8, ptr addrspace(1) %2, i64 %915, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %835, ptr addrspace(1) %902, i1 %145) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %836, ptr addrspace(1) %904, i1 %146) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %837, ptr addrspace(1) %906, i1 %147) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %838, ptr addrspace(1) %908, i1 %148) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %839, ptr addrspace(1) %910, i1 %149) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %840, ptr addrspace(1) %912, i1 %150) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %841, ptr addrspace(1) %914, i1 %151) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %842, ptr addrspace(1) %916, i1 %152) #2, !dbg !130
  ret void, !dbg !131
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6n577oubqu2fwpw6lvksab23xckfrh33demqduh67vujdt4vafa.py", directory: "inductor_cache/6n")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_44, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_44, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_44", linkageName: "triton_poi_fused_max_pool2d_with_indices_44", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 27, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 51, scope: !7)
!24 = !DILocation(line: 34, column: 63, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 34, column: 56, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 76, scope: !7)
!30 = !DILocation(line: 34, column: 68, scope: !7)
!31 = !DILocation(line: 35, column: 37, scope: !7)
!32 = !DILocation(line: 35, column: 52, scope: !7)
!33 = !DILocation(line: 35, column: 63, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 75, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 36, column: 52, scope: !7)
!38 = !DILocation(line: 36, column: 63, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 75, scope: !7)
!41 = !DILocation(line: 37, column: 38, scope: !7)
!42 = !DILocation(line: 37, column: 53, scope: !7)
!43 = !DILocation(line: 37, column: 64, scope: !7)
!44 = !DILocation(line: 37, column: 30, scope: !7)
!45 = !DILocation(line: 37, column: 76, scope: !7)
!46 = !DILocation(line: 38, column: 38, scope: !7)
!47 = !DILocation(line: 38, column: 53, scope: !7)
!48 = !DILocation(line: 38, column: 64, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 76, scope: !7)
!51 = !DILocation(line: 39, column: 38, scope: !7)
!52 = !DILocation(line: 39, column: 53, scope: !7)
!53 = !DILocation(line: 39, column: 64, scope: !7)
!54 = !DILocation(line: 39, column: 30, scope: !7)
!55 = !DILocation(line: 39, column: 76, scope: !7)
!56 = !DILocation(line: 40, column: 39, scope: !7)
!57 = !DILocation(line: 40, column: 54, scope: !7)
!58 = !DILocation(line: 40, column: 65, scope: !7)
!59 = !DILocation(line: 40, column: 31, scope: !7)
!60 = !DILocation(line: 40, column: 77, scope: !7)
!61 = !DILocation(line: 41, column: 39, scope: !7)
!62 = !DILocation(line: 41, column: 54, scope: !7)
!63 = !DILocation(line: 41, column: 65, scope: !7)
!64 = !DILocation(line: 41, column: 31, scope: !7)
!65 = !DILocation(line: 41, column: 77, scope: !7)
!66 = !DILocation(line: 42, column: 39, scope: !7)
!67 = !DILocation(line: 42, column: 54, scope: !7)
!68 = !DILocation(line: 42, column: 65, scope: !7)
!69 = !DILocation(line: 42, column: 31, scope: !7)
!70 = !DILocation(line: 42, column: 77, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 43, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !79)
!79 = !DILocation(line: 44, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !84)
!84 = !DILocation(line: 45, column: 40, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !89)
!89 = !DILocation(line: 46, column: 40, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !94)
!94 = !DILocation(line: 47, column: 41, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !99)
!99 = !DILocation(line: 48, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !104)
!104 = !DILocation(line: 49, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !109)
!109 = !DILocation(line: 50, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !109)
!112 = !DILocation(line: 54, column: 35, scope: !7)
!113 = !DILocation(line: 57, column: 35, scope: !7)
!114 = !DILocation(line: 60, column: 35, scope: !7)
!115 = !DILocation(line: 63, column: 35, scope: !7)
!116 = !DILocation(line: 66, column: 35, scope: !7)
!117 = !DILocation(line: 69, column: 35, scope: !7)
!118 = !DILocation(line: 72, column: 35, scope: !7)
!119 = !DILocation(line: 75, column: 35, scope: !7)
!120 = !DILocation(line: 76, column: 34, scope: !7)
!121 = !DILocation(line: 76, column: 30, scope: !7)
!122 = !DILocation(line: 76, column: 46, scope: !7)
!123 = !DILocation(line: 76, column: 39, scope: !7)
!124 = !DILocation(line: 76, column: 25, scope: !7)
!125 = !DILocation(line: 76, column: 58, scope: !7)
!126 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !109)
!127 = !DILocation(line: 77, column: 35, scope: !7)
!128 = !DILocation(line: 77, column: 30, scope: !7)
!129 = !DILocation(line: 77, column: 25, scope: !7)
!130 = !DILocation(line: 77, column: 47, scope: !7)
!131 = !DILocation(line: 77, column: 4, scope: !7)
