; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 2, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 5, !dbg !12
  %12 = and i32 %11, 3, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 300, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %16 = shl i32 %15, 6, !dbg !16
  %17 = shl i32 %10, 1, !dbg !17
  %18 = and i32 %17, 62, !dbg !17
  %19 = or disjoint i32 %18, 1, !dbg !17
  %20 = or disjoint i32 %16, %18, !dbg !18
  %21 = or disjoint i32 %16, %19, !dbg !18
  %22 = icmp slt i32 %20, 64, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %23 = sdiv i32 %.frozen, 75, !dbg !20
  %24 = mul i32 %23, 75, !dbg !21
  %.decomposed = sub i32 %.frozen, %24, !dbg !21
  %25 = mul i32 %20, 75, !dbg !22
  %26 = mul i32 %21, 75, !dbg !22
  %27 = mul i32 %23, 4800, !dbg !23
  %28 = add i32 %27, %.decomposed, !dbg !24
  %29 = add i32 %28, %25, !dbg !25
  %30 = add i32 %28, %26, !dbg !25
  %31 = sext i32 %29 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !26
  %33 = sext i32 %30 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = and i1 %14, %22, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %35) #3, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %35) #3, !dbg !28
  %38 = sext i32 %.decomposed to i64, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %14) #3, !dbg !30
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %14) #3, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %14) #3, !dbg !32
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %14) #3, !dbg !32
  %45 = bitcast i32 %44 to float, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !33
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %14) #3, !dbg !34
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %14) #3, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !35
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %14) #3, !dbg !36
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %14) #3, !dbg !36
  %52 = fadd float %45, 0x3EE4F8B580000000, !dbg !37
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i2 = icmp eq i32 %55, 0, !dbg !38
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i5 = icmp eq i32 %56, 0, !dbg !38
  br i1 %.not.i2, label %62, label %57, !dbg !38

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %60, label %58, !dbg !38

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !38
  br label %__nv_sqrtf.exit6, !dbg !38

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !38
  br label %__nv_sqrtf.exit6, !dbg !38

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %65, label %63, !dbg !38

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !38
  br label %__nv_sqrtf.exit6, !dbg !38

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !38
  br label %__nv_sqrtf.exit6, !dbg !38

__nv_sqrtf.exit6:                                 ; preds = %58, %60, %63, %65
  %.0.i4 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !38
  %67 = bitcast i32 %37 to float, !dbg !28
  %68 = bitcast i32 %41 to float, !dbg !30
  %69 = fsub float %67, %68, !dbg !39
  %70 = bitcast i32 %36 to float, !dbg !28
  %71 = fsub float %70, %68, !dbg !39
  %72 = bitcast i32 %51 to float, !dbg !36
  %73 = bitcast i32 %48 to float, !dbg !34
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !40
  %75 = fmul float %71, %74, !dbg !41
  %76 = fmul float %69, %74, !dbg !41
  %77 = fmul float %75, %73, !dbg !42
  %78 = fmul float %76, %73, !dbg !42
  %79 = fadd float %77, %72, !dbg !43
  %80 = fadd float %78, %72, !dbg !43
  %.inv = fcmp ole float %79, 0.000000e+00, !dbg !44
  %81 = select i1 %.inv, float 0.000000e+00, float %79, !dbg !44
  %.inv1 = fcmp ole float %80, 0.000000e+00, !dbg !44
  %82 = select i1 %.inv1, float 0.000000e+00, float %80, !dbg !44
  %83 = fcmp olt float %81, 6.000000e+00, !dbg !48
  %84 = fcmp olt float %82, 6.000000e+00, !dbg !48
  %85 = fcmp uno float %81, 0.000000e+00, !dbg !50
  %86 = fcmp uno float %82, 0.000000e+00, !dbg !50
  %87 = or i1 %83, %85, !dbg !51
  %88 = or i1 %84, %86, !dbg !51
  %89 = shl i32 %13, 6, !dbg !52
  %90 = add i32 %20, %89, !dbg !53
  %91 = sext i32 %90 to i64, !dbg !54
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %91, !dbg !54
  %93 = bitcast float %81 to i32, !dbg !55
  %94 = select i1 %87, i32 %93, i32 1086324736, !dbg !56
  %95 = bitcast float %82 to i32, !dbg !55
  %96 = select i1 %88, i32 %95, i32 1086324736, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %94, i32 %96, ptr addrspace(1) %92, i1 %35) #3, !dbg !55
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ho2q47m5aek7vh3bpdgfi4qdenhn2dmvz6ower633fdyy7is6v.py", directory: "inductor_cache/7h")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!51 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 52, column: 33, scope: !7)
!53 = !DILocation(line: 52, column: 30, scope: !7)
!54 = !DILocation(line: 52, column: 25, scope: !7)
!55 = !DILocation(line: 52, column: 45, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!57 = !DILocation(line: 52, column: 4, scope: !7)
