; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = icmp slt i32 %13, 128, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %16 = shl i32 %15, 1, !dbg !16
  %17 = or disjoint i32 %16, 1, !dbg !17
  %18 = icmp slt i32 %16, 4, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %19 = sdiv i32 %.frozen, 4, !dbg !19
  %20 = mul i32 %19, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %20, !dbg !20
  %21 = sdiv i32 %13, 32, !dbg !21
  %22 = srem i32 %19, 8, !dbg !22
  %23 = srem i32 %17, 2, !dbg !23
  %24 = shl nsw i32 %23, 1, !dbg !24
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !25
  %25 = sdiv i8 %.lhs.trunc, 2, !dbg !25
  %.sext = sext i8 %25 to i32, !dbg !25
  %26 = shl nsw i32 %.sext, 2, !dbg !26
  %27 = shl i32 %15, 3, !dbg !27
  %28 = shl i32 %19, 4, !dbg !28
  %29 = mul i8 %25, 2, !dbg !29
  %.decomposed3 = sub i8 %.lhs.trunc, %29, !dbg !29
  %.sext2 = sext i8 %.decomposed3 to i32, !dbg !29
  %30 = add i32 %28, %27, !dbg !30
  %31 = add i32 %30, %.sext2, !dbg !31
  %32 = add i32 %31, %26, !dbg !32
  %33 = add i32 %30, %24, !dbg !30
  %34 = add i32 %33, %.sext2, !dbg !31
  %35 = add i32 %34, %26, !dbg !32
  %36 = sext i32 %32 to i64, !dbg !33
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !33
  %38 = sext i32 %35 to i64, !dbg !33
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !33
  %40 = and i1 %18, %14, !dbg !34
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %40) #3, !dbg !35
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %40) #3, !dbg !35
  %43 = sext i32 %21 to i64, !dbg !36
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !36
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %14) #3, !dbg !37
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !38
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %14) #3, !dbg !39
  %48 = bitcast i32 %47 to float, !dbg !39
  %49 = sext i32 %22 to i64, !dbg !40
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !40
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %14) #3, !dbg !41
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !42
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %14) #3, !dbg !43
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 1.280000e+02) #3, !dbg !44
  %55 = fadd float %54, 0x3EE4F8B580000000, !dbg !45
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %56, 0, !dbg !46
  br i1 %.not.i, label %59, label %57, !dbg !46

57:                                               ; preds = %8
  %58 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %55), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

59:                                               ; preds = %8
  %60 = tail call float @llvm.nvvm.rsqrt.approx.f(float %55), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %57, %59
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], !dbg !46
  %61 = bitcast i32 %42 to float, !dbg !35
  %62 = bitcast i32 %45 to float, !dbg !37
  %63 = fsub float %61, %62, !dbg !47
  %64 = bitcast i32 %41 to float, !dbg !35
  %65 = fsub float %64, %62, !dbg !47
  %66 = bitcast i32 %53 to float, !dbg !43
  %67 = bitcast i32 %51 to float, !dbg !41
  %68 = fmul float %65, %.0.i, !dbg !48
  %69 = fmul float %63, %.0.i, !dbg !48
  %70 = fmul float %68, %67, !dbg !49
  %71 = fmul float %69, %67, !dbg !49
  %72 = fadd float %70, %66, !dbg !50
  %73 = fadd float %71, %66, !dbg !50
  %74 = shl i32 %13, 2, !dbg !51
  %75 = add i32 %74, %16, !dbg !52
  %76 = sext i32 %75 to i64, !dbg !53
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %76, !dbg !53
  %78 = bitcast float %72 to i32, !dbg !54
  %79 = bitcast float %73 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %78, i32 %79, ptr addrspace(1) %77, i1 %40) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co255o3h3hcavvuzk5b4rompx5wrh2wd3a5ku2p4lysi5f22tzip.py", directory: "inductor_cache/o2")
!4 = !{ptr @triton_poi_fused_native_group_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_2", linkageName: "triton_poi_fused_native_group_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 26, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 34, scope: !7)
!25 = !DILocation(line: 34, column: 54, scope: !7)
!26 = !DILocation(line: 34, column: 48, scope: !7)
!27 = !DILocation(line: 34, column: 62, scope: !7)
!28 = !DILocation(line: 34, column: 76, scope: !7)
!29 = !DILocation(line: 34, column: 88, scope: !7)
!30 = !DILocation(line: 34, column: 59, scope: !7)
!31 = !DILocation(line: 34, column: 73, scope: !7)
!32 = !DILocation(line: 34, column: 83, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 102, scope: !7)
!35 = !DILocation(line: 34, column: 94, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 35, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 35, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 36, scope: !7)
!42 = !DILocation(line: 38, column: 31, scope: !7)
!43 = !DILocation(line: 38, column: 36, scope: !7)
!44 = !DILocation(line: 41, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 18, scope: !7)
!46 = !DILocation(line: 44, column: 27, scope: !7)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 18, scope: !7)
!49 = !DILocation(line: 46, column: 19, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 48, column: 32, scope: !7)
!52 = !DILocation(line: 48, column: 30, scope: !7)
!53 = !DILocation(line: 48, column: 25, scope: !7)
!54 = !DILocation(line: 48, column: 44, scope: !7)
!55 = !DILocation(line: 48, column: 4, scope: !7)
