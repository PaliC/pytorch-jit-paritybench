; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_mul_rsub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 31, !dbg !10
  %6 = lshr i32 %4, 5, !dbg !10
  %7 = and i32 %4, 15, !dbg !11
  %8 = shl i32 %4, 2, !dbg !12
  %9 = and i32 %8, 192, !dbg !12
  %10 = or disjoint i32 %9, %7, !dbg !13
  %11 = zext nneg i32 %10 to i64, !dbg !14
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !14
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !15
  %14 = bitcast i32 %13 to float, !dbg !15
  %15 = or disjoint i32 %10, 16, !dbg !16
  %16 = zext nneg i32 %15 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !18
  %19 = bitcast i32 %18 to float, !dbg !18
  %20 = or disjoint i32 %10, 32, !dbg !19
  %21 = zext nneg i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !21
  %24 = bitcast i32 %23 to float, !dbg !21
  %25 = or disjoint i32 %10, 48, !dbg !22
  %26 = zext nneg i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !24
  %29 = bitcast i32 %28 to float, !dbg !24
  %30 = fadd float %14, %19, !dbg !25
  %31 = fadd float %30, %24, !dbg !26
  %32 = fadd float %31, %29, !dbg !27
  %33 = fsub float 1.000000e+00, %32, !dbg !28
  %34 = bitcast float %33 to i32, !dbg !29
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 16, i32 31), !dbg !29
  %36 = bitcast i32 %35 to float, !dbg !29
  %37 = fadd float %33, %36, !dbg !33
  %38 = bitcast float %37 to i32, !dbg !29
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !29
  %40 = bitcast i32 %39 to float, !dbg !29
  %41 = fadd float %37, %40, !dbg !33
  %42 = bitcast float %41 to i32, !dbg !29
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = fadd float %41, %44, !dbg !33
  %46 = bitcast float %45 to i32, !dbg !29
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !29
  %48 = bitcast i32 %47 to float, !dbg !29
  %49 = fadd float %45, %48, !dbg !33
  %50 = bitcast float %49 to i32, !dbg !29
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = fadd float %49, %52, !dbg !33
  %54 = icmp eq i32 %5, 0, !dbg !29
  %55 = and i32 %6, 1, !dbg !29
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i32 %55, !dbg !29
  %57 = bitcast float %53 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 %54) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %58 = icmp slt i32 %4, 2, !dbg !29
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %4, !dbg !29
  %60 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %59, i1 %58) #3, !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %61, %63, !dbg !33
  %65 = and i32 %4, 1, !dbg !29
  %66 = icmp eq i32 %65, 0, !dbg !29
  %67 = and i1 %58, %66, !dbg !29
  %68 = bitcast float %64 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %68, i1 %67) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %69 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 6.400000e+01) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %urem = and i32 %4, 63, !dbg !37
  %71 = icmp eq i32 %urem, 0, !dbg !37
  %72 = bitcast float %70 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %72, ptr addrspace(1) %0, i1 %71) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxc2hibofp5zvmq4di5l3vxp3yu5efc5wamwiy4px64nxepdlhgs.py", directory: "inductor_cache/xc")
!4 = !{ptr @triton_per_fused_mean_mul_rsub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_mul_rsub_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_mul_rsub_sum_1", linkageName: "triton_per_fused_mean_mul_rsub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 31, column: 38, scope: !7)
!13 = !DILocation(line: 31, column: 35, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 43, scope: !7)
!16 = !DILocation(line: 32, column: 40, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 48, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 41, column: 25, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 4, scope: !7)
!37 = !DILocation(line: 46, column: 71, scope: !7)
!38 = !DILocation(line: 46, column: 4, scope: !7)
