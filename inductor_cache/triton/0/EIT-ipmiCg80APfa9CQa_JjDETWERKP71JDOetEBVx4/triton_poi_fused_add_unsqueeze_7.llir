; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_unsqueeze_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = and i32 %10, 60, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 32, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = lshr i32 %7, 4, !dbg !17
  %22 = and i32 %21, 7, !dbg !17
  %23 = or disjoint i32 %20, %11, !dbg !18
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = or disjoint i32 %24, 8, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !19
  %27 = icmp slt i32 %24, 16, !dbg !19
  %28 = icmp slt i32 %25, 16, !dbg !19
  %29 = shl i32 %13, 4, !dbg !20
  %30 = shl i32 %14, 4, !dbg !20
  %31 = add i32 %23, %29, !dbg !21
  %32 = add i32 %23, %30, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = and i1 %16, %26, !dbg !23
  %38 = and i1 %17, %26, !dbg !23
  %39 = and i1 %18, %27, !dbg !23
  %40 = and i1 %28, %18, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %37) #2, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %38) #2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %51 = shl i32 %24, 8, !dbg !25
  %52 = shl i32 %25, 8, !dbg !25
  %53 = add i32 %51, %15, !dbg !26
  %54 = add i32 %15, %52, !dbg !26
  %55 = sext i32 %53 to i64, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !27
  %57 = sext i32 %54 to i64, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !27
  %59 = shl i32 %7, 8, !dbg !28
  %60 = and i32 %59, 768, !dbg !28
  %61 = or disjoint i32 %60, %9, !dbg !28
  %62 = and i32 %10, 508, !dbg !28
  %63 = lshr exact i32 %60, 2, !dbg !28
  %64 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %63, !dbg !28
  %65 = getelementptr float, ptr addrspace(3) %64, i32 %61, !dbg !28
  %66 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !28
  %67 = or disjoint i32 %61, 64, !dbg !28
  %68 = lshr i32 %67, 4, !dbg !28
  %69 = and i32 %68, 52, !dbg !28
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !28
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %67, !dbg !28
  %72 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !28
  %73 = or disjoint i32 %61, 128, !dbg !28
  %74 = lshr i32 %73, 4, !dbg !28
  %75 = and i32 %74, 56, !dbg !28
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !28
  %77 = getelementptr float, ptr addrspace(3) %76, i32 %73, !dbg !28
  %78 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !28
  %79 = or disjoint i32 %61, 192, !dbg !28
  %80 = lshr i32 %79, 4, !dbg !28
  %81 = and i32 %80, 60, !dbg !28
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !28
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %79, !dbg !28
  %84 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !28
  %85 = or disjoint i32 %61, 32, !dbg !28
  %86 = getelementptr float, ptr addrspace(3) %64, i32 %85, !dbg !28
  %87 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !28
  %88 = or disjoint i32 %61, 96, !dbg !28
  %89 = lshr i32 %88, 4, !dbg !28
  %90 = and i32 %89, 52, !dbg !28
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !28
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %88, !dbg !28
  %93 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !28
  %94 = or disjoint i32 %61, 160, !dbg !28
  %95 = lshr i32 %94, 4, !dbg !28
  %96 = and i32 %95, 56, !dbg !28
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !28
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %94, !dbg !28
  %99 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !28
  %100 = or disjoint i32 %61, 224, !dbg !28
  %101 = lshr i32 %100, 4, !dbg !28
  %102 = and i32 %101, 60, !dbg !28
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !28
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %100, !dbg !28
  %105 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %106 = lshr i32 %10, 4, !dbg !28
  %107 = and i32 %106, 28, !dbg !28
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !28
  %109 = getelementptr inbounds float, ptr addrspace(3) %108, i32 %62, !dbg !28
  %110 = or disjoint i32 %62, 512, !dbg !28
  %111 = lshr i32 %110, 4, !dbg !28
  %112 = and i32 %111, 60, !dbg !28
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !28
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %110, !dbg !28
  %115 = load <4 x i32>, ptr addrspace(3) %114, align 16, !dbg !28
  %.extract = load i32, ptr addrspace(3) %109, align 16, !dbg !28
  %116 = getelementptr inbounds i8, ptr addrspace(3) %109, i32 4, !dbg !28
  %.extract10 = load i32, ptr addrspace(3) %116, align 4, !dbg !28
  %117 = getelementptr inbounds i8, ptr addrspace(3) %109, i32 8, !dbg !28
  %.extract11 = load i32, ptr addrspace(3) %117, align 8, !dbg !28
  %118 = getelementptr inbounds i8, ptr addrspace(3) %109, i32 12, !dbg !28
  %.extract12 = load i32, ptr addrspace(3) %118, align 4, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %56, i1 %39) #2, !dbg !28
  %.extract13 = extractelement <4 x i32> %115, i64 0, !dbg !28
  %.extract14 = extractelement <4 x i32> %115, i64 1, !dbg !28
  %.extract15 = extractelement <4 x i32> %115, i64 2, !dbg !28
  %.extract16 = extractelement <4 x i32> %115, i64 3, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %58, i1 %40) #2, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbr6ockbdip4h26sq26nsjjrk7fb6bw7t3rtrj3b7q7okihd6ter.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_poi_fused_add_unsqueeze_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_unsqueeze_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_unsqueeze_7", linkageName: "triton_poi_fused_add_unsqueeze_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 38, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 51, scope: !7)
!24 = !DILocation(line: 30, column: 43, scope: !7)
!25 = !DILocation(line: 31, column: 34, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 25, scope: !7)
!28 = !DILocation(line: 31, column: 45, scope: !7)
!29 = !DILocation(line: 31, column: 4, scope: !7)
