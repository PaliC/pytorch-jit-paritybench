; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 1, !dbg !12
  %14 = shl nuw nsw i32 %13, 3, !dbg !12
  %15 = and i32 %12, 64, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 6, !dbg !15
  %20 = lshr i32 %12, 1, !dbg !16
  %21 = and i32 %20, 31, !dbg !16
  %22 = lshr exact i32 %15, 1, !dbg !16
  %23 = or disjoint i32 %21, %22, !dbg !16
  %24 = or disjoint i32 %23, %19, !dbg !17
  %25 = icmp slt i32 %24, 51, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %26 = sdiv i32 %.frozen, 512, !dbg !19
  %27 = mul i32 %26, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = srem i32 %17, 512, !dbg !20
  %29 = shl i32 %24, 9, !dbg !21
  %30 = mul i32 %26, 26112, !dbg !22
  %31 = add i32 %30, %29, !dbg !23
  %32 = add i32 %31, %.decomposed, !dbg !24
  %33 = add i32 %31, %28, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %25) #4, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %25) #4, !dbg !26
  %40 = sext i32 %.decomposed to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !27
  %42 = sext i32 %28 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !27
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !28
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !29
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #4, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !30
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !30
  %53 = bitcast i32 %49 to float, !dbg !30
  %54 = bitcast i32 %50 to float, !dbg !30
  %55 = bitcast i32 %51 to float, !dbg !30
  %56 = bitcast i32 %52 to float, !dbg !30
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !30
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !30
  %62 = bitcast i32 %58 to float, !dbg !30
  %63 = bitcast i32 %59 to float, !dbg !30
  %64 = bitcast i32 %60 to float, !dbg !30
  %65 = bitcast i32 %61 to float, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !32
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #4, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !33
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !33
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !34
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !34
  %74 = fadd float %53, 0x3EE4F8B580000000, !dbg !35
  %75 = fadd float %54, 0x3EE4F8B580000000, !dbg !35
  %76 = fadd float %55, 0x3EE4F8B580000000, !dbg !35
  %77 = fadd float %56, 0x3EE4F8B580000000, !dbg !35
  %78 = fadd float %62, 0x3EE4F8B580000000, !dbg !35
  %79 = fadd float %63, 0x3EE4F8B580000000, !dbg !35
  %80 = fadd float %64, 0x3EE4F8B580000000, !dbg !35
  %81 = fadd float %65, 0x3EE4F8B580000000, !dbg !35
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %82, 0, !dbg !36
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %83, 0, !dbg !36
  br i1 %.not.i, label %89, label %84, !dbg !36

84:                                               ; preds = %9
  br i1 %.not1.i, label %87, label %85, !dbg !36

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

89:                                               ; preds = %9
  br i1 %.not1.i, label %92, label %90, !dbg !36

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !36
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i4 = icmp eq i32 %94, 0, !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i7 = icmp eq i32 %95, 0, !dbg !36
  br i1 %.not.i4, label %101, label %96, !dbg !36

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %99, label %97, !dbg !36

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %104, label %102, !dbg !36

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

__nv_sqrtf.exit8:                                 ; preds = %97, %99, %102, %104
  %.0.i6 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i9 = icmp eq i32 %106, 0, !dbg !36
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i12 = icmp eq i32 %107, 0, !dbg !36
  br i1 %.not.i9, label %113, label %108, !dbg !36

108:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %111, label %109, !dbg !36

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

113:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %116, label %114, !dbg !36

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

__nv_sqrtf.exit13:                                ; preds = %109, %111, %114, %116
  %.0.i11 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !36
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i14 = icmp eq i32 %118, 0, !dbg !36
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i17 = icmp eq i32 %119, 0, !dbg !36
  br i1 %.not.i14, label %125, label %120, !dbg !36

120:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %123, label %121, !dbg !36

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

125:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %128, label %126, !dbg !36

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

__nv_sqrtf.exit18:                                ; preds = %121, %123, %126, %128
  %.0.i16 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !36
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i19 = icmp eq i32 %130, 0, !dbg !36
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i22 = icmp eq i32 %131, 0, !dbg !36
  br i1 %.not.i19, label %137, label %132, !dbg !36

132:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %135, label %133, !dbg !36

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

137:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %140, label %138, !dbg !36

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

__nv_sqrtf.exit23:                                ; preds = %133, %135, %138, %140
  %.0.i21 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !36
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i24 = icmp eq i32 %142, 0, !dbg !36
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i27 = icmp eq i32 %143, 0, !dbg !36
  br i1 %.not.i24, label %149, label %144, !dbg !36

144:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %147, label %145, !dbg !36

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit28, !dbg !36

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit28, !dbg !36

149:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %152, label %150, !dbg !36

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit28, !dbg !36

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit28, !dbg !36

__nv_sqrtf.exit28:                                ; preds = %145, %147, %150, %152
  %.0.i26 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !36
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i29 = icmp eq i32 %154, 0, !dbg !36
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i32 = icmp eq i32 %155, 0, !dbg !36
  br i1 %.not.i29, label %161, label %156, !dbg !36

156:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %159, label %157, !dbg !36

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit33, !dbg !36

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit33, !dbg !36

161:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %164, label %162, !dbg !36

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit33, !dbg !36

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit33, !dbg !36

__nv_sqrtf.exit33:                                ; preds = %157, %159, %162, %164
  %.0.i31 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !36
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i34 = icmp eq i32 %166, 0, !dbg !36
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i37 = icmp eq i32 %167, 0, !dbg !36
  br i1 %.not.i34, label %173, label %168, !dbg !36

168:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %171, label %169, !dbg !36

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

173:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %176, label %174, !dbg !36

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

__nv_sqrtf.exit38:                                ; preds = %169, %171, %174, %176
  %.0.i36 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !36
  %178 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %179 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !28
  %180 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %181 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !28
  %182 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %183 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !28
  %184 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %185 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !28
  %186 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %187 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !28
  %188 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %189 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !28
  %190 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %191 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !28
  %192 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %193 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !28
  %194 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !34
  %195 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !34
  %196 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !34
  %197 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !34
  %198 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !34
  %199 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !34
  %200 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !34
  %201 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !34
  %202 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !32
  %203 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !32
  %204 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !32
  %205 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !32
  %206 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !32
  %207 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !32
  %208 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !32
  %209 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !32
  %210 = and i32 %12, 63, !dbg !16
  %211 = or disjoint i32 %19, %210, !dbg !17
  %212 = icmp slt i32 %211, 51, !dbg !18
  %.lobit = lshr exact i32 %15, 6, !dbg !12
  %213 = or disjoint i32 %.lobit, 14, !dbg !12
  %214 = or disjoint i32 %11, %213, !dbg !13
  %215 = or disjoint i32 %.lobit, 12, !dbg !12
  %216 = or disjoint i32 %11, %215, !dbg !13
  %217 = or disjoint i32 %.lobit, 10, !dbg !12
  %218 = or disjoint i32 %11, %217, !dbg !13
  %219 = or disjoint i32 %.lobit, 8, !dbg !12
  %220 = or disjoint i32 %11, %219, !dbg !13
  %221 = or disjoint i32 %.lobit, 6, !dbg !12
  %222 = or disjoint i32 %11, %221, !dbg !13
  %223 = or disjoint i32 %.lobit, 4, !dbg !12
  %224 = or disjoint i32 %11, %223, !dbg !13
  %225 = or disjoint i32 %.lobit, 2, !dbg !12
  %226 = or disjoint i32 %11, %225, !dbg !13
  %227 = or disjoint i32 %11, %.lobit, !dbg !13
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !37
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !37
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !37
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #4, !dbg !37
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #4, !dbg !37
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #4, !dbg !37
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #4, !dbg !37
  %236 = mul i32 %227, 51, !dbg !38
  %237 = mul i32 %226, 51, !dbg !38
  %238 = mul i32 %224, 51, !dbg !38
  %239 = mul i32 %222, 51, !dbg !38
  %240 = mul i32 %220, 51, !dbg !38
  %241 = mul i32 %218, 51, !dbg !38
  %242 = mul i32 %216, 51, !dbg !38
  %243 = mul i32 %214, 51, !dbg !38
  %244 = add i32 %211, %236, !dbg !39
  %245 = add i32 %211, %237, !dbg !39
  %246 = add i32 %211, %238, !dbg !39
  %247 = add i32 %211, %239, !dbg !39
  %248 = add i32 %211, %240, !dbg !39
  %249 = add i32 %211, %241, !dbg !39
  %250 = add i32 %211, %242, !dbg !39
  %251 = add i32 %211, %243, !dbg !39
  %252 = sext i32 %244 to i64, !dbg !40
  %253 = getelementptr float, ptr addrspace(1) %5, i64 %252, !dbg !40
  %254 = sext i32 %245 to i64, !dbg !40
  %255 = getelementptr float, ptr addrspace(1) %5, i64 %254, !dbg !40
  %256 = sext i32 %246 to i64, !dbg !40
  %257 = getelementptr float, ptr addrspace(1) %5, i64 %256, !dbg !40
  %258 = sext i32 %247 to i64, !dbg !40
  %259 = getelementptr float, ptr addrspace(1) %5, i64 %258, !dbg !40
  %260 = sext i32 %248 to i64, !dbg !40
  %261 = getelementptr float, ptr addrspace(1) %5, i64 %260, !dbg !40
  %262 = sext i32 %249 to i64, !dbg !40
  %263 = getelementptr float, ptr addrspace(1) %5, i64 %262, !dbg !40
  %264 = sext i32 %250 to i64, !dbg !40
  %265 = getelementptr float, ptr addrspace(1) %5, i64 %264, !dbg !40
  %266 = sext i32 %251 to i64, !dbg !40
  %267 = getelementptr float, ptr addrspace(1) %5, i64 %266, !dbg !40
  %268 = shl nuw nsw i32 %13, 9, !dbg !41
  %269 = or disjoint i32 %268, %21, !dbg !41
  %270 = or disjoint i32 %269, %22, !dbg !41
  %271 = and i32 %12, 127, !dbg !41
  %.idx = shl nuw nsw i32 %13, 5, !dbg !41
  %272 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !41
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !41
  %274 = or disjoint i32 %270, 64, !dbg !41
  %275 = lshr i32 %274, 6, !dbg !41
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !41
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %274, !dbg !41
  %278 = or disjoint i32 %270, 128, !dbg !41
  %279 = lshr i32 %278, 6, !dbg !41
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !41
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %278, !dbg !41
  %282 = or disjoint i32 %270, 192, !dbg !41
  %283 = lshr i32 %282, 6, !dbg !41
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !41
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %282, !dbg !41
  %286 = or disjoint i32 %270, 256, !dbg !41
  %287 = lshr i32 %286, 6, !dbg !41
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !41
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %286, !dbg !41
  %290 = or disjoint i32 %270, 320, !dbg !41
  %291 = lshr i32 %290, 6, !dbg !41
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i32 %291, !dbg !41
  %293 = getelementptr float, ptr addrspace(3) %292, i32 %290, !dbg !41
  %294 = or disjoint i32 %270, 384, !dbg !41
  %295 = lshr i32 %294, 6, !dbg !41
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %295, !dbg !41
  %297 = getelementptr float, ptr addrspace(3) %296, i32 %294, !dbg !41
  %298 = or disjoint i32 %270, 448, !dbg !41
  %299 = lshr i32 %298, 6, !dbg !41
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i32 %299, !dbg !41
  %301 = getelementptr float, ptr addrspace(3) %300, i32 %298, !dbg !41
  %302 = lshr i32 %271, 6, !dbg !41
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %302, !dbg !41
  %304 = getelementptr inbounds float, ptr addrspace(3) %303, i32 %271, !dbg !41
  %305 = or disjoint i32 %271, 128, !dbg !41
  %306 = lshr i32 %305, 6, !dbg !41
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !41
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !41
  %309 = or disjoint i32 %271, 256, !dbg !41
  %310 = lshr i32 %309, 6, !dbg !41
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %310, !dbg !41
  %312 = getelementptr inbounds float, ptr addrspace(3) %311, i32 %309, !dbg !41
  %313 = or disjoint i32 %271, 384, !dbg !41
  %314 = lshr i32 %313, 6, !dbg !41
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !41
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %313, !dbg !41
  %317 = or disjoint i32 %271, 512, !dbg !41
  %318 = lshr i32 %317, 6, !dbg !41
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !41
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !41
  %321 = or disjoint i32 %271, 640, !dbg !41
  %322 = lshr i32 %321, 6, !dbg !41
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %322, !dbg !41
  %324 = getelementptr inbounds float, ptr addrspace(3) %323, i32 %321, !dbg !41
  %325 = or disjoint i32 %271, 768, !dbg !41
  %326 = lshr i32 %325, 6, !dbg !41
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !41
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %325, !dbg !41
  %329 = or disjoint i32 %271, 896, !dbg !41
  %330 = lshr i32 %329, 6, !dbg !41
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %330, !dbg !41
  %332 = getelementptr inbounds float, ptr addrspace(3) %331, i32 %329, !dbg !41
  %333 = getelementptr i1, ptr addrspace(1) %6, i64 %34, !dbg !42
  %334 = insertelement <4 x i32> poison, i32 %192, i64 0, !dbg !26
  %335 = insertelement <4 x i32> %334, i32 %190, i64 1, !dbg !26
  %336 = insertelement <4 x i32> %335, i32 %188, i64 2, !dbg !26
  %337 = insertelement <4 x i32> %336, i32 %186, i64 3, !dbg !26
  %338 = bitcast <4 x i32> %337 to <4 x float>, !dbg !26
  %339 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !28
  %340 = insertelement <4 x i32> %339, i32 %191, i64 1, !dbg !28
  %341 = insertelement <4 x i32> %340, i32 %189, i64 2, !dbg !28
  %342 = insertelement <4 x i32> %341, i32 %187, i64 3, !dbg !28
  %343 = bitcast <4 x i32> %342 to <4 x float>, !dbg !28
  %344 = fsub <4 x float> %338, %343, !dbg !43
  %345 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !34
  %346 = insertelement <4 x i32> %345, i32 %200, i64 1, !dbg !34
  %347 = insertelement <4 x i32> %346, i32 %199, i64 2, !dbg !34
  %348 = insertelement <4 x i32> %347, i32 %198, i64 3, !dbg !34
  %349 = bitcast <4 x i32> %348 to <4 x float>, !dbg !34
  %350 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !32
  %351 = insertelement <4 x i32> %350, i32 %208, i64 1, !dbg !32
  %352 = insertelement <4 x i32> %351, i32 %207, i64 2, !dbg !32
  %353 = insertelement <4 x i32> %352, i32 %206, i64 3, !dbg !32
  %354 = bitcast <4 x i32> %353 to <4 x float>, !dbg !32
  %355 = insertelement <4 x float> poison, float %228, i64 0, !dbg !44
  %356 = insertelement <4 x float> %355, float %229, i64 1, !dbg !44
  %357 = insertelement <4 x float> %356, float %230, i64 2, !dbg !44
  %358 = insertelement <4 x float> %357, float %231, i64 3, !dbg !44
  %359 = fmul <4 x float> %344, %358, !dbg !44
  %360 = fmul <4 x float> %359, %354, !dbg !45
  %361 = fadd <4 x float> %360, %349, !dbg !46
  %362 = fcmp olt <4 x float> %361, zeroinitializer, !dbg !47
  %363 = select <4 x i1> %362, <4 x float> zeroinitializer, <4 x float> %361, !dbg !51
  %364 = fcmp ole <4 x float> %363, zeroinitializer, !dbg !52
  %365 = extractelement <4 x float> %363, i64 0, !dbg !41
  %366 = bitcast float %365 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %366, i1 true) #4, !dbg !41
  %367 = extractelement <4 x float> %363, i64 1, !dbg !41
  %368 = bitcast float %367 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %368, i1 true) #4, !dbg !41
  %369 = extractelement <4 x float> %363, i64 2, !dbg !41
  %370 = bitcast float %369 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %370, i1 true) #4, !dbg !41
  %371 = extractelement <4 x float> %363, i64 3, !dbg !41
  %372 = bitcast float %371 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %372, i1 true) #4, !dbg !41
  %373 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !26
  %374 = insertelement <4 x i32> %373, i32 %182, i64 1, !dbg !26
  %375 = insertelement <4 x i32> %374, i32 %180, i64 2, !dbg !26
  %376 = insertelement <4 x i32> %375, i32 %178, i64 3, !dbg !26
  %377 = bitcast <4 x i32> %376 to <4 x float>, !dbg !26
  %378 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !28
  %379 = insertelement <4 x i32> %378, i32 %183, i64 1, !dbg !28
  %380 = insertelement <4 x i32> %379, i32 %181, i64 2, !dbg !28
  %381 = insertelement <4 x i32> %380, i32 %179, i64 3, !dbg !28
  %382 = bitcast <4 x i32> %381 to <4 x float>, !dbg !28
  %383 = fsub <4 x float> %377, %382, !dbg !43
  %384 = insertelement <4 x i32> poison, i32 %197, i64 0, !dbg !34
  %385 = insertelement <4 x i32> %384, i32 %196, i64 1, !dbg !34
  %386 = insertelement <4 x i32> %385, i32 %195, i64 2, !dbg !34
  %387 = insertelement <4 x i32> %386, i32 %194, i64 3, !dbg !34
  %388 = bitcast <4 x i32> %387 to <4 x float>, !dbg !34
  %389 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !32
  %390 = insertelement <4 x i32> %389, i32 %204, i64 1, !dbg !32
  %391 = insertelement <4 x i32> %390, i32 %203, i64 2, !dbg !32
  %392 = insertelement <4 x i32> %391, i32 %202, i64 3, !dbg !32
  %393 = bitcast <4 x i32> %392 to <4 x float>, !dbg !32
  %394 = insertelement <4 x float> poison, float %232, i64 0, !dbg !44
  %395 = insertelement <4 x float> %394, float %233, i64 1, !dbg !44
  %396 = insertelement <4 x float> %395, float %234, i64 2, !dbg !44
  %397 = insertelement <4 x float> %396, float %235, i64 3, !dbg !44
  %398 = fmul <4 x float> %383, %397, !dbg !44
  %399 = fmul <4 x float> %398, %393, !dbg !45
  %400 = fadd <4 x float> %399, %388, !dbg !46
  %401 = fcmp olt <4 x float> %400, zeroinitializer, !dbg !47
  %402 = select <4 x i1> %401, <4 x float> zeroinitializer, <4 x float> %400, !dbg !51
  %403 = fcmp ole <4 x float> %402, zeroinitializer, !dbg !52
  %404 = extractelement <4 x float> %402, i64 0, !dbg !41
  %405 = bitcast float %404 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %405, i1 true) #4, !dbg !41
  %406 = extractelement <4 x float> %402, i64 1, !dbg !41
  %407 = bitcast float %406 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %407, i1 true) #4, !dbg !41
  %408 = extractelement <4 x float> %402, i64 2, !dbg !41
  %409 = bitcast float %408 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %409, i1 true) #4, !dbg !41
  %410 = extractelement <4 x float> %402, i64 3, !dbg !41
  %411 = bitcast float %410 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %411, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %412 = load i32, ptr addrspace(3) %304, align 4, !dbg !41
  %413 = load i32, ptr addrspace(3) %308, align 4, !dbg !41
  %414 = load i32, ptr addrspace(3) %312, align 4, !dbg !41
  %415 = load i32, ptr addrspace(3) %316, align 4, !dbg !41
  %416 = load i32, ptr addrspace(3) %320, align 4, !dbg !41
  %417 = load i32, ptr addrspace(3) %324, align 4, !dbg !41
  %418 = load i32, ptr addrspace(3) %328, align 4, !dbg !41
  %419 = load i32, ptr addrspace(3) %332, align 4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %412, ptr addrspace(1) %253, i1 %212) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %413, ptr addrspace(1) %255, i1 %212) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %414, ptr addrspace(1) %257, i1 %212) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %415, ptr addrspace(1) %259, i1 %212) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %416, ptr addrspace(1) %261, i1 %212) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %417, ptr addrspace(1) %263, i1 %212) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %418, ptr addrspace(1) %265, i1 %212) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %419, ptr addrspace(1) %267, i1 %212) #4, !dbg !41
  %420 = zext <4 x i1> %364 to <4 x i8>, !dbg !53
  %421 = bitcast <4 x i8> %420 to i32, !dbg !53
  %422 = zext <4 x i1> %403 to <4 x i8>, !dbg !53
  %423 = bitcast <4 x i8> %422 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %421, i32 %423, ptr addrspace(1) %333, i1 %25) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "celm3iic2farjsss3yt752d4dnst7okohx5su5bs3exbqmjtwadt.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 33, scope: !7)
!39 = !DILocation(line: 52, column: 30, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 45, scope: !7)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 51, column: 21, scope: !7)
!53 = !DILocation(line: 53, column: 57, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
