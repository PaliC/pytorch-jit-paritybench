; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = srem i32 %13, 9, !dbg !14
  %18 = srem i32 %14, 9, !dbg !14
  %19 = srem i32 %15, 9, !dbg !14
  %20 = srem i32 %16, 9, !dbg !14
  %21 = sext i32 %13 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %24 = sext i32 %17 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = sext i32 %18 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = sext i32 %19 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !17
  %30 = sext i32 %20 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !17
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %41 = bitcast i32 %40 to float, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !20
  %43 = bitcast i32 %42 to float, !dbg !20
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !20
  %45 = bitcast i32 %44 to float, !dbg !20
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !20
  %47 = bitcast i32 %46 to float, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %64 = fadd float %41, 0x3EE4F8B580000000, !dbg !25
  %65 = fadd float %43, 0x3EE4F8B580000000, !dbg !25
  %66 = fadd float %45, 0x3EE4F8B580000000, !dbg !25
  %67 = fadd float %47, 0x3EE4F8B580000000, !dbg !25
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %68, 0, !dbg !26
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %69, 0, !dbg !26
  br i1 %.not.i, label %75, label %70, !dbg !26

70:                                               ; preds = %7
  br i1 %.not1.i, label %73, label %71, !dbg !26

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

75:                                               ; preds = %7
  br i1 %.not1.i, label %78, label %76, !dbg !26

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !26
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i4 = icmp eq i32 %80, 0, !dbg !26
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i7 = icmp eq i32 %81, 0, !dbg !26
  br i1 %.not.i4, label %87, label %82, !dbg !26

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %85, label %83, !dbg !26

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit8, !dbg !26

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit8, !dbg !26

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %90, label %88, !dbg !26

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit8, !dbg !26

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit8, !dbg !26

__nv_sqrtf.exit8:                                 ; preds = %83, %85, %88, %90
  %.0.i6 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !26
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i9 = icmp eq i32 %92, 0, !dbg !26
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i12 = icmp eq i32 %93, 0, !dbg !26
  br i1 %.not.i9, label %99, label %94, !dbg !26

94:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %97, label %95, !dbg !26

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit13, !dbg !26

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit13, !dbg !26

99:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %102, label %100, !dbg !26

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit13, !dbg !26

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit13, !dbg !26

__nv_sqrtf.exit13:                                ; preds = %95, %97, %100, %102
  %.0.i11 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !26
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i14 = icmp eq i32 %104, 0, !dbg !26
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i17 = icmp eq i32 %105, 0, !dbg !26
  br i1 %.not.i14, label %111, label %106, !dbg !26

106:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %109, label %107, !dbg !26

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit18, !dbg !26

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit18, !dbg !26

111:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %114, label %112, !dbg !26

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit18, !dbg !26

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit18, !dbg !26

__nv_sqrtf.exit18:                                ; preds = %107, %109, %112, %114
  %.0.i16 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !26
  %116 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %117 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !18
  %118 = insertelement <4 x i32> %117, i32 %34, i64 1, !dbg !18
  %119 = insertelement <4 x i32> %118, i32 %33, i64 2, !dbg !18
  %120 = insertelement <4 x i32> %119, i32 %32, i64 3, !dbg !18
  %121 = bitcast <4 x i32> %120 to <4 x float>, !dbg !18
  %122 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %123 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %124 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %125 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !24
  %126 = insertelement <4 x i32> %125, i32 %62, i64 1, !dbg !24
  %127 = insertelement <4 x i32> %126, i32 %61, i64 2, !dbg !24
  %128 = insertelement <4 x i32> %127, i32 %60, i64 3, !dbg !24
  %129 = bitcast <4 x i32> %128 to <4 x float>, !dbg !24
  %130 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !22
  %131 = insertelement <4 x i32> %130, i32 %54, i64 1, !dbg !22
  %132 = insertelement <4 x i32> %131, i32 %53, i64 2, !dbg !22
  %133 = insertelement <4 x i32> %132, i32 %52, i64 3, !dbg !22
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !22
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !27
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !27
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !27
  %139 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !16
  %140 = insertelement <4 x i32> %139, i32 %122, i64 1, !dbg !16
  %141 = insertelement <4 x i32> %140, i32 %123, i64 2, !dbg !16
  %142 = insertelement <4 x i32> %141, i32 %124, i64 3, !dbg !16
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !16
  %144 = fsub <4 x float> %143, %121, !dbg !28
  %145 = insertelement <4 x float> poison, float %138, i64 0, !dbg !29
  %146 = insertelement <4 x float> %145, float %137, i64 1, !dbg !29
  %147 = insertelement <4 x float> %146, float %136, i64 2, !dbg !29
  %148 = insertelement <4 x float> %147, float %135, i64 3, !dbg !29
  %149 = fmul <4 x float> %144, %148, !dbg !29
  %150 = fmul <4 x float> %149, %134, !dbg !30
  %151 = fadd <4 x float> %150, %129, !dbg !31
  %152 = fcmp ole <4 x float> %151, zeroinitializer, !dbg !32
  %153 = select <4 x i1> %152, <4 x float> zeroinitializer, <4 x float> %151, !dbg !32
  %154 = fcmp olt <4 x float> %153, splat (float 6.000000e+00), !dbg !36
  %155 = extractelement <4 x float> %153, i64 3, !dbg !38
  %156 = fcmp uno float %155, 0.000000e+00, !dbg !39
  %157 = extractelement <4 x float> %153, i64 2, !dbg !38
  %158 = fcmp uno float %157, 0.000000e+00, !dbg !39
  %159 = extractelement <4 x float> %153, i64 1, !dbg !38
  %160 = fcmp uno float %159, 0.000000e+00, !dbg !39
  %161 = extractelement <4 x float> %153, i64 0, !dbg !38
  %162 = fcmp uno float %161, 0.000000e+00, !dbg !39
  %163 = extractelement <4 x i1> %154, i64 3, !dbg !40
  %164 = or i1 %163, %156, !dbg !40
  %165 = extractelement <4 x i1> %154, i64 2, !dbg !40
  %166 = or i1 %165, %158, !dbg !40
  %167 = extractelement <4 x i1> %154, i64 1, !dbg !40
  %168 = or i1 %167, %160, !dbg !40
  %169 = extractelement <4 x i1> %154, i64 0, !dbg !40
  %170 = or i1 %169, %162, !dbg !40
  %171 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !41
  %172 = bitcast float %155 to i32, !dbg !38
  %173 = select i1 %164, i32 %172, i32 1086324736, !dbg !42
  %174 = bitcast float %157 to i32, !dbg !38
  %175 = select i1 %166, i32 %174, i32 1086324736, !dbg !42
  %176 = bitcast float %159 to i32, !dbg !38
  %177 = select i1 %168, i32 %176, i32 1086324736, !dbg !42
  %178 = bitcast float %161 to i32, !dbg !38
  %179 = select i1 %170, i32 %178, i32 1086324736, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %175, i32 %177, i32 %179, ptr addrspace(1) %171, i1 true) #3, !dbg !38
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnskiwqarte5h43vdpauzjk7l7l3dcic5xhx3lmqzbr62dq6vwet.py", directory: "inductor_cache/ns")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 26, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 43, column: 42, scope: !7)
!36 = !DILocation(line: 110, column: 15, scope: !33, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 42, scope: !7)
!38 = !DILocation(line: 46, column: 37, scope: !7)
!39 = !DILocation(line: 112, column: 21, scope: !33, inlinedAt: !37)
!40 = !DILocation(line: 112, column: 16, scope: !33, inlinedAt: !37)
!41 = !DILocation(line: 46, column: 25, scope: !7)
!42 = !DILocation(line: 113, column: 29, scope: !33, inlinedAt: !37)
!43 = !DILocation(line: 46, column: 4, scope: !7)
