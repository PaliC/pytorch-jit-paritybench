; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_argmax_eq_stack_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 252, !dbg !11
  %12 = zext nneg i32 %11 to i64, !dbg !12
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !12
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !13
  %15 = bitcast i32 %14 to float, !dbg !13
  %16 = or disjoint i32 %11, 1, !dbg !14
  %17 = zext nneg i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = or disjoint i32 %11, 2, !dbg !17
  %22 = zext nneg i32 %21 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = bitcast i32 %24 to float, !dbg !19
  %26 = or disjoint i32 %11, 3, !dbg !20
  %27 = zext nneg i32 %26 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = fcmp ogt float %15, %20, !dbg !23
  %32 = fcmp oeq float %15, %20, !dbg !24
  %33 = fcmp uno float %15, 0.000000e+00, !dbg !25
  %34 = fcmp uno float %20, 0.000000e+00, !dbg !26
  %35 = xor i1 %34, true, !dbg !27
  %36 = and i1 %33, %35, !dbg !27
  %37 = or i1 %31, %36, !dbg !28
  %38 = and i1 %33, %34, !dbg !29
  %39 = or i1 %32, %38, !dbg !30
  %40 = or i1 %37, %39, !dbg !31
  %41 = select i1 %40, float %15, float %20, !dbg !32
  %not. = xor i1 %40, true, !dbg !33
  %42 = zext i1 %not. to i64, !dbg !33
  %43 = fcmp ogt float %41, %25, !dbg !34
  %44 = fcmp oeq float %41, %25, !dbg !35
  %45 = fcmp uno float %41, 0.000000e+00, !dbg !36
  %46 = fcmp uno float %25, 0.000000e+00, !dbg !37
  %47 = xor i1 %46, true, !dbg !38
  %48 = and i1 %45, %47, !dbg !38
  %49 = or i1 %43, %48, !dbg !39
  %50 = and i1 %46, %45, !dbg !40
  %51 = or i1 %44, %50, !dbg !41
  %52 = or i1 %49, %51, !dbg !42
  %53 = select i1 %52, float %41, float %25, !dbg !43
  %54 = select i1 %52, i64 %42, i64 2, !dbg !44
  %55 = fcmp ogt float %53, %30, !dbg !45
  %56 = fcmp oeq float %53, %30, !dbg !46
  %57 = fcmp uno float %53, 0.000000e+00, !dbg !47
  %58 = fcmp uno float %30, 0.000000e+00, !dbg !48
  %59 = xor i1 %58, true, !dbg !49
  %60 = and i1 %57, %59, !dbg !49
  %61 = or i1 %55, %60, !dbg !50
  %62 = and i1 %58, %57, !dbg !51
  %63 = or i1 %56, %62, !dbg !52
  %64 = or i1 %61, %63, !dbg !53
  %65 = select i1 %64, i64 %54, i64 3, !dbg !54
  %66 = icmp eq i64 %65, 0, !dbg !55
  %67 = zext i1 %66 to i64, !dbg !56
  %68 = zext i1 %66 to i32, !dbg !57
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !57
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !57
  %71 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !57
  %72 = insertelement <2 x i32> %71, i32 %70, i64 1, !dbg !57
  %73 = bitcast <2 x i32> %72 to i64, !dbg !57
  %74 = add i64 %67, %73, !dbg !61
  %extelt.offset = lshr i64 %74, 32, !dbg !57
  %75 = trunc nuw i64 %extelt.offset to i32, !dbg !57
  %76 = trunc i64 %74 to i32, !dbg !57
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !57
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !57
  %79 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !57
  %80 = insertelement <2 x i32> %79, i32 %78, i64 1, !dbg !57
  %81 = bitcast <2 x i32> %80 to i64, !dbg !57
  %82 = add i64 %74, %81, !dbg !61
  %extelt.offset1 = lshr i64 %82, 32, !dbg !57
  %83 = trunc nuw i64 %extelt.offset1 to i32, !dbg !57
  %84 = trunc i64 %82 to i32, !dbg !57
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !57
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 4, i32 31), !dbg !57
  %87 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !57
  %88 = insertelement <2 x i32> %87, i32 %86, i64 1, !dbg !57
  %89 = bitcast <2 x i32> %88 to i64, !dbg !57
  %90 = add i64 %82, %89, !dbg !61
  %extelt.offset2 = lshr i64 %90, 32, !dbg !57
  %91 = trunc nuw i64 %extelt.offset2 to i32, !dbg !57
  %92 = trunc i64 %90 to i32, !dbg !57
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !57
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !57
  %95 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !57
  %96 = insertelement <2 x i32> %95, i32 %94, i64 1, !dbg !57
  %97 = bitcast <2 x i32> %96 to i64, !dbg !57
  %98 = add i64 %90, %97, !dbg !61
  %extelt.offset3 = lshr i64 %98, 32, !dbg !57
  %99 = trunc nuw i64 %extelt.offset3 to i32, !dbg !57
  %100 = trunc i64 %98 to i32, !dbg !57
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !57
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !57
  %103 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !57
  %104 = insertelement <2 x i32> %103, i32 %102, i64 1, !dbg !57
  %105 = bitcast <2 x i32> %104 to i64, !dbg !57
  %106 = add i64 %98, %105, !dbg !61
  %107 = icmp eq i32 %8, 0, !dbg !57
  %108 = and i32 %9, 1, !dbg !57
  %109 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %108, !dbg !57
  %110 = insertelement <1 x i64> poison, i64 %106, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %109, <1 x i64> %110, i1 %107) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %111 = icmp slt i32 %7, 2, !dbg !57
  %112 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %7, !dbg !57
  %113 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %112, i1 %111) #3, !dbg !57
  %extelt.offset4 = lshr i64 %113, 32, !dbg !57
  %114 = trunc nuw i64 %extelt.offset4 to i32, !dbg !57
  %115 = trunc i64 %113 to i32, !dbg !57
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !57
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !57
  %118 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !57
  %119 = insertelement <2 x i32> %118, i32 %117, i64 1, !dbg !57
  %120 = bitcast <2 x i32> %119 to i64, !dbg !57
  %121 = add i64 %113, %120, !dbg !61
  %122 = and i32 %7, 1, !dbg !57
  %123 = icmp eq i32 %122, 0, !dbg !57
  %124 = and i1 %111, %123, !dbg !57
  %125 = insertelement <1 x i64> poison, i64 %121, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %112, <1 x i64> %125, i1 %124) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %126 = load i64, ptr addrspace(3) @global_smem, align 16, !dbg !57
  %127 = icmp eq i64 %65, 1, !dbg !63
  %128 = zext i1 %127 to i64, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %129 = zext i1 %127 to i32, !dbg !65
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 16, i32 31), !dbg !65
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !65
  %132 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !65
  %133 = insertelement <2 x i32> %132, i32 %131, i64 1, !dbg !65
  %134 = bitcast <2 x i32> %133 to i64, !dbg !65
  %135 = add i64 %134, %128, !dbg !67
  %extelt.offset6 = lshr i64 %135, 32, !dbg !65
  %136 = trunc nuw i64 %extelt.offset6 to i32, !dbg !65
  %137 = trunc i64 %135 to i32, !dbg !65
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !65
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !65
  %140 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !65
  %141 = insertelement <2 x i32> %140, i32 %139, i64 1, !dbg !65
  %142 = bitcast <2 x i32> %141 to i64, !dbg !65
  %143 = add i64 %135, %142, !dbg !67
  %extelt.offset7 = lshr i64 %143, 32, !dbg !65
  %144 = trunc nuw i64 %extelt.offset7 to i32, !dbg !65
  %145 = trunc i64 %143 to i32, !dbg !65
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 4, i32 31), !dbg !65
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !65
  %148 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !65
  %149 = insertelement <2 x i32> %148, i32 %147, i64 1, !dbg !65
  %150 = bitcast <2 x i32> %149 to i64, !dbg !65
  %151 = add i64 %143, %150, !dbg !67
  %extelt.offset8 = lshr i64 %151, 32, !dbg !65
  %152 = trunc nuw i64 %extelt.offset8 to i32, !dbg !65
  %153 = trunc i64 %151 to i32, !dbg !65
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !65
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !65
  %156 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !65
  %157 = insertelement <2 x i32> %156, i32 %155, i64 1, !dbg !65
  %158 = bitcast <2 x i32> %157 to i64, !dbg !65
  %159 = add i64 %151, %158, !dbg !67
  %extelt.offset9 = lshr i64 %159, 32, !dbg !65
  %160 = trunc nuw i64 %extelt.offset9 to i32, !dbg !65
  %161 = trunc i64 %159 to i32, !dbg !65
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !65
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !65
  %164 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !65
  %165 = insertelement <2 x i32> %164, i32 %163, i64 1, !dbg !65
  %166 = bitcast <2 x i32> %165 to i64, !dbg !65
  %167 = add i64 %159, %166, !dbg !67
  %168 = insertelement <1 x i64> poison, i64 %167, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %109, <1 x i64> %168, i1 %107) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %169 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %112, i1 %111) #3, !dbg !65
  %extelt.offset10 = lshr i64 %169, 32, !dbg !65
  %170 = trunc nuw i64 %extelt.offset10 to i32, !dbg !65
  %171 = trunc i64 %169 to i32, !dbg !65
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !65
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !65
  %174 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !65
  %175 = insertelement <2 x i32> %174, i32 %173, i64 1, !dbg !65
  %176 = bitcast <2 x i32> %175 to i64, !dbg !65
  %177 = add i64 %169, %176, !dbg !67
  %178 = insertelement <1 x i64> poison, i64 %177, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %112, <1 x i64> %178, i1 %124) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %179 = load i64, ptr addrspace(3) @global_smem, align 16, !dbg !65
  %180 = icmp eq i64 %65, 2, !dbg !68
  %181 = zext i1 %180 to i64, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %182 = zext i1 %180 to i32, !dbg !70
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 16, i32 31), !dbg !70
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !70
  %185 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !70
  %186 = insertelement <2 x i32> %185, i32 %184, i64 1, !dbg !70
  %187 = bitcast <2 x i32> %186 to i64, !dbg !70
  %188 = add i64 %187, %181, !dbg !72
  %extelt.offset12 = lshr i64 %188, 32, !dbg !70
  %189 = trunc nuw i64 %extelt.offset12 to i32, !dbg !70
  %190 = trunc i64 %188 to i32, !dbg !70
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !70
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !70
  %193 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !70
  %194 = insertelement <2 x i32> %193, i32 %192, i64 1, !dbg !70
  %195 = bitcast <2 x i32> %194 to i64, !dbg !70
  %196 = add i64 %188, %195, !dbg !72
  %extelt.offset13 = lshr i64 %196, 32, !dbg !70
  %197 = trunc nuw i64 %extelt.offset13 to i32, !dbg !70
  %198 = trunc i64 %196 to i32, !dbg !70
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !70
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !70
  %201 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !70
  %202 = insertelement <2 x i32> %201, i32 %200, i64 1, !dbg !70
  %203 = bitcast <2 x i32> %202 to i64, !dbg !70
  %204 = add i64 %196, %203, !dbg !72
  %extelt.offset14 = lshr i64 %204, 32, !dbg !70
  %205 = trunc nuw i64 %extelt.offset14 to i32, !dbg !70
  %206 = trunc i64 %204 to i32, !dbg !70
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 2, i32 31), !dbg !70
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !70
  %209 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !70
  %210 = insertelement <2 x i32> %209, i32 %208, i64 1, !dbg !70
  %211 = bitcast <2 x i32> %210 to i64, !dbg !70
  %212 = add i64 %204, %211, !dbg !72
  %extelt.offset15 = lshr i64 %212, 32, !dbg !70
  %213 = trunc nuw i64 %extelt.offset15 to i32, !dbg !70
  %214 = trunc i64 %212 to i32, !dbg !70
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !70
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !70
  %217 = insertelement <2 x i32> poison, i32 %215, i64 0, !dbg !70
  %218 = insertelement <2 x i32> %217, i32 %216, i64 1, !dbg !70
  %219 = bitcast <2 x i32> %218 to i64, !dbg !70
  %220 = add i64 %212, %219, !dbg !72
  %221 = insertelement <1 x i64> poison, i64 %220, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %109, <1 x i64> %221, i1 %107) #3, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %222 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %112, i1 %111) #3, !dbg !70
  %extelt.offset16 = lshr i64 %222, 32, !dbg !70
  %223 = trunc nuw i64 %extelt.offset16 to i32, !dbg !70
  %224 = trunc i64 %222 to i32, !dbg !70
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !70
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 1, i32 31), !dbg !70
  %227 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !70
  %228 = insertelement <2 x i32> %227, i32 %226, i64 1, !dbg !70
  %229 = bitcast <2 x i32> %228 to i64, !dbg !70
  %230 = add i64 %222, %229, !dbg !72
  %231 = insertelement <1 x i64> poison, i64 %230, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %112, <1 x i64> %231, i1 %124) #3, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %232 = load i64, ptr addrspace(3) @global_smem, align 16, !dbg !70
  %not.17 = xor i1 %64, true, !dbg !73
  %233 = zext i1 %not.17 to i64, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %234 = zext i1 %not.17 to i32, !dbg !75
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 16, i32 31), !dbg !75
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !75
  %237 = insertelement <2 x i32> poison, i32 %235, i64 0, !dbg !75
  %238 = insertelement <2 x i32> %237, i32 %236, i64 1, !dbg !75
  %239 = bitcast <2 x i32> %238 to i64, !dbg !75
  %240 = add i64 %239, %233, !dbg !77
  %extelt.offset19 = lshr i64 %240, 32, !dbg !75
  %241 = trunc nuw i64 %extelt.offset19 to i32, !dbg !75
  %242 = trunc i64 %240 to i32, !dbg !75
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !75
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !75
  %245 = insertelement <2 x i32> poison, i32 %243, i64 0, !dbg !75
  %246 = insertelement <2 x i32> %245, i32 %244, i64 1, !dbg !75
  %247 = bitcast <2 x i32> %246 to i64, !dbg !75
  %248 = add i64 %240, %247, !dbg !77
  %extelt.offset20 = lshr i64 %248, 32, !dbg !75
  %249 = trunc nuw i64 %extelt.offset20 to i32, !dbg !75
  %250 = trunc i64 %248 to i32, !dbg !75
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 4, i32 31), !dbg !75
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 4, i32 31), !dbg !75
  %253 = insertelement <2 x i32> poison, i32 %251, i64 0, !dbg !75
  %254 = insertelement <2 x i32> %253, i32 %252, i64 1, !dbg !75
  %255 = bitcast <2 x i32> %254 to i64, !dbg !75
  %256 = add i64 %248, %255, !dbg !77
  %extelt.offset21 = lshr i64 %256, 32, !dbg !75
  %257 = trunc nuw i64 %extelt.offset21 to i32, !dbg !75
  %258 = trunc i64 %256 to i32, !dbg !75
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !75
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 2, i32 31), !dbg !75
  %261 = insertelement <2 x i32> poison, i32 %259, i64 0, !dbg !75
  %262 = insertelement <2 x i32> %261, i32 %260, i64 1, !dbg !75
  %263 = bitcast <2 x i32> %262 to i64, !dbg !75
  %264 = add i64 %256, %263, !dbg !77
  %extelt.offset22 = lshr i64 %264, 32, !dbg !75
  %265 = trunc nuw i64 %extelt.offset22 to i32, !dbg !75
  %266 = trunc i64 %264 to i32, !dbg !75
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 1, i32 31), !dbg !75
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 1, i32 31), !dbg !75
  %269 = insertelement <2 x i32> poison, i32 %267, i64 0, !dbg !75
  %270 = insertelement <2 x i32> %269, i32 %268, i64 1, !dbg !75
  %271 = bitcast <2 x i32> %270 to i64, !dbg !75
  %272 = add i64 %264, %271, !dbg !77
  %273 = insertelement <1 x i64> poison, i64 %272, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %109, <1 x i64> %273, i1 %107) #3, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %274 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %112, i1 %111) #3, !dbg !75
  %extelt.offset23 = lshr i64 %274, 32, !dbg !75
  %275 = trunc nuw i64 %extelt.offset23 to i32, !dbg !75
  %276 = trunc i64 %274 to i32, !dbg !75
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !75
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !75
  %279 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !75
  %280 = insertelement <2 x i32> %279, i32 %278, i64 1, !dbg !75
  %281 = bitcast <2 x i32> %280 to i64, !dbg !75
  %282 = add i64 %274, %281, !dbg !77
  %283 = insertelement <1 x i64> poison, i64 %282, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %112, <1 x i64> %283, i1 %124) #3, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %284 = load i64, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %urem = and i32 %7, 63, !dbg !78
  %285 = icmp eq i32 %urem, 0, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %284, ptr addrspace(1) %1, i1 %285) #3, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %232, ptr addrspace(1) %2, i1 %285) #3, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %179, ptr addrspace(1) %3, i1 %285) #3, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %126, ptr addrspace(1) %4, i1 %285) #3, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cruukk6v2it7zysmze2n627e4tq44akfzegyzyqj4vwgts5q364w.py", directory: "inductor_cache/ru")
!4 = !{ptr @triton_per_fused_argmax_eq_stack_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_argmax_eq_stack_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_argmax_eq_stack_sum_0", linkageName: "triton_per_fused_argmax_eq_stack_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 32, scope: !7)
!12 = !DILocation(line: 30, column: 30, scope: !7)
!13 = !DILocation(line: 30, column: 37, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 41, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 31, scope: !7)
!19 = !DILocation(line: 32, column: 42, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 31, scope: !7)
!22 = !DILocation(line: 33, column: 42, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 19, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 37, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 18, scope: !7)
!31 = !DILocation(line: 46, column: 19, scope: !7)
!32 = !DILocation(line: 47, column: 34, scope: !7)
!33 = !DILocation(line: 48, column: 35, scope: !7)
!34 = !DILocation(line: 49, column: 20, scope: !7)
!35 = !DILocation(line: 50, column: 21, scope: !7)
!36 = !DILocation(line: 51, column: 21, scope: !7)
!37 = !DILocation(line: 52, column: 21, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 60, column: 20, scope: !7)
!43 = !DILocation(line: 61, column: 35, scope: !7)
!44 = !DILocation(line: 62, column: 35, scope: !7)
!45 = !DILocation(line: 63, column: 20, scope: !7)
!46 = !DILocation(line: 64, column: 21, scope: !7)
!47 = !DILocation(line: 65, column: 21, scope: !7)
!48 = !DILocation(line: 66, column: 21, scope: !7)
!49 = !DILocation(line: 67, column: 20, scope: !7)
!50 = !DILocation(line: 68, column: 20, scope: !7)
!51 = !DILocation(line: 69, column: 20, scope: !7)
!52 = !DILocation(line: 70, column: 20, scope: !7)
!53 = !DILocation(line: 74, column: 20, scope: !7)
!54 = !DILocation(line: 76, column: 35, scope: !7)
!55 = !DILocation(line: 77, column: 21, scope: !7)
!56 = !DILocation(line: 78, column: 21, scope: !7)
!57 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!60 = !DILocation(line: 80, column: 26, scope: !7)
!61 = !DILocation(line: 256, column: 15, scope: !62, inlinedAt: !60)
!62 = distinct !DILexicalBlockFile(scope: !58, file: !59, discriminator: 0)
!63 = !DILocation(line: 81, column: 21, scope: !7)
!64 = !DILocation(line: 82, column: 21, scope: !7)
!65 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !66)
!66 = !DILocation(line: 84, column: 26, scope: !7)
!67 = !DILocation(line: 256, column: 15, scope: !62, inlinedAt: !66)
!68 = !DILocation(line: 85, column: 21, scope: !7)
!69 = !DILocation(line: 86, column: 21, scope: !7)
!70 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !71)
!71 = !DILocation(line: 88, column: 26, scope: !7)
!72 = !DILocation(line: 256, column: 15, scope: !62, inlinedAt: !71)
!73 = !DILocation(line: 89, column: 21, scope: !7)
!74 = !DILocation(line: 90, column: 21, scope: !7)
!75 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !76)
!76 = !DILocation(line: 92, column: 26, scope: !7)
!77 = !DILocation(line: 256, column: 15, scope: !62, inlinedAt: !76)
!78 = !DILocation(line: 93, column: 68, scope: !7)
!79 = !DILocation(line: 94, column: 68, scope: !7)
!80 = !DILocation(line: 95, column: 69, scope: !7)
!81 = !DILocation(line: 96, column: 69, scope: !7)
!82 = !DILocation(line: 96, column: 4, scope: !7)
