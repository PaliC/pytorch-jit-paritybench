; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 16, !dbg !13
  %14 = or disjoint i32 %12, 32, !dbg !13
  %15 = or disjoint i32 %12, 48, !dbg !13
  %16 = or disjoint i32 %12, 64, !dbg !13
  %17 = or disjoint i32 %12, 80, !dbg !13
  %18 = or disjoint i32 %12, 96, !dbg !13
  %19 = or disjoint i32 %12, 112, !dbg !13
  %20 = or disjoint i32 %12, 128, !dbg !13
  %21 = or disjoint i32 %12, 144, !dbg !13
  %22 = or disjoint i32 %12, 160, !dbg !13
  %23 = or disjoint i32 %12, 176, !dbg !13
  %24 = or disjoint i32 %12, 192, !dbg !13
  %25 = or disjoint i32 %12, 208, !dbg !13
  %26 = or disjoint i32 %12, 224, !dbg !13
  %27 = or disjoint i32 %12, 240, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %29 = shl i32 %28, 4, !dbg !15
  %30 = and i32 %9, 15, !dbg !16
  %31 = or disjoint i32 %29, %30, !dbg !17
  %32 = icmp slt i32 %31, 9, !dbg !18
  %33 = sdiv i32 %12, 512, !dbg !19
  %34 = sdiv i32 %13, 512, !dbg !19
  %35 = sdiv i32 %14, 512, !dbg !19
  %36 = sdiv i32 %15, 512, !dbg !19
  %37 = sdiv i32 %16, 512, !dbg !19
  %38 = sdiv i32 %17, 512, !dbg !19
  %39 = sdiv i32 %18, 512, !dbg !19
  %40 = sdiv i32 %19, 512, !dbg !19
  %41 = sdiv i32 %20, 512, !dbg !19
  %42 = sdiv i32 %21, 512, !dbg !19
  %43 = sdiv i32 %22, 512, !dbg !19
  %44 = sdiv i32 %23, 512, !dbg !19
  %45 = sdiv i32 %24, 512, !dbg !19
  %46 = sdiv i32 %25, 512, !dbg !19
  %47 = sdiv i32 %26, 512, !dbg !19
  %48 = sdiv i32 %27, 512, !dbg !19
  %49 = mul i32 %12, 9, !dbg !20
  %50 = mul i32 %13, 9, !dbg !20
  %51 = mul i32 %14, 9, !dbg !20
  %52 = mul i32 %15, 9, !dbg !20
  %53 = mul i32 %16, 9, !dbg !20
  %54 = mul i32 %17, 9, !dbg !20
  %55 = mul i32 %18, 9, !dbg !20
  %56 = mul i32 %19, 9, !dbg !20
  %57 = mul i32 %20, 9, !dbg !20
  %58 = mul i32 %21, 9, !dbg !20
  %59 = mul i32 %22, 9, !dbg !20
  %60 = mul i32 %23, 9, !dbg !20
  %61 = mul i32 %24, 9, !dbg !20
  %62 = mul i32 %25, 9, !dbg !20
  %63 = mul i32 %26, 9, !dbg !20
  %64 = mul i32 %27, 9, !dbg !20
  %65 = add i32 %31, %49, !dbg !21
  %66 = add i32 %31, %50, !dbg !21
  %67 = add i32 %31, %51, !dbg !21
  %68 = add i32 %31, %52, !dbg !21
  %69 = add i32 %31, %53, !dbg !21
  %70 = add i32 %31, %54, !dbg !21
  %71 = add i32 %31, %55, !dbg !21
  %72 = add i32 %31, %56, !dbg !21
  %73 = add i32 %31, %57, !dbg !21
  %74 = add i32 %31, %58, !dbg !21
  %75 = add i32 %31, %59, !dbg !21
  %76 = add i32 %31, %60, !dbg !21
  %77 = add i32 %31, %61, !dbg !21
  %78 = add i32 %31, %62, !dbg !21
  %79 = add i32 %31, %63, !dbg !21
  %80 = add i32 %31, %64, !dbg !21
  %81 = sext i32 %65 to i64, !dbg !22
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !22
  %83 = sext i32 %66 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !22
  %85 = sext i32 %67 to i64, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !22
  %87 = sext i32 %68 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !22
  %89 = sext i32 %69 to i64, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !22
  %91 = sext i32 %70 to i64, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !22
  %93 = sext i32 %71 to i64, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !22
  %95 = sext i32 %72 to i64, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !22
  %97 = sext i32 %73 to i64, !dbg !22
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !22
  %99 = sext i32 %74 to i64, !dbg !22
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !22
  %101 = sext i32 %75 to i64, !dbg !22
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !22
  %103 = sext i32 %76 to i64, !dbg !22
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !22
  %105 = sext i32 %77 to i64, !dbg !22
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !22
  %107 = sext i32 %78 to i64, !dbg !22
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !22
  %109 = sext i32 %79 to i64, !dbg !22
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !22
  %111 = sext i32 %80 to i64, !dbg !22
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !22
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %32) #4, !dbg !23
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %32) #4, !dbg !23
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %32) #4, !dbg !23
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %32) #4, !dbg !23
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %32) #4, !dbg !23
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %32) #4, !dbg !23
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %32) #4, !dbg !23
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %32) #4, !dbg !23
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %32) #4, !dbg !23
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %32) #4, !dbg !23
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %32) #4, !dbg !23
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %32) #4, !dbg !23
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %32) #4, !dbg !23
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %32) #4, !dbg !23
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %32) #4, !dbg !23
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %32) #4, !dbg !23
  %129 = mul nsw i32 %33, 9, !dbg !24
  %130 = mul nsw i32 %34, 9, !dbg !24
  %131 = mul nsw i32 %35, 9, !dbg !24
  %132 = mul nsw i32 %36, 9, !dbg !24
  %133 = mul nsw i32 %37, 9, !dbg !24
  %134 = mul nsw i32 %38, 9, !dbg !24
  %135 = mul nsw i32 %39, 9, !dbg !24
  %136 = mul nsw i32 %40, 9, !dbg !24
  %137 = mul nsw i32 %41, 9, !dbg !24
  %138 = mul nsw i32 %42, 9, !dbg !24
  %139 = mul nsw i32 %43, 9, !dbg !24
  %140 = mul nsw i32 %44, 9, !dbg !24
  %141 = mul nsw i32 %45, 9, !dbg !24
  %142 = mul nsw i32 %46, 9, !dbg !24
  %143 = mul nsw i32 %47, 9, !dbg !24
  %144 = mul nsw i32 %48, 9, !dbg !24
  %145 = add i32 %129, %31, !dbg !25
  %146 = add i32 %31, %130, !dbg !25
  %147 = add i32 %31, %131, !dbg !25
  %148 = add i32 %31, %132, !dbg !25
  %149 = add i32 %31, %133, !dbg !25
  %150 = add i32 %31, %134, !dbg !25
  %151 = add i32 %31, %135, !dbg !25
  %152 = add i32 %31, %136, !dbg !25
  %153 = add i32 %31, %137, !dbg !25
  %154 = add i32 %31, %138, !dbg !25
  %155 = add i32 %31, %139, !dbg !25
  %156 = add i32 %31, %140, !dbg !25
  %157 = add i32 %31, %141, !dbg !25
  %158 = add i32 %31, %142, !dbg !25
  %159 = add i32 %31, %143, !dbg !25
  %160 = add i32 %31, %144, !dbg !25
  %161 = sext i32 %145 to i64, !dbg !26
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !26
  %163 = sext i32 %146 to i64, !dbg !26
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !26
  %165 = sext i32 %147 to i64, !dbg !26
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !26
  %167 = sext i32 %148 to i64, !dbg !26
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !26
  %169 = sext i32 %149 to i64, !dbg !26
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !26
  %171 = sext i32 %150 to i64, !dbg !26
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !26
  %173 = sext i32 %151 to i64, !dbg !26
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !26
  %175 = sext i32 %152 to i64, !dbg !26
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !26
  %177 = sext i32 %153 to i64, !dbg !26
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !26
  %179 = sext i32 %154 to i64, !dbg !26
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !26
  %181 = sext i32 %155 to i64, !dbg !26
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !26
  %183 = sext i32 %156 to i64, !dbg !26
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %183, !dbg !26
  %185 = sext i32 %157 to i64, !dbg !26
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !26
  %187 = sext i32 %158 to i64, !dbg !26
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !26
  %189 = sext i32 %159 to i64, !dbg !26
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !26
  %191 = sext i32 %160 to i64, !dbg !26
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !26
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %32) #4, !dbg !27
  %194 = bitcast i32 %193 to float, !dbg !27
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %32) #4, !dbg !27
  %196 = bitcast i32 %195 to float, !dbg !27
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %32) #4, !dbg !27
  %198 = bitcast i32 %197 to float, !dbg !27
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %32) #4, !dbg !27
  %200 = bitcast i32 %199 to float, !dbg !27
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %32) #4, !dbg !27
  %202 = bitcast i32 %201 to float, !dbg !27
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %32) #4, !dbg !27
  %204 = bitcast i32 %203 to float, !dbg !27
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %32) #4, !dbg !27
  %206 = bitcast i32 %205 to float, !dbg !27
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %32) #4, !dbg !27
  %208 = bitcast i32 %207 to float, !dbg !27
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %32) #4, !dbg !27
  %210 = bitcast i32 %209 to float, !dbg !27
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %32) #4, !dbg !27
  %212 = bitcast i32 %211 to float, !dbg !27
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %32) #4, !dbg !27
  %214 = bitcast i32 %213 to float, !dbg !27
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %32) #4, !dbg !27
  %216 = bitcast i32 %215 to float, !dbg !27
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %32) #4, !dbg !27
  %218 = bitcast i32 %217 to float, !dbg !27
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %32) #4, !dbg !27
  %220 = bitcast i32 %219 to float, !dbg !27
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %32) #4, !dbg !27
  %222 = bitcast i32 %221 to float, !dbg !27
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %32) #4, !dbg !27
  %224 = bitcast i32 %223 to float, !dbg !27
  %225 = fadd float %194, 0x3E112E0BE0000000, !dbg !28
  %226 = fadd float %196, 0x3E112E0BE0000000, !dbg !28
  %227 = fadd float %198, 0x3E112E0BE0000000, !dbg !28
  %228 = fadd float %200, 0x3E112E0BE0000000, !dbg !28
  %229 = fadd float %202, 0x3E112E0BE0000000, !dbg !28
  %230 = fadd float %204, 0x3E112E0BE0000000, !dbg !28
  %231 = fadd float %206, 0x3E112E0BE0000000, !dbg !28
  %232 = fadd float %208, 0x3E112E0BE0000000, !dbg !28
  %233 = fadd float %210, 0x3E112E0BE0000000, !dbg !28
  %234 = fadd float %212, 0x3E112E0BE0000000, !dbg !28
  %235 = fadd float %214, 0x3E112E0BE0000000, !dbg !28
  %236 = fadd float %216, 0x3E112E0BE0000000, !dbg !28
  %237 = fadd float %218, 0x3E112E0BE0000000, !dbg !28
  %238 = fadd float %220, 0x3E112E0BE0000000, !dbg !28
  %239 = fadd float %222, 0x3E112E0BE0000000, !dbg !28
  %240 = fadd float %224, 0x3E112E0BE0000000, !dbg !28
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %241, 0, !dbg !29
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %242, 0, !dbg !29
  br i1 %.not.i, label %248, label %243, !dbg !29

243:                                              ; preds = %6
  br i1 %.not1.i, label %246, label %244, !dbg !29

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %225) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %225) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

248:                                              ; preds = %6
  br i1 %.not1.i, label %251, label %249, !dbg !29

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %225) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %225) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %244, %246, %249, %251
  %.0.i = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !29
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i34 = icmp eq i32 %253, 0, !dbg !29
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i37 = icmp eq i32 %254, 0, !dbg !29
  br i1 %.not.i34, label %260, label %255, !dbg !29

255:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %258, label %256, !dbg !29

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #4, !dbg !29
  br label %__nv_sqrtf.exit38, !dbg !29

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #4, !dbg !29
  br label %__nv_sqrtf.exit38, !dbg !29

260:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %263, label %261, !dbg !29

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #4, !dbg !29
  br label %__nv_sqrtf.exit38, !dbg !29

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #4, !dbg !29
  br label %__nv_sqrtf.exit38, !dbg !29

__nv_sqrtf.exit38:                                ; preds = %256, %258, %261, %263
  %.0.i36 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !29
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i39 = icmp eq i32 %265, 0, !dbg !29
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i42 = icmp eq i32 %266, 0, !dbg !29
  br i1 %.not.i39, label %272, label %267, !dbg !29

267:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %270, label %268, !dbg !29

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %227) #4, !dbg !29
  br label %__nv_sqrtf.exit43, !dbg !29

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %227) #4, !dbg !29
  br label %__nv_sqrtf.exit43, !dbg !29

272:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %275, label %273, !dbg !29

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %227) #4, !dbg !29
  br label %__nv_sqrtf.exit43, !dbg !29

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %227) #4, !dbg !29
  br label %__nv_sqrtf.exit43, !dbg !29

__nv_sqrtf.exit43:                                ; preds = %268, %270, %273, %275
  %.0.i41 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !29
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i44 = icmp eq i32 %277, 0, !dbg !29
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i47 = icmp eq i32 %278, 0, !dbg !29
  br i1 %.not.i44, label %284, label %279, !dbg !29

279:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %282, label %280, !dbg !29

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %228) #4, !dbg !29
  br label %__nv_sqrtf.exit48, !dbg !29

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %228) #4, !dbg !29
  br label %__nv_sqrtf.exit48, !dbg !29

284:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %287, label %285, !dbg !29

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.f(float %228) #4, !dbg !29
  br label %__nv_sqrtf.exit48, !dbg !29

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.f(float %228) #4, !dbg !29
  br label %__nv_sqrtf.exit48, !dbg !29

__nv_sqrtf.exit48:                                ; preds = %280, %282, %285, %287
  %.0.i46 = phi float [ %281, %280 ], [ %283, %282 ], [ %286, %285 ], [ %288, %287 ], !dbg !29
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i49 = icmp eq i32 %289, 0, !dbg !29
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i52 = icmp eq i32 %290, 0, !dbg !29
  br i1 %.not.i49, label %296, label %291, !dbg !29

291:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %294, label %292, !dbg !29

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #4, !dbg !29
  br label %__nv_sqrtf.exit53, !dbg !29

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #4, !dbg !29
  br label %__nv_sqrtf.exit53, !dbg !29

296:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %299, label %297, !dbg !29

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #4, !dbg !29
  br label %__nv_sqrtf.exit53, !dbg !29

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #4, !dbg !29
  br label %__nv_sqrtf.exit53, !dbg !29

__nv_sqrtf.exit53:                                ; preds = %292, %294, %297, %299
  %.0.i51 = phi float [ %293, %292 ], [ %295, %294 ], [ %298, %297 ], [ %300, %299 ], !dbg !29
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i54 = icmp eq i32 %301, 0, !dbg !29
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i57 = icmp eq i32 %302, 0, !dbg !29
  br i1 %.not.i54, label %308, label %303, !dbg !29

303:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %306, label %304, !dbg !29

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #4, !dbg !29
  br label %__nv_sqrtf.exit58, !dbg !29

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #4, !dbg !29
  br label %__nv_sqrtf.exit58, !dbg !29

308:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %311, label %309, !dbg !29

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #4, !dbg !29
  br label %__nv_sqrtf.exit58, !dbg !29

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #4, !dbg !29
  br label %__nv_sqrtf.exit58, !dbg !29

__nv_sqrtf.exit58:                                ; preds = %304, %306, %309, %311
  %.0.i56 = phi float [ %305, %304 ], [ %307, %306 ], [ %310, %309 ], [ %312, %311 ], !dbg !29
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i59 = icmp eq i32 %313, 0, !dbg !29
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i62 = icmp eq i32 %314, 0, !dbg !29
  br i1 %.not.i59, label %320, label %315, !dbg !29

315:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %318, label %316, !dbg !29

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %231) #4, !dbg !29
  br label %__nv_sqrtf.exit63, !dbg !29

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %231) #4, !dbg !29
  br label %__nv_sqrtf.exit63, !dbg !29

320:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %323, label %321, !dbg !29

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.f(float %231) #4, !dbg !29
  br label %__nv_sqrtf.exit63, !dbg !29

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.f(float %231) #4, !dbg !29
  br label %__nv_sqrtf.exit63, !dbg !29

__nv_sqrtf.exit63:                                ; preds = %316, %318, %321, %323
  %.0.i61 = phi float [ %317, %316 ], [ %319, %318 ], [ %322, %321 ], [ %324, %323 ], !dbg !29
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i64 = icmp eq i32 %325, 0, !dbg !29
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i67 = icmp eq i32 %326, 0, !dbg !29
  br i1 %.not.i64, label %332, label %327, !dbg !29

327:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %330, label %328, !dbg !29

328:                                              ; preds = %327
  %329 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #4, !dbg !29
  br label %__nv_sqrtf.exit68, !dbg !29

330:                                              ; preds = %327
  %331 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #4, !dbg !29
  br label %__nv_sqrtf.exit68, !dbg !29

332:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %335, label %333, !dbg !29

333:                                              ; preds = %332
  %334 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #4, !dbg !29
  br label %__nv_sqrtf.exit68, !dbg !29

335:                                              ; preds = %332
  %336 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #4, !dbg !29
  br label %__nv_sqrtf.exit68, !dbg !29

__nv_sqrtf.exit68:                                ; preds = %328, %330, %333, %335
  %.0.i66 = phi float [ %329, %328 ], [ %331, %330 ], [ %334, %333 ], [ %336, %335 ], !dbg !29
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i69 = icmp eq i32 %337, 0, !dbg !29
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i72 = icmp eq i32 %338, 0, !dbg !29
  br i1 %.not.i69, label %344, label %339, !dbg !29

339:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %342, label %340, !dbg !29

340:                                              ; preds = %339
  %341 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %233) #4, !dbg !29
  br label %__nv_sqrtf.exit73, !dbg !29

342:                                              ; preds = %339
  %343 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %233) #4, !dbg !29
  br label %__nv_sqrtf.exit73, !dbg !29

344:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %347, label %345, !dbg !29

345:                                              ; preds = %344
  %346 = tail call float @llvm.nvvm.sqrt.rn.f(float %233) #4, !dbg !29
  br label %__nv_sqrtf.exit73, !dbg !29

347:                                              ; preds = %344
  %348 = tail call float @llvm.nvvm.sqrt.approx.f(float %233) #4, !dbg !29
  br label %__nv_sqrtf.exit73, !dbg !29

__nv_sqrtf.exit73:                                ; preds = %340, %342, %345, %347
  %.0.i71 = phi float [ %341, %340 ], [ %343, %342 ], [ %346, %345 ], [ %348, %347 ], !dbg !29
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i74 = icmp eq i32 %349, 0, !dbg !29
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i77 = icmp eq i32 %350, 0, !dbg !29
  br i1 %.not.i74, label %356, label %351, !dbg !29

351:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %354, label %352, !dbg !29

352:                                              ; preds = %351
  %353 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %234) #4, !dbg !29
  br label %__nv_sqrtf.exit78, !dbg !29

354:                                              ; preds = %351
  %355 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %234) #4, !dbg !29
  br label %__nv_sqrtf.exit78, !dbg !29

356:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %359, label %357, !dbg !29

357:                                              ; preds = %356
  %358 = tail call float @llvm.nvvm.sqrt.rn.f(float %234) #4, !dbg !29
  br label %__nv_sqrtf.exit78, !dbg !29

359:                                              ; preds = %356
  %360 = tail call float @llvm.nvvm.sqrt.approx.f(float %234) #4, !dbg !29
  br label %__nv_sqrtf.exit78, !dbg !29

__nv_sqrtf.exit78:                                ; preds = %352, %354, %357, %359
  %.0.i76 = phi float [ %353, %352 ], [ %355, %354 ], [ %358, %357 ], [ %360, %359 ], !dbg !29
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i79 = icmp eq i32 %361, 0, !dbg !29
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i82 = icmp eq i32 %362, 0, !dbg !29
  br i1 %.not.i79, label %368, label %363, !dbg !29

363:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %366, label %364, !dbg !29

364:                                              ; preds = %363
  %365 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %235) #4, !dbg !29
  br label %__nv_sqrtf.exit83, !dbg !29

366:                                              ; preds = %363
  %367 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %235) #4, !dbg !29
  br label %__nv_sqrtf.exit83, !dbg !29

368:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %371, label %369, !dbg !29

369:                                              ; preds = %368
  %370 = tail call float @llvm.nvvm.sqrt.rn.f(float %235) #4, !dbg !29
  br label %__nv_sqrtf.exit83, !dbg !29

371:                                              ; preds = %368
  %372 = tail call float @llvm.nvvm.sqrt.approx.f(float %235) #4, !dbg !29
  br label %__nv_sqrtf.exit83, !dbg !29

__nv_sqrtf.exit83:                                ; preds = %364, %366, %369, %371
  %.0.i81 = phi float [ %365, %364 ], [ %367, %366 ], [ %370, %369 ], [ %372, %371 ], !dbg !29
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i84 = icmp eq i32 %373, 0, !dbg !29
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i87 = icmp eq i32 %374, 0, !dbg !29
  br i1 %.not.i84, label %380, label %375, !dbg !29

375:                                              ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %378, label %376, !dbg !29

376:                                              ; preds = %375
  %377 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %236) #4, !dbg !29
  br label %__nv_sqrtf.exit88, !dbg !29

378:                                              ; preds = %375
  %379 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %236) #4, !dbg !29
  br label %__nv_sqrtf.exit88, !dbg !29

380:                                              ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %383, label %381, !dbg !29

381:                                              ; preds = %380
  %382 = tail call float @llvm.nvvm.sqrt.rn.f(float %236) #4, !dbg !29
  br label %__nv_sqrtf.exit88, !dbg !29

383:                                              ; preds = %380
  %384 = tail call float @llvm.nvvm.sqrt.approx.f(float %236) #4, !dbg !29
  br label %__nv_sqrtf.exit88, !dbg !29

__nv_sqrtf.exit88:                                ; preds = %376, %378, %381, %383
  %.0.i86 = phi float [ %377, %376 ], [ %379, %378 ], [ %382, %381 ], [ %384, %383 ], !dbg !29
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i89 = icmp eq i32 %385, 0, !dbg !29
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i92 = icmp eq i32 %386, 0, !dbg !29
  br i1 %.not.i89, label %392, label %387, !dbg !29

387:                                              ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %390, label %388, !dbg !29

388:                                              ; preds = %387
  %389 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %237) #4, !dbg !29
  br label %__nv_sqrtf.exit93, !dbg !29

390:                                              ; preds = %387
  %391 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %237) #4, !dbg !29
  br label %__nv_sqrtf.exit93, !dbg !29

392:                                              ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %395, label %393, !dbg !29

393:                                              ; preds = %392
  %394 = tail call float @llvm.nvvm.sqrt.rn.f(float %237) #4, !dbg !29
  br label %__nv_sqrtf.exit93, !dbg !29

395:                                              ; preds = %392
  %396 = tail call float @llvm.nvvm.sqrt.approx.f(float %237) #4, !dbg !29
  br label %__nv_sqrtf.exit93, !dbg !29

__nv_sqrtf.exit93:                                ; preds = %388, %390, %393, %395
  %.0.i91 = phi float [ %389, %388 ], [ %391, %390 ], [ %394, %393 ], [ %396, %395 ], !dbg !29
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i94 = icmp eq i32 %397, 0, !dbg !29
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i97 = icmp eq i32 %398, 0, !dbg !29
  br i1 %.not.i94, label %404, label %399, !dbg !29

399:                                              ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %402, label %400, !dbg !29

400:                                              ; preds = %399
  %401 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %238) #4, !dbg !29
  br label %__nv_sqrtf.exit98, !dbg !29

402:                                              ; preds = %399
  %403 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %238) #4, !dbg !29
  br label %__nv_sqrtf.exit98, !dbg !29

404:                                              ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %407, label %405, !dbg !29

405:                                              ; preds = %404
  %406 = tail call float @llvm.nvvm.sqrt.rn.f(float %238) #4, !dbg !29
  br label %__nv_sqrtf.exit98, !dbg !29

407:                                              ; preds = %404
  %408 = tail call float @llvm.nvvm.sqrt.approx.f(float %238) #4, !dbg !29
  br label %__nv_sqrtf.exit98, !dbg !29

__nv_sqrtf.exit98:                                ; preds = %400, %402, %405, %407
  %.0.i96 = phi float [ %401, %400 ], [ %403, %402 ], [ %406, %405 ], [ %408, %407 ], !dbg !29
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i99 = icmp eq i32 %409, 0, !dbg !29
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i102 = icmp eq i32 %410, 0, !dbg !29
  br i1 %.not.i99, label %416, label %411, !dbg !29

411:                                              ; preds = %__nv_sqrtf.exit98
  br i1 %.not1.i102, label %414, label %412, !dbg !29

412:                                              ; preds = %411
  %413 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %239) #4, !dbg !29
  br label %__nv_sqrtf.exit103, !dbg !29

414:                                              ; preds = %411
  %415 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %239) #4, !dbg !29
  br label %__nv_sqrtf.exit103, !dbg !29

416:                                              ; preds = %__nv_sqrtf.exit98
  br i1 %.not1.i102, label %419, label %417, !dbg !29

417:                                              ; preds = %416
  %418 = tail call float @llvm.nvvm.sqrt.rn.f(float %239) #4, !dbg !29
  br label %__nv_sqrtf.exit103, !dbg !29

419:                                              ; preds = %416
  %420 = tail call float @llvm.nvvm.sqrt.approx.f(float %239) #4, !dbg !29
  br label %__nv_sqrtf.exit103, !dbg !29

__nv_sqrtf.exit103:                               ; preds = %412, %414, %417, %419
  %.0.i101 = phi float [ %413, %412 ], [ %415, %414 ], [ %418, %417 ], [ %420, %419 ], !dbg !29
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i104 = icmp eq i32 %421, 0, !dbg !29
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i107 = icmp eq i32 %422, 0, !dbg !29
  br i1 %.not.i104, label %428, label %423, !dbg !29

423:                                              ; preds = %__nv_sqrtf.exit103
  br i1 %.not1.i107, label %426, label %424, !dbg !29

424:                                              ; preds = %423
  %425 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %240) #4, !dbg !29
  br label %__nv_sqrtf.exit108, !dbg !29

426:                                              ; preds = %423
  %427 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %240) #4, !dbg !29
  br label %__nv_sqrtf.exit108, !dbg !29

428:                                              ; preds = %__nv_sqrtf.exit103
  br i1 %.not1.i107, label %431, label %429, !dbg !29

429:                                              ; preds = %428
  %430 = tail call float @llvm.nvvm.sqrt.rn.f(float %240) #4, !dbg !29
  br label %__nv_sqrtf.exit108, !dbg !29

431:                                              ; preds = %428
  %432 = tail call float @llvm.nvvm.sqrt.approx.f(float %240) #4, !dbg !29
  br label %__nv_sqrtf.exit108, !dbg !29

__nv_sqrtf.exit108:                               ; preds = %424, %426, %429, %431
  %.0.i106 = phi float [ %425, %424 ], [ %427, %426 ], [ %430, %429 ], [ %432, %431 ], !dbg !29
  %433 = bitcast i32 %128 to float, !dbg !23
  %434 = bitcast i32 %127 to float, !dbg !23
  %435 = bitcast i32 %126 to float, !dbg !23
  %436 = bitcast i32 %125 to float, !dbg !23
  %437 = bitcast i32 %124 to float, !dbg !23
  %438 = bitcast i32 %123 to float, !dbg !23
  %439 = bitcast i32 %122 to float, !dbg !23
  %440 = bitcast i32 %121 to float, !dbg !23
  %441 = bitcast i32 %120 to float, !dbg !23
  %442 = bitcast i32 %119 to float, !dbg !23
  %443 = bitcast i32 %118 to float, !dbg !23
  %444 = bitcast i32 %117 to float, !dbg !23
  %445 = bitcast i32 %116 to float, !dbg !23
  %446 = bitcast i32 %115 to float, !dbg !23
  %447 = bitcast i32 %114 to float, !dbg !23
  %448 = bitcast i32 %113 to float, !dbg !23
  %449 = shl i32 %9, 2, !dbg !12
  %450 = and i32 %449, 252, !dbg !12
  %451 = or disjoint i32 %8, %450, !dbg !13
  %.frozen = freeze i32 %451, !dbg !19
  %452 = sdiv i32 %.frozen, 512, !dbg !19
  %453 = mul i32 %452, 512, !dbg !30
  %.decomposed = sub i32 %.frozen, %453, !dbg !30
  %.lobit13 = lshr i32 %9, 6, !dbg !16
  %454 = and i32 %.lobit13, 3, !dbg !16
  %455 = or disjoint i32 %454, %29, !dbg !17
  %456 = icmp slt i32 %29, 0, !dbg !18
  %457 = or disjoint i32 %455, 8, !dbg !17
  %458 = icmp slt i32 %457, 9, !dbg !18
  %459 = or disjoint i32 %455, 4, !dbg !17
  %460 = icmp slt i32 %459, 9, !dbg !18
  %461 = icmp slt i32 %455, 9, !dbg !18
  %462 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !31
  %463 = fadd float %.0.i36, 0x3DDB7CDFE0000000, !dbg !31
  %464 = fadd float %.0.i41, 0x3DDB7CDFE0000000, !dbg !31
  %465 = fadd float %.0.i46, 0x3DDB7CDFE0000000, !dbg !31
  %466 = fadd float %.0.i51, 0x3DDB7CDFE0000000, !dbg !31
  %467 = fadd float %.0.i56, 0x3DDB7CDFE0000000, !dbg !31
  %468 = fadd float %.0.i61, 0x3DDB7CDFE0000000, !dbg !31
  %469 = fadd float %.0.i66, 0x3DDB7CDFE0000000, !dbg !31
  %470 = fadd float %.0.i71, 0x3DDB7CDFE0000000, !dbg !31
  %471 = fadd float %.0.i76, 0x3DDB7CDFE0000000, !dbg !31
  %472 = fadd float %.0.i81, 0x3DDB7CDFE0000000, !dbg !31
  %473 = fadd float %.0.i86, 0x3DDB7CDFE0000000, !dbg !31
  %474 = fadd float %.0.i91, 0x3DDB7CDFE0000000, !dbg !31
  %475 = fadd float %.0.i96, 0x3DDB7CDFE0000000, !dbg !31
  %476 = fadd float %.0.i101, 0x3DDB7CDFE0000000, !dbg !31
  %477 = fadd float %.0.i106, 0x3DDB7CDFE0000000, !dbg !31
  %478 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %448, float %462) #4, !dbg !32
  %479 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %447, float %463) #4, !dbg !32
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %446, float %464) #4, !dbg !32
  %481 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %445, float %465) #4, !dbg !32
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %444, float %466) #4, !dbg !32
  %483 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %443, float %467) #4, !dbg !32
  %484 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %442, float %468) #4, !dbg !32
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %441, float %469) #4, !dbg !32
  %486 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %440, float %470) #4, !dbg !32
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %439, float %471) #4, !dbg !32
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %438, float %472) #4, !dbg !32
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %437, float %473) #4, !dbg !32
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %436, float %474) #4, !dbg !32
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %435, float %475) #4, !dbg !32
  %492 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %434, float %476) #4, !dbg !32
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %433, float %477) #4, !dbg !32
  %494 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !33
  %495 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !33
  %496 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !33
  %497 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !33
  %498 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !33
  %499 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !33
  %500 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !33
  %501 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !33
  %502 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !33
  %503 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !33
  %504 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !33
  %505 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !33
  %506 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !33
  %507 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !33
  %508 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !33
  %509 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !33
  %510 = bitcast float %478 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %510, ptr addrspace(1) %494, i1 %32) #4, !dbg !34
  %511 = bitcast float %479 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %511, ptr addrspace(1) %495, i1 %32) #4, !dbg !34
  %512 = bitcast float %480 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %512, ptr addrspace(1) %496, i1 %32) #4, !dbg !34
  %513 = bitcast float %481 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %513, ptr addrspace(1) %497, i1 %32) #4, !dbg !34
  %514 = bitcast float %482 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %514, ptr addrspace(1) %498, i1 %32) #4, !dbg !34
  %515 = bitcast float %483 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %515, ptr addrspace(1) %499, i1 %32) #4, !dbg !34
  %516 = bitcast float %484 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %516, ptr addrspace(1) %500, i1 %32) #4, !dbg !34
  %517 = bitcast float %485 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %517, ptr addrspace(1) %501, i1 %32) #4, !dbg !34
  %518 = bitcast float %486 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %518, ptr addrspace(1) %502, i1 %32) #4, !dbg !34
  %519 = bitcast float %487 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %519, ptr addrspace(1) %503, i1 %32) #4, !dbg !34
  %520 = bitcast float %488 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %520, ptr addrspace(1) %504, i1 %32) #4, !dbg !34
  %521 = bitcast float %489 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %521, ptr addrspace(1) %505, i1 %32) #4, !dbg !34
  %522 = bitcast float %490 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %522, ptr addrspace(1) %506, i1 %32) #4, !dbg !34
  %523 = bitcast float %491 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %523, ptr addrspace(1) %507, i1 %32) #4, !dbg !34
  %524 = bitcast float %492 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %524, ptr addrspace(1) %508, i1 %32) #4, !dbg !34
  %525 = bitcast float %493 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %525, ptr addrspace(1) %509, i1 %32) #4, !dbg !34
  %526 = shl i32 %455, 9, !dbg !35
  %527 = shl i32 %459, 9, !dbg !35
  %528 = shl i32 %457, 9, !dbg !35
  %529 = or disjoint i32 %526, 6144, !dbg !35
  %530 = mul i32 %452, 4608, !dbg !36
  %531 = add i32 %530, %.decomposed, !dbg !37
  %532 = add i32 %531, %526, !dbg !38
  %533 = add i32 %531, %527, !dbg !38
  %534 = add i32 %531, %528, !dbg !38
  %535 = add i32 %531, %529, !dbg !38
  %536 = sext i32 %532 to i64, !dbg !39
  %537 = getelementptr float, ptr addrspace(1) %3, i64 %536, !dbg !39
  %538 = sext i32 %533 to i64, !dbg !39
  %539 = getelementptr float, ptr addrspace(1) %3, i64 %538, !dbg !39
  %540 = sext i32 %534 to i64, !dbg !39
  %541 = getelementptr float, ptr addrspace(1) %3, i64 %540, !dbg !39
  %542 = sext i32 %535 to i64, !dbg !39
  %543 = getelementptr float, ptr addrspace(1) %3, i64 %542, !dbg !39
  %544 = shl i32 %9, 8, !dbg !40
  %545 = and i32 %544, 3840, !dbg !40
  %546 = or disjoint i32 %545, %11, !dbg !40
  %547 = and i32 %449, 1020, !dbg !40
  %548 = lshr exact i32 %545, 4, !dbg !40
  %549 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %548, !dbg !40
  %550 = getelementptr float, ptr addrspace(3) %549, i32 %546, !dbg !40
  %551 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %550, <1 x i32> %551, i1 true) #4, !dbg !40
  %552 = or disjoint i32 %546, 16, !dbg !40
  %553 = getelementptr float, ptr addrspace(3) %549, i32 %552, !dbg !40
  %554 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %553, <1 x i32> %554, i1 true) #4, !dbg !40
  %555 = or disjoint i32 %546, 32, !dbg !40
  %556 = getelementptr float, ptr addrspace(3) %549, i32 %555, !dbg !40
  %557 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %556, <1 x i32> %557, i1 true) #4, !dbg !40
  %558 = or disjoint i32 %546, 48, !dbg !40
  %559 = getelementptr float, ptr addrspace(3) %549, i32 %558, !dbg !40
  %560 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %559, <1 x i32> %560, i1 true) #4, !dbg !40
  %561 = or disjoint i32 %546, 64, !dbg !40
  %562 = getelementptr float, ptr addrspace(3) %549, i32 %561, !dbg !40
  %563 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %562, <1 x i32> %563, i1 true) #4, !dbg !40
  %564 = or disjoint i32 %546, 80, !dbg !40
  %565 = getelementptr float, ptr addrspace(3) %549, i32 %564, !dbg !40
  %566 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %565, <1 x i32> %566, i1 true) #4, !dbg !40
  %567 = or disjoint i32 %546, 96, !dbg !40
  %568 = getelementptr float, ptr addrspace(3) %549, i32 %567, !dbg !40
  %569 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %568, <1 x i32> %569, i1 true) #4, !dbg !40
  %570 = or disjoint i32 %546, 112, !dbg !40
  %571 = getelementptr float, ptr addrspace(3) %549, i32 %570, !dbg !40
  %572 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %571, <1 x i32> %572, i1 true) #4, !dbg !40
  %573 = or disjoint i32 %546, 128, !dbg !40
  %574 = getelementptr float, ptr addrspace(3) %549, i32 %573, !dbg !40
  %575 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %574, <1 x i32> %575, i1 true) #4, !dbg !40
  %576 = or disjoint i32 %546, 144, !dbg !40
  %577 = getelementptr float, ptr addrspace(3) %549, i32 %576, !dbg !40
  %578 = insertelement <1 x i32> poison, i32 %122, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %577, <1 x i32> %578, i1 true) #4, !dbg !40
  %579 = or disjoint i32 %546, 160, !dbg !40
  %580 = getelementptr float, ptr addrspace(3) %549, i32 %579, !dbg !40
  %581 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %580, <1 x i32> %581, i1 true) #4, !dbg !40
  %582 = or disjoint i32 %546, 176, !dbg !40
  %583 = getelementptr float, ptr addrspace(3) %549, i32 %582, !dbg !40
  %584 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %583, <1 x i32> %584, i1 true) #4, !dbg !40
  %585 = or disjoint i32 %546, 192, !dbg !40
  %586 = getelementptr float, ptr addrspace(3) %549, i32 %585, !dbg !40
  %587 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %586, <1 x i32> %587, i1 true) #4, !dbg !40
  %588 = or disjoint i32 %546, 208, !dbg !40
  %589 = getelementptr float, ptr addrspace(3) %549, i32 %588, !dbg !40
  %590 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %589, <1 x i32> %590, i1 true) #4, !dbg !40
  %591 = or disjoint i32 %546, 224, !dbg !40
  %592 = getelementptr float, ptr addrspace(3) %549, i32 %591, !dbg !40
  %593 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %592, <1 x i32> %593, i1 true) #4, !dbg !40
  %594 = or disjoint i32 %546, 240, !dbg !40
  %595 = getelementptr float, ptr addrspace(3) %549, i32 %594, !dbg !40
  %596 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %595, <1 x i32> %596, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %597 = lshr i32 %449, 6, !dbg !40
  %598 = and i32 %597, 12, !dbg !40
  %599 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %598, !dbg !40
  %600 = getelementptr inbounds float, ptr addrspace(3) %599, i32 %547, !dbg !40
  %601 = or disjoint i32 %547, 1024, !dbg !40
  %602 = lshr i32 %601, 6, !dbg !40
  %603 = and i32 %602, 28, !dbg !40
  %604 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %603, !dbg !40
  %605 = getelementptr inbounds float, ptr addrspace(3) %604, i32 %601, !dbg !40
  %606 = load <4 x i32>, ptr addrspace(3) %605, align 16, !dbg !40
  %607 = or disjoint i32 %547, 2048, !dbg !40
  %608 = lshr i32 %607, 6, !dbg !40
  %609 = and i32 %608, 44, !dbg !40
  %610 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %609, !dbg !40
  %611 = getelementptr inbounds float, ptr addrspace(3) %610, i32 %607, !dbg !40
  %612 = load <4 x i32>, ptr addrspace(3) %611, align 16, !dbg !40
  %613 = or disjoint i32 %547, 3072, !dbg !40
  %614 = lshr i32 %613, 6, !dbg !40
  %615 = and i32 %614, 60, !dbg !40
  %616 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %615, !dbg !40
  %617 = getelementptr inbounds float, ptr addrspace(3) %616, i32 %613, !dbg !40
  %618 = load <4 x i32>, ptr addrspace(3) %617, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %600, align 16, !dbg !40
  %619 = getelementptr inbounds i8, ptr addrspace(3) %600, i32 4, !dbg !40
  %.extract19 = load i32, ptr addrspace(3) %619, align 4, !dbg !40
  %620 = getelementptr inbounds i8, ptr addrspace(3) %600, i32 8, !dbg !40
  %.extract20 = load i32, ptr addrspace(3) %620, align 8, !dbg !40
  %621 = getelementptr inbounds i8, ptr addrspace(3) %600, i32 12, !dbg !40
  %.extract21 = load i32, ptr addrspace(3) %621, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %537, i1 %461) #4, !dbg !40
  %.extract22 = extractelement <4 x i32> %606, i64 0, !dbg !40
  %.extract23 = extractelement <4 x i32> %606, i64 1, !dbg !40
  %.extract24 = extractelement <4 x i32> %606, i64 2, !dbg !40
  %.extract25 = extractelement <4 x i32> %606, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %539, i1 %460) #4, !dbg !40
  %.extract26 = extractelement <4 x i32> %612, i64 0, !dbg !40
  %.extract27 = extractelement <4 x i32> %612, i64 1, !dbg !40
  %.extract28 = extractelement <4 x i32> %612, i64 2, !dbg !40
  %.extract29 = extractelement <4 x i32> %612, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %541, i1 %458) #4, !dbg !40
  %.extract30 = extractelement <4 x i32> %618, i64 0, !dbg !40
  %.extract31 = extractelement <4 x i32> %618, i64 1, !dbg !40
  %.extract32 = extractelement <4 x i32> %618, i64 2, !dbg !40
  %.extract33 = extractelement <4 x i32> %618, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %543, i1 %456) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqewzitkzusedknvb6dqzcuohql4wpffmbdfbmyw3n7cozhmgrlp.py", directory: "inductor_cache/qe")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_31", linkageName: "triton_poi_fused_add_convolution_div_sqrt_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 37, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 31, column: 19, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 40, column: 43, scope: !7)
!35 = !DILocation(line: 41, column: 34, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 39, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
