; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_slice_12(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %.lobit1 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %.lobit1, 3, !dbg !12
  %11 = or disjoint i32 %10, 4, !dbg !12
  %12 = or disjoint i32 %10, 8, !dbg !12
  %13 = or disjoint i32 %10, 12, !dbg !12
  %14 = or disjoint i32 %10, 16, !dbg !12
  %15 = or disjoint i32 %10, 20, !dbg !12
  %16 = or disjoint i32 %10, 24, !dbg !12
  %17 = or disjoint i32 %10, 28, !dbg !12
  %18 = or disjoint i32 %6, %9, !dbg !13
  %19 = or disjoint i32 %6, %10, !dbg !13
  %20 = or disjoint i32 %6, %11, !dbg !13
  %21 = or disjoint i32 %6, %12, !dbg !13
  %22 = or disjoint i32 %6, %13, !dbg !13
  %23 = or disjoint i32 %6, %14, !dbg !13
  %24 = or disjoint i32 %6, %15, !dbg !13
  %25 = or disjoint i32 %6, %16, !dbg !13
  %26 = or disjoint i32 %6, %17, !dbg !13
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %28 = shl i32 %27, 5, !dbg !15
  %29 = lshr i32 %7, 3, !dbg !16
  %30 = and i32 %29, 15, !dbg !16
  %31 = and i32 %7, 31, !dbg !16
  %32 = or disjoint i32 %28, %30, !dbg !17
  %33 = or disjoint i32 %32, 16, !dbg !17
  %34 = or disjoint i32 %28, %31, !dbg !17
  %35 = icmp slt i32 %32, 81, !dbg !18
  %36 = icmp slt i32 %33, 81, !dbg !18
  %37 = icmp slt i32 %34, 81, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %38 = sdiv i32 %.frozen, 256, !dbg !19
  %39 = mul i32 %38, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = shl i32 %32, 9, !dbg !21
  %41 = shl i32 %33, 9, !dbg !21
  %42 = mul i32 %38, 41472, !dbg !22
  %43 = add i32 %42, %.decomposed, !dbg !23
  %44 = add i32 %43, %40, !dbg !24
  %45 = add i32 %43, %41, !dbg !24
  %46 = sext i32 %44 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %45 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %35) #2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %36) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = mul i32 %19, 81, !dbg !27
  %61 = mul i32 %20, 81, !dbg !27
  %62 = mul i32 %21, 81, !dbg !27
  %63 = mul i32 %22, 81, !dbg !27
  %64 = mul i32 %23, 81, !dbg !27
  %65 = mul i32 %24, 81, !dbg !27
  %66 = mul i32 %25, 81, !dbg !27
  %67 = mul i32 %26, 81, !dbg !27
  %68 = add i32 %34, %60, !dbg !28
  %69 = add i32 %34, %61, !dbg !28
  %70 = add i32 %34, %62, !dbg !28
  %71 = add i32 %34, %63, !dbg !28
  %72 = add i32 %34, %64, !dbg !28
  %73 = add i32 %34, %65, !dbg !28
  %74 = add i32 %34, %66, !dbg !28
  %75 = add i32 %34, %67, !dbg !28
  %76 = sext i32 %68 to i64, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !29
  %78 = sext i32 %69 to i64, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !29
  %80 = sext i32 %70 to i64, !dbg !29
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !29
  %82 = sext i32 %71 to i64, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !29
  %84 = sext i32 %72 to i64, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !29
  %86 = sext i32 %73 to i64, !dbg !29
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !29
  %88 = sext i32 %74 to i64, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !29
  %90 = sext i32 %75 to i64, !dbg !29
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !29
  %92 = shl i32 %7, 7, !dbg !30
  %93 = and i32 %92, 896, !dbg !30
  %94 = or disjoint i32 %93, %30, !dbg !30
  %95 = and i32 %7, 127, !dbg !30
  %96 = lshr exact i32 %93, 3, !dbg !30
  %97 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %96, !dbg !30
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %94, !dbg !30
  %99 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !30
  %100 = or disjoint i32 %94, 32, !dbg !30
  %101 = lshr i32 %100, 5, !dbg !30
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !30
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !30
  %104 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !30
  %105 = or disjoint i32 %94, 64, !dbg !30
  %106 = lshr i32 %105, 5, !dbg !30
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !30
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !30
  %109 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !30
  %110 = or disjoint i32 %94, 96, !dbg !30
  %111 = lshr i32 %110, 5, !dbg !30
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !30
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !30
  %114 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !30
  %115 = or disjoint i32 %94, 16, !dbg !30
  %116 = getelementptr float, ptr addrspace(3) %97, i32 %115, !dbg !30
  %117 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !30
  %118 = or disjoint i32 %94, 48, !dbg !30
  %119 = lshr i32 %118, 5, !dbg !30
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !30
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !30
  %122 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !30
  %123 = or disjoint i32 %94, 80, !dbg !30
  %124 = lshr i32 %123, 5, !dbg !30
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !30
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !30
  %127 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !30
  %128 = or disjoint i32 %94, 112, !dbg !30
  %129 = lshr i32 %128, 5, !dbg !30
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !30
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !30
  %132 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %133 = lshr i32 %95, 5, !dbg !30
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !30
  %135 = getelementptr inbounds float, ptr addrspace(3) %134, i32 %95, !dbg !30
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !30
  %137 = or disjoint i32 %95, 128, !dbg !30
  %138 = lshr i32 %137, 5, !dbg !30
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %138, !dbg !30
  %140 = getelementptr inbounds float, ptr addrspace(3) %139, i32 %137, !dbg !30
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !30
  %142 = or disjoint i32 %95, 256, !dbg !30
  %143 = lshr i32 %142, 5, !dbg !30
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %143, !dbg !30
  %145 = getelementptr inbounds float, ptr addrspace(3) %144, i32 %142, !dbg !30
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !30
  %147 = or disjoint i32 %95, 384, !dbg !30
  %148 = lshr i32 %147, 5, !dbg !30
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !30
  %150 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %147, !dbg !30
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !30
  %152 = or disjoint i32 %95, 512, !dbg !30
  %153 = lshr i32 %152, 5, !dbg !30
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %153, !dbg !30
  %155 = getelementptr inbounds float, ptr addrspace(3) %154, i32 %152, !dbg !30
  %156 = load i32, ptr addrspace(3) %155, align 4, !dbg !30
  %157 = or disjoint i32 %95, 640, !dbg !30
  %158 = lshr i32 %157, 5, !dbg !30
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %158, !dbg !30
  %160 = getelementptr inbounds float, ptr addrspace(3) %159, i32 %157, !dbg !30
  %161 = load i32, ptr addrspace(3) %160, align 4, !dbg !30
  %162 = or disjoint i32 %95, 768, !dbg !30
  %163 = lshr i32 %162, 5, !dbg !30
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !30
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %162, !dbg !30
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !30
  %167 = or disjoint i32 %95, 896, !dbg !30
  %168 = lshr i32 %167, 5, !dbg !30
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !30
  %170 = getelementptr inbounds float, ptr addrspace(3) %169, i32 %167, !dbg !30
  %171 = load i32, ptr addrspace(3) %170, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %77, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %79, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %81, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %83, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %85, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %87, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %89, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %91, i1 %37) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cevkermx4ym5sd735mo5ntmye73vf66jjuiig4fiqiuyanw3etue.py", directory: "inductor_cache/ev")
!4 = !{ptr @triton_poi_fused_slice_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_slice_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_slice_12", linkageName: "triton_poi_fused_slice_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
