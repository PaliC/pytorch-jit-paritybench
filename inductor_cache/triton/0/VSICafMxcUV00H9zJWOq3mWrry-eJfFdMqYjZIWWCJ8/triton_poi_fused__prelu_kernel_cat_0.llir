; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__prelu_kernel_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 16, !dbg !15
  %17 = mul i32 %16, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #1, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = icmp slt i32 %.decomposed, 4, !dbg !18
  %21 = shl nsw i32 %16, 2, !dbg !19
  %22 = add nsw i32 %21, %.decomposed, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = and i1 %15, %20, !dbg !22
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !23
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !23
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !23
  %29 = and i32 %.decomposed, -4, !dbg !24
  %30 = icmp eq i32 %29, 4, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !25
  %32 = getelementptr i8, ptr addrspace(1) %31, i64 -16, !dbg !25
  %33 = and i1 %15, %30, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #1, !dbg !27
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %37 = icmp eq i32 %29, 8, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !29
  %39 = getelementptr i8, ptr addrspace(1) %38, i64 -32, !dbg !29
  %40 = and i1 %15, %37, !dbg !30
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #1, !dbg !31
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !31
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !31
  %44 = icmp sgt i32 %.decomposed, 11, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !33
  %46 = getelementptr i8, ptr addrspace(1) %45, i64 -48, !dbg !33
  %47 = and i1 %15, %44, !dbg !34
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !35
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !35
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !35
  %.v = select i1 %37, i32 %42, i32 %49, !dbg !36
  %.v1 = select i1 %37, i32 %43, i32 %50, !dbg !36
  %.v2 = select i1 %30, i32 %35, i32 %.v, !dbg !37
  %.v3 = select i1 %30, i32 %36, i32 %.v1, !dbg !37
  %.v4 = select i1 %20, i32 %27, i32 %.v2, !dbg !38
  %51 = bitcast i32 %.v4 to float, !dbg !38
  %.v5 = select i1 %20, i32 %28, i32 %.v3, !dbg !38
  %52 = bitcast i32 %.v5 to float, !dbg !38
  %53 = fcmp ogt float %51, 0.000000e+00, !dbg !39
  %54 = fcmp ogt float %52, 0.000000e+00, !dbg !39
  %55 = fmul float %19, %51, !dbg !40
  %56 = fmul float %19, %52, !dbg !40
  %57 = select i1 %53, float %51, float %55, !dbg !41
  %58 = select i1 %54, float %52, float %56, !dbg !41
  %59 = sext i32 %14 to i64, !dbg !42
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v4, i32 %.v5, ptr addrspace(1) %60, i1 %15) #1, !dbg !43
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %59, !dbg !44
  %62 = bitcast float %57 to i32, !dbg !45
  %63 = bitcast float %58 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %62, i32 %63, ptr addrspace(1) %61, i1 %15) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck6a35ss7hrq6kp3r4dezgwjhfzsbmhdurmyx3wwsq65gfyjbn44.py", directory: "inductor_cache/k6")
!4 = !{ptr @triton_poi_fused__prelu_kernel_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel_cat_0", linkageName: "triton_poi_fused__prelu_kernel_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 20, scope: !7)
!18 = !DILocation(line: 33, column: 18, scope: !7)
!19 = !DILocation(line: 34, column: 32, scope: !7)
!20 = !DILocation(line: 34, column: 38, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 51, scope: !7)
!23 = !DILocation(line: 34, column: 44, scope: !7)
!24 = !DILocation(line: 38, column: 18, scope: !7)
!25 = !DILocation(line: 39, column: 31, scope: !7)
!26 = !DILocation(line: 39, column: 59, scope: !7)
!27 = !DILocation(line: 39, column: 52, scope: !7)
!28 = !DILocation(line: 43, column: 20, scope: !7)
!29 = !DILocation(line: 44, column: 31, scope: !7)
!30 = !DILocation(line: 44, column: 60, scope: !7)
!31 = !DILocation(line: 44, column: 52, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 48, column: 31, scope: !7)
!34 = !DILocation(line: 48, column: 61, scope: !7)
!35 = !DILocation(line: 48, column: 53, scope: !7)
!36 = !DILocation(line: 49, column: 35, scope: !7)
!37 = !DILocation(line: 50, column: 34, scope: !7)
!38 = !DILocation(line: 51, column: 33, scope: !7)
!39 = !DILocation(line: 53, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 55, column: 35, scope: !7)
!42 = !DILocation(line: 56, column: 25, scope: !7)
!43 = !DILocation(line: 56, column: 37, scope: !7)
!44 = !DILocation(line: 57, column: 25, scope: !7)
!45 = !DILocation(line: 57, column: 37, scope: !7)
!46 = !DILocation(line: 57, column: 4, scope: !7)
