; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_convolution_elu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = sdiv i32 %12, 16, !dbg !14
  %14 = srem i32 %13, 1024, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %15 = sdiv i32 %.frozen, 16384, !dbg !16
  %16 = mul i32 %15, 16384, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = sext i32 %12 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !19
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !19
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = sext i32 %14 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !22
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !23
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !23
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !23
  %32 = bitcast i32 %31 to float, !dbg !23
  %33 = mul i32 %15, 24576, !dbg !24
  %34 = add i32 %33, %.decomposed, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !26
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !27
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !27
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = fadd float %22, %27, !dbg !28
  %42 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !19
  %43 = insertelement <2 x i32> %42, i32 %30, i64 1, !dbg !19
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !19
  %45 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !21
  %46 = insertelement <2 x i32> %45, i32 %38, i64 1, !dbg !21
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !21
  %48 = fadd <2 x float> %44, %47, !dbg !28
  %49 = fadd float %32, %40, !dbg !29
  %shift = shufflevector <2 x float> %48, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %50 = fadd <2 x float> %48, %shift, !dbg !30
  %51 = extractelement <2 x float> %50, i64 0, !dbg !30
  %52 = fadd float %41, %49, !dbg !30
  %53 = fmul float %51, 0x3FF7154760000000, !dbg !31
  %54 = tail call float @llvm.nvvm.round.f(float %53) #3, !dbg !31
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %55, 0, !dbg !31
  %56 = tail call float @llvm.nvvm.fabs.ftz.f(float %51) #3, !dbg !31
  %57 = tail call float @llvm.nvvm.fabs.f(float %51) #3, !dbg !31
  %.03.i = select i1 %.not.i, float %57, float %56, !dbg !31
  %58 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !31
  %t.0.i = select i1 %58, float 0.000000e+00, float %54, !dbg !31
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %61 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !31
  %j.0.i = select i1 %61, float 1.270000e+02, float %t.0.i, !dbg !31
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not8.i = icmp eq i32 %67, 0, !dbg !31
  br i1 %.not8.i, label %70, label %68, !dbg !31

68:                                               ; preds = %6
  %69 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #3, !dbg !31
  br label %__nv_expm1f.exit, !dbg !31

70:                                               ; preds = %6
  %71 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #3, !dbg !31
  br label %__nv_expm1f.exit, !dbg !31

__nv_expm1f.exit:                                 ; preds = %68, %70
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], !dbg !31
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %73 = fmul float %52, 0x3FF7154760000000, !dbg !31
  %74 = tail call float @llvm.nvvm.round.f(float %73) #3, !dbg !31
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %75, 0, !dbg !31
  %76 = tail call float @llvm.nvvm.fabs.ftz.f(float %52) #3, !dbg !31
  %77 = tail call float @llvm.nvvm.fabs.f(float %52) #3, !dbg !31
  %.03.i2 = select i1 %.not.i1, float %77, float %76, !dbg !31
  %78 = fcmp olt float %.03.i2, 0x3FDA3D70A0000000, !dbg !31
  %t.0.i3 = select i1 %78, float 0.000000e+00, float %74, !dbg !31
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %81 = fcmp oeq float %t.0.i3, 1.280000e+02, !dbg !31
  %j.0.i4 = select i1 %81, float 1.270000e+02, float %t.0.i3, !dbg !31
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not8.i5 = icmp eq i32 %87, 0, !dbg !31
  br i1 %.not8.i5, label %90, label %88, !dbg !31

88:                                               ; preds = %__nv_expm1f.exit
  %89 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i4) #3, !dbg !31
  br label %__nv_expm1f.exit27, !dbg !31

90:                                               ; preds = %__nv_expm1f.exit
  %91 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i4) #3, !dbg !31
  br label %__nv_expm1f.exit27, !dbg !31

__nv_expm1f.exit27:                               ; preds = %88, %90
  %.0.i6 = phi float [ %89, %88 ], [ %91, %90 ], !dbg !31
  %92 = fcmp oeq float %51, 0.000000e+00, !dbg !31
  %93 = fadd float %51, %51, !dbg !31
  %94 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !31
  %95 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !31
  %.not9.i = icmp eq i32 %72, 0, !dbg !31
  %.not7.i = icmp eq i32 %66, 0, !dbg !31
  %.not6.i = icmp eq i32 %65, 0, !dbg !31
  %.not5.i = icmp eq i32 %64, 0, !dbg !31
  %.not4.i = icmp eq i32 %63, 0, !dbg !31
  %.not3.i = icmp eq i32 %62, 0, !dbg !31
  %.not2.i = icmp eq i32 %60, 0, !dbg !31
  %96 = fneg float %t.0.i, !dbg !31
  %.not1.i = icmp eq i32 %59, 0, !dbg !31
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %96, float 0x3FE62E4000000000, float %51) #3, !dbg !31
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %96, float 0x3FE62E4000000000, float %51) #3, !dbg !31
  %.04.i = select i1 %.not1.i, float %97, float %98, !dbg !31
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %96, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !31
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %96, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !31
  %.05.i = select i1 %.not2.i, float %99, float %100, !dbg !31
  %101 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !31
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !31
  %.07.i = select i1 %.not3.i, float %101, float %102, !dbg !31
  %103 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !31
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !31
  %.08.i = select i1 %.not4.i, float %103, float %104, !dbg !31
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !31
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !31
  %.09.i = select i1 %.not5.i, float %105, float %106, !dbg !31
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !31
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !31
  %.06.i = select i1 %.not6.i, float %107, float %108, !dbg !31
  %109 = fmul float %.05.i, %.06.i, !dbg !31
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %109, float %.05.i, float %.05.i) #3, !dbg !31
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %109, float %.05.i, float %.05.i) #3, !dbg !31
  %.01.i = select i1 %.not7.i, float %110, float %111, !dbg !31
  %112 = fadd float %.0.i, -1.000000e+00, !dbg !31
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i, float %112) #3, !dbg !31
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i, float %112) #3, !dbg !31
  %.02.i = select i1 %.not9.i, float %113, float %114, !dbg !31
  %115 = fadd float %.02.i, %.02.i, !dbg !31
  %u.0.i = select i1 %61, float %115, float %.02.i, !dbg !31
  %u.1.i = select i1 %95, float 0x7FF0000000000000, float %u.0.i, !dbg !31
  %u.2.i = select i1 %94, float -1.000000e+00, float %u.1.i, !dbg !31
  %u.3.i = select i1 %92, float %93, float %u.2.i, !dbg !31
  %116 = fcmp ogt float %52, 0.000000e+00, !dbg !32
  %117 = fcmp ogt float %51, 0.000000e+00, !dbg !32
  %.not7.i7 = icmp eq i32 %86, 0, !dbg !31
  %.not6.i8 = icmp eq i32 %85, 0, !dbg !31
  %.not5.i9 = icmp eq i32 %84, 0, !dbg !31
  %.not4.i10 = icmp eq i32 %83, 0, !dbg !31
  %.not3.i11 = icmp eq i32 %82, 0, !dbg !31
  %.not2.i12 = icmp eq i32 %80, 0, !dbg !31
  %118 = fneg float %t.0.i3, !dbg !31
  %.not1.i13 = icmp eq i32 %79, 0, !dbg !31
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %118, float 0x3FE62E4000000000, float %52) #3, !dbg !31
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %118, float 0x3FE62E4000000000, float %52) #3, !dbg !31
  %.04.i14 = select i1 %.not1.i13, float %119, float %120, !dbg !31
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %118, float 0x3EB7F7D1C0000000, float %.04.i14) #3, !dbg !31
  %122 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %118, float 0x3EB7F7D1C0000000, float %.04.i14) #3, !dbg !31
  %.05.i15 = select i1 %.not2.i12, float %121, float %122, !dbg !31
  %123 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i15, float 0x3F812ACC60000000) #3, !dbg !31
  %124 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i15, float 0x3F812ACC60000000) #3, !dbg !31
  %.07.i16 = select i1 %.not3.i11, float %123, float %124, !dbg !31
  %125 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i16, float %.05.i15, float 0x3FA5557C60000000) #3, !dbg !31
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i16, float %.05.i15, float 0x3FA5557C60000000) #3, !dbg !31
  %.08.i17 = select i1 %.not4.i10, float %125, float %126, !dbg !31
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i17, float %.05.i15, float 0x3FC5553EC0000000) #3, !dbg !31
  %128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i17, float %.05.i15, float 0x3FC5553EC0000000) #3, !dbg !31
  %.09.i18 = select i1 %.not5.i9, float %127, float %128, !dbg !31
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i18, float %.05.i15, float 0x3FDFFFFFC0000000) #3, !dbg !31
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i18, float %.05.i15, float 0x3FDFFFFFC0000000) #3, !dbg !31
  %.06.i19 = select i1 %.not6.i8, float %129, float %130, !dbg !31
  %131 = fmul float %.05.i15, %.06.i19, !dbg !31
  %132 = tail call float @llvm.nvvm.fma.rn.f(float %131, float %.05.i15, float %.05.i15) #3, !dbg !31
  %133 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %131, float %.05.i15, float %.05.i15) #3, !dbg !31
  %.01.i20 = select i1 %.not7.i7, float %132, float %133, !dbg !31
  %134 = fadd float %.0.i6, -1.000000e+00, !dbg !31
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not9.i21 = icmp eq i32 %135, 0, !dbg !31
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i20, float %.0.i6, float %134) #3, !dbg !31
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i20, float %.0.i6, float %134) #3, !dbg !31
  %.02.i22 = select i1 %.not9.i21, float %137, float %136, !dbg !31
  %138 = fadd float %.02.i22, %.02.i22, !dbg !31
  %u.0.i23 = select i1 %81, float %138, float %.02.i22, !dbg !31
  %139 = fcmp ogt float %j.0.i4, 1.280000e+02, !dbg !31
  %u.1.i24 = select i1 %139, float 0x7FF0000000000000, float %u.0.i23, !dbg !31
  %140 = fcmp olt float %j.0.i4, -2.500000e+01, !dbg !31
  %u.2.i25 = select i1 %140, float -1.000000e+00, float %u.1.i24, !dbg !31
  %141 = fcmp oeq float %52, 0.000000e+00, !dbg !31
  %142 = fadd float %52, %52, !dbg !31
  %u.3.i26 = select i1 %141, float %142, float %u.2.i25, !dbg !31
  %143 = select i1 %117, float %51, float %u.3.i, !dbg !33
  %144 = select i1 %116, float %52, float %u.3.i26, !dbg !33
  %145 = bitcast float %51 to i32, !dbg !34
  %146 = bitcast float %52 to i32, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %145, i32 %146, ptr addrspace(1) %18, i1 true) #3, !dbg !34
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !35
  %148 = bitcast float %143 to i32, !dbg !36
  %149 = bitcast float %144 to i32, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %148, i32 %149, ptr addrspace(1) %147, i1 true) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czaladc2tz2itq7365md3eqsdgmigoarz4gap3apfrqyaguvndfg.py", directory: "inductor_cache/za")
!4 = !{ptr @triton_poi_fused_add_convolution_elu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_elu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_elu_14", linkageName: "triton_poi_fused_add_convolution_elu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 41, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 46, scope: !7)
!28 = !DILocation(line: 32, column: 18, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 28, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 34, scope: !7)
!34 = !DILocation(line: 42, column: 39, scope: !7)
!35 = !DILocation(line: 43, column: 25, scope: !7)
!36 = !DILocation(line: 43, column: 37, scope: !7)
!37 = !DILocation(line: 43, column: 4, scope: !7)
