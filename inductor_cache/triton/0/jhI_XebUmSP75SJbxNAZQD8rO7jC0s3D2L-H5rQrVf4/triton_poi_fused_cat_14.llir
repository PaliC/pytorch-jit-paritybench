; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %20 = sdiv i32 %.frozen, 192, !dbg !14
  %21 = mul i32 %20, 192, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %.frozen76 = freeze i32 %19, !dbg !14
  %22 = sdiv i32 %.frozen76, 192, !dbg !14
  %23 = mul i32 %22, 192, !dbg !15
  %.decomposed77 = sub i32 %.frozen76, %23, !dbg !15
  %24 = icmp slt i32 %.decomposed, 96, !dbg !16
  %25 = icmp slt i32 %.decomposed77, 96, !dbg !16
  %26 = mul nsw i32 %20, 96, !dbg !17
  %27 = mul nsw i32 %22, 96, !dbg !17
  %28 = add nsw i32 %26, %.decomposed, !dbg !18
  %29 = add nsw i32 %27, %.decomposed77, !dbg !18
  %30 = sext i32 %28 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %29 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !20
  %36 = sext i32 %.decomposed to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !21
  %38 = sext i32 %.decomposed77 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !22
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = fadd float %49, 0x3EE4F8B580000000, !dbg !25
  %63 = fadd float %50, 0x3EE4F8B580000000, !dbg !25
  %64 = fadd float %51, 0x3EE4F8B580000000, !dbg !25
  %65 = fadd float %52, 0x3EE4F8B580000000, !dbg !25
  %66 = fadd float %58, 0x3EE4F8B580000000, !dbg !25
  %67 = fadd float %59, 0x3EE4F8B580000000, !dbg !25
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !25
  %69 = fadd float %61, 0x3EE4F8B580000000, !dbg !25
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %70, 0, !dbg !26
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %71, 0, !dbg !26
  br i1 %.not.i, label %77, label %72, !dbg !26

72:                                               ; preds = %12
  br i1 %.not1.i, label %75, label %73, !dbg !26

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

77:                                               ; preds = %12
  br i1 %.not1.i, label %80, label %78, !dbg !26

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !26
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %82, 0, !dbg !26
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !26
  br i1 %.not.i1, label %89, label %84, !dbg !26

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !26

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !26

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !26
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i6 = icmp eq i32 %94, 0, !dbg !26
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i9 = icmp eq i32 %95, 0, !dbg !26
  br i1 %.not.i6, label %101, label %96, !dbg !26

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !26

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !26

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

__nv_sqrtf.exit10:                                ; preds = %97, %99, %102, %104
  %.0.i8 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !26
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i11 = icmp eq i32 %106, 0, !dbg !26
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i14 = icmp eq i32 %107, 0, !dbg !26
  br i1 %.not.i11, label %113, label %108, !dbg !26

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !26

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !26

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %109, %111, %114, %116
  %.0.i13 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !26
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i16 = icmp eq i32 %118, 0, !dbg !26
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i19 = icmp eq i32 %119, 0, !dbg !26
  br i1 %.not.i16, label %125, label %120, !dbg !26

120:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %123, label %121, !dbg !26

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

125:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %128, label %126, !dbg !26

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

__nv_sqrtf.exit20:                                ; preds = %121, %123, %126, %128
  %.0.i18 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !26
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i21 = icmp eq i32 %130, 0, !dbg !26
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i24 = icmp eq i32 %131, 0, !dbg !26
  br i1 %.not.i21, label %137, label %132, !dbg !26

132:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %135, label %133, !dbg !26

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

137:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %140, label %138, !dbg !26

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

__nv_sqrtf.exit25:                                ; preds = %133, %135, %138, %140
  %.0.i23 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !26
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i26 = icmp eq i32 %142, 0, !dbg !26
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i29 = icmp eq i32 %143, 0, !dbg !26
  br i1 %.not.i26, label %149, label %144, !dbg !26

144:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %147, label %145, !dbg !26

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

149:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %152, label %150, !dbg !26

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

__nv_sqrtf.exit30:                                ; preds = %145, %147, %150, %152
  %.0.i28 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !26
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i31 = icmp eq i32 %154, 0, !dbg !26
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i34 = icmp eq i32 %155, 0, !dbg !26
  br i1 %.not.i31, label %161, label %156, !dbg !26

156:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %159, label %157, !dbg !26

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

161:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %164, label %162, !dbg !26

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

__nv_sqrtf.exit35:                                ; preds = %157, %159, %162, %164
  %.0.i33 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !26
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !27
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !27
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !27
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !27
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !27
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !27
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !28
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !28
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !29
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %175, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !29
  %178 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !30
  %179 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !30
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !31
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !31
  %182 = icmp sgt i32 %.decomposed, 95, !dbg !32
  %183 = icmp sgt i32 %.decomposed77, 95, !dbg !32
  %184 = add nsw i32 %.decomposed, -96, !dbg !33
  %185 = add nsw i32 %.decomposed77, -96, !dbg !33
  %186 = add nsw i32 %26, %184, !dbg !34
  %187 = add nsw i32 %27, %185, !dbg !34
  %188 = sext i32 %186 to i64, !dbg !35
  %189 = getelementptr float, ptr addrspace(1) %5, i64 %188, !dbg !35
  %190 = sext i32 %187 to i64, !dbg !35
  %191 = getelementptr float, ptr addrspace(1) %5, i64 %190, !dbg !35
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !36
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !36
  %194 = sext i32 %184 to i64, !dbg !37
  %195 = getelementptr float, ptr addrspace(1) %6, i64 %194, !dbg !37
  %196 = sext i32 %185 to i64, !dbg !37
  %197 = getelementptr float, ptr addrspace(1) %6, i64 %196, !dbg !37
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !38
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !38
  %200 = getelementptr float, ptr addrspace(1) %7, i64 %194, !dbg !39
  %201 = getelementptr float, ptr addrspace(1) %7, i64 %196, !dbg !39
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !40
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !40
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !40
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !40
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !40
  %207 = bitcast i32 %203 to float, !dbg !40
  %208 = bitcast i32 %204 to float, !dbg !40
  %209 = bitcast i32 %205 to float, !dbg !40
  %210 = bitcast i32 %206 to float, !dbg !40
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !40
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !40
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !40
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !40
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !40
  %216 = bitcast i32 %212 to float, !dbg !40
  %217 = bitcast i32 %213 to float, !dbg !40
  %218 = bitcast i32 %214 to float, !dbg !40
  %219 = bitcast i32 %215 to float, !dbg !40
  %220 = fadd float %207, 0x3EE4F8B580000000, !dbg !41
  %221 = fadd float %208, 0x3EE4F8B580000000, !dbg !41
  %222 = fadd float %209, 0x3EE4F8B580000000, !dbg !41
  %223 = fadd float %210, 0x3EE4F8B580000000, !dbg !41
  %224 = fadd float %216, 0x3EE4F8B580000000, !dbg !41
  %225 = fadd float %217, 0x3EE4F8B580000000, !dbg !41
  %226 = fadd float %218, 0x3EE4F8B580000000, !dbg !41
  %227 = fadd float %219, 0x3EE4F8B580000000, !dbg !41
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i36 = icmp eq i32 %228, 0, !dbg !42
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i39 = icmp eq i32 %229, 0, !dbg !42
  br i1 %.not.i36, label %235, label %230, !dbg !42

230:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %233, label %231, !dbg !42

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !42
  br label %__nv_sqrtf.exit40, !dbg !42

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !42
  br label %__nv_sqrtf.exit40, !dbg !42

235:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %238, label %236, !dbg !42

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !42
  br label %__nv_sqrtf.exit40, !dbg !42

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !42
  br label %__nv_sqrtf.exit40, !dbg !42

__nv_sqrtf.exit40:                                ; preds = %231, %233, %236, %238
  %.0.i38 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !42
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i41 = icmp eq i32 %240, 0, !dbg !42
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i44 = icmp eq i32 %241, 0, !dbg !42
  br i1 %.not.i41, label %247, label %242, !dbg !42

242:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %245, label %243, !dbg !42

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !42
  br label %__nv_sqrtf.exit45, !dbg !42

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !42
  br label %__nv_sqrtf.exit45, !dbg !42

247:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %250, label %248, !dbg !42

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !42
  br label %__nv_sqrtf.exit45, !dbg !42

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !42
  br label %__nv_sqrtf.exit45, !dbg !42

__nv_sqrtf.exit45:                                ; preds = %243, %245, %248, %250
  %.0.i43 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !42
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i46 = icmp eq i32 %252, 0, !dbg !42
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i49 = icmp eq i32 %253, 0, !dbg !42
  br i1 %.not.i46, label %259, label %254, !dbg !42

254:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %257, label %255, !dbg !42

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !42
  br label %__nv_sqrtf.exit50, !dbg !42

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !42
  br label %__nv_sqrtf.exit50, !dbg !42

259:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %262, label %260, !dbg !42

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !42
  br label %__nv_sqrtf.exit50, !dbg !42

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !42
  br label %__nv_sqrtf.exit50, !dbg !42

__nv_sqrtf.exit50:                                ; preds = %255, %257, %260, %262
  %.0.i48 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !42
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i51 = icmp eq i32 %264, 0, !dbg !42
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i54 = icmp eq i32 %265, 0, !dbg !42
  br i1 %.not.i51, label %271, label %266, !dbg !42

266:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %269, label %267, !dbg !42

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !42
  br label %__nv_sqrtf.exit55, !dbg !42

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !42
  br label %__nv_sqrtf.exit55, !dbg !42

271:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %274, label %272, !dbg !42

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !42
  br label %__nv_sqrtf.exit55, !dbg !42

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !42
  br label %__nv_sqrtf.exit55, !dbg !42

__nv_sqrtf.exit55:                                ; preds = %267, %269, %272, %274
  %.0.i53 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !42
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i56 = icmp eq i32 %276, 0, !dbg !42
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i59 = icmp eq i32 %277, 0, !dbg !42
  br i1 %.not.i56, label %283, label %278, !dbg !42

278:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %281, label %279, !dbg !42

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !42
  br label %__nv_sqrtf.exit60, !dbg !42

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !42
  br label %__nv_sqrtf.exit60, !dbg !42

283:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %286, label %284, !dbg !42

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !42
  br label %__nv_sqrtf.exit60, !dbg !42

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !42
  br label %__nv_sqrtf.exit60, !dbg !42

__nv_sqrtf.exit60:                                ; preds = %279, %281, %284, %286
  %.0.i58 = phi float [ %280, %279 ], [ %282, %281 ], [ %285, %284 ], [ %287, %286 ], !dbg !42
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i61 = icmp eq i32 %288, 0, !dbg !42
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i64 = icmp eq i32 %289, 0, !dbg !42
  br i1 %.not.i61, label %295, label %290, !dbg !42

290:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %293, label %291, !dbg !42

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %225) #3, !dbg !42
  br label %__nv_sqrtf.exit65, !dbg !42

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %225) #3, !dbg !42
  br label %__nv_sqrtf.exit65, !dbg !42

295:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %298, label %296, !dbg !42

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.f(float %225) #3, !dbg !42
  br label %__nv_sqrtf.exit65, !dbg !42

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.f(float %225) #3, !dbg !42
  br label %__nv_sqrtf.exit65, !dbg !42

__nv_sqrtf.exit65:                                ; preds = %291, %293, %296, %298
  %.0.i63 = phi float [ %292, %291 ], [ %294, %293 ], [ %297, %296 ], [ %299, %298 ], !dbg !42
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i66 = icmp eq i32 %300, 0, !dbg !42
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i69 = icmp eq i32 %301, 0, !dbg !42
  br i1 %.not.i66, label %307, label %302, !dbg !42

302:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %305, label %303, !dbg !42

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #3, !dbg !42
  br label %__nv_sqrtf.exit70, !dbg !42

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #3, !dbg !42
  br label %__nv_sqrtf.exit70, !dbg !42

307:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %310, label %308, !dbg !42

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #3, !dbg !42
  br label %__nv_sqrtf.exit70, !dbg !42

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #3, !dbg !42
  br label %__nv_sqrtf.exit70, !dbg !42

__nv_sqrtf.exit70:                                ; preds = %303, %305, %308, %310
  %.0.i68 = phi float [ %304, %303 ], [ %306, %305 ], [ %309, %308 ], [ %311, %310 ], !dbg !42
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i71 = icmp eq i32 %312, 0, !dbg !42
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i74 = icmp eq i32 %313, 0, !dbg !42
  br i1 %.not.i71, label %319, label %314, !dbg !42

314:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %317, label %315, !dbg !42

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %227) #3, !dbg !42
  br label %__nv_sqrtf.exit75, !dbg !42

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %227) #3, !dbg !42
  br label %__nv_sqrtf.exit75, !dbg !42

319:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %322, label %320, !dbg !42

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.f(float %227) #3, !dbg !42
  br label %__nv_sqrtf.exit75, !dbg !42

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.f(float %227) #3, !dbg !42
  br label %__nv_sqrtf.exit75, !dbg !42

__nv_sqrtf.exit75:                                ; preds = %315, %317, %320, %322
  %.0.i73 = phi float [ %316, %315 ], [ %318, %317 ], [ %321, %320 ], [ %323, %322 ], !dbg !42
  %324 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !36
  %325 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !38
  %326 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !36
  %327 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !38
  %328 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !36
  %329 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !38
  %330 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !36
  %331 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !38
  %332 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !36
  %333 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !38
  %334 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !36
  %335 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !38
  %336 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !36
  %337 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !38
  %338 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !36
  %339 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !38
  %340 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %341 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %342 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !29
  %343 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !31
  %344 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %345 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %346 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !29
  %347 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !31
  %348 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %349 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %350 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !29
  %351 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !31
  %352 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %353 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %354 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !29
  %355 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !31
  %356 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %357 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %358 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !29
  %359 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !31
  %360 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %361 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %362 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !29
  %363 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !31
  %364 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %365 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %366 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !29
  %367 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !31
  %368 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %369 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %370 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !29
  %371 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !31
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !43
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !43
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !43
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !43
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !43
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !43
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !43
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !43
  %380 = getelementptr float, ptr addrspace(1) %8, i64 %194, !dbg !44
  %381 = getelementptr float, ptr addrspace(1) %8, i64 %196, !dbg !44
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %380, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !45
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !45
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !45
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !45
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !45
  %387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %381, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !45
  %388 = extractvalue { i32, i32, i32, i32 } %387, 0, !dbg !45
  %389 = extractvalue { i32, i32, i32, i32 } %387, 1, !dbg !45
  %390 = extractvalue { i32, i32, i32, i32 } %387, 2, !dbg !45
  %391 = extractvalue { i32, i32, i32, i32 } %387, 3, !dbg !45
  %392 = getelementptr float, ptr addrspace(1) %9, i64 %194, !dbg !46
  %393 = getelementptr float, ptr addrspace(1) %9, i64 %196, !dbg !46
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %392, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !47
  %395 = extractvalue { i32, i32, i32, i32 } %394, 0, !dbg !47
  %396 = extractvalue { i32, i32, i32, i32 } %394, 1, !dbg !47
  %397 = extractvalue { i32, i32, i32, i32 } %394, 2, !dbg !47
  %398 = extractvalue { i32, i32, i32, i32 } %394, 3, !dbg !47
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %393, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !47
  %400 = extractvalue { i32, i32, i32, i32 } %399, 0, !dbg !47
  %401 = extractvalue { i32, i32, i32, i32 } %399, 1, !dbg !47
  %402 = extractvalue { i32, i32, i32, i32 } %399, 2, !dbg !47
  %403 = extractvalue { i32, i32, i32, i32 } %399, 3, !dbg !47
  %404 = insertelement <16 x i32> poison, i32 %324, i64 0, !dbg !36
  %405 = insertelement <16 x i32> %404, i32 %326, i64 1, !dbg !36
  %406 = insertelement <16 x i32> %405, i32 %328, i64 2, !dbg !36
  %407 = insertelement <16 x i32> %406, i32 %330, i64 3, !dbg !36
  %408 = insertelement <16 x i32> %407, i32 %332, i64 4, !dbg !36
  %409 = insertelement <16 x i32> %408, i32 %334, i64 5, !dbg !36
  %410 = insertelement <16 x i32> %409, i32 %336, i64 6, !dbg !36
  %411 = insertelement <16 x i32> %410, i32 %338, i64 7, !dbg !36
  %412 = insertelement <16 x i32> %411, i32 %368, i64 8, !dbg !36
  %413 = insertelement <16 x i32> %412, i32 %364, i64 9, !dbg !36
  %414 = insertelement <16 x i32> %413, i32 %360, i64 10, !dbg !36
  %415 = insertelement <16 x i32> %414, i32 %356, i64 11, !dbg !36
  %416 = insertelement <16 x i32> %415, i32 %352, i64 12, !dbg !36
  %417 = insertelement <16 x i32> %416, i32 %348, i64 13, !dbg !36
  %418 = insertelement <16 x i32> %417, i32 %344, i64 14, !dbg !36
  %419 = insertelement <16 x i32> %418, i32 %340, i64 15, !dbg !36
  %420 = bitcast <16 x i32> %419 to <16 x float>, !dbg !36
  %421 = insertelement <16 x i32> poison, i32 %325, i64 0, !dbg !38
  %422 = insertelement <16 x i32> %421, i32 %327, i64 1, !dbg !38
  %423 = insertelement <16 x i32> %422, i32 %329, i64 2, !dbg !38
  %424 = insertelement <16 x i32> %423, i32 %331, i64 3, !dbg !38
  %425 = insertelement <16 x i32> %424, i32 %333, i64 4, !dbg !38
  %426 = insertelement <16 x i32> %425, i32 %335, i64 5, !dbg !38
  %427 = insertelement <16 x i32> %426, i32 %337, i64 6, !dbg !38
  %428 = insertelement <16 x i32> %427, i32 %339, i64 7, !dbg !38
  %429 = insertelement <16 x i32> %428, i32 %369, i64 8, !dbg !38
  %430 = insertelement <16 x i32> %429, i32 %365, i64 9, !dbg !38
  %431 = insertelement <16 x i32> %430, i32 %361, i64 10, !dbg !38
  %432 = insertelement <16 x i32> %431, i32 %357, i64 11, !dbg !38
  %433 = insertelement <16 x i32> %432, i32 %353, i64 12, !dbg !38
  %434 = insertelement <16 x i32> %433, i32 %349, i64 13, !dbg !38
  %435 = insertelement <16 x i32> %434, i32 %345, i64 14, !dbg !38
  %436 = insertelement <16 x i32> %435, i32 %341, i64 15, !dbg !38
  %437 = bitcast <16 x i32> %436 to <16 x float>, !dbg !38
  %438 = fsub <16 x float> %420, %437, !dbg !48
  %439 = insertelement <16 x float> poison, float %379, i64 0, !dbg !49
  %440 = insertelement <16 x float> %439, float %378, i64 1, !dbg !49
  %441 = insertelement <16 x float> %440, float %377, i64 2, !dbg !49
  %442 = insertelement <16 x float> %441, float %376, i64 3, !dbg !49
  %443 = insertelement <16 x float> %442, float %375, i64 4, !dbg !49
  %444 = insertelement <16 x float> %443, float %374, i64 5, !dbg !49
  %445 = insertelement <16 x float> %444, float %373, i64 6, !dbg !49
  %446 = insertelement <16 x float> %445, float %372, i64 7, !dbg !49
  %447 = insertelement <16 x float> %446, float %166, i64 8, !dbg !49
  %448 = insertelement <16 x float> %447, float %167, i64 9, !dbg !49
  %449 = insertelement <16 x float> %448, float %168, i64 10, !dbg !49
  %450 = insertelement <16 x float> %449, float %169, i64 11, !dbg !49
  %451 = insertelement <16 x float> %450, float %170, i64 12, !dbg !49
  %452 = insertelement <16 x float> %451, float %171, i64 13, !dbg !49
  %453 = insertelement <16 x float> %452, float %172, i64 14, !dbg !49
  %454 = insertelement <16 x float> %453, float %173, i64 15, !dbg !49
  %455 = fmul <16 x float> %438, %454, !dbg !49
  %456 = insertelement <16 x i32> poison, i32 %391, i64 0, !dbg !45
  %457 = insertelement <16 x i32> %456, i32 %390, i64 1, !dbg !45
  %458 = insertelement <16 x i32> %457, i32 %389, i64 2, !dbg !45
  %459 = insertelement <16 x i32> %458, i32 %388, i64 3, !dbg !45
  %460 = insertelement <16 x i32> %459, i32 %386, i64 4, !dbg !45
  %461 = insertelement <16 x i32> %460, i32 %385, i64 5, !dbg !45
  %462 = insertelement <16 x i32> %461, i32 %384, i64 6, !dbg !45
  %463 = insertelement <16 x i32> %462, i32 %383, i64 7, !dbg !45
  %464 = insertelement <16 x i32> %463, i32 %370, i64 8, !dbg !45
  %465 = insertelement <16 x i32> %464, i32 %366, i64 9, !dbg !45
  %466 = insertelement <16 x i32> %465, i32 %362, i64 10, !dbg !45
  %467 = insertelement <16 x i32> %466, i32 %358, i64 11, !dbg !45
  %468 = insertelement <16 x i32> %467, i32 %354, i64 12, !dbg !45
  %469 = insertelement <16 x i32> %468, i32 %350, i64 13, !dbg !45
  %470 = insertelement <16 x i32> %469, i32 %346, i64 14, !dbg !45
  %471 = insertelement <16 x i32> %470, i32 %342, i64 15, !dbg !45
  %472 = bitcast <16 x i32> %471 to <16 x float>, !dbg !45
  %473 = fmul <16 x float> %455, %472, !dbg !50
  %474 = insertelement <16 x i32> poison, i32 %403, i64 0, !dbg !47
  %475 = insertelement <16 x i32> %474, i32 %402, i64 1, !dbg !47
  %476 = insertelement <16 x i32> %475, i32 %401, i64 2, !dbg !47
  %477 = insertelement <16 x i32> %476, i32 %400, i64 3, !dbg !47
  %478 = insertelement <16 x i32> %477, i32 %398, i64 4, !dbg !47
  %479 = insertelement <16 x i32> %478, i32 %397, i64 5, !dbg !47
  %480 = insertelement <16 x i32> %479, i32 %396, i64 6, !dbg !47
  %481 = insertelement <16 x i32> %480, i32 %395, i64 7, !dbg !47
  %482 = insertelement <16 x i32> %481, i32 %371, i64 8, !dbg !47
  %483 = insertelement <16 x i32> %482, i32 %367, i64 9, !dbg !47
  %484 = insertelement <16 x i32> %483, i32 %363, i64 10, !dbg !47
  %485 = insertelement <16 x i32> %484, i32 %359, i64 11, !dbg !47
  %486 = insertelement <16 x i32> %485, i32 %355, i64 12, !dbg !47
  %487 = insertelement <16 x i32> %486, i32 %351, i64 13, !dbg !47
  %488 = insertelement <16 x i32> %487, i32 %347, i64 14, !dbg !47
  %489 = insertelement <16 x i32> %488, i32 %343, i64 15, !dbg !47
  %490 = bitcast <16 x i32> %489 to <16 x float>, !dbg !47
  %491 = fadd <16 x float> %473, %490, !dbg !51
  %492 = fcmp olt <16 x float> %491, zeroinitializer, !dbg !52
  %493 = extractelement <16 x i1> %492, i64 15, !dbg !56
  %494 = extractelement <16 x float> %491, i64 15, !dbg !56
  %495 = select i1 %493, float 0.000000e+00, float %494, !dbg !56
  %496 = extractelement <16 x i1> %492, i64 14, !dbg !56
  %497 = extractelement <16 x float> %491, i64 14, !dbg !56
  %498 = select i1 %496, float 0.000000e+00, float %497, !dbg !56
  %499 = extractelement <16 x i1> %492, i64 13, !dbg !56
  %500 = extractelement <16 x float> %491, i64 13, !dbg !56
  %501 = select i1 %499, float 0.000000e+00, float %500, !dbg !56
  %502 = extractelement <16 x i1> %492, i64 12, !dbg !56
  %503 = extractelement <16 x float> %491, i64 12, !dbg !56
  %504 = select i1 %502, float 0.000000e+00, float %503, !dbg !56
  %505 = extractelement <16 x i1> %492, i64 11, !dbg !56
  %506 = extractelement <16 x float> %491, i64 11, !dbg !56
  %507 = select i1 %505, float 0.000000e+00, float %506, !dbg !56
  %508 = extractelement <16 x i1> %492, i64 10, !dbg !56
  %509 = extractelement <16 x float> %491, i64 10, !dbg !56
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !56
  %511 = extractelement <16 x i1> %492, i64 9, !dbg !56
  %512 = extractelement <16 x float> %491, i64 9, !dbg !56
  %513 = select i1 %511, float 0.000000e+00, float %512, !dbg !56
  %514 = extractelement <16 x i1> %492, i64 8, !dbg !56
  %515 = extractelement <16 x float> %491, i64 8, !dbg !56
  %516 = select i1 %514, float 0.000000e+00, float %515, !dbg !56
  %517 = extractelement <16 x i1> %492, i64 7, !dbg !58
  %518 = extractelement <16 x float> %491, i64 7, !dbg !58
  %519 = select i1 %517, float 0.000000e+00, float %518, !dbg !58
  %520 = extractelement <16 x i1> %492, i64 6, !dbg !58
  %521 = extractelement <16 x float> %491, i64 6, !dbg !58
  %522 = select i1 %520, float 0.000000e+00, float %521, !dbg !58
  %523 = extractelement <16 x i1> %492, i64 5, !dbg !58
  %524 = extractelement <16 x float> %491, i64 5, !dbg !58
  %525 = select i1 %523, float 0.000000e+00, float %524, !dbg !58
  %526 = extractelement <16 x i1> %492, i64 4, !dbg !58
  %527 = extractelement <16 x float> %491, i64 4, !dbg !58
  %528 = select i1 %526, float 0.000000e+00, float %527, !dbg !58
  %529 = extractelement <16 x i1> %492, i64 3, !dbg !58
  %530 = extractelement <16 x float> %491, i64 3, !dbg !58
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !58
  %532 = extractelement <16 x i1> %492, i64 2, !dbg !58
  %533 = extractelement <16 x float> %491, i64 2, !dbg !58
  %534 = select i1 %532, float 0.000000e+00, float %533, !dbg !58
  %535 = extractelement <16 x i1> %492, i64 1, !dbg !58
  %536 = extractelement <16 x float> %491, i64 1, !dbg !58
  %537 = select i1 %535, float 0.000000e+00, float %536, !dbg !58
  %538 = extractelement <16 x i1> %492, i64 0, !dbg !58
  %539 = extractelement <16 x float> %491, i64 0, !dbg !58
  %540 = select i1 %538, float 0.000000e+00, float %539, !dbg !58
  %541 = select i1 %24, float %516, float %519, !dbg !59
  %542 = select i1 %24, float %513, float %522, !dbg !59
  %543 = select i1 %24, float %510, float %525, !dbg !59
  %544 = select i1 %24, float %507, float %528, !dbg !59
  %545 = select i1 %25, float %504, float %531, !dbg !59
  %546 = select i1 %25, float %501, float %534, !dbg !59
  %547 = select i1 %25, float %498, float %537, !dbg !59
  %548 = select i1 %25, float %495, float %540, !dbg !59
  %549 = sext i32 %18 to i64, !dbg !60
  %550 = getelementptr float, ptr addrspace(1) %10, i64 %549, !dbg !60
  %551 = sext i32 %19 to i64, !dbg !60
  %552 = getelementptr float, ptr addrspace(1) %10, i64 %551, !dbg !60
  %553 = bitcast float %541 to i32, !dbg !61
  %554 = bitcast float %542 to i32, !dbg !61
  %555 = bitcast float %543 to i32, !dbg !61
  %556 = bitcast float %544 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %553, i32 %554, i32 %555, i32 %556, ptr addrspace(1) %550, i1 true) #3, !dbg !61
  %557 = bitcast float %545 to i32, !dbg !61
  %558 = bitcast float %546 to i32, !dbg !61
  %559 = bitcast float %547 to i32, !dbg !61
  %560 = bitcast float %548 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %557, i32 %558, i32 %559, i32 %560, ptr addrspace(1) %552, i1 true) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn7fymcrbyqzz6ff7rd3idffqezib2dtl73utbkpor7nq2n3veyp.py", directory: "inductor_cache/n7")
!4 = !{ptr @triton_poi_fused_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_14", linkageName: "triton_poi_fused_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 33, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 27, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 36, scope: !7)
!32 = !DILocation(line: 52, column: 20, scope: !7)
!33 = !DILocation(line: 55, column: 48, scope: !7)
!34 = !DILocation(line: 55, column: 40, scope: !7)
!35 = !DILocation(line: 55, column: 31, scope: !7)
!36 = !DILocation(line: 55, column: 54, scope: !7)
!37 = !DILocation(line: 56, column: 31, scope: !7)
!38 = !DILocation(line: 56, column: 44, scope: !7)
!39 = !DILocation(line: 58, column: 31, scope: !7)
!40 = !DILocation(line: 58, column: 44, scope: !7)
!41 = !DILocation(line: 60, column: 20, scope: !7)
!42 = !DILocation(line: 61, column: 27, scope: !7)
!43 = !DILocation(line: 63, column: 20, scope: !7)
!44 = !DILocation(line: 67, column: 31, scope: !7)
!45 = !DILocation(line: 67, column: 44, scope: !7)
!46 = !DILocation(line: 69, column: 31, scope: !7)
!47 = !DILocation(line: 69, column: 44, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 66, column: 20, scope: !7)
!50 = !DILocation(line: 68, column: 20, scope: !7)
!51 = !DILocation(line: 70, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 72, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !57)
!57 = !DILocation(line: 49, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!59 = !DILocation(line: 0, scope: !7)
!60 = !DILocation(line: 76, column: 25, scope: !7)
!61 = !DILocation(line: 76, column: 37, scope: !7)
!62 = !DILocation(line: 76, column: 4, scope: !7)
