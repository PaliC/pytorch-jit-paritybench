; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %13, !dbg !17
  %23 = or disjoint i32 %22, 1, !dbg !17
  %24 = or disjoint i32 %22, 2, !dbg !17
  %25 = or disjoint i32 %22, 3, !dbg !17
  %26 = or disjoint i32 %21, %10, !dbg !17
  %27 = or disjoint i32 %21, %11, !dbg !17
  %.frozen = freeze i32 %22, !dbg !18
  %28 = sdiv i32 %.frozen, 64, !dbg !18
  %29 = mul i32 %28, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %29, !dbg !19
  %30 = srem i32 %23, 64, !dbg !19
  %31 = srem i32 %24, 64, !dbg !19
  %32 = srem i32 %25, 64, !dbg !19
  %.frozen15 = freeze i32 %16, !dbg !20
  %33 = sdiv i32 %.frozen15, 128, !dbg !20
  %34 = mul i32 %33, 128, !dbg !21
  %.decomposed16 = sub i32 %.frozen15, %34, !dbg !21
  %35 = shl i32 %14, 12, !dbg !22
  %36 = shl i32 %15, 12, !dbg !22
  %37 = add i32 %22, %35, !dbg !23
  %38 = add i32 %22, %36, !dbg !23
  %39 = sext i32 %37 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !24
  %41 = sext i32 %38 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !24
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %17) #2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = sitofp i32 %28 to float, !dbg !26
  %62 = fmul float %61, 6.250000e-02, !dbg !27
  %63 = fptosi float %62 to i32, !dbg !28
  %64 = sitofp i32 %.decomposed to float, !dbg !29
  %65 = sitofp i32 %30 to float, !dbg !29
  %66 = sitofp i32 %31 to float, !dbg !29
  %67 = sitofp i32 %32 to float, !dbg !29
  %68 = fmul float %64, 6.250000e-02, !dbg !30
  %69 = fmul float %65, 6.250000e-02, !dbg !30
  %70 = fmul float %66, 6.250000e-02, !dbg !30
  %71 = fmul float %67, 6.250000e-02, !dbg !30
  %72 = fptosi float %68 to i32, !dbg !31
  %73 = fptosi float %69 to i32, !dbg !31
  %74 = fptosi float %70 to i32, !dbg !31
  %75 = fptosi float %71 to i32, !dbg !31
  %76 = shl i32 %63, 2, !dbg !32
  %77 = add i32 %76, %72, !dbg !33
  %78 = add i32 %76, %73, !dbg !33
  %79 = add i32 %76, %74, !dbg !33
  %80 = add i32 %76, %75, !dbg !33
  %81 = shl i32 %14, 4, !dbg !34
  %82 = shl i32 %15, 4, !dbg !34
  %83 = add i32 %77, %81, !dbg !35
  %84 = add i32 %78, %81, !dbg !35
  %85 = add i32 %79, %81, !dbg !35
  %86 = add i32 %80, %81, !dbg !35
  %87 = add i32 %77, %82, !dbg !35
  %88 = add i32 %78, %82, !dbg !35
  %89 = add i32 %79, %82, !dbg !35
  %90 = add i32 %80, %82, !dbg !35
  %91 = sext i32 %83 to i64, !dbg !36
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !36
  %93 = sext i32 %84 to i64, !dbg !36
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !36
  %95 = sext i32 %85 to i64, !dbg !36
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !36
  %97 = sext i32 %86 to i64, !dbg !36
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !36
  %99 = sext i32 %87 to i64, !dbg !36
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !36
  %101 = sext i32 %88 to i64, !dbg !36
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !36
  %103 = sext i32 %89 to i64, !dbg !36
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !36
  %105 = sext i32 %90 to i64, !dbg !36
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !36
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %17) #2, !dbg !37
  %108 = bitcast i32 %107 to float, !dbg !37
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %17) #2, !dbg !37
  %110 = bitcast i32 %109 to float, !dbg !37
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %17) #2, !dbg !37
  %112 = bitcast i32 %111 to float, !dbg !37
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %17) #2, !dbg !37
  %114 = bitcast i32 %113 to float, !dbg !37
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %18) #2, !dbg !37
  %116 = bitcast i32 %115 to float, !dbg !37
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %18) #2, !dbg !37
  %118 = bitcast i32 %117 to float, !dbg !37
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %18) #2, !dbg !37
  %120 = bitcast i32 %119 to float, !dbg !37
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %18) #2, !dbg !37
  %122 = bitcast i32 %121 to float, !dbg !37
  %123 = fadd float %48, %108, !dbg !38
  %124 = fadd float %49, %110, !dbg !38
  %125 = fadd float %50, %112, !dbg !38
  %126 = fadd float %51, %114, !dbg !38
  %127 = fadd float %57, %116, !dbg !38
  %128 = fadd float %58, %118, !dbg !38
  %129 = fadd float %59, %120, !dbg !38
  %130 = fadd float %60, %122, !dbg !38
  %131 = shl i32 %26, 7, !dbg !39
  %132 = shl i32 %27, 7, !dbg !39
  %133 = shl i32 %33, 19, !dbg !40
  %134 = add i32 %133, %.decomposed16, !dbg !41
  %135 = add i32 %134, %131, !dbg !42
  %136 = add i32 %134, %132, !dbg !42
  %137 = sext i32 %135 to i64, !dbg !43
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !43
  %139 = sext i32 %136 to i64, !dbg !43
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !43
  %141 = shl i32 %8, 7, !dbg !44
  %142 = and i32 %141, 896, !dbg !44
  %143 = or disjoint i32 %142, %10, !dbg !44
  %144 = and i32 %12, 508, !dbg !44
  %145 = lshr exact i32 %142, 3, !dbg !44
  %146 = or disjoint i32 %145, %143, !dbg !44
  %147 = zext nneg i32 %146 to i64, !dbg !44
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !44
  %149 = bitcast float %123 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !44
  %150 = or disjoint i32 %143, 32, !dbg !44
  %151 = lshr i32 %150, 3, !dbg !44
  %152 = and i32 %151, 116, !dbg !44
  %153 = add nuw nsw i32 %152, %150, !dbg !44
  %154 = zext nneg i32 %153 to i64, !dbg !44
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %154, !dbg !44
  %156 = bitcast float %124 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !44
  %157 = or disjoint i32 %143, 64, !dbg !44
  %158 = lshr i32 %157, 3, !dbg !44
  %159 = and i32 %158, 120, !dbg !44
  %160 = add nuw nsw i32 %159, %157, !dbg !44
  %161 = zext nneg i32 %160 to i64, !dbg !44
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %161, !dbg !44
  %163 = bitcast float %125 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !44
  %164 = or disjoint i32 %143, 96, !dbg !44
  %165 = lshr i32 %164, 3, !dbg !44
  %166 = and i32 %165, 124, !dbg !44
  %167 = add nuw nsw i32 %166, %164, !dbg !44
  %168 = zext nneg i32 %167 to i64, !dbg !44
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %168, !dbg !44
  %170 = bitcast float %126 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !44
  %171 = or disjoint i32 %143, 16, !dbg !44
  %172 = add nuw nsw i32 %171, %145, !dbg !44
  %173 = zext nneg i32 %172 to i64, !dbg !44
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %173, !dbg !44
  %175 = bitcast float %127 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !44
  %176 = or disjoint i32 %143, 48, !dbg !44
  %177 = lshr i32 %176, 3, !dbg !44
  %178 = and i32 %177, 116, !dbg !44
  %179 = add nuw nsw i32 %178, %176, !dbg !44
  %180 = zext nneg i32 %179 to i64, !dbg !44
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %180, !dbg !44
  %182 = bitcast float %128 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !44
  %183 = or disjoint i32 %143, 80, !dbg !44
  %184 = lshr i32 %183, 3, !dbg !44
  %185 = and i32 %184, 120, !dbg !44
  %186 = add nuw nsw i32 %185, %183, !dbg !44
  %187 = zext nneg i32 %186 to i64, !dbg !44
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %187, !dbg !44
  %189 = bitcast float %129 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !44
  %190 = or disjoint i32 %143, 112, !dbg !44
  %191 = lshr i32 %190, 3, !dbg !44
  %192 = and i32 %191, 124, !dbg !44
  %193 = add nuw nsw i32 %192, %190, !dbg !44
  %194 = zext nneg i32 %193 to i64, !dbg !44
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %194, !dbg !44
  %196 = bitcast float %130 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %197 = lshr i32 %12, 3, !dbg !44
  %198 = and i32 %197, 60, !dbg !44
  %199 = add nuw nsw i32 %198, %144, !dbg !44
  %200 = zext nneg i32 %199 to i64, !dbg !44
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %200, !dbg !44
  %202 = or disjoint i32 %144, 512, !dbg !44
  %203 = lshr i32 %202, 3, !dbg !44
  %204 = and i32 %203, 124, !dbg !44
  %205 = add nuw nsw i32 %204, %202, !dbg !44
  %206 = zext nneg i32 %205 to i64, !dbg !44
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %206, !dbg !44
  %208 = load <4 x i32>, ptr addrspace(3) %207, align 16, !dbg !44
  %.extract = load i32, ptr addrspace(3) %201, align 16, !dbg !44
  %209 = getelementptr inbounds i8, ptr addrspace(3) %201, i64 4, !dbg !44
  %.extract8 = load i32, ptr addrspace(3) %209, align 4, !dbg !44
  %210 = getelementptr inbounds i8, ptr addrspace(3) %201, i64 8, !dbg !44
  %.extract9 = load i32, ptr addrspace(3) %210, align 8, !dbg !44
  %211 = getelementptr inbounds i8, ptr addrspace(3) %201, i64 12, !dbg !44
  %.extract10 = load i32, ptr addrspace(3) %211, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %138, i1 %19) #2, !dbg !44
  %.extract11 = extractelement <4 x i32> %208, i64 0, !dbg !44
  %.extract12 = extractelement <4 x i32> %208, i64 1, !dbg !44
  %.extract13 = extractelement <4 x i32> %208, i64 2, !dbg !44
  %.extract14 = extractelement <4 x i32> %208, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %140, i1 %19) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbzixknvbypz6iruufz3qq5iwdohfj4omjds3fudqetucvsnj6ei.py", directory: "inductor_cache/bz")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_0", linkageName: "triton_poi_fused__unsafe_index_add_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 36, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 46, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 19, scope: !7)
!29 = !DILocation(line: 41, column: 19, scope: !7)
!30 = !DILocation(line: 42, column: 18, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 39, scope: !7)
!33 = !DILocation(line: 44, column: 37, scope: !7)
!34 = !DILocation(line: 44, column: 49, scope: !7)
!35 = !DILocation(line: 44, column: 46, scope: !7)
!36 = !DILocation(line: 44, column: 30, scope: !7)
!37 = !DILocation(line: 44, column: 54, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 34, scope: !7)
!40 = !DILocation(line: 46, column: 46, scope: !7)
!41 = !DILocation(line: 46, column: 30, scope: !7)
!42 = !DILocation(line: 46, column: 39, scope: !7)
!43 = !DILocation(line: 46, column: 25, scope: !7)
!44 = !DILocation(line: 46, column: 58, scope: !7)
!45 = !DILocation(line: 46, column: 4, scope: !7)
