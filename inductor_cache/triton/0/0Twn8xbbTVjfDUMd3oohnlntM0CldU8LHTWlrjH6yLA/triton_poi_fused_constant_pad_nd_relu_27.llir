; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !14
  %14 = insertelement <4 x i32> %13, i32 %11, i64 1, !dbg !14
  %15 = insertelement <4 x i32> %14, i32 %10, i64 2, !dbg !14
  %16 = insertelement <4 x i32> %15, i32 %9, i64 3, !dbg !14
  %.frozen = freeze <4 x i32> %16, !dbg !14
  %17 = sdiv <4 x i32> %.frozen, splat (i32 5), !dbg !14
  %18 = srem <4 x i32> %17, splat (i32 6), !dbg !15
  %19 = mul <4 x i32> %17, splat (i32 5), !dbg !16
  %.decomposed = sub <4 x i32> %.frozen, %19, !dbg !16
  %20 = sdiv i32 %9, 30, !dbg !17
  %21 = sdiv i32 %11, 30, !dbg !17
  %22 = icmp sgt <4 x i32> %.decomposed, zeroinitializer, !dbg !18
  %23 = add nsw <4 x i32> %18, splat (i32 -1), !dbg !19
  %24 = icmp ult <4 x i32> %23, splat (i32 4), !dbg !19
  %25 = and <4 x i1> %22, %24, !dbg !20
  %26 = extractelement <4 x i1> %25, i64 3, !dbg !20
  %27 = and <4 x i1> %22, %24, !dbg !20
  %28 = extractelement <4 x i1> %27, i64 2, !dbg !20
  %29 = and <4 x i1> %22, %24, !dbg !20
  %30 = extractelement <4 x i1> %29, i64 1, !dbg !20
  %31 = and <4 x i1> %22, %24, !dbg !20
  %32 = extractelement <4 x i1> %31, i64 0, !dbg !20
  %33 = extractelement <4 x i32> %18, i64 3, !dbg !21
  %34 = shl nsw i32 %33, 2, !dbg !21
  %35 = extractelement <4 x i32> %18, i64 2, !dbg !21
  %36 = shl nsw i32 %35, 2, !dbg !21
  %37 = extractelement <4 x i32> %18, i64 1, !dbg !21
  %38 = shl nsw i32 %37, 2, !dbg !21
  %39 = extractelement <4 x i32> %18, i64 0, !dbg !21
  %40 = shl nsw i32 %39, 2, !dbg !21
  %41 = shl nsw i32 %20, 4, !dbg !22
  %42 = shl nsw i32 %21, 4, !dbg !22
  %43 = add nsw i32 %41, -5, !dbg !23
  %44 = extractelement <4 x i32> %.decomposed, i64 3, !dbg !24
  %45 = add nsw i32 %43, %44, !dbg !24
  %46 = add nsw i32 %45, %34, !dbg !25
  %47 = extractelement <4 x i32> %.decomposed, i64 2, !dbg !24
  %48 = add nsw i32 %43, %47, !dbg !24
  %49 = add nsw i32 %48, %36, !dbg !25
  %50 = add nsw i32 %42, -5, !dbg !23
  %51 = extractelement <4 x i32> %.decomposed, i64 1, !dbg !24
  %52 = add nsw i32 %50, %51, !dbg !24
  %53 = add nsw i32 %52, %38, !dbg !25
  %54 = extractelement <4 x i32> %.decomposed, i64 0, !dbg !24
  %55 = add nsw i32 %50, %54, !dbg !24
  %56 = add nsw i32 %55, %40, !dbg !25
  %57 = sext i32 %46 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !26
  %59 = sext i32 %49 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !26
  %61 = sext i32 %53 to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !26
  %63 = sext i32 %56 to i64, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %26, i32 0, i1 %26) #1, !dbg !27
  %66 = bitcast i32 %65 to float, !dbg !27
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %28, i32 0, i1 %28) #1, !dbg !27
  %68 = bitcast i32 %67 to float, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %30, i32 0, i1 %30) #1, !dbg !27
  %70 = bitcast i32 %69 to float, !dbg !27
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %32, i32 0, i1 %32) #1, !dbg !27
  %72 = bitcast i32 %71 to float, !dbg !27
  %73 = fcmp olt float %66, 0.000000e+00, !dbg !28
  %74 = fcmp olt float %68, 0.000000e+00, !dbg !28
  %75 = fcmp olt float %70, 0.000000e+00, !dbg !28
  %76 = fcmp olt float %72, 0.000000e+00, !dbg !28
  %77 = select i1 %73, float 0.000000e+00, float %66, !dbg !32
  %78 = select i1 %74, float 0.000000e+00, float %68, !dbg !32
  %79 = select i1 %75, float 0.000000e+00, float %70, !dbg !32
  %80 = select i1 %76, float 0.000000e+00, float %72, !dbg !32
  %81 = sext i32 %9 to i64, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !33
  %83 = bitcast float %77 to i32, !dbg !34
  %84 = select i1 %26, i32 %83, i32 0, !dbg !35
  %85 = bitcast float %78 to i32, !dbg !34
  %86 = select i1 %28, i32 %85, i32 0, !dbg !35
  %87 = bitcast float %79 to i32, !dbg !34
  %88 = select i1 %30, i32 %87, i32 0, !dbg !35
  %89 = bitcast float %80 to i32, !dbg !34
  %90 = select i1 %32, i32 %89, i32 0, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %84, i32 %86, i32 %88, i32 %90, ptr addrspace(1) %82, i1 true) #1, !dbg !34
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctuyxxn4zxznykqj2b332bjxxntjqrbjcjzhcw5gbsi367esen4s.py", directory: "inductor_cache/tu")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_relu_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_relu_27", linkageName: "triton_poi_fused_constant_pad_nd_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 18, scope: !7)
!20 = !DILocation(line: 36, column: 18, scope: !7)
!21 = !DILocation(line: 37, column: 44, scope: !7)
!22 = !DILocation(line: 37, column: 52, scope: !7)
!23 = !DILocation(line: 37, column: 37, scope: !7)
!24 = !DILocation(line: 37, column: 42, scope: !7)
!25 = !DILocation(line: 37, column: 49, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 57, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 39, column: 42, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 42, column: 25, scope: !7)
!34 = !DILocation(line: 42, column: 37, scope: !7)
!35 = !DILocation(line: 41, column: 34, scope: !7)
!36 = !DILocation(line: 42, column: 4, scope: !7)
