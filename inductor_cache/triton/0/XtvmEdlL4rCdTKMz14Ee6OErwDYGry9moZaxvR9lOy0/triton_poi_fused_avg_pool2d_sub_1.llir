; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = and i32 %9, 1, !dbg !12
  %13 = shl nuw nsw i32 %12, 1, !dbg !12
  %14 = shl i32 %9, 1, !dbg !12
  %15 = and i32 %14, 14, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %8, %15, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %.lobit12 = lshr i32 %9, 3, !dbg !17
  %22 = and i32 %.lobit12, 3, !dbg !17
  %23 = or disjoint i32 %21, %13, !dbg !18
  %24 = or disjoint i32 %21, %22, !dbg !18
  %25 = icmp slt i32 %23, 4, !dbg !19
  %26 = icmp slt i32 %24, 4, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %27 = sdiv i32 %.frozen, 4, !dbg !20
  %28 = mul i32 %27, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen5 = freeze i32 %17, !dbg !20
  %29 = sdiv i32 %.frozen5, 4, !dbg !20
  %30 = mul i32 %29, 4, !dbg !21
  %.decomposed6 = sub i32 %.frozen5, %30, !dbg !21
  %31 = shl nsw i32 %.decomposed, 2, !dbg !22
  %32 = mul i32 %27, 112, !dbg !23
  %33 = add i32 %32, %31, !dbg !24
  %34 = add i32 %33, %23, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = and i1 %18, %25, !dbg !27
  %38 = and i1 %19, %26, !dbg !27
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %37) #2, !dbg !28
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !28
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !28
  %42 = bitcast i32 %40 to float, !dbg !28
  %43 = bitcast i32 %41 to float, !dbg !28
  %44 = add i32 %33, 4, !dbg !29
  %45 = add i32 %44, %23, !dbg !30
  %46 = sext i32 %45 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !31
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %37) #2, !dbg !32
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !32
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !32
  %51 = bitcast i32 %49 to float, !dbg !32
  %52 = bitcast i32 %50 to float, !dbg !32
  %53 = add i32 %33, 8, !dbg !33
  %54 = add i32 %53, %23, !dbg !34
  %55 = sext i32 %54 to i64, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !35
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %37) #2, !dbg !36
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !36
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !36
  %60 = bitcast i32 %58 to float, !dbg !36
  %61 = bitcast i32 %59 to float, !dbg !36
  %62 = add i32 %33, 12, !dbg !37
  %63 = add i32 %62, %23, !dbg !38
  %64 = sext i32 %63 to i64, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !39
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %37) #2, !dbg !40
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !40
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !40
  %69 = bitcast i32 %67 to float, !dbg !40
  %70 = bitcast i32 %68 to float, !dbg !40
  %71 = add i32 %33, 16, !dbg !41
  %72 = add i32 %71, %23, !dbg !42
  %73 = sext i32 %72 to i64, !dbg !43
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !43
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %37) #2, !dbg !44
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !44
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !44
  %78 = bitcast i32 %76 to float, !dbg !44
  %79 = bitcast i32 %77 to float, !dbg !44
  %80 = add i32 %33, 20, !dbg !45
  %81 = add i32 %80, %23, !dbg !46
  %82 = sext i32 %81 to i64, !dbg !47
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !47
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %37) #2, !dbg !48
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !48
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !48
  %87 = bitcast i32 %85 to float, !dbg !48
  %88 = bitcast i32 %86 to float, !dbg !48
  %89 = add i32 %33, 24, !dbg !49
  %90 = add i32 %89, %23, !dbg !50
  %91 = sext i32 %90 to i64, !dbg !51
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !51
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %92, i1 %37) #2, !dbg !52
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !52
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !52
  %96 = bitcast i32 %94 to float, !dbg !52
  %97 = bitcast i32 %95 to float, !dbg !52
  %98 = add i32 %33, 28, !dbg !53
  %99 = add i32 %98, %23, !dbg !54
  %100 = sext i32 %99 to i64, !dbg !55
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !55
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %101, i1 %37) #2, !dbg !56
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !56
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !56
  %105 = bitcast i32 %103 to float, !dbg !56
  %106 = bitcast i32 %104 to float, !dbg !56
  %107 = add i32 %33, 32, !dbg !57
  %108 = add i32 %107, %23, !dbg !58
  %109 = sext i32 %108 to i64, !dbg !59
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !59
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %110, i1 %37) #2, !dbg !60
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !60
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !60
  %114 = bitcast i32 %112 to float, !dbg !60
  %115 = bitcast i32 %113 to float, !dbg !60
  %116 = add i32 %33, 36, !dbg !61
  %117 = add i32 %116, %23, !dbg !62
  %118 = sext i32 %117 to i64, !dbg !63
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !63
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %119, i1 %37) #2, !dbg !64
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !64
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !64
  %123 = bitcast i32 %121 to float, !dbg !64
  %124 = bitcast i32 %122 to float, !dbg !64
  %125 = add i32 %33, 40, !dbg !65
  %126 = add i32 %125, %23, !dbg !66
  %127 = sext i32 %126 to i64, !dbg !67
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !67
  %129 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %128, i1 %37) #2, !dbg !68
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !68
  %131 = extractvalue { i32, i32 } %129, 1, !dbg !68
  %132 = bitcast i32 %130 to float, !dbg !68
  %133 = bitcast i32 %131 to float, !dbg !68
  %134 = add i32 %33, 44, !dbg !69
  %135 = add i32 %134, %23, !dbg !70
  %136 = sext i32 %135 to i64, !dbg !71
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !71
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %137, i1 %37) #2, !dbg !72
  %139 = extractvalue { i32, i32 } %138, 0, !dbg !72
  %140 = extractvalue { i32, i32 } %138, 1, !dbg !72
  %141 = bitcast i32 %139 to float, !dbg !72
  %142 = bitcast i32 %140 to float, !dbg !72
  %143 = add i32 %33, 48, !dbg !73
  %144 = add i32 %143, %23, !dbg !74
  %145 = sext i32 %144 to i64, !dbg !75
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !75
  %147 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %146, i1 %37) #2, !dbg !76
  %148 = extractvalue { i32, i32 } %147, 0, !dbg !76
  %149 = extractvalue { i32, i32 } %147, 1, !dbg !76
  %150 = bitcast i32 %148 to float, !dbg !76
  %151 = bitcast i32 %149 to float, !dbg !76
  %152 = add i32 %33, 52, !dbg !77
  %153 = add i32 %152, %23, !dbg !78
  %154 = sext i32 %153 to i64, !dbg !79
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !79
  %156 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %155, i1 %37) #2, !dbg !80
  %157 = extractvalue { i32, i32 } %156, 0, !dbg !80
  %158 = extractvalue { i32, i32 } %156, 1, !dbg !80
  %159 = bitcast i32 %157 to float, !dbg !80
  %160 = bitcast i32 %158 to float, !dbg !80
  %161 = add i32 %33, 56, !dbg !81
  %162 = add i32 %161, %23, !dbg !82
  %163 = sext i32 %162 to i64, !dbg !83
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !83
  %165 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %164, i1 %37) #2, !dbg !84
  %166 = extractvalue { i32, i32 } %165, 0, !dbg !84
  %167 = extractvalue { i32, i32 } %165, 1, !dbg !84
  %168 = bitcast i32 %166 to float, !dbg !84
  %169 = bitcast i32 %167 to float, !dbg !84
  %170 = add i32 %33, 60, !dbg !85
  %171 = add i32 %170, %23, !dbg !86
  %172 = sext i32 %171 to i64, !dbg !87
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !87
  %174 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %173, i1 %37) #2, !dbg !88
  %175 = extractvalue { i32, i32 } %174, 0, !dbg !88
  %176 = extractvalue { i32, i32 } %174, 1, !dbg !88
  %177 = bitcast i32 %175 to float, !dbg !88
  %178 = bitcast i32 %176 to float, !dbg !88
  %179 = add i32 %33, 64, !dbg !89
  %180 = add i32 %179, %23, !dbg !90
  %181 = sext i32 %180 to i64, !dbg !91
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !91
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %182, i1 %37) #2, !dbg !92
  %184 = extractvalue { i32, i32 } %183, 0, !dbg !92
  %185 = extractvalue { i32, i32 } %183, 1, !dbg !92
  %186 = bitcast i32 %184 to float, !dbg !92
  %187 = bitcast i32 %185 to float, !dbg !92
  %188 = add i32 %33, 68, !dbg !93
  %189 = add i32 %188, %23, !dbg !94
  %190 = sext i32 %189 to i64, !dbg !95
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !95
  %192 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %191, i1 %37) #2, !dbg !96
  %193 = extractvalue { i32, i32 } %192, 0, !dbg !96
  %194 = extractvalue { i32, i32 } %192, 1, !dbg !96
  %195 = bitcast i32 %193 to float, !dbg !96
  %196 = bitcast i32 %194 to float, !dbg !96
  %197 = add i32 %33, 72, !dbg !97
  %198 = add i32 %197, %23, !dbg !98
  %199 = sext i32 %198 to i64, !dbg !99
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !99
  %201 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %200, i1 %37) #2, !dbg !100
  %202 = extractvalue { i32, i32 } %201, 0, !dbg !100
  %203 = extractvalue { i32, i32 } %201, 1, !dbg !100
  %204 = bitcast i32 %202 to float, !dbg !100
  %205 = bitcast i32 %203 to float, !dbg !100
  %206 = add i32 %33, 76, !dbg !101
  %207 = add i32 %206, %23, !dbg !102
  %208 = sext i32 %207 to i64, !dbg !103
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !103
  %210 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %209, i1 %37) #2, !dbg !104
  %211 = extractvalue { i32, i32 } %210, 0, !dbg !104
  %212 = extractvalue { i32, i32 } %210, 1, !dbg !104
  %213 = bitcast i32 %211 to float, !dbg !104
  %214 = bitcast i32 %212 to float, !dbg !104
  %215 = add i32 %33, 80, !dbg !105
  %216 = add i32 %215, %23, !dbg !106
  %217 = sext i32 %216 to i64, !dbg !107
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !107
  %219 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %218, i1 %37) #2, !dbg !108
  %220 = extractvalue { i32, i32 } %219, 0, !dbg !108
  %221 = extractvalue { i32, i32 } %219, 1, !dbg !108
  %222 = bitcast i32 %220 to float, !dbg !108
  %223 = bitcast i32 %221 to float, !dbg !108
  %224 = add i32 %33, 84, !dbg !109
  %225 = add i32 %224, %23, !dbg !110
  %226 = sext i32 %225 to i64, !dbg !111
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !111
  %228 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %227, i1 %37) #2, !dbg !112
  %229 = extractvalue { i32, i32 } %228, 0, !dbg !112
  %230 = extractvalue { i32, i32 } %228, 1, !dbg !112
  %231 = bitcast i32 %229 to float, !dbg !112
  %232 = bitcast i32 %230 to float, !dbg !112
  %233 = add i32 %33, 88, !dbg !113
  %234 = add i32 %233, %23, !dbg !114
  %235 = sext i32 %234 to i64, !dbg !115
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !115
  %237 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %236, i1 %37) #2, !dbg !116
  %238 = extractvalue { i32, i32 } %237, 0, !dbg !116
  %239 = extractvalue { i32, i32 } %237, 1, !dbg !116
  %240 = bitcast i32 %238 to float, !dbg !116
  %241 = bitcast i32 %239 to float, !dbg !116
  %242 = add i32 %33, 92, !dbg !117
  %243 = add i32 %242, %23, !dbg !118
  %244 = sext i32 %243 to i64, !dbg !119
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !119
  %246 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %245, i1 %37) #2, !dbg !120
  %247 = extractvalue { i32, i32 } %246, 0, !dbg !120
  %248 = extractvalue { i32, i32 } %246, 1, !dbg !120
  %249 = bitcast i32 %247 to float, !dbg !120
  %250 = bitcast i32 %248 to float, !dbg !120
  %251 = add i32 %33, 96, !dbg !121
  %252 = add i32 %251, %23, !dbg !122
  %253 = sext i32 %252 to i64, !dbg !123
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !123
  %255 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %254, i1 %37) #2, !dbg !124
  %256 = extractvalue { i32, i32 } %255, 0, !dbg !124
  %257 = extractvalue { i32, i32 } %255, 1, !dbg !124
  %258 = bitcast i32 %256 to float, !dbg !124
  %259 = bitcast i32 %257 to float, !dbg !124
  %260 = shl i32 %16, 2, !dbg !125
  %261 = add i32 %23, %260, !dbg !126
  %262 = sext i32 %261 to i64, !dbg !127
  %263 = getelementptr float, ptr addrspace(1) %1, i64 %262, !dbg !127
  %264 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %263, i1 %37) #2, !dbg !128
  %265 = extractvalue { i32, i32 } %264, 0, !dbg !128
  %266 = extractvalue { i32, i32 } %264, 1, !dbg !128
  %267 = bitcast i32 %265 to float, !dbg !128
  %268 = bitcast i32 %266 to float, !dbg !128
  %269 = fadd float %42, %51, !dbg !129
  %270 = fadd float %43, %52, !dbg !129
  %271 = fadd float %269, %60, !dbg !130
  %272 = fadd float %270, %61, !dbg !130
  %273 = fadd float %271, %69, !dbg !131
  %274 = fadd float %272, %70, !dbg !131
  %275 = fadd float %273, %78, !dbg !132
  %276 = fadd float %274, %79, !dbg !132
  %277 = fadd float %275, %87, !dbg !133
  %278 = fadd float %276, %88, !dbg !133
  %279 = fadd float %277, %96, !dbg !134
  %280 = fadd float %278, %97, !dbg !134
  %281 = fadd float %279, %105, !dbg !135
  %282 = fadd float %280, %106, !dbg !135
  %283 = fadd float %281, %114, !dbg !136
  %284 = fadd float %282, %115, !dbg !136
  %285 = fadd float %283, %123, !dbg !137
  %286 = fadd float %284, %124, !dbg !137
  %287 = fadd float %285, %132, !dbg !138
  %288 = fadd float %286, %133, !dbg !138
  %289 = fadd float %287, %141, !dbg !139
  %290 = fadd float %288, %142, !dbg !139
  %291 = fadd float %289, %150, !dbg !140
  %292 = fadd float %290, %151, !dbg !140
  %293 = fadd float %291, %159, !dbg !141
  %294 = fadd float %292, %160, !dbg !141
  %295 = fadd float %293, %168, !dbg !142
  %296 = fadd float %294, %169, !dbg !142
  %297 = fadd float %295, %177, !dbg !143
  %298 = fadd float %296, %178, !dbg !143
  %299 = fadd float %297, %186, !dbg !144
  %300 = fadd float %298, %187, !dbg !144
  %301 = fadd float %299, %195, !dbg !145
  %302 = fadd float %300, %196, !dbg !145
  %303 = fadd float %301, %204, !dbg !146
  %304 = fadd float %302, %205, !dbg !146
  %305 = fadd float %303, %213, !dbg !147
  %306 = fadd float %304, %214, !dbg !147
  %307 = fadd float %305, %222, !dbg !148
  %308 = fadd float %306, %223, !dbg !148
  %309 = fadd float %307, %231, !dbg !149
  %310 = fadd float %308, %232, !dbg !149
  %311 = fadd float %309, %240, !dbg !150
  %312 = fadd float %310, %241, !dbg !150
  %313 = fadd float %311, %249, !dbg !151
  %314 = fadd float %312, %250, !dbg !151
  %315 = fadd float %313, %258, !dbg !152
  %316 = fadd float %314, %259, !dbg !152
  %317 = fmul float %315, 0x3FA47AE140000000, !dbg !153
  %318 = fmul float %316, 0x3FA47AE140000000, !dbg !153
  %319 = fsub float %267, %317, !dbg !154
  %320 = fsub float %268, %318, !dbg !154
  %321 = shl i32 %24, 2, !dbg !155
  %322 = add i32 %321, %.decomposed6, !dbg !156
  %323 = shl i32 %29, 4, !dbg !157
  %324 = add i32 %322, %323, !dbg !158
  %325 = sext i32 %324 to i64, !dbg !159
  %326 = getelementptr float, ptr addrspace(1) %2, i64 %325, !dbg !159
  %327 = shl nuw nsw i32 %12, 5, !dbg !160
  %328 = or disjoint i32 %327, %11, !dbg !160
  %329 = and i32 %14, 62, !dbg !160
  %330 = shl nuw nsw i32 %12, 2, !dbg !160
  %331 = add nuw nsw i32 %328, %330, !dbg !160
  %332 = zext nneg i32 %331 to i64, !dbg !160
  %333 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %332, !dbg !160
  %334 = bitcast float %317 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #2, !dbg !160
  %335 = or disjoint i32 %328, 16, !dbg !160
  %336 = lshr i32 %335, 3, !dbg !160
  %337 = and i32 %336, 6, !dbg !160
  %338 = add nuw nsw i32 %337, %335, !dbg !160
  %339 = zext nneg i32 %338 to i64, !dbg !160
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %339, !dbg !160
  %341 = bitcast float %318 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #2, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %342 = lshr i32 %14, 3, !dbg !160
  %343 = and i32 %342, 6, !dbg !160
  %344 = add nuw nsw i32 %343, %329, !dbg !160
  %345 = zext nneg i32 %344 to i64, !dbg !160
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %345, !dbg !160
  %.extract = load i32, ptr addrspace(3) %346, align 8, !dbg !160
  %347 = getelementptr inbounds i8, ptr addrspace(3) %346, i64 4, !dbg !160
  %.extract4 = load i32, ptr addrspace(3) %347, align 4, !dbg !160
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %326, i1 %38) #2, !dbg !160
  %348 = getelementptr float, ptr addrspace(1) %3, i64 %262, !dbg !161
  %349 = bitcast float %319 to i32, !dbg !162
  %350 = bitcast float %320 to i32, !dbg !162
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %349, i32 %350, ptr addrspace(1) %348, i1 %37) #2, !dbg !162
  ret void, !dbg !163
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccvw4kt2kc6ilhttn7kdkz3vbvweu2sdss6g4o46skvyoos5tfax.py", directory: "inductor_cache/cv")
!4 = !{ptr @triton_poi_fused_avg_pool2d_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_sub_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_sub_1", linkageName: "triton_poi_fused_avg_pool2d_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 46, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 59, scope: !7)
!28 = !DILocation(line: 32, column: 51, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 46, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 55, scope: !7)
!33 = !DILocation(line: 34, column: 39, scope: !7)
!34 = !DILocation(line: 34, column: 46, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 55, scope: !7)
!37 = !DILocation(line: 35, column: 40, scope: !7)
!38 = !DILocation(line: 35, column: 47, scope: !7)
!39 = !DILocation(line: 35, column: 30, scope: !7)
!40 = !DILocation(line: 35, column: 56, scope: !7)
!41 = !DILocation(line: 36, column: 40, scope: !7)
!42 = !DILocation(line: 36, column: 47, scope: !7)
!43 = !DILocation(line: 36, column: 30, scope: !7)
!44 = !DILocation(line: 36, column: 56, scope: !7)
!45 = !DILocation(line: 37, column: 40, scope: !7)
!46 = !DILocation(line: 37, column: 47, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 56, scope: !7)
!49 = !DILocation(line: 38, column: 41, scope: !7)
!50 = !DILocation(line: 38, column: 48, scope: !7)
!51 = !DILocation(line: 38, column: 31, scope: !7)
!52 = !DILocation(line: 38, column: 57, scope: !7)
!53 = !DILocation(line: 39, column: 41, scope: !7)
!54 = !DILocation(line: 39, column: 48, scope: !7)
!55 = !DILocation(line: 39, column: 31, scope: !7)
!56 = !DILocation(line: 39, column: 57, scope: !7)
!57 = !DILocation(line: 40, column: 41, scope: !7)
!58 = !DILocation(line: 40, column: 48, scope: !7)
!59 = !DILocation(line: 40, column: 31, scope: !7)
!60 = !DILocation(line: 40, column: 57, scope: !7)
!61 = !DILocation(line: 41, column: 41, scope: !7)
!62 = !DILocation(line: 41, column: 48, scope: !7)
!63 = !DILocation(line: 41, column: 31, scope: !7)
!64 = !DILocation(line: 41, column: 57, scope: !7)
!65 = !DILocation(line: 42, column: 41, scope: !7)
!66 = !DILocation(line: 42, column: 48, scope: !7)
!67 = !DILocation(line: 42, column: 31, scope: !7)
!68 = !DILocation(line: 42, column: 57, scope: !7)
!69 = !DILocation(line: 43, column: 41, scope: !7)
!70 = !DILocation(line: 43, column: 48, scope: !7)
!71 = !DILocation(line: 43, column: 31, scope: !7)
!72 = !DILocation(line: 43, column: 57, scope: !7)
!73 = !DILocation(line: 44, column: 41, scope: !7)
!74 = !DILocation(line: 44, column: 48, scope: !7)
!75 = !DILocation(line: 44, column: 31, scope: !7)
!76 = !DILocation(line: 44, column: 57, scope: !7)
!77 = !DILocation(line: 45, column: 41, scope: !7)
!78 = !DILocation(line: 45, column: 48, scope: !7)
!79 = !DILocation(line: 45, column: 31, scope: !7)
!80 = !DILocation(line: 45, column: 57, scope: !7)
!81 = !DILocation(line: 46, column: 41, scope: !7)
!82 = !DILocation(line: 46, column: 48, scope: !7)
!83 = !DILocation(line: 46, column: 31, scope: !7)
!84 = !DILocation(line: 46, column: 57, scope: !7)
!85 = !DILocation(line: 47, column: 41, scope: !7)
!86 = !DILocation(line: 47, column: 48, scope: !7)
!87 = !DILocation(line: 47, column: 31, scope: !7)
!88 = !DILocation(line: 47, column: 57, scope: !7)
!89 = !DILocation(line: 48, column: 41, scope: !7)
!90 = !DILocation(line: 48, column: 48, scope: !7)
!91 = !DILocation(line: 48, column: 31, scope: !7)
!92 = !DILocation(line: 48, column: 57, scope: !7)
!93 = !DILocation(line: 49, column: 41, scope: !7)
!94 = !DILocation(line: 49, column: 48, scope: !7)
!95 = !DILocation(line: 49, column: 31, scope: !7)
!96 = !DILocation(line: 49, column: 57, scope: !7)
!97 = !DILocation(line: 50, column: 41, scope: !7)
!98 = !DILocation(line: 50, column: 48, scope: !7)
!99 = !DILocation(line: 50, column: 31, scope: !7)
!100 = !DILocation(line: 50, column: 57, scope: !7)
!101 = !DILocation(line: 51, column: 41, scope: !7)
!102 = !DILocation(line: 51, column: 48, scope: !7)
!103 = !DILocation(line: 51, column: 31, scope: !7)
!104 = !DILocation(line: 51, column: 57, scope: !7)
!105 = !DILocation(line: 52, column: 41, scope: !7)
!106 = !DILocation(line: 52, column: 48, scope: !7)
!107 = !DILocation(line: 52, column: 31, scope: !7)
!108 = !DILocation(line: 52, column: 57, scope: !7)
!109 = !DILocation(line: 53, column: 41, scope: !7)
!110 = !DILocation(line: 53, column: 48, scope: !7)
!111 = !DILocation(line: 53, column: 31, scope: !7)
!112 = !DILocation(line: 53, column: 57, scope: !7)
!113 = !DILocation(line: 54, column: 41, scope: !7)
!114 = !DILocation(line: 54, column: 48, scope: !7)
!115 = !DILocation(line: 54, column: 31, scope: !7)
!116 = !DILocation(line: 54, column: 57, scope: !7)
!117 = !DILocation(line: 55, column: 41, scope: !7)
!118 = !DILocation(line: 55, column: 48, scope: !7)
!119 = !DILocation(line: 55, column: 31, scope: !7)
!120 = !DILocation(line: 55, column: 57, scope: !7)
!121 = !DILocation(line: 56, column: 41, scope: !7)
!122 = !DILocation(line: 56, column: 48, scope: !7)
!123 = !DILocation(line: 56, column: 31, scope: !7)
!124 = !DILocation(line: 56, column: 57, scope: !7)
!125 = !DILocation(line: 57, column: 38, scope: !7)
!126 = !DILocation(line: 57, column: 36, scope: !7)
!127 = !DILocation(line: 57, column: 31, scope: !7)
!128 = !DILocation(line: 57, column: 43, scope: !7)
!129 = !DILocation(line: 58, column: 18, scope: !7)
!130 = !DILocation(line: 59, column: 18, scope: !7)
!131 = !DILocation(line: 60, column: 18, scope: !7)
!132 = !DILocation(line: 61, column: 18, scope: !7)
!133 = !DILocation(line: 62, column: 19, scope: !7)
!134 = !DILocation(line: 63, column: 20, scope: !7)
!135 = !DILocation(line: 64, column: 20, scope: !7)
!136 = !DILocation(line: 65, column: 20, scope: !7)
!137 = !DILocation(line: 66, column: 20, scope: !7)
!138 = !DILocation(line: 67, column: 20, scope: !7)
!139 = !DILocation(line: 68, column: 20, scope: !7)
!140 = !DILocation(line: 69, column: 20, scope: !7)
!141 = !DILocation(line: 70, column: 20, scope: !7)
!142 = !DILocation(line: 71, column: 20, scope: !7)
!143 = !DILocation(line: 72, column: 20, scope: !7)
!144 = !DILocation(line: 73, column: 20, scope: !7)
!145 = !DILocation(line: 74, column: 20, scope: !7)
!146 = !DILocation(line: 75, column: 20, scope: !7)
!147 = !DILocation(line: 76, column: 20, scope: !7)
!148 = !DILocation(line: 77, column: 20, scope: !7)
!149 = !DILocation(line: 78, column: 20, scope: !7)
!150 = !DILocation(line: 79, column: 20, scope: !7)
!151 = !DILocation(line: 80, column: 20, scope: !7)
!152 = !DILocation(line: 81, column: 20, scope: !7)
!153 = !DILocation(line: 83, column: 20, scope: !7)
!154 = !DILocation(line: 84, column: 20, scope: !7)
!155 = !DILocation(line: 85, column: 32, scope: !7)
!156 = !DILocation(line: 85, column: 30, scope: !7)
!157 = !DILocation(line: 85, column: 40, scope: !7)
!158 = !DILocation(line: 85, column: 37, scope: !7)
!159 = !DILocation(line: 85, column: 25, scope: !7)
!160 = !DILocation(line: 85, column: 52, scope: !7)
!161 = !DILocation(line: 86, column: 25, scope: !7)
!162 = !DILocation(line: 86, column: 44, scope: !7)
!163 = !DILocation(line: 86, column: 4, scope: !7)
