; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = sdiv i32 %20, 1024, !dbg !14
  %22 = srem i32 %21, 32, !dbg !15
  %23 = sext i32 %20 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !17
  %26 = sext i32 %22 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !34
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !35
  %54 = bitcast i32 %53 to float, !dbg !35
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !35
  %56 = bitcast i32 %55 to float, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !37
  %60 = getelementptr float, ptr addrspace(1) %12, i64 %26, !dbg !38
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !39
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !39
  %63 = fadd float %40, 0x3EE4F8B580000000, !dbg !40
  %64 = fadd float %42, 0x3EE4F8B580000000, !dbg !40
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %65, 0, !dbg !41
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %66, 0, !dbg !41
  br i1 %.not.i, label %72, label %67, !dbg !41

67:                                               ; preds = %14
  br i1 %.not1.i, label %70, label %68, !dbg !41

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

72:                                               ; preds = %14
  br i1 %.not1.i, label %75, label %73, !dbg !41

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !41
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %77, 0, !dbg !41
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %78, 0, !dbg !41
  br i1 %.not.i1, label %84, label %79, !dbg !41

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !41

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !41

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %80, %82, %85, %87
  %.0.i3 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !41
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %91 = fadd float %54, 0x3EE4F8B580000000, !dbg !43
  %92 = fadd float %56, 0x3EE4F8B580000000, !dbg !43
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %93, 0, !dbg !44
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %94, 0, !dbg !44
  br i1 %.not.i6, label %100, label %95, !dbg !44

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !44

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !44

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %96, %98, %101, %103
  %.0.i8 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !44
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %105, 0, !dbg !44
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %106, 0, !dbg !44
  br i1 %.not.i11, label %112, label %107, !dbg !44

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !44

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !44

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %108, %110, %113, %115
  %.0.i13 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !44
  %117 = extractvalue { i32, i32 } %31, 1, !dbg !21
  %118 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !19
  %119 = insertelement <2 x i32> %118, i32 %34, i64 1, !dbg !19
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !19
  %121 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !25
  %122 = insertelement <2 x i32> %121, i32 %51, i64 1, !dbg !25
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !25
  %124 = extractvalue { i32, i32 } %31, 0, !dbg !21
  %125 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !19
  %126 = insertelement <2 x i32> %125, i32 %33, i64 1, !dbg !19
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !19
  %128 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !25
  %129 = insertelement <2 x i32> %128, i32 %50, i64 1, !dbg !25
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !25
  %131 = extractvalue { i32, i32 } %25, 1, !dbg !17
  %132 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !29
  %133 = insertelement <2 x i32> %132, i32 %59, i64 1, !dbg !29
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !29
  %135 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !31
  %136 = insertelement <2 x i32> %135, i32 %62, i64 1, !dbg !31
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !31
  %138 = extractvalue { i32, i32 } %25, 0, !dbg !17
  %139 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !29
  %140 = insertelement <2 x i32> %139, i32 %58, i64 1, !dbg !29
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !29
  %142 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !31
  %143 = insertelement <2 x i32> %142, i32 %61, i64 1, !dbg !31
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !31
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !45
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !45
  %147 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !17
  %148 = insertelement <2 x i32> %147, i32 %124, i64 1, !dbg !17
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !17
  %150 = fadd <2 x float> %149, %127, !dbg !46
  %151 = fsub <2 x float> %150, %130, !dbg !47
  %152 = insertelement <2 x float> poison, float %89, i64 0, !dbg !48
  %153 = insertelement <2 x float> %152, float %145, i64 1, !dbg !48
  %154 = fmul <2 x float> %151, %153, !dbg !48
  %155 = fmul <2 x float> %154, %141, !dbg !49
  %156 = fadd <2 x float> %155, %144, !dbg !50
  %157 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !17
  %158 = insertelement <2 x i32> %157, i32 %117, i64 1, !dbg !17
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !17
  %160 = fadd <2 x float> %159, %120, !dbg !46
  %161 = fsub <2 x float> %160, %123, !dbg !47
  %162 = insertelement <2 x float> poison, float %90, i64 0, !dbg !48
  %163 = insertelement <2 x float> %162, float %146, i64 1, !dbg !48
  %164 = fmul <2 x float> %161, %163, !dbg !48
  %165 = fmul <2 x float> %164, %134, !dbg !49
  %166 = fadd <2 x float> %165, %137, !dbg !50
  %shift = shufflevector <2 x float> %156, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %167 = fadd <2 x float> %156, %shift, !dbg !51
  %168 = extractelement <2 x float> %167, i64 0, !dbg !51
  %shift16 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %169 = fadd <2 x float> %166, %shift16, !dbg !51
  %170 = extractelement <2 x float> %169, i64 0, !dbg !51
  %171 = fcmp olt float %168, 0.000000e+00, !dbg !52
  %172 = fcmp olt float %170, 0.000000e+00, !dbg !52
  %173 = select i1 %171, float 0.000000e+00, float %168, !dbg !56
  %174 = select i1 %172, float 0.000000e+00, float %170, !dbg !56
  %bc = bitcast <2 x float> %150 to <2 x i32>, !dbg !57
  %175 = extractelement <2 x i32> %bc, i64 0, !dbg !57
  %bc17 = bitcast <2 x float> %160 to <2 x i32>, !dbg !57
  %176 = extractelement <2 x i32> %bc17, i64 0, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %24, i1 true) #3, !dbg !57
  %bc18 = bitcast <2 x float> %150 to <2 x i32>, !dbg !58
  %177 = extractelement <2 x i32> %bc18, i64 1, !dbg !58
  %bc19 = bitcast <2 x float> %160 to <2 x i32>, !dbg !58
  %178 = extractelement <2 x i32> %bc19, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %177, i32 %178, ptr addrspace(1) %30, i1 true) #3, !dbg !58
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !59
  %180 = bitcast float %173 to i32, !dbg !60
  %181 = bitcast float %174 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %180, i32 %181, ptr addrspace(1) %179, i1 true) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cloxb5pz4jwe6i54cextwyl5ojh6xei2wmoobf5pa54jui36nsev.py", directory: "inductor_cache/lo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 27, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 61, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 62, column: 39, scope: !7)
!58 = !DILocation(line: 63, column: 39, scope: !7)
!59 = !DILocation(line: 64, column: 28, scope: !7)
!60 = !DILocation(line: 64, column: 40, scope: !7)
!61 = !DILocation(line: 64, column: 4, scope: !7)
