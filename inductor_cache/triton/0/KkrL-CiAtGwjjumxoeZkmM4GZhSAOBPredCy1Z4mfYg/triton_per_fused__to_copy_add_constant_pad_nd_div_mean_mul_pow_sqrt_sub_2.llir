; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %11, 8, !dbg !12
  %14 = or disjoint i32 %11, 12, !dbg !12
  %15 = or disjoint i32 %11, 16, !dbg !12
  %16 = or disjoint i32 %11, 20, !dbg !12
  %17 = or disjoint i32 %11, 24, !dbg !12
  %18 = or disjoint i32 %11, 28, !dbg !12
  %19 = or disjoint i32 %8, %11, !dbg !13
  %20 = or disjoint i32 %8, %12, !dbg !13
  %21 = or disjoint i32 %8, %13, !dbg !13
  %22 = or disjoint i32 %8, %14, !dbg !13
  %23 = or disjoint i32 %8, %15, !dbg !13
  %24 = or disjoint i32 %8, %16, !dbg !13
  %25 = or disjoint i32 %8, %17, !dbg !13
  %26 = or disjoint i32 %8, %18, !dbg !13
  %27 = icmp slt i32 %19, 64, !dbg !14
  %28 = icmp slt i32 %20, 64, !dbg !14
  %29 = icmp slt i32 %21, 64, !dbg !14
  %30 = icmp slt i32 %22, 64, !dbg !14
  %31 = icmp slt i32 %23, 64, !dbg !14
  %32 = icmp slt i32 %24, 64, !dbg !14
  %33 = icmp slt i32 %25, 64, !dbg !14
  %34 = icmp slt i32 %26, 64, !dbg !14
  %35 = and i32 %9, 63, !dbg !15
  %36 = icmp samesign ult i32 %35, 49, !dbg !16
  %37 = mul i32 %19, 49, !dbg !17
  %38 = mul i32 %20, 49, !dbg !17
  %39 = mul i32 %21, 49, !dbg !17
  %40 = mul i32 %22, 49, !dbg !17
  %41 = mul i32 %23, 49, !dbg !17
  %42 = mul i32 %24, 49, !dbg !17
  %43 = mul i32 %25, 49, !dbg !17
  %44 = mul i32 %26, 49, !dbg !17
  %45 = add i32 %37, %35, !dbg !18
  %46 = add i32 %38, %35, !dbg !18
  %47 = add i32 %39, %35, !dbg !18
  %48 = add i32 %40, %35, !dbg !18
  %49 = add i32 %41, %35, !dbg !18
  %50 = add i32 %42, %35, !dbg !18
  %51 = add i32 %43, %35, !dbg !18
  %52 = add i32 %44, %35, !dbg !18
  %53 = sext i32 %45 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !19
  %55 = sext i32 %46 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !19
  %57 = sext i32 %47 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !19
  %59 = sext i32 %48 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !19
  %61 = sext i32 %49 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !19
  %63 = sext i32 %50 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !19
  %65 = sext i32 %51 to i64, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !19
  %67 = sext i32 %52 to i64, !dbg !19
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !19
  %69 = and i1 %36, %27, !dbg !20
  %70 = and i1 %36, %28, !dbg !20
  %71 = and i1 %36, %29, !dbg !20
  %72 = and i1 %36, %30, !dbg !20
  %73 = and i1 %36, %31, !dbg !20
  %74 = and i1 %36, %32, !dbg !20
  %75 = and i1 %36, %33, !dbg !20
  %76 = and i1 %36, %34, !dbg !20
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %69, i32 0, i1 %69) #5, !dbg !21
  %78 = bitcast i32 %77 to float, !dbg !21
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %70, i32 0, i1 %70) #5, !dbg !21
  %80 = bitcast i32 %79 to float, !dbg !21
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %71, i32 0, i1 %71) #5, !dbg !21
  %82 = bitcast i32 %81 to float, !dbg !21
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %72, i32 0, i1 %72) #5, !dbg !21
  %84 = bitcast i32 %83 to float, !dbg !21
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %73, i32 0, i1 %73) #5, !dbg !21
  %86 = bitcast i32 %85 to float, !dbg !21
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %74, i32 0, i1 %74) #5, !dbg !21
  %88 = bitcast i32 %87 to float, !dbg !21
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %75, i32 0, i1 %75) #5, !dbg !21
  %90 = bitcast i32 %89 to float, !dbg !21
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %76, i32 0, i1 %76) #5, !dbg !21
  %92 = bitcast i32 %91 to float, !dbg !21
  %93 = sext i32 %19 to i64, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !22
  %95 = sext i32 %20 to i64, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !22
  %97 = sext i32 %21 to i64, !dbg !22
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !22
  %99 = sext i32 %22 to i64, !dbg !22
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !22
  %101 = sext i32 %23 to i64, !dbg !22
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !22
  %103 = sext i32 %24 to i64, !dbg !22
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !22
  %105 = sext i32 %25 to i64, !dbg !22
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !22
  %107 = sext i32 %26 to i64, !dbg !22
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !22
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %27) #5, !dbg !23
  %110 = bitcast i32 %109 to float, !dbg !23
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %28) #5, !dbg !23
  %112 = bitcast i32 %111 to float, !dbg !23
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %29) #5, !dbg !23
  %114 = bitcast i32 %113 to float, !dbg !23
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %30) #5, !dbg !23
  %116 = bitcast i32 %115 to float, !dbg !23
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %31) #5, !dbg !23
  %118 = bitcast i32 %117 to float, !dbg !23
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %32) #5, !dbg !23
  %120 = bitcast i32 %119 to float, !dbg !23
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %33) #5, !dbg !23
  %122 = bitcast i32 %121 to float, !dbg !23
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %34) #5, !dbg !23
  %124 = bitcast i32 %123 to float, !dbg !23
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !24
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !24
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !24
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !24
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !24
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !24
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !24
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !24
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %69, i32 0, i1 %69) #5, !dbg !25
  %134 = bitcast i32 %133 to float, !dbg !25
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %70, i32 0, i1 %70) #5, !dbg !25
  %136 = bitcast i32 %135 to float, !dbg !25
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %71, i32 0, i1 %71) #5, !dbg !25
  %138 = bitcast i32 %137 to float, !dbg !25
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %72, i32 0, i1 %72) #5, !dbg !25
  %140 = bitcast i32 %139 to float, !dbg !25
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %73, i32 0, i1 %73) #5, !dbg !25
  %142 = bitcast i32 %141 to float, !dbg !25
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %74, i32 0, i1 %74) #5, !dbg !25
  %144 = bitcast i32 %143 to float, !dbg !25
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %75, i32 0, i1 %75) #5, !dbg !25
  %146 = bitcast i32 %145 to float, !dbg !25
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %76, i32 0, i1 %76) #5, !dbg !25
  %148 = bitcast i32 %147 to float, !dbg !25
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !26
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !26
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !26
  %152 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !26
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !26
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !26
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !26
  %156 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !26
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %27) #5, !dbg !27
  %158 = bitcast i32 %157 to float, !dbg !27
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %28) #5, !dbg !27
  %160 = bitcast i32 %159 to float, !dbg !27
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %29) #5, !dbg !27
  %162 = bitcast i32 %161 to float, !dbg !27
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %30) #5, !dbg !27
  %164 = bitcast i32 %163 to float, !dbg !27
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %31) #5, !dbg !27
  %166 = bitcast i32 %165 to float, !dbg !27
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %32) #5, !dbg !27
  %168 = bitcast i32 %167 to float, !dbg !27
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %33) #5, !dbg !27
  %170 = bitcast i32 %169 to float, !dbg !27
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %34) #5, !dbg !27
  %172 = bitcast i32 %171 to float, !dbg !27
  %173 = fsub float %78, %110, !dbg !28
  %174 = fsub float %80, %112, !dbg !28
  %175 = fsub float %82, %114, !dbg !28
  %176 = fsub float %84, %116, !dbg !28
  %177 = fsub float %86, %118, !dbg !28
  %178 = fsub float %88, %120, !dbg !28
  %179 = fsub float %90, %122, !dbg !28
  %180 = fsub float %92, %124, !dbg !28
  %181 = fmul float %173, %173, !dbg !29
  %182 = fmul float %174, %174, !dbg !29
  %183 = fmul float %175, %175, !dbg !29
  %184 = fmul float %176, %176, !dbg !29
  %185 = fmul float %177, %177, !dbg !29
  %186 = fmul float %178, %178, !dbg !29
  %187 = fmul float %179, %179, !dbg !29
  %188 = fmul float %180, %180, !dbg !29
  %189 = fadd float %181, 0x3FE9EB8520000000, !dbg !30
  %190 = fadd float %182, 0x3FE9EB8520000000, !dbg !30
  %191 = fadd float %183, 0x3FE9EB8520000000, !dbg !30
  %192 = fadd float %184, 0x3FE9EB8520000000, !dbg !30
  %193 = fadd float %185, 0x3FE9EB8520000000, !dbg !30
  %194 = fadd float %186, 0x3FE9EB8520000000, !dbg !30
  %195 = fadd float %187, 0x3FE9EB8520000000, !dbg !30
  %196 = fadd float %188, 0x3FE9EB8520000000, !dbg !30
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %197, 0, !dbg !31
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %198, 0, !dbg !31
  br i1 %.not.i, label %204, label %199, !dbg !31

199:                                              ; preds = %6
  br i1 %.not1.i, label %202, label %200, !dbg !31

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

204:                                              ; preds = %6
  br i1 %.not1.i, label %207, label %205, !dbg !31

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %200, %202, %205, %207
  %.0.i = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !31
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i1 = icmp eq i32 %209, 0, !dbg !31
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i4 = icmp eq i32 %210, 0, !dbg !31
  br i1 %.not.i1, label %216, label %211, !dbg !31

211:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %214, label %212, !dbg !31

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %190) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %190) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

216:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %219, label %217, !dbg !31

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %190) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %190) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %212, %214, %217, %219
  %.0.i3 = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !31
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i6 = icmp eq i32 %221, 0, !dbg !31
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i9 = icmp eq i32 %222, 0, !dbg !31
  br i1 %.not.i6, label %228, label %223, !dbg !31

223:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %226, label %224, !dbg !31

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

228:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %231, label %229, !dbg !31

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %224, %226, %229, %231
  %.0.i8 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !31
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i11 = icmp eq i32 %233, 0, !dbg !31
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i14 = icmp eq i32 %234, 0, !dbg !31
  br i1 %.not.i11, label %240, label %235, !dbg !31

235:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %238, label %236, !dbg !31

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

240:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %243, label %241, !dbg !31

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %236, %238, %241, %243
  %.0.i13 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !31
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i16 = icmp eq i32 %245, 0, !dbg !31
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i19 = icmp eq i32 %246, 0, !dbg !31
  br i1 %.not.i16, label %252, label %247, !dbg !31

247:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %250, label %248, !dbg !31

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

252:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %255, label %253, !dbg !31

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %248, %250, %253, %255
  %.0.i18 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !31
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i21 = icmp eq i32 %257, 0, !dbg !31
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i24 = icmp eq i32 %258, 0, !dbg !31
  br i1 %.not.i21, label %264, label %259, !dbg !31

259:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %262, label %260, !dbg !31

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #5, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #5, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

264:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %267, label %265, !dbg !31

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #5, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #5, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

__nv_sqrtf.exit25:                                ; preds = %260, %262, %265, %267
  %.0.i23 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !31
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i26 = icmp eq i32 %269, 0, !dbg !31
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i29 = icmp eq i32 %270, 0, !dbg !31
  br i1 %.not.i26, label %276, label %271, !dbg !31

271:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %274, label %272, !dbg !31

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #5, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #5, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

276:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %279, label %277, !dbg !31

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #5, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #5, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

__nv_sqrtf.exit30:                                ; preds = %272, %274, %277, %279
  %.0.i28 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !31
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i31 = icmp eq i32 %281, 0, !dbg !31
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i34 = icmp eq i32 %282, 0, !dbg !31
  br i1 %.not.i31, label %288, label %283, !dbg !31

283:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %286, label %284, !dbg !31

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %196) #5, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %196) #5, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

288:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %291, label %289, !dbg !31

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %196) #5, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %196) #5, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %284, %286, %289, %291
  %.0.i33 = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !31
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %.0.i) #5, !dbg !32
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %.0.i3) #5, !dbg !32
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %.0.i8) #5, !dbg !32
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %.0.i13) #5, !dbg !32
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %.0.i18) #5, !dbg !32
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %.0.i23) #5, !dbg !32
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %.0.i28) #5, !dbg !32
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %.0.i33) #5, !dbg !32
  %301 = fsub float %134, %158, !dbg !33
  %302 = fsub float %136, %160, !dbg !33
  %303 = fsub float %138, %162, !dbg !33
  %304 = fsub float %140, %164, !dbg !33
  %305 = fsub float %142, %166, !dbg !33
  %306 = fsub float %144, %168, !dbg !33
  %307 = fsub float %146, %170, !dbg !33
  %308 = fsub float %148, %172, !dbg !33
  %309 = fmul float %301, %301, !dbg !34
  %310 = fmul float %302, %302, !dbg !34
  %311 = fmul float %303, %303, !dbg !34
  %312 = fmul float %304, %304, !dbg !34
  %313 = fmul float %305, %305, !dbg !34
  %314 = fmul float %306, %306, !dbg !34
  %315 = fmul float %307, %307, !dbg !34
  %316 = fmul float %308, %308, !dbg !34
  %317 = fadd float %309, 0x3FE9EB8520000000, !dbg !35
  %318 = fadd float %310, 0x3FE9EB8520000000, !dbg !35
  %319 = fadd float %311, 0x3FE9EB8520000000, !dbg !35
  %320 = fadd float %312, 0x3FE9EB8520000000, !dbg !35
  %321 = fadd float %313, 0x3FE9EB8520000000, !dbg !35
  %322 = fadd float %314, 0x3FE9EB8520000000, !dbg !35
  %323 = fadd float %315, 0x3FE9EB8520000000, !dbg !35
  %324 = fadd float %316, 0x3FE9EB8520000000, !dbg !35
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i36 = icmp eq i32 %325, 0, !dbg !36
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i39 = icmp eq i32 %326, 0, !dbg !36
  br i1 %.not.i36, label %332, label %327, !dbg !36

327:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %330, label %328, !dbg !36

328:                                              ; preds = %327
  %329 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %317) #5, !dbg !36
  br label %__nv_sqrtf.exit40, !dbg !36

330:                                              ; preds = %327
  %331 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %317) #5, !dbg !36
  br label %__nv_sqrtf.exit40, !dbg !36

332:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %335, label %333, !dbg !36

333:                                              ; preds = %332
  %334 = tail call float @llvm.nvvm.sqrt.rn.f(float %317) #5, !dbg !36
  br label %__nv_sqrtf.exit40, !dbg !36

335:                                              ; preds = %332
  %336 = tail call float @llvm.nvvm.sqrt.approx.f(float %317) #5, !dbg !36
  br label %__nv_sqrtf.exit40, !dbg !36

__nv_sqrtf.exit40:                                ; preds = %328, %330, %333, %335
  %.0.i38 = phi float [ %329, %328 ], [ %331, %330 ], [ %334, %333 ], [ %336, %335 ], !dbg !36
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i41 = icmp eq i32 %337, 0, !dbg !36
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i44 = icmp eq i32 %338, 0, !dbg !36
  br i1 %.not.i41, label %344, label %339, !dbg !36

339:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %342, label %340, !dbg !36

340:                                              ; preds = %339
  %341 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %318) #5, !dbg !36
  br label %__nv_sqrtf.exit45, !dbg !36

342:                                              ; preds = %339
  %343 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %318) #5, !dbg !36
  br label %__nv_sqrtf.exit45, !dbg !36

344:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %347, label %345, !dbg !36

345:                                              ; preds = %344
  %346 = tail call float @llvm.nvvm.sqrt.rn.f(float %318) #5, !dbg !36
  br label %__nv_sqrtf.exit45, !dbg !36

347:                                              ; preds = %344
  %348 = tail call float @llvm.nvvm.sqrt.approx.f(float %318) #5, !dbg !36
  br label %__nv_sqrtf.exit45, !dbg !36

__nv_sqrtf.exit45:                                ; preds = %340, %342, %345, %347
  %.0.i43 = phi float [ %341, %340 ], [ %343, %342 ], [ %346, %345 ], [ %348, %347 ], !dbg !36
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i46 = icmp eq i32 %349, 0, !dbg !36
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i49 = icmp eq i32 %350, 0, !dbg !36
  br i1 %.not.i46, label %356, label %351, !dbg !36

351:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %354, label %352, !dbg !36

352:                                              ; preds = %351
  %353 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %319) #5, !dbg !36
  br label %__nv_sqrtf.exit50, !dbg !36

354:                                              ; preds = %351
  %355 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %319) #5, !dbg !36
  br label %__nv_sqrtf.exit50, !dbg !36

356:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %359, label %357, !dbg !36

357:                                              ; preds = %356
  %358 = tail call float @llvm.nvvm.sqrt.rn.f(float %319) #5, !dbg !36
  br label %__nv_sqrtf.exit50, !dbg !36

359:                                              ; preds = %356
  %360 = tail call float @llvm.nvvm.sqrt.approx.f(float %319) #5, !dbg !36
  br label %__nv_sqrtf.exit50, !dbg !36

__nv_sqrtf.exit50:                                ; preds = %352, %354, %357, %359
  %.0.i48 = phi float [ %353, %352 ], [ %355, %354 ], [ %358, %357 ], [ %360, %359 ], !dbg !36
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i51 = icmp eq i32 %361, 0, !dbg !36
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i54 = icmp eq i32 %362, 0, !dbg !36
  br i1 %.not.i51, label %368, label %363, !dbg !36

363:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %366, label %364, !dbg !36

364:                                              ; preds = %363
  %365 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %320) #5, !dbg !36
  br label %__nv_sqrtf.exit55, !dbg !36

366:                                              ; preds = %363
  %367 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %320) #5, !dbg !36
  br label %__nv_sqrtf.exit55, !dbg !36

368:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %371, label %369, !dbg !36

369:                                              ; preds = %368
  %370 = tail call float @llvm.nvvm.sqrt.rn.f(float %320) #5, !dbg !36
  br label %__nv_sqrtf.exit55, !dbg !36

371:                                              ; preds = %368
  %372 = tail call float @llvm.nvvm.sqrt.approx.f(float %320) #5, !dbg !36
  br label %__nv_sqrtf.exit55, !dbg !36

__nv_sqrtf.exit55:                                ; preds = %364, %366, %369, %371
  %.0.i53 = phi float [ %365, %364 ], [ %367, %366 ], [ %370, %369 ], [ %372, %371 ], !dbg !36
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i56 = icmp eq i32 %373, 0, !dbg !36
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i59 = icmp eq i32 %374, 0, !dbg !36
  br i1 %.not.i56, label %380, label %375, !dbg !36

375:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %378, label %376, !dbg !36

376:                                              ; preds = %375
  %377 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %321) #5, !dbg !36
  br label %__nv_sqrtf.exit60, !dbg !36

378:                                              ; preds = %375
  %379 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %321) #5, !dbg !36
  br label %__nv_sqrtf.exit60, !dbg !36

380:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %383, label %381, !dbg !36

381:                                              ; preds = %380
  %382 = tail call float @llvm.nvvm.sqrt.rn.f(float %321) #5, !dbg !36
  br label %__nv_sqrtf.exit60, !dbg !36

383:                                              ; preds = %380
  %384 = tail call float @llvm.nvvm.sqrt.approx.f(float %321) #5, !dbg !36
  br label %__nv_sqrtf.exit60, !dbg !36

__nv_sqrtf.exit60:                                ; preds = %376, %378, %381, %383
  %.0.i58 = phi float [ %377, %376 ], [ %379, %378 ], [ %382, %381 ], [ %384, %383 ], !dbg !36
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i61 = icmp eq i32 %385, 0, !dbg !36
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i64 = icmp eq i32 %386, 0, !dbg !36
  br i1 %.not.i61, label %392, label %387, !dbg !36

387:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %390, label %388, !dbg !36

388:                                              ; preds = %387
  %389 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %322) #5, !dbg !36
  br label %__nv_sqrtf.exit65, !dbg !36

390:                                              ; preds = %387
  %391 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %322) #5, !dbg !36
  br label %__nv_sqrtf.exit65, !dbg !36

392:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %395, label %393, !dbg !36

393:                                              ; preds = %392
  %394 = tail call float @llvm.nvvm.sqrt.rn.f(float %322) #5, !dbg !36
  br label %__nv_sqrtf.exit65, !dbg !36

395:                                              ; preds = %392
  %396 = tail call float @llvm.nvvm.sqrt.approx.f(float %322) #5, !dbg !36
  br label %__nv_sqrtf.exit65, !dbg !36

__nv_sqrtf.exit65:                                ; preds = %388, %390, %393, %395
  %.0.i63 = phi float [ %389, %388 ], [ %391, %390 ], [ %394, %393 ], [ %396, %395 ], !dbg !36
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i66 = icmp eq i32 %397, 0, !dbg !36
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i69 = icmp eq i32 %398, 0, !dbg !36
  br i1 %.not.i66, label %404, label %399, !dbg !36

399:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %402, label %400, !dbg !36

400:                                              ; preds = %399
  %401 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %323) #5, !dbg !36
  br label %__nv_sqrtf.exit70, !dbg !36

402:                                              ; preds = %399
  %403 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %323) #5, !dbg !36
  br label %__nv_sqrtf.exit70, !dbg !36

404:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %407, label %405, !dbg !36

405:                                              ; preds = %404
  %406 = tail call float @llvm.nvvm.sqrt.rn.f(float %323) #5, !dbg !36
  br label %__nv_sqrtf.exit70, !dbg !36

407:                                              ; preds = %404
  %408 = tail call float @llvm.nvvm.sqrt.approx.f(float %323) #5, !dbg !36
  br label %__nv_sqrtf.exit70, !dbg !36

__nv_sqrtf.exit70:                                ; preds = %400, %402, %405, %407
  %.0.i68 = phi float [ %401, %400 ], [ %403, %402 ], [ %406, %405 ], [ %408, %407 ], !dbg !36
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i71 = icmp eq i32 %409, 0, !dbg !36
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i74 = icmp eq i32 %410, 0, !dbg !36
  br i1 %.not.i71, label %416, label %411, !dbg !36

411:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %414, label %412, !dbg !36

412:                                              ; preds = %411
  %413 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %324) #5, !dbg !36
  br label %__nv_sqrtf.exit75, !dbg !36

414:                                              ; preds = %411
  %415 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %324) #5, !dbg !36
  br label %__nv_sqrtf.exit75, !dbg !36

416:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %419, label %417, !dbg !36

417:                                              ; preds = %416
  %418 = tail call float @llvm.nvvm.sqrt.rn.f(float %324) #5, !dbg !36
  br label %__nv_sqrtf.exit75, !dbg !36

419:                                              ; preds = %416
  %420 = tail call float @llvm.nvvm.sqrt.approx.f(float %324) #5, !dbg !36
  br label %__nv_sqrtf.exit75, !dbg !36

__nv_sqrtf.exit75:                                ; preds = %412, %414, %417, %419
  %.0.i73 = phi float [ %413, %412 ], [ %415, %414 ], [ %418, %417 ], [ %420, %419 ], !dbg !36
  %421 = and i32 %9, 31, !dbg !12
  %422 = or disjoint i32 %8, %421, !dbg !13
  %423 = sext i32 %422 to i64, !dbg !22
  %424 = getelementptr float, ptr addrspace(1) %0, i64 %423, !dbg !22
  %425 = sdiv i32 %422, 4, !dbg !37
  %426 = icmp slt i32 %422, 64, !dbg !14
  %427 = lshr i32 %9, 5, !dbg !12
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float %.0.i38) #5, !dbg !38
  %429 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %302, float %.0.i43) #5, !dbg !38
  %430 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %.0.i48) #5, !dbg !38
  %431 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float %.0.i53) #5, !dbg !38
  %432 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float %.0.i58) #5, !dbg !38
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %.0.i63) #5, !dbg !38
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %.0.i68) #5, !dbg !38
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %.0.i73) #5, !dbg !38
  %436 = fsub float %293, %428, !dbg !39
  %437 = fsub float %294, %429, !dbg !39
  %438 = fsub float %295, %430, !dbg !39
  %439 = fsub float %296, %431, !dbg !39
  %440 = fsub float %297, %432, !dbg !39
  %441 = fsub float %298, %433, !dbg !39
  %442 = fsub float %299, %434, !dbg !39
  %443 = fsub float %300, %435, !dbg !39
  %444 = fmul float %436, %436, !dbg !40
  %445 = fmul float %437, %437, !dbg !40
  %446 = fmul float %438, %438, !dbg !40
  %447 = fmul float %439, %439, !dbg !40
  %448 = fmul float %440, %440, !dbg !40
  %449 = fmul float %441, %441, !dbg !40
  %450 = fmul float %442, %442, !dbg !40
  %451 = fmul float %443, %443, !dbg !40
  %452 = fadd float %444, 0x3FB99999A0000000, !dbg !41
  %453 = fadd float %445, 0x3FB99999A0000000, !dbg !41
  %454 = fadd float %446, 0x3FB99999A0000000, !dbg !41
  %455 = fadd float %447, 0x3FB99999A0000000, !dbg !41
  %456 = fadd float %448, 0x3FB99999A0000000, !dbg !41
  %457 = fadd float %449, 0x3FB99999A0000000, !dbg !41
  %458 = fadd float %450, 0x3FB99999A0000000, !dbg !41
  %459 = fadd float %451, 0x3FB99999A0000000, !dbg !41
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %444, float %452) #5, !dbg !42
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %445, float %453) #5, !dbg !42
  %462 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %446, float %454) #5, !dbg !42
  %463 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %447, float %455) #5, !dbg !42
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %448, float %456) #5, !dbg !42
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %449, float %457) #5, !dbg !42
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float %458) #5, !dbg !42
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %451, float %459) #5, !dbg !42
  %468 = select i1 %69, float %460, float 0.000000e+00, !dbg !43
  %469 = select i1 %70, float %461, float 0.000000e+00, !dbg !43
  %470 = select i1 %71, float %462, float 0.000000e+00, !dbg !43
  %471 = select i1 %72, float %463, float 0.000000e+00, !dbg !43
  %472 = select i1 %73, float %464, float 0.000000e+00, !dbg !43
  %473 = select i1 %74, float %465, float 0.000000e+00, !dbg !43
  %474 = select i1 %75, float %466, float 0.000000e+00, !dbg !43
  %475 = select i1 %76, float %467, float 0.000000e+00, !dbg !43
  %476 = bitcast float %468 to i32, !dbg !44
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 16, i32 31), !dbg !44
  %478 = bitcast i32 %477 to float, !dbg !44
  %479 = fadd float %468, %478, !dbg !48
  %480 = bitcast float %479 to i32, !dbg !44
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 8, i32 31), !dbg !44
  %482 = bitcast i32 %481 to float, !dbg !44
  %483 = fadd float %479, %482, !dbg !48
  %484 = bitcast float %483 to i32, !dbg !44
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 4, i32 31), !dbg !44
  %486 = bitcast i32 %485 to float, !dbg !44
  %487 = fadd float %483, %486, !dbg !48
  %488 = bitcast float %487 to i32, !dbg !44
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %488, i32 2, i32 31), !dbg !44
  %490 = bitcast i32 %489 to float, !dbg !44
  %491 = fadd float %487, %490, !dbg !48
  %492 = bitcast float %491 to i32, !dbg !44
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 1, i32 31), !dbg !44
  %494 = bitcast i32 %493 to float, !dbg !44
  %495 = fadd float %491, %494, !dbg !48
  %496 = bitcast float %469 to i32, !dbg !44
  %497 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %496, i32 16, i32 31), !dbg !44
  %498 = bitcast i32 %497 to float, !dbg !44
  %499 = fadd float %469, %498, !dbg !48
  %500 = bitcast float %499 to i32, !dbg !44
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 8, i32 31), !dbg !44
  %502 = bitcast i32 %501 to float, !dbg !44
  %503 = fadd float %499, %502, !dbg !48
  %504 = bitcast float %503 to i32, !dbg !44
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 4, i32 31), !dbg !44
  %506 = bitcast i32 %505 to float, !dbg !44
  %507 = fadd float %503, %506, !dbg !48
  %508 = bitcast float %507 to i32, !dbg !44
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 2, i32 31), !dbg !44
  %510 = bitcast i32 %509 to float, !dbg !44
  %511 = fadd float %507, %510, !dbg !48
  %512 = bitcast float %511 to i32, !dbg !44
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 1, i32 31), !dbg !44
  %514 = bitcast i32 %513 to float, !dbg !44
  %515 = fadd float %511, %514, !dbg !48
  %516 = bitcast float %470 to i32, !dbg !44
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 16, i32 31), !dbg !44
  %518 = bitcast i32 %517 to float, !dbg !44
  %519 = fadd float %470, %518, !dbg !48
  %520 = bitcast float %519 to i32, !dbg !44
  %521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 8, i32 31), !dbg !44
  %522 = bitcast i32 %521 to float, !dbg !44
  %523 = fadd float %519, %522, !dbg !48
  %524 = bitcast float %523 to i32, !dbg !44
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 4, i32 31), !dbg !44
  %526 = bitcast i32 %525 to float, !dbg !44
  %527 = fadd float %523, %526, !dbg !48
  %528 = bitcast float %527 to i32, !dbg !44
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 2, i32 31), !dbg !44
  %530 = bitcast i32 %529 to float, !dbg !44
  %531 = fadd float %527, %530, !dbg !48
  %532 = bitcast float %531 to i32, !dbg !44
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 1, i32 31), !dbg !44
  %534 = bitcast i32 %533 to float, !dbg !44
  %535 = fadd float %531, %534, !dbg !48
  %536 = bitcast float %471 to i32, !dbg !44
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 16, i32 31), !dbg !44
  %538 = bitcast i32 %537 to float, !dbg !44
  %539 = fadd float %471, %538, !dbg !48
  %540 = bitcast float %539 to i32, !dbg !44
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 8, i32 31), !dbg !44
  %542 = bitcast i32 %541 to float, !dbg !44
  %543 = fadd float %539, %542, !dbg !48
  %544 = bitcast float %543 to i32, !dbg !44
  %545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 4, i32 31), !dbg !44
  %546 = bitcast i32 %545 to float, !dbg !44
  %547 = fadd float %543, %546, !dbg !48
  %548 = bitcast float %547 to i32, !dbg !44
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 2, i32 31), !dbg !44
  %550 = bitcast i32 %549 to float, !dbg !44
  %551 = fadd float %547, %550, !dbg !48
  %552 = bitcast float %551 to i32, !dbg !44
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 1, i32 31), !dbg !44
  %554 = bitcast i32 %553 to float, !dbg !44
  %555 = fadd float %551, %554, !dbg !48
  %556 = bitcast float %472 to i32, !dbg !44
  %557 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %556, i32 16, i32 31), !dbg !44
  %558 = bitcast i32 %557 to float, !dbg !44
  %559 = fadd float %472, %558, !dbg !48
  %560 = bitcast float %559 to i32, !dbg !44
  %561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 8, i32 31), !dbg !44
  %562 = bitcast i32 %561 to float, !dbg !44
  %563 = fadd float %559, %562, !dbg !48
  %564 = bitcast float %563 to i32, !dbg !44
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 4, i32 31), !dbg !44
  %566 = bitcast i32 %565 to float, !dbg !44
  %567 = fadd float %563, %566, !dbg !48
  %568 = bitcast float %567 to i32, !dbg !44
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 2, i32 31), !dbg !44
  %570 = bitcast i32 %569 to float, !dbg !44
  %571 = fadd float %567, %570, !dbg !48
  %572 = bitcast float %571 to i32, !dbg !44
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 1, i32 31), !dbg !44
  %574 = bitcast i32 %573 to float, !dbg !44
  %575 = fadd float %571, %574, !dbg !48
  %576 = bitcast float %473 to i32, !dbg !44
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 16, i32 31), !dbg !44
  %578 = bitcast i32 %577 to float, !dbg !44
  %579 = fadd float %473, %578, !dbg !48
  %580 = bitcast float %579 to i32, !dbg !44
  %581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %580, i32 8, i32 31), !dbg !44
  %582 = bitcast i32 %581 to float, !dbg !44
  %583 = fadd float %579, %582, !dbg !48
  %584 = bitcast float %583 to i32, !dbg !44
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 4, i32 31), !dbg !44
  %586 = bitcast i32 %585 to float, !dbg !44
  %587 = fadd float %583, %586, !dbg !48
  %588 = bitcast float %587 to i32, !dbg !44
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !44
  %590 = bitcast i32 %589 to float, !dbg !44
  %591 = fadd float %587, %590, !dbg !48
  %592 = bitcast float %591 to i32, !dbg !44
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 1, i32 31), !dbg !44
  %594 = bitcast i32 %593 to float, !dbg !44
  %595 = fadd float %591, %594, !dbg !48
  %596 = bitcast float %474 to i32, !dbg !44
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 16, i32 31), !dbg !44
  %598 = bitcast i32 %597 to float, !dbg !44
  %599 = fadd float %474, %598, !dbg !48
  %600 = bitcast float %599 to i32, !dbg !44
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 8, i32 31), !dbg !44
  %602 = bitcast i32 %601 to float, !dbg !44
  %603 = fadd float %599, %602, !dbg !48
  %604 = bitcast float %603 to i32, !dbg !44
  %605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %604, i32 4, i32 31), !dbg !44
  %606 = bitcast i32 %605 to float, !dbg !44
  %607 = fadd float %603, %606, !dbg !48
  %608 = bitcast float %607 to i32, !dbg !44
  %609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %608, i32 2, i32 31), !dbg !44
  %610 = bitcast i32 %609 to float, !dbg !44
  %611 = fadd float %607, %610, !dbg !48
  %612 = bitcast float %611 to i32, !dbg !44
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 1, i32 31), !dbg !44
  %614 = bitcast i32 %613 to float, !dbg !44
  %615 = fadd float %611, %614, !dbg !48
  %616 = bitcast float %475 to i32, !dbg !44
  %617 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %616, i32 16, i32 31), !dbg !44
  %618 = bitcast i32 %617 to float, !dbg !44
  %619 = fadd float %475, %618, !dbg !48
  %620 = bitcast float %619 to i32, !dbg !44
  %621 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %620, i32 8, i32 31), !dbg !44
  %622 = bitcast i32 %621 to float, !dbg !44
  %623 = fadd float %619, %622, !dbg !48
  %624 = bitcast float %623 to i32, !dbg !44
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 4, i32 31), !dbg !44
  %626 = bitcast i32 %625 to float, !dbg !44
  %627 = fadd float %623, %626, !dbg !48
  %628 = bitcast float %627 to i32, !dbg !44
  %629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %628, i32 2, i32 31), !dbg !44
  %630 = bitcast i32 %629 to float, !dbg !44
  %631 = fadd float %627, %630, !dbg !48
  %632 = bitcast float %631 to i32, !dbg !44
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 1, i32 31), !dbg !44
  %634 = bitcast i32 %633 to float, !dbg !44
  %635 = fadd float %631, %634, !dbg !48
  %636 = icmp eq i32 %421, 0, !dbg !44
  %637 = and i32 %427, 1, !dbg !44
  %638 = shl nuw nsw i32 %11, 1, !dbg !44
  %639 = or disjoint i32 %638, %637, !dbg !44
  %640 = getelementptr float, ptr addrspace(3) @global_smem, i32 %639, !dbg !44
  %641 = bitcast float %495 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %640, <1 x i32> %641, i1 %636) #5, !dbg !44
  %642 = shl nuw nsw i32 %12, 1, !dbg !44
  %643 = or disjoint i32 %642, %637, !dbg !44
  %644 = getelementptr float, ptr addrspace(3) @global_smem, i32 %643, !dbg !44
  %645 = bitcast float %515 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %645, i1 %636) #5, !dbg !44
  %646 = shl nuw nsw i32 %13, 1, !dbg !44
  %647 = or disjoint i32 %646, %637, !dbg !44
  %648 = getelementptr float, ptr addrspace(3) @global_smem, i32 %647, !dbg !44
  %649 = bitcast float %535 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %648, <1 x i32> %649, i1 %636) #5, !dbg !44
  %650 = shl nuw nsw i32 %14, 1, !dbg !44
  %651 = or disjoint i32 %650, %637, !dbg !44
  %652 = getelementptr float, ptr addrspace(3) @global_smem, i32 %651, !dbg !44
  %653 = bitcast float %555 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %652, <1 x i32> %653, i1 %636) #5, !dbg !44
  %654 = shl nuw nsw i32 %15, 1, !dbg !44
  %655 = or disjoint i32 %654, %637, !dbg !44
  %656 = getelementptr float, ptr addrspace(3) @global_smem, i32 %655, !dbg !44
  %657 = bitcast float %575 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %656, <1 x i32> %657, i1 %636) #5, !dbg !44
  %658 = shl nuw nsw i32 %16, 1, !dbg !44
  %659 = or disjoint i32 %658, %637, !dbg !44
  %660 = getelementptr float, ptr addrspace(3) @global_smem, i32 %659, !dbg !44
  %661 = bitcast float %595 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %660, <1 x i32> %661, i1 %636) #5, !dbg !44
  %662 = shl nuw nsw i32 %17, 1, !dbg !44
  %663 = or disjoint i32 %662, %637, !dbg !44
  %664 = getelementptr float, ptr addrspace(3) @global_smem, i32 %663, !dbg !44
  %665 = bitcast float %615 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %664, <1 x i32> %665, i1 %636) #5, !dbg !44
  %666 = shl nuw nsw i32 %18, 1, !dbg !44
  %667 = or disjoint i32 %666, %637, !dbg !44
  %668 = getelementptr float, ptr addrspace(3) @global_smem, i32 %667, !dbg !44
  %669 = bitcast float %635 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %668, <1 x i32> %669, i1 %636) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %670 = icmp slt i32 %9, 64, !dbg !44
  %671 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !44
  %672 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %671, i1 %670) #5, !dbg !44
  %673 = bitcast i32 %672 to float, !dbg !44
  %674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %672, i32 1, i32 31), !dbg !44
  %675 = bitcast i32 %674 to float, !dbg !44
  %676 = fadd float %673, %675, !dbg !48
  %677 = and i32 %9, 1, !dbg !44
  %678 = icmp eq i32 %677, 0, !dbg !44
  %679 = and i1 %670, %678, !dbg !44
  %680 = bitcast float %676 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %671, <1 x i32> %680, i1 %679) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %681 = getelementptr float, ptr addrspace(3) @global_smem, i32 %638, !dbg !44
  %682 = load i32, ptr addrspace(3) %681, align 8, !dbg !44
  %683 = getelementptr float, ptr addrspace(3) @global_smem, i32 %642, !dbg !44
  %684 = load i32, ptr addrspace(3) %683, align 8, !dbg !44
  %685 = getelementptr float, ptr addrspace(3) @global_smem, i32 %646, !dbg !44
  %686 = load i32, ptr addrspace(3) %685, align 8, !dbg !44
  %687 = getelementptr float, ptr addrspace(3) @global_smem, i32 %650, !dbg !44
  %688 = load i32, ptr addrspace(3) %687, align 8, !dbg !44
  %689 = getelementptr float, ptr addrspace(3) @global_smem, i32 %654, !dbg !44
  %690 = load i32, ptr addrspace(3) %689, align 8, !dbg !44
  %691 = getelementptr float, ptr addrspace(3) @global_smem, i32 %658, !dbg !44
  %692 = load i32, ptr addrspace(3) %691, align 8, !dbg !44
  %693 = getelementptr float, ptr addrspace(3) @global_smem, i32 %662, !dbg !44
  %694 = load i32, ptr addrspace(3) %693, align 8, !dbg !44
  %695 = getelementptr float, ptr addrspace(3) @global_smem, i32 %666, !dbg !44
  %696 = load i32, ptr addrspace(3) %695, align 8, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %697 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !50
  %698 = insertelement <1 x i32> poison, i32 %682, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %697, <1 x i32> %698, i1 true) #5, !dbg !50
  %699 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !50
  %700 = insertelement <1 x i32> poison, i32 %684, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %699, <1 x i32> %700, i1 true) #5, !dbg !50
  %701 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !50
  %702 = insertelement <1 x i32> poison, i32 %686, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %701, <1 x i32> %702, i1 true) #5, !dbg !50
  %703 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !50
  %704 = insertelement <1 x i32> poison, i32 %688, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %703, <1 x i32> %704, i1 true) #5, !dbg !50
  %705 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !50
  %706 = insertelement <1 x i32> poison, i32 %690, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %705, <1 x i32> %706, i1 true) #5, !dbg !50
  %707 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !50
  %708 = insertelement <1 x i32> poison, i32 %692, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %707, <1 x i32> %708, i1 true) #5, !dbg !50
  %709 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !50
  %710 = insertelement <1 x i32> poison, i32 %694, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %709, <1 x i32> %710, i1 true) #5, !dbg !50
  %711 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !50
  %712 = insertelement <1 x i32> poison, i32 %696, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %711, <1 x i32> %712, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %713 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %421, !dbg !50
  %714 = load float, ptr addrspace(3) %713, align 4, !dbg !50
  %715 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %714, float 4.900000e+01) #5, !dbg !51
  %716 = insertelement <2 x i32> poison, i32 %425, i64 0, !dbg !52
  %717 = insertelement <2 x i32> %716, i32 %422, i64 1, !dbg !52
  %718 = srem <2 x i32> %717, splat (i32 4), !dbg !52
  %719 = add nsw <2 x i32> %718, splat (i32 -1), !dbg !53
  %shift = shufflevector <2 x i32> %719, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %720 = or <2 x i32> %719, %shift, !dbg !54
  %721 = extractelement <2 x i32> %720, i64 0, !dbg !54
  %722 = icmp ult i32 %721, 2, !dbg !54
  %723 = select i1 %722, float 1.000000e+00, float 0.000000e+00, !dbg !55
  %724 = fmul float %723, %715, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %725 = and i32 %9, 224, !dbg !57
  %726 = icmp eq i32 %725, 0, !dbg !57
  %727 = bitcast float %724 to i32, !dbg !57
  %728 = and i1 %726, %426, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %727, ptr addrspace(1) %424, i1 %728) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwldc62iqaby26q37j7jjhuqosonl5fs72na2tz7sa6to54usdtc.py", directory: "inductor_cache/wl")
!4 = !{ptr @triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2", linkageName: "triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 33, column: 38, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 43, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 27, scope: !7)
!37 = !DILocation(line: 31, column: 21, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 19, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 43, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = !DILocation(line: 55, column: 26, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!50 = !DILocation(line: 72, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 31, column: 26, scope: !7)
!53 = !DILocation(line: 66, column: 20, scope: !7)
!54 = !DILocation(line: 68, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 35, scope: !7)
!56 = !DILocation(line: 73, column: 4, scope: !7)
!57 = !DILocation(line: 74, column: 40, scope: !7)
!58 = !DILocation(line: 74, column: 4, scope: !7)
