; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = shl i32 %14, 3, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = lshr i32 %16, 3, !dbg !12
  %18 = and i32 %17, 7, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 256, !dbg !14
  %21 = shl i32 %16, 1, !dbg !15
  %22 = and i32 %21, 14, !dbg !15
  %23 = srem i32 %19, 64, !dbg !16
  %24 = shl i32 %19, 4, !dbg !17
  %25 = or disjoint i32 %24, %22, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !20
  %29 = sext i32 %23 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %20) #5, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %20) #5, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %20) #5, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %20) #5, !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #5, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #5, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #5, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #5, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !31
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %20) #5, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %20) #5, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #5, !dbg !36
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #5, !dbg !36
  %54 = bitcast i32 %53 to float, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !37
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %20) #5, !dbg !38
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %20) #5, !dbg !38
  %58 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !39
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !40
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !40
  %61 = fadd float %39, 0x3EE4F8B580000000, !dbg !41
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i1 = icmp eq i32 %64, 0, !dbg !42
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i4 = icmp eq i32 %65, 0, !dbg !42
  br i1 %.not.i1, label %71, label %66, !dbg !42

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !42

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !42

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %67, %69, %72, %74
  %.0.i3 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !42
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !43
  %77 = fadd float %54, 0x3EE4F8B580000000, !dbg !44
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i11 = icmp eq i32 %80, 0, !dbg !45
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %.not1.i14 = icmp eq i32 %81, 0, !dbg !45
  br i1 %.not.i11, label %87, label %82, !dbg !45

82:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i14, label %85, label %83, !dbg !45

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #5, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #5, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

87:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i14, label %90, label %88, !dbg !45

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #5, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #5, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

__nv_sqrtf.exit15:                                ; preds = %83, %85, %88, %90
  %.0.i13 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !45
  %92 = extractvalue { i32, i32 } %47, 1, !dbg !32
  %93 = bitcast i32 %92 to float, !dbg !32
  %94 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !34
  %95 = insertelement <2 x i32> %94, i32 %50, i64 1, !dbg !34
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !34
  %97 = extractvalue { i32, i32 } %47, 0, !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = extractvalue { i32, i32 } %28, 1, !dbg !20
  %100 = bitcast i32 %99 to float, !dbg !20
  %101 = bitcast i32 %32 to float, !dbg !22
  %102 = fadd float %100, %101, !dbg !46
  %103 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !38
  %104 = insertelement <2 x i32> %103, i32 %57, i64 1, !dbg !38
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !38
  %106 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !40
  %107 = insertelement <2 x i32> %106, i32 %60, i64 1, !dbg !40
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !40
  %109 = extractvalue { i32, i32 } %28, 0, !dbg !20
  %110 = bitcast i32 %109 to float, !dbg !20
  %111 = fadd float %110, %101, !dbg !46
  %112 = and i32 %16, 7, !dbg !12
  %113 = or disjoint i32 %15, %112, !dbg !13
  %114 = icmp slt i32 %113, 256, !dbg !14
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !47
  %116 = insertelement <2 x float> poison, float %102, i64 0, !dbg !48
  %117 = insertelement <2 x float> %116, float %98, i64 1, !dbg !48
  %118 = fsub <2 x float> %117, %96, !dbg !48
  %119 = insertelement <2 x float> poison, float %111, i64 0, !dbg !49
  %120 = insertelement <2 x float> %119, float %93, i64 1, !dbg !49
  %121 = fsub <2 x float> %120, %96, !dbg !49
  %122 = insertelement <2 x float> poison, float %76, i64 0, !dbg !50
  %123 = insertelement <2 x float> %122, float %115, i64 1, !dbg !50
  %124 = fmul <2 x float> %118, %123, !dbg !50
  %125 = fmul <2 x float> %121, %123, !dbg !51
  %126 = fmul <2 x float> %124, %105, !dbg !52
  %127 = fmul <2 x float> %125, %105, !dbg !53
  %128 = fadd <2 x float> %126, %108, !dbg !54
  %129 = fadd <2 x float> %127, %108, !dbg !55
  %130 = shufflevector <2 x float> %129, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !55
  %131 = fadd <2 x float> %128, %130, !dbg !56
  %132 = fcmp olt <2 x float> %131, zeroinitializer, !dbg !57
  %133 = select <2 x i1> %132, <2 x float> zeroinitializer, <2 x float> %131, !dbg !61
  %shift = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %134 = fadd <2 x float> %shift, %133, !dbg !62
  %135 = extractelement <2 x float> %134, i64 0, !dbg !62
  %136 = select i1 %20, float %135, float 0.000000e+00, !dbg !62
  %137 = bitcast float %136 to i32, !dbg !67
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 4, i32 31), !dbg !67
  %139 = bitcast i32 %138 to float, !dbg !67
  %140 = fadd float %136, %139, !dbg !62
  %141 = bitcast float %140 to i32, !dbg !67
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !67
  %143 = bitcast i32 %142 to float, !dbg !67
  %144 = fadd float %140, %143, !dbg !62
  %145 = bitcast float %144 to i32, !dbg !67
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !67
  %147 = bitcast i32 %146 to float, !dbg !67
  %148 = fadd float %144, %147, !dbg !62
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !68
  %150 = bitcast float %148 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !68
  %152 = load float, ptr addrspace(3) %151, align 4, !dbg !68
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 1.600000e+01) #5, !dbg !68
  %154 = bitcast float %111 to i32, !dbg !69
  %155 = bitcast float %102 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %27, i1 %20) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %156 = sext i32 %113 to i64, !dbg !71
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !71
  %158 = and i32 %16, 56, !dbg !72
  %159 = icmp eq i32 %158, 0, !dbg !72
  %160 = bitcast float %153 to i32, !dbg !72
  %161 = and i1 %159, %114, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %157, i1 %161) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqysvunu2gkgb2k5yox4knuxxjuqrovcgn4f5tfldn5sajg5cked.py", directory: "inductor_cache/qy")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 44, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 36, scope: !7)
!41 = !DILocation(line: 46, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 26, scope: !7)
!43 = !DILocation(line: 49, column: 19, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 27, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 58, column: 19, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 44, column: 18, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 19, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 54, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 65, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!62 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !66)
!63 = distinct !DILexicalBlockFile(scope: !65, file: !64, discriminator: 0)
!64 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!65 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!66 = !DILocation(line: 68, column: 26, scope: !7)
!67 = !DILocation(line: 267, column: 36, scope: !65, inlinedAt: !66)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 47, scope: !7)
!70 = !DILocation(line: 72, column: 4, scope: !7)
!71 = !DILocation(line: 73, column: 28, scope: !7)
!72 = !DILocation(line: 73, column: 40, scope: !7)
!73 = !DILocation(line: 73, column: 4, scope: !7)
